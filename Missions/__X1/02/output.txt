// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11161 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29533 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29533 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11101
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10337: LD_ADDR_VAR 0 1
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 23
10354: PUSH
10355: LD_INT 0
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 69
10370: ST_TO_ADDR
// InGameOn ;
10371: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10375: LD_VAR 0 1
10379: PPUSH
10380: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10384: LD_VAR 0 1
10388: PPUSH
10389: LD_EXP 27
10393: PPUSH
10394: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10398: LD_EXP 27
10402: PPUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 119
// wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10419: LD_EXP 27
10423: PPUSH
10424: LD_STRING DA-1-tame-a
10426: PPUSH
10427: CALL_OW 88
// if IsOk ( Mike ) then
10431: LD_EXP 25
10435: PPUSH
10436: CALL_OW 302
10440: IFFALSE 10478
// begin Say ( Mike , DM-1-tame-a ) ;
10442: LD_EXP 25
10446: PPUSH
10447: LD_STRING DM-1-tame-a
10449: PPUSH
10450: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10454: LD_EXP 29
10458: PPUSH
10459: LD_STRING DS-1-tame-a
10461: PPUSH
10462: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10466: LD_EXP 25
10470: PPUSH
10471: LD_STRING DM-2-tame-a
10473: PPUSH
10474: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10478: LD_INT 105
10480: PPUSH
10481: CALL_OW 67
// PrepareFarmer ;
10485: CALL 11776 0 0
// CenterOnUnits ( Farmer ) ;
10489: LD_EXP 31
10493: PPUSH
10494: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10498: LD_EXP 31
10502: PPUSH
10503: LD_INT 105
10505: PPUSH
10506: LD_INT 59
10508: PPUSH
10509: CALL_OW 111
// AddComHold ( Farmer ) ;
10513: LD_EXP 31
10517: PPUSH
10518: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10522: LD_EXP 31
10526: PPUSH
10527: LD_STRING DF-1-end
10529: PPUSH
10530: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10534: LD_EXP 27
10538: PPUSH
10539: LD_STRING DA-1-end
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10546: LD_EXP 31
10550: PPUSH
10551: LD_STRING DF-2-end
10553: PPUSH
10554: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10558: LD_EXP 27
10562: PPUSH
10563: LD_STRING DA-2-end
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10570: LD_EXP 31
10574: PPUSH
10575: LD_STRING DF-3-end
10577: PPUSH
10578: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10582: LD_EXP 23
10586: PPUSH
10587: LD_STRING DH-3-end
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10594: LD_EXP 31
10598: PPUSH
10599: LD_STRING DF-4-end
10601: PPUSH
10602: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10606: LD_OWVAR 1
10610: PUSH
10611: LD_INT 52500
10613: PUSH
10614: LD_INT 47250
10616: PUSH
10617: LD_INT 42000
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_OWVAR 67
10629: ARRAY
10630: LESSEQUAL
10631: IFFALSE 10645
// AddMedal ( med1 , 1 ) else
10633: LD_STRING med1
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 101
10643: GO 10656
// AddMedal ( med1 , - 1 ) ;
10645: LD_STRING med1
10647: PPUSH
10648: LD_INT 1
10650: NEG
10651: PPUSH
10652: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10656: LD_INT 22
10658: PUSH
10659: LD_INT 1
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 4
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_INT 0
10687: EQUAL
10688: PUSH
10689: LD_EXP 12
10693: NOT
10694: AND
10695: IFFALSE 10709
// AddMedal ( med2 , 1 ) else
10697: LD_STRING med2
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 101
10707: GO 10720
// AddMedal ( med2 , - 1 ) ;
10709: LD_STRING med2
10711: PPUSH
10712: LD_INT 1
10714: NEG
10715: PPUSH
10716: CALL_OW 101
// if trickyMove then
10720: LD_EXP 15
10724: IFFALSE 10738
// AddMedal ( med3 , 1 ) else
10726: LD_STRING med3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 101
10736: GO 10768
// if spottedBeforeRadio then
10738: LD_EXP 6
10742: IFFALSE 10757
// AddMedal ( med3 , - 2 ) else
10744: LD_STRING med3
10746: PPUSH
10747: LD_INT 2
10749: NEG
10750: PPUSH
10751: CALL_OW 101
10755: GO 10768
// AddMedal ( med3 , - 1 ) ;
10757: LD_STRING med3
10759: PPUSH
10760: LD_INT 1
10762: NEG
10763: PPUSH
10764: CALL_OW 101
// GiveMedals ( MAIN ) ;
10768: LD_STRING MAIN
10770: PPUSH
10771: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: LD_STRING 02_ape
10782: PPUSH
10783: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 23
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 21
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PPUSH
10827: CALL_OW 69
10831: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10832: LD_VAR 0 1
10836: PPUSH
10837: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10841: LD_EXP 23
10845: PPUSH
10846: LD_STRING 02_Heike
10848: PPUSH
10849: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10853: LD_EXP 27
10857: PPUSH
10858: LD_STRING 02_Aviradze
10860: PPUSH
10861: CALL_OW 38
// if Givi then
10865: LD_EXP 24
10869: IFFALSE 10883
// SaveCharacters ( Givi , 02_Givi ) ;
10871: LD_EXP 24
10875: PPUSH
10876: LD_STRING 02_Givi
10878: PPUSH
10879: CALL_OW 38
// if Mike then
10883: LD_EXP 25
10887: IFFALSE 10901
// SaveCharacters ( Mike , 02_Mike ) ;
10889: LD_EXP 25
10893: PPUSH
10894: LD_STRING 02_Mike
10896: PPUSH
10897: CALL_OW 38
// if Kamil then
10901: LD_EXP 26
10905: IFFALSE 10919
// SaveCharacters ( Kamil , 02_Kamil ) ;
10907: LD_EXP 26
10911: PPUSH
10912: LD_STRING 02_Kamil
10914: PPUSH
10915: CALL_OW 38
// if Kaia then
10919: LD_EXP 28
10923: IFFALSE 10937
// SaveCharacters ( Kaia , 02_Kaia ) ;
10925: LD_EXP 28
10929: PPUSH
10930: LD_STRING 02_Kaia
10932: PPUSH
10933: CALL_OW 38
// if Sophia then
10937: LD_EXP 29
10941: IFFALSE 10955
// SaveCharacters ( Sophia , 02_Sophia ) ;
10943: LD_EXP 29
10947: PPUSH
10948: LD_STRING 02_Sophia
10950: PPUSH
10951: CALL_OW 38
// if Markov then
10955: LD_EXP 30
10959: IFFALSE 10973
// SaveCharacters ( Markov , 02_Markov ) ;
10961: LD_EXP 30
10965: PPUSH
10966: LD_STRING 02_Markov
10968: PPUSH
10969: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10973: LD_VAR 0 1
10977: PUSH
10978: LD_EXP 23
10982: PUSH
10983: LD_EXP 27
10987: PUSH
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 25
10997: PUSH
10998: LD_EXP 26
11002: PUSH
11003: LD_EXP 29
11007: PUSH
11008: LD_EXP 28
11012: PUSH
11013: LD_EXP 30
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: DIFF
11028: IFFALSE 11093
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11030: LD_VAR 0 1
11034: PUSH
11035: LD_EXP 23
11039: PUSH
11040: LD_EXP 27
11044: PUSH
11045: LD_EXP 24
11049: PUSH
11050: LD_EXP 25
11054: PUSH
11055: LD_EXP 26
11059: PUSH
11060: LD_EXP 29
11064: PUSH
11065: LD_EXP 28
11069: PUSH
11070: LD_EXP 30
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: DIFF
11085: PPUSH
11086: LD_STRING 02_others
11088: PPUSH
11089: CALL_OW 38
// YouWin ;
11093: CALL_OW 103
// InGameOff ;
11097: CALL_OW 9
// end ;
11101: PPOPN 1
11103: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11104: LD_OWVAR 1
11108: PUSH
11109: LD_EXP 13
11113: GREATER
11114: PUSH
11115: LD_EXP 4
11119: AND
11120: IFFALSE 11160
11122: GO 11124
11124: DISABLE
// begin InGameOn ;
11125: CALL_OW 8
// PrepareFarmer ;
11129: CALL 11776 0 0
// CenterNowOnUnits ( Farmer ) ;
11133: LD_EXP 31
11137: PPUSH
11138: CALL_OW 87
// wait ( 0 0$2 ) ;
11142: LD_INT 70
11144: PPUSH
11145: CALL_OW 67
// YouLost ( Farmer ) ;
11149: LD_STRING Farmer
11151: PPUSH
11152: CALL_OW 104
// InGameOff ;
11156: CALL_OW 9
// end ; end_of_file
11160: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// uc_side := 2 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 2
11173: ST_TO_ADDR
// uc_nation := 2 ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11182: LD_ADDR_EXP 23
11186: PUSH
11187: LD_STRING Heike
11189: PPUSH
11190: LD_EXP 1
11194: NOT
11195: PPUSH
11196: LD_EXP 2
11200: PPUSH
11201: CALL 29533 0 3
11205: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11206: LD_EXP 23
11210: PPUSH
11211: LD_INT 83
11213: PPUSH
11214: LD_INT 72
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11224: LD_ADDR_EXP 24
11228: PUSH
11229: LD_STRING Givi
11231: PPUSH
11232: LD_EXP 1
11236: NOT
11237: PPUSH
11238: LD_EXP 2
11242: PPUSH
11243: CALL 29533 0 3
11247: ST_TO_ADDR
// if Givi then
11248: LD_EXP 24
11252: IFFALSE 11272
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11254: LD_EXP 24
11258: PPUSH
11259: LD_INT 87
11261: PPUSH
11262: LD_INT 76
11264: PPUSH
11265: LD_INT 0
11267: PPUSH
11268: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11272: LD_ADDR_EXP 25
11276: PUSH
11277: LD_STRING Mike
11279: PPUSH
11280: LD_EXP 1
11284: NOT
11285: PPUSH
11286: LD_EXP 2
11290: PPUSH
11291: CALL 29533 0 3
11295: ST_TO_ADDR
// if Mike then
11296: LD_EXP 25
11300: IFFALSE 11320
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11302: LD_EXP 25
11306: PPUSH
11307: LD_INT 84
11309: PPUSH
11310: LD_INT 76
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11320: LD_ADDR_EXP 26
11324: PUSH
11325: LD_STRING Kamil
11327: PPUSH
11328: LD_EXP 1
11332: NOT
11333: PPUSH
11334: LD_EXP 2
11338: PPUSH
11339: CALL 29533 0 3
11343: ST_TO_ADDR
// if Kamil then
11344: LD_EXP 26
11348: IFFALSE 11368
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11350: LD_EXP 26
11354: PPUSH
11355: LD_INT 85
11357: PPUSH
11358: LD_INT 78
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 48
// uc_side := 5 ;
11368: LD_ADDR_OWVAR 20
11372: PUSH
11373: LD_INT 5
11375: ST_TO_ADDR
// uc_nation := 2 ;
11376: LD_ADDR_OWVAR 21
11380: PUSH
11381: LD_INT 2
11383: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11384: LD_ADDR_EXP 27
11388: PUSH
11389: LD_STRING Aviradze
11391: PPUSH
11392: LD_INT 0
11394: PPUSH
11395: LD_STRING 
11397: PPUSH
11398: CALL 29533 0 3
11402: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11403: LD_EXP 27
11407: PPUSH
11408: LD_INT 106
11410: PPUSH
11411: LD_INT 38
11413: PPUSH
11414: LD_INT 0
11416: PPUSH
11417: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11421: LD_EXP 27
11425: PPUSH
11426: LD_INT 103
11428: PPUSH
11429: LD_INT 38
11431: PPUSH
11432: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11436: LD_ADDR_EXP 28
11440: PUSH
11441: LD_STRING Kaia
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: LD_STRING 
11449: PPUSH
11450: CALL 29533 0 3
11454: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11455: LD_EXP 28
11459: PPUSH
11460: LD_INT 100
11462: PPUSH
11463: LD_INT 34
11465: PPUSH
11466: LD_INT 0
11468: PPUSH
11469: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11473: LD_EXP 28
11477: PPUSH
11478: LD_INT 100
11480: PPUSH
11481: LD_INT 39
11483: PPUSH
11484: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11488: LD_ADDR_EXP 29
11492: PUSH
11493: LD_STRING Sophia
11495: PPUSH
11496: LD_INT 0
11498: PPUSH
11499: LD_STRING 
11501: PPUSH
11502: CALL 29533 0 3
11506: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11507: LD_EXP 29
11511: PPUSH
11512: LD_INT 109
11514: PPUSH
11515: LD_INT 50
11517: PPUSH
11518: LD_INT 0
11520: PPUSH
11521: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11525: LD_EXP 29
11529: PPUSH
11530: LD_INT 100
11532: PPUSH
11533: LD_INT 39
11535: PPUSH
11536: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11540: LD_ADDR_EXP 30
11544: PUSH
11545: LD_STRING Markov
11547: PPUSH
11548: LD_INT 0
11550: PPUSH
11551: LD_STRING 
11553: PPUSH
11554: CALL 29533 0 3
11558: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11559: LD_INT 5
11561: PPUSH
11562: LD_INT 3
11564: PPUSH
11565: LD_INT 21
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_INT 42
11576: PPUSH
11577: LD_INT 90
11579: PUSH
11580: LD_INT 70
11582: PUSH
11583: LD_INT 60
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: LD_OWVAR 67
11595: ARRAY
11596: PPUSH
11597: CALL 237 0 7
// veh := CreateVehicle ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: CALL_OW 45
11610: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 4
11618: PPUSH
11619: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 109
11630: PPUSH
11631: LD_INT 38
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11641: LD_EXP 30
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11655: LD_EXP 28
11659: PPUSH
11660: LD_EXP 27
11664: PPUSH
11665: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11669: LD_EXP 27
11673: PPUSH
11674: LD_EXP 28
11678: PPUSH
11679: CALL_OW 119
// if not Givi or not Mike then
11683: LD_EXP 24
11687: NOT
11688: PUSH
11689: LD_EXP 25
11693: NOT
11694: OR
11695: IFFALSE 11771
// begin uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// uc_side := 5 ;
11705: LD_ADDR_OWVAR 20
11709: PUSH
11710: LD_INT 5
11712: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11713: LD_INT 1
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 380
// un := CreateHuman ;
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: CALL_OW 44
11735: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11736: LD_VAR 0 2
11740: PPUSH
11741: LD_INT 112
11743: PPUSH
11744: LD_INT 40
11746: PPUSH
11747: LD_INT 3
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_EXP 27
11766: PPUSH
11767: CALL_OW 119
// end ; end ;
11771: LD_VAR 0 1
11775: RET
// export function PrepareFarmer ; var i ; begin
11776: LD_INT 0
11778: PPUSH
11779: PPUSH
// uc_side := 5 ;
11780: LD_ADDR_OWVAR 20
11784: PUSH
11785: LD_INT 5
11787: ST_TO_ADDR
// uc_nation := 2 ;
11788: LD_ADDR_OWVAR 21
11792: PUSH
11793: LD_INT 2
11795: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11796: LD_ADDR_EXP 31
11800: PUSH
11801: LD_STRING Farmer
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: LD_STRING 
11809: PPUSH
11810: CALL 29533 0 3
11814: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11815: LD_EXP 31
11819: PPUSH
11820: LD_INT 106
11822: PPUSH
11823: LD_INT 62
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 48
// for i := 1 to 5 do
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: DOUBLE
11839: LD_INT 1
11841: DEC
11842: ST_TO_ADDR
11843: LD_INT 5
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11885
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11862: CALL_OW 44
11866: PPUSH
11867: LD_INT 105
11869: PPUSH
11870: LD_INT 64
11872: PPUSH
11873: LD_INT 3
11875: PPUSH
11876: LD_INT 0
11878: PPUSH
11879: CALL_OW 50
// end ;
11883: GO 11846
11885: POP
11886: POP
// end ; end_of_file
11887: LD_VAR 0 1
11891: RET
// every 2 2$20 + 0 0$10 do
11892: GO 11894
11894: DISABLE
// begin enable ;
11895: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11896: LD_INT 1
11898: PPUSH
11899: LD_INT 5
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 55
// if tick > 6 6$00 then
11917: LD_OWVAR 1
11921: PUSH
11922: LD_INT 12600
11924: GREATER
11925: IFFALSE 11928
// disable ;
11927: DISABLE
// end ; end_of_file
11928: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11929: LD_VAR 0 1
11933: PUSH
11934: LD_EXP 23
11938: EQUAL
11939: IFFALSE 11948
// YouLost ( Heike ) ;
11941: LD_STRING Heike
11943: PPUSH
11944: CALL_OW 104
// if un = Aviradze then
11948: LD_VAR 0 1
11952: PUSH
11953: LD_EXP 27
11957: EQUAL
11958: IFFALSE 11967
// YouLost ( Aviradze ) ;
11960: LD_STRING Aviradze
11962: PPUSH
11963: CALL_OW 104
// if un = usLab then
11967: LD_VAR 0 1
11971: PUSH
11972: LD_INT 3
11974: EQUAL
11975: IFFALSE 11984
// YouLost ( Lab ) ;
11977: LD_STRING Lab
11979: PPUSH
11980: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11984: LD_VAR 0 1
11988: PUSH
11989: LD_INT 22
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 23
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: PUSH
12029: LD_EXP 23
12033: PUSH
12034: LD_EXP 27
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: DIFF
12043: IN
12044: PUSH
12045: LD_EXP 4
12049: AND
12050: IFFALSE 12066
// lostCounter := lostCounter + 1 ;
12052: LD_ADDR_EXP 18
12056: PUSH
12057: LD_EXP 18
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: ST_TO_ADDR
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12069: LD_INT 23
12071: PUSH
12072: LD_INT 2
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 25
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PUSH
12098: LD_INT 0
12100: EQUAL
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 3
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 69
12130: PUSH
12131: LD_INT 0
12133: EQUAL
12134: AND
12135: IFFALSE 12147
12137: GO 12139
12139: DISABLE
// YouLost ( Eng ) ;
12140: LD_STRING Eng
12142: PPUSH
12143: CALL_OW 104
12147: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12148: LD_VAR 0 1
12152: PUSH
12153: LD_EXP 22
12157: IN
12158: PUSH
12159: LD_VAR 0 2
12163: PUSH
12164: LD_INT 2
12166: EQUAL
12167: AND
12168: IFFALSE 12200
// begin usSci := usSci diff un ;
12170: LD_ADDR_EXP 22
12174: PUSH
12175: LD_EXP 22
12179: PUSH
12180: LD_VAR 0 1
12184: DIFF
12185: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12186: LD_ADDR_EXP 9
12190: PUSH
12191: LD_EXP 9
12195: PUSH
12196: LD_INT 1
12198: PLUS
12199: ST_TO_ADDR
// end ; end ;
12200: PPOPN 3
12202: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 2
12210: EQUAL
12211: PUSH
12212: LD_VAR 0 2
12216: PUSH
12217: LD_INT 5
12219: EQUAL
12220: AND
12221: IFFALSE 12230
// YouLost ( FriendlyFire ) ;
12223: LD_STRING FriendlyFire
12225: PPUSH
12226: CALL_OW 104
// end ; end_of_file
12230: PPOPN 2
12232: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12233: LD_INT 0
12235: PPUSH
// ar_miner := 81 ;
12236: LD_ADDR_EXP 39
12240: PUSH
12241: LD_INT 81
12243: ST_TO_ADDR
// ar_crane := 88 ;
12244: LD_ADDR_EXP 38
12248: PUSH
12249: LD_INT 88
12251: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12252: LD_ADDR_EXP 33
12256: PUSH
12257: LD_INT 89
12259: ST_TO_ADDR
// us_hack := 99 ;
12260: LD_ADDR_EXP 34
12264: PUSH
12265: LD_INT 99
12267: ST_TO_ADDR
// us_artillery := 97 ;
12268: LD_ADDR_EXP 35
12272: PUSH
12273: LD_INT 97
12275: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12276: LD_ADDR_EXP 36
12280: PUSH
12281: LD_INT 91
12283: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12284: LD_ADDR_EXP 37
12288: PUSH
12289: LD_INT 92
12291: ST_TO_ADDR
// ru_radar := 98 ;
12292: LD_ADDR_EXP 32
12296: PUSH
12297: LD_INT 98
12299: ST_TO_ADDR
// tech_Artillery := 80 ;
12300: LD_ADDR_EXP 40
12304: PUSH
12305: LD_INT 80
12307: ST_TO_ADDR
// tech_RadMat := 81 ;
12308: LD_ADDR_EXP 41
12312: PUSH
12313: LD_INT 81
12315: ST_TO_ADDR
// tech_BasicTools := 82 ;
12316: LD_ADDR_EXP 42
12320: PUSH
12321: LD_INT 82
12323: ST_TO_ADDR
// tech_Cargo := 83 ;
12324: LD_ADDR_EXP 43
12328: PUSH
12329: LD_INT 83
12331: ST_TO_ADDR
// tech_Track := 84 ;
12332: LD_ADDR_EXP 44
12336: PUSH
12337: LD_INT 84
12339: ST_TO_ADDR
// tech_Crane := 85 ;
12340: LD_ADDR_EXP 45
12344: PUSH
12345: LD_INT 85
12347: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12348: LD_ADDR_EXP 46
12352: PUSH
12353: LD_INT 86
12355: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12356: LD_ADDR_EXP 47
12360: PUSH
12361: LD_INT 87
12363: ST_TO_ADDR
// end ;
12364: LD_VAR 0 1
12368: RET
// every 1 do
12369: GO 12371
12371: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12372: CALL 12233 0 0
12376: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 100
12384: EQUAL
12385: IFFALSE 13334
// begin if not StreamModeActive then
12387: LD_EXP 48
12391: NOT
12392: IFFALSE 12402
// StreamModeActive := true ;
12394: LD_ADDR_EXP 48
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// if p3 = 0 then
12402: LD_VAR 0 3
12406: PUSH
12407: LD_INT 0
12409: EQUAL
12410: IFFALSE 12416
// InitStreamMode ;
12412: CALL 13492 0 0
// if p3 = 1 then
12416: LD_VAR 0 3
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12434
// sRocket := true ;
12426: LD_ADDR_EXP 53
12430: PUSH
12431: LD_INT 1
12433: ST_TO_ADDR
// if p3 = 2 then
12434: LD_VAR 0 3
12438: PUSH
12439: LD_INT 2
12441: EQUAL
12442: IFFALSE 12452
// sSpeed := true ;
12444: LD_ADDR_EXP 52
12448: PUSH
12449: LD_INT 1
12451: ST_TO_ADDR
// if p3 = 3 then
12452: LD_VAR 0 3
12456: PUSH
12457: LD_INT 3
12459: EQUAL
12460: IFFALSE 12470
// sEngine := true ;
12462: LD_ADDR_EXP 54
12466: PUSH
12467: LD_INT 1
12469: ST_TO_ADDR
// if p3 = 4 then
12470: LD_VAR 0 3
12474: PUSH
12475: LD_INT 4
12477: EQUAL
12478: IFFALSE 12488
// sSpec := true ;
12480: LD_ADDR_EXP 51
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// if p3 = 5 then
12488: LD_VAR 0 3
12492: PUSH
12493: LD_INT 5
12495: EQUAL
12496: IFFALSE 12506
// sLevel := true ;
12498: LD_ADDR_EXP 55
12502: PUSH
12503: LD_INT 1
12505: ST_TO_ADDR
// if p3 = 6 then
12506: LD_VAR 0 3
12510: PUSH
12511: LD_INT 6
12513: EQUAL
12514: IFFALSE 12524
// sArmoury := true ;
12516: LD_ADDR_EXP 56
12520: PUSH
12521: LD_INT 1
12523: ST_TO_ADDR
// if p3 = 7 then
12524: LD_VAR 0 3
12528: PUSH
12529: LD_INT 7
12531: EQUAL
12532: IFFALSE 12542
// sRadar := true ;
12534: LD_ADDR_EXP 57
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
// if p3 = 8 then
12542: LD_VAR 0 3
12546: PUSH
12547: LD_INT 8
12549: EQUAL
12550: IFFALSE 12560
// sBunker := true ;
12552: LD_ADDR_EXP 58
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// if p3 = 9 then
12560: LD_VAR 0 3
12564: PUSH
12565: LD_INT 9
12567: EQUAL
12568: IFFALSE 12578
// sHack := true ;
12570: LD_ADDR_EXP 59
12574: PUSH
12575: LD_INT 1
12577: ST_TO_ADDR
// if p3 = 10 then
12578: LD_VAR 0 3
12582: PUSH
12583: LD_INT 10
12585: EQUAL
12586: IFFALSE 12596
// sFire := true ;
12588: LD_ADDR_EXP 60
12592: PUSH
12593: LD_INT 1
12595: ST_TO_ADDR
// if p3 = 11 then
12596: LD_VAR 0 3
12600: PUSH
12601: LD_INT 11
12603: EQUAL
12604: IFFALSE 12614
// sRefresh := true ;
12606: LD_ADDR_EXP 61
12610: PUSH
12611: LD_INT 1
12613: ST_TO_ADDR
// if p3 = 12 then
12614: LD_VAR 0 3
12618: PUSH
12619: LD_INT 12
12621: EQUAL
12622: IFFALSE 12632
// sExp := true ;
12624: LD_ADDR_EXP 62
12628: PUSH
12629: LD_INT 1
12631: ST_TO_ADDR
// if p3 = 13 then
12632: LD_VAR 0 3
12636: PUSH
12637: LD_INT 13
12639: EQUAL
12640: IFFALSE 12650
// sDepot := true ;
12642: LD_ADDR_EXP 63
12646: PUSH
12647: LD_INT 1
12649: ST_TO_ADDR
// if p3 = 14 then
12650: LD_VAR 0 3
12654: PUSH
12655: LD_INT 14
12657: EQUAL
12658: IFFALSE 12668
// sFlag := true ;
12660: LD_ADDR_EXP 64
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// if p3 = 15 then
12668: LD_VAR 0 3
12672: PUSH
12673: LD_INT 15
12675: EQUAL
12676: IFFALSE 12686
// sKamikadze := true ;
12678: LD_ADDR_EXP 72
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// if p3 = 16 then
12686: LD_VAR 0 3
12690: PUSH
12691: LD_INT 16
12693: EQUAL
12694: IFFALSE 12704
// sTroll := true ;
12696: LD_ADDR_EXP 73
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// if p3 = 17 then
12704: LD_VAR 0 3
12708: PUSH
12709: LD_INT 17
12711: EQUAL
12712: IFFALSE 12722
// sSlow := true ;
12714: LD_ADDR_EXP 74
12718: PUSH
12719: LD_INT 1
12721: ST_TO_ADDR
// if p3 = 18 then
12722: LD_VAR 0 3
12726: PUSH
12727: LD_INT 18
12729: EQUAL
12730: IFFALSE 12740
// sLack := true ;
12732: LD_ADDR_EXP 75
12736: PUSH
12737: LD_INT 1
12739: ST_TO_ADDR
// if p3 = 19 then
12740: LD_VAR 0 3
12744: PUSH
12745: LD_INT 19
12747: EQUAL
12748: IFFALSE 12758
// sTank := true ;
12750: LD_ADDR_EXP 77
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// if p3 = 20 then
12758: LD_VAR 0 3
12762: PUSH
12763: LD_INT 20
12765: EQUAL
12766: IFFALSE 12776
// sRemote := true ;
12768: LD_ADDR_EXP 78
12772: PUSH
12773: LD_INT 1
12775: ST_TO_ADDR
// if p3 = 21 then
12776: LD_VAR 0 3
12780: PUSH
12781: LD_INT 21
12783: EQUAL
12784: IFFALSE 12794
// sPowell := true ;
12786: LD_ADDR_EXP 79
12790: PUSH
12791: LD_INT 1
12793: ST_TO_ADDR
// if p3 = 22 then
12794: LD_VAR 0 3
12798: PUSH
12799: LD_INT 22
12801: EQUAL
12802: IFFALSE 12812
// sTeleport := true ;
12804: LD_ADDR_EXP 82
12808: PUSH
12809: LD_INT 1
12811: ST_TO_ADDR
// if p3 = 23 then
12812: LD_VAR 0 3
12816: PUSH
12817: LD_INT 23
12819: EQUAL
12820: IFFALSE 12830
// sOilTower := true ;
12822: LD_ADDR_EXP 84
12826: PUSH
12827: LD_INT 1
12829: ST_TO_ADDR
// if p3 = 24 then
12830: LD_VAR 0 3
12834: PUSH
12835: LD_INT 24
12837: EQUAL
12838: IFFALSE 12848
// sShovel := true ;
12840: LD_ADDR_EXP 85
12844: PUSH
12845: LD_INT 1
12847: ST_TO_ADDR
// if p3 = 25 then
12848: LD_VAR 0 3
12852: PUSH
12853: LD_INT 25
12855: EQUAL
12856: IFFALSE 12866
// sSheik := true ;
12858: LD_ADDR_EXP 86
12862: PUSH
12863: LD_INT 1
12865: ST_TO_ADDR
// if p3 = 26 then
12866: LD_VAR 0 3
12870: PUSH
12871: LD_INT 26
12873: EQUAL
12874: IFFALSE 12884
// sEarthquake := true ;
12876: LD_ADDR_EXP 88
12880: PUSH
12881: LD_INT 1
12883: ST_TO_ADDR
// if p3 = 27 then
12884: LD_VAR 0 3
12888: PUSH
12889: LD_INT 27
12891: EQUAL
12892: IFFALSE 12902
// sAI := true ;
12894: LD_ADDR_EXP 89
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// if p3 = 28 then
12902: LD_VAR 0 3
12906: PUSH
12907: LD_INT 28
12909: EQUAL
12910: IFFALSE 12920
// sCargo := true ;
12912: LD_ADDR_EXP 92
12916: PUSH
12917: LD_INT 1
12919: ST_TO_ADDR
// if p3 = 29 then
12920: LD_VAR 0 3
12924: PUSH
12925: LD_INT 29
12927: EQUAL
12928: IFFALSE 12938
// sDLaser := true ;
12930: LD_ADDR_EXP 93
12934: PUSH
12935: LD_INT 1
12937: ST_TO_ADDR
// if p3 = 30 then
12938: LD_VAR 0 3
12942: PUSH
12943: LD_INT 30
12945: EQUAL
12946: IFFALSE 12956
// sExchange := true ;
12948: LD_ADDR_EXP 94
12952: PUSH
12953: LD_INT 1
12955: ST_TO_ADDR
// if p3 = 31 then
12956: LD_VAR 0 3
12960: PUSH
12961: LD_INT 31
12963: EQUAL
12964: IFFALSE 12974
// sFac := true ;
12966: LD_ADDR_EXP 95
12970: PUSH
12971: LD_INT 1
12973: ST_TO_ADDR
// if p3 = 32 then
12974: LD_VAR 0 3
12978: PUSH
12979: LD_INT 32
12981: EQUAL
12982: IFFALSE 12992
// sPower := true ;
12984: LD_ADDR_EXP 96
12988: PUSH
12989: LD_INT 1
12991: ST_TO_ADDR
// if p3 = 33 then
12992: LD_VAR 0 3
12996: PUSH
12997: LD_INT 33
12999: EQUAL
13000: IFFALSE 13010
// sRandom := true ;
13002: LD_ADDR_EXP 97
13006: PUSH
13007: LD_INT 1
13009: ST_TO_ADDR
// if p3 = 34 then
13010: LD_VAR 0 3
13014: PUSH
13015: LD_INT 34
13017: EQUAL
13018: IFFALSE 13028
// sShield := true ;
13020: LD_ADDR_EXP 98
13024: PUSH
13025: LD_INT 1
13027: ST_TO_ADDR
// if p3 = 35 then
13028: LD_VAR 0 3
13032: PUSH
13033: LD_INT 35
13035: EQUAL
13036: IFFALSE 13046
// sTime := true ;
13038: LD_ADDR_EXP 99
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// if p3 = 36 then
13046: LD_VAR 0 3
13050: PUSH
13051: LD_INT 36
13053: EQUAL
13054: IFFALSE 13064
// sTools := true ;
13056: LD_ADDR_EXP 100
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// if p3 = 101 then
13064: LD_VAR 0 3
13068: PUSH
13069: LD_INT 101
13071: EQUAL
13072: IFFALSE 13082
// sSold := true ;
13074: LD_ADDR_EXP 65
13078: PUSH
13079: LD_INT 1
13081: ST_TO_ADDR
// if p3 = 102 then
13082: LD_VAR 0 3
13086: PUSH
13087: LD_INT 102
13089: EQUAL
13090: IFFALSE 13100
// sDiff := true ;
13092: LD_ADDR_EXP 66
13096: PUSH
13097: LD_INT 1
13099: ST_TO_ADDR
// if p3 = 103 then
13100: LD_VAR 0 3
13104: PUSH
13105: LD_INT 103
13107: EQUAL
13108: IFFALSE 13118
// sFog := true ;
13110: LD_ADDR_EXP 69
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// if p3 = 104 then
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 104
13125: EQUAL
13126: IFFALSE 13136
// sReset := true ;
13128: LD_ADDR_EXP 70
13132: PUSH
13133: LD_INT 1
13135: ST_TO_ADDR
// if p3 = 105 then
13136: LD_VAR 0 3
13140: PUSH
13141: LD_INT 105
13143: EQUAL
13144: IFFALSE 13154
// sSun := true ;
13146: LD_ADDR_EXP 71
13150: PUSH
13151: LD_INT 1
13153: ST_TO_ADDR
// if p3 = 106 then
13154: LD_VAR 0 3
13158: PUSH
13159: LD_INT 106
13161: EQUAL
13162: IFFALSE 13172
// sTiger := true ;
13164: LD_ADDR_EXP 67
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// if p3 = 107 then
13172: LD_VAR 0 3
13176: PUSH
13177: LD_INT 107
13179: EQUAL
13180: IFFALSE 13190
// sBomb := true ;
13182: LD_ADDR_EXP 68
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// if p3 = 108 then
13190: LD_VAR 0 3
13194: PUSH
13195: LD_INT 108
13197: EQUAL
13198: IFFALSE 13208
// sWound := true ;
13200: LD_ADDR_EXP 76
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// if p3 = 109 then
13208: LD_VAR 0 3
13212: PUSH
13213: LD_INT 109
13215: EQUAL
13216: IFFALSE 13226
// sBetray := true ;
13218: LD_ADDR_EXP 80
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// if p3 = 110 then
13226: LD_VAR 0 3
13230: PUSH
13231: LD_INT 110
13233: EQUAL
13234: IFFALSE 13244
// sContamin := true ;
13236: LD_ADDR_EXP 81
13240: PUSH
13241: LD_INT 1
13243: ST_TO_ADDR
// if p3 = 111 then
13244: LD_VAR 0 3
13248: PUSH
13249: LD_INT 111
13251: EQUAL
13252: IFFALSE 13262
// sOil := true ;
13254: LD_ADDR_EXP 83
13258: PUSH
13259: LD_INT 1
13261: ST_TO_ADDR
// if p3 = 112 then
13262: LD_VAR 0 3
13266: PUSH
13267: LD_INT 112
13269: EQUAL
13270: IFFALSE 13280
// sStu := true ;
13272: LD_ADDR_EXP 87
13276: PUSH
13277: LD_INT 1
13279: ST_TO_ADDR
// if p3 = 113 then
13280: LD_VAR 0 3
13284: PUSH
13285: LD_INT 113
13287: EQUAL
13288: IFFALSE 13298
// sBazooka := true ;
13290: LD_ADDR_EXP 90
13294: PUSH
13295: LD_INT 1
13297: ST_TO_ADDR
// if p3 = 114 then
13298: LD_VAR 0 3
13302: PUSH
13303: LD_INT 114
13305: EQUAL
13306: IFFALSE 13316
// sMortar := true ;
13308: LD_ADDR_EXP 91
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// if p3 = 115 then
13316: LD_VAR 0 3
13320: PUSH
13321: LD_INT 115
13323: EQUAL
13324: IFFALSE 13334
// sRanger := true ;
13326: LD_ADDR_EXP 101
13330: PUSH
13331: LD_INT 1
13333: ST_TO_ADDR
// end ; if p2 = 101 then
13334: LD_VAR 0 2
13338: PUSH
13339: LD_INT 101
13341: EQUAL
13342: IFFALSE 13470
// begin case p3 of 1 :
13344: LD_VAR 0 3
13348: PUSH
13349: LD_INT 1
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13364
13357: POP
// hHackUnlimitedResources ; 2 :
13358: CALL 24505 0 0
13362: GO 13470
13364: LD_INT 2
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13379
13372: POP
// hHackSetLevel10 ; 3 :
13373: CALL 24638 0 0
13377: GO 13470
13379: LD_INT 3
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13387
13385: GO 13394
13387: POP
// hHackSetLevel10YourUnits ; 4 :
13388: CALL 24723 0 0
13392: GO 13470
13394: LD_INT 4
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13409
13402: POP
// hHackInvincible ; 5 :
13403: CALL 25171 0 0
13407: GO 13470
13409: LD_INT 5
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13424
13417: POP
// hHackInvisible ; 6 :
13418: CALL 25282 0 0
13422: GO 13470
13424: LD_INT 6
13426: DOUBLE
13427: EQUAL
13428: IFTRUE 13432
13430: GO 13439
13432: POP
// hHackChangeYourSide ; 7 :
13433: CALL 25339 0 0
13437: GO 13470
13439: LD_INT 7
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13454
13447: POP
// hHackChangeUnitSide ; 8 :
13448: CALL 25381 0 0
13452: GO 13470
13454: LD_INT 8
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13469
13462: POP
// hHackFog ; end ;
13463: CALL 25482 0 0
13467: GO 13470
13469: POP
// end ; end ;
13470: PPOPN 6
13472: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13473: GO 13475
13475: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13476: LD_STRING initStreamRollete();
13478: PPUSH
13479: CALL_OW 559
// InitStreamMode ;
13483: CALL 13492 0 0
// DefineStreamItems ( ) ;
13487: CALL 13932 0 0
// end ;
13491: END
// function InitStreamMode ; begin
13492: LD_INT 0
13494: PPUSH
// streamModeActive := false ;
13495: LD_ADDR_EXP 48
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// normalCounter := 36 ;
13503: LD_ADDR_EXP 49
13507: PUSH
13508: LD_INT 36
13510: ST_TO_ADDR
// hardcoreCounter := 16 ;
13511: LD_ADDR_EXP 50
13515: PUSH
13516: LD_INT 16
13518: ST_TO_ADDR
// sRocket := false ;
13519: LD_ADDR_EXP 53
13523: PUSH
13524: LD_INT 0
13526: ST_TO_ADDR
// sSpeed := false ;
13527: LD_ADDR_EXP 52
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// sEngine := false ;
13535: LD_ADDR_EXP 54
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// sSpec := false ;
13543: LD_ADDR_EXP 51
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// sLevel := false ;
13551: LD_ADDR_EXP 55
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// sArmoury := false ;
13559: LD_ADDR_EXP 56
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// sRadar := false ;
13567: LD_ADDR_EXP 57
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// sBunker := false ;
13575: LD_ADDR_EXP 58
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// sHack := false ;
13583: LD_ADDR_EXP 59
13587: PUSH
13588: LD_INT 0
13590: ST_TO_ADDR
// sFire := false ;
13591: LD_ADDR_EXP 60
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// sRefresh := false ;
13599: LD_ADDR_EXP 61
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// sExp := false ;
13607: LD_ADDR_EXP 62
13611: PUSH
13612: LD_INT 0
13614: ST_TO_ADDR
// sDepot := false ;
13615: LD_ADDR_EXP 63
13619: PUSH
13620: LD_INT 0
13622: ST_TO_ADDR
// sFlag := false ;
13623: LD_ADDR_EXP 64
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// sKamikadze := false ;
13631: LD_ADDR_EXP 72
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// sTroll := false ;
13639: LD_ADDR_EXP 73
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// sSlow := false ;
13647: LD_ADDR_EXP 74
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sLack := false ;
13655: LD_ADDR_EXP 75
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sTank := false ;
13663: LD_ADDR_EXP 77
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sRemote := false ;
13671: LD_ADDR_EXP 78
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sPowell := false ;
13679: LD_ADDR_EXP 79
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sTeleport := false ;
13687: LD_ADDR_EXP 82
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sOilTower := false ;
13695: LD_ADDR_EXP 84
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sShovel := false ;
13703: LD_ADDR_EXP 85
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sSheik := false ;
13711: LD_ADDR_EXP 86
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sEarthquake := false ;
13719: LD_ADDR_EXP 88
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sAI := false ;
13727: LD_ADDR_EXP 89
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sCargo := false ;
13735: LD_ADDR_EXP 92
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sDLaser := false ;
13743: LD_ADDR_EXP 93
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sExchange := false ;
13751: LD_ADDR_EXP 94
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sFac := false ;
13759: LD_ADDR_EXP 95
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sPower := false ;
13767: LD_ADDR_EXP 96
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sRandom := false ;
13775: LD_ADDR_EXP 97
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sShield := false ;
13783: LD_ADDR_EXP 98
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sTime := false ;
13791: LD_ADDR_EXP 99
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sTools := false ;
13799: LD_ADDR_EXP 100
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// sSold := false ;
13807: LD_ADDR_EXP 65
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// sDiff := false ;
13815: LD_ADDR_EXP 66
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// sFog := false ;
13823: LD_ADDR_EXP 69
13827: PUSH
13828: LD_INT 0
13830: ST_TO_ADDR
// sReset := false ;
13831: LD_ADDR_EXP 70
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sSun := false ;
13839: LD_ADDR_EXP 71
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// sTiger := false ;
13847: LD_ADDR_EXP 67
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// sBomb := false ;
13855: LD_ADDR_EXP 68
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// sWound := false ;
13863: LD_ADDR_EXP 76
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// sBetray := false ;
13871: LD_ADDR_EXP 80
13875: PUSH
13876: LD_INT 0
13878: ST_TO_ADDR
// sContamin := false ;
13879: LD_ADDR_EXP 81
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// sOil := false ;
13887: LD_ADDR_EXP 83
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// sStu := false ;
13895: LD_ADDR_EXP 87
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// sBazooka := false ;
13903: LD_ADDR_EXP 90
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// sMortar := false ;
13911: LD_ADDR_EXP 91
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// sRanger := false ;
13919: LD_ADDR_EXP 101
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// end ;
13927: LD_VAR 0 1
13931: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13932: LD_INT 0
13934: PPUSH
13935: PPUSH
13936: PPUSH
13937: PPUSH
13938: PPUSH
// result := [ ] ;
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: EMPTY
13945: ST_TO_ADDR
// if campaign_id = 1 then
13946: LD_OWVAR 69
13950: PUSH
13951: LD_INT 1
13953: EQUAL
13954: IFFALSE 16892
// begin case mission_number of 1 :
13956: LD_OWVAR 70
13960: PUSH
13961: LD_INT 1
13963: DOUBLE
13964: EQUAL
13965: IFTRUE 13969
13967: GO 14033
13969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: LD_INT 4
13980: PUSH
13981: LD_INT 11
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: LD_INT 15
13989: PUSH
13990: LD_INT 16
13992: PUSH
13993: LD_INT 22
13995: PUSH
13996: LD_INT 23
13998: PUSH
13999: LD_INT 26
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 101
14015: PUSH
14016: LD_INT 102
14018: PUSH
14019: LD_INT 106
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: ST_TO_ADDR
14031: GO 16890
14033: LD_INT 2
14035: DOUBLE
14036: EQUAL
14037: IFTRUE 14041
14039: GO 14113
14041: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 4
14052: PUSH
14053: LD_INT 11
14055: PUSH
14056: LD_INT 12
14058: PUSH
14059: LD_INT 15
14061: PUSH
14062: LD_INT 16
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_INT 23
14070: PUSH
14071: LD_INT 26
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 101
14087: PUSH
14088: LD_INT 102
14090: PUSH
14091: LD_INT 105
14093: PUSH
14094: LD_INT 106
14096: PUSH
14097: LD_INT 108
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: ST_TO_ADDR
14111: GO 16890
14113: LD_INT 3
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14121
14119: GO 14197
14121: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: LD_INT 11
14138: PUSH
14139: LD_INT 12
14141: PUSH
14142: LD_INT 15
14144: PUSH
14145: LD_INT 16
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 26
14153: PUSH
14154: LD_INT 36
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 101
14171: PUSH
14172: LD_INT 102
14174: PUSH
14175: LD_INT 105
14177: PUSH
14178: LD_INT 106
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16890
14197: LD_INT 4
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14289
14205: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14206: LD_ADDR_VAR 0 1
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 8
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 26
14243: PUSH
14244: LD_INT 36
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 101
14263: PUSH
14264: LD_INT 102
14266: PUSH
14267: LD_INT 105
14269: PUSH
14270: LD_INT 106
14272: PUSH
14273: LD_INT 108
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: ST_TO_ADDR
14287: GO 16890
14289: LD_INT 5
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14397
14297: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14298: LD_ADDR_VAR 0 1
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: LD_INT 6
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: LD_INT 11
14320: PUSH
14321: LD_INT 12
14323: PUSH
14324: LD_INT 15
14326: PUSH
14327: LD_INT 16
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 25
14338: PUSH
14339: LD_INT 26
14341: PUSH
14342: LD_INT 36
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 101
14363: PUSH
14364: LD_INT 102
14366: PUSH
14367: LD_INT 105
14369: PUSH
14370: LD_INT 106
14372: PUSH
14373: LD_INT 108
14375: PUSH
14376: LD_INT 109
14378: PUSH
14379: LD_INT 112
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: ST_TO_ADDR
14395: GO 16890
14397: LD_INT 6
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14525
14405: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14406: LD_ADDR_VAR 0 1
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 4
14416: PUSH
14417: LD_INT 5
14419: PUSH
14420: LD_INT 6
14422: PUSH
14423: LD_INT 8
14425: PUSH
14426: LD_INT 11
14428: PUSH
14429: LD_INT 12
14431: PUSH
14432: LD_INT 15
14434: PUSH
14435: LD_INT 16
14437: PUSH
14438: LD_INT 20
14440: PUSH
14441: LD_INT 21
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_INT 23
14449: PUSH
14450: LD_INT 25
14452: PUSH
14453: LD_INT 26
14455: PUSH
14456: LD_INT 30
14458: PUSH
14459: LD_INT 31
14461: PUSH
14462: LD_INT 32
14464: PUSH
14465: LD_INT 36
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 101
14491: PUSH
14492: LD_INT 102
14494: PUSH
14495: LD_INT 105
14497: PUSH
14498: LD_INT 106
14500: PUSH
14501: LD_INT 108
14503: PUSH
14504: LD_INT 109
14506: PUSH
14507: LD_INT 112
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 16890
14525: LD_INT 7
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14633
14533: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14534: LD_ADDR_VAR 0 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 4
14544: PUSH
14545: LD_INT 5
14547: PUSH
14548: LD_INT 7
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 15
14559: PUSH
14560: LD_INT 16
14562: PUSH
14563: LD_INT 20
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_INT 23
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 26
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 101
14599: PUSH
14600: LD_INT 102
14602: PUSH
14603: LD_INT 103
14605: PUSH
14606: LD_INT 105
14608: PUSH
14609: LD_INT 106
14611: PUSH
14612: LD_INT 108
14614: PUSH
14615: LD_INT 112
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: ST_TO_ADDR
14631: GO 16890
14633: LD_INT 8
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14769
14641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 4
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: LD_INT 6
14658: PUSH
14659: LD_INT 7
14661: PUSH
14662: LD_INT 8
14664: PUSH
14665: LD_INT 11
14667: PUSH
14668: LD_INT 12
14670: PUSH
14671: LD_INT 15
14673: PUSH
14674: LD_INT 16
14676: PUSH
14677: LD_INT 20
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_INT 23
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 26
14694: PUSH
14695: LD_INT 30
14697: PUSH
14698: LD_INT 31
14700: PUSH
14701: LD_INT 32
14703: PUSH
14704: LD_INT 36
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 101
14731: PUSH
14732: LD_INT 102
14734: PUSH
14735: LD_INT 103
14737: PUSH
14738: LD_INT 105
14740: PUSH
14741: LD_INT 106
14743: PUSH
14744: LD_INT 108
14746: PUSH
14747: LD_INT 109
14749: PUSH
14750: LD_INT 112
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: ST_TO_ADDR
14767: GO 16890
14769: LD_INT 9
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14777
14775: GO 14913
14777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 2
14785: PUSH
14786: LD_INT 4
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: LD_INT 6
14794: PUSH
14795: LD_INT 7
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 11
14803: PUSH
14804: LD_INT 12
14806: PUSH
14807: LD_INT 15
14809: PUSH
14810: LD_INT 16
14812: PUSH
14813: LD_INT 20
14815: PUSH
14816: LD_INT 21
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_INT 23
14824: PUSH
14825: LD_INT 25
14827: PUSH
14828: LD_INT 26
14830: PUSH
14831: LD_INT 28
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 31
14839: PUSH
14840: LD_INT 32
14842: PUSH
14843: LD_INT 36
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 101
14871: PUSH
14872: LD_INT 102
14874: PUSH
14875: LD_INT 103
14877: PUSH
14878: LD_INT 105
14880: PUSH
14881: LD_INT 106
14883: PUSH
14884: LD_INT 108
14886: PUSH
14887: LD_INT 109
14889: PUSH
14890: LD_INT 112
14892: PUSH
14893: LD_INT 114
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: ST_TO_ADDR
14911: GO 16890
14913: LD_INT 10
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 15105
14921: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14922: LD_ADDR_VAR 0 1
14926: PUSH
14927: LD_INT 2
14929: PUSH
14930: LD_INT 4
14932: PUSH
14933: LD_INT 5
14935: PUSH
14936: LD_INT 6
14938: PUSH
14939: LD_INT 7
14941: PUSH
14942: LD_INT 8
14944: PUSH
14945: LD_INT 9
14947: PUSH
14948: LD_INT 10
14950: PUSH
14951: LD_INT 11
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 13
14959: PUSH
14960: LD_INT 14
14962: PUSH
14963: LD_INT 15
14965: PUSH
14966: LD_INT 16
14968: PUSH
14969: LD_INT 17
14971: PUSH
14972: LD_INT 18
14974: PUSH
14975: LD_INT 19
14977: PUSH
14978: LD_INT 20
14980: PUSH
14981: LD_INT 21
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 23
14989: PUSH
14990: LD_INT 24
14992: PUSH
14993: LD_INT 25
14995: PUSH
14996: LD_INT 26
14998: PUSH
14999: LD_INT 28
15001: PUSH
15002: LD_INT 30
15004: PUSH
15005: LD_INT 31
15007: PUSH
15008: LD_INT 32
15010: PUSH
15011: LD_INT 36
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 101
15047: PUSH
15048: LD_INT 102
15050: PUSH
15051: LD_INT 103
15053: PUSH
15054: LD_INT 104
15056: PUSH
15057: LD_INT 105
15059: PUSH
15060: LD_INT 106
15062: PUSH
15063: LD_INT 107
15065: PUSH
15066: LD_INT 108
15068: PUSH
15069: LD_INT 109
15071: PUSH
15072: LD_INT 110
15074: PUSH
15075: LD_INT 111
15077: PUSH
15078: LD_INT 112
15080: PUSH
15081: LD_INT 114
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: ST_TO_ADDR
15103: GO 16890
15105: LD_INT 11
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 15305
15113: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15114: LD_ADDR_VAR 0 1
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: LD_INT 4
15127: PUSH
15128: LD_INT 5
15130: PUSH
15131: LD_INT 6
15133: PUSH
15134: LD_INT 7
15136: PUSH
15137: LD_INT 8
15139: PUSH
15140: LD_INT 9
15142: PUSH
15143: LD_INT 10
15145: PUSH
15146: LD_INT 11
15148: PUSH
15149: LD_INT 12
15151: PUSH
15152: LD_INT 13
15154: PUSH
15155: LD_INT 14
15157: PUSH
15158: LD_INT 15
15160: PUSH
15161: LD_INT 16
15163: PUSH
15164: LD_INT 17
15166: PUSH
15167: LD_INT 18
15169: PUSH
15170: LD_INT 19
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_INT 23
15184: PUSH
15185: LD_INT 24
15187: PUSH
15188: LD_INT 25
15190: PUSH
15191: LD_INT 26
15193: PUSH
15194: LD_INT 28
15196: PUSH
15197: LD_INT 30
15199: PUSH
15200: LD_INT 31
15202: PUSH
15203: LD_INT 32
15205: PUSH
15206: LD_INT 34
15208: PUSH
15209: LD_INT 36
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 101
15247: PUSH
15248: LD_INT 102
15250: PUSH
15251: LD_INT 103
15253: PUSH
15254: LD_INT 104
15256: PUSH
15257: LD_INT 105
15259: PUSH
15260: LD_INT 106
15262: PUSH
15263: LD_INT 107
15265: PUSH
15266: LD_INT 108
15268: PUSH
15269: LD_INT 109
15271: PUSH
15272: LD_INT 110
15274: PUSH
15275: LD_INT 111
15277: PUSH
15278: LD_INT 112
15280: PUSH
15281: LD_INT 114
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: ST_TO_ADDR
15303: GO 16890
15305: LD_INT 12
15307: DOUBLE
15308: EQUAL
15309: IFTRUE 15313
15311: GO 15521
15313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15314: LD_ADDR_VAR 0 1
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: LD_INT 4
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: LD_INT 6
15336: PUSH
15337: LD_INT 7
15339: PUSH
15340: LD_INT 8
15342: PUSH
15343: LD_INT 9
15345: PUSH
15346: LD_INT 10
15348: PUSH
15349: LD_INT 11
15351: PUSH
15352: LD_INT 12
15354: PUSH
15355: LD_INT 13
15357: PUSH
15358: LD_INT 14
15360: PUSH
15361: LD_INT 15
15363: PUSH
15364: LD_INT 16
15366: PUSH
15367: LD_INT 17
15369: PUSH
15370: LD_INT 18
15372: PUSH
15373: LD_INT 19
15375: PUSH
15376: LD_INT 20
15378: PUSH
15379: LD_INT 21
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_INT 23
15387: PUSH
15388: LD_INT 24
15390: PUSH
15391: LD_INT 25
15393: PUSH
15394: LD_INT 26
15396: PUSH
15397: LD_INT 27
15399: PUSH
15400: LD_INT 28
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 31
15408: PUSH
15409: LD_INT 32
15411: PUSH
15412: LD_INT 33
15414: PUSH
15415: LD_INT 34
15417: PUSH
15418: LD_INT 36
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 101
15459: PUSH
15460: LD_INT 102
15462: PUSH
15463: LD_INT 103
15465: PUSH
15466: LD_INT 104
15468: PUSH
15469: LD_INT 105
15471: PUSH
15472: LD_INT 106
15474: PUSH
15475: LD_INT 107
15477: PUSH
15478: LD_INT 108
15480: PUSH
15481: LD_INT 109
15483: PUSH
15484: LD_INT 110
15486: PUSH
15487: LD_INT 111
15489: PUSH
15490: LD_INT 112
15492: PUSH
15493: LD_INT 113
15495: PUSH
15496: LD_INT 114
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: ST_TO_ADDR
15519: GO 16890
15521: LD_INT 13
15523: DOUBLE
15524: EQUAL
15525: IFTRUE 15529
15527: GO 15725
15529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: LD_INT 2
15540: PUSH
15541: LD_INT 3
15543: PUSH
15544: LD_INT 4
15546: PUSH
15547: LD_INT 5
15549: PUSH
15550: LD_INT 8
15552: PUSH
15553: LD_INT 9
15555: PUSH
15556: LD_INT 10
15558: PUSH
15559: LD_INT 11
15561: PUSH
15562: LD_INT 12
15564: PUSH
15565: LD_INT 14
15567: PUSH
15568: LD_INT 15
15570: PUSH
15571: LD_INT 16
15573: PUSH
15574: LD_INT 17
15576: PUSH
15577: LD_INT 18
15579: PUSH
15580: LD_INT 19
15582: PUSH
15583: LD_INT 20
15585: PUSH
15586: LD_INT 21
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_INT 23
15594: PUSH
15595: LD_INT 24
15597: PUSH
15598: LD_INT 25
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 27
15606: PUSH
15607: LD_INT 28
15609: PUSH
15610: LD_INT 30
15612: PUSH
15613: LD_INT 31
15615: PUSH
15616: LD_INT 32
15618: PUSH
15619: LD_INT 33
15621: PUSH
15622: LD_INT 34
15624: PUSH
15625: LD_INT 36
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 101
15663: PUSH
15664: LD_INT 102
15666: PUSH
15667: LD_INT 103
15669: PUSH
15670: LD_INT 104
15672: PUSH
15673: LD_INT 105
15675: PUSH
15676: LD_INT 106
15678: PUSH
15679: LD_INT 107
15681: PUSH
15682: LD_INT 108
15684: PUSH
15685: LD_INT 109
15687: PUSH
15688: LD_INT 110
15690: PUSH
15691: LD_INT 111
15693: PUSH
15694: LD_INT 112
15696: PUSH
15697: LD_INT 113
15699: PUSH
15700: LD_INT 114
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: ST_TO_ADDR
15723: GO 16890
15725: LD_INT 14
15727: DOUBLE
15728: EQUAL
15729: IFTRUE 15733
15731: GO 15945
15733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15734: LD_ADDR_VAR 0 1
15738: PUSH
15739: LD_INT 1
15741: PUSH
15742: LD_INT 2
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: LD_INT 4
15750: PUSH
15751: LD_INT 5
15753: PUSH
15754: LD_INT 6
15756: PUSH
15757: LD_INT 7
15759: PUSH
15760: LD_INT 8
15762: PUSH
15763: LD_INT 9
15765: PUSH
15766: LD_INT 10
15768: PUSH
15769: LD_INT 11
15771: PUSH
15772: LD_INT 12
15774: PUSH
15775: LD_INT 13
15777: PUSH
15778: LD_INT 14
15780: PUSH
15781: LD_INT 15
15783: PUSH
15784: LD_INT 16
15786: PUSH
15787: LD_INT 17
15789: PUSH
15790: LD_INT 18
15792: PUSH
15793: LD_INT 19
15795: PUSH
15796: LD_INT 20
15798: PUSH
15799: LD_INT 21
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 23
15807: PUSH
15808: LD_INT 24
15810: PUSH
15811: LD_INT 25
15813: PUSH
15814: LD_INT 26
15816: PUSH
15817: LD_INT 27
15819: PUSH
15820: LD_INT 28
15822: PUSH
15823: LD_INT 29
15825: PUSH
15826: LD_INT 30
15828: PUSH
15829: LD_INT 31
15831: PUSH
15832: LD_INT 32
15834: PUSH
15835: LD_INT 33
15837: PUSH
15838: LD_INT 34
15840: PUSH
15841: LD_INT 36
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 113
15919: PUSH
15920: LD_INT 114
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: ST_TO_ADDR
15943: GO 16890
15945: LD_INT 15
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 16165
15953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 4
15970: PUSH
15971: LD_INT 5
15973: PUSH
15974: LD_INT 6
15976: PUSH
15977: LD_INT 7
15979: PUSH
15980: LD_INT 8
15982: PUSH
15983: LD_INT 9
15985: PUSH
15986: LD_INT 10
15988: PUSH
15989: LD_INT 11
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: LD_INT 13
15997: PUSH
15998: LD_INT 14
16000: PUSH
16001: LD_INT 15
16003: PUSH
16004: LD_INT 16
16006: PUSH
16007: LD_INT 17
16009: PUSH
16010: LD_INT 18
16012: PUSH
16013: LD_INT 19
16015: PUSH
16016: LD_INT 20
16018: PUSH
16019: LD_INT 21
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_INT 23
16027: PUSH
16028: LD_INT 24
16030: PUSH
16031: LD_INT 25
16033: PUSH
16034: LD_INT 26
16036: PUSH
16037: LD_INT 27
16039: PUSH
16040: LD_INT 28
16042: PUSH
16043: LD_INT 29
16045: PUSH
16046: LD_INT 30
16048: PUSH
16049: LD_INT 31
16051: PUSH
16052: LD_INT 32
16054: PUSH
16055: LD_INT 33
16057: PUSH
16058: LD_INT 34
16060: PUSH
16061: LD_INT 36
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 101
16103: PUSH
16104: LD_INT 102
16106: PUSH
16107: LD_INT 103
16109: PUSH
16110: LD_INT 104
16112: PUSH
16113: LD_INT 105
16115: PUSH
16116: LD_INT 106
16118: PUSH
16119: LD_INT 107
16121: PUSH
16122: LD_INT 108
16124: PUSH
16125: LD_INT 109
16127: PUSH
16128: LD_INT 110
16130: PUSH
16131: LD_INT 111
16133: PUSH
16134: LD_INT 112
16136: PUSH
16137: LD_INT 113
16139: PUSH
16140: LD_INT 114
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 16890
16165: LD_INT 16
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16297
16173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: LD_INT 4
16184: PUSH
16185: LD_INT 5
16187: PUSH
16188: LD_INT 7
16190: PUSH
16191: LD_INT 11
16193: PUSH
16194: LD_INT 12
16196: PUSH
16197: LD_INT 15
16199: PUSH
16200: LD_INT 16
16202: PUSH
16203: LD_INT 20
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_INT 23
16214: PUSH
16215: LD_INT 25
16217: PUSH
16218: LD_INT 26
16220: PUSH
16221: LD_INT 30
16223: PUSH
16224: LD_INT 31
16226: PUSH
16227: LD_INT 32
16229: PUSH
16230: LD_INT 33
16232: PUSH
16233: LD_INT 34
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 101
16259: PUSH
16260: LD_INT 102
16262: PUSH
16263: LD_INT 103
16265: PUSH
16266: LD_INT 106
16268: PUSH
16269: LD_INT 108
16271: PUSH
16272: LD_INT 112
16274: PUSH
16275: LD_INT 113
16277: PUSH
16278: LD_INT 114
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: ST_TO_ADDR
16295: GO 16890
16297: LD_INT 17
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16517
16305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 4
16322: PUSH
16323: LD_INT 5
16325: PUSH
16326: LD_INT 6
16328: PUSH
16329: LD_INT 7
16331: PUSH
16332: LD_INT 8
16334: PUSH
16335: LD_INT 9
16337: PUSH
16338: LD_INT 10
16340: PUSH
16341: LD_INT 11
16343: PUSH
16344: LD_INT 12
16346: PUSH
16347: LD_INT 13
16349: PUSH
16350: LD_INT 14
16352: PUSH
16353: LD_INT 15
16355: PUSH
16356: LD_INT 16
16358: PUSH
16359: LD_INT 17
16361: PUSH
16362: LD_INT 18
16364: PUSH
16365: LD_INT 19
16367: PUSH
16368: LD_INT 20
16370: PUSH
16371: LD_INT 21
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_INT 23
16379: PUSH
16380: LD_INT 24
16382: PUSH
16383: LD_INT 25
16385: PUSH
16386: LD_INT 26
16388: PUSH
16389: LD_INT 27
16391: PUSH
16392: LD_INT 28
16394: PUSH
16395: LD_INT 29
16397: PUSH
16398: LD_INT 30
16400: PUSH
16401: LD_INT 31
16403: PUSH
16404: LD_INT 32
16406: PUSH
16407: LD_INT 33
16409: PUSH
16410: LD_INT 34
16412: PUSH
16413: LD_INT 36
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 101
16455: PUSH
16456: LD_INT 102
16458: PUSH
16459: LD_INT 103
16461: PUSH
16462: LD_INT 104
16464: PUSH
16465: LD_INT 105
16467: PUSH
16468: LD_INT 106
16470: PUSH
16471: LD_INT 107
16473: PUSH
16474: LD_INT 108
16476: PUSH
16477: LD_INT 109
16479: PUSH
16480: LD_INT 110
16482: PUSH
16483: LD_INT 111
16485: PUSH
16486: LD_INT 112
16488: PUSH
16489: LD_INT 113
16491: PUSH
16492: LD_INT 114
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: ST_TO_ADDR
16515: GO 16890
16517: LD_INT 18
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16661
16525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16526: LD_ADDR_VAR 0 1
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: LD_INT 4
16536: PUSH
16537: LD_INT 5
16539: PUSH
16540: LD_INT 7
16542: PUSH
16543: LD_INT 11
16545: PUSH
16546: LD_INT 12
16548: PUSH
16549: LD_INT 15
16551: PUSH
16552: LD_INT 16
16554: PUSH
16555: LD_INT 20
16557: PUSH
16558: LD_INT 21
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 23
16566: PUSH
16567: LD_INT 25
16569: PUSH
16570: LD_INT 26
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 31
16578: PUSH
16579: LD_INT 32
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 34
16587: PUSH
16588: LD_INT 35
16590: PUSH
16591: LD_INT 36
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 101
16619: PUSH
16620: LD_INT 102
16622: PUSH
16623: LD_INT 103
16625: PUSH
16626: LD_INT 106
16628: PUSH
16629: LD_INT 108
16631: PUSH
16632: LD_INT 112
16634: PUSH
16635: LD_INT 113
16637: PUSH
16638: LD_INT 114
16640: PUSH
16641: LD_INT 115
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: ST_TO_ADDR
16659: GO 16890
16661: LD_INT 19
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16889
16669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 4
16686: PUSH
16687: LD_INT 5
16689: PUSH
16690: LD_INT 6
16692: PUSH
16693: LD_INT 7
16695: PUSH
16696: LD_INT 8
16698: PUSH
16699: LD_INT 9
16701: PUSH
16702: LD_INT 10
16704: PUSH
16705: LD_INT 11
16707: PUSH
16708: LD_INT 12
16710: PUSH
16711: LD_INT 13
16713: PUSH
16714: LD_INT 14
16716: PUSH
16717: LD_INT 15
16719: PUSH
16720: LD_INT 16
16722: PUSH
16723: LD_INT 17
16725: PUSH
16726: LD_INT 18
16728: PUSH
16729: LD_INT 19
16731: PUSH
16732: LD_INT 20
16734: PUSH
16735: LD_INT 21
16737: PUSH
16738: LD_INT 22
16740: PUSH
16741: LD_INT 23
16743: PUSH
16744: LD_INT 24
16746: PUSH
16747: LD_INT 25
16749: PUSH
16750: LD_INT 26
16752: PUSH
16753: LD_INT 27
16755: PUSH
16756: LD_INT 28
16758: PUSH
16759: LD_INT 29
16761: PUSH
16762: LD_INT 30
16764: PUSH
16765: LD_INT 31
16767: PUSH
16768: LD_INT 32
16770: PUSH
16771: LD_INT 33
16773: PUSH
16774: LD_INT 34
16776: PUSH
16777: LD_INT 35
16779: PUSH
16780: LD_INT 36
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 101
16823: PUSH
16824: LD_INT 102
16826: PUSH
16827: LD_INT 103
16829: PUSH
16830: LD_INT 104
16832: PUSH
16833: LD_INT 105
16835: PUSH
16836: LD_INT 106
16838: PUSH
16839: LD_INT 107
16841: PUSH
16842: LD_INT 108
16844: PUSH
16845: LD_INT 109
16847: PUSH
16848: LD_INT 110
16850: PUSH
16851: LD_INT 111
16853: PUSH
16854: LD_INT 112
16856: PUSH
16857: LD_INT 113
16859: PUSH
16860: LD_INT 114
16862: PUSH
16863: LD_INT 115
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
16887: GO 16890
16889: POP
// end else
16890: GO 17109
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16892: LD_ADDR_VAR 0 1
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 3
16905: PUSH
16906: LD_INT 4
16908: PUSH
16909: LD_INT 5
16911: PUSH
16912: LD_INT 6
16914: PUSH
16915: LD_INT 7
16917: PUSH
16918: LD_INT 8
16920: PUSH
16921: LD_INT 9
16923: PUSH
16924: LD_INT 10
16926: PUSH
16927: LD_INT 11
16929: PUSH
16930: LD_INT 12
16932: PUSH
16933: LD_INT 13
16935: PUSH
16936: LD_INT 14
16938: PUSH
16939: LD_INT 15
16941: PUSH
16942: LD_INT 16
16944: PUSH
16945: LD_INT 17
16947: PUSH
16948: LD_INT 18
16950: PUSH
16951: LD_INT 19
16953: PUSH
16954: LD_INT 20
16956: PUSH
16957: LD_INT 21
16959: PUSH
16960: LD_INT 22
16962: PUSH
16963: LD_INT 23
16965: PUSH
16966: LD_INT 24
16968: PUSH
16969: LD_INT 25
16971: PUSH
16972: LD_INT 26
16974: PUSH
16975: LD_INT 27
16977: PUSH
16978: LD_INT 28
16980: PUSH
16981: LD_INT 29
16983: PUSH
16984: LD_INT 30
16986: PUSH
16987: LD_INT 31
16989: PUSH
16990: LD_INT 32
16992: PUSH
16993: LD_INT 33
16995: PUSH
16996: LD_INT 34
16998: PUSH
16999: LD_INT 35
17001: PUSH
17002: LD_INT 36
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 101
17045: PUSH
17046: LD_INT 102
17048: PUSH
17049: LD_INT 103
17051: PUSH
17052: LD_INT 104
17054: PUSH
17055: LD_INT 105
17057: PUSH
17058: LD_INT 106
17060: PUSH
17061: LD_INT 107
17063: PUSH
17064: LD_INT 108
17066: PUSH
17067: LD_INT 109
17069: PUSH
17070: LD_INT 110
17072: PUSH
17073: LD_INT 111
17075: PUSH
17076: LD_INT 112
17078: PUSH
17079: LD_INT 113
17081: PUSH
17082: LD_INT 114
17084: PUSH
17085: LD_INT 115
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: ST_TO_ADDR
// if result then
17109: LD_VAR 0 1
17113: IFFALSE 17402
// begin normal :=  ;
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_STRING 
17122: ST_TO_ADDR
// hardcore :=  ;
17123: LD_ADDR_VAR 0 4
17127: PUSH
17128: LD_STRING 
17130: ST_TO_ADDR
// for i = 1 to normalCounter do
17131: LD_ADDR_VAR 0 5
17135: PUSH
17136: DOUBLE
17137: LD_INT 1
17139: DEC
17140: ST_TO_ADDR
17141: LD_EXP 49
17145: PUSH
17146: FOR_TO
17147: IFFALSE 17248
// begin tmp := 0 ;
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_STRING 0
17156: ST_TO_ADDR
// if result [ 1 ] then
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: IFFALSE 17230
// if result [ 1 ] [ 1 ] = i then
17167: LD_VAR 0 1
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 1
17178: ARRAY
17179: PUSH
17180: LD_VAR 0 5
17184: EQUAL
17185: IFFALSE 17230
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_VAR 0 1
17196: PPUSH
17197: LD_INT 1
17199: PPUSH
17200: LD_VAR 0 1
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 3
17216: PPUSH
17217: CALL_OW 1
17221: ST_TO_ADDR
// tmp := 1 ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_STRING 1
17229: ST_TO_ADDR
// end ; normal := normal & tmp ;
17230: LD_ADDR_VAR 0 3
17234: PUSH
17235: LD_VAR 0 3
17239: PUSH
17240: LD_VAR 0 2
17244: STR
17245: ST_TO_ADDR
// end ;
17246: GO 17146
17248: POP
17249: POP
// for i = 1 to hardcoreCounter do
17250: LD_ADDR_VAR 0 5
17254: PUSH
17255: DOUBLE
17256: LD_INT 1
17258: DEC
17259: ST_TO_ADDR
17260: LD_EXP 50
17264: PUSH
17265: FOR_TO
17266: IFFALSE 17371
// begin tmp := 0 ;
17268: LD_ADDR_VAR 0 2
17272: PUSH
17273: LD_STRING 0
17275: ST_TO_ADDR
// if result [ 2 ] then
17276: LD_VAR 0 1
17280: PUSH
17281: LD_INT 2
17283: ARRAY
17284: IFFALSE 17353
// if result [ 2 ] [ 1 ] = 100 + i then
17286: LD_VAR 0 1
17290: PUSH
17291: LD_INT 2
17293: ARRAY
17294: PUSH
17295: LD_INT 1
17297: ARRAY
17298: PUSH
17299: LD_INT 100
17301: PUSH
17302: LD_VAR 0 5
17306: PLUS
17307: EQUAL
17308: IFFALSE 17353
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: LD_INT 2
17322: PPUSH
17323: LD_VAR 0 1
17327: PUSH
17328: LD_INT 2
17330: ARRAY
17331: PPUSH
17332: LD_INT 1
17334: PPUSH
17335: CALL_OW 3
17339: PPUSH
17340: CALL_OW 1
17344: ST_TO_ADDR
// tmp := 1 ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_STRING 1
17352: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17353: LD_ADDR_VAR 0 4
17357: PUSH
17358: LD_VAR 0 4
17362: PUSH
17363: LD_VAR 0 2
17367: STR
17368: ST_TO_ADDR
// end ;
17369: GO 17265
17371: POP
17372: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17373: LD_STRING getStreamItemsFromMission("
17375: PUSH
17376: LD_VAR 0 3
17380: STR
17381: PUSH
17382: LD_STRING ","
17384: STR
17385: PUSH
17386: LD_VAR 0 4
17390: STR
17391: PUSH
17392: LD_STRING ")
17394: STR
17395: PPUSH
17396: CALL_OW 559
// end else
17400: GO 17409
// ToLua ( getStreamItemsFromMission("","") ) ;
17402: LD_STRING getStreamItemsFromMission("","")
17404: PPUSH
17405: CALL_OW 559
// end ;
17409: LD_VAR 0 1
17413: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17414: LD_EXP 48
17418: PUSH
17419: LD_EXP 53
17423: AND
17424: IFFALSE 17548
17426: GO 17428
17428: DISABLE
17429: LD_INT 0
17431: PPUSH
17432: PPUSH
// begin enable ;
17433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 34
17456: PUSH
17457: LD_INT 7
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 34
17466: PUSH
17467: LD_INT 45
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 34
17476: PUSH
17477: LD_INT 28
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 34
17486: PUSH
17487: LD_INT 47
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PPUSH
17505: CALL_OW 69
17509: ST_TO_ADDR
// if not tmp then
17510: LD_VAR 0 2
17514: NOT
17515: IFFALSE 17519
// exit ;
17517: GO 17548
// for i in tmp do
17519: LD_ADDR_VAR 0 1
17523: PUSH
17524: LD_VAR 0 2
17528: PUSH
17529: FOR_IN
17530: IFFALSE 17546
// begin SetLives ( i , 0 ) ;
17532: LD_VAR 0 1
17536: PPUSH
17537: LD_INT 0
17539: PPUSH
17540: CALL_OW 234
// end ;
17544: GO 17529
17546: POP
17547: POP
// end ;
17548: PPOPN 2
17550: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17551: LD_EXP 48
17555: PUSH
17556: LD_EXP 54
17560: AND
17561: IFFALSE 17645
17563: GO 17565
17565: DISABLE
17566: LD_INT 0
17568: PPUSH
17569: PPUSH
// begin enable ;
17570: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_OWVAR 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 32
17590: PUSH
17591: LD_INT 3
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PPUSH
17602: CALL_OW 69
17606: ST_TO_ADDR
// if not tmp then
17607: LD_VAR 0 2
17611: NOT
17612: IFFALSE 17616
// exit ;
17614: GO 17645
// for i in tmp do
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: FOR_IN
17627: IFFALSE 17643
// begin SetLives ( i , 0 ) ;
17629: LD_VAR 0 1
17633: PPUSH
17634: LD_INT 0
17636: PPUSH
17637: CALL_OW 234
// end ;
17641: GO 17626
17643: POP
17644: POP
// end ;
17645: PPOPN 2
17647: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17648: LD_EXP 48
17652: PUSH
17653: LD_EXP 51
17657: AND
17658: IFFALSE 17751
17660: GO 17662
17662: DISABLE
17663: LD_INT 0
17665: PPUSH
// begin enable ;
17666: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_OWVAR 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 25
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 9
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 25
17709: PUSH
17710: LD_INT 8
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 69
17731: PUSH
17732: FOR_IN
17733: IFFALSE 17749
// begin SetClass ( i , 1 ) ;
17735: LD_VAR 0 1
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: CALL_OW 336
// end ;
17747: GO 17732
17749: POP
17750: POP
// end ;
17751: PPOPN 1
17753: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17754: LD_EXP 48
17758: PUSH
17759: LD_EXP 52
17763: AND
17764: PUSH
17765: LD_OWVAR 65
17769: PUSH
17770: LD_INT 7
17772: LESS
17773: AND
17774: IFFALSE 17788
17776: GO 17778
17778: DISABLE
// begin enable ;
17779: ENABLE
// game_speed := 7 ;
17780: LD_ADDR_OWVAR 65
17784: PUSH
17785: LD_INT 7
17787: ST_TO_ADDR
// end ;
17788: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17789: LD_EXP 48
17793: PUSH
17794: LD_EXP 55
17798: AND
17799: IFFALSE 18001
17801: GO 17803
17803: DISABLE
17804: LD_INT 0
17806: PPUSH
17807: PPUSH
17808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_INT 81
17816: PUSH
17817: LD_OWVAR 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 21
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: ST_TO_ADDR
// if not tmp then
17845: LD_VAR 0 3
17849: NOT
17850: IFFALSE 17854
// exit ;
17852: GO 18001
// if tmp > 5 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_INT 5
17861: GREATER
17862: IFFALSE 17874
// k := 5 else
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: LD_INT 5
17871: ST_TO_ADDR
17872: GO 17884
// k := tmp ;
17874: LD_ADDR_VAR 0 2
17878: PUSH
17879: LD_VAR 0 3
17883: ST_TO_ADDR
// for i := 1 to k do
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: DOUBLE
17890: LD_INT 1
17892: DEC
17893: ST_TO_ADDR
17894: LD_VAR 0 2
17898: PUSH
17899: FOR_TO
17900: IFFALSE 17999
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17902: LD_VAR 0 3
17906: PUSH
17907: LD_VAR 0 1
17911: ARRAY
17912: PPUSH
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 4
17920: MOD
17921: PUSH
17922: LD_INT 1
17924: PLUS
17925: PPUSH
17926: CALL_OW 259
17930: PUSH
17931: LD_INT 10
17933: LESS
17934: IFFALSE 17997
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17936: LD_VAR 0 3
17940: PUSH
17941: LD_VAR 0 1
17945: ARRAY
17946: PPUSH
17947: LD_VAR 0 1
17951: PUSH
17952: LD_INT 4
17954: MOD
17955: PUSH
17956: LD_INT 1
17958: PLUS
17959: PPUSH
17960: LD_VAR 0 3
17964: PUSH
17965: LD_VAR 0 1
17969: ARRAY
17970: PPUSH
17971: LD_VAR 0 1
17975: PUSH
17976: LD_INT 4
17978: MOD
17979: PUSH
17980: LD_INT 1
17982: PLUS
17983: PPUSH
17984: CALL_OW 259
17988: PUSH
17989: LD_INT 1
17991: PLUS
17992: PPUSH
17993: CALL_OW 237
17997: GO 17899
17999: POP
18000: POP
// end ;
18001: PPOPN 3
18003: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18004: LD_EXP 48
18008: PUSH
18009: LD_EXP 56
18013: AND
18014: IFFALSE 18034
18016: GO 18018
18018: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18019: LD_INT 4
18021: PPUSH
18022: LD_OWVAR 2
18026: PPUSH
18027: LD_INT 0
18029: PPUSH
18030: CALL_OW 324
18034: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18035: LD_EXP 48
18039: PUSH
18040: LD_EXP 85
18044: AND
18045: IFFALSE 18065
18047: GO 18049
18049: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18050: LD_INT 19
18052: PPUSH
18053: LD_OWVAR 2
18057: PPUSH
18058: LD_INT 0
18060: PPUSH
18061: CALL_OW 324
18065: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18066: LD_EXP 48
18070: PUSH
18071: LD_EXP 57
18075: AND
18076: IFFALSE 18178
18078: GO 18080
18080: DISABLE
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
// begin enable ;
18085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18086: LD_ADDR_VAR 0 2
18090: PUSH
18091: LD_INT 22
18093: PUSH
18094: LD_OWVAR 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 11
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 34
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: ST_TO_ADDR
// if not tmp then
18140: LD_VAR 0 2
18144: NOT
18145: IFFALSE 18149
// exit ;
18147: GO 18178
// for i in tmp do
18149: LD_ADDR_VAR 0 1
18153: PUSH
18154: LD_VAR 0 2
18158: PUSH
18159: FOR_IN
18160: IFFALSE 18176
// begin SetLives ( i , 0 ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_INT 0
18169: PPUSH
18170: CALL_OW 234
// end ;
18174: GO 18159
18176: POP
18177: POP
// end ;
18178: PPOPN 2
18180: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18181: LD_EXP 48
18185: PUSH
18186: LD_EXP 58
18190: AND
18191: IFFALSE 18211
18193: GO 18195
18195: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18196: LD_INT 32
18198: PPUSH
18199: LD_OWVAR 2
18203: PPUSH
18204: LD_INT 0
18206: PPUSH
18207: CALL_OW 324
18211: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18212: LD_EXP 48
18216: PUSH
18217: LD_EXP 59
18221: AND
18222: IFFALSE 18403
18224: GO 18226
18226: DISABLE
18227: LD_INT 0
18229: PPUSH
18230: PPUSH
18231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18232: LD_ADDR_VAR 0 2
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_OWVAR 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 33
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: ST_TO_ADDR
// if not tmp then
18268: LD_VAR 0 2
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18403
// side := 0 ;
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_INT 0
18284: ST_TO_ADDR
// for i := 1 to 8 do
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: DOUBLE
18291: LD_INT 1
18293: DEC
18294: ST_TO_ADDR
18295: LD_INT 8
18297: PUSH
18298: FOR_TO
18299: IFFALSE 18347
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18301: LD_OWVAR 2
18305: PUSH
18306: LD_VAR 0 1
18310: NONEQUAL
18311: PUSH
18312: LD_OWVAR 2
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 81
18326: PUSH
18327: LD_INT 2
18329: EQUAL
18330: AND
18331: IFFALSE 18345
// begin side := i ;
18333: LD_ADDR_VAR 0 3
18337: PUSH
18338: LD_VAR 0 1
18342: ST_TO_ADDR
// break ;
18343: GO 18347
// end ;
18345: GO 18298
18347: POP
18348: POP
// if not side then
18349: LD_VAR 0 3
18353: NOT
18354: IFFALSE 18358
// exit ;
18356: GO 18403
// for i := 1 to tmp do
18358: LD_ADDR_VAR 0 1
18362: PUSH
18363: DOUBLE
18364: LD_INT 1
18366: DEC
18367: ST_TO_ADDR
18368: LD_VAR 0 2
18372: PUSH
18373: FOR_TO
18374: IFFALSE 18401
// if Prob ( 60 ) then
18376: LD_INT 60
18378: PPUSH
18379: CALL_OW 13
18383: IFFALSE 18399
// SetSide ( i , side ) ;
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: CALL_OW 235
18399: GO 18373
18401: POP
18402: POP
// end ;
18403: PPOPN 3
18405: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18406: LD_EXP 48
18410: PUSH
18411: LD_EXP 61
18415: AND
18416: IFFALSE 18535
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18424: LD_ADDR_VAR 0 1
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_OWVAR 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 3
18453: PUSH
18454: LD_INT 23
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PUSH
18478: FOR_IN
18479: IFFALSE 18533
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 257
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 3
18499: PUSH
18500: LD_INT 4
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: IN
18509: IFFALSE 18531
// SetClass ( un , rand ( 1 , 4 ) ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: LD_INT 4
18521: PPUSH
18522: CALL_OW 12
18526: PPUSH
18527: CALL_OW 336
18531: GO 18478
18533: POP
18534: POP
// end ;
18535: PPOPN 1
18537: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18538: LD_EXP 48
18542: PUSH
18543: LD_EXP 60
18547: AND
18548: IFFALSE 18627
18550: GO 18552
18552: DISABLE
18553: LD_INT 0
18555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_INT 22
18563: PUSH
18564: LD_OWVAR 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 21
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PPUSH
18587: CALL_OW 69
18591: ST_TO_ADDR
// if not tmp then
18592: LD_VAR 0 1
18596: NOT
18597: IFFALSE 18601
// exit ;
18599: GO 18627
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18601: LD_VAR 0 1
18605: PUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_VAR 0 1
18613: PPUSH
18614: CALL_OW 12
18618: ARRAY
18619: PPUSH
18620: LD_INT 100
18622: PPUSH
18623: CALL_OW 234
// end ;
18627: PPOPN 1
18629: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18630: LD_EXP 48
18634: PUSH
18635: LD_EXP 62
18639: AND
18640: IFFALSE 18738
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_OWVAR 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PPUSH
18679: CALL_OW 69
18683: ST_TO_ADDR
// if not tmp then
18684: LD_VAR 0 1
18688: NOT
18689: IFFALSE 18693
// exit ;
18691: GO 18738
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 1
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 12
18710: ARRAY
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: LD_INT 4
18717: PPUSH
18718: CALL_OW 12
18722: PPUSH
18723: LD_INT 3000
18725: PPUSH
18726: LD_INT 9000
18728: PPUSH
18729: CALL_OW 12
18733: PPUSH
18734: CALL_OW 492
// end ;
18738: PPOPN 1
18740: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18741: LD_EXP 48
18745: PUSH
18746: LD_EXP 63
18750: AND
18751: IFFALSE 18771
18753: GO 18755
18755: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18756: LD_INT 1
18758: PPUSH
18759: LD_OWVAR 2
18763: PPUSH
18764: LD_INT 0
18766: PPUSH
18767: CALL_OW 324
18771: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18772: LD_EXP 48
18776: PUSH
18777: LD_EXP 64
18781: AND
18782: IFFALSE 18865
18784: GO 18786
18786: DISABLE
18787: LD_INT 0
18789: PPUSH
18790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: LD_INT 22
18798: PUSH
18799: LD_OWVAR 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 3
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 69
18826: ST_TO_ADDR
// if not tmp then
18827: LD_VAR 0 2
18831: NOT
18832: IFFALSE 18836
// exit ;
18834: GO 18865
// for i in tmp do
18836: LD_ADDR_VAR 0 1
18840: PUSH
18841: LD_VAR 0 2
18845: PUSH
18846: FOR_IN
18847: IFFALSE 18863
// SetBLevel ( i , 10 ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_INT 10
18856: PPUSH
18857: CALL_OW 241
18861: GO 18846
18863: POP
18864: POP
// end ;
18865: PPOPN 2
18867: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18868: LD_EXP 48
18872: PUSH
18873: LD_EXP 65
18877: AND
18878: IFFALSE 18989
18880: GO 18882
18882: DISABLE
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: ST_TO_ADDR
// if not tmp then
18924: LD_VAR 0 3
18928: NOT
18929: IFFALSE 18933
// exit ;
18931: GO 18989
// un := tmp [ rand ( 1 , tmp ) ] ;
18933: LD_ADDR_VAR 0 2
18937: PUSH
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 1
18945: PPUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: CALL_OW 12
18955: ARRAY
18956: ST_TO_ADDR
// if Crawls ( un ) then
18957: LD_VAR 0 2
18961: PPUSH
18962: CALL_OW 318
18966: IFFALSE 18977
// ComWalk ( un ) ;
18968: LD_VAR 0 2
18972: PPUSH
18973: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18977: LD_VAR 0 2
18981: PPUSH
18982: LD_INT 5
18984: PPUSH
18985: CALL_OW 336
// end ;
18989: PPOPN 3
18991: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18992: LD_EXP 48
18996: PUSH
18997: LD_EXP 66
19001: AND
19002: PUSH
19003: LD_OWVAR 67
19007: PUSH
19008: LD_INT 3
19010: LESS
19011: AND
19012: IFFALSE 19031
19014: GO 19016
19016: DISABLE
// Difficulty := Difficulty + 1 ;
19017: LD_ADDR_OWVAR 67
19021: PUSH
19022: LD_OWVAR 67
19026: PUSH
19027: LD_INT 1
19029: PLUS
19030: ST_TO_ADDR
19031: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19032: LD_EXP 48
19036: PUSH
19037: LD_EXP 67
19041: AND
19042: IFFALSE 19145
19044: GO 19046
19046: DISABLE
19047: LD_INT 0
19049: PPUSH
// begin for i := 1 to 5 do
19050: LD_ADDR_VAR 0 1
19054: PUSH
19055: DOUBLE
19056: LD_INT 1
19058: DEC
19059: ST_TO_ADDR
19060: LD_INT 5
19062: PUSH
19063: FOR_TO
19064: IFFALSE 19143
// begin uc_nation := nation_nature ;
19066: LD_ADDR_OWVAR 21
19070: PUSH
19071: LD_INT 0
19073: ST_TO_ADDR
// uc_side := 0 ;
19074: LD_ADDR_OWVAR 20
19078: PUSH
19079: LD_INT 0
19081: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19082: LD_ADDR_OWVAR 29
19086: PUSH
19087: LD_INT 12
19089: PUSH
19090: LD_INT 12
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: ST_TO_ADDR
// hc_agressivity := 20 ;
19097: LD_ADDR_OWVAR 35
19101: PUSH
19102: LD_INT 20
19104: ST_TO_ADDR
// hc_class := class_tiger ;
19105: LD_ADDR_OWVAR 28
19109: PUSH
19110: LD_INT 14
19112: ST_TO_ADDR
// hc_gallery :=  ;
19113: LD_ADDR_OWVAR 33
19117: PUSH
19118: LD_STRING 
19120: ST_TO_ADDR
// hc_name :=  ;
19121: LD_ADDR_OWVAR 26
19125: PUSH
19126: LD_STRING 
19128: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19129: CALL_OW 44
19133: PPUSH
19134: LD_INT 0
19136: PPUSH
19137: CALL_OW 51
// end ;
19141: GO 19063
19143: POP
19144: POP
// end ;
19145: PPOPN 1
19147: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19148: LD_EXP 48
19152: PUSH
19153: LD_EXP 68
19157: AND
19158: IFFALSE 19167
19160: GO 19162
19162: DISABLE
// StreamSibBomb ;
19163: CALL 19168 0 0
19167: END
// export function StreamSibBomb ; var i , x , y ; begin
19168: LD_INT 0
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
// result := false ;
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// for i := 1 to 16 do
19182: LD_ADDR_VAR 0 2
19186: PUSH
19187: DOUBLE
19188: LD_INT 1
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 16
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19395
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_INT 10
19205: PUSH
19206: LD_INT 20
19208: PUSH
19209: LD_INT 30
19211: PUSH
19212: LD_INT 40
19214: PUSH
19215: LD_INT 50
19217: PUSH
19218: LD_INT 60
19220: PUSH
19221: LD_INT 70
19223: PUSH
19224: LD_INT 80
19226: PUSH
19227: LD_INT 90
19229: PUSH
19230: LD_INT 100
19232: PUSH
19233: LD_INT 110
19235: PUSH
19236: LD_INT 120
19238: PUSH
19239: LD_INT 130
19241: PUSH
19242: LD_INT 140
19244: PUSH
19245: LD_INT 150
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PPUSH
19268: LD_INT 15
19270: PPUSH
19271: CALL_OW 12
19275: ARRAY
19276: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19277: LD_ADDR_VAR 0 4
19281: PUSH
19282: LD_INT 10
19284: PUSH
19285: LD_INT 20
19287: PUSH
19288: LD_INT 30
19290: PUSH
19291: LD_INT 40
19293: PUSH
19294: LD_INT 50
19296: PUSH
19297: LD_INT 60
19299: PUSH
19300: LD_INT 70
19302: PUSH
19303: LD_INT 80
19305: PUSH
19306: LD_INT 90
19308: PUSH
19309: LD_INT 100
19311: PUSH
19312: LD_INT 110
19314: PUSH
19315: LD_INT 120
19317: PUSH
19318: LD_INT 130
19320: PUSH
19321: LD_INT 140
19323: PUSH
19324: LD_INT 150
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: PPUSH
19347: LD_INT 15
19349: PPUSH
19350: CALL_OW 12
19354: ARRAY
19355: ST_TO_ADDR
// if ValidHex ( x , y ) then
19356: LD_VAR 0 3
19360: PPUSH
19361: LD_VAR 0 4
19365: PPUSH
19366: CALL_OW 488
19370: IFFALSE 19393
// begin result := [ x , y ] ;
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_VAR 0 3
19381: PUSH
19382: LD_VAR 0 4
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: ST_TO_ADDR
// break ;
19391: GO 19395
// end ; end ;
19393: GO 19195
19395: POP
19396: POP
// if result then
19397: LD_VAR 0 1
19401: IFFALSE 19461
// begin ToLua ( playSibBomb() ) ;
19403: LD_STRING playSibBomb()
19405: PPUSH
19406: CALL_OW 559
// wait ( 0 0$14 ) ;
19410: LD_INT 490
19412: PPUSH
19413: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19417: LD_VAR 0 1
19421: PUSH
19422: LD_INT 1
19424: ARRAY
19425: PPUSH
19426: LD_VAR 0 1
19430: PUSH
19431: LD_INT 2
19433: ARRAY
19434: PPUSH
19435: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19439: LD_VAR 0 1
19443: PUSH
19444: LD_INT 1
19446: ARRAY
19447: PPUSH
19448: LD_VAR 0 1
19452: PUSH
19453: LD_INT 2
19455: ARRAY
19456: PPUSH
19457: CALL_OW 429
// end ; end ;
19461: LD_VAR 0 1
19465: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19466: LD_EXP 48
19470: PUSH
19471: LD_EXP 70
19475: AND
19476: IFFALSE 19488
19478: GO 19480
19480: DISABLE
// YouLost (  ) ;
19481: LD_STRING 
19483: PPUSH
19484: CALL_OW 104
19488: END
// every 0 0$1 trigger StreamModeActive and sFog do
19489: LD_EXP 48
19493: PUSH
19494: LD_EXP 69
19498: AND
19499: IFFALSE 19513
19501: GO 19503
19503: DISABLE
// FogOff ( your_side ) ;
19504: LD_OWVAR 2
19508: PPUSH
19509: CALL_OW 344
19513: END
// every 0 0$1 trigger StreamModeActive and sSun do
19514: LD_EXP 48
19518: PUSH
19519: LD_EXP 71
19523: AND
19524: IFFALSE 19552
19526: GO 19528
19528: DISABLE
// begin solar_recharge_percent := 0 ;
19529: LD_ADDR_OWVAR 79
19533: PUSH
19534: LD_INT 0
19536: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19537: LD_INT 10500
19539: PPUSH
19540: CALL_OW 67
// solar_recharge_percent := 100 ;
19544: LD_ADDR_OWVAR 79
19548: PUSH
19549: LD_INT 100
19551: ST_TO_ADDR
// end ;
19552: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19553: LD_EXP 48
19557: PUSH
19558: LD_EXP 72
19562: AND
19563: IFFALSE 19802
19565: GO 19567
19567: DISABLE
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
19572: PPUSH
// begin tmp := [ ] ;
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: EMPTY
19579: ST_TO_ADDR
// for i := 1 to 6 do
19580: LD_ADDR_VAR 0 1
19584: PUSH
19585: DOUBLE
19586: LD_INT 1
19588: DEC
19589: ST_TO_ADDR
19590: LD_INT 6
19592: PUSH
19593: FOR_TO
19594: IFFALSE 19699
// begin uc_nation := nation_nature ;
19596: LD_ADDR_OWVAR 21
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// uc_side := 0 ;
19604: LD_ADDR_OWVAR 20
19608: PUSH
19609: LD_INT 0
19611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19612: LD_ADDR_OWVAR 29
19616: PUSH
19617: LD_INT 12
19619: PUSH
19620: LD_INT 12
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// hc_agressivity := 20 ;
19627: LD_ADDR_OWVAR 35
19631: PUSH
19632: LD_INT 20
19634: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19635: LD_ADDR_OWVAR 28
19639: PUSH
19640: LD_INT 17
19642: ST_TO_ADDR
// hc_gallery :=  ;
19643: LD_ADDR_OWVAR 33
19647: PUSH
19648: LD_STRING 
19650: ST_TO_ADDR
// hc_name :=  ;
19651: LD_ADDR_OWVAR 26
19655: PUSH
19656: LD_STRING 
19658: ST_TO_ADDR
// un := CreateHuman ;
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: CALL_OW 44
19668: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19669: LD_VAR 0 2
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 51
// tmp := tmp ^ un ;
19681: LD_ADDR_VAR 0 3
19685: PUSH
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 2
19695: ADD
19696: ST_TO_ADDR
// end ;
19697: GO 19593
19699: POP
19700: POP
// repeat wait ( 0 0$1 ) ;
19701: LD_INT 35
19703: PPUSH
19704: CALL_OW 67
// for un in tmp do
19708: LD_ADDR_VAR 0 2
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: FOR_IN
19719: IFFALSE 19793
// begin if IsDead ( un ) then
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL_OW 301
19730: IFFALSE 19750
// begin tmp := tmp diff un ;
19732: LD_ADDR_VAR 0 3
19736: PUSH
19737: LD_VAR 0 3
19741: PUSH
19742: LD_VAR 0 2
19746: DIFF
19747: ST_TO_ADDR
// continue ;
19748: GO 19718
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19750: LD_VAR 0 2
19754: PPUSH
19755: LD_INT 3
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: PPUSH
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL_OW 74
19786: PPUSH
19787: CALL_OW 115
// end ;
19791: GO 19718
19793: POP
19794: POP
// until not tmp ;
19795: LD_VAR 0 3
19799: NOT
19800: IFFALSE 19701
// end ;
19802: PPOPN 3
19804: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19805: LD_EXP 48
19809: PUSH
19810: LD_EXP 73
19814: AND
19815: IFFALSE 19869
19817: GO 19819
19819: DISABLE
// begin ToLua ( displayTroll(); ) ;
19820: LD_STRING displayTroll();
19822: PPUSH
19823: CALL_OW 559
// wait ( 3 3$00 ) ;
19827: LD_INT 6300
19829: PPUSH
19830: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19834: LD_STRING hideTroll();
19836: PPUSH
19837: CALL_OW 559
// wait ( 1 1$00 ) ;
19841: LD_INT 2100
19843: PPUSH
19844: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19848: LD_STRING displayTroll();
19850: PPUSH
19851: CALL_OW 559
// wait ( 1 1$00 ) ;
19855: LD_INT 2100
19857: PPUSH
19858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19862: LD_STRING hideTroll();
19864: PPUSH
19865: CALL_OW 559
// end ;
19869: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19870: LD_EXP 48
19874: PUSH
19875: LD_EXP 74
19879: AND
19880: IFFALSE 19943
19882: GO 19884
19884: DISABLE
19885: LD_INT 0
19887: PPUSH
// begin p := 0 ;
19888: LD_ADDR_VAR 0 1
19892: PUSH
19893: LD_INT 0
19895: ST_TO_ADDR
// repeat game_speed := 1 ;
19896: LD_ADDR_OWVAR 65
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19904: LD_INT 35
19906: PPUSH
19907: CALL_OW 67
// p := p + 1 ;
19911: LD_ADDR_VAR 0 1
19915: PUSH
19916: LD_VAR 0 1
19920: PUSH
19921: LD_INT 1
19923: PLUS
19924: ST_TO_ADDR
// until p >= 60 ;
19925: LD_VAR 0 1
19929: PUSH
19930: LD_INT 60
19932: GREATEREQUAL
19933: IFFALSE 19896
// game_speed := 4 ;
19935: LD_ADDR_OWVAR 65
19939: PUSH
19940: LD_INT 4
19942: ST_TO_ADDR
// end ;
19943: PPOPN 1
19945: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19946: LD_EXP 48
19950: PUSH
19951: LD_EXP 75
19955: AND
19956: IFFALSE 20102
19958: GO 19960
19960: DISABLE
19961: LD_INT 0
19963: PPUSH
19964: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 30
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 30
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: ST_TO_ADDR
// if not depot then
20019: LD_VAR 0 1
20023: NOT
20024: IFFALSE 20028
// exit ;
20026: GO 20102
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20028: LD_ADDR_VAR 0 2
20032: PUSH
20033: LD_VAR 0 1
20037: PUSH
20038: LD_INT 1
20040: PPUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 12
20050: ARRAY
20051: PPUSH
20052: CALL_OW 274
20056: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20057: LD_VAR 0 2
20061: PPUSH
20062: LD_INT 1
20064: PPUSH
20065: LD_INT 0
20067: PPUSH
20068: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20072: LD_VAR 0 2
20076: PPUSH
20077: LD_INT 2
20079: PPUSH
20080: LD_INT 0
20082: PPUSH
20083: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20087: LD_VAR 0 2
20091: PPUSH
20092: LD_INT 3
20094: PPUSH
20095: LD_INT 0
20097: PPUSH
20098: CALL_OW 277
// end ;
20102: PPOPN 2
20104: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20105: LD_EXP 48
20109: PUSH
20110: LD_EXP 76
20114: AND
20115: IFFALSE 20212
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20123: LD_ADDR_VAR 0 1
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_OWVAR 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 3
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 1
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20186: LD_VAR 0 1
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_VAR 0 1
20198: PPUSH
20199: CALL_OW 12
20203: ARRAY
20204: PPUSH
20205: LD_INT 200
20207: PPUSH
20208: CALL_OW 234
// end ;
20212: PPOPN 1
20214: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20215: LD_EXP 48
20219: PUSH
20220: LD_EXP 77
20224: AND
20225: IFFALSE 20304
20227: GO 20229
20229: DISABLE
20230: LD_INT 0
20232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20233: LD_ADDR_VAR 0 1
20237: PUSH
20238: LD_INT 22
20240: PUSH
20241: LD_OWVAR 2
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 21
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PPUSH
20264: CALL_OW 69
20268: ST_TO_ADDR
// if not tmp then
20269: LD_VAR 0 1
20273: NOT
20274: IFFALSE 20278
// exit ;
20276: GO 20304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20278: LD_VAR 0 1
20282: PUSH
20283: LD_INT 1
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 12
20295: ARRAY
20296: PPUSH
20297: LD_INT 60
20299: PPUSH
20300: CALL_OW 234
// end ;
20304: PPOPN 1
20306: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20307: LD_EXP 48
20311: PUSH
20312: LD_EXP 78
20316: AND
20317: IFFALSE 20416
20319: GO 20321
20321: DISABLE
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
// begin enable ;
20326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20327: LD_ADDR_VAR 0 1
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_OWVAR 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 61
20346: PUSH
20347: EMPTY
20348: LIST
20349: PUSH
20350: LD_INT 33
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 1
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20416
// for i in tmp do
20379: LD_ADDR_VAR 0 2
20383: PUSH
20384: LD_VAR 0 1
20388: PUSH
20389: FOR_IN
20390: IFFALSE 20414
// if IsControledBy ( i ) then
20392: LD_VAR 0 2
20396: PPUSH
20397: CALL_OW 312
20401: IFFALSE 20412
// ComUnlink ( i ) ;
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 136
20412: GO 20389
20414: POP
20415: POP
// end ;
20416: PPOPN 2
20418: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20419: LD_EXP 48
20423: PUSH
20424: LD_EXP 79
20428: AND
20429: IFFALSE 20569
20431: GO 20433
20433: DISABLE
20434: LD_INT 0
20436: PPUSH
20437: PPUSH
// begin ToLua ( displayPowell(); ) ;
20438: LD_STRING displayPowell();
20440: PPUSH
20441: CALL_OW 559
// uc_side := 0 ;
20445: LD_ADDR_OWVAR 20
20449: PUSH
20450: LD_INT 0
20452: ST_TO_ADDR
// uc_nation := 2 ;
20453: LD_ADDR_OWVAR 21
20457: PUSH
20458: LD_INT 2
20460: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20461: LD_ADDR_OWVAR 37
20465: PUSH
20466: LD_INT 14
20468: ST_TO_ADDR
// vc_engine := engine_siberite ;
20469: LD_ADDR_OWVAR 39
20473: PUSH
20474: LD_INT 3
20476: ST_TO_ADDR
// vc_control := control_apeman ;
20477: LD_ADDR_OWVAR 38
20481: PUSH
20482: LD_INT 5
20484: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20485: LD_ADDR_OWVAR 40
20489: PUSH
20490: LD_INT 29
20492: ST_TO_ADDR
// un := CreateVehicle ;
20493: LD_ADDR_VAR 0 2
20497: PUSH
20498: CALL_OW 45
20502: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20503: LD_VAR 0 2
20507: PPUSH
20508: LD_INT 1
20510: PPUSH
20511: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20515: LD_INT 35
20517: PPUSH
20518: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 69
20543: PPUSH
20544: LD_VAR 0 2
20548: PPUSH
20549: CALL_OW 74
20553: PPUSH
20554: CALL_OW 115
// until IsDead ( un ) ;
20558: LD_VAR 0 2
20562: PPUSH
20563: CALL_OW 301
20567: IFFALSE 20515
// end ;
20569: PPOPN 2
20571: END
// every 0 0$1 trigger StreamModeActive and sStu do
20572: LD_EXP 48
20576: PUSH
20577: LD_EXP 87
20581: AND
20582: IFFALSE 20598
20584: GO 20586
20586: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20587: LD_STRING displayStucuk();
20589: PPUSH
20590: CALL_OW 559
// ResetFog ;
20594: CALL_OW 335
// end ;
20598: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20599: LD_EXP 48
20603: PUSH
20604: LD_EXP 80
20608: AND
20609: IFFALSE 20750
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_OWVAR 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 21
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PPUSH
20649: CALL_OW 69
20653: ST_TO_ADDR
// if not tmp then
20654: LD_VAR 0 2
20658: NOT
20659: IFFALSE 20663
// exit ;
20661: GO 20750
// un := tmp [ rand ( 1 , tmp ) ] ;
20663: LD_ADDR_VAR 0 1
20667: PUSH
20668: LD_VAR 0 2
20672: PUSH
20673: LD_INT 1
20675: PPUSH
20676: LD_VAR 0 2
20680: PPUSH
20681: CALL_OW 12
20685: ARRAY
20686: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20687: LD_VAR 0 1
20691: PPUSH
20692: LD_INT 0
20694: PPUSH
20695: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_OWVAR 3
20708: PUSH
20709: LD_VAR 0 1
20713: DIFF
20714: PPUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL_OW 74
20724: PPUSH
20725: CALL_OW 115
// wait ( 0 0$20 ) ;
20729: LD_INT 700
20731: PPUSH
20732: CALL_OW 67
// SetSide ( un , your_side ) ;
20736: LD_VAR 0 1
20740: PPUSH
20741: LD_OWVAR 2
20745: PPUSH
20746: CALL_OW 235
// end ;
20750: PPOPN 2
20752: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20753: LD_EXP 48
20757: PUSH
20758: LD_EXP 81
20762: AND
20763: IFFALSE 20869
20765: GO 20767
20767: DISABLE
20768: LD_INT 0
20770: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20771: LD_ADDR_VAR 0 1
20775: PUSH
20776: LD_INT 22
20778: PUSH
20779: LD_OWVAR 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 30
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: ST_TO_ADDR
// if not depot then
20825: LD_VAR 0 1
20829: NOT
20830: IFFALSE 20834
// exit ;
20832: GO 20869
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20834: LD_VAR 0 1
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: PPUSH
20843: CALL_OW 250
20847: PPUSH
20848: LD_VAR 0 1
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: PPUSH
20857: CALL_OW 251
20861: PPUSH
20862: LD_INT 70
20864: PPUSH
20865: CALL_OW 495
// end ;
20869: PPOPN 1
20871: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20872: LD_EXP 48
20876: PUSH
20877: LD_EXP 82
20881: AND
20882: IFFALSE 21093
20884: GO 20886
20886: DISABLE
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20894: LD_ADDR_VAR 0 5
20898: PUSH
20899: LD_INT 22
20901: PUSH
20902: LD_OWVAR 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 69
20929: ST_TO_ADDR
// if not tmp then
20930: LD_VAR 0 5
20934: NOT
20935: IFFALSE 20939
// exit ;
20937: GO 21093
// for i in tmp do
20939: LD_ADDR_VAR 0 1
20943: PUSH
20944: LD_VAR 0 5
20948: PUSH
20949: FOR_IN
20950: IFFALSE 21091
// begin d := rand ( 0 , 5 ) ;
20952: LD_ADDR_VAR 0 4
20956: PUSH
20957: LD_INT 0
20959: PPUSH
20960: LD_INT 5
20962: PPUSH
20963: CALL_OW 12
20967: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: CALL_OW 250
20982: PPUSH
20983: LD_VAR 0 4
20987: PPUSH
20988: LD_INT 3
20990: PPUSH
20991: LD_INT 12
20993: PPUSH
20994: CALL_OW 12
20998: PPUSH
20999: CALL_OW 272
21003: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL_OW 251
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: LD_INT 3
21026: PPUSH
21027: LD_INT 12
21029: PPUSH
21030: CALL_OW 12
21034: PPUSH
21035: CALL_OW 273
21039: ST_TO_ADDR
// if ValidHex ( x , y ) then
21040: LD_VAR 0 2
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: CALL_OW 488
21054: IFFALSE 21089
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21056: LD_VAR 0 1
21060: PPUSH
21061: LD_VAR 0 2
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: LD_INT 3
21073: PPUSH
21074: LD_INT 6
21076: PPUSH
21077: CALL_OW 12
21081: PPUSH
21082: LD_INT 1
21084: PPUSH
21085: CALL_OW 483
// end ;
21089: GO 20949
21091: POP
21092: POP
// end ;
21093: PPOPN 5
21095: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21096: LD_EXP 48
21100: PUSH
21101: LD_EXP 83
21105: AND
21106: IFFALSE 21200
21108: GO 21110
21110: DISABLE
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21115: LD_ADDR_VAR 0 2
21119: PUSH
21120: LD_INT 22
21122: PUSH
21123: LD_OWVAR 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 32
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 21
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: ST_TO_ADDR
// if not tmp then
21162: LD_VAR 0 2
21166: NOT
21167: IFFALSE 21171
// exit ;
21169: GO 21200
// for i in tmp do
21171: LD_ADDR_VAR 0 1
21175: PUSH
21176: LD_VAR 0 2
21180: PUSH
21181: FOR_IN
21182: IFFALSE 21198
// SetFuel ( i , 0 ) ;
21184: LD_VAR 0 1
21188: PPUSH
21189: LD_INT 0
21191: PPUSH
21192: CALL_OW 240
21196: GO 21181
21198: POP
21199: POP
// end ;
21200: PPOPN 2
21202: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21203: LD_EXP 48
21207: PUSH
21208: LD_EXP 84
21212: AND
21213: IFFALSE 21279
21215: GO 21217
21217: DISABLE
21218: LD_INT 0
21220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21221: LD_ADDR_VAR 0 1
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_OWVAR 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 30
21240: PUSH
21241: LD_INT 29
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: ST_TO_ADDR
// if not tmp then
21257: LD_VAR 0 1
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21279
// DestroyUnit ( tmp [ 1 ] ) ;
21266: LD_VAR 0 1
21270: PUSH
21271: LD_INT 1
21273: ARRAY
21274: PPUSH
21275: CALL_OW 65
// end ;
21279: PPOPN 1
21281: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21282: LD_EXP 48
21286: PUSH
21287: LD_EXP 86
21291: AND
21292: IFFALSE 21421
21294: GO 21296
21296: DISABLE
21297: LD_INT 0
21299: PPUSH
// begin uc_side := 0 ;
21300: LD_ADDR_OWVAR 20
21304: PUSH
21305: LD_INT 0
21307: ST_TO_ADDR
// uc_nation := nation_arabian ;
21308: LD_ADDR_OWVAR 21
21312: PUSH
21313: LD_INT 2
21315: ST_TO_ADDR
// hc_gallery :=  ;
21316: LD_ADDR_OWVAR 33
21320: PUSH
21321: LD_STRING 
21323: ST_TO_ADDR
// hc_name :=  ;
21324: LD_ADDR_OWVAR 26
21328: PUSH
21329: LD_STRING 
21331: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21332: LD_INT 1
21334: PPUSH
21335: LD_INT 11
21337: PPUSH
21338: LD_INT 10
21340: PPUSH
21341: CALL_OW 380
// un := CreateHuman ;
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: CALL_OW 44
21354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21367: LD_INT 35
21369: PPUSH
21370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 22
21381: PUSH
21382: LD_OWVAR 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PPUSH
21391: CALL_OW 69
21395: PPUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 74
21405: PPUSH
21406: CALL_OW 115
// until IsDead ( un ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 301
21419: IFFALSE 21367
// end ;
21421: PPOPN 1
21423: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21424: LD_EXP 48
21428: PUSH
21429: LD_EXP 88
21433: AND
21434: IFFALSE 21446
21436: GO 21438
21438: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21439: LD_STRING earthquake(getX(game), 0, 32)
21441: PPUSH
21442: CALL_OW 559
21446: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21447: LD_EXP 48
21451: PUSH
21452: LD_EXP 89
21456: AND
21457: IFFALSE 21548
21459: GO 21461
21461: DISABLE
21462: LD_INT 0
21464: PPUSH
// begin enable ;
21465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21466: LD_ADDR_VAR 0 1
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 21
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 33
21495: PUSH
21496: LD_INT 3
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: ST_TO_ADDR
// if not tmp then
21513: LD_VAR 0 1
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21522: LD_VAR 0 1
21526: PUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 12
21539: ARRAY
21540: PPUSH
21541: LD_INT 1
21543: PPUSH
21544: CALL_OW 234
// end ;
21548: PPOPN 1
21550: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21551: LD_EXP 48
21555: PUSH
21556: LD_EXP 90
21560: AND
21561: IFFALSE 21702
21563: GO 21565
21565: DISABLE
21566: LD_INT 0
21568: PPUSH
21569: PPUSH
21570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_OWVAR 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 25
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PPUSH
21602: CALL_OW 69
21606: ST_TO_ADDR
// if not tmp then
21607: LD_VAR 0 3
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 21702
// un := tmp [ rand ( 1 , tmp ) ] ;
21616: LD_ADDR_VAR 0 2
21620: PUSH
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 1
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: CALL_OW 12
21638: ARRAY
21639: ST_TO_ADDR
// if Crawls ( un ) then
21640: LD_VAR 0 2
21644: PPUSH
21645: CALL_OW 318
21649: IFFALSE 21660
// ComWalk ( un ) ;
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21660: LD_VAR 0 2
21664: PPUSH
21665: LD_INT 9
21667: PPUSH
21668: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21672: LD_INT 28
21674: PPUSH
21675: LD_OWVAR 2
21679: PPUSH
21680: LD_INT 2
21682: PPUSH
21683: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21687: LD_INT 29
21689: PPUSH
21690: LD_OWVAR 2
21694: PPUSH
21695: LD_INT 2
21697: PPUSH
21698: CALL_OW 322
// end ;
21702: PPOPN 3
21704: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21705: LD_EXP 48
21709: PUSH
21710: LD_EXP 91
21714: AND
21715: IFFALSE 21826
21717: GO 21719
21719: DISABLE
21720: LD_INT 0
21722: PPUSH
21723: PPUSH
21724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21725: LD_ADDR_VAR 0 3
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_OWVAR 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 25
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 69
21760: ST_TO_ADDR
// if not tmp then
21761: LD_VAR 0 3
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 21826
// un := tmp [ rand ( 1 , tmp ) ] ;
21770: LD_ADDR_VAR 0 2
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 12
21792: ARRAY
21793: ST_TO_ADDR
// if Crawls ( un ) then
21794: LD_VAR 0 2
21798: PPUSH
21799: CALL_OW 318
21803: IFFALSE 21814
// ComWalk ( un ) ;
21805: LD_VAR 0 2
21809: PPUSH
21810: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21814: LD_VAR 0 2
21818: PPUSH
21819: LD_INT 8
21821: PPUSH
21822: CALL_OW 336
// end ;
21826: PPOPN 3
21828: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21829: LD_EXP 48
21833: PUSH
21834: LD_EXP 92
21838: AND
21839: IFFALSE 21983
21841: GO 21843
21843: DISABLE
21844: LD_INT 0
21846: PPUSH
21847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 22
21855: PUSH
21856: LD_OWVAR 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 21
21867: PUSH
21868: LD_INT 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: PUSH
21878: LD_INT 34
21880: PUSH
21881: LD_INT 12
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 34
21890: PUSH
21891: LD_INT 51
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 34
21900: PUSH
21901: LD_INT 32
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: PPUSH
21919: CALL_OW 69
21923: ST_TO_ADDR
// if not tmp then
21924: LD_VAR 0 2
21928: NOT
21929: IFFALSE 21933
// exit ;
21931: GO 21983
// for i in tmp do
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_VAR 0 2
21942: PUSH
21943: FOR_IN
21944: IFFALSE 21981
// if GetCargo ( i , mat_artifact ) = 0 then
21946: LD_VAR 0 1
21950: PPUSH
21951: LD_INT 4
21953: PPUSH
21954: CALL_OW 289
21958: PUSH
21959: LD_INT 0
21961: EQUAL
21962: IFFALSE 21979
// SetCargo ( i , mat_siberit , 100 ) ;
21964: LD_VAR 0 1
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 100
21974: PPUSH
21975: CALL_OW 290
21979: GO 21943
21981: POP
21982: POP
// end ;
21983: PPOPN 2
21985: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21986: LD_EXP 48
21990: PUSH
21991: LD_EXP 93
21995: AND
21996: IFFALSE 22179
21998: GO 22000
22000: DISABLE
22001: LD_INT 0
22003: PPUSH
22004: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_OWVAR 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 69
22026: ST_TO_ADDR
// if not tmp then
22027: LD_VAR 0 2
22031: NOT
22032: IFFALSE 22036
// exit ;
22034: GO 22179
// for i := 1 to 2 do
22036: LD_ADDR_VAR 0 1
22040: PUSH
22041: DOUBLE
22042: LD_INT 1
22044: DEC
22045: ST_TO_ADDR
22046: LD_INT 2
22048: PUSH
22049: FOR_TO
22050: IFFALSE 22177
// begin uc_side := your_side ;
22052: LD_ADDR_OWVAR 20
22056: PUSH
22057: LD_OWVAR 2
22061: ST_TO_ADDR
// uc_nation := nation_american ;
22062: LD_ADDR_OWVAR 21
22066: PUSH
22067: LD_INT 1
22069: ST_TO_ADDR
// vc_chassis := us_morphling ;
22070: LD_ADDR_OWVAR 37
22074: PUSH
22075: LD_INT 5
22077: ST_TO_ADDR
// vc_engine := engine_siberite ;
22078: LD_ADDR_OWVAR 39
22082: PUSH
22083: LD_INT 3
22085: ST_TO_ADDR
// vc_control := control_computer ;
22086: LD_ADDR_OWVAR 38
22090: PUSH
22091: LD_INT 3
22093: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22094: LD_ADDR_OWVAR 40
22098: PUSH
22099: LD_INT 10
22101: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22102: LD_VAR 0 2
22106: PUSH
22107: LD_INT 1
22109: ARRAY
22110: PPUSH
22111: CALL_OW 310
22115: NOT
22116: IFFALSE 22163
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22118: CALL_OW 45
22122: PPUSH
22123: LD_VAR 0 2
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 250
22136: PPUSH
22137: LD_VAR 0 2
22141: PUSH
22142: LD_INT 1
22144: ARRAY
22145: PPUSH
22146: CALL_OW 251
22150: PPUSH
22151: LD_INT 12
22153: PPUSH
22154: LD_INT 1
22156: PPUSH
22157: CALL_OW 50
22161: GO 22175
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22163: CALL_OW 45
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 51
// end ;
22175: GO 22049
22177: POP
22178: POP
// end ;
22179: PPOPN 2
22181: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22182: LD_EXP 48
22186: PUSH
22187: LD_EXP 94
22191: AND
22192: IFFALSE 22414
22194: GO 22196
22196: DISABLE
22197: LD_INT 0
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22205: LD_ADDR_VAR 0 6
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_OWVAR 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 21
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 23
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: PPUSH
22254: CALL_OW 69
22258: ST_TO_ADDR
// if not tmp then
22259: LD_VAR 0 6
22263: NOT
22264: IFFALSE 22268
// exit ;
22266: GO 22414
// s1 := rand ( 1 , 4 ) ;
22268: LD_ADDR_VAR 0 2
22272: PUSH
22273: LD_INT 1
22275: PPUSH
22276: LD_INT 4
22278: PPUSH
22279: CALL_OW 12
22283: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 6
22293: PUSH
22294: LD_INT 1
22296: ARRAY
22297: PPUSH
22298: LD_VAR 0 2
22302: PPUSH
22303: CALL_OW 259
22307: ST_TO_ADDR
// if s1 = 1 then
22308: LD_VAR 0 2
22312: PUSH
22313: LD_INT 1
22315: EQUAL
22316: IFFALSE 22336
// s2 := rand ( 2 , 4 ) else
22318: LD_ADDR_VAR 0 3
22322: PUSH
22323: LD_INT 2
22325: PPUSH
22326: LD_INT 4
22328: PPUSH
22329: CALL_OW 12
22333: ST_TO_ADDR
22334: GO 22344
// s2 := 1 ;
22336: LD_ADDR_VAR 0 3
22340: PUSH
22341: LD_INT 1
22343: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22344: LD_ADDR_VAR 0 5
22348: PUSH
22349: LD_VAR 0 6
22353: PUSH
22354: LD_INT 1
22356: ARRAY
22357: PPUSH
22358: LD_VAR 0 3
22362: PPUSH
22363: CALL_OW 259
22367: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 1
22375: ARRAY
22376: PPUSH
22377: LD_VAR 0 2
22381: PPUSH
22382: LD_VAR 0 5
22386: PPUSH
22387: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22391: LD_VAR 0 6
22395: PUSH
22396: LD_INT 1
22398: ARRAY
22399: PPUSH
22400: LD_VAR 0 3
22404: PPUSH
22405: LD_VAR 0 4
22409: PPUSH
22410: CALL_OW 237
// end ;
22414: PPOPN 6
22416: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22417: LD_EXP 48
22421: PUSH
22422: LD_EXP 95
22426: AND
22427: IFFALSE 22506
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 30
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 69
22470: ST_TO_ADDR
// if not tmp then
22471: LD_VAR 0 1
22475: NOT
22476: IFFALSE 22480
// exit ;
22478: GO 22506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22480: LD_VAR 0 1
22484: PUSH
22485: LD_INT 1
22487: PPUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 12
22497: ARRAY
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 234
// end ;
22506: PPOPN 1
22508: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22509: LD_EXP 48
22513: PUSH
22514: LD_EXP 96
22518: AND
22519: IFFALSE 22631
22521: GO 22523
22523: DISABLE
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22528: LD_ADDR_VAR 0 2
22532: PUSH
22533: LD_INT 22
22535: PUSH
22536: LD_OWVAR 2
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 27
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 30
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 30
22570: PUSH
22571: LD_INT 28
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: ST_TO_ADDR
// if not tmp then
22593: LD_VAR 0 2
22597: NOT
22598: IFFALSE 22602
// exit ;
22600: GO 22631
// for i in tmp do
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_VAR 0 2
22611: PUSH
22612: FOR_IN
22613: IFFALSE 22629
// SetLives ( i , 1 ) ;
22615: LD_VAR 0 1
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: CALL_OW 234
22627: GO 22612
22629: POP
22630: POP
// end ;
22631: PPOPN 2
22633: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22634: LD_EXP 48
22638: PUSH
22639: LD_EXP 97
22643: AND
22644: IFFALSE 22918
22646: GO 22648
22648: DISABLE
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
22653: PPUSH
// begin i := rand ( 1 , 7 ) ;
22654: LD_ADDR_VAR 0 1
22658: PUSH
22659: LD_INT 1
22661: PPUSH
22662: LD_INT 7
22664: PPUSH
22665: CALL_OW 12
22669: ST_TO_ADDR
// case i of 1 :
22670: LD_VAR 0 1
22674: PUSH
22675: LD_INT 1
22677: DOUBLE
22678: EQUAL
22679: IFTRUE 22683
22681: GO 22693
22683: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22684: LD_STRING earthquake(getX(game), 0, 32)
22686: PPUSH
22687: CALL_OW 559
22691: GO 22918
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22715
22701: POP
// begin ToLua ( displayStucuk(); ) ;
22702: LD_STRING displayStucuk();
22704: PPUSH
22705: CALL_OW 559
// ResetFog ;
22709: CALL_OW 335
// end ; 3 :
22713: GO 22918
22715: LD_INT 3
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22827
22723: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22724: LD_ADDR_VAR 0 2
22728: PUSH
22729: LD_INT 22
22731: PUSH
22732: LD_OWVAR 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 69
22759: ST_TO_ADDR
// if not tmp then
22760: LD_VAR 0 2
22764: NOT
22765: IFFALSE 22769
// exit ;
22767: GO 22918
// un := tmp [ rand ( 1 , tmp ) ] ;
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: LD_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PPUSH
22782: LD_VAR 0 2
22786: PPUSH
22787: CALL_OW 12
22791: ARRAY
22792: ST_TO_ADDR
// if Crawls ( un ) then
22793: LD_VAR 0 3
22797: PPUSH
22798: CALL_OW 318
22802: IFFALSE 22813
// ComWalk ( un ) ;
22804: LD_VAR 0 3
22808: PPUSH
22809: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 8
22820: PPUSH
22821: CALL_OW 336
// end ; 4 :
22825: GO 22918
22827: LD_INT 4
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22896
22835: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22836: LD_ADDR_VAR 0 2
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_OWVAR 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 29
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: ST_TO_ADDR
// if not tmp then
22872: LD_VAR 0 2
22876: NOT
22877: IFFALSE 22881
// exit ;
22879: GO 22918
// DestroyUnit ( tmp [ 1 ] ) ;
22881: LD_VAR 0 2
22885: PUSH
22886: LD_INT 1
22888: ARRAY
22889: PPUSH
22890: CALL_OW 65
// end ; 5 .. 7 :
22894: GO 22918
22896: LD_INT 5
22898: DOUBLE
22899: GREATEREQUAL
22900: IFFALSE 22908
22902: LD_INT 7
22904: DOUBLE
22905: LESSEQUAL
22906: IFTRUE 22910
22908: GO 22917
22910: POP
// StreamSibBomb ; end ;
22911: CALL 19168 0 0
22915: GO 22918
22917: POP
// end ;
22918: PPOPN 3
22920: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22921: LD_EXP 48
22925: PUSH
22926: LD_EXP 98
22930: AND
22931: IFFALSE 23087
22933: GO 22935
22935: DISABLE
22936: LD_INT 0
22938: PPUSH
22939: PPUSH
22940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22941: LD_ADDR_VAR 0 2
22945: PUSH
22946: LD_INT 81
22948: PUSH
22949: LD_OWVAR 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 21
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 21
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: ST_TO_ADDR
// if not tmp then
22995: LD_VAR 0 2
22999: NOT
23000: IFFALSE 23004
// exit ;
23002: GO 23087
// p := 0 ;
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 0
23011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23012: LD_INT 35
23014: PPUSH
23015: CALL_OW 67
// p := p + 1 ;
23019: LD_ADDR_VAR 0 3
23023: PUSH
23024: LD_VAR 0 3
23028: PUSH
23029: LD_INT 1
23031: PLUS
23032: ST_TO_ADDR
// for i in tmp do
23033: LD_ADDR_VAR 0 1
23037: PUSH
23038: LD_VAR 0 2
23042: PUSH
23043: FOR_IN
23044: IFFALSE 23075
// if GetLives ( i ) < 1000 then
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 256
23055: PUSH
23056: LD_INT 1000
23058: LESS
23059: IFFALSE 23073
// SetLives ( i , 1000 ) ;
23061: LD_VAR 0 1
23065: PPUSH
23066: LD_INT 1000
23068: PPUSH
23069: CALL_OW 234
23073: GO 23043
23075: POP
23076: POP
// until p > 20 ;
23077: LD_VAR 0 3
23081: PUSH
23082: LD_INT 20
23084: GREATER
23085: IFFALSE 23012
// end ;
23087: PPOPN 3
23089: END
// every 0 0$1 trigger StreamModeActive and sTime do
23090: LD_EXP 48
23094: PUSH
23095: LD_EXP 99
23099: AND
23100: IFFALSE 23135
23102: GO 23104
23104: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23105: LD_INT 28
23107: PPUSH
23108: LD_OWVAR 2
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23120: LD_INT 30
23122: PPUSH
23123: LD_OWVAR 2
23127: PPUSH
23128: LD_INT 2
23130: PPUSH
23131: CALL_OW 322
// end ;
23135: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23136: LD_EXP 48
23140: PUSH
23141: LD_EXP 100
23145: AND
23146: IFFALSE 23267
23148: GO 23150
23150: DISABLE
23151: LD_INT 0
23153: PPUSH
23154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_OWVAR 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 21
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: ST_TO_ADDR
// if not tmp then
23209: LD_VAR 0 2
23213: NOT
23214: IFFALSE 23218
// exit ;
23216: GO 23267
// for i in tmp do
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_VAR 0 2
23227: PUSH
23228: FOR_IN
23229: IFFALSE 23265
// begin if Crawls ( i ) then
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 318
23240: IFFALSE 23251
// ComWalk ( i ) ;
23242: LD_VAR 0 1
23246: PPUSH
23247: CALL_OW 138
// SetClass ( i , 2 ) ;
23251: LD_VAR 0 1
23255: PPUSH
23256: LD_INT 2
23258: PPUSH
23259: CALL_OW 336
// end ;
23263: GO 23228
23265: POP
23266: POP
// end ;
23267: PPOPN 2
23269: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23270: LD_EXP 48
23274: PUSH
23275: LD_EXP 101
23279: AND
23280: IFFALSE 23561
23282: GO 23284
23284: DISABLE
23285: LD_INT 0
23287: PPUSH
23288: PPUSH
23289: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23290: LD_OWVAR 2
23294: PPUSH
23295: LD_INT 9
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: LD_INT 1
23303: PPUSH
23304: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23308: LD_INT 9
23310: PPUSH
23311: LD_OWVAR 2
23315: PPUSH
23316: CALL_OW 343
// uc_side := 9 ;
23320: LD_ADDR_OWVAR 20
23324: PUSH
23325: LD_INT 9
23327: ST_TO_ADDR
// uc_nation := 2 ;
23328: LD_ADDR_OWVAR 21
23332: PUSH
23333: LD_INT 2
23335: ST_TO_ADDR
// hc_name := Dark Warrior ;
23336: LD_ADDR_OWVAR 26
23340: PUSH
23341: LD_STRING Dark Warrior
23343: ST_TO_ADDR
// hc_gallery :=  ;
23344: LD_ADDR_OWVAR 33
23348: PUSH
23349: LD_STRING 
23351: ST_TO_ADDR
// hc_noskilllimit := true ;
23352: LD_ADDR_OWVAR 76
23356: PUSH
23357: LD_INT 1
23359: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23360: LD_ADDR_OWVAR 31
23364: PUSH
23365: LD_INT 30
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 30
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// un := CreateHuman ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: CALL_OW 44
23392: ST_TO_ADDR
// hc_noskilllimit := false ;
23393: LD_ADDR_OWVAR 76
23397: PUSH
23398: LD_INT 0
23400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23401: LD_VAR 0 3
23405: PPUSH
23406: LD_INT 1
23408: PPUSH
23409: CALL_OW 51
// p := 0 ;
23413: LD_ADDR_VAR 0 2
23417: PUSH
23418: LD_INT 0
23420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23421: LD_INT 35
23423: PPUSH
23424: CALL_OW 67
// p := p + 1 ;
23428: LD_ADDR_VAR 0 2
23432: PUSH
23433: LD_VAR 0 2
23437: PUSH
23438: LD_INT 1
23440: PLUS
23441: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23442: LD_VAR 0 3
23446: PPUSH
23447: CALL_OW 256
23451: PUSH
23452: LD_INT 1000
23454: LESS
23455: IFFALSE 23469
// SetLives ( un , 1000 ) ;
23457: LD_VAR 0 3
23461: PPUSH
23462: LD_INT 1000
23464: PPUSH
23465: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 81
23476: PUSH
23477: LD_OWVAR 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 91
23488: PUSH
23489: LD_VAR 0 3
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PPUSH
23506: CALL_OW 69
23510: PPUSH
23511: LD_VAR 0 3
23515: PPUSH
23516: CALL_OW 74
23520: PPUSH
23521: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23525: LD_VAR 0 2
23529: PUSH
23530: LD_INT 60
23532: GREATER
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: CALL_OW 301
23543: OR
23544: IFFALSE 23421
// if un then
23546: LD_VAR 0 3
23550: IFFALSE 23561
// RemoveUnit ( un ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: CALL_OW 64
// end ;
23561: PPOPN 3
23563: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23564: LD_INT 0
23566: PPUSH
// case cmd of 301 :
23567: LD_VAR 0 1
23571: PUSH
23572: LD_INT 301
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23612
23580: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23581: LD_VAR 0 6
23585: PPUSH
23586: LD_VAR 0 7
23590: PPUSH
23591: LD_VAR 0 8
23595: PPUSH
23596: LD_VAR 0 4
23600: PPUSH
23601: LD_VAR 0 5
23605: PPUSH
23606: CALL 24813 0 5
23610: GO 23733
23612: LD_INT 302
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23657
23620: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23621: LD_VAR 0 6
23625: PPUSH
23626: LD_VAR 0 7
23630: PPUSH
23631: LD_VAR 0 8
23635: PPUSH
23636: LD_VAR 0 9
23640: PPUSH
23641: LD_VAR 0 4
23645: PPUSH
23646: LD_VAR 0 5
23650: PPUSH
23651: CALL 24904 0 6
23655: GO 23733
23657: LD_INT 303
23659: DOUBLE
23660: EQUAL
23661: IFTRUE 23665
23663: GO 23702
23665: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23666: LD_VAR 0 6
23670: PPUSH
23671: LD_VAR 0 7
23675: PPUSH
23676: LD_VAR 0 8
23680: PPUSH
23681: LD_VAR 0 9
23685: PPUSH
23686: LD_VAR 0 4
23690: PPUSH
23691: LD_VAR 0 5
23695: PPUSH
23696: CALL 23738 0 6
23700: GO 23733
23702: LD_INT 304
23704: DOUBLE
23705: EQUAL
23706: IFTRUE 23710
23708: GO 23732
23710: POP
// hHackTeleport ( unit , x , y ) ; end ;
23711: LD_VAR 0 2
23715: PPUSH
23716: LD_VAR 0 4
23720: PPUSH
23721: LD_VAR 0 5
23725: PPUSH
23726: CALL 25497 0 3
23730: GO 23733
23732: POP
// end ;
23733: LD_VAR 0 12
23737: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23738: LD_INT 0
23740: PPUSH
23741: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23742: LD_VAR 0 1
23746: PUSH
23747: LD_INT 1
23749: LESS
23750: PUSH
23751: LD_VAR 0 1
23755: PUSH
23756: LD_INT 3
23758: GREATER
23759: OR
23760: PUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: LD_VAR 0 6
23770: PPUSH
23771: CALL_OW 428
23775: OR
23776: IFFALSE 23780
// exit ;
23778: GO 24500
// uc_side := your_side ;
23780: LD_ADDR_OWVAR 20
23784: PUSH
23785: LD_OWVAR 2
23789: ST_TO_ADDR
// uc_nation := nation ;
23790: LD_ADDR_OWVAR 21
23794: PUSH
23795: LD_VAR 0 1
23799: ST_TO_ADDR
// bc_level = 1 ;
23800: LD_ADDR_OWVAR 43
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
// case btype of 1 :
23808: LD_VAR 0 2
23812: PUSH
23813: LD_INT 1
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23832
23821: POP
// bc_type := b_depot ; 2 :
23822: LD_ADDR_OWVAR 42
23826: PUSH
23827: LD_INT 0
23829: ST_TO_ADDR
23830: GO 24444
23832: LD_INT 2
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23840
23838: GO 23851
23840: POP
// bc_type := b_warehouse ; 3 :
23841: LD_ADDR_OWVAR 42
23845: PUSH
23846: LD_INT 1
23848: ST_TO_ADDR
23849: GO 24444
23851: LD_INT 3
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23870
23859: POP
// bc_type := b_lab ; 4 .. 9 :
23860: LD_ADDR_OWVAR 42
23864: PUSH
23865: LD_INT 6
23867: ST_TO_ADDR
23868: GO 24444
23870: LD_INT 4
23872: DOUBLE
23873: GREATEREQUAL
23874: IFFALSE 23882
23876: LD_INT 9
23878: DOUBLE
23879: LESSEQUAL
23880: IFTRUE 23884
23882: GO 23936
23884: POP
// begin bc_type := b_lab_half ;
23885: LD_ADDR_OWVAR 42
23889: PUSH
23890: LD_INT 7
23892: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23893: LD_ADDR_OWVAR 44
23897: PUSH
23898: LD_INT 10
23900: PUSH
23901: LD_INT 11
23903: PUSH
23904: LD_INT 12
23906: PUSH
23907: LD_INT 15
23909: PUSH
23910: LD_INT 14
23912: PUSH
23913: LD_INT 13
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: LD_VAR 0 2
23928: PUSH
23929: LD_INT 3
23931: MINUS
23932: ARRAY
23933: ST_TO_ADDR
// end ; 10 .. 13 :
23934: GO 24444
23936: LD_INT 10
23938: DOUBLE
23939: GREATEREQUAL
23940: IFFALSE 23948
23942: LD_INT 13
23944: DOUBLE
23945: LESSEQUAL
23946: IFTRUE 23950
23948: GO 24027
23950: POP
// begin bc_type := b_lab_full ;
23951: LD_ADDR_OWVAR 42
23955: PUSH
23956: LD_INT 8
23958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23959: LD_ADDR_OWVAR 44
23963: PUSH
23964: LD_INT 10
23966: PUSH
23967: LD_INT 12
23969: PUSH
23970: LD_INT 14
23972: PUSH
23973: LD_INT 13
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_VAR 0 2
23986: PUSH
23987: LD_INT 9
23989: MINUS
23990: ARRAY
23991: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23992: LD_ADDR_OWVAR 45
23996: PUSH
23997: LD_INT 11
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: LD_INT 12
24005: PUSH
24006: LD_INT 15
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: PUSH
24015: LD_VAR 0 2
24019: PUSH
24020: LD_INT 9
24022: MINUS
24023: ARRAY
24024: ST_TO_ADDR
// end ; 14 :
24025: GO 24444
24027: LD_INT 14
24029: DOUBLE
24030: EQUAL
24031: IFTRUE 24035
24033: GO 24046
24035: POP
// bc_type := b_workshop ; 15 :
24036: LD_ADDR_OWVAR 42
24040: PUSH
24041: LD_INT 2
24043: ST_TO_ADDR
24044: GO 24444
24046: LD_INT 15
24048: DOUBLE
24049: EQUAL
24050: IFTRUE 24054
24052: GO 24065
24054: POP
// bc_type := b_factory ; 16 :
24055: LD_ADDR_OWVAR 42
24059: PUSH
24060: LD_INT 3
24062: ST_TO_ADDR
24063: GO 24444
24065: LD_INT 16
24067: DOUBLE
24068: EQUAL
24069: IFTRUE 24073
24071: GO 24084
24073: POP
// bc_type := b_ext_gun ; 17 :
24074: LD_ADDR_OWVAR 42
24078: PUSH
24079: LD_INT 17
24081: ST_TO_ADDR
24082: GO 24444
24084: LD_INT 17
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24120
24092: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24093: LD_ADDR_OWVAR 42
24097: PUSH
24098: LD_INT 19
24100: PUSH
24101: LD_INT 23
24103: PUSH
24104: LD_INT 19
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: PUSH
24112: LD_VAR 0 1
24116: ARRAY
24117: ST_TO_ADDR
24118: GO 24444
24120: LD_INT 18
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24139
24128: POP
// bc_type := b_ext_radar ; 19 :
24129: LD_ADDR_OWVAR 42
24133: PUSH
24134: LD_INT 20
24136: ST_TO_ADDR
24137: GO 24444
24139: LD_INT 19
24141: DOUBLE
24142: EQUAL
24143: IFTRUE 24147
24145: GO 24158
24147: POP
// bc_type := b_ext_radio ; 20 :
24148: LD_ADDR_OWVAR 42
24152: PUSH
24153: LD_INT 22
24155: ST_TO_ADDR
24156: GO 24444
24158: LD_INT 20
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24177
24166: POP
// bc_type := b_ext_siberium ; 21 :
24167: LD_ADDR_OWVAR 42
24171: PUSH
24172: LD_INT 21
24174: ST_TO_ADDR
24175: GO 24444
24177: LD_INT 21
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24196
24185: POP
// bc_type := b_ext_computer ; 22 :
24186: LD_ADDR_OWVAR 42
24190: PUSH
24191: LD_INT 24
24193: ST_TO_ADDR
24194: GO 24444
24196: LD_INT 22
24198: DOUBLE
24199: EQUAL
24200: IFTRUE 24204
24202: GO 24215
24204: POP
// bc_type := b_ext_track ; 23 :
24205: LD_ADDR_OWVAR 42
24209: PUSH
24210: LD_INT 16
24212: ST_TO_ADDR
24213: GO 24444
24215: LD_INT 23
24217: DOUBLE
24218: EQUAL
24219: IFTRUE 24223
24221: GO 24234
24223: POP
// bc_type := b_ext_laser ; 24 :
24224: LD_ADDR_OWVAR 42
24228: PUSH
24229: LD_INT 25
24231: ST_TO_ADDR
24232: GO 24444
24234: LD_INT 24
24236: DOUBLE
24237: EQUAL
24238: IFTRUE 24242
24240: GO 24253
24242: POP
// bc_type := b_control_tower ; 25 :
24243: LD_ADDR_OWVAR 42
24247: PUSH
24248: LD_INT 36
24250: ST_TO_ADDR
24251: GO 24444
24253: LD_INT 25
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24272
24261: POP
// bc_type := b_breastwork ; 26 :
24262: LD_ADDR_OWVAR 42
24266: PUSH
24267: LD_INT 31
24269: ST_TO_ADDR
24270: GO 24444
24272: LD_INT 26
24274: DOUBLE
24275: EQUAL
24276: IFTRUE 24280
24278: GO 24291
24280: POP
// bc_type := b_bunker ; 27 :
24281: LD_ADDR_OWVAR 42
24285: PUSH
24286: LD_INT 32
24288: ST_TO_ADDR
24289: GO 24444
24291: LD_INT 27
24293: DOUBLE
24294: EQUAL
24295: IFTRUE 24299
24297: GO 24310
24299: POP
// bc_type := b_turret ; 28 :
24300: LD_ADDR_OWVAR 42
24304: PUSH
24305: LD_INT 33
24307: ST_TO_ADDR
24308: GO 24444
24310: LD_INT 28
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24329
24318: POP
// bc_type := b_armoury ; 29 :
24319: LD_ADDR_OWVAR 42
24323: PUSH
24324: LD_INT 4
24326: ST_TO_ADDR
24327: GO 24444
24329: LD_INT 29
24331: DOUBLE
24332: EQUAL
24333: IFTRUE 24337
24335: GO 24348
24337: POP
// bc_type := b_barracks ; 30 :
24338: LD_ADDR_OWVAR 42
24342: PUSH
24343: LD_INT 5
24345: ST_TO_ADDR
24346: GO 24444
24348: LD_INT 30
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24367
24356: POP
// bc_type := b_solar_power ; 31 :
24357: LD_ADDR_OWVAR 42
24361: PUSH
24362: LD_INT 27
24364: ST_TO_ADDR
24365: GO 24444
24367: LD_INT 31
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24375
24373: GO 24386
24375: POP
// bc_type := b_oil_power ; 32 :
24376: LD_ADDR_OWVAR 42
24380: PUSH
24381: LD_INT 26
24383: ST_TO_ADDR
24384: GO 24444
24386: LD_INT 32
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24405
24394: POP
// bc_type := b_siberite_power ; 33 :
24395: LD_ADDR_OWVAR 42
24399: PUSH
24400: LD_INT 28
24402: ST_TO_ADDR
24403: GO 24444
24405: LD_INT 33
24407: DOUBLE
24408: EQUAL
24409: IFTRUE 24413
24411: GO 24424
24413: POP
// bc_type := b_oil_mine ; 34 :
24414: LD_ADDR_OWVAR 42
24418: PUSH
24419: LD_INT 29
24421: ST_TO_ADDR
24422: GO 24444
24424: LD_INT 34
24426: DOUBLE
24427: EQUAL
24428: IFTRUE 24432
24430: GO 24443
24432: POP
// bc_type := b_siberite_mine ; end ;
24433: LD_ADDR_OWVAR 42
24437: PUSH
24438: LD_INT 30
24440: ST_TO_ADDR
24441: GO 24444
24443: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24444: LD_ADDR_VAR 0 8
24448: PUSH
24449: LD_VAR 0 5
24453: PPUSH
24454: LD_VAR 0 6
24458: PPUSH
24459: LD_VAR 0 3
24463: PPUSH
24464: CALL_OW 47
24468: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24469: LD_OWVAR 42
24473: PUSH
24474: LD_INT 32
24476: PUSH
24477: LD_INT 33
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: IN
24484: IFFALSE 24500
// PlaceWeaponTurret ( b , weapon ) ;
24486: LD_VAR 0 8
24490: PPUSH
24491: LD_VAR 0 4
24495: PPUSH
24496: CALL_OW 431
// end ;
24500: LD_VAR 0 7
24504: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24505: LD_INT 0
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24511: LD_ADDR_VAR 0 4
24515: PUSH
24516: LD_INT 22
24518: PUSH
24519: LD_OWVAR 2
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: PUSH
24531: LD_INT 30
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 30
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PPUSH
24560: CALL_OW 69
24564: ST_TO_ADDR
// if not tmp then
24565: LD_VAR 0 4
24569: NOT
24570: IFFALSE 24574
// exit ;
24572: GO 24633
// for i in tmp do
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_VAR 0 4
24583: PUSH
24584: FOR_IN
24585: IFFALSE 24631
// for j = 1 to 3 do
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: DOUBLE
24593: LD_INT 1
24595: DEC
24596: ST_TO_ADDR
24597: LD_INT 3
24599: PUSH
24600: FOR_TO
24601: IFFALSE 24627
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24603: LD_VAR 0 2
24607: PPUSH
24608: CALL_OW 274
24612: PPUSH
24613: LD_VAR 0 3
24617: PPUSH
24618: LD_INT 99999
24620: PPUSH
24621: CALL_OW 277
24625: GO 24600
24627: POP
24628: POP
24629: GO 24584
24631: POP
24632: POP
// end ;
24633: LD_VAR 0 1
24637: RET
// export function hHackSetLevel10 ; var i , j ; begin
24638: LD_INT 0
24640: PPUSH
24641: PPUSH
24642: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24643: LD_ADDR_VAR 0 2
24647: PUSH
24648: LD_INT 21
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PPUSH
24658: CALL_OW 69
24662: PUSH
24663: FOR_IN
24664: IFFALSE 24716
// if IsSelected ( i ) then
24666: LD_VAR 0 2
24670: PPUSH
24671: CALL_OW 306
24675: IFFALSE 24714
// begin for j := 1 to 4 do
24677: LD_ADDR_VAR 0 3
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_INT 4
24689: PUSH
24690: FOR_TO
24691: IFFALSE 24712
// SetSkill ( i , j , 10 ) ;
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 3
24702: PPUSH
24703: LD_INT 10
24705: PPUSH
24706: CALL_OW 237
24710: GO 24690
24712: POP
24713: POP
// end ;
24714: GO 24663
24716: POP
24717: POP
// end ;
24718: LD_VAR 0 1
24722: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24723: LD_INT 0
24725: PPUSH
24726: PPUSH
24727: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_INT 22
24735: PUSH
24736: LD_OWVAR 2
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 21
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PPUSH
24759: CALL_OW 69
24763: PUSH
24764: FOR_IN
24765: IFFALSE 24806
// begin for j := 1 to 4 do
24767: LD_ADDR_VAR 0 3
24771: PUSH
24772: DOUBLE
24773: LD_INT 1
24775: DEC
24776: ST_TO_ADDR
24777: LD_INT 4
24779: PUSH
24780: FOR_TO
24781: IFFALSE 24802
// SetSkill ( i , j , 10 ) ;
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: LD_INT 10
24795: PPUSH
24796: CALL_OW 237
24800: GO 24780
24802: POP
24803: POP
// end ;
24804: GO 24764
24806: POP
24807: POP
// end ;
24808: LD_VAR 0 1
24812: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24813: LD_INT 0
24815: PPUSH
// uc_side := your_side ;
24816: LD_ADDR_OWVAR 20
24820: PUSH
24821: LD_OWVAR 2
24825: ST_TO_ADDR
// uc_nation := nation ;
24826: LD_ADDR_OWVAR 21
24830: PUSH
24831: LD_VAR 0 1
24835: ST_TO_ADDR
// InitHc ;
24836: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24840: LD_INT 0
24842: PPUSH
24843: LD_VAR 0 2
24847: PPUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24857: LD_VAR 0 4
24861: PPUSH
24862: LD_VAR 0 5
24866: PPUSH
24867: CALL_OW 428
24871: PUSH
24872: LD_INT 0
24874: EQUAL
24875: IFFALSE 24899
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24877: CALL_OW 44
24881: PPUSH
24882: LD_VAR 0 4
24886: PPUSH
24887: LD_VAR 0 5
24891: PPUSH
24892: LD_INT 1
24894: PPUSH
24895: CALL_OW 48
// end ;
24899: LD_VAR 0 6
24903: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
// uc_side := your_side ;
24908: LD_ADDR_OWVAR 20
24912: PUSH
24913: LD_OWVAR 2
24917: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24918: LD_VAR 0 1
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 3
24931: PUSH
24932: LD_INT 4
24934: PUSH
24935: LD_INT 5
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: IN
24945: IFFALSE 24957
// uc_nation := nation_american else
24947: LD_ADDR_OWVAR 21
24951: PUSH
24952: LD_INT 1
24954: ST_TO_ADDR
24955: GO 25000
// if chassis in [ 11 , 12 , 13 , 14 ] then
24957: LD_VAR 0 1
24961: PUSH
24962: LD_INT 11
24964: PUSH
24965: LD_INT 12
24967: PUSH
24968: LD_INT 13
24970: PUSH
24971: LD_INT 14
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: IN
24980: IFFALSE 24992
// uc_nation := nation_arabian else
24982: LD_ADDR_OWVAR 21
24986: PUSH
24987: LD_INT 2
24989: ST_TO_ADDR
24990: GO 25000
// uc_nation := nation_russian ;
24992: LD_ADDR_OWVAR 21
24996: PUSH
24997: LD_INT 3
24999: ST_TO_ADDR
// vc_chassis := chassis ;
25000: LD_ADDR_OWVAR 37
25004: PUSH
25005: LD_VAR 0 1
25009: ST_TO_ADDR
// vc_engine := engine ;
25010: LD_ADDR_OWVAR 39
25014: PUSH
25015: LD_VAR 0 2
25019: ST_TO_ADDR
// vc_control := control ;
25020: LD_ADDR_OWVAR 38
25024: PUSH
25025: LD_VAR 0 3
25029: ST_TO_ADDR
// vc_weapon := weapon ;
25030: LD_ADDR_OWVAR 40
25034: PUSH
25035: LD_VAR 0 4
25039: ST_TO_ADDR
// un := CreateVehicle ;
25040: LD_ADDR_VAR 0 8
25044: PUSH
25045: CALL_OW 45
25049: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25050: LD_VAR 0 8
25054: PPUSH
25055: LD_INT 0
25057: PPUSH
25058: LD_INT 5
25060: PPUSH
25061: CALL_OW 12
25065: PPUSH
25066: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25070: LD_VAR 0 8
25074: PPUSH
25075: LD_VAR 0 5
25079: PPUSH
25080: LD_VAR 0 6
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 48
// end ;
25092: LD_VAR 0 7
25096: RET
// export hInvincible ; every 1 do
25097: GO 25099
25099: DISABLE
// hInvincible := [ ] ;
25100: LD_ADDR_EXP 102
25104: PUSH
25105: EMPTY
25106: ST_TO_ADDR
25107: END
// every 10 do var i ;
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
// begin enable ;
25114: ENABLE
// if not hInvincible then
25115: LD_EXP 102
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25168
// for i in hInvincible do
25124: LD_ADDR_VAR 0 1
25128: PUSH
25129: LD_EXP 102
25133: PUSH
25134: FOR_IN
25135: IFFALSE 25166
// if GetLives ( i ) < 1000 then
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 256
25146: PUSH
25147: LD_INT 1000
25149: LESS
25150: IFFALSE 25164
// SetLives ( i , 1000 ) ;
25152: LD_VAR 0 1
25156: PPUSH
25157: LD_INT 1000
25159: PPUSH
25160: CALL_OW 234
25164: GO 25134
25166: POP
25167: POP
// end ;
25168: PPOPN 1
25170: END
// export function hHackInvincible ; var i ; begin
25171: LD_INT 0
25173: PPUSH
25174: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25175: LD_ADDR_VAR 0 2
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 21
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25275
// if IsSelected ( i ) then
25216: LD_VAR 0 2
25220: PPUSH
25221: CALL_OW 306
25225: IFFALSE 25273
// begin if i in hInvincible then
25227: LD_VAR 0 2
25231: PUSH
25232: LD_EXP 102
25236: IN
25237: IFFALSE 25257
// hInvincible := hInvincible diff i else
25239: LD_ADDR_EXP 102
25243: PUSH
25244: LD_EXP 102
25248: PUSH
25249: LD_VAR 0 2
25253: DIFF
25254: ST_TO_ADDR
25255: GO 25273
// hInvincible := hInvincible union i ;
25257: LD_ADDR_EXP 102
25261: PUSH
25262: LD_EXP 102
25266: PUSH
25267: LD_VAR 0 2
25271: UNION
25272: ST_TO_ADDR
// end ;
25273: GO 25213
25275: POP
25276: POP
// end ;
25277: LD_VAR 0 1
25281: RET
// export function hHackInvisible ; var i , j ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25287: LD_ADDR_VAR 0 2
25291: PUSH
25292: LD_INT 21
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PPUSH
25302: CALL_OW 69
25306: PUSH
25307: FOR_IN
25308: IFFALSE 25332
// if IsSelected ( i ) then
25310: LD_VAR 0 2
25314: PPUSH
25315: CALL_OW 306
25319: IFFALSE 25330
// ComForceInvisible ( i ) ;
25321: LD_VAR 0 2
25325: PPUSH
25326: CALL_OW 496
25330: GO 25307
25332: POP
25333: POP
// end ;
25334: LD_VAR 0 1
25338: RET
// export function hHackChangeYourSide ; begin
25339: LD_INT 0
25341: PPUSH
// if your_side = 8 then
25342: LD_OWVAR 2
25346: PUSH
25347: LD_INT 8
25349: EQUAL
25350: IFFALSE 25362
// your_side := 0 else
25352: LD_ADDR_OWVAR 2
25356: PUSH
25357: LD_INT 0
25359: ST_TO_ADDR
25360: GO 25376
// your_side := your_side + 1 ;
25362: LD_ADDR_OWVAR 2
25366: PUSH
25367: LD_OWVAR 2
25371: PUSH
25372: LD_INT 1
25374: PLUS
25375: ST_TO_ADDR
// end ;
25376: LD_VAR 0 1
25380: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
// for i in all_units do
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_OWVAR 3
25395: PUSH
25396: FOR_IN
25397: IFFALSE 25475
// if IsSelected ( i ) then
25399: LD_VAR 0 2
25403: PPUSH
25404: CALL_OW 306
25408: IFFALSE 25473
// begin j := GetSide ( i ) ;
25410: LD_ADDR_VAR 0 3
25414: PUSH
25415: LD_VAR 0 2
25419: PPUSH
25420: CALL_OW 255
25424: ST_TO_ADDR
// if j = 8 then
25425: LD_VAR 0 3
25429: PUSH
25430: LD_INT 8
25432: EQUAL
25433: IFFALSE 25445
// j := 0 else
25435: LD_ADDR_VAR 0 3
25439: PUSH
25440: LD_INT 0
25442: ST_TO_ADDR
25443: GO 25459
// j := j + 1 ;
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_VAR 0 3
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: ST_TO_ADDR
// SetSide ( i , j ) ;
25459: LD_VAR 0 2
25463: PPUSH
25464: LD_VAR 0 3
25468: PPUSH
25469: CALL_OW 235
// end ;
25473: GO 25396
25475: POP
25476: POP
// end ;
25477: LD_VAR 0 1
25481: RET
// export function hHackFog ; begin
25482: LD_INT 0
25484: PPUSH
// FogOff ( true ) ;
25485: LD_INT 1
25487: PPUSH
25488: CALL_OW 344
// end ;
25492: LD_VAR 0 1
25496: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25497: LD_INT 0
25499: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25500: LD_VAR 0 1
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: LD_INT 1
25517: PPUSH
25518: LD_INT 1
25520: PPUSH
25521: CALL_OW 483
// CenterOnXY ( x , y ) ;
25525: LD_VAR 0 2
25529: PPUSH
25530: LD_VAR 0 3
25534: PPUSH
25535: CALL_OW 84
// end ; end_of_file
25539: LD_VAR 0 4
25543: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25544: LD_INT 0
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 264
25559: PUSH
25560: LD_EXP 36
25564: EQUAL
25565: IFFALSE 25637
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25567: LD_INT 68
25569: PPUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 255
25579: PPUSH
25580: CALL_OW 321
25584: PUSH
25585: LD_INT 2
25587: EQUAL
25588: IFFALSE 25600
// eff := 70 else
25590: LD_ADDR_VAR 0 4
25594: PUSH
25595: LD_INT 70
25597: ST_TO_ADDR
25598: GO 25608
// eff := 30 ;
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_INT 30
25607: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 250
25617: PPUSH
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 251
25627: PPUSH
25628: LD_VAR 0 4
25632: PPUSH
25633: CALL_OW 495
// end ; end ;
25637: LD_VAR 0 2
25641: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25642: LD_INT 0
25644: PPUSH
// end ;
25645: LD_VAR 0 4
25649: RET
// export function SOS_Command ( cmd ) ; begin
25650: LD_INT 0
25652: PPUSH
// end ;
25653: LD_VAR 0 2
25657: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25658: LD_INT 0
25660: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25661: LD_VAR 0 1
25665: PUSH
25666: LD_INT 250
25668: EQUAL
25669: PUSH
25670: LD_VAR 0 2
25674: PPUSH
25675: CALL_OW 264
25679: PUSH
25680: LD_EXP 39
25684: EQUAL
25685: AND
25686: IFFALSE 25707
// MinerPlaceMine ( unit , x , y ) ;
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 4
25697: PPUSH
25698: LD_VAR 0 5
25702: PPUSH
25703: CALL 28048 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25707: LD_VAR 0 1
25711: PUSH
25712: LD_INT 251
25714: EQUAL
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 264
25725: PUSH
25726: LD_EXP 39
25730: EQUAL
25731: AND
25732: IFFALSE 25753
// MinerDetonateMine ( unit , x , y ) ;
25734: LD_VAR 0 2
25738: PPUSH
25739: LD_VAR 0 4
25743: PPUSH
25744: LD_VAR 0 5
25748: PPUSH
25749: CALL 28325 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25753: LD_VAR 0 1
25757: PUSH
25758: LD_INT 252
25760: EQUAL
25761: PUSH
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 264
25771: PUSH
25772: LD_EXP 39
25776: EQUAL
25777: AND
25778: IFFALSE 25799
// MinerCreateMinefield ( unit , x , y ) ;
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 4
25789: PPUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: CALL 28742 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 253
25806: EQUAL
25807: PUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 257
25817: PUSH
25818: LD_INT 5
25820: EQUAL
25821: AND
25822: IFFALSE 25843
// ComBinocular ( unit , x , y ) ;
25824: LD_VAR 0 2
25828: PPUSH
25829: LD_VAR 0 4
25833: PPUSH
25834: LD_VAR 0 5
25838: PPUSH
25839: CALL 29113 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 254
25850: EQUAL
25851: PUSH
25852: LD_VAR 0 2
25856: PPUSH
25857: CALL_OW 264
25861: PUSH
25862: LD_EXP 34
25866: EQUAL
25867: AND
25868: PUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: CALL_OW 263
25878: PUSH
25879: LD_INT 3
25881: EQUAL
25882: AND
25883: IFFALSE 25899
// HackDestroyVehicle ( unit , selectedUnit ) ;
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: CALL 27408 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25899: LD_VAR 0 1
25903: PUSH
25904: LD_INT 255
25906: EQUAL
25907: PUSH
25908: LD_VAR 0 2
25912: PPUSH
25913: CALL_OW 264
25917: PUSH
25918: LD_INT 14
25920: PUSH
25921: LD_INT 53
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: IN
25928: AND
25929: PUSH
25930: LD_VAR 0 4
25934: PPUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: CALL_OW 488
25944: AND
25945: IFFALSE 25969
// CutTreeXYR ( unit , x , y , 12 ) ;
25947: LD_VAR 0 2
25951: PPUSH
25952: LD_VAR 0 4
25956: PPUSH
25957: LD_VAR 0 5
25961: PPUSH
25962: LD_INT 12
25964: PPUSH
25965: CALL 25974 0 4
// end ;
25969: LD_VAR 0 6
25973: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25974: LD_INT 0
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25985: LD_VAR 0 1
25989: NOT
25990: PUSH
25991: LD_VAR 0 2
25995: PPUSH
25996: LD_VAR 0 3
26000: PPUSH
26001: CALL_OW 488
26005: NOT
26006: OR
26007: PUSH
26008: LD_VAR 0 4
26012: NOT
26013: OR
26014: IFFALSE 26018
// exit ;
26016: GO 26358
// list := [ ] ;
26018: LD_ADDR_VAR 0 13
26022: PUSH
26023: EMPTY
26024: ST_TO_ADDR
// if x - r < 0 then
26025: LD_VAR 0 2
26029: PUSH
26030: LD_VAR 0 4
26034: MINUS
26035: PUSH
26036: LD_INT 0
26038: LESS
26039: IFFALSE 26051
// min_x := 0 else
26041: LD_ADDR_VAR 0 7
26045: PUSH
26046: LD_INT 0
26048: ST_TO_ADDR
26049: GO 26067
// min_x := x - r ;
26051: LD_ADDR_VAR 0 7
26055: PUSH
26056: LD_VAR 0 2
26060: PUSH
26061: LD_VAR 0 4
26065: MINUS
26066: ST_TO_ADDR
// if y - r < 0 then
26067: LD_VAR 0 3
26071: PUSH
26072: LD_VAR 0 4
26076: MINUS
26077: PUSH
26078: LD_INT 0
26080: LESS
26081: IFFALSE 26093
// min_y := 0 else
26083: LD_ADDR_VAR 0 8
26087: PUSH
26088: LD_INT 0
26090: ST_TO_ADDR
26091: GO 26109
// min_y := y - r ;
26093: LD_ADDR_VAR 0 8
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_VAR 0 4
26107: MINUS
26108: ST_TO_ADDR
// max_x := x + r ;
26109: LD_ADDR_VAR 0 9
26113: PUSH
26114: LD_VAR 0 2
26118: PUSH
26119: LD_VAR 0 4
26123: PLUS
26124: ST_TO_ADDR
// max_y := y + r ;
26125: LD_ADDR_VAR 0 10
26129: PUSH
26130: LD_VAR 0 3
26134: PUSH
26135: LD_VAR 0 4
26139: PLUS
26140: ST_TO_ADDR
// for _x = min_x to max_x do
26141: LD_ADDR_VAR 0 11
26145: PUSH
26146: DOUBLE
26147: LD_VAR 0 7
26151: DEC
26152: ST_TO_ADDR
26153: LD_VAR 0 9
26157: PUSH
26158: FOR_TO
26159: IFFALSE 26276
// for _y = min_y to max_y do
26161: LD_ADDR_VAR 0 12
26165: PUSH
26166: DOUBLE
26167: LD_VAR 0 8
26171: DEC
26172: ST_TO_ADDR
26173: LD_VAR 0 10
26177: PUSH
26178: FOR_TO
26179: IFFALSE 26272
// begin if not ValidHex ( _x , _y ) then
26181: LD_VAR 0 11
26185: PPUSH
26186: LD_VAR 0 12
26190: PPUSH
26191: CALL_OW 488
26195: NOT
26196: IFFALSE 26200
// continue ;
26198: GO 26178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26200: LD_VAR 0 11
26204: PPUSH
26205: LD_VAR 0 12
26209: PPUSH
26210: CALL_OW 351
26214: PUSH
26215: LD_VAR 0 11
26219: PPUSH
26220: LD_VAR 0 12
26224: PPUSH
26225: CALL_OW 554
26229: AND
26230: IFFALSE 26270
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26232: LD_ADDR_VAR 0 13
26236: PUSH
26237: LD_VAR 0 13
26241: PPUSH
26242: LD_VAR 0 13
26246: PUSH
26247: LD_INT 1
26249: PLUS
26250: PPUSH
26251: LD_VAR 0 11
26255: PUSH
26256: LD_VAR 0 12
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 2
26269: ST_TO_ADDR
// end ;
26270: GO 26178
26272: POP
26273: POP
26274: GO 26158
26276: POP
26277: POP
// if not list then
26278: LD_VAR 0 13
26282: NOT
26283: IFFALSE 26287
// exit ;
26285: GO 26358
// for i in list do
26287: LD_ADDR_VAR 0 6
26291: PUSH
26292: LD_VAR 0 13
26296: PUSH
26297: FOR_IN
26298: IFFALSE 26356
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26300: LD_VAR 0 1
26304: PPUSH
26305: LD_STRING M
26307: PUSH
26308: LD_VAR 0 6
26312: PUSH
26313: LD_INT 1
26315: ARRAY
26316: PUSH
26317: LD_VAR 0 6
26321: PUSH
26322: LD_INT 2
26324: ARRAY
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: PPUSH
26350: CALL_OW 447
26354: GO 26297
26356: POP
26357: POP
// end ;
26358: LD_VAR 0 5
26362: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26363: LD_EXP 103
26367: NOT
26368: IFFALSE 26418
26370: GO 26372
26372: DISABLE
// begin initHack := true ;
26373: LD_ADDR_EXP 103
26377: PUSH
26378: LD_INT 1
26380: ST_TO_ADDR
// hackTanks := [ ] ;
26381: LD_ADDR_EXP 104
26385: PUSH
26386: EMPTY
26387: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26388: LD_ADDR_EXP 105
26392: PUSH
26393: EMPTY
26394: ST_TO_ADDR
// hackLimit := 3 ;
26395: LD_ADDR_EXP 106
26399: PUSH
26400: LD_INT 3
26402: ST_TO_ADDR
// hackDist := 12 ;
26403: LD_ADDR_EXP 107
26407: PUSH
26408: LD_INT 12
26410: ST_TO_ADDR
// hackCounter := [ ] ;
26411: LD_ADDR_EXP 108
26415: PUSH
26416: EMPTY
26417: ST_TO_ADDR
// end ;
26418: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26419: LD_EXP 103
26423: PUSH
26424: LD_INT 34
26426: PUSH
26427: LD_EXP 34
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PPUSH
26436: CALL_OW 69
26440: AND
26441: IFFALSE 26696
26443: GO 26445
26445: DISABLE
26446: LD_INT 0
26448: PPUSH
26449: PPUSH
// begin enable ;
26450: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26451: LD_ADDR_VAR 0 1
26455: PUSH
26456: LD_INT 34
26458: PUSH
26459: LD_EXP 34
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: PUSH
26473: FOR_IN
26474: IFFALSE 26694
// begin if not i in hackTanks then
26476: LD_VAR 0 1
26480: PUSH
26481: LD_EXP 104
26485: IN
26486: NOT
26487: IFFALSE 26570
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26489: LD_ADDR_EXP 104
26493: PUSH
26494: LD_EXP 104
26498: PPUSH
26499: LD_EXP 104
26503: PUSH
26504: LD_INT 1
26506: PLUS
26507: PPUSH
26508: LD_VAR 0 1
26512: PPUSH
26513: CALL_OW 1
26517: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26518: LD_ADDR_EXP 105
26522: PUSH
26523: LD_EXP 105
26527: PPUSH
26528: LD_EXP 105
26532: PUSH
26533: LD_INT 1
26535: PLUS
26536: PPUSH
26537: EMPTY
26538: PPUSH
26539: CALL_OW 1
26543: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26544: LD_ADDR_EXP 108
26548: PUSH
26549: LD_EXP 108
26553: PPUSH
26554: LD_EXP 108
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: PPUSH
26563: EMPTY
26564: PPUSH
26565: CALL_OW 1
26569: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 302
26579: NOT
26580: IFFALSE 26593
// begin HackUnlinkAll ( i ) ;
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL 26699 0 1
// continue ;
26591: GO 26473
// end ; HackCheckCapturedStatus ( i ) ;
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL 27142 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26602: LD_ADDR_VAR 0 2
26606: PUSH
26607: LD_INT 81
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 255
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 33
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 91
26636: PUSH
26637: LD_VAR 0 1
26641: PUSH
26642: LD_EXP 107
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 50
26654: PUSH
26655: EMPTY
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: ST_TO_ADDR
// if not tmp then
26669: LD_VAR 0 2
26673: NOT
26674: IFFALSE 26678
// continue ;
26676: GO 26473
// HackLink ( i , tmp ) ;
26678: LD_VAR 0 1
26682: PPUSH
26683: LD_VAR 0 2
26687: PPUSH
26688: CALL 26835 0 2
// end ;
26692: GO 26473
26694: POP
26695: POP
// end ;
26696: PPOPN 2
26698: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26699: LD_INT 0
26701: PPUSH
26702: PPUSH
26703: PPUSH
// if not hack in hackTanks then
26704: LD_VAR 0 1
26708: PUSH
26709: LD_EXP 104
26713: IN
26714: NOT
26715: IFFALSE 26719
// exit ;
26717: GO 26830
// index := GetElementIndex ( hackTanks , hack ) ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_EXP 104
26728: PPUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL 34264 0 2
26738: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26739: LD_EXP 105
26743: PUSH
26744: LD_VAR 0 4
26748: ARRAY
26749: IFFALSE 26830
// begin for i in hackTanksCaptured [ index ] do
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_EXP 105
26760: PUSH
26761: LD_VAR 0 4
26765: ARRAY
26766: PUSH
26767: FOR_IN
26768: IFFALSE 26794
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26770: LD_VAR 0 3
26774: PUSH
26775: LD_INT 1
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 3
26783: PUSH
26784: LD_INT 2
26786: ARRAY
26787: PPUSH
26788: CALL_OW 235
26792: GO 26767
26794: POP
26795: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26796: LD_ADDR_EXP 105
26800: PUSH
26801: LD_EXP 105
26805: PPUSH
26806: LD_VAR 0 4
26810: PPUSH
26811: EMPTY
26812: PPUSH
26813: CALL_OW 1
26817: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26818: LD_VAR 0 1
26822: PPUSH
26823: LD_INT 0
26825: PPUSH
26826: CALL_OW 505
// end ; end ;
26830: LD_VAR 0 2
26834: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26835: LD_INT 0
26837: PPUSH
26838: PPUSH
26839: PPUSH
// if not hack in hackTanks or not vehicles then
26840: LD_VAR 0 1
26844: PUSH
26845: LD_EXP 104
26849: IN
26850: NOT
26851: PUSH
26852: LD_VAR 0 2
26856: NOT
26857: OR
26858: IFFALSE 26862
// exit ;
26860: GO 27137
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26862: LD_ADDR_VAR 0 2
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_VAR 0 2
26876: PPUSH
26877: LD_INT 1
26879: PPUSH
26880: LD_INT 1
26882: PPUSH
26883: CALL 34914 0 4
26887: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26888: LD_ADDR_VAR 0 5
26892: PUSH
26893: LD_EXP 104
26897: PPUSH
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL 34264 0 2
26907: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26908: LD_EXP 105
26912: PUSH
26913: LD_VAR 0 5
26917: ARRAY
26918: PUSH
26919: LD_EXP 106
26923: LESS
26924: IFFALSE 27113
// begin for i := 1 to vehicles do
26926: LD_ADDR_VAR 0 4
26930: PUSH
26931: DOUBLE
26932: LD_INT 1
26934: DEC
26935: ST_TO_ADDR
26936: LD_VAR 0 2
26940: PUSH
26941: FOR_TO
26942: IFFALSE 27111
// begin if hackTanksCaptured [ index ] = hackLimit then
26944: LD_EXP 105
26948: PUSH
26949: LD_VAR 0 5
26953: ARRAY
26954: PUSH
26955: LD_EXP 106
26959: EQUAL
26960: IFFALSE 26964
// break ;
26962: GO 27111
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26964: LD_ADDR_EXP 108
26968: PUSH
26969: LD_EXP 108
26973: PPUSH
26974: LD_VAR 0 5
26978: PPUSH
26979: LD_EXP 108
26983: PUSH
26984: LD_VAR 0 5
26988: ARRAY
26989: PUSH
26990: LD_INT 1
26992: PLUS
26993: PPUSH
26994: CALL_OW 1
26998: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26999: LD_ADDR_EXP 105
27003: PUSH
27004: LD_EXP 105
27008: PPUSH
27009: LD_VAR 0 5
27013: PUSH
27014: LD_EXP 105
27018: PUSH
27019: LD_VAR 0 5
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: PLUS
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: LD_VAR 0 2
27037: PUSH
27038: LD_VAR 0 4
27042: ARRAY
27043: PUSH
27044: LD_VAR 0 2
27048: PUSH
27049: LD_VAR 0 4
27053: ARRAY
27054: PPUSH
27055: CALL_OW 255
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL 34479 0 3
27068: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27069: LD_VAR 0 2
27073: PUSH
27074: LD_VAR 0 4
27078: ARRAY
27079: PPUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 255
27089: PPUSH
27090: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27094: LD_VAR 0 2
27098: PUSH
27099: LD_VAR 0 4
27103: ARRAY
27104: PPUSH
27105: CALL_OW 141
// end ;
27109: GO 26941
27111: POP
27112: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27113: LD_VAR 0 1
27117: PPUSH
27118: LD_EXP 105
27122: PUSH
27123: LD_VAR 0 5
27127: ARRAY
27128: PUSH
27129: LD_INT 0
27131: PLUS
27132: PPUSH
27133: CALL_OW 505
// end ;
27137: LD_VAR 0 3
27141: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27142: LD_INT 0
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
// if not hack in hackTanks then
27148: LD_VAR 0 1
27152: PUSH
27153: LD_EXP 104
27157: IN
27158: NOT
27159: IFFALSE 27163
// exit ;
27161: GO 27403
// index := GetElementIndex ( hackTanks , hack ) ;
27163: LD_ADDR_VAR 0 4
27167: PUSH
27168: LD_EXP 104
27172: PPUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL 34264 0 2
27182: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27183: LD_ADDR_VAR 0 3
27187: PUSH
27188: DOUBLE
27189: LD_EXP 105
27193: PUSH
27194: LD_VAR 0 4
27198: ARRAY
27199: INC
27200: ST_TO_ADDR
27201: LD_INT 1
27203: PUSH
27204: FOR_DOWNTO
27205: IFFALSE 27377
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27207: LD_ADDR_VAR 0 5
27211: PUSH
27212: LD_EXP 105
27216: PUSH
27217: LD_VAR 0 4
27221: ARRAY
27222: PUSH
27223: LD_VAR 0 3
27227: ARRAY
27228: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27229: LD_VAR 0 5
27233: PUSH
27234: LD_INT 1
27236: ARRAY
27237: PPUSH
27238: CALL_OW 302
27242: NOT
27243: PUSH
27244: LD_VAR 0 5
27248: PUSH
27249: LD_INT 1
27251: ARRAY
27252: PPUSH
27253: CALL_OW 255
27257: PUSH
27258: LD_VAR 0 1
27262: PPUSH
27263: CALL_OW 255
27267: NONEQUAL
27268: OR
27269: IFFALSE 27375
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27271: LD_VAR 0 5
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: PPUSH
27280: CALL_OW 305
27284: PUSH
27285: LD_VAR 0 5
27289: PUSH
27290: LD_INT 1
27292: ARRAY
27293: PPUSH
27294: CALL_OW 255
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 255
27308: EQUAL
27309: AND
27310: IFFALSE 27334
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27312: LD_VAR 0 5
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: LD_VAR 0 5
27325: PUSH
27326: LD_INT 2
27328: ARRAY
27329: PPUSH
27330: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27334: LD_ADDR_EXP 105
27338: PUSH
27339: LD_EXP 105
27343: PPUSH
27344: LD_VAR 0 4
27348: PPUSH
27349: LD_EXP 105
27353: PUSH
27354: LD_VAR 0 4
27358: ARRAY
27359: PPUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 3
27369: PPUSH
27370: CALL_OW 1
27374: ST_TO_ADDR
// end ; end ;
27375: GO 27204
27377: POP
27378: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27379: LD_VAR 0 1
27383: PPUSH
27384: LD_EXP 105
27388: PUSH
27389: LD_VAR 0 4
27393: ARRAY
27394: PUSH
27395: LD_INT 0
27397: PLUS
27398: PPUSH
27399: CALL_OW 505
// end ;
27403: LD_VAR 0 2
27407: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27408: LD_INT 0
27410: PPUSH
27411: PPUSH
27412: PPUSH
27413: PPUSH
// if not hack in hackTanks then
27414: LD_VAR 0 1
27418: PUSH
27419: LD_EXP 104
27423: IN
27424: NOT
27425: IFFALSE 27429
// exit ;
27427: GO 27514
// index := GetElementIndex ( hackTanks , hack ) ;
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: LD_EXP 104
27438: PPUSH
27439: LD_VAR 0 1
27443: PPUSH
27444: CALL 34264 0 2
27448: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27449: LD_ADDR_VAR 0 4
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_EXP 105
27463: PUSH
27464: LD_VAR 0 5
27468: ARRAY
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27512
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27473: LD_EXP 105
27477: PUSH
27478: LD_VAR 0 5
27482: ARRAY
27483: PUSH
27484: LD_VAR 0 4
27488: ARRAY
27489: PUSH
27490: LD_INT 1
27492: ARRAY
27493: PUSH
27494: LD_VAR 0 2
27498: EQUAL
27499: IFFALSE 27510
// KillUnit ( vehicle ) ;
27501: LD_VAR 0 2
27505: PPUSH
27506: CALL_OW 66
27510: GO 27470
27512: POP
27513: POP
// end ;
27514: LD_VAR 0 3
27518: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27519: LD_EXP 109
27523: NOT
27524: IFFALSE 27559
27526: GO 27528
27528: DISABLE
// begin initMiner := true ;
27529: LD_ADDR_EXP 109
27533: PUSH
27534: LD_INT 1
27536: ST_TO_ADDR
// minersList := [ ] ;
27537: LD_ADDR_EXP 110
27541: PUSH
27542: EMPTY
27543: ST_TO_ADDR
// minerMinesList := [ ] ;
27544: LD_ADDR_EXP 111
27548: PUSH
27549: EMPTY
27550: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27551: LD_ADDR_EXP 112
27555: PUSH
27556: LD_INT 5
27558: ST_TO_ADDR
// end ;
27559: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27560: LD_EXP 109
27564: PUSH
27565: LD_INT 34
27567: PUSH
27568: LD_EXP 39
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: AND
27582: IFFALSE 28045
27584: GO 27586
27586: DISABLE
27587: LD_INT 0
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
// begin enable ;
27593: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27594: LD_ADDR_VAR 0 1
27598: PUSH
27599: LD_INT 34
27601: PUSH
27602: LD_EXP 39
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PPUSH
27611: CALL_OW 69
27615: PUSH
27616: FOR_IN
27617: IFFALSE 27689
// begin if not i in minersList then
27619: LD_VAR 0 1
27623: PUSH
27624: LD_EXP 110
27628: IN
27629: NOT
27630: IFFALSE 27687
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27632: LD_ADDR_EXP 110
27636: PUSH
27637: LD_EXP 110
27641: PPUSH
27642: LD_EXP 110
27646: PUSH
27647: LD_INT 1
27649: PLUS
27650: PPUSH
27651: LD_VAR 0 1
27655: PPUSH
27656: CALL_OW 1
27660: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27661: LD_ADDR_EXP 111
27665: PUSH
27666: LD_EXP 111
27670: PPUSH
27671: LD_EXP 111
27675: PUSH
27676: LD_INT 1
27678: PLUS
27679: PPUSH
27680: EMPTY
27681: PPUSH
27682: CALL_OW 1
27686: ST_TO_ADDR
// end end ;
27687: GO 27616
27689: POP
27690: POP
// for i := minerMinesList downto 1 do
27691: LD_ADDR_VAR 0 1
27695: PUSH
27696: DOUBLE
27697: LD_EXP 111
27701: INC
27702: ST_TO_ADDR
27703: LD_INT 1
27705: PUSH
27706: FOR_DOWNTO
27707: IFFALSE 28043
// begin if IsLive ( minersList [ i ] ) then
27709: LD_EXP 110
27713: PUSH
27714: LD_VAR 0 1
27718: ARRAY
27719: PPUSH
27720: CALL_OW 300
27724: IFFALSE 27752
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27726: LD_EXP 110
27730: PUSH
27731: LD_VAR 0 1
27735: ARRAY
27736: PPUSH
27737: LD_EXP 111
27741: PUSH
27742: LD_VAR 0 1
27746: ARRAY
27747: PPUSH
27748: CALL_OW 505
// if not minerMinesList [ i ] then
27752: LD_EXP 111
27756: PUSH
27757: LD_VAR 0 1
27761: ARRAY
27762: NOT
27763: IFFALSE 27767
// continue ;
27765: GO 27706
// for j := minerMinesList [ i ] downto 1 do
27767: LD_ADDR_VAR 0 2
27771: PUSH
27772: DOUBLE
27773: LD_EXP 111
27777: PUSH
27778: LD_VAR 0 1
27782: ARRAY
27783: INC
27784: ST_TO_ADDR
27785: LD_INT 1
27787: PUSH
27788: FOR_DOWNTO
27789: IFFALSE 28039
// begin side := GetSide ( minersList [ i ] ) ;
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_EXP 110
27800: PUSH
27801: LD_VAR 0 1
27805: ARRAY
27806: PPUSH
27807: CALL_OW 255
27811: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_EXP 111
27821: PUSH
27822: LD_VAR 0 1
27826: ARRAY
27827: PUSH
27828: LD_VAR 0 2
27832: ARRAY
27833: PUSH
27834: LD_INT 1
27836: ARRAY
27837: PPUSH
27838: LD_EXP 111
27842: PUSH
27843: LD_VAR 0 1
27847: ARRAY
27848: PUSH
27849: LD_VAR 0 2
27853: ARRAY
27854: PUSH
27855: LD_INT 2
27857: ARRAY
27858: PPUSH
27859: CALL_OW 428
27863: ST_TO_ADDR
// if not tmp then
27864: LD_VAR 0 4
27868: NOT
27869: IFFALSE 27873
// continue ;
27871: GO 27788
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27873: LD_VAR 0 4
27877: PUSH
27878: LD_INT 81
27880: PUSH
27881: LD_VAR 0 3
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PPUSH
27890: CALL_OW 69
27894: IN
27895: PUSH
27896: LD_EXP 111
27900: PUSH
27901: LD_VAR 0 1
27905: ARRAY
27906: PUSH
27907: LD_VAR 0 2
27911: ARRAY
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: LD_EXP 111
27921: PUSH
27922: LD_VAR 0 1
27926: ARRAY
27927: PUSH
27928: LD_VAR 0 2
27932: ARRAY
27933: PUSH
27934: LD_INT 2
27936: ARRAY
27937: PPUSH
27938: CALL_OW 458
27942: AND
27943: IFFALSE 28037
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27945: LD_EXP 111
27949: PUSH
27950: LD_VAR 0 1
27954: ARRAY
27955: PUSH
27956: LD_VAR 0 2
27960: ARRAY
27961: PUSH
27962: LD_INT 1
27964: ARRAY
27965: PPUSH
27966: LD_EXP 111
27970: PUSH
27971: LD_VAR 0 1
27975: ARRAY
27976: PUSH
27977: LD_VAR 0 2
27981: ARRAY
27982: PUSH
27983: LD_INT 2
27985: ARRAY
27986: PPUSH
27987: LD_VAR 0 3
27991: PPUSH
27992: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27996: LD_ADDR_EXP 111
28000: PUSH
28001: LD_EXP 111
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_EXP 111
28015: PUSH
28016: LD_VAR 0 1
28020: ARRAY
28021: PPUSH
28022: LD_VAR 0 2
28026: PPUSH
28027: CALL_OW 3
28031: PPUSH
28032: CALL_OW 1
28036: ST_TO_ADDR
// end ; end ;
28037: GO 27788
28039: POP
28040: POP
// end ;
28041: GO 27706
28043: POP
28044: POP
// end ;
28045: PPOPN 4
28047: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// result := false ;
28052: LD_ADDR_VAR 0 4
28056: PUSH
28057: LD_INT 0
28059: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 264
28069: PUSH
28070: LD_EXP 39
28074: EQUAL
28075: NOT
28076: IFFALSE 28080
// exit ;
28078: GO 28320
// index := GetElementIndex ( minersList , unit ) ;
28080: LD_ADDR_VAR 0 5
28084: PUSH
28085: LD_EXP 110
28089: PPUSH
28090: LD_VAR 0 1
28094: PPUSH
28095: CALL 34264 0 2
28099: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28100: LD_EXP 111
28104: PUSH
28105: LD_VAR 0 5
28109: ARRAY
28110: PUSH
28111: LD_EXP 112
28115: GREATEREQUAL
28116: IFFALSE 28120
// exit ;
28118: GO 28320
// ComMoveXY ( unit , x , y ) ;
28120: LD_VAR 0 1
28124: PPUSH
28125: LD_VAR 0 2
28129: PPUSH
28130: LD_VAR 0 3
28134: PPUSH
28135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28139: LD_INT 35
28141: PPUSH
28142: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28146: LD_VAR 0 1
28150: PPUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_VAR 0 3
28160: PPUSH
28161: CALL 64328 0 3
28165: NOT
28166: PUSH
28167: LD_VAR 0 1
28171: PPUSH
28172: CALL_OW 314
28176: AND
28177: IFFALSE 28181
// exit ;
28179: GO 28320
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28181: LD_VAR 0 2
28185: PPUSH
28186: LD_VAR 0 3
28190: PPUSH
28191: CALL_OW 428
28195: PUSH
28196: LD_VAR 0 1
28200: EQUAL
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 314
28211: NOT
28212: AND
28213: IFFALSE 28139
// PlaySoundXY ( x , y , PlantMine ) ;
28215: LD_VAR 0 2
28219: PPUSH
28220: LD_VAR 0 3
28224: PPUSH
28225: LD_STRING PlantMine
28227: PPUSH
28228: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28232: LD_VAR 0 2
28236: PPUSH
28237: LD_VAR 0 3
28241: PPUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 255
28251: PPUSH
28252: LD_INT 0
28254: PPUSH
28255: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28259: LD_ADDR_EXP 111
28263: PUSH
28264: LD_EXP 111
28268: PPUSH
28269: LD_VAR 0 5
28273: PUSH
28274: LD_EXP 111
28278: PUSH
28279: LD_VAR 0 5
28283: ARRAY
28284: PUSH
28285: LD_INT 1
28287: PLUS
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PPUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_VAR 0 3
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PPUSH
28307: CALL 34479 0 3
28311: ST_TO_ADDR
// result := true ;
28312: LD_ADDR_VAR 0 4
28316: PUSH
28317: LD_INT 1
28319: ST_TO_ADDR
// end ;
28320: LD_VAR 0 4
28324: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28325: LD_INT 0
28327: PPUSH
28328: PPUSH
28329: PPUSH
// if not unit in minersList then
28330: LD_VAR 0 1
28334: PUSH
28335: LD_EXP 110
28339: IN
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28737
// index := GetElementIndex ( minersList , unit ) ;
28345: LD_ADDR_VAR 0 6
28349: PUSH
28350: LD_EXP 110
28354: PPUSH
28355: LD_VAR 0 1
28359: PPUSH
28360: CALL 34264 0 2
28364: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28365: LD_ADDR_VAR 0 5
28369: PUSH
28370: DOUBLE
28371: LD_EXP 111
28375: PUSH
28376: LD_VAR 0 6
28380: ARRAY
28381: INC
28382: ST_TO_ADDR
28383: LD_INT 1
28385: PUSH
28386: FOR_DOWNTO
28387: IFFALSE 28548
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28389: LD_EXP 111
28393: PUSH
28394: LD_VAR 0 6
28398: ARRAY
28399: PUSH
28400: LD_VAR 0 5
28404: ARRAY
28405: PUSH
28406: LD_INT 1
28408: ARRAY
28409: PUSH
28410: LD_VAR 0 2
28414: EQUAL
28415: PUSH
28416: LD_EXP 111
28420: PUSH
28421: LD_VAR 0 6
28425: ARRAY
28426: PUSH
28427: LD_VAR 0 5
28431: ARRAY
28432: PUSH
28433: LD_INT 2
28435: ARRAY
28436: PUSH
28437: LD_VAR 0 3
28441: EQUAL
28442: AND
28443: IFFALSE 28546
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28445: LD_EXP 111
28449: PUSH
28450: LD_VAR 0 6
28454: ARRAY
28455: PUSH
28456: LD_VAR 0 5
28460: ARRAY
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_EXP 111
28470: PUSH
28471: LD_VAR 0 6
28475: ARRAY
28476: PUSH
28477: LD_VAR 0 5
28481: ARRAY
28482: PUSH
28483: LD_INT 2
28485: ARRAY
28486: PPUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 255
28496: PPUSH
28497: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28501: LD_ADDR_EXP 111
28505: PUSH
28506: LD_EXP 111
28510: PPUSH
28511: LD_VAR 0 6
28515: PPUSH
28516: LD_EXP 111
28520: PUSH
28521: LD_VAR 0 6
28525: ARRAY
28526: PPUSH
28527: LD_VAR 0 5
28531: PPUSH
28532: CALL_OW 3
28536: PPUSH
28537: CALL_OW 1
28541: ST_TO_ADDR
// exit ;
28542: POP
28543: POP
28544: GO 28737
// end ; end ;
28546: GO 28386
28548: POP
28549: POP
// for i := minerMinesList [ index ] downto 1 do
28550: LD_ADDR_VAR 0 5
28554: PUSH
28555: DOUBLE
28556: LD_EXP 111
28560: PUSH
28561: LD_VAR 0 6
28565: ARRAY
28566: INC
28567: ST_TO_ADDR
28568: LD_INT 1
28570: PUSH
28571: FOR_DOWNTO
28572: IFFALSE 28735
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28574: LD_EXP 111
28578: PUSH
28579: LD_VAR 0 6
28583: ARRAY
28584: PUSH
28585: LD_VAR 0 5
28589: ARRAY
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: LD_EXP 111
28599: PUSH
28600: LD_VAR 0 6
28604: ARRAY
28605: PUSH
28606: LD_VAR 0 5
28610: ARRAY
28611: PUSH
28612: LD_INT 2
28614: ARRAY
28615: PPUSH
28616: LD_VAR 0 2
28620: PPUSH
28621: LD_VAR 0 3
28625: PPUSH
28626: CALL_OW 298
28630: PUSH
28631: LD_INT 6
28633: LESS
28634: IFFALSE 28733
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28636: LD_EXP 111
28640: PUSH
28641: LD_VAR 0 6
28645: ARRAY
28646: PUSH
28647: LD_VAR 0 5
28651: ARRAY
28652: PUSH
28653: LD_INT 1
28655: ARRAY
28656: PPUSH
28657: LD_EXP 111
28661: PUSH
28662: LD_VAR 0 6
28666: ARRAY
28667: PUSH
28668: LD_VAR 0 5
28672: ARRAY
28673: PUSH
28674: LD_INT 2
28676: ARRAY
28677: PPUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 255
28687: PPUSH
28688: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28692: LD_ADDR_EXP 111
28696: PUSH
28697: LD_EXP 111
28701: PPUSH
28702: LD_VAR 0 6
28706: PPUSH
28707: LD_EXP 111
28711: PUSH
28712: LD_VAR 0 6
28716: ARRAY
28717: PPUSH
28718: LD_VAR 0 5
28722: PPUSH
28723: CALL_OW 3
28727: PPUSH
28728: CALL_OW 1
28732: ST_TO_ADDR
// end ; end ;
28733: GO 28571
28735: POP
28736: POP
// end ;
28737: LD_VAR 0 4
28741: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28742: LD_INT 0
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
28749: PPUSH
28750: PPUSH
28751: PPUSH
28752: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28753: LD_VAR 0 1
28757: PPUSH
28758: CALL_OW 264
28762: PUSH
28763: LD_EXP 39
28767: EQUAL
28768: NOT
28769: PUSH
28770: LD_VAR 0 1
28774: PUSH
28775: LD_EXP 110
28779: IN
28780: NOT
28781: OR
28782: IFFALSE 28786
// exit ;
28784: GO 29108
// index := GetElementIndex ( minersList , unit ) ;
28786: LD_ADDR_VAR 0 6
28790: PUSH
28791: LD_EXP 110
28795: PPUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: CALL 34264 0 2
28805: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28806: LD_ADDR_VAR 0 8
28810: PUSH
28811: LD_EXP 112
28815: PUSH
28816: LD_EXP 111
28820: PUSH
28821: LD_VAR 0 6
28825: ARRAY
28826: MINUS
28827: ST_TO_ADDR
// if not minesFreeAmount then
28828: LD_VAR 0 8
28832: NOT
28833: IFFALSE 28837
// exit ;
28835: GO 29108
// tmp := [ ] ;
28837: LD_ADDR_VAR 0 7
28841: PUSH
28842: EMPTY
28843: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: DOUBLE
28850: LD_INT 1
28852: DEC
28853: ST_TO_ADDR
28854: LD_VAR 0 8
28858: PUSH
28859: FOR_TO
28860: IFFALSE 29055
// begin _d := rand ( 0 , 5 ) ;
28862: LD_ADDR_VAR 0 11
28866: PUSH
28867: LD_INT 0
28869: PPUSH
28870: LD_INT 5
28872: PPUSH
28873: CALL_OW 12
28877: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28878: LD_ADDR_VAR 0 12
28882: PUSH
28883: LD_INT 2
28885: PPUSH
28886: LD_INT 6
28888: PPUSH
28889: CALL_OW 12
28893: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28894: LD_ADDR_VAR 0 9
28898: PUSH
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_VAR 0 11
28908: PPUSH
28909: LD_VAR 0 12
28913: PPUSH
28914: CALL_OW 272
28918: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28919: LD_ADDR_VAR 0 10
28923: PUSH
28924: LD_VAR 0 3
28928: PPUSH
28929: LD_VAR 0 11
28933: PPUSH
28934: LD_VAR 0 12
28938: PPUSH
28939: CALL_OW 273
28943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28944: LD_VAR 0 9
28948: PPUSH
28949: LD_VAR 0 10
28953: PPUSH
28954: CALL_OW 488
28958: PUSH
28959: LD_VAR 0 9
28963: PUSH
28964: LD_VAR 0 10
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_VAR 0 7
28977: IN
28978: NOT
28979: AND
28980: PUSH
28981: LD_VAR 0 9
28985: PPUSH
28986: LD_VAR 0 10
28990: PPUSH
28991: CALL_OW 458
28995: NOT
28996: AND
28997: IFFALSE 29039
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28999: LD_ADDR_VAR 0 7
29003: PUSH
29004: LD_VAR 0 7
29008: PPUSH
29009: LD_VAR 0 7
29013: PUSH
29014: LD_INT 1
29016: PLUS
29017: PPUSH
29018: LD_VAR 0 9
29022: PUSH
29023: LD_VAR 0 10
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 1
29036: ST_TO_ADDR
29037: GO 29053
// i := i - 1 ;
29039: LD_ADDR_VAR 0 5
29043: PUSH
29044: LD_VAR 0 5
29048: PUSH
29049: LD_INT 1
29051: MINUS
29052: ST_TO_ADDR
// end ;
29053: GO 28859
29055: POP
29056: POP
// for i in tmp do
29057: LD_ADDR_VAR 0 5
29061: PUSH
29062: LD_VAR 0 7
29066: PUSH
29067: FOR_IN
29068: IFFALSE 29106
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29070: LD_VAR 0 1
29074: PPUSH
29075: LD_VAR 0 5
29079: PUSH
29080: LD_INT 1
29082: ARRAY
29083: PPUSH
29084: LD_VAR 0 5
29088: PUSH
29089: LD_INT 2
29091: ARRAY
29092: PPUSH
29093: CALL 28048 0 3
29097: NOT
29098: IFFALSE 29104
// exit ;
29100: POP
29101: POP
29102: GO 29108
29104: GO 29067
29106: POP
29107: POP
// end ;
29108: LD_VAR 0 4
29112: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
29117: PPUSH
29118: PPUSH
29119: PPUSH
29120: PPUSH
29121: PPUSH
// if not GetClass ( unit ) = class_sniper then
29122: LD_VAR 0 1
29126: PPUSH
29127: CALL_OW 257
29131: PUSH
29132: LD_INT 5
29134: EQUAL
29135: NOT
29136: IFFALSE 29140
// exit ;
29138: GO 29528
// dist := 8 ;
29140: LD_ADDR_VAR 0 5
29144: PUSH
29145: LD_INT 8
29147: ST_TO_ADDR
// viewRange := 12 ;
29148: LD_ADDR_VAR 0 7
29152: PUSH
29153: LD_INT 12
29155: ST_TO_ADDR
// side := GetSide ( unit ) ;
29156: LD_ADDR_VAR 0 6
29160: PUSH
29161: LD_VAR 0 1
29165: PPUSH
29166: CALL_OW 255
29170: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29171: LD_INT 61
29173: PPUSH
29174: LD_VAR 0 6
29178: PPUSH
29179: CALL_OW 321
29183: PUSH
29184: LD_INT 2
29186: EQUAL
29187: IFFALSE 29197
// viewRange := 16 ;
29189: LD_ADDR_VAR 0 7
29193: PUSH
29194: LD_INT 16
29196: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29197: LD_VAR 0 1
29201: PPUSH
29202: LD_VAR 0 2
29206: PPUSH
29207: LD_VAR 0 3
29211: PPUSH
29212: CALL_OW 297
29216: PUSH
29217: LD_VAR 0 5
29221: GREATER
29222: IFFALSE 29301
// begin ComMoveXY ( unit , x , y ) ;
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 3
29238: PPUSH
29239: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29243: LD_INT 35
29245: PPUSH
29246: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29250: LD_VAR 0 1
29254: PPUSH
29255: LD_VAR 0 2
29259: PPUSH
29260: LD_VAR 0 3
29264: PPUSH
29265: CALL 64328 0 3
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29528
// until GetDistUnitXY ( unit , x , y ) < dist ;
29274: LD_VAR 0 1
29278: PPUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_VAR 0 3
29288: PPUSH
29289: CALL_OW 297
29293: PUSH
29294: LD_VAR 0 5
29298: LESS
29299: IFFALSE 29243
// end ; ComTurnXY ( unit , x , y ) ;
29301: LD_VAR 0 1
29305: PPUSH
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 118
// wait ( 5 ) ;
29320: LD_INT 5
29322: PPUSH
29323: CALL_OW 67
// _d := GetDir ( unit ) ;
29327: LD_ADDR_VAR 0 10
29331: PUSH
29332: LD_VAR 0 1
29336: PPUSH
29337: CALL_OW 254
29341: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29342: LD_ADDR_VAR 0 8
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 250
29356: PPUSH
29357: LD_VAR 0 10
29361: PPUSH
29362: LD_VAR 0 5
29366: PPUSH
29367: CALL_OW 272
29371: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29372: LD_ADDR_VAR 0 9
29376: PUSH
29377: LD_VAR 0 1
29381: PPUSH
29382: CALL_OW 251
29386: PPUSH
29387: LD_VAR 0 10
29391: PPUSH
29392: LD_VAR 0 5
29396: PPUSH
29397: CALL_OW 273
29401: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29402: LD_VAR 0 8
29406: PPUSH
29407: LD_VAR 0 9
29411: PPUSH
29412: CALL_OW 488
29416: NOT
29417: IFFALSE 29421
// exit ;
29419: GO 29528
// ComAnimCustom ( unit , 1 ) ;
29421: LD_VAR 0 1
29425: PPUSH
29426: LD_INT 1
29428: PPUSH
29429: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29433: LD_VAR 0 8
29437: PPUSH
29438: LD_VAR 0 9
29442: PPUSH
29443: LD_VAR 0 6
29447: PPUSH
29448: LD_VAR 0 7
29452: PPUSH
29453: CALL_OW 330
// repeat wait ( 1 ) ;
29457: LD_INT 1
29459: PPUSH
29460: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29464: LD_VAR 0 1
29468: PPUSH
29469: CALL_OW 316
29473: PUSH
29474: LD_VAR 0 1
29478: PPUSH
29479: CALL_OW 314
29483: OR
29484: PUSH
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 302
29494: NOT
29495: OR
29496: PUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 301
29506: OR
29507: IFFALSE 29457
// RemoveSeeing ( _x , _y , side ) ;
29509: LD_VAR 0 8
29513: PPUSH
29514: LD_VAR 0 9
29518: PPUSH
29519: LD_VAR 0 6
29523: PPUSH
29524: CALL_OW 331
// end ; end_of_file
29528: LD_VAR 0 4
29532: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29533: LD_INT 0
29535: PPUSH
29536: PPUSH
// if exist_mode then
29537: LD_VAR 0 2
29541: IFFALSE 29566
// unit := CreateCharacter ( prefix & ident ) else
29543: LD_ADDR_VAR 0 5
29547: PUSH
29548: LD_VAR 0 3
29552: PUSH
29553: LD_VAR 0 1
29557: STR
29558: PPUSH
29559: CALL_OW 34
29563: ST_TO_ADDR
29564: GO 29581
// unit := NewCharacter ( ident ) ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 25
29580: ST_TO_ADDR
// result := unit ;
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_VAR 0 5
29590: ST_TO_ADDR
// end ;
29591: LD_VAR 0 4
29595: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29596: LD_INT 0
29598: PPUSH
29599: PPUSH
// if not side or not nation then
29600: LD_VAR 0 1
29604: NOT
29605: PUSH
29606: LD_VAR 0 2
29610: NOT
29611: OR
29612: IFFALSE 29616
// exit ;
29614: GO 30380
// case nation of nation_american :
29616: LD_VAR 0 2
29620: PUSH
29621: LD_INT 1
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29843
29629: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: LD_INT 35
29637: PUSH
29638: LD_INT 45
29640: PUSH
29641: LD_INT 46
29643: PUSH
29644: LD_INT 47
29646: PUSH
29647: LD_INT 82
29649: PUSH
29650: LD_INT 83
29652: PUSH
29653: LD_INT 84
29655: PUSH
29656: LD_INT 85
29658: PUSH
29659: LD_INT 86
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 6
29670: PUSH
29671: LD_INT 15
29673: PUSH
29674: LD_INT 16
29676: PUSH
29677: LD_INT 7
29679: PUSH
29680: LD_INT 12
29682: PUSH
29683: LD_INT 13
29685: PUSH
29686: LD_INT 10
29688: PUSH
29689: LD_INT 14
29691: PUSH
29692: LD_INT 20
29694: PUSH
29695: LD_INT 21
29697: PUSH
29698: LD_INT 22
29700: PUSH
29701: LD_INT 25
29703: PUSH
29704: LD_INT 32
29706: PUSH
29707: LD_INT 27
29709: PUSH
29710: LD_INT 36
29712: PUSH
29713: LD_INT 69
29715: PUSH
29716: LD_INT 39
29718: PUSH
29719: LD_INT 34
29721: PUSH
29722: LD_INT 40
29724: PUSH
29725: LD_INT 48
29727: PUSH
29728: LD_INT 49
29730: PUSH
29731: LD_INT 50
29733: PUSH
29734: LD_INT 51
29736: PUSH
29737: LD_INT 52
29739: PUSH
29740: LD_INT 53
29742: PUSH
29743: LD_INT 54
29745: PUSH
29746: LD_INT 55
29748: PUSH
29749: LD_INT 56
29751: PUSH
29752: LD_INT 57
29754: PUSH
29755: LD_INT 58
29757: PUSH
29758: LD_INT 59
29760: PUSH
29761: LD_INT 60
29763: PUSH
29764: LD_INT 61
29766: PUSH
29767: LD_INT 62
29769: PUSH
29770: LD_INT 80
29772: PUSH
29773: LD_INT 82
29775: PUSH
29776: LD_INT 83
29778: PUSH
29779: LD_INT 84
29781: PUSH
29782: LD_INT 85
29784: PUSH
29785: LD_INT 86
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
29841: GO 30304
29843: LD_INT 2
29845: DOUBLE
29846: EQUAL
29847: IFTRUE 29851
29849: GO 30073
29851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29852: LD_ADDR_VAR 0 4
29856: PUSH
29857: LD_INT 35
29859: PUSH
29860: LD_INT 45
29862: PUSH
29863: LD_INT 46
29865: PUSH
29866: LD_INT 47
29868: PUSH
29869: LD_INT 82
29871: PUSH
29872: LD_INT 83
29874: PUSH
29875: LD_INT 84
29877: PUSH
29878: LD_INT 85
29880: PUSH
29881: LD_INT 87
29883: PUSH
29884: LD_INT 70
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 11
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: LD_INT 6
29904: PUSH
29905: LD_INT 15
29907: PUSH
29908: LD_INT 18
29910: PUSH
29911: LD_INT 7
29913: PUSH
29914: LD_INT 17
29916: PUSH
29917: LD_INT 8
29919: PUSH
29920: LD_INT 20
29922: PUSH
29923: LD_INT 21
29925: PUSH
29926: LD_INT 22
29928: PUSH
29929: LD_INT 72
29931: PUSH
29932: LD_INT 26
29934: PUSH
29935: LD_INT 69
29937: PUSH
29938: LD_INT 39
29940: PUSH
29941: LD_INT 40
29943: PUSH
29944: LD_INT 41
29946: PUSH
29947: LD_INT 42
29949: PUSH
29950: LD_INT 43
29952: PUSH
29953: LD_INT 48
29955: PUSH
29956: LD_INT 49
29958: PUSH
29959: LD_INT 50
29961: PUSH
29962: LD_INT 51
29964: PUSH
29965: LD_INT 52
29967: PUSH
29968: LD_INT 53
29970: PUSH
29971: LD_INT 54
29973: PUSH
29974: LD_INT 55
29976: PUSH
29977: LD_INT 56
29979: PUSH
29980: LD_INT 60
29982: PUSH
29983: LD_INT 61
29985: PUSH
29986: LD_INT 62
29988: PUSH
29989: LD_INT 66
29991: PUSH
29992: LD_INT 67
29994: PUSH
29995: LD_INT 68
29997: PUSH
29998: LD_INT 81
30000: PUSH
30001: LD_INT 82
30003: PUSH
30004: LD_INT 83
30006: PUSH
30007: LD_INT 84
30009: PUSH
30010: LD_INT 85
30012: PUSH
30013: LD_INT 87
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
30071: GO 30304
30073: LD_INT 3
30075: DOUBLE
30076: EQUAL
30077: IFTRUE 30081
30079: GO 30303
30081: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_INT 46
30089: PUSH
30090: LD_INT 47
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 82
30101: PUSH
30102: LD_INT 83
30104: PUSH
30105: LD_INT 84
30107: PUSH
30108: LD_INT 85
30110: PUSH
30111: LD_INT 86
30113: PUSH
30114: LD_INT 11
30116: PUSH
30117: LD_INT 9
30119: PUSH
30120: LD_INT 20
30122: PUSH
30123: LD_INT 19
30125: PUSH
30126: LD_INT 21
30128: PUSH
30129: LD_INT 24
30131: PUSH
30132: LD_INT 22
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 28
30140: PUSH
30141: LD_INT 29
30143: PUSH
30144: LD_INT 30
30146: PUSH
30147: LD_INT 31
30149: PUSH
30150: LD_INT 37
30152: PUSH
30153: LD_INT 38
30155: PUSH
30156: LD_INT 32
30158: PUSH
30159: LD_INT 27
30161: PUSH
30162: LD_INT 33
30164: PUSH
30165: LD_INT 69
30167: PUSH
30168: LD_INT 39
30170: PUSH
30171: LD_INT 34
30173: PUSH
30174: LD_INT 40
30176: PUSH
30177: LD_INT 71
30179: PUSH
30180: LD_INT 23
30182: PUSH
30183: LD_INT 44
30185: PUSH
30186: LD_INT 48
30188: PUSH
30189: LD_INT 49
30191: PUSH
30192: LD_INT 50
30194: PUSH
30195: LD_INT 51
30197: PUSH
30198: LD_INT 52
30200: PUSH
30201: LD_INT 53
30203: PUSH
30204: LD_INT 54
30206: PUSH
30207: LD_INT 55
30209: PUSH
30210: LD_INT 56
30212: PUSH
30213: LD_INT 57
30215: PUSH
30216: LD_INT 58
30218: PUSH
30219: LD_INT 59
30221: PUSH
30222: LD_INT 63
30224: PUSH
30225: LD_INT 64
30227: PUSH
30228: LD_INT 65
30230: PUSH
30231: LD_INT 82
30233: PUSH
30234: LD_INT 83
30236: PUSH
30237: LD_INT 84
30239: PUSH
30240: LD_INT 85
30242: PUSH
30243: LD_INT 86
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
30301: GO 30304
30303: POP
// if state > - 1 and state < 3 then
30304: LD_VAR 0 3
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: GREATER
30313: PUSH
30314: LD_VAR 0 3
30318: PUSH
30319: LD_INT 3
30321: LESS
30322: AND
30323: IFFALSE 30380
// for i in result do
30325: LD_ADDR_VAR 0 5
30329: PUSH
30330: LD_VAR 0 4
30334: PUSH
30335: FOR_IN
30336: IFFALSE 30378
// if GetTech ( i , side ) <> state then
30338: LD_VAR 0 5
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 321
30352: PUSH
30353: LD_VAR 0 3
30357: NONEQUAL
30358: IFFALSE 30376
// result := result diff i ;
30360: LD_ADDR_VAR 0 4
30364: PUSH
30365: LD_VAR 0 4
30369: PUSH
30370: LD_VAR 0 5
30374: DIFF
30375: ST_TO_ADDR
30376: GO 30335
30378: POP
30379: POP
// end ;
30380: LD_VAR 0 4
30384: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30385: LD_INT 0
30387: PPUSH
30388: PPUSH
30389: PPUSH
// result := true ;
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 1
30397: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30398: LD_ADDR_VAR 0 5
30402: PUSH
30403: LD_VAR 0 2
30407: PPUSH
30408: CALL_OW 480
30412: ST_TO_ADDR
// if not tmp then
30413: LD_VAR 0 5
30417: NOT
30418: IFFALSE 30422
// exit ;
30420: GO 30471
// for i in tmp do
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: LD_VAR 0 5
30431: PUSH
30432: FOR_IN
30433: IFFALSE 30469
// if GetTech ( i , side ) <> state_researched then
30435: LD_VAR 0 4
30439: PPUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 321
30449: PUSH
30450: LD_INT 2
30452: NONEQUAL
30453: IFFALSE 30467
// begin result := false ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 0
30462: ST_TO_ADDR
// exit ;
30463: POP
30464: POP
30465: GO 30471
// end ;
30467: GO 30432
30469: POP
30470: POP
// end ;
30471: LD_VAR 0 3
30475: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
30489: PPUSH
30490: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30491: LD_VAR 0 1
30495: NOT
30496: PUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 257
30506: PUSH
30507: LD_INT 9
30509: NONEQUAL
30510: OR
30511: IFFALSE 30515
// exit ;
30513: GO 31088
// side := GetSide ( unit ) ;
30515: LD_ADDR_VAR 0 9
30519: PUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 255
30529: ST_TO_ADDR
// tech_space := tech_spacanom ;
30530: LD_ADDR_VAR 0 12
30534: PUSH
30535: LD_INT 29
30537: ST_TO_ADDR
// tech_time := tech_taurad ;
30538: LD_ADDR_VAR 0 13
30542: PUSH
30543: LD_INT 28
30545: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30546: LD_ADDR_VAR 0 11
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 310
30560: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30561: LD_VAR 0 11
30565: PPUSH
30566: CALL_OW 247
30570: PUSH
30571: LD_INT 2
30573: EQUAL
30574: IFFALSE 30578
// exit ;
30576: GO 31088
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30578: LD_ADDR_VAR 0 8
30582: PUSH
30583: LD_INT 81
30585: PUSH
30586: LD_VAR 0 9
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 21
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: ST_TO_ADDR
// if not tmp then
30621: LD_VAR 0 8
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 31088
// if in_unit then
30630: LD_VAR 0 11
30634: IFFALSE 30658
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30636: LD_ADDR_VAR 0 10
30640: PUSH
30641: LD_VAR 0 8
30645: PPUSH
30646: LD_VAR 0 11
30650: PPUSH
30651: CALL_OW 74
30655: ST_TO_ADDR
30656: GO 30678
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30658: LD_ADDR_VAR 0 10
30662: PUSH
30663: LD_VAR 0 8
30667: PPUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 74
30677: ST_TO_ADDR
// if not enemy then
30678: LD_VAR 0 10
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 31088
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30687: LD_VAR 0 11
30691: PUSH
30692: LD_VAR 0 11
30696: PPUSH
30697: LD_VAR 0 10
30701: PPUSH
30702: CALL_OW 296
30706: PUSH
30707: LD_INT 13
30709: GREATER
30710: AND
30711: PUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_VAR 0 10
30721: PPUSH
30722: CALL_OW 296
30726: PUSH
30727: LD_INT 12
30729: GREATER
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 31088
// missile := [ 1 ] ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30746: LD_VAR 0 9
30750: PPUSH
30751: LD_VAR 0 12
30755: PPUSH
30756: CALL_OW 325
30760: IFFALSE 30789
// missile := Insert ( missile , missile + 1 , 2 ) ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: LD_VAR 0 14
30771: PPUSH
30772: LD_VAR 0 14
30776: PUSH
30777: LD_INT 1
30779: PLUS
30780: PPUSH
30781: LD_INT 2
30783: PPUSH
30784: CALL_OW 2
30788: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30789: LD_VAR 0 9
30793: PPUSH
30794: LD_VAR 0 13
30798: PPUSH
30799: CALL_OW 325
30803: PUSH
30804: LD_VAR 0 10
30808: PPUSH
30809: CALL_OW 255
30813: PPUSH
30814: LD_VAR 0 13
30818: PPUSH
30819: CALL_OW 325
30823: NOT
30824: AND
30825: IFFALSE 30854
// missile := Insert ( missile , missile + 1 , 3 ) ;
30827: LD_ADDR_VAR 0 14
30831: PUSH
30832: LD_VAR 0 14
30836: PPUSH
30837: LD_VAR 0 14
30841: PUSH
30842: LD_INT 1
30844: PLUS
30845: PPUSH
30846: LD_INT 3
30848: PPUSH
30849: CALL_OW 2
30853: ST_TO_ADDR
// if missile < 2 then
30854: LD_VAR 0 14
30858: PUSH
30859: LD_INT 2
30861: LESS
30862: IFFALSE 30866
// exit ;
30864: GO 31088
// x := GetX ( enemy ) ;
30866: LD_ADDR_VAR 0 4
30870: PUSH
30871: LD_VAR 0 10
30875: PPUSH
30876: CALL_OW 250
30880: ST_TO_ADDR
// y := GetY ( enemy ) ;
30881: LD_ADDR_VAR 0 5
30885: PUSH
30886: LD_VAR 0 10
30890: PPUSH
30891: CALL_OW 251
30895: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30896: LD_ADDR_VAR 0 6
30900: PUSH
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PPUSH
30910: LD_INT 1
30912: PPUSH
30913: CALL_OW 12
30917: PLUS
30918: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30919: LD_ADDR_VAR 0 7
30923: PUSH
30924: LD_VAR 0 5
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PPUSH
30933: LD_INT 1
30935: PPUSH
30936: CALL_OW 12
30940: PLUS
30941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30942: LD_VAR 0 6
30946: PPUSH
30947: LD_VAR 0 7
30951: PPUSH
30952: CALL_OW 488
30956: NOT
30957: IFFALSE 30979
// begin _x := x ;
30959: LD_ADDR_VAR 0 6
30963: PUSH
30964: LD_VAR 0 4
30968: ST_TO_ADDR
// _y := y ;
30969: LD_ADDR_VAR 0 7
30973: PUSH
30974: LD_VAR 0 5
30978: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: LD_INT 1
30986: PPUSH
30987: LD_VAR 0 14
30991: PPUSH
30992: CALL_OW 12
30996: ST_TO_ADDR
// case i of 1 :
30997: LD_VAR 0 3
31001: PUSH
31002: LD_INT 1
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31027
31010: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31011: LD_VAR 0 1
31015: PPUSH
31016: LD_VAR 0 10
31020: PPUSH
31021: CALL_OW 115
31025: GO 31088
31027: LD_INT 2
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31057
31035: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31036: LD_VAR 0 1
31040: PPUSH
31041: LD_VAR 0 6
31045: PPUSH
31046: LD_VAR 0 7
31050: PPUSH
31051: CALL_OW 153
31055: GO 31088
31057: LD_INT 3
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31087
31065: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_VAR 0 6
31075: PPUSH
31076: LD_VAR 0 7
31080: PPUSH
31081: CALL_OW 154
31085: GO 31088
31087: POP
// end ;
31088: LD_VAR 0 2
31092: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
// if not unit or not building then
31101: LD_VAR 0 1
31105: NOT
31106: PUSH
31107: LD_VAR 0 2
31111: NOT
31112: OR
31113: IFFALSE 31117
// exit ;
31115: GO 31275
// x := GetX ( building ) ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: LD_VAR 0 2
31126: PPUSH
31127: CALL_OW 250
31131: ST_TO_ADDR
// y := GetY ( building ) ;
31132: LD_ADDR_VAR 0 6
31136: PUSH
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 251
31146: ST_TO_ADDR
// for i = 0 to 5 do
31147: LD_ADDR_VAR 0 4
31151: PUSH
31152: DOUBLE
31153: LD_INT 0
31155: DEC
31156: ST_TO_ADDR
31157: LD_INT 5
31159: PUSH
31160: FOR_TO
31161: IFFALSE 31273
// begin _x := ShiftX ( x , i , 3 ) ;
31163: LD_ADDR_VAR 0 7
31167: PUSH
31168: LD_VAR 0 5
31172: PPUSH
31173: LD_VAR 0 4
31177: PPUSH
31178: LD_INT 3
31180: PPUSH
31181: CALL_OW 272
31185: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31186: LD_ADDR_VAR 0 8
31190: PUSH
31191: LD_VAR 0 6
31195: PPUSH
31196: LD_VAR 0 4
31200: PPUSH
31201: LD_INT 3
31203: PPUSH
31204: CALL_OW 273
31208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31209: LD_VAR 0 7
31213: PPUSH
31214: LD_VAR 0 8
31218: PPUSH
31219: CALL_OW 488
31223: NOT
31224: IFFALSE 31228
// continue ;
31226: GO 31160
// if HexInfo ( _x , _y ) = 0 then
31228: LD_VAR 0 7
31232: PPUSH
31233: LD_VAR 0 8
31237: PPUSH
31238: CALL_OW 428
31242: PUSH
31243: LD_INT 0
31245: EQUAL
31246: IFFALSE 31271
// begin ComMoveXY ( unit , _x , _y ) ;
31248: LD_VAR 0 1
31252: PPUSH
31253: LD_VAR 0 7
31257: PPUSH
31258: LD_VAR 0 8
31262: PPUSH
31263: CALL_OW 111
// exit ;
31267: POP
31268: POP
31269: GO 31275
// end ; end ;
31271: GO 31160
31273: POP
31274: POP
// end ;
31275: LD_VAR 0 3
31279: RET
// export function ScanBase ( side , base_area ) ; begin
31280: LD_INT 0
31282: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_VAR 0 2
31292: PPUSH
31293: LD_INT 81
31295: PUSH
31296: LD_VAR 0 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PPUSH
31305: CALL_OW 70
31309: ST_TO_ADDR
// end ;
31310: LD_VAR 0 3
31314: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31315: LD_INT 0
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
// result := false ;
31321: LD_ADDR_VAR 0 2
31325: PUSH
31326: LD_INT 0
31328: ST_TO_ADDR
// side := GetSide ( unit ) ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 255
31343: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31344: LD_ADDR_VAR 0 4
31348: PUSH
31349: LD_VAR 0 1
31353: PPUSH
31354: CALL_OW 248
31358: ST_TO_ADDR
// case nat of 1 :
31359: LD_VAR 0 4
31363: PUSH
31364: LD_INT 1
31366: DOUBLE
31367: EQUAL
31368: IFTRUE 31372
31370: GO 31383
31372: POP
// tech := tech_lassight ; 2 :
31373: LD_ADDR_VAR 0 5
31377: PUSH
31378: LD_INT 12
31380: ST_TO_ADDR
31381: GO 31422
31383: LD_INT 2
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31402
31391: POP
// tech := tech_mortar ; 3 :
31392: LD_ADDR_VAR 0 5
31396: PUSH
31397: LD_INT 41
31399: ST_TO_ADDR
31400: GO 31422
31402: LD_INT 3
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31421
31410: POP
// tech := tech_bazooka ; end ;
31411: LD_ADDR_VAR 0 5
31415: PUSH
31416: LD_INT 44
31418: ST_TO_ADDR
31419: GO 31422
31421: POP
// if Researched ( side , tech ) then
31422: LD_VAR 0 3
31426: PPUSH
31427: LD_VAR 0 5
31431: PPUSH
31432: CALL_OW 325
31436: IFFALSE 31463
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: LD_INT 8
31448: PUSH
31449: LD_INT 9
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: PUSH
31457: LD_VAR 0 4
31461: ARRAY
31462: ST_TO_ADDR
// end ;
31463: LD_VAR 0 2
31467: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
// if not mines then
31473: LD_VAR 0 2
31477: NOT
31478: IFFALSE 31482
// exit ;
31480: GO 31626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31482: LD_ADDR_VAR 0 5
31486: PUSH
31487: LD_INT 81
31489: PUSH
31490: LD_VAR 0 1
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: LD_INT 21
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PPUSH
31520: CALL_OW 69
31524: ST_TO_ADDR
// for i in mines do
31525: LD_ADDR_VAR 0 4
31529: PUSH
31530: LD_VAR 0 2
31534: PUSH
31535: FOR_IN
31536: IFFALSE 31624
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31538: LD_VAR 0 4
31542: PUSH
31543: LD_INT 1
31545: ARRAY
31546: PPUSH
31547: LD_VAR 0 4
31551: PUSH
31552: LD_INT 2
31554: ARRAY
31555: PPUSH
31556: CALL_OW 458
31560: NOT
31561: IFFALSE 31565
// continue ;
31563: GO 31535
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31565: LD_VAR 0 4
31569: PUSH
31570: LD_INT 1
31572: ARRAY
31573: PPUSH
31574: LD_VAR 0 4
31578: PUSH
31579: LD_INT 2
31581: ARRAY
31582: PPUSH
31583: CALL_OW 428
31587: PUSH
31588: LD_VAR 0 5
31592: IN
31593: IFFALSE 31622
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31595: LD_VAR 0 4
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: PPUSH
31604: LD_VAR 0 4
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 456
// end ;
31622: GO 31535
31624: POP
31625: POP
// end ;
31626: LD_VAR 0 3
31630: RET
// export function Count ( array ) ; var i ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
// result := 0 ;
31635: LD_ADDR_VAR 0 2
31639: PUSH
31640: LD_INT 0
31642: ST_TO_ADDR
// for i in array do
31643: LD_ADDR_VAR 0 3
31647: PUSH
31648: LD_VAR 0 1
31652: PUSH
31653: FOR_IN
31654: IFFALSE 31678
// if i then
31656: LD_VAR 0 3
31660: IFFALSE 31676
// result := result + 1 ;
31662: LD_ADDR_VAR 0 2
31666: PUSH
31667: LD_VAR 0 2
31671: PUSH
31672: LD_INT 1
31674: PLUS
31675: ST_TO_ADDR
31676: GO 31653
31678: POP
31679: POP
// end ;
31680: LD_VAR 0 2
31684: RET
// export function IsEmpty ( building ) ; begin
31685: LD_INT 0
31687: PPUSH
// if not building then
31688: LD_VAR 0 1
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 31740
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31697: LD_ADDR_VAR 0 2
31701: PUSH
31702: LD_VAR 0 1
31706: PUSH
31707: LD_INT 22
31709: PUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: CALL_OW 255
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 58
31726: PUSH
31727: EMPTY
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PPUSH
31734: CALL_OW 69
31738: IN
31739: ST_TO_ADDR
// end ;
31740: LD_VAR 0 2
31744: RET
// export function IsNotFull ( building ) ; begin
31745: LD_INT 0
31747: PPUSH
// if not building then
31748: LD_VAR 0 1
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 31776
// result := UnitsInside ( building ) < 6 ;
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 313
31771: PUSH
31772: LD_INT 6
31774: LESS
31775: ST_TO_ADDR
// end ;
31776: LD_VAR 0 2
31780: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
// tmp := [ ] ;
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: EMPTY
31793: ST_TO_ADDR
// list := [ ] ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: EMPTY
31800: ST_TO_ADDR
// for i = 16 to 25 do
31801: LD_ADDR_VAR 0 4
31805: PUSH
31806: DOUBLE
31807: LD_INT 16
31809: DEC
31810: ST_TO_ADDR
31811: LD_INT 25
31813: PUSH
31814: FOR_TO
31815: IFFALSE 31888
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_VAR 0 3
31826: PUSH
31827: LD_INT 22
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 255
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 91
31846: PUSH
31847: LD_VAR 0 1
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 30
31862: PUSH
31863: LD_VAR 0 4
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: ADD
31885: ST_TO_ADDR
31886: GO 31814
31888: POP
31889: POP
// for i = 1 to tmp do
31890: LD_ADDR_VAR 0 4
31894: PUSH
31895: DOUBLE
31896: LD_INT 1
31898: DEC
31899: ST_TO_ADDR
31900: LD_VAR 0 3
31904: PUSH
31905: FOR_TO
31906: IFFALSE 31994
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_VAR 0 5
31917: PUSH
31918: LD_VAR 0 3
31922: PUSH
31923: LD_VAR 0 4
31927: ARRAY
31928: PPUSH
31929: CALL_OW 266
31933: PUSH
31934: LD_VAR 0 3
31938: PUSH
31939: LD_VAR 0 4
31943: ARRAY
31944: PPUSH
31945: CALL_OW 250
31949: PUSH
31950: LD_VAR 0 3
31954: PUSH
31955: LD_VAR 0 4
31959: ARRAY
31960: PPUSH
31961: CALL_OW 251
31965: PUSH
31966: LD_VAR 0 3
31970: PUSH
31971: LD_VAR 0 4
31975: ARRAY
31976: PPUSH
31977: CALL_OW 254
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: ADD
31991: ST_TO_ADDR
31992: GO 31905
31994: POP
31995: POP
// result := list ;
31996: LD_ADDR_VAR 0 2
32000: PUSH
32001: LD_VAR 0 5
32005: ST_TO_ADDR
// end ;
32006: LD_VAR 0 2
32010: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32011: LD_INT 0
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
32019: PPUSH
// if not factory then
32020: LD_VAR 0 1
32024: NOT
32025: IFFALSE 32029
// exit ;
32027: GO 32622
// if control = control_apeman then
32029: LD_VAR 0 4
32033: PUSH
32034: LD_INT 5
32036: EQUAL
32037: IFFALSE 32146
// begin tmp := UnitsInside ( factory ) ;
32039: LD_ADDR_VAR 0 8
32043: PUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 313
32053: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32054: LD_VAR 0 8
32058: PPUSH
32059: LD_INT 25
32061: PUSH
32062: LD_INT 12
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PPUSH
32069: CALL_OW 72
32073: NOT
32074: IFFALSE 32084
// control := control_manual ;
32076: LD_ADDR_VAR 0 4
32080: PUSH
32081: LD_INT 1
32083: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32084: LD_ADDR_VAR 0 8
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: CALL 31781 0 1
32098: ST_TO_ADDR
// if tmp then
32099: LD_VAR 0 8
32103: IFFALSE 32146
// begin for i in tmp do
32105: LD_ADDR_VAR 0 7
32109: PUSH
32110: LD_VAR 0 8
32114: PUSH
32115: FOR_IN
32116: IFFALSE 32144
// if i [ 1 ] = b_ext_radio then
32118: LD_VAR 0 7
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PUSH
32127: LD_INT 22
32129: EQUAL
32130: IFFALSE 32142
// begin control := control_remote ;
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: LD_INT 2
32139: ST_TO_ADDR
// break ;
32140: GO 32144
// end ;
32142: GO 32115
32144: POP
32145: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_VAR 0 4
32165: PPUSH
32166: LD_VAR 0 5
32170: PPUSH
32171: CALL_OW 448
32175: IFFALSE 32210
// begin result := [ chassis , engine , control , weapon ] ;
32177: LD_ADDR_VAR 0 6
32181: PUSH
32182: LD_VAR 0 2
32186: PUSH
32187: LD_VAR 0 3
32191: PUSH
32192: LD_VAR 0 4
32196: PUSH
32197: LD_VAR 0 5
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// exit ;
32208: GO 32622
// end ; _chassis := AvailableChassisList ( factory ) ;
32210: LD_ADDR_VAR 0 9
32214: PUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: CALL_OW 475
32224: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32225: LD_ADDR_VAR 0 11
32229: PUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL_OW 476
32239: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32240: LD_ADDR_VAR 0 12
32244: PUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL_OW 477
32254: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32255: LD_ADDR_VAR 0 10
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 478
32269: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32270: LD_VAR 0 9
32274: NOT
32275: PUSH
32276: LD_VAR 0 11
32280: NOT
32281: OR
32282: PUSH
32283: LD_VAR 0 12
32287: NOT
32288: OR
32289: PUSH
32290: LD_VAR 0 10
32294: NOT
32295: OR
32296: IFFALSE 32331
// begin result := [ chassis , engine , control , weapon ] ;
32298: LD_ADDR_VAR 0 6
32302: PUSH
32303: LD_VAR 0 2
32307: PUSH
32308: LD_VAR 0 3
32312: PUSH
32313: LD_VAR 0 4
32317: PUSH
32318: LD_VAR 0 5
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: ST_TO_ADDR
// exit ;
32329: GO 32622
// end ; if not chassis in _chassis then
32331: LD_VAR 0 2
32335: PUSH
32336: LD_VAR 0 9
32340: IN
32341: NOT
32342: IFFALSE 32368
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: LD_VAR 0 9
32353: PUSH
32354: LD_INT 1
32356: PPUSH
32357: LD_VAR 0 9
32361: PPUSH
32362: CALL_OW 12
32366: ARRAY
32367: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32368: LD_VAR 0 2
32372: PPUSH
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 32627 0 2
32382: NOT
32383: IFFALSE 32442
// repeat engine := _engine [ 1 ] ;
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_VAR 0 11
32394: PUSH
32395: LD_INT 1
32397: ARRAY
32398: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32399: LD_ADDR_VAR 0 11
32403: PUSH
32404: LD_VAR 0 11
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: CALL_OW 3
32416: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32417: LD_VAR 0 2
32421: PPUSH
32422: LD_VAR 0 3
32426: PPUSH
32427: CALL 32627 0 2
32431: PUSH
32432: LD_VAR 0 11
32436: PUSH
32437: EMPTY
32438: EQUAL
32439: OR
32440: IFFALSE 32385
// if not control in _control then
32442: LD_VAR 0 4
32446: PUSH
32447: LD_VAR 0 12
32451: IN
32452: NOT
32453: IFFALSE 32479
// control := _control [ rand ( 1 , _control ) ] ;
32455: LD_ADDR_VAR 0 4
32459: PUSH
32460: LD_VAR 0 12
32464: PUSH
32465: LD_INT 1
32467: PPUSH
32468: LD_VAR 0 12
32472: PPUSH
32473: CALL_OW 12
32477: ARRAY
32478: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32479: LD_VAR 0 2
32483: PPUSH
32484: LD_VAR 0 5
32488: PPUSH
32489: CALL 32847 0 2
32493: NOT
32494: IFFALSE 32553
// repeat weapon := _weapon [ 1 ] ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_VAR 0 10
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32510: LD_ADDR_VAR 0 10
32514: PUSH
32515: LD_VAR 0 10
32519: PPUSH
32520: LD_INT 1
32522: PPUSH
32523: CALL_OW 3
32527: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32528: LD_VAR 0 2
32532: PPUSH
32533: LD_VAR 0 5
32537: PPUSH
32538: CALL 32847 0 2
32542: PUSH
32543: LD_VAR 0 10
32547: PUSH
32548: EMPTY
32549: EQUAL
32550: OR
32551: IFFALSE 32496
// result := [ ] ;
32553: LD_ADDR_VAR 0 6
32557: PUSH
32558: EMPTY
32559: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32560: LD_VAR 0 1
32564: PPUSH
32565: LD_VAR 0 2
32569: PPUSH
32570: LD_VAR 0 3
32574: PPUSH
32575: LD_VAR 0 4
32579: PPUSH
32580: LD_VAR 0 5
32584: PPUSH
32585: CALL_OW 448
32589: IFFALSE 32622
// result := [ chassis , engine , control , weapon ] ;
32591: LD_ADDR_VAR 0 6
32595: PUSH
32596: LD_VAR 0 2
32600: PUSH
32601: LD_VAR 0 3
32605: PUSH
32606: LD_VAR 0 4
32610: PUSH
32611: LD_VAR 0 5
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// end ;
32622: LD_VAR 0 6
32626: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32627: LD_INT 0
32629: PPUSH
// if not chassis or not engine then
32630: LD_VAR 0 1
32634: NOT
32635: PUSH
32636: LD_VAR 0 2
32640: NOT
32641: OR
32642: IFFALSE 32646
// exit ;
32644: GO 32842
// case engine of engine_solar :
32646: LD_VAR 0 2
32650: PUSH
32651: LD_INT 2
32653: DOUBLE
32654: EQUAL
32655: IFTRUE 32659
32657: GO 32697
32659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_INT 11
32667: PUSH
32668: LD_INT 12
32670: PUSH
32671: LD_INT 13
32673: PUSH
32674: LD_INT 14
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: ST_TO_ADDR
32695: GO 32826
32697: LD_INT 1
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32767
32705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_INT 11
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 13
32719: PUSH
32720: LD_INT 14
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 4
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: LD_INT 21
32740: PUSH
32741: LD_INT 23
32743: PUSH
32744: LD_INT 22
32746: PUSH
32747: LD_INT 24
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
32765: GO 32826
32767: LD_INT 3
32769: DOUBLE
32770: EQUAL
32771: IFTRUE 32775
32773: GO 32825
32775: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_INT 13
32783: PUSH
32784: LD_INT 14
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: LD_INT 21
32801: PUSH
32802: LD_INT 22
32804: PUSH
32805: LD_INT 23
32807: PUSH
32808: LD_INT 24
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
32823: GO 32826
32825: POP
// result := ( chassis in result ) ;
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_VAR 0 1
32835: PUSH
32836: LD_VAR 0 3
32840: IN
32841: ST_TO_ADDR
// end ;
32842: LD_VAR 0 3
32846: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32847: LD_INT 0
32849: PPUSH
// if not chassis or not weapon then
32850: LD_VAR 0 1
32854: NOT
32855: PUSH
32856: LD_VAR 0 2
32860: NOT
32861: OR
32862: IFFALSE 32866
// exit ;
32864: GO 33892
// case weapon of us_machine_gun :
32866: LD_VAR 0 2
32870: PUSH
32871: LD_INT 2
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32909
32879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 4
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
32907: GO 33876
32909: LD_INT 3
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32947
32917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 5
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
32945: GO 33876
32947: LD_INT 11
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32985
32955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 5
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: ST_TO_ADDR
32983: GO 33876
32985: LD_INT 4
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33019
32993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32994: LD_ADDR_VAR 0 3
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 4
33007: PUSH
33008: LD_INT 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
33017: GO 33876
33019: LD_INT 5
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33053
33027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33028: LD_ADDR_VAR 0 3
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: LD_INT 5
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
33051: GO 33876
33053: LD_INT 9
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33061
33059: GO 33087
33061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33062: LD_ADDR_VAR 0 3
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 4
33075: PUSH
33076: LD_INT 5
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
33085: GO 33876
33087: LD_INT 7
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33121
33095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: LD_INT 4
33109: PUSH
33110: LD_INT 5
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: ST_TO_ADDR
33119: GO 33876
33121: LD_INT 12
33123: DOUBLE
33124: EQUAL
33125: IFTRUE 33129
33127: GO 33155
33129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 3
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
33153: GO 33876
33155: LD_INT 13
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33189
33163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: ST_TO_ADDR
33187: GO 33876
33189: LD_INT 14
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33215
33197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 4
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33876
33215: LD_INT 6
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33876
33241: LD_INT 10
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 4
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33876
33267: LD_INT 22
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33301
33275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 11
33283: PUSH
33284: LD_INT 12
33286: PUSH
33287: LD_INT 13
33289: PUSH
33290: LD_INT 14
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
33299: GO 33876
33301: LD_INT 23
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33335
33309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 11
33317: PUSH
33318: LD_INT 12
33320: PUSH
33321: LD_INT 13
33323: PUSH
33324: LD_INT 14
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
33333: GO 33876
33335: LD_INT 24
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33369
33343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33344: LD_ADDR_VAR 0 3
33348: PUSH
33349: LD_INT 11
33351: PUSH
33352: LD_INT 12
33354: PUSH
33355: LD_INT 13
33357: PUSH
33358: LD_INT 14
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
33367: GO 33876
33369: LD_INT 30
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33403
33377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 11
33385: PUSH
33386: LD_INT 12
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33876
33403: LD_INT 25
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33429
33411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 13
33419: PUSH
33420: LD_INT 14
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 33876
33429: LD_INT 27
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33455
33437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33876
33455: LD_INT 28
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33481
33463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 13
33471: PUSH
33472: LD_INT 14
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 33876
33481: LD_INT 29
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33507
33489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 13
33497: PUSH
33498: LD_INT 14
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: ST_TO_ADDR
33505: GO 33876
33507: LD_INT 31
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33533
33515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_INT 13
33523: PUSH
33524: LD_INT 14
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: ST_TO_ADDR
33531: GO 33876
33533: LD_INT 26
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33559
33541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 13
33549: PUSH
33550: LD_INT 14
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 33876
33559: LD_INT 42
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33593
33567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 21
33575: PUSH
33576: LD_INT 22
33578: PUSH
33579: LD_INT 23
33581: PUSH
33582: LD_INT 24
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: ST_TO_ADDR
33591: GO 33876
33593: LD_INT 43
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33627
33601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33602: LD_ADDR_VAR 0 3
33606: PUSH
33607: LD_INT 21
33609: PUSH
33610: LD_INT 22
33612: PUSH
33613: LD_INT 23
33615: PUSH
33616: LD_INT 24
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: ST_TO_ADDR
33625: GO 33876
33627: LD_INT 44
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33661
33635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33636: LD_ADDR_VAR 0 3
33640: PUSH
33641: LD_INT 21
33643: PUSH
33644: LD_INT 22
33646: PUSH
33647: LD_INT 23
33649: PUSH
33650: LD_INT 24
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
33659: GO 33876
33661: LD_INT 45
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33695
33669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_INT 21
33677: PUSH
33678: LD_INT 22
33680: PUSH
33681: LD_INT 23
33683: PUSH
33684: LD_INT 24
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
33693: GO 33876
33695: LD_INT 49
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33729
33703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 21
33711: PUSH
33712: LD_INT 22
33714: PUSH
33715: LD_INT 23
33717: PUSH
33718: LD_INT 24
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
33727: GO 33876
33729: LD_INT 51
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33737
33735: GO 33763
33737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_INT 21
33745: PUSH
33746: LD_INT 22
33748: PUSH
33749: LD_INT 23
33751: PUSH
33752: LD_INT 24
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 33876
33763: LD_INT 52
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33797
33771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_INT 21
33779: PUSH
33780: LD_INT 22
33782: PUSH
33783: LD_INT 23
33785: PUSH
33786: LD_INT 24
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
33795: GO 33876
33797: LD_INT 53
33799: DOUBLE
33800: EQUAL
33801: IFTRUE 33805
33803: GO 33823
33805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_INT 23
33813: PUSH
33814: LD_INT 24
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 33876
33823: LD_INT 46
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33849
33831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 23
33839: PUSH
33840: LD_INT 24
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: ST_TO_ADDR
33847: GO 33876
33849: LD_INT 47
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33875
33857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 23
33865: PUSH
33866: LD_INT 24
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: ST_TO_ADDR
33873: GO 33876
33875: POP
// result := ( chassis in result ) ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_VAR 0 1
33885: PUSH
33886: LD_VAR 0 3
33890: IN
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 3
33896: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
// result := array ;
33906: LD_ADDR_VAR 0 5
33910: PUSH
33911: LD_VAR 0 1
33915: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33916: LD_VAR 0 1
33920: NOT
33921: PUSH
33922: LD_VAR 0 2
33926: NOT
33927: OR
33928: PUSH
33929: LD_VAR 0 3
33933: NOT
33934: OR
33935: PUSH
33936: LD_VAR 0 2
33940: PUSH
33941: LD_VAR 0 1
33945: GREATER
33946: OR
33947: PUSH
33948: LD_VAR 0 3
33952: PUSH
33953: LD_VAR 0 1
33957: GREATER
33958: OR
33959: IFFALSE 33963
// exit ;
33961: GO 34259
// if direction then
33963: LD_VAR 0 4
33967: IFFALSE 34031
// begin d := 1 ;
33969: LD_ADDR_VAR 0 9
33973: PUSH
33974: LD_INT 1
33976: ST_TO_ADDR
// if i_from > i_to then
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: GREATER
33987: IFFALSE 34013
// length := ( array - i_from ) + i_to else
33989: LD_ADDR_VAR 0 11
33993: PUSH
33994: LD_VAR 0 1
33998: PUSH
33999: LD_VAR 0 2
34003: MINUS
34004: PUSH
34005: LD_VAR 0 3
34009: PLUS
34010: ST_TO_ADDR
34011: GO 34029
// length := i_to - i_from ;
34013: LD_ADDR_VAR 0 11
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_VAR 0 2
34027: MINUS
34028: ST_TO_ADDR
// end else
34029: GO 34092
// begin d := - 1 ;
34031: LD_ADDR_VAR 0 9
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: ST_TO_ADDR
// if i_from > i_to then
34040: LD_VAR 0 2
34044: PUSH
34045: LD_VAR 0 3
34049: GREATER
34050: IFFALSE 34070
// length := i_from - i_to else
34052: LD_ADDR_VAR 0 11
34056: PUSH
34057: LD_VAR 0 2
34061: PUSH
34062: LD_VAR 0 3
34066: MINUS
34067: ST_TO_ADDR
34068: GO 34092
// length := ( array - i_to ) + i_from ;
34070: LD_ADDR_VAR 0 11
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_VAR 0 3
34084: MINUS
34085: PUSH
34086: LD_VAR 0 2
34090: PLUS
34091: ST_TO_ADDR
// end ; if not length then
34092: LD_VAR 0 11
34096: NOT
34097: IFFALSE 34101
// exit ;
34099: GO 34259
// tmp := array ;
34101: LD_ADDR_VAR 0 10
34105: PUSH
34106: LD_VAR 0 1
34110: ST_TO_ADDR
// for i = 1 to length do
34111: LD_ADDR_VAR 0 6
34115: PUSH
34116: DOUBLE
34117: LD_INT 1
34119: DEC
34120: ST_TO_ADDR
34121: LD_VAR 0 11
34125: PUSH
34126: FOR_TO
34127: IFFALSE 34247
// begin for j = 1 to array do
34129: LD_ADDR_VAR 0 7
34133: PUSH
34134: DOUBLE
34135: LD_INT 1
34137: DEC
34138: ST_TO_ADDR
34139: LD_VAR 0 1
34143: PUSH
34144: FOR_TO
34145: IFFALSE 34233
// begin k := j + d ;
34147: LD_ADDR_VAR 0 8
34151: PUSH
34152: LD_VAR 0 7
34156: PUSH
34157: LD_VAR 0 9
34161: PLUS
34162: ST_TO_ADDR
// if k > array then
34163: LD_VAR 0 8
34167: PUSH
34168: LD_VAR 0 1
34172: GREATER
34173: IFFALSE 34183
// k := 1 ;
34175: LD_ADDR_VAR 0 8
34179: PUSH
34180: LD_INT 1
34182: ST_TO_ADDR
// if not k then
34183: LD_VAR 0 8
34187: NOT
34188: IFFALSE 34200
// k := array ;
34190: LD_ADDR_VAR 0 8
34194: PUSH
34195: LD_VAR 0 1
34199: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34200: LD_ADDR_VAR 0 10
34204: PUSH
34205: LD_VAR 0 10
34209: PPUSH
34210: LD_VAR 0 8
34214: PPUSH
34215: LD_VAR 0 1
34219: PUSH
34220: LD_VAR 0 7
34224: ARRAY
34225: PPUSH
34226: CALL_OW 1
34230: ST_TO_ADDR
// end ;
34231: GO 34144
34233: POP
34234: POP
// array := tmp ;
34235: LD_ADDR_VAR 0 1
34239: PUSH
34240: LD_VAR 0 10
34244: ST_TO_ADDR
// end ;
34245: GO 34126
34247: POP
34248: POP
// result := array ;
34249: LD_ADDR_VAR 0 5
34253: PUSH
34254: LD_VAR 0 1
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 5
34263: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// result := 0 ;
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 0
34275: ST_TO_ADDR
// if not array or not value in array then
34276: LD_VAR 0 1
34280: NOT
34281: PUSH
34282: LD_VAR 0 2
34286: PUSH
34287: LD_VAR 0 1
34291: IN
34292: NOT
34293: OR
34294: IFFALSE 34298
// exit ;
34296: GO 34352
// for i = 1 to array do
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: DOUBLE
34304: LD_INT 1
34306: DEC
34307: ST_TO_ADDR
34308: LD_VAR 0 1
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34350
// if value = array [ i ] then
34316: LD_VAR 0 2
34320: PUSH
34321: LD_VAR 0 1
34325: PUSH
34326: LD_VAR 0 4
34330: ARRAY
34331: EQUAL
34332: IFFALSE 34348
// begin result := i ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_VAR 0 4
34343: ST_TO_ADDR
// exit ;
34344: POP
34345: POP
34346: GO 34352
// end ;
34348: GO 34313
34350: POP
34351: POP
// end ;
34352: LD_VAR 0 3
34356: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34357: LD_INT 0
34359: PPUSH
// vc_chassis := chassis ;
34360: LD_ADDR_OWVAR 37
34364: PUSH
34365: LD_VAR 0 1
34369: ST_TO_ADDR
// vc_engine := engine ;
34370: LD_ADDR_OWVAR 39
34374: PUSH
34375: LD_VAR 0 2
34379: ST_TO_ADDR
// vc_control := control ;
34380: LD_ADDR_OWVAR 38
34384: PUSH
34385: LD_VAR 0 3
34389: ST_TO_ADDR
// vc_weapon := weapon ;
34390: LD_ADDR_OWVAR 40
34394: PUSH
34395: LD_VAR 0 4
34399: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34400: LD_ADDR_OWVAR 41
34404: PUSH
34405: LD_VAR 0 5
34409: ST_TO_ADDR
// end ;
34410: LD_VAR 0 6
34414: RET
// export function WantPlant ( unit ) ; var task ; begin
34415: LD_INT 0
34417: PPUSH
34418: PPUSH
// result := false ;
34419: LD_ADDR_VAR 0 2
34423: PUSH
34424: LD_INT 0
34426: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: CALL_OW 437
34441: ST_TO_ADDR
// if task then
34442: LD_VAR 0 3
34446: IFFALSE 34474
// if task [ 1 ] [ 1 ] = p then
34448: LD_VAR 0 3
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: PUSH
34461: LD_STRING p
34463: EQUAL
34464: IFFALSE 34474
// result := true ;
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_INT 1
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 2
34478: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
// if pos < 1 then
34485: LD_VAR 0 2
34489: PUSH
34490: LD_INT 1
34492: LESS
34493: IFFALSE 34497
// exit ;
34495: GO 34800
// if pos = 1 then
34497: LD_VAR 0 2
34501: PUSH
34502: LD_INT 1
34504: EQUAL
34505: IFFALSE 34538
// result := Replace ( arr , pos [ 1 ] , value ) else
34507: LD_ADDR_VAR 0 4
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: LD_VAR 0 2
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PPUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
34536: GO 34800
// begin tmp := arr ;
34538: LD_ADDR_VAR 0 6
34542: PUSH
34543: LD_VAR 0 1
34547: ST_TO_ADDR
// s_arr := [ tmp ] ;
34548: LD_ADDR_VAR 0 7
34552: PUSH
34553: LD_VAR 0 6
34557: PUSH
34558: EMPTY
34559: LIST
34560: ST_TO_ADDR
// for i = 1 to pos - 1 do
34561: LD_ADDR_VAR 0 5
34565: PUSH
34566: DOUBLE
34567: LD_INT 1
34569: DEC
34570: ST_TO_ADDR
34571: LD_VAR 0 2
34575: PUSH
34576: LD_INT 1
34578: MINUS
34579: PUSH
34580: FOR_TO
34581: IFFALSE 34626
// begin tmp := tmp [ pos [ i ] ] ;
34583: LD_ADDR_VAR 0 6
34587: PUSH
34588: LD_VAR 0 6
34592: PUSH
34593: LD_VAR 0 2
34597: PUSH
34598: LD_VAR 0 5
34602: ARRAY
34603: ARRAY
34604: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34605: LD_ADDR_VAR 0 7
34609: PUSH
34610: LD_VAR 0 7
34614: PUSH
34615: LD_VAR 0 6
34619: PUSH
34620: EMPTY
34621: LIST
34622: ADD
34623: ST_TO_ADDR
// end ;
34624: GO 34580
34626: POP
34627: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 6
34637: PPUSH
34638: LD_VAR 0 2
34642: PUSH
34643: LD_VAR 0 2
34647: ARRAY
34648: PPUSH
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34659: LD_ADDR_VAR 0 7
34663: PUSH
34664: LD_VAR 0 7
34668: PPUSH
34669: LD_VAR 0 7
34673: PPUSH
34674: LD_VAR 0 6
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// for i = s_arr downto 2 do
34684: LD_ADDR_VAR 0 5
34688: PUSH
34689: DOUBLE
34690: LD_VAR 0 7
34694: INC
34695: ST_TO_ADDR
34696: LD_INT 2
34698: PUSH
34699: FOR_DOWNTO
34700: IFFALSE 34784
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: LD_VAR 0 7
34711: PUSH
34712: LD_VAR 0 5
34716: PUSH
34717: LD_INT 1
34719: MINUS
34720: ARRAY
34721: PPUSH
34722: LD_VAR 0 2
34726: PUSH
34727: LD_VAR 0 5
34731: PUSH
34732: LD_INT 1
34734: MINUS
34735: ARRAY
34736: PPUSH
34737: LD_VAR 0 7
34741: PUSH
34742: LD_VAR 0 5
34746: ARRAY
34747: PPUSH
34748: CALL_OW 1
34752: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34753: LD_ADDR_VAR 0 7
34757: PUSH
34758: LD_VAR 0 7
34762: PPUSH
34763: LD_VAR 0 5
34767: PUSH
34768: LD_INT 1
34770: MINUS
34771: PPUSH
34772: LD_VAR 0 6
34776: PPUSH
34777: CALL_OW 1
34781: ST_TO_ADDR
// end ;
34782: GO 34699
34784: POP
34785: POP
// result := s_arr [ 1 ] ;
34786: LD_ADDR_VAR 0 4
34790: PUSH
34791: LD_VAR 0 7
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: ST_TO_ADDR
// end ; end ;
34800: LD_VAR 0 4
34804: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
// if not list then
34809: LD_VAR 0 1
34813: NOT
34814: IFFALSE 34818
// exit ;
34816: GO 34909
// i := list [ pos1 ] ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_VAR 0 2
34832: ARRAY
34833: ST_TO_ADDR
// if not i then
34834: LD_VAR 0 5
34838: NOT
34839: IFFALSE 34843
// exit ;
34841: GO 34909
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34843: LD_ADDR_VAR 0 1
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 2
34857: PPUSH
34858: LD_VAR 0 1
34862: PUSH
34863: LD_VAR 0 3
34867: ARRAY
34868: PPUSH
34869: CALL_OW 1
34873: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34874: LD_ADDR_VAR 0 1
34878: PUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_VAR 0 3
34888: PPUSH
34889: LD_VAR 0 5
34893: PPUSH
34894: CALL_OW 1
34898: ST_TO_ADDR
// result := list ;
34899: LD_ADDR_VAR 0 4
34903: PUSH
34904: LD_VAR 0 1
34908: ST_TO_ADDR
// end ;
34909: LD_VAR 0 4
34913: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34914: LD_INT 0
34916: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34917: LD_ADDR_VAR 0 5
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 250
34931: PPUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 251
34941: PPUSH
34942: LD_VAR 0 2
34946: PPUSH
34947: LD_VAR 0 3
34951: PPUSH
34952: LD_VAR 0 4
34956: PPUSH
34957: CALL 34967 0 5
34961: ST_TO_ADDR
// end ;
34962: LD_VAR 0 5
34966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34967: LD_INT 0
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
// if not list then
34973: LD_VAR 0 3
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35370
// result := [ ] ;
34982: LD_ADDR_VAR 0 6
34986: PUSH
34987: EMPTY
34988: ST_TO_ADDR
// for i in list do
34989: LD_ADDR_VAR 0 7
34993: PUSH
34994: LD_VAR 0 3
34998: PUSH
34999: FOR_IN
35000: IFFALSE 35202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_VAR 0 7
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: LD_VAR 0 2
35021: PPUSH
35022: CALL_OW 297
35026: ST_TO_ADDR
// if not result then
35027: LD_VAR 0 6
35031: NOT
35032: IFFALSE 35058
// result := [ [ i , tmp ] ] else
35034: LD_ADDR_VAR 0 6
35038: PUSH
35039: LD_VAR 0 7
35043: PUSH
35044: LD_VAR 0 9
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: ST_TO_ADDR
35056: GO 35200
// begin if result [ result ] [ 2 ] < tmp then
35058: LD_VAR 0 6
35062: PUSH
35063: LD_VAR 0 6
35067: ARRAY
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: PUSH
35073: LD_VAR 0 9
35077: LESS
35078: IFFALSE 35120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35080: LD_ADDR_VAR 0 6
35084: PUSH
35085: LD_VAR 0 6
35089: PPUSH
35090: LD_VAR 0 6
35094: PUSH
35095: LD_INT 1
35097: PLUS
35098: PPUSH
35099: LD_VAR 0 7
35103: PUSH
35104: LD_VAR 0 9
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PPUSH
35113: CALL_OW 2
35117: ST_TO_ADDR
35118: GO 35200
// for j = 1 to result do
35120: LD_ADDR_VAR 0 8
35124: PUSH
35125: DOUBLE
35126: LD_INT 1
35128: DEC
35129: ST_TO_ADDR
35130: LD_VAR 0 6
35134: PUSH
35135: FOR_TO
35136: IFFALSE 35198
// begin if tmp < result [ j ] [ 2 ] then
35138: LD_VAR 0 9
35142: PUSH
35143: LD_VAR 0 6
35147: PUSH
35148: LD_VAR 0 8
35152: ARRAY
35153: PUSH
35154: LD_INT 2
35156: ARRAY
35157: LESS
35158: IFFALSE 35196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35160: LD_ADDR_VAR 0 6
35164: PUSH
35165: LD_VAR 0 6
35169: PPUSH
35170: LD_VAR 0 8
35174: PPUSH
35175: LD_VAR 0 7
35179: PUSH
35180: LD_VAR 0 9
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PPUSH
35189: CALL_OW 2
35193: ST_TO_ADDR
// break ;
35194: GO 35198
// end ; end ;
35196: GO 35135
35198: POP
35199: POP
// end ; end ;
35200: GO 34999
35202: POP
35203: POP
// if result and not asc then
35204: LD_VAR 0 6
35208: PUSH
35209: LD_VAR 0 4
35213: NOT
35214: AND
35215: IFFALSE 35290
// begin tmp := result ;
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_VAR 0 6
35226: ST_TO_ADDR
// for i = tmp downto 1 do
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: DOUBLE
35233: LD_VAR 0 9
35237: INC
35238: ST_TO_ADDR
35239: LD_INT 1
35241: PUSH
35242: FOR_DOWNTO
35243: IFFALSE 35288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 6
35254: PPUSH
35255: LD_VAR 0 9
35259: PUSH
35260: LD_VAR 0 7
35264: MINUS
35265: PUSH
35266: LD_INT 1
35268: PLUS
35269: PPUSH
35270: LD_VAR 0 9
35274: PUSH
35275: LD_VAR 0 7
35279: ARRAY
35280: PPUSH
35281: CALL_OW 1
35285: ST_TO_ADDR
35286: GO 35242
35288: POP
35289: POP
// end ; tmp := [ ] ;
35290: LD_ADDR_VAR 0 9
35294: PUSH
35295: EMPTY
35296: ST_TO_ADDR
// if mode then
35297: LD_VAR 0 5
35301: IFFALSE 35370
// begin for i = 1 to result do
35303: LD_ADDR_VAR 0 7
35307: PUSH
35308: DOUBLE
35309: LD_INT 1
35311: DEC
35312: ST_TO_ADDR
35313: LD_VAR 0 6
35317: PUSH
35318: FOR_TO
35319: IFFALSE 35358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_VAR 0 9
35330: PPUSH
35331: LD_VAR 0 7
35335: PPUSH
35336: LD_VAR 0 6
35340: PUSH
35341: LD_VAR 0 7
35345: ARRAY
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: PPUSH
35351: CALL_OW 1
35355: ST_TO_ADDR
35356: GO 35318
35358: POP
35359: POP
// result := tmp ;
35360: LD_ADDR_VAR 0 6
35364: PUSH
35365: LD_VAR 0 9
35369: ST_TO_ADDR
// end ; end ;
35370: LD_VAR 0 6
35374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// if not x or not y then
35405: LD_VAR 0 2
35409: NOT
35410: PUSH
35411: LD_VAR 0 3
35415: NOT
35416: OR
35417: IFFALSE 35421
// exit ;
35419: GO 37067
// if not range then
35421: LD_VAR 0 4
35425: NOT
35426: IFFALSE 35436
// range := 10 ;
35428: LD_ADDR_VAR 0 4
35432: PUSH
35433: LD_INT 10
35435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35436: LD_ADDR_VAR 0 8
35440: PUSH
35441: LD_INT 81
35443: PUSH
35444: LD_VAR 0 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 92
35455: PUSH
35456: LD_VAR 0 2
35460: PUSH
35461: LD_VAR 0 3
35465: PUSH
35466: LD_VAR 0 4
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: LD_INT 21
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 69
35503: ST_TO_ADDR
// if not tmp then
35504: LD_VAR 0 8
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 37067
// for i in tmp do
35513: LD_ADDR_VAR 0 6
35517: PUSH
35518: LD_VAR 0 8
35522: PUSH
35523: FOR_IN
35524: IFFALSE 37042
// begin points := [ 0 , 0 , 0 ] ;
35526: LD_ADDR_VAR 0 9
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
// bpoints := 1 ;
35545: LD_ADDR_VAR 0 10
35549: PUSH
35550: LD_INT 1
35552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35553: LD_VAR 0 6
35557: PPUSH
35558: CALL_OW 247
35562: PUSH
35563: LD_INT 1
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 36149
35571: POP
// begin if GetClass ( i ) = 1 then
35572: LD_VAR 0 6
35576: PPUSH
35577: CALL_OW 257
35581: PUSH
35582: LD_INT 1
35584: EQUAL
35585: IFFALSE 35606
// points := [ 10 , 5 , 3 ] ;
35587: LD_ADDR_VAR 0 9
35591: PUSH
35592: LD_INT 10
35594: PUSH
35595: LD_INT 5
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35606: LD_VAR 0 6
35610: PPUSH
35611: CALL_OW 257
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: IN
35630: IFFALSE 35651
// points := [ 3 , 2 , 1 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 257
35660: PUSH
35661: LD_INT 5
35663: EQUAL
35664: IFFALSE 35685
// points := [ 130 , 5 , 2 ] ;
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_INT 130
35673: PUSH
35674: LD_INT 5
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 257
35694: PUSH
35695: LD_INT 8
35697: EQUAL
35698: IFFALSE 35719
// points := [ 35 , 35 , 30 ] ;
35700: LD_ADDR_VAR 0 9
35704: PUSH
35705: LD_INT 35
35707: PUSH
35708: LD_INT 35
35710: PUSH
35711: LD_INT 30
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35719: LD_VAR 0 6
35723: PPUSH
35724: CALL_OW 257
35728: PUSH
35729: LD_INT 9
35731: EQUAL
35732: IFFALSE 35753
// points := [ 20 , 55 , 40 ] ;
35734: LD_ADDR_VAR 0 9
35738: PUSH
35739: LD_INT 20
35741: PUSH
35742: LD_INT 55
35744: PUSH
35745: LD_INT 40
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35753: LD_VAR 0 6
35757: PPUSH
35758: CALL_OW 257
35762: PUSH
35763: LD_INT 12
35765: PUSH
35766: LD_INT 16
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: IN
35773: IFFALSE 35794
// points := [ 5 , 3 , 2 ] ;
35775: LD_ADDR_VAR 0 9
35779: PUSH
35780: LD_INT 5
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35794: LD_VAR 0 6
35798: PPUSH
35799: CALL_OW 257
35803: PUSH
35804: LD_INT 17
35806: EQUAL
35807: IFFALSE 35828
// points := [ 100 , 50 , 75 ] ;
35809: LD_ADDR_VAR 0 9
35813: PUSH
35814: LD_INT 100
35816: PUSH
35817: LD_INT 50
35819: PUSH
35820: LD_INT 75
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35828: LD_VAR 0 6
35832: PPUSH
35833: CALL_OW 257
35837: PUSH
35838: LD_INT 15
35840: EQUAL
35841: IFFALSE 35862
// points := [ 10 , 5 , 3 ] ;
35843: LD_ADDR_VAR 0 9
35847: PUSH
35848: LD_INT 10
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35862: LD_VAR 0 6
35866: PPUSH
35867: CALL_OW 257
35871: PUSH
35872: LD_INT 14
35874: EQUAL
35875: IFFALSE 35896
// points := [ 10 , 0 , 0 ] ;
35877: LD_ADDR_VAR 0 9
35881: PUSH
35882: LD_INT 10
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35896: LD_VAR 0 6
35900: PPUSH
35901: CALL_OW 257
35905: PUSH
35906: LD_INT 11
35908: EQUAL
35909: IFFALSE 35930
// points := [ 30 , 10 , 5 ] ;
35911: LD_ADDR_VAR 0 9
35915: PUSH
35916: LD_INT 30
35918: PUSH
35919: LD_INT 10
35921: PUSH
35922: LD_INT 5
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35930: LD_VAR 0 1
35934: PPUSH
35935: LD_INT 5
35937: PPUSH
35938: CALL_OW 321
35942: PUSH
35943: LD_INT 2
35945: EQUAL
35946: IFFALSE 35963
// bpoints := bpoints * 1.8 ;
35948: LD_ADDR_VAR 0 10
35952: PUSH
35953: LD_VAR 0 10
35957: PUSH
35958: LD_REAL  1.80000000000000E+0000
35961: MUL
35962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35963: LD_VAR 0 6
35967: PPUSH
35968: CALL_OW 257
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 4
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: IN
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: LD_INT 51
35999: PPUSH
36000: CALL_OW 321
36004: PUSH
36005: LD_INT 2
36007: EQUAL
36008: AND
36009: IFFALSE 36026
// bpoints := bpoints * 1.2 ;
36011: LD_ADDR_VAR 0 10
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_REAL  1.20000000000000E+0000
36024: MUL
36025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: LD_INT 7
36041: PUSH
36042: LD_INT 9
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: IN
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: LD_INT 52
36058: PPUSH
36059: CALL_OW 321
36063: PUSH
36064: LD_INT 2
36066: EQUAL
36067: AND
36068: IFFALSE 36085
// bpoints := bpoints * 1.5 ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: LD_VAR 0 10
36079: PUSH
36080: LD_REAL  1.50000000000000E+0000
36083: MUL
36084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_INT 66
36092: PPUSH
36093: CALL_OW 321
36097: PUSH
36098: LD_INT 2
36100: EQUAL
36101: IFFALSE 36118
// bpoints := bpoints * 1.1 ;
36103: LD_ADDR_VAR 0 10
36107: PUSH
36108: LD_VAR 0 10
36112: PUSH
36113: LD_REAL  1.10000000000000E+0000
36116: MUL
36117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36118: LD_ADDR_VAR 0 10
36122: PUSH
36123: LD_VAR 0 10
36127: PUSH
36128: LD_VAR 0 6
36132: PPUSH
36133: LD_INT 1
36135: PPUSH
36136: CALL_OW 259
36140: PUSH
36141: LD_REAL  1.15000000000000E+0000
36144: MUL
36145: MUL
36146: ST_TO_ADDR
// end ; unit_vehicle :
36147: GO 36971
36149: LD_INT 2
36151: DOUBLE
36152: EQUAL
36153: IFTRUE 36157
36155: GO 36959
36157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 264
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 42
36173: PUSH
36174: LD_INT 24
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: IN
36182: IFFALSE 36203
// points := [ 25 , 5 , 3 ] ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_INT 25
36191: PUSH
36192: LD_INT 5
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36203: LD_VAR 0 6
36207: PPUSH
36208: CALL_OW 264
36212: PUSH
36213: LD_INT 4
36215: PUSH
36216: LD_INT 43
36218: PUSH
36219: LD_INT 25
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: IN
36227: IFFALSE 36248
// points := [ 40 , 15 , 5 ] ;
36229: LD_ADDR_VAR 0 9
36233: PUSH
36234: LD_INT 40
36236: PUSH
36237: LD_INT 15
36239: PUSH
36240: LD_INT 5
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36248: LD_VAR 0 6
36252: PPUSH
36253: CALL_OW 264
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 23
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: IN
36268: IFFALSE 36289
// points := [ 7 , 25 , 8 ] ;
36270: LD_ADDR_VAR 0 9
36274: PUSH
36275: LD_INT 7
36277: PUSH
36278: LD_INT 25
36280: PUSH
36281: LD_INT 8
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36289: LD_VAR 0 6
36293: PPUSH
36294: CALL_OW 264
36298: PUSH
36299: LD_INT 5
36301: PUSH
36302: LD_INT 27
36304: PUSH
36305: LD_INT 44
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: IN
36313: IFFALSE 36334
// points := [ 14 , 50 , 16 ] ;
36315: LD_ADDR_VAR 0 9
36319: PUSH
36320: LD_INT 14
36322: PUSH
36323: LD_INT 50
36325: PUSH
36326: LD_INT 16
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36334: LD_VAR 0 6
36338: PPUSH
36339: CALL_OW 264
36343: PUSH
36344: LD_INT 6
36346: PUSH
36347: LD_INT 46
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: IN
36354: IFFALSE 36375
// points := [ 32 , 120 , 70 ] ;
36356: LD_ADDR_VAR 0 9
36360: PUSH
36361: LD_INT 32
36363: PUSH
36364: LD_INT 120
36366: PUSH
36367: LD_INT 70
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36375: LD_VAR 0 6
36379: PPUSH
36380: CALL_OW 264
36384: PUSH
36385: LD_INT 7
36387: PUSH
36388: LD_INT 28
36390: PUSH
36391: LD_INT 45
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: IN
36399: IFFALSE 36420
// points := [ 35 , 20 , 45 ] ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_INT 35
36408: PUSH
36409: LD_INT 20
36411: PUSH
36412: LD_INT 45
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36420: LD_VAR 0 6
36424: PPUSH
36425: CALL_OW 264
36429: PUSH
36430: LD_INT 47
36432: PUSH
36433: EMPTY
36434: LIST
36435: IN
36436: IFFALSE 36457
// points := [ 67 , 45 , 75 ] ;
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_INT 67
36445: PUSH
36446: LD_INT 45
36448: PUSH
36449: LD_INT 75
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 264
36466: PUSH
36467: LD_INT 26
36469: PUSH
36470: EMPTY
36471: LIST
36472: IN
36473: IFFALSE 36494
// points := [ 120 , 30 , 80 ] ;
36475: LD_ADDR_VAR 0 9
36479: PUSH
36480: LD_INT 120
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 80
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36494: LD_VAR 0 6
36498: PPUSH
36499: CALL_OW 264
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: EMPTY
36508: LIST
36509: IN
36510: IFFALSE 36531
// points := [ 40 , 1 , 1 ] ;
36512: LD_ADDR_VAR 0 9
36516: PUSH
36517: LD_INT 40
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36531: LD_VAR 0 6
36535: PPUSH
36536: CALL_OW 264
36540: PUSH
36541: LD_INT 29
36543: PUSH
36544: EMPTY
36545: LIST
36546: IN
36547: IFFALSE 36568
// points := [ 70 , 200 , 400 ] ;
36549: LD_ADDR_VAR 0 9
36553: PUSH
36554: LD_INT 70
36556: PUSH
36557: LD_INT 200
36559: PUSH
36560: LD_INT 400
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36568: LD_VAR 0 6
36572: PPUSH
36573: CALL_OW 264
36577: PUSH
36578: LD_INT 14
36580: PUSH
36581: LD_INT 53
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: IN
36588: IFFALSE 36609
// points := [ 40 , 10 , 20 ] ;
36590: LD_ADDR_VAR 0 9
36594: PUSH
36595: LD_INT 40
36597: PUSH
36598: LD_INT 10
36600: PUSH
36601: LD_INT 20
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36609: LD_VAR 0 6
36613: PPUSH
36614: CALL_OW 264
36618: PUSH
36619: LD_INT 9
36621: PUSH
36622: EMPTY
36623: LIST
36624: IN
36625: IFFALSE 36646
// points := [ 5 , 70 , 20 ] ;
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: LD_INT 70
36637: PUSH
36638: LD_INT 20
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36646: LD_VAR 0 6
36650: PPUSH
36651: CALL_OW 264
36655: PUSH
36656: LD_INT 10
36658: PUSH
36659: EMPTY
36660: LIST
36661: IN
36662: IFFALSE 36683
// points := [ 35 , 110 , 70 ] ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_INT 35
36671: PUSH
36672: LD_INT 110
36674: PUSH
36675: LD_INT 70
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL_OW 265
36692: PUSH
36693: LD_INT 25
36695: EQUAL
36696: IFFALSE 36717
// points := [ 80 , 65 , 100 ] ;
36698: LD_ADDR_VAR 0 9
36702: PUSH
36703: LD_INT 80
36705: PUSH
36706: LD_INT 65
36708: PUSH
36709: LD_INT 100
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36717: LD_VAR 0 6
36721: PPUSH
36722: CALL_OW 263
36726: PUSH
36727: LD_INT 1
36729: EQUAL
36730: IFFALSE 36765
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36732: LD_ADDR_VAR 0 10
36736: PUSH
36737: LD_VAR 0 10
36741: PUSH
36742: LD_VAR 0 6
36746: PPUSH
36747: CALL_OW 311
36751: PPUSH
36752: LD_INT 3
36754: PPUSH
36755: CALL_OW 259
36759: PUSH
36760: LD_INT 4
36762: MUL
36763: MUL
36764: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 263
36774: PUSH
36775: LD_INT 2
36777: EQUAL
36778: IFFALSE 36829
// begin j := IsControledBy ( i ) ;
36780: LD_ADDR_VAR 0 7
36784: PUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: CALL_OW 312
36794: ST_TO_ADDR
// if j then
36795: LD_VAR 0 7
36799: IFFALSE 36829
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_VAR 0 7
36815: PPUSH
36816: LD_INT 3
36818: PPUSH
36819: CALL_OW 259
36823: PUSH
36824: LD_INT 3
36826: MUL
36827: MUL
36828: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 264
36838: PUSH
36839: LD_INT 5
36841: PUSH
36842: LD_INT 6
36844: PUSH
36845: LD_INT 46
36847: PUSH
36848: LD_INT 44
36850: PUSH
36851: LD_INT 47
36853: PUSH
36854: LD_INT 45
36856: PUSH
36857: LD_INT 28
36859: PUSH
36860: LD_INT 7
36862: PUSH
36863: LD_INT 27
36865: PUSH
36866: LD_INT 29
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: IN
36881: PUSH
36882: LD_VAR 0 1
36886: PPUSH
36887: LD_INT 52
36889: PPUSH
36890: CALL_OW 321
36894: PUSH
36895: LD_INT 2
36897: EQUAL
36898: AND
36899: IFFALSE 36916
// bpoints := bpoints * 1.2 ;
36901: LD_ADDR_VAR 0 10
36905: PUSH
36906: LD_VAR 0 10
36910: PUSH
36911: LD_REAL  1.20000000000000E+0000
36914: MUL
36915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36916: LD_VAR 0 6
36920: PPUSH
36921: CALL_OW 264
36925: PUSH
36926: LD_INT 6
36928: PUSH
36929: LD_INT 46
36931: PUSH
36932: LD_INT 47
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: IN
36940: IFFALSE 36957
// bpoints := bpoints * 1.2 ;
36942: LD_ADDR_VAR 0 10
36946: PUSH
36947: LD_VAR 0 10
36951: PUSH
36952: LD_REAL  1.20000000000000E+0000
36955: MUL
36956: ST_TO_ADDR
// end ; unit_building :
36957: GO 36971
36959: LD_INT 3
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 36970
36967: POP
// ; end ;
36968: GO 36971
36970: POP
// for j = 1 to 3 do
36971: LD_ADDR_VAR 0 7
36975: PUSH
36976: DOUBLE
36977: LD_INT 1
36979: DEC
36980: ST_TO_ADDR
36981: LD_INT 3
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36987: LD_ADDR_VAR 0 5
36991: PUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: LD_VAR 0 7
37001: PPUSH
37002: LD_VAR 0 5
37006: PUSH
37007: LD_VAR 0 7
37011: ARRAY
37012: PUSH
37013: LD_VAR 0 9
37017: PUSH
37018: LD_VAR 0 7
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 10
37028: MUL
37029: PLUS
37030: PPUSH
37031: CALL_OW 1
37035: ST_TO_ADDR
37036: GO 36984
37038: POP
37039: POP
// end ;
37040: GO 35523
37042: POP
37043: POP
// result := Replace ( result , 4 , tmp ) ;
37044: LD_ADDR_VAR 0 5
37048: PUSH
37049: LD_VAR 0 5
37053: PPUSH
37054: LD_INT 4
37056: PPUSH
37057: LD_VAR 0 8
37061: PPUSH
37062: CALL_OW 1
37066: ST_TO_ADDR
// end ;
37067: LD_VAR 0 5
37071: RET
// export function DangerAtRange ( unit , range ) ; begin
37072: LD_INT 0
37074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 255
37089: PPUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 250
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 251
37109: PPUSH
37110: LD_VAR 0 2
37114: PPUSH
37115: CALL 35375 0 4
37119: ST_TO_ADDR
// end ;
37120: LD_VAR 0 3
37124: RET
// export function DangerInArea ( side , area ) ; begin
37125: LD_INT 0
37127: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_INT 81
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PPUSH
37150: CALL_OW 70
37154: ST_TO_ADDR
// end ;
37155: LD_VAR 0 3
37159: RET
// export function IsExtension ( b ) ; begin
37160: LD_INT 0
37162: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37163: LD_ADDR_VAR 0 2
37167: PUSH
37168: LD_VAR 0 1
37172: PUSH
37173: LD_INT 23
37175: PUSH
37176: LD_INT 20
37178: PUSH
37179: LD_INT 22
37181: PUSH
37182: LD_INT 17
37184: PUSH
37185: LD_INT 24
37187: PUSH
37188: LD_INT 21
37190: PUSH
37191: LD_INT 19
37193: PUSH
37194: LD_INT 16
37196: PUSH
37197: LD_INT 25
37199: PUSH
37200: LD_INT 18
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: IN
37215: ST_TO_ADDR
// end ;
37216: LD_VAR 0 2
37220: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37221: LD_INT 0
37223: PPUSH
37224: PPUSH
37225: PPUSH
// result := [ ] ;
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37233: LD_ADDR_VAR 0 4
37237: PUSH
37238: LD_VAR 0 2
37242: PPUSH
37243: LD_INT 21
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PPUSH
37253: CALL_OW 70
37257: ST_TO_ADDR
// if not tmp then
37258: LD_VAR 0 4
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37325
// for i in tmp do
37267: LD_ADDR_VAR 0 5
37271: PUSH
37272: LD_VAR 0 4
37276: PUSH
37277: FOR_IN
37278: IFFALSE 37313
// if GetBase ( i ) <> base then
37280: LD_VAR 0 5
37284: PPUSH
37285: CALL_OW 274
37289: PUSH
37290: LD_VAR 0 1
37294: NONEQUAL
37295: IFFALSE 37311
// ComLinkToBase ( base , i ) ;
37297: LD_VAR 0 1
37301: PPUSH
37302: LD_VAR 0 5
37306: PPUSH
37307: CALL_OW 169
37311: GO 37277
37313: POP
37314: POP
// result := tmp ;
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_VAR 0 4
37324: ST_TO_ADDR
// end ;
37325: LD_VAR 0 3
37329: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37330: LD_INT 0
37332: PPUSH
37333: PPUSH
// if BuildingStatus ( b ) = bs_build then
37334: LD_VAR 0 2
37338: PPUSH
37339: CALL_OW 461
37343: PUSH
37344: LD_INT 1
37346: EQUAL
37347: IFFALSE 37407
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37349: LD_VAR 0 1
37353: PPUSH
37354: LD_STRING h
37356: PUSH
37357: LD_VAR 0 2
37361: PPUSH
37362: CALL_OW 250
37366: PUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: CALL_OW 251
37376: PUSH
37377: LD_VAR 0 2
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: PPUSH
37403: CALL_OW 446
// end ;
37407: LD_VAR 0 3
37411: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37412: LD_INT 0
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37420: LD_VAR 0 1
37424: NOT
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 263
37435: PUSH
37436: LD_INT 2
37438: EQUAL
37439: NOT
37440: OR
37441: IFFALSE 37445
// exit ;
37443: GO 37761
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37445: LD_ADDR_VAR 0 6
37449: PUSH
37450: LD_INT 22
37452: PUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: LD_INT 30
37472: PUSH
37473: LD_INT 36
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 34
37482: PUSH
37483: LD_INT 31
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PPUSH
37499: CALL_OW 69
37503: ST_TO_ADDR
// if not tmp then
37504: LD_VAR 0 6
37508: NOT
37509: IFFALSE 37513
// exit ;
37511: GO 37761
// result := [ ] ;
37513: LD_ADDR_VAR 0 2
37517: PUSH
37518: EMPTY
37519: ST_TO_ADDR
// for i in tmp do
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_VAR 0 6
37529: PUSH
37530: FOR_IN
37531: IFFALSE 37602
// begin t := UnitsInside ( i ) ;
37533: LD_ADDR_VAR 0 4
37537: PUSH
37538: LD_VAR 0 3
37542: PPUSH
37543: CALL_OW 313
37547: ST_TO_ADDR
// if t then
37548: LD_VAR 0 4
37552: IFFALSE 37600
// for j in t do
37554: LD_ADDR_VAR 0 7
37558: PUSH
37559: LD_VAR 0 4
37563: PUSH
37564: FOR_IN
37565: IFFALSE 37598
// result := Insert ( result , result + 1 , j ) ;
37567: LD_ADDR_VAR 0 2
37571: PUSH
37572: LD_VAR 0 2
37576: PPUSH
37577: LD_VAR 0 2
37581: PUSH
37582: LD_INT 1
37584: PLUS
37585: PPUSH
37586: LD_VAR 0 7
37590: PPUSH
37591: CALL_OW 2
37595: ST_TO_ADDR
37596: GO 37564
37598: POP
37599: POP
// end ;
37600: GO 37530
37602: POP
37603: POP
// if not result then
37604: LD_VAR 0 2
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37761
// mech := result [ 1 ] ;
37613: LD_ADDR_VAR 0 5
37617: PUSH
37618: LD_VAR 0 2
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: ST_TO_ADDR
// if result > 1 then
37627: LD_VAR 0 2
37631: PUSH
37632: LD_INT 1
37634: GREATER
37635: IFFALSE 37747
// for i = 2 to result do
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: DOUBLE
37643: LD_INT 2
37645: DEC
37646: ST_TO_ADDR
37647: LD_VAR 0 2
37651: PUSH
37652: FOR_TO
37653: IFFALSE 37745
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37655: LD_ADDR_VAR 0 4
37659: PUSH
37660: LD_VAR 0 2
37664: PUSH
37665: LD_VAR 0 3
37669: ARRAY
37670: PPUSH
37671: LD_INT 3
37673: PPUSH
37674: CALL_OW 259
37678: PUSH
37679: LD_VAR 0 2
37683: PUSH
37684: LD_VAR 0 3
37688: ARRAY
37689: PPUSH
37690: CALL_OW 432
37694: MINUS
37695: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37696: LD_VAR 0 4
37700: PUSH
37701: LD_VAR 0 5
37705: PPUSH
37706: LD_INT 3
37708: PPUSH
37709: CALL_OW 259
37713: PUSH
37714: LD_VAR 0 5
37718: PPUSH
37719: CALL_OW 432
37723: MINUS
37724: GREATEREQUAL
37725: IFFALSE 37743
// mech := result [ i ] ;
37727: LD_ADDR_VAR 0 5
37731: PUSH
37732: LD_VAR 0 2
37736: PUSH
37737: LD_VAR 0 3
37741: ARRAY
37742: ST_TO_ADDR
// end ;
37743: GO 37652
37745: POP
37746: POP
// ComLinkTo ( vehicle , mech ) ;
37747: LD_VAR 0 1
37751: PPUSH
37752: LD_VAR 0 5
37756: PPUSH
37757: CALL_OW 135
// end ;
37761: LD_VAR 0 2
37765: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
// result := [ ] ;
37781: LD_ADDR_VAR 0 7
37785: PUSH
37786: EMPTY
37787: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 266
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: IN
37808: NOT
37809: IFFALSE 37813
// exit ;
37811: GO 39444
// if name then
37813: LD_VAR 0 3
37817: IFFALSE 37833
// SetBName ( base_dep , name ) ;
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 3
37828: PPUSH
37829: CALL_OW 500
// base := GetBase ( base_dep ) ;
37833: LD_ADDR_VAR 0 15
37837: PUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 274
37847: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37848: LD_ADDR_VAR 0 16
37852: PUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 255
37862: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37863: LD_ADDR_VAR 0 17
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 248
37877: ST_TO_ADDR
// if sources then
37878: LD_VAR 0 5
37882: IFFALSE 37929
// for i = 1 to 3 do
37884: LD_ADDR_VAR 0 8
37888: PUSH
37889: DOUBLE
37890: LD_INT 1
37892: DEC
37893: ST_TO_ADDR
37894: LD_INT 3
37896: PUSH
37897: FOR_TO
37898: IFFALSE 37927
// AddResourceType ( base , i , sources [ i ] ) ;
37900: LD_VAR 0 15
37904: PPUSH
37905: LD_VAR 0 8
37909: PPUSH
37910: LD_VAR 0 5
37914: PUSH
37915: LD_VAR 0 8
37919: ARRAY
37920: PPUSH
37921: CALL_OW 276
37925: GO 37897
37927: POP
37928: POP
// buildings := GetBaseBuildings ( base , area ) ;
37929: LD_ADDR_VAR 0 18
37933: PUSH
37934: LD_VAR 0 15
37938: PPUSH
37939: LD_VAR 0 2
37943: PPUSH
37944: CALL 37221 0 2
37948: ST_TO_ADDR
// InitHc ;
37949: CALL_OW 19
// InitUc ;
37953: CALL_OW 18
// uc_side := side ;
37957: LD_ADDR_OWVAR 20
37961: PUSH
37962: LD_VAR 0 16
37966: ST_TO_ADDR
// uc_nation := nation ;
37967: LD_ADDR_OWVAR 21
37971: PUSH
37972: LD_VAR 0 17
37976: ST_TO_ADDR
// if buildings then
37977: LD_VAR 0 18
37981: IFFALSE 39303
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37983: LD_ADDR_VAR 0 19
37987: PUSH
37988: LD_VAR 0 18
37992: PPUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 30
37998: PUSH
37999: LD_INT 29
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 30
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 72
38025: ST_TO_ADDR
// if tmp then
38026: LD_VAR 0 19
38030: IFFALSE 38078
// for i in tmp do
38032: LD_ADDR_VAR 0 8
38036: PUSH
38037: LD_VAR 0 19
38041: PUSH
38042: FOR_IN
38043: IFFALSE 38076
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38045: LD_VAR 0 8
38049: PPUSH
38050: CALL_OW 250
38054: PPUSH
38055: LD_VAR 0 8
38059: PPUSH
38060: CALL_OW 251
38064: PPUSH
38065: LD_VAR 0 16
38069: PPUSH
38070: CALL_OW 441
38074: GO 38042
38076: POP
38077: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38078: LD_VAR 0 18
38082: PPUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 30
38088: PUSH
38089: LD_INT 32
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 33
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 72
38115: IFFALSE 38203
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38117: LD_ADDR_VAR 0 8
38121: PUSH
38122: LD_VAR 0 18
38126: PPUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 30
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 30
38142: PUSH
38143: LD_INT 33
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: PPUSH
38155: CALL_OW 72
38159: PUSH
38160: FOR_IN
38161: IFFALSE 38201
// begin if not GetBWeapon ( i ) then
38163: LD_VAR 0 8
38167: PPUSH
38168: CALL_OW 269
38172: NOT
38173: IFFALSE 38199
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38175: LD_VAR 0 8
38179: PPUSH
38180: LD_VAR 0 8
38184: PPUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: CALL 39449 0 2
38194: PPUSH
38195: CALL_OW 431
// end ;
38199: GO 38160
38201: POP
38202: POP
// end ; for i = 1 to personel do
38203: LD_ADDR_VAR 0 8
38207: PUSH
38208: DOUBLE
38209: LD_INT 1
38211: DEC
38212: ST_TO_ADDR
38213: LD_VAR 0 6
38217: PUSH
38218: FOR_TO
38219: IFFALSE 39283
// begin if i > 4 then
38221: LD_VAR 0 8
38225: PUSH
38226: LD_INT 4
38228: GREATER
38229: IFFALSE 38233
// break ;
38231: GO 39283
// case i of 1 :
38233: LD_VAR 0 8
38237: PUSH
38238: LD_INT 1
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38326
38246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38247: LD_ADDR_VAR 0 12
38251: PUSH
38252: LD_VAR 0 18
38256: PPUSH
38257: LD_INT 22
38259: PUSH
38260: LD_VAR 0 16
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 58
38271: PUSH
38272: EMPTY
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 32
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 4
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 5
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 72
38323: ST_TO_ADDR
38324: GO 38548
38326: LD_INT 2
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38396
38334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38335: LD_ADDR_VAR 0 12
38339: PUSH
38340: LD_VAR 0 18
38344: PPUSH
38345: LD_INT 22
38347: PUSH
38348: LD_VAR 0 16
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 30
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PPUSH
38389: CALL_OW 72
38393: ST_TO_ADDR
38394: GO 38548
38396: LD_INT 3
38398: DOUBLE
38399: EQUAL
38400: IFTRUE 38404
38402: GO 38466
38404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38405: LD_ADDR_VAR 0 12
38409: PUSH
38410: LD_VAR 0 18
38414: PPUSH
38415: LD_INT 22
38417: PUSH
38418: LD_VAR 0 16
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 30
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 30
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PPUSH
38459: CALL_OW 72
38463: ST_TO_ADDR
38464: GO 38548
38466: LD_INT 4
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38474
38472: GO 38547
38474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38475: LD_ADDR_VAR 0 12
38479: PUSH
38480: LD_VAR 0 18
38484: PPUSH
38485: LD_INT 22
38487: PUSH
38488: LD_VAR 0 16
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 30
38502: PUSH
38503: LD_INT 6
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 7
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 8
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL_OW 72
38544: ST_TO_ADDR
38545: GO 38548
38547: POP
// if i = 1 then
38548: LD_VAR 0 8
38552: PUSH
38553: LD_INT 1
38555: EQUAL
38556: IFFALSE 38667
// begin tmp := [ ] ;
38558: LD_ADDR_VAR 0 19
38562: PUSH
38563: EMPTY
38564: ST_TO_ADDR
// for j in f do
38565: LD_ADDR_VAR 0 9
38569: PUSH
38570: LD_VAR 0 12
38574: PUSH
38575: FOR_IN
38576: IFFALSE 38649
// if GetBType ( j ) = b_bunker then
38578: LD_VAR 0 9
38582: PPUSH
38583: CALL_OW 266
38587: PUSH
38588: LD_INT 32
38590: EQUAL
38591: IFFALSE 38618
// tmp := Insert ( tmp , 1 , j ) else
38593: LD_ADDR_VAR 0 19
38597: PUSH
38598: LD_VAR 0 19
38602: PPUSH
38603: LD_INT 1
38605: PPUSH
38606: LD_VAR 0 9
38610: PPUSH
38611: CALL_OW 2
38615: ST_TO_ADDR
38616: GO 38647
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38618: LD_ADDR_VAR 0 19
38622: PUSH
38623: LD_VAR 0 19
38627: PPUSH
38628: LD_VAR 0 19
38632: PUSH
38633: LD_INT 1
38635: PLUS
38636: PPUSH
38637: LD_VAR 0 9
38641: PPUSH
38642: CALL_OW 2
38646: ST_TO_ADDR
38647: GO 38575
38649: POP
38650: POP
// if tmp then
38651: LD_VAR 0 19
38655: IFFALSE 38667
// f := tmp ;
38657: LD_ADDR_VAR 0 12
38661: PUSH
38662: LD_VAR 0 19
38666: ST_TO_ADDR
// end ; x := personel [ i ] ;
38667: LD_ADDR_VAR 0 13
38671: PUSH
38672: LD_VAR 0 6
38676: PUSH
38677: LD_VAR 0 8
38681: ARRAY
38682: ST_TO_ADDR
// if x = - 1 then
38683: LD_VAR 0 13
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: EQUAL
38692: IFFALSE 38901
// begin for j in f do
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_VAR 0 12
38703: PUSH
38704: FOR_IN
38705: IFFALSE 38897
// repeat InitHc ;
38707: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38711: LD_VAR 0 9
38715: PPUSH
38716: CALL_OW 266
38720: PUSH
38721: LD_INT 5
38723: EQUAL
38724: IFFALSE 38794
// begin if UnitsInside ( j ) < 3 then
38726: LD_VAR 0 9
38730: PPUSH
38731: CALL_OW 313
38735: PUSH
38736: LD_INT 3
38738: LESS
38739: IFFALSE 38775
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38741: LD_INT 0
38743: PPUSH
38744: LD_INT 5
38746: PUSH
38747: LD_INT 8
38749: PUSH
38750: LD_INT 9
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: PUSH
38758: LD_VAR 0 17
38762: ARRAY
38763: PPUSH
38764: LD_VAR 0 4
38768: PPUSH
38769: CALL_OW 380
38773: GO 38792
// PrepareHuman ( false , i , skill ) ;
38775: LD_INT 0
38777: PPUSH
38778: LD_VAR 0 8
38782: PPUSH
38783: LD_VAR 0 4
38787: PPUSH
38788: CALL_OW 380
// end else
38792: GO 38811
// PrepareHuman ( false , i , skill ) ;
38794: LD_INT 0
38796: PPUSH
38797: LD_VAR 0 8
38801: PPUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: CALL_OW 380
// un := CreateHuman ;
38811: LD_ADDR_VAR 0 14
38815: PUSH
38816: CALL_OW 44
38820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38821: LD_ADDR_VAR 0 7
38825: PUSH
38826: LD_VAR 0 7
38830: PPUSH
38831: LD_INT 1
38833: PPUSH
38834: LD_VAR 0 14
38838: PPUSH
38839: CALL_OW 2
38843: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38844: LD_VAR 0 14
38848: PPUSH
38849: LD_VAR 0 9
38853: PPUSH
38854: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38858: LD_VAR 0 9
38862: PPUSH
38863: CALL_OW 313
38867: PUSH
38868: LD_INT 6
38870: EQUAL
38871: PUSH
38872: LD_VAR 0 9
38876: PPUSH
38877: CALL_OW 266
38881: PUSH
38882: LD_INT 32
38884: PUSH
38885: LD_INT 31
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: IN
38892: OR
38893: IFFALSE 38707
38895: GO 38704
38897: POP
38898: POP
// end else
38899: GO 39281
// for j = 1 to x do
38901: LD_ADDR_VAR 0 9
38905: PUSH
38906: DOUBLE
38907: LD_INT 1
38909: DEC
38910: ST_TO_ADDR
38911: LD_VAR 0 13
38915: PUSH
38916: FOR_TO
38917: IFFALSE 39279
// begin InitHc ;
38919: CALL_OW 19
// if not f then
38923: LD_VAR 0 12
38927: NOT
38928: IFFALSE 39017
// begin PrepareHuman ( false , i , skill ) ;
38930: LD_INT 0
38932: PPUSH
38933: LD_VAR 0 8
38937: PPUSH
38938: LD_VAR 0 4
38942: PPUSH
38943: CALL_OW 380
// un := CreateHuman ;
38947: LD_ADDR_VAR 0 14
38951: PUSH
38952: CALL_OW 44
38956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 7
38966: PPUSH
38967: LD_INT 1
38969: PPUSH
38970: LD_VAR 0 14
38974: PPUSH
38975: CALL_OW 2
38979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38980: LD_VAR 0 14
38984: PPUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 250
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 251
39004: PPUSH
39005: LD_INT 10
39007: PPUSH
39008: LD_INT 0
39010: PPUSH
39011: CALL_OW 50
// continue ;
39015: GO 38916
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39017: LD_VAR 0 12
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: CALL_OW 313
39030: PUSH
39031: LD_VAR 0 12
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: PPUSH
39040: CALL_OW 266
39044: PUSH
39045: LD_INT 32
39047: PUSH
39048: LD_INT 31
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: IN
39055: AND
39056: PUSH
39057: LD_VAR 0 12
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: PPUSH
39066: CALL_OW 313
39070: PUSH
39071: LD_INT 6
39073: EQUAL
39074: OR
39075: IFFALSE 39095
// f := Delete ( f , 1 ) ;
39077: LD_ADDR_VAR 0 12
39081: PUSH
39082: LD_VAR 0 12
39086: PPUSH
39087: LD_INT 1
39089: PPUSH
39090: CALL_OW 3
39094: ST_TO_ADDR
// if not f then
39095: LD_VAR 0 12
39099: NOT
39100: IFFALSE 39118
// begin x := x + 2 ;
39102: LD_ADDR_VAR 0 13
39106: PUSH
39107: LD_VAR 0 13
39111: PUSH
39112: LD_INT 2
39114: PLUS
39115: ST_TO_ADDR
// continue ;
39116: GO 38916
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39118: LD_VAR 0 12
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: CALL_OW 266
39131: PUSH
39132: LD_INT 5
39134: EQUAL
39135: IFFALSE 39209
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39137: LD_VAR 0 12
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: PPUSH
39146: CALL_OW 313
39150: PUSH
39151: LD_INT 3
39153: LESS
39154: IFFALSE 39190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39156: LD_INT 0
39158: PPUSH
39159: LD_INT 5
39161: PUSH
39162: LD_INT 8
39164: PUSH
39165: LD_INT 9
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: LD_VAR 0 17
39177: ARRAY
39178: PPUSH
39179: LD_VAR 0 4
39183: PPUSH
39184: CALL_OW 380
39188: GO 39207
// PrepareHuman ( false , i , skill ) ;
39190: LD_INT 0
39192: PPUSH
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: CALL_OW 380
// end else
39207: GO 39226
// PrepareHuman ( false , i , skill ) ;
39209: LD_INT 0
39211: PPUSH
39212: LD_VAR 0 8
39216: PPUSH
39217: LD_VAR 0 4
39221: PPUSH
39222: CALL_OW 380
// un := CreateHuman ;
39226: LD_ADDR_VAR 0 14
39230: PUSH
39231: CALL_OW 44
39235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39236: LD_ADDR_VAR 0 7
39240: PUSH
39241: LD_VAR 0 7
39245: PPUSH
39246: LD_INT 1
39248: PPUSH
39249: LD_VAR 0 14
39253: PPUSH
39254: CALL_OW 2
39258: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39259: LD_VAR 0 14
39263: PPUSH
39264: LD_VAR 0 12
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: PPUSH
39273: CALL_OW 52
// end ;
39277: GO 38916
39279: POP
39280: POP
// end ;
39281: GO 38218
39283: POP
39284: POP
// result := result ^ buildings ;
39285: LD_ADDR_VAR 0 7
39289: PUSH
39290: LD_VAR 0 7
39294: PUSH
39295: LD_VAR 0 18
39299: ADD
39300: ST_TO_ADDR
// end else
39301: GO 39444
// begin for i = 1 to personel do
39303: LD_ADDR_VAR 0 8
39307: PUSH
39308: DOUBLE
39309: LD_INT 1
39311: DEC
39312: ST_TO_ADDR
39313: LD_VAR 0 6
39317: PUSH
39318: FOR_TO
39319: IFFALSE 39442
// begin if i > 4 then
39321: LD_VAR 0 8
39325: PUSH
39326: LD_INT 4
39328: GREATER
39329: IFFALSE 39333
// break ;
39331: GO 39442
// x := personel [ i ] ;
39333: LD_ADDR_VAR 0 13
39337: PUSH
39338: LD_VAR 0 6
39342: PUSH
39343: LD_VAR 0 8
39347: ARRAY
39348: ST_TO_ADDR
// if x = - 1 then
39349: LD_VAR 0 13
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: EQUAL
39358: IFFALSE 39362
// continue ;
39360: GO 39318
// PrepareHuman ( false , i , skill ) ;
39362: LD_INT 0
39364: PPUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: LD_VAR 0 4
39374: PPUSH
39375: CALL_OW 380
// un := CreateHuman ;
39379: LD_ADDR_VAR 0 14
39383: PUSH
39384: CALL_OW 44
39388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39389: LD_VAR 0 14
39393: PPUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 250
39403: PPUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 251
39413: PPUSH
39414: LD_INT 10
39416: PPUSH
39417: LD_INT 0
39419: PPUSH
39420: CALL_OW 50
// result := result ^ un ;
39424: LD_ADDR_VAR 0 7
39428: PUSH
39429: LD_VAR 0 7
39433: PUSH
39434: LD_VAR 0 14
39438: ADD
39439: ST_TO_ADDR
// end ;
39440: GO 39318
39442: POP
39443: POP
// end ; end ;
39444: LD_VAR 0 7
39448: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
// result := false ;
39467: LD_ADDR_VAR 0 3
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39475: LD_VAR 0 1
39479: NOT
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 266
39490: PUSH
39491: LD_INT 32
39493: PUSH
39494: LD_INT 33
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: IN
39501: NOT
39502: OR
39503: IFFALSE 39507
// exit ;
39505: GO 40643
// nat := GetNation ( tower ) ;
39507: LD_ADDR_VAR 0 12
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 248
39521: ST_TO_ADDR
// side := GetSide ( tower ) ;
39522: LD_ADDR_VAR 0 16
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 255
39536: ST_TO_ADDR
// x := GetX ( tower ) ;
39537: LD_ADDR_VAR 0 10
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 250
39551: ST_TO_ADDR
// y := GetY ( tower ) ;
39552: LD_ADDR_VAR 0 11
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 251
39566: ST_TO_ADDR
// if not x or not y then
39567: LD_VAR 0 10
39571: NOT
39572: PUSH
39573: LD_VAR 0 11
39577: NOT
39578: OR
39579: IFFALSE 39583
// exit ;
39581: GO 40643
// weapon := 0 ;
39583: LD_ADDR_VAR 0 18
39587: PUSH
39588: LD_INT 0
39590: ST_TO_ADDR
// fac_list := [ ] ;
39591: LD_ADDR_VAR 0 17
39595: PUSH
39596: EMPTY
39597: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39598: LD_ADDR_VAR 0 6
39602: PUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 274
39612: PPUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: CALL 37221 0 2
39622: PPUSH
39623: LD_INT 30
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PPUSH
39633: CALL_OW 72
39637: ST_TO_ADDR
// if not factories then
39638: LD_VAR 0 6
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 40643
// for i in factories do
39647: LD_ADDR_VAR 0 8
39651: PUSH
39652: LD_VAR 0 6
39656: PUSH
39657: FOR_IN
39658: IFFALSE 39683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39660: LD_ADDR_VAR 0 17
39664: PUSH
39665: LD_VAR 0 17
39669: PUSH
39670: LD_VAR 0 8
39674: PPUSH
39675: CALL_OW 478
39679: UNION
39680: ST_TO_ADDR
39681: GO 39657
39683: POP
39684: POP
// if not fac_list then
39685: LD_VAR 0 17
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 40643
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_INT 4
39701: PUSH
39702: LD_INT 5
39704: PUSH
39705: LD_INT 9
39707: PUSH
39708: LD_INT 10
39710: PUSH
39711: LD_INT 6
39713: PUSH
39714: LD_INT 7
39716: PUSH
39717: LD_INT 11
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 27
39731: PUSH
39732: LD_INT 28
39734: PUSH
39735: LD_INT 26
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 43
39749: PUSH
39750: LD_INT 44
39752: PUSH
39753: LD_INT 46
39755: PUSH
39756: LD_INT 45
39758: PUSH
39759: LD_INT 47
39761: PUSH
39762: LD_INT 49
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 12
39782: ARRAY
39783: ST_TO_ADDR
// for i in list do
39784: LD_ADDR_VAR 0 8
39788: PUSH
39789: LD_VAR 0 5
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39828
// if not i in fac_list then
39797: LD_VAR 0 8
39801: PUSH
39802: LD_VAR 0 17
39806: IN
39807: NOT
39808: IFFALSE 39826
// list := list diff i ;
39810: LD_ADDR_VAR 0 5
39814: PUSH
39815: LD_VAR 0 5
39819: PUSH
39820: LD_VAR 0 8
39824: DIFF
39825: ST_TO_ADDR
39826: GO 39794
39828: POP
39829: POP
// if not list then
39830: LD_VAR 0 5
39834: NOT
39835: IFFALSE 39839
// exit ;
39837: GO 40643
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39839: LD_VAR 0 12
39843: PUSH
39844: LD_INT 3
39846: EQUAL
39847: PUSH
39848: LD_INT 49
39850: PUSH
39851: LD_VAR 0 5
39855: IN
39856: AND
39857: PUSH
39858: LD_INT 31
39860: PPUSH
39861: LD_VAR 0 16
39865: PPUSH
39866: CALL_OW 321
39870: PUSH
39871: LD_INT 2
39873: EQUAL
39874: AND
39875: IFFALSE 39935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39877: LD_INT 22
39879: PUSH
39880: LD_VAR 0 16
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 35
39891: PUSH
39892: LD_INT 49
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 91
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_INT 10
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 69
39924: NOT
39925: IFFALSE 39935
// weapon := ru_time_lapser ;
39927: LD_ADDR_VAR 0 18
39931: PUSH
39932: LD_INT 49
39934: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39935: LD_VAR 0 12
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: IN
39950: PUSH
39951: LD_INT 11
39953: PUSH
39954: LD_VAR 0 5
39958: IN
39959: PUSH
39960: LD_INT 30
39962: PUSH
39963: LD_VAR 0 5
39967: IN
39968: OR
39969: AND
39970: PUSH
39971: LD_INT 6
39973: PPUSH
39974: LD_VAR 0 16
39978: PPUSH
39979: CALL_OW 321
39983: PUSH
39984: LD_INT 2
39986: EQUAL
39987: AND
39988: IFFALSE 40153
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39990: LD_INT 22
39992: PUSH
39993: LD_VAR 0 16
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 35
40007: PUSH
40008: LD_INT 11
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 35
40017: PUSH
40018: LD_INT 30
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 91
40032: PUSH
40033: LD_VAR 0 1
40037: PUSH
40038: LD_INT 18
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 69
40055: NOT
40056: PUSH
40057: LD_INT 22
40059: PUSH
40060: LD_VAR 0 16
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 32
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: LD_INT 33
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 91
40099: PUSH
40100: LD_VAR 0 1
40104: PUSH
40105: LD_INT 12
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: PPUSH
40121: CALL_OW 69
40125: PUSH
40126: LD_INT 2
40128: GREATER
40129: AND
40130: IFFALSE 40153
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40132: LD_ADDR_VAR 0 18
40136: PUSH
40137: LD_INT 11
40139: PUSH
40140: LD_INT 30
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_VAR 0 12
40151: ARRAY
40152: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40153: LD_VAR 0 18
40157: NOT
40158: PUSH
40159: LD_INT 40
40161: PPUSH
40162: LD_VAR 0 16
40166: PPUSH
40167: CALL_OW 321
40171: PUSH
40172: LD_INT 2
40174: EQUAL
40175: AND
40176: PUSH
40177: LD_INT 7
40179: PUSH
40180: LD_VAR 0 5
40184: IN
40185: PUSH
40186: LD_INT 28
40188: PUSH
40189: LD_VAR 0 5
40193: IN
40194: OR
40195: PUSH
40196: LD_INT 45
40198: PUSH
40199: LD_VAR 0 5
40203: IN
40204: OR
40205: AND
40206: IFFALSE 40460
// begin hex := GetHexInfo ( x , y ) ;
40208: LD_ADDR_VAR 0 4
40212: PUSH
40213: LD_VAR 0 10
40217: PPUSH
40218: LD_VAR 0 11
40222: PPUSH
40223: CALL_OW 546
40227: ST_TO_ADDR
// if hex [ 1 ] then
40228: LD_VAR 0 4
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: IFFALSE 40240
// exit ;
40238: GO 40643
// height := hex [ 2 ] ;
40240: LD_ADDR_VAR 0 15
40244: PUSH
40245: LD_VAR 0 4
40249: PUSH
40250: LD_INT 2
40252: ARRAY
40253: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40254: LD_ADDR_VAR 0 14
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 5
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: ST_TO_ADDR
// for i in tmp do
40277: LD_ADDR_VAR 0 8
40281: PUSH
40282: LD_VAR 0 14
40286: PUSH
40287: FOR_IN
40288: IFFALSE 40458
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40290: LD_ADDR_VAR 0 9
40294: PUSH
40295: LD_VAR 0 10
40299: PPUSH
40300: LD_VAR 0 8
40304: PPUSH
40305: LD_INT 5
40307: PPUSH
40308: CALL_OW 272
40312: PUSH
40313: LD_VAR 0 11
40317: PPUSH
40318: LD_VAR 0 8
40322: PPUSH
40323: LD_INT 5
40325: PPUSH
40326: CALL_OW 273
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40335: LD_VAR 0 9
40339: PUSH
40340: LD_INT 1
40342: ARRAY
40343: PPUSH
40344: LD_VAR 0 9
40348: PUSH
40349: LD_INT 2
40351: ARRAY
40352: PPUSH
40353: CALL_OW 488
40357: IFFALSE 40456
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40359: LD_ADDR_VAR 0 4
40363: PUSH
40364: LD_VAR 0 9
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: PPUSH
40373: LD_VAR 0 9
40377: PUSH
40378: LD_INT 2
40380: ARRAY
40381: PPUSH
40382: CALL_OW 546
40386: ST_TO_ADDR
// if hex [ 1 ] then
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: IFFALSE 40399
// continue ;
40397: GO 40287
// h := hex [ 2 ] ;
40399: LD_ADDR_VAR 0 13
40403: PUSH
40404: LD_VAR 0 4
40408: PUSH
40409: LD_INT 2
40411: ARRAY
40412: ST_TO_ADDR
// if h + 7 < height then
40413: LD_VAR 0 13
40417: PUSH
40418: LD_INT 7
40420: PLUS
40421: PUSH
40422: LD_VAR 0 15
40426: LESS
40427: IFFALSE 40456
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40429: LD_ADDR_VAR 0 18
40433: PUSH
40434: LD_INT 7
40436: PUSH
40437: LD_INT 28
40439: PUSH
40440: LD_INT 45
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: PUSH
40448: LD_VAR 0 12
40452: ARRAY
40453: ST_TO_ADDR
// break ;
40454: GO 40458
// end ; end ; end ;
40456: GO 40287
40458: POP
40459: POP
// end ; if not weapon then
40460: LD_VAR 0 18
40464: NOT
40465: IFFALSE 40525
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40467: LD_ADDR_VAR 0 5
40471: PUSH
40472: LD_VAR 0 5
40476: PUSH
40477: LD_INT 11
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_INT 49
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: DIFF
40491: ST_TO_ADDR
// if not list then
40492: LD_VAR 0 5
40496: NOT
40497: IFFALSE 40501
// exit ;
40499: GO 40643
// weapon := list [ rand ( 1 , list ) ] ;
40501: LD_ADDR_VAR 0 18
40505: PUSH
40506: LD_VAR 0 5
40510: PUSH
40511: LD_INT 1
40513: PPUSH
40514: LD_VAR 0 5
40518: PPUSH
40519: CALL_OW 12
40523: ARRAY
40524: ST_TO_ADDR
// end ; if weapon then
40525: LD_VAR 0 18
40529: IFFALSE 40643
// begin tmp := CostOfWeapon ( weapon ) ;
40531: LD_ADDR_VAR 0 14
40535: PUSH
40536: LD_VAR 0 18
40540: PPUSH
40541: CALL_OW 451
40545: ST_TO_ADDR
// j := GetBase ( tower ) ;
40546: LD_ADDR_VAR 0 9
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 274
40560: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40561: LD_VAR 0 9
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 275
40573: PUSH
40574: LD_VAR 0 14
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: GREATEREQUAL
40583: PUSH
40584: LD_VAR 0 9
40588: PPUSH
40589: LD_INT 2
40591: PPUSH
40592: CALL_OW 275
40596: PUSH
40597: LD_VAR 0 14
40601: PUSH
40602: LD_INT 2
40604: ARRAY
40605: GREATEREQUAL
40606: AND
40607: PUSH
40608: LD_VAR 0 9
40612: PPUSH
40613: LD_INT 3
40615: PPUSH
40616: CALL_OW 275
40620: PUSH
40621: LD_VAR 0 14
40625: PUSH
40626: LD_INT 3
40628: ARRAY
40629: GREATEREQUAL
40630: AND
40631: IFFALSE 40643
// result := weapon ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 18
40642: ST_TO_ADDR
// end ; end ;
40643: LD_VAR 0 3
40647: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40648: LD_INT 0
40650: PPUSH
40651: PPUSH
// result := true ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 1
40659: ST_TO_ADDR
// if array1 = array2 then
40660: LD_VAR 0 1
40664: PUSH
40665: LD_VAR 0 2
40669: EQUAL
40670: IFFALSE 40730
// begin for i = 1 to array1 do
40672: LD_ADDR_VAR 0 4
40676: PUSH
40677: DOUBLE
40678: LD_INT 1
40680: DEC
40681: ST_TO_ADDR
40682: LD_VAR 0 1
40686: PUSH
40687: FOR_TO
40688: IFFALSE 40726
// if array1 [ i ] <> array2 [ i ] then
40690: LD_VAR 0 1
40694: PUSH
40695: LD_VAR 0 4
40699: ARRAY
40700: PUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_VAR 0 4
40710: ARRAY
40711: NONEQUAL
40712: IFFALSE 40724
// begin result := false ;
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 0
40721: ST_TO_ADDR
// break ;
40722: GO 40726
// end ;
40724: GO 40687
40726: POP
40727: POP
// end else
40728: GO 40738
// result := false ;
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 0
40737: ST_TO_ADDR
// end ;
40738: LD_VAR 0 3
40742: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
40747: PPUSH
// pom := GetBase ( fac ) ;
40748: LD_ADDR_VAR 0 5
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 274
40762: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40763: LD_ADDR_VAR 0 4
40767: PUSH
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_INT 2
40784: ARRAY
40785: PPUSH
40786: LD_VAR 0 2
40790: PUSH
40791: LD_INT 3
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 2
40799: PUSH
40800: LD_INT 4
40802: ARRAY
40803: PPUSH
40804: CALL_OW 449
40808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40809: LD_ADDR_VAR 0 3
40813: PUSH
40814: LD_VAR 0 5
40818: PPUSH
40819: LD_INT 1
40821: PPUSH
40822: CALL_OW 275
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: ARRAY
40835: GREATEREQUAL
40836: PUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: LD_INT 2
40844: PPUSH
40845: CALL_OW 275
40849: PUSH
40850: LD_VAR 0 4
40854: PUSH
40855: LD_INT 2
40857: ARRAY
40858: GREATEREQUAL
40859: AND
40860: PUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: LD_INT 3
40868: PPUSH
40869: CALL_OW 275
40873: PUSH
40874: LD_VAR 0 4
40878: PUSH
40879: LD_INT 3
40881: ARRAY
40882: GREATEREQUAL
40883: AND
40884: ST_TO_ADDR
// end ;
40885: LD_VAR 0 3
40889: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40890: LD_INT 0
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
// pom := GetBase ( building ) ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 274
40910: ST_TO_ADDR
// if not pom then
40911: LD_VAR 0 3
40915: NOT
40916: IFFALSE 40920
// exit ;
40918: GO 41090
// btype := GetBType ( building ) ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 266
40934: ST_TO_ADDR
// if btype = b_armoury then
40935: LD_VAR 0 5
40939: PUSH
40940: LD_INT 4
40942: EQUAL
40943: IFFALSE 40953
// btype := b_barracks ;
40945: LD_ADDR_VAR 0 5
40949: PUSH
40950: LD_INT 5
40952: ST_TO_ADDR
// if btype = b_depot then
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 0
40960: EQUAL
40961: IFFALSE 40971
// btype := b_warehouse ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_INT 1
40970: ST_TO_ADDR
// if btype = b_workshop then
40971: LD_VAR 0 5
40975: PUSH
40976: LD_INT 2
40978: EQUAL
40979: IFFALSE 40989
// btype := b_factory ;
40981: LD_ADDR_VAR 0 5
40985: PUSH
40986: LD_INT 3
40988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: LD_VAR 0 5
40998: PPUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 248
41008: PPUSH
41009: CALL_OW 450
41013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41014: LD_ADDR_VAR 0 2
41018: PUSH
41019: LD_VAR 0 3
41023: PPUSH
41024: LD_INT 1
41026: PPUSH
41027: CALL_OW 275
41031: PUSH
41032: LD_VAR 0 4
41036: PUSH
41037: LD_INT 1
41039: ARRAY
41040: GREATEREQUAL
41041: PUSH
41042: LD_VAR 0 3
41046: PPUSH
41047: LD_INT 2
41049: PPUSH
41050: CALL_OW 275
41054: PUSH
41055: LD_VAR 0 4
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: GREATEREQUAL
41064: AND
41065: PUSH
41066: LD_VAR 0 3
41070: PPUSH
41071: LD_INT 3
41073: PPUSH
41074: CALL_OW 275
41078: PUSH
41079: LD_VAR 0 4
41083: PUSH
41084: LD_INT 3
41086: ARRAY
41087: GREATEREQUAL
41088: AND
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 2
41094: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
41099: PPUSH
// pom := GetBase ( building ) ;
41100: LD_ADDR_VAR 0 4
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 274
41114: ST_TO_ADDR
// if not pom then
41115: LD_VAR 0 4
41119: NOT
41120: IFFALSE 41124
// exit ;
41122: GO 41225
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41124: LD_ADDR_VAR 0 5
41128: PUSH
41129: LD_VAR 0 2
41133: PPUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 248
41143: PPUSH
41144: CALL_OW 450
41148: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41149: LD_ADDR_VAR 0 3
41153: PUSH
41154: LD_VAR 0 4
41158: PPUSH
41159: LD_INT 1
41161: PPUSH
41162: CALL_OW 275
41166: PUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: GREATEREQUAL
41176: PUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: LD_INT 2
41184: PPUSH
41185: CALL_OW 275
41189: PUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 2
41197: ARRAY
41198: GREATEREQUAL
41199: AND
41200: PUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: LD_INT 3
41208: PPUSH
41209: CALL_OW 275
41213: PUSH
41214: LD_VAR 0 5
41218: PUSH
41219: LD_INT 3
41221: ARRAY
41222: GREATEREQUAL
41223: AND
41224: ST_TO_ADDR
// end ;
41225: LD_VAR 0 3
41229: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
// result := false ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_INT 0
41249: ST_TO_ADDR
// if not base or not btype or not x or not y then
41250: LD_VAR 0 1
41254: NOT
41255: PUSH
41256: LD_VAR 0 2
41260: NOT
41261: OR
41262: PUSH
41263: LD_VAR 0 3
41267: NOT
41268: OR
41269: PUSH
41270: LD_VAR 0 4
41274: NOT
41275: OR
41276: IFFALSE 41280
// exit ;
41278: GO 41889
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41280: LD_ADDR_VAR 0 12
41284: PUSH
41285: LD_VAR 0 2
41289: PPUSH
41290: LD_VAR 0 3
41294: PPUSH
41295: LD_VAR 0 4
41299: PPUSH
41300: LD_VAR 0 5
41304: PPUSH
41305: LD_VAR 0 1
41309: PUSH
41310: LD_INT 1
41312: ARRAY
41313: PPUSH
41314: CALL_OW 248
41318: PPUSH
41319: LD_INT 0
41321: PPUSH
41322: CALL 42726 0 6
41326: ST_TO_ADDR
// if not hexes then
41327: LD_VAR 0 12
41331: NOT
41332: IFFALSE 41336
// exit ;
41334: GO 41889
// for i = 1 to hexes do
41336: LD_ADDR_VAR 0 7
41340: PUSH
41341: DOUBLE
41342: LD_INT 1
41344: DEC
41345: ST_TO_ADDR
41346: LD_VAR 0 12
41350: PUSH
41351: FOR_TO
41352: IFFALSE 41887
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41354: LD_ADDR_VAR 0 11
41358: PUSH
41359: LD_VAR 0 12
41363: PUSH
41364: LD_VAR 0 7
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: LD_VAR 0 12
41378: PUSH
41379: LD_VAR 0 7
41383: ARRAY
41384: PUSH
41385: LD_INT 2
41387: ARRAY
41388: PPUSH
41389: CALL_OW 428
41393: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41394: LD_VAR 0 12
41398: PUSH
41399: LD_VAR 0 7
41403: ARRAY
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 12
41413: PUSH
41414: LD_VAR 0 7
41418: ARRAY
41419: PUSH
41420: LD_INT 2
41422: ARRAY
41423: PPUSH
41424: CALL_OW 351
41428: PUSH
41429: LD_VAR 0 12
41433: PUSH
41434: LD_VAR 0 7
41438: ARRAY
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 12
41448: PUSH
41449: LD_VAR 0 7
41453: ARRAY
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: PPUSH
41459: CALL_OW 488
41463: NOT
41464: OR
41465: PUSH
41466: LD_VAR 0 11
41470: PPUSH
41471: CALL_OW 247
41475: PUSH
41476: LD_INT 3
41478: EQUAL
41479: OR
41480: IFFALSE 41486
// exit ;
41482: POP
41483: POP
41484: GO 41889
// if not tmp or not tmp in base then
41486: LD_VAR 0 11
41490: NOT
41491: PUSH
41492: LD_VAR 0 11
41496: PUSH
41497: LD_VAR 0 1
41501: IN
41502: NOT
41503: OR
41504: IFFALSE 41508
// continue ;
41506: GO 41351
// result := true ;
41508: LD_ADDR_VAR 0 6
41512: PUSH
41513: LD_INT 1
41515: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41516: LD_ADDR_VAR 0 15
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: LD_INT 22
41528: PUSH
41529: LD_VAR 0 11
41533: PPUSH
41534: CALL_OW 255
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 30
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 30
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PPUSH
41575: CALL_OW 72
41579: ST_TO_ADDR
// if dep then
41580: LD_VAR 0 15
41584: IFFALSE 41720
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41586: LD_ADDR_VAR 0 14
41590: PUSH
41591: LD_VAR 0 15
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PPUSH
41600: CALL_OW 250
41604: PPUSH
41605: LD_VAR 0 15
41609: PUSH
41610: LD_INT 1
41612: ARRAY
41613: PPUSH
41614: CALL_OW 254
41618: PPUSH
41619: LD_INT 5
41621: PPUSH
41622: CALL_OW 272
41626: PUSH
41627: LD_VAR 0 15
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PPUSH
41636: CALL_OW 251
41640: PPUSH
41641: LD_VAR 0 15
41645: PUSH
41646: LD_INT 1
41648: ARRAY
41649: PPUSH
41650: CALL_OW 254
41654: PPUSH
41655: LD_INT 5
41657: PPUSH
41658: CALL_OW 273
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41667: LD_VAR 0 14
41671: PUSH
41672: LD_INT 1
41674: ARRAY
41675: PPUSH
41676: LD_VAR 0 14
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 488
41689: IFFALSE 41720
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41691: LD_VAR 0 11
41695: PPUSH
41696: LD_VAR 0 14
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PPUSH
41705: LD_VAR 0 14
41709: PUSH
41710: LD_INT 2
41712: ARRAY
41713: PPUSH
41714: CALL_OW 111
// continue ;
41718: GO 41351
// end ; end ; r := GetDir ( tmp ) ;
41720: LD_ADDR_VAR 0 13
41724: PUSH
41725: LD_VAR 0 11
41729: PPUSH
41730: CALL_OW 254
41734: ST_TO_ADDR
// if r = 5 then
41735: LD_VAR 0 13
41739: PUSH
41740: LD_INT 5
41742: EQUAL
41743: IFFALSE 41753
// r := 0 ;
41745: LD_ADDR_VAR 0 13
41749: PUSH
41750: LD_INT 0
41752: ST_TO_ADDR
// for j = r to 5 do
41753: LD_ADDR_VAR 0 8
41757: PUSH
41758: DOUBLE
41759: LD_VAR 0 13
41763: DEC
41764: ST_TO_ADDR
41765: LD_INT 5
41767: PUSH
41768: FOR_TO
41769: IFFALSE 41883
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41771: LD_ADDR_VAR 0 9
41775: PUSH
41776: LD_VAR 0 11
41780: PPUSH
41781: CALL_OW 250
41785: PPUSH
41786: LD_VAR 0 8
41790: PPUSH
41791: LD_INT 2
41793: PPUSH
41794: CALL_OW 272
41798: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41799: LD_ADDR_VAR 0 10
41803: PUSH
41804: LD_VAR 0 11
41808: PPUSH
41809: CALL_OW 251
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: LD_INT 2
41821: PPUSH
41822: CALL_OW 273
41826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41827: LD_VAR 0 9
41831: PPUSH
41832: LD_VAR 0 10
41836: PPUSH
41837: CALL_OW 488
41841: PUSH
41842: LD_VAR 0 9
41846: PPUSH
41847: LD_VAR 0 10
41851: PPUSH
41852: CALL_OW 428
41856: NOT
41857: AND
41858: IFFALSE 41881
// begin ComMoveXY ( tmp , _x , _y ) ;
41860: LD_VAR 0 11
41864: PPUSH
41865: LD_VAR 0 9
41869: PPUSH
41870: LD_VAR 0 10
41874: PPUSH
41875: CALL_OW 111
// break ;
41879: GO 41883
// end ; end ;
41881: GO 41768
41883: POP
41884: POP
// end ;
41885: GO 41351
41887: POP
41888: POP
// end ;
41889: LD_VAR 0 6
41893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
// result := false ;
41906: LD_ADDR_VAR 0 6
41910: PUSH
41911: LD_INT 0
41913: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41914: LD_VAR 0 1
41918: NOT
41919: PUSH
41920: LD_VAR 0 1
41924: PPUSH
41925: CALL_OW 266
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: IN
41940: NOT
41941: OR
41942: PUSH
41943: LD_VAR 0 2
41947: NOT
41948: OR
41949: PUSH
41950: LD_VAR 0 5
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 4
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: IN
41981: NOT
41982: OR
41983: PUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: CALL_OW 488
41998: NOT
41999: OR
42000: IFFALSE 42004
// exit ;
42002: GO 42721
// pom := GetBase ( depot ) ;
42004: LD_ADDR_VAR 0 10
42008: PUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 274
42018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42019: LD_ADDR_VAR 0 11
42023: PUSH
42024: LD_VAR 0 2
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 248
42038: PPUSH
42039: CALL_OW 450
42043: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42044: LD_VAR 0 10
42048: PPUSH
42049: LD_INT 1
42051: PPUSH
42052: CALL_OW 275
42056: PUSH
42057: LD_VAR 0 11
42061: PUSH
42062: LD_INT 1
42064: ARRAY
42065: GREATEREQUAL
42066: PUSH
42067: LD_VAR 0 10
42071: PPUSH
42072: LD_INT 2
42074: PPUSH
42075: CALL_OW 275
42079: PUSH
42080: LD_VAR 0 11
42084: PUSH
42085: LD_INT 2
42087: ARRAY
42088: GREATEREQUAL
42089: AND
42090: PUSH
42091: LD_VAR 0 10
42095: PPUSH
42096: LD_INT 3
42098: PPUSH
42099: CALL_OW 275
42103: PUSH
42104: LD_VAR 0 11
42108: PUSH
42109: LD_INT 3
42111: ARRAY
42112: GREATEREQUAL
42113: AND
42114: NOT
42115: IFFALSE 42119
// exit ;
42117: GO 42721
// if GetBType ( depot ) = b_depot then
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 266
42128: PUSH
42129: LD_INT 0
42131: EQUAL
42132: IFFALSE 42144
// dist := 28 else
42134: LD_ADDR_VAR 0 14
42138: PUSH
42139: LD_INT 28
42141: ST_TO_ADDR
42142: GO 42152
// dist := 36 ;
42144: LD_ADDR_VAR 0 14
42148: PUSH
42149: LD_INT 36
42151: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42152: LD_VAR 0 1
42156: PPUSH
42157: LD_VAR 0 3
42161: PPUSH
42162: LD_VAR 0 4
42166: PPUSH
42167: CALL_OW 297
42171: PUSH
42172: LD_VAR 0 14
42176: GREATER
42177: IFFALSE 42181
// exit ;
42179: GO 42721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42181: LD_ADDR_VAR 0 12
42185: PUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: LD_VAR 0 3
42195: PPUSH
42196: LD_VAR 0 4
42200: PPUSH
42201: LD_VAR 0 5
42205: PPUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 248
42215: PPUSH
42216: LD_INT 0
42218: PPUSH
42219: CALL 42726 0 6
42223: ST_TO_ADDR
// if not hexes then
42224: LD_VAR 0 12
42228: NOT
42229: IFFALSE 42233
// exit ;
42231: GO 42721
// hex := GetHexInfo ( x , y ) ;
42233: LD_ADDR_VAR 0 15
42237: PUSH
42238: LD_VAR 0 3
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: CALL_OW 546
42252: ST_TO_ADDR
// if hex [ 1 ] then
42253: LD_VAR 0 15
42257: PUSH
42258: LD_INT 1
42260: ARRAY
42261: IFFALSE 42265
// exit ;
42263: GO 42721
// height := hex [ 2 ] ;
42265: LD_ADDR_VAR 0 13
42269: PUSH
42270: LD_VAR 0 15
42274: PUSH
42275: LD_INT 2
42277: ARRAY
42278: ST_TO_ADDR
// for i = 1 to hexes do
42279: LD_ADDR_VAR 0 7
42283: PUSH
42284: DOUBLE
42285: LD_INT 1
42287: DEC
42288: ST_TO_ADDR
42289: LD_VAR 0 12
42293: PUSH
42294: FOR_TO
42295: IFFALSE 42625
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42297: LD_VAR 0 12
42301: PUSH
42302: LD_VAR 0 7
42306: ARRAY
42307: PUSH
42308: LD_INT 1
42310: ARRAY
42311: PPUSH
42312: LD_VAR 0 12
42316: PUSH
42317: LD_VAR 0 7
42321: ARRAY
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: PPUSH
42327: CALL_OW 488
42331: NOT
42332: PUSH
42333: LD_VAR 0 12
42337: PUSH
42338: LD_VAR 0 7
42342: ARRAY
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PPUSH
42348: LD_VAR 0 12
42352: PUSH
42353: LD_VAR 0 7
42357: ARRAY
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: PPUSH
42363: CALL_OW 428
42367: PUSH
42368: LD_INT 0
42370: GREATER
42371: OR
42372: PUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_VAR 0 7
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PPUSH
42388: LD_VAR 0 12
42392: PUSH
42393: LD_VAR 0 7
42397: ARRAY
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: PPUSH
42403: CALL_OW 351
42407: OR
42408: IFFALSE 42414
// exit ;
42410: POP
42411: POP
42412: GO 42721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42414: LD_ADDR_VAR 0 8
42418: PUSH
42419: LD_VAR 0 12
42423: PUSH
42424: LD_VAR 0 7
42428: ARRAY
42429: PUSH
42430: LD_INT 1
42432: ARRAY
42433: PPUSH
42434: LD_VAR 0 12
42438: PUSH
42439: LD_VAR 0 7
42443: ARRAY
42444: PUSH
42445: LD_INT 2
42447: ARRAY
42448: PPUSH
42449: CALL_OW 546
42453: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42454: LD_VAR 0 8
42458: PUSH
42459: LD_INT 1
42461: ARRAY
42462: PUSH
42463: LD_VAR 0 8
42467: PUSH
42468: LD_INT 2
42470: ARRAY
42471: PUSH
42472: LD_VAR 0 13
42476: PUSH
42477: LD_INT 2
42479: PLUS
42480: GREATER
42481: OR
42482: PUSH
42483: LD_VAR 0 8
42487: PUSH
42488: LD_INT 2
42490: ARRAY
42491: PUSH
42492: LD_VAR 0 13
42496: PUSH
42497: LD_INT 2
42499: MINUS
42500: LESS
42501: OR
42502: PUSH
42503: LD_VAR 0 8
42507: PUSH
42508: LD_INT 3
42510: ARRAY
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 8
42517: PUSH
42518: LD_INT 9
42520: PUSH
42521: LD_INT 10
42523: PUSH
42524: LD_INT 11
42526: PUSH
42527: LD_INT 12
42529: PUSH
42530: LD_INT 13
42532: PUSH
42533: LD_INT 16
42535: PUSH
42536: LD_INT 17
42538: PUSH
42539: LD_INT 18
42541: PUSH
42542: LD_INT 19
42544: PUSH
42545: LD_INT 20
42547: PUSH
42548: LD_INT 21
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: IN
42566: NOT
42567: OR
42568: PUSH
42569: LD_VAR 0 8
42573: PUSH
42574: LD_INT 5
42576: ARRAY
42577: NOT
42578: OR
42579: PUSH
42580: LD_VAR 0 8
42584: PUSH
42585: LD_INT 6
42587: ARRAY
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 7
42597: PUSH
42598: LD_INT 9
42600: PUSH
42601: LD_INT 10
42603: PUSH
42604: LD_INT 11
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: IN
42615: NOT
42616: OR
42617: IFFALSE 42623
// exit ;
42619: POP
42620: POP
42621: GO 42721
// end ;
42623: GO 42294
42625: POP
42626: POP
// side := GetSide ( depot ) ;
42627: LD_ADDR_VAR 0 9
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: CALL_OW 255
42641: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42642: LD_VAR 0 9
42646: PPUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: LD_INT 20
42659: PPUSH
42660: CALL 35375 0 4
42664: PUSH
42665: LD_INT 4
42667: ARRAY
42668: IFFALSE 42672
// exit ;
42670: GO 42721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42672: LD_VAR 0 2
42676: PUSH
42677: LD_INT 29
42679: PUSH
42680: LD_INT 30
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: IN
42687: PUSH
42688: LD_VAR 0 3
42692: PPUSH
42693: LD_VAR 0 4
42697: PPUSH
42698: LD_VAR 0 9
42702: PPUSH
42703: CALL_OW 440
42707: NOT
42708: AND
42709: IFFALSE 42713
// exit ;
42711: GO 42721
// result := true ;
42713: LD_ADDR_VAR 0 6
42717: PUSH
42718: LD_INT 1
42720: ST_TO_ADDR
// end ;
42721: LD_VAR 0 6
42725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42726: LD_INT 0
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
// result = [ ] ;
42786: LD_ADDR_VAR 0 7
42790: PUSH
42791: EMPTY
42792: ST_TO_ADDR
// temp_list = [ ] ;
42793: LD_ADDR_VAR 0 9
42797: PUSH
42798: EMPTY
42799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42800: LD_VAR 0 4
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 4
42819: PUSH
42820: LD_INT 5
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: IN
42831: NOT
42832: PUSH
42833: LD_VAR 0 1
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: IN
42848: PUSH
42849: LD_VAR 0 5
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: IN
42868: NOT
42869: AND
42870: OR
42871: IFFALSE 42875
// exit ;
42873: GO 61266
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42875: LD_VAR 0 1
42879: PUSH
42880: LD_INT 6
42882: PUSH
42883: LD_INT 7
42885: PUSH
42886: LD_INT 8
42888: PUSH
42889: LD_INT 13
42891: PUSH
42892: LD_INT 12
42894: PUSH
42895: LD_INT 15
42897: PUSH
42898: LD_INT 11
42900: PUSH
42901: LD_INT 14
42903: PUSH
42904: LD_INT 10
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: IN
42918: IFFALSE 42928
// btype = b_lab ;
42920: LD_ADDR_VAR 0 1
42924: PUSH
42925: LD_INT 6
42927: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42928: LD_VAR 0 6
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: IN
42947: NOT
42948: PUSH
42949: LD_VAR 0 1
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 6
42968: PUSH
42969: LD_INT 36
42971: PUSH
42972: LD_INT 4
42974: PUSH
42975: LD_INT 5
42977: PUSH
42978: LD_INT 31
42980: PUSH
42981: LD_INT 32
42983: PUSH
42984: LD_INT 33
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: IN
43000: NOT
43001: PUSH
43002: LD_VAR 0 6
43006: PUSH
43007: LD_INT 1
43009: EQUAL
43010: AND
43011: OR
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: IN
43028: NOT
43029: PUSH
43030: LD_VAR 0 6
43034: PUSH
43035: LD_INT 2
43037: EQUAL
43038: AND
43039: OR
43040: IFFALSE 43050
// mode = 0 ;
43042: LD_ADDR_VAR 0 6
43046: PUSH
43047: LD_INT 0
43049: ST_TO_ADDR
// case mode of 0 :
43050: LD_VAR 0 6
43054: PUSH
43055: LD_INT 0
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 54516
43063: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43064: LD_ADDR_VAR 0 11
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43257: LD_ADDR_VAR 0 12
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43453: LD_ADDR_VAR 0 13
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43652: LD_ADDR_VAR 0 14
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43848: LD_ADDR_VAR 0 15
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44041: LD_ADDR_VAR 0 16
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44234: LD_ADDR_VAR 0 17
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44464: LD_ADDR_VAR 0 18
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44694: LD_ADDR_VAR 0 19
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44924: LD_ADDR_VAR 0 20
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45154: LD_ADDR_VAR 0 21
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45384: LD_ADDR_VAR 0 22
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45614: LD_ADDR_VAR 0 23
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45894: LD_ADDR_VAR 0 24
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46170: LD_ADDR_VAR 0 25
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46444: LD_ADDR_VAR 0 26
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 27
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 28
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47282: LD_ADDR_VAR 0 29
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47561: LD_ADDR_VAR 0 30
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47839: LD_ADDR_VAR 0 31
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48117: LD_ADDR_VAR 0 32
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48395: LD_ADDR_VAR 0 33
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48674: LD_ADDR_VAR 0 34
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48954: LD_ADDR_VAR 0 35
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49066: LD_ADDR_VAR 0 36
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49178: LD_ADDR_VAR 0 37
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49290: LD_ADDR_VAR 0 38
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49402: LD_ADDR_VAR 0 39
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49514: LD_ADDR_VAR 0 40
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49626: LD_ADDR_VAR 0 41
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49976: LD_ADDR_VAR 0 42
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 3
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50326: LD_ADDR_VAR 0 43
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50674: LD_ADDR_VAR 0 44
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51024: LD_ADDR_VAR 0 45
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51374: LD_ADDR_VAR 0 46
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51722: LD_ADDR_VAR 0 47
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51873: LD_ADDR_VAR 0 48
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52020: LD_ADDR_VAR 0 49
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52164: LD_ADDR_VAR 0 50
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52308: LD_ADDR_VAR 0 51
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52455: LD_ADDR_VAR 0 52
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52606: LD_ADDR_VAR 0 53
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52836: LD_ADDR_VAR 0 54
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 55
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53296: LD_ADDR_VAR 0 56
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53526: LD_ADDR_VAR 0 57
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53756: LD_ADDR_VAR 0 58
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53986: LD_ADDR_VAR 0 59
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54074: LD_ADDR_VAR 0 60
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54162: LD_ADDR_VAR 0 61
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54250: LD_ADDR_VAR 0 62
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54338: LD_ADDR_VAR 0 63
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54426: LD_ADDR_VAR 0 64
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// end ; 1 :
54514: GO 60411
54516: LD_INT 1
54518: DOUBLE
54519: EQUAL
54520: IFTRUE 54524
54522: GO 57147
54524: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54525: LD_ADDR_VAR 0 11
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54569: LD_ADDR_VAR 0 12
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54610: LD_ADDR_VAR 0 13
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54650: LD_ADDR_VAR 0 14
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54691: LD_ADDR_VAR 0 15
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54735: LD_ADDR_VAR 0 16
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 17
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54825: LD_ADDR_VAR 0 18
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54866: LD_ADDR_VAR 0 19
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54906: LD_ADDR_VAR 0 20
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54947: LD_ADDR_VAR 0 21
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54991: LD_ADDR_VAR 0 22
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55037: LD_ADDR_VAR 0 23
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 3
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55081: LD_ADDR_VAR 0 24
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 4
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55122: LD_ADDR_VAR 0 25
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55162: LD_ADDR_VAR 0 26
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 4
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55203: LD_ADDR_VAR 0 27
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55247: LD_ADDR_VAR 0 28
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: NEG
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55293: LD_ADDR_VAR 0 29
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 4
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 4
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 5
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 5
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 6
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 6
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55448: LD_ADDR_VAR 0 30
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 5
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 5
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 6
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 6
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55591: LD_ADDR_VAR 0 31
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 5
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 4
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 6
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 6
55698: PUSH
55699: LD_INT 6
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 5
55708: PUSH
55709: LD_INT 6
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55730: LD_ADDR_VAR 0 32
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 6
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 6
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55873: LD_ADDR_VAR 0 33
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 4
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 4
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 5
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 6
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 6
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56028: LD_ADDR_VAR 0 34
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 4
56107: NEG
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 5
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 5
56143: NEG
56144: PUSH
56145: LD_INT 6
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 6
56155: NEG
56156: PUSH
56157: LD_INT 5
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 6
56167: NEG
56168: PUSH
56169: LD_INT 6
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56191: LD_ADDR_VAR 0 41
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56235: LD_ADDR_VAR 0 42
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56276: LD_ADDR_VAR 0 43
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56316: LD_ADDR_VAR 0 44
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56357: LD_ADDR_VAR 0 45
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56401: LD_ADDR_VAR 0 46
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56447: LD_ADDR_VAR 0 47
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 48
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56511: LD_ADDR_VAR 0 49
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56540: LD_ADDR_VAR 0 50
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56569: LD_ADDR_VAR 0 51
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56600: LD_ADDR_VAR 0 52
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56633: LD_ADDR_VAR 0 53
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56677: LD_ADDR_VAR 0 54
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56718: LD_ADDR_VAR 0 55
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56758: LD_ADDR_VAR 0 56
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56799: LD_ADDR_VAR 0 57
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56843: LD_ADDR_VAR 0 58
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56889: LD_ADDR_VAR 0 59
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56933: LD_ADDR_VAR 0 60
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56974: LD_ADDR_VAR 0 61
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57014: LD_ADDR_VAR 0 62
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57055: LD_ADDR_VAR 0 63
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57099: LD_ADDR_VAR 0 64
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// end ; 2 :
57145: GO 60411
57147: LD_INT 2
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57155
57153: GO 60410
57155: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57156: LD_ADDR_VAR 0 29
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 4
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 5
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 4
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: LD_INT 5
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 4
57589: NEG
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 5
57601: NEG
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: LD_INT 5
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: NEG
57626: PUSH
57627: LD_INT 5
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57694: LD_ADDR_VAR 0 30
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 5
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 5
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 4
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 5
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 5
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58241: LD_ADDR_VAR 0 31
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 4
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 5
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 5
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: NEG
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 4
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 5
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 5
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58791: LD_ADDR_VAR 0 32
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: NEG
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 5
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 4
58996: NEG
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 5
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 5
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 5
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 5
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59338: LD_ADDR_VAR 0 33
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: LD_INT 4
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: LD_INT 5
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: NEG
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 5
59417: NEG
59418: PUSH
59419: LD_INT 5
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 5
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: NEG
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 5
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 4
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 4
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 5
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59876: LD_ADDR_VAR 0 34
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 5
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 5
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 4
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 5
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: LD_INT 5
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 4
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 5
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: LD_INT 5
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 4
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 4
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// end ; end ;
60408: GO 60411
60410: POP
// case btype of b_depot , b_warehouse :
60411: LD_VAR 0 1
60415: PUSH
60416: LD_INT 0
60418: DOUBLE
60419: EQUAL
60420: IFTRUE 60430
60422: LD_INT 1
60424: DOUBLE
60425: EQUAL
60426: IFTRUE 60430
60428: GO 60631
60430: POP
// case nation of nation_american :
60431: LD_VAR 0 5
60435: PUSH
60436: LD_INT 1
60438: DOUBLE
60439: EQUAL
60440: IFTRUE 60444
60442: GO 60500
60444: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60445: LD_ADDR_VAR 0 9
60449: PUSH
60450: LD_VAR 0 11
60454: PUSH
60455: LD_VAR 0 12
60459: PUSH
60460: LD_VAR 0 13
60464: PUSH
60465: LD_VAR 0 14
60469: PUSH
60470: LD_VAR 0 15
60474: PUSH
60475: LD_VAR 0 16
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 4
60492: PUSH
60493: LD_INT 1
60495: PLUS
60496: ARRAY
60497: ST_TO_ADDR
60498: GO 60629
60500: LD_INT 2
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60508
60506: GO 60564
60508: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60509: LD_ADDR_VAR 0 9
60513: PUSH
60514: LD_VAR 0 17
60518: PUSH
60519: LD_VAR 0 18
60523: PUSH
60524: LD_VAR 0 19
60528: PUSH
60529: LD_VAR 0 20
60533: PUSH
60534: LD_VAR 0 21
60538: PUSH
60539: LD_VAR 0 22
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: PUSH
60552: LD_VAR 0 4
60556: PUSH
60557: LD_INT 1
60559: PLUS
60560: ARRAY
60561: ST_TO_ADDR
60562: GO 60629
60564: LD_INT 3
60566: DOUBLE
60567: EQUAL
60568: IFTRUE 60572
60570: GO 60628
60572: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60573: LD_ADDR_VAR 0 9
60577: PUSH
60578: LD_VAR 0 23
60582: PUSH
60583: LD_VAR 0 24
60587: PUSH
60588: LD_VAR 0 25
60592: PUSH
60593: LD_VAR 0 26
60597: PUSH
60598: LD_VAR 0 27
60602: PUSH
60603: LD_VAR 0 28
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: PUSH
60616: LD_VAR 0 4
60620: PUSH
60621: LD_INT 1
60623: PLUS
60624: ARRAY
60625: ST_TO_ADDR
60626: GO 60629
60628: POP
60629: GO 61184
60631: LD_INT 2
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60645
60637: LD_INT 3
60639: DOUBLE
60640: EQUAL
60641: IFTRUE 60645
60643: GO 60701
60645: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60646: LD_ADDR_VAR 0 9
60650: PUSH
60651: LD_VAR 0 29
60655: PUSH
60656: LD_VAR 0 30
60660: PUSH
60661: LD_VAR 0 31
60665: PUSH
60666: LD_VAR 0 32
60670: PUSH
60671: LD_VAR 0 33
60675: PUSH
60676: LD_VAR 0 34
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_VAR 0 4
60693: PUSH
60694: LD_INT 1
60696: PLUS
60697: ARRAY
60698: ST_TO_ADDR
60699: GO 61184
60701: LD_INT 16
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60763
60707: LD_INT 17
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60763
60713: LD_INT 18
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60763
60719: LD_INT 19
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60763
60725: LD_INT 22
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60763
60731: LD_INT 20
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60763
60737: LD_INT 21
60739: DOUBLE
60740: EQUAL
60741: IFTRUE 60763
60743: LD_INT 23
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60763
60749: LD_INT 24
60751: DOUBLE
60752: EQUAL
60753: IFTRUE 60763
60755: LD_INT 25
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60819
60763: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60764: LD_ADDR_VAR 0 9
60768: PUSH
60769: LD_VAR 0 35
60773: PUSH
60774: LD_VAR 0 36
60778: PUSH
60779: LD_VAR 0 37
60783: PUSH
60784: LD_VAR 0 38
60788: PUSH
60789: LD_VAR 0 39
60793: PUSH
60794: LD_VAR 0 40
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 4
60811: PUSH
60812: LD_INT 1
60814: PLUS
60815: ARRAY
60816: ST_TO_ADDR
60817: GO 61184
60819: LD_INT 6
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60875
60825: LD_INT 7
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60875
60831: LD_INT 8
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60875
60837: LD_INT 13
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60875
60843: LD_INT 12
60845: DOUBLE
60846: EQUAL
60847: IFTRUE 60875
60849: LD_INT 15
60851: DOUBLE
60852: EQUAL
60853: IFTRUE 60875
60855: LD_INT 11
60857: DOUBLE
60858: EQUAL
60859: IFTRUE 60875
60861: LD_INT 14
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60875
60867: LD_INT 10
60869: DOUBLE
60870: EQUAL
60871: IFTRUE 60875
60873: GO 60931
60875: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 41
60885: PUSH
60886: LD_VAR 0 42
60890: PUSH
60891: LD_VAR 0 43
60895: PUSH
60896: LD_VAR 0 44
60900: PUSH
60901: LD_VAR 0 45
60905: PUSH
60906: LD_VAR 0 46
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 4
60923: PUSH
60924: LD_INT 1
60926: PLUS
60927: ARRAY
60928: ST_TO_ADDR
60929: GO 61184
60931: LD_INT 36
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60939
60937: GO 60995
60939: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60940: LD_ADDR_VAR 0 9
60944: PUSH
60945: LD_VAR 0 47
60949: PUSH
60950: LD_VAR 0 48
60954: PUSH
60955: LD_VAR 0 49
60959: PUSH
60960: LD_VAR 0 50
60964: PUSH
60965: LD_VAR 0 51
60969: PUSH
60970: LD_VAR 0 52
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 4
60987: PUSH
60988: LD_INT 1
60990: PLUS
60991: ARRAY
60992: ST_TO_ADDR
60993: GO 61184
60995: LD_INT 4
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61021
61001: LD_INT 5
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61021
61007: LD_INT 34
61009: DOUBLE
61010: EQUAL
61011: IFTRUE 61021
61013: LD_INT 37
61015: DOUBLE
61016: EQUAL
61017: IFTRUE 61021
61019: GO 61077
61021: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61022: LD_ADDR_VAR 0 9
61026: PUSH
61027: LD_VAR 0 53
61031: PUSH
61032: LD_VAR 0 54
61036: PUSH
61037: LD_VAR 0 55
61041: PUSH
61042: LD_VAR 0 56
61046: PUSH
61047: LD_VAR 0 57
61051: PUSH
61052: LD_VAR 0 58
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: PUSH
61065: LD_VAR 0 4
61069: PUSH
61070: LD_INT 1
61072: PLUS
61073: ARRAY
61074: ST_TO_ADDR
61075: GO 61184
61077: LD_INT 31
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61127
61083: LD_INT 32
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61127
61089: LD_INT 33
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61127
61095: LD_INT 27
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61127
61101: LD_INT 26
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61127
61107: LD_INT 28
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61127
61113: LD_INT 29
61115: DOUBLE
61116: EQUAL
61117: IFTRUE 61127
61119: LD_INT 30
61121: DOUBLE
61122: EQUAL
61123: IFTRUE 61127
61125: GO 61183
61127: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61128: LD_ADDR_VAR 0 9
61132: PUSH
61133: LD_VAR 0 59
61137: PUSH
61138: LD_VAR 0 60
61142: PUSH
61143: LD_VAR 0 61
61147: PUSH
61148: LD_VAR 0 62
61152: PUSH
61153: LD_VAR 0 63
61157: PUSH
61158: LD_VAR 0 64
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: PUSH
61171: LD_VAR 0 4
61175: PUSH
61176: LD_INT 1
61178: PLUS
61179: ARRAY
61180: ST_TO_ADDR
61181: GO 61184
61183: POP
// temp_list2 = [ ] ;
61184: LD_ADDR_VAR 0 10
61188: PUSH
61189: EMPTY
61190: ST_TO_ADDR
// for i in temp_list do
61191: LD_ADDR_VAR 0 8
61195: PUSH
61196: LD_VAR 0 9
61200: PUSH
61201: FOR_IN
61202: IFFALSE 61254
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61204: LD_ADDR_VAR 0 10
61208: PUSH
61209: LD_VAR 0 10
61213: PUSH
61214: LD_VAR 0 8
61218: PUSH
61219: LD_INT 1
61221: ARRAY
61222: PUSH
61223: LD_VAR 0 2
61227: PLUS
61228: PUSH
61229: LD_VAR 0 8
61233: PUSH
61234: LD_INT 2
61236: ARRAY
61237: PUSH
61238: LD_VAR 0 3
61242: PLUS
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: EMPTY
61249: LIST
61250: ADD
61251: ST_TO_ADDR
61252: GO 61201
61254: POP
61255: POP
// result = temp_list2 ;
61256: LD_ADDR_VAR 0 7
61260: PUSH
61261: LD_VAR 0 10
61265: ST_TO_ADDR
// end ;
61266: LD_VAR 0 7
61270: RET
// export function EnemyInRange ( unit , dist ) ; begin
61271: LD_INT 0
61273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61274: LD_ADDR_VAR 0 3
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 255
61288: PPUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: CALL_OW 250
61298: PPUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 251
61308: PPUSH
61309: LD_VAR 0 2
61313: PPUSH
61314: CALL 35375 0 4
61318: PUSH
61319: LD_INT 4
61321: ARRAY
61322: ST_TO_ADDR
// end ;
61323: LD_VAR 0 3
61327: RET
// export function PlayerSeeMe ( unit ) ; begin
61328: LD_INT 0
61330: PPUSH
// result := See ( your_side , unit ) ;
61331: LD_ADDR_VAR 0 2
61335: PUSH
61336: LD_OWVAR 2
61340: PPUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: CALL_OW 292
61350: ST_TO_ADDR
// end ;
61351: LD_VAR 0 2
61355: RET
// export function ReverseDir ( unit ) ; begin
61356: LD_INT 0
61358: PPUSH
// if not unit then
61359: LD_VAR 0 1
61363: NOT
61364: IFFALSE 61368
// exit ;
61366: GO 61391
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61368: LD_ADDR_VAR 0 2
61372: PUSH
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 254
61382: PUSH
61383: LD_INT 3
61385: PLUS
61386: PUSH
61387: LD_INT 6
61389: MOD
61390: ST_TO_ADDR
// end ;
61391: LD_VAR 0 2
61395: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61396: LD_INT 0
61398: PPUSH
61399: PPUSH
61400: PPUSH
61401: PPUSH
61402: PPUSH
// if not hexes then
61403: LD_VAR 0 2
61407: NOT
61408: IFFALSE 61412
// exit ;
61410: GO 61560
// dist := 9999 ;
61412: LD_ADDR_VAR 0 5
61416: PUSH
61417: LD_INT 9999
61419: ST_TO_ADDR
// for i = 1 to hexes do
61420: LD_ADDR_VAR 0 4
61424: PUSH
61425: DOUBLE
61426: LD_INT 1
61428: DEC
61429: ST_TO_ADDR
61430: LD_VAR 0 2
61434: PUSH
61435: FOR_TO
61436: IFFALSE 61548
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61438: LD_VAR 0 1
61442: PPUSH
61443: LD_VAR 0 2
61447: PUSH
61448: LD_VAR 0 4
61452: ARRAY
61453: PUSH
61454: LD_INT 1
61456: ARRAY
61457: PPUSH
61458: LD_VAR 0 2
61462: PUSH
61463: LD_VAR 0 4
61467: ARRAY
61468: PUSH
61469: LD_INT 2
61471: ARRAY
61472: PPUSH
61473: CALL_OW 297
61477: PUSH
61478: LD_VAR 0 5
61482: LESS
61483: IFFALSE 61546
// begin hex := hexes [ i ] ;
61485: LD_ADDR_VAR 0 7
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: LD_VAR 0 4
61499: ARRAY
61500: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_VAR 0 2
61515: PUSH
61516: LD_VAR 0 4
61520: ARRAY
61521: PUSH
61522: LD_INT 1
61524: ARRAY
61525: PPUSH
61526: LD_VAR 0 2
61530: PUSH
61531: LD_VAR 0 4
61535: ARRAY
61536: PUSH
61537: LD_INT 2
61539: ARRAY
61540: PPUSH
61541: CALL_OW 297
61545: ST_TO_ADDR
// end ; end ;
61546: GO 61435
61548: POP
61549: POP
// result := hex ;
61550: LD_ADDR_VAR 0 3
61554: PUSH
61555: LD_VAR 0 7
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 3
61564: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61565: LD_INT 0
61567: PPUSH
61568: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61569: LD_VAR 0 1
61573: NOT
61574: PUSH
61575: LD_VAR 0 1
61579: PUSH
61580: LD_INT 21
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 23
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PPUSH
61604: CALL_OW 69
61608: IN
61609: NOT
61610: OR
61611: IFFALSE 61615
// exit ;
61613: GO 61662
// for i = 1 to 3 do
61615: LD_ADDR_VAR 0 3
61619: PUSH
61620: DOUBLE
61621: LD_INT 1
61623: DEC
61624: ST_TO_ADDR
61625: LD_INT 3
61627: PUSH
61628: FOR_TO
61629: IFFALSE 61660
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61631: LD_VAR 0 1
61635: PPUSH
61636: CALL_OW 250
61640: PPUSH
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 251
61650: PPUSH
61651: LD_INT 1
61653: PPUSH
61654: CALL_OW 453
61658: GO 61628
61660: POP
61661: POP
// end ;
61662: LD_VAR 0 2
61666: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61675: LD_VAR 0 1
61679: NOT
61680: PUSH
61681: LD_VAR 0 2
61685: NOT
61686: OR
61687: PUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 314
61697: OR
61698: IFFALSE 61702
// exit ;
61700: GO 62143
// x := GetX ( enemy_unit ) ;
61702: LD_ADDR_VAR 0 7
61706: PUSH
61707: LD_VAR 0 2
61711: PPUSH
61712: CALL_OW 250
61716: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61717: LD_ADDR_VAR 0 8
61721: PUSH
61722: LD_VAR 0 2
61726: PPUSH
61727: CALL_OW 251
61731: ST_TO_ADDR
// if not x or not y then
61732: LD_VAR 0 7
61736: NOT
61737: PUSH
61738: LD_VAR 0 8
61742: NOT
61743: OR
61744: IFFALSE 61748
// exit ;
61746: GO 62143
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61748: LD_ADDR_VAR 0 6
61752: PUSH
61753: LD_VAR 0 7
61757: PPUSH
61758: LD_INT 0
61760: PPUSH
61761: LD_INT 4
61763: PPUSH
61764: CALL_OW 272
61768: PUSH
61769: LD_VAR 0 8
61773: PPUSH
61774: LD_INT 0
61776: PPUSH
61777: LD_INT 4
61779: PPUSH
61780: CALL_OW 273
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_VAR 0 7
61793: PPUSH
61794: LD_INT 1
61796: PPUSH
61797: LD_INT 4
61799: PPUSH
61800: CALL_OW 272
61804: PUSH
61805: LD_VAR 0 8
61809: PPUSH
61810: LD_INT 1
61812: PPUSH
61813: LD_INT 4
61815: PPUSH
61816: CALL_OW 273
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_VAR 0 7
61829: PPUSH
61830: LD_INT 2
61832: PPUSH
61833: LD_INT 4
61835: PPUSH
61836: CALL_OW 272
61840: PUSH
61841: LD_VAR 0 8
61845: PPUSH
61846: LD_INT 2
61848: PPUSH
61849: LD_INT 4
61851: PPUSH
61852: CALL_OW 273
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_VAR 0 7
61865: PPUSH
61866: LD_INT 3
61868: PPUSH
61869: LD_INT 4
61871: PPUSH
61872: CALL_OW 272
61876: PUSH
61877: LD_VAR 0 8
61881: PPUSH
61882: LD_INT 3
61884: PPUSH
61885: LD_INT 4
61887: PPUSH
61888: CALL_OW 273
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_VAR 0 7
61901: PPUSH
61902: LD_INT 4
61904: PPUSH
61905: LD_INT 4
61907: PPUSH
61908: CALL_OW 272
61912: PUSH
61913: LD_VAR 0 8
61917: PPUSH
61918: LD_INT 4
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: CALL_OW 273
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_VAR 0 7
61937: PPUSH
61938: LD_INT 5
61940: PPUSH
61941: LD_INT 4
61943: PPUSH
61944: CALL_OW 272
61948: PUSH
61949: LD_VAR 0 8
61953: PPUSH
61954: LD_INT 5
61956: PPUSH
61957: LD_INT 4
61959: PPUSH
61960: CALL_OW 273
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: ST_TO_ADDR
// for i = tmp downto 1 do
61977: LD_ADDR_VAR 0 4
61981: PUSH
61982: DOUBLE
61983: LD_VAR 0 6
61987: INC
61988: ST_TO_ADDR
61989: LD_INT 1
61991: PUSH
61992: FOR_DOWNTO
61993: IFFALSE 62094
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61995: LD_VAR 0 6
61999: PUSH
62000: LD_VAR 0 4
62004: ARRAY
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PPUSH
62010: LD_VAR 0 6
62014: PUSH
62015: LD_VAR 0 4
62019: ARRAY
62020: PUSH
62021: LD_INT 2
62023: ARRAY
62024: PPUSH
62025: CALL_OW 488
62029: NOT
62030: PUSH
62031: LD_VAR 0 6
62035: PUSH
62036: LD_VAR 0 4
62040: ARRAY
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PPUSH
62046: LD_VAR 0 6
62050: PUSH
62051: LD_VAR 0 4
62055: ARRAY
62056: PUSH
62057: LD_INT 2
62059: ARRAY
62060: PPUSH
62061: CALL_OW 428
62065: PUSH
62066: LD_INT 0
62068: NONEQUAL
62069: OR
62070: IFFALSE 62092
// tmp := Delete ( tmp , i ) ;
62072: LD_ADDR_VAR 0 6
62076: PUSH
62077: LD_VAR 0 6
62081: PPUSH
62082: LD_VAR 0 4
62086: PPUSH
62087: CALL_OW 3
62091: ST_TO_ADDR
62092: GO 61992
62094: POP
62095: POP
// j := GetClosestHex ( unit , tmp ) ;
62096: LD_ADDR_VAR 0 5
62100: PUSH
62101: LD_VAR 0 1
62105: PPUSH
62106: LD_VAR 0 6
62110: PPUSH
62111: CALL 61396 0 2
62115: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_VAR 0 5
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 5
62134: PUSH
62135: LD_INT 2
62137: ARRAY
62138: PPUSH
62139: CALL_OW 111
// end ;
62143: LD_VAR 0 3
62147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62148: LD_INT 0
62150: PPUSH
62151: PPUSH
62152: PPUSH
// uc_side = 0 ;
62153: LD_ADDR_OWVAR 20
62157: PUSH
62158: LD_INT 0
62160: ST_TO_ADDR
// uc_nation = 0 ;
62161: LD_ADDR_OWVAR 21
62165: PUSH
62166: LD_INT 0
62168: ST_TO_ADDR
// InitHc_All ( ) ;
62169: CALL_OW 584
// InitVc ;
62173: CALL_OW 20
// if mastodonts then
62177: LD_VAR 0 6
62181: IFFALSE 62248
// for i = 1 to mastodonts do
62183: LD_ADDR_VAR 0 11
62187: PUSH
62188: DOUBLE
62189: LD_INT 1
62191: DEC
62192: ST_TO_ADDR
62193: LD_VAR 0 6
62197: PUSH
62198: FOR_TO
62199: IFFALSE 62246
// begin vc_chassis := 31 ;
62201: LD_ADDR_OWVAR 37
62205: PUSH
62206: LD_INT 31
62208: ST_TO_ADDR
// vc_control := control_rider ;
62209: LD_ADDR_OWVAR 38
62213: PUSH
62214: LD_INT 4
62216: ST_TO_ADDR
// animal := CreateVehicle ;
62217: LD_ADDR_VAR 0 12
62221: PUSH
62222: CALL_OW 45
62226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62227: LD_VAR 0 12
62231: PPUSH
62232: LD_VAR 0 8
62236: PPUSH
62237: LD_INT 0
62239: PPUSH
62240: CALL 64436 0 3
// end ;
62244: GO 62198
62246: POP
62247: POP
// if horses then
62248: LD_VAR 0 5
62252: IFFALSE 62319
// for i = 1 to horses do
62254: LD_ADDR_VAR 0 11
62258: PUSH
62259: DOUBLE
62260: LD_INT 1
62262: DEC
62263: ST_TO_ADDR
62264: LD_VAR 0 5
62268: PUSH
62269: FOR_TO
62270: IFFALSE 62317
// begin hc_class := 21 ;
62272: LD_ADDR_OWVAR 28
62276: PUSH
62277: LD_INT 21
62279: ST_TO_ADDR
// hc_gallery :=  ;
62280: LD_ADDR_OWVAR 33
62284: PUSH
62285: LD_STRING 
62287: ST_TO_ADDR
// animal := CreateHuman ;
62288: LD_ADDR_VAR 0 12
62292: PUSH
62293: CALL_OW 44
62297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62298: LD_VAR 0 12
62302: PPUSH
62303: LD_VAR 0 8
62307: PPUSH
62308: LD_INT 0
62310: PPUSH
62311: CALL 64436 0 3
// end ;
62315: GO 62269
62317: POP
62318: POP
// if birds then
62319: LD_VAR 0 1
62323: IFFALSE 62390
// for i = 1 to birds do
62325: LD_ADDR_VAR 0 11
62329: PUSH
62330: DOUBLE
62331: LD_INT 1
62333: DEC
62334: ST_TO_ADDR
62335: LD_VAR 0 1
62339: PUSH
62340: FOR_TO
62341: IFFALSE 62388
// begin hc_class = 18 ;
62343: LD_ADDR_OWVAR 28
62347: PUSH
62348: LD_INT 18
62350: ST_TO_ADDR
// hc_gallery =  ;
62351: LD_ADDR_OWVAR 33
62355: PUSH
62356: LD_STRING 
62358: ST_TO_ADDR
// animal := CreateHuman ;
62359: LD_ADDR_VAR 0 12
62363: PUSH
62364: CALL_OW 44
62368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62369: LD_VAR 0 12
62373: PPUSH
62374: LD_VAR 0 8
62378: PPUSH
62379: LD_INT 0
62381: PPUSH
62382: CALL 64436 0 3
// end ;
62386: GO 62340
62388: POP
62389: POP
// if tigers then
62390: LD_VAR 0 2
62394: IFFALSE 62478
// for i = 1 to tigers do
62396: LD_ADDR_VAR 0 11
62400: PUSH
62401: DOUBLE
62402: LD_INT 1
62404: DEC
62405: ST_TO_ADDR
62406: LD_VAR 0 2
62410: PUSH
62411: FOR_TO
62412: IFFALSE 62476
// begin hc_class = class_tiger ;
62414: LD_ADDR_OWVAR 28
62418: PUSH
62419: LD_INT 14
62421: ST_TO_ADDR
// hc_gallery =  ;
62422: LD_ADDR_OWVAR 33
62426: PUSH
62427: LD_STRING 
62429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62430: LD_ADDR_OWVAR 35
62434: PUSH
62435: LD_INT 7
62437: NEG
62438: PPUSH
62439: LD_INT 7
62441: PPUSH
62442: CALL_OW 12
62446: ST_TO_ADDR
// animal := CreateHuman ;
62447: LD_ADDR_VAR 0 12
62451: PUSH
62452: CALL_OW 44
62456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62457: LD_VAR 0 12
62461: PPUSH
62462: LD_VAR 0 8
62466: PPUSH
62467: LD_INT 0
62469: PPUSH
62470: CALL 64436 0 3
// end ;
62474: GO 62411
62476: POP
62477: POP
// if apemans then
62478: LD_VAR 0 3
62482: IFFALSE 62605
// for i = 1 to apemans do
62484: LD_ADDR_VAR 0 11
62488: PUSH
62489: DOUBLE
62490: LD_INT 1
62492: DEC
62493: ST_TO_ADDR
62494: LD_VAR 0 3
62498: PUSH
62499: FOR_TO
62500: IFFALSE 62603
// begin hc_class = class_apeman ;
62502: LD_ADDR_OWVAR 28
62506: PUSH
62507: LD_INT 12
62509: ST_TO_ADDR
// hc_gallery =  ;
62510: LD_ADDR_OWVAR 33
62514: PUSH
62515: LD_STRING 
62517: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62518: LD_ADDR_OWVAR 35
62522: PUSH
62523: LD_INT 5
62525: NEG
62526: PPUSH
62527: LD_INT 5
62529: PPUSH
62530: CALL_OW 12
62534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62535: LD_ADDR_OWVAR 31
62539: PUSH
62540: LD_INT 1
62542: PPUSH
62543: LD_INT 3
62545: PPUSH
62546: CALL_OW 12
62550: PUSH
62551: LD_INT 1
62553: PPUSH
62554: LD_INT 3
62556: PPUSH
62557: CALL_OW 12
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: ST_TO_ADDR
// animal := CreateHuman ;
62574: LD_ADDR_VAR 0 12
62578: PUSH
62579: CALL_OW 44
62583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62584: LD_VAR 0 12
62588: PPUSH
62589: LD_VAR 0 8
62593: PPUSH
62594: LD_INT 0
62596: PPUSH
62597: CALL 64436 0 3
// end ;
62601: GO 62499
62603: POP
62604: POP
// if enchidnas then
62605: LD_VAR 0 4
62609: IFFALSE 62676
// for i = 1 to enchidnas do
62611: LD_ADDR_VAR 0 11
62615: PUSH
62616: DOUBLE
62617: LD_INT 1
62619: DEC
62620: ST_TO_ADDR
62621: LD_VAR 0 4
62625: PUSH
62626: FOR_TO
62627: IFFALSE 62674
// begin hc_class = 13 ;
62629: LD_ADDR_OWVAR 28
62633: PUSH
62634: LD_INT 13
62636: ST_TO_ADDR
// hc_gallery =  ;
62637: LD_ADDR_OWVAR 33
62641: PUSH
62642: LD_STRING 
62644: ST_TO_ADDR
// animal := CreateHuman ;
62645: LD_ADDR_VAR 0 12
62649: PUSH
62650: CALL_OW 44
62654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62655: LD_VAR 0 12
62659: PPUSH
62660: LD_VAR 0 8
62664: PPUSH
62665: LD_INT 0
62667: PPUSH
62668: CALL 64436 0 3
// end ;
62672: GO 62626
62674: POP
62675: POP
// if fishes then
62676: LD_VAR 0 7
62680: IFFALSE 62747
// for i = 1 to fishes do
62682: LD_ADDR_VAR 0 11
62686: PUSH
62687: DOUBLE
62688: LD_INT 1
62690: DEC
62691: ST_TO_ADDR
62692: LD_VAR 0 7
62696: PUSH
62697: FOR_TO
62698: IFFALSE 62745
// begin hc_class = 20 ;
62700: LD_ADDR_OWVAR 28
62704: PUSH
62705: LD_INT 20
62707: ST_TO_ADDR
// hc_gallery =  ;
62708: LD_ADDR_OWVAR 33
62712: PUSH
62713: LD_STRING 
62715: ST_TO_ADDR
// animal := CreateHuman ;
62716: LD_ADDR_VAR 0 12
62720: PUSH
62721: CALL_OW 44
62725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62726: LD_VAR 0 12
62730: PPUSH
62731: LD_VAR 0 9
62735: PPUSH
62736: LD_INT 0
62738: PPUSH
62739: CALL 64436 0 3
// end ;
62743: GO 62697
62745: POP
62746: POP
// end ;
62747: LD_VAR 0 10
62751: RET
// export function WantHeal ( sci , unit ) ; begin
62752: LD_INT 0
62754: PPUSH
// if GetTaskList ( sci ) > 0 then
62755: LD_VAR 0 1
62759: PPUSH
62760: CALL_OW 437
62764: PUSH
62765: LD_INT 0
62767: GREATER
62768: IFFALSE 62838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62770: LD_VAR 0 1
62774: PPUSH
62775: CALL_OW 437
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_STRING l
62790: EQUAL
62791: PUSH
62792: LD_VAR 0 1
62796: PPUSH
62797: CALL_OW 437
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PUSH
62806: LD_INT 4
62808: ARRAY
62809: PUSH
62810: LD_VAR 0 2
62814: EQUAL
62815: AND
62816: IFFALSE 62828
// result := true else
62818: LD_ADDR_VAR 0 3
62822: PUSH
62823: LD_INT 1
62825: ST_TO_ADDR
62826: GO 62836
// result := false ;
62828: LD_ADDR_VAR 0 3
62832: PUSH
62833: LD_INT 0
62835: ST_TO_ADDR
// end else
62836: GO 62846
// result := false ;
62838: LD_ADDR_VAR 0 3
62842: PUSH
62843: LD_INT 0
62845: ST_TO_ADDR
// end ;
62846: LD_VAR 0 3
62850: RET
// export function HealTarget ( sci ) ; begin
62851: LD_INT 0
62853: PPUSH
// if not sci then
62854: LD_VAR 0 1
62858: NOT
62859: IFFALSE 62863
// exit ;
62861: GO 62928
// result := 0 ;
62863: LD_ADDR_VAR 0 2
62867: PUSH
62868: LD_INT 0
62870: ST_TO_ADDR
// if GetTaskList ( sci ) then
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 437
62880: IFFALSE 62928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 437
62891: PUSH
62892: LD_INT 1
62894: ARRAY
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_STRING l
62902: EQUAL
62903: IFFALSE 62928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62905: LD_ADDR_VAR 0 2
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 437
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: PUSH
62924: LD_INT 4
62926: ARRAY
62927: ST_TO_ADDR
// end ;
62928: LD_VAR 0 2
62932: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62933: LD_INT 0
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
// if not base_units then
62939: LD_VAR 0 1
62943: NOT
62944: IFFALSE 62948
// exit ;
62946: GO 63035
// result := false ;
62948: LD_ADDR_VAR 0 2
62952: PUSH
62953: LD_INT 0
62955: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_INT 21
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PPUSH
62976: CALL_OW 72
62980: ST_TO_ADDR
// if not tmp then
62981: LD_VAR 0 5
62985: NOT
62986: IFFALSE 62990
// exit ;
62988: GO 63035
// for i in tmp do
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_VAR 0 5
62999: PUSH
63000: FOR_IN
63001: IFFALSE 63033
// begin result := EnemyInRange ( i , 22 ) ;
63003: LD_ADDR_VAR 0 2
63007: PUSH
63008: LD_VAR 0 3
63012: PPUSH
63013: LD_INT 22
63015: PPUSH
63016: CALL 61271 0 2
63020: ST_TO_ADDR
// if result then
63021: LD_VAR 0 2
63025: IFFALSE 63031
// exit ;
63027: POP
63028: POP
63029: GO 63035
// end ;
63031: GO 63000
63033: POP
63034: POP
// end ;
63035: LD_VAR 0 2
63039: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63040: LD_INT 0
63042: PPUSH
63043: PPUSH
// if not units then
63044: LD_VAR 0 1
63048: NOT
63049: IFFALSE 63053
// exit ;
63051: GO 63123
// result := [ ] ;
63053: LD_ADDR_VAR 0 3
63057: PUSH
63058: EMPTY
63059: ST_TO_ADDR
// for i in units do
63060: LD_ADDR_VAR 0 4
63064: PUSH
63065: LD_VAR 0 1
63069: PUSH
63070: FOR_IN
63071: IFFALSE 63121
// if GetTag ( i ) = tag then
63073: LD_VAR 0 4
63077: PPUSH
63078: CALL_OW 110
63082: PUSH
63083: LD_VAR 0 2
63087: EQUAL
63088: IFFALSE 63119
// result := Insert ( result , result + 1 , i ) ;
63090: LD_ADDR_VAR 0 3
63094: PUSH
63095: LD_VAR 0 3
63099: PPUSH
63100: LD_VAR 0 3
63104: PUSH
63105: LD_INT 1
63107: PLUS
63108: PPUSH
63109: LD_VAR 0 4
63113: PPUSH
63114: CALL_OW 2
63118: ST_TO_ADDR
63119: GO 63070
63121: POP
63122: POP
// end ;
63123: LD_VAR 0 3
63127: RET
// export function IsDriver ( un ) ; begin
63128: LD_INT 0
63130: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63131: LD_ADDR_VAR 0 2
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_INT 55
63143: PUSH
63144: EMPTY
63145: LIST
63146: PPUSH
63147: CALL_OW 69
63151: IN
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 2
63157: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
// list := [ ] ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: EMPTY
63168: ST_TO_ADDR
// case d of 0 :
63169: LD_VAR 0 3
63173: PUSH
63174: LD_INT 0
63176: DOUBLE
63177: EQUAL
63178: IFTRUE 63182
63180: GO 63315
63182: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63183: LD_ADDR_VAR 0 5
63187: PUSH
63188: LD_VAR 0 1
63192: PUSH
63193: LD_INT 4
63195: MINUS
63196: PUSH
63197: LD_VAR 0 2
63201: PUSH
63202: LD_INT 4
63204: MINUS
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_INT 3
63221: MINUS
63222: PUSH
63223: LD_VAR 0 2
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PUSH
63236: LD_VAR 0 1
63240: PUSH
63241: LD_INT 4
63243: PLUS
63244: PUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 4
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 3
63265: PLUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 3
63274: PLUS
63275: PUSH
63276: LD_INT 5
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_VAR 0 2
63293: PUSH
63294: LD_INT 4
63296: PLUS
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// end ; 1 :
63313: GO 64013
63315: LD_INT 1
63317: DOUBLE
63318: EQUAL
63319: IFTRUE 63323
63321: GO 63456
63323: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63324: LD_ADDR_VAR 0 5
63328: PUSH
63329: LD_VAR 0 1
63333: PUSH
63334: LD_VAR 0 2
63338: PUSH
63339: LD_INT 4
63341: MINUS
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: PUSH
63351: LD_VAR 0 1
63355: PUSH
63356: LD_INT 3
63358: MINUS
63359: PUSH
63360: LD_VAR 0 2
63364: PUSH
63365: LD_INT 3
63367: MINUS
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: PUSH
63377: LD_VAR 0 1
63381: PUSH
63382: LD_INT 4
63384: MINUS
63385: PUSH
63386: LD_VAR 0 2
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 2
63408: PUSH
63409: LD_INT 3
63411: PLUS
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 4
63428: PLUS
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 4
63437: PLUS
63438: PUSH
63439: LD_INT 5
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// end ; 2 :
63454: GO 64013
63456: LD_INT 2
63458: DOUBLE
63459: EQUAL
63460: IFTRUE 63464
63462: GO 63593
63464: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63465: LD_ADDR_VAR 0 5
63469: PUSH
63470: LD_VAR 0 1
63474: PUSH
63475: LD_VAR 0 2
63479: PUSH
63480: LD_INT 3
63482: MINUS
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: PUSH
63492: LD_VAR 0 1
63496: PUSH
63497: LD_INT 4
63499: PLUS
63500: PUSH
63501: LD_VAR 0 2
63505: PUSH
63506: LD_INT 4
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: PUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_VAR 0 2
63523: PUSH
63524: LD_INT 4
63526: PLUS
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: PUSH
63536: LD_VAR 0 1
63540: PUSH
63541: LD_INT 3
63543: MINUS
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 4
63565: MINUS
63566: PUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_INT 4
63574: MINUS
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: ST_TO_ADDR
// end ; 3 :
63591: GO 64013
63593: LD_INT 3
63595: DOUBLE
63596: EQUAL
63597: IFTRUE 63601
63599: GO 63734
63601: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63602: LD_ADDR_VAR 0 5
63606: PUSH
63607: LD_VAR 0 1
63611: PUSH
63612: LD_INT 3
63614: PLUS
63615: PUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: PUSH
63629: LD_VAR 0 1
63633: PUSH
63634: LD_INT 4
63636: PLUS
63637: PUSH
63638: LD_VAR 0 2
63642: PUSH
63643: LD_INT 4
63645: PLUS
63646: PUSH
63647: LD_INT 5
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: PUSH
63655: LD_VAR 0 1
63659: PUSH
63660: LD_INT 4
63662: MINUS
63663: PUSH
63664: LD_VAR 0 2
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_VAR 0 2
63686: PUSH
63687: LD_INT 4
63689: MINUS
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_INT 3
63706: MINUS
63707: PUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 3
63715: MINUS
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// end ; 4 :
63732: GO 64013
63734: LD_INT 4
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 63875
63742: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63743: LD_ADDR_VAR 0 5
63747: PUSH
63748: LD_VAR 0 1
63752: PUSH
63753: LD_VAR 0 2
63757: PUSH
63758: LD_INT 4
63760: PLUS
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: PUSH
63770: LD_VAR 0 1
63774: PUSH
63775: LD_INT 3
63777: PLUS
63778: PUSH
63779: LD_VAR 0 2
63783: PUSH
63784: LD_INT 3
63786: PLUS
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 4
63803: PLUS
63804: PUSH
63805: LD_VAR 0 2
63809: PUSH
63810: LD_INT 4
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 3
63830: MINUS
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 4
63847: MINUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 4
63856: MINUS
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// end ; 5 :
63873: GO 64013
63875: LD_INT 5
63877: DOUBLE
63878: EQUAL
63879: IFTRUE 63883
63881: GO 64012
63883: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63884: LD_ADDR_VAR 0 5
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 4
63896: MINUS
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_INT 4
63923: MINUS
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: PUSH
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 4
63940: PLUS
63941: PUSH
63942: LD_VAR 0 2
63946: PUSH
63947: LD_INT 4
63949: PLUS
63950: PUSH
63951: LD_INT 5
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 3
63966: PLUS
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 4
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 3
63993: PLUS
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: ST_TO_ADDR
// end ; end ;
64010: GO 64013
64012: POP
// result := list ;
64013: LD_ADDR_VAR 0 4
64017: PUSH
64018: LD_VAR 0 5
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 4
64027: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
64032: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64033: LD_VAR 0 1
64037: NOT
64038: PUSH
64039: LD_VAR 0 2
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 2
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 4
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: IN
64062: NOT
64063: OR
64064: IFFALSE 64068
// exit ;
64066: GO 64160
// tmp := [ ] ;
64068: LD_ADDR_VAR 0 5
64072: PUSH
64073: EMPTY
64074: ST_TO_ADDR
// for i in units do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: LD_VAR 0 1
64084: PUSH
64085: FOR_IN
64086: IFFALSE 64129
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64088: LD_ADDR_VAR 0 5
64092: PUSH
64093: LD_VAR 0 5
64097: PPUSH
64098: LD_VAR 0 5
64102: PUSH
64103: LD_INT 1
64105: PLUS
64106: PPUSH
64107: LD_VAR 0 4
64111: PPUSH
64112: LD_VAR 0 2
64116: PPUSH
64117: CALL_OW 259
64121: PPUSH
64122: CALL_OW 2
64126: ST_TO_ADDR
64127: GO 64085
64129: POP
64130: POP
// if not tmp then
64131: LD_VAR 0 5
64135: NOT
64136: IFFALSE 64140
// exit ;
64138: GO 64160
// result := SortListByListDesc ( units , tmp ) ;
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 5
64154: PPUSH
64155: CALL_OW 77
64159: ST_TO_ADDR
// end ;
64160: LD_VAR 0 3
64164: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64165: LD_INT 0
64167: PPUSH
64168: PPUSH
64169: PPUSH
// result := false ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: LD_INT 0
64177: ST_TO_ADDR
// x := GetX ( building ) ;
64178: LD_ADDR_VAR 0 4
64182: PUSH
64183: LD_VAR 0 2
64187: PPUSH
64188: CALL_OW 250
64192: ST_TO_ADDR
// y := GetY ( building ) ;
64193: LD_ADDR_VAR 0 5
64197: PUSH
64198: LD_VAR 0 2
64202: PPUSH
64203: CALL_OW 251
64207: ST_TO_ADDR
// if not building or not x or not y then
64208: LD_VAR 0 2
64212: NOT
64213: PUSH
64214: LD_VAR 0 4
64218: NOT
64219: OR
64220: PUSH
64221: LD_VAR 0 5
64225: NOT
64226: OR
64227: IFFALSE 64231
// exit ;
64229: GO 64323
// if GetTaskList ( unit ) then
64231: LD_VAR 0 1
64235: PPUSH
64236: CALL_OW 437
64240: IFFALSE 64323
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64242: LD_STRING e
64244: PUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: CALL_OW 437
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: PUSH
64259: LD_INT 1
64261: ARRAY
64262: EQUAL
64263: PUSH
64264: LD_VAR 0 4
64268: PUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL_OW 437
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PUSH
64283: LD_INT 2
64285: ARRAY
64286: EQUAL
64287: AND
64288: PUSH
64289: LD_VAR 0 5
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PUSH
64308: LD_INT 3
64310: ARRAY
64311: EQUAL
64312: AND
64313: IFFALSE 64323
// result := true end ;
64315: LD_ADDR_VAR 0 3
64319: PUSH
64320: LD_INT 1
64322: ST_TO_ADDR
// end ;
64323: LD_VAR 0 3
64327: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64328: LD_INT 0
64330: PPUSH
// result := false ;
64331: LD_ADDR_VAR 0 4
64335: PUSH
64336: LD_INT 0
64338: ST_TO_ADDR
// if GetTaskList ( unit ) then
64339: LD_VAR 0 1
64343: PPUSH
64344: CALL_OW 437
64348: IFFALSE 64431
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64350: LD_STRING M
64352: PUSH
64353: LD_VAR 0 1
64357: PPUSH
64358: CALL_OW 437
64362: PUSH
64363: LD_INT 1
64365: ARRAY
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: EQUAL
64371: PUSH
64372: LD_VAR 0 2
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 437
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PUSH
64391: LD_INT 2
64393: ARRAY
64394: EQUAL
64395: AND
64396: PUSH
64397: LD_VAR 0 3
64401: PUSH
64402: LD_VAR 0 1
64406: PPUSH
64407: CALL_OW 437
64411: PUSH
64412: LD_INT 1
64414: ARRAY
64415: PUSH
64416: LD_INT 3
64418: ARRAY
64419: EQUAL
64420: AND
64421: IFFALSE 64431
// result := true ;
64423: LD_ADDR_VAR 0 4
64427: PUSH
64428: LD_INT 1
64430: ST_TO_ADDR
// end ; end ;
64431: LD_VAR 0 4
64435: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64436: LD_INT 0
64438: PPUSH
64439: PPUSH
64440: PPUSH
64441: PPUSH
// if not unit or not area then
64442: LD_VAR 0 1
64446: NOT
64447: PUSH
64448: LD_VAR 0 2
64452: NOT
64453: OR
64454: IFFALSE 64458
// exit ;
64456: GO 64622
// tmp := AreaToList ( area , i ) ;
64458: LD_ADDR_VAR 0 6
64462: PUSH
64463: LD_VAR 0 2
64467: PPUSH
64468: LD_VAR 0 5
64472: PPUSH
64473: CALL_OW 517
64477: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64478: LD_ADDR_VAR 0 5
64482: PUSH
64483: DOUBLE
64484: LD_INT 1
64486: DEC
64487: ST_TO_ADDR
64488: LD_VAR 0 6
64492: PUSH
64493: LD_INT 1
64495: ARRAY
64496: PUSH
64497: FOR_TO
64498: IFFALSE 64620
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64500: LD_ADDR_VAR 0 7
64504: PUSH
64505: LD_VAR 0 6
64509: PUSH
64510: LD_INT 1
64512: ARRAY
64513: PUSH
64514: LD_VAR 0 5
64518: ARRAY
64519: PUSH
64520: LD_VAR 0 6
64524: PUSH
64525: LD_INT 2
64527: ARRAY
64528: PUSH
64529: LD_VAR 0 5
64533: ARRAY
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64539: LD_VAR 0 7
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: PPUSH
64548: LD_VAR 0 7
64552: PUSH
64553: LD_INT 2
64555: ARRAY
64556: PPUSH
64557: CALL_OW 428
64561: PUSH
64562: LD_INT 0
64564: EQUAL
64565: IFFALSE 64618
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64567: LD_VAR 0 1
64571: PPUSH
64572: LD_VAR 0 7
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PPUSH
64581: LD_VAR 0 7
64585: PUSH
64586: LD_INT 2
64588: ARRAY
64589: PPUSH
64590: LD_VAR 0 3
64594: PPUSH
64595: CALL_OW 48
// result := IsPlaced ( unit ) ;
64599: LD_ADDR_VAR 0 4
64603: PUSH
64604: LD_VAR 0 1
64608: PPUSH
64609: CALL_OW 305
64613: ST_TO_ADDR
// exit ;
64614: POP
64615: POP
64616: GO 64622
// end ; end ;
64618: GO 64497
64620: POP
64621: POP
// end ;
64622: LD_VAR 0 4
64626: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
64631: PPUSH
// if not side or side > 8 then
64632: LD_VAR 0 1
64636: NOT
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: LD_INT 8
64645: GREATER
64646: OR
64647: IFFALSE 64651
// exit ;
64649: GO 64838
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64651: LD_ADDR_VAR 0 4
64655: PUSH
64656: LD_INT 22
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 21
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PPUSH
64682: CALL_OW 69
64686: ST_TO_ADDR
// if not tmp then
64687: LD_VAR 0 4
64691: NOT
64692: IFFALSE 64696
// exit ;
64694: GO 64838
// enable_addtolog := true ;
64696: LD_ADDR_OWVAR 81
64700: PUSH
64701: LD_INT 1
64703: ST_TO_ADDR
// AddToLog ( [ ) ;
64704: LD_STRING [
64706: PPUSH
64707: CALL_OW 561
// for i in tmp do
64711: LD_ADDR_VAR 0 3
64715: PUSH
64716: LD_VAR 0 4
64720: PUSH
64721: FOR_IN
64722: IFFALSE 64829
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64724: LD_STRING [
64726: PUSH
64727: LD_VAR 0 3
64731: PPUSH
64732: CALL_OW 266
64736: STR
64737: PUSH
64738: LD_STRING , 
64740: STR
64741: PUSH
64742: LD_VAR 0 3
64746: PPUSH
64747: CALL_OW 250
64751: STR
64752: PUSH
64753: LD_STRING , 
64755: STR
64756: PUSH
64757: LD_VAR 0 3
64761: PPUSH
64762: CALL_OW 251
64766: STR
64767: PUSH
64768: LD_STRING , 
64770: STR
64771: PUSH
64772: LD_VAR 0 3
64776: PPUSH
64777: CALL_OW 254
64781: STR
64782: PUSH
64783: LD_STRING , 
64785: STR
64786: PUSH
64787: LD_VAR 0 3
64791: PPUSH
64792: LD_INT 1
64794: PPUSH
64795: CALL_OW 268
64799: STR
64800: PUSH
64801: LD_STRING , 
64803: STR
64804: PUSH
64805: LD_VAR 0 3
64809: PPUSH
64810: LD_INT 2
64812: PPUSH
64813: CALL_OW 268
64817: STR
64818: PUSH
64819: LD_STRING ],
64821: STR
64822: PPUSH
64823: CALL_OW 561
// end ;
64827: GO 64721
64829: POP
64830: POP
// AddToLog ( ]; ) ;
64831: LD_STRING ];
64833: PPUSH
64834: CALL_OW 561
// end ;
64838: LD_VAR 0 2
64842: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64843: LD_INT 0
64845: PPUSH
64846: PPUSH
64847: PPUSH
64848: PPUSH
64849: PPUSH
// if not area or not rate or not max then
64850: LD_VAR 0 1
64854: NOT
64855: PUSH
64856: LD_VAR 0 2
64860: NOT
64861: OR
64862: PUSH
64863: LD_VAR 0 4
64867: NOT
64868: OR
64869: IFFALSE 64873
// exit ;
64871: GO 65065
// while 1 do
64873: LD_INT 1
64875: IFFALSE 65065
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64877: LD_ADDR_VAR 0 9
64881: PUSH
64882: LD_VAR 0 1
64886: PPUSH
64887: LD_INT 1
64889: PPUSH
64890: CALL_OW 287
64894: PUSH
64895: LD_INT 10
64897: MUL
64898: ST_TO_ADDR
// r := rate / 10 ;
64899: LD_ADDR_VAR 0 7
64903: PUSH
64904: LD_VAR 0 2
64908: PUSH
64909: LD_INT 10
64911: DIVREAL
64912: ST_TO_ADDR
// time := 1 1$00 ;
64913: LD_ADDR_VAR 0 8
64917: PUSH
64918: LD_INT 2100
64920: ST_TO_ADDR
// if amount < min then
64921: LD_VAR 0 9
64925: PUSH
64926: LD_VAR 0 3
64930: LESS
64931: IFFALSE 64949
// r := r * 2 else
64933: LD_ADDR_VAR 0 7
64937: PUSH
64938: LD_VAR 0 7
64942: PUSH
64943: LD_INT 2
64945: MUL
64946: ST_TO_ADDR
64947: GO 64975
// if amount > max then
64949: LD_VAR 0 9
64953: PUSH
64954: LD_VAR 0 4
64958: GREATER
64959: IFFALSE 64975
// r := r / 2 ;
64961: LD_ADDR_VAR 0 7
64965: PUSH
64966: LD_VAR 0 7
64970: PUSH
64971: LD_INT 2
64973: DIVREAL
64974: ST_TO_ADDR
// time := time / r ;
64975: LD_ADDR_VAR 0 8
64979: PUSH
64980: LD_VAR 0 8
64984: PUSH
64985: LD_VAR 0 7
64989: DIVREAL
64990: ST_TO_ADDR
// if time < 0 then
64991: LD_VAR 0 8
64995: PUSH
64996: LD_INT 0
64998: LESS
64999: IFFALSE 65016
// time := time * - 1 ;
65001: LD_ADDR_VAR 0 8
65005: PUSH
65006: LD_VAR 0 8
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: MUL
65015: ST_TO_ADDR
// wait ( time ) ;
65016: LD_VAR 0 8
65020: PPUSH
65021: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65025: LD_INT 35
65027: PPUSH
65028: LD_INT 875
65030: PPUSH
65031: CALL_OW 12
65035: PPUSH
65036: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65040: LD_INT 1
65042: PPUSH
65043: LD_INT 5
65045: PPUSH
65046: CALL_OW 12
65050: PPUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: LD_INT 1
65058: PPUSH
65059: CALL_OW 55
// end ;
65063: GO 64873
// end ;
65065: LD_VAR 0 5
65069: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65070: LD_INT 0
65072: PPUSH
65073: PPUSH
65074: PPUSH
65075: PPUSH
65076: PPUSH
65077: PPUSH
65078: PPUSH
65079: PPUSH
// if not turrets or not factories then
65080: LD_VAR 0 1
65084: NOT
65085: PUSH
65086: LD_VAR 0 2
65090: NOT
65091: OR
65092: IFFALSE 65096
// exit ;
65094: GO 65403
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65096: LD_ADDR_VAR 0 10
65100: PUSH
65101: LD_INT 5
65103: PUSH
65104: LD_INT 6
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: LD_INT 5
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 24
65138: PUSH
65139: LD_INT 25
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 23
65148: PUSH
65149: LD_INT 27
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 42
65162: PUSH
65163: LD_INT 43
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 44
65172: PUSH
65173: LD_INT 46
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 45
65182: PUSH
65183: LD_INT 47
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: ST_TO_ADDR
// result := [ ] ;
65200: LD_ADDR_VAR 0 3
65204: PUSH
65205: EMPTY
65206: ST_TO_ADDR
// for i in turrets do
65207: LD_ADDR_VAR 0 4
65211: PUSH
65212: LD_VAR 0 1
65216: PUSH
65217: FOR_IN
65218: IFFALSE 65401
// begin nat := GetNation ( i ) ;
65220: LD_ADDR_VAR 0 7
65224: PUSH
65225: LD_VAR 0 4
65229: PPUSH
65230: CALL_OW 248
65234: ST_TO_ADDR
// weapon := 0 ;
65235: LD_ADDR_VAR 0 8
65239: PUSH
65240: LD_INT 0
65242: ST_TO_ADDR
// if not nat then
65243: LD_VAR 0 7
65247: NOT
65248: IFFALSE 65252
// continue ;
65250: GO 65217
// for j in list [ nat ] do
65252: LD_ADDR_VAR 0 5
65256: PUSH
65257: LD_VAR 0 10
65261: PUSH
65262: LD_VAR 0 7
65266: ARRAY
65267: PUSH
65268: FOR_IN
65269: IFFALSE 65310
// if GetBWeapon ( i ) = j [ 1 ] then
65271: LD_VAR 0 4
65275: PPUSH
65276: CALL_OW 269
65280: PUSH
65281: LD_VAR 0 5
65285: PUSH
65286: LD_INT 1
65288: ARRAY
65289: EQUAL
65290: IFFALSE 65308
// begin weapon := j [ 2 ] ;
65292: LD_ADDR_VAR 0 8
65296: PUSH
65297: LD_VAR 0 5
65301: PUSH
65302: LD_INT 2
65304: ARRAY
65305: ST_TO_ADDR
// break ;
65306: GO 65310
// end ;
65308: GO 65268
65310: POP
65311: POP
// if not weapon then
65312: LD_VAR 0 8
65316: NOT
65317: IFFALSE 65321
// continue ;
65319: GO 65217
// for k in factories do
65321: LD_ADDR_VAR 0 6
65325: PUSH
65326: LD_VAR 0 2
65330: PUSH
65331: FOR_IN
65332: IFFALSE 65397
// begin weapons := AvailableWeaponList ( k ) ;
65334: LD_ADDR_VAR 0 9
65338: PUSH
65339: LD_VAR 0 6
65343: PPUSH
65344: CALL_OW 478
65348: ST_TO_ADDR
// if not weapons then
65349: LD_VAR 0 9
65353: NOT
65354: IFFALSE 65358
// continue ;
65356: GO 65331
// if weapon in weapons then
65358: LD_VAR 0 8
65362: PUSH
65363: LD_VAR 0 9
65367: IN
65368: IFFALSE 65395
// begin result := [ i , weapon ] ;
65370: LD_ADDR_VAR 0 3
65374: PUSH
65375: LD_VAR 0 4
65379: PUSH
65380: LD_VAR 0 8
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: ST_TO_ADDR
// exit ;
65389: POP
65390: POP
65391: POP
65392: POP
65393: GO 65403
// end ; end ;
65395: GO 65331
65397: POP
65398: POP
// end ;
65399: GO 65217
65401: POP
65402: POP
// end ;
65403: LD_VAR 0 3
65407: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65408: LD_INT 0
65410: PPUSH
// if not side or side > 8 then
65411: LD_VAR 0 3
65415: NOT
65416: PUSH
65417: LD_VAR 0 3
65421: PUSH
65422: LD_INT 8
65424: GREATER
65425: OR
65426: IFFALSE 65430
// exit ;
65428: GO 65489
// if not range then
65430: LD_VAR 0 4
65434: NOT
65435: IFFALSE 65446
// range := - 12 ;
65437: LD_ADDR_VAR 0 4
65441: PUSH
65442: LD_INT 12
65444: NEG
65445: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65446: LD_VAR 0 1
65450: PPUSH
65451: LD_VAR 0 2
65455: PPUSH
65456: LD_VAR 0 3
65460: PPUSH
65461: LD_VAR 0 4
65465: PPUSH
65466: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65470: LD_VAR 0 1
65474: PPUSH
65475: LD_VAR 0 2
65479: PPUSH
65480: LD_VAR 0 3
65484: PPUSH
65485: CALL_OW 331
// end ;
65489: LD_VAR 0 5
65493: RET
// export function Video ( mode ) ; begin
65494: LD_INT 0
65496: PPUSH
// ingame_video = mode ;
65497: LD_ADDR_OWVAR 52
65501: PUSH
65502: LD_VAR 0 1
65506: ST_TO_ADDR
// interface_hidden = mode ;
65507: LD_ADDR_OWVAR 54
65511: PUSH
65512: LD_VAR 0 1
65516: ST_TO_ADDR
// end ;
65517: LD_VAR 0 2
65521: RET
// export function Join ( array , element ) ; begin
65522: LD_INT 0
65524: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65525: LD_ADDR_VAR 0 3
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: LD_VAR 0 1
65539: PUSH
65540: LD_INT 1
65542: PLUS
65543: PPUSH
65544: LD_VAR 0 2
65548: PPUSH
65549: CALL_OW 1
65553: ST_TO_ADDR
// end ;
65554: LD_VAR 0 3
65558: RET
// export function JoinUnion ( array , element ) ; begin
65559: LD_INT 0
65561: PPUSH
// result := array union element ;
65562: LD_ADDR_VAR 0 3
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_VAR 0 2
65576: UNION
65577: ST_TO_ADDR
// end ;
65578: LD_VAR 0 3
65582: RET
// export function GetBehemoths ( side ) ; begin
65583: LD_INT 0
65585: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65586: LD_ADDR_VAR 0 2
65590: PUSH
65591: LD_INT 22
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 31
65605: PUSH
65606: LD_INT 25
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PPUSH
65617: CALL_OW 69
65621: ST_TO_ADDR
// end ;
65622: LD_VAR 0 2
65626: RET
// export function Shuffle ( array ) ; var i , index ; begin
65627: LD_INT 0
65629: PPUSH
65630: PPUSH
65631: PPUSH
// result := [ ] ;
65632: LD_ADDR_VAR 0 2
65636: PUSH
65637: EMPTY
65638: ST_TO_ADDR
// if not array then
65639: LD_VAR 0 1
65643: NOT
65644: IFFALSE 65648
// exit ;
65646: GO 65747
// Randomize ;
65648: CALL_OW 10
// for i = array downto 1 do
65652: LD_ADDR_VAR 0 3
65656: PUSH
65657: DOUBLE
65658: LD_VAR 0 1
65662: INC
65663: ST_TO_ADDR
65664: LD_INT 1
65666: PUSH
65667: FOR_DOWNTO
65668: IFFALSE 65745
// begin index := rand ( 1 , array ) ;
65670: LD_ADDR_VAR 0 4
65674: PUSH
65675: LD_INT 1
65677: PPUSH
65678: LD_VAR 0 1
65682: PPUSH
65683: CALL_OW 12
65687: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65688: LD_ADDR_VAR 0 2
65692: PUSH
65693: LD_VAR 0 2
65697: PPUSH
65698: LD_VAR 0 2
65702: PUSH
65703: LD_INT 1
65705: PLUS
65706: PPUSH
65707: LD_VAR 0 1
65711: PUSH
65712: LD_VAR 0 4
65716: ARRAY
65717: PPUSH
65718: CALL_OW 2
65722: ST_TO_ADDR
// array := Delete ( array , index ) ;
65723: LD_ADDR_VAR 0 1
65727: PUSH
65728: LD_VAR 0 1
65732: PPUSH
65733: LD_VAR 0 4
65737: PPUSH
65738: CALL_OW 3
65742: ST_TO_ADDR
// end ;
65743: GO 65667
65745: POP
65746: POP
// end ;
65747: LD_VAR 0 2
65751: RET
// export function GetBaseMaterials ( base ) ; begin
65752: LD_INT 0
65754: PPUSH
// result := [ 0 , 0 , 0 ] ;
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: ST_TO_ADDR
// if not base then
65774: LD_VAR 0 1
65778: NOT
65779: IFFALSE 65783
// exit ;
65781: GO 65832
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65783: LD_ADDR_VAR 0 2
65787: PUSH
65788: LD_VAR 0 1
65792: PPUSH
65793: LD_INT 1
65795: PPUSH
65796: CALL_OW 275
65800: PUSH
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_INT 2
65808: PPUSH
65809: CALL_OW 275
65813: PUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: LD_INT 3
65821: PPUSH
65822: CALL_OW 275
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: ST_TO_ADDR
// end ;
65832: LD_VAR 0 2
65836: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65837: LD_INT 0
65839: PPUSH
65840: PPUSH
// result := array ;
65841: LD_ADDR_VAR 0 3
65845: PUSH
65846: LD_VAR 0 1
65850: ST_TO_ADDR
// if size > 0 then
65851: LD_VAR 0 2
65855: PUSH
65856: LD_INT 0
65858: GREATER
65859: IFFALSE 65905
// for i := array downto size do
65861: LD_ADDR_VAR 0 4
65865: PUSH
65866: DOUBLE
65867: LD_VAR 0 1
65871: INC
65872: ST_TO_ADDR
65873: LD_VAR 0 2
65877: PUSH
65878: FOR_DOWNTO
65879: IFFALSE 65903
// result := Delete ( result , result ) ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_VAR 0 3
65890: PPUSH
65891: LD_VAR 0 3
65895: PPUSH
65896: CALL_OW 3
65900: ST_TO_ADDR
65901: GO 65878
65903: POP
65904: POP
// end ;
65905: LD_VAR 0 3
65909: RET
// export function ComExit ( unit ) ; var tmp ; begin
65910: LD_INT 0
65912: PPUSH
65913: PPUSH
// if not IsInUnit ( unit ) then
65914: LD_VAR 0 1
65918: PPUSH
65919: CALL_OW 310
65923: NOT
65924: IFFALSE 65928
// exit ;
65926: GO 65988
// tmp := IsInUnit ( unit ) ;
65928: LD_ADDR_VAR 0 3
65932: PUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 310
65942: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65943: LD_VAR 0 3
65947: PPUSH
65948: CALL_OW 247
65952: PUSH
65953: LD_INT 2
65955: EQUAL
65956: IFFALSE 65969
// ComExitVehicle ( unit ) else
65958: LD_VAR 0 1
65962: PPUSH
65963: CALL_OW 121
65967: GO 65978
// ComExitBuilding ( unit ) ;
65969: LD_VAR 0 1
65973: PPUSH
65974: CALL_OW 122
// result := tmp ;
65978: LD_ADDR_VAR 0 2
65982: PUSH
65983: LD_VAR 0 3
65987: ST_TO_ADDR
// end ;
65988: LD_VAR 0 2
65992: RET
// export function ResetHc ; begin
65993: LD_INT 0
65995: PPUSH
// InitHc ;
65996: CALL_OW 19
// hc_importance := 0 ;
66000: LD_ADDR_OWVAR 32
66004: PUSH
66005: LD_INT 0
66007: ST_TO_ADDR
// end ;
66008: LD_VAR 0 1
66012: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66013: LD_INT 0
66015: PPUSH
66016: PPUSH
66017: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66018: LD_ADDR_VAR 0 6
66022: PUSH
66023: LD_VAR 0 1
66027: PUSH
66028: LD_VAR 0 3
66032: PLUS
66033: PUSH
66034: LD_INT 2
66036: DIV
66037: ST_TO_ADDR
// if _x < 0 then
66038: LD_VAR 0 6
66042: PUSH
66043: LD_INT 0
66045: LESS
66046: IFFALSE 66063
// _x := _x * - 1 ;
66048: LD_ADDR_VAR 0 6
66052: PUSH
66053: LD_VAR 0 6
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: MUL
66062: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66063: LD_ADDR_VAR 0 7
66067: PUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_VAR 0 4
66077: PLUS
66078: PUSH
66079: LD_INT 2
66081: DIV
66082: ST_TO_ADDR
// if _y < 0 then
66083: LD_VAR 0 7
66087: PUSH
66088: LD_INT 0
66090: LESS
66091: IFFALSE 66108
// _y := _y * - 1 ;
66093: LD_ADDR_VAR 0 7
66097: PUSH
66098: LD_VAR 0 7
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: MUL
66107: ST_TO_ADDR
// result := [ _x , _y ] ;
66108: LD_ADDR_VAR 0 5
66112: PUSH
66113: LD_VAR 0 6
66117: PUSH
66118: LD_VAR 0 7
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: ST_TO_ADDR
// end ;
66127: LD_VAR 0 5
66131: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66132: LD_INT 0
66134: PPUSH
66135: PPUSH
66136: PPUSH
66137: PPUSH
// task := GetTaskList ( unit ) ;
66138: LD_ADDR_VAR 0 7
66142: PUSH
66143: LD_VAR 0 1
66147: PPUSH
66148: CALL_OW 437
66152: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66153: LD_VAR 0 7
66157: NOT
66158: PUSH
66159: LD_VAR 0 1
66163: PPUSH
66164: LD_VAR 0 2
66168: PPUSH
66169: CALL_OW 308
66173: NOT
66174: AND
66175: IFFALSE 66179
// exit ;
66177: GO 66297
// if IsInArea ( unit , area ) then
66179: LD_VAR 0 1
66183: PPUSH
66184: LD_VAR 0 2
66188: PPUSH
66189: CALL_OW 308
66193: IFFALSE 66211
// begin ComMoveToArea ( unit , goAway ) ;
66195: LD_VAR 0 1
66199: PPUSH
66200: LD_VAR 0 3
66204: PPUSH
66205: CALL_OW 113
// exit ;
66209: GO 66297
// end ; if task [ 1 ] [ 1 ] <> M then
66211: LD_VAR 0 7
66215: PUSH
66216: LD_INT 1
66218: ARRAY
66219: PUSH
66220: LD_INT 1
66222: ARRAY
66223: PUSH
66224: LD_STRING M
66226: NONEQUAL
66227: IFFALSE 66231
// exit ;
66229: GO 66297
// x := task [ 1 ] [ 2 ] ;
66231: LD_ADDR_VAR 0 5
66235: PUSH
66236: LD_VAR 0 7
66240: PUSH
66241: LD_INT 1
66243: ARRAY
66244: PUSH
66245: LD_INT 2
66247: ARRAY
66248: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66249: LD_ADDR_VAR 0 6
66253: PUSH
66254: LD_VAR 0 7
66258: PUSH
66259: LD_INT 1
66261: ARRAY
66262: PUSH
66263: LD_INT 3
66265: ARRAY
66266: ST_TO_ADDR
// if InArea ( x , y , area ) then
66267: LD_VAR 0 5
66271: PPUSH
66272: LD_VAR 0 6
66276: PPUSH
66277: LD_VAR 0 2
66281: PPUSH
66282: CALL_OW 309
66286: IFFALSE 66297
// ComStop ( unit ) ;
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 141
// end ;
66297: LD_VAR 0 4
66301: RET
// export function Abs ( value ) ; begin
66302: LD_INT 0
66304: PPUSH
// result := value ;
66305: LD_ADDR_VAR 0 2
66309: PUSH
66310: LD_VAR 0 1
66314: ST_TO_ADDR
// if value < 0 then
66315: LD_VAR 0 1
66319: PUSH
66320: LD_INT 0
66322: LESS
66323: IFFALSE 66340
// result := value * - 1 ;
66325: LD_ADDR_VAR 0 2
66329: PUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: MUL
66339: ST_TO_ADDR
// end ;
66340: LD_VAR 0 2
66344: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66345: LD_INT 0
66347: PPUSH
66348: PPUSH
66349: PPUSH
66350: PPUSH
66351: PPUSH
66352: PPUSH
66353: PPUSH
66354: PPUSH
// if not unit or not building then
66355: LD_VAR 0 1
66359: NOT
66360: PUSH
66361: LD_VAR 0 2
66365: NOT
66366: OR
66367: IFFALSE 66371
// exit ;
66369: GO 66597
// x := GetX ( building ) ;
66371: LD_ADDR_VAR 0 4
66375: PUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: CALL_OW 250
66385: ST_TO_ADDR
// y := GetY ( building ) ;
66386: LD_ADDR_VAR 0 6
66390: PUSH
66391: LD_VAR 0 2
66395: PPUSH
66396: CALL_OW 251
66400: ST_TO_ADDR
// d := GetDir ( building ) ;
66401: LD_ADDR_VAR 0 8
66405: PUSH
66406: LD_VAR 0 2
66410: PPUSH
66411: CALL_OW 254
66415: ST_TO_ADDR
// r := 4 ;
66416: LD_ADDR_VAR 0 9
66420: PUSH
66421: LD_INT 4
66423: ST_TO_ADDR
// for i := 1 to 5 do
66424: LD_ADDR_VAR 0 10
66428: PUSH
66429: DOUBLE
66430: LD_INT 1
66432: DEC
66433: ST_TO_ADDR
66434: LD_INT 5
66436: PUSH
66437: FOR_TO
66438: IFFALSE 66595
// begin _x := ShiftX ( x , d , r + i ) ;
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: LD_VAR 0 4
66449: PPUSH
66450: LD_VAR 0 8
66454: PPUSH
66455: LD_VAR 0 9
66459: PUSH
66460: LD_VAR 0 10
66464: PLUS
66465: PPUSH
66466: CALL_OW 272
66470: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66471: LD_ADDR_VAR 0 7
66475: PUSH
66476: LD_VAR 0 6
66480: PPUSH
66481: LD_VAR 0 8
66485: PPUSH
66486: LD_VAR 0 9
66490: PUSH
66491: LD_VAR 0 10
66495: PLUS
66496: PPUSH
66497: CALL_OW 273
66501: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66502: LD_VAR 0 5
66506: PPUSH
66507: LD_VAR 0 7
66511: PPUSH
66512: CALL_OW 488
66516: PUSH
66517: LD_VAR 0 5
66521: PPUSH
66522: LD_VAR 0 7
66526: PPUSH
66527: CALL_OW 428
66531: PPUSH
66532: CALL_OW 247
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: IN
66547: NOT
66548: AND
66549: IFFALSE 66593
// begin ComMoveXY ( unit , _x , _y ) ;
66551: LD_VAR 0 1
66555: PPUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: LD_VAR 0 7
66565: PPUSH
66566: CALL_OW 111
// result := [ _x , _y ] ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_VAR 0 5
66579: PUSH
66580: LD_VAR 0 7
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// exit ;
66589: POP
66590: POP
66591: GO 66597
// end ; end ;
66593: GO 66437
66595: POP
66596: POP
// end ; end_of_file
66597: LD_VAR 0 3
66601: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66602: LD_VAR 0 1
66606: PUSH
66607: LD_INT 200
66609: DOUBLE
66610: GREATEREQUAL
66611: IFFALSE 66619
66613: LD_INT 299
66615: DOUBLE
66616: LESSEQUAL
66617: IFTRUE 66621
66619: GO 66653
66621: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66622: LD_VAR 0 1
66626: PPUSH
66627: LD_VAR 0 2
66631: PPUSH
66632: LD_VAR 0 3
66636: PPUSH
66637: LD_VAR 0 4
66641: PPUSH
66642: LD_VAR 0 5
66646: PPUSH
66647: CALL 25658 0 5
66651: GO 66730
66653: LD_INT 300
66655: DOUBLE
66656: GREATEREQUAL
66657: IFFALSE 66665
66659: LD_INT 399
66661: DOUBLE
66662: LESSEQUAL
66663: IFTRUE 66667
66665: GO 66729
66667: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66668: LD_VAR 0 1
66672: PPUSH
66673: LD_VAR 0 2
66677: PPUSH
66678: LD_VAR 0 3
66682: PPUSH
66683: LD_VAR 0 4
66687: PPUSH
66688: LD_VAR 0 5
66692: PPUSH
66693: LD_VAR 0 6
66697: PPUSH
66698: LD_VAR 0 7
66702: PPUSH
66703: LD_VAR 0 8
66707: PPUSH
66708: LD_VAR 0 9
66712: PPUSH
66713: LD_VAR 0 10
66717: PPUSH
66718: LD_VAR 0 11
66722: PPUSH
66723: CALL 23564 0 11
66727: GO 66730
66729: POP
// end ;
66730: PPOPN 11
66732: END
