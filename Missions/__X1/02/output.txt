// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11684 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32824 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32824 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL_OW 94
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 2
8109: EQUAL
8110: AND
8111: PUSH
8112: LD_EXP 25
8116: PPUSH
8117: CALL_OW 302
8121: AND
8122: PUSH
8123: LD_EXP 23
8127: PPUSH
8128: CALL_OW 302
8132: AND
8133: IFFALSE 8278
8135: GO 8137
8137: DISABLE
// begin DialogueOn ;
8138: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8142: LD_INT 47
8144: PPUSH
8145: LD_INT 19
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 6
8153: NEG
8154: PPUSH
8155: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8159: LD_INT 47
8161: PPUSH
8162: LD_INT 19
8164: PPUSH
8165: LD_INT 2
8167: PPUSH
8168: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8172: LD_INT 34
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 6
8183: NEG
8184: PPUSH
8185: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8189: LD_INT 34
8191: PPUSH
8192: LD_INT 32
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8202: LD_EXP 25
8206: PPUSH
8207: LD_STRING DM-Prem-1
8209: PPUSH
8210: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8214: LD_EXP 23
8218: PPUSH
8219: LD_STRING DH-Prem-2
8221: PPUSH
8222: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8226: LD_EXP 23
8230: PPUSH
8231: LD_STRING DH-Prem-3
8233: PPUSH
8234: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8238: LD_EXP 25
8242: PPUSH
8243: LD_STRING DM-Prem-4
8245: PPUSH
8246: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8250: LD_EXP 25
8254: PPUSH
8255: LD_STRING DM-Prem-5
8257: PPUSH
8258: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8262: LD_EXP 24
8266: PPUSH
8267: LD_STRING DG-Prem-6
8269: PPUSH
8270: CALL_OW 88
// DialogueOff ;
8274: CALL_OW 7
// end ;
8278: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8279: LD_INT 5
8281: PPUSH
8282: LD_EXP 23
8286: PPUSH
8287: CALL_OW 292
8291: PUSH
8292: LD_EXP 23
8296: PPUSH
8297: LD_EXP 27
8301: PPUSH
8302: CALL_OW 296
8306: PUSH
8307: LD_INT 6
8309: LESS
8310: AND
8311: PUSH
8312: LD_EXP 8
8316: AND
8317: PUSH
8318: LD_EXP 14
8322: NOT
8323: AND
8324: IFFALSE 8462
8326: GO 8328
8328: DISABLE
8329: LD_INT 0
8331: PPUSH
// begin attackDeltaAllowed := true ;
8332: LD_ADDR_EXP 14
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// InGameOn ;
8340: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8344: LD_EXP 23
8348: PPUSH
8349: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8353: LD_INT 10
8355: PPUSH
8356: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8360: LD_EXP 27
8364: PPUSH
8365: LD_EXP 23
8369: PPUSH
8370: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8374: LD_EXP 23
8378: PPUSH
8379: LD_EXP 27
8383: PPUSH
8384: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_STRING DH-1-return
8395: PPUSH
8396: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8400: LD_EXP 27
8404: PPUSH
8405: LD_STRING DA-1-return
8407: PPUSH
8408: CALL_OW 88
// InGameOff ;
8412: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8416: LD_STRING ODelta
8418: PPUSH
8419: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 69
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8460
// SetSide ( i , 2 ) ;
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 235
8458: GO 8443
8460: POP
8461: POP
// end ;
8462: PPOPN 1
8464: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8465: LD_EXP 10
8469: PUSH
8470: LD_EXP 14
8474: NOT
8475: AND
8476: IFFALSE 8489
8478: GO 8480
8480: DISABLE
// spottedBeforeRadio := true ;
8481: LD_ADDR_EXP 6
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
8489: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8490: LD_EXP 14
8494: PUSH
8495: LD_EXP 30
8499: PPUSH
8500: CALL_OW 302
8504: AND
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: CALL_OW 255
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: AND
8518: PUSH
8519: LD_EXP 20
8523: PPUSH
8524: CALL_OW 302
8528: AND
8529: PUSH
8530: LD_EXP 10
8534: NOT
8535: AND
8536: IFFALSE 9764
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
8545: PPUSH
// begin trap := 0 ;
8546: LD_ADDR_EXP 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8554: LD_INT 420
8556: PPUSH
8557: CALL_OW 67
// DialogueOn ;
8561: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8565: LD_EXP 30
8569: PPUSH
8570: LD_STRING DMar-1-radio
8572: PPUSH
8573: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8577: LD_EXP 23
8581: PPUSH
8582: LD_STRING DH-1-radio
8584: PPUSH
8585: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8589: LD_EXP 30
8593: PPUSH
8594: LD_STRING DMar-2-radio
8596: PPUSH
8597: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8601: LD_EXP 23
8605: PPUSH
8606: LD_STRING DH-2-radio
8608: PPUSH
8609: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8613: LD_EXP 26
8617: PPUSH
8618: CALL_OW 302
8622: PUSH
8623: LD_EXP 29
8627: PPUSH
8628: CALL_OW 302
8632: OR
8633: IFFALSE 9764
// begin case Query ( Q1Trap ) of 1 :
8635: LD_STRING Q1Trap
8637: PPUSH
8638: CALL_OW 97
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8857
8651: POP
// begin if IsOk ( Kamil ) then
8652: LD_EXP 26
8656: PPUSH
8657: CALL_OW 302
8661: IFFALSE 8740
// begin Say ( Kamil , DKam-2-radio ) ;
8663: LD_EXP 26
8667: PPUSH
8668: LD_STRING DKam-2-radio
8670: PPUSH
8671: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8675: LD_EXP 26
8679: PPUSH
8680: LD_STRING DKam-3-radio
8682: PPUSH
8683: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8687: LD_EXP 20
8691: PPUSH
8692: LD_STRING DDelta-3-radio
8694: PPUSH
8695: CALL_OW 94
// dwait ( 0 0$01 ) ;
8699: LD_INT 35
8701: PPUSH
8702: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8706: LD_EXP 23
8710: PPUSH
8711: LD_STRING DH-3-radio
8713: PPUSH
8714: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8718: LD_EXP 26
8722: PPUSH
8723: LD_STRING DKam-4-radio
8725: PPUSH
8726: CALL_OW 88
// trap := 1 ;
8730: LD_ADDR_EXP 17
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// end else
8738: GO 8851
// begin Say ( Sophia , DS-1-radio ) ;
8740: LD_EXP 29
8744: PPUSH
8745: LD_STRING DS-1-radio
8747: PPUSH
8748: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8752: LD_EXP 29
8756: PPUSH
8757: LD_STRING DS-2-radio
8759: PPUSH
8760: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8764: LD_EXP 20
8768: PPUSH
8769: LD_STRING DDelta-2-radio-s
8771: PPUSH
8772: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8776: LD_EXP 29
8780: PPUSH
8781: LD_STRING DS-3-radio
8783: PPUSH
8784: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8788: LD_EXP 20
8792: PPUSH
8793: LD_STRING DDelta-3-radio-s
8795: PPUSH
8796: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8800: LD_EXP 29
8804: PPUSH
8805: LD_STRING DS-4-radio-s
8807: PPUSH
8808: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8812: LD_EXP 20
8816: PPUSH
8817: LD_STRING DDelta-4-radio-s
8819: PPUSH
8820: CALL_OW 94
// dwait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8831: LD_EXP 23
8835: PPUSH
8836: LD_STRING DH-1-trap
8838: PPUSH
8839: CALL_OW 88
// trap := 0 ;
8843: LD_ADDR_EXP 17
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// end ; DialogueOff ;
8851: CALL_OW 7
// end ; 2 :
8855: GO 8875
8857: LD_INT 2
8859: DOUBLE
8860: EQUAL
8861: IFTRUE 8865
8863: GO 8874
8865: POP
// begin DialogueOff ;
8866: CALL_OW 7
// exit ;
8870: GO 9764
// end ; end ;
8872: GO 8875
8874: POP
// if trap = 1 then
8875: LD_EXP 17
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 9335
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8885: LD_INT 64
8887: PPUSH
8888: LD_INT 32
8890: PPUSH
8891: LD_INT 2
8893: PPUSH
8894: LD_INT 8
8896: PPUSH
8897: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8901: LD_INT 64
8903: PPUSH
8904: LD_INT 32
8906: PPUSH
8907: CALL_OW 84
// tmp := [ ] ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// k := 3 ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: LD_INT 3
8925: ST_TO_ADDR
// if usForces < 3 then
8926: LD_EXP 21
8930: PUSH
8931: LD_INT 3
8933: LESS
8934: IFFALSE 8946
// k := usForces ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_EXP 21
8945: ST_TO_ADDR
// for i := 1 to k do
8946: LD_ADDR_VAR 0 1
8950: PUSH
8951: DOUBLE
8952: LD_INT 1
8954: DEC
8955: ST_TO_ADDR
8956: LD_VAR 0 2
8960: PUSH
8961: FOR_TO
8962: IFFALSE 9017
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8964: LD_ADDR_VAR 0 3
8968: PUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 1
8981: PLUS
8982: PPUSH
8983: LD_EXP 21
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: CALL_OW 1
8996: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8997: LD_ADDR_EXP 21
9001: PUSH
9002: LD_EXP 21
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ;
9015: GO 8961
9017: POP
9018: POP
// usPatrol := tmp ;
9019: LD_ADDR_EXP 16
9023: PUSH
9024: LD_VAR 0 3
9028: ST_TO_ADDR
// for i in tmp do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_VAR 0 3
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9170
// begin if IsInUnit ( i ) then
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 310
9051: IFFALSE 9062
// ComExitBuilding ( i ) ;
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 63
9069: PPUSH
9070: LD_INT 31
9072: PPUSH
9073: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 70
9084: PPUSH
9085: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9089: LD_VAR 0 1
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: LD_INT 43
9099: PPUSH
9100: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_INT 105
9111: PPUSH
9112: CALL_OW 202
// if Difficulty > 1 then
9116: LD_OWVAR 67
9120: PUSH
9121: LD_INT 1
9123: GREATER
9124: IFFALSE 9141
// AddComAgressiveMove ( i , 114 , 69 ) ;
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_INT 114
9133: PPUSH
9134: LD_INT 69
9136: PPUSH
9137: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_INT 105
9148: PPUSH
9149: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_INT 42
9160: PPUSH
9161: LD_INT 20
9163: PPUSH
9164: CALL_OW 174
// end ;
9168: GO 9039
9170: POP
9171: POP
// wait ( 0 0$8 ) ;
9172: LD_INT 280
9174: PPUSH
9175: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9179: LD_INT 64
9181: PPUSH
9182: LD_INT 32
9184: PPUSH
9185: LD_INT 2
9187: PPUSH
9188: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9192: LD_INT 35
9194: PPUSH
9195: CALL_OW 67
// for i in tmp do
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: FOR_IN
9210: IFFALSE 9241
// if IsDead ( i ) then
9212: LD_VAR 0 1
9216: PPUSH
9217: CALL_OW 301
9221: IFFALSE 9239
// tmp := tmp diff i ;
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: DIFF
9238: ST_TO_ADDR
9239: GO 9209
9241: POP
9242: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9243: LD_VAR 0 3
9247: NOT
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 95
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: LD_INT 60
9269: PUSH
9270: EMPTY
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 72
9285: PUSH
9286: LD_VAR 0 3
9290: EQUAL
9291: OR
9292: IFFALSE 9192
// if tmp then
9294: LD_VAR 0 3
9298: IFFALSE 9325
// begin usPatrol := [ ] ;
9300: LD_ADDR_EXP 16
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// usForces := usForces union tmp ;
9307: LD_ADDR_EXP 21
9311: PUSH
9312: LD_EXP 21
9316: PUSH
9317: LD_VAR 0 3
9321: UNION
9322: ST_TO_ADDR
// end else
9323: GO 9333
// trickyMove := true ;
9325: LD_ADDR_EXP 15
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// end else
9333: GO 9764
// begin tmp := [ ] ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: EMPTY
9341: ST_TO_ADDR
// k := 4 ;
9342: LD_ADDR_VAR 0 2
9346: PUSH
9347: LD_INT 4
9349: ST_TO_ADDR
// if usForces < 4 then
9350: LD_EXP 21
9354: PUSH
9355: LD_INT 4
9357: LESS
9358: IFFALSE 9370
// k := usForces ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_EXP 21
9369: ST_TO_ADDR
// for i := 1 to k do
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 2
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9441
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_VAR 0 3
9397: PPUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: PLUS
9406: PPUSH
9407: LD_EXP 21
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: CALL_OW 1
9420: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9421: LD_ADDR_EXP 21
9425: PUSH
9426: LD_EXP 21
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 3
9438: ST_TO_ADDR
// end ;
9439: GO 9385
9441: POP
9442: POP
// if Lynch then
9443: LD_EXP 20
9447: IFFALSE 9465
// tmp := tmp ^ Lynch ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 3
9458: PUSH
9459: LD_EXP 20
9463: ADD
9464: ST_TO_ADDR
// usPatrol := tmp ;
9465: LD_ADDR_EXP 16
9469: PUSH
9470: LD_VAR 0 3
9474: ST_TO_ADDR
// for i in tmp do
9475: LD_ADDR_VAR 0 1
9479: PUSH
9480: LD_VAR 0 3
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9579
// begin if IsInUnit ( i ) then
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 310
9497: IFFALSE 9508
// ComExitBuilding ( i ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_INT 69
9515: PPUSH
9516: LD_INT 15
9518: PPUSH
9519: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 55
9542: PPUSH
9543: LD_INT 43
9545: PPUSH
9546: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: LD_INT 700
9557: PPUSH
9558: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 20
9572: PPUSH
9573: CALL_OW 174
// end ;
9577: GO 9485
9579: POP
9580: POP
// repeat wait ( 0 0$1 ) ;
9581: LD_INT 35
9583: PPUSH
9584: CALL_OW 67
// for i in tmp do
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_VAR 0 3
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9630
// if IsDead ( i ) then
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 301
9610: IFFALSE 9628
// tmp := tmp diff i ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: LD_VAR 0 1
9626: DIFF
9627: ST_TO_ADDR
9628: GO 9598
9630: POP
9631: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9632: LD_VAR 0 3
9636: NOT
9637: PUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 95
9645: PUSH
9646: LD_INT 7
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 60
9658: PUSH
9659: EMPTY
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 72
9674: PUSH
9675: LD_VAR 0 3
9679: EQUAL
9680: OR
9681: IFFALSE 9581
// if not tmp then
9683: LD_VAR 0 3
9687: NOT
9688: IFFALSE 9700
// trickyMove := true else
9690: LD_ADDR_EXP 15
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
9698: GO 9707
// usPatrol := [ ] ;
9700: LD_ADDR_EXP 16
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// if tmp diff Lynch then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_EXP 20
9716: DIFF
9717: IFFALSE 9741
// usForces := usForces union ( tmp diff Lynch ) ;
9719: LD_ADDR_EXP 21
9723: PUSH
9724: LD_EXP 21
9728: PUSH
9729: LD_VAR 0 3
9733: PUSH
9734: LD_EXP 20
9738: DIFF
9739: UNION
9740: ST_TO_ADDR
// if IsOk ( Lynch ) then
9741: LD_EXP 20
9745: PPUSH
9746: CALL_OW 302
9750: IFFALSE 9764
// ComEnterUnit ( Lynch , Delta ) ;
9752: LD_EXP 20
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 120
// end ; end ; end ;
9764: PPOPN 3
9766: END
// every 0 0$1 trigger trickyMove do
9767: LD_EXP 15
9771: IFFALSE 9783
9773: GO 9775
9775: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9776: LD_STRING ACH_TRAP
9778: PPUSH
9779: CALL_OW 543
9783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 23
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: IFFALSE 9835
9825: GO 9827
9827: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9828: LD_STRING ACH_SCRAP
9830: PPUSH
9831: CALL_OW 543
9835: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9836: LD_EXP 16
9840: PPUSH
9841: LD_INT 101
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 72
9855: PUSH
9856: LD_INT 1
9858: PPUSH
9859: LD_EXP 23
9863: PPUSH
9864: CALL_OW 292
9868: AND
9869: IFFALSE 10002
9871: GO 9873
9873: DISABLE
// begin if not trap then
9874: LD_EXP 17
9878: NOT
9879: IFFALSE 9907
// begin Say ( Heike , DH-2-trap ) ;
9881: LD_EXP 23
9885: PPUSH
9886: LD_STRING DH-2-trap
9888: PPUSH
9889: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9893: LD_EXP 25
9897: PPUSH
9898: LD_STRING DM-2-trap
9900: PPUSH
9901: CALL_OW 88
// end else
9905: GO 9919
// begin Say ( Heike , DH-1-trap-a ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-trap-a
9914: PPUSH
9915: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9919: LD_INT 35
9921: PPUSH
9922: CALL_OW 67
// until trickyMove ;
9926: LD_EXP 15
9930: IFFALSE 9919
// Say ( Heike , DH-3-trap ) ;
9932: LD_EXP 23
9936: PPUSH
9937: LD_STRING DH-3-trap
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9944: LD_EXP 24
9948: PPUSH
9949: CALL_OW 302
9953: PUSH
9954: LD_EXP 28
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: IFFALSE 10002
// begin Say ( Givi , DG-3-trap ) ;
9966: LD_EXP 24
9970: PPUSH
9971: LD_STRING DG-3-trap
9973: PPUSH
9974: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9978: LD_EXP 28
9982: PPUSH
9983: LD_STRING DK-3-trap
9985: PPUSH
9986: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9990: LD_EXP 24
9994: PPUSH
9995: LD_STRING DG-4-trap
9997: PPUSH
9998: CALL_OW 88
// end ; end ;
10002: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 255
10010: PUSH
10011: LD_INT 2
10013: EQUAL
10014: PUSH
10015: LD_EXP 14
10019: AND
10020: IFFALSE 10179
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
// begin if not IsOk ( Kaia ) then
10029: LD_EXP 28
10033: PPUSH
10034: CALL_OW 302
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10179
// if tick < 5 5$00 then
10043: LD_OWVAR 1
10047: PUSH
10048: LD_INT 10500
10050: LESS
10051: IFFALSE 10060
// SetAchievement ( ACH_DELTA ) ;
10053: LD_STRING ACH_DELTA
10055: PPUSH
10056: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10060: LD_EXP 28
10064: PPUSH
10065: LD_STRING DK-1-capture
10067: PPUSH
10068: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10072: LD_EXP 23
10076: PPUSH
10077: LD_STRING DH-1-capture
10079: PPUSH
10080: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if not tmp then
10118: LD_VAR 0 2
10122: NOT
10123: IFFALSE 10127
// exit ;
10125: GO 10179
// for i in tmp do
10127: LD_ADDR_VAR 0 1
10131: PUSH
10132: LD_VAR 0 2
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10177
// begin if IsInUnit ( i ) then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 310
10149: IFFALSE 10160
// ComExitBuilding ( i ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 38
10167: PPUSH
10168: LD_INT 23
10170: PPUSH
10171: CALL_OW 174
// end ;
10175: GO 10137
10177: POP
10178: POP
// end ;
10179: PPOPN 2
10181: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 255
10189: PUSH
10190: LD_INT 2
10192: EQUAL
10193: PUSH
10194: LD_EXP 14
10198: AND
10199: IFFALSE 10231
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_STRING DA-1-capture
10215: PPUSH
10216: CALL_OW 88
// DialogueOff ;
10220: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10224: LD_STRING OTame
10226: PPUSH
10227: CALL_OW 337
// end ;
10231: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10232: LD_INT 1
10234: PPUSH
10235: LD_INT 2
10237: PPUSH
10238: CALL_OW 321
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: PUSH
10247: LD_EXP 14
10251: AND
10252: IFFALSE 10403
10254: GO 10256
10256: DISABLE
// begin DialogueOn ;
10257: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10261: LD_EXP 27
10265: PPUSH
10266: LD_STRING DA-1-ape
10268: PPUSH
10269: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10273: LD_EXP 23
10277: PPUSH
10278: LD_STRING DH-1-ape
10280: PPUSH
10281: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10285: LD_EXP 27
10289: PPUSH
10290: LD_STRING DA-2-ape
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10297: LD_EXP 27
10301: PPUSH
10302: LD_STRING DA-3-ape
10304: PPUSH
10305: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING DH-3-ape
10316: PPUSH
10317: CALL_OW 88
// DialogueOff ;
10321: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10325: LD_INT 22
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PUSH
10354: LD_INT 0
10356: EQUAL
10357: IFFALSE 10369
// SpawnApeman ( forest , 2 ) ;
10359: LD_INT 1
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10376: LD_INT 25
10378: PUSH
10379: LD_INT 12
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: LD_INT 0
10393: EQUAL
10394: IFFALSE 10369
// YouLost ( Ape ) ;
10396: LD_STRING Ape
10398: PPUSH
10399: CALL_OW 104
// end ;
10403: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10404: LD_EXP 18
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_OWVAR 67
10431: ARRAY
10432: GREATEREQUAL
10433: IFFALSE 10477
10435: GO 10437
10437: DISABLE
// begin DialogueOn ;
10438: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10442: LD_EXP 27
10446: PPUSH
10447: LD_STRING DA-1-failure
10449: PPUSH
10450: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10454: LD_EXP 27
10458: PPUSH
10459: LD_STRING DA-2-failure
10461: PPUSH
10462: CALL_OW 88
// YouLost ( Failure ) ;
10466: LD_STRING Failure
10468: PPUSH
10469: CALL_OW 104
// DialogueOff ;
10473: CALL_OW 7
// end ;
10477: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10478: LD_EXP 28
10482: PPUSH
10483: CALL_OW 256
10487: PUSH
10488: LD_INT 3
10490: LESS
10491: IFFALSE 10624
10493: GO 10495
10495: DISABLE
// begin DialogueOn ;
10496: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10500: LD_EXP 28
10504: PPUSH
10505: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10509: LD_EXP 28
10513: PPUSH
10514: LD_STRING DK-Kaiaout-1
10516: PPUSH
10517: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10521: LD_EXP 23
10525: PPUSH
10526: LD_STRING DH-Kaiaout-2
10528: PPUSH
10529: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10533: LD_EXP 24
10537: PPUSH
10538: LD_STRING DG-Kaiaout-3
10540: PPUSH
10541: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10545: LD_EXP 23
10549: PPUSH
10550: LD_STRING DH-Kaiaout-4
10552: PPUSH
10553: CALL_OW 88
// if Givi then
10557: LD_EXP 24
10561: IFFALSE 10611
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10563: LD_EXP 24
10567: PPUSH
10568: LD_STRING DG-Kaiaout-5
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10575: LD_EXP 23
10579: PPUSH
10580: LD_STRING DH-Kaiaout-6
10582: PPUSH
10583: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10587: LD_EXP 24
10591: PPUSH
10592: LD_STRING DG-Kaiaout-7
10594: PPUSH
10595: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10599: LD_EXP 23
10603: PPUSH
10604: LD_STRING DH-Kaiaout-8
10606: PPUSH
10607: CALL_OW 88
// end ; DialogueOff ;
10611: CALL_OW 7
// KillUnit ( Kaia ) ;
10615: LD_EXP 28
10619: PPUSH
10620: CALL_OW 66
// end ;
10624: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10625: LD_INT 22
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 23
10637: PUSH
10638: LD_INT 0
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_EXP 27
10658: PPUSH
10659: CALL_OW 302
10663: AND
10664: PUSH
10665: LD_EXP 27
10669: PPUSH
10670: CALL_OW 255
10674: PUSH
10675: LD_INT 2
10677: EQUAL
10678: AND
10679: IFFALSE 11624
10681: GO 10683
10683: DISABLE
10684: LD_INT 0
10686: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10687: LD_INT 22
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 34
10712: PUSH
10713: LD_INT 4
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: IFFALSE 10828
// begin Query ( QEnemyInSight ) ;
10735: LD_STRING QEnemyInSight
10737: PPUSH
10738: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10742: LD_INT 35
10744: PPUSH
10745: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10749: LD_INT 22
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 34
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: NOT
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 0
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: AND
10826: IFFALSE 10742
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 23
10845: PUSH
10846: LD_INT 0
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// InGameOn ;
10862: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_EXP 27
10884: PPUSH
10885: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10889: LD_EXP 27
10893: PPUSH
10894: LD_VAR 0 1
10898: PPUSH
10899: CALL_OW 119
// wait ( 0 0$1 ) ;
10903: LD_INT 35
10905: PPUSH
10906: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10910: LD_EXP 27
10914: PPUSH
10915: LD_STRING DA-1-tame-a
10917: PPUSH
10918: CALL_OW 88
// if IsOk ( Mike ) then
10922: LD_EXP 25
10926: PPUSH
10927: CALL_OW 302
10931: IFFALSE 10969
// begin Say ( Mike , DM-1-tame-a ) ;
10933: LD_EXP 25
10937: PPUSH
10938: LD_STRING DM-1-tame-a
10940: PPUSH
10941: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10945: LD_EXP 29
10949: PPUSH
10950: LD_STRING DS-1-tame-a
10952: PPUSH
10953: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10957: LD_EXP 25
10961: PPUSH
10962: LD_STRING DM-2-tame-a
10964: PPUSH
10965: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10969: LD_INT 105
10971: PPUSH
10972: CALL_OW 67
// PrepareFarmer ;
10976: CALL 12303 0 0
// CenterOnUnits ( Farmer ) ;
10980: LD_EXP 31
10984: PPUSH
10985: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10989: LD_EXP 31
10993: PPUSH
10994: LD_INT 105
10996: PPUSH
10997: LD_INT 59
10999: PPUSH
11000: CALL_OW 111
// AddComHold ( Farmer ) ;
11004: LD_EXP 31
11008: PPUSH
11009: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11013: LD_EXP 31
11017: PPUSH
11018: LD_STRING DF-1-end
11020: PPUSH
11021: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11025: LD_EXP 27
11029: PPUSH
11030: LD_STRING DA-1-end
11032: PPUSH
11033: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11037: LD_EXP 31
11041: PPUSH
11042: LD_STRING DF-2-end
11044: PPUSH
11045: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11049: LD_EXP 27
11053: PPUSH
11054: LD_STRING DA-2-end
11056: PPUSH
11057: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11061: LD_EXP 31
11065: PPUSH
11066: LD_STRING DF-3-end
11068: PPUSH
11069: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11073: LD_EXP 23
11077: PPUSH
11078: LD_STRING DH-3-end
11080: PPUSH
11081: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11085: LD_EXP 31
11089: PPUSH
11090: LD_STRING DF-4-end
11092: PPUSH
11093: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11097: LD_OWVAR 1
11101: PUSH
11102: LD_INT 52500
11104: PUSH
11105: LD_INT 47250
11107: PUSH
11108: LD_INT 42000
11110: PUSH
11111: LD_INT 31500
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: PUSH
11120: LD_OWVAR 67
11124: ARRAY
11125: LESSEQUAL
11126: IFFALSE 11140
// AddMedal ( med1 , 1 ) else
11128: LD_STRING med1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 101
11138: GO 11151
// AddMedal ( med1 , - 1 ) ;
11140: LD_STRING med1
11142: PPUSH
11143: LD_INT 1
11145: NEG
11146: PPUSH
11147: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11151: LD_INT 22
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PUSH
11180: LD_INT 0
11182: EQUAL
11183: PUSH
11184: LD_EXP 12
11188: NOT
11189: AND
11190: IFFALSE 11204
// AddMedal ( med2 , 1 ) else
11192: LD_STRING med2
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 101
11202: GO 11215
// AddMedal ( med2 , - 1 ) ;
11204: LD_STRING med2
11206: PPUSH
11207: LD_INT 1
11209: NEG
11210: PPUSH
11211: CALL_OW 101
// if trickyMove then
11215: LD_EXP 15
11219: IFFALSE 11233
// AddMedal ( med3 , 1 ) else
11221: LD_STRING med3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 101
11231: GO 11263
// if spottedBeforeRadio then
11233: LD_EXP 6
11237: IFFALSE 11252
// AddMedal ( med3 , - 2 ) else
11239: LD_STRING med3
11241: PPUSH
11242: LD_INT 2
11244: NEG
11245: PPUSH
11246: CALL_OW 101
11250: GO 11263
// AddMedal ( med3 , - 1 ) ;
11252: LD_STRING med3
11254: PPUSH
11255: LD_INT 1
11257: NEG
11258: PPUSH
11259: CALL_OW 101
// GiveMedals ( MAIN ) ;
11263: LD_STRING MAIN
11265: PPUSH
11266: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11270: LD_VAR 0 1
11274: PPUSH
11275: LD_STRING 02_ape
11277: PPUSH
11278: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11282: LD_ADDR_VAR 0 1
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 21
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11336: LD_EXP 23
11340: PPUSH
11341: LD_STRING 02_Heike
11343: PPUSH
11344: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_STRING 02_Aviradze
11355: PPUSH
11356: CALL_OW 38
// if Givi then
11360: LD_EXP 24
11364: IFFALSE 11378
// SaveCharacters ( Givi , 02_Givi ) ;
11366: LD_EXP 24
11370: PPUSH
11371: LD_STRING 02_Givi
11373: PPUSH
11374: CALL_OW 38
// if Mike then
11378: LD_EXP 25
11382: IFFALSE 11396
// SaveCharacters ( Mike , 02_Mike ) ;
11384: LD_EXP 25
11388: PPUSH
11389: LD_STRING 02_Mike
11391: PPUSH
11392: CALL_OW 38
// if Kamil then
11396: LD_EXP 26
11400: IFFALSE 11414
// SaveCharacters ( Kamil , 02_Kamil ) ;
11402: LD_EXP 26
11406: PPUSH
11407: LD_STRING 02_Kamil
11409: PPUSH
11410: CALL_OW 38
// if Kaia then
11414: LD_EXP 28
11418: IFFALSE 11432
// SaveCharacters ( Kaia , 02_Kaia ) ;
11420: LD_EXP 28
11424: PPUSH
11425: LD_STRING 02_Kaia
11427: PPUSH
11428: CALL_OW 38
// if Sophia then
11432: LD_EXP 29
11436: IFFALSE 11450
// SaveCharacters ( Sophia , 02_Sophia ) ;
11438: LD_EXP 29
11442: PPUSH
11443: LD_STRING 02_Sophia
11445: PPUSH
11446: CALL_OW 38
// if Markov then
11450: LD_EXP 30
11454: IFFALSE 11468
// SaveCharacters ( Markov , 02_Markov ) ;
11456: LD_EXP 30
11460: PPUSH
11461: LD_STRING 02_Markov
11463: PPUSH
11464: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11468: LD_VAR 0 1
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_EXP 27
11482: PUSH
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 25
11492: PUSH
11493: LD_EXP 26
11497: PUSH
11498: LD_EXP 29
11502: PUSH
11503: LD_EXP 28
11507: PUSH
11508: LD_EXP 30
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: DIFF
11523: IFFALSE 11588
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11525: LD_VAR 0 1
11529: PUSH
11530: LD_EXP 23
11534: PUSH
11535: LD_EXP 27
11539: PUSH
11540: LD_EXP 24
11544: PUSH
11545: LD_EXP 25
11549: PUSH
11550: LD_EXP 26
11554: PUSH
11555: LD_EXP 29
11559: PUSH
11560: LD_EXP 28
11564: PUSH
11565: LD_EXP 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING 02_others
11583: PPUSH
11584: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11588: LD_STRING enableBioCharacter(BIO_KRAY)
11590: PPUSH
11591: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11595: LD_STRING enableBioCharacter(BIO_AVIR)
11597: PPUSH
11598: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11602: LD_STRING enableBioCharacter(BIO_SOPH)
11604: PPUSH
11605: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11609: LD_STRING enableBioCharacter(BIO_KAMI)
11611: PPUSH
11612: CALL_OW 559
// YouWin ;
11616: CALL_OW 103
// InGameOff ;
11620: CALL_OW 9
// end ;
11624: PPOPN 1
11626: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11627: LD_OWVAR 1
11631: PUSH
11632: LD_EXP 13
11636: GREATER
11637: PUSH
11638: LD_EXP 4
11642: AND
11643: IFFALSE 11683
11645: GO 11647
11647: DISABLE
// begin InGameOn ;
11648: CALL_OW 8
// PrepareFarmer ;
11652: CALL 12303 0 0
// CenterNowOnUnits ( Farmer ) ;
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 87
// wait ( 0 0$2 ) ;
11665: LD_INT 70
11667: PPUSH
11668: CALL_OW 67
// YouLost ( Farmer ) ;
11672: LD_STRING Farmer
11674: PPUSH
11675: CALL_OW 104
// InGameOff ;
11679: CALL_OW 9
// end ; end_of_file
11683: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11684: LD_INT 0
11686: PPUSH
11687: PPUSH
11688: PPUSH
// uc_side := 2 ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_INT 2
11696: ST_TO_ADDR
// uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11705: LD_ADDR_EXP 23
11709: PUSH
11710: LD_STRING Heike
11712: PPUSH
11713: LD_EXP 1
11717: NOT
11718: PPUSH
11719: LD_EXP 2
11723: PPUSH
11724: CALL 32824 0 3
11728: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11729: LD_EXP 23
11733: PPUSH
11734: LD_INT 83
11736: PPUSH
11737: LD_INT 72
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11747: LD_ADDR_EXP 24
11751: PUSH
11752: LD_STRING Givi
11754: PPUSH
11755: LD_EXP 1
11759: NOT
11760: PPUSH
11761: LD_EXP 2
11765: PPUSH
11766: CALL 32824 0 3
11770: ST_TO_ADDR
// if Givi then
11771: LD_EXP 24
11775: IFFALSE 11795
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11777: LD_EXP 24
11781: PPUSH
11782: LD_INT 87
11784: PPUSH
11785: LD_INT 76
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11795: LD_ADDR_EXP 25
11799: PUSH
11800: LD_STRING Mike
11802: PPUSH
11803: LD_EXP 1
11807: NOT
11808: PPUSH
11809: LD_EXP 2
11813: PPUSH
11814: CALL 32824 0 3
11818: ST_TO_ADDR
// if Mike then
11819: LD_EXP 25
11823: IFFALSE 11843
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11825: LD_EXP 25
11829: PPUSH
11830: LD_INT 84
11832: PPUSH
11833: LD_INT 76
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11843: LD_ADDR_EXP 26
11847: PUSH
11848: LD_STRING Kamil
11850: PPUSH
11851: LD_EXP 1
11855: NOT
11856: PPUSH
11857: LD_EXP 2
11861: PPUSH
11862: CALL 32824 0 3
11866: ST_TO_ADDR
// if Kamil then
11867: LD_EXP 26
11871: IFFALSE 11891
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11873: LD_EXP 26
11877: PPUSH
11878: LD_INT 85
11880: PPUSH
11881: LD_INT 78
11883: PPUSH
11884: LD_INT 0
11886: PPUSH
11887: CALL_OW 48
// uc_side := 5 ;
11891: LD_ADDR_OWVAR 20
11895: PUSH
11896: LD_INT 5
11898: ST_TO_ADDR
// uc_nation := 2 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 2
11906: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11907: LD_ADDR_EXP 27
11911: PUSH
11912: LD_STRING Aviradze
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: LD_STRING 
11920: PPUSH
11921: CALL 32824 0 3
11925: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 106
11933: PPUSH
11934: LD_INT 38
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11944: LD_EXP 27
11948: PPUSH
11949: LD_INT 103
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11959: LD_ADDR_EXP 28
11963: PUSH
11964: LD_STRING Kaia
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: LD_STRING 
11972: PPUSH
11973: CALL 32824 0 3
11977: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11978: LD_EXP 28
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: LD_INT 34
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11996: LD_EXP 28
12000: PPUSH
12001: LD_INT 100
12003: PPUSH
12004: LD_INT 39
12006: PPUSH
12007: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12011: LD_ADDR_EXP 29
12015: PUSH
12016: LD_STRING Sophia
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: LD_STRING 
12024: PPUSH
12025: CALL 32824 0 3
12029: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12030: LD_EXP 29
12034: PPUSH
12035: LD_INT 109
12037: PPUSH
12038: LD_INT 50
12040: PPUSH
12041: LD_INT 0
12043: PPUSH
12044: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12048: LD_EXP 29
12052: PPUSH
12053: LD_INT 100
12055: PPUSH
12056: LD_INT 39
12058: PPUSH
12059: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12063: LD_ADDR_EXP 30
12067: PUSH
12068: LD_STRING Markov
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: LD_STRING 
12076: PPUSH
12077: CALL 32824 0 3
12081: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12082: LD_INT 5
12084: PPUSH
12085: LD_INT 3
12087: PPUSH
12088: LD_INT 21
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: LD_INT 42
12099: PPUSH
12100: LD_INT 90
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 60
12108: PUSH
12109: LD_INT 50
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_OWVAR 67
12122: ARRAY
12123: PPUSH
12124: CALL 241 0 7
// veh := CreateVehicle ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: CALL_OW 45
12137: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 109
12157: PPUSH
12158: LD_INT 38
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12168: LD_EXP 30
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12182: LD_EXP 28
12186: PPUSH
12187: LD_EXP 27
12191: PPUSH
12192: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12196: LD_EXP 27
12200: PPUSH
12201: LD_EXP 28
12205: PPUSH
12206: CALL_OW 119
// if not Givi or not Mike then
12210: LD_EXP 24
12214: NOT
12215: PUSH
12216: LD_EXP 25
12220: NOT
12221: OR
12222: IFFALSE 12298
// begin uc_nation := 2 ;
12224: LD_ADDR_OWVAR 21
12228: PUSH
12229: LD_INT 2
12231: ST_TO_ADDR
// uc_side := 5 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 5
12239: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 380
// un := CreateHuman ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: CALL_OW 44
12262: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 112
12270: PPUSH
12271: LD_INT 40
12273: PPUSH
12274: LD_INT 3
12276: PPUSH
12277: LD_INT 0
12279: PPUSH
12280: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_EXP 27
12293: PPUSH
12294: CALL_OW 119
// end ; end ;
12298: LD_VAR 0 1
12302: RET
// export function PrepareFarmer ; var i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// uc_side := 5 ;
12307: LD_ADDR_OWVAR 20
12311: PUSH
12312: LD_INT 5
12314: ST_TO_ADDR
// uc_nation := 2 ;
12315: LD_ADDR_OWVAR 21
12319: PUSH
12320: LD_INT 2
12322: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12323: LD_ADDR_EXP 31
12327: PUSH
12328: LD_STRING Farmer
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: LD_STRING 
12336: PPUSH
12337: CALL 32824 0 3
12341: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12342: LD_EXP 31
12346: PPUSH
12347: LD_INT 106
12349: PPUSH
12350: LD_INT 62
12352: PPUSH
12353: LD_INT 0
12355: PPUSH
12356: CALL_OW 48
// for i := 1 to 5 do
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 5
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12412
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12389: CALL_OW 44
12393: PPUSH
12394: LD_INT 105
12396: PPUSH
12397: LD_INT 64
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: LD_INT 0
12405: PPUSH
12406: CALL_OW 50
// end ;
12410: GO 12373
12412: POP
12413: POP
// end ; end_of_file
12414: LD_VAR 0 1
12418: RET
// every 2 2$20 + 0 0$10 do
12419: GO 12421
12421: DISABLE
// begin enable ;
12422: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12423: LD_INT 1
12425: PPUSH
12426: LD_INT 5
12428: PPUSH
12429: CALL_OW 12
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 55
// if tick > 6 6$00 then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 12600
12451: GREATER
12452: IFFALSE 12455
// disable ;
12454: DISABLE
// end ; end_of_file
12455: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12456: LD_VAR 0 1
12460: PUSH
12461: LD_EXP 23
12465: EQUAL
12466: IFFALSE 12475
// YouLost ( Heike ) ;
12468: LD_STRING Heike
12470: PPUSH
12471: CALL_OW 104
// if un = Aviradze then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 27
12484: EQUAL
12485: IFFALSE 12494
// YouLost ( Aviradze ) ;
12487: LD_STRING Aviradze
12489: PPUSH
12490: CALL_OW 104
// if un = usLab then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 3
12501: EQUAL
12502: IFFALSE 12511
// YouLost ( Lab ) ;
12504: LD_STRING Lab
12506: PPUSH
12507: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 22
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: PUSH
12556: LD_EXP 23
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: DIFF
12570: IN
12571: PUSH
12572: LD_EXP 4
12576: AND
12577: IFFALSE 12593
// lostCounter := lostCounter + 1 ;
12579: LD_ADDR_EXP 18
12583: PUSH
12584: LD_EXP 18
12588: PUSH
12589: LD_INT 1
12591: PLUS
12592: ST_TO_ADDR
// end ;
12593: PPOPN 1
12595: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12596: LD_INT 23
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_INT 0
12660: EQUAL
12661: AND
12662: IFFALSE 12674
12664: GO 12666
12666: DISABLE
// YouLost ( Eng ) ;
12667: LD_STRING Eng
12669: PPUSH
12670: CALL_OW 104
12674: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12675: LD_VAR 0 1
12679: PUSH
12680: LD_EXP 22
12684: IN
12685: PUSH
12686: LD_VAR 0 2
12690: PUSH
12691: LD_INT 2
12693: EQUAL
12694: AND
12695: IFFALSE 12727
// begin usSci := usSci diff un ;
12697: LD_ADDR_EXP 22
12701: PUSH
12702: LD_EXP 22
12706: PUSH
12707: LD_VAR 0 1
12711: DIFF
12712: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12713: LD_ADDR_EXP 9
12717: PUSH
12718: LD_EXP 9
12722: PUSH
12723: LD_INT 1
12725: PLUS
12726: ST_TO_ADDR
// end ; end ;
12727: PPOPN 3
12729: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 5
12746: EQUAL
12747: AND
12748: IFFALSE 12757
// YouLost ( FriendlyFire ) ;
12750: LD_STRING FriendlyFire
12752: PPUSH
12753: CALL_OW 104
// end ; end_of_file
12757: PPOPN 2
12759: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
12760: LD_INT 0
12762: PPUSH
// ar_miner := 81 ;
12763: LD_ADDR_EXP 39
12767: PUSH
12768: LD_INT 81
12770: ST_TO_ADDR
// ar_crane := 88 ;
12771: LD_ADDR_EXP 38
12775: PUSH
12776: LD_INT 88
12778: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12779: LD_ADDR_EXP 33
12783: PUSH
12784: LD_INT 89
12786: ST_TO_ADDR
// us_hack := 99 ;
12787: LD_ADDR_EXP 34
12791: PUSH
12792: LD_INT 99
12794: ST_TO_ADDR
// us_artillery := 97 ;
12795: LD_ADDR_EXP 35
12799: PUSH
12800: LD_INT 97
12802: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12803: LD_ADDR_EXP 36
12807: PUSH
12808: LD_INT 91
12810: ST_TO_ADDR
// ar_mortar := 92 ;
12811: LD_ADDR_EXP 37
12815: PUSH
12816: LD_INT 92
12818: ST_TO_ADDR
// ru_flamethrower := 93 ;
12819: LD_ADDR_EXP 40
12823: PUSH
12824: LD_INT 93
12826: ST_TO_ADDR
// ru_radar := 98 ;
12827: LD_ADDR_EXP 32
12831: PUSH
12832: LD_INT 98
12834: ST_TO_ADDR
// tech_Artillery := 80 ;
12835: LD_ADDR_EXP 41
12839: PUSH
12840: LD_INT 80
12842: ST_TO_ADDR
// tech_RadMat := 81 ;
12843: LD_ADDR_EXP 42
12847: PUSH
12848: LD_INT 81
12850: ST_TO_ADDR
// tech_BasicTools := 82 ;
12851: LD_ADDR_EXP 43
12855: PUSH
12856: LD_INT 82
12858: ST_TO_ADDR
// tech_Cargo := 83 ;
12859: LD_ADDR_EXP 44
12863: PUSH
12864: LD_INT 83
12866: ST_TO_ADDR
// tech_Track := 84 ;
12867: LD_ADDR_EXP 45
12871: PUSH
12872: LD_INT 84
12874: ST_TO_ADDR
// tech_Crane := 85 ;
12875: LD_ADDR_EXP 46
12879: PUSH
12880: LD_INT 85
12882: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12883: LD_ADDR_EXP 47
12887: PUSH
12888: LD_INT 86
12890: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12891: LD_ADDR_EXP 48
12895: PUSH
12896: LD_INT 87
12898: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12899: LD_ADDR_EXP 49
12903: PUSH
12904: LD_INT 88
12906: ST_TO_ADDR
// class_mastodont := 31 ;
12907: LD_ADDR_EXP 50
12911: PUSH
12912: LD_INT 31
12914: ST_TO_ADDR
// end ;
12915: LD_VAR 0 1
12919: RET
// every 1 do
12920: GO 12922
12922: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12923: CALL 12760 0 0
12927: END
// every 0 0$1 do
12928: GO 12930
12930: DISABLE
// begin enable ;
12931: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12932: LD_STRING updateTimer(
12934: PUSH
12935: LD_OWVAR 1
12939: STR
12940: PUSH
12941: LD_STRING );
12943: STR
12944: PPUSH
12945: CALL_OW 559
// end ;
12949: END
// export function SOS_MapStart ( ) ; begin
12950: LD_INT 0
12952: PPUSH
// if streamModeActive then
12953: LD_EXP 51
12957: IFFALSE 12966
// DefineStreamItems ( true ) ;
12959: LD_INT 1
12961: PPUSH
12962: CALL 14620 0 1
// UpdateFactoryWaypoints ( ) ;
12966: CALL 27481 0 0
// UpdateWarhouseGatheringPoints ( ) ;
12970: CALL 27734 0 0
// end ;
12974: LD_VAR 0 1
12978: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12979: LD_INT 0
12981: PPUSH
// if p2 = 100 then
12982: LD_VAR 0 2
12986: PUSH
12987: LD_INT 100
12989: EQUAL
12990: IFFALSE 13993
// begin if not StreamModeActive then
12992: LD_EXP 51
12996: NOT
12997: IFFALSE 13007
// StreamModeActive := true ;
12999: LD_ADDR_EXP 51
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// if p3 = 0 then
13007: LD_VAR 0 3
13011: PUSH
13012: LD_INT 0
13014: EQUAL
13015: IFFALSE 13021
// InitStreamMode ;
13017: CALL 14156 0 0
// if p3 = 1 then
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 1
13028: EQUAL
13029: IFFALSE 13039
// sRocket := true ;
13031: LD_ADDR_EXP 56
13035: PUSH
13036: LD_INT 1
13038: ST_TO_ADDR
// if p3 = 2 then
13039: LD_VAR 0 3
13043: PUSH
13044: LD_INT 2
13046: EQUAL
13047: IFFALSE 13057
// sSpeed := true ;
13049: LD_ADDR_EXP 55
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// if p3 = 3 then
13057: LD_VAR 0 3
13061: PUSH
13062: LD_INT 3
13064: EQUAL
13065: IFFALSE 13075
// sEngine := true ;
13067: LD_ADDR_EXP 57
13071: PUSH
13072: LD_INT 1
13074: ST_TO_ADDR
// if p3 = 4 then
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 4
13082: EQUAL
13083: IFFALSE 13093
// sSpec := true ;
13085: LD_ADDR_EXP 54
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// if p3 = 5 then
13093: LD_VAR 0 3
13097: PUSH
13098: LD_INT 5
13100: EQUAL
13101: IFFALSE 13111
// sLevel := true ;
13103: LD_ADDR_EXP 58
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// if p3 = 6 then
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 6
13118: EQUAL
13119: IFFALSE 13129
// sArmoury := true ;
13121: LD_ADDR_EXP 59
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// if p3 = 7 then
13129: LD_VAR 0 3
13133: PUSH
13134: LD_INT 7
13136: EQUAL
13137: IFFALSE 13147
// sRadar := true ;
13139: LD_ADDR_EXP 60
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// if p3 = 8 then
13147: LD_VAR 0 3
13151: PUSH
13152: LD_INT 8
13154: EQUAL
13155: IFFALSE 13165
// sBunker := true ;
13157: LD_ADDR_EXP 61
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if p3 = 9 then
13165: LD_VAR 0 3
13169: PUSH
13170: LD_INT 9
13172: EQUAL
13173: IFFALSE 13183
// sHack := true ;
13175: LD_ADDR_EXP 62
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// if p3 = 10 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 10
13190: EQUAL
13191: IFFALSE 13201
// sFire := true ;
13193: LD_ADDR_EXP 63
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// if p3 = 11 then
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 11
13208: EQUAL
13209: IFFALSE 13219
// sRefresh := true ;
13211: LD_ADDR_EXP 64
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// if p3 = 12 then
13219: LD_VAR 0 3
13223: PUSH
13224: LD_INT 12
13226: EQUAL
13227: IFFALSE 13237
// sExp := true ;
13229: LD_ADDR_EXP 65
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// if p3 = 13 then
13237: LD_VAR 0 3
13241: PUSH
13242: LD_INT 13
13244: EQUAL
13245: IFFALSE 13255
// sDepot := true ;
13247: LD_ADDR_EXP 66
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// if p3 = 14 then
13255: LD_VAR 0 3
13259: PUSH
13260: LD_INT 14
13262: EQUAL
13263: IFFALSE 13273
// sFlag := true ;
13265: LD_ADDR_EXP 67
13269: PUSH
13270: LD_INT 1
13272: ST_TO_ADDR
// if p3 = 15 then
13273: LD_VAR 0 3
13277: PUSH
13278: LD_INT 15
13280: EQUAL
13281: IFFALSE 13291
// sKamikadze := true ;
13283: LD_ADDR_EXP 75
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if p3 = 16 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 16
13298: EQUAL
13299: IFFALSE 13309
// sTroll := true ;
13301: LD_ADDR_EXP 76
13305: PUSH
13306: LD_INT 1
13308: ST_TO_ADDR
// if p3 = 17 then
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 17
13316: EQUAL
13317: IFFALSE 13327
// sSlow := true ;
13319: LD_ADDR_EXP 77
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// if p3 = 18 then
13327: LD_VAR 0 3
13331: PUSH
13332: LD_INT 18
13334: EQUAL
13335: IFFALSE 13345
// sLack := true ;
13337: LD_ADDR_EXP 78
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// if p3 = 19 then
13345: LD_VAR 0 3
13349: PUSH
13350: LD_INT 19
13352: EQUAL
13353: IFFALSE 13363
// sTank := true ;
13355: LD_ADDR_EXP 80
13359: PUSH
13360: LD_INT 1
13362: ST_TO_ADDR
// if p3 = 20 then
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 20
13370: EQUAL
13371: IFFALSE 13381
// sRemote := true ;
13373: LD_ADDR_EXP 81
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// if p3 = 21 then
13381: LD_VAR 0 3
13385: PUSH
13386: LD_INT 21
13388: EQUAL
13389: IFFALSE 13399
// sPowell := true ;
13391: LD_ADDR_EXP 82
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// if p3 = 22 then
13399: LD_VAR 0 3
13403: PUSH
13404: LD_INT 22
13406: EQUAL
13407: IFFALSE 13417
// sTeleport := true ;
13409: LD_ADDR_EXP 85
13413: PUSH
13414: LD_INT 1
13416: ST_TO_ADDR
// if p3 = 23 then
13417: LD_VAR 0 3
13421: PUSH
13422: LD_INT 23
13424: EQUAL
13425: IFFALSE 13435
// sOilTower := true ;
13427: LD_ADDR_EXP 87
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// if p3 = 24 then
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 24
13442: EQUAL
13443: IFFALSE 13453
// sShovel := true ;
13445: LD_ADDR_EXP 88
13449: PUSH
13450: LD_INT 1
13452: ST_TO_ADDR
// if p3 = 25 then
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 25
13460: EQUAL
13461: IFFALSE 13471
// sSheik := true ;
13463: LD_ADDR_EXP 89
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// if p3 = 26 then
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 26
13478: EQUAL
13479: IFFALSE 13489
// sEarthquake := true ;
13481: LD_ADDR_EXP 91
13485: PUSH
13486: LD_INT 1
13488: ST_TO_ADDR
// if p3 = 27 then
13489: LD_VAR 0 3
13493: PUSH
13494: LD_INT 27
13496: EQUAL
13497: IFFALSE 13507
// sAI := true ;
13499: LD_ADDR_EXP 92
13503: PUSH
13504: LD_INT 1
13506: ST_TO_ADDR
// if p3 = 28 then
13507: LD_VAR 0 3
13511: PUSH
13512: LD_INT 28
13514: EQUAL
13515: IFFALSE 13525
// sCargo := true ;
13517: LD_ADDR_EXP 95
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// if p3 = 29 then
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 29
13532: EQUAL
13533: IFFALSE 13543
// sDLaser := true ;
13535: LD_ADDR_EXP 96
13539: PUSH
13540: LD_INT 1
13542: ST_TO_ADDR
// if p3 = 30 then
13543: LD_VAR 0 3
13547: PUSH
13548: LD_INT 30
13550: EQUAL
13551: IFFALSE 13561
// sExchange := true ;
13553: LD_ADDR_EXP 97
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// if p3 = 31 then
13561: LD_VAR 0 3
13565: PUSH
13566: LD_INT 31
13568: EQUAL
13569: IFFALSE 13579
// sFac := true ;
13571: LD_ADDR_EXP 98
13575: PUSH
13576: LD_INT 1
13578: ST_TO_ADDR
// if p3 = 32 then
13579: LD_VAR 0 3
13583: PUSH
13584: LD_INT 32
13586: EQUAL
13587: IFFALSE 13597
// sPower := true ;
13589: LD_ADDR_EXP 99
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// if p3 = 33 then
13597: LD_VAR 0 3
13601: PUSH
13602: LD_INT 33
13604: EQUAL
13605: IFFALSE 13615
// sRandom := true ;
13607: LD_ADDR_EXP 100
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// if p3 = 34 then
13615: LD_VAR 0 3
13619: PUSH
13620: LD_INT 34
13622: EQUAL
13623: IFFALSE 13633
// sShield := true ;
13625: LD_ADDR_EXP 101
13629: PUSH
13630: LD_INT 1
13632: ST_TO_ADDR
// if p3 = 35 then
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 35
13640: EQUAL
13641: IFFALSE 13651
// sTime := true ;
13643: LD_ADDR_EXP 102
13647: PUSH
13648: LD_INT 1
13650: ST_TO_ADDR
// if p3 = 36 then
13651: LD_VAR 0 3
13655: PUSH
13656: LD_INT 36
13658: EQUAL
13659: IFFALSE 13669
// sTools := true ;
13661: LD_ADDR_EXP 103
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// if p3 = 101 then
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 101
13676: EQUAL
13677: IFFALSE 13687
// sSold := true ;
13679: LD_ADDR_EXP 68
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// if p3 = 102 then
13687: LD_VAR 0 3
13691: PUSH
13692: LD_INT 102
13694: EQUAL
13695: IFFALSE 13705
// sDiff := true ;
13697: LD_ADDR_EXP 69
13701: PUSH
13702: LD_INT 1
13704: ST_TO_ADDR
// if p3 = 103 then
13705: LD_VAR 0 3
13709: PUSH
13710: LD_INT 103
13712: EQUAL
13713: IFFALSE 13723
// sFog := true ;
13715: LD_ADDR_EXP 72
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// if p3 = 104 then
13723: LD_VAR 0 3
13727: PUSH
13728: LD_INT 104
13730: EQUAL
13731: IFFALSE 13741
// sReset := true ;
13733: LD_ADDR_EXP 73
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// if p3 = 105 then
13741: LD_VAR 0 3
13745: PUSH
13746: LD_INT 105
13748: EQUAL
13749: IFFALSE 13759
// sSun := true ;
13751: LD_ADDR_EXP 74
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// if p3 = 106 then
13759: LD_VAR 0 3
13763: PUSH
13764: LD_INT 106
13766: EQUAL
13767: IFFALSE 13777
// sTiger := true ;
13769: LD_ADDR_EXP 70
13773: PUSH
13774: LD_INT 1
13776: ST_TO_ADDR
// if p3 = 107 then
13777: LD_VAR 0 3
13781: PUSH
13782: LD_INT 107
13784: EQUAL
13785: IFFALSE 13795
// sBomb := true ;
13787: LD_ADDR_EXP 71
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// if p3 = 108 then
13795: LD_VAR 0 3
13799: PUSH
13800: LD_INT 108
13802: EQUAL
13803: IFFALSE 13813
// sWound := true ;
13805: LD_ADDR_EXP 79
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// if p3 = 109 then
13813: LD_VAR 0 3
13817: PUSH
13818: LD_INT 109
13820: EQUAL
13821: IFFALSE 13831
// sBetray := true ;
13823: LD_ADDR_EXP 83
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// if p3 = 110 then
13831: LD_VAR 0 3
13835: PUSH
13836: LD_INT 110
13838: EQUAL
13839: IFFALSE 13849
// sContamin := true ;
13841: LD_ADDR_EXP 84
13845: PUSH
13846: LD_INT 1
13848: ST_TO_ADDR
// if p3 = 111 then
13849: LD_VAR 0 3
13853: PUSH
13854: LD_INT 111
13856: EQUAL
13857: IFFALSE 13867
// sOil := true ;
13859: LD_ADDR_EXP 86
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
// if p3 = 112 then
13867: LD_VAR 0 3
13871: PUSH
13872: LD_INT 112
13874: EQUAL
13875: IFFALSE 13885
// sStu := true ;
13877: LD_ADDR_EXP 90
13881: PUSH
13882: LD_INT 1
13884: ST_TO_ADDR
// if p3 = 113 then
13885: LD_VAR 0 3
13889: PUSH
13890: LD_INT 113
13892: EQUAL
13893: IFFALSE 13903
// sBazooka := true ;
13895: LD_ADDR_EXP 93
13899: PUSH
13900: LD_INT 1
13902: ST_TO_ADDR
// if p3 = 114 then
13903: LD_VAR 0 3
13907: PUSH
13908: LD_INT 114
13910: EQUAL
13911: IFFALSE 13921
// sMortar := true ;
13913: LD_ADDR_EXP 94
13917: PUSH
13918: LD_INT 1
13920: ST_TO_ADDR
// if p3 = 115 then
13921: LD_VAR 0 3
13925: PUSH
13926: LD_INT 115
13928: EQUAL
13929: IFFALSE 13939
// sRanger := true ;
13931: LD_ADDR_EXP 104
13935: PUSH
13936: LD_INT 1
13938: ST_TO_ADDR
// if p3 = 116 then
13939: LD_VAR 0 3
13943: PUSH
13944: LD_INT 116
13946: EQUAL
13947: IFFALSE 13957
// sComputer := true ;
13949: LD_ADDR_EXP 105
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// if p3 = 117 then
13957: LD_VAR 0 3
13961: PUSH
13962: LD_INT 117
13964: EQUAL
13965: IFFALSE 13975
// s30 := true ;
13967: LD_ADDR_EXP 106
13971: PUSH
13972: LD_INT 1
13974: ST_TO_ADDR
// if p3 = 118 then
13975: LD_VAR 0 3
13979: PUSH
13980: LD_INT 118
13982: EQUAL
13983: IFFALSE 13993
// s60 := true ;
13985: LD_ADDR_EXP 107
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// end ; if p2 = 101 then
13993: LD_VAR 0 2
13997: PUSH
13998: LD_INT 101
14000: EQUAL
14001: IFFALSE 14129
// begin case p3 of 1 :
14003: LD_VAR 0 3
14007: PUSH
14008: LD_INT 1
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14023
14016: POP
// hHackUnlimitedResources ; 2 :
14017: CALL 26227 0 0
14021: GO 14129
14023: LD_INT 2
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14038
14031: POP
// hHackSetLevel10 ; 3 :
14032: CALL 26360 0 0
14036: GO 14129
14038: LD_INT 3
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14053
14046: POP
// hHackSetLevel10YourUnits ; 4 :
14047: CALL 26445 0 0
14051: GO 14129
14053: LD_INT 4
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14068
14061: POP
// hHackInvincible ; 5 :
14062: CALL 26893 0 0
14066: GO 14129
14068: LD_INT 5
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14083
14076: POP
// hHackInvisible ; 6 :
14077: CALL 27004 0 0
14081: GO 14129
14083: LD_INT 6
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14098
14091: POP
// hHackChangeYourSide ; 7 :
14092: CALL 27061 0 0
14096: GO 14129
14098: LD_INT 7
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14113
14106: POP
// hHackChangeUnitSide ; 8 :
14107: CALL 27103 0 0
14111: GO 14129
14113: LD_INT 8
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14121
14119: GO 14128
14121: POP
// hHackFog ; end ;
14122: CALL 27204 0 0
14126: GO 14129
14128: POP
// end ; end ;
14129: LD_VAR 0 7
14133: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14134: GO 14136
14136: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14137: LD_STRING initStreamRollete();
14139: PPUSH
14140: CALL_OW 559
// InitStreamMode ;
14144: CALL 14156 0 0
// DefineStreamItems ( false ) ;
14148: LD_INT 0
14150: PPUSH
14151: CALL 14620 0 1
// end ;
14155: END
// function InitStreamMode ; begin
14156: LD_INT 0
14158: PPUSH
// streamModeActive := false ;
14159: LD_ADDR_EXP 51
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// normalCounter := 36 ;
14167: LD_ADDR_EXP 52
14171: PUSH
14172: LD_INT 36
14174: ST_TO_ADDR
// hardcoreCounter := 18 ;
14175: LD_ADDR_EXP 53
14179: PUSH
14180: LD_INT 18
14182: ST_TO_ADDR
// sRocket := false ;
14183: LD_ADDR_EXP 56
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// sSpeed := false ;
14191: LD_ADDR_EXP 55
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sEngine := false ;
14199: LD_ADDR_EXP 57
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sSpec := false ;
14207: LD_ADDR_EXP 54
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sLevel := false ;
14215: LD_ADDR_EXP 58
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sArmoury := false ;
14223: LD_ADDR_EXP 59
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sRadar := false ;
14231: LD_ADDR_EXP 60
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sBunker := false ;
14239: LD_ADDR_EXP 61
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// sHack := false ;
14247: LD_ADDR_EXP 62
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sFire := false ;
14255: LD_ADDR_EXP 63
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sRefresh := false ;
14263: LD_ADDR_EXP 64
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sExp := false ;
14271: LD_ADDR_EXP 65
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sDepot := false ;
14279: LD_ADDR_EXP 66
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sFlag := false ;
14287: LD_ADDR_EXP 67
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sKamikadze := false ;
14295: LD_ADDR_EXP 75
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sTroll := false ;
14303: LD_ADDR_EXP 76
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sSlow := false ;
14311: LD_ADDR_EXP 77
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sLack := false ;
14319: LD_ADDR_EXP 78
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sTank := false ;
14327: LD_ADDR_EXP 80
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sRemote := false ;
14335: LD_ADDR_EXP 81
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sPowell := false ;
14343: LD_ADDR_EXP 82
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sTeleport := false ;
14351: LD_ADDR_EXP 85
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sOilTower := false ;
14359: LD_ADDR_EXP 87
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sShovel := false ;
14367: LD_ADDR_EXP 88
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sSheik := false ;
14375: LD_ADDR_EXP 89
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sEarthquake := false ;
14383: LD_ADDR_EXP 91
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// sAI := false ;
14391: LD_ADDR_EXP 92
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// sCargo := false ;
14399: LD_ADDR_EXP 95
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// sDLaser := false ;
14407: LD_ADDR_EXP 96
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// sExchange := false ;
14415: LD_ADDR_EXP 97
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// sFac := false ;
14423: LD_ADDR_EXP 98
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// sPower := false ;
14431: LD_ADDR_EXP 99
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// sRandom := false ;
14439: LD_ADDR_EXP 100
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// sShield := false ;
14447: LD_ADDR_EXP 101
14451: PUSH
14452: LD_INT 0
14454: ST_TO_ADDR
// sTime := false ;
14455: LD_ADDR_EXP 102
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// sTools := false ;
14463: LD_ADDR_EXP 103
14467: PUSH
14468: LD_INT 0
14470: ST_TO_ADDR
// sSold := false ;
14471: LD_ADDR_EXP 68
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// sDiff := false ;
14479: LD_ADDR_EXP 69
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// sFog := false ;
14487: LD_ADDR_EXP 72
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// sReset := false ;
14495: LD_ADDR_EXP 73
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// sSun := false ;
14503: LD_ADDR_EXP 74
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// sTiger := false ;
14511: LD_ADDR_EXP 70
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// sBomb := false ;
14519: LD_ADDR_EXP 71
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// sWound := false ;
14527: LD_ADDR_EXP 79
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// sBetray := false ;
14535: LD_ADDR_EXP 83
14539: PUSH
14540: LD_INT 0
14542: ST_TO_ADDR
// sContamin := false ;
14543: LD_ADDR_EXP 84
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// sOil := false ;
14551: LD_ADDR_EXP 86
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// sStu := false ;
14559: LD_ADDR_EXP 90
14563: PUSH
14564: LD_INT 0
14566: ST_TO_ADDR
// sBazooka := false ;
14567: LD_ADDR_EXP 93
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// sMortar := false ;
14575: LD_ADDR_EXP 94
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
// sRanger := false ;
14583: LD_ADDR_EXP 104
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// sComputer := false ;
14591: LD_ADDR_EXP 105
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// s30 := false ;
14599: LD_ADDR_EXP 106
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// s60 := false ;
14607: LD_ADDR_EXP 107
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// end ;
14615: LD_VAR 0 1
14619: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
// result := [ ] ;
14629: LD_ADDR_VAR 0 2
14633: PUSH
14634: EMPTY
14635: ST_TO_ADDR
// if campaign_id = 1 then
14636: LD_OWVAR 69
14640: PUSH
14641: LD_INT 1
14643: EQUAL
14644: IFFALSE 17810
// begin case mission_number of 1 :
14646: LD_OWVAR 70
14650: PUSH
14651: LD_INT 1
14653: DOUBLE
14654: EQUAL
14655: IFTRUE 14659
14657: GO 14735
14659: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_INT 2
14667: PUSH
14668: LD_INT 4
14670: PUSH
14671: LD_INT 11
14673: PUSH
14674: LD_INT 12
14676: PUSH
14677: LD_INT 15
14679: PUSH
14680: LD_INT 16
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_INT 23
14688: PUSH
14689: LD_INT 26
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 101
14705: PUSH
14706: LD_INT 102
14708: PUSH
14709: LD_INT 106
14711: PUSH
14712: LD_INT 116
14714: PUSH
14715: LD_INT 117
14717: PUSH
14718: LD_INT 118
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: ST_TO_ADDR
14733: GO 17808
14735: LD_INT 2
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14827
14743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14744: LD_ADDR_VAR 0 2
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: LD_INT 11
14757: PUSH
14758: LD_INT 12
14760: PUSH
14761: LD_INT 15
14763: PUSH
14764: LD_INT 16
14766: PUSH
14767: LD_INT 22
14769: PUSH
14770: LD_INT 23
14772: PUSH
14773: LD_INT 26
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 101
14789: PUSH
14790: LD_INT 102
14792: PUSH
14793: LD_INT 105
14795: PUSH
14796: LD_INT 106
14798: PUSH
14799: LD_INT 108
14801: PUSH
14802: LD_INT 116
14804: PUSH
14805: LD_INT 117
14807: PUSH
14808: LD_INT 118
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: ST_TO_ADDR
14825: GO 17808
14827: LD_INT 3
14829: DOUBLE
14830: EQUAL
14831: IFTRUE 14835
14833: GO 14923
14835: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14836: LD_ADDR_VAR 0 2
14840: PUSH
14841: LD_INT 2
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: LD_INT 11
14852: PUSH
14853: LD_INT 12
14855: PUSH
14856: LD_INT 15
14858: PUSH
14859: LD_INT 16
14861: PUSH
14862: LD_INT 22
14864: PUSH
14865: LD_INT 26
14867: PUSH
14868: LD_INT 36
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 101
14885: PUSH
14886: LD_INT 102
14888: PUSH
14889: LD_INT 105
14891: PUSH
14892: LD_INT 106
14894: PUSH
14895: LD_INT 108
14897: PUSH
14898: LD_INT 116
14900: PUSH
14901: LD_INT 117
14903: PUSH
14904: LD_INT 118
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: ST_TO_ADDR
14921: GO 17808
14923: LD_INT 4
14925: DOUBLE
14926: EQUAL
14927: IFTRUE 14931
14929: GO 15027
14931: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14932: LD_ADDR_VAR 0 2
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: LD_INT 5
14945: PUSH
14946: LD_INT 8
14948: PUSH
14949: LD_INT 11
14951: PUSH
14952: LD_INT 12
14954: PUSH
14955: LD_INT 15
14957: PUSH
14958: LD_INT 16
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_INT 23
14966: PUSH
14967: LD_INT 26
14969: PUSH
14970: LD_INT 36
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 101
14989: PUSH
14990: LD_INT 102
14992: PUSH
14993: LD_INT 105
14995: PUSH
14996: LD_INT 106
14998: PUSH
14999: LD_INT 108
15001: PUSH
15002: LD_INT 116
15004: PUSH
15005: LD_INT 117
15007: PUSH
15008: LD_INT 118
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: ST_TO_ADDR
15025: GO 17808
15027: LD_INT 5
15029: DOUBLE
15030: EQUAL
15031: IFTRUE 15035
15033: GO 15147
15035: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15036: LD_ADDR_VAR 0 2
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 4
15046: PUSH
15047: LD_INT 5
15049: PUSH
15050: LD_INT 6
15052: PUSH
15053: LD_INT 8
15055: PUSH
15056: LD_INT 11
15058: PUSH
15059: LD_INT 12
15061: PUSH
15062: LD_INT 15
15064: PUSH
15065: LD_INT 16
15067: PUSH
15068: LD_INT 22
15070: PUSH
15071: LD_INT 23
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 36
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 101
15101: PUSH
15102: LD_INT 102
15104: PUSH
15105: LD_INT 105
15107: PUSH
15108: LD_INT 106
15110: PUSH
15111: LD_INT 108
15113: PUSH
15114: LD_INT 109
15116: PUSH
15117: LD_INT 112
15119: PUSH
15120: LD_INT 116
15122: PUSH
15123: LD_INT 117
15125: PUSH
15126: LD_INT 118
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: ST_TO_ADDR
15145: GO 17808
15147: LD_INT 6
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15287
15155: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15156: LD_ADDR_VAR 0 2
15160: PUSH
15161: LD_INT 2
15163: PUSH
15164: LD_INT 4
15166: PUSH
15167: LD_INT 5
15169: PUSH
15170: LD_INT 6
15172: PUSH
15173: LD_INT 8
15175: PUSH
15176: LD_INT 11
15178: PUSH
15179: LD_INT 12
15181: PUSH
15182: LD_INT 15
15184: PUSH
15185: LD_INT 16
15187: PUSH
15188: LD_INT 20
15190: PUSH
15191: LD_INT 21
15193: PUSH
15194: LD_INT 22
15196: PUSH
15197: LD_INT 23
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 30
15208: PUSH
15209: LD_INT 31
15211: PUSH
15212: LD_INT 32
15214: PUSH
15215: LD_INT 36
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 101
15241: PUSH
15242: LD_INT 102
15244: PUSH
15245: LD_INT 105
15247: PUSH
15248: LD_INT 106
15250: PUSH
15251: LD_INT 108
15253: PUSH
15254: LD_INT 109
15256: PUSH
15257: LD_INT 112
15259: PUSH
15260: LD_INT 116
15262: PUSH
15263: LD_INT 117
15265: PUSH
15266: LD_INT 118
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: ST_TO_ADDR
15285: GO 17808
15287: LD_INT 7
15289: DOUBLE
15290: EQUAL
15291: IFTRUE 15295
15293: GO 15407
15295: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: LD_INT 4
15306: PUSH
15307: LD_INT 5
15309: PUSH
15310: LD_INT 7
15312: PUSH
15313: LD_INT 11
15315: PUSH
15316: LD_INT 12
15318: PUSH
15319: LD_INT 15
15321: PUSH
15322: LD_INT 16
15324: PUSH
15325: LD_INT 20
15327: PUSH
15328: LD_INT 21
15330: PUSH
15331: LD_INT 22
15333: PUSH
15334: LD_INT 23
15336: PUSH
15337: LD_INT 25
15339: PUSH
15340: LD_INT 26
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 101
15361: PUSH
15362: LD_INT 102
15364: PUSH
15365: LD_INT 103
15367: PUSH
15368: LD_INT 105
15370: PUSH
15371: LD_INT 106
15373: PUSH
15374: LD_INT 108
15376: PUSH
15377: LD_INT 112
15379: PUSH
15380: LD_INT 116
15382: PUSH
15383: LD_INT 117
15385: PUSH
15386: LD_INT 118
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: ST_TO_ADDR
15405: GO 17808
15407: LD_INT 8
15409: DOUBLE
15410: EQUAL
15411: IFTRUE 15415
15413: GO 15555
15415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15416: LD_ADDR_VAR 0 2
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 4
15426: PUSH
15427: LD_INT 5
15429: PUSH
15430: LD_INT 6
15432: PUSH
15433: LD_INT 7
15435: PUSH
15436: LD_INT 8
15438: PUSH
15439: LD_INT 11
15441: PUSH
15442: LD_INT 12
15444: PUSH
15445: LD_INT 15
15447: PUSH
15448: LD_INT 16
15450: PUSH
15451: LD_INT 20
15453: PUSH
15454: LD_INT 21
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 23
15462: PUSH
15463: LD_INT 25
15465: PUSH
15466: LD_INT 26
15468: PUSH
15469: LD_INT 30
15471: PUSH
15472: LD_INT 31
15474: PUSH
15475: LD_INT 32
15477: PUSH
15478: LD_INT 36
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 101
15505: PUSH
15506: LD_INT 102
15508: PUSH
15509: LD_INT 103
15511: PUSH
15512: LD_INT 105
15514: PUSH
15515: LD_INT 106
15517: PUSH
15518: LD_INT 108
15520: PUSH
15521: LD_INT 109
15523: PUSH
15524: LD_INT 112
15526: PUSH
15527: LD_INT 116
15529: PUSH
15530: LD_INT 117
15532: PUSH
15533: LD_INT 118
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: ST_TO_ADDR
15553: GO 17808
15555: LD_INT 9
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 15711
15563: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15564: LD_ADDR_VAR 0 2
15568: PUSH
15569: LD_INT 2
15571: PUSH
15572: LD_INT 4
15574: PUSH
15575: LD_INT 5
15577: PUSH
15578: LD_INT 6
15580: PUSH
15581: LD_INT 7
15583: PUSH
15584: LD_INT 8
15586: PUSH
15587: LD_INT 11
15589: PUSH
15590: LD_INT 12
15592: PUSH
15593: LD_INT 15
15595: PUSH
15596: LD_INT 16
15598: PUSH
15599: LD_INT 20
15601: PUSH
15602: LD_INT 21
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_INT 23
15610: PUSH
15611: LD_INT 25
15613: PUSH
15614: LD_INT 26
15616: PUSH
15617: LD_INT 28
15619: PUSH
15620: LD_INT 30
15622: PUSH
15623: LD_INT 31
15625: PUSH
15626: LD_INT 32
15628: PUSH
15629: LD_INT 36
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 101
15657: PUSH
15658: LD_INT 102
15660: PUSH
15661: LD_INT 103
15663: PUSH
15664: LD_INT 105
15666: PUSH
15667: LD_INT 106
15669: PUSH
15670: LD_INT 108
15672: PUSH
15673: LD_INT 109
15675: PUSH
15676: LD_INT 112
15678: PUSH
15679: LD_INT 114
15681: PUSH
15682: LD_INT 116
15684: PUSH
15685: LD_INT 117
15687: PUSH
15688: LD_INT 118
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: ST_TO_ADDR
15709: GO 17808
15711: LD_INT 10
15713: DOUBLE
15714: EQUAL
15715: IFTRUE 15719
15717: GO 15915
15719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 4
15730: PUSH
15731: LD_INT 5
15733: PUSH
15734: LD_INT 6
15736: PUSH
15737: LD_INT 7
15739: PUSH
15740: LD_INT 8
15742: PUSH
15743: LD_INT 9
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: LD_INT 11
15751: PUSH
15752: LD_INT 12
15754: PUSH
15755: LD_INT 13
15757: PUSH
15758: LD_INT 14
15760: PUSH
15761: LD_INT 15
15763: PUSH
15764: LD_INT 16
15766: PUSH
15767: LD_INT 17
15769: PUSH
15770: LD_INT 18
15772: PUSH
15773: LD_INT 19
15775: PUSH
15776: LD_INT 20
15778: PUSH
15779: LD_INT 21
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_INT 23
15787: PUSH
15788: LD_INT 24
15790: PUSH
15791: LD_INT 25
15793: PUSH
15794: LD_INT 26
15796: PUSH
15797: LD_INT 28
15799: PUSH
15800: LD_INT 30
15802: PUSH
15803: LD_INT 31
15805: PUSH
15806: LD_INT 32
15808: PUSH
15809: LD_INT 36
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 101
15845: PUSH
15846: LD_INT 102
15848: PUSH
15849: LD_INT 103
15851: PUSH
15852: LD_INT 104
15854: PUSH
15855: LD_INT 105
15857: PUSH
15858: LD_INT 106
15860: PUSH
15861: LD_INT 107
15863: PUSH
15864: LD_INT 108
15866: PUSH
15867: LD_INT 109
15869: PUSH
15870: LD_INT 110
15872: PUSH
15873: LD_INT 111
15875: PUSH
15876: LD_INT 112
15878: PUSH
15879: LD_INT 114
15881: PUSH
15882: LD_INT 116
15884: PUSH
15885: LD_INT 117
15887: PUSH
15888: LD_INT 118
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: ST_TO_ADDR
15913: GO 17808
15915: LD_INT 11
15917: DOUBLE
15918: EQUAL
15919: IFTRUE 15923
15921: GO 16127
15923: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: LD_INT 2
15931: PUSH
15932: LD_INT 3
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: LD_INT 5
15940: PUSH
15941: LD_INT 6
15943: PUSH
15944: LD_INT 7
15946: PUSH
15947: LD_INT 8
15949: PUSH
15950: LD_INT 9
15952: PUSH
15953: LD_INT 10
15955: PUSH
15956: LD_INT 11
15958: PUSH
15959: LD_INT 12
15961: PUSH
15962: LD_INT 13
15964: PUSH
15965: LD_INT 14
15967: PUSH
15968: LD_INT 15
15970: PUSH
15971: LD_INT 16
15973: PUSH
15974: LD_INT 17
15976: PUSH
15977: LD_INT 18
15979: PUSH
15980: LD_INT 19
15982: PUSH
15983: LD_INT 20
15985: PUSH
15986: LD_INT 21
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_INT 23
15994: PUSH
15995: LD_INT 24
15997: PUSH
15998: LD_INT 25
16000: PUSH
16001: LD_INT 26
16003: PUSH
16004: LD_INT 28
16006: PUSH
16007: LD_INT 30
16009: PUSH
16010: LD_INT 31
16012: PUSH
16013: LD_INT 32
16015: PUSH
16016: LD_INT 34
16018: PUSH
16019: LD_INT 36
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 101
16057: PUSH
16058: LD_INT 102
16060: PUSH
16061: LD_INT 103
16063: PUSH
16064: LD_INT 104
16066: PUSH
16067: LD_INT 105
16069: PUSH
16070: LD_INT 106
16072: PUSH
16073: LD_INT 107
16075: PUSH
16076: LD_INT 108
16078: PUSH
16079: LD_INT 109
16081: PUSH
16082: LD_INT 110
16084: PUSH
16085: LD_INT 111
16087: PUSH
16088: LD_INT 112
16090: PUSH
16091: LD_INT 114
16093: PUSH
16094: LD_INT 116
16096: PUSH
16097: LD_INT 117
16099: PUSH
16100: LD_INT 118
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: ST_TO_ADDR
16125: GO 17808
16127: LD_INT 12
16129: DOUBLE
16130: EQUAL
16131: IFTRUE 16135
16133: GO 16355
16135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16136: LD_ADDR_VAR 0 2
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 3
16149: PUSH
16150: LD_INT 4
16152: PUSH
16153: LD_INT 5
16155: PUSH
16156: LD_INT 6
16158: PUSH
16159: LD_INT 7
16161: PUSH
16162: LD_INT 8
16164: PUSH
16165: LD_INT 9
16167: PUSH
16168: LD_INT 10
16170: PUSH
16171: LD_INT 11
16173: PUSH
16174: LD_INT 12
16176: PUSH
16177: LD_INT 13
16179: PUSH
16180: LD_INT 14
16182: PUSH
16183: LD_INT 15
16185: PUSH
16186: LD_INT 16
16188: PUSH
16189: LD_INT 17
16191: PUSH
16192: LD_INT 18
16194: PUSH
16195: LD_INT 19
16197: PUSH
16198: LD_INT 20
16200: PUSH
16201: LD_INT 21
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 23
16209: PUSH
16210: LD_INT 24
16212: PUSH
16213: LD_INT 25
16215: PUSH
16216: LD_INT 26
16218: PUSH
16219: LD_INT 27
16221: PUSH
16222: LD_INT 28
16224: PUSH
16225: LD_INT 30
16227: PUSH
16228: LD_INT 31
16230: PUSH
16231: LD_INT 32
16233: PUSH
16234: LD_INT 33
16236: PUSH
16237: LD_INT 34
16239: PUSH
16240: LD_INT 36
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 101
16281: PUSH
16282: LD_INT 102
16284: PUSH
16285: LD_INT 103
16287: PUSH
16288: LD_INT 104
16290: PUSH
16291: LD_INT 105
16293: PUSH
16294: LD_INT 106
16296: PUSH
16297: LD_INT 107
16299: PUSH
16300: LD_INT 108
16302: PUSH
16303: LD_INT 109
16305: PUSH
16306: LD_INT 110
16308: PUSH
16309: LD_INT 111
16311: PUSH
16312: LD_INT 112
16314: PUSH
16315: LD_INT 113
16317: PUSH
16318: LD_INT 114
16320: PUSH
16321: LD_INT 116
16323: PUSH
16324: LD_INT 117
16326: PUSH
16327: LD_INT 118
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: ST_TO_ADDR
16353: GO 17808
16355: LD_INT 13
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16571
16363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: LD_INT 2
16374: PUSH
16375: LD_INT 3
16377: PUSH
16378: LD_INT 4
16380: PUSH
16381: LD_INT 5
16383: PUSH
16384: LD_INT 8
16386: PUSH
16387: LD_INT 9
16389: PUSH
16390: LD_INT 10
16392: PUSH
16393: LD_INT 11
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: LD_INT 14
16401: PUSH
16402: LD_INT 15
16404: PUSH
16405: LD_INT 16
16407: PUSH
16408: LD_INT 17
16410: PUSH
16411: LD_INT 18
16413: PUSH
16414: LD_INT 19
16416: PUSH
16417: LD_INT 20
16419: PUSH
16420: LD_INT 21
16422: PUSH
16423: LD_INT 22
16425: PUSH
16426: LD_INT 23
16428: PUSH
16429: LD_INT 24
16431: PUSH
16432: LD_INT 25
16434: PUSH
16435: LD_INT 26
16437: PUSH
16438: LD_INT 27
16440: PUSH
16441: LD_INT 28
16443: PUSH
16444: LD_INT 30
16446: PUSH
16447: LD_INT 31
16449: PUSH
16450: LD_INT 32
16452: PUSH
16453: LD_INT 33
16455: PUSH
16456: LD_INT 34
16458: PUSH
16459: LD_INT 36
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 101
16497: PUSH
16498: LD_INT 102
16500: PUSH
16501: LD_INT 103
16503: PUSH
16504: LD_INT 104
16506: PUSH
16507: LD_INT 105
16509: PUSH
16510: LD_INT 106
16512: PUSH
16513: LD_INT 107
16515: PUSH
16516: LD_INT 108
16518: PUSH
16519: LD_INT 109
16521: PUSH
16522: LD_INT 110
16524: PUSH
16525: LD_INT 111
16527: PUSH
16528: LD_INT 112
16530: PUSH
16531: LD_INT 113
16533: PUSH
16534: LD_INT 114
16536: PUSH
16537: LD_INT 116
16539: PUSH
16540: LD_INT 117
16542: PUSH
16543: LD_INT 118
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: ST_TO_ADDR
16569: GO 17808
16571: LD_INT 14
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 16803
16579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16580: LD_ADDR_VAR 0 2
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 3
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 5
16599: PUSH
16600: LD_INT 6
16602: PUSH
16603: LD_INT 7
16605: PUSH
16606: LD_INT 8
16608: PUSH
16609: LD_INT 9
16611: PUSH
16612: LD_INT 10
16614: PUSH
16615: LD_INT 11
16617: PUSH
16618: LD_INT 12
16620: PUSH
16621: LD_INT 13
16623: PUSH
16624: LD_INT 14
16626: PUSH
16627: LD_INT 15
16629: PUSH
16630: LD_INT 16
16632: PUSH
16633: LD_INT 17
16635: PUSH
16636: LD_INT 18
16638: PUSH
16639: LD_INT 19
16641: PUSH
16642: LD_INT 20
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_INT 23
16653: PUSH
16654: LD_INT 24
16656: PUSH
16657: LD_INT 25
16659: PUSH
16660: LD_INT 26
16662: PUSH
16663: LD_INT 27
16665: PUSH
16666: LD_INT 28
16668: PUSH
16669: LD_INT 29
16671: PUSH
16672: LD_INT 30
16674: PUSH
16675: LD_INT 31
16677: PUSH
16678: LD_INT 32
16680: PUSH
16681: LD_INT 33
16683: PUSH
16684: LD_INT 34
16686: PUSH
16687: LD_INT 36
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 101
16729: PUSH
16730: LD_INT 102
16732: PUSH
16733: LD_INT 103
16735: PUSH
16736: LD_INT 104
16738: PUSH
16739: LD_INT 105
16741: PUSH
16742: LD_INT 106
16744: PUSH
16745: LD_INT 107
16747: PUSH
16748: LD_INT 108
16750: PUSH
16751: LD_INT 109
16753: PUSH
16754: LD_INT 110
16756: PUSH
16757: LD_INT 111
16759: PUSH
16760: LD_INT 112
16762: PUSH
16763: LD_INT 113
16765: PUSH
16766: LD_INT 114
16768: PUSH
16769: LD_INT 116
16771: PUSH
16772: LD_INT 117
16774: PUSH
16775: LD_INT 118
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: ST_TO_ADDR
16801: GO 17808
16803: LD_INT 15
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 17035
16811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16812: LD_ADDR_VAR 0 2
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: LD_INT 4
16828: PUSH
16829: LD_INT 5
16831: PUSH
16832: LD_INT 6
16834: PUSH
16835: LD_INT 7
16837: PUSH
16838: LD_INT 8
16840: PUSH
16841: LD_INT 9
16843: PUSH
16844: LD_INT 10
16846: PUSH
16847: LD_INT 11
16849: PUSH
16850: LD_INT 12
16852: PUSH
16853: LD_INT 13
16855: PUSH
16856: LD_INT 14
16858: PUSH
16859: LD_INT 15
16861: PUSH
16862: LD_INT 16
16864: PUSH
16865: LD_INT 17
16867: PUSH
16868: LD_INT 18
16870: PUSH
16871: LD_INT 19
16873: PUSH
16874: LD_INT 20
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 22
16882: PUSH
16883: LD_INT 23
16885: PUSH
16886: LD_INT 24
16888: PUSH
16889: LD_INT 25
16891: PUSH
16892: LD_INT 26
16894: PUSH
16895: LD_INT 27
16897: PUSH
16898: LD_INT 28
16900: PUSH
16901: LD_INT 29
16903: PUSH
16904: LD_INT 30
16906: PUSH
16907: LD_INT 31
16909: PUSH
16910: LD_INT 32
16912: PUSH
16913: LD_INT 33
16915: PUSH
16916: LD_INT 34
16918: PUSH
16919: LD_INT 36
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 101
16961: PUSH
16962: LD_INT 102
16964: PUSH
16965: LD_INT 103
16967: PUSH
16968: LD_INT 104
16970: PUSH
16971: LD_INT 105
16973: PUSH
16974: LD_INT 106
16976: PUSH
16977: LD_INT 107
16979: PUSH
16980: LD_INT 108
16982: PUSH
16983: LD_INT 109
16985: PUSH
16986: LD_INT 110
16988: PUSH
16989: LD_INT 111
16991: PUSH
16992: LD_INT 112
16994: PUSH
16995: LD_INT 113
16997: PUSH
16998: LD_INT 114
17000: PUSH
17001: LD_INT 116
17003: PUSH
17004: LD_INT 117
17006: PUSH
17007: LD_INT 118
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: ST_TO_ADDR
17033: GO 17808
17035: LD_INT 16
17037: DOUBLE
17038: EQUAL
17039: IFTRUE 17043
17041: GO 17179
17043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 4
17054: PUSH
17055: LD_INT 5
17057: PUSH
17058: LD_INT 7
17060: PUSH
17061: LD_INT 11
17063: PUSH
17064: LD_INT 12
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: LD_INT 16
17072: PUSH
17073: LD_INT 20
17075: PUSH
17076: LD_INT 21
17078: PUSH
17079: LD_INT 22
17081: PUSH
17082: LD_INT 23
17084: PUSH
17085: LD_INT 25
17087: PUSH
17088: LD_INT 26
17090: PUSH
17091: LD_INT 30
17093: PUSH
17094: LD_INT 31
17096: PUSH
17097: LD_INT 32
17099: PUSH
17100: LD_INT 33
17102: PUSH
17103: LD_INT 34
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 101
17129: PUSH
17130: LD_INT 102
17132: PUSH
17133: LD_INT 103
17135: PUSH
17136: LD_INT 106
17138: PUSH
17139: LD_INT 108
17141: PUSH
17142: LD_INT 112
17144: PUSH
17145: LD_INT 113
17147: PUSH
17148: LD_INT 114
17150: PUSH
17151: LD_INT 116
17153: PUSH
17154: LD_INT 117
17156: PUSH
17157: LD_INT 118
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: ST_TO_ADDR
17177: GO 17808
17179: LD_INT 17
17181: DOUBLE
17182: EQUAL
17183: IFTRUE 17187
17185: GO 17411
17187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17188: LD_ADDR_VAR 0 2
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: LD_INT 4
17204: PUSH
17205: LD_INT 5
17207: PUSH
17208: LD_INT 6
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: LD_INT 8
17216: PUSH
17217: LD_INT 9
17219: PUSH
17220: LD_INT 10
17222: PUSH
17223: LD_INT 11
17225: PUSH
17226: LD_INT 12
17228: PUSH
17229: LD_INT 13
17231: PUSH
17232: LD_INT 14
17234: PUSH
17235: LD_INT 15
17237: PUSH
17238: LD_INT 16
17240: PUSH
17241: LD_INT 17
17243: PUSH
17244: LD_INT 18
17246: PUSH
17247: LD_INT 19
17249: PUSH
17250: LD_INT 20
17252: PUSH
17253: LD_INT 21
17255: PUSH
17256: LD_INT 22
17258: PUSH
17259: LD_INT 23
17261: PUSH
17262: LD_INT 24
17264: PUSH
17265: LD_INT 25
17267: PUSH
17268: LD_INT 26
17270: PUSH
17271: LD_INT 27
17273: PUSH
17274: LD_INT 28
17276: PUSH
17277: LD_INT 29
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 31
17285: PUSH
17286: LD_INT 32
17288: PUSH
17289: LD_INT 33
17291: PUSH
17292: LD_INT 34
17294: PUSH
17295: LD_INT 36
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 101
17337: PUSH
17338: LD_INT 102
17340: PUSH
17341: LD_INT 103
17343: PUSH
17344: LD_INT 104
17346: PUSH
17347: LD_INT 105
17349: PUSH
17350: LD_INT 106
17352: PUSH
17353: LD_INT 107
17355: PUSH
17356: LD_INT 108
17358: PUSH
17359: LD_INT 109
17361: PUSH
17362: LD_INT 110
17364: PUSH
17365: LD_INT 111
17367: PUSH
17368: LD_INT 112
17370: PUSH
17371: LD_INT 113
17373: PUSH
17374: LD_INT 114
17376: PUSH
17377: LD_INT 116
17379: PUSH
17380: LD_INT 117
17382: PUSH
17383: LD_INT 118
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: ST_TO_ADDR
17409: GO 17808
17411: LD_INT 18
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17567
17419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 4
17430: PUSH
17431: LD_INT 5
17433: PUSH
17434: LD_INT 7
17436: PUSH
17437: LD_INT 11
17439: PUSH
17440: LD_INT 12
17442: PUSH
17443: LD_INT 15
17445: PUSH
17446: LD_INT 16
17448: PUSH
17449: LD_INT 20
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_INT 23
17460: PUSH
17461: LD_INT 25
17463: PUSH
17464: LD_INT 26
17466: PUSH
17467: LD_INT 30
17469: PUSH
17470: LD_INT 31
17472: PUSH
17473: LD_INT 32
17475: PUSH
17476: LD_INT 33
17478: PUSH
17479: LD_INT 34
17481: PUSH
17482: LD_INT 35
17484: PUSH
17485: LD_INT 36
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 101
17513: PUSH
17514: LD_INT 102
17516: PUSH
17517: LD_INT 103
17519: PUSH
17520: LD_INT 106
17522: PUSH
17523: LD_INT 108
17525: PUSH
17526: LD_INT 112
17528: PUSH
17529: LD_INT 113
17531: PUSH
17532: LD_INT 114
17534: PUSH
17535: LD_INT 115
17537: PUSH
17538: LD_INT 116
17540: PUSH
17541: LD_INT 117
17543: PUSH
17544: LD_INT 118
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: ST_TO_ADDR
17565: GO 17808
17567: LD_INT 19
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17807
17575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 3
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: LD_INT 5
17595: PUSH
17596: LD_INT 6
17598: PUSH
17599: LD_INT 7
17601: PUSH
17602: LD_INT 8
17604: PUSH
17605: LD_INT 9
17607: PUSH
17608: LD_INT 10
17610: PUSH
17611: LD_INT 11
17613: PUSH
17614: LD_INT 12
17616: PUSH
17617: LD_INT 13
17619: PUSH
17620: LD_INT 14
17622: PUSH
17623: LD_INT 15
17625: PUSH
17626: LD_INT 16
17628: PUSH
17629: LD_INT 17
17631: PUSH
17632: LD_INT 18
17634: PUSH
17635: LD_INT 19
17637: PUSH
17638: LD_INT 20
17640: PUSH
17641: LD_INT 21
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 23
17649: PUSH
17650: LD_INT 24
17652: PUSH
17653: LD_INT 25
17655: PUSH
17656: LD_INT 26
17658: PUSH
17659: LD_INT 27
17661: PUSH
17662: LD_INT 28
17664: PUSH
17665: LD_INT 29
17667: PUSH
17668: LD_INT 30
17670: PUSH
17671: LD_INT 31
17673: PUSH
17674: LD_INT 32
17676: PUSH
17677: LD_INT 33
17679: PUSH
17680: LD_INT 34
17682: PUSH
17683: LD_INT 35
17685: PUSH
17686: LD_INT 36
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 101
17729: PUSH
17730: LD_INT 102
17732: PUSH
17733: LD_INT 103
17735: PUSH
17736: LD_INT 104
17738: PUSH
17739: LD_INT 105
17741: PUSH
17742: LD_INT 106
17744: PUSH
17745: LD_INT 107
17747: PUSH
17748: LD_INT 108
17750: PUSH
17751: LD_INT 109
17753: PUSH
17754: LD_INT 110
17756: PUSH
17757: LD_INT 111
17759: PUSH
17760: LD_INT 112
17762: PUSH
17763: LD_INT 113
17765: PUSH
17766: LD_INT 114
17768: PUSH
17769: LD_INT 115
17771: PUSH
17772: LD_INT 116
17774: PUSH
17775: LD_INT 117
17777: PUSH
17778: LD_INT 118
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: ST_TO_ADDR
17805: GO 17808
17807: POP
// end else
17808: GO 18039
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 3
17823: PUSH
17824: LD_INT 4
17826: PUSH
17827: LD_INT 5
17829: PUSH
17830: LD_INT 6
17832: PUSH
17833: LD_INT 7
17835: PUSH
17836: LD_INT 8
17838: PUSH
17839: LD_INT 9
17841: PUSH
17842: LD_INT 10
17844: PUSH
17845: LD_INT 11
17847: PUSH
17848: LD_INT 12
17850: PUSH
17851: LD_INT 13
17853: PUSH
17854: LD_INT 14
17856: PUSH
17857: LD_INT 15
17859: PUSH
17860: LD_INT 16
17862: PUSH
17863: LD_INT 17
17865: PUSH
17866: LD_INT 18
17868: PUSH
17869: LD_INT 19
17871: PUSH
17872: LD_INT 20
17874: PUSH
17875: LD_INT 21
17877: PUSH
17878: LD_INT 22
17880: PUSH
17881: LD_INT 23
17883: PUSH
17884: LD_INT 24
17886: PUSH
17887: LD_INT 25
17889: PUSH
17890: LD_INT 26
17892: PUSH
17893: LD_INT 27
17895: PUSH
17896: LD_INT 28
17898: PUSH
17899: LD_INT 29
17901: PUSH
17902: LD_INT 30
17904: PUSH
17905: LD_INT 31
17907: PUSH
17908: LD_INT 32
17910: PUSH
17911: LD_INT 33
17913: PUSH
17914: LD_INT 34
17916: PUSH
17917: LD_INT 35
17919: PUSH
17920: LD_INT 36
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 101
17963: PUSH
17964: LD_INT 102
17966: PUSH
17967: LD_INT 103
17969: PUSH
17970: LD_INT 104
17972: PUSH
17973: LD_INT 105
17975: PUSH
17976: LD_INT 106
17978: PUSH
17979: LD_INT 107
17981: PUSH
17982: LD_INT 108
17984: PUSH
17985: LD_INT 109
17987: PUSH
17988: LD_INT 110
17990: PUSH
17991: LD_INT 111
17993: PUSH
17994: LD_INT 112
17996: PUSH
17997: LD_INT 113
17999: PUSH
18000: LD_INT 114
18002: PUSH
18003: LD_INT 115
18005: PUSH
18006: LD_INT 116
18008: PUSH
18009: LD_INT 117
18011: PUSH
18012: LD_INT 118
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: ST_TO_ADDR
// if result then
18039: LD_VAR 0 2
18043: IFFALSE 18829
// begin normal :=  ;
18045: LD_ADDR_VAR 0 5
18049: PUSH
18050: LD_STRING 
18052: ST_TO_ADDR
// hardcore :=  ;
18053: LD_ADDR_VAR 0 6
18057: PUSH
18058: LD_STRING 
18060: ST_TO_ADDR
// active :=  ;
18061: LD_ADDR_VAR 0 7
18065: PUSH
18066: LD_STRING 
18068: ST_TO_ADDR
// for i = 1 to normalCounter do
18069: LD_ADDR_VAR 0 8
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_EXP 52
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18186
// begin tmp := 0 ;
18087: LD_ADDR_VAR 0 3
18091: PUSH
18092: LD_STRING 0
18094: ST_TO_ADDR
// if result [ 1 ] then
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: IFFALSE 18168
// if result [ 1 ] [ 1 ] = i then
18105: LD_VAR 0 2
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PUSH
18114: LD_INT 1
18116: ARRAY
18117: PUSH
18118: LD_VAR 0 8
18122: EQUAL
18123: IFFALSE 18168
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18125: LD_ADDR_VAR 0 2
18129: PUSH
18130: LD_VAR 0 2
18134: PPUSH
18135: LD_INT 1
18137: PPUSH
18138: LD_VAR 0 2
18142: PUSH
18143: LD_INT 1
18145: ARRAY
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL_OW 3
18154: PPUSH
18155: CALL_OW 1
18159: ST_TO_ADDR
// tmp := 1 ;
18160: LD_ADDR_VAR 0 3
18164: PUSH
18165: LD_STRING 1
18167: ST_TO_ADDR
// end ; normal := normal & tmp ;
18168: LD_ADDR_VAR 0 5
18172: PUSH
18173: LD_VAR 0 5
18177: PUSH
18178: LD_VAR 0 3
18182: STR
18183: ST_TO_ADDR
// end ;
18184: GO 18084
18186: POP
18187: POP
// for i = 1 to hardcoreCounter do
18188: LD_ADDR_VAR 0 8
18192: PUSH
18193: DOUBLE
18194: LD_INT 1
18196: DEC
18197: ST_TO_ADDR
18198: LD_EXP 53
18202: PUSH
18203: FOR_TO
18204: IFFALSE 18309
// begin tmp := 0 ;
18206: LD_ADDR_VAR 0 3
18210: PUSH
18211: LD_STRING 0
18213: ST_TO_ADDR
// if result [ 2 ] then
18214: LD_VAR 0 2
18218: PUSH
18219: LD_INT 2
18221: ARRAY
18222: IFFALSE 18291
// if result [ 2 ] [ 1 ] = 100 + i then
18224: LD_VAR 0 2
18228: PUSH
18229: LD_INT 2
18231: ARRAY
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PUSH
18237: LD_INT 100
18239: PUSH
18240: LD_VAR 0 8
18244: PLUS
18245: EQUAL
18246: IFFALSE 18291
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18248: LD_ADDR_VAR 0 2
18252: PUSH
18253: LD_VAR 0 2
18257: PPUSH
18258: LD_INT 2
18260: PPUSH
18261: LD_VAR 0 2
18265: PUSH
18266: LD_INT 2
18268: ARRAY
18269: PPUSH
18270: LD_INT 1
18272: PPUSH
18273: CALL_OW 3
18277: PPUSH
18278: CALL_OW 1
18282: ST_TO_ADDR
// tmp := 1 ;
18283: LD_ADDR_VAR 0 3
18287: PUSH
18288: LD_STRING 1
18290: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18291: LD_ADDR_VAR 0 6
18295: PUSH
18296: LD_VAR 0 6
18300: PUSH
18301: LD_VAR 0 3
18305: STR
18306: ST_TO_ADDR
// end ;
18307: GO 18203
18309: POP
18310: POP
// if isGameLoad then
18311: LD_VAR 0 1
18315: IFFALSE 18790
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18317: LD_ADDR_VAR 0 4
18321: PUSH
18322: LD_EXP 56
18326: PUSH
18327: LD_EXP 55
18331: PUSH
18332: LD_EXP 57
18336: PUSH
18337: LD_EXP 54
18341: PUSH
18342: LD_EXP 58
18346: PUSH
18347: LD_EXP 59
18351: PUSH
18352: LD_EXP 60
18356: PUSH
18357: LD_EXP 61
18361: PUSH
18362: LD_EXP 62
18366: PUSH
18367: LD_EXP 63
18371: PUSH
18372: LD_EXP 64
18376: PUSH
18377: LD_EXP 65
18381: PUSH
18382: LD_EXP 66
18386: PUSH
18387: LD_EXP 67
18391: PUSH
18392: LD_EXP 75
18396: PUSH
18397: LD_EXP 76
18401: PUSH
18402: LD_EXP 77
18406: PUSH
18407: LD_EXP 78
18411: PUSH
18412: LD_EXP 80
18416: PUSH
18417: LD_EXP 81
18421: PUSH
18422: LD_EXP 82
18426: PUSH
18427: LD_EXP 85
18431: PUSH
18432: LD_EXP 87
18436: PUSH
18437: LD_EXP 88
18441: PUSH
18442: LD_EXP 89
18446: PUSH
18447: LD_EXP 91
18451: PUSH
18452: LD_EXP 92
18456: PUSH
18457: LD_EXP 95
18461: PUSH
18462: LD_EXP 96
18466: PUSH
18467: LD_EXP 97
18471: PUSH
18472: LD_EXP 98
18476: PUSH
18477: LD_EXP 99
18481: PUSH
18482: LD_EXP 100
18486: PUSH
18487: LD_EXP 101
18491: PUSH
18492: LD_EXP 102
18496: PUSH
18497: LD_EXP 103
18501: PUSH
18502: LD_EXP 68
18506: PUSH
18507: LD_EXP 69
18511: PUSH
18512: LD_EXP 72
18516: PUSH
18517: LD_EXP 73
18521: PUSH
18522: LD_EXP 74
18526: PUSH
18527: LD_EXP 70
18531: PUSH
18532: LD_EXP 71
18536: PUSH
18537: LD_EXP 79
18541: PUSH
18542: LD_EXP 83
18546: PUSH
18547: LD_EXP 84
18551: PUSH
18552: LD_EXP 86
18556: PUSH
18557: LD_EXP 90
18561: PUSH
18562: LD_EXP 93
18566: PUSH
18567: LD_EXP 94
18571: PUSH
18572: LD_EXP 104
18576: PUSH
18577: LD_EXP 105
18581: PUSH
18582: LD_EXP 106
18586: PUSH
18587: LD_EXP 107
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: ST_TO_ADDR
// tmp :=  ;
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: LD_STRING 
18655: ST_TO_ADDR
// for i = 1 to normalCounter do
18656: LD_ADDR_VAR 0 8
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_EXP 52
18670: PUSH
18671: FOR_TO
18672: IFFALSE 18708
// begin if flags [ i ] then
18674: LD_VAR 0 4
18678: PUSH
18679: LD_VAR 0 8
18683: ARRAY
18684: IFFALSE 18706
// tmp := tmp & i & ; ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_VAR 0 8
18700: STR
18701: PUSH
18702: LD_STRING ;
18704: STR
18705: ST_TO_ADDR
// end ;
18706: GO 18671
18708: POP
18709: POP
// for i = 1 to hardcoreCounter do
18710: LD_ADDR_VAR 0 8
18714: PUSH
18715: DOUBLE
18716: LD_INT 1
18718: DEC
18719: ST_TO_ADDR
18720: LD_EXP 53
18724: PUSH
18725: FOR_TO
18726: IFFALSE 18772
// begin if flags [ normalCounter + i ] then
18728: LD_VAR 0 4
18732: PUSH
18733: LD_EXP 52
18737: PUSH
18738: LD_VAR 0 8
18742: PLUS
18743: ARRAY
18744: IFFALSE 18770
// tmp := tmp & ( 100 + i ) & ; ;
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: LD_VAR 0 3
18755: PUSH
18756: LD_INT 100
18758: PUSH
18759: LD_VAR 0 8
18763: PLUS
18764: STR
18765: PUSH
18766: LD_STRING ;
18768: STR
18769: ST_TO_ADDR
// end ;
18770: GO 18725
18772: POP
18773: POP
// if tmp then
18774: LD_VAR 0 3
18778: IFFALSE 18790
// active := tmp ;
18780: LD_ADDR_VAR 0 7
18784: PUSH
18785: LD_VAR 0 3
18789: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18790: LD_STRING getStreamItemsFromMission("
18792: PUSH
18793: LD_VAR 0 5
18797: STR
18798: PUSH
18799: LD_STRING ","
18801: STR
18802: PUSH
18803: LD_VAR 0 6
18807: STR
18808: PUSH
18809: LD_STRING ","
18811: STR
18812: PUSH
18813: LD_VAR 0 7
18817: STR
18818: PUSH
18819: LD_STRING ")
18821: STR
18822: PPUSH
18823: CALL_OW 559
// end else
18827: GO 18836
// ToLua ( getStreamItemsFromMission("","","") ) ;
18829: LD_STRING getStreamItemsFromMission("","","")
18831: PPUSH
18832: CALL_OW 559
// end ;
18836: LD_VAR 0 2
18840: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18841: LD_EXP 51
18845: PUSH
18846: LD_EXP 56
18850: AND
18851: IFFALSE 18975
18853: GO 18855
18855: DISABLE
18856: LD_INT 0
18858: PPUSH
18859: PPUSH
// begin enable ;
18860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18861: LD_ADDR_VAR 0 2
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 34
18883: PUSH
18884: LD_INT 7
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 34
18893: PUSH
18894: LD_INT 45
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 34
18903: PUSH
18904: LD_INT 28
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 34
18913: PUSH
18914: LD_INT 47
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PPUSH
18932: CALL_OW 69
18936: ST_TO_ADDR
// if not tmp then
18937: LD_VAR 0 2
18941: NOT
18942: IFFALSE 18946
// exit ;
18944: GO 18975
// for i in tmp do
18946: LD_ADDR_VAR 0 1
18950: PUSH
18951: LD_VAR 0 2
18955: PUSH
18956: FOR_IN
18957: IFFALSE 18973
// begin SetLives ( i , 0 ) ;
18959: LD_VAR 0 1
18963: PPUSH
18964: LD_INT 0
18966: PPUSH
18967: CALL_OW 234
// end ;
18971: GO 18956
18973: POP
18974: POP
// end ;
18975: PPOPN 2
18977: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18978: LD_EXP 51
18982: PUSH
18983: LD_EXP 57
18987: AND
18988: IFFALSE 19072
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
18996: PPUSH
// begin enable ;
18997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_OWVAR 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 32
19017: PUSH
19018: LD_INT 3
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PPUSH
19029: CALL_OW 69
19033: ST_TO_ADDR
// if not tmp then
19034: LD_VAR 0 2
19038: NOT
19039: IFFALSE 19043
// exit ;
19041: GO 19072
// for i in tmp do
19043: LD_ADDR_VAR 0 1
19047: PUSH
19048: LD_VAR 0 2
19052: PUSH
19053: FOR_IN
19054: IFFALSE 19070
// begin SetLives ( i , 0 ) ;
19056: LD_VAR 0 1
19060: PPUSH
19061: LD_INT 0
19063: PPUSH
19064: CALL_OW 234
// end ;
19068: GO 19053
19070: POP
19071: POP
// end ;
19072: PPOPN 2
19074: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19075: LD_EXP 51
19079: PUSH
19080: LD_EXP 54
19084: AND
19085: IFFALSE 19178
19087: GO 19089
19089: DISABLE
19090: LD_INT 0
19092: PPUSH
// begin enable ;
19093: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19094: LD_ADDR_VAR 0 1
19098: PUSH
19099: LD_INT 22
19101: PUSH
19102: LD_OWVAR 2
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 25
19116: PUSH
19117: LD_INT 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 25
19126: PUSH
19127: LD_INT 9
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 25
19136: PUSH
19137: LD_INT 8
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PPUSH
19154: CALL_OW 69
19158: PUSH
19159: FOR_IN
19160: IFFALSE 19176
// begin SetClass ( i , 1 ) ;
19162: LD_VAR 0 1
19166: PPUSH
19167: LD_INT 1
19169: PPUSH
19170: CALL_OW 336
// end ;
19174: GO 19159
19176: POP
19177: POP
// end ;
19178: PPOPN 1
19180: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19181: LD_EXP 51
19185: PUSH
19186: LD_EXP 55
19190: AND
19191: PUSH
19192: LD_OWVAR 65
19196: PUSH
19197: LD_INT 7
19199: LESS
19200: AND
19201: IFFALSE 19215
19203: GO 19205
19205: DISABLE
// begin enable ;
19206: ENABLE
// game_speed := 7 ;
19207: LD_ADDR_OWVAR 65
19211: PUSH
19212: LD_INT 7
19214: ST_TO_ADDR
// end ;
19215: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19216: LD_EXP 51
19220: PUSH
19221: LD_EXP 58
19225: AND
19226: IFFALSE 19428
19228: GO 19230
19230: DISABLE
19231: LD_INT 0
19233: PPUSH
19234: PPUSH
19235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_INT 81
19243: PUSH
19244: LD_OWVAR 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 21
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PPUSH
19267: CALL_OW 69
19271: ST_TO_ADDR
// if not tmp then
19272: LD_VAR 0 3
19276: NOT
19277: IFFALSE 19281
// exit ;
19279: GO 19428
// if tmp > 5 then
19281: LD_VAR 0 3
19285: PUSH
19286: LD_INT 5
19288: GREATER
19289: IFFALSE 19301
// k := 5 else
19291: LD_ADDR_VAR 0 2
19295: PUSH
19296: LD_INT 5
19298: ST_TO_ADDR
19299: GO 19311
// k := tmp ;
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_VAR 0 3
19310: ST_TO_ADDR
// for i := 1 to k do
19311: LD_ADDR_VAR 0 1
19315: PUSH
19316: DOUBLE
19317: LD_INT 1
19319: DEC
19320: ST_TO_ADDR
19321: LD_VAR 0 2
19325: PUSH
19326: FOR_TO
19327: IFFALSE 19426
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_VAR 0 1
19338: ARRAY
19339: PPUSH
19340: LD_VAR 0 1
19344: PUSH
19345: LD_INT 4
19347: MOD
19348: PUSH
19349: LD_INT 1
19351: PLUS
19352: PPUSH
19353: CALL_OW 259
19357: PUSH
19358: LD_INT 10
19360: LESS
19361: IFFALSE 19424
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 1
19372: ARRAY
19373: PPUSH
19374: LD_VAR 0 1
19378: PUSH
19379: LD_INT 4
19381: MOD
19382: PUSH
19383: LD_INT 1
19385: PLUS
19386: PPUSH
19387: LD_VAR 0 3
19391: PUSH
19392: LD_VAR 0 1
19396: ARRAY
19397: PPUSH
19398: LD_VAR 0 1
19402: PUSH
19403: LD_INT 4
19405: MOD
19406: PUSH
19407: LD_INT 1
19409: PLUS
19410: PPUSH
19411: CALL_OW 259
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: PPUSH
19420: CALL_OW 237
19424: GO 19326
19426: POP
19427: POP
// end ;
19428: PPOPN 3
19430: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19431: LD_EXP 51
19435: PUSH
19436: LD_EXP 59
19440: AND
19441: IFFALSE 19461
19443: GO 19445
19445: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19446: LD_INT 4
19448: PPUSH
19449: LD_OWVAR 2
19453: PPUSH
19454: LD_INT 0
19456: PPUSH
19457: CALL_OW 324
19461: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19462: LD_EXP 51
19466: PUSH
19467: LD_EXP 88
19471: AND
19472: IFFALSE 19492
19474: GO 19476
19476: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19477: LD_INT 19
19479: PPUSH
19480: LD_OWVAR 2
19484: PPUSH
19485: LD_INT 0
19487: PPUSH
19488: CALL_OW 324
19492: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19493: LD_EXP 51
19497: PUSH
19498: LD_EXP 60
19502: AND
19503: IFFALSE 19605
19505: GO 19507
19507: DISABLE
19508: LD_INT 0
19510: PPUSH
19511: PPUSH
// begin enable ;
19512: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19513: LD_ADDR_VAR 0 2
19517: PUSH
19518: LD_INT 22
19520: PUSH
19521: LD_OWVAR 2
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 34
19535: PUSH
19536: LD_INT 11
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 34
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 69
19566: ST_TO_ADDR
// if not tmp then
19567: LD_VAR 0 2
19571: NOT
19572: IFFALSE 19576
// exit ;
19574: GO 19605
// for i in tmp do
19576: LD_ADDR_VAR 0 1
19580: PUSH
19581: LD_VAR 0 2
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19603
// begin SetLives ( i , 0 ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: LD_INT 0
19596: PPUSH
19597: CALL_OW 234
// end ;
19601: GO 19586
19603: POP
19604: POP
// end ;
19605: PPOPN 2
19607: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19608: LD_EXP 51
19612: PUSH
19613: LD_EXP 61
19617: AND
19618: IFFALSE 19638
19620: GO 19622
19622: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19623: LD_INT 32
19625: PPUSH
19626: LD_OWVAR 2
19630: PPUSH
19631: LD_INT 0
19633: PPUSH
19634: CALL_OW 324
19638: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19639: LD_EXP 51
19643: PUSH
19644: LD_EXP 62
19648: AND
19649: IFFALSE 19830
19651: GO 19653
19653: DISABLE
19654: LD_INT 0
19656: PPUSH
19657: PPUSH
19658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: LD_INT 22
19666: PUSH
19667: LD_OWVAR 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 33
19678: PUSH
19679: LD_INT 3
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: ST_TO_ADDR
// if not tmp then
19695: LD_VAR 0 2
19699: NOT
19700: IFFALSE 19704
// exit ;
19702: GO 19830
// side := 0 ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_INT 0
19711: ST_TO_ADDR
// for i := 1 to 8 do
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: DOUBLE
19718: LD_INT 1
19720: DEC
19721: ST_TO_ADDR
19722: LD_INT 8
19724: PUSH
19725: FOR_TO
19726: IFFALSE 19774
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19728: LD_OWVAR 2
19732: PUSH
19733: LD_VAR 0 1
19737: NONEQUAL
19738: PUSH
19739: LD_OWVAR 2
19743: PPUSH
19744: LD_VAR 0 1
19748: PPUSH
19749: CALL_OW 81
19753: PUSH
19754: LD_INT 2
19756: EQUAL
19757: AND
19758: IFFALSE 19772
// begin side := i ;
19760: LD_ADDR_VAR 0 3
19764: PUSH
19765: LD_VAR 0 1
19769: ST_TO_ADDR
// break ;
19770: GO 19774
// end ;
19772: GO 19725
19774: POP
19775: POP
// if not side then
19776: LD_VAR 0 3
19780: NOT
19781: IFFALSE 19785
// exit ;
19783: GO 19830
// for i := 1 to tmp do
19785: LD_ADDR_VAR 0 1
19789: PUSH
19790: DOUBLE
19791: LD_INT 1
19793: DEC
19794: ST_TO_ADDR
19795: LD_VAR 0 2
19799: PUSH
19800: FOR_TO
19801: IFFALSE 19828
// if Prob ( 60 ) then
19803: LD_INT 60
19805: PPUSH
19806: CALL_OW 13
19810: IFFALSE 19826
// SetSide ( i , side ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_VAR 0 3
19821: PPUSH
19822: CALL_OW 235
19826: GO 19800
19828: POP
19829: POP
// end ;
19830: PPOPN 3
19832: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19833: LD_EXP 51
19837: PUSH
19838: LD_EXP 64
19842: AND
19843: IFFALSE 19962
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19851: LD_ADDR_VAR 0 1
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_OWVAR 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 21
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: LD_INT 23
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 69
19904: PUSH
19905: FOR_IN
19906: IFFALSE 19960
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 257
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 3
19926: PUSH
19927: LD_INT 4
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: IN
19936: IFFALSE 19958
// SetClass ( un , rand ( 1 , 4 ) ) ;
19938: LD_VAR 0 1
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: LD_INT 4
19948: PPUSH
19949: CALL_OW 12
19953: PPUSH
19954: CALL_OW 336
19958: GO 19905
19960: POP
19961: POP
// end ;
19962: PPOPN 1
19964: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19965: LD_EXP 51
19969: PUSH
19970: LD_EXP 63
19974: AND
19975: IFFALSE 20054
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_INT 22
19990: PUSH
19991: LD_OWVAR 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 21
20002: PUSH
20003: LD_INT 3
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: ST_TO_ADDR
// if not tmp then
20019: LD_VAR 0 1
20023: NOT
20024: IFFALSE 20028
// exit ;
20026: GO 20054
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20028: LD_VAR 0 1
20032: PUSH
20033: LD_INT 1
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 12
20045: ARRAY
20046: PPUSH
20047: LD_INT 100
20049: PPUSH
20050: CALL_OW 234
// end ;
20054: PPOPN 1
20056: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20057: LD_EXP 51
20061: PUSH
20062: LD_EXP 65
20066: AND
20067: IFFALSE 20165
20069: GO 20071
20071: DISABLE
20072: LD_INT 0
20074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20075: LD_ADDR_VAR 0 1
20079: PUSH
20080: LD_INT 22
20082: PUSH
20083: LD_OWVAR 2
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 69
20110: ST_TO_ADDR
// if not tmp then
20111: LD_VAR 0 1
20115: NOT
20116: IFFALSE 20120
// exit ;
20118: GO 20165
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_VAR 0 1
20132: PPUSH
20133: CALL_OW 12
20137: ARRAY
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: LD_INT 4
20144: PPUSH
20145: CALL_OW 12
20149: PPUSH
20150: LD_INT 3000
20152: PPUSH
20153: LD_INT 9000
20155: PPUSH
20156: CALL_OW 12
20160: PPUSH
20161: CALL_OW 492
// end ;
20165: PPOPN 1
20167: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20168: LD_EXP 51
20172: PUSH
20173: LD_EXP 66
20177: AND
20178: IFFALSE 20198
20180: GO 20182
20182: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20183: LD_INT 1
20185: PPUSH
20186: LD_OWVAR 2
20190: PPUSH
20191: LD_INT 0
20193: PPUSH
20194: CALL_OW 324
20198: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20199: LD_EXP 51
20203: PUSH
20204: LD_EXP 67
20208: AND
20209: IFFALSE 20292
20211: GO 20213
20213: DISABLE
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_INT 22
20225: PUSH
20226: LD_OWVAR 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 21
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 69
20253: ST_TO_ADDR
// if not tmp then
20254: LD_VAR 0 2
20258: NOT
20259: IFFALSE 20263
// exit ;
20261: GO 20292
// for i in tmp do
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: LD_VAR 0 2
20272: PUSH
20273: FOR_IN
20274: IFFALSE 20290
// SetBLevel ( i , 10 ) ;
20276: LD_VAR 0 1
20280: PPUSH
20281: LD_INT 10
20283: PPUSH
20284: CALL_OW 241
20288: GO 20273
20290: POP
20291: POP
// end ;
20292: PPOPN 2
20294: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20295: LD_EXP 51
20299: PUSH
20300: LD_EXP 68
20304: AND
20305: IFFALSE 20416
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20315: LD_ADDR_VAR 0 3
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_OWVAR 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 25
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: ST_TO_ADDR
// if not tmp then
20351: LD_VAR 0 3
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20416
// un := tmp [ rand ( 1 , tmp ) ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 1
20372: PPUSH
20373: LD_VAR 0 3
20377: PPUSH
20378: CALL_OW 12
20382: ARRAY
20383: ST_TO_ADDR
// if Crawls ( un ) then
20384: LD_VAR 0 2
20388: PPUSH
20389: CALL_OW 318
20393: IFFALSE 20404
// ComWalk ( un ) ;
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20404: LD_VAR 0 2
20408: PPUSH
20409: LD_INT 5
20411: PPUSH
20412: CALL_OW 336
// end ;
20416: PPOPN 3
20418: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20419: LD_EXP 51
20423: PUSH
20424: LD_EXP 69
20428: AND
20429: PUSH
20430: LD_OWVAR 67
20434: PUSH
20435: LD_INT 4
20437: LESS
20438: AND
20439: IFFALSE 20458
20441: GO 20443
20443: DISABLE
// begin Difficulty := Difficulty + 1 ;
20444: LD_ADDR_OWVAR 67
20448: PUSH
20449: LD_OWVAR 67
20453: PUSH
20454: LD_INT 1
20456: PLUS
20457: ST_TO_ADDR
// end ;
20458: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20459: LD_EXP 51
20463: PUSH
20464: LD_EXP 70
20468: AND
20469: IFFALSE 20572
20471: GO 20473
20473: DISABLE
20474: LD_INT 0
20476: PPUSH
// begin for i := 1 to 5 do
20477: LD_ADDR_VAR 0 1
20481: PUSH
20482: DOUBLE
20483: LD_INT 1
20485: DEC
20486: ST_TO_ADDR
20487: LD_INT 5
20489: PUSH
20490: FOR_TO
20491: IFFALSE 20570
// begin uc_nation := nation_nature ;
20493: LD_ADDR_OWVAR 21
20497: PUSH
20498: LD_INT 0
20500: ST_TO_ADDR
// uc_side := 0 ;
20501: LD_ADDR_OWVAR 20
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20509: LD_ADDR_OWVAR 29
20513: PUSH
20514: LD_INT 12
20516: PUSH
20517: LD_INT 12
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: ST_TO_ADDR
// hc_agressivity := 20 ;
20524: LD_ADDR_OWVAR 35
20528: PUSH
20529: LD_INT 20
20531: ST_TO_ADDR
// hc_class := class_tiger ;
20532: LD_ADDR_OWVAR 28
20536: PUSH
20537: LD_INT 14
20539: ST_TO_ADDR
// hc_gallery :=  ;
20540: LD_ADDR_OWVAR 33
20544: PUSH
20545: LD_STRING 
20547: ST_TO_ADDR
// hc_name :=  ;
20548: LD_ADDR_OWVAR 26
20552: PUSH
20553: LD_STRING 
20555: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20556: CALL_OW 44
20560: PPUSH
20561: LD_INT 0
20563: PPUSH
20564: CALL_OW 51
// end ;
20568: GO 20490
20570: POP
20571: POP
// end ;
20572: PPOPN 1
20574: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20575: LD_EXP 51
20579: PUSH
20580: LD_EXP 71
20584: AND
20585: IFFALSE 20594
20587: GO 20589
20589: DISABLE
// StreamSibBomb ;
20590: CALL 20595 0 0
20594: END
// export function StreamSibBomb ; var i , x , y ; begin
20595: LD_INT 0
20597: PPUSH
20598: PPUSH
20599: PPUSH
20600: PPUSH
// result := false ;
20601: LD_ADDR_VAR 0 1
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// for i := 1 to 16 do
20609: LD_ADDR_VAR 0 2
20613: PUSH
20614: DOUBLE
20615: LD_INT 1
20617: DEC
20618: ST_TO_ADDR
20619: LD_INT 16
20621: PUSH
20622: FOR_TO
20623: IFFALSE 20822
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_INT 10
20632: PUSH
20633: LD_INT 20
20635: PUSH
20636: LD_INT 30
20638: PUSH
20639: LD_INT 40
20641: PUSH
20642: LD_INT 50
20644: PUSH
20645: LD_INT 60
20647: PUSH
20648: LD_INT 70
20650: PUSH
20651: LD_INT 80
20653: PUSH
20654: LD_INT 90
20656: PUSH
20657: LD_INT 100
20659: PUSH
20660: LD_INT 110
20662: PUSH
20663: LD_INT 120
20665: PUSH
20666: LD_INT 130
20668: PUSH
20669: LD_INT 140
20671: PUSH
20672: LD_INT 150
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: PPUSH
20695: LD_INT 15
20697: PPUSH
20698: CALL_OW 12
20702: ARRAY
20703: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20704: LD_ADDR_VAR 0 4
20708: PUSH
20709: LD_INT 10
20711: PUSH
20712: LD_INT 20
20714: PUSH
20715: LD_INT 30
20717: PUSH
20718: LD_INT 40
20720: PUSH
20721: LD_INT 50
20723: PUSH
20724: LD_INT 60
20726: PUSH
20727: LD_INT 70
20729: PUSH
20730: LD_INT 80
20732: PUSH
20733: LD_INT 90
20735: PUSH
20736: LD_INT 100
20738: PUSH
20739: LD_INT 110
20741: PUSH
20742: LD_INT 120
20744: PUSH
20745: LD_INT 130
20747: PUSH
20748: LD_INT 140
20750: PUSH
20751: LD_INT 150
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: PPUSH
20774: LD_INT 15
20776: PPUSH
20777: CALL_OW 12
20781: ARRAY
20782: ST_TO_ADDR
// if ValidHex ( x , y ) then
20783: LD_VAR 0 3
20787: PPUSH
20788: LD_VAR 0 4
20792: PPUSH
20793: CALL_OW 488
20797: IFFALSE 20820
// begin result := [ x , y ] ;
20799: LD_ADDR_VAR 0 1
20803: PUSH
20804: LD_VAR 0 3
20808: PUSH
20809: LD_VAR 0 4
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: ST_TO_ADDR
// break ;
20818: GO 20822
// end ; end ;
20820: GO 20622
20822: POP
20823: POP
// if result then
20824: LD_VAR 0 1
20828: IFFALSE 20888
// begin ToLua ( playSibBomb() ) ;
20830: LD_STRING playSibBomb()
20832: PPUSH
20833: CALL_OW 559
// wait ( 0 0$14 ) ;
20837: LD_INT 490
20839: PPUSH
20840: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20844: LD_VAR 0 1
20848: PUSH
20849: LD_INT 1
20851: ARRAY
20852: PPUSH
20853: LD_VAR 0 1
20857: PUSH
20858: LD_INT 2
20860: ARRAY
20861: PPUSH
20862: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20866: LD_VAR 0 1
20870: PUSH
20871: LD_INT 1
20873: ARRAY
20874: PPUSH
20875: LD_VAR 0 1
20879: PUSH
20880: LD_INT 2
20882: ARRAY
20883: PPUSH
20884: CALL_OW 429
// end ; end ;
20888: LD_VAR 0 1
20892: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20893: LD_EXP 51
20897: PUSH
20898: LD_EXP 73
20902: AND
20903: IFFALSE 20915
20905: GO 20907
20907: DISABLE
// YouLost (  ) ;
20908: LD_STRING 
20910: PPUSH
20911: CALL_OW 104
20915: END
// every 0 0$1 trigger StreamModeActive and sFog do
20916: LD_EXP 51
20920: PUSH
20921: LD_EXP 72
20925: AND
20926: IFFALSE 20940
20928: GO 20930
20930: DISABLE
// FogOff ( your_side ) ;
20931: LD_OWVAR 2
20935: PPUSH
20936: CALL_OW 344
20940: END
// every 0 0$1 trigger StreamModeActive and sSun do
20941: LD_EXP 51
20945: PUSH
20946: LD_EXP 74
20950: AND
20951: IFFALSE 20979
20953: GO 20955
20955: DISABLE
// begin solar_recharge_percent := 0 ;
20956: LD_ADDR_OWVAR 79
20960: PUSH
20961: LD_INT 0
20963: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20964: LD_INT 10500
20966: PPUSH
20967: CALL_OW 67
// solar_recharge_percent := 100 ;
20971: LD_ADDR_OWVAR 79
20975: PUSH
20976: LD_INT 100
20978: ST_TO_ADDR
// end ;
20979: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20980: LD_EXP 51
20984: PUSH
20985: LD_EXP 75
20989: AND
20990: IFFALSE 21229
20992: GO 20994
20994: DISABLE
20995: LD_INT 0
20997: PPUSH
20998: PPUSH
20999: PPUSH
// begin tmp := [ ] ;
21000: LD_ADDR_VAR 0 3
21004: PUSH
21005: EMPTY
21006: ST_TO_ADDR
// for i := 1 to 6 do
21007: LD_ADDR_VAR 0 1
21011: PUSH
21012: DOUBLE
21013: LD_INT 1
21015: DEC
21016: ST_TO_ADDR
21017: LD_INT 6
21019: PUSH
21020: FOR_TO
21021: IFFALSE 21126
// begin uc_nation := nation_nature ;
21023: LD_ADDR_OWVAR 21
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// uc_side := 0 ;
21031: LD_ADDR_OWVAR 20
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21039: LD_ADDR_OWVAR 29
21043: PUSH
21044: LD_INT 12
21046: PUSH
21047: LD_INT 12
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: ST_TO_ADDR
// hc_agressivity := 20 ;
21054: LD_ADDR_OWVAR 35
21058: PUSH
21059: LD_INT 20
21061: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21062: LD_ADDR_OWVAR 28
21066: PUSH
21067: LD_INT 17
21069: ST_TO_ADDR
// hc_gallery :=  ;
21070: LD_ADDR_OWVAR 33
21074: PUSH
21075: LD_STRING 
21077: ST_TO_ADDR
// hc_name :=  ;
21078: LD_ADDR_OWVAR 26
21082: PUSH
21083: LD_STRING 
21085: ST_TO_ADDR
// un := CreateHuman ;
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: CALL_OW 44
21095: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21096: LD_VAR 0 2
21100: PPUSH
21101: LD_INT 1
21103: PPUSH
21104: CALL_OW 51
// tmp := tmp ^ un ;
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_VAR 0 3
21117: PUSH
21118: LD_VAR 0 2
21122: ADD
21123: ST_TO_ADDR
// end ;
21124: GO 21020
21126: POP
21127: POP
// repeat wait ( 0 0$1 ) ;
21128: LD_INT 35
21130: PPUSH
21131: CALL_OW 67
// for un in tmp do
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_VAR 0 3
21144: PUSH
21145: FOR_IN
21146: IFFALSE 21220
// begin if IsDead ( un ) then
21148: LD_VAR 0 2
21152: PPUSH
21153: CALL_OW 301
21157: IFFALSE 21177
// begin tmp := tmp diff un ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_VAR 0 3
21168: PUSH
21169: LD_VAR 0 2
21173: DIFF
21174: ST_TO_ADDR
// continue ;
21175: GO 21145
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_INT 3
21184: PUSH
21185: LD_INT 22
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 74
21213: PPUSH
21214: CALL_OW 115
// end ;
21218: GO 21145
21220: POP
21221: POP
// until not tmp ;
21222: LD_VAR 0 3
21226: NOT
21227: IFFALSE 21128
// end ;
21229: PPOPN 3
21231: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21232: LD_EXP 51
21236: PUSH
21237: LD_EXP 76
21241: AND
21242: IFFALSE 21296
21244: GO 21246
21246: DISABLE
// begin ToLua ( displayTroll(); ) ;
21247: LD_STRING displayTroll();
21249: PPUSH
21250: CALL_OW 559
// wait ( 3 3$00 ) ;
21254: LD_INT 6300
21256: PPUSH
21257: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21261: LD_STRING hideTroll();
21263: PPUSH
21264: CALL_OW 559
// wait ( 1 1$00 ) ;
21268: LD_INT 2100
21270: PPUSH
21271: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21275: LD_STRING displayTroll();
21277: PPUSH
21278: CALL_OW 559
// wait ( 1 1$00 ) ;
21282: LD_INT 2100
21284: PPUSH
21285: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21289: LD_STRING hideTroll();
21291: PPUSH
21292: CALL_OW 559
// end ;
21296: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21297: LD_EXP 51
21301: PUSH
21302: LD_EXP 77
21306: AND
21307: IFFALSE 21370
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
// begin p := 0 ;
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 0
21322: ST_TO_ADDR
// repeat game_speed := 1 ;
21323: LD_ADDR_OWVAR 65
21327: PUSH
21328: LD_INT 1
21330: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21331: LD_INT 35
21333: PPUSH
21334: CALL_OW 67
// p := p + 1 ;
21338: LD_ADDR_VAR 0 1
21342: PUSH
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 1
21350: PLUS
21351: ST_TO_ADDR
// until p >= 60 ;
21352: LD_VAR 0 1
21356: PUSH
21357: LD_INT 60
21359: GREATEREQUAL
21360: IFFALSE 21323
// game_speed := 4 ;
21362: LD_ADDR_OWVAR 65
21366: PUSH
21367: LD_INT 4
21369: ST_TO_ADDR
// end ;
21370: PPOPN 1
21372: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21373: LD_EXP 51
21377: PUSH
21378: LD_EXP 78
21382: AND
21383: IFFALSE 21529
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
21391: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: LD_INT 22
21399: PUSH
21400: LD_OWVAR 2
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL_OW 69
21445: ST_TO_ADDR
// if not depot then
21446: LD_VAR 0 1
21450: NOT
21451: IFFALSE 21455
// exit ;
21453: GO 21529
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_VAR 0 1
21464: PUSH
21465: LD_INT 1
21467: PPUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 12
21477: ARRAY
21478: PPUSH
21479: CALL_OW 274
21483: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21484: LD_VAR 0 2
21488: PPUSH
21489: LD_INT 1
21491: PPUSH
21492: LD_INT 0
21494: PPUSH
21495: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_INT 2
21506: PPUSH
21507: LD_INT 0
21509: PPUSH
21510: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21514: LD_VAR 0 2
21518: PPUSH
21519: LD_INT 3
21521: PPUSH
21522: LD_INT 0
21524: PPUSH
21525: CALL_OW 277
// end ;
21529: PPOPN 2
21531: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21532: LD_EXP 51
21536: PUSH
21537: LD_EXP 79
21541: AND
21542: IFFALSE 21639
21544: GO 21546
21546: DISABLE
21547: LD_INT 0
21549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21550: LD_ADDR_VAR 0 1
21554: PUSH
21555: LD_INT 22
21557: PUSH
21558: LD_OWVAR 2
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 21
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 3
21579: PUSH
21580: LD_INT 23
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: ST_TO_ADDR
// if not tmp then
21604: LD_VAR 0 1
21608: NOT
21609: IFFALSE 21613
// exit ;
21611: GO 21639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21613: LD_VAR 0 1
21617: PUSH
21618: LD_INT 1
21620: PPUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 12
21630: ARRAY
21631: PPUSH
21632: LD_INT 200
21634: PPUSH
21635: CALL_OW 234
// end ;
21639: PPOPN 1
21641: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21642: LD_EXP 51
21646: PUSH
21647: LD_EXP 80
21651: AND
21652: IFFALSE 21731
21654: GO 21656
21656: DISABLE
21657: LD_INT 0
21659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21660: LD_ADDR_VAR 0 1
21664: PUSH
21665: LD_INT 22
21667: PUSH
21668: LD_OWVAR 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 21
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: ST_TO_ADDR
// if not tmp then
21696: LD_VAR 0 1
21700: NOT
21701: IFFALSE 21705
// exit ;
21703: GO 21731
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21705: LD_VAR 0 1
21709: PUSH
21710: LD_INT 1
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 12
21722: ARRAY
21723: PPUSH
21724: LD_INT 60
21726: PPUSH
21727: CALL_OW 234
// end ;
21731: PPOPN 1
21733: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21734: LD_EXP 51
21738: PUSH
21739: LD_EXP 81
21743: AND
21744: IFFALSE 21843
21746: GO 21748
21748: DISABLE
21749: LD_INT 0
21751: PPUSH
21752: PPUSH
// begin enable ;
21753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21754: LD_ADDR_VAR 0 1
21758: PUSH
21759: LD_INT 22
21761: PUSH
21762: LD_OWVAR 2
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 61
21773: PUSH
21774: EMPTY
21775: LIST
21776: PUSH
21777: LD_INT 33
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: ST_TO_ADDR
// if not tmp then
21797: LD_VAR 0 1
21801: NOT
21802: IFFALSE 21806
// exit ;
21804: GO 21843
// for i in tmp do
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: LD_VAR 0 1
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21841
// if IsControledBy ( i ) then
21819: LD_VAR 0 2
21823: PPUSH
21824: CALL_OW 312
21828: IFFALSE 21839
// ComUnlink ( i ) ;
21830: LD_VAR 0 2
21834: PPUSH
21835: CALL_OW 136
21839: GO 21816
21841: POP
21842: POP
// end ;
21843: PPOPN 2
21845: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21846: LD_EXP 51
21850: PUSH
21851: LD_EXP 82
21855: AND
21856: IFFALSE 21996
21858: GO 21860
21860: DISABLE
21861: LD_INT 0
21863: PPUSH
21864: PPUSH
// begin ToLua ( displayPowell(); ) ;
21865: LD_STRING displayPowell();
21867: PPUSH
21868: CALL_OW 559
// uc_side := 0 ;
21872: LD_ADDR_OWVAR 20
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// uc_nation := 2 ;
21880: LD_ADDR_OWVAR 21
21884: PUSH
21885: LD_INT 2
21887: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21888: LD_ADDR_OWVAR 37
21892: PUSH
21893: LD_INT 14
21895: ST_TO_ADDR
// vc_engine := engine_siberite ;
21896: LD_ADDR_OWVAR 39
21900: PUSH
21901: LD_INT 3
21903: ST_TO_ADDR
// vc_control := control_apeman ;
21904: LD_ADDR_OWVAR 38
21908: PUSH
21909: LD_INT 5
21911: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21912: LD_ADDR_OWVAR 40
21916: PUSH
21917: LD_INT 29
21919: ST_TO_ADDR
// un := CreateVehicle ;
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: CALL_OW 45
21929: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21930: LD_VAR 0 2
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21942: LD_INT 35
21944: PPUSH
21945: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_INT 22
21956: PUSH
21957: LD_OWVAR 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 69
21970: PPUSH
21971: LD_VAR 0 2
21975: PPUSH
21976: CALL_OW 74
21980: PPUSH
21981: CALL_OW 115
// until IsDead ( un ) ;
21985: LD_VAR 0 2
21989: PPUSH
21990: CALL_OW 301
21994: IFFALSE 21942
// end ;
21996: PPOPN 2
21998: END
// every 0 0$1 trigger StreamModeActive and sStu do
21999: LD_EXP 51
22003: PUSH
22004: LD_EXP 90
22008: AND
22009: IFFALSE 22025
22011: GO 22013
22013: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22014: LD_STRING displayStucuk();
22016: PPUSH
22017: CALL_OW 559
// ResetFog ;
22021: CALL_OW 335
// end ;
22025: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22026: LD_EXP 51
22030: PUSH
22031: LD_EXP 83
22035: AND
22036: IFFALSE 22177
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_INT 22
22052: PUSH
22053: LD_OWVAR 2
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 21
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PPUSH
22076: CALL_OW 69
22080: ST_TO_ADDR
// if not tmp then
22081: LD_VAR 0 2
22085: NOT
22086: IFFALSE 22090
// exit ;
22088: GO 22177
// un := tmp [ rand ( 1 , tmp ) ] ;
22090: LD_ADDR_VAR 0 1
22094: PUSH
22095: LD_VAR 0 2
22099: PUSH
22100: LD_INT 1
22102: PPUSH
22103: LD_VAR 0 2
22107: PPUSH
22108: CALL_OW 12
22112: ARRAY
22113: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_INT 0
22121: PPUSH
22122: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22126: LD_VAR 0 1
22130: PPUSH
22131: LD_OWVAR 3
22135: PUSH
22136: LD_VAR 0 1
22140: DIFF
22141: PPUSH
22142: LD_VAR 0 1
22146: PPUSH
22147: CALL_OW 74
22151: PPUSH
22152: CALL_OW 115
// wait ( 0 0$20 ) ;
22156: LD_INT 700
22158: PPUSH
22159: CALL_OW 67
// SetSide ( un , your_side ) ;
22163: LD_VAR 0 1
22167: PPUSH
22168: LD_OWVAR 2
22172: PPUSH
22173: CALL_OW 235
// end ;
22177: PPOPN 2
22179: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22180: LD_EXP 51
22184: PUSH
22185: LD_EXP 84
22189: AND
22190: IFFALSE 22296
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22198: LD_ADDR_VAR 0 1
22202: PUSH
22203: LD_INT 22
22205: PUSH
22206: LD_OWVAR 2
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: LD_INT 30
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 30
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 69
22251: ST_TO_ADDR
// if not depot then
22252: LD_VAR 0 1
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22296
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22261: LD_VAR 0 1
22265: PUSH
22266: LD_INT 1
22268: ARRAY
22269: PPUSH
22270: CALL_OW 250
22274: PPUSH
22275: LD_VAR 0 1
22279: PUSH
22280: LD_INT 1
22282: ARRAY
22283: PPUSH
22284: CALL_OW 251
22288: PPUSH
22289: LD_INT 70
22291: PPUSH
22292: CALL_OW 495
// end ;
22296: PPOPN 1
22298: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22299: LD_EXP 51
22303: PUSH
22304: LD_EXP 85
22308: AND
22309: IFFALSE 22520
22311: GO 22313
22313: DISABLE
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22321: LD_ADDR_VAR 0 5
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_OWVAR 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 21
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 5
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22520
// for i in tmp do
22366: LD_ADDR_VAR 0 1
22370: PUSH
22371: LD_VAR 0 5
22375: PUSH
22376: FOR_IN
22377: IFFALSE 22518
// begin d := rand ( 0 , 5 ) ;
22379: LD_ADDR_VAR 0 4
22383: PUSH
22384: LD_INT 0
22386: PPUSH
22387: LD_INT 5
22389: PPUSH
22390: CALL_OW 12
22394: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: LD_VAR 0 1
22404: PPUSH
22405: CALL_OW 250
22409: PPUSH
22410: LD_VAR 0 4
22414: PPUSH
22415: LD_INT 3
22417: PPUSH
22418: LD_INT 12
22420: PPUSH
22421: CALL_OW 12
22425: PPUSH
22426: CALL_OW 272
22430: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 251
22445: PPUSH
22446: LD_VAR 0 4
22450: PPUSH
22451: LD_INT 3
22453: PPUSH
22454: LD_INT 12
22456: PPUSH
22457: CALL_OW 12
22461: PPUSH
22462: CALL_OW 273
22466: ST_TO_ADDR
// if ValidHex ( x , y ) then
22467: LD_VAR 0 2
22471: PPUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: CALL_OW 488
22481: IFFALSE 22516
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22483: LD_VAR 0 1
22487: PPUSH
22488: LD_VAR 0 2
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_INT 3
22500: PPUSH
22501: LD_INT 6
22503: PPUSH
22504: CALL_OW 12
22508: PPUSH
22509: LD_INT 1
22511: PPUSH
22512: CALL_OW 483
// end ;
22516: GO 22376
22518: POP
22519: POP
// end ;
22520: PPOPN 5
22522: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22523: LD_EXP 51
22527: PUSH
22528: LD_EXP 86
22532: AND
22533: IFFALSE 22627
22535: GO 22537
22537: DISABLE
22538: LD_INT 0
22540: PPUSH
22541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 22
22549: PUSH
22550: LD_OWVAR 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 32
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: ST_TO_ADDR
// if not tmp then
22589: LD_VAR 0 2
22593: NOT
22594: IFFALSE 22598
// exit ;
22596: GO 22627
// for i in tmp do
22598: LD_ADDR_VAR 0 1
22602: PUSH
22603: LD_VAR 0 2
22607: PUSH
22608: FOR_IN
22609: IFFALSE 22625
// SetFuel ( i , 0 ) ;
22611: LD_VAR 0 1
22615: PPUSH
22616: LD_INT 0
22618: PPUSH
22619: CALL_OW 240
22623: GO 22608
22625: POP
22626: POP
// end ;
22627: PPOPN 2
22629: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22630: LD_EXP 51
22634: PUSH
22635: LD_EXP 87
22639: AND
22640: IFFALSE 22706
22642: GO 22644
22644: DISABLE
22645: LD_INT 0
22647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22648: LD_ADDR_VAR 0 1
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_OWVAR 2
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 30
22667: PUSH
22668: LD_INT 29
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// if not tmp then
22684: LD_VAR 0 1
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 22706
// DestroyUnit ( tmp [ 1 ] ) ;
22693: LD_VAR 0 1
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: CALL_OW 65
// end ;
22706: PPOPN 1
22708: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22709: LD_EXP 51
22713: PUSH
22714: LD_EXP 89
22718: AND
22719: IFFALSE 22848
22721: GO 22723
22723: DISABLE
22724: LD_INT 0
22726: PPUSH
// begin uc_side := 0 ;
22727: LD_ADDR_OWVAR 20
22731: PUSH
22732: LD_INT 0
22734: ST_TO_ADDR
// uc_nation := nation_arabian ;
22735: LD_ADDR_OWVAR 21
22739: PUSH
22740: LD_INT 2
22742: ST_TO_ADDR
// hc_gallery :=  ;
22743: LD_ADDR_OWVAR 33
22747: PUSH
22748: LD_STRING 
22750: ST_TO_ADDR
// hc_name :=  ;
22751: LD_ADDR_OWVAR 26
22755: PUSH
22756: LD_STRING 
22758: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22759: LD_INT 1
22761: PPUSH
22762: LD_INT 11
22764: PPUSH
22765: LD_INT 10
22767: PPUSH
22768: CALL_OW 380
// un := CreateHuman ;
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: CALL_OW 44
22781: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22782: LD_VAR 0 1
22786: PPUSH
22787: LD_INT 1
22789: PPUSH
22790: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22794: LD_INT 35
22796: PPUSH
22797: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22801: LD_VAR 0 1
22805: PPUSH
22806: LD_INT 22
22808: PUSH
22809: LD_OWVAR 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: PPUSH
22823: LD_VAR 0 1
22827: PPUSH
22828: CALL_OW 74
22832: PPUSH
22833: CALL_OW 115
// until IsDead ( un ) ;
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 301
22846: IFFALSE 22794
// end ;
22848: PPOPN 1
22850: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22851: LD_EXP 51
22855: PUSH
22856: LD_EXP 91
22860: AND
22861: IFFALSE 22873
22863: GO 22865
22865: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22866: LD_STRING earthquake(getX(game), 0, 32)
22868: PPUSH
22869: CALL_OW 559
22873: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22874: LD_EXP 51
22878: PUSH
22879: LD_EXP 92
22883: AND
22884: IFFALSE 22975
22886: GO 22888
22888: DISABLE
22889: LD_INT 0
22891: PPUSH
// begin enable ;
22892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22893: LD_ADDR_VAR 0 1
22897: PUSH
22898: LD_INT 22
22900: PUSH
22901: LD_OWVAR 2
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 21
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 33
22922: PUSH
22923: LD_INT 3
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 69
22939: ST_TO_ADDR
// if not tmp then
22940: LD_VAR 0 1
22944: NOT
22945: IFFALSE 22949
// exit ;
22947: GO 22975
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22949: LD_VAR 0 1
22953: PUSH
22954: LD_INT 1
22956: PPUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 12
22966: ARRAY
22967: PPUSH
22968: LD_INT 1
22970: PPUSH
22971: CALL_OW 234
// end ;
22975: PPOPN 1
22977: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22978: LD_EXP 51
22982: PUSH
22983: LD_EXP 93
22987: AND
22988: IFFALSE 23129
22990: GO 22992
22992: DISABLE
22993: LD_INT 0
22995: PPUSH
22996: PPUSH
22997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22998: LD_ADDR_VAR 0 3
23002: PUSH
23003: LD_INT 22
23005: PUSH
23006: LD_OWVAR 2
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 25
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PPUSH
23029: CALL_OW 69
23033: ST_TO_ADDR
// if not tmp then
23034: LD_VAR 0 3
23038: NOT
23039: IFFALSE 23043
// exit ;
23041: GO 23129
// un := tmp [ rand ( 1 , tmp ) ] ;
23043: LD_ADDR_VAR 0 2
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_INT 1
23055: PPUSH
23056: LD_VAR 0 3
23060: PPUSH
23061: CALL_OW 12
23065: ARRAY
23066: ST_TO_ADDR
// if Crawls ( un ) then
23067: LD_VAR 0 2
23071: PPUSH
23072: CALL_OW 318
23076: IFFALSE 23087
// ComWalk ( un ) ;
23078: LD_VAR 0 2
23082: PPUSH
23083: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23087: LD_VAR 0 2
23091: PPUSH
23092: LD_INT 9
23094: PPUSH
23095: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23099: LD_INT 28
23101: PPUSH
23102: LD_OWVAR 2
23106: PPUSH
23107: LD_INT 2
23109: PPUSH
23110: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23114: LD_INT 29
23116: PPUSH
23117: LD_OWVAR 2
23121: PPUSH
23122: LD_INT 2
23124: PPUSH
23125: CALL_OW 322
// end ;
23129: PPOPN 3
23131: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23132: LD_EXP 51
23136: PUSH
23137: LD_EXP 94
23141: AND
23142: IFFALSE 23253
23144: GO 23146
23146: DISABLE
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: LD_INT 22
23159: PUSH
23160: LD_OWVAR 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 25
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 69
23187: ST_TO_ADDR
// if not tmp then
23188: LD_VAR 0 3
23192: NOT
23193: IFFALSE 23197
// exit ;
23195: GO 23253
// un := tmp [ rand ( 1 , tmp ) ] ;
23197: LD_ADDR_VAR 0 2
23201: PUSH
23202: LD_VAR 0 3
23206: PUSH
23207: LD_INT 1
23209: PPUSH
23210: LD_VAR 0 3
23214: PPUSH
23215: CALL_OW 12
23219: ARRAY
23220: ST_TO_ADDR
// if Crawls ( un ) then
23221: LD_VAR 0 2
23225: PPUSH
23226: CALL_OW 318
23230: IFFALSE 23241
// ComWalk ( un ) ;
23232: LD_VAR 0 2
23236: PPUSH
23237: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23241: LD_VAR 0 2
23245: PPUSH
23246: LD_INT 8
23248: PPUSH
23249: CALL_OW 336
// end ;
23253: PPOPN 3
23255: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23256: LD_EXP 51
23260: PUSH
23261: LD_EXP 95
23265: AND
23266: IFFALSE 23410
23268: GO 23270
23270: DISABLE
23271: LD_INT 0
23273: PPUSH
23274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23275: LD_ADDR_VAR 0 2
23279: PUSH
23280: LD_INT 22
23282: PUSH
23283: LD_OWVAR 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 21
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 34
23307: PUSH
23308: LD_INT 12
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 34
23317: PUSH
23318: LD_INT 51
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 34
23327: PUSH
23328: LD_INT 32
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 69
23350: ST_TO_ADDR
// if not tmp then
23351: LD_VAR 0 2
23355: NOT
23356: IFFALSE 23360
// exit ;
23358: GO 23410
// for i in tmp do
23360: LD_ADDR_VAR 0 1
23364: PUSH
23365: LD_VAR 0 2
23369: PUSH
23370: FOR_IN
23371: IFFALSE 23408
// if GetCargo ( i , mat_artifact ) = 0 then
23373: LD_VAR 0 1
23377: PPUSH
23378: LD_INT 4
23380: PPUSH
23381: CALL_OW 289
23385: PUSH
23386: LD_INT 0
23388: EQUAL
23389: IFFALSE 23406
// SetCargo ( i , mat_siberit , 100 ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_INT 3
23398: PPUSH
23399: LD_INT 100
23401: PPUSH
23402: CALL_OW 290
23406: GO 23370
23408: POP
23409: POP
// end ;
23410: PPOPN 2
23412: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23413: LD_EXP 51
23417: PUSH
23418: LD_EXP 96
23422: AND
23423: IFFALSE 23606
23425: GO 23427
23427: DISABLE
23428: LD_INT 0
23430: PPUSH
23431: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23432: LD_ADDR_VAR 0 2
23436: PUSH
23437: LD_INT 22
23439: PUSH
23440: LD_OWVAR 2
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PPUSH
23449: CALL_OW 69
23453: ST_TO_ADDR
// if not tmp then
23454: LD_VAR 0 2
23458: NOT
23459: IFFALSE 23463
// exit ;
23461: GO 23606
// for i := 1 to 2 do
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: DOUBLE
23469: LD_INT 1
23471: DEC
23472: ST_TO_ADDR
23473: LD_INT 2
23475: PUSH
23476: FOR_TO
23477: IFFALSE 23604
// begin uc_side := your_side ;
23479: LD_ADDR_OWVAR 20
23483: PUSH
23484: LD_OWVAR 2
23488: ST_TO_ADDR
// uc_nation := nation_american ;
23489: LD_ADDR_OWVAR 21
23493: PUSH
23494: LD_INT 1
23496: ST_TO_ADDR
// vc_chassis := us_morphling ;
23497: LD_ADDR_OWVAR 37
23501: PUSH
23502: LD_INT 5
23504: ST_TO_ADDR
// vc_engine := engine_siberite ;
23505: LD_ADDR_OWVAR 39
23509: PUSH
23510: LD_INT 3
23512: ST_TO_ADDR
// vc_control := control_computer ;
23513: LD_ADDR_OWVAR 38
23517: PUSH
23518: LD_INT 3
23520: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23521: LD_ADDR_OWVAR 40
23525: PUSH
23526: LD_INT 10
23528: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23529: LD_VAR 0 2
23533: PUSH
23534: LD_INT 1
23536: ARRAY
23537: PPUSH
23538: CALL_OW 310
23542: NOT
23543: IFFALSE 23590
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23545: CALL_OW 45
23549: PPUSH
23550: LD_VAR 0 2
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: PPUSH
23559: CALL_OW 250
23563: PPUSH
23564: LD_VAR 0 2
23568: PUSH
23569: LD_INT 1
23571: ARRAY
23572: PPUSH
23573: CALL_OW 251
23577: PPUSH
23578: LD_INT 12
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 50
23588: GO 23602
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23590: CALL_OW 45
23594: PPUSH
23595: LD_INT 1
23597: PPUSH
23598: CALL_OW 51
// end ;
23602: GO 23476
23604: POP
23605: POP
// end ;
23606: PPOPN 2
23608: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23609: LD_EXP 51
23613: PUSH
23614: LD_EXP 97
23618: AND
23619: IFFALSE 23841
23621: GO 23623
23623: DISABLE
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23632: LD_ADDR_VAR 0 6
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_OWVAR 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 23
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: ST_TO_ADDR
// if not tmp then
23686: LD_VAR 0 6
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23841
// s1 := rand ( 1 , 4 ) ;
23695: LD_ADDR_VAR 0 2
23699: PUSH
23700: LD_INT 1
23702: PPUSH
23703: LD_INT 4
23705: PPUSH
23706: CALL_OW 12
23710: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23711: LD_ADDR_VAR 0 4
23715: PUSH
23716: LD_VAR 0 6
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PPUSH
23725: LD_VAR 0 2
23729: PPUSH
23730: CALL_OW 259
23734: ST_TO_ADDR
// if s1 = 1 then
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 1
23742: EQUAL
23743: IFFALSE 23763
// s2 := rand ( 2 , 4 ) else
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: LD_INT 2
23752: PPUSH
23753: LD_INT 4
23755: PPUSH
23756: CALL_OW 12
23760: ST_TO_ADDR
23761: GO 23771
// s2 := 1 ;
23763: LD_ADDR_VAR 0 3
23767: PUSH
23768: LD_INT 1
23770: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23771: LD_ADDR_VAR 0 5
23775: PUSH
23776: LD_VAR 0 6
23780: PUSH
23781: LD_INT 1
23783: ARRAY
23784: PPUSH
23785: LD_VAR 0 3
23789: PPUSH
23790: CALL_OW 259
23794: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23795: LD_VAR 0 6
23799: PUSH
23800: LD_INT 1
23802: ARRAY
23803: PPUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: LD_VAR 0 5
23813: PPUSH
23814: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23818: LD_VAR 0 6
23822: PUSH
23823: LD_INT 1
23825: ARRAY
23826: PPUSH
23827: LD_VAR 0 3
23831: PPUSH
23832: LD_VAR 0 4
23836: PPUSH
23837: CALL_OW 237
// end ;
23841: PPOPN 6
23843: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23844: LD_EXP 51
23848: PUSH
23849: LD_EXP 98
23853: AND
23854: IFFALSE 23933
23856: GO 23858
23858: DISABLE
23859: LD_INT 0
23861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23862: LD_ADDR_VAR 0 1
23866: PUSH
23867: LD_INT 22
23869: PUSH
23870: LD_OWVAR 2
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 30
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 1
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23907: LD_VAR 0 1
23911: PUSH
23912: LD_INT 1
23914: PPUSH
23915: LD_VAR 0 1
23919: PPUSH
23920: CALL_OW 12
23924: ARRAY
23925: PPUSH
23926: LD_INT 1
23928: PPUSH
23929: CALL_OW 234
// end ;
23933: PPOPN 1
23935: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23936: LD_EXP 51
23940: PUSH
23941: LD_EXP 99
23945: AND
23946: IFFALSE 24058
23948: GO 23950
23950: DISABLE
23951: LD_INT 0
23953: PPUSH
23954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_OWVAR 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: LD_INT 30
23977: PUSH
23978: LD_INT 27
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 30
23987: PUSH
23988: LD_INT 26
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 30
23997: PUSH
23998: LD_INT 28
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PPUSH
24015: CALL_OW 69
24019: ST_TO_ADDR
// if not tmp then
24020: LD_VAR 0 2
24024: NOT
24025: IFFALSE 24029
// exit ;
24027: GO 24058
// for i in tmp do
24029: LD_ADDR_VAR 0 1
24033: PUSH
24034: LD_VAR 0 2
24038: PUSH
24039: FOR_IN
24040: IFFALSE 24056
// SetLives ( i , 1 ) ;
24042: LD_VAR 0 1
24046: PPUSH
24047: LD_INT 1
24049: PPUSH
24050: CALL_OW 234
24054: GO 24039
24056: POP
24057: POP
// end ;
24058: PPOPN 2
24060: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24061: LD_EXP 51
24065: PUSH
24066: LD_EXP 100
24070: AND
24071: IFFALSE 24358
24073: GO 24075
24075: DISABLE
24076: LD_INT 0
24078: PPUSH
24079: PPUSH
24080: PPUSH
// begin i := rand ( 1 , 7 ) ;
24081: LD_ADDR_VAR 0 1
24085: PUSH
24086: LD_INT 1
24088: PPUSH
24089: LD_INT 7
24091: PPUSH
24092: CALL_OW 12
24096: ST_TO_ADDR
// case i of 1 :
24097: LD_VAR 0 1
24101: PUSH
24102: LD_INT 1
24104: DOUBLE
24105: EQUAL
24106: IFTRUE 24110
24108: GO 24120
24110: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24111: LD_STRING earthquake(getX(game), 0, 32)
24113: PPUSH
24114: CALL_OW 559
24118: GO 24358
24120: LD_INT 2
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24142
24128: POP
// begin ToLua ( displayStucuk(); ) ;
24129: LD_STRING displayStucuk();
24131: PPUSH
24132: CALL_OW 559
// ResetFog ;
24136: CALL_OW 335
// end ; 3 :
24140: GO 24358
24142: LD_INT 3
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24254
24150: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24151: LD_ADDR_VAR 0 2
24155: PUSH
24156: LD_INT 22
24158: PUSH
24159: LD_OWVAR 2
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 25
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PPUSH
24182: CALL_OW 69
24186: ST_TO_ADDR
// if not tmp then
24187: LD_VAR 0 2
24191: NOT
24192: IFFALSE 24196
// exit ;
24194: GO 24358
// un := tmp [ rand ( 1 , tmp ) ] ;
24196: LD_ADDR_VAR 0 3
24200: PUSH
24201: LD_VAR 0 2
24205: PUSH
24206: LD_INT 1
24208: PPUSH
24209: LD_VAR 0 2
24213: PPUSH
24214: CALL_OW 12
24218: ARRAY
24219: ST_TO_ADDR
// if Crawls ( un ) then
24220: LD_VAR 0 3
24224: PPUSH
24225: CALL_OW 318
24229: IFFALSE 24240
// ComWalk ( un ) ;
24231: LD_VAR 0 3
24235: PPUSH
24236: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24240: LD_VAR 0 3
24244: PPUSH
24245: LD_INT 8
24247: PPUSH
24248: CALL_OW 336
// end ; 4 :
24252: GO 24358
24254: LD_INT 4
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24336
24262: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_OWVAR 2
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 30
24282: PUSH
24283: LD_INT 29
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PPUSH
24294: CALL_OW 69
24298: ST_TO_ADDR
// if not tmp then
24299: LD_VAR 0 2
24303: NOT
24304: IFFALSE 24308
// exit ;
24306: GO 24358
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24308: LD_VAR 0 2
24312: PUSH
24313: LD_INT 1
24315: ARRAY
24316: PPUSH
24317: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: PPUSH
24330: CALL_OW 65
// end ; 5 .. 7 :
24334: GO 24358
24336: LD_INT 5
24338: DOUBLE
24339: GREATEREQUAL
24340: IFFALSE 24348
24342: LD_INT 7
24344: DOUBLE
24345: LESSEQUAL
24346: IFTRUE 24350
24348: GO 24357
24350: POP
// StreamSibBomb ; end ;
24351: CALL 20595 0 0
24355: GO 24358
24357: POP
// end ;
24358: PPOPN 3
24360: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24361: LD_EXP 51
24365: PUSH
24366: LD_EXP 101
24370: AND
24371: IFFALSE 24527
24373: GO 24375
24375: DISABLE
24376: LD_INT 0
24378: PPUSH
24379: PPUSH
24380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24381: LD_ADDR_VAR 0 2
24385: PUSH
24386: LD_INT 81
24388: PUSH
24389: LD_OWVAR 2
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 21
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 21
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PPUSH
24430: CALL_OW 69
24434: ST_TO_ADDR
// if not tmp then
24435: LD_VAR 0 2
24439: NOT
24440: IFFALSE 24444
// exit ;
24442: GO 24527
// p := 0 ;
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_INT 0
24451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24452: LD_INT 35
24454: PPUSH
24455: CALL_OW 67
// p := p + 1 ;
24459: LD_ADDR_VAR 0 3
24463: PUSH
24464: LD_VAR 0 3
24468: PUSH
24469: LD_INT 1
24471: PLUS
24472: ST_TO_ADDR
// for i in tmp do
24473: LD_ADDR_VAR 0 1
24477: PUSH
24478: LD_VAR 0 2
24482: PUSH
24483: FOR_IN
24484: IFFALSE 24515
// if GetLives ( i ) < 1000 then
24486: LD_VAR 0 1
24490: PPUSH
24491: CALL_OW 256
24495: PUSH
24496: LD_INT 1000
24498: LESS
24499: IFFALSE 24513
// SetLives ( i , 1000 ) ;
24501: LD_VAR 0 1
24505: PPUSH
24506: LD_INT 1000
24508: PPUSH
24509: CALL_OW 234
24513: GO 24483
24515: POP
24516: POP
// until p > 20 ;
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 20
24524: GREATER
24525: IFFALSE 24452
// end ;
24527: PPOPN 3
24529: END
// every 0 0$1 trigger StreamModeActive and sTime do
24530: LD_EXP 51
24534: PUSH
24535: LD_EXP 102
24539: AND
24540: IFFALSE 24575
24542: GO 24544
24544: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24545: LD_INT 28
24547: PPUSH
24548: LD_OWVAR 2
24552: PPUSH
24553: LD_INT 2
24555: PPUSH
24556: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24560: LD_INT 30
24562: PPUSH
24563: LD_OWVAR 2
24567: PPUSH
24568: LD_INT 2
24570: PPUSH
24571: CALL_OW 322
// end ;
24575: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24576: LD_EXP 51
24580: PUSH
24581: LD_EXP 103
24585: AND
24586: IFFALSE 24707
24588: GO 24590
24590: DISABLE
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_INT 22
24602: PUSH
24603: LD_OWVAR 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 21
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: PUSH
24625: LD_INT 23
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 2
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24707
// for i in tmp do
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 2
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24705
// begin if Crawls ( i ) then
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 318
24680: IFFALSE 24691
// ComWalk ( i ) ;
24682: LD_VAR 0 1
24686: PPUSH
24687: CALL_OW 138
// SetClass ( i , 2 ) ;
24691: LD_VAR 0 1
24695: PPUSH
24696: LD_INT 2
24698: PPUSH
24699: CALL_OW 336
// end ;
24703: GO 24668
24705: POP
24706: POP
// end ;
24707: PPOPN 2
24709: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24710: LD_EXP 51
24714: PUSH
24715: LD_EXP 104
24719: AND
24720: IFFALSE 25008
24722: GO 24724
24724: DISABLE
24725: LD_INT 0
24727: PPUSH
24728: PPUSH
24729: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24730: LD_OWVAR 2
24734: PPUSH
24735: LD_INT 9
24737: PPUSH
24738: LD_INT 1
24740: PPUSH
24741: LD_INT 1
24743: PPUSH
24744: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24748: LD_INT 9
24750: PPUSH
24751: LD_OWVAR 2
24755: PPUSH
24756: CALL_OW 343
// uc_side := 9 ;
24760: LD_ADDR_OWVAR 20
24764: PUSH
24765: LD_INT 9
24767: ST_TO_ADDR
// uc_nation := 2 ;
24768: LD_ADDR_OWVAR 21
24772: PUSH
24773: LD_INT 2
24775: ST_TO_ADDR
// hc_name := Dark Warrior ;
24776: LD_ADDR_OWVAR 26
24780: PUSH
24781: LD_STRING Dark Warrior
24783: ST_TO_ADDR
// hc_gallery :=  ;
24784: LD_ADDR_OWVAR 33
24788: PUSH
24789: LD_STRING 
24791: ST_TO_ADDR
// hc_noskilllimit := true ;
24792: LD_ADDR_OWVAR 76
24796: PUSH
24797: LD_INT 1
24799: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24800: LD_ADDR_OWVAR 31
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 30
24813: PUSH
24814: LD_INT 30
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
// un := CreateHuman ;
24823: LD_ADDR_VAR 0 3
24827: PUSH
24828: CALL_OW 44
24832: ST_TO_ADDR
// hc_noskilllimit := false ;
24833: LD_ADDR_OWVAR 76
24837: PUSH
24838: LD_INT 0
24840: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24841: LD_VAR 0 3
24845: PPUSH
24846: LD_INT 1
24848: PPUSH
24849: CALL_OW 51
// ToLua ( playRanger() ) ;
24853: LD_STRING playRanger()
24855: PPUSH
24856: CALL_OW 559
// p := 0 ;
24860: LD_ADDR_VAR 0 2
24864: PUSH
24865: LD_INT 0
24867: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24868: LD_INT 35
24870: PPUSH
24871: CALL_OW 67
// p := p + 1 ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_VAR 0 2
24884: PUSH
24885: LD_INT 1
24887: PLUS
24888: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24889: LD_VAR 0 3
24893: PPUSH
24894: CALL_OW 256
24898: PUSH
24899: LD_INT 1000
24901: LESS
24902: IFFALSE 24916
// SetLives ( un , 1000 ) ;
24904: LD_VAR 0 3
24908: PPUSH
24909: LD_INT 1000
24911: PPUSH
24912: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24916: LD_VAR 0 3
24920: PPUSH
24921: LD_INT 81
24923: PUSH
24924: LD_OWVAR 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 91
24935: PUSH
24936: LD_VAR 0 3
24940: PUSH
24941: LD_INT 30
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PPUSH
24953: CALL_OW 69
24957: PPUSH
24958: LD_VAR 0 3
24962: PPUSH
24963: CALL_OW 74
24967: PPUSH
24968: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24972: LD_VAR 0 2
24976: PUSH
24977: LD_INT 80
24979: GREATER
24980: PUSH
24981: LD_VAR 0 3
24985: PPUSH
24986: CALL_OW 301
24990: OR
24991: IFFALSE 24868
// if un then
24993: LD_VAR 0 3
24997: IFFALSE 25008
// RemoveUnit ( un ) ;
24999: LD_VAR 0 3
25003: PPUSH
25004: CALL_OW 64
// end ;
25008: PPOPN 3
25010: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25011: LD_EXP 105
25015: IFFALSE 25131
25017: GO 25019
25019: DISABLE
25020: LD_INT 0
25022: PPUSH
25023: PPUSH
25024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 81
25032: PUSH
25033: LD_OWVAR 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 21
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PPUSH
25056: CALL_OW 69
25060: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25061: LD_STRING playComputer()
25063: PPUSH
25064: CALL_OW 559
// if not tmp then
25068: LD_VAR 0 2
25072: NOT
25073: IFFALSE 25077
// exit ;
25075: GO 25131
// for i in tmp do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_VAR 0 2
25086: PUSH
25087: FOR_IN
25088: IFFALSE 25129
// for j := 1 to 4 do
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: DOUBLE
25096: LD_INT 1
25098: DEC
25099: ST_TO_ADDR
25100: LD_INT 4
25102: PUSH
25103: FOR_TO
25104: IFFALSE 25125
// SetSkill ( i , j , 10 ) ;
25106: LD_VAR 0 1
25110: PPUSH
25111: LD_VAR 0 3
25115: PPUSH
25116: LD_INT 10
25118: PPUSH
25119: CALL_OW 237
25123: GO 25103
25125: POP
25126: POP
25127: GO 25087
25129: POP
25130: POP
// end ;
25131: PPOPN 3
25133: END
// every 0 0$1 trigger s30 do var i , tmp ;
25134: LD_EXP 106
25138: IFFALSE 25207
25140: GO 25142
25142: DISABLE
25143: LD_INT 0
25145: PPUSH
25146: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25147: LD_ADDR_VAR 0 2
25151: PUSH
25152: LD_INT 22
25154: PUSH
25155: LD_OWVAR 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PPUSH
25164: CALL_OW 69
25168: ST_TO_ADDR
// if not tmp then
25169: LD_VAR 0 2
25173: NOT
25174: IFFALSE 25178
// exit ;
25176: GO 25207
// for i in tmp do
25178: LD_ADDR_VAR 0 1
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: FOR_IN
25189: IFFALSE 25205
// SetLives ( i , 300 ) ;
25191: LD_VAR 0 1
25195: PPUSH
25196: LD_INT 300
25198: PPUSH
25199: CALL_OW 234
25203: GO 25188
25205: POP
25206: POP
// end ;
25207: PPOPN 2
25209: END
// every 0 0$1 trigger s60 do var i , tmp ;
25210: LD_EXP 107
25214: IFFALSE 25283
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: LD_INT 22
25230: PUSH
25231: LD_OWVAR 2
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 2
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25283
// for i in tmp do
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25281
// SetLives ( i , 600 ) ;
25267: LD_VAR 0 1
25271: PPUSH
25272: LD_INT 600
25274: PPUSH
25275: CALL_OW 234
25279: GO 25264
25281: POP
25282: POP
// end ;
25283: PPOPN 2
25285: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25286: LD_INT 0
25288: PPUSH
// case cmd of 301 :
25289: LD_VAR 0 1
25293: PUSH
25294: LD_INT 301
25296: DOUBLE
25297: EQUAL
25298: IFTRUE 25302
25300: GO 25334
25302: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25303: LD_VAR 0 6
25307: PPUSH
25308: LD_VAR 0 7
25312: PPUSH
25313: LD_VAR 0 8
25317: PPUSH
25318: LD_VAR 0 4
25322: PPUSH
25323: LD_VAR 0 5
25327: PPUSH
25328: CALL 26535 0 5
25332: GO 25455
25334: LD_INT 302
25336: DOUBLE
25337: EQUAL
25338: IFTRUE 25342
25340: GO 25379
25342: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25343: LD_VAR 0 6
25347: PPUSH
25348: LD_VAR 0 7
25352: PPUSH
25353: LD_VAR 0 8
25357: PPUSH
25358: LD_VAR 0 9
25362: PPUSH
25363: LD_VAR 0 4
25367: PPUSH
25368: LD_VAR 0 5
25372: PPUSH
25373: CALL 26626 0 6
25377: GO 25455
25379: LD_INT 303
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25424
25387: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25388: LD_VAR 0 6
25392: PPUSH
25393: LD_VAR 0 7
25397: PPUSH
25398: LD_VAR 0 8
25402: PPUSH
25403: LD_VAR 0 9
25407: PPUSH
25408: LD_VAR 0 4
25412: PPUSH
25413: LD_VAR 0 5
25417: PPUSH
25418: CALL 25460 0 6
25422: GO 25455
25424: LD_INT 304
25426: DOUBLE
25427: EQUAL
25428: IFTRUE 25432
25430: GO 25454
25432: POP
// hHackTeleport ( unit , x , y ) ; end ;
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_VAR 0 4
25442: PPUSH
25443: LD_VAR 0 5
25447: PPUSH
25448: CALL 27219 0 3
25452: GO 25455
25454: POP
// end ;
25455: LD_VAR 0 12
25459: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25460: LD_INT 0
25462: PPUSH
25463: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25464: LD_VAR 0 1
25468: PUSH
25469: LD_INT 1
25471: LESS
25472: PUSH
25473: LD_VAR 0 1
25477: PUSH
25478: LD_INT 3
25480: GREATER
25481: OR
25482: PUSH
25483: LD_VAR 0 5
25487: PPUSH
25488: LD_VAR 0 6
25492: PPUSH
25493: CALL_OW 428
25497: OR
25498: IFFALSE 25502
// exit ;
25500: GO 26222
// uc_side := your_side ;
25502: LD_ADDR_OWVAR 20
25506: PUSH
25507: LD_OWVAR 2
25511: ST_TO_ADDR
// uc_nation := nation ;
25512: LD_ADDR_OWVAR 21
25516: PUSH
25517: LD_VAR 0 1
25521: ST_TO_ADDR
// bc_level = 1 ;
25522: LD_ADDR_OWVAR 43
25526: PUSH
25527: LD_INT 1
25529: ST_TO_ADDR
// case btype of 1 :
25530: LD_VAR 0 2
25534: PUSH
25535: LD_INT 1
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25554
25543: POP
// bc_type := b_depot ; 2 :
25544: LD_ADDR_OWVAR 42
25548: PUSH
25549: LD_INT 0
25551: ST_TO_ADDR
25552: GO 26166
25554: LD_INT 2
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25573
25562: POP
// bc_type := b_warehouse ; 3 :
25563: LD_ADDR_OWVAR 42
25567: PUSH
25568: LD_INT 1
25570: ST_TO_ADDR
25571: GO 26166
25573: LD_INT 3
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25592
25581: POP
// bc_type := b_lab ; 4 .. 9 :
25582: LD_ADDR_OWVAR 42
25586: PUSH
25587: LD_INT 6
25589: ST_TO_ADDR
25590: GO 26166
25592: LD_INT 4
25594: DOUBLE
25595: GREATEREQUAL
25596: IFFALSE 25604
25598: LD_INT 9
25600: DOUBLE
25601: LESSEQUAL
25602: IFTRUE 25606
25604: GO 25658
25606: POP
// begin bc_type := b_lab_half ;
25607: LD_ADDR_OWVAR 42
25611: PUSH
25612: LD_INT 7
25614: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25615: LD_ADDR_OWVAR 44
25619: PUSH
25620: LD_INT 10
25622: PUSH
25623: LD_INT 11
25625: PUSH
25626: LD_INT 12
25628: PUSH
25629: LD_INT 15
25631: PUSH
25632: LD_INT 14
25634: PUSH
25635: LD_INT 13
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: LD_VAR 0 2
25650: PUSH
25651: LD_INT 3
25653: MINUS
25654: ARRAY
25655: ST_TO_ADDR
// end ; 10 .. 13 :
25656: GO 26166
25658: LD_INT 10
25660: DOUBLE
25661: GREATEREQUAL
25662: IFFALSE 25670
25664: LD_INT 13
25666: DOUBLE
25667: LESSEQUAL
25668: IFTRUE 25672
25670: GO 25749
25672: POP
// begin bc_type := b_lab_full ;
25673: LD_ADDR_OWVAR 42
25677: PUSH
25678: LD_INT 8
25680: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25681: LD_ADDR_OWVAR 44
25685: PUSH
25686: LD_INT 10
25688: PUSH
25689: LD_INT 12
25691: PUSH
25692: LD_INT 14
25694: PUSH
25695: LD_INT 13
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: LD_VAR 0 2
25708: PUSH
25709: LD_INT 9
25711: MINUS
25712: ARRAY
25713: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25714: LD_ADDR_OWVAR 45
25718: PUSH
25719: LD_INT 11
25721: PUSH
25722: LD_INT 15
25724: PUSH
25725: LD_INT 12
25727: PUSH
25728: LD_INT 15
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: PUSH
25737: LD_VAR 0 2
25741: PUSH
25742: LD_INT 9
25744: MINUS
25745: ARRAY
25746: ST_TO_ADDR
// end ; 14 :
25747: GO 26166
25749: LD_INT 14
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25768
25757: POP
// bc_type := b_workshop ; 15 :
25758: LD_ADDR_OWVAR 42
25762: PUSH
25763: LD_INT 2
25765: ST_TO_ADDR
25766: GO 26166
25768: LD_INT 15
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25787
25776: POP
// bc_type := b_factory ; 16 :
25777: LD_ADDR_OWVAR 42
25781: PUSH
25782: LD_INT 3
25784: ST_TO_ADDR
25785: GO 26166
25787: LD_INT 16
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// bc_type := b_ext_gun ; 17 :
25796: LD_ADDR_OWVAR 42
25800: PUSH
25801: LD_INT 17
25803: ST_TO_ADDR
25804: GO 26166
25806: LD_INT 17
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25842
25814: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25815: LD_ADDR_OWVAR 42
25819: PUSH
25820: LD_INT 19
25822: PUSH
25823: LD_INT 23
25825: PUSH
25826: LD_INT 19
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: PUSH
25834: LD_VAR 0 1
25838: ARRAY
25839: ST_TO_ADDR
25840: GO 26166
25842: LD_INT 18
25844: DOUBLE
25845: EQUAL
25846: IFTRUE 25850
25848: GO 25861
25850: POP
// bc_type := b_ext_radar ; 19 :
25851: LD_ADDR_OWVAR 42
25855: PUSH
25856: LD_INT 20
25858: ST_TO_ADDR
25859: GO 26166
25861: LD_INT 19
25863: DOUBLE
25864: EQUAL
25865: IFTRUE 25869
25867: GO 25880
25869: POP
// bc_type := b_ext_radio ; 20 :
25870: LD_ADDR_OWVAR 42
25874: PUSH
25875: LD_INT 22
25877: ST_TO_ADDR
25878: GO 26166
25880: LD_INT 20
25882: DOUBLE
25883: EQUAL
25884: IFTRUE 25888
25886: GO 25899
25888: POP
// bc_type := b_ext_siberium ; 21 :
25889: LD_ADDR_OWVAR 42
25893: PUSH
25894: LD_INT 21
25896: ST_TO_ADDR
25897: GO 26166
25899: LD_INT 21
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25918
25907: POP
// bc_type := b_ext_computer ; 22 :
25908: LD_ADDR_OWVAR 42
25912: PUSH
25913: LD_INT 24
25915: ST_TO_ADDR
25916: GO 26166
25918: LD_INT 22
25920: DOUBLE
25921: EQUAL
25922: IFTRUE 25926
25924: GO 25937
25926: POP
// bc_type := b_ext_track ; 23 :
25927: LD_ADDR_OWVAR 42
25931: PUSH
25932: LD_INT 16
25934: ST_TO_ADDR
25935: GO 26166
25937: LD_INT 23
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25956
25945: POP
// bc_type := b_ext_laser ; 24 :
25946: LD_ADDR_OWVAR 42
25950: PUSH
25951: LD_INT 25
25953: ST_TO_ADDR
25954: GO 26166
25956: LD_INT 24
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 25975
25964: POP
// bc_type := b_control_tower ; 25 :
25965: LD_ADDR_OWVAR 42
25969: PUSH
25970: LD_INT 36
25972: ST_TO_ADDR
25973: GO 26166
25975: LD_INT 25
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 25994
25983: POP
// bc_type := b_breastwork ; 26 :
25984: LD_ADDR_OWVAR 42
25988: PUSH
25989: LD_INT 31
25991: ST_TO_ADDR
25992: GO 26166
25994: LD_INT 26
25996: DOUBLE
25997: EQUAL
25998: IFTRUE 26002
26000: GO 26013
26002: POP
// bc_type := b_bunker ; 27 :
26003: LD_ADDR_OWVAR 42
26007: PUSH
26008: LD_INT 32
26010: ST_TO_ADDR
26011: GO 26166
26013: LD_INT 27
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26032
26021: POP
// bc_type := b_turret ; 28 :
26022: LD_ADDR_OWVAR 42
26026: PUSH
26027: LD_INT 33
26029: ST_TO_ADDR
26030: GO 26166
26032: LD_INT 28
26034: DOUBLE
26035: EQUAL
26036: IFTRUE 26040
26038: GO 26051
26040: POP
// bc_type := b_armoury ; 29 :
26041: LD_ADDR_OWVAR 42
26045: PUSH
26046: LD_INT 4
26048: ST_TO_ADDR
26049: GO 26166
26051: LD_INT 29
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26070
26059: POP
// bc_type := b_barracks ; 30 :
26060: LD_ADDR_OWVAR 42
26064: PUSH
26065: LD_INT 5
26067: ST_TO_ADDR
26068: GO 26166
26070: LD_INT 30
26072: DOUBLE
26073: EQUAL
26074: IFTRUE 26078
26076: GO 26089
26078: POP
// bc_type := b_solar_power ; 31 :
26079: LD_ADDR_OWVAR 42
26083: PUSH
26084: LD_INT 27
26086: ST_TO_ADDR
26087: GO 26166
26089: LD_INT 31
26091: DOUBLE
26092: EQUAL
26093: IFTRUE 26097
26095: GO 26108
26097: POP
// bc_type := b_oil_power ; 32 :
26098: LD_ADDR_OWVAR 42
26102: PUSH
26103: LD_INT 26
26105: ST_TO_ADDR
26106: GO 26166
26108: LD_INT 32
26110: DOUBLE
26111: EQUAL
26112: IFTRUE 26116
26114: GO 26127
26116: POP
// bc_type := b_siberite_power ; 33 :
26117: LD_ADDR_OWVAR 42
26121: PUSH
26122: LD_INT 28
26124: ST_TO_ADDR
26125: GO 26166
26127: LD_INT 33
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26146
26135: POP
// bc_type := b_oil_mine ; 34 :
26136: LD_ADDR_OWVAR 42
26140: PUSH
26141: LD_INT 29
26143: ST_TO_ADDR
26144: GO 26166
26146: LD_INT 34
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26154
26152: GO 26165
26154: POP
// bc_type := b_siberite_mine ; end ;
26155: LD_ADDR_OWVAR 42
26159: PUSH
26160: LD_INT 30
26162: ST_TO_ADDR
26163: GO 26166
26165: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26166: LD_ADDR_VAR 0 8
26170: PUSH
26171: LD_VAR 0 5
26175: PPUSH
26176: LD_VAR 0 6
26180: PPUSH
26181: LD_VAR 0 3
26185: PPUSH
26186: CALL_OW 47
26190: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26191: LD_OWVAR 42
26195: PUSH
26196: LD_INT 32
26198: PUSH
26199: LD_INT 33
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: IN
26206: IFFALSE 26222
// PlaceWeaponTurret ( b , weapon ) ;
26208: LD_VAR 0 8
26212: PPUSH
26213: LD_VAR 0 4
26217: PPUSH
26218: CALL_OW 431
// end ;
26222: LD_VAR 0 7
26226: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26233: LD_ADDR_VAR 0 4
26237: PUSH
26238: LD_INT 22
26240: PUSH
26241: LD_OWVAR 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 30
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 30
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 4
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26355
// for i in tmp do
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 4
26305: PUSH
26306: FOR_IN
26307: IFFALSE 26353
// for j = 1 to 3 do
26309: LD_ADDR_VAR 0 3
26313: PUSH
26314: DOUBLE
26315: LD_INT 1
26317: DEC
26318: ST_TO_ADDR
26319: LD_INT 3
26321: PUSH
26322: FOR_TO
26323: IFFALSE 26349
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26325: LD_VAR 0 2
26329: PPUSH
26330: CALL_OW 274
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: LD_INT 99999
26342: PPUSH
26343: CALL_OW 277
26347: GO 26322
26349: POP
26350: POP
26351: GO 26306
26353: POP
26354: POP
// end ;
26355: LD_VAR 0 1
26359: RET
// export function hHackSetLevel10 ; var i , j ; begin
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
26364: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26365: LD_ADDR_VAR 0 2
26369: PUSH
26370: LD_INT 21
26372: PUSH
26373: LD_INT 1
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 69
26384: PUSH
26385: FOR_IN
26386: IFFALSE 26438
// if IsSelected ( i ) then
26388: LD_VAR 0 2
26392: PPUSH
26393: CALL_OW 306
26397: IFFALSE 26436
// begin for j := 1 to 4 do
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: DOUBLE
26405: LD_INT 1
26407: DEC
26408: ST_TO_ADDR
26409: LD_INT 4
26411: PUSH
26412: FOR_TO
26413: IFFALSE 26434
// SetSkill ( i , j , 10 ) ;
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 3
26424: PPUSH
26425: LD_INT 10
26427: PPUSH
26428: CALL_OW 237
26432: GO 26412
26434: POP
26435: POP
// end ;
26436: GO 26385
26438: POP
26439: POP
// end ;
26440: LD_VAR 0 1
26444: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
26449: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26450: LD_ADDR_VAR 0 2
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_OWVAR 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 21
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL_OW 69
26485: PUSH
26486: FOR_IN
26487: IFFALSE 26528
// begin for j := 1 to 4 do
26489: LD_ADDR_VAR 0 3
26493: PUSH
26494: DOUBLE
26495: LD_INT 1
26497: DEC
26498: ST_TO_ADDR
26499: LD_INT 4
26501: PUSH
26502: FOR_TO
26503: IFFALSE 26524
// SetSkill ( i , j , 10 ) ;
26505: LD_VAR 0 2
26509: PPUSH
26510: LD_VAR 0 3
26514: PPUSH
26515: LD_INT 10
26517: PPUSH
26518: CALL_OW 237
26522: GO 26502
26524: POP
26525: POP
// end ;
26526: GO 26486
26528: POP
26529: POP
// end ;
26530: LD_VAR 0 1
26534: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// uc_side := your_side ;
26538: LD_ADDR_OWVAR 20
26542: PUSH
26543: LD_OWVAR 2
26547: ST_TO_ADDR
// uc_nation := nation ;
26548: LD_ADDR_OWVAR 21
26552: PUSH
26553: LD_VAR 0 1
26557: ST_TO_ADDR
// InitHc ;
26558: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26562: LD_INT 0
26564: PPUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_VAR 0 3
26574: PPUSH
26575: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26579: LD_VAR 0 4
26583: PPUSH
26584: LD_VAR 0 5
26588: PPUSH
26589: CALL_OW 428
26593: PUSH
26594: LD_INT 0
26596: EQUAL
26597: IFFALSE 26621
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26599: CALL_OW 44
26603: PPUSH
26604: LD_VAR 0 4
26608: PPUSH
26609: LD_VAR 0 5
26613: PPUSH
26614: LD_INT 1
26616: PPUSH
26617: CALL_OW 48
// end ;
26621: LD_VAR 0 6
26625: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// uc_side := your_side ;
26630: LD_ADDR_OWVAR 20
26634: PUSH
26635: LD_OWVAR 2
26639: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26640: LD_VAR 0 1
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: LD_INT 3
26653: PUSH
26654: LD_INT 4
26656: PUSH
26657: LD_INT 5
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: IN
26667: IFFALSE 26679
// uc_nation := nation_american else
26669: LD_ADDR_OWVAR 21
26673: PUSH
26674: LD_INT 1
26676: ST_TO_ADDR
26677: GO 26722
// if chassis in [ 11 , 12 , 13 , 14 ] then
26679: LD_VAR 0 1
26683: PUSH
26684: LD_INT 11
26686: PUSH
26687: LD_INT 12
26689: PUSH
26690: LD_INT 13
26692: PUSH
26693: LD_INT 14
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: IN
26702: IFFALSE 26714
// uc_nation := nation_arabian else
26704: LD_ADDR_OWVAR 21
26708: PUSH
26709: LD_INT 2
26711: ST_TO_ADDR
26712: GO 26722
// uc_nation := nation_russian ;
26714: LD_ADDR_OWVAR 21
26718: PUSH
26719: LD_INT 3
26721: ST_TO_ADDR
// vc_chassis := chassis ;
26722: LD_ADDR_OWVAR 37
26726: PUSH
26727: LD_VAR 0 1
26731: ST_TO_ADDR
// vc_engine := engine ;
26732: LD_ADDR_OWVAR 39
26736: PUSH
26737: LD_VAR 0 2
26741: ST_TO_ADDR
// vc_control := control ;
26742: LD_ADDR_OWVAR 38
26746: PUSH
26747: LD_VAR 0 3
26751: ST_TO_ADDR
// vc_weapon := weapon ;
26752: LD_ADDR_OWVAR 40
26756: PUSH
26757: LD_VAR 0 4
26761: ST_TO_ADDR
// un := CreateVehicle ;
26762: LD_ADDR_VAR 0 8
26766: PUSH
26767: CALL_OW 45
26771: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26772: LD_VAR 0 8
26776: PPUSH
26777: LD_INT 0
26779: PPUSH
26780: LD_INT 5
26782: PPUSH
26783: CALL_OW 12
26787: PPUSH
26788: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26792: LD_VAR 0 8
26796: PPUSH
26797: LD_VAR 0 5
26801: PPUSH
26802: LD_VAR 0 6
26806: PPUSH
26807: LD_INT 1
26809: PPUSH
26810: CALL_OW 48
// end ;
26814: LD_VAR 0 7
26818: RET
// export hInvincible ; every 1 do
26819: GO 26821
26821: DISABLE
// hInvincible := [ ] ;
26822: LD_ADDR_EXP 108
26826: PUSH
26827: EMPTY
26828: ST_TO_ADDR
26829: END
// every 10 do var i ;
26830: GO 26832
26832: DISABLE
26833: LD_INT 0
26835: PPUSH
// begin enable ;
26836: ENABLE
// if not hInvincible then
26837: LD_EXP 108
26841: NOT
26842: IFFALSE 26846
// exit ;
26844: GO 26890
// for i in hInvincible do
26846: LD_ADDR_VAR 0 1
26850: PUSH
26851: LD_EXP 108
26855: PUSH
26856: FOR_IN
26857: IFFALSE 26888
// if GetLives ( i ) < 1000 then
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 256
26868: PUSH
26869: LD_INT 1000
26871: LESS
26872: IFFALSE 26886
// SetLives ( i , 1000 ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_INT 1000
26881: PPUSH
26882: CALL_OW 234
26886: GO 26856
26888: POP
26889: POP
// end ;
26890: PPOPN 1
26892: END
// export function hHackInvincible ; var i ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26897: LD_ADDR_VAR 0 2
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 21
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 21
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: PUSH
26935: FOR_IN
26936: IFFALSE 26997
// if IsSelected ( i ) then
26938: LD_VAR 0 2
26942: PPUSH
26943: CALL_OW 306
26947: IFFALSE 26995
// begin if i in hInvincible then
26949: LD_VAR 0 2
26953: PUSH
26954: LD_EXP 108
26958: IN
26959: IFFALSE 26979
// hInvincible := hInvincible diff i else
26961: LD_ADDR_EXP 108
26965: PUSH
26966: LD_EXP 108
26970: PUSH
26971: LD_VAR 0 2
26975: DIFF
26976: ST_TO_ADDR
26977: GO 26995
// hInvincible := hInvincible union i ;
26979: LD_ADDR_EXP 108
26983: PUSH
26984: LD_EXP 108
26988: PUSH
26989: LD_VAR 0 2
26993: UNION
26994: ST_TO_ADDR
// end ;
26995: GO 26935
26997: POP
26998: POP
// end ;
26999: LD_VAR 0 1
27003: RET
// export function hHackInvisible ; var i , j ; begin
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
27008: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27009: LD_ADDR_VAR 0 2
27013: PUSH
27014: LD_INT 21
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 69
27028: PUSH
27029: FOR_IN
27030: IFFALSE 27054
// if IsSelected ( i ) then
27032: LD_VAR 0 2
27036: PPUSH
27037: CALL_OW 306
27041: IFFALSE 27052
// ComForceInvisible ( i ) ;
27043: LD_VAR 0 2
27047: PPUSH
27048: CALL_OW 496
27052: GO 27029
27054: POP
27055: POP
// end ;
27056: LD_VAR 0 1
27060: RET
// export function hHackChangeYourSide ; begin
27061: LD_INT 0
27063: PPUSH
// if your_side = 8 then
27064: LD_OWVAR 2
27068: PUSH
27069: LD_INT 8
27071: EQUAL
27072: IFFALSE 27084
// your_side := 0 else
27074: LD_ADDR_OWVAR 2
27078: PUSH
27079: LD_INT 0
27081: ST_TO_ADDR
27082: GO 27098
// your_side := your_side + 1 ;
27084: LD_ADDR_OWVAR 2
27088: PUSH
27089: LD_OWVAR 2
27093: PUSH
27094: LD_INT 1
27096: PLUS
27097: ST_TO_ADDR
// end ;
27098: LD_VAR 0 1
27102: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27103: LD_INT 0
27105: PPUSH
27106: PPUSH
27107: PPUSH
// for i in all_units do
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_OWVAR 3
27117: PUSH
27118: FOR_IN
27119: IFFALSE 27197
// if IsSelected ( i ) then
27121: LD_VAR 0 2
27125: PPUSH
27126: CALL_OW 306
27130: IFFALSE 27195
// begin j := GetSide ( i ) ;
27132: LD_ADDR_VAR 0 3
27136: PUSH
27137: LD_VAR 0 2
27141: PPUSH
27142: CALL_OW 255
27146: ST_TO_ADDR
// if j = 8 then
27147: LD_VAR 0 3
27151: PUSH
27152: LD_INT 8
27154: EQUAL
27155: IFFALSE 27167
// j := 0 else
27157: LD_ADDR_VAR 0 3
27161: PUSH
27162: LD_INT 0
27164: ST_TO_ADDR
27165: GO 27181
// j := j + 1 ;
27167: LD_ADDR_VAR 0 3
27171: PUSH
27172: LD_VAR 0 3
27176: PUSH
27177: LD_INT 1
27179: PLUS
27180: ST_TO_ADDR
// SetSide ( i , j ) ;
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 235
// end ;
27195: GO 27118
27197: POP
27198: POP
// end ;
27199: LD_VAR 0 1
27203: RET
// export function hHackFog ; begin
27204: LD_INT 0
27206: PPUSH
// FogOff ( true ) ;
27207: LD_INT 1
27209: PPUSH
27210: CALL_OW 344
// end ;
27214: LD_VAR 0 1
27218: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27219: LD_INT 0
27221: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27222: LD_VAR 0 1
27226: PPUSH
27227: LD_VAR 0 2
27231: PPUSH
27232: LD_VAR 0 3
27236: PPUSH
27237: LD_INT 1
27239: PPUSH
27240: LD_INT 1
27242: PPUSH
27243: CALL_OW 483
// CenterOnXY ( x , y ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: LD_VAR 0 3
27256: PPUSH
27257: CALL_OW 84
// end ;
27261: LD_VAR 0 4
27265: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27266: LD_INT 0
27268: PPUSH
27269: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27270: LD_VAR 0 1
27274: NOT
27275: PUSH
27276: LD_VAR 0 2
27280: PPUSH
27281: LD_VAR 0 3
27285: PPUSH
27286: CALL_OW 488
27290: NOT
27291: OR
27292: PUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 266
27302: PUSH
27303: LD_INT 3
27305: NONEQUAL
27306: PUSH
27307: LD_VAR 0 1
27311: PPUSH
27312: CALL_OW 247
27316: PUSH
27317: LD_INT 1
27319: EQUAL
27320: NOT
27321: AND
27322: OR
27323: IFFALSE 27327
// exit ;
27325: GO 27476
// if GetType ( factory ) = unit_human then
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 247
27336: PUSH
27337: LD_INT 1
27339: EQUAL
27340: IFFALSE 27357
// factory := IsInUnit ( factory ) ;
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 310
27356: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 266
27366: PUSH
27367: LD_INT 3
27369: NONEQUAL
27370: IFFALSE 27374
// exit ;
27372: GO 27476
// if HexInfo ( x , y ) = factory then
27374: LD_VAR 0 2
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: CALL_OW 428
27388: PUSH
27389: LD_VAR 0 1
27393: EQUAL
27394: IFFALSE 27421
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27396: LD_ADDR_EXP 109
27400: PUSH
27401: LD_EXP 109
27405: PPUSH
27406: LD_VAR 0 1
27410: PPUSH
27411: LD_INT 0
27413: PPUSH
27414: CALL_OW 1
27418: ST_TO_ADDR
27419: GO 27472
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27421: LD_ADDR_EXP 109
27425: PUSH
27426: LD_EXP 109
27430: PPUSH
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 255
27445: PUSH
27446: LD_VAR 0 1
27450: PUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_VAR 0 3
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 1
27471: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27472: CALL 27481 0 0
// end ;
27476: LD_VAR 0 4
27480: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27481: LD_INT 0
27483: PPUSH
27484: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27485: LD_STRING resetFactoryWaypoint();
27487: PPUSH
27488: CALL_OW 559
// if factoryWaypoints then
27492: LD_EXP 109
27496: IFFALSE 27619
// begin for i := 1 to factoryWaypoints do
27498: LD_ADDR_VAR 0 2
27502: PUSH
27503: DOUBLE
27504: LD_INT 1
27506: DEC
27507: ST_TO_ADDR
27508: LD_EXP 109
27512: PUSH
27513: FOR_TO
27514: IFFALSE 27617
// if factoryWaypoints [ i ] then
27516: LD_EXP 109
27520: PUSH
27521: LD_VAR 0 2
27525: ARRAY
27526: IFFALSE 27615
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27528: LD_STRING setFactoryWaypointXY(
27530: PUSH
27531: LD_EXP 109
27535: PUSH
27536: LD_VAR 0 2
27540: ARRAY
27541: PUSH
27542: LD_INT 1
27544: ARRAY
27545: STR
27546: PUSH
27547: LD_STRING ,
27549: STR
27550: PUSH
27551: LD_EXP 109
27555: PUSH
27556: LD_VAR 0 2
27560: ARRAY
27561: PUSH
27562: LD_INT 2
27564: ARRAY
27565: STR
27566: PUSH
27567: LD_STRING ,
27569: STR
27570: PUSH
27571: LD_EXP 109
27575: PUSH
27576: LD_VAR 0 2
27580: ARRAY
27581: PUSH
27582: LD_INT 3
27584: ARRAY
27585: STR
27586: PUSH
27587: LD_STRING ,
27589: STR
27590: PUSH
27591: LD_EXP 109
27595: PUSH
27596: LD_VAR 0 2
27600: ARRAY
27601: PUSH
27602: LD_INT 4
27604: ARRAY
27605: STR
27606: PUSH
27607: LD_STRING )
27609: STR
27610: PPUSH
27611: CALL_OW 559
27615: GO 27513
27617: POP
27618: POP
// end ; end ;
27619: LD_VAR 0 1
27623: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
27624: LD_INT 0
27626: PPUSH
// if HexInfo ( x , y ) = warehouse then
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: CALL_OW 428
27641: PUSH
27642: LD_VAR 0 1
27646: EQUAL
27647: IFFALSE 27674
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27649: LD_ADDR_EXP 110
27653: PUSH
27654: LD_EXP 110
27658: PPUSH
27659: LD_VAR 0 1
27663: PPUSH
27664: LD_INT 0
27666: PPUSH
27667: CALL_OW 1
27671: ST_TO_ADDR
27672: GO 27725
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27674: LD_ADDR_EXP 110
27678: PUSH
27679: LD_EXP 110
27683: PPUSH
27684: LD_VAR 0 1
27688: PPUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 255
27698: PUSH
27699: LD_VAR 0 1
27703: PUSH
27704: LD_VAR 0 2
27708: PUSH
27709: LD_VAR 0 3
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 1
27724: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
27725: CALL 27734 0 0
// end ;
27729: LD_VAR 0 4
27733: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
27734: LD_INT 0
27736: PPUSH
27737: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27738: LD_STRING resetWarehouseGatheringPoints();
27740: PPUSH
27741: CALL_OW 559
// if warehouseGatheringPoints then
27745: LD_EXP 110
27749: IFFALSE 27872
// begin for i := 1 to warehouseGatheringPoints do
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: DOUBLE
27757: LD_INT 1
27759: DEC
27760: ST_TO_ADDR
27761: LD_EXP 110
27765: PUSH
27766: FOR_TO
27767: IFFALSE 27870
// if warehouseGatheringPoints [ i ] then
27769: LD_EXP 110
27773: PUSH
27774: LD_VAR 0 2
27778: ARRAY
27779: IFFALSE 27868
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
27781: LD_STRING setWarhouseGatheringPointXY(
27783: PUSH
27784: LD_EXP 110
27788: PUSH
27789: LD_VAR 0 2
27793: ARRAY
27794: PUSH
27795: LD_INT 1
27797: ARRAY
27798: STR
27799: PUSH
27800: LD_STRING ,
27802: STR
27803: PUSH
27804: LD_EXP 110
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_INT 2
27817: ARRAY
27818: STR
27819: PUSH
27820: LD_STRING ,
27822: STR
27823: PUSH
27824: LD_EXP 110
27828: PUSH
27829: LD_VAR 0 2
27833: ARRAY
27834: PUSH
27835: LD_INT 3
27837: ARRAY
27838: STR
27839: PUSH
27840: LD_STRING ,
27842: STR
27843: PUSH
27844: LD_EXP 110
27848: PUSH
27849: LD_VAR 0 2
27853: ARRAY
27854: PUSH
27855: LD_INT 4
27857: ARRAY
27858: STR
27859: PUSH
27860: LD_STRING )
27862: STR
27863: PPUSH
27864: CALL_OW 559
27868: GO 27766
27870: POP
27871: POP
// end ; end ;
27872: LD_VAR 0 1
27876: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27877: LD_EXP 110
27881: IFFALSE 28510
27883: GO 27885
27885: DISABLE
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// begin enable ;
27897: ENABLE
// list := warehouseGatheringPoints diff 0 ;
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_EXP 110
27907: PUSH
27908: LD_INT 0
27910: DIFF
27911: ST_TO_ADDR
// for i := 1 to list do
27912: LD_ADDR_VAR 0 1
27916: PUSH
27917: DOUBLE
27918: LD_INT 1
27920: DEC
27921: ST_TO_ADDR
27922: LD_VAR 0 3
27926: PUSH
27927: FOR_TO
27928: IFFALSE 28508
// begin if not list [ i ] then
27930: LD_VAR 0 3
27934: PUSH
27935: LD_VAR 0 1
27939: ARRAY
27940: NOT
27941: IFFALSE 27945
// continue ;
27943: GO 27927
// depot := list [ i ] [ 2 ] ;
27945: LD_ADDR_VAR 0 8
27949: PUSH
27950: LD_VAR 0 3
27954: PUSH
27955: LD_VAR 0 1
27959: ARRAY
27960: PUSH
27961: LD_INT 2
27963: ARRAY
27964: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27965: LD_ADDR_VAR 0 5
27969: PUSH
27970: LD_VAR 0 3
27974: PUSH
27975: LD_VAR 0 1
27979: ARRAY
27980: PUSH
27981: LD_INT 1
27983: ARRAY
27984: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27985: LD_VAR 0 8
27989: PPUSH
27990: CALL_OW 301
27994: PUSH
27995: LD_VAR 0 5
27999: PUSH
28000: LD_VAR 0 8
28004: PPUSH
28005: CALL_OW 255
28009: NONEQUAL
28010: OR
28011: IFFALSE 28040
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28013: LD_ADDR_EXP 110
28017: PUSH
28018: LD_EXP 110
28022: PPUSH
28023: LD_VAR 0 8
28027: PPUSH
28028: LD_INT 0
28030: PPUSH
28031: CALL_OW 1
28035: ST_TO_ADDR
// exit ;
28036: POP
28037: POP
28038: GO 28510
// end ; x := list [ i ] [ 3 ] ;
28040: LD_ADDR_VAR 0 6
28044: PUSH
28045: LD_VAR 0 3
28049: PUSH
28050: LD_VAR 0 1
28054: ARRAY
28055: PUSH
28056: LD_INT 3
28058: ARRAY
28059: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28060: LD_ADDR_VAR 0 7
28064: PUSH
28065: LD_VAR 0 3
28069: PUSH
28070: LD_VAR 0 1
28074: ARRAY
28075: PUSH
28076: LD_INT 4
28078: ARRAY
28079: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
28080: LD_ADDR_VAR 0 9
28084: PUSH
28085: LD_VAR 0 6
28089: PPUSH
28090: LD_VAR 0 7
28094: PPUSH
28095: LD_INT 12
28097: PPUSH
28098: CALL 72415 0 3
28102: ST_TO_ADDR
// if not cratesNearbyPoint then
28103: LD_VAR 0 9
28107: NOT
28108: IFFALSE 28114
// exit ;
28110: POP
28111: POP
28112: GO 28510
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28114: LD_ADDR_VAR 0 4
28118: PUSH
28119: LD_INT 22
28121: PUSH
28122: LD_VAR 0 5
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: LD_INT 60
28136: PUSH
28137: EMPTY
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 25
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 25
28159: PUSH
28160: LD_INT 16
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: LIST
28176: PPUSH
28177: CALL_OW 69
28181: PUSH
28182: LD_VAR 0 8
28186: PPUSH
28187: CALL_OW 313
28191: PPUSH
28192: LD_INT 3
28194: PUSH
28195: LD_INT 60
28197: PUSH
28198: EMPTY
28199: LIST
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 25
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 25
28220: PUSH
28221: LD_INT 16
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PPUSH
28237: CALL_OW 72
28241: UNION
28242: ST_TO_ADDR
// if tmp then
28243: LD_VAR 0 4
28247: IFFALSE 28327
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28249: LD_ADDR_VAR 0 4
28253: PUSH
28254: LD_VAR 0 4
28258: PPUSH
28259: LD_INT 3
28261: PPUSH
28262: CALL 70382 0 2
28266: ST_TO_ADDR
// for j in tmp do
28267: LD_ADDR_VAR 0 2
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: FOR_IN
28278: IFFALSE 28321
// begin if IsInUnit ( j ) then
28280: LD_VAR 0 2
28284: PPUSH
28285: CALL_OW 310
28289: IFFALSE 28300
// ComExit ( j ) ;
28291: LD_VAR 0 2
28295: PPUSH
28296: CALL 70465 0 1
// AddComCollect ( j , x , y ) ;
28300: LD_VAR 0 2
28304: PPUSH
28305: LD_VAR 0 6
28309: PPUSH
28310: LD_VAR 0 7
28314: PPUSH
28315: CALL_OW 177
// end ;
28319: GO 28277
28321: POP
28322: POP
// exit ;
28323: POP
28324: POP
28325: GO 28510
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28327: LD_ADDR_VAR 0 4
28331: PUSH
28332: LD_INT 22
28334: PUSH
28335: LD_VAR 0 5
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: LD_INT 34
28349: PUSH
28350: LD_INT 12
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 34
28359: PUSH
28360: LD_INT 51
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 34
28369: PUSH
28370: LD_INT 32
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 34
28379: PUSH
28380: LD_EXP 33
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PPUSH
28400: CALL_OW 69
28404: ST_TO_ADDR
// if tmp then
28405: LD_VAR 0 4
28409: IFFALSE 28506
// begin for j in tmp do
28411: LD_ADDR_VAR 0 2
28415: PUSH
28416: LD_VAR 0 4
28420: PUSH
28421: FOR_IN
28422: IFFALSE 28504
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
28424: LD_VAR 0 1
28428: PPUSH
28429: CALL_OW 261
28433: PUSH
28434: LD_INT 20
28436: GREATER
28437: PUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 314
28447: NOT
28448: AND
28449: PUSH
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL_OW 263
28459: PUSH
28460: LD_INT 1
28462: NONEQUAL
28463: PUSH
28464: LD_VAR 0 1
28468: PPUSH
28469: CALL_OW 311
28473: OR
28474: AND
28475: IFFALSE 28502
// begin ComCollect ( j , x , y ) ;
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 6
28486: PPUSH
28487: LD_VAR 0 7
28491: PPUSH
28492: CALL_OW 117
// exit ;
28496: POP
28497: POP
28498: POP
28499: POP
28500: GO 28510
// end ;
28502: GO 28421
28504: POP
28505: POP
// end ; end ;
28506: GO 27927
28508: POP
28509: POP
// end ; end_of_file
28510: PPOPN 9
28512: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28513: LD_INT 0
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28519: LD_VAR 0 1
28523: PPUSH
28524: CALL_OW 264
28528: PUSH
28529: LD_EXP 36
28533: EQUAL
28534: IFFALSE 28606
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28536: LD_INT 68
28538: PPUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 255
28548: PPUSH
28549: CALL_OW 321
28553: PUSH
28554: LD_INT 2
28556: EQUAL
28557: IFFALSE 28569
// eff := 70 else
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_INT 70
28566: ST_TO_ADDR
28567: GO 28577
// eff := 30 ;
28569: LD_ADDR_VAR 0 4
28573: PUSH
28574: LD_INT 30
28576: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 250
28586: PPUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 251
28596: PPUSH
28597: LD_VAR 0 4
28601: PPUSH
28602: CALL_OW 495
// end ; end ;
28606: LD_VAR 0 2
28610: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28611: LD_INT 0
28613: PPUSH
// end ;
28614: LD_VAR 0 4
28618: RET
// export function SOS_Command ( cmd ) ; begin
28619: LD_INT 0
28621: PPUSH
// end ;
28622: LD_VAR 0 2
28626: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28627: LD_INT 0
28629: PPUSH
// end ;
28630: LD_VAR 0 6
28634: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28635: LD_INT 0
28637: PPUSH
28638: PPUSH
// if not vehicle or not factory then
28639: LD_VAR 0 1
28643: NOT
28644: PUSH
28645: LD_VAR 0 2
28649: NOT
28650: OR
28651: IFFALSE 28655
// exit ;
28653: GO 28886
// if factoryWaypoints >= factory then
28655: LD_EXP 109
28659: PUSH
28660: LD_VAR 0 2
28664: GREATEREQUAL
28665: IFFALSE 28886
// if factoryWaypoints [ factory ] then
28667: LD_EXP 109
28671: PUSH
28672: LD_VAR 0 2
28676: ARRAY
28677: IFFALSE 28886
// begin if GetControl ( vehicle ) = control_manual then
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 263
28688: PUSH
28689: LD_INT 1
28691: EQUAL
28692: IFFALSE 28773
// begin driver := IsDrivenBy ( vehicle ) ;
28694: LD_ADDR_VAR 0 4
28698: PUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 311
28708: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28709: LD_VAR 0 4
28713: PPUSH
28714: LD_EXP 109
28718: PUSH
28719: LD_VAR 0 2
28723: ARRAY
28724: PUSH
28725: LD_INT 3
28727: ARRAY
28728: PPUSH
28729: LD_EXP 109
28733: PUSH
28734: LD_VAR 0 2
28738: ARRAY
28739: PUSH
28740: LD_INT 4
28742: ARRAY
28743: PPUSH
28744: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28748: LD_VAR 0 4
28752: PPUSH
28753: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28757: LD_VAR 0 4
28761: PPUSH
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 180
// end else
28771: GO 28886
// if GetControl ( vehicle ) = control_remote then
28773: LD_VAR 0 1
28777: PPUSH
28778: CALL_OW 263
28782: PUSH
28783: LD_INT 2
28785: EQUAL
28786: IFFALSE 28847
// begin wait ( 0 0$2 ) ;
28788: LD_INT 70
28790: PPUSH
28791: CALL_OW 67
// if Connect ( vehicle ) then
28795: LD_VAR 0 1
28799: PPUSH
28800: CALL 40934 0 1
28804: IFFALSE 28845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28806: LD_VAR 0 1
28810: PPUSH
28811: LD_EXP 109
28815: PUSH
28816: LD_VAR 0 2
28820: ARRAY
28821: PUSH
28822: LD_INT 3
28824: ARRAY
28825: PPUSH
28826: LD_EXP 109
28830: PUSH
28831: LD_VAR 0 2
28835: ARRAY
28836: PUSH
28837: LD_INT 4
28839: ARRAY
28840: PPUSH
28841: CALL_OW 171
// end else
28845: GO 28886
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28847: LD_VAR 0 1
28851: PPUSH
28852: LD_EXP 109
28856: PUSH
28857: LD_VAR 0 2
28861: ARRAY
28862: PUSH
28863: LD_INT 3
28865: ARRAY
28866: PPUSH
28867: LD_EXP 109
28871: PUSH
28872: LD_VAR 0 2
28876: ARRAY
28877: PUSH
28878: LD_INT 4
28880: ARRAY
28881: PPUSH
28882: CALL_OW 171
// end ; end ;
28886: LD_VAR 0 3
28890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28891: LD_INT 0
28893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28894: LD_VAR 0 1
28898: PUSH
28899: LD_INT 250
28901: EQUAL
28902: PUSH
28903: LD_VAR 0 2
28907: PPUSH
28908: CALL_OW 264
28912: PUSH
28913: LD_EXP 39
28917: EQUAL
28918: AND
28919: IFFALSE 28940
// MinerPlaceMine ( unit , x , y ) ;
28921: LD_VAR 0 2
28925: PPUSH
28926: LD_VAR 0 4
28930: PPUSH
28931: LD_VAR 0 5
28935: PPUSH
28936: CALL 31339 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28940: LD_VAR 0 1
28944: PUSH
28945: LD_INT 251
28947: EQUAL
28948: PUSH
28949: LD_VAR 0 2
28953: PPUSH
28954: CALL_OW 264
28958: PUSH
28959: LD_EXP 39
28963: EQUAL
28964: AND
28965: IFFALSE 28986
// MinerDetonateMine ( unit , x , y ) ;
28967: LD_VAR 0 2
28971: PPUSH
28972: LD_VAR 0 4
28976: PPUSH
28977: LD_VAR 0 5
28981: PPUSH
28982: CALL 31616 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28986: LD_VAR 0 1
28990: PUSH
28991: LD_INT 252
28993: EQUAL
28994: PUSH
28995: LD_VAR 0 2
28999: PPUSH
29000: CALL_OW 264
29004: PUSH
29005: LD_EXP 39
29009: EQUAL
29010: AND
29011: IFFALSE 29032
// MinerCreateMinefield ( unit , x , y ) ;
29013: LD_VAR 0 2
29017: PPUSH
29018: LD_VAR 0 4
29022: PPUSH
29023: LD_VAR 0 5
29027: PPUSH
29028: CALL 32033 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29032: LD_VAR 0 1
29036: PUSH
29037: LD_INT 253
29039: EQUAL
29040: PUSH
29041: LD_VAR 0 2
29045: PPUSH
29046: CALL_OW 257
29050: PUSH
29051: LD_INT 5
29053: EQUAL
29054: AND
29055: IFFALSE 29076
// ComBinocular ( unit , x , y ) ;
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: LD_VAR 0 5
29071: PPUSH
29072: CALL 32404 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29076: LD_VAR 0 1
29080: PUSH
29081: LD_INT 254
29083: EQUAL
29084: PUSH
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 264
29094: PUSH
29095: LD_EXP 34
29099: EQUAL
29100: AND
29101: PUSH
29102: LD_VAR 0 3
29106: PPUSH
29107: CALL_OW 263
29111: PUSH
29112: LD_INT 3
29114: EQUAL
29115: AND
29116: IFFALSE 29132
// HackDestroyVehicle ( unit , selectedUnit ) ;
29118: LD_VAR 0 2
29122: PPUSH
29123: LD_VAR 0 3
29127: PPUSH
29128: CALL 30699 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29132: LD_VAR 0 1
29136: PUSH
29137: LD_INT 255
29139: EQUAL
29140: PUSH
29141: LD_VAR 0 2
29145: PPUSH
29146: CALL_OW 264
29150: PUSH
29151: LD_INT 14
29153: PUSH
29154: LD_INT 53
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: IN
29161: AND
29162: PUSH
29163: LD_VAR 0 4
29167: PPUSH
29168: LD_VAR 0 5
29172: PPUSH
29173: CALL_OW 488
29177: AND
29178: IFFALSE 29202
// CutTreeXYR ( unit , x , y , 12 ) ;
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 4
29189: PPUSH
29190: LD_VAR 0 5
29194: PPUSH
29195: LD_INT 12
29197: PPUSH
29198: CALL 29265 0 4
// if cmd = 256 then
29202: LD_VAR 0 1
29206: PUSH
29207: LD_INT 256
29209: EQUAL
29210: IFFALSE 29231
// SetFactoryWaypoint ( unit , x , y ) ;
29212: LD_VAR 0 2
29216: PPUSH
29217: LD_VAR 0 4
29221: PPUSH
29222: LD_VAR 0 5
29226: PPUSH
29227: CALL 27266 0 3
// if cmd = 257 then
29231: LD_VAR 0 1
29235: PUSH
29236: LD_INT 257
29238: EQUAL
29239: IFFALSE 29260
// SetWarhouseGatheringPoint ( unit , x , y ) ;
29241: LD_VAR 0 2
29245: PPUSH
29246: LD_VAR 0 4
29250: PPUSH
29251: LD_VAR 0 5
29255: PPUSH
29256: CALL 27624 0 3
// end ;
29260: LD_VAR 0 6
29264: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29276: LD_VAR 0 1
29280: NOT
29281: PUSH
29282: LD_VAR 0 2
29286: PPUSH
29287: LD_VAR 0 3
29291: PPUSH
29292: CALL_OW 488
29296: NOT
29297: OR
29298: PUSH
29299: LD_VAR 0 4
29303: NOT
29304: OR
29305: IFFALSE 29309
// exit ;
29307: GO 29649
// list := [ ] ;
29309: LD_ADDR_VAR 0 13
29313: PUSH
29314: EMPTY
29315: ST_TO_ADDR
// if x - r < 0 then
29316: LD_VAR 0 2
29320: PUSH
29321: LD_VAR 0 4
29325: MINUS
29326: PUSH
29327: LD_INT 0
29329: LESS
29330: IFFALSE 29342
// min_x := 0 else
29332: LD_ADDR_VAR 0 7
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
29340: GO 29358
// min_x := x - r ;
29342: LD_ADDR_VAR 0 7
29346: PUSH
29347: LD_VAR 0 2
29351: PUSH
29352: LD_VAR 0 4
29356: MINUS
29357: ST_TO_ADDR
// if y - r < 0 then
29358: LD_VAR 0 3
29362: PUSH
29363: LD_VAR 0 4
29367: MINUS
29368: PUSH
29369: LD_INT 0
29371: LESS
29372: IFFALSE 29384
// min_y := 0 else
29374: LD_ADDR_VAR 0 8
29378: PUSH
29379: LD_INT 0
29381: ST_TO_ADDR
29382: GO 29400
// min_y := y - r ;
29384: LD_ADDR_VAR 0 8
29388: PUSH
29389: LD_VAR 0 3
29393: PUSH
29394: LD_VAR 0 4
29398: MINUS
29399: ST_TO_ADDR
// max_x := x + r ;
29400: LD_ADDR_VAR 0 9
29404: PUSH
29405: LD_VAR 0 2
29409: PUSH
29410: LD_VAR 0 4
29414: PLUS
29415: ST_TO_ADDR
// max_y := y + r ;
29416: LD_ADDR_VAR 0 10
29420: PUSH
29421: LD_VAR 0 3
29425: PUSH
29426: LD_VAR 0 4
29430: PLUS
29431: ST_TO_ADDR
// for _x = min_x to max_x do
29432: LD_ADDR_VAR 0 11
29436: PUSH
29437: DOUBLE
29438: LD_VAR 0 7
29442: DEC
29443: ST_TO_ADDR
29444: LD_VAR 0 9
29448: PUSH
29449: FOR_TO
29450: IFFALSE 29567
// for _y = min_y to max_y do
29452: LD_ADDR_VAR 0 12
29456: PUSH
29457: DOUBLE
29458: LD_VAR 0 8
29462: DEC
29463: ST_TO_ADDR
29464: LD_VAR 0 10
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29563
// begin if not ValidHex ( _x , _y ) then
29472: LD_VAR 0 11
29476: PPUSH
29477: LD_VAR 0 12
29481: PPUSH
29482: CALL_OW 488
29486: NOT
29487: IFFALSE 29491
// continue ;
29489: GO 29469
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29491: LD_VAR 0 11
29495: PPUSH
29496: LD_VAR 0 12
29500: PPUSH
29501: CALL_OW 351
29505: PUSH
29506: LD_VAR 0 11
29510: PPUSH
29511: LD_VAR 0 12
29515: PPUSH
29516: CALL_OW 554
29520: AND
29521: IFFALSE 29561
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29523: LD_ADDR_VAR 0 13
29527: PUSH
29528: LD_VAR 0 13
29532: PPUSH
29533: LD_VAR 0 13
29537: PUSH
29538: LD_INT 1
29540: PLUS
29541: PPUSH
29542: LD_VAR 0 11
29546: PUSH
29547: LD_VAR 0 12
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PPUSH
29556: CALL_OW 2
29560: ST_TO_ADDR
// end ;
29561: GO 29469
29563: POP
29564: POP
29565: GO 29449
29567: POP
29568: POP
// if not list then
29569: LD_VAR 0 13
29573: NOT
29574: IFFALSE 29578
// exit ;
29576: GO 29649
// for i in list do
29578: LD_ADDR_VAR 0 6
29582: PUSH
29583: LD_VAR 0 13
29587: PUSH
29588: FOR_IN
29589: IFFALSE 29647
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_STRING M
29598: PUSH
29599: LD_VAR 0 6
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PUSH
29608: LD_VAR 0 6
29612: PUSH
29613: LD_INT 2
29615: ARRAY
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: PPUSH
29641: CALL_OW 447
29645: GO 29588
29647: POP
29648: POP
// end ;
29649: LD_VAR 0 5
29653: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29654: LD_EXP 112
29658: NOT
29659: IFFALSE 29709
29661: GO 29663
29663: DISABLE
// begin initHack := true ;
29664: LD_ADDR_EXP 112
29668: PUSH
29669: LD_INT 1
29671: ST_TO_ADDR
// hackTanks := [ ] ;
29672: LD_ADDR_EXP 113
29676: PUSH
29677: EMPTY
29678: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29679: LD_ADDR_EXP 114
29683: PUSH
29684: EMPTY
29685: ST_TO_ADDR
// hackLimit := 3 ;
29686: LD_ADDR_EXP 115
29690: PUSH
29691: LD_INT 3
29693: ST_TO_ADDR
// hackDist := 12 ;
29694: LD_ADDR_EXP 116
29698: PUSH
29699: LD_INT 12
29701: ST_TO_ADDR
// hackCounter := [ ] ;
29702: LD_ADDR_EXP 117
29706: PUSH
29707: EMPTY
29708: ST_TO_ADDR
// end ;
29709: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29710: LD_EXP 112
29714: PUSH
29715: LD_INT 34
29717: PUSH
29718: LD_EXP 34
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PPUSH
29727: CALL_OW 69
29731: AND
29732: IFFALSE 29987
29734: GO 29736
29736: DISABLE
29737: LD_INT 0
29739: PPUSH
29740: PPUSH
// begin enable ;
29741: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29742: LD_ADDR_VAR 0 1
29746: PUSH
29747: LD_INT 34
29749: PUSH
29750: LD_EXP 34
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 69
29763: PUSH
29764: FOR_IN
29765: IFFALSE 29985
// begin if not i in hackTanks then
29767: LD_VAR 0 1
29771: PUSH
29772: LD_EXP 113
29776: IN
29777: NOT
29778: IFFALSE 29861
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29780: LD_ADDR_EXP 113
29784: PUSH
29785: LD_EXP 113
29789: PPUSH
29790: LD_EXP 113
29794: PUSH
29795: LD_INT 1
29797: PLUS
29798: PPUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 1
29808: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29809: LD_ADDR_EXP 114
29813: PUSH
29814: LD_EXP 114
29818: PPUSH
29819: LD_EXP 114
29823: PUSH
29824: LD_INT 1
29826: PLUS
29827: PPUSH
29828: EMPTY
29829: PPUSH
29830: CALL_OW 1
29834: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29835: LD_ADDR_EXP 117
29839: PUSH
29840: LD_EXP 117
29844: PPUSH
29845: LD_EXP 117
29849: PUSH
29850: LD_INT 1
29852: PLUS
29853: PPUSH
29854: EMPTY
29855: PPUSH
29856: CALL_OW 1
29860: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 302
29870: NOT
29871: IFFALSE 29884
// begin HackUnlinkAll ( i ) ;
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL 29990 0 1
// continue ;
29882: GO 29764
// end ; HackCheckCapturedStatus ( i ) ;
29884: LD_VAR 0 1
29888: PPUSH
29889: CALL 30433 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 81
29900: PUSH
29901: LD_VAR 0 1
29905: PPUSH
29906: CALL_OW 255
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 33
29917: PUSH
29918: LD_INT 3
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 91
29927: PUSH
29928: LD_VAR 0 1
29932: PUSH
29933: LD_EXP 116
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 50
29945: PUSH
29946: EMPTY
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: PPUSH
29955: CALL_OW 69
29959: ST_TO_ADDR
// if not tmp then
29960: LD_VAR 0 2
29964: NOT
29965: IFFALSE 29969
// continue ;
29967: GO 29764
// HackLink ( i , tmp ) ;
29969: LD_VAR 0 1
29973: PPUSH
29974: LD_VAR 0 2
29978: PPUSH
29979: CALL 30126 0 2
// end ;
29983: GO 29764
29985: POP
29986: POP
// end ;
29987: PPOPN 2
29989: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29990: LD_INT 0
29992: PPUSH
29993: PPUSH
29994: PPUSH
// if not hack in hackTanks then
29995: LD_VAR 0 1
29999: PUSH
30000: LD_EXP 113
30004: IN
30005: NOT
30006: IFFALSE 30010
// exit ;
30008: GO 30121
// index := GetElementIndex ( hackTanks , hack ) ;
30010: LD_ADDR_VAR 0 4
30014: PUSH
30015: LD_EXP 113
30019: PPUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL 37748 0 2
30029: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30030: LD_EXP 114
30034: PUSH
30035: LD_VAR 0 4
30039: ARRAY
30040: IFFALSE 30121
// begin for i in hackTanksCaptured [ index ] do
30042: LD_ADDR_VAR 0 3
30046: PUSH
30047: LD_EXP 114
30051: PUSH
30052: LD_VAR 0 4
30056: ARRAY
30057: PUSH
30058: FOR_IN
30059: IFFALSE 30085
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30061: LD_VAR 0 3
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_VAR 0 3
30074: PUSH
30075: LD_INT 2
30077: ARRAY
30078: PPUSH
30079: CALL_OW 235
30083: GO 30058
30085: POP
30086: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30087: LD_ADDR_EXP 114
30091: PUSH
30092: LD_EXP 114
30096: PPUSH
30097: LD_VAR 0 4
30101: PPUSH
30102: EMPTY
30103: PPUSH
30104: CALL_OW 1
30108: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30109: LD_VAR 0 1
30113: PPUSH
30114: LD_INT 0
30116: PPUSH
30117: CALL_OW 505
// end ; end ;
30121: LD_VAR 0 2
30125: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30126: LD_INT 0
30128: PPUSH
30129: PPUSH
30130: PPUSH
// if not hack in hackTanks or not vehicles then
30131: LD_VAR 0 1
30135: PUSH
30136: LD_EXP 113
30140: IN
30141: NOT
30142: PUSH
30143: LD_VAR 0 2
30147: NOT
30148: OR
30149: IFFALSE 30153
// exit ;
30151: GO 30428
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30153: LD_ADDR_VAR 0 2
30157: PUSH
30158: LD_VAR 0 1
30162: PPUSH
30163: LD_VAR 0 2
30167: PPUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_INT 1
30173: PPUSH
30174: CALL 38398 0 4
30178: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30179: LD_ADDR_VAR 0 5
30183: PUSH
30184: LD_EXP 113
30188: PPUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL 37748 0 2
30198: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30199: LD_EXP 114
30203: PUSH
30204: LD_VAR 0 5
30208: ARRAY
30209: PUSH
30210: LD_EXP 115
30214: LESS
30215: IFFALSE 30404
// begin for i := 1 to vehicles do
30217: LD_ADDR_VAR 0 4
30221: PUSH
30222: DOUBLE
30223: LD_INT 1
30225: DEC
30226: ST_TO_ADDR
30227: LD_VAR 0 2
30231: PUSH
30232: FOR_TO
30233: IFFALSE 30402
// begin if hackTanksCaptured [ index ] = hackLimit then
30235: LD_EXP 114
30239: PUSH
30240: LD_VAR 0 5
30244: ARRAY
30245: PUSH
30246: LD_EXP 115
30250: EQUAL
30251: IFFALSE 30255
// break ;
30253: GO 30402
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30255: LD_ADDR_EXP 117
30259: PUSH
30260: LD_EXP 117
30264: PPUSH
30265: LD_VAR 0 5
30269: PPUSH
30270: LD_EXP 117
30274: PUSH
30275: LD_VAR 0 5
30279: ARRAY
30280: PUSH
30281: LD_INT 1
30283: PLUS
30284: PPUSH
30285: CALL_OW 1
30289: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30290: LD_ADDR_EXP 114
30294: PUSH
30295: LD_EXP 114
30299: PPUSH
30300: LD_VAR 0 5
30304: PUSH
30305: LD_EXP 114
30309: PUSH
30310: LD_VAR 0 5
30314: ARRAY
30315: PUSH
30316: LD_INT 1
30318: PLUS
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: LD_VAR 0 2
30328: PUSH
30329: LD_VAR 0 4
30333: ARRAY
30334: PUSH
30335: LD_VAR 0 2
30339: PUSH
30340: LD_VAR 0 4
30344: ARRAY
30345: PPUSH
30346: CALL_OW 255
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL 37963 0 3
30359: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30360: LD_VAR 0 2
30364: PUSH
30365: LD_VAR 0 4
30369: ARRAY
30370: PPUSH
30371: LD_VAR 0 1
30375: PPUSH
30376: CALL_OW 255
30380: PPUSH
30381: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30385: LD_VAR 0 2
30389: PUSH
30390: LD_VAR 0 4
30394: ARRAY
30395: PPUSH
30396: CALL_OW 141
// end ;
30400: GO 30232
30402: POP
30403: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30404: LD_VAR 0 1
30408: PPUSH
30409: LD_EXP 114
30413: PUSH
30414: LD_VAR 0 5
30418: ARRAY
30419: PUSH
30420: LD_INT 0
30422: PLUS
30423: PPUSH
30424: CALL_OW 505
// end ;
30428: LD_VAR 0 3
30432: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
30437: PPUSH
30438: PPUSH
// if not hack in hackTanks then
30439: LD_VAR 0 1
30443: PUSH
30444: LD_EXP 113
30448: IN
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30694
// index := GetElementIndex ( hackTanks , hack ) ;
30454: LD_ADDR_VAR 0 4
30458: PUSH
30459: LD_EXP 113
30463: PPUSH
30464: LD_VAR 0 1
30468: PPUSH
30469: CALL 37748 0 2
30473: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: DOUBLE
30480: LD_EXP 114
30484: PUSH
30485: LD_VAR 0 4
30489: ARRAY
30490: INC
30491: ST_TO_ADDR
30492: LD_INT 1
30494: PUSH
30495: FOR_DOWNTO
30496: IFFALSE 30668
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: LD_EXP 114
30507: PUSH
30508: LD_VAR 0 4
30512: ARRAY
30513: PUSH
30514: LD_VAR 0 3
30518: ARRAY
30519: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30520: LD_VAR 0 5
30524: PUSH
30525: LD_INT 1
30527: ARRAY
30528: PPUSH
30529: CALL_OW 302
30533: NOT
30534: PUSH
30535: LD_VAR 0 5
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: PPUSH
30544: CALL_OW 255
30548: PUSH
30549: LD_VAR 0 1
30553: PPUSH
30554: CALL_OW 255
30558: NONEQUAL
30559: OR
30560: IFFALSE 30666
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30562: LD_VAR 0 5
30566: PUSH
30567: LD_INT 1
30569: ARRAY
30570: PPUSH
30571: CALL_OW 305
30575: PUSH
30576: LD_VAR 0 5
30580: PUSH
30581: LD_INT 1
30583: ARRAY
30584: PPUSH
30585: CALL_OW 255
30589: PUSH
30590: LD_VAR 0 1
30594: PPUSH
30595: CALL_OW 255
30599: EQUAL
30600: AND
30601: IFFALSE 30625
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30603: LD_VAR 0 5
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PPUSH
30612: LD_VAR 0 5
30616: PUSH
30617: LD_INT 2
30619: ARRAY
30620: PPUSH
30621: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30625: LD_ADDR_EXP 114
30629: PUSH
30630: LD_EXP 114
30634: PPUSH
30635: LD_VAR 0 4
30639: PPUSH
30640: LD_EXP 114
30644: PUSH
30645: LD_VAR 0 4
30649: ARRAY
30650: PPUSH
30651: LD_VAR 0 3
30655: PPUSH
30656: CALL_OW 3
30660: PPUSH
30661: CALL_OW 1
30665: ST_TO_ADDR
// end ; end ;
30666: GO 30495
30668: POP
30669: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30670: LD_VAR 0 1
30674: PPUSH
30675: LD_EXP 114
30679: PUSH
30680: LD_VAR 0 4
30684: ARRAY
30685: PUSH
30686: LD_INT 0
30688: PLUS
30689: PPUSH
30690: CALL_OW 505
// end ;
30694: LD_VAR 0 2
30698: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30699: LD_INT 0
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
// if not hack in hackTanks then
30705: LD_VAR 0 1
30709: PUSH
30710: LD_EXP 113
30714: IN
30715: NOT
30716: IFFALSE 30720
// exit ;
30718: GO 30805
// index := GetElementIndex ( hackTanks , hack ) ;
30720: LD_ADDR_VAR 0 5
30724: PUSH
30725: LD_EXP 113
30729: PPUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: CALL 37748 0 2
30739: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30740: LD_ADDR_VAR 0 4
30744: PUSH
30745: DOUBLE
30746: LD_INT 1
30748: DEC
30749: ST_TO_ADDR
30750: LD_EXP 114
30754: PUSH
30755: LD_VAR 0 5
30759: ARRAY
30760: PUSH
30761: FOR_TO
30762: IFFALSE 30803
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30764: LD_EXP 114
30768: PUSH
30769: LD_VAR 0 5
30773: ARRAY
30774: PUSH
30775: LD_VAR 0 4
30779: ARRAY
30780: PUSH
30781: LD_INT 1
30783: ARRAY
30784: PUSH
30785: LD_VAR 0 2
30789: EQUAL
30790: IFFALSE 30801
// KillUnit ( vehicle ) ;
30792: LD_VAR 0 2
30796: PPUSH
30797: CALL_OW 66
30801: GO 30761
30803: POP
30804: POP
// end ;
30805: LD_VAR 0 3
30809: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30810: LD_EXP 118
30814: NOT
30815: IFFALSE 30850
30817: GO 30819
30819: DISABLE
// begin initMiner := true ;
30820: LD_ADDR_EXP 118
30824: PUSH
30825: LD_INT 1
30827: ST_TO_ADDR
// minersList := [ ] ;
30828: LD_ADDR_EXP 119
30832: PUSH
30833: EMPTY
30834: ST_TO_ADDR
// minerMinesList := [ ] ;
30835: LD_ADDR_EXP 120
30839: PUSH
30840: EMPTY
30841: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30842: LD_ADDR_EXP 121
30846: PUSH
30847: LD_INT 5
30849: ST_TO_ADDR
// end ;
30850: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30851: LD_EXP 118
30855: PUSH
30856: LD_INT 34
30858: PUSH
30859: LD_EXP 39
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PPUSH
30868: CALL_OW 69
30872: AND
30873: IFFALSE 31336
30875: GO 30877
30877: DISABLE
30878: LD_INT 0
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
// begin enable ;
30884: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30885: LD_ADDR_VAR 0 1
30889: PUSH
30890: LD_INT 34
30892: PUSH
30893: LD_EXP 39
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PPUSH
30902: CALL_OW 69
30906: PUSH
30907: FOR_IN
30908: IFFALSE 30980
// begin if not i in minersList then
30910: LD_VAR 0 1
30914: PUSH
30915: LD_EXP 119
30919: IN
30920: NOT
30921: IFFALSE 30978
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30923: LD_ADDR_EXP 119
30927: PUSH
30928: LD_EXP 119
30932: PPUSH
30933: LD_EXP 119
30937: PUSH
30938: LD_INT 1
30940: PLUS
30941: PPUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL_OW 1
30951: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30952: LD_ADDR_EXP 120
30956: PUSH
30957: LD_EXP 120
30961: PPUSH
30962: LD_EXP 120
30966: PUSH
30967: LD_INT 1
30969: PLUS
30970: PPUSH
30971: EMPTY
30972: PPUSH
30973: CALL_OW 1
30977: ST_TO_ADDR
// end end ;
30978: GO 30907
30980: POP
30981: POP
// for i := minerMinesList downto 1 do
30982: LD_ADDR_VAR 0 1
30986: PUSH
30987: DOUBLE
30988: LD_EXP 120
30992: INC
30993: ST_TO_ADDR
30994: LD_INT 1
30996: PUSH
30997: FOR_DOWNTO
30998: IFFALSE 31334
// begin if IsLive ( minersList [ i ] ) then
31000: LD_EXP 119
31004: PUSH
31005: LD_VAR 0 1
31009: ARRAY
31010: PPUSH
31011: CALL_OW 300
31015: IFFALSE 31043
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31017: LD_EXP 119
31021: PUSH
31022: LD_VAR 0 1
31026: ARRAY
31027: PPUSH
31028: LD_EXP 120
31032: PUSH
31033: LD_VAR 0 1
31037: ARRAY
31038: PPUSH
31039: CALL_OW 505
// if not minerMinesList [ i ] then
31043: LD_EXP 120
31047: PUSH
31048: LD_VAR 0 1
31052: ARRAY
31053: NOT
31054: IFFALSE 31058
// continue ;
31056: GO 30997
// for j := minerMinesList [ i ] downto 1 do
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: DOUBLE
31064: LD_EXP 120
31068: PUSH
31069: LD_VAR 0 1
31073: ARRAY
31074: INC
31075: ST_TO_ADDR
31076: LD_INT 1
31078: PUSH
31079: FOR_DOWNTO
31080: IFFALSE 31330
// begin side := GetSide ( minersList [ i ] ) ;
31082: LD_ADDR_VAR 0 3
31086: PUSH
31087: LD_EXP 119
31091: PUSH
31092: LD_VAR 0 1
31096: ARRAY
31097: PPUSH
31098: CALL_OW 255
31102: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31103: LD_ADDR_VAR 0 4
31107: PUSH
31108: LD_EXP 120
31112: PUSH
31113: LD_VAR 0 1
31117: ARRAY
31118: PUSH
31119: LD_VAR 0 2
31123: ARRAY
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PPUSH
31129: LD_EXP 120
31133: PUSH
31134: LD_VAR 0 1
31138: ARRAY
31139: PUSH
31140: LD_VAR 0 2
31144: ARRAY
31145: PUSH
31146: LD_INT 2
31148: ARRAY
31149: PPUSH
31150: CALL_OW 428
31154: ST_TO_ADDR
// if not tmp then
31155: LD_VAR 0 4
31159: NOT
31160: IFFALSE 31164
// continue ;
31162: GO 31079
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31164: LD_VAR 0 4
31168: PUSH
31169: LD_INT 81
31171: PUSH
31172: LD_VAR 0 3
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PPUSH
31181: CALL_OW 69
31185: IN
31186: PUSH
31187: LD_EXP 120
31191: PUSH
31192: LD_VAR 0 1
31196: ARRAY
31197: PUSH
31198: LD_VAR 0 2
31202: ARRAY
31203: PUSH
31204: LD_INT 1
31206: ARRAY
31207: PPUSH
31208: LD_EXP 120
31212: PUSH
31213: LD_VAR 0 1
31217: ARRAY
31218: PUSH
31219: LD_VAR 0 2
31223: ARRAY
31224: PUSH
31225: LD_INT 2
31227: ARRAY
31228: PPUSH
31229: CALL_OW 458
31233: AND
31234: IFFALSE 31328
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31236: LD_EXP 120
31240: PUSH
31241: LD_VAR 0 1
31245: ARRAY
31246: PUSH
31247: LD_VAR 0 2
31251: ARRAY
31252: PUSH
31253: LD_INT 1
31255: ARRAY
31256: PPUSH
31257: LD_EXP 120
31261: PUSH
31262: LD_VAR 0 1
31266: ARRAY
31267: PUSH
31268: LD_VAR 0 2
31272: ARRAY
31273: PUSH
31274: LD_INT 2
31276: ARRAY
31277: PPUSH
31278: LD_VAR 0 3
31282: PPUSH
31283: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31287: LD_ADDR_EXP 120
31291: PUSH
31292: LD_EXP 120
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: LD_EXP 120
31306: PUSH
31307: LD_VAR 0 1
31311: ARRAY
31312: PPUSH
31313: LD_VAR 0 2
31317: PPUSH
31318: CALL_OW 3
31322: PPUSH
31323: CALL_OW 1
31327: ST_TO_ADDR
// end ; end ;
31328: GO 31079
31330: POP
31331: POP
// end ;
31332: GO 30997
31334: POP
31335: POP
// end ;
31336: PPOPN 4
31338: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
// result := false ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: LD_INT 0
31350: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 264
31360: PUSH
31361: LD_EXP 39
31365: EQUAL
31366: NOT
31367: IFFALSE 31371
// exit ;
31369: GO 31611
// index := GetElementIndex ( minersList , unit ) ;
31371: LD_ADDR_VAR 0 5
31375: PUSH
31376: LD_EXP 119
31380: PPUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL 37748 0 2
31390: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31391: LD_EXP 120
31395: PUSH
31396: LD_VAR 0 5
31400: ARRAY
31401: PUSH
31402: LD_EXP 121
31406: GREATEREQUAL
31407: IFFALSE 31411
// exit ;
31409: GO 31611
// ComMoveXY ( unit , x , y ) ;
31411: LD_VAR 0 1
31415: PPUSH
31416: LD_VAR 0 2
31420: PPUSH
31421: LD_VAR 0 3
31425: PPUSH
31426: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31430: LD_INT 35
31432: PPUSH
31433: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31437: LD_VAR 0 1
31441: PPUSH
31442: LD_VAR 0 2
31446: PPUSH
31447: LD_VAR 0 3
31451: PPUSH
31452: CALL 68876 0 3
31456: NOT
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL_OW 314
31467: AND
31468: IFFALSE 31472
// exit ;
31470: GO 31611
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_VAR 0 3
31481: PPUSH
31482: CALL_OW 428
31486: PUSH
31487: LD_VAR 0 1
31491: EQUAL
31492: PUSH
31493: LD_VAR 0 1
31497: PPUSH
31498: CALL_OW 314
31502: NOT
31503: AND
31504: IFFALSE 31430
// PlaySoundXY ( x , y , PlantMine ) ;
31506: LD_VAR 0 2
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: LD_STRING PlantMine
31518: PPUSH
31519: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31523: LD_VAR 0 2
31527: PPUSH
31528: LD_VAR 0 3
31532: PPUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: CALL_OW 255
31542: PPUSH
31543: LD_INT 0
31545: PPUSH
31546: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31550: LD_ADDR_EXP 120
31554: PUSH
31555: LD_EXP 120
31559: PPUSH
31560: LD_VAR 0 5
31564: PUSH
31565: LD_EXP 120
31569: PUSH
31570: LD_VAR 0 5
31574: ARRAY
31575: PUSH
31576: LD_INT 1
31578: PLUS
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PPUSH
31584: LD_VAR 0 2
31588: PUSH
31589: LD_VAR 0 3
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL 37963 0 3
31602: ST_TO_ADDR
// result := true ;
31603: LD_ADDR_VAR 0 4
31607: PUSH
31608: LD_INT 1
31610: ST_TO_ADDR
// end ;
31611: LD_VAR 0 4
31615: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
// if not unit in minersList then
31621: LD_VAR 0 1
31625: PUSH
31626: LD_EXP 119
31630: IN
31631: NOT
31632: IFFALSE 31636
// exit ;
31634: GO 32028
// index := GetElementIndex ( minersList , unit ) ;
31636: LD_ADDR_VAR 0 6
31640: PUSH
31641: LD_EXP 119
31645: PPUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL 37748 0 2
31655: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31656: LD_ADDR_VAR 0 5
31660: PUSH
31661: DOUBLE
31662: LD_EXP 120
31666: PUSH
31667: LD_VAR 0 6
31671: ARRAY
31672: INC
31673: ST_TO_ADDR
31674: LD_INT 1
31676: PUSH
31677: FOR_DOWNTO
31678: IFFALSE 31839
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31680: LD_EXP 120
31684: PUSH
31685: LD_VAR 0 6
31689: ARRAY
31690: PUSH
31691: LD_VAR 0 5
31695: ARRAY
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PUSH
31701: LD_VAR 0 2
31705: EQUAL
31706: PUSH
31707: LD_EXP 120
31711: PUSH
31712: LD_VAR 0 6
31716: ARRAY
31717: PUSH
31718: LD_VAR 0 5
31722: ARRAY
31723: PUSH
31724: LD_INT 2
31726: ARRAY
31727: PUSH
31728: LD_VAR 0 3
31732: EQUAL
31733: AND
31734: IFFALSE 31837
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31736: LD_EXP 120
31740: PUSH
31741: LD_VAR 0 6
31745: ARRAY
31746: PUSH
31747: LD_VAR 0 5
31751: ARRAY
31752: PUSH
31753: LD_INT 1
31755: ARRAY
31756: PPUSH
31757: LD_EXP 120
31761: PUSH
31762: LD_VAR 0 6
31766: ARRAY
31767: PUSH
31768: LD_VAR 0 5
31772: ARRAY
31773: PUSH
31774: LD_INT 2
31776: ARRAY
31777: PPUSH
31778: LD_VAR 0 1
31782: PPUSH
31783: CALL_OW 255
31787: PPUSH
31788: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31792: LD_ADDR_EXP 120
31796: PUSH
31797: LD_EXP 120
31801: PPUSH
31802: LD_VAR 0 6
31806: PPUSH
31807: LD_EXP 120
31811: PUSH
31812: LD_VAR 0 6
31816: ARRAY
31817: PPUSH
31818: LD_VAR 0 5
31822: PPUSH
31823: CALL_OW 3
31827: PPUSH
31828: CALL_OW 1
31832: ST_TO_ADDR
// exit ;
31833: POP
31834: POP
31835: GO 32028
// end ; end ;
31837: GO 31677
31839: POP
31840: POP
// for i := minerMinesList [ index ] downto 1 do
31841: LD_ADDR_VAR 0 5
31845: PUSH
31846: DOUBLE
31847: LD_EXP 120
31851: PUSH
31852: LD_VAR 0 6
31856: ARRAY
31857: INC
31858: ST_TO_ADDR
31859: LD_INT 1
31861: PUSH
31862: FOR_DOWNTO
31863: IFFALSE 32026
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31865: LD_EXP 120
31869: PUSH
31870: LD_VAR 0 6
31874: ARRAY
31875: PUSH
31876: LD_VAR 0 5
31880: ARRAY
31881: PUSH
31882: LD_INT 1
31884: ARRAY
31885: PPUSH
31886: LD_EXP 120
31890: PUSH
31891: LD_VAR 0 6
31895: ARRAY
31896: PUSH
31897: LD_VAR 0 5
31901: ARRAY
31902: PUSH
31903: LD_INT 2
31905: ARRAY
31906: PPUSH
31907: LD_VAR 0 2
31911: PPUSH
31912: LD_VAR 0 3
31916: PPUSH
31917: CALL_OW 298
31921: PUSH
31922: LD_INT 6
31924: LESS
31925: IFFALSE 32024
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31927: LD_EXP 120
31931: PUSH
31932: LD_VAR 0 6
31936: ARRAY
31937: PUSH
31938: LD_VAR 0 5
31942: ARRAY
31943: PUSH
31944: LD_INT 1
31946: ARRAY
31947: PPUSH
31948: LD_EXP 120
31952: PUSH
31953: LD_VAR 0 6
31957: ARRAY
31958: PUSH
31959: LD_VAR 0 5
31963: ARRAY
31964: PUSH
31965: LD_INT 2
31967: ARRAY
31968: PPUSH
31969: LD_VAR 0 1
31973: PPUSH
31974: CALL_OW 255
31978: PPUSH
31979: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31983: LD_ADDR_EXP 120
31987: PUSH
31988: LD_EXP 120
31992: PPUSH
31993: LD_VAR 0 6
31997: PPUSH
31998: LD_EXP 120
32002: PUSH
32003: LD_VAR 0 6
32007: ARRAY
32008: PPUSH
32009: LD_VAR 0 5
32013: PPUSH
32014: CALL_OW 3
32018: PPUSH
32019: CALL_OW 1
32023: ST_TO_ADDR
// end ; end ;
32024: GO 31862
32026: POP
32027: POP
// end ;
32028: LD_VAR 0 4
32032: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32033: LD_INT 0
32035: PPUSH
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
32040: PPUSH
32041: PPUSH
32042: PPUSH
32043: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 264
32053: PUSH
32054: LD_EXP 39
32058: EQUAL
32059: NOT
32060: PUSH
32061: LD_VAR 0 1
32065: PUSH
32066: LD_EXP 119
32070: IN
32071: NOT
32072: OR
32073: IFFALSE 32077
// exit ;
32075: GO 32399
// index := GetElementIndex ( minersList , unit ) ;
32077: LD_ADDR_VAR 0 6
32081: PUSH
32082: LD_EXP 119
32086: PPUSH
32087: LD_VAR 0 1
32091: PPUSH
32092: CALL 37748 0 2
32096: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32097: LD_ADDR_VAR 0 8
32101: PUSH
32102: LD_EXP 121
32106: PUSH
32107: LD_EXP 120
32111: PUSH
32112: LD_VAR 0 6
32116: ARRAY
32117: MINUS
32118: ST_TO_ADDR
// if not minesFreeAmount then
32119: LD_VAR 0 8
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32399
// tmp := [ ] ;
32128: LD_ADDR_VAR 0 7
32132: PUSH
32133: EMPTY
32134: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32135: LD_ADDR_VAR 0 5
32139: PUSH
32140: DOUBLE
32141: LD_INT 1
32143: DEC
32144: ST_TO_ADDR
32145: LD_VAR 0 8
32149: PUSH
32150: FOR_TO
32151: IFFALSE 32346
// begin _d := rand ( 0 , 5 ) ;
32153: LD_ADDR_VAR 0 11
32157: PUSH
32158: LD_INT 0
32160: PPUSH
32161: LD_INT 5
32163: PPUSH
32164: CALL_OW 12
32168: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32169: LD_ADDR_VAR 0 12
32173: PUSH
32174: LD_INT 2
32176: PPUSH
32177: LD_INT 6
32179: PPUSH
32180: CALL_OW 12
32184: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32185: LD_ADDR_VAR 0 9
32189: PUSH
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 11
32199: PPUSH
32200: LD_VAR 0 12
32204: PPUSH
32205: CALL_OW 272
32209: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32210: LD_ADDR_VAR 0 10
32214: PUSH
32215: LD_VAR 0 3
32219: PPUSH
32220: LD_VAR 0 11
32224: PPUSH
32225: LD_VAR 0 12
32229: PPUSH
32230: CALL_OW 273
32234: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32235: LD_VAR 0 9
32239: PPUSH
32240: LD_VAR 0 10
32244: PPUSH
32245: CALL_OW 488
32249: PUSH
32250: LD_VAR 0 9
32254: PUSH
32255: LD_VAR 0 10
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_VAR 0 7
32268: IN
32269: NOT
32270: AND
32271: PUSH
32272: LD_VAR 0 9
32276: PPUSH
32277: LD_VAR 0 10
32281: PPUSH
32282: CALL_OW 458
32286: NOT
32287: AND
32288: IFFALSE 32330
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: LD_VAR 0 7
32299: PPUSH
32300: LD_VAR 0 7
32304: PUSH
32305: LD_INT 1
32307: PLUS
32308: PPUSH
32309: LD_VAR 0 9
32313: PUSH
32314: LD_VAR 0 10
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PPUSH
32323: CALL_OW 1
32327: ST_TO_ADDR
32328: GO 32344
// i := i - 1 ;
32330: LD_ADDR_VAR 0 5
32334: PUSH
32335: LD_VAR 0 5
32339: PUSH
32340: LD_INT 1
32342: MINUS
32343: ST_TO_ADDR
// end ;
32344: GO 32150
32346: POP
32347: POP
// for i in tmp do
32348: LD_ADDR_VAR 0 5
32352: PUSH
32353: LD_VAR 0 7
32357: PUSH
32358: FOR_IN
32359: IFFALSE 32397
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32361: LD_VAR 0 1
32365: PPUSH
32366: LD_VAR 0 5
32370: PUSH
32371: LD_INT 1
32373: ARRAY
32374: PPUSH
32375: LD_VAR 0 5
32379: PUSH
32380: LD_INT 2
32382: ARRAY
32383: PPUSH
32384: CALL 31339 0 3
32388: NOT
32389: IFFALSE 32395
// exit ;
32391: POP
32392: POP
32393: GO 32399
32395: GO 32358
32397: POP
32398: POP
// end ;
32399: LD_VAR 0 4
32403: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32404: LD_INT 0
32406: PPUSH
32407: PPUSH
32408: PPUSH
32409: PPUSH
32410: PPUSH
32411: PPUSH
32412: PPUSH
// if not GetClass ( unit ) = class_sniper then
32413: LD_VAR 0 1
32417: PPUSH
32418: CALL_OW 257
32422: PUSH
32423: LD_INT 5
32425: EQUAL
32426: NOT
32427: IFFALSE 32431
// exit ;
32429: GO 32819
// dist := 8 ;
32431: LD_ADDR_VAR 0 5
32435: PUSH
32436: LD_INT 8
32438: ST_TO_ADDR
// viewRange := 12 ;
32439: LD_ADDR_VAR 0 7
32443: PUSH
32444: LD_INT 12
32446: ST_TO_ADDR
// side := GetSide ( unit ) ;
32447: LD_ADDR_VAR 0 6
32451: PUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: CALL_OW 255
32461: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32462: LD_INT 61
32464: PPUSH
32465: LD_VAR 0 6
32469: PPUSH
32470: CALL_OW 321
32474: PUSH
32475: LD_INT 2
32477: EQUAL
32478: IFFALSE 32488
// viewRange := 16 ;
32480: LD_ADDR_VAR 0 7
32484: PUSH
32485: LD_INT 16
32487: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_VAR 0 2
32497: PPUSH
32498: LD_VAR 0 3
32502: PPUSH
32503: CALL_OW 297
32507: PUSH
32508: LD_VAR 0 5
32512: GREATER
32513: IFFALSE 32592
// begin ComMoveXY ( unit , x , y ) ;
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_VAR 0 2
32524: PPUSH
32525: LD_VAR 0 3
32529: PPUSH
32530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32534: LD_INT 35
32536: PPUSH
32537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32541: LD_VAR 0 1
32545: PPUSH
32546: LD_VAR 0 2
32550: PPUSH
32551: LD_VAR 0 3
32555: PPUSH
32556: CALL 68876 0 3
32560: NOT
32561: IFFALSE 32565
// exit ;
32563: GO 32819
// until GetDistUnitXY ( unit , x , y ) < dist ;
32565: LD_VAR 0 1
32569: PPUSH
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: CALL_OW 297
32584: PUSH
32585: LD_VAR 0 5
32589: LESS
32590: IFFALSE 32534
// end ; ComTurnXY ( unit , x , y ) ;
32592: LD_VAR 0 1
32596: PPUSH
32597: LD_VAR 0 2
32601: PPUSH
32602: LD_VAR 0 3
32606: PPUSH
32607: CALL_OW 118
// wait ( 5 ) ;
32611: LD_INT 5
32613: PPUSH
32614: CALL_OW 67
// _d := GetDir ( unit ) ;
32618: LD_ADDR_VAR 0 10
32622: PUSH
32623: LD_VAR 0 1
32627: PPUSH
32628: CALL_OW 254
32632: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32633: LD_ADDR_VAR 0 8
32637: PUSH
32638: LD_VAR 0 1
32642: PPUSH
32643: CALL_OW 250
32647: PPUSH
32648: LD_VAR 0 10
32652: PPUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL_OW 272
32662: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32663: LD_ADDR_VAR 0 9
32667: PUSH
32668: LD_VAR 0 1
32672: PPUSH
32673: CALL_OW 251
32677: PPUSH
32678: LD_VAR 0 10
32682: PPUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: CALL_OW 273
32692: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32693: LD_VAR 0 8
32697: PPUSH
32698: LD_VAR 0 9
32702: PPUSH
32703: CALL_OW 488
32707: NOT
32708: IFFALSE 32712
// exit ;
32710: GO 32819
// ComAnimCustom ( unit , 1 ) ;
32712: LD_VAR 0 1
32716: PPUSH
32717: LD_INT 1
32719: PPUSH
32720: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32724: LD_VAR 0 8
32728: PPUSH
32729: LD_VAR 0 9
32733: PPUSH
32734: LD_VAR 0 6
32738: PPUSH
32739: LD_VAR 0 7
32743: PPUSH
32744: CALL_OW 330
// repeat wait ( 1 ) ;
32748: LD_INT 1
32750: PPUSH
32751: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 316
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 314
32774: OR
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 302
32785: NOT
32786: OR
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 301
32797: OR
32798: IFFALSE 32748
// RemoveSeeing ( _x , _y , side ) ;
32800: LD_VAR 0 8
32804: PPUSH
32805: LD_VAR 0 9
32809: PPUSH
32810: LD_VAR 0 6
32814: PPUSH
32815: CALL_OW 331
// end ; end_of_file
32819: LD_VAR 0 4
32823: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32824: LD_INT 0
32826: PPUSH
32827: PPUSH
// if exist_mode then
32828: LD_VAR 0 2
32832: IFFALSE 32857
// unit := CreateCharacter ( prefix & ident ) else
32834: LD_ADDR_VAR 0 5
32838: PUSH
32839: LD_VAR 0 3
32843: PUSH
32844: LD_VAR 0 1
32848: STR
32849: PPUSH
32850: CALL_OW 34
32854: ST_TO_ADDR
32855: GO 32872
// unit := NewCharacter ( ident ) ;
32857: LD_ADDR_VAR 0 5
32861: PUSH
32862: LD_VAR 0 1
32866: PPUSH
32867: CALL_OW 25
32871: ST_TO_ADDR
// result := unit ;
32872: LD_ADDR_VAR 0 4
32876: PUSH
32877: LD_VAR 0 5
32881: ST_TO_ADDR
// end ;
32882: LD_VAR 0 4
32886: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32887: LD_INT 0
32889: PPUSH
32890: PPUSH
// if not side or not nation then
32891: LD_VAR 0 1
32895: NOT
32896: PUSH
32897: LD_VAR 0 2
32901: NOT
32902: OR
32903: IFFALSE 32907
// exit ;
32905: GO 33675
// case nation of nation_american :
32907: LD_VAR 0 2
32911: PUSH
32912: LD_INT 1
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 33134
32920: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_INT 35
32928: PUSH
32929: LD_INT 45
32931: PUSH
32932: LD_INT 46
32934: PUSH
32935: LD_INT 47
32937: PUSH
32938: LD_INT 82
32940: PUSH
32941: LD_INT 83
32943: PUSH
32944: LD_INT 84
32946: PUSH
32947: LD_INT 85
32949: PUSH
32950: LD_INT 86
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: LD_INT 6
32961: PUSH
32962: LD_INT 15
32964: PUSH
32965: LD_INT 16
32967: PUSH
32968: LD_INT 7
32970: PUSH
32971: LD_INT 12
32973: PUSH
32974: LD_INT 13
32976: PUSH
32977: LD_INT 10
32979: PUSH
32980: LD_INT 14
32982: PUSH
32983: LD_INT 20
32985: PUSH
32986: LD_INT 21
32988: PUSH
32989: LD_INT 22
32991: PUSH
32992: LD_INT 25
32994: PUSH
32995: LD_INT 32
32997: PUSH
32998: LD_INT 27
33000: PUSH
33001: LD_INT 36
33003: PUSH
33004: LD_INT 69
33006: PUSH
33007: LD_INT 39
33009: PUSH
33010: LD_INT 34
33012: PUSH
33013: LD_INT 40
33015: PUSH
33016: LD_INT 48
33018: PUSH
33019: LD_INT 49
33021: PUSH
33022: LD_INT 50
33024: PUSH
33025: LD_INT 51
33027: PUSH
33028: LD_INT 52
33030: PUSH
33031: LD_INT 53
33033: PUSH
33034: LD_INT 54
33036: PUSH
33037: LD_INT 55
33039: PUSH
33040: LD_INT 56
33042: PUSH
33043: LD_INT 57
33045: PUSH
33046: LD_INT 58
33048: PUSH
33049: LD_INT 59
33051: PUSH
33052: LD_INT 60
33054: PUSH
33055: LD_INT 61
33057: PUSH
33058: LD_INT 62
33060: PUSH
33061: LD_INT 80
33063: PUSH
33064: LD_INT 82
33066: PUSH
33067: LD_INT 83
33069: PUSH
33070: LD_INT 84
33072: PUSH
33073: LD_INT 85
33075: PUSH
33076: LD_INT 86
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
33132: GO 33599
33134: LD_INT 2
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33142
33140: GO 33368
33142: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33143: LD_ADDR_VAR 0 4
33147: PUSH
33148: LD_INT 35
33150: PUSH
33151: LD_INT 45
33153: PUSH
33154: LD_INT 46
33156: PUSH
33157: LD_INT 47
33159: PUSH
33160: LD_INT 82
33162: PUSH
33163: LD_INT 83
33165: PUSH
33166: LD_INT 84
33168: PUSH
33169: LD_INT 85
33171: PUSH
33172: LD_INT 87
33174: PUSH
33175: LD_INT 70
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 11
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: LD_INT 4
33189: PUSH
33190: LD_INT 5
33192: PUSH
33193: LD_INT 6
33195: PUSH
33196: LD_INT 15
33198: PUSH
33199: LD_INT 18
33201: PUSH
33202: LD_INT 7
33204: PUSH
33205: LD_INT 17
33207: PUSH
33208: LD_INT 8
33210: PUSH
33211: LD_INT 20
33213: PUSH
33214: LD_INT 21
33216: PUSH
33217: LD_INT 22
33219: PUSH
33220: LD_INT 72
33222: PUSH
33223: LD_INT 26
33225: PUSH
33226: LD_INT 69
33228: PUSH
33229: LD_INT 39
33231: PUSH
33232: LD_INT 40
33234: PUSH
33235: LD_INT 41
33237: PUSH
33238: LD_INT 42
33240: PUSH
33241: LD_INT 43
33243: PUSH
33244: LD_INT 48
33246: PUSH
33247: LD_INT 49
33249: PUSH
33250: LD_INT 50
33252: PUSH
33253: LD_INT 51
33255: PUSH
33256: LD_INT 52
33258: PUSH
33259: LD_INT 53
33261: PUSH
33262: LD_INT 54
33264: PUSH
33265: LD_INT 55
33267: PUSH
33268: LD_INT 56
33270: PUSH
33271: LD_INT 60
33273: PUSH
33274: LD_INT 61
33276: PUSH
33277: LD_INT 62
33279: PUSH
33280: LD_INT 66
33282: PUSH
33283: LD_INT 67
33285: PUSH
33286: LD_INT 68
33288: PUSH
33289: LD_INT 81
33291: PUSH
33292: LD_INT 82
33294: PUSH
33295: LD_INT 83
33297: PUSH
33298: LD_INT 84
33300: PUSH
33301: LD_INT 85
33303: PUSH
33304: LD_INT 87
33306: PUSH
33307: LD_INT 88
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
33366: GO 33599
33368: LD_INT 3
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33376
33374: GO 33598
33376: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33377: LD_ADDR_VAR 0 4
33381: PUSH
33382: LD_INT 46
33384: PUSH
33385: LD_INT 47
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 82
33396: PUSH
33397: LD_INT 83
33399: PUSH
33400: LD_INT 84
33402: PUSH
33403: LD_INT 85
33405: PUSH
33406: LD_INT 86
33408: PUSH
33409: LD_INT 11
33411: PUSH
33412: LD_INT 9
33414: PUSH
33415: LD_INT 20
33417: PUSH
33418: LD_INT 19
33420: PUSH
33421: LD_INT 21
33423: PUSH
33424: LD_INT 24
33426: PUSH
33427: LD_INT 22
33429: PUSH
33430: LD_INT 25
33432: PUSH
33433: LD_INT 28
33435: PUSH
33436: LD_INT 29
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 31
33444: PUSH
33445: LD_INT 37
33447: PUSH
33448: LD_INT 38
33450: PUSH
33451: LD_INT 32
33453: PUSH
33454: LD_INT 27
33456: PUSH
33457: LD_INT 33
33459: PUSH
33460: LD_INT 69
33462: PUSH
33463: LD_INT 39
33465: PUSH
33466: LD_INT 34
33468: PUSH
33469: LD_INT 40
33471: PUSH
33472: LD_INT 71
33474: PUSH
33475: LD_INT 23
33477: PUSH
33478: LD_INT 44
33480: PUSH
33481: LD_INT 48
33483: PUSH
33484: LD_INT 49
33486: PUSH
33487: LD_INT 50
33489: PUSH
33490: LD_INT 51
33492: PUSH
33493: LD_INT 52
33495: PUSH
33496: LD_INT 53
33498: PUSH
33499: LD_INT 54
33501: PUSH
33502: LD_INT 55
33504: PUSH
33505: LD_INT 56
33507: PUSH
33508: LD_INT 57
33510: PUSH
33511: LD_INT 58
33513: PUSH
33514: LD_INT 59
33516: PUSH
33517: LD_INT 63
33519: PUSH
33520: LD_INT 64
33522: PUSH
33523: LD_INT 65
33525: PUSH
33526: LD_INT 82
33528: PUSH
33529: LD_INT 83
33531: PUSH
33532: LD_INT 84
33534: PUSH
33535: LD_INT 85
33537: PUSH
33538: LD_INT 86
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
33596: GO 33599
33598: POP
// if state > - 1 and state < 3 then
33599: LD_VAR 0 3
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: GREATER
33608: PUSH
33609: LD_VAR 0 3
33613: PUSH
33614: LD_INT 3
33616: LESS
33617: AND
33618: IFFALSE 33675
// for i in result do
33620: LD_ADDR_VAR 0 5
33624: PUSH
33625: LD_VAR 0 4
33629: PUSH
33630: FOR_IN
33631: IFFALSE 33673
// if GetTech ( i , side ) <> state then
33633: LD_VAR 0 5
33637: PPUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL_OW 321
33647: PUSH
33648: LD_VAR 0 3
33652: NONEQUAL
33653: IFFALSE 33671
// result := result diff i ;
33655: LD_ADDR_VAR 0 4
33659: PUSH
33660: LD_VAR 0 4
33664: PUSH
33665: LD_VAR 0 5
33669: DIFF
33670: ST_TO_ADDR
33671: GO 33630
33673: POP
33674: POP
// end ;
33675: LD_VAR 0 4
33679: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33680: LD_INT 0
33682: PPUSH
33683: PPUSH
33684: PPUSH
// result := true ;
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 1
33692: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33693: LD_ADDR_VAR 0 5
33697: PUSH
33698: LD_VAR 0 2
33702: PPUSH
33703: CALL_OW 480
33707: ST_TO_ADDR
// if not tmp then
33708: LD_VAR 0 5
33712: NOT
33713: IFFALSE 33717
// exit ;
33715: GO 33766
// for i in tmp do
33717: LD_ADDR_VAR 0 4
33721: PUSH
33722: LD_VAR 0 5
33726: PUSH
33727: FOR_IN
33728: IFFALSE 33764
// if GetTech ( i , side ) <> state_researched then
33730: LD_VAR 0 4
33734: PPUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 321
33744: PUSH
33745: LD_INT 2
33747: NONEQUAL
33748: IFFALSE 33762
// begin result := false ;
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 0
33757: ST_TO_ADDR
// exit ;
33758: POP
33759: POP
33760: GO 33766
// end ;
33762: GO 33727
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 3
33770: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33786: LD_VAR 0 1
33790: NOT
33791: PUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 257
33801: PUSH
33802: LD_INT 9
33804: NONEQUAL
33805: OR
33806: IFFALSE 33810
// exit ;
33808: GO 34383
// side := GetSide ( unit ) ;
33810: LD_ADDR_VAR 0 9
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 255
33824: ST_TO_ADDR
// tech_space := tech_spacanom ;
33825: LD_ADDR_VAR 0 12
33829: PUSH
33830: LD_INT 29
33832: ST_TO_ADDR
// tech_time := tech_taurad ;
33833: LD_ADDR_VAR 0 13
33837: PUSH
33838: LD_INT 28
33840: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33841: LD_ADDR_VAR 0 11
33845: PUSH
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL_OW 310
33855: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33856: LD_VAR 0 11
33860: PPUSH
33861: CALL_OW 247
33865: PUSH
33866: LD_INT 2
33868: EQUAL
33869: IFFALSE 33873
// exit ;
33871: GO 34383
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33873: LD_ADDR_VAR 0 8
33877: PUSH
33878: LD_INT 81
33880: PUSH
33881: LD_VAR 0 9
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 21
33895: PUSH
33896: LD_INT 3
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: ST_TO_ADDR
// if not tmp then
33916: LD_VAR 0 8
33920: NOT
33921: IFFALSE 33925
// exit ;
33923: GO 34383
// if in_unit then
33925: LD_VAR 0 11
33929: IFFALSE 33953
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33931: LD_ADDR_VAR 0 10
33935: PUSH
33936: LD_VAR 0 8
33940: PPUSH
33941: LD_VAR 0 11
33945: PPUSH
33946: CALL_OW 74
33950: ST_TO_ADDR
33951: GO 33973
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33953: LD_ADDR_VAR 0 10
33957: PUSH
33958: LD_VAR 0 8
33962: PPUSH
33963: LD_VAR 0 1
33967: PPUSH
33968: CALL_OW 74
33972: ST_TO_ADDR
// if not enemy then
33973: LD_VAR 0 10
33977: NOT
33978: IFFALSE 33982
// exit ;
33980: GO 34383
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33982: LD_VAR 0 11
33986: PUSH
33987: LD_VAR 0 11
33991: PPUSH
33992: LD_VAR 0 10
33996: PPUSH
33997: CALL_OW 296
34001: PUSH
34002: LD_INT 13
34004: GREATER
34005: AND
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: LD_VAR 0 10
34016: PPUSH
34017: CALL_OW 296
34021: PUSH
34022: LD_INT 12
34024: GREATER
34025: OR
34026: IFFALSE 34030
// exit ;
34028: GO 34383
// missile := [ 1 ] ;
34030: LD_ADDR_VAR 0 14
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34041: LD_VAR 0 9
34045: PPUSH
34046: LD_VAR 0 12
34050: PPUSH
34051: CALL_OW 325
34055: IFFALSE 34084
// missile := Replace ( missile , missile + 1 , 2 ) ;
34057: LD_ADDR_VAR 0 14
34061: PUSH
34062: LD_VAR 0 14
34066: PPUSH
34067: LD_VAR 0 14
34071: PUSH
34072: LD_INT 1
34074: PLUS
34075: PPUSH
34076: LD_INT 2
34078: PPUSH
34079: CALL_OW 1
34083: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34084: LD_VAR 0 9
34088: PPUSH
34089: LD_VAR 0 13
34093: PPUSH
34094: CALL_OW 325
34098: PUSH
34099: LD_VAR 0 10
34103: PPUSH
34104: CALL_OW 255
34108: PPUSH
34109: LD_VAR 0 13
34113: PPUSH
34114: CALL_OW 325
34118: NOT
34119: AND
34120: IFFALSE 34149
// missile := Replace ( missile , missile + 1 , 3 ) ;
34122: LD_ADDR_VAR 0 14
34126: PUSH
34127: LD_VAR 0 14
34131: PPUSH
34132: LD_VAR 0 14
34136: PUSH
34137: LD_INT 1
34139: PLUS
34140: PPUSH
34141: LD_INT 3
34143: PPUSH
34144: CALL_OW 1
34148: ST_TO_ADDR
// if missile < 2 then
34149: LD_VAR 0 14
34153: PUSH
34154: LD_INT 2
34156: LESS
34157: IFFALSE 34161
// exit ;
34159: GO 34383
// x := GetX ( enemy ) ;
34161: LD_ADDR_VAR 0 4
34165: PUSH
34166: LD_VAR 0 10
34170: PPUSH
34171: CALL_OW 250
34175: ST_TO_ADDR
// y := GetY ( enemy ) ;
34176: LD_ADDR_VAR 0 5
34180: PUSH
34181: LD_VAR 0 10
34185: PPUSH
34186: CALL_OW 251
34190: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34191: LD_ADDR_VAR 0 6
34195: PUSH
34196: LD_VAR 0 4
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PPUSH
34205: LD_INT 1
34207: PPUSH
34208: CALL_OW 12
34212: PLUS
34213: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34214: LD_ADDR_VAR 0 7
34218: PUSH
34219: LD_VAR 0 5
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PPUSH
34228: LD_INT 1
34230: PPUSH
34231: CALL_OW 12
34235: PLUS
34236: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34237: LD_VAR 0 6
34241: PPUSH
34242: LD_VAR 0 7
34246: PPUSH
34247: CALL_OW 488
34251: NOT
34252: IFFALSE 34274
// begin _x := x ;
34254: LD_ADDR_VAR 0 6
34258: PUSH
34259: LD_VAR 0 4
34263: ST_TO_ADDR
// _y := y ;
34264: LD_ADDR_VAR 0 7
34268: PUSH
34269: LD_VAR 0 5
34273: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34274: LD_ADDR_VAR 0 3
34278: PUSH
34279: LD_INT 1
34281: PPUSH
34282: LD_VAR 0 14
34286: PPUSH
34287: CALL_OW 12
34291: ST_TO_ADDR
// case i of 1 :
34292: LD_VAR 0 3
34296: PUSH
34297: LD_INT 1
34299: DOUBLE
34300: EQUAL
34301: IFTRUE 34305
34303: GO 34322
34305: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34306: LD_VAR 0 1
34310: PPUSH
34311: LD_VAR 0 10
34315: PPUSH
34316: CALL_OW 115
34320: GO 34383
34322: LD_INT 2
34324: DOUBLE
34325: EQUAL
34326: IFTRUE 34330
34328: GO 34352
34330: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34331: LD_VAR 0 1
34335: PPUSH
34336: LD_VAR 0 6
34340: PPUSH
34341: LD_VAR 0 7
34345: PPUSH
34346: CALL_OW 153
34350: GO 34383
34352: LD_INT 3
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34382
34360: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34361: LD_VAR 0 1
34365: PPUSH
34366: LD_VAR 0 6
34370: PPUSH
34371: LD_VAR 0 7
34375: PPUSH
34376: CALL_OW 154
34380: GO 34383
34382: POP
// end ;
34383: LD_VAR 0 2
34387: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34388: LD_INT 0
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
// if not unit or not building then
34396: LD_VAR 0 1
34400: NOT
34401: PUSH
34402: LD_VAR 0 2
34406: NOT
34407: OR
34408: IFFALSE 34412
// exit ;
34410: GO 34570
// x := GetX ( building ) ;
34412: LD_ADDR_VAR 0 5
34416: PUSH
34417: LD_VAR 0 2
34421: PPUSH
34422: CALL_OW 250
34426: ST_TO_ADDR
// y := GetY ( building ) ;
34427: LD_ADDR_VAR 0 6
34431: PUSH
34432: LD_VAR 0 2
34436: PPUSH
34437: CALL_OW 251
34441: ST_TO_ADDR
// for i = 0 to 5 do
34442: LD_ADDR_VAR 0 4
34446: PUSH
34447: DOUBLE
34448: LD_INT 0
34450: DEC
34451: ST_TO_ADDR
34452: LD_INT 5
34454: PUSH
34455: FOR_TO
34456: IFFALSE 34568
// begin _x := ShiftX ( x , i , 3 ) ;
34458: LD_ADDR_VAR 0 7
34462: PUSH
34463: LD_VAR 0 5
34467: PPUSH
34468: LD_VAR 0 4
34472: PPUSH
34473: LD_INT 3
34475: PPUSH
34476: CALL_OW 272
34480: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34481: LD_ADDR_VAR 0 8
34485: PUSH
34486: LD_VAR 0 6
34490: PPUSH
34491: LD_VAR 0 4
34495: PPUSH
34496: LD_INT 3
34498: PPUSH
34499: CALL_OW 273
34503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34504: LD_VAR 0 7
34508: PPUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: CALL_OW 488
34518: NOT
34519: IFFALSE 34523
// continue ;
34521: GO 34455
// if HexInfo ( _x , _y ) = 0 then
34523: LD_VAR 0 7
34527: PPUSH
34528: LD_VAR 0 8
34532: PPUSH
34533: CALL_OW 428
34537: PUSH
34538: LD_INT 0
34540: EQUAL
34541: IFFALSE 34566
// begin ComMoveXY ( unit , _x , _y ) ;
34543: LD_VAR 0 1
34547: PPUSH
34548: LD_VAR 0 7
34552: PPUSH
34553: LD_VAR 0 8
34557: PPUSH
34558: CALL_OW 111
// exit ;
34562: POP
34563: POP
34564: GO 34570
// end ; end ;
34566: GO 34455
34568: POP
34569: POP
// end ;
34570: LD_VAR 0 3
34574: RET
// export function ScanBase ( side , base_area ) ; begin
34575: LD_INT 0
34577: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34578: LD_ADDR_VAR 0 3
34582: PUSH
34583: LD_VAR 0 2
34587: PPUSH
34588: LD_INT 81
34590: PUSH
34591: LD_VAR 0 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PPUSH
34600: CALL_OW 70
34604: ST_TO_ADDR
// end ;
34605: LD_VAR 0 3
34609: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34610: LD_INT 0
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
// result := false ;
34616: LD_ADDR_VAR 0 2
34620: PUSH
34621: LD_INT 0
34623: ST_TO_ADDR
// side := GetSide ( unit ) ;
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 255
34638: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34639: LD_ADDR_VAR 0 4
34643: PUSH
34644: LD_VAR 0 1
34648: PPUSH
34649: CALL_OW 248
34653: ST_TO_ADDR
// case nat of 1 :
34654: LD_VAR 0 4
34658: PUSH
34659: LD_INT 1
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34678
34667: POP
// tech := tech_lassight ; 2 :
34668: LD_ADDR_VAR 0 5
34672: PUSH
34673: LD_INT 12
34675: ST_TO_ADDR
34676: GO 34717
34678: LD_INT 2
34680: DOUBLE
34681: EQUAL
34682: IFTRUE 34686
34684: GO 34697
34686: POP
// tech := tech_mortar ; 3 :
34687: LD_ADDR_VAR 0 5
34691: PUSH
34692: LD_INT 41
34694: ST_TO_ADDR
34695: GO 34717
34697: LD_INT 3
34699: DOUBLE
34700: EQUAL
34701: IFTRUE 34705
34703: GO 34716
34705: POP
// tech := tech_bazooka ; end ;
34706: LD_ADDR_VAR 0 5
34710: PUSH
34711: LD_INT 44
34713: ST_TO_ADDR
34714: GO 34717
34716: POP
// if Researched ( side , tech ) then
34717: LD_VAR 0 3
34721: PPUSH
34722: LD_VAR 0 5
34726: PPUSH
34727: CALL_OW 325
34731: IFFALSE 34758
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34733: LD_ADDR_VAR 0 2
34737: PUSH
34738: LD_INT 5
34740: PUSH
34741: LD_INT 8
34743: PUSH
34744: LD_INT 9
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: PUSH
34752: LD_VAR 0 4
34756: ARRAY
34757: ST_TO_ADDR
// end ;
34758: LD_VAR 0 2
34762: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34763: LD_INT 0
34765: PPUSH
34766: PPUSH
34767: PPUSH
// if not mines then
34768: LD_VAR 0 2
34772: NOT
34773: IFFALSE 34777
// exit ;
34775: GO 34921
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34777: LD_ADDR_VAR 0 5
34781: PUSH
34782: LD_INT 81
34784: PUSH
34785: LD_VAR 0 1
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: LD_INT 21
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PPUSH
34815: CALL_OW 69
34819: ST_TO_ADDR
// for i in mines do
34820: LD_ADDR_VAR 0 4
34824: PUSH
34825: LD_VAR 0 2
34829: PUSH
34830: FOR_IN
34831: IFFALSE 34919
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34833: LD_VAR 0 4
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: PPUSH
34842: LD_VAR 0 4
34846: PUSH
34847: LD_INT 2
34849: ARRAY
34850: PPUSH
34851: CALL_OW 458
34855: NOT
34856: IFFALSE 34860
// continue ;
34858: GO 34830
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34860: LD_VAR 0 4
34864: PUSH
34865: LD_INT 1
34867: ARRAY
34868: PPUSH
34869: LD_VAR 0 4
34873: PUSH
34874: LD_INT 2
34876: ARRAY
34877: PPUSH
34878: CALL_OW 428
34882: PUSH
34883: LD_VAR 0 5
34887: IN
34888: IFFALSE 34917
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34890: LD_VAR 0 4
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PPUSH
34899: LD_VAR 0 4
34903: PUSH
34904: LD_INT 2
34906: ARRAY
34907: PPUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 456
// end ;
34917: GO 34830
34919: POP
34920: POP
// end ;
34921: LD_VAR 0 3
34925: RET
// export function Count ( array ) ; var i ; begin
34926: LD_INT 0
34928: PPUSH
34929: PPUSH
// result := 0 ;
34930: LD_ADDR_VAR 0 2
34934: PUSH
34935: LD_INT 0
34937: ST_TO_ADDR
// for i in array do
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: LD_VAR 0 1
34947: PUSH
34948: FOR_IN
34949: IFFALSE 34973
// if i then
34951: LD_VAR 0 3
34955: IFFALSE 34971
// result := result + 1 ;
34957: LD_ADDR_VAR 0 2
34961: PUSH
34962: LD_VAR 0 2
34966: PUSH
34967: LD_INT 1
34969: PLUS
34970: ST_TO_ADDR
34971: GO 34948
34973: POP
34974: POP
// end ;
34975: LD_VAR 0 2
34979: RET
// export function IsEmpty ( building ) ; begin
34980: LD_INT 0
34982: PPUSH
// if not building then
34983: LD_VAR 0 1
34987: NOT
34988: IFFALSE 34992
// exit ;
34990: GO 35035
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34992: LD_ADDR_VAR 0 2
34996: PUSH
34997: LD_VAR 0 1
35001: PUSH
35002: LD_INT 22
35004: PUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 255
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 58
35021: PUSH
35022: EMPTY
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PPUSH
35029: CALL_OW 69
35033: IN
35034: ST_TO_ADDR
// end ;
35035: LD_VAR 0 2
35039: RET
// export function IsNotFull ( building ) ; var places ; begin
35040: LD_INT 0
35042: PPUSH
35043: PPUSH
// if not building then
35044: LD_VAR 0 1
35048: NOT
35049: IFFALSE 35053
// exit ;
35051: GO 35224
// result := false ;
35053: LD_ADDR_VAR 0 2
35057: PUSH
35058: LD_INT 0
35060: ST_TO_ADDR
// places := 0 ;
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: LD_INT 0
35068: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 266
35078: PUSH
35079: LD_INT 0
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35141
35085: LD_INT 1
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35141
35091: LD_INT 6
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35141
35097: LD_INT 7
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35141
35103: LD_INT 8
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35141
35109: LD_INT 4
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35141
35115: LD_INT 5
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35141
35121: LD_INT 2
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35141
35127: LD_INT 3
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35141
35133: LD_INT 35
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35152
35141: POP
// places := 6 ; b_bunker , b_breastwork :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 6
35149: ST_TO_ADDR
35150: GO 35197
35152: LD_INT 32
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35166
35158: LD_INT 31
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35177
35166: POP
// places := 1 ; b_control_tower :
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_INT 1
35174: ST_TO_ADDR
35175: GO 35197
35177: LD_INT 36
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35185
35183: GO 35196
35185: POP
// places := 3 ; end ;
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: LD_INT 3
35193: ST_TO_ADDR
35194: GO 35197
35196: POP
// if places then
35197: LD_VAR 0 3
35201: IFFALSE 35224
// result := UnitsInside ( building ) < places ;
35203: LD_ADDR_VAR 0 2
35207: PUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 313
35217: PUSH
35218: LD_VAR 0 3
35222: LESS
35223: ST_TO_ADDR
// end ;
35224: LD_VAR 0 2
35228: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35229: LD_INT 0
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
// tmp := [ ] ;
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: EMPTY
35241: ST_TO_ADDR
// list := [ ] ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: EMPTY
35248: ST_TO_ADDR
// for i = 16 to 25 do
35249: LD_ADDR_VAR 0 4
35253: PUSH
35254: DOUBLE
35255: LD_INT 16
35257: DEC
35258: ST_TO_ADDR
35259: LD_INT 25
35261: PUSH
35262: FOR_TO
35263: IFFALSE 35336
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35265: LD_ADDR_VAR 0 3
35269: PUSH
35270: LD_VAR 0 3
35274: PUSH
35275: LD_INT 22
35277: PUSH
35278: LD_VAR 0 1
35282: PPUSH
35283: CALL_OW 255
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 91
35294: PUSH
35295: LD_VAR 0 1
35299: PUSH
35300: LD_INT 6
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 30
35310: PUSH
35311: LD_VAR 0 4
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: PPUSH
35328: CALL_OW 69
35332: ADD
35333: ST_TO_ADDR
35334: GO 35262
35336: POP
35337: POP
// for i = 1 to tmp do
35338: LD_ADDR_VAR 0 4
35342: PUSH
35343: DOUBLE
35344: LD_INT 1
35346: DEC
35347: ST_TO_ADDR
35348: LD_VAR 0 3
35352: PUSH
35353: FOR_TO
35354: IFFALSE 35442
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35356: LD_ADDR_VAR 0 5
35360: PUSH
35361: LD_VAR 0 5
35365: PUSH
35366: LD_VAR 0 3
35370: PUSH
35371: LD_VAR 0 4
35375: ARRAY
35376: PPUSH
35377: CALL_OW 266
35381: PUSH
35382: LD_VAR 0 3
35386: PUSH
35387: LD_VAR 0 4
35391: ARRAY
35392: PPUSH
35393: CALL_OW 250
35397: PUSH
35398: LD_VAR 0 3
35402: PUSH
35403: LD_VAR 0 4
35407: ARRAY
35408: PPUSH
35409: CALL_OW 251
35413: PUSH
35414: LD_VAR 0 3
35418: PUSH
35419: LD_VAR 0 4
35423: ARRAY
35424: PPUSH
35425: CALL_OW 254
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: ADD
35439: ST_TO_ADDR
35440: GO 35353
35442: POP
35443: POP
// result := list ;
35444: LD_ADDR_VAR 0 2
35448: PUSH
35449: LD_VAR 0 5
35453: ST_TO_ADDR
// end ;
35454: LD_VAR 0 2
35458: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35459: LD_INT 0
35461: PPUSH
35462: PPUSH
35463: PPUSH
35464: PPUSH
35465: PPUSH
35466: PPUSH
35467: PPUSH
// if not factory then
35468: LD_VAR 0 1
35472: NOT
35473: IFFALSE 35477
// exit ;
35475: GO 36070
// if control = control_apeman then
35477: LD_VAR 0 4
35481: PUSH
35482: LD_INT 5
35484: EQUAL
35485: IFFALSE 35594
// begin tmp := UnitsInside ( factory ) ;
35487: LD_ADDR_VAR 0 8
35491: PUSH
35492: LD_VAR 0 1
35496: PPUSH
35497: CALL_OW 313
35501: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35502: LD_VAR 0 8
35506: PPUSH
35507: LD_INT 25
35509: PUSH
35510: LD_INT 12
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PPUSH
35517: CALL_OW 72
35521: NOT
35522: IFFALSE 35532
// control := control_manual ;
35524: LD_ADDR_VAR 0 4
35528: PUSH
35529: LD_INT 1
35531: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35532: LD_ADDR_VAR 0 8
35536: PUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL 35229 0 1
35546: ST_TO_ADDR
// if tmp then
35547: LD_VAR 0 8
35551: IFFALSE 35594
// begin for i in tmp do
35553: LD_ADDR_VAR 0 7
35557: PUSH
35558: LD_VAR 0 8
35562: PUSH
35563: FOR_IN
35564: IFFALSE 35592
// if i [ 1 ] = b_ext_radio then
35566: LD_VAR 0 7
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PUSH
35575: LD_INT 22
35577: EQUAL
35578: IFFALSE 35590
// begin control := control_remote ;
35580: LD_ADDR_VAR 0 4
35584: PUSH
35585: LD_INT 2
35587: ST_TO_ADDR
// break ;
35588: GO 35592
// end ;
35590: GO 35563
35592: POP
35593: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35594: LD_VAR 0 1
35598: PPUSH
35599: LD_VAR 0 2
35603: PPUSH
35604: LD_VAR 0 3
35608: PPUSH
35609: LD_VAR 0 4
35613: PPUSH
35614: LD_VAR 0 5
35618: PPUSH
35619: CALL_OW 448
35623: IFFALSE 35658
// begin result := [ chassis , engine , control , weapon ] ;
35625: LD_ADDR_VAR 0 6
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_VAR 0 3
35639: PUSH
35640: LD_VAR 0 4
35644: PUSH
35645: LD_VAR 0 5
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// exit ;
35656: GO 36070
// end ; _chassis := AvailableChassisList ( factory ) ;
35658: LD_ADDR_VAR 0 9
35662: PUSH
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL_OW 475
35672: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35673: LD_ADDR_VAR 0 11
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 476
35687: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35688: LD_ADDR_VAR 0 12
35692: PUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 477
35702: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35703: LD_ADDR_VAR 0 10
35707: PUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 478
35717: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35718: LD_VAR 0 9
35722: NOT
35723: PUSH
35724: LD_VAR 0 11
35728: NOT
35729: OR
35730: PUSH
35731: LD_VAR 0 12
35735: NOT
35736: OR
35737: PUSH
35738: LD_VAR 0 10
35742: NOT
35743: OR
35744: IFFALSE 35779
// begin result := [ chassis , engine , control , weapon ] ;
35746: LD_ADDR_VAR 0 6
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 3
35760: PUSH
35761: LD_VAR 0 4
35765: PUSH
35766: LD_VAR 0 5
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// exit ;
35777: GO 36070
// end ; if not chassis in _chassis then
35779: LD_VAR 0 2
35783: PUSH
35784: LD_VAR 0 9
35788: IN
35789: NOT
35790: IFFALSE 35816
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35792: LD_ADDR_VAR 0 2
35796: PUSH
35797: LD_VAR 0 9
35801: PUSH
35802: LD_INT 1
35804: PPUSH
35805: LD_VAR 0 9
35809: PPUSH
35810: CALL_OW 12
35814: ARRAY
35815: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_VAR 0 3
35825: PPUSH
35826: CALL 36075 0 2
35830: NOT
35831: IFFALSE 35890
// repeat engine := _engine [ 1 ] ;
35833: LD_ADDR_VAR 0 3
35837: PUSH
35838: LD_VAR 0 11
35842: PUSH
35843: LD_INT 1
35845: ARRAY
35846: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35847: LD_ADDR_VAR 0 11
35851: PUSH
35852: LD_VAR 0 11
35856: PPUSH
35857: LD_INT 1
35859: PPUSH
35860: CALL_OW 3
35864: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_VAR 0 3
35874: PPUSH
35875: CALL 36075 0 2
35879: PUSH
35880: LD_VAR 0 11
35884: PUSH
35885: EMPTY
35886: EQUAL
35887: OR
35888: IFFALSE 35833
// if not control in _control then
35890: LD_VAR 0 4
35894: PUSH
35895: LD_VAR 0 12
35899: IN
35900: NOT
35901: IFFALSE 35927
// control := _control [ rand ( 1 , _control ) ] ;
35903: LD_ADDR_VAR 0 4
35907: PUSH
35908: LD_VAR 0 12
35912: PUSH
35913: LD_INT 1
35915: PPUSH
35916: LD_VAR 0 12
35920: PPUSH
35921: CALL_OW 12
35925: ARRAY
35926: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 5
35936: PPUSH
35937: CALL 36295 0 2
35941: NOT
35942: IFFALSE 36001
// repeat weapon := _weapon [ 1 ] ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 10
35953: PUSH
35954: LD_INT 1
35956: ARRAY
35957: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35958: LD_ADDR_VAR 0 10
35962: PUSH
35963: LD_VAR 0 10
35967: PPUSH
35968: LD_INT 1
35970: PPUSH
35971: CALL_OW 3
35975: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35976: LD_VAR 0 2
35980: PPUSH
35981: LD_VAR 0 5
35985: PPUSH
35986: CALL 36295 0 2
35990: PUSH
35991: LD_VAR 0 10
35995: PUSH
35996: EMPTY
35997: EQUAL
35998: OR
35999: IFFALSE 35944
// result := [ ] ;
36001: LD_ADDR_VAR 0 6
36005: PUSH
36006: EMPTY
36007: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36008: LD_VAR 0 1
36012: PPUSH
36013: LD_VAR 0 2
36017: PPUSH
36018: LD_VAR 0 3
36022: PPUSH
36023: LD_VAR 0 4
36027: PPUSH
36028: LD_VAR 0 5
36032: PPUSH
36033: CALL_OW 448
36037: IFFALSE 36070
// result := [ chassis , engine , control , weapon ] ;
36039: LD_ADDR_VAR 0 6
36043: PUSH
36044: LD_VAR 0 2
36048: PUSH
36049: LD_VAR 0 3
36053: PUSH
36054: LD_VAR 0 4
36058: PUSH
36059: LD_VAR 0 5
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// end ;
36070: LD_VAR 0 6
36074: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36075: LD_INT 0
36077: PPUSH
// if not chassis or not engine then
36078: LD_VAR 0 1
36082: NOT
36083: PUSH
36084: LD_VAR 0 2
36088: NOT
36089: OR
36090: IFFALSE 36094
// exit ;
36092: GO 36290
// case engine of engine_solar :
36094: LD_VAR 0 2
36098: PUSH
36099: LD_INT 2
36101: DOUBLE
36102: EQUAL
36103: IFTRUE 36107
36105: GO 36145
36107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_INT 11
36115: PUSH
36116: LD_INT 12
36118: PUSH
36119: LD_INT 13
36121: PUSH
36122: LD_INT 14
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
36143: GO 36274
36145: LD_INT 1
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36153
36151: GO 36215
36153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36154: LD_ADDR_VAR 0 3
36158: PUSH
36159: LD_INT 11
36161: PUSH
36162: LD_INT 12
36164: PUSH
36165: LD_INT 13
36167: PUSH
36168: LD_INT 14
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 21
36188: PUSH
36189: LD_INT 23
36191: PUSH
36192: LD_INT 22
36194: PUSH
36195: LD_INT 24
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
36213: GO 36274
36215: LD_INT 3
36217: DOUBLE
36218: EQUAL
36219: IFTRUE 36223
36221: GO 36273
36223: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36224: LD_ADDR_VAR 0 3
36228: PUSH
36229: LD_INT 13
36231: PUSH
36232: LD_INT 14
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 4
36243: PUSH
36244: LD_INT 5
36246: PUSH
36247: LD_INT 21
36249: PUSH
36250: LD_INT 22
36252: PUSH
36253: LD_INT 23
36255: PUSH
36256: LD_INT 24
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
36271: GO 36274
36273: POP
// result := ( chassis in result ) ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_VAR 0 1
36283: PUSH
36284: LD_VAR 0 3
36288: IN
36289: ST_TO_ADDR
// end ;
36290: LD_VAR 0 3
36294: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36295: LD_INT 0
36297: PPUSH
// if not chassis or not weapon then
36298: LD_VAR 0 1
36302: NOT
36303: PUSH
36304: LD_VAR 0 2
36308: NOT
36309: OR
36310: IFFALSE 36314
// exit ;
36312: GO 37376
// case weapon of us_machine_gun :
36314: LD_VAR 0 2
36318: PUSH
36319: LD_INT 2
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 36357
36327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 4
36344: PUSH
36345: LD_INT 5
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
36355: GO 37360
36357: LD_INT 3
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36365
36363: GO 36395
36365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 3
36379: PUSH
36380: LD_INT 4
36382: PUSH
36383: LD_INT 5
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: ST_TO_ADDR
36393: GO 37360
36395: LD_INT 11
36397: DOUBLE
36398: EQUAL
36399: IFTRUE 36403
36401: GO 36433
36403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36404: LD_ADDR_VAR 0 3
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: LD_INT 4
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
36431: GO 37360
36433: LD_INT 4
36435: DOUBLE
36436: EQUAL
36437: IFTRUE 36441
36439: GO 36467
36441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: LD_INT 4
36455: PUSH
36456: LD_INT 5
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
36465: GO 37360
36467: LD_INT 5
36469: DOUBLE
36470: EQUAL
36471: IFTRUE 36475
36473: GO 36501
36475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36476: LD_ADDR_VAR 0 3
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 4
36489: PUSH
36490: LD_INT 5
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
36499: GO 37360
36501: LD_INT 9
36503: DOUBLE
36504: EQUAL
36505: IFTRUE 36509
36507: GO 36535
36509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_INT 2
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: LD_INT 4
36523: PUSH
36524: LD_INT 5
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
36533: GO 37360
36535: LD_INT 7
36537: DOUBLE
36538: EQUAL
36539: IFTRUE 36543
36541: GO 36569
36543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36544: LD_ADDR_VAR 0 3
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 3
36554: PUSH
36555: LD_INT 4
36557: PUSH
36558: LD_INT 5
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: ST_TO_ADDR
36567: GO 37360
36569: LD_INT 12
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36603
36577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 4
36591: PUSH
36592: LD_INT 5
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: ST_TO_ADDR
36601: GO 37360
36603: LD_INT 13
36605: DOUBLE
36606: EQUAL
36607: IFTRUE 36611
36609: GO 36637
36611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36612: LD_ADDR_VAR 0 3
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 3
36622: PUSH
36623: LD_INT 4
36625: PUSH
36626: LD_INT 5
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
36635: GO 37360
36637: LD_INT 14
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36663
36645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 4
36653: PUSH
36654: LD_INT 5
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: ST_TO_ADDR
36661: GO 37360
36663: LD_INT 6
36665: DOUBLE
36666: EQUAL
36667: IFTRUE 36671
36669: GO 36689
36671: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_INT 4
36679: PUSH
36680: LD_INT 5
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: ST_TO_ADDR
36687: GO 37360
36689: LD_INT 10
36691: DOUBLE
36692: EQUAL
36693: IFTRUE 36697
36695: GO 36715
36697: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36698: LD_ADDR_VAR 0 3
36702: PUSH
36703: LD_INT 4
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: ST_TO_ADDR
36713: GO 37360
36715: LD_INT 22
36717: DOUBLE
36718: EQUAL
36719: IFTRUE 36723
36721: GO 36749
36723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36724: LD_ADDR_VAR 0 3
36728: PUSH
36729: LD_INT 11
36731: PUSH
36732: LD_INT 12
36734: PUSH
36735: LD_INT 13
36737: PUSH
36738: LD_INT 14
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
36747: GO 37360
36749: LD_INT 23
36751: DOUBLE
36752: EQUAL
36753: IFTRUE 36757
36755: GO 36783
36757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36758: LD_ADDR_VAR 0 3
36762: PUSH
36763: LD_INT 11
36765: PUSH
36766: LD_INT 12
36768: PUSH
36769: LD_INT 13
36771: PUSH
36772: LD_INT 14
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: ST_TO_ADDR
36781: GO 37360
36783: LD_INT 24
36785: DOUBLE
36786: EQUAL
36787: IFTRUE 36791
36789: GO 36817
36791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36792: LD_ADDR_VAR 0 3
36796: PUSH
36797: LD_INT 11
36799: PUSH
36800: LD_INT 12
36802: PUSH
36803: LD_INT 13
36805: PUSH
36806: LD_INT 14
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
36815: GO 37360
36817: LD_INT 30
36819: DOUBLE
36820: EQUAL
36821: IFTRUE 36825
36823: GO 36851
36825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36826: LD_ADDR_VAR 0 3
36830: PUSH
36831: LD_INT 11
36833: PUSH
36834: LD_INT 12
36836: PUSH
36837: LD_INT 13
36839: PUSH
36840: LD_INT 14
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
36849: GO 37360
36851: LD_INT 25
36853: DOUBLE
36854: EQUAL
36855: IFTRUE 36859
36857: GO 36877
36859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_INT 13
36867: PUSH
36868: LD_INT 14
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: ST_TO_ADDR
36875: GO 37360
36877: LD_INT 27
36879: DOUBLE
36880: EQUAL
36881: IFTRUE 36885
36883: GO 36903
36885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_INT 13
36893: PUSH
36894: LD_INT 14
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: ST_TO_ADDR
36901: GO 37360
36903: LD_EXP 37
36907: DOUBLE
36908: EQUAL
36909: IFTRUE 36913
36911: GO 36939
36913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36914: LD_ADDR_VAR 0 3
36918: PUSH
36919: LD_INT 11
36921: PUSH
36922: LD_INT 12
36924: PUSH
36925: LD_INT 13
36927: PUSH
36928: LD_INT 14
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
36937: GO 37360
36939: LD_INT 28
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 36965
36947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36948: LD_ADDR_VAR 0 3
36952: PUSH
36953: LD_INT 13
36955: PUSH
36956: LD_INT 14
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: ST_TO_ADDR
36963: GO 37360
36965: LD_INT 29
36967: DOUBLE
36968: EQUAL
36969: IFTRUE 36973
36971: GO 36991
36973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 13
36981: PUSH
36982: LD_INT 14
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: ST_TO_ADDR
36989: GO 37360
36991: LD_INT 31
36993: DOUBLE
36994: EQUAL
36995: IFTRUE 36999
36997: GO 37017
36999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37000: LD_ADDR_VAR 0 3
37004: PUSH
37005: LD_INT 13
37007: PUSH
37008: LD_INT 14
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: ST_TO_ADDR
37015: GO 37360
37017: LD_INT 26
37019: DOUBLE
37020: EQUAL
37021: IFTRUE 37025
37023: GO 37043
37025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37026: LD_ADDR_VAR 0 3
37030: PUSH
37031: LD_INT 13
37033: PUSH
37034: LD_INT 14
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: ST_TO_ADDR
37041: GO 37360
37043: LD_INT 42
37045: DOUBLE
37046: EQUAL
37047: IFTRUE 37051
37049: GO 37077
37051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_INT 21
37059: PUSH
37060: LD_INT 22
37062: PUSH
37063: LD_INT 23
37065: PUSH
37066: LD_INT 24
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
37075: GO 37360
37077: LD_INT 43
37079: DOUBLE
37080: EQUAL
37081: IFTRUE 37085
37083: GO 37111
37085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37086: LD_ADDR_VAR 0 3
37090: PUSH
37091: LD_INT 21
37093: PUSH
37094: LD_INT 22
37096: PUSH
37097: LD_INT 23
37099: PUSH
37100: LD_INT 24
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
37109: GO 37360
37111: LD_INT 44
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37145
37119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 21
37127: PUSH
37128: LD_INT 22
37130: PUSH
37131: LD_INT 23
37133: PUSH
37134: LD_INT 24
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
37143: GO 37360
37145: LD_INT 45
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37153
37151: GO 37179
37153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_INT 21
37161: PUSH
37162: LD_INT 22
37164: PUSH
37165: LD_INT 23
37167: PUSH
37168: LD_INT 24
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
37177: GO 37360
37179: LD_INT 49
37181: DOUBLE
37182: EQUAL
37183: IFTRUE 37187
37185: GO 37213
37187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_INT 21
37195: PUSH
37196: LD_INT 22
37198: PUSH
37199: LD_INT 23
37201: PUSH
37202: LD_INT 24
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
37211: GO 37360
37213: LD_INT 51
37215: DOUBLE
37216: EQUAL
37217: IFTRUE 37221
37219: GO 37247
37221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: LD_INT 21
37229: PUSH
37230: LD_INT 22
37232: PUSH
37233: LD_INT 23
37235: PUSH
37236: LD_INT 24
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
37245: GO 37360
37247: LD_INT 52
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37281
37255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 21
37263: PUSH
37264: LD_INT 22
37266: PUSH
37267: LD_INT 23
37269: PUSH
37270: LD_INT 24
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
37279: GO 37360
37281: LD_INT 53
37283: DOUBLE
37284: EQUAL
37285: IFTRUE 37289
37287: GO 37307
37289: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 23
37297: PUSH
37298: LD_INT 24
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 37360
37307: LD_INT 46
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37315
37313: GO 37333
37315: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_INT 23
37323: PUSH
37324: LD_INT 24
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: ST_TO_ADDR
37331: GO 37360
37333: LD_INT 47
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37359
37341: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_INT 23
37349: PUSH
37350: LD_INT 24
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: ST_TO_ADDR
37357: GO 37360
37359: POP
// result := ( chassis in result ) ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_VAR 0 1
37369: PUSH
37370: LD_VAR 0 3
37374: IN
37375: ST_TO_ADDR
// end ;
37376: LD_VAR 0 3
37380: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37381: LD_INT 0
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
// result := array ;
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 1
37399: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37400: LD_VAR 0 1
37404: NOT
37405: PUSH
37406: LD_VAR 0 2
37410: NOT
37411: OR
37412: PUSH
37413: LD_VAR 0 3
37417: NOT
37418: OR
37419: PUSH
37420: LD_VAR 0 2
37424: PUSH
37425: LD_VAR 0 1
37429: GREATER
37430: OR
37431: PUSH
37432: LD_VAR 0 3
37436: PUSH
37437: LD_VAR 0 1
37441: GREATER
37442: OR
37443: IFFALSE 37447
// exit ;
37445: GO 37743
// if direction then
37447: LD_VAR 0 4
37451: IFFALSE 37515
// begin d := 1 ;
37453: LD_ADDR_VAR 0 9
37457: PUSH
37458: LD_INT 1
37460: ST_TO_ADDR
// if i_from > i_to then
37461: LD_VAR 0 2
37465: PUSH
37466: LD_VAR 0 3
37470: GREATER
37471: IFFALSE 37497
// length := ( array - i_from ) + i_to else
37473: LD_ADDR_VAR 0 11
37477: PUSH
37478: LD_VAR 0 1
37482: PUSH
37483: LD_VAR 0 2
37487: MINUS
37488: PUSH
37489: LD_VAR 0 3
37493: PLUS
37494: ST_TO_ADDR
37495: GO 37513
// length := i_to - i_from ;
37497: LD_ADDR_VAR 0 11
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 2
37511: MINUS
37512: ST_TO_ADDR
// end else
37513: GO 37576
// begin d := - 1 ;
37515: LD_ADDR_VAR 0 9
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: ST_TO_ADDR
// if i_from > i_to then
37524: LD_VAR 0 2
37528: PUSH
37529: LD_VAR 0 3
37533: GREATER
37534: IFFALSE 37554
// length := i_from - i_to else
37536: LD_ADDR_VAR 0 11
37540: PUSH
37541: LD_VAR 0 2
37545: PUSH
37546: LD_VAR 0 3
37550: MINUS
37551: ST_TO_ADDR
37552: GO 37576
// length := ( array - i_to ) + i_from ;
37554: LD_ADDR_VAR 0 11
37558: PUSH
37559: LD_VAR 0 1
37563: PUSH
37564: LD_VAR 0 3
37568: MINUS
37569: PUSH
37570: LD_VAR 0 2
37574: PLUS
37575: ST_TO_ADDR
// end ; if not length then
37576: LD_VAR 0 11
37580: NOT
37581: IFFALSE 37585
// exit ;
37583: GO 37743
// tmp := array ;
37585: LD_ADDR_VAR 0 10
37589: PUSH
37590: LD_VAR 0 1
37594: ST_TO_ADDR
// for i = 1 to length do
37595: LD_ADDR_VAR 0 6
37599: PUSH
37600: DOUBLE
37601: LD_INT 1
37603: DEC
37604: ST_TO_ADDR
37605: LD_VAR 0 11
37609: PUSH
37610: FOR_TO
37611: IFFALSE 37731
// begin for j = 1 to array do
37613: LD_ADDR_VAR 0 7
37617: PUSH
37618: DOUBLE
37619: LD_INT 1
37621: DEC
37622: ST_TO_ADDR
37623: LD_VAR 0 1
37627: PUSH
37628: FOR_TO
37629: IFFALSE 37717
// begin k := j + d ;
37631: LD_ADDR_VAR 0 8
37635: PUSH
37636: LD_VAR 0 7
37640: PUSH
37641: LD_VAR 0 9
37645: PLUS
37646: ST_TO_ADDR
// if k > array then
37647: LD_VAR 0 8
37651: PUSH
37652: LD_VAR 0 1
37656: GREATER
37657: IFFALSE 37667
// k := 1 ;
37659: LD_ADDR_VAR 0 8
37663: PUSH
37664: LD_INT 1
37666: ST_TO_ADDR
// if not k then
37667: LD_VAR 0 8
37671: NOT
37672: IFFALSE 37684
// k := array ;
37674: LD_ADDR_VAR 0 8
37678: PUSH
37679: LD_VAR 0 1
37683: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37684: LD_ADDR_VAR 0 10
37688: PUSH
37689: LD_VAR 0 10
37693: PPUSH
37694: LD_VAR 0 8
37698: PPUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_VAR 0 7
37708: ARRAY
37709: PPUSH
37710: CALL_OW 1
37714: ST_TO_ADDR
// end ;
37715: GO 37628
37717: POP
37718: POP
// array := tmp ;
37719: LD_ADDR_VAR 0 1
37723: PUSH
37724: LD_VAR 0 10
37728: ST_TO_ADDR
// end ;
37729: GO 37610
37731: POP
37732: POP
// result := array ;
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: LD_VAR 0 1
37742: ST_TO_ADDR
// end ;
37743: LD_VAR 0 5
37747: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37748: LD_INT 0
37750: PPUSH
37751: PPUSH
// result := 0 ;
37752: LD_ADDR_VAR 0 3
37756: PUSH
37757: LD_INT 0
37759: ST_TO_ADDR
// if not array or not value in array then
37760: LD_VAR 0 1
37764: NOT
37765: PUSH
37766: LD_VAR 0 2
37770: PUSH
37771: LD_VAR 0 1
37775: IN
37776: NOT
37777: OR
37778: IFFALSE 37782
// exit ;
37780: GO 37836
// for i = 1 to array do
37782: LD_ADDR_VAR 0 4
37786: PUSH
37787: DOUBLE
37788: LD_INT 1
37790: DEC
37791: ST_TO_ADDR
37792: LD_VAR 0 1
37796: PUSH
37797: FOR_TO
37798: IFFALSE 37834
// if value = array [ i ] then
37800: LD_VAR 0 2
37804: PUSH
37805: LD_VAR 0 1
37809: PUSH
37810: LD_VAR 0 4
37814: ARRAY
37815: EQUAL
37816: IFFALSE 37832
// begin result := i ;
37818: LD_ADDR_VAR 0 3
37822: PUSH
37823: LD_VAR 0 4
37827: ST_TO_ADDR
// exit ;
37828: POP
37829: POP
37830: GO 37836
// end ;
37832: GO 37797
37834: POP
37835: POP
// end ;
37836: LD_VAR 0 3
37840: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37841: LD_INT 0
37843: PPUSH
// vc_chassis := chassis ;
37844: LD_ADDR_OWVAR 37
37848: PUSH
37849: LD_VAR 0 1
37853: ST_TO_ADDR
// vc_engine := engine ;
37854: LD_ADDR_OWVAR 39
37858: PUSH
37859: LD_VAR 0 2
37863: ST_TO_ADDR
// vc_control := control ;
37864: LD_ADDR_OWVAR 38
37868: PUSH
37869: LD_VAR 0 3
37873: ST_TO_ADDR
// vc_weapon := weapon ;
37874: LD_ADDR_OWVAR 40
37878: PUSH
37879: LD_VAR 0 4
37883: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37884: LD_ADDR_OWVAR 41
37888: PUSH
37889: LD_VAR 0 5
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 6
37898: RET
// export function WantPlant ( unit ) ; var task ; begin
37899: LD_INT 0
37901: PPUSH
37902: PPUSH
// result := false ;
37903: LD_ADDR_VAR 0 2
37907: PUSH
37908: LD_INT 0
37910: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 437
37925: ST_TO_ADDR
// if task then
37926: LD_VAR 0 3
37930: IFFALSE 37958
// if task [ 1 ] [ 1 ] = p then
37932: LD_VAR 0 3
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: PUSH
37945: LD_STRING p
37947: EQUAL
37948: IFFALSE 37958
// result := true ;
37950: LD_ADDR_VAR 0 2
37954: PUSH
37955: LD_INT 1
37957: ST_TO_ADDR
// end ;
37958: LD_VAR 0 2
37962: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37963: LD_INT 0
37965: PPUSH
37966: PPUSH
37967: PPUSH
37968: PPUSH
// if pos < 1 then
37969: LD_VAR 0 2
37973: PUSH
37974: LD_INT 1
37976: LESS
37977: IFFALSE 37981
// exit ;
37979: GO 38284
// if pos = 1 then
37981: LD_VAR 0 2
37985: PUSH
37986: LD_INT 1
37988: EQUAL
37989: IFFALSE 38022
// result := Replace ( arr , pos [ 1 ] , value ) else
37991: LD_ADDR_VAR 0 4
37995: PUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: LD_VAR 0 2
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PPUSH
38010: LD_VAR 0 3
38014: PPUSH
38015: CALL_OW 1
38019: ST_TO_ADDR
38020: GO 38284
// begin tmp := arr ;
38022: LD_ADDR_VAR 0 6
38026: PUSH
38027: LD_VAR 0 1
38031: ST_TO_ADDR
// s_arr := [ tmp ] ;
38032: LD_ADDR_VAR 0 7
38036: PUSH
38037: LD_VAR 0 6
38041: PUSH
38042: EMPTY
38043: LIST
38044: ST_TO_ADDR
// for i = 1 to pos - 1 do
38045: LD_ADDR_VAR 0 5
38049: PUSH
38050: DOUBLE
38051: LD_INT 1
38053: DEC
38054: ST_TO_ADDR
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 1
38062: MINUS
38063: PUSH
38064: FOR_TO
38065: IFFALSE 38110
// begin tmp := tmp [ pos [ i ] ] ;
38067: LD_ADDR_VAR 0 6
38071: PUSH
38072: LD_VAR 0 6
38076: PUSH
38077: LD_VAR 0 2
38081: PUSH
38082: LD_VAR 0 5
38086: ARRAY
38087: ARRAY
38088: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38089: LD_ADDR_VAR 0 7
38093: PUSH
38094: LD_VAR 0 7
38098: PUSH
38099: LD_VAR 0 6
38103: PUSH
38104: EMPTY
38105: LIST
38106: ADD
38107: ST_TO_ADDR
// end ;
38108: GO 38064
38110: POP
38111: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38112: LD_ADDR_VAR 0 6
38116: PUSH
38117: LD_VAR 0 6
38121: PPUSH
38122: LD_VAR 0 2
38126: PUSH
38127: LD_VAR 0 2
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 3
38137: PPUSH
38138: CALL_OW 1
38142: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38143: LD_ADDR_VAR 0 7
38147: PUSH
38148: LD_VAR 0 7
38152: PPUSH
38153: LD_VAR 0 7
38157: PPUSH
38158: LD_VAR 0 6
38162: PPUSH
38163: CALL_OW 1
38167: ST_TO_ADDR
// for i = s_arr downto 2 do
38168: LD_ADDR_VAR 0 5
38172: PUSH
38173: DOUBLE
38174: LD_VAR 0 7
38178: INC
38179: ST_TO_ADDR
38180: LD_INT 2
38182: PUSH
38183: FOR_DOWNTO
38184: IFFALSE 38268
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38186: LD_ADDR_VAR 0 6
38190: PUSH
38191: LD_VAR 0 7
38195: PUSH
38196: LD_VAR 0 5
38200: PUSH
38201: LD_INT 1
38203: MINUS
38204: ARRAY
38205: PPUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_VAR 0 5
38215: PUSH
38216: LD_INT 1
38218: MINUS
38219: ARRAY
38220: PPUSH
38221: LD_VAR 0 7
38225: PUSH
38226: LD_VAR 0 5
38230: ARRAY
38231: PPUSH
38232: CALL_OW 1
38236: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38237: LD_ADDR_VAR 0 7
38241: PUSH
38242: LD_VAR 0 7
38246: PPUSH
38247: LD_VAR 0 5
38251: PUSH
38252: LD_INT 1
38254: MINUS
38255: PPUSH
38256: LD_VAR 0 6
38260: PPUSH
38261: CALL_OW 1
38265: ST_TO_ADDR
// end ;
38266: GO 38183
38268: POP
38269: POP
// result := s_arr [ 1 ] ;
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: LD_VAR 0 7
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: ST_TO_ADDR
// end ; end ;
38284: LD_VAR 0 4
38288: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38289: LD_INT 0
38291: PPUSH
38292: PPUSH
// if not list then
38293: LD_VAR 0 1
38297: NOT
38298: IFFALSE 38302
// exit ;
38300: GO 38393
// i := list [ pos1 ] ;
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_VAR 0 2
38316: ARRAY
38317: ST_TO_ADDR
// if not i then
38318: LD_VAR 0 5
38322: NOT
38323: IFFALSE 38327
// exit ;
38325: GO 38393
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38327: LD_ADDR_VAR 0 1
38331: PUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: LD_VAR 0 2
38341: PPUSH
38342: LD_VAR 0 1
38346: PUSH
38347: LD_VAR 0 3
38351: ARRAY
38352: PPUSH
38353: CALL_OW 1
38357: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38358: LD_ADDR_VAR 0 1
38362: PUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: LD_VAR 0 3
38372: PPUSH
38373: LD_VAR 0 5
38377: PPUSH
38378: CALL_OW 1
38382: ST_TO_ADDR
// result := list ;
38383: LD_ADDR_VAR 0 4
38387: PUSH
38388: LD_VAR 0 1
38392: ST_TO_ADDR
// end ;
38393: LD_VAR 0 4
38397: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38398: LD_INT 0
38400: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38401: LD_ADDR_VAR 0 5
38405: PUSH
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 250
38415: PPUSH
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 251
38425: PPUSH
38426: LD_VAR 0 2
38430: PPUSH
38431: LD_VAR 0 3
38435: PPUSH
38436: LD_VAR 0 4
38440: PPUSH
38441: CALL 38451 0 5
38445: ST_TO_ADDR
// end ;
38446: LD_VAR 0 5
38450: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38451: LD_INT 0
38453: PPUSH
38454: PPUSH
38455: PPUSH
38456: PPUSH
// if not list then
38457: LD_VAR 0 3
38461: NOT
38462: IFFALSE 38466
// exit ;
38464: GO 38854
// result := [ ] ;
38466: LD_ADDR_VAR 0 6
38470: PUSH
38471: EMPTY
38472: ST_TO_ADDR
// for i in list do
38473: LD_ADDR_VAR 0 7
38477: PUSH
38478: LD_VAR 0 3
38482: PUSH
38483: FOR_IN
38484: IFFALSE 38686
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38486: LD_ADDR_VAR 0 9
38490: PUSH
38491: LD_VAR 0 7
38495: PPUSH
38496: LD_VAR 0 1
38500: PPUSH
38501: LD_VAR 0 2
38505: PPUSH
38506: CALL_OW 297
38510: ST_TO_ADDR
// if not result then
38511: LD_VAR 0 6
38515: NOT
38516: IFFALSE 38542
// result := [ [ i , tmp ] ] else
38518: LD_ADDR_VAR 0 6
38522: PUSH
38523: LD_VAR 0 7
38527: PUSH
38528: LD_VAR 0 9
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: EMPTY
38538: LIST
38539: ST_TO_ADDR
38540: GO 38684
// begin if result [ result ] [ 2 ] < tmp then
38542: LD_VAR 0 6
38546: PUSH
38547: LD_VAR 0 6
38551: ARRAY
38552: PUSH
38553: LD_INT 2
38555: ARRAY
38556: PUSH
38557: LD_VAR 0 9
38561: LESS
38562: IFFALSE 38604
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38564: LD_ADDR_VAR 0 6
38568: PUSH
38569: LD_VAR 0 6
38573: PPUSH
38574: LD_VAR 0 6
38578: PUSH
38579: LD_INT 1
38581: PLUS
38582: PPUSH
38583: LD_VAR 0 7
38587: PUSH
38588: LD_VAR 0 9
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL_OW 2
38601: ST_TO_ADDR
38602: GO 38684
// for j = 1 to result do
38604: LD_ADDR_VAR 0 8
38608: PUSH
38609: DOUBLE
38610: LD_INT 1
38612: DEC
38613: ST_TO_ADDR
38614: LD_VAR 0 6
38618: PUSH
38619: FOR_TO
38620: IFFALSE 38682
// begin if tmp < result [ j ] [ 2 ] then
38622: LD_VAR 0 9
38626: PUSH
38627: LD_VAR 0 6
38631: PUSH
38632: LD_VAR 0 8
38636: ARRAY
38637: PUSH
38638: LD_INT 2
38640: ARRAY
38641: LESS
38642: IFFALSE 38680
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38644: LD_ADDR_VAR 0 6
38648: PUSH
38649: LD_VAR 0 6
38653: PPUSH
38654: LD_VAR 0 8
38658: PPUSH
38659: LD_VAR 0 7
38663: PUSH
38664: LD_VAR 0 9
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 2
38677: ST_TO_ADDR
// break ;
38678: GO 38682
// end ; end ;
38680: GO 38619
38682: POP
38683: POP
// end ; end ;
38684: GO 38483
38686: POP
38687: POP
// if result and not asc then
38688: LD_VAR 0 6
38692: PUSH
38693: LD_VAR 0 4
38697: NOT
38698: AND
38699: IFFALSE 38774
// begin tmp := result ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: LD_VAR 0 6
38710: ST_TO_ADDR
// for i = tmp downto 1 do
38711: LD_ADDR_VAR 0 7
38715: PUSH
38716: DOUBLE
38717: LD_VAR 0 9
38721: INC
38722: ST_TO_ADDR
38723: LD_INT 1
38725: PUSH
38726: FOR_DOWNTO
38727: IFFALSE 38772
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38729: LD_ADDR_VAR 0 6
38733: PUSH
38734: LD_VAR 0 6
38738: PPUSH
38739: LD_VAR 0 9
38743: PUSH
38744: LD_VAR 0 7
38748: MINUS
38749: PUSH
38750: LD_INT 1
38752: PLUS
38753: PPUSH
38754: LD_VAR 0 9
38758: PUSH
38759: LD_VAR 0 7
38763: ARRAY
38764: PPUSH
38765: CALL_OW 1
38769: ST_TO_ADDR
38770: GO 38726
38772: POP
38773: POP
// end ; tmp := [ ] ;
38774: LD_ADDR_VAR 0 9
38778: PUSH
38779: EMPTY
38780: ST_TO_ADDR
// if mode then
38781: LD_VAR 0 5
38785: IFFALSE 38854
// begin for i = 1 to result do
38787: LD_ADDR_VAR 0 7
38791: PUSH
38792: DOUBLE
38793: LD_INT 1
38795: DEC
38796: ST_TO_ADDR
38797: LD_VAR 0 6
38801: PUSH
38802: FOR_TO
38803: IFFALSE 38842
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38805: LD_ADDR_VAR 0 9
38809: PUSH
38810: LD_VAR 0 9
38814: PPUSH
38815: LD_VAR 0 7
38819: PPUSH
38820: LD_VAR 0 6
38824: PUSH
38825: LD_VAR 0 7
38829: ARRAY
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: CALL_OW 1
38839: ST_TO_ADDR
38840: GO 38802
38842: POP
38843: POP
// result := tmp ;
38844: LD_ADDR_VAR 0 6
38848: PUSH
38849: LD_VAR 0 9
38853: ST_TO_ADDR
// end ; end ;
38854: LD_VAR 0 6
38858: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38859: LD_INT 0
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// if not x or not y then
38889: LD_VAR 0 2
38893: NOT
38894: PUSH
38895: LD_VAR 0 3
38899: NOT
38900: OR
38901: IFFALSE 38905
// exit ;
38903: GO 40557
// if not range then
38905: LD_VAR 0 4
38909: NOT
38910: IFFALSE 38920
// range := 10 ;
38912: LD_ADDR_VAR 0 4
38916: PUSH
38917: LD_INT 10
38919: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38920: LD_ADDR_VAR 0 8
38924: PUSH
38925: LD_INT 81
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 92
38939: PUSH
38940: LD_VAR 0 2
38944: PUSH
38945: LD_VAR 0 3
38949: PUSH
38950: LD_VAR 0 4
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 21
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 69
38987: ST_TO_ADDR
// if not tmp then
38988: LD_VAR 0 8
38992: NOT
38993: IFFALSE 38997
// exit ;
38995: GO 40557
// for i in tmp do
38997: LD_ADDR_VAR 0 6
39001: PUSH
39002: LD_VAR 0 8
39006: PUSH
39007: FOR_IN
39008: IFFALSE 40532
// begin points := [ 0 , 0 , 0 ] ;
39010: LD_ADDR_VAR 0 9
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: ST_TO_ADDR
// bpoints := 1 ;
39029: LD_ADDR_VAR 0 10
39033: PUSH
39034: LD_INT 1
39036: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39037: LD_VAR 0 6
39041: PPUSH
39042: CALL_OW 247
39046: PUSH
39047: LD_INT 1
39049: DOUBLE
39050: EQUAL
39051: IFTRUE 39055
39053: GO 39633
39055: POP
// begin if GetClass ( i ) = 1 then
39056: LD_VAR 0 6
39060: PPUSH
39061: CALL_OW 257
39065: PUSH
39066: LD_INT 1
39068: EQUAL
39069: IFFALSE 39090
// points := [ 10 , 5 , 3 ] ;
39071: LD_ADDR_VAR 0 9
39075: PUSH
39076: LD_INT 10
39078: PUSH
39079: LD_INT 5
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39090: LD_VAR 0 6
39094: PPUSH
39095: CALL_OW 257
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: LD_INT 4
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: IN
39114: IFFALSE 39135
// points := [ 3 , 2 , 1 ] ;
39116: LD_ADDR_VAR 0 9
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39135: LD_VAR 0 6
39139: PPUSH
39140: CALL_OW 257
39144: PUSH
39145: LD_INT 5
39147: EQUAL
39148: IFFALSE 39169
// points := [ 130 , 5 , 2 ] ;
39150: LD_ADDR_VAR 0 9
39154: PUSH
39155: LD_INT 130
39157: PUSH
39158: LD_INT 5
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39169: LD_VAR 0 6
39173: PPUSH
39174: CALL_OW 257
39178: PUSH
39179: LD_INT 8
39181: EQUAL
39182: IFFALSE 39203
// points := [ 35 , 35 , 30 ] ;
39184: LD_ADDR_VAR 0 9
39188: PUSH
39189: LD_INT 35
39191: PUSH
39192: LD_INT 35
39194: PUSH
39195: LD_INT 30
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39203: LD_VAR 0 6
39207: PPUSH
39208: CALL_OW 257
39212: PUSH
39213: LD_INT 9
39215: EQUAL
39216: IFFALSE 39237
// points := [ 20 , 55 , 40 ] ;
39218: LD_ADDR_VAR 0 9
39222: PUSH
39223: LD_INT 20
39225: PUSH
39226: LD_INT 55
39228: PUSH
39229: LD_INT 40
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39237: LD_VAR 0 6
39241: PPUSH
39242: CALL_OW 257
39246: PUSH
39247: LD_INT 12
39249: PUSH
39250: LD_INT 16
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: IN
39257: IFFALSE 39278
// points := [ 5 , 3 , 2 ] ;
39259: LD_ADDR_VAR 0 9
39263: PUSH
39264: LD_INT 5
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39278: LD_VAR 0 6
39282: PPUSH
39283: CALL_OW 257
39287: PUSH
39288: LD_INT 17
39290: EQUAL
39291: IFFALSE 39312
// points := [ 100 , 50 , 75 ] ;
39293: LD_ADDR_VAR 0 9
39297: PUSH
39298: LD_INT 100
39300: PUSH
39301: LD_INT 50
39303: PUSH
39304: LD_INT 75
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39312: LD_VAR 0 6
39316: PPUSH
39317: CALL_OW 257
39321: PUSH
39322: LD_INT 15
39324: EQUAL
39325: IFFALSE 39346
// points := [ 10 , 5 , 3 ] ;
39327: LD_ADDR_VAR 0 9
39331: PUSH
39332: LD_INT 10
39334: PUSH
39335: LD_INT 5
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39346: LD_VAR 0 6
39350: PPUSH
39351: CALL_OW 257
39355: PUSH
39356: LD_INT 14
39358: EQUAL
39359: IFFALSE 39380
// points := [ 10 , 0 , 0 ] ;
39361: LD_ADDR_VAR 0 9
39365: PUSH
39366: LD_INT 10
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39380: LD_VAR 0 6
39384: PPUSH
39385: CALL_OW 257
39389: PUSH
39390: LD_INT 11
39392: EQUAL
39393: IFFALSE 39414
// points := [ 30 , 10 , 5 ] ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: LD_INT 30
39402: PUSH
39403: LD_INT 10
39405: PUSH
39406: LD_INT 5
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39414: LD_VAR 0 1
39418: PPUSH
39419: LD_INT 5
39421: PPUSH
39422: CALL_OW 321
39426: PUSH
39427: LD_INT 2
39429: EQUAL
39430: IFFALSE 39447
// bpoints := bpoints * 1.8 ;
39432: LD_ADDR_VAR 0 10
39436: PUSH
39437: LD_VAR 0 10
39441: PUSH
39442: LD_REAL  1.80000000000000E+0000
39445: MUL
39446: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39447: LD_VAR 0 6
39451: PPUSH
39452: CALL_OW 257
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 4
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: IN
39475: PUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: LD_INT 51
39483: PPUSH
39484: CALL_OW 321
39488: PUSH
39489: LD_INT 2
39491: EQUAL
39492: AND
39493: IFFALSE 39510
// bpoints := bpoints * 1.2 ;
39495: LD_ADDR_VAR 0 10
39499: PUSH
39500: LD_VAR 0 10
39504: PUSH
39505: LD_REAL  1.20000000000000E+0000
39508: MUL
39509: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39510: LD_VAR 0 6
39514: PPUSH
39515: CALL_OW 257
39519: PUSH
39520: LD_INT 5
39522: PUSH
39523: LD_INT 7
39525: PUSH
39526: LD_INT 9
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: IN
39534: PUSH
39535: LD_VAR 0 1
39539: PPUSH
39540: LD_INT 52
39542: PPUSH
39543: CALL_OW 321
39547: PUSH
39548: LD_INT 2
39550: EQUAL
39551: AND
39552: IFFALSE 39569
// bpoints := bpoints * 1.5 ;
39554: LD_ADDR_VAR 0 10
39558: PUSH
39559: LD_VAR 0 10
39563: PUSH
39564: LD_REAL  1.50000000000000E+0000
39567: MUL
39568: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_INT 66
39576: PPUSH
39577: CALL_OW 321
39581: PUSH
39582: LD_INT 2
39584: EQUAL
39585: IFFALSE 39602
// bpoints := bpoints * 1.1 ;
39587: LD_ADDR_VAR 0 10
39591: PUSH
39592: LD_VAR 0 10
39596: PUSH
39597: LD_REAL  1.10000000000000E+0000
39600: MUL
39601: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39602: LD_ADDR_VAR 0 10
39606: PUSH
39607: LD_VAR 0 10
39611: PUSH
39612: LD_VAR 0 6
39616: PPUSH
39617: LD_INT 1
39619: PPUSH
39620: CALL_OW 259
39624: PUSH
39625: LD_REAL  1.15000000000000E+0000
39628: MUL
39629: MUL
39630: ST_TO_ADDR
// end ; unit_vehicle :
39631: GO 40461
39633: LD_INT 2
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 40449
39641: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39642: LD_VAR 0 6
39646: PPUSH
39647: CALL_OW 264
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 42
39657: PUSH
39658: LD_INT 24
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: IN
39666: IFFALSE 39687
// points := [ 25 , 5 , 3 ] ;
39668: LD_ADDR_VAR 0 9
39672: PUSH
39673: LD_INT 25
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39687: LD_VAR 0 6
39691: PPUSH
39692: CALL_OW 264
39696: PUSH
39697: LD_INT 4
39699: PUSH
39700: LD_INT 43
39702: PUSH
39703: LD_INT 25
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: IN
39711: IFFALSE 39732
// points := [ 40 , 15 , 5 ] ;
39713: LD_ADDR_VAR 0 9
39717: PUSH
39718: LD_INT 40
39720: PUSH
39721: LD_INT 15
39723: PUSH
39724: LD_INT 5
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: LIST
39731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39732: LD_VAR 0 6
39736: PPUSH
39737: CALL_OW 264
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 23
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: IN
39752: IFFALSE 39773
// points := [ 7 , 25 , 8 ] ;
39754: LD_ADDR_VAR 0 9
39758: PUSH
39759: LD_INT 7
39761: PUSH
39762: LD_INT 25
39764: PUSH
39765: LD_INT 8
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39773: LD_VAR 0 6
39777: PPUSH
39778: CALL_OW 264
39782: PUSH
39783: LD_INT 5
39785: PUSH
39786: LD_INT 27
39788: PUSH
39789: LD_INT 44
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: IN
39797: IFFALSE 39818
// points := [ 14 , 50 , 16 ] ;
39799: LD_ADDR_VAR 0 9
39803: PUSH
39804: LD_INT 14
39806: PUSH
39807: LD_INT 50
39809: PUSH
39810: LD_INT 16
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39818: LD_VAR 0 6
39822: PPUSH
39823: CALL_OW 264
39827: PUSH
39828: LD_INT 6
39830: PUSH
39831: LD_INT 46
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: IN
39838: IFFALSE 39859
// points := [ 32 , 120 , 70 ] ;
39840: LD_ADDR_VAR 0 9
39844: PUSH
39845: LD_INT 32
39847: PUSH
39848: LD_INT 120
39850: PUSH
39851: LD_INT 70
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39859: LD_VAR 0 6
39863: PPUSH
39864: CALL_OW 264
39868: PUSH
39869: LD_INT 7
39871: PUSH
39872: LD_INT 28
39874: PUSH
39875: LD_INT 45
39877: PUSH
39878: LD_EXP 37
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: IN
39889: IFFALSE 39910
// points := [ 35 , 20 , 45 ] ;
39891: LD_ADDR_VAR 0 9
39895: PUSH
39896: LD_INT 35
39898: PUSH
39899: LD_INT 20
39901: PUSH
39902: LD_INT 45
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39910: LD_VAR 0 6
39914: PPUSH
39915: CALL_OW 264
39919: PUSH
39920: LD_INT 47
39922: PUSH
39923: EMPTY
39924: LIST
39925: IN
39926: IFFALSE 39947
// points := [ 67 , 45 , 75 ] ;
39928: LD_ADDR_VAR 0 9
39932: PUSH
39933: LD_INT 67
39935: PUSH
39936: LD_INT 45
39938: PUSH
39939: LD_INT 75
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39947: LD_VAR 0 6
39951: PPUSH
39952: CALL_OW 264
39956: PUSH
39957: LD_INT 26
39959: PUSH
39960: EMPTY
39961: LIST
39962: IN
39963: IFFALSE 39984
// points := [ 120 , 30 , 80 ] ;
39965: LD_ADDR_VAR 0 9
39969: PUSH
39970: LD_INT 120
39972: PUSH
39973: LD_INT 30
39975: PUSH
39976: LD_INT 80
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39984: LD_VAR 0 6
39988: PPUSH
39989: CALL_OW 264
39993: PUSH
39994: LD_INT 22
39996: PUSH
39997: EMPTY
39998: LIST
39999: IN
40000: IFFALSE 40021
// points := [ 40 , 1 , 1 ] ;
40002: LD_ADDR_VAR 0 9
40006: PUSH
40007: LD_INT 40
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40021: LD_VAR 0 6
40025: PPUSH
40026: CALL_OW 264
40030: PUSH
40031: LD_INT 29
40033: PUSH
40034: EMPTY
40035: LIST
40036: IN
40037: IFFALSE 40058
// points := [ 70 , 200 , 400 ] ;
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_INT 70
40046: PUSH
40047: LD_INT 200
40049: PUSH
40050: LD_INT 400
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40058: LD_VAR 0 6
40062: PPUSH
40063: CALL_OW 264
40067: PUSH
40068: LD_INT 14
40070: PUSH
40071: LD_INT 53
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: IN
40078: IFFALSE 40099
// points := [ 40 , 10 , 20 ] ;
40080: LD_ADDR_VAR 0 9
40084: PUSH
40085: LD_INT 40
40087: PUSH
40088: LD_INT 10
40090: PUSH
40091: LD_INT 20
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40099: LD_VAR 0 6
40103: PPUSH
40104: CALL_OW 264
40108: PUSH
40109: LD_INT 9
40111: PUSH
40112: EMPTY
40113: LIST
40114: IN
40115: IFFALSE 40136
// points := [ 5 , 70 , 20 ] ;
40117: LD_ADDR_VAR 0 9
40121: PUSH
40122: LD_INT 5
40124: PUSH
40125: LD_INT 70
40127: PUSH
40128: LD_INT 20
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40136: LD_VAR 0 6
40140: PPUSH
40141: CALL_OW 264
40145: PUSH
40146: LD_INT 10
40148: PUSH
40149: EMPTY
40150: LIST
40151: IN
40152: IFFALSE 40173
// points := [ 35 , 110 , 70 ] ;
40154: LD_ADDR_VAR 0 9
40158: PUSH
40159: LD_INT 35
40161: PUSH
40162: LD_INT 110
40164: PUSH
40165: LD_INT 70
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40173: LD_VAR 0 6
40177: PPUSH
40178: CALL_OW 265
40182: PUSH
40183: LD_INT 25
40185: EQUAL
40186: IFFALSE 40207
// points := [ 80 , 65 , 100 ] ;
40188: LD_ADDR_VAR 0 9
40192: PUSH
40193: LD_INT 80
40195: PUSH
40196: LD_INT 65
40198: PUSH
40199: LD_INT 100
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40207: LD_VAR 0 6
40211: PPUSH
40212: CALL_OW 263
40216: PUSH
40217: LD_INT 1
40219: EQUAL
40220: IFFALSE 40255
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40222: LD_ADDR_VAR 0 10
40226: PUSH
40227: LD_VAR 0 10
40231: PUSH
40232: LD_VAR 0 6
40236: PPUSH
40237: CALL_OW 311
40241: PPUSH
40242: LD_INT 3
40244: PPUSH
40245: CALL_OW 259
40249: PUSH
40250: LD_INT 4
40252: MUL
40253: MUL
40254: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40255: LD_VAR 0 6
40259: PPUSH
40260: CALL_OW 263
40264: PUSH
40265: LD_INT 2
40267: EQUAL
40268: IFFALSE 40319
// begin j := IsControledBy ( i ) ;
40270: LD_ADDR_VAR 0 7
40274: PUSH
40275: LD_VAR 0 6
40279: PPUSH
40280: CALL_OW 312
40284: ST_TO_ADDR
// if j then
40285: LD_VAR 0 7
40289: IFFALSE 40319
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40291: LD_ADDR_VAR 0 10
40295: PUSH
40296: LD_VAR 0 10
40300: PUSH
40301: LD_VAR 0 7
40305: PPUSH
40306: LD_INT 3
40308: PPUSH
40309: CALL_OW 259
40313: PUSH
40314: LD_INT 3
40316: MUL
40317: MUL
40318: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40319: LD_VAR 0 6
40323: PPUSH
40324: CALL_OW 264
40328: PUSH
40329: LD_INT 5
40331: PUSH
40332: LD_INT 6
40334: PUSH
40335: LD_INT 46
40337: PUSH
40338: LD_INT 44
40340: PUSH
40341: LD_INT 47
40343: PUSH
40344: LD_INT 45
40346: PUSH
40347: LD_INT 28
40349: PUSH
40350: LD_INT 7
40352: PUSH
40353: LD_INT 27
40355: PUSH
40356: LD_INT 29
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: IN
40371: PUSH
40372: LD_VAR 0 1
40376: PPUSH
40377: LD_INT 52
40379: PPUSH
40380: CALL_OW 321
40384: PUSH
40385: LD_INT 2
40387: EQUAL
40388: AND
40389: IFFALSE 40406
// bpoints := bpoints * 1.2 ;
40391: LD_ADDR_VAR 0 10
40395: PUSH
40396: LD_VAR 0 10
40400: PUSH
40401: LD_REAL  1.20000000000000E+0000
40404: MUL
40405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40406: LD_VAR 0 6
40410: PPUSH
40411: CALL_OW 264
40415: PUSH
40416: LD_INT 6
40418: PUSH
40419: LD_INT 46
40421: PUSH
40422: LD_INT 47
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: IN
40430: IFFALSE 40447
// bpoints := bpoints * 1.2 ;
40432: LD_ADDR_VAR 0 10
40436: PUSH
40437: LD_VAR 0 10
40441: PUSH
40442: LD_REAL  1.20000000000000E+0000
40445: MUL
40446: ST_TO_ADDR
// end ; unit_building :
40447: GO 40461
40449: LD_INT 3
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40460
40457: POP
// ; end ;
40458: GO 40461
40460: POP
// for j = 1 to 3 do
40461: LD_ADDR_VAR 0 7
40465: PUSH
40466: DOUBLE
40467: LD_INT 1
40469: DEC
40470: ST_TO_ADDR
40471: LD_INT 3
40473: PUSH
40474: FOR_TO
40475: IFFALSE 40528
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40477: LD_ADDR_VAR 0 5
40481: PUSH
40482: LD_VAR 0 5
40486: PPUSH
40487: LD_VAR 0 7
40491: PPUSH
40492: LD_VAR 0 5
40496: PUSH
40497: LD_VAR 0 7
40501: ARRAY
40502: PUSH
40503: LD_VAR 0 9
40507: PUSH
40508: LD_VAR 0 7
40512: ARRAY
40513: PUSH
40514: LD_VAR 0 10
40518: MUL
40519: PLUS
40520: PPUSH
40521: CALL_OW 1
40525: ST_TO_ADDR
40526: GO 40474
40528: POP
40529: POP
// end ;
40530: GO 39007
40532: POP
40533: POP
// result := Replace ( result , 4 , tmp ) ;
40534: LD_ADDR_VAR 0 5
40538: PUSH
40539: LD_VAR 0 5
40543: PPUSH
40544: LD_INT 4
40546: PPUSH
40547: LD_VAR 0 8
40551: PPUSH
40552: CALL_OW 1
40556: ST_TO_ADDR
// end ;
40557: LD_VAR 0 5
40561: RET
// export function DangerAtRange ( unit , range ) ; begin
40562: LD_INT 0
40564: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40565: LD_ADDR_VAR 0 3
40569: PUSH
40570: LD_VAR 0 1
40574: PPUSH
40575: CALL_OW 255
40579: PPUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 250
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 251
40599: PPUSH
40600: LD_VAR 0 2
40604: PPUSH
40605: CALL 38859 0 4
40609: ST_TO_ADDR
// end ;
40610: LD_VAR 0 3
40614: RET
// export function DangerInArea ( side , area ) ; begin
40615: LD_INT 0
40617: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40618: LD_ADDR_VAR 0 3
40622: PUSH
40623: LD_VAR 0 2
40627: PPUSH
40628: LD_INT 81
40630: PUSH
40631: LD_VAR 0 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PPUSH
40640: CALL_OW 70
40644: ST_TO_ADDR
// end ;
40645: LD_VAR 0 3
40649: RET
// export function IsExtension ( b ) ; begin
40650: LD_INT 0
40652: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40653: LD_ADDR_VAR 0 2
40657: PUSH
40658: LD_VAR 0 1
40662: PUSH
40663: LD_INT 23
40665: PUSH
40666: LD_INT 20
40668: PUSH
40669: LD_INT 22
40671: PUSH
40672: LD_INT 17
40674: PUSH
40675: LD_INT 24
40677: PUSH
40678: LD_INT 21
40680: PUSH
40681: LD_INT 19
40683: PUSH
40684: LD_INT 16
40686: PUSH
40687: LD_INT 25
40689: PUSH
40690: LD_INT 18
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: IN
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 2
40710: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
// result := [ ] ;
40716: LD_ADDR_VAR 0 4
40720: PUSH
40721: EMPTY
40722: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40723: LD_ADDR_VAR 0 5
40727: PUSH
40728: LD_VAR 0 2
40732: PPUSH
40733: LD_INT 21
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PPUSH
40743: CALL_OW 70
40747: ST_TO_ADDR
// if not tmp then
40748: LD_VAR 0 5
40752: NOT
40753: IFFALSE 40757
// exit ;
40755: GO 40821
// if checkLink then
40757: LD_VAR 0 3
40761: IFFALSE 40811
// begin for i in tmp do
40763: LD_ADDR_VAR 0 6
40767: PUSH
40768: LD_VAR 0 5
40772: PUSH
40773: FOR_IN
40774: IFFALSE 40809
// if GetBase ( i ) <> base then
40776: LD_VAR 0 6
40780: PPUSH
40781: CALL_OW 274
40785: PUSH
40786: LD_VAR 0 1
40790: NONEQUAL
40791: IFFALSE 40807
// ComLinkToBase ( base , i ) ;
40793: LD_VAR 0 1
40797: PPUSH
40798: LD_VAR 0 6
40802: PPUSH
40803: CALL_OW 169
40807: GO 40773
40809: POP
40810: POP
// end ; result := tmp ;
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: LD_VAR 0 5
40820: ST_TO_ADDR
// end ;
40821: LD_VAR 0 4
40825: RET
// export function ComComplete ( units , b ) ; var i ; begin
40826: LD_INT 0
40828: PPUSH
40829: PPUSH
// if not units then
40830: LD_VAR 0 1
40834: NOT
40835: IFFALSE 40839
// exit ;
40837: GO 40929
// for i in units do
40839: LD_ADDR_VAR 0 4
40843: PUSH
40844: LD_VAR 0 1
40848: PUSH
40849: FOR_IN
40850: IFFALSE 40927
// if BuildingStatus ( b ) = bs_build then
40852: LD_VAR 0 2
40856: PPUSH
40857: CALL_OW 461
40861: PUSH
40862: LD_INT 1
40864: EQUAL
40865: IFFALSE 40925
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40867: LD_VAR 0 4
40871: PPUSH
40872: LD_STRING h
40874: PUSH
40875: LD_VAR 0 2
40879: PPUSH
40880: CALL_OW 250
40884: PUSH
40885: LD_VAR 0 2
40889: PPUSH
40890: CALL_OW 251
40894: PUSH
40895: LD_VAR 0 2
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: PPUSH
40921: CALL_OW 446
40925: GO 40849
40927: POP
40928: POP
// end ;
40929: LD_VAR 0 3
40933: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40934: LD_INT 0
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40942: LD_VAR 0 1
40946: NOT
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 263
40957: PUSH
40958: LD_INT 2
40960: NONEQUAL
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 41282
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40966: LD_ADDR_VAR 0 6
40970: PUSH
40971: LD_INT 22
40973: PUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: CALL_OW 255
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 30
40993: PUSH
40994: LD_INT 36
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 34
41003: PUSH
41004: LD_INT 31
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PPUSH
41020: CALL_OW 69
41024: ST_TO_ADDR
// if not tmp then
41025: LD_VAR 0 6
41029: NOT
41030: IFFALSE 41034
// exit ;
41032: GO 41282
// result := [ ] ;
41034: LD_ADDR_VAR 0 2
41038: PUSH
41039: EMPTY
41040: ST_TO_ADDR
// for i in tmp do
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_VAR 0 6
41050: PUSH
41051: FOR_IN
41052: IFFALSE 41123
// begin t := UnitsInside ( i ) ;
41054: LD_ADDR_VAR 0 4
41058: PUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: CALL_OW 313
41068: ST_TO_ADDR
// if t then
41069: LD_VAR 0 4
41073: IFFALSE 41121
// for j in t do
41075: LD_ADDR_VAR 0 7
41079: PUSH
41080: LD_VAR 0 4
41084: PUSH
41085: FOR_IN
41086: IFFALSE 41119
// result := Replace ( result , result + 1 , j ) ;
41088: LD_ADDR_VAR 0 2
41092: PUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: LD_VAR 0 2
41102: PUSH
41103: LD_INT 1
41105: PLUS
41106: PPUSH
41107: LD_VAR 0 7
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
41117: GO 41085
41119: POP
41120: POP
// end ;
41121: GO 41051
41123: POP
41124: POP
// if not result then
41125: LD_VAR 0 2
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41282
// mech := result [ 1 ] ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 2
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: ST_TO_ADDR
// if result > 1 then
41148: LD_VAR 0 2
41152: PUSH
41153: LD_INT 1
41155: GREATER
41156: IFFALSE 41268
// begin for i = 2 to result do
41158: LD_ADDR_VAR 0 3
41162: PUSH
41163: DOUBLE
41164: LD_INT 2
41166: DEC
41167: ST_TO_ADDR
41168: LD_VAR 0 2
41172: PUSH
41173: FOR_TO
41174: IFFALSE 41266
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41176: LD_ADDR_VAR 0 4
41180: PUSH
41181: LD_VAR 0 2
41185: PUSH
41186: LD_VAR 0 3
41190: ARRAY
41191: PPUSH
41192: LD_INT 3
41194: PPUSH
41195: CALL_OW 259
41199: PUSH
41200: LD_VAR 0 2
41204: PUSH
41205: LD_VAR 0 3
41209: ARRAY
41210: PPUSH
41211: CALL_OW 432
41215: MINUS
41216: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41217: LD_VAR 0 4
41221: PUSH
41222: LD_VAR 0 5
41226: PPUSH
41227: LD_INT 3
41229: PPUSH
41230: CALL_OW 259
41234: PUSH
41235: LD_VAR 0 5
41239: PPUSH
41240: CALL_OW 432
41244: MINUS
41245: GREATEREQUAL
41246: IFFALSE 41264
// mech := result [ i ] ;
41248: LD_ADDR_VAR 0 5
41252: PUSH
41253: LD_VAR 0 2
41257: PUSH
41258: LD_VAR 0 3
41262: ARRAY
41263: ST_TO_ADDR
// end ;
41264: GO 41173
41266: POP
41267: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41268: LD_VAR 0 1
41272: PPUSH
41273: LD_VAR 0 5
41277: PPUSH
41278: CALL_OW 135
// end ;
41282: LD_VAR 0 2
41286: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41287: LD_INT 0
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
// result := [ ] ;
41302: LD_ADDR_VAR 0 7
41306: PUSH
41307: EMPTY
41308: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 266
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: IN
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 42968
// if name then
41334: LD_VAR 0 3
41338: IFFALSE 41354
// SetBName ( base_dep , name ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_VAR 0 3
41349: PPUSH
41350: CALL_OW 500
// base := GetBase ( base_dep ) ;
41354: LD_ADDR_VAR 0 15
41358: PUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 274
41368: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41369: LD_ADDR_VAR 0 16
41373: PUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 255
41383: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41384: LD_ADDR_VAR 0 17
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 248
41398: ST_TO_ADDR
// if sources then
41399: LD_VAR 0 5
41403: IFFALSE 41450
// for i = 1 to 3 do
41405: LD_ADDR_VAR 0 8
41409: PUSH
41410: DOUBLE
41411: LD_INT 1
41413: DEC
41414: ST_TO_ADDR
41415: LD_INT 3
41417: PUSH
41418: FOR_TO
41419: IFFALSE 41448
// AddResourceType ( base , i , sources [ i ] ) ;
41421: LD_VAR 0 15
41425: PPUSH
41426: LD_VAR 0 8
41430: PPUSH
41431: LD_VAR 0 5
41435: PUSH
41436: LD_VAR 0 8
41440: ARRAY
41441: PPUSH
41442: CALL_OW 276
41446: GO 41418
41448: POP
41449: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41450: LD_ADDR_VAR 0 18
41454: PUSH
41455: LD_VAR 0 15
41459: PPUSH
41460: LD_VAR 0 2
41464: PPUSH
41465: LD_INT 1
41467: PPUSH
41468: CALL 40711 0 3
41472: ST_TO_ADDR
// InitHc ;
41473: CALL_OW 19
// InitUc ;
41477: CALL_OW 18
// uc_side := side ;
41481: LD_ADDR_OWVAR 20
41485: PUSH
41486: LD_VAR 0 16
41490: ST_TO_ADDR
// uc_nation := nation ;
41491: LD_ADDR_OWVAR 21
41495: PUSH
41496: LD_VAR 0 17
41500: ST_TO_ADDR
// if buildings then
41501: LD_VAR 0 18
41505: IFFALSE 42827
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41507: LD_ADDR_VAR 0 19
41511: PUSH
41512: LD_VAR 0 18
41516: PPUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 30
41522: PUSH
41523: LD_INT 29
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 30
41532: PUSH
41533: LD_INT 30
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: PPUSH
41545: CALL_OW 72
41549: ST_TO_ADDR
// if tmp then
41550: LD_VAR 0 19
41554: IFFALSE 41602
// for i in tmp do
41556: LD_ADDR_VAR 0 8
41560: PUSH
41561: LD_VAR 0 19
41565: PUSH
41566: FOR_IN
41567: IFFALSE 41600
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41569: LD_VAR 0 8
41573: PPUSH
41574: CALL_OW 250
41578: PPUSH
41579: LD_VAR 0 8
41583: PPUSH
41584: CALL_OW 251
41588: PPUSH
41589: LD_VAR 0 16
41593: PPUSH
41594: CALL_OW 441
41598: GO 41566
41600: POP
41601: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41602: LD_VAR 0 18
41606: PPUSH
41607: LD_INT 2
41609: PUSH
41610: LD_INT 30
41612: PUSH
41613: LD_INT 32
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 30
41622: PUSH
41623: LD_INT 33
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: PPUSH
41635: CALL_OW 72
41639: IFFALSE 41727
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41641: LD_ADDR_VAR 0 8
41645: PUSH
41646: LD_VAR 0 18
41650: PPUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 30
41656: PUSH
41657: LD_INT 32
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 30
41666: PUSH
41667: LD_INT 33
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: PPUSH
41679: CALL_OW 72
41683: PUSH
41684: FOR_IN
41685: IFFALSE 41725
// begin if not GetBWeapon ( i ) then
41687: LD_VAR 0 8
41691: PPUSH
41692: CALL_OW 269
41696: NOT
41697: IFFALSE 41723
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41699: LD_VAR 0 8
41703: PPUSH
41704: LD_VAR 0 8
41708: PPUSH
41709: LD_VAR 0 2
41713: PPUSH
41714: CALL 42973 0 2
41718: PPUSH
41719: CALL_OW 431
// end ;
41723: GO 41684
41725: POP
41726: POP
// end ; for i = 1 to personel do
41727: LD_ADDR_VAR 0 8
41731: PUSH
41732: DOUBLE
41733: LD_INT 1
41735: DEC
41736: ST_TO_ADDR
41737: LD_VAR 0 6
41741: PUSH
41742: FOR_TO
41743: IFFALSE 42807
// begin if i > 4 then
41745: LD_VAR 0 8
41749: PUSH
41750: LD_INT 4
41752: GREATER
41753: IFFALSE 41757
// break ;
41755: GO 42807
// case i of 1 :
41757: LD_VAR 0 8
41761: PUSH
41762: LD_INT 1
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41770
41768: GO 41850
41770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41771: LD_ADDR_VAR 0 12
41775: PUSH
41776: LD_VAR 0 18
41780: PPUSH
41781: LD_INT 22
41783: PUSH
41784: LD_VAR 0 16
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 58
41795: PUSH
41796: EMPTY
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 30
41804: PUSH
41805: LD_INT 32
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 30
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 30
41824: PUSH
41825: LD_INT 5
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: PPUSH
41843: CALL_OW 72
41847: ST_TO_ADDR
41848: GO 42072
41850: LD_INT 2
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 41920
41858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41859: LD_ADDR_VAR 0 12
41863: PUSH
41864: LD_VAR 0 18
41868: PPUSH
41869: LD_INT 22
41871: PUSH
41872: LD_VAR 0 16
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 30
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 30
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PPUSH
41913: CALL_OW 72
41917: ST_TO_ADDR
41918: GO 42072
41920: LD_INT 3
41922: DOUBLE
41923: EQUAL
41924: IFTRUE 41928
41926: GO 41990
41928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41929: LD_ADDR_VAR 0 12
41933: PUSH
41934: LD_VAR 0 18
41938: PPUSH
41939: LD_INT 22
41941: PUSH
41942: LD_VAR 0 16
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 30
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 30
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PPUSH
41983: CALL_OW 72
41987: ST_TO_ADDR
41988: GO 42072
41990: LD_INT 4
41992: DOUBLE
41993: EQUAL
41994: IFTRUE 41998
41996: GO 42071
41998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41999: LD_ADDR_VAR 0 12
42003: PUSH
42004: LD_VAR 0 18
42008: PPUSH
42009: LD_INT 22
42011: PUSH
42012: LD_VAR 0 16
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 30
42026: PUSH
42027: LD_INT 6
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 30
42036: PUSH
42037: LD_INT 7
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 8
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PPUSH
42064: CALL_OW 72
42068: ST_TO_ADDR
42069: GO 42072
42071: POP
// if i = 1 then
42072: LD_VAR 0 8
42076: PUSH
42077: LD_INT 1
42079: EQUAL
42080: IFFALSE 42191
// begin tmp := [ ] ;
42082: LD_ADDR_VAR 0 19
42086: PUSH
42087: EMPTY
42088: ST_TO_ADDR
// for j in f do
42089: LD_ADDR_VAR 0 9
42093: PUSH
42094: LD_VAR 0 12
42098: PUSH
42099: FOR_IN
42100: IFFALSE 42173
// if GetBType ( j ) = b_bunker then
42102: LD_VAR 0 9
42106: PPUSH
42107: CALL_OW 266
42111: PUSH
42112: LD_INT 32
42114: EQUAL
42115: IFFALSE 42142
// tmp := Insert ( tmp , 1 , j ) else
42117: LD_ADDR_VAR 0 19
42121: PUSH
42122: LD_VAR 0 19
42126: PPUSH
42127: LD_INT 1
42129: PPUSH
42130: LD_VAR 0 9
42134: PPUSH
42135: CALL_OW 2
42139: ST_TO_ADDR
42140: GO 42171
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42142: LD_ADDR_VAR 0 19
42146: PUSH
42147: LD_VAR 0 19
42151: PPUSH
42152: LD_VAR 0 19
42156: PUSH
42157: LD_INT 1
42159: PLUS
42160: PPUSH
42161: LD_VAR 0 9
42165: PPUSH
42166: CALL_OW 2
42170: ST_TO_ADDR
42171: GO 42099
42173: POP
42174: POP
// if tmp then
42175: LD_VAR 0 19
42179: IFFALSE 42191
// f := tmp ;
42181: LD_ADDR_VAR 0 12
42185: PUSH
42186: LD_VAR 0 19
42190: ST_TO_ADDR
// end ; x := personel [ i ] ;
42191: LD_ADDR_VAR 0 13
42195: PUSH
42196: LD_VAR 0 6
42200: PUSH
42201: LD_VAR 0 8
42205: ARRAY
42206: ST_TO_ADDR
// if x = - 1 then
42207: LD_VAR 0 13
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: EQUAL
42216: IFFALSE 42425
// begin for j in f do
42218: LD_ADDR_VAR 0 9
42222: PUSH
42223: LD_VAR 0 12
42227: PUSH
42228: FOR_IN
42229: IFFALSE 42421
// repeat InitHc ;
42231: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42235: LD_VAR 0 9
42239: PPUSH
42240: CALL_OW 266
42244: PUSH
42245: LD_INT 5
42247: EQUAL
42248: IFFALSE 42318
// begin if UnitsInside ( j ) < 3 then
42250: LD_VAR 0 9
42254: PPUSH
42255: CALL_OW 313
42259: PUSH
42260: LD_INT 3
42262: LESS
42263: IFFALSE 42299
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42265: LD_INT 0
42267: PPUSH
42268: LD_INT 5
42270: PUSH
42271: LD_INT 8
42273: PUSH
42274: LD_INT 9
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: PUSH
42282: LD_VAR 0 17
42286: ARRAY
42287: PPUSH
42288: LD_VAR 0 4
42292: PPUSH
42293: CALL_OW 380
42297: GO 42316
// PrepareHuman ( false , i , skill ) ;
42299: LD_INT 0
42301: PPUSH
42302: LD_VAR 0 8
42306: PPUSH
42307: LD_VAR 0 4
42311: PPUSH
42312: CALL_OW 380
// end else
42316: GO 42335
// PrepareHuman ( false , i , skill ) ;
42318: LD_INT 0
42320: PPUSH
42321: LD_VAR 0 8
42325: PPUSH
42326: LD_VAR 0 4
42330: PPUSH
42331: CALL_OW 380
// un := CreateHuman ;
42335: LD_ADDR_VAR 0 14
42339: PUSH
42340: CALL_OW 44
42344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42345: LD_ADDR_VAR 0 7
42349: PUSH
42350: LD_VAR 0 7
42354: PPUSH
42355: LD_INT 1
42357: PPUSH
42358: LD_VAR 0 14
42362: PPUSH
42363: CALL_OW 2
42367: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42368: LD_VAR 0 14
42372: PPUSH
42373: LD_VAR 0 9
42377: PPUSH
42378: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42382: LD_VAR 0 9
42386: PPUSH
42387: CALL_OW 313
42391: PUSH
42392: LD_INT 6
42394: EQUAL
42395: PUSH
42396: LD_VAR 0 9
42400: PPUSH
42401: CALL_OW 266
42405: PUSH
42406: LD_INT 32
42408: PUSH
42409: LD_INT 31
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: IN
42416: OR
42417: IFFALSE 42231
42419: GO 42228
42421: POP
42422: POP
// end else
42423: GO 42805
// for j = 1 to x do
42425: LD_ADDR_VAR 0 9
42429: PUSH
42430: DOUBLE
42431: LD_INT 1
42433: DEC
42434: ST_TO_ADDR
42435: LD_VAR 0 13
42439: PUSH
42440: FOR_TO
42441: IFFALSE 42803
// begin InitHc ;
42443: CALL_OW 19
// if not f then
42447: LD_VAR 0 12
42451: NOT
42452: IFFALSE 42541
// begin PrepareHuman ( false , i , skill ) ;
42454: LD_INT 0
42456: PPUSH
42457: LD_VAR 0 8
42461: PPUSH
42462: LD_VAR 0 4
42466: PPUSH
42467: CALL_OW 380
// un := CreateHuman ;
42471: LD_ADDR_VAR 0 14
42475: PUSH
42476: CALL_OW 44
42480: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42481: LD_ADDR_VAR 0 7
42485: PUSH
42486: LD_VAR 0 7
42490: PPUSH
42491: LD_INT 1
42493: PPUSH
42494: LD_VAR 0 14
42498: PPUSH
42499: CALL_OW 2
42503: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42504: LD_VAR 0 14
42508: PPUSH
42509: LD_VAR 0 1
42513: PPUSH
42514: CALL_OW 250
42518: PPUSH
42519: LD_VAR 0 1
42523: PPUSH
42524: CALL_OW 251
42528: PPUSH
42529: LD_INT 10
42531: PPUSH
42532: LD_INT 0
42534: PPUSH
42535: CALL_OW 50
// continue ;
42539: GO 42440
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42541: LD_VAR 0 12
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: PPUSH
42550: CALL_OW 313
42554: PUSH
42555: LD_VAR 0 12
42559: PUSH
42560: LD_INT 1
42562: ARRAY
42563: PPUSH
42564: CALL_OW 266
42568: PUSH
42569: LD_INT 32
42571: PUSH
42572: LD_INT 31
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: IN
42579: AND
42580: PUSH
42581: LD_VAR 0 12
42585: PUSH
42586: LD_INT 1
42588: ARRAY
42589: PPUSH
42590: CALL_OW 313
42594: PUSH
42595: LD_INT 6
42597: EQUAL
42598: OR
42599: IFFALSE 42619
// f := Delete ( f , 1 ) ;
42601: LD_ADDR_VAR 0 12
42605: PUSH
42606: LD_VAR 0 12
42610: PPUSH
42611: LD_INT 1
42613: PPUSH
42614: CALL_OW 3
42618: ST_TO_ADDR
// if not f then
42619: LD_VAR 0 12
42623: NOT
42624: IFFALSE 42642
// begin x := x + 2 ;
42626: LD_ADDR_VAR 0 13
42630: PUSH
42631: LD_VAR 0 13
42635: PUSH
42636: LD_INT 2
42638: PLUS
42639: ST_TO_ADDR
// continue ;
42640: GO 42440
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42642: LD_VAR 0 12
42646: PUSH
42647: LD_INT 1
42649: ARRAY
42650: PPUSH
42651: CALL_OW 266
42655: PUSH
42656: LD_INT 5
42658: EQUAL
42659: IFFALSE 42733
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42661: LD_VAR 0 12
42665: PUSH
42666: LD_INT 1
42668: ARRAY
42669: PPUSH
42670: CALL_OW 313
42674: PUSH
42675: LD_INT 3
42677: LESS
42678: IFFALSE 42714
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42680: LD_INT 0
42682: PPUSH
42683: LD_INT 5
42685: PUSH
42686: LD_INT 8
42688: PUSH
42689: LD_INT 9
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: PUSH
42697: LD_VAR 0 17
42701: ARRAY
42702: PPUSH
42703: LD_VAR 0 4
42707: PPUSH
42708: CALL_OW 380
42712: GO 42731
// PrepareHuman ( false , i , skill ) ;
42714: LD_INT 0
42716: PPUSH
42717: LD_VAR 0 8
42721: PPUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: CALL_OW 380
// end else
42731: GO 42750
// PrepareHuman ( false , i , skill ) ;
42733: LD_INT 0
42735: PPUSH
42736: LD_VAR 0 8
42740: PPUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: CALL_OW 380
// un := CreateHuman ;
42750: LD_ADDR_VAR 0 14
42754: PUSH
42755: CALL_OW 44
42759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42760: LD_ADDR_VAR 0 7
42764: PUSH
42765: LD_VAR 0 7
42769: PPUSH
42770: LD_INT 1
42772: PPUSH
42773: LD_VAR 0 14
42777: PPUSH
42778: CALL_OW 2
42782: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42783: LD_VAR 0 14
42787: PPUSH
42788: LD_VAR 0 12
42792: PUSH
42793: LD_INT 1
42795: ARRAY
42796: PPUSH
42797: CALL_OW 52
// end ;
42801: GO 42440
42803: POP
42804: POP
// end ;
42805: GO 41742
42807: POP
42808: POP
// result := result ^ buildings ;
42809: LD_ADDR_VAR 0 7
42813: PUSH
42814: LD_VAR 0 7
42818: PUSH
42819: LD_VAR 0 18
42823: ADD
42824: ST_TO_ADDR
// end else
42825: GO 42968
// begin for i = 1 to personel do
42827: LD_ADDR_VAR 0 8
42831: PUSH
42832: DOUBLE
42833: LD_INT 1
42835: DEC
42836: ST_TO_ADDR
42837: LD_VAR 0 6
42841: PUSH
42842: FOR_TO
42843: IFFALSE 42966
// begin if i > 4 then
42845: LD_VAR 0 8
42849: PUSH
42850: LD_INT 4
42852: GREATER
42853: IFFALSE 42857
// break ;
42855: GO 42966
// x := personel [ i ] ;
42857: LD_ADDR_VAR 0 13
42861: PUSH
42862: LD_VAR 0 6
42866: PUSH
42867: LD_VAR 0 8
42871: ARRAY
42872: ST_TO_ADDR
// if x = - 1 then
42873: LD_VAR 0 13
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: EQUAL
42882: IFFALSE 42886
// continue ;
42884: GO 42842
// PrepareHuman ( false , i , skill ) ;
42886: LD_INT 0
42888: PPUSH
42889: LD_VAR 0 8
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: CALL_OW 380
// un := CreateHuman ;
42903: LD_ADDR_VAR 0 14
42907: PUSH
42908: CALL_OW 44
42912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42913: LD_VAR 0 14
42917: PPUSH
42918: LD_VAR 0 1
42922: PPUSH
42923: CALL_OW 250
42927: PPUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 251
42937: PPUSH
42938: LD_INT 10
42940: PPUSH
42941: LD_INT 0
42943: PPUSH
42944: CALL_OW 50
// result := result ^ un ;
42948: LD_ADDR_VAR 0 7
42952: PUSH
42953: LD_VAR 0 7
42957: PUSH
42958: LD_VAR 0 14
42962: ADD
42963: ST_TO_ADDR
// end ;
42964: GO 42842
42966: POP
42967: POP
// end ; end ;
42968: LD_VAR 0 7
42972: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42973: LD_INT 0
42975: PPUSH
42976: PPUSH
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
// result := false ;
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 0
42998: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42999: LD_VAR 0 1
43003: NOT
43004: PUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 266
43014: PUSH
43015: LD_INT 32
43017: PUSH
43018: LD_INT 33
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: IN
43025: NOT
43026: OR
43027: IFFALSE 43031
// exit ;
43029: GO 44140
// nat := GetNation ( tower ) ;
43031: LD_ADDR_VAR 0 12
43035: PUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: CALL_OW 248
43045: ST_TO_ADDR
// side := GetSide ( tower ) ;
43046: LD_ADDR_VAR 0 16
43050: PUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 255
43060: ST_TO_ADDR
// x := GetX ( tower ) ;
43061: LD_ADDR_VAR 0 10
43065: PUSH
43066: LD_VAR 0 1
43070: PPUSH
43071: CALL_OW 250
43075: ST_TO_ADDR
// y := GetY ( tower ) ;
43076: LD_ADDR_VAR 0 11
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: CALL_OW 251
43090: ST_TO_ADDR
// if not x or not y then
43091: LD_VAR 0 10
43095: NOT
43096: PUSH
43097: LD_VAR 0 11
43101: NOT
43102: OR
43103: IFFALSE 43107
// exit ;
43105: GO 44140
// weapon := 0 ;
43107: LD_ADDR_VAR 0 18
43111: PUSH
43112: LD_INT 0
43114: ST_TO_ADDR
// fac_list := [ ] ;
43115: LD_ADDR_VAR 0 17
43119: PUSH
43120: EMPTY
43121: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43122: LD_ADDR_VAR 0 6
43126: PUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 274
43136: PPUSH
43137: LD_VAR 0 2
43141: PPUSH
43142: LD_INT 0
43144: PPUSH
43145: CALL 40711 0 3
43149: PPUSH
43150: LD_INT 30
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 72
43164: ST_TO_ADDR
// if not factories then
43165: LD_VAR 0 6
43169: NOT
43170: IFFALSE 43174
// exit ;
43172: GO 44140
// for i in factories do
43174: LD_ADDR_VAR 0 8
43178: PUSH
43179: LD_VAR 0 6
43183: PUSH
43184: FOR_IN
43185: IFFALSE 43210
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43187: LD_ADDR_VAR 0 17
43191: PUSH
43192: LD_VAR 0 17
43196: PUSH
43197: LD_VAR 0 8
43201: PPUSH
43202: CALL_OW 478
43206: UNION
43207: ST_TO_ADDR
43208: GO 43184
43210: POP
43211: POP
// if not fac_list then
43212: LD_VAR 0 17
43216: NOT
43217: IFFALSE 43221
// exit ;
43219: GO 44140
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43221: LD_ADDR_VAR 0 5
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 5
43231: PUSH
43232: LD_INT 9
43234: PUSH
43235: LD_INT 10
43237: PUSH
43238: LD_INT 6
43240: PUSH
43241: LD_INT 7
43243: PUSH
43244: LD_INT 11
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 27
43258: PUSH
43259: LD_INT 28
43261: PUSH
43262: LD_INT 26
43264: PUSH
43265: LD_INT 30
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 43
43276: PUSH
43277: LD_INT 44
43279: PUSH
43280: LD_INT 46
43282: PUSH
43283: LD_INT 45
43285: PUSH
43286: LD_INT 47
43288: PUSH
43289: LD_INT 49
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: PUSH
43305: LD_VAR 0 12
43309: ARRAY
43310: ST_TO_ADDR
// list := list isect fac_list ;
43311: LD_ADDR_VAR 0 5
43315: PUSH
43316: LD_VAR 0 5
43320: PUSH
43321: LD_VAR 0 17
43325: ISECT
43326: ST_TO_ADDR
// if not list then
43327: LD_VAR 0 5
43331: NOT
43332: IFFALSE 43336
// exit ;
43334: GO 44140
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43336: LD_VAR 0 12
43340: PUSH
43341: LD_INT 3
43343: EQUAL
43344: PUSH
43345: LD_INT 49
43347: PUSH
43348: LD_VAR 0 5
43352: IN
43353: AND
43354: PUSH
43355: LD_INT 31
43357: PPUSH
43358: LD_VAR 0 16
43362: PPUSH
43363: CALL_OW 321
43367: PUSH
43368: LD_INT 2
43370: EQUAL
43371: AND
43372: IFFALSE 43432
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43374: LD_INT 22
43376: PUSH
43377: LD_VAR 0 16
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 35
43388: PUSH
43389: LD_INT 49
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 91
43398: PUSH
43399: LD_VAR 0 1
43403: PUSH
43404: LD_INT 10
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: PPUSH
43417: CALL_OW 69
43421: NOT
43422: IFFALSE 43432
// weapon := ru_time_lapser ;
43424: LD_ADDR_VAR 0 18
43428: PUSH
43429: LD_INT 49
43431: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43432: LD_VAR 0 12
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: IN
43447: PUSH
43448: LD_INT 11
43450: PUSH
43451: LD_VAR 0 5
43455: IN
43456: PUSH
43457: LD_INT 30
43459: PUSH
43460: LD_VAR 0 5
43464: IN
43465: OR
43466: AND
43467: PUSH
43468: LD_INT 6
43470: PPUSH
43471: LD_VAR 0 16
43475: PPUSH
43476: CALL_OW 321
43480: PUSH
43481: LD_INT 2
43483: EQUAL
43484: AND
43485: IFFALSE 43650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43487: LD_INT 22
43489: PUSH
43490: LD_VAR 0 16
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: LD_INT 35
43504: PUSH
43505: LD_INT 11
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 35
43514: PUSH
43515: LD_INT 30
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 91
43529: PUSH
43530: LD_VAR 0 1
43534: PUSH
43535: LD_INT 18
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: PPUSH
43548: CALL_OW 69
43552: NOT
43553: PUSH
43554: LD_INT 22
43556: PUSH
43557: LD_VAR 0 16
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 30
43571: PUSH
43572: LD_INT 32
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 30
43581: PUSH
43582: LD_INT 33
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 91
43596: PUSH
43597: LD_VAR 0 1
43601: PUSH
43602: LD_INT 12
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PUSH
43615: EMPTY
43616: LIST
43617: PPUSH
43618: CALL_OW 69
43622: PUSH
43623: LD_INT 2
43625: GREATER
43626: AND
43627: IFFALSE 43650
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43629: LD_ADDR_VAR 0 18
43633: PUSH
43634: LD_INT 11
43636: PUSH
43637: LD_INT 30
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_VAR 0 12
43648: ARRAY
43649: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43650: LD_VAR 0 18
43654: NOT
43655: PUSH
43656: LD_INT 40
43658: PPUSH
43659: LD_VAR 0 16
43663: PPUSH
43664: CALL_OW 321
43668: PUSH
43669: LD_INT 2
43671: EQUAL
43672: AND
43673: PUSH
43674: LD_INT 7
43676: PUSH
43677: LD_VAR 0 5
43681: IN
43682: PUSH
43683: LD_INT 28
43685: PUSH
43686: LD_VAR 0 5
43690: IN
43691: OR
43692: PUSH
43693: LD_INT 45
43695: PUSH
43696: LD_VAR 0 5
43700: IN
43701: OR
43702: AND
43703: IFFALSE 43957
// begin hex := GetHexInfo ( x , y ) ;
43705: LD_ADDR_VAR 0 4
43709: PUSH
43710: LD_VAR 0 10
43714: PPUSH
43715: LD_VAR 0 11
43719: PPUSH
43720: CALL_OW 546
43724: ST_TO_ADDR
// if hex [ 1 ] then
43725: LD_VAR 0 4
43729: PUSH
43730: LD_INT 1
43732: ARRAY
43733: IFFALSE 43737
// exit ;
43735: GO 44140
// height := hex [ 2 ] ;
43737: LD_ADDR_VAR 0 15
43741: PUSH
43742: LD_VAR 0 4
43746: PUSH
43747: LD_INT 2
43749: ARRAY
43750: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43751: LD_ADDR_VAR 0 14
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: LD_INT 5
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: ST_TO_ADDR
// for i in tmp do
43774: LD_ADDR_VAR 0 8
43778: PUSH
43779: LD_VAR 0 14
43783: PUSH
43784: FOR_IN
43785: IFFALSE 43955
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43787: LD_ADDR_VAR 0 9
43791: PUSH
43792: LD_VAR 0 10
43796: PPUSH
43797: LD_VAR 0 8
43801: PPUSH
43802: LD_INT 5
43804: PPUSH
43805: CALL_OW 272
43809: PUSH
43810: LD_VAR 0 11
43814: PPUSH
43815: LD_VAR 0 8
43819: PPUSH
43820: LD_INT 5
43822: PPUSH
43823: CALL_OW 273
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43832: LD_VAR 0 9
43836: PUSH
43837: LD_INT 1
43839: ARRAY
43840: PPUSH
43841: LD_VAR 0 9
43845: PUSH
43846: LD_INT 2
43848: ARRAY
43849: PPUSH
43850: CALL_OW 488
43854: IFFALSE 43953
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43856: LD_ADDR_VAR 0 4
43860: PUSH
43861: LD_VAR 0 9
43865: PUSH
43866: LD_INT 1
43868: ARRAY
43869: PPUSH
43870: LD_VAR 0 9
43874: PUSH
43875: LD_INT 2
43877: ARRAY
43878: PPUSH
43879: CALL_OW 546
43883: ST_TO_ADDR
// if hex [ 1 ] then
43884: LD_VAR 0 4
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: IFFALSE 43896
// continue ;
43894: GO 43784
// h := hex [ 2 ] ;
43896: LD_ADDR_VAR 0 13
43900: PUSH
43901: LD_VAR 0 4
43905: PUSH
43906: LD_INT 2
43908: ARRAY
43909: ST_TO_ADDR
// if h + 7 < height then
43910: LD_VAR 0 13
43914: PUSH
43915: LD_INT 7
43917: PLUS
43918: PUSH
43919: LD_VAR 0 15
43923: LESS
43924: IFFALSE 43953
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43926: LD_ADDR_VAR 0 18
43930: PUSH
43931: LD_INT 7
43933: PUSH
43934: LD_INT 28
43936: PUSH
43937: LD_INT 45
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: PUSH
43945: LD_VAR 0 12
43949: ARRAY
43950: ST_TO_ADDR
// break ;
43951: GO 43955
// end ; end ; end ;
43953: GO 43784
43955: POP
43956: POP
// end ; if not weapon then
43957: LD_VAR 0 18
43961: NOT
43962: IFFALSE 44022
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43964: LD_ADDR_VAR 0 5
43968: PUSH
43969: LD_VAR 0 5
43973: PUSH
43974: LD_INT 11
43976: PUSH
43977: LD_INT 30
43979: PUSH
43980: LD_INT 49
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: DIFF
43988: ST_TO_ADDR
// if not list then
43989: LD_VAR 0 5
43993: NOT
43994: IFFALSE 43998
// exit ;
43996: GO 44140
// weapon := list [ rand ( 1 , list ) ] ;
43998: LD_ADDR_VAR 0 18
44002: PUSH
44003: LD_VAR 0 5
44007: PUSH
44008: LD_INT 1
44010: PPUSH
44011: LD_VAR 0 5
44015: PPUSH
44016: CALL_OW 12
44020: ARRAY
44021: ST_TO_ADDR
// end ; if weapon then
44022: LD_VAR 0 18
44026: IFFALSE 44140
// begin tmp := CostOfWeapon ( weapon ) ;
44028: LD_ADDR_VAR 0 14
44032: PUSH
44033: LD_VAR 0 18
44037: PPUSH
44038: CALL_OW 451
44042: ST_TO_ADDR
// j := GetBase ( tower ) ;
44043: LD_ADDR_VAR 0 9
44047: PUSH
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 274
44057: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44058: LD_VAR 0 9
44062: PPUSH
44063: LD_INT 1
44065: PPUSH
44066: CALL_OW 275
44070: PUSH
44071: LD_VAR 0 14
44075: PUSH
44076: LD_INT 1
44078: ARRAY
44079: GREATEREQUAL
44080: PUSH
44081: LD_VAR 0 9
44085: PPUSH
44086: LD_INT 2
44088: PPUSH
44089: CALL_OW 275
44093: PUSH
44094: LD_VAR 0 14
44098: PUSH
44099: LD_INT 2
44101: ARRAY
44102: GREATEREQUAL
44103: AND
44104: PUSH
44105: LD_VAR 0 9
44109: PPUSH
44110: LD_INT 3
44112: PPUSH
44113: CALL_OW 275
44117: PUSH
44118: LD_VAR 0 14
44122: PUSH
44123: LD_INT 3
44125: ARRAY
44126: GREATEREQUAL
44127: AND
44128: IFFALSE 44140
// result := weapon ;
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_VAR 0 18
44139: ST_TO_ADDR
// end ; end ;
44140: LD_VAR 0 3
44144: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44145: LD_INT 0
44147: PPUSH
44148: PPUSH
// result := true ;
44149: LD_ADDR_VAR 0 3
44153: PUSH
44154: LD_INT 1
44156: ST_TO_ADDR
// if array1 = array2 then
44157: LD_VAR 0 1
44161: PUSH
44162: LD_VAR 0 2
44166: EQUAL
44167: IFFALSE 44227
// begin for i = 1 to array1 do
44169: LD_ADDR_VAR 0 4
44173: PUSH
44174: DOUBLE
44175: LD_INT 1
44177: DEC
44178: ST_TO_ADDR
44179: LD_VAR 0 1
44183: PUSH
44184: FOR_TO
44185: IFFALSE 44223
// if array1 [ i ] <> array2 [ i ] then
44187: LD_VAR 0 1
44191: PUSH
44192: LD_VAR 0 4
44196: ARRAY
44197: PUSH
44198: LD_VAR 0 2
44202: PUSH
44203: LD_VAR 0 4
44207: ARRAY
44208: NONEQUAL
44209: IFFALSE 44221
// begin result := false ;
44211: LD_ADDR_VAR 0 3
44215: PUSH
44216: LD_INT 0
44218: ST_TO_ADDR
// break ;
44219: GO 44223
// end ;
44221: GO 44184
44223: POP
44224: POP
// end else
44225: GO 44235
// result := false ;
44227: LD_ADDR_VAR 0 3
44231: PUSH
44232: LD_INT 0
44234: ST_TO_ADDR
// end ;
44235: LD_VAR 0 3
44239: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44240: LD_INT 0
44242: PPUSH
44243: PPUSH
// if not array1 or not array2 then
44244: LD_VAR 0 1
44248: NOT
44249: PUSH
44250: LD_VAR 0 2
44254: NOT
44255: OR
44256: IFFALSE 44260
// exit ;
44258: GO 44324
// result := true ;
44260: LD_ADDR_VAR 0 3
44264: PUSH
44265: LD_INT 1
44267: ST_TO_ADDR
// for i = 1 to array1 do
44268: LD_ADDR_VAR 0 4
44272: PUSH
44273: DOUBLE
44274: LD_INT 1
44276: DEC
44277: ST_TO_ADDR
44278: LD_VAR 0 1
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44322
// if array1 [ i ] <> array2 [ i ] then
44286: LD_VAR 0 1
44290: PUSH
44291: LD_VAR 0 4
44295: ARRAY
44296: PUSH
44297: LD_VAR 0 2
44301: PUSH
44302: LD_VAR 0 4
44306: ARRAY
44307: NONEQUAL
44308: IFFALSE 44320
// begin result := false ;
44310: LD_ADDR_VAR 0 3
44314: PUSH
44315: LD_INT 0
44317: ST_TO_ADDR
// break ;
44318: GO 44322
// end ;
44320: GO 44283
44322: POP
44323: POP
// end ;
44324: LD_VAR 0 3
44328: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44329: LD_INT 0
44331: PPUSH
44332: PPUSH
44333: PPUSH
// pom := GetBase ( fac ) ;
44334: LD_ADDR_VAR 0 5
44338: PUSH
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 274
44348: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44349: LD_ADDR_VAR 0 4
44353: PUSH
44354: LD_VAR 0 2
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: PPUSH
44363: LD_VAR 0 2
44367: PUSH
44368: LD_INT 2
44370: ARRAY
44371: PPUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_INT 3
44379: ARRAY
44380: PPUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_INT 4
44388: ARRAY
44389: PPUSH
44390: CALL_OW 449
44394: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44395: LD_ADDR_VAR 0 3
44399: PUSH
44400: LD_VAR 0 5
44404: PPUSH
44405: LD_INT 1
44407: PPUSH
44408: CALL_OW 275
44412: PUSH
44413: LD_VAR 0 4
44417: PUSH
44418: LD_INT 1
44420: ARRAY
44421: GREATEREQUAL
44422: PUSH
44423: LD_VAR 0 5
44427: PPUSH
44428: LD_INT 2
44430: PPUSH
44431: CALL_OW 275
44435: PUSH
44436: LD_VAR 0 4
44440: PUSH
44441: LD_INT 2
44443: ARRAY
44444: GREATEREQUAL
44445: AND
44446: PUSH
44447: LD_VAR 0 5
44451: PPUSH
44452: LD_INT 3
44454: PPUSH
44455: CALL_OW 275
44459: PUSH
44460: LD_VAR 0 4
44464: PUSH
44465: LD_INT 3
44467: ARRAY
44468: GREATEREQUAL
44469: AND
44470: ST_TO_ADDR
// end ;
44471: LD_VAR 0 3
44475: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44476: LD_INT 0
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
// pom := GetBase ( building ) ;
44482: LD_ADDR_VAR 0 3
44486: PUSH
44487: LD_VAR 0 1
44491: PPUSH
44492: CALL_OW 274
44496: ST_TO_ADDR
// if not pom then
44497: LD_VAR 0 3
44501: NOT
44502: IFFALSE 44506
// exit ;
44504: GO 44676
// btype := GetBType ( building ) ;
44506: LD_ADDR_VAR 0 5
44510: PUSH
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 266
44520: ST_TO_ADDR
// if btype = b_armoury then
44521: LD_VAR 0 5
44525: PUSH
44526: LD_INT 4
44528: EQUAL
44529: IFFALSE 44539
// btype := b_barracks ;
44531: LD_ADDR_VAR 0 5
44535: PUSH
44536: LD_INT 5
44538: ST_TO_ADDR
// if btype = b_depot then
44539: LD_VAR 0 5
44543: PUSH
44544: LD_INT 0
44546: EQUAL
44547: IFFALSE 44557
// btype := b_warehouse ;
44549: LD_ADDR_VAR 0 5
44553: PUSH
44554: LD_INT 1
44556: ST_TO_ADDR
// if btype = b_workshop then
44557: LD_VAR 0 5
44561: PUSH
44562: LD_INT 2
44564: EQUAL
44565: IFFALSE 44575
// btype := b_factory ;
44567: LD_ADDR_VAR 0 5
44571: PUSH
44572: LD_INT 3
44574: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44575: LD_ADDR_VAR 0 4
44579: PUSH
44580: LD_VAR 0 5
44584: PPUSH
44585: LD_VAR 0 1
44589: PPUSH
44590: CALL_OW 248
44594: PPUSH
44595: CALL_OW 450
44599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44600: LD_ADDR_VAR 0 2
44604: PUSH
44605: LD_VAR 0 3
44609: PPUSH
44610: LD_INT 1
44612: PPUSH
44613: CALL_OW 275
44617: PUSH
44618: LD_VAR 0 4
44622: PUSH
44623: LD_INT 1
44625: ARRAY
44626: GREATEREQUAL
44627: PUSH
44628: LD_VAR 0 3
44632: PPUSH
44633: LD_INT 2
44635: PPUSH
44636: CALL_OW 275
44640: PUSH
44641: LD_VAR 0 4
44645: PUSH
44646: LD_INT 2
44648: ARRAY
44649: GREATEREQUAL
44650: AND
44651: PUSH
44652: LD_VAR 0 3
44656: PPUSH
44657: LD_INT 3
44659: PPUSH
44660: CALL_OW 275
44664: PUSH
44665: LD_VAR 0 4
44669: PUSH
44670: LD_INT 3
44672: ARRAY
44673: GREATEREQUAL
44674: AND
44675: ST_TO_ADDR
// end ;
44676: LD_VAR 0 2
44680: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44681: LD_INT 0
44683: PPUSH
44684: PPUSH
44685: PPUSH
// pom := GetBase ( building ) ;
44686: LD_ADDR_VAR 0 4
44690: PUSH
44691: LD_VAR 0 1
44695: PPUSH
44696: CALL_OW 274
44700: ST_TO_ADDR
// if not pom then
44701: LD_VAR 0 4
44705: NOT
44706: IFFALSE 44710
// exit ;
44708: GO 44811
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44710: LD_ADDR_VAR 0 5
44714: PUSH
44715: LD_VAR 0 2
44719: PPUSH
44720: LD_VAR 0 1
44724: PPUSH
44725: CALL_OW 248
44729: PPUSH
44730: CALL_OW 450
44734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44735: LD_ADDR_VAR 0 3
44739: PUSH
44740: LD_VAR 0 4
44744: PPUSH
44745: LD_INT 1
44747: PPUSH
44748: CALL_OW 275
44752: PUSH
44753: LD_VAR 0 5
44757: PUSH
44758: LD_INT 1
44760: ARRAY
44761: GREATEREQUAL
44762: PUSH
44763: LD_VAR 0 4
44767: PPUSH
44768: LD_INT 2
44770: PPUSH
44771: CALL_OW 275
44775: PUSH
44776: LD_VAR 0 5
44780: PUSH
44781: LD_INT 2
44783: ARRAY
44784: GREATEREQUAL
44785: AND
44786: PUSH
44787: LD_VAR 0 4
44791: PPUSH
44792: LD_INT 3
44794: PPUSH
44795: CALL_OW 275
44799: PUSH
44800: LD_VAR 0 5
44804: PUSH
44805: LD_INT 3
44807: ARRAY
44808: GREATEREQUAL
44809: AND
44810: ST_TO_ADDR
// end ;
44811: LD_VAR 0 3
44815: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44816: LD_INT 0
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
// result := false ;
44829: LD_ADDR_VAR 0 8
44833: PUSH
44834: LD_INT 0
44836: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44837: LD_VAR 0 5
44841: NOT
44842: PUSH
44843: LD_VAR 0 1
44847: NOT
44848: OR
44849: PUSH
44850: LD_VAR 0 2
44854: NOT
44855: OR
44856: PUSH
44857: LD_VAR 0 3
44861: NOT
44862: OR
44863: IFFALSE 44867
// exit ;
44865: GO 45681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44867: LD_ADDR_VAR 0 14
44871: PUSH
44872: LD_VAR 0 1
44876: PPUSH
44877: LD_VAR 0 2
44881: PPUSH
44882: LD_VAR 0 3
44886: PPUSH
44887: LD_VAR 0 4
44891: PPUSH
44892: LD_VAR 0 5
44896: PUSH
44897: LD_INT 1
44899: ARRAY
44900: PPUSH
44901: CALL_OW 248
44905: PPUSH
44906: LD_INT 0
44908: PPUSH
44909: CALL 46918 0 6
44913: ST_TO_ADDR
// if not hexes then
44914: LD_VAR 0 14
44918: NOT
44919: IFFALSE 44923
// exit ;
44921: GO 45681
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44923: LD_ADDR_VAR 0 17
44927: PUSH
44928: LD_VAR 0 5
44932: PPUSH
44933: LD_INT 22
44935: PUSH
44936: LD_VAR 0 13
44940: PPUSH
44941: CALL_OW 255
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 30
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 30
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PPUSH
44982: CALL_OW 72
44986: ST_TO_ADDR
// for i = 1 to hexes do
44987: LD_ADDR_VAR 0 9
44991: PUSH
44992: DOUBLE
44993: LD_INT 1
44995: DEC
44996: ST_TO_ADDR
44997: LD_VAR 0 14
45001: PUSH
45002: FOR_TO
45003: IFFALSE 45679
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45005: LD_ADDR_VAR 0 13
45009: PUSH
45010: LD_VAR 0 14
45014: PUSH
45015: LD_VAR 0 9
45019: ARRAY
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: PPUSH
45025: LD_VAR 0 14
45029: PUSH
45030: LD_VAR 0 9
45034: ARRAY
45035: PUSH
45036: LD_INT 2
45038: ARRAY
45039: PPUSH
45040: CALL_OW 428
45044: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45045: LD_VAR 0 14
45049: PUSH
45050: LD_VAR 0 9
45054: ARRAY
45055: PUSH
45056: LD_INT 1
45058: ARRAY
45059: PPUSH
45060: LD_VAR 0 14
45064: PUSH
45065: LD_VAR 0 9
45069: ARRAY
45070: PUSH
45071: LD_INT 2
45073: ARRAY
45074: PPUSH
45075: CALL_OW 351
45079: PUSH
45080: LD_VAR 0 14
45084: PUSH
45085: LD_VAR 0 9
45089: ARRAY
45090: PUSH
45091: LD_INT 1
45093: ARRAY
45094: PPUSH
45095: LD_VAR 0 14
45099: PUSH
45100: LD_VAR 0 9
45104: ARRAY
45105: PUSH
45106: LD_INT 2
45108: ARRAY
45109: PPUSH
45110: CALL_OW 488
45114: NOT
45115: OR
45116: PUSH
45117: LD_VAR 0 13
45121: PPUSH
45122: CALL_OW 247
45126: PUSH
45127: LD_INT 3
45129: EQUAL
45130: OR
45131: IFFALSE 45137
// exit ;
45133: POP
45134: POP
45135: GO 45681
// if not tmp then
45137: LD_VAR 0 13
45141: NOT
45142: IFFALSE 45146
// continue ;
45144: GO 45002
// result := true ;
45146: LD_ADDR_VAR 0 8
45150: PUSH
45151: LD_INT 1
45153: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45154: LD_VAR 0 6
45158: PUSH
45159: LD_VAR 0 13
45163: PPUSH
45164: CALL_OW 247
45168: PUSH
45169: LD_INT 2
45171: EQUAL
45172: AND
45173: PUSH
45174: LD_VAR 0 13
45178: PPUSH
45179: CALL_OW 263
45183: PUSH
45184: LD_INT 1
45186: EQUAL
45187: AND
45188: IFFALSE 45352
// begin if IsDrivenBy ( tmp ) then
45190: LD_VAR 0 13
45194: PPUSH
45195: CALL_OW 311
45199: IFFALSE 45203
// continue ;
45201: GO 45002
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45203: LD_VAR 0 6
45207: PPUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 60
45213: PUSH
45214: EMPTY
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 55
45226: PUSH
45227: EMPTY
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PPUSH
45238: CALL_OW 72
45242: IFFALSE 45350
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45244: LD_ADDR_VAR 0 18
45248: PUSH
45249: LD_VAR 0 6
45253: PPUSH
45254: LD_INT 3
45256: PUSH
45257: LD_INT 60
45259: PUSH
45260: EMPTY
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 55
45272: PUSH
45273: EMPTY
45274: LIST
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PPUSH
45284: CALL_OW 72
45288: PUSH
45289: LD_INT 1
45291: ARRAY
45292: ST_TO_ADDR
// if IsInUnit ( driver ) then
45293: LD_VAR 0 18
45297: PPUSH
45298: CALL_OW 310
45302: IFFALSE 45313
// ComExit ( driver ) ;
45304: LD_VAR 0 18
45308: PPUSH
45309: CALL 70465 0 1
// AddComEnterUnit ( driver , tmp ) ;
45313: LD_VAR 0 18
45317: PPUSH
45318: LD_VAR 0 13
45322: PPUSH
45323: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45327: LD_VAR 0 18
45331: PPUSH
45332: LD_VAR 0 7
45336: PPUSH
45337: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45341: LD_VAR 0 18
45345: PPUSH
45346: CALL_OW 181
// end ; continue ;
45350: GO 45002
// end ; if not cleaners or not tmp in cleaners then
45352: LD_VAR 0 6
45356: NOT
45357: PUSH
45358: LD_VAR 0 13
45362: PUSH
45363: LD_VAR 0 6
45367: IN
45368: NOT
45369: OR
45370: IFFALSE 45677
// begin if dep then
45372: LD_VAR 0 17
45376: IFFALSE 45512
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45378: LD_ADDR_VAR 0 16
45382: PUSH
45383: LD_VAR 0 17
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PPUSH
45392: CALL_OW 250
45396: PPUSH
45397: LD_VAR 0 17
45401: PUSH
45402: LD_INT 1
45404: ARRAY
45405: PPUSH
45406: CALL_OW 254
45410: PPUSH
45411: LD_INT 5
45413: PPUSH
45414: CALL_OW 272
45418: PUSH
45419: LD_VAR 0 17
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PPUSH
45428: CALL_OW 251
45432: PPUSH
45433: LD_VAR 0 17
45437: PUSH
45438: LD_INT 1
45440: ARRAY
45441: PPUSH
45442: CALL_OW 254
45446: PPUSH
45447: LD_INT 5
45449: PPUSH
45450: CALL_OW 273
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45459: LD_VAR 0 16
45463: PUSH
45464: LD_INT 1
45466: ARRAY
45467: PPUSH
45468: LD_VAR 0 16
45472: PUSH
45473: LD_INT 2
45475: ARRAY
45476: PPUSH
45477: CALL_OW 488
45481: IFFALSE 45512
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45483: LD_VAR 0 13
45487: PPUSH
45488: LD_VAR 0 16
45492: PUSH
45493: LD_INT 1
45495: ARRAY
45496: PPUSH
45497: LD_VAR 0 16
45501: PUSH
45502: LD_INT 2
45504: ARRAY
45505: PPUSH
45506: CALL_OW 111
// continue ;
45510: GO 45002
// end ; end ; r := GetDir ( tmp ) ;
45512: LD_ADDR_VAR 0 15
45516: PUSH
45517: LD_VAR 0 13
45521: PPUSH
45522: CALL_OW 254
45526: ST_TO_ADDR
// if r = 5 then
45527: LD_VAR 0 15
45531: PUSH
45532: LD_INT 5
45534: EQUAL
45535: IFFALSE 45545
// r := 0 ;
45537: LD_ADDR_VAR 0 15
45541: PUSH
45542: LD_INT 0
45544: ST_TO_ADDR
// for j = r to 5 do
45545: LD_ADDR_VAR 0 10
45549: PUSH
45550: DOUBLE
45551: LD_VAR 0 15
45555: DEC
45556: ST_TO_ADDR
45557: LD_INT 5
45559: PUSH
45560: FOR_TO
45561: IFFALSE 45675
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45563: LD_ADDR_VAR 0 11
45567: PUSH
45568: LD_VAR 0 13
45572: PPUSH
45573: CALL_OW 250
45577: PPUSH
45578: LD_VAR 0 10
45582: PPUSH
45583: LD_INT 2
45585: PPUSH
45586: CALL_OW 272
45590: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45591: LD_ADDR_VAR 0 12
45595: PUSH
45596: LD_VAR 0 13
45600: PPUSH
45601: CALL_OW 251
45605: PPUSH
45606: LD_VAR 0 10
45610: PPUSH
45611: LD_INT 2
45613: PPUSH
45614: CALL_OW 273
45618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45619: LD_VAR 0 11
45623: PPUSH
45624: LD_VAR 0 12
45628: PPUSH
45629: CALL_OW 488
45633: PUSH
45634: LD_VAR 0 11
45638: PPUSH
45639: LD_VAR 0 12
45643: PPUSH
45644: CALL_OW 428
45648: NOT
45649: AND
45650: IFFALSE 45673
// begin ComMoveXY ( tmp , _x , _y ) ;
45652: LD_VAR 0 13
45656: PPUSH
45657: LD_VAR 0 11
45661: PPUSH
45662: LD_VAR 0 12
45666: PPUSH
45667: CALL_OW 111
// break ;
45671: GO 45675
// end ; end ;
45673: GO 45560
45675: POP
45676: POP
// end ; end ;
45677: GO 45002
45679: POP
45680: POP
// end ;
45681: LD_VAR 0 8
45685: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45686: LD_INT 0
45688: PPUSH
// result := true ;
45689: LD_ADDR_VAR 0 3
45693: PUSH
45694: LD_INT 1
45696: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45697: LD_VAR 0 2
45701: PUSH
45702: LD_INT 24
45704: DOUBLE
45705: EQUAL
45706: IFTRUE 45716
45708: LD_INT 33
45710: DOUBLE
45711: EQUAL
45712: IFTRUE 45716
45714: GO 45741
45716: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45717: LD_ADDR_VAR 0 3
45721: PUSH
45722: LD_INT 32
45724: PPUSH
45725: LD_VAR 0 1
45729: PPUSH
45730: CALL_OW 321
45734: PUSH
45735: LD_INT 2
45737: EQUAL
45738: ST_TO_ADDR
45739: GO 46061
45741: LD_INT 20
45743: DOUBLE
45744: EQUAL
45745: IFTRUE 45749
45747: GO 45774
45749: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45750: LD_ADDR_VAR 0 3
45754: PUSH
45755: LD_INT 6
45757: PPUSH
45758: LD_VAR 0 1
45762: PPUSH
45763: CALL_OW 321
45767: PUSH
45768: LD_INT 2
45770: EQUAL
45771: ST_TO_ADDR
45772: GO 46061
45774: LD_INT 22
45776: DOUBLE
45777: EQUAL
45778: IFTRUE 45788
45780: LD_INT 36
45782: DOUBLE
45783: EQUAL
45784: IFTRUE 45788
45786: GO 45813
45788: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45789: LD_ADDR_VAR 0 3
45793: PUSH
45794: LD_INT 15
45796: PPUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL_OW 321
45806: PUSH
45807: LD_INT 2
45809: EQUAL
45810: ST_TO_ADDR
45811: GO 46061
45813: LD_INT 30
45815: DOUBLE
45816: EQUAL
45817: IFTRUE 45821
45819: GO 45846
45821: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45822: LD_ADDR_VAR 0 3
45826: PUSH
45827: LD_INT 20
45829: PPUSH
45830: LD_VAR 0 1
45834: PPUSH
45835: CALL_OW 321
45839: PUSH
45840: LD_INT 2
45842: EQUAL
45843: ST_TO_ADDR
45844: GO 46061
45846: LD_INT 28
45848: DOUBLE
45849: EQUAL
45850: IFTRUE 45860
45852: LD_INT 21
45854: DOUBLE
45855: EQUAL
45856: IFTRUE 45860
45858: GO 45885
45860: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45861: LD_ADDR_VAR 0 3
45865: PUSH
45866: LD_INT 21
45868: PPUSH
45869: LD_VAR 0 1
45873: PPUSH
45874: CALL_OW 321
45878: PUSH
45879: LD_INT 2
45881: EQUAL
45882: ST_TO_ADDR
45883: GO 46061
45885: LD_INT 16
45887: DOUBLE
45888: EQUAL
45889: IFTRUE 45893
45891: GO 45920
45893: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_EXP 45
45903: PPUSH
45904: LD_VAR 0 1
45908: PPUSH
45909: CALL_OW 321
45913: PUSH
45914: LD_INT 2
45916: EQUAL
45917: ST_TO_ADDR
45918: GO 46061
45920: LD_INT 19
45922: DOUBLE
45923: EQUAL
45924: IFTRUE 45934
45926: LD_INT 23
45928: DOUBLE
45929: EQUAL
45930: IFTRUE 45934
45932: GO 45961
45934: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45935: LD_ADDR_VAR 0 3
45939: PUSH
45940: LD_EXP 44
45944: PPUSH
45945: LD_VAR 0 1
45949: PPUSH
45950: CALL_OW 321
45954: PUSH
45955: LD_INT 2
45957: EQUAL
45958: ST_TO_ADDR
45959: GO 46061
45961: LD_INT 17
45963: DOUBLE
45964: EQUAL
45965: IFTRUE 45969
45967: GO 45994
45969: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45970: LD_ADDR_VAR 0 3
45974: PUSH
45975: LD_INT 39
45977: PPUSH
45978: LD_VAR 0 1
45982: PPUSH
45983: CALL_OW 321
45987: PUSH
45988: LD_INT 2
45990: EQUAL
45991: ST_TO_ADDR
45992: GO 46061
45994: LD_INT 18
45996: DOUBLE
45997: EQUAL
45998: IFTRUE 46002
46000: GO 46027
46002: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46003: LD_ADDR_VAR 0 3
46007: PUSH
46008: LD_INT 40
46010: PPUSH
46011: LD_VAR 0 1
46015: PPUSH
46016: CALL_OW 321
46020: PUSH
46021: LD_INT 2
46023: EQUAL
46024: ST_TO_ADDR
46025: GO 46061
46027: LD_INT 27
46029: DOUBLE
46030: EQUAL
46031: IFTRUE 46035
46033: GO 46060
46035: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46036: LD_ADDR_VAR 0 3
46040: PUSH
46041: LD_INT 35
46043: PPUSH
46044: LD_VAR 0 1
46048: PPUSH
46049: CALL_OW 321
46053: PUSH
46054: LD_INT 2
46056: EQUAL
46057: ST_TO_ADDR
46058: GO 46061
46060: POP
// end ;
46061: LD_VAR 0 3
46065: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46066: LD_INT 0
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
// result := false ;
46079: LD_ADDR_VAR 0 6
46083: PUSH
46084: LD_INT 0
46086: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46087: LD_VAR 0 1
46091: NOT
46092: PUSH
46093: LD_VAR 0 1
46097: PPUSH
46098: CALL_OW 266
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: IN
46113: NOT
46114: OR
46115: PUSH
46116: LD_VAR 0 2
46120: NOT
46121: OR
46122: PUSH
46123: LD_VAR 0 5
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: LD_INT 4
46142: PUSH
46143: LD_INT 5
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: IN
46154: NOT
46155: OR
46156: PUSH
46157: LD_VAR 0 3
46161: PPUSH
46162: LD_VAR 0 4
46166: PPUSH
46167: CALL_OW 488
46171: NOT
46172: OR
46173: IFFALSE 46177
// exit ;
46175: GO 46913
// side := GetSide ( depot ) ;
46177: LD_ADDR_VAR 0 9
46181: PUSH
46182: LD_VAR 0 1
46186: PPUSH
46187: CALL_OW 255
46191: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46192: LD_VAR 0 9
46196: PPUSH
46197: LD_VAR 0 2
46201: PPUSH
46202: CALL 45686 0 2
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 46913
// pom := GetBase ( depot ) ;
46211: LD_ADDR_VAR 0 10
46215: PUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: CALL_OW 274
46225: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46226: LD_ADDR_VAR 0 11
46230: PUSH
46231: LD_VAR 0 2
46235: PPUSH
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 248
46245: PPUSH
46246: CALL_OW 450
46250: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46251: LD_VAR 0 10
46255: PPUSH
46256: LD_INT 1
46258: PPUSH
46259: CALL_OW 275
46263: PUSH
46264: LD_VAR 0 11
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: GREATEREQUAL
46273: PUSH
46274: LD_VAR 0 10
46278: PPUSH
46279: LD_INT 2
46281: PPUSH
46282: CALL_OW 275
46286: PUSH
46287: LD_VAR 0 11
46291: PUSH
46292: LD_INT 2
46294: ARRAY
46295: GREATEREQUAL
46296: AND
46297: PUSH
46298: LD_VAR 0 10
46302: PPUSH
46303: LD_INT 3
46305: PPUSH
46306: CALL_OW 275
46310: PUSH
46311: LD_VAR 0 11
46315: PUSH
46316: LD_INT 3
46318: ARRAY
46319: GREATEREQUAL
46320: AND
46321: NOT
46322: IFFALSE 46326
// exit ;
46324: GO 46913
// if GetBType ( depot ) = b_depot then
46326: LD_VAR 0 1
46330: PPUSH
46331: CALL_OW 266
46335: PUSH
46336: LD_INT 0
46338: EQUAL
46339: IFFALSE 46351
// dist := 28 else
46341: LD_ADDR_VAR 0 14
46345: PUSH
46346: LD_INT 28
46348: ST_TO_ADDR
46349: GO 46359
// dist := 36 ;
46351: LD_ADDR_VAR 0 14
46355: PUSH
46356: LD_INT 36
46358: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46359: LD_VAR 0 1
46363: PPUSH
46364: LD_VAR 0 3
46368: PPUSH
46369: LD_VAR 0 4
46373: PPUSH
46374: CALL_OW 297
46378: PUSH
46379: LD_VAR 0 14
46383: GREATER
46384: IFFALSE 46388
// exit ;
46386: GO 46913
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46388: LD_ADDR_VAR 0 12
46392: PUSH
46393: LD_VAR 0 2
46397: PPUSH
46398: LD_VAR 0 3
46402: PPUSH
46403: LD_VAR 0 4
46407: PPUSH
46408: LD_VAR 0 5
46412: PPUSH
46413: LD_VAR 0 1
46417: PPUSH
46418: CALL_OW 248
46422: PPUSH
46423: LD_INT 0
46425: PPUSH
46426: CALL 46918 0 6
46430: ST_TO_ADDR
// if not hexes then
46431: LD_VAR 0 12
46435: NOT
46436: IFFALSE 46440
// exit ;
46438: GO 46913
// hex := GetHexInfo ( x , y ) ;
46440: LD_ADDR_VAR 0 15
46444: PUSH
46445: LD_VAR 0 3
46449: PPUSH
46450: LD_VAR 0 4
46454: PPUSH
46455: CALL_OW 546
46459: ST_TO_ADDR
// if hex [ 1 ] then
46460: LD_VAR 0 15
46464: PUSH
46465: LD_INT 1
46467: ARRAY
46468: IFFALSE 46472
// exit ;
46470: GO 46913
// height := hex [ 2 ] ;
46472: LD_ADDR_VAR 0 13
46476: PUSH
46477: LD_VAR 0 15
46481: PUSH
46482: LD_INT 2
46484: ARRAY
46485: ST_TO_ADDR
// for i = 1 to hexes do
46486: LD_ADDR_VAR 0 7
46490: PUSH
46491: DOUBLE
46492: LD_INT 1
46494: DEC
46495: ST_TO_ADDR
46496: LD_VAR 0 12
46500: PUSH
46501: FOR_TO
46502: IFFALSE 46832
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46504: LD_VAR 0 12
46508: PUSH
46509: LD_VAR 0 7
46513: ARRAY
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: PPUSH
46519: LD_VAR 0 12
46523: PUSH
46524: LD_VAR 0 7
46528: ARRAY
46529: PUSH
46530: LD_INT 2
46532: ARRAY
46533: PPUSH
46534: CALL_OW 488
46538: NOT
46539: PUSH
46540: LD_VAR 0 12
46544: PUSH
46545: LD_VAR 0 7
46549: ARRAY
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: PPUSH
46555: LD_VAR 0 12
46559: PUSH
46560: LD_VAR 0 7
46564: ARRAY
46565: PUSH
46566: LD_INT 2
46568: ARRAY
46569: PPUSH
46570: CALL_OW 428
46574: PUSH
46575: LD_INT 0
46577: GREATER
46578: OR
46579: PUSH
46580: LD_VAR 0 12
46584: PUSH
46585: LD_VAR 0 7
46589: ARRAY
46590: PUSH
46591: LD_INT 1
46593: ARRAY
46594: PPUSH
46595: LD_VAR 0 12
46599: PUSH
46600: LD_VAR 0 7
46604: ARRAY
46605: PUSH
46606: LD_INT 2
46608: ARRAY
46609: PPUSH
46610: CALL_OW 351
46614: OR
46615: IFFALSE 46621
// exit ;
46617: POP
46618: POP
46619: GO 46913
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46621: LD_ADDR_VAR 0 8
46625: PUSH
46626: LD_VAR 0 12
46630: PUSH
46631: LD_VAR 0 7
46635: ARRAY
46636: PUSH
46637: LD_INT 1
46639: ARRAY
46640: PPUSH
46641: LD_VAR 0 12
46645: PUSH
46646: LD_VAR 0 7
46650: ARRAY
46651: PUSH
46652: LD_INT 2
46654: ARRAY
46655: PPUSH
46656: CALL_OW 546
46660: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46661: LD_VAR 0 8
46665: PUSH
46666: LD_INT 1
46668: ARRAY
46669: PUSH
46670: LD_VAR 0 8
46674: PUSH
46675: LD_INT 2
46677: ARRAY
46678: PUSH
46679: LD_VAR 0 13
46683: PUSH
46684: LD_INT 2
46686: PLUS
46687: GREATER
46688: OR
46689: PUSH
46690: LD_VAR 0 8
46694: PUSH
46695: LD_INT 2
46697: ARRAY
46698: PUSH
46699: LD_VAR 0 13
46703: PUSH
46704: LD_INT 2
46706: MINUS
46707: LESS
46708: OR
46709: PUSH
46710: LD_VAR 0 8
46714: PUSH
46715: LD_INT 3
46717: ARRAY
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 8
46724: PUSH
46725: LD_INT 9
46727: PUSH
46728: LD_INT 10
46730: PUSH
46731: LD_INT 11
46733: PUSH
46734: LD_INT 12
46736: PUSH
46737: LD_INT 13
46739: PUSH
46740: LD_INT 16
46742: PUSH
46743: LD_INT 17
46745: PUSH
46746: LD_INT 18
46748: PUSH
46749: LD_INT 19
46751: PUSH
46752: LD_INT 20
46754: PUSH
46755: LD_INT 21
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: IN
46773: NOT
46774: OR
46775: PUSH
46776: LD_VAR 0 8
46780: PUSH
46781: LD_INT 5
46783: ARRAY
46784: NOT
46785: OR
46786: PUSH
46787: LD_VAR 0 8
46791: PUSH
46792: LD_INT 6
46794: ARRAY
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 7
46804: PUSH
46805: LD_INT 9
46807: PUSH
46808: LD_INT 10
46810: PUSH
46811: LD_INT 11
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: IN
46822: NOT
46823: OR
46824: IFFALSE 46830
// exit ;
46826: POP
46827: POP
46828: GO 46913
// end ;
46830: GO 46501
46832: POP
46833: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46834: LD_VAR 0 9
46838: PPUSH
46839: LD_VAR 0 3
46843: PPUSH
46844: LD_VAR 0 4
46848: PPUSH
46849: LD_INT 20
46851: PPUSH
46852: CALL 38859 0 4
46856: PUSH
46857: LD_INT 4
46859: ARRAY
46860: IFFALSE 46864
// exit ;
46862: GO 46913
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46864: LD_VAR 0 2
46868: PUSH
46869: LD_INT 29
46871: PUSH
46872: LD_INT 30
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: IN
46879: PUSH
46880: LD_VAR 0 3
46884: PPUSH
46885: LD_VAR 0 4
46889: PPUSH
46890: LD_VAR 0 9
46894: PPUSH
46895: CALL_OW 440
46899: NOT
46900: AND
46901: IFFALSE 46905
// exit ;
46903: GO 46913
// result := true ;
46905: LD_ADDR_VAR 0 6
46909: PUSH
46910: LD_INT 1
46912: ST_TO_ADDR
// end ;
46913: LD_VAR 0 6
46917: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46918: LD_INT 0
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
// result = [ ] ;
46978: LD_ADDR_VAR 0 7
46982: PUSH
46983: EMPTY
46984: ST_TO_ADDR
// temp_list = [ ] ;
46985: LD_ADDR_VAR 0 9
46989: PUSH
46990: EMPTY
46991: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46992: LD_VAR 0 4
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: LD_INT 4
47011: PUSH
47012: LD_INT 5
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: IN
47023: NOT
47024: PUSH
47025: LD_VAR 0 1
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: IN
47040: PUSH
47041: LD_VAR 0 5
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: IN
47060: NOT
47061: AND
47062: OR
47063: IFFALSE 47067
// exit ;
47065: GO 65458
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47067: LD_VAR 0 1
47071: PUSH
47072: LD_INT 6
47074: PUSH
47075: LD_INT 7
47077: PUSH
47078: LD_INT 8
47080: PUSH
47081: LD_INT 13
47083: PUSH
47084: LD_INT 12
47086: PUSH
47087: LD_INT 15
47089: PUSH
47090: LD_INT 11
47092: PUSH
47093: LD_INT 14
47095: PUSH
47096: LD_INT 10
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: IN
47110: IFFALSE 47120
// btype = b_lab ;
47112: LD_ADDR_VAR 0 1
47116: PUSH
47117: LD_INT 6
47119: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47120: LD_VAR 0 6
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: IN
47139: NOT
47140: PUSH
47141: LD_VAR 0 1
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 6
47160: PUSH
47161: LD_INT 36
47163: PUSH
47164: LD_INT 4
47166: PUSH
47167: LD_INT 5
47169: PUSH
47170: LD_INT 31
47172: PUSH
47173: LD_INT 32
47175: PUSH
47176: LD_INT 33
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: IN
47192: NOT
47193: PUSH
47194: LD_VAR 0 6
47198: PUSH
47199: LD_INT 1
47201: EQUAL
47202: AND
47203: OR
47204: PUSH
47205: LD_VAR 0 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: IN
47220: NOT
47221: PUSH
47222: LD_VAR 0 6
47226: PUSH
47227: LD_INT 2
47229: EQUAL
47230: AND
47231: OR
47232: IFFALSE 47242
// mode = 0 ;
47234: LD_ADDR_VAR 0 6
47238: PUSH
47239: LD_INT 0
47241: ST_TO_ADDR
// case mode of 0 :
47242: LD_VAR 0 6
47246: PUSH
47247: LD_INT 0
47249: DOUBLE
47250: EQUAL
47251: IFTRUE 47255
47253: GO 58708
47255: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47256: LD_ADDR_VAR 0 11
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 3
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47449: LD_ADDR_VAR 0 12
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 3
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47645: LD_ADDR_VAR 0 13
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: NEG
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47844: LD_ADDR_VAR 0 14
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 3
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48040: LD_ADDR_VAR 0 15
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48233: LD_ADDR_VAR 0 16
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48426: LD_ADDR_VAR 0 17
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48656: LD_ADDR_VAR 0 18
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48886: LD_ADDR_VAR 0 19
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49116: LD_ADDR_VAR 0 20
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49346: LD_ADDR_VAR 0 21
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49576: LD_ADDR_VAR 0 22
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49806: LD_ADDR_VAR 0 23
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50086: LD_ADDR_VAR 0 24
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 3
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50362: LD_ADDR_VAR 0 25
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50636: LD_ADDR_VAR 0 26
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50912: LD_ADDR_VAR 0 27
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51192: LD_ADDR_VAR 0 28
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 2
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51474: LD_ADDR_VAR 0 29
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51753: LD_ADDR_VAR 0 30
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52031: LD_ADDR_VAR 0 31
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52309: LD_ADDR_VAR 0 32
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52587: LD_ADDR_VAR 0 33
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52866: LD_ADDR_VAR 0 34
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53146: LD_ADDR_VAR 0 35
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53258: LD_ADDR_VAR 0 36
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53370: LD_ADDR_VAR 0 37
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53482: LD_ADDR_VAR 0 38
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53594: LD_ADDR_VAR 0 39
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53706: LD_ADDR_VAR 0 40
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53818: LD_ADDR_VAR 0 41
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 3
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54168: LD_ADDR_VAR 0 42
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54518: LD_ADDR_VAR 0 43
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 3
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54866: LD_ADDR_VAR 0 44
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55216: LD_ADDR_VAR 0 45
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55566: LD_ADDR_VAR 0 46
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: NEG
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55914: LD_ADDR_VAR 0 47
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56065: LD_ADDR_VAR 0 48
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56212: LD_ADDR_VAR 0 49
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56356: LD_ADDR_VAR 0 50
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56500: LD_ADDR_VAR 0 51
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56647: LD_ADDR_VAR 0 52
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56798: LD_ADDR_VAR 0 53
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57028: LD_ADDR_VAR 0 54
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57258: LD_ADDR_VAR 0 55
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57488: LD_ADDR_VAR 0 56
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57718: LD_ADDR_VAR 0 57
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57948: LD_ADDR_VAR 0 58
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 2
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58178: LD_ADDR_VAR 0 59
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58266: LD_ADDR_VAR 0 60
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58354: LD_ADDR_VAR 0 61
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58442: LD_ADDR_VAR 0 62
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58530: LD_ADDR_VAR 0 63
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58618: LD_ADDR_VAR 0 64
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: ST_TO_ADDR
// end ; 1 :
58706: GO 64603
58708: LD_INT 1
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 61339
58716: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58717: LD_ADDR_VAR 0 11
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 3
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 3
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58761: LD_ADDR_VAR 0 12
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: LIST
58801: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58802: LD_ADDR_VAR 0 13
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58842: LD_ADDR_VAR 0 14
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58883: LD_ADDR_VAR 0 15
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58927: LD_ADDR_VAR 0 16
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 3
58946: NEG
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58973: LD_ADDR_VAR 0 17
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59017: LD_ADDR_VAR 0 18
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: LIST
59057: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59058: LD_ADDR_VAR 0 19
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59098: LD_ADDR_VAR 0 20
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59139: LD_ADDR_VAR 0 21
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59183: LD_ADDR_VAR 0 22
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59229: LD_ADDR_VAR 0 23
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59273: LD_ADDR_VAR 0 24
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59314: LD_ADDR_VAR 0 25
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 4
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59354: LD_ADDR_VAR 0 26
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 4
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 27
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 4
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59439: LD_ADDR_VAR 0 28
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59485: LD_ADDR_VAR 0 29
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 4
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 4
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 5
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 6
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 6
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 5
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59640: LD_ADDR_VAR 0 30
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 5
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 6
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 6
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59783: LD_ADDR_VAR 0 31
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 4
59830: PUSH
59831: LD_INT 4
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 5
59850: PUSH
59851: LD_INT 4
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 5
59860: PUSH
59861: LD_INT 5
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: PUSH
59871: LD_INT 5
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 6
59880: PUSH
59881: LD_INT 5
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 6
59890: PUSH
59891: LD_INT 6
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 5
59900: PUSH
59901: LD_INT 6
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59922: LD_ADDR_VAR 0 32
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 4
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 5
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 5
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 4
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 6
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 6
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 5
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60065: LD_ADDR_VAR 0 33
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: NEG
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 4
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 4
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 5
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 5
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 5
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 6
60185: NEG
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 6
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60220: LD_ADDR_VAR 0 34
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: NEG
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: NEG
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: LD_INT 5
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 5
60335: NEG
60336: PUSH
60337: LD_INT 6
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 6
60347: NEG
60348: PUSH
60349: LD_INT 5
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 6
60359: NEG
60360: PUSH
60361: LD_INT 6
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60383: LD_ADDR_VAR 0 41
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: LIST
60426: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60427: LD_ADDR_VAR 0 42
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60468: LD_ADDR_VAR 0 43
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60508: LD_ADDR_VAR 0 44
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60549: LD_ADDR_VAR 0 45
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60593: LD_ADDR_VAR 0 46
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60639: LD_ADDR_VAR 0 47
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60672: LD_ADDR_VAR 0 48
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60703: LD_ADDR_VAR 0 49
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60732: LD_ADDR_VAR 0 50
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60761: LD_ADDR_VAR 0 51
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60792: LD_ADDR_VAR 0 52
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60825: LD_ADDR_VAR 0 53
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60869: LD_ADDR_VAR 0 54
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60910: LD_ADDR_VAR 0 55
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60950: LD_ADDR_VAR 0 56
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60991: LD_ADDR_VAR 0 57
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: LIST
61034: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61035: LD_ADDR_VAR 0 58
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61081: LD_ADDR_VAR 0 59
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61125: LD_ADDR_VAR 0 60
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: LIST
61165: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61166: LD_ADDR_VAR 0 61
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61206: LD_ADDR_VAR 0 62
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61247: LD_ADDR_VAR 0 63
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61291: LD_ADDR_VAR 0 64
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: ST_TO_ADDR
// end ; 2 :
61337: GO 64603
61339: LD_INT 2
61341: DOUBLE
61342: EQUAL
61343: IFTRUE 61347
61345: GO 64602
61347: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61348: LD_ADDR_VAR 0 29
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 5
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 4
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 5
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 4
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: LD_INT 4
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 5
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 4
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 2
61620: NEG
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: NEG
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 4
61687: NEG
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 4
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 4
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 2
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: LD_INT 4
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: LD_INT 5
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 3
61769: NEG
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 4
61781: NEG
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: LD_INT 4
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: LD_INT 5
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61886: LD_ADDR_VAR 0 30
61890: PUSH
61891: LD_INT 4
61893: PUSH
61894: LD_INT 4
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 5
61913: PUSH
61914: LD_INT 4
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 5
61923: PUSH
61924: LD_INT 5
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 4
61933: PUSH
61934: LD_INT 5
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 3
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 4
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 2
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 4
62076: NEG
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 5
62132: NEG
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 5
62143: NEG
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 5
62155: NEG
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 3
62190: NEG
62191: PUSH
62192: LD_INT 4
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 4
62238: NEG
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 4
62250: NEG
62251: PUSH
62252: LD_INT 4
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: LD_INT 4
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 4
62274: NEG
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: LD_INT 4
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: LD_INT 5
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 4
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 3
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 3
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 4
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 5
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 3
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 5
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62433: LD_ADDR_VAR 0 31
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 4
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 4
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 5
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 5
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: LD_INT 5
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 4
62600: NEG
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 4
62612: NEG
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 4
62635: NEG
62636: PUSH
62637: LD_INT 4
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 4
62647: NEG
62648: PUSH
62649: LD_INT 5
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: LD_INT 4
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 3
62671: NEG
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 4
62683: NEG
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 5
62695: NEG
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 5
62707: NEG
62708: PUSH
62709: LD_INT 5
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 5
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 5
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 4
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 3
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 4
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: LD_INT 4
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 4
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 4
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 5
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 5
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 5
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62983: LD_ADDR_VAR 0 32
62987: PUSH
62988: LD_INT 4
62990: NEG
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 4
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 3
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 5
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 5
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 5
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: NEG
63105: PUSH
63106: LD_INT 4
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 2
63116: NEG
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 2
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 4
63152: NEG
63153: PUSH
63154: LD_INT 3
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 4
63164: NEG
63165: PUSH
63166: LD_INT 4
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: LD_INT 4
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 4
63188: NEG
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 4
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 5
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 4
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: LD_INT 4
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 1
63267: NEG
63268: PUSH
63269: LD_INT 5
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 3
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: LD_INT 5
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 3
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 4
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: LD_INT 4
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: PUSH
63416: LD_INT 4
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 5
63425: PUSH
63426: LD_INT 5
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 4
63435: PUSH
63436: LD_INT 5
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: LD_INT 4
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: LD_INT 5
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63530: LD_ADDR_VAR 0 33
63534: PUSH
63535: LD_INT 4
63537: NEG
63538: PUSH
63539: LD_INT 4
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 4
63549: NEG
63550: PUSH
63551: LD_INT 5
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: LD_INT 4
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 3
63573: NEG
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 4
63585: NEG
63586: PUSH
63587: LD_INT 3
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 5
63597: NEG
63598: PUSH
63599: LD_INT 4
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 5
63609: NEG
63610: PUSH
63611: LD_INT 5
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: LD_INT 5
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 5
63633: NEG
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 4
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 2
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 3
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 4
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 4
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 4
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 5
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 4
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 3
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 5
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 4
63870: PUSH
63871: LD_INT 4
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: LD_INT 4
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 4
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 4
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: LD_INT 4
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: LD_INT 5
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: LD_INT 5
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 4
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 3
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: LD_INT 5
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64068: LD_ADDR_VAR 0 34
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: LD_INT 4
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 5
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 4
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 4
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: LD_INT 5
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: LD_INT 5
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 4
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 4
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 3
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 4
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 4
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 4
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 5
64290: PUSH
64291: LD_INT 4
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 5
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 4
64310: PUSH
64311: LD_INT 5
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 3
64320: PUSH
64321: LD_INT 4
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 5
64340: PUSH
64341: LD_INT 3
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 3
64350: PUSH
64351: LD_INT 5
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 3
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: LD_INT 4
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: LD_INT 4
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: NEG
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 4
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 3
64476: NEG
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 3
64487: NEG
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 4
64498: NEG
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: NEG
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 5
64520: NEG
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 5
64532: NEG
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: ST_TO_ADDR
// end ; end ;
64600: GO 64603
64602: POP
// case btype of b_depot , b_warehouse :
64603: LD_VAR 0 1
64607: PUSH
64608: LD_INT 0
64610: DOUBLE
64611: EQUAL
64612: IFTRUE 64622
64614: LD_INT 1
64616: DOUBLE
64617: EQUAL
64618: IFTRUE 64622
64620: GO 64823
64622: POP
// case nation of nation_american :
64623: LD_VAR 0 5
64627: PUSH
64628: LD_INT 1
64630: DOUBLE
64631: EQUAL
64632: IFTRUE 64636
64634: GO 64692
64636: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64637: LD_ADDR_VAR 0 9
64641: PUSH
64642: LD_VAR 0 11
64646: PUSH
64647: LD_VAR 0 12
64651: PUSH
64652: LD_VAR 0 13
64656: PUSH
64657: LD_VAR 0 14
64661: PUSH
64662: LD_VAR 0 15
64666: PUSH
64667: LD_VAR 0 16
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: PUSH
64680: LD_VAR 0 4
64684: PUSH
64685: LD_INT 1
64687: PLUS
64688: ARRAY
64689: ST_TO_ADDR
64690: GO 64821
64692: LD_INT 2
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64700
64698: GO 64756
64700: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64701: LD_ADDR_VAR 0 9
64705: PUSH
64706: LD_VAR 0 17
64710: PUSH
64711: LD_VAR 0 18
64715: PUSH
64716: LD_VAR 0 19
64720: PUSH
64721: LD_VAR 0 20
64725: PUSH
64726: LD_VAR 0 21
64730: PUSH
64731: LD_VAR 0 22
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: PUSH
64744: LD_VAR 0 4
64748: PUSH
64749: LD_INT 1
64751: PLUS
64752: ARRAY
64753: ST_TO_ADDR
64754: GO 64821
64756: LD_INT 3
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64820
64764: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64765: LD_ADDR_VAR 0 9
64769: PUSH
64770: LD_VAR 0 23
64774: PUSH
64775: LD_VAR 0 24
64779: PUSH
64780: LD_VAR 0 25
64784: PUSH
64785: LD_VAR 0 26
64789: PUSH
64790: LD_VAR 0 27
64794: PUSH
64795: LD_VAR 0 28
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: PUSH
64808: LD_VAR 0 4
64812: PUSH
64813: LD_INT 1
64815: PLUS
64816: ARRAY
64817: ST_TO_ADDR
64818: GO 64821
64820: POP
64821: GO 65376
64823: LD_INT 2
64825: DOUBLE
64826: EQUAL
64827: IFTRUE 64837
64829: LD_INT 3
64831: DOUBLE
64832: EQUAL
64833: IFTRUE 64837
64835: GO 64893
64837: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64838: LD_ADDR_VAR 0 9
64842: PUSH
64843: LD_VAR 0 29
64847: PUSH
64848: LD_VAR 0 30
64852: PUSH
64853: LD_VAR 0 31
64857: PUSH
64858: LD_VAR 0 32
64862: PUSH
64863: LD_VAR 0 33
64867: PUSH
64868: LD_VAR 0 34
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: PUSH
64881: LD_VAR 0 4
64885: PUSH
64886: LD_INT 1
64888: PLUS
64889: ARRAY
64890: ST_TO_ADDR
64891: GO 65376
64893: LD_INT 16
64895: DOUBLE
64896: EQUAL
64897: IFTRUE 64955
64899: LD_INT 17
64901: DOUBLE
64902: EQUAL
64903: IFTRUE 64955
64905: LD_INT 18
64907: DOUBLE
64908: EQUAL
64909: IFTRUE 64955
64911: LD_INT 19
64913: DOUBLE
64914: EQUAL
64915: IFTRUE 64955
64917: LD_INT 22
64919: DOUBLE
64920: EQUAL
64921: IFTRUE 64955
64923: LD_INT 20
64925: DOUBLE
64926: EQUAL
64927: IFTRUE 64955
64929: LD_INT 21
64931: DOUBLE
64932: EQUAL
64933: IFTRUE 64955
64935: LD_INT 23
64937: DOUBLE
64938: EQUAL
64939: IFTRUE 64955
64941: LD_INT 24
64943: DOUBLE
64944: EQUAL
64945: IFTRUE 64955
64947: LD_INT 25
64949: DOUBLE
64950: EQUAL
64951: IFTRUE 64955
64953: GO 65011
64955: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64956: LD_ADDR_VAR 0 9
64960: PUSH
64961: LD_VAR 0 35
64965: PUSH
64966: LD_VAR 0 36
64970: PUSH
64971: LD_VAR 0 37
64975: PUSH
64976: LD_VAR 0 38
64980: PUSH
64981: LD_VAR 0 39
64985: PUSH
64986: LD_VAR 0 40
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: PUSH
64999: LD_VAR 0 4
65003: PUSH
65004: LD_INT 1
65006: PLUS
65007: ARRAY
65008: ST_TO_ADDR
65009: GO 65376
65011: LD_INT 6
65013: DOUBLE
65014: EQUAL
65015: IFTRUE 65067
65017: LD_INT 7
65019: DOUBLE
65020: EQUAL
65021: IFTRUE 65067
65023: LD_INT 8
65025: DOUBLE
65026: EQUAL
65027: IFTRUE 65067
65029: LD_INT 13
65031: DOUBLE
65032: EQUAL
65033: IFTRUE 65067
65035: LD_INT 12
65037: DOUBLE
65038: EQUAL
65039: IFTRUE 65067
65041: LD_INT 15
65043: DOUBLE
65044: EQUAL
65045: IFTRUE 65067
65047: LD_INT 11
65049: DOUBLE
65050: EQUAL
65051: IFTRUE 65067
65053: LD_INT 14
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65067
65059: LD_INT 10
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65067
65065: GO 65123
65067: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65068: LD_ADDR_VAR 0 9
65072: PUSH
65073: LD_VAR 0 41
65077: PUSH
65078: LD_VAR 0 42
65082: PUSH
65083: LD_VAR 0 43
65087: PUSH
65088: LD_VAR 0 44
65092: PUSH
65093: LD_VAR 0 45
65097: PUSH
65098: LD_VAR 0 46
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: PUSH
65111: LD_VAR 0 4
65115: PUSH
65116: LD_INT 1
65118: PLUS
65119: ARRAY
65120: ST_TO_ADDR
65121: GO 65376
65123: LD_INT 36
65125: DOUBLE
65126: EQUAL
65127: IFTRUE 65131
65129: GO 65187
65131: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65132: LD_ADDR_VAR 0 9
65136: PUSH
65137: LD_VAR 0 47
65141: PUSH
65142: LD_VAR 0 48
65146: PUSH
65147: LD_VAR 0 49
65151: PUSH
65152: LD_VAR 0 50
65156: PUSH
65157: LD_VAR 0 51
65161: PUSH
65162: LD_VAR 0 52
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: LD_VAR 0 4
65179: PUSH
65180: LD_INT 1
65182: PLUS
65183: ARRAY
65184: ST_TO_ADDR
65185: GO 65376
65187: LD_INT 4
65189: DOUBLE
65190: EQUAL
65191: IFTRUE 65213
65193: LD_INT 5
65195: DOUBLE
65196: EQUAL
65197: IFTRUE 65213
65199: LD_INT 34
65201: DOUBLE
65202: EQUAL
65203: IFTRUE 65213
65205: LD_INT 37
65207: DOUBLE
65208: EQUAL
65209: IFTRUE 65213
65211: GO 65269
65213: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65214: LD_ADDR_VAR 0 9
65218: PUSH
65219: LD_VAR 0 53
65223: PUSH
65224: LD_VAR 0 54
65228: PUSH
65229: LD_VAR 0 55
65233: PUSH
65234: LD_VAR 0 56
65238: PUSH
65239: LD_VAR 0 57
65243: PUSH
65244: LD_VAR 0 58
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: PUSH
65257: LD_VAR 0 4
65261: PUSH
65262: LD_INT 1
65264: PLUS
65265: ARRAY
65266: ST_TO_ADDR
65267: GO 65376
65269: LD_INT 31
65271: DOUBLE
65272: EQUAL
65273: IFTRUE 65319
65275: LD_INT 32
65277: DOUBLE
65278: EQUAL
65279: IFTRUE 65319
65281: LD_INT 33
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65319
65287: LD_INT 27
65289: DOUBLE
65290: EQUAL
65291: IFTRUE 65319
65293: LD_INT 26
65295: DOUBLE
65296: EQUAL
65297: IFTRUE 65319
65299: LD_INT 28
65301: DOUBLE
65302: EQUAL
65303: IFTRUE 65319
65305: LD_INT 29
65307: DOUBLE
65308: EQUAL
65309: IFTRUE 65319
65311: LD_INT 30
65313: DOUBLE
65314: EQUAL
65315: IFTRUE 65319
65317: GO 65375
65319: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65320: LD_ADDR_VAR 0 9
65324: PUSH
65325: LD_VAR 0 59
65329: PUSH
65330: LD_VAR 0 60
65334: PUSH
65335: LD_VAR 0 61
65339: PUSH
65340: LD_VAR 0 62
65344: PUSH
65345: LD_VAR 0 63
65349: PUSH
65350: LD_VAR 0 64
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: LD_VAR 0 4
65367: PUSH
65368: LD_INT 1
65370: PLUS
65371: ARRAY
65372: ST_TO_ADDR
65373: GO 65376
65375: POP
// temp_list2 = [ ] ;
65376: LD_ADDR_VAR 0 10
65380: PUSH
65381: EMPTY
65382: ST_TO_ADDR
// for i in temp_list do
65383: LD_ADDR_VAR 0 8
65387: PUSH
65388: LD_VAR 0 9
65392: PUSH
65393: FOR_IN
65394: IFFALSE 65446
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65396: LD_ADDR_VAR 0 10
65400: PUSH
65401: LD_VAR 0 10
65405: PUSH
65406: LD_VAR 0 8
65410: PUSH
65411: LD_INT 1
65413: ARRAY
65414: PUSH
65415: LD_VAR 0 2
65419: PLUS
65420: PUSH
65421: LD_VAR 0 8
65425: PUSH
65426: LD_INT 2
65428: ARRAY
65429: PUSH
65430: LD_VAR 0 3
65434: PLUS
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: EMPTY
65441: LIST
65442: ADD
65443: ST_TO_ADDR
65444: GO 65393
65446: POP
65447: POP
// result = temp_list2 ;
65448: LD_ADDR_VAR 0 7
65452: PUSH
65453: LD_VAR 0 10
65457: ST_TO_ADDR
// end ;
65458: LD_VAR 0 7
65462: RET
// export function EnemyInRange ( unit , dist ) ; begin
65463: LD_INT 0
65465: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65466: LD_ADDR_VAR 0 3
65470: PUSH
65471: LD_VAR 0 1
65475: PPUSH
65476: CALL_OW 255
65480: PPUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: CALL_OW 250
65490: PPUSH
65491: LD_VAR 0 1
65495: PPUSH
65496: CALL_OW 251
65500: PPUSH
65501: LD_VAR 0 2
65505: PPUSH
65506: CALL 38859 0 4
65510: PUSH
65511: LD_INT 4
65513: ARRAY
65514: ST_TO_ADDR
// end ;
65515: LD_VAR 0 3
65519: RET
// export function PlayerSeeMe ( unit ) ; begin
65520: LD_INT 0
65522: PPUSH
// result := See ( your_side , unit ) ;
65523: LD_ADDR_VAR 0 2
65527: PUSH
65528: LD_OWVAR 2
65532: PPUSH
65533: LD_VAR 0 1
65537: PPUSH
65538: CALL_OW 292
65542: ST_TO_ADDR
// end ;
65543: LD_VAR 0 2
65547: RET
// export function ReverseDir ( unit ) ; begin
65548: LD_INT 0
65550: PPUSH
// if not unit then
65551: LD_VAR 0 1
65555: NOT
65556: IFFALSE 65560
// exit ;
65558: GO 65583
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65560: LD_ADDR_VAR 0 2
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 254
65574: PUSH
65575: LD_INT 3
65577: PLUS
65578: PUSH
65579: LD_INT 6
65581: MOD
65582: ST_TO_ADDR
// end ;
65583: LD_VAR 0 2
65587: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65588: LD_INT 0
65590: PPUSH
65591: PPUSH
65592: PPUSH
65593: PPUSH
65594: PPUSH
// if not hexes then
65595: LD_VAR 0 2
65599: NOT
65600: IFFALSE 65604
// exit ;
65602: GO 65752
// dist := 9999 ;
65604: LD_ADDR_VAR 0 5
65608: PUSH
65609: LD_INT 9999
65611: ST_TO_ADDR
// for i = 1 to hexes do
65612: LD_ADDR_VAR 0 4
65616: PUSH
65617: DOUBLE
65618: LD_INT 1
65620: DEC
65621: ST_TO_ADDR
65622: LD_VAR 0 2
65626: PUSH
65627: FOR_TO
65628: IFFALSE 65740
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65630: LD_VAR 0 1
65634: PPUSH
65635: LD_VAR 0 2
65639: PUSH
65640: LD_VAR 0 4
65644: ARRAY
65645: PUSH
65646: LD_INT 1
65648: ARRAY
65649: PPUSH
65650: LD_VAR 0 2
65654: PUSH
65655: LD_VAR 0 4
65659: ARRAY
65660: PUSH
65661: LD_INT 2
65663: ARRAY
65664: PPUSH
65665: CALL_OW 297
65669: PUSH
65670: LD_VAR 0 5
65674: LESS
65675: IFFALSE 65738
// begin hex := hexes [ i ] ;
65677: LD_ADDR_VAR 0 7
65681: PUSH
65682: LD_VAR 0 2
65686: PUSH
65687: LD_VAR 0 4
65691: ARRAY
65692: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65693: LD_ADDR_VAR 0 5
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: LD_VAR 0 2
65707: PUSH
65708: LD_VAR 0 4
65712: ARRAY
65713: PUSH
65714: LD_INT 1
65716: ARRAY
65717: PPUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_VAR 0 4
65727: ARRAY
65728: PUSH
65729: LD_INT 2
65731: ARRAY
65732: PPUSH
65733: CALL_OW 297
65737: ST_TO_ADDR
// end ; end ;
65738: GO 65627
65740: POP
65741: POP
// result := hex ;
65742: LD_ADDR_VAR 0 3
65746: PUSH
65747: LD_VAR 0 7
65751: ST_TO_ADDR
// end ;
65752: LD_VAR 0 3
65756: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65757: LD_INT 0
65759: PPUSH
65760: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65761: LD_VAR 0 1
65765: NOT
65766: PUSH
65767: LD_VAR 0 1
65771: PUSH
65772: LD_INT 21
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 23
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PPUSH
65796: CALL_OW 69
65800: IN
65801: NOT
65802: OR
65803: IFFALSE 65807
// exit ;
65805: GO 65854
// for i = 1 to 3 do
65807: LD_ADDR_VAR 0 3
65811: PUSH
65812: DOUBLE
65813: LD_INT 1
65815: DEC
65816: ST_TO_ADDR
65817: LD_INT 3
65819: PUSH
65820: FOR_TO
65821: IFFALSE 65852
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65823: LD_VAR 0 1
65827: PPUSH
65828: CALL_OW 250
65832: PPUSH
65833: LD_VAR 0 1
65837: PPUSH
65838: CALL_OW 251
65842: PPUSH
65843: LD_INT 1
65845: PPUSH
65846: CALL_OW 453
65850: GO 65820
65852: POP
65853: POP
// end ;
65854: LD_VAR 0 2
65858: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65859: LD_INT 0
65861: PPUSH
65862: PPUSH
65863: PPUSH
65864: PPUSH
65865: PPUSH
65866: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65867: LD_VAR 0 1
65871: NOT
65872: PUSH
65873: LD_VAR 0 2
65877: NOT
65878: OR
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 314
65889: OR
65890: IFFALSE 65894
// exit ;
65892: GO 66335
// x := GetX ( enemy_unit ) ;
65894: LD_ADDR_VAR 0 7
65898: PUSH
65899: LD_VAR 0 2
65903: PPUSH
65904: CALL_OW 250
65908: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65909: LD_ADDR_VAR 0 8
65913: PUSH
65914: LD_VAR 0 2
65918: PPUSH
65919: CALL_OW 251
65923: ST_TO_ADDR
// if not x or not y then
65924: LD_VAR 0 7
65928: NOT
65929: PUSH
65930: LD_VAR 0 8
65934: NOT
65935: OR
65936: IFFALSE 65940
// exit ;
65938: GO 66335
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65940: LD_ADDR_VAR 0 6
65944: PUSH
65945: LD_VAR 0 7
65949: PPUSH
65950: LD_INT 0
65952: PPUSH
65953: LD_INT 4
65955: PPUSH
65956: CALL_OW 272
65960: PUSH
65961: LD_VAR 0 8
65965: PPUSH
65966: LD_INT 0
65968: PPUSH
65969: LD_INT 4
65971: PPUSH
65972: CALL_OW 273
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_VAR 0 7
65985: PPUSH
65986: LD_INT 1
65988: PPUSH
65989: LD_INT 4
65991: PPUSH
65992: CALL_OW 272
65996: PUSH
65997: LD_VAR 0 8
66001: PPUSH
66002: LD_INT 1
66004: PPUSH
66005: LD_INT 4
66007: PPUSH
66008: CALL_OW 273
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_VAR 0 7
66021: PPUSH
66022: LD_INT 2
66024: PPUSH
66025: LD_INT 4
66027: PPUSH
66028: CALL_OW 272
66032: PUSH
66033: LD_VAR 0 8
66037: PPUSH
66038: LD_INT 2
66040: PPUSH
66041: LD_INT 4
66043: PPUSH
66044: CALL_OW 273
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_VAR 0 7
66057: PPUSH
66058: LD_INT 3
66060: PPUSH
66061: LD_INT 4
66063: PPUSH
66064: CALL_OW 272
66068: PUSH
66069: LD_VAR 0 8
66073: PPUSH
66074: LD_INT 3
66076: PPUSH
66077: LD_INT 4
66079: PPUSH
66080: CALL_OW 273
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_VAR 0 7
66093: PPUSH
66094: LD_INT 4
66096: PPUSH
66097: LD_INT 4
66099: PPUSH
66100: CALL_OW 272
66104: PUSH
66105: LD_VAR 0 8
66109: PPUSH
66110: LD_INT 4
66112: PPUSH
66113: LD_INT 4
66115: PPUSH
66116: CALL_OW 273
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 7
66129: PPUSH
66130: LD_INT 5
66132: PPUSH
66133: LD_INT 4
66135: PPUSH
66136: CALL_OW 272
66140: PUSH
66141: LD_VAR 0 8
66145: PPUSH
66146: LD_INT 5
66148: PPUSH
66149: LD_INT 4
66151: PPUSH
66152: CALL_OW 273
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: ST_TO_ADDR
// for i = tmp downto 1 do
66169: LD_ADDR_VAR 0 4
66173: PUSH
66174: DOUBLE
66175: LD_VAR 0 6
66179: INC
66180: ST_TO_ADDR
66181: LD_INT 1
66183: PUSH
66184: FOR_DOWNTO
66185: IFFALSE 66286
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66187: LD_VAR 0 6
66191: PUSH
66192: LD_VAR 0 4
66196: ARRAY
66197: PUSH
66198: LD_INT 1
66200: ARRAY
66201: PPUSH
66202: LD_VAR 0 6
66206: PUSH
66207: LD_VAR 0 4
66211: ARRAY
66212: PUSH
66213: LD_INT 2
66215: ARRAY
66216: PPUSH
66217: CALL_OW 488
66221: NOT
66222: PUSH
66223: LD_VAR 0 6
66227: PUSH
66228: LD_VAR 0 4
66232: ARRAY
66233: PUSH
66234: LD_INT 1
66236: ARRAY
66237: PPUSH
66238: LD_VAR 0 6
66242: PUSH
66243: LD_VAR 0 4
66247: ARRAY
66248: PUSH
66249: LD_INT 2
66251: ARRAY
66252: PPUSH
66253: CALL_OW 428
66257: PUSH
66258: LD_INT 0
66260: NONEQUAL
66261: OR
66262: IFFALSE 66284
// tmp := Delete ( tmp , i ) ;
66264: LD_ADDR_VAR 0 6
66268: PUSH
66269: LD_VAR 0 6
66273: PPUSH
66274: LD_VAR 0 4
66278: PPUSH
66279: CALL_OW 3
66283: ST_TO_ADDR
66284: GO 66184
66286: POP
66287: POP
// j := GetClosestHex ( unit , tmp ) ;
66288: LD_ADDR_VAR 0 5
66292: PUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: LD_VAR 0 6
66302: PPUSH
66303: CALL 65588 0 2
66307: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66308: LD_VAR 0 1
66312: PPUSH
66313: LD_VAR 0 5
66317: PUSH
66318: LD_INT 1
66320: ARRAY
66321: PPUSH
66322: LD_VAR 0 5
66326: PUSH
66327: LD_INT 2
66329: ARRAY
66330: PPUSH
66331: CALL_OW 111
// end ;
66335: LD_VAR 0 3
66339: RET
// export function PrepareApeman ( agressivity ) ; begin
66340: LD_INT 0
66342: PPUSH
// uc_side := 0 ;
66343: LD_ADDR_OWVAR 20
66347: PUSH
66348: LD_INT 0
66350: ST_TO_ADDR
// uc_nation := 0 ;
66351: LD_ADDR_OWVAR 21
66355: PUSH
66356: LD_INT 0
66358: ST_TO_ADDR
// hc_sex := sex_male ;
66359: LD_ADDR_OWVAR 27
66363: PUSH
66364: LD_INT 1
66366: ST_TO_ADDR
// hc_class := class_apeman ;
66367: LD_ADDR_OWVAR 28
66371: PUSH
66372: LD_INT 12
66374: ST_TO_ADDR
// hc_gallery :=  ;
66375: LD_ADDR_OWVAR 33
66379: PUSH
66380: LD_STRING 
66382: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66383: LD_ADDR_OWVAR 35
66387: PUSH
66388: LD_VAR 0 1
66392: NEG
66393: PPUSH
66394: LD_VAR 0 1
66398: PPUSH
66399: CALL_OW 12
66403: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66404: LD_ADDR_OWVAR 31
66408: PUSH
66409: LD_INT 0
66411: PPUSH
66412: LD_INT 3
66414: PPUSH
66415: CALL_OW 12
66419: PUSH
66420: LD_INT 0
66422: PPUSH
66423: LD_INT 3
66425: PPUSH
66426: CALL_OW 12
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: ST_TO_ADDR
// end ;
66443: LD_VAR 0 2
66447: RET
// export function PrepareTiger ( agressivity ) ; begin
66448: LD_INT 0
66450: PPUSH
// uc_side := 0 ;
66451: LD_ADDR_OWVAR 20
66455: PUSH
66456: LD_INT 0
66458: ST_TO_ADDR
// uc_nation := 0 ;
66459: LD_ADDR_OWVAR 21
66463: PUSH
66464: LD_INT 0
66466: ST_TO_ADDR
// hc_class := class_tiger ;
66467: LD_ADDR_OWVAR 28
66471: PUSH
66472: LD_INT 14
66474: ST_TO_ADDR
// hc_gallery :=  ;
66475: LD_ADDR_OWVAR 33
66479: PUSH
66480: LD_STRING 
66482: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66483: LD_ADDR_OWVAR 35
66487: PUSH
66488: LD_VAR 0 1
66492: NEG
66493: PPUSH
66494: LD_VAR 0 1
66498: PPUSH
66499: CALL_OW 12
66503: ST_TO_ADDR
// end ;
66504: LD_VAR 0 2
66508: RET
// export function PrepareEnchidna ( ) ; begin
66509: LD_INT 0
66511: PPUSH
// uc_side := 0 ;
66512: LD_ADDR_OWVAR 20
66516: PUSH
66517: LD_INT 0
66519: ST_TO_ADDR
// uc_nation := 0 ;
66520: LD_ADDR_OWVAR 21
66524: PUSH
66525: LD_INT 0
66527: ST_TO_ADDR
// hc_class := class_baggie ;
66528: LD_ADDR_OWVAR 28
66532: PUSH
66533: LD_INT 13
66535: ST_TO_ADDR
// hc_gallery :=  ;
66536: LD_ADDR_OWVAR 33
66540: PUSH
66541: LD_STRING 
66543: ST_TO_ADDR
// end ;
66544: LD_VAR 0 1
66548: RET
// export function PrepareFrog ( ) ; begin
66549: LD_INT 0
66551: PPUSH
// uc_side := 0 ;
66552: LD_ADDR_OWVAR 20
66556: PUSH
66557: LD_INT 0
66559: ST_TO_ADDR
// uc_nation := 0 ;
66560: LD_ADDR_OWVAR 21
66564: PUSH
66565: LD_INT 0
66567: ST_TO_ADDR
// hc_class := class_frog ;
66568: LD_ADDR_OWVAR 28
66572: PUSH
66573: LD_INT 19
66575: ST_TO_ADDR
// hc_gallery :=  ;
66576: LD_ADDR_OWVAR 33
66580: PUSH
66581: LD_STRING 
66583: ST_TO_ADDR
// end ;
66584: LD_VAR 0 1
66588: RET
// export function PrepareFish ( ) ; begin
66589: LD_INT 0
66591: PPUSH
// uc_side := 0 ;
66592: LD_ADDR_OWVAR 20
66596: PUSH
66597: LD_INT 0
66599: ST_TO_ADDR
// uc_nation := 0 ;
66600: LD_ADDR_OWVAR 21
66604: PUSH
66605: LD_INT 0
66607: ST_TO_ADDR
// hc_class := class_fish ;
66608: LD_ADDR_OWVAR 28
66612: PUSH
66613: LD_INT 20
66615: ST_TO_ADDR
// hc_gallery :=  ;
66616: LD_ADDR_OWVAR 33
66620: PUSH
66621: LD_STRING 
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 1
66628: RET
// export function PrepareBird ( ) ; begin
66629: LD_INT 0
66631: PPUSH
// uc_side := 0 ;
66632: LD_ADDR_OWVAR 20
66636: PUSH
66637: LD_INT 0
66639: ST_TO_ADDR
// uc_nation := 0 ;
66640: LD_ADDR_OWVAR 21
66644: PUSH
66645: LD_INT 0
66647: ST_TO_ADDR
// hc_class := class_phororhacos ;
66648: LD_ADDR_OWVAR 28
66652: PUSH
66653: LD_INT 18
66655: ST_TO_ADDR
// hc_gallery :=  ;
66656: LD_ADDR_OWVAR 33
66660: PUSH
66661: LD_STRING 
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 1
66668: RET
// export function PrepareHorse ( ) ; begin
66669: LD_INT 0
66671: PPUSH
// uc_side := 0 ;
66672: LD_ADDR_OWVAR 20
66676: PUSH
66677: LD_INT 0
66679: ST_TO_ADDR
// uc_nation := 0 ;
66680: LD_ADDR_OWVAR 21
66684: PUSH
66685: LD_INT 0
66687: ST_TO_ADDR
// hc_class := 21 ;
66688: LD_ADDR_OWVAR 28
66692: PUSH
66693: LD_INT 21
66695: ST_TO_ADDR
// hc_gallery :=  ;
66696: LD_ADDR_OWVAR 33
66700: PUSH
66701: LD_STRING 
66703: ST_TO_ADDR
// end ;
66704: LD_VAR 0 1
66708: RET
// export function PrepareMastodont ( ) ; begin
66709: LD_INT 0
66711: PPUSH
// uc_side := 0 ;
66712: LD_ADDR_OWVAR 20
66716: PUSH
66717: LD_INT 0
66719: ST_TO_ADDR
// uc_nation := 0 ;
66720: LD_ADDR_OWVAR 21
66724: PUSH
66725: LD_INT 0
66727: ST_TO_ADDR
// vc_chassis := 31 ;
66728: LD_ADDR_OWVAR 37
66732: PUSH
66733: LD_INT 31
66735: ST_TO_ADDR
// vc_control := control_rider ;
66736: LD_ADDR_OWVAR 38
66740: PUSH
66741: LD_INT 4
66743: ST_TO_ADDR
// end ;
66744: LD_VAR 0 1
66748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66749: LD_INT 0
66751: PPUSH
66752: PPUSH
66753: PPUSH
// uc_side = 0 ;
66754: LD_ADDR_OWVAR 20
66758: PUSH
66759: LD_INT 0
66761: ST_TO_ADDR
// uc_nation = 0 ;
66762: LD_ADDR_OWVAR 21
66766: PUSH
66767: LD_INT 0
66769: ST_TO_ADDR
// InitHc_All ( ) ;
66770: CALL_OW 584
// InitVc ;
66774: CALL_OW 20
// if mastodonts then
66778: LD_VAR 0 6
66782: IFFALSE 66849
// for i = 1 to mastodonts do
66784: LD_ADDR_VAR 0 11
66788: PUSH
66789: DOUBLE
66790: LD_INT 1
66792: DEC
66793: ST_TO_ADDR
66794: LD_VAR 0 6
66798: PUSH
66799: FOR_TO
66800: IFFALSE 66847
// begin vc_chassis := 31 ;
66802: LD_ADDR_OWVAR 37
66806: PUSH
66807: LD_INT 31
66809: ST_TO_ADDR
// vc_control := control_rider ;
66810: LD_ADDR_OWVAR 38
66814: PUSH
66815: LD_INT 4
66817: ST_TO_ADDR
// animal := CreateVehicle ;
66818: LD_ADDR_VAR 0 12
66822: PUSH
66823: CALL_OW 45
66827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66828: LD_VAR 0 12
66832: PPUSH
66833: LD_VAR 0 8
66837: PPUSH
66838: LD_INT 0
66840: PPUSH
66841: CALL 68984 0 3
// end ;
66845: GO 66799
66847: POP
66848: POP
// if horses then
66849: LD_VAR 0 5
66853: IFFALSE 66920
// for i = 1 to horses do
66855: LD_ADDR_VAR 0 11
66859: PUSH
66860: DOUBLE
66861: LD_INT 1
66863: DEC
66864: ST_TO_ADDR
66865: LD_VAR 0 5
66869: PUSH
66870: FOR_TO
66871: IFFALSE 66918
// begin hc_class := 21 ;
66873: LD_ADDR_OWVAR 28
66877: PUSH
66878: LD_INT 21
66880: ST_TO_ADDR
// hc_gallery :=  ;
66881: LD_ADDR_OWVAR 33
66885: PUSH
66886: LD_STRING 
66888: ST_TO_ADDR
// animal := CreateHuman ;
66889: LD_ADDR_VAR 0 12
66893: PUSH
66894: CALL_OW 44
66898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66899: LD_VAR 0 12
66903: PPUSH
66904: LD_VAR 0 8
66908: PPUSH
66909: LD_INT 0
66911: PPUSH
66912: CALL 68984 0 3
// end ;
66916: GO 66870
66918: POP
66919: POP
// if birds then
66920: LD_VAR 0 1
66924: IFFALSE 66991
// for i = 1 to birds do
66926: LD_ADDR_VAR 0 11
66930: PUSH
66931: DOUBLE
66932: LD_INT 1
66934: DEC
66935: ST_TO_ADDR
66936: LD_VAR 0 1
66940: PUSH
66941: FOR_TO
66942: IFFALSE 66989
// begin hc_class = 18 ;
66944: LD_ADDR_OWVAR 28
66948: PUSH
66949: LD_INT 18
66951: ST_TO_ADDR
// hc_gallery =  ;
66952: LD_ADDR_OWVAR 33
66956: PUSH
66957: LD_STRING 
66959: ST_TO_ADDR
// animal := CreateHuman ;
66960: LD_ADDR_VAR 0 12
66964: PUSH
66965: CALL_OW 44
66969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66970: LD_VAR 0 12
66974: PPUSH
66975: LD_VAR 0 8
66979: PPUSH
66980: LD_INT 0
66982: PPUSH
66983: CALL 68984 0 3
// end ;
66987: GO 66941
66989: POP
66990: POP
// if tigers then
66991: LD_VAR 0 2
66995: IFFALSE 67079
// for i = 1 to tigers do
66997: LD_ADDR_VAR 0 11
67001: PUSH
67002: DOUBLE
67003: LD_INT 1
67005: DEC
67006: ST_TO_ADDR
67007: LD_VAR 0 2
67011: PUSH
67012: FOR_TO
67013: IFFALSE 67077
// begin hc_class = class_tiger ;
67015: LD_ADDR_OWVAR 28
67019: PUSH
67020: LD_INT 14
67022: ST_TO_ADDR
// hc_gallery =  ;
67023: LD_ADDR_OWVAR 33
67027: PUSH
67028: LD_STRING 
67030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67031: LD_ADDR_OWVAR 35
67035: PUSH
67036: LD_INT 7
67038: NEG
67039: PPUSH
67040: LD_INT 7
67042: PPUSH
67043: CALL_OW 12
67047: ST_TO_ADDR
// animal := CreateHuman ;
67048: LD_ADDR_VAR 0 12
67052: PUSH
67053: CALL_OW 44
67057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67058: LD_VAR 0 12
67062: PPUSH
67063: LD_VAR 0 8
67067: PPUSH
67068: LD_INT 0
67070: PPUSH
67071: CALL 68984 0 3
// end ;
67075: GO 67012
67077: POP
67078: POP
// if apemans then
67079: LD_VAR 0 3
67083: IFFALSE 67206
// for i = 1 to apemans do
67085: LD_ADDR_VAR 0 11
67089: PUSH
67090: DOUBLE
67091: LD_INT 1
67093: DEC
67094: ST_TO_ADDR
67095: LD_VAR 0 3
67099: PUSH
67100: FOR_TO
67101: IFFALSE 67204
// begin hc_class = class_apeman ;
67103: LD_ADDR_OWVAR 28
67107: PUSH
67108: LD_INT 12
67110: ST_TO_ADDR
// hc_gallery =  ;
67111: LD_ADDR_OWVAR 33
67115: PUSH
67116: LD_STRING 
67118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67119: LD_ADDR_OWVAR 35
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PPUSH
67128: LD_INT 2
67130: PPUSH
67131: CALL_OW 12
67135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67136: LD_ADDR_OWVAR 31
67140: PUSH
67141: LD_INT 1
67143: PPUSH
67144: LD_INT 3
67146: PPUSH
67147: CALL_OW 12
67151: PUSH
67152: LD_INT 1
67154: PPUSH
67155: LD_INT 3
67157: PPUSH
67158: CALL_OW 12
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: ST_TO_ADDR
// animal := CreateHuman ;
67175: LD_ADDR_VAR 0 12
67179: PUSH
67180: CALL_OW 44
67184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67185: LD_VAR 0 12
67189: PPUSH
67190: LD_VAR 0 8
67194: PPUSH
67195: LD_INT 0
67197: PPUSH
67198: CALL 68984 0 3
// end ;
67202: GO 67100
67204: POP
67205: POP
// if enchidnas then
67206: LD_VAR 0 4
67210: IFFALSE 67277
// for i = 1 to enchidnas do
67212: LD_ADDR_VAR 0 11
67216: PUSH
67217: DOUBLE
67218: LD_INT 1
67220: DEC
67221: ST_TO_ADDR
67222: LD_VAR 0 4
67226: PUSH
67227: FOR_TO
67228: IFFALSE 67275
// begin hc_class = 13 ;
67230: LD_ADDR_OWVAR 28
67234: PUSH
67235: LD_INT 13
67237: ST_TO_ADDR
// hc_gallery =  ;
67238: LD_ADDR_OWVAR 33
67242: PUSH
67243: LD_STRING 
67245: ST_TO_ADDR
// animal := CreateHuman ;
67246: LD_ADDR_VAR 0 12
67250: PUSH
67251: CALL_OW 44
67255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67256: LD_VAR 0 12
67260: PPUSH
67261: LD_VAR 0 8
67265: PPUSH
67266: LD_INT 0
67268: PPUSH
67269: CALL 68984 0 3
// end ;
67273: GO 67227
67275: POP
67276: POP
// if fishes then
67277: LD_VAR 0 7
67281: IFFALSE 67348
// for i = 1 to fishes do
67283: LD_ADDR_VAR 0 11
67287: PUSH
67288: DOUBLE
67289: LD_INT 1
67291: DEC
67292: ST_TO_ADDR
67293: LD_VAR 0 7
67297: PUSH
67298: FOR_TO
67299: IFFALSE 67346
// begin hc_class = 20 ;
67301: LD_ADDR_OWVAR 28
67305: PUSH
67306: LD_INT 20
67308: ST_TO_ADDR
// hc_gallery =  ;
67309: LD_ADDR_OWVAR 33
67313: PUSH
67314: LD_STRING 
67316: ST_TO_ADDR
// animal := CreateHuman ;
67317: LD_ADDR_VAR 0 12
67321: PUSH
67322: CALL_OW 44
67326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67327: LD_VAR 0 12
67331: PPUSH
67332: LD_VAR 0 9
67336: PPUSH
67337: LD_INT 0
67339: PPUSH
67340: CALL 68984 0 3
// end ;
67344: GO 67298
67346: POP
67347: POP
// end ;
67348: LD_VAR 0 10
67352: RET
// export function WantHeal ( sci , unit ) ; begin
67353: LD_INT 0
67355: PPUSH
// if GetTaskList ( sci ) > 0 then
67356: LD_VAR 0 1
67360: PPUSH
67361: CALL_OW 437
67365: PUSH
67366: LD_INT 0
67368: GREATER
67369: IFFALSE 67439
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67371: LD_VAR 0 1
67375: PPUSH
67376: CALL_OW 437
67380: PUSH
67381: LD_INT 1
67383: ARRAY
67384: PUSH
67385: LD_INT 1
67387: ARRAY
67388: PUSH
67389: LD_STRING l
67391: EQUAL
67392: PUSH
67393: LD_VAR 0 1
67397: PPUSH
67398: CALL_OW 437
67402: PUSH
67403: LD_INT 1
67405: ARRAY
67406: PUSH
67407: LD_INT 4
67409: ARRAY
67410: PUSH
67411: LD_VAR 0 2
67415: EQUAL
67416: AND
67417: IFFALSE 67429
// result := true else
67419: LD_ADDR_VAR 0 3
67423: PUSH
67424: LD_INT 1
67426: ST_TO_ADDR
67427: GO 67437
// result := false ;
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: LD_INT 0
67436: ST_TO_ADDR
// end else
67437: GO 67447
// result := false ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_INT 0
67446: ST_TO_ADDR
// end ;
67447: LD_VAR 0 3
67451: RET
// export function HealTarget ( sci ) ; begin
67452: LD_INT 0
67454: PPUSH
// if not sci then
67455: LD_VAR 0 1
67459: NOT
67460: IFFALSE 67464
// exit ;
67462: GO 67529
// result := 0 ;
67464: LD_ADDR_VAR 0 2
67468: PUSH
67469: LD_INT 0
67471: ST_TO_ADDR
// if GetTaskList ( sci ) then
67472: LD_VAR 0 1
67476: PPUSH
67477: CALL_OW 437
67481: IFFALSE 67529
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67483: LD_VAR 0 1
67487: PPUSH
67488: CALL_OW 437
67492: PUSH
67493: LD_INT 1
67495: ARRAY
67496: PUSH
67497: LD_INT 1
67499: ARRAY
67500: PUSH
67501: LD_STRING l
67503: EQUAL
67504: IFFALSE 67529
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67506: LD_ADDR_VAR 0 2
67510: PUSH
67511: LD_VAR 0 1
67515: PPUSH
67516: CALL_OW 437
67520: PUSH
67521: LD_INT 1
67523: ARRAY
67524: PUSH
67525: LD_INT 4
67527: ARRAY
67528: ST_TO_ADDR
// end ;
67529: LD_VAR 0 2
67533: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67534: LD_INT 0
67536: PPUSH
67537: PPUSH
67538: PPUSH
67539: PPUSH
// if not base_units then
67540: LD_VAR 0 1
67544: NOT
67545: IFFALSE 67549
// exit ;
67547: GO 67636
// result := false ;
67549: LD_ADDR_VAR 0 2
67553: PUSH
67554: LD_INT 0
67556: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67557: LD_ADDR_VAR 0 5
67561: PUSH
67562: LD_VAR 0 1
67566: PPUSH
67567: LD_INT 21
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PPUSH
67577: CALL_OW 72
67581: ST_TO_ADDR
// if not tmp then
67582: LD_VAR 0 5
67586: NOT
67587: IFFALSE 67591
// exit ;
67589: GO 67636
// for i in tmp do
67591: LD_ADDR_VAR 0 3
67595: PUSH
67596: LD_VAR 0 5
67600: PUSH
67601: FOR_IN
67602: IFFALSE 67634
// begin result := EnemyInRange ( i , 22 ) ;
67604: LD_ADDR_VAR 0 2
67608: PUSH
67609: LD_VAR 0 3
67613: PPUSH
67614: LD_INT 22
67616: PPUSH
67617: CALL 65463 0 2
67621: ST_TO_ADDR
// if result then
67622: LD_VAR 0 2
67626: IFFALSE 67632
// exit ;
67628: POP
67629: POP
67630: GO 67636
// end ;
67632: GO 67601
67634: POP
67635: POP
// end ;
67636: LD_VAR 0 2
67640: RET
// export function FilterByTag ( units , tag ) ; begin
67641: LD_INT 0
67643: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67644: LD_ADDR_VAR 0 3
67648: PUSH
67649: LD_VAR 0 1
67653: PPUSH
67654: LD_INT 120
67656: PUSH
67657: LD_VAR 0 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PPUSH
67666: CALL_OW 72
67670: ST_TO_ADDR
// end ;
67671: LD_VAR 0 3
67675: RET
// export function IsDriver ( un ) ; begin
67676: LD_INT 0
67678: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67679: LD_ADDR_VAR 0 2
67683: PUSH
67684: LD_VAR 0 1
67688: PUSH
67689: LD_INT 55
67691: PUSH
67692: EMPTY
67693: LIST
67694: PPUSH
67695: CALL_OW 69
67699: IN
67700: ST_TO_ADDR
// end ;
67701: LD_VAR 0 2
67705: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67706: LD_INT 0
67708: PPUSH
67709: PPUSH
// list := [ ] ;
67710: LD_ADDR_VAR 0 5
67714: PUSH
67715: EMPTY
67716: ST_TO_ADDR
// case d of 0 :
67717: LD_VAR 0 3
67721: PUSH
67722: LD_INT 0
67724: DOUBLE
67725: EQUAL
67726: IFTRUE 67730
67728: GO 67863
67730: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67731: LD_ADDR_VAR 0 5
67735: PUSH
67736: LD_VAR 0 1
67740: PUSH
67741: LD_INT 4
67743: MINUS
67744: PUSH
67745: LD_VAR 0 2
67749: PUSH
67750: LD_INT 4
67752: MINUS
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: LIST
67761: PUSH
67762: LD_VAR 0 1
67766: PUSH
67767: LD_INT 3
67769: MINUS
67770: PUSH
67771: LD_VAR 0 2
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: PUSH
67784: LD_VAR 0 1
67788: PUSH
67789: LD_INT 4
67791: PLUS
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: PUSH
67806: LD_VAR 0 1
67810: PUSH
67811: LD_INT 3
67813: PLUS
67814: PUSH
67815: LD_VAR 0 2
67819: PUSH
67820: LD_INT 3
67822: PLUS
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: PUSH
67832: LD_VAR 0 1
67836: PUSH
67837: LD_VAR 0 2
67841: PUSH
67842: LD_INT 4
67844: PLUS
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: ST_TO_ADDR
// end ; 1 :
67861: GO 68561
67863: LD_INT 1
67865: DOUBLE
67866: EQUAL
67867: IFTRUE 67871
67869: GO 68004
67871: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67872: LD_ADDR_VAR 0 5
67876: PUSH
67877: LD_VAR 0 1
67881: PUSH
67882: LD_VAR 0 2
67886: PUSH
67887: LD_INT 4
67889: MINUS
67890: PUSH
67891: LD_INT 3
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: LIST
67898: PUSH
67899: LD_VAR 0 1
67903: PUSH
67904: LD_INT 3
67906: MINUS
67907: PUSH
67908: LD_VAR 0 2
67912: PUSH
67913: LD_INT 3
67915: MINUS
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: LD_INT 4
67932: MINUS
67933: PUSH
67934: LD_VAR 0 2
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: LIST
67946: PUSH
67947: LD_VAR 0 1
67951: PUSH
67952: LD_VAR 0 2
67956: PUSH
67957: LD_INT 3
67959: PLUS
67960: PUSH
67961: LD_INT 0
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: LIST
67968: PUSH
67969: LD_VAR 0 1
67973: PUSH
67974: LD_INT 4
67976: PLUS
67977: PUSH
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 4
67985: PLUS
67986: PUSH
67987: LD_INT 5
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// end ; 2 :
68002: GO 68561
68004: LD_INT 2
68006: DOUBLE
68007: EQUAL
68008: IFTRUE 68012
68010: GO 68141
68012: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68013: LD_ADDR_VAR 0 5
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_VAR 0 2
68027: PUSH
68028: LD_INT 3
68030: MINUS
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: PUSH
68040: LD_VAR 0 1
68044: PUSH
68045: LD_INT 4
68047: PLUS
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: PUSH
68062: LD_VAR 0 1
68066: PUSH
68067: LD_VAR 0 2
68071: PUSH
68072: LD_INT 4
68074: PLUS
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: LIST
68083: PUSH
68084: LD_VAR 0 1
68088: PUSH
68089: LD_INT 3
68091: MINUS
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: PUSH
68106: LD_VAR 0 1
68110: PUSH
68111: LD_INT 4
68113: MINUS
68114: PUSH
68115: LD_VAR 0 2
68119: PUSH
68120: LD_INT 4
68122: MINUS
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: ST_TO_ADDR
// end ; 3 :
68139: GO 68561
68141: LD_INT 3
68143: DOUBLE
68144: EQUAL
68145: IFTRUE 68149
68147: GO 68282
68149: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68150: LD_ADDR_VAR 0 5
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_INT 3
68162: PLUS
68163: PUSH
68164: LD_VAR 0 2
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: PUSH
68177: LD_VAR 0 1
68181: PUSH
68182: LD_INT 4
68184: PLUS
68185: PUSH
68186: LD_VAR 0 2
68190: PUSH
68191: LD_INT 4
68193: PLUS
68194: PUSH
68195: LD_INT 5
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: PUSH
68203: LD_VAR 0 1
68207: PUSH
68208: LD_INT 4
68210: MINUS
68211: PUSH
68212: LD_VAR 0 2
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: LD_VAR 0 1
68229: PUSH
68230: LD_VAR 0 2
68234: PUSH
68235: LD_INT 4
68237: MINUS
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: PUSH
68247: LD_VAR 0 1
68251: PUSH
68252: LD_INT 3
68254: MINUS
68255: PUSH
68256: LD_VAR 0 2
68260: PUSH
68261: LD_INT 3
68263: MINUS
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// end ; 4 :
68280: GO 68561
68282: LD_INT 4
68284: DOUBLE
68285: EQUAL
68286: IFTRUE 68290
68288: GO 68423
68290: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68291: LD_ADDR_VAR 0 5
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_VAR 0 2
68305: PUSH
68306: LD_INT 4
68308: PLUS
68309: PUSH
68310: LD_INT 0
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_INT 3
68325: PLUS
68326: PUSH
68327: LD_VAR 0 2
68331: PUSH
68332: LD_INT 3
68334: PLUS
68335: PUSH
68336: LD_INT 5
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: PUSH
68344: LD_VAR 0 1
68348: PUSH
68349: LD_INT 4
68351: PLUS
68352: PUSH
68353: LD_VAR 0 2
68357: PUSH
68358: LD_INT 4
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: PUSH
68366: LD_VAR 0 1
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: LD_INT 3
68378: MINUS
68379: PUSH
68380: LD_INT 3
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: PUSH
68388: LD_VAR 0 1
68392: PUSH
68393: LD_INT 4
68395: MINUS
68396: PUSH
68397: LD_VAR 0 2
68401: PUSH
68402: LD_INT 4
68404: MINUS
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// end ; 5 :
68421: GO 68561
68423: LD_INT 5
68425: DOUBLE
68426: EQUAL
68427: IFTRUE 68431
68429: GO 68560
68431: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68432: LD_ADDR_VAR 0 5
68436: PUSH
68437: LD_VAR 0 1
68441: PUSH
68442: LD_INT 4
68444: MINUS
68445: PUSH
68446: LD_VAR 0 2
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: PUSH
68459: LD_VAR 0 1
68463: PUSH
68464: LD_VAR 0 2
68468: PUSH
68469: LD_INT 4
68471: MINUS
68472: PUSH
68473: LD_INT 3
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: LIST
68480: PUSH
68481: LD_VAR 0 1
68485: PUSH
68486: LD_INT 4
68488: PLUS
68489: PUSH
68490: LD_VAR 0 2
68494: PUSH
68495: LD_INT 4
68497: PLUS
68498: PUSH
68499: LD_INT 5
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: LIST
68506: PUSH
68507: LD_VAR 0 1
68511: PUSH
68512: LD_INT 3
68514: PLUS
68515: PUSH
68516: LD_VAR 0 2
68520: PUSH
68521: LD_INT 4
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: PUSH
68529: LD_VAR 0 1
68533: PUSH
68534: LD_VAR 0 2
68538: PUSH
68539: LD_INT 3
68541: PLUS
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: ST_TO_ADDR
// end ; end ;
68558: GO 68561
68560: POP
// result := list ;
68561: LD_ADDR_VAR 0 4
68565: PUSH
68566: LD_VAR 0 5
68570: ST_TO_ADDR
// end ;
68571: LD_VAR 0 4
68575: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68576: LD_INT 0
68578: PPUSH
68579: PPUSH
68580: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68581: LD_VAR 0 1
68585: NOT
68586: PUSH
68587: LD_VAR 0 2
68591: PUSH
68592: LD_INT 1
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: LD_INT 3
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: IN
68610: NOT
68611: OR
68612: IFFALSE 68616
// exit ;
68614: GO 68708
// tmp := [ ] ;
68616: LD_ADDR_VAR 0 5
68620: PUSH
68621: EMPTY
68622: ST_TO_ADDR
// for i in units do
68623: LD_ADDR_VAR 0 4
68627: PUSH
68628: LD_VAR 0 1
68632: PUSH
68633: FOR_IN
68634: IFFALSE 68677
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68636: LD_ADDR_VAR 0 5
68640: PUSH
68641: LD_VAR 0 5
68645: PPUSH
68646: LD_VAR 0 5
68650: PUSH
68651: LD_INT 1
68653: PLUS
68654: PPUSH
68655: LD_VAR 0 4
68659: PPUSH
68660: LD_VAR 0 2
68664: PPUSH
68665: CALL_OW 259
68669: PPUSH
68670: CALL_OW 2
68674: ST_TO_ADDR
68675: GO 68633
68677: POP
68678: POP
// if not tmp then
68679: LD_VAR 0 5
68683: NOT
68684: IFFALSE 68688
// exit ;
68686: GO 68708
// result := SortListByListDesc ( units , tmp ) ;
68688: LD_ADDR_VAR 0 3
68692: PUSH
68693: LD_VAR 0 1
68697: PPUSH
68698: LD_VAR 0 5
68702: PPUSH
68703: CALL_OW 77
68707: ST_TO_ADDR
// end ;
68708: LD_VAR 0 3
68712: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68713: LD_INT 0
68715: PPUSH
68716: PPUSH
68717: PPUSH
// result := false ;
68718: LD_ADDR_VAR 0 3
68722: PUSH
68723: LD_INT 0
68725: ST_TO_ADDR
// x := GetX ( building ) ;
68726: LD_ADDR_VAR 0 4
68730: PUSH
68731: LD_VAR 0 2
68735: PPUSH
68736: CALL_OW 250
68740: ST_TO_ADDR
// y := GetY ( building ) ;
68741: LD_ADDR_VAR 0 5
68745: PUSH
68746: LD_VAR 0 2
68750: PPUSH
68751: CALL_OW 251
68755: ST_TO_ADDR
// if not building or not x or not y then
68756: LD_VAR 0 2
68760: NOT
68761: PUSH
68762: LD_VAR 0 4
68766: NOT
68767: OR
68768: PUSH
68769: LD_VAR 0 5
68773: NOT
68774: OR
68775: IFFALSE 68779
// exit ;
68777: GO 68871
// if GetTaskList ( unit ) then
68779: LD_VAR 0 1
68783: PPUSH
68784: CALL_OW 437
68788: IFFALSE 68871
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68790: LD_STRING e
68792: PUSH
68793: LD_VAR 0 1
68797: PPUSH
68798: CALL_OW 437
68802: PUSH
68803: LD_INT 1
68805: ARRAY
68806: PUSH
68807: LD_INT 1
68809: ARRAY
68810: EQUAL
68811: PUSH
68812: LD_VAR 0 4
68816: PUSH
68817: LD_VAR 0 1
68821: PPUSH
68822: CALL_OW 437
68826: PUSH
68827: LD_INT 1
68829: ARRAY
68830: PUSH
68831: LD_INT 2
68833: ARRAY
68834: EQUAL
68835: AND
68836: PUSH
68837: LD_VAR 0 5
68841: PUSH
68842: LD_VAR 0 1
68846: PPUSH
68847: CALL_OW 437
68851: PUSH
68852: LD_INT 1
68854: ARRAY
68855: PUSH
68856: LD_INT 3
68858: ARRAY
68859: EQUAL
68860: AND
68861: IFFALSE 68871
// result := true end ;
68863: LD_ADDR_VAR 0 3
68867: PUSH
68868: LD_INT 1
68870: ST_TO_ADDR
// end ;
68871: LD_VAR 0 3
68875: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68876: LD_INT 0
68878: PPUSH
// result := false ;
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_INT 0
68886: ST_TO_ADDR
// if GetTaskList ( unit ) then
68887: LD_VAR 0 1
68891: PPUSH
68892: CALL_OW 437
68896: IFFALSE 68979
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68898: LD_STRING M
68900: PUSH
68901: LD_VAR 0 1
68905: PPUSH
68906: CALL_OW 437
68910: PUSH
68911: LD_INT 1
68913: ARRAY
68914: PUSH
68915: LD_INT 1
68917: ARRAY
68918: EQUAL
68919: PUSH
68920: LD_VAR 0 2
68924: PUSH
68925: LD_VAR 0 1
68929: PPUSH
68930: CALL_OW 437
68934: PUSH
68935: LD_INT 1
68937: ARRAY
68938: PUSH
68939: LD_INT 2
68941: ARRAY
68942: EQUAL
68943: AND
68944: PUSH
68945: LD_VAR 0 3
68949: PUSH
68950: LD_VAR 0 1
68954: PPUSH
68955: CALL_OW 437
68959: PUSH
68960: LD_INT 1
68962: ARRAY
68963: PUSH
68964: LD_INT 3
68966: ARRAY
68967: EQUAL
68968: AND
68969: IFFALSE 68979
// result := true ;
68971: LD_ADDR_VAR 0 4
68975: PUSH
68976: LD_INT 1
68978: ST_TO_ADDR
// end ; end ;
68979: LD_VAR 0 4
68983: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68984: LD_INT 0
68986: PPUSH
68987: PPUSH
68988: PPUSH
68989: PPUSH
// if not unit or not area then
68990: LD_VAR 0 1
68994: NOT
68995: PUSH
68996: LD_VAR 0 2
69000: NOT
69001: OR
69002: IFFALSE 69006
// exit ;
69004: GO 69170
// tmp := AreaToList ( area , i ) ;
69006: LD_ADDR_VAR 0 6
69010: PUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: LD_VAR 0 5
69020: PPUSH
69021: CALL_OW 517
69025: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69026: LD_ADDR_VAR 0 5
69030: PUSH
69031: DOUBLE
69032: LD_INT 1
69034: DEC
69035: ST_TO_ADDR
69036: LD_VAR 0 6
69040: PUSH
69041: LD_INT 1
69043: ARRAY
69044: PUSH
69045: FOR_TO
69046: IFFALSE 69168
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69048: LD_ADDR_VAR 0 7
69052: PUSH
69053: LD_VAR 0 6
69057: PUSH
69058: LD_INT 1
69060: ARRAY
69061: PUSH
69062: LD_VAR 0 5
69066: ARRAY
69067: PUSH
69068: LD_VAR 0 6
69072: PUSH
69073: LD_INT 2
69075: ARRAY
69076: PUSH
69077: LD_VAR 0 5
69081: ARRAY
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69087: LD_VAR 0 7
69091: PUSH
69092: LD_INT 1
69094: ARRAY
69095: PPUSH
69096: LD_VAR 0 7
69100: PUSH
69101: LD_INT 2
69103: ARRAY
69104: PPUSH
69105: CALL_OW 428
69109: PUSH
69110: LD_INT 0
69112: EQUAL
69113: IFFALSE 69166
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69115: LD_VAR 0 1
69119: PPUSH
69120: LD_VAR 0 7
69124: PUSH
69125: LD_INT 1
69127: ARRAY
69128: PPUSH
69129: LD_VAR 0 7
69133: PUSH
69134: LD_INT 2
69136: ARRAY
69137: PPUSH
69138: LD_VAR 0 3
69142: PPUSH
69143: CALL_OW 48
// result := IsPlaced ( unit ) ;
69147: LD_ADDR_VAR 0 4
69151: PUSH
69152: LD_VAR 0 1
69156: PPUSH
69157: CALL_OW 305
69161: ST_TO_ADDR
// exit ;
69162: POP
69163: POP
69164: GO 69170
// end ; end ;
69166: GO 69045
69168: POP
69169: POP
// end ;
69170: LD_VAR 0 4
69174: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69175: LD_INT 0
69177: PPUSH
69178: PPUSH
69179: PPUSH
// if not side or side > 8 then
69180: LD_VAR 0 1
69184: NOT
69185: PUSH
69186: LD_VAR 0 1
69190: PUSH
69191: LD_INT 8
69193: GREATER
69194: OR
69195: IFFALSE 69199
// exit ;
69197: GO 69386
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69199: LD_ADDR_VAR 0 4
69203: PUSH
69204: LD_INT 22
69206: PUSH
69207: LD_VAR 0 1
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 21
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PPUSH
69230: CALL_OW 69
69234: ST_TO_ADDR
// if not tmp then
69235: LD_VAR 0 4
69239: NOT
69240: IFFALSE 69244
// exit ;
69242: GO 69386
// enable_addtolog := true ;
69244: LD_ADDR_OWVAR 81
69248: PUSH
69249: LD_INT 1
69251: ST_TO_ADDR
// AddToLog ( [ ) ;
69252: LD_STRING [
69254: PPUSH
69255: CALL_OW 561
// for i in tmp do
69259: LD_ADDR_VAR 0 3
69263: PUSH
69264: LD_VAR 0 4
69268: PUSH
69269: FOR_IN
69270: IFFALSE 69377
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69272: LD_STRING [
69274: PUSH
69275: LD_VAR 0 3
69279: PPUSH
69280: CALL_OW 266
69284: STR
69285: PUSH
69286: LD_STRING , 
69288: STR
69289: PUSH
69290: LD_VAR 0 3
69294: PPUSH
69295: CALL_OW 250
69299: STR
69300: PUSH
69301: LD_STRING , 
69303: STR
69304: PUSH
69305: LD_VAR 0 3
69309: PPUSH
69310: CALL_OW 251
69314: STR
69315: PUSH
69316: LD_STRING , 
69318: STR
69319: PUSH
69320: LD_VAR 0 3
69324: PPUSH
69325: CALL_OW 254
69329: STR
69330: PUSH
69331: LD_STRING , 
69333: STR
69334: PUSH
69335: LD_VAR 0 3
69339: PPUSH
69340: LD_INT 1
69342: PPUSH
69343: CALL_OW 268
69347: STR
69348: PUSH
69349: LD_STRING , 
69351: STR
69352: PUSH
69353: LD_VAR 0 3
69357: PPUSH
69358: LD_INT 2
69360: PPUSH
69361: CALL_OW 268
69365: STR
69366: PUSH
69367: LD_STRING ],
69369: STR
69370: PPUSH
69371: CALL_OW 561
// end ;
69375: GO 69269
69377: POP
69378: POP
// AddToLog ( ]; ) ;
69379: LD_STRING ];
69381: PPUSH
69382: CALL_OW 561
// end ;
69386: LD_VAR 0 2
69390: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69391: LD_INT 0
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
69397: PPUSH
// if not area or not rate or not max then
69398: LD_VAR 0 1
69402: NOT
69403: PUSH
69404: LD_VAR 0 2
69408: NOT
69409: OR
69410: PUSH
69411: LD_VAR 0 4
69415: NOT
69416: OR
69417: IFFALSE 69421
// exit ;
69419: GO 69610
// while 1 do
69421: LD_INT 1
69423: IFFALSE 69610
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69425: LD_ADDR_VAR 0 9
69429: PUSH
69430: LD_VAR 0 1
69434: PPUSH
69435: LD_INT 1
69437: PPUSH
69438: CALL_OW 287
69442: PUSH
69443: LD_INT 10
69445: MUL
69446: ST_TO_ADDR
// r := rate / 10 ;
69447: LD_ADDR_VAR 0 7
69451: PUSH
69452: LD_VAR 0 2
69456: PUSH
69457: LD_INT 10
69459: DIVREAL
69460: ST_TO_ADDR
// time := 1 1$00 ;
69461: LD_ADDR_VAR 0 8
69465: PUSH
69466: LD_INT 2100
69468: ST_TO_ADDR
// if amount < min then
69469: LD_VAR 0 9
69473: PUSH
69474: LD_VAR 0 3
69478: LESS
69479: IFFALSE 69497
// r := r * 2 else
69481: LD_ADDR_VAR 0 7
69485: PUSH
69486: LD_VAR 0 7
69490: PUSH
69491: LD_INT 2
69493: MUL
69494: ST_TO_ADDR
69495: GO 69523
// if amount > max then
69497: LD_VAR 0 9
69501: PUSH
69502: LD_VAR 0 4
69506: GREATER
69507: IFFALSE 69523
// r := r / 2 ;
69509: LD_ADDR_VAR 0 7
69513: PUSH
69514: LD_VAR 0 7
69518: PUSH
69519: LD_INT 2
69521: DIVREAL
69522: ST_TO_ADDR
// time := time / r ;
69523: LD_ADDR_VAR 0 8
69527: PUSH
69528: LD_VAR 0 8
69532: PUSH
69533: LD_VAR 0 7
69537: DIVREAL
69538: ST_TO_ADDR
// if time < 0 then
69539: LD_VAR 0 8
69543: PUSH
69544: LD_INT 0
69546: LESS
69547: IFFALSE 69564
// time := time * - 1 ;
69549: LD_ADDR_VAR 0 8
69553: PUSH
69554: LD_VAR 0 8
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: MUL
69563: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69564: LD_VAR 0 8
69568: PUSH
69569: LD_INT 35
69571: PPUSH
69572: LD_INT 875
69574: PPUSH
69575: CALL_OW 12
69579: PLUS
69580: PPUSH
69581: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69585: LD_INT 1
69587: PPUSH
69588: LD_INT 5
69590: PPUSH
69591: CALL_OW 12
69595: PPUSH
69596: LD_VAR 0 1
69600: PPUSH
69601: LD_INT 1
69603: PPUSH
69604: CALL_OW 55
// end ;
69608: GO 69421
// end ;
69610: LD_VAR 0 5
69614: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69615: LD_INT 0
69617: PPUSH
69618: PPUSH
69619: PPUSH
69620: PPUSH
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
// if not turrets or not factories then
69625: LD_VAR 0 1
69629: NOT
69630: PUSH
69631: LD_VAR 0 2
69635: NOT
69636: OR
69637: IFFALSE 69641
// exit ;
69639: GO 69948
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69641: LD_ADDR_VAR 0 10
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: LD_INT 6
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: PUSH
69669: LD_INT 5
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 24
69683: PUSH
69684: LD_INT 25
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 23
69693: PUSH
69694: LD_INT 27
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 42
69707: PUSH
69708: LD_INT 43
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 44
69717: PUSH
69718: LD_INT 46
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 45
69727: PUSH
69728: LD_INT 47
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: LIST
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: LIST
69744: ST_TO_ADDR
// result := [ ] ;
69745: LD_ADDR_VAR 0 3
69749: PUSH
69750: EMPTY
69751: ST_TO_ADDR
// for i in turrets do
69752: LD_ADDR_VAR 0 4
69756: PUSH
69757: LD_VAR 0 1
69761: PUSH
69762: FOR_IN
69763: IFFALSE 69946
// begin nat := GetNation ( i ) ;
69765: LD_ADDR_VAR 0 7
69769: PUSH
69770: LD_VAR 0 4
69774: PPUSH
69775: CALL_OW 248
69779: ST_TO_ADDR
// weapon := 0 ;
69780: LD_ADDR_VAR 0 8
69784: PUSH
69785: LD_INT 0
69787: ST_TO_ADDR
// if not nat then
69788: LD_VAR 0 7
69792: NOT
69793: IFFALSE 69797
// continue ;
69795: GO 69762
// for j in list [ nat ] do
69797: LD_ADDR_VAR 0 5
69801: PUSH
69802: LD_VAR 0 10
69806: PUSH
69807: LD_VAR 0 7
69811: ARRAY
69812: PUSH
69813: FOR_IN
69814: IFFALSE 69855
// if GetBWeapon ( i ) = j [ 1 ] then
69816: LD_VAR 0 4
69820: PPUSH
69821: CALL_OW 269
69825: PUSH
69826: LD_VAR 0 5
69830: PUSH
69831: LD_INT 1
69833: ARRAY
69834: EQUAL
69835: IFFALSE 69853
// begin weapon := j [ 2 ] ;
69837: LD_ADDR_VAR 0 8
69841: PUSH
69842: LD_VAR 0 5
69846: PUSH
69847: LD_INT 2
69849: ARRAY
69850: ST_TO_ADDR
// break ;
69851: GO 69855
// end ;
69853: GO 69813
69855: POP
69856: POP
// if not weapon then
69857: LD_VAR 0 8
69861: NOT
69862: IFFALSE 69866
// continue ;
69864: GO 69762
// for k in factories do
69866: LD_ADDR_VAR 0 6
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: FOR_IN
69877: IFFALSE 69942
// begin weapons := AvailableWeaponList ( k ) ;
69879: LD_ADDR_VAR 0 9
69883: PUSH
69884: LD_VAR 0 6
69888: PPUSH
69889: CALL_OW 478
69893: ST_TO_ADDR
// if not weapons then
69894: LD_VAR 0 9
69898: NOT
69899: IFFALSE 69903
// continue ;
69901: GO 69876
// if weapon in weapons then
69903: LD_VAR 0 8
69907: PUSH
69908: LD_VAR 0 9
69912: IN
69913: IFFALSE 69940
// begin result := [ i , weapon ] ;
69915: LD_ADDR_VAR 0 3
69919: PUSH
69920: LD_VAR 0 4
69924: PUSH
69925: LD_VAR 0 8
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: ST_TO_ADDR
// exit ;
69934: POP
69935: POP
69936: POP
69937: POP
69938: GO 69948
// end ; end ;
69940: GO 69876
69942: POP
69943: POP
// end ;
69944: GO 69762
69946: POP
69947: POP
// end ;
69948: LD_VAR 0 3
69952: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69953: LD_INT 0
69955: PPUSH
// if not side or side > 8 then
69956: LD_VAR 0 3
69960: NOT
69961: PUSH
69962: LD_VAR 0 3
69966: PUSH
69967: LD_INT 8
69969: GREATER
69970: OR
69971: IFFALSE 69975
// exit ;
69973: GO 70034
// if not range then
69975: LD_VAR 0 4
69979: NOT
69980: IFFALSE 69991
// range := - 12 ;
69982: LD_ADDR_VAR 0 4
69986: PUSH
69987: LD_INT 12
69989: NEG
69990: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69991: LD_VAR 0 1
69995: PPUSH
69996: LD_VAR 0 2
70000: PPUSH
70001: LD_VAR 0 3
70005: PPUSH
70006: LD_VAR 0 4
70010: PPUSH
70011: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70015: LD_VAR 0 1
70019: PPUSH
70020: LD_VAR 0 2
70024: PPUSH
70025: LD_VAR 0 3
70029: PPUSH
70030: CALL_OW 331
// end ;
70034: LD_VAR 0 5
70038: RET
// export function Video ( mode ) ; begin
70039: LD_INT 0
70041: PPUSH
// ingame_video = mode ;
70042: LD_ADDR_OWVAR 52
70046: PUSH
70047: LD_VAR 0 1
70051: ST_TO_ADDR
// interface_hidden = mode ;
70052: LD_ADDR_OWVAR 54
70056: PUSH
70057: LD_VAR 0 1
70061: ST_TO_ADDR
// end ;
70062: LD_VAR 0 2
70066: RET
// export function Join ( array , element ) ; begin
70067: LD_INT 0
70069: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70070: LD_ADDR_VAR 0 3
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: LD_VAR 0 1
70084: PUSH
70085: LD_INT 1
70087: PLUS
70088: PPUSH
70089: LD_VAR 0 2
70093: PPUSH
70094: CALL_OW 1
70098: ST_TO_ADDR
// end ;
70099: LD_VAR 0 3
70103: RET
// export function JoinUnion ( array , element ) ; begin
70104: LD_INT 0
70106: PPUSH
// result := array union element ;
70107: LD_ADDR_VAR 0 3
70111: PUSH
70112: LD_VAR 0 1
70116: PUSH
70117: LD_VAR 0 2
70121: UNION
70122: ST_TO_ADDR
// end ;
70123: LD_VAR 0 3
70127: RET
// export function GetBehemoths ( side ) ; begin
70128: LD_INT 0
70130: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70131: LD_ADDR_VAR 0 2
70135: PUSH
70136: LD_INT 22
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 31
70150: PUSH
70151: LD_INT 25
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PPUSH
70162: CALL_OW 69
70166: ST_TO_ADDR
// end ;
70167: LD_VAR 0 2
70171: RET
// export function Shuffle ( array ) ; var i , index ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
70176: PPUSH
// result := [ ] ;
70177: LD_ADDR_VAR 0 2
70181: PUSH
70182: EMPTY
70183: ST_TO_ADDR
// if not array then
70184: LD_VAR 0 1
70188: NOT
70189: IFFALSE 70193
// exit ;
70191: GO 70292
// Randomize ;
70193: CALL_OW 10
// for i = array downto 1 do
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: DOUBLE
70203: LD_VAR 0 1
70207: INC
70208: ST_TO_ADDR
70209: LD_INT 1
70211: PUSH
70212: FOR_DOWNTO
70213: IFFALSE 70290
// begin index := rand ( 1 , array ) ;
70215: LD_ADDR_VAR 0 4
70219: PUSH
70220: LD_INT 1
70222: PPUSH
70223: LD_VAR 0 1
70227: PPUSH
70228: CALL_OW 12
70232: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70233: LD_ADDR_VAR 0 2
70237: PUSH
70238: LD_VAR 0 2
70242: PPUSH
70243: LD_VAR 0 2
70247: PUSH
70248: LD_INT 1
70250: PLUS
70251: PPUSH
70252: LD_VAR 0 1
70256: PUSH
70257: LD_VAR 0 4
70261: ARRAY
70262: PPUSH
70263: CALL_OW 2
70267: ST_TO_ADDR
// array := Delete ( array , index ) ;
70268: LD_ADDR_VAR 0 1
70272: PUSH
70273: LD_VAR 0 1
70277: PPUSH
70278: LD_VAR 0 4
70282: PPUSH
70283: CALL_OW 3
70287: ST_TO_ADDR
// end ;
70288: GO 70212
70290: POP
70291: POP
// end ;
70292: LD_VAR 0 2
70296: RET
// export function GetBaseMaterials ( base ) ; begin
70297: LD_INT 0
70299: PPUSH
// result := [ 0 , 0 , 0 ] ;
70300: LD_ADDR_VAR 0 2
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// if not base then
70319: LD_VAR 0 1
70323: NOT
70324: IFFALSE 70328
// exit ;
70326: GO 70377
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70328: LD_ADDR_VAR 0 2
70332: PUSH
70333: LD_VAR 0 1
70337: PPUSH
70338: LD_INT 1
70340: PPUSH
70341: CALL_OW 275
70345: PUSH
70346: LD_VAR 0 1
70350: PPUSH
70351: LD_INT 2
70353: PPUSH
70354: CALL_OW 275
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: LD_INT 3
70366: PPUSH
70367: CALL_OW 275
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: ST_TO_ADDR
// end ;
70377: LD_VAR 0 2
70381: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70382: LD_INT 0
70384: PPUSH
70385: PPUSH
// result := array ;
70386: LD_ADDR_VAR 0 3
70390: PUSH
70391: LD_VAR 0 1
70395: ST_TO_ADDR
// if size >= result then
70396: LD_VAR 0 2
70400: PUSH
70401: LD_VAR 0 3
70405: GREATEREQUAL
70406: IFFALSE 70410
// exit ;
70408: GO 70460
// if size then
70410: LD_VAR 0 2
70414: IFFALSE 70460
// for i := array downto size do
70416: LD_ADDR_VAR 0 4
70420: PUSH
70421: DOUBLE
70422: LD_VAR 0 1
70426: INC
70427: ST_TO_ADDR
70428: LD_VAR 0 2
70432: PUSH
70433: FOR_DOWNTO
70434: IFFALSE 70458
// result := Delete ( result , result ) ;
70436: LD_ADDR_VAR 0 3
70440: PUSH
70441: LD_VAR 0 3
70445: PPUSH
70446: LD_VAR 0 3
70450: PPUSH
70451: CALL_OW 3
70455: ST_TO_ADDR
70456: GO 70433
70458: POP
70459: POP
// end ;
70460: LD_VAR 0 3
70464: RET
// export function ComExit ( unit ) ; var tmp ; begin
70465: LD_INT 0
70467: PPUSH
70468: PPUSH
// if not IsInUnit ( unit ) then
70469: LD_VAR 0 1
70473: PPUSH
70474: CALL_OW 310
70478: NOT
70479: IFFALSE 70483
// exit ;
70481: GO 70543
// tmp := IsInUnit ( unit ) ;
70483: LD_ADDR_VAR 0 3
70487: PUSH
70488: LD_VAR 0 1
70492: PPUSH
70493: CALL_OW 310
70497: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70498: LD_VAR 0 3
70502: PPUSH
70503: CALL_OW 247
70507: PUSH
70508: LD_INT 2
70510: EQUAL
70511: IFFALSE 70524
// ComExitVehicle ( unit ) else
70513: LD_VAR 0 1
70517: PPUSH
70518: CALL_OW 121
70522: GO 70533
// ComExitBuilding ( unit ) ;
70524: LD_VAR 0 1
70528: PPUSH
70529: CALL_OW 122
// result := tmp ;
70533: LD_ADDR_VAR 0 2
70537: PUSH
70538: LD_VAR 0 3
70542: ST_TO_ADDR
// end ;
70543: LD_VAR 0 2
70547: RET
// export function ComExitAll ( units ) ; var i ; begin
70548: LD_INT 0
70550: PPUSH
70551: PPUSH
// if not units then
70552: LD_VAR 0 1
70556: NOT
70557: IFFALSE 70561
// exit ;
70559: GO 70587
// for i in units do
70561: LD_ADDR_VAR 0 3
70565: PUSH
70566: LD_VAR 0 1
70570: PUSH
70571: FOR_IN
70572: IFFALSE 70585
// ComExit ( i ) ;
70574: LD_VAR 0 3
70578: PPUSH
70579: CALL 70465 0 1
70583: GO 70571
70585: POP
70586: POP
// end ;
70587: LD_VAR 0 2
70591: RET
// export function ResetHc ; begin
70592: LD_INT 0
70594: PPUSH
// InitHc ;
70595: CALL_OW 19
// hc_importance := 0 ;
70599: LD_ADDR_OWVAR 32
70603: PUSH
70604: LD_INT 0
70606: ST_TO_ADDR
// end ;
70607: LD_VAR 0 1
70611: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70612: LD_INT 0
70614: PPUSH
70615: PPUSH
70616: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70617: LD_ADDR_VAR 0 6
70621: PUSH
70622: LD_VAR 0 1
70626: PUSH
70627: LD_VAR 0 3
70631: PLUS
70632: PUSH
70633: LD_INT 2
70635: DIV
70636: ST_TO_ADDR
// if _x < 0 then
70637: LD_VAR 0 6
70641: PUSH
70642: LD_INT 0
70644: LESS
70645: IFFALSE 70662
// _x := _x * - 1 ;
70647: LD_ADDR_VAR 0 6
70651: PUSH
70652: LD_VAR 0 6
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: MUL
70661: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70662: LD_ADDR_VAR 0 7
70666: PUSH
70667: LD_VAR 0 2
70671: PUSH
70672: LD_VAR 0 4
70676: PLUS
70677: PUSH
70678: LD_INT 2
70680: DIV
70681: ST_TO_ADDR
// if _y < 0 then
70682: LD_VAR 0 7
70686: PUSH
70687: LD_INT 0
70689: LESS
70690: IFFALSE 70707
// _y := _y * - 1 ;
70692: LD_ADDR_VAR 0 7
70696: PUSH
70697: LD_VAR 0 7
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: MUL
70706: ST_TO_ADDR
// result := [ _x , _y ] ;
70707: LD_ADDR_VAR 0 5
70711: PUSH
70712: LD_VAR 0 6
70716: PUSH
70717: LD_VAR 0 7
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: ST_TO_ADDR
// end ;
70726: LD_VAR 0 5
70730: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70731: LD_INT 0
70733: PPUSH
70734: PPUSH
70735: PPUSH
70736: PPUSH
// task := GetTaskList ( unit ) ;
70737: LD_ADDR_VAR 0 7
70741: PUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: CALL_OW 437
70751: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70752: LD_VAR 0 7
70756: NOT
70757: PUSH
70758: LD_VAR 0 1
70762: PPUSH
70763: LD_VAR 0 2
70767: PPUSH
70768: CALL_OW 308
70772: NOT
70773: AND
70774: IFFALSE 70778
// exit ;
70776: GO 70896
// if IsInArea ( unit , area ) then
70778: LD_VAR 0 1
70782: PPUSH
70783: LD_VAR 0 2
70787: PPUSH
70788: CALL_OW 308
70792: IFFALSE 70810
// begin ComMoveToArea ( unit , goAway ) ;
70794: LD_VAR 0 1
70798: PPUSH
70799: LD_VAR 0 3
70803: PPUSH
70804: CALL_OW 113
// exit ;
70808: GO 70896
// end ; if task [ 1 ] [ 1 ] <> M then
70810: LD_VAR 0 7
70814: PUSH
70815: LD_INT 1
70817: ARRAY
70818: PUSH
70819: LD_INT 1
70821: ARRAY
70822: PUSH
70823: LD_STRING M
70825: NONEQUAL
70826: IFFALSE 70830
// exit ;
70828: GO 70896
// x := task [ 1 ] [ 2 ] ;
70830: LD_ADDR_VAR 0 5
70834: PUSH
70835: LD_VAR 0 7
70839: PUSH
70840: LD_INT 1
70842: ARRAY
70843: PUSH
70844: LD_INT 2
70846: ARRAY
70847: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70848: LD_ADDR_VAR 0 6
70852: PUSH
70853: LD_VAR 0 7
70857: PUSH
70858: LD_INT 1
70860: ARRAY
70861: PUSH
70862: LD_INT 3
70864: ARRAY
70865: ST_TO_ADDR
// if InArea ( x , y , area ) then
70866: LD_VAR 0 5
70870: PPUSH
70871: LD_VAR 0 6
70875: PPUSH
70876: LD_VAR 0 2
70880: PPUSH
70881: CALL_OW 309
70885: IFFALSE 70896
// ComStop ( unit ) ;
70887: LD_VAR 0 1
70891: PPUSH
70892: CALL_OW 141
// end ;
70896: LD_VAR 0 4
70900: RET
// export function Abs ( value ) ; begin
70901: LD_INT 0
70903: PPUSH
// result := value ;
70904: LD_ADDR_VAR 0 2
70908: PUSH
70909: LD_VAR 0 1
70913: ST_TO_ADDR
// if value < 0 then
70914: LD_VAR 0 1
70918: PUSH
70919: LD_INT 0
70921: LESS
70922: IFFALSE 70939
// result := value * - 1 ;
70924: LD_ADDR_VAR 0 2
70928: PUSH
70929: LD_VAR 0 1
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: MUL
70938: ST_TO_ADDR
// end ;
70939: LD_VAR 0 2
70943: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70944: LD_INT 0
70946: PPUSH
70947: PPUSH
70948: PPUSH
70949: PPUSH
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
// if not unit or not building then
70954: LD_VAR 0 1
70958: NOT
70959: PUSH
70960: LD_VAR 0 2
70964: NOT
70965: OR
70966: IFFALSE 70970
// exit ;
70968: GO 71196
// x := GetX ( building ) ;
70970: LD_ADDR_VAR 0 4
70974: PUSH
70975: LD_VAR 0 2
70979: PPUSH
70980: CALL_OW 250
70984: ST_TO_ADDR
// y := GetY ( building ) ;
70985: LD_ADDR_VAR 0 6
70989: PUSH
70990: LD_VAR 0 2
70994: PPUSH
70995: CALL_OW 251
70999: ST_TO_ADDR
// d := GetDir ( building ) ;
71000: LD_ADDR_VAR 0 8
71004: PUSH
71005: LD_VAR 0 2
71009: PPUSH
71010: CALL_OW 254
71014: ST_TO_ADDR
// r := 4 ;
71015: LD_ADDR_VAR 0 9
71019: PUSH
71020: LD_INT 4
71022: ST_TO_ADDR
// for i := 1 to 5 do
71023: LD_ADDR_VAR 0 10
71027: PUSH
71028: DOUBLE
71029: LD_INT 1
71031: DEC
71032: ST_TO_ADDR
71033: LD_INT 5
71035: PUSH
71036: FOR_TO
71037: IFFALSE 71194
// begin _x := ShiftX ( x , d , r + i ) ;
71039: LD_ADDR_VAR 0 5
71043: PUSH
71044: LD_VAR 0 4
71048: PPUSH
71049: LD_VAR 0 8
71053: PPUSH
71054: LD_VAR 0 9
71058: PUSH
71059: LD_VAR 0 10
71063: PLUS
71064: PPUSH
71065: CALL_OW 272
71069: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71070: LD_ADDR_VAR 0 7
71074: PUSH
71075: LD_VAR 0 6
71079: PPUSH
71080: LD_VAR 0 8
71084: PPUSH
71085: LD_VAR 0 9
71089: PUSH
71090: LD_VAR 0 10
71094: PLUS
71095: PPUSH
71096: CALL_OW 273
71100: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71101: LD_VAR 0 5
71105: PPUSH
71106: LD_VAR 0 7
71110: PPUSH
71111: CALL_OW 488
71115: PUSH
71116: LD_VAR 0 5
71120: PPUSH
71121: LD_VAR 0 7
71125: PPUSH
71126: CALL_OW 428
71130: PPUSH
71131: CALL_OW 247
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: LD_INT 2
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: IN
71146: NOT
71147: AND
71148: IFFALSE 71192
// begin ComMoveXY ( unit , _x , _y ) ;
71150: LD_VAR 0 1
71154: PPUSH
71155: LD_VAR 0 5
71159: PPUSH
71160: LD_VAR 0 7
71164: PPUSH
71165: CALL_OW 111
// result := [ _x , _y ] ;
71169: LD_ADDR_VAR 0 3
71173: PUSH
71174: LD_VAR 0 5
71178: PUSH
71179: LD_VAR 0 7
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: ST_TO_ADDR
// exit ;
71188: POP
71189: POP
71190: GO 71196
// end ; end ;
71192: GO 71036
71194: POP
71195: POP
// end ;
71196: LD_VAR 0 3
71200: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71201: LD_INT 0
71203: PPUSH
71204: PPUSH
71205: PPUSH
// result := 0 ;
71206: LD_ADDR_VAR 0 3
71210: PUSH
71211: LD_INT 0
71213: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71214: LD_VAR 0 1
71218: PUSH
71219: LD_INT 0
71221: LESS
71222: PUSH
71223: LD_VAR 0 1
71227: PUSH
71228: LD_INT 8
71230: GREATER
71231: OR
71232: PUSH
71233: LD_VAR 0 2
71237: PUSH
71238: LD_INT 0
71240: LESS
71241: OR
71242: PUSH
71243: LD_VAR 0 2
71247: PUSH
71248: LD_INT 8
71250: GREATER
71251: OR
71252: IFFALSE 71256
// exit ;
71254: GO 71331
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71256: LD_ADDR_VAR 0 4
71260: PUSH
71261: LD_INT 22
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PPUSH
71273: CALL_OW 69
71277: PUSH
71278: FOR_IN
71279: IFFALSE 71329
// begin un := UnitShoot ( i ) ;
71281: LD_ADDR_VAR 0 5
71285: PUSH
71286: LD_VAR 0 4
71290: PPUSH
71291: CALL_OW 504
71295: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71296: LD_VAR 0 5
71300: PPUSH
71301: CALL_OW 255
71305: PUSH
71306: LD_VAR 0 1
71310: EQUAL
71311: IFFALSE 71327
// begin result := un ;
71313: LD_ADDR_VAR 0 3
71317: PUSH
71318: LD_VAR 0 5
71322: ST_TO_ADDR
// exit ;
71323: POP
71324: POP
71325: GO 71331
// end ; end ;
71327: GO 71278
71329: POP
71330: POP
// end ;
71331: LD_VAR 0 3
71335: RET
// export function GetCargoBay ( units ) ; begin
71336: LD_INT 0
71338: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71339: LD_ADDR_VAR 0 2
71343: PUSH
71344: LD_VAR 0 1
71348: PPUSH
71349: LD_INT 2
71351: PUSH
71352: LD_INT 34
71354: PUSH
71355: LD_INT 12
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 34
71364: PUSH
71365: LD_INT 51
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 34
71374: PUSH
71375: LD_INT 32
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 34
71384: PUSH
71385: LD_EXP 33
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: PPUSH
71401: CALL_OW 72
71405: ST_TO_ADDR
// end ;
71406: LD_VAR 0 2
71410: RET
// export function Negate ( value ) ; begin
71411: LD_INT 0
71413: PPUSH
// result := not value ;
71414: LD_ADDR_VAR 0 2
71418: PUSH
71419: LD_VAR 0 1
71423: NOT
71424: ST_TO_ADDR
// end ;
71425: LD_VAR 0 2
71429: RET
// export function Inc ( value ) ; begin
71430: LD_INT 0
71432: PPUSH
// result := value + 1 ;
71433: LD_ADDR_VAR 0 2
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: LD_INT 1
71445: PLUS
71446: ST_TO_ADDR
// end ;
71447: LD_VAR 0 2
71451: RET
// export function Dec ( value ) ; begin
71452: LD_INT 0
71454: PPUSH
// result := value - 1 ;
71455: LD_ADDR_VAR 0 2
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 1
71467: MINUS
71468: ST_TO_ADDR
// end ;
71469: LD_VAR 0 2
71473: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71474: LD_INT 0
71476: PPUSH
71477: PPUSH
71478: PPUSH
71479: PPUSH
71480: PPUSH
71481: PPUSH
71482: PPUSH
71483: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71484: LD_VAR 0 1
71488: PPUSH
71489: LD_VAR 0 2
71493: PPUSH
71494: CALL_OW 488
71498: NOT
71499: PUSH
71500: LD_VAR 0 3
71504: PPUSH
71505: LD_VAR 0 4
71509: PPUSH
71510: CALL_OW 488
71514: NOT
71515: OR
71516: IFFALSE 71529
// begin result := - 1 ;
71518: LD_ADDR_VAR 0 5
71522: PUSH
71523: LD_INT 1
71525: NEG
71526: ST_TO_ADDR
// exit ;
71527: GO 71764
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71529: LD_ADDR_VAR 0 12
71533: PUSH
71534: LD_VAR 0 1
71538: PPUSH
71539: LD_VAR 0 2
71543: PPUSH
71544: LD_VAR 0 3
71548: PPUSH
71549: LD_VAR 0 4
71553: PPUSH
71554: CALL 70612 0 4
71558: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71559: LD_ADDR_VAR 0 11
71563: PUSH
71564: LD_VAR 0 1
71568: PPUSH
71569: LD_VAR 0 2
71573: PPUSH
71574: LD_VAR 0 12
71578: PUSH
71579: LD_INT 1
71581: ARRAY
71582: PPUSH
71583: LD_VAR 0 12
71587: PUSH
71588: LD_INT 2
71590: ARRAY
71591: PPUSH
71592: CALL_OW 298
71596: ST_TO_ADDR
// distance := 9999 ;
71597: LD_ADDR_VAR 0 10
71601: PUSH
71602: LD_INT 9999
71604: ST_TO_ADDR
// for i := 0 to 5 do
71605: LD_ADDR_VAR 0 6
71609: PUSH
71610: DOUBLE
71611: LD_INT 0
71613: DEC
71614: ST_TO_ADDR
71615: LD_INT 5
71617: PUSH
71618: FOR_TO
71619: IFFALSE 71762
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71621: LD_ADDR_VAR 0 7
71625: PUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: LD_VAR 0 6
71635: PPUSH
71636: LD_VAR 0 11
71640: PPUSH
71641: CALL_OW 272
71645: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71646: LD_ADDR_VAR 0 8
71650: PUSH
71651: LD_VAR 0 2
71655: PPUSH
71656: LD_VAR 0 6
71660: PPUSH
71661: LD_VAR 0 11
71665: PPUSH
71666: CALL_OW 273
71670: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71671: LD_VAR 0 7
71675: PPUSH
71676: LD_VAR 0 8
71680: PPUSH
71681: CALL_OW 488
71685: NOT
71686: IFFALSE 71690
// continue ;
71688: GO 71618
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71690: LD_ADDR_VAR 0 9
71694: PUSH
71695: LD_VAR 0 12
71699: PUSH
71700: LD_INT 1
71702: ARRAY
71703: PPUSH
71704: LD_VAR 0 12
71708: PUSH
71709: LD_INT 2
71711: ARRAY
71712: PPUSH
71713: LD_VAR 0 7
71717: PPUSH
71718: LD_VAR 0 8
71722: PPUSH
71723: CALL_OW 298
71727: ST_TO_ADDR
// if tmp < distance then
71728: LD_VAR 0 9
71732: PUSH
71733: LD_VAR 0 10
71737: LESS
71738: IFFALSE 71760
// begin result := i ;
71740: LD_ADDR_VAR 0 5
71744: PUSH
71745: LD_VAR 0 6
71749: ST_TO_ADDR
// distance := tmp ;
71750: LD_ADDR_VAR 0 10
71754: PUSH
71755: LD_VAR 0 9
71759: ST_TO_ADDR
// end ; end ;
71760: GO 71618
71762: POP
71763: POP
// end ;
71764: LD_VAR 0 5
71768: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71769: LD_INT 0
71771: PPUSH
71772: PPUSH
// if not driver or not IsInUnit ( driver ) then
71773: LD_VAR 0 1
71777: NOT
71778: PUSH
71779: LD_VAR 0 1
71783: PPUSH
71784: CALL_OW 310
71788: NOT
71789: OR
71790: IFFALSE 71794
// exit ;
71792: GO 71884
// vehicle := IsInUnit ( driver ) ;
71794: LD_ADDR_VAR 0 3
71798: PUSH
71799: LD_VAR 0 1
71803: PPUSH
71804: CALL_OW 310
71808: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71809: LD_VAR 0 1
71813: PPUSH
71814: LD_STRING \
71816: PUSH
71817: LD_INT 0
71819: PUSH
71820: LD_INT 0
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 0
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: PUSH
71844: LD_STRING E
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: LD_INT 0
71852: PUSH
71853: LD_VAR 0 3
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: LD_INT 0
71863: PUSH
71864: LD_INT 0
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PPUSH
71880: CALL_OW 446
// end ;
71884: LD_VAR 0 2
71888: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71889: LD_INT 0
71891: PPUSH
71892: PPUSH
// if not driver or not IsInUnit ( driver ) then
71893: LD_VAR 0 1
71897: NOT
71898: PUSH
71899: LD_VAR 0 1
71903: PPUSH
71904: CALL_OW 310
71908: NOT
71909: OR
71910: IFFALSE 71914
// exit ;
71912: GO 72004
// vehicle := IsInUnit ( driver ) ;
71914: LD_ADDR_VAR 0 3
71918: PUSH
71919: LD_VAR 0 1
71923: PPUSH
71924: CALL_OW 310
71928: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71929: LD_VAR 0 1
71933: PPUSH
71934: LD_STRING \
71936: PUSH
71937: LD_INT 0
71939: PUSH
71940: LD_INT 0
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: LD_INT 0
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: LD_INT 0
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: PUSH
71964: LD_STRING E
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: LD_INT 0
71972: PUSH
71973: LD_VAR 0 3
71977: PUSH
71978: LD_INT 0
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PPUSH
72000: CALL_OW 447
// end ;
72004: LD_VAR 0 2
72008: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72009: LD_INT 0
72011: PPUSH
72012: PPUSH
72013: PPUSH
// tmp := [ ] ;
72014: LD_ADDR_VAR 0 5
72018: PUSH
72019: EMPTY
72020: ST_TO_ADDR
// for i in units do
72021: LD_ADDR_VAR 0 4
72025: PUSH
72026: LD_VAR 0 1
72030: PUSH
72031: FOR_IN
72032: IFFALSE 72070
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72034: LD_ADDR_VAR 0 5
72038: PUSH
72039: LD_VAR 0 5
72043: PPUSH
72044: LD_VAR 0 5
72048: PUSH
72049: LD_INT 1
72051: PLUS
72052: PPUSH
72053: LD_VAR 0 4
72057: PPUSH
72058: CALL_OW 256
72062: PPUSH
72063: CALL_OW 2
72067: ST_TO_ADDR
72068: GO 72031
72070: POP
72071: POP
// if not tmp then
72072: LD_VAR 0 5
72076: NOT
72077: IFFALSE 72081
// exit ;
72079: GO 72129
// if asc then
72081: LD_VAR 0 2
72085: IFFALSE 72109
// result := SortListByListAsc ( units , tmp ) else
72087: LD_ADDR_VAR 0 3
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: LD_VAR 0 5
72101: PPUSH
72102: CALL_OW 76
72106: ST_TO_ADDR
72107: GO 72129
// result := SortListByListDesc ( units , tmp ) ;
72109: LD_ADDR_VAR 0 3
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 5
72123: PPUSH
72124: CALL_OW 77
72128: ST_TO_ADDR
// end ;
72129: LD_VAR 0 3
72133: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72134: LD_INT 0
72136: PPUSH
72137: PPUSH
// task := GetTaskList ( mech ) ;
72138: LD_ADDR_VAR 0 4
72142: PUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: CALL_OW 437
72152: ST_TO_ADDR
// if not task then
72153: LD_VAR 0 4
72157: NOT
72158: IFFALSE 72162
// exit ;
72160: GO 72204
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72162: LD_ADDR_VAR 0 3
72166: PUSH
72167: LD_VAR 0 4
72171: PUSH
72172: LD_INT 1
72174: ARRAY
72175: PUSH
72176: LD_INT 1
72178: ARRAY
72179: PUSH
72180: LD_STRING r
72182: EQUAL
72183: PUSH
72184: LD_VAR 0 4
72188: PUSH
72189: LD_INT 1
72191: ARRAY
72192: PUSH
72193: LD_INT 4
72195: ARRAY
72196: PUSH
72197: LD_VAR 0 2
72201: EQUAL
72202: AND
72203: ST_TO_ADDR
// end ;
72204: LD_VAR 0 3
72208: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72209: LD_INT 0
72211: PPUSH
// SetDir ( unit , d ) ;
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_VAR 0 4
72221: PPUSH
72222: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72226: LD_VAR 0 1
72230: PPUSH
72231: LD_VAR 0 2
72235: PPUSH
72236: LD_VAR 0 3
72240: PPUSH
72241: LD_VAR 0 5
72245: PPUSH
72246: CALL_OW 48
// end ;
72250: LD_VAR 0 6
72254: RET
// export function ToNaturalNumber ( number ) ; begin
72255: LD_INT 0
72257: PPUSH
// result := number div 1 ;
72258: LD_ADDR_VAR 0 2
72262: PUSH
72263: LD_VAR 0 1
72267: PUSH
72268: LD_INT 1
72270: DIV
72271: ST_TO_ADDR
// if number < 0 then
72272: LD_VAR 0 1
72276: PUSH
72277: LD_INT 0
72279: LESS
72280: IFFALSE 72290
// result := 0 ;
72282: LD_ADDR_VAR 0 2
72286: PUSH
72287: LD_INT 0
72289: ST_TO_ADDR
// end ;
72290: LD_VAR 0 2
72294: RET
// export function SortByClass ( units , class ) ; var un ; begin
72295: LD_INT 0
72297: PPUSH
72298: PPUSH
// if not units or not class then
72299: LD_VAR 0 1
72303: NOT
72304: PUSH
72305: LD_VAR 0 2
72309: NOT
72310: OR
72311: IFFALSE 72315
// exit ;
72313: GO 72410
// result := [ ] ;
72315: LD_ADDR_VAR 0 3
72319: PUSH
72320: EMPTY
72321: ST_TO_ADDR
// for un in units do
72322: LD_ADDR_VAR 0 4
72326: PUSH
72327: LD_VAR 0 1
72331: PUSH
72332: FOR_IN
72333: IFFALSE 72408
// if GetClass ( un ) = class then
72335: LD_VAR 0 4
72339: PPUSH
72340: CALL_OW 257
72344: PUSH
72345: LD_VAR 0 2
72349: EQUAL
72350: IFFALSE 72377
// result := Insert ( result , 1 , un ) else
72352: LD_ADDR_VAR 0 3
72356: PUSH
72357: LD_VAR 0 3
72361: PPUSH
72362: LD_INT 1
72364: PPUSH
72365: LD_VAR 0 4
72369: PPUSH
72370: CALL_OW 2
72374: ST_TO_ADDR
72375: GO 72406
// result := Replace ( result , result + 1 , un ) ;
72377: LD_ADDR_VAR 0 3
72381: PUSH
72382: LD_VAR 0 3
72386: PPUSH
72387: LD_VAR 0 3
72391: PUSH
72392: LD_INT 1
72394: PLUS
72395: PPUSH
72396: LD_VAR 0 4
72400: PPUSH
72401: CALL_OW 1
72405: ST_TO_ADDR
72406: GO 72332
72408: POP
72409: POP
// end ;
72410: LD_VAR 0 3
72414: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72415: LD_INT 0
72417: PPUSH
72418: PPUSH
72419: PPUSH
72420: PPUSH
72421: PPUSH
72422: PPUSH
72423: PPUSH
// result := [ ] ;
72424: LD_ADDR_VAR 0 4
72428: PUSH
72429: EMPTY
72430: ST_TO_ADDR
// if x - r < 0 then
72431: LD_VAR 0 1
72435: PUSH
72436: LD_VAR 0 3
72440: MINUS
72441: PUSH
72442: LD_INT 0
72444: LESS
72445: IFFALSE 72457
// min_x := 0 else
72447: LD_ADDR_VAR 0 8
72451: PUSH
72452: LD_INT 0
72454: ST_TO_ADDR
72455: GO 72473
// min_x := x - r ;
72457: LD_ADDR_VAR 0 8
72461: PUSH
72462: LD_VAR 0 1
72466: PUSH
72467: LD_VAR 0 3
72471: MINUS
72472: ST_TO_ADDR
// if y - r < 0 then
72473: LD_VAR 0 2
72477: PUSH
72478: LD_VAR 0 3
72482: MINUS
72483: PUSH
72484: LD_INT 0
72486: LESS
72487: IFFALSE 72499
// min_y := 0 else
72489: LD_ADDR_VAR 0 7
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
72497: GO 72515
// min_y := y - r ;
72499: LD_ADDR_VAR 0 7
72503: PUSH
72504: LD_VAR 0 2
72508: PUSH
72509: LD_VAR 0 3
72513: MINUS
72514: ST_TO_ADDR
// max_x := x + r ;
72515: LD_ADDR_VAR 0 9
72519: PUSH
72520: LD_VAR 0 1
72524: PUSH
72525: LD_VAR 0 3
72529: PLUS
72530: ST_TO_ADDR
// max_y := y + r ;
72531: LD_ADDR_VAR 0 10
72535: PUSH
72536: LD_VAR 0 2
72540: PUSH
72541: LD_VAR 0 3
72545: PLUS
72546: ST_TO_ADDR
// for _x = min_x to max_x do
72547: LD_ADDR_VAR 0 5
72551: PUSH
72552: DOUBLE
72553: LD_VAR 0 8
72557: DEC
72558: ST_TO_ADDR
72559: LD_VAR 0 9
72563: PUSH
72564: FOR_TO
72565: IFFALSE 72666
// for _y = min_y to max_y do
72567: LD_ADDR_VAR 0 6
72571: PUSH
72572: DOUBLE
72573: LD_VAR 0 7
72577: DEC
72578: ST_TO_ADDR
72579: LD_VAR 0 10
72583: PUSH
72584: FOR_TO
72585: IFFALSE 72662
// begin if not ValidHex ( _x , _y ) then
72587: LD_VAR 0 5
72591: PPUSH
72592: LD_VAR 0 6
72596: PPUSH
72597: CALL_OW 488
72601: NOT
72602: IFFALSE 72606
// continue ;
72604: GO 72584
// if GetResourceTypeXY ( _x , _y ) then
72606: LD_VAR 0 5
72610: PPUSH
72611: LD_VAR 0 6
72615: PPUSH
72616: CALL_OW 283
72620: IFFALSE 72660
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72622: LD_ADDR_VAR 0 4
72626: PUSH
72627: LD_VAR 0 4
72631: PPUSH
72632: LD_VAR 0 4
72636: PUSH
72637: LD_INT 1
72639: PLUS
72640: PPUSH
72641: LD_VAR 0 5
72645: PUSH
72646: LD_VAR 0 6
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PPUSH
72655: CALL_OW 1
72659: ST_TO_ADDR
// end ;
72660: GO 72584
72662: POP
72663: POP
72664: GO 72564
72666: POP
72667: POP
// end ;
72668: LD_VAR 0 4
72672: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72673: LD_INT 0
72675: PPUSH
72676: PPUSH
72677: PPUSH
72678: PPUSH
72679: PPUSH
72680: PPUSH
72681: PPUSH
72682: PPUSH
// if not units then
72683: LD_VAR 0 1
72687: NOT
72688: IFFALSE 72692
// exit ;
72690: GO 73218
// result := UnitFilter ( units , [ f_ok ] ) ;
72692: LD_ADDR_VAR 0 3
72696: PUSH
72697: LD_VAR 0 1
72701: PPUSH
72702: LD_INT 50
72704: PUSH
72705: EMPTY
72706: LIST
72707: PPUSH
72708: CALL_OW 72
72712: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72713: LD_ADDR_VAR 0 8
72717: PUSH
72718: LD_VAR 0 1
72722: PUSH
72723: LD_INT 1
72725: ARRAY
72726: PPUSH
72727: CALL_OW 255
72731: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72732: LD_ADDR_VAR 0 10
72736: PUSH
72737: LD_INT 29
72739: PUSH
72740: LD_EXP 36
72744: PUSH
72745: LD_INT 49
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: ST_TO_ADDR
// if not result then
72753: LD_VAR 0 3
72757: NOT
72758: IFFALSE 72762
// exit ;
72760: GO 73218
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72762: LD_ADDR_VAR 0 5
72766: PUSH
72767: LD_INT 81
72769: PUSH
72770: LD_VAR 0 8
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PPUSH
72779: CALL_OW 69
72783: ST_TO_ADDR
// for i in result do
72784: LD_ADDR_VAR 0 4
72788: PUSH
72789: LD_VAR 0 3
72793: PUSH
72794: FOR_IN
72795: IFFALSE 73216
// begin tag := GetTag ( i ) + 1 ;
72797: LD_ADDR_VAR 0 9
72801: PUSH
72802: LD_VAR 0 4
72806: PPUSH
72807: CALL_OW 110
72811: PUSH
72812: LD_INT 1
72814: PLUS
72815: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72816: LD_ADDR_VAR 0 7
72820: PUSH
72821: LD_VAR 0 4
72825: PPUSH
72826: CALL_OW 250
72830: PPUSH
72831: LD_VAR 0 4
72835: PPUSH
72836: CALL_OW 251
72840: PPUSH
72841: LD_INT 6
72843: PPUSH
72844: CALL 72415 0 3
72848: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72849: LD_VAR 0 4
72853: PPUSH
72854: CALL_OW 247
72858: PUSH
72859: LD_INT 2
72861: EQUAL
72862: PUSH
72863: LD_VAR 0 7
72867: AND
72868: PUSH
72869: LD_VAR 0 4
72873: PPUSH
72874: CALL_OW 264
72878: PUSH
72879: LD_VAR 0 10
72883: IN
72884: NOT
72885: AND
72886: IFFALSE 72925
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72888: LD_VAR 0 4
72892: PPUSH
72893: LD_VAR 0 7
72897: PUSH
72898: LD_INT 1
72900: ARRAY
72901: PUSH
72902: LD_INT 1
72904: ARRAY
72905: PPUSH
72906: LD_VAR 0 7
72910: PUSH
72911: LD_INT 1
72913: ARRAY
72914: PUSH
72915: LD_INT 2
72917: ARRAY
72918: PPUSH
72919: CALL_OW 116
72923: GO 73214
// if path > tag then
72925: LD_VAR 0 2
72929: PUSH
72930: LD_VAR 0 9
72934: GREATER
72935: IFFALSE 73143
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72937: LD_ADDR_VAR 0 6
72941: PUSH
72942: LD_VAR 0 5
72946: PPUSH
72947: LD_INT 91
72949: PUSH
72950: LD_VAR 0 4
72954: PUSH
72955: LD_INT 8
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: LIST
72962: PPUSH
72963: CALL_OW 72
72967: ST_TO_ADDR
// if nearEnemy then
72968: LD_VAR 0 6
72972: IFFALSE 73041
// begin if GetWeapon ( i ) = ru_time_lapser then
72974: LD_VAR 0 4
72978: PPUSH
72979: CALL_OW 264
72983: PUSH
72984: LD_INT 49
72986: EQUAL
72987: IFFALSE 73015
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72989: LD_VAR 0 4
72993: PPUSH
72994: LD_VAR 0 6
72998: PPUSH
72999: LD_VAR 0 4
73003: PPUSH
73004: CALL_OW 74
73008: PPUSH
73009: CALL_OW 112
73013: GO 73039
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73015: LD_VAR 0 4
73019: PPUSH
73020: LD_VAR 0 6
73024: PPUSH
73025: LD_VAR 0 4
73029: PPUSH
73030: CALL_OW 74
73034: PPUSH
73035: CALL_OW 115
// end else
73039: GO 73141
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73041: LD_VAR 0 4
73045: PPUSH
73046: LD_VAR 0 2
73050: PUSH
73051: LD_VAR 0 9
73055: ARRAY
73056: PUSH
73057: LD_INT 1
73059: ARRAY
73060: PPUSH
73061: LD_VAR 0 2
73065: PUSH
73066: LD_VAR 0 9
73070: ARRAY
73071: PUSH
73072: LD_INT 2
73074: ARRAY
73075: PPUSH
73076: CALL_OW 297
73080: PUSH
73081: LD_INT 6
73083: GREATER
73084: IFFALSE 73127
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73086: LD_VAR 0 4
73090: PPUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_VAR 0 9
73100: ARRAY
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: PPUSH
73106: LD_VAR 0 2
73110: PUSH
73111: LD_VAR 0 9
73115: ARRAY
73116: PUSH
73117: LD_INT 2
73119: ARRAY
73120: PPUSH
73121: CALL_OW 114
73125: GO 73141
// SetTag ( i , tag ) ;
73127: LD_VAR 0 4
73131: PPUSH
73132: LD_VAR 0 9
73136: PPUSH
73137: CALL_OW 109
// end else
73141: GO 73214
// if enemy then
73143: LD_VAR 0 5
73147: IFFALSE 73214
// begin if GetWeapon ( i ) = ru_time_lapser then
73149: LD_VAR 0 4
73153: PPUSH
73154: CALL_OW 264
73158: PUSH
73159: LD_INT 49
73161: EQUAL
73162: IFFALSE 73190
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73164: LD_VAR 0 4
73168: PPUSH
73169: LD_VAR 0 5
73173: PPUSH
73174: LD_VAR 0 4
73178: PPUSH
73179: CALL_OW 74
73183: PPUSH
73184: CALL_OW 112
73188: GO 73214
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73190: LD_VAR 0 4
73194: PPUSH
73195: LD_VAR 0 5
73199: PPUSH
73200: LD_VAR 0 4
73204: PPUSH
73205: CALL_OW 74
73209: PPUSH
73210: CALL_OW 115
// end ; end ;
73214: GO 72794
73216: POP
73217: POP
// end ;
73218: LD_VAR 0 3
73222: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73223: LD_INT 0
73225: PPUSH
73226: PPUSH
73227: PPUSH
// if not unit or IsInUnit ( unit ) then
73228: LD_VAR 0 1
73232: NOT
73233: PUSH
73234: LD_VAR 0 1
73238: PPUSH
73239: CALL_OW 310
73243: OR
73244: IFFALSE 73248
// exit ;
73246: GO 73339
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73248: LD_ADDR_VAR 0 4
73252: PUSH
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 250
73262: PPUSH
73263: LD_VAR 0 2
73267: PPUSH
73268: LD_INT 1
73270: PPUSH
73271: CALL_OW 272
73275: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73276: LD_ADDR_VAR 0 5
73280: PUSH
73281: LD_VAR 0 1
73285: PPUSH
73286: CALL_OW 251
73290: PPUSH
73291: LD_VAR 0 2
73295: PPUSH
73296: LD_INT 1
73298: PPUSH
73299: CALL_OW 273
73303: ST_TO_ADDR
// if ValidHex ( x , y ) then
73304: LD_VAR 0 4
73308: PPUSH
73309: LD_VAR 0 5
73313: PPUSH
73314: CALL_OW 488
73318: IFFALSE 73339
// ComTurnXY ( unit , x , y ) ;
73320: LD_VAR 0 1
73324: PPUSH
73325: LD_VAR 0 4
73329: PPUSH
73330: LD_VAR 0 5
73334: PPUSH
73335: CALL_OW 118
// end ;
73339: LD_VAR 0 3
73343: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73344: LD_INT 0
73346: PPUSH
73347: PPUSH
// result := false ;
73348: LD_ADDR_VAR 0 3
73352: PUSH
73353: LD_INT 0
73355: ST_TO_ADDR
// if not units then
73356: LD_VAR 0 2
73360: NOT
73361: IFFALSE 73365
// exit ;
73363: GO 73410
// for i in units do
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_VAR 0 2
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73408
// if See ( side , i ) then
73378: LD_VAR 0 1
73382: PPUSH
73383: LD_VAR 0 4
73387: PPUSH
73388: CALL_OW 292
73392: IFFALSE 73406
// begin result := true ;
73394: LD_ADDR_VAR 0 3
73398: PUSH
73399: LD_INT 1
73401: ST_TO_ADDR
// exit ;
73402: POP
73403: POP
73404: GO 73410
// end ;
73406: GO 73375
73408: POP
73409: POP
// end ;
73410: LD_VAR 0 3
73414: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73415: LD_INT 0
73417: PPUSH
73418: PPUSH
73419: PPUSH
73420: PPUSH
// if not unit or not points then
73421: LD_VAR 0 1
73425: NOT
73426: PUSH
73427: LD_VAR 0 2
73431: NOT
73432: OR
73433: IFFALSE 73437
// exit ;
73435: GO 73527
// dist := 99999 ;
73437: LD_ADDR_VAR 0 5
73441: PUSH
73442: LD_INT 99999
73444: ST_TO_ADDR
// for i in points do
73445: LD_ADDR_VAR 0 4
73449: PUSH
73450: LD_VAR 0 2
73454: PUSH
73455: FOR_IN
73456: IFFALSE 73525
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73458: LD_ADDR_VAR 0 6
73462: PUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: LD_VAR 0 4
73472: PUSH
73473: LD_INT 1
73475: ARRAY
73476: PPUSH
73477: LD_VAR 0 4
73481: PUSH
73482: LD_INT 2
73484: ARRAY
73485: PPUSH
73486: CALL_OW 297
73490: ST_TO_ADDR
// if tmpDist < dist then
73491: LD_VAR 0 6
73495: PUSH
73496: LD_VAR 0 5
73500: LESS
73501: IFFALSE 73523
// begin result := i ;
73503: LD_ADDR_VAR 0 3
73507: PUSH
73508: LD_VAR 0 4
73512: ST_TO_ADDR
// dist := tmpDist ;
73513: LD_ADDR_VAR 0 5
73517: PUSH
73518: LD_VAR 0 6
73522: ST_TO_ADDR
// end ; end ;
73523: GO 73455
73525: POP
73526: POP
// end ;
73527: LD_VAR 0 3
73531: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73532: LD_INT 0
73534: PPUSH
// uc_side := side ;
73535: LD_ADDR_OWVAR 20
73539: PUSH
73540: LD_VAR 0 1
73544: ST_TO_ADDR
// uc_nation := 3 ;
73545: LD_ADDR_OWVAR 21
73549: PUSH
73550: LD_INT 3
73552: ST_TO_ADDR
// vc_chassis := 25 ;
73553: LD_ADDR_OWVAR 37
73557: PUSH
73558: LD_INT 25
73560: ST_TO_ADDR
// vc_engine := engine_siberite ;
73561: LD_ADDR_OWVAR 39
73565: PUSH
73566: LD_INT 3
73568: ST_TO_ADDR
// vc_control := control_computer ;
73569: LD_ADDR_OWVAR 38
73573: PUSH
73574: LD_INT 3
73576: ST_TO_ADDR
// vc_weapon := 59 ;
73577: LD_ADDR_OWVAR 40
73581: PUSH
73582: LD_INT 59
73584: ST_TO_ADDR
// result := CreateVehicle ;
73585: LD_ADDR_VAR 0 5
73589: PUSH
73590: CALL_OW 45
73594: ST_TO_ADDR
// SetDir ( result , d ) ;
73595: LD_VAR 0 5
73599: PPUSH
73600: LD_VAR 0 4
73604: PPUSH
73605: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73609: LD_VAR 0 5
73613: PPUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: LD_VAR 0 3
73623: PPUSH
73624: LD_INT 0
73626: PPUSH
73627: CALL_OW 48
// end ;
73631: LD_VAR 0 5
73635: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73636: LD_INT 0
73638: PPUSH
73639: PPUSH
73640: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73641: LD_ADDR_VAR 0 2
73645: PUSH
73646: LD_INT 0
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: LD_INT 0
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73664: LD_VAR 0 1
73668: NOT
73669: PUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: CALL_OW 264
73679: PUSH
73680: LD_INT 12
73682: PUSH
73683: LD_INT 51
73685: PUSH
73686: LD_INT 32
73688: PUSH
73689: LD_EXP 33
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: IN
73700: NOT
73701: OR
73702: IFFALSE 73706
// exit ;
73704: GO 73804
// for i := 1 to 3 do
73706: LD_ADDR_VAR 0 3
73710: PUSH
73711: DOUBLE
73712: LD_INT 1
73714: DEC
73715: ST_TO_ADDR
73716: LD_INT 3
73718: PUSH
73719: FOR_TO
73720: IFFALSE 73802
// begin tmp := GetCargo ( cargo , i ) ;
73722: LD_ADDR_VAR 0 4
73726: PUSH
73727: LD_VAR 0 1
73731: PPUSH
73732: LD_VAR 0 3
73736: PPUSH
73737: CALL_OW 289
73741: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73742: LD_ADDR_VAR 0 2
73746: PUSH
73747: LD_VAR 0 2
73751: PPUSH
73752: LD_VAR 0 3
73756: PPUSH
73757: LD_VAR 0 4
73761: PPUSH
73762: CALL_OW 1
73766: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73767: LD_ADDR_VAR 0 2
73771: PUSH
73772: LD_VAR 0 2
73776: PPUSH
73777: LD_INT 4
73779: PPUSH
73780: LD_VAR 0 2
73784: PUSH
73785: LD_INT 4
73787: ARRAY
73788: PUSH
73789: LD_VAR 0 4
73793: PLUS
73794: PPUSH
73795: CALL_OW 1
73799: ST_TO_ADDR
// end ;
73800: GO 73719
73802: POP
73803: POP
// end ;
73804: LD_VAR 0 2
73808: RET
// export function Length ( array ) ; begin
73809: LD_INT 0
73811: PPUSH
// result := array + 0 ;
73812: LD_ADDR_VAR 0 2
73816: PUSH
73817: LD_VAR 0 1
73821: PUSH
73822: LD_INT 0
73824: PLUS
73825: ST_TO_ADDR
// end ; end_of_file
73826: LD_VAR 0 2
73830: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73831: LD_VAR 0 1
73835: PUSH
73836: LD_INT 200
73838: DOUBLE
73839: GREATEREQUAL
73840: IFFALSE 73848
73842: LD_INT 299
73844: DOUBLE
73845: LESSEQUAL
73846: IFTRUE 73850
73848: GO 73882
73850: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73851: LD_VAR 0 1
73855: PPUSH
73856: LD_VAR 0 2
73860: PPUSH
73861: LD_VAR 0 3
73865: PPUSH
73866: LD_VAR 0 4
73870: PPUSH
73871: LD_VAR 0 5
73875: PPUSH
73876: CALL 28891 0 5
73880: GO 73959
73882: LD_INT 300
73884: DOUBLE
73885: GREATEREQUAL
73886: IFFALSE 73894
73888: LD_INT 399
73890: DOUBLE
73891: LESSEQUAL
73892: IFTRUE 73896
73894: GO 73958
73896: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73897: LD_VAR 0 1
73901: PPUSH
73902: LD_VAR 0 2
73906: PPUSH
73907: LD_VAR 0 3
73911: PPUSH
73912: LD_VAR 0 4
73916: PPUSH
73917: LD_VAR 0 5
73921: PPUSH
73922: LD_VAR 0 6
73926: PPUSH
73927: LD_VAR 0 7
73931: PPUSH
73932: LD_VAR 0 8
73936: PPUSH
73937: LD_VAR 0 9
73941: PPUSH
73942: LD_VAR 0 10
73946: PPUSH
73947: LD_VAR 0 11
73951: PPUSH
73952: CALL 25286 0 11
73956: GO 73959
73958: POP
// end ;
73959: PPOPN 11
73961: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73962: LD_VAR 0 1
73966: PPUSH
73967: LD_VAR 0 2
73971: PPUSH
73972: LD_VAR 0 3
73976: PPUSH
73977: LD_VAR 0 4
73981: PPUSH
73982: LD_VAR 0 5
73986: PPUSH
73987: CALL 28627 0 5
// end ; end_of_file
73991: PPOPN 5
73993: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73994: LD_VAR 0 1
73998: PPUSH
73999: LD_VAR 0 2
74003: PPUSH
74004: LD_VAR 0 3
74008: PPUSH
74009: LD_VAR 0 4
74013: PPUSH
74014: LD_VAR 0 5
74018: PPUSH
74019: LD_VAR 0 6
74023: PPUSH
74024: CALL 12979 0 6
// end ;
74028: PPOPN 6
74030: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74031: LD_INT 0
74033: PPUSH
// begin if not units then
74034: LD_VAR 0 1
74038: NOT
74039: IFFALSE 74043
// exit ;
74041: GO 74043
// end ;
74043: PPOPN 7
74045: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74046: CALL 12950 0 0
// end ;
74050: PPOPN 1
74052: END
