// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11922 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4753 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 33721 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 33721 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2271
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2271
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2269
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2180
// begin SetTag ( Gladstone , 1 ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 109
// if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2106: LD_EXP 19
2110: PPUSH
2111: CALL_OW 302
2115: PUSH
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 310
2125: AND
2126: IFFALSE 2137
// ComExitBuilding ( Gladstone ) ;
2128: LD_EXP 19
2132: PPUSH
2133: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2137: LD_EXP 19
2141: PPUSH
2142: LD_VAR 0 1
2146: PPUSH
2147: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2151: LD_EXP 19
2155: PPUSH
2156: LD_INT 3
2158: PPUSH
2159: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2163: LD_VAR 0 1
2167: PPUSH
2168: LD_INT 37
2170: PPUSH
2171: LD_INT 23
2173: PPUSH
2174: CALL_OW 111
// end else
2178: GO 2267
// if GetLives ( i ) = 1000 then
2180: LD_VAR 0 1
2184: PPUSH
2185: CALL_OW 256
2189: PUSH
2190: LD_INT 1000
2192: EQUAL
2193: IFFALSE 2267
// begin if SideShoot ( i ) = 2 then
2195: LD_VAR 0 1
2199: PPUSH
2200: CALL_OW 503
2204: PUSH
2205: LD_INT 2
2207: EQUAL
2208: IFFALSE 2255
// begin if not usAlert then
2210: LD_EXP 10
2214: NOT
2215: IFFALSE 2225
// usAlert := true ;
2217: LD_ADDR_EXP 10
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2225: LD_VAR 0 1
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: CALL_OW 180
// usSci := usSci diff i ;
2237: LD_ADDR_EXP 22
2241: PUSH
2242: LD_EXP 22
2246: PUSH
2247: LD_VAR 0 1
2251: DIFF
2252: ST_TO_ADDR
// end else
2253: GO 2267
// ComMoveToArea ( i , tameArea ) ;
2255: LD_VAR 0 1
2259: PPUSH
2260: LD_INT 5
2262: PPUSH
2263: CALL_OW 113
// end ; end ;
2267: GO 1823
2269: POP
2270: POP
// end ;
2271: PPOPN 5
2273: END
// every 0 0$1 trigger GetTag ( Gladstone ) = 1 and not IsInUnit ( Gladstone ) and not usAlert do
2274: LD_EXP 19
2278: PPUSH
2279: CALL_OW 110
2283: PUSH
2284: LD_INT 1
2286: EQUAL
2287: PUSH
2288: LD_EXP 19
2292: PPUSH
2293: CALL_OW 310
2297: NOT
2298: AND
2299: PUSH
2300: LD_EXP 10
2304: NOT
2305: AND
2306: IFFALSE 2323
2308: GO 2310
2310: DISABLE
// ComEnterUnit ( Gladstone , usLab ) ;
2311: LD_EXP 19
2315: PPUSH
2316: LD_INT 3
2318: PPUSH
2319: CALL_OW 120
2323: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2324: LD_EXP 10
2328: NOT
2329: PUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 21
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 3
2352: PUSH
2353: LD_INT 57
2355: PUSH
2356: EMPTY
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 3
2365: PUSH
2366: LD_INT 24
2368: PUSH
2369: LD_INT 999
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: PPUSH
2386: CALL_OW 69
2390: PUSH
2391: LD_INT 7
2393: PPUSH
2394: LD_INT 22
2396: PUSH
2397: LD_INT 2
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 70
2408: OR
2409: AND
2410: IFFALSE 2423
2412: GO 2414
2414: DISABLE
// usAlert := true ;
2415: LD_ADDR_EXP 10
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
2423: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2424: LD_EXP 10
2428: IFFALSE 2775
2430: GO 2432
2432: DISABLE
2433: LD_INT 0
2435: PPUSH
2436: PPUSH
2437: PPUSH
// begin usActiveDefend := true ;
2438: LD_ADDR_EXP 11
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if not usForces then
2446: LD_EXP 21
2450: NOT
2451: IFFALSE 2455
// exit ;
2453: GO 2775
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: LD_INT 22
2462: PUSH
2463: LD_INT 1
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 30
2472: PUSH
2473: LD_INT 4
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PPUSH
2484: CALL_OW 69
2488: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 30
2506: PUSH
2507: LD_INT 31
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 69
2522: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2523: LD_EXP 20
2527: PPUSH
2528: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2532: LD_EXP 20
2536: PPUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: ARRAY
2545: PPUSH
2546: CALL_OW 180
// if IsOk ( Gladstone ) then
2550: LD_EXP 19
2554: PPUSH
2555: CALL_OW 302
2559: IFFALSE 2600
// begin ComExitBuilding ( Gladstone ) ;
2561: LD_EXP 19
2565: PPUSH
2566: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2570: LD_EXP 19
2574: PPUSH
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2588: LD_EXP 19
2592: PPUSH
2593: LD_INT 1
2595: PPUSH
2596: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2600: LD_EXP 21
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: LD_VAR 0 2
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PPUSH
2631: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2635: LD_EXP 21
2639: PUSH
2640: LD_INT 2
2642: ARRAY
2643: PPUSH
2644: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2648: LD_EXP 21
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: PPUSH
2657: LD_INT 22
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 30
2669: PUSH
2670: LD_INT 32
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL_OW 69
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: PPUSH
2690: CALL_OW 180
// if b > 1 and usForces > 2 then
2694: LD_VAR 0 2
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: PUSH
2703: LD_EXP 21
2707: PUSH
2708: LD_INT 2
2710: GREATER
2711: AND
2712: IFFALSE 2775
// begin repeat wait ( 0 0$1 ) ;
2714: LD_INT 35
2716: PPUSH
2717: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 2
2728: ARRAY
2729: PPUSH
2730: CALL_OW 461
2734: PUSH
2735: LD_INT 1
2737: NONEQUAL
2738: IFFALSE 2714
// ComExitBuilding ( usForces [ 3 ] ) ;
2740: LD_EXP 21
2744: PUSH
2745: LD_INT 3
2747: ARRAY
2748: PPUSH
2749: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2753: LD_EXP 21
2757: PUSH
2758: LD_INT 3
2760: ARRAY
2761: PPUSH
2762: LD_VAR 0 2
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 180
// end ; end ;
2775: PPOPN 3
2777: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2778: LD_INT 3
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 999
2788: LESS
2789: PUSH
2790: LD_EXP 10
2794: AND
2795: PUSH
2796: LD_EXP 21
2800: AND
2801: IFFALSE 2972
2803: GO 2805
2805: DISABLE
2806: LD_INT 0
2808: PPUSH
// begin for i in usForces do
2809: LD_ADDR_VAR 0 1
2813: PUSH
2814: LD_EXP 21
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2859
// begin if IsInUnit ( i ) then
2822: LD_VAR 0 1
2826: PPUSH
2827: CALL_OW 310
2831: IFFALSE 2842
// ComExitBuilding ( i ) ;
2833: LD_VAR 0 1
2837: PPUSH
2838: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 31
2849: PPUSH
2850: LD_INT 8
2852: PPUSH
2853: CALL_OW 174
// end ;
2857: GO 2819
2859: POP
2860: POP
// wait ( 0 0$8 ) ;
2861: LD_INT 280
2863: PPUSH
2864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2868: LD_INT 22
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 91
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 14
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: IFFALSE 2950
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2902: LD_EXP 21
2906: PPUSH
2907: LD_INT 22
2909: PUSH
2910: LD_INT 2
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 91
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 14
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PPUSH
2935: CALL_OW 69
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 115
2948: GO 2972
// begin wait ( 0 0$20 ) ;
2950: LD_INT 700
2952: PPUSH
2953: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 39
2964: PPUSH
2965: LD_INT 19
2967: PPUSH
2968: CALL_OW 171
// end ; end ;
2972: PPOPN 1
2974: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2975: LD_EXP 23
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 296
2987: PUSH
2988: LD_INT 10
2990: LESS
2991: PUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 256
2999: PUSH
3000: LD_INT 999
3002: LESS
3003: OR
3004: PUSH
3005: LD_INT 22
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 25
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 69
3033: AND
3034: IFFALSE 3148
3036: GO 3038
3038: DISABLE
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 25
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_INT 22
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 21
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 58
3104: PUSH
3105: EMPTY
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PPUSH
3113: CALL_OW 69
3117: ST_TO_ADDR
// if not tmp then
3118: LD_VAR 0 1
3122: NOT
3123: IFFALSE 3127
// exit ;
3125: GO 3148
// ComExitBuilding ( tmp ) ;
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3136: LD_VAR 0 1
3140: PPUSH
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 227
// end ;
3148: PPOPN 2
3150: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3151: LD_EXP 10
3155: PUSH
3156: LD_INT 7
3158: PPUSH
3159: LD_INT 22
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 21
3171: PUSH
3172: LD_INT 1
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: LD_INT 24
3184: PUSH
3185: LD_INT 600
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 70
3205: AND
3206: IFFALSE 3334
3208: GO 3210
3210: DISABLE
3211: LD_INT 0
3213: PPUSH
3214: PPUSH
// begin enable ;
3215: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_INT 7
3223: PPUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 21
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 3
3246: PUSH
3247: LD_INT 24
3249: PUSH
3250: LD_INT 600
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 70
3270: ST_TO_ADDR
// if not tmp then
3271: LD_VAR 0 2
3275: NOT
3276: IFFALSE 3280
// exit ;
3278: GO 3334
// for i in tmp do
3280: LD_ADDR_VAR 0 1
3284: PUSH
3285: LD_VAR 0 2
3289: PUSH
3290: FOR_IN
3291: IFFALSE 3332
// if IsInUnit ( i ) then
3293: LD_VAR 0 1
3297: PPUSH
3298: CALL_OW 310
3302: IFFALSE 3315
// ComExitBuilding ( i ) else
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 122
3313: GO 3330
// ComMoveXY ( i , 48 , 74 ) ;
3315: LD_VAR 0 1
3319: PPUSH
3320: LD_INT 48
3322: PPUSH
3323: LD_INT 74
3325: PPUSH
3326: CALL_OW 111
3330: GO 3290
3332: POP
3333: POP
// end ;
3334: PPOPN 2
3336: END
// every 12 12$00 do var i , un , tmp ;
3337: GO 3339
3339: DISABLE
3340: LD_INT 0
3342: PPUSH
3343: PPUSH
3344: PPUSH
// begin tmp := [ ] ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: EMPTY
3351: ST_TO_ADDR
// uc_side := 1 ;
3352: LD_ADDR_OWVAR 20
3356: PUSH
3357: LD_INT 1
3359: ST_TO_ADDR
// uc_nation := 1 ;
3360: LD_ADDR_OWVAR 21
3364: PUSH
3365: LD_INT 1
3367: ST_TO_ADDR
// case Difficulty of 1 :
3368: LD_OWVAR 67
3372: PUSH
3373: LD_INT 1
3375: DOUBLE
3376: EQUAL
3377: IFTRUE 3381
3379: GO 3484
3381: POP
// begin wait ( 1 1$00 ) ;
3382: LD_INT 2100
3384: PPUSH
3385: CALL_OW 67
// for i := 1 to 2 do
3389: LD_ADDR_VAR 0 1
3393: PUSH
3394: DOUBLE
3395: LD_INT 1
3397: DEC
3398: ST_TO_ADDR
3399: LD_INT 2
3401: PUSH
3402: FOR_TO
3403: IFFALSE 3480
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 1
3410: PUSH
3411: LD_INT 4
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 2
3425: MOD
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: ARRAY
3431: PPUSH
3432: LD_INT 1
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3402
3480: POP
3481: POP
// end ; 2 :
3482: GO 3884
3484: LD_INT 2
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3626
3492: POP
// begin wait ( 0 0$30 ) ;
3493: LD_INT 1050
3495: PPUSH
3496: CALL_OW 67
// for i := 1 to 2 do
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_INT 2
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3570
// begin PrepareHuman ( false , 1 , 2 ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: CALL_OW 380
// un := CreateHuman ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: CALL_OW 44
3538: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_VAR 0 3
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 1
3556: PLUS
3557: PPUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: CALL_OW 1
3567: ST_TO_ADDR
// end ;
3568: GO 3513
3570: POP
3571: POP
// PrepareHuman ( false , 4 , 2 ) ;
3572: LD_INT 0
3574: PPUSH
3575: LD_INT 4
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3595: LD_ADDR_VAR 0 3
3599: PUSH
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_VAR 0 3
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: CALL_OW 1
3623: ST_TO_ADDR
// end ; 3 .. 4 :
3624: GO 3884
3626: LD_INT 3
3628: DOUBLE
3629: GREATEREQUAL
3630: IFFALSE 3638
3632: LD_INT 4
3634: DOUBLE
3635: LESSEQUAL
3636: IFTRUE 3640
3638: GO 3883
3640: POP
// begin for i := 1 to 2 do
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 2
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3711
// begin PrepareHuman ( false , 1 , 2 ) ;
3657: LD_INT 0
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 380
// un := CreateHuman ;
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 3
3694: PUSH
3695: LD_INT 1
3697: PLUS
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL_OW 1
3708: ST_TO_ADDR
// end ;
3709: GO 3654
3711: POP
3712: POP
// PrepareHuman ( false , 4 , 2 ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 4
3718: PPUSH
3719: LD_INT 2
3721: PPUSH
3722: CALL_OW 380
// un := CreateHuman ;
3726: LD_ADDR_VAR 0 2
3730: PUSH
3731: CALL_OW 44
3735: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3736: LD_ADDR_VAR 0 3
3740: PUSH
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_VAR 0 3
3750: PUSH
3751: LD_INT 1
3753: PLUS
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: CALL_OW 1
3764: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 1
3770: PPUSH
3771: LD_INT 2
3773: PPUSH
3774: LD_INT 2
3776: PPUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_INT 90
3785: PPUSH
3786: CALL 241 0 7
// un := CreateVehicle ;
3790: LD_ADDR_VAR 0 2
3794: PUSH
3795: CALL_OW 45
3799: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 1
3817: PLUS
3818: PPUSH
3819: LD_VAR 0 2
3823: PPUSH
3824: CALL_OW 1
3828: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3829: LD_INT 0
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 2
3837: PPUSH
3838: CALL_OW 380
// un := CreateHuman ;
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: CALL_OW 44
3851: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_VAR 0 3
3861: PPUSH
3862: LD_VAR 0 3
3866: PUSH
3867: LD_INT 1
3869: PLUS
3870: PPUSH
3871: LD_VAR 0 2
3875: PPUSH
3876: CALL_OW 1
3880: ST_TO_ADDR
// end ; end ;
3881: GO 3884
3883: POP
// for i := 1 to tmp do
3884: LD_ADDR_VAR 0 1
3888: PUSH
3889: DOUBLE
3890: LD_INT 1
3892: DEC
3893: ST_TO_ADDR
3894: LD_VAR 0 3
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4065
// begin SetDir ( tmp [ i ] , 1 ) ;
3902: LD_VAR 0 3
3906: PUSH
3907: LD_VAR 0 1
3911: ARRAY
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: ARRAY
3930: PPUSH
3931: CALL_OW 247
3935: PUSH
3936: LD_INT 1
3938: EQUAL
3939: IFFALSE 3967
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3941: LD_VAR 0 3
3945: PUSH
3946: LD_VAR 0 1
3950: ARRAY
3951: PPUSH
3952: LD_INT 28
3954: PPUSH
3955: LD_INT 52
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
3965: GO 4035
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3967: LD_VAR 0 3
3971: PUSH
3972: LD_VAR 0 1
3976: ARRAY
3977: PPUSH
3978: LD_INT 28
3980: PPUSH
3981: LD_INT 52
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 48
// i := i + 1 ;
3991: LD_ADDR_VAR 0 1
3995: PUSH
3996: LD_VAR 0 1
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
4005: LD_VAR 0 3
4009: PUSH
4010: LD_VAR 0 1
4014: ARRAY
4015: PPUSH
4016: LD_VAR 0 3
4020: PUSH
4021: LD_VAR 0 1
4025: PUSH
4026: LD_INT 1
4028: MINUS
4029: ARRAY
4030: PPUSH
4031: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
4035: LD_VAR 0 3
4039: PUSH
4040: LD_VAR 0 1
4044: ARRAY
4045: PPUSH
4046: LD_INT 43
4048: PPUSH
4049: LD_INT 56
4051: PPUSH
4052: CALL_OW 111
// wait ( 0 0$2 ) ;
4056: LD_INT 70
4058: PPUSH
4059: CALL_OW 67
// end ;
4063: GO 3899
4065: POP
4066: POP
// wait ( 0 0$2 ) ;
4067: LD_INT 70
4069: PPUSH
4070: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4074: LD_INT 7
4076: PPUSH
4077: LD_INT 22
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: NOT
4092: IFFALSE 4290
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_INT 35
4101: PPUSH
4102: LD_INT 24
4104: PPUSH
4105: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4109: LD_ADDR_EXP 21
4113: PUSH
4114: LD_EXP 21
4118: PUSH
4119: LD_VAR 0 3
4123: PPUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 72
4138: UNION
4139: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4140: LD_INT 22
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 30
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: CALL_OW 313
4177: PUSH
4178: LD_INT 6
4180: LESS
4181: IFFALSE 4240
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4183: LD_VAR 0 3
4187: PPUSH
4188: LD_INT 25
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 72
4202: PPUSH
4203: LD_INT 22
4205: PUSH
4206: LD_INT 1
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 30
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: IFFALSE 4288
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 4
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: PPUSH
4281: LD_INT 3
4283: PPUSH
4284: CALL_OW 180
// end else
4288: GO 4565
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 6
4302: PPUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 70
4317: UNION
4318: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 45
4326: PPUSH
4327: LD_INT 54
4329: PPUSH
4330: CALL_OW 111
// wait ( 0 0$3 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4341: LD_VAR 0 3
4345: PUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 25
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PPUSH
4361: CALL_OW 72
4365: DIFF
4366: PPUSH
4367: LD_INT 35
4369: PPUSH
4370: LD_INT 24
4372: PPUSH
4373: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4377: LD_VAR 0 3
4381: PPUSH
4382: LD_INT 25
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 72
4396: PPUSH
4397: LD_INT 42
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4407: LD_INT 35
4409: PPUSH
4410: CALL_OW 67
// for i in tmp do
4414: LD_ADDR_VAR 0 1
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: FOR_IN
4425: IFFALSE 4556
// if IsDead ( i ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 301
4436: IFFALSE 4456
// tmp := tmp diff i else
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 3
4447: PUSH
4448: LD_VAR 0 1
4452: DIFF
4453: ST_TO_ADDR
4454: GO 4554
// if GetClass ( i ) = 1 then
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 257
4465: PUSH
4466: LD_INT 1
4468: EQUAL
4469: IFFALSE 4554
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 256
4480: PUSH
4481: LD_INT 600
4483: LESS
4484: PUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 42
4492: PPUSH
4493: LD_INT 49
4495: PPUSH
4496: CALL_OW 297
4500: PUSH
4501: LD_INT 6
4503: GREATER
4504: AND
4505: IFFALSE 4524
// ComMoveXY ( i , 42 , 49 ) else
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_INT 42
4514: PPUSH
4515: LD_INT 49
4517: PPUSH
4518: CALL_OW 111
4522: GO 4554
// if GetLives ( i ) = 1000 then
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 256
4533: PUSH
4534: LD_INT 1000
4536: EQUAL
4537: IFFALSE 4554
// ComAgressiveMove ( i , 36 , 25 ) ;
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_INT 36
4546: PPUSH
4547: LD_INT 25
4549: PPUSH
4550: CALL_OW 114
// end ;
4554: GO 4424
4556: POP
4557: POP
// until not tmp ;
4558: LD_VAR 0 3
4562: NOT
4563: IFFALSE 4407
// end ; end ;
4565: PPOPN 3
4567: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 70
4585: PUSH
4586: LD_EXP 14
4590: NOT
4591: AND
4592: IFFALSE 4750
4594: GO 4596
4596: DISABLE
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
// begin for i := 1 to 2 do
4602: LD_ADDR_VAR 0 1
4606: PUSH
4607: DOUBLE
4608: LD_INT 1
4610: DEC
4611: ST_TO_ADDR
4612: LD_INT 2
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4748
// begin wait ( 0 0$3 ) ;
4618: LD_INT 105
4620: PPUSH
4621: CALL_OW 67
// uc_side := 1 ;
4625: LD_ADDR_OWVAR 20
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
// uc_nation := 1 ;
4633: LD_ADDR_OWVAR 21
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: LD_INT 90
4661: PPUSH
4662: CALL 241 0 7
// veh := CreateVehicle ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: CALL_OW 45
4675: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_INT 29
4683: PPUSH
4684: LD_INT 52
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 3
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 380
// un := CreateHuman ;
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: CALL_OW 44
4716: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 36
4738: PPUSH
4739: LD_INT 25
4741: PPUSH
4742: CALL_OW 114
// end ;
4746: GO 4615
4748: POP
4749: POP
// end ; end_of_file
4750: PPOPN 3
4752: END
// export function Action ; var i , tmp ; begin
4753: LD_INT 0
4755: PPUSH
4756: PPUSH
4757: PPUSH
// InGameOn ;
4758: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4762: LD_INT 2
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4772: LD_EXP 23
4776: PPUSH
4777: LD_INT 78
4779: PPUSH
4780: LD_INT 61
4782: PPUSH
4783: CALL_OW 111
// if Mike then
4787: LD_EXP 25
4791: IFFALSE 4808
// ComMoveXY ( Mike , 80 , 66 ) ;
4793: LD_EXP 25
4797: PPUSH
4798: LD_INT 80
4800: PPUSH
4801: LD_INT 66
4803: PPUSH
4804: CALL_OW 111
// if Givi then
4808: LD_EXP 24
4812: IFFALSE 4829
// ComMoveXY ( Givi , 82 , 66 ) ;
4814: LD_EXP 24
4818: PPUSH
4819: LD_INT 82
4821: PPUSH
4822: LD_INT 66
4824: PPUSH
4825: CALL_OW 111
// if Kamil then
4829: LD_EXP 26
4833: IFFALSE 4850
// ComMoveXY ( Kamil , 82 , 67 ) ;
4835: LD_EXP 26
4839: PPUSH
4840: LD_INT 82
4842: PPUSH
4843: LD_INT 67
4845: PPUSH
4846: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4850: LD_EXP 23
4854: PPUSH
4855: CALL_OW 87
// wait ( 0 0$2 ) ;
4859: LD_INT 70
4861: PPUSH
4862: CALL_OW 67
// if Givi and Mike then
4866: LD_EXP 24
4870: PUSH
4871: LD_EXP 25
4875: AND
4876: IFFALSE 5410
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4878: LD_EXP 24
4882: PUSH
4883: LD_EXP 25
4887: PUSH
4888: LD_EXP 26
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: LD_EXP 23
4902: PPUSH
4903: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4907: LD_EXP 23
4911: PPUSH
4912: LD_EXP 24
4916: PPUSH
4917: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4921: LD_EXP 24
4925: PPUSH
4926: LD_STRING DG-1-start
4928: PPUSH
4929: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4933: LD_EXP 23
4937: PPUSH
4938: LD_STRING DH-1-start
4940: PPUSH
4941: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4945: LD_EXP 25
4949: PPUSH
4950: LD_EXP 23
4954: PPUSH
4955: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4959: LD_EXP 23
4963: PPUSH
4964: LD_EXP 25
4968: PPUSH
4969: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4973: LD_EXP 25
4977: PPUSH
4978: LD_STRING DM-1-start
4980: PPUSH
4981: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4985: LD_EXP 23
4989: PPUSH
4990: LD_STRING DH-2-start
4992: PPUSH
4993: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4997: LD_EXP 25
5001: PPUSH
5002: LD_STRING DM-2-start
5004: PPUSH
5005: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
5009: LD_EXP 24
5013: PPUSH
5014: LD_STRING DG-2-start
5016: PPUSH
5017: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
5021: LD_EXP 25
5025: PPUSH
5026: LD_EXP 24
5030: PPUSH
5031: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
5035: LD_EXP 23
5039: PPUSH
5040: LD_EXP 25
5044: PPUSH
5045: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
5049: LD_EXP 25
5053: PPUSH
5054: LD_STRING DM-3-start
5056: PPUSH
5057: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
5061: LD_EXP 23
5065: PPUSH
5066: LD_STRING DH-3-start
5068: PPUSH
5069: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5073: LD_EXP 23
5077: PUSH
5078: LD_EXP 25
5082: PUSH
5083: LD_EXP 24
5087: PUSH
5088: LD_EXP 26
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PPUSH
5099: LD_INT 84
5101: PPUSH
5102: LD_INT 51
5104: PPUSH
5105: CALL_OW 111
// wait ( 0 0$2 ) ;
5109: LD_INT 70
5111: PPUSH
5112: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5116: LD_EXP 24
5120: PPUSH
5121: LD_STRING DG-3-start
5123: PPUSH
5124: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5128: LD_EXP 23
5132: PUSH
5133: LD_EXP 25
5137: PUSH
5138: LD_EXP 24
5142: PUSH
5143: LD_EXP 26
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5158: LD_EXP 23
5162: PPUSH
5163: LD_EXP 24
5167: PPUSH
5168: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5172: LD_EXP 24
5176: PUSH
5177: LD_EXP 25
5181: PUSH
5182: LD_EXP 26
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: LD_EXP 23
5196: PPUSH
5197: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5201: LD_EXP 23
5205: PPUSH
5206: LD_STRING DH-4-start
5208: PPUSH
5209: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5213: LD_EXP 24
5217: PPUSH
5218: LD_STRING DG-4-start
5220: PPUSH
5221: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5225: LD_EXP 23
5229: PPUSH
5230: LD_STRING DH-5-start
5232: PPUSH
5233: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5237: LD_EXP 24
5241: PPUSH
5242: LD_STRING DG-5-start
5244: PPUSH
5245: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5249: LD_EXP 23
5253: PPUSH
5254: LD_STRING DH-6-start
5256: PPUSH
5257: CALL_OW 88
// if not Kamil then
5261: LD_EXP 26
5265: NOT
5266: IFFALSE 5317
// begin Say ( Mike , DM-6-start ) ;
5268: LD_EXP 25
5272: PPUSH
5273: LD_STRING DM-6-start
5275: PPUSH
5276: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5280: LD_EXP 23
5284: PUSH
5285: LD_EXP 24
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: LD_EXP 25
5298: PPUSH
5299: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5303: LD_EXP 24
5307: PPUSH
5308: LD_STRING DG-6-start
5310: PPUSH
5311: CALL_OW 88
// end else
5315: GO 5396
// begin Say ( Mike , DM-6-start-a ) ;
5317: LD_EXP 25
5321: PPUSH
5322: LD_STRING DM-6-start-a
5324: PPUSH
5325: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5329: LD_EXP 23
5333: PUSH
5334: LD_EXP 24
5338: PUSH
5339: LD_EXP 25
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PPUSH
5349: LD_EXP 26
5353: PPUSH
5354: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5358: LD_EXP 26
5362: PPUSH
5363: LD_EXP 25
5367: PPUSH
5368: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5372: LD_EXP 26
5376: PPUSH
5377: LD_STRING DKam-7-start-a
5379: PPUSH
5380: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5384: LD_EXP 24
5388: PPUSH
5389: LD_STRING DG-6-start-a
5391: PPUSH
5392: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5396: LD_EXP 23
5400: PPUSH
5401: LD_STRING DH-7-start
5403: PPUSH
5404: CALL_OW 88
// end else
5408: GO 6132
// if not Mike and Givi then
5410: LD_EXP 25
5414: NOT
5415: PUSH
5416: LD_EXP 24
5420: AND
5421: IFFALSE 5766
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5423: LD_EXP 24
5427: PUSH
5428: LD_EXP 26
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PPUSH
5437: LD_EXP 23
5441: PPUSH
5442: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5446: LD_EXP 23
5450: PPUSH
5451: LD_EXP 24
5455: PPUSH
5456: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5460: LD_EXP 24
5464: PPUSH
5465: LD_STRING DG-1-start-c
5467: PPUSH
5468: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5472: LD_EXP 23
5476: PPUSH
5477: LD_STRING DH-1-start-c
5479: PPUSH
5480: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5484: LD_EXP 24
5488: PPUSH
5489: LD_STRING DG-2-start-c
5491: PPUSH
5492: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5496: LD_EXP 23
5500: PPUSH
5501: LD_STRING DH-2-start-c
5503: PPUSH
5504: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5508: LD_EXP 24
5512: PPUSH
5513: LD_STRING DG-3-start-c
5515: PPUSH
5516: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5520: LD_EXP 23
5524: PPUSH
5525: LD_INT 83
5527: PPUSH
5528: LD_INT 56
5530: PPUSH
5531: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5535: LD_EXP 24
5539: PPUSH
5540: LD_INT 83
5542: PPUSH
5543: LD_INT 59
5545: PPUSH
5546: CALL_OW 111
// if Kamil then
5550: LD_EXP 26
5554: IFFALSE 5571
// ComMoveXY ( Kamil , 80 , 58 ) ;
5556: LD_EXP 26
5560: PPUSH
5561: LD_INT 80
5563: PPUSH
5564: LD_INT 58
5566: PPUSH
5567: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5571: LD_EXP 23
5575: PPUSH
5576: LD_EXP 24
5580: PPUSH
5581: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5585: LD_EXP 24
5589: PUSH
5590: LD_EXP 26
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: LD_EXP 23
5603: PPUSH
5604: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5608: LD_EXP 23
5612: PPUSH
5613: LD_STRING DH-3-start-c
5615: PPUSH
5616: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5620: LD_EXP 24
5624: PPUSH
5625: LD_STRING DG-4-start-c
5627: PPUSH
5628: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5632: LD_EXP 23
5636: PPUSH
5637: LD_STRING DH-5-start-c
5639: PPUSH
5640: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-5-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-6-start-c
5663: PPUSH
5664: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5668: LD_EXP 24
5672: PPUSH
5673: LD_STRING DG-6-start-c
5675: PPUSH
5676: CALL_OW 88
// if Kamil then
5680: LD_EXP 26
5684: IFFALSE 5740
// begin ComTurnUnit ( Kamil , Heike ) ;
5686: LD_EXP 26
5690: PPUSH
5691: LD_EXP 23
5695: PPUSH
5696: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5700: LD_EXP 26
5704: PPUSH
5705: LD_STRING DKam-1-start-c
5707: PPUSH
5708: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5712: LD_EXP 24
5716: PPUSH
5717: LD_EXP 26
5721: PPUSH
5722: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5726: LD_EXP 24
5730: PPUSH
5731: LD_STRING DG-7-start-c
5733: PPUSH
5734: CALL_OW 88
// end else
5738: GO 5764
// begin Say ( Givi , DG-8-start-c ) ;
5740: LD_EXP 24
5744: PPUSH
5745: LD_STRING DG-8-start-c
5747: PPUSH
5748: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5752: LD_EXP 23
5756: PPUSH
5757: LD_STRING DH-7-start-c
5759: PPUSH
5760: CALL_OW 88
// end ; end else
5764: GO 6132
// if not Givi and Mike then
5766: LD_EXP 24
5770: NOT
5771: PUSH
5772: LD_EXP 25
5776: AND
5777: IFFALSE 6036
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5779: LD_EXP 25
5783: PUSH
5784: LD_EXP 26
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: LD_EXP 23
5797: PPUSH
5798: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5802: LD_EXP 23
5806: PPUSH
5807: LD_EXP 25
5811: PPUSH
5812: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_STRING DM-1-start-b
5823: PPUSH
5824: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5828: LD_EXP 23
5832: PPUSH
5833: LD_STRING DH-1-start-b
5835: PPUSH
5836: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5840: LD_EXP 25
5844: PPUSH
5845: LD_STRING DM-2-start-b
5847: PPUSH
5848: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5852: LD_EXP 23
5856: PPUSH
5857: LD_STRING DH-2-start-b
5859: PPUSH
5860: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5864: LD_EXP 25
5868: PPUSH
5869: LD_STRING DM-3-start-b
5871: PPUSH
5872: CALL_OW 88
// if Kamil then
5876: LD_EXP 26
5880: IFFALSE 5897
// ComMoveXY ( Kamil , 80 , 58 ) ;
5882: LD_EXP 26
5886: PPUSH
5887: LD_INT 80
5889: PPUSH
5890: LD_INT 58
5892: PPUSH
5893: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_INT 83
5904: PPUSH
5905: LD_INT 56
5907: PPUSH
5908: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5912: LD_EXP 25
5916: PPUSH
5917: LD_INT 83
5919: PPUSH
5920: LD_INT 59
5922: PPUSH
5923: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5927: LD_EXP 23
5931: PPUSH
5932: LD_EXP 25
5936: PPUSH
5937: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5941: LD_EXP 26
5945: PUSH
5946: LD_EXP 25
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_EXP 23
5959: PPUSH
5960: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5964: LD_EXP 23
5968: PPUSH
5969: LD_STRING DH-3-start-b
5971: PPUSH
5972: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5976: LD_EXP 25
5980: PPUSH
5981: LD_STRING DM-4-start-b
5983: PPUSH
5984: CALL_OW 88
// if Kamil then
5988: LD_EXP 26
5992: IFFALSE 6022
// begin ComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
6008: LD_EXP 26
6012: PPUSH
6013: LD_STRING DKam-1-start-c
6015: PPUSH
6016: CALL_OW 88
// end else
6020: GO 6034
// begin Say ( Mike , DM-5-start-b ) ;
6022: LD_EXP 25
6026: PPUSH
6027: LD_STRING DM-5-start-b
6029: PPUSH
6030: CALL_OW 88
// end ; end else
6034: GO 6132
// if Kamil then
6036: LD_EXP 26
6040: IFFALSE 6120
// begin AddComTurnUnit ( Heike , Kamil ) ;
6042: LD_EXP 23
6046: PPUSH
6047: LD_EXP 26
6051: PPUSH
6052: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
6056: LD_EXP 26
6060: PPUSH
6061: LD_EXP 23
6065: PPUSH
6066: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6070: LD_EXP 23
6074: PPUSH
6075: LD_STRING DH-1-start-f
6077: PPUSH
6078: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6082: LD_EXP 26
6086: PPUSH
6087: LD_STRING DKam-1-start-f
6089: PPUSH
6090: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6094: LD_EXP 23
6098: PPUSH
6099: LD_STRING DH-2-start-f
6101: PPUSH
6102: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6106: LD_EXP 26
6110: PPUSH
6111: LD_STRING DKam-2-start-f
6113: PPUSH
6114: CALL_OW 88
// end else
6118: GO 6132
// begin Say ( Heike , DH-1-start-d ) ;
6120: LD_EXP 23
6124: PPUSH
6125: LD_STRING DH-1-start-d
6127: PPUSH
6128: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6132: LD_EXP 23
6136: PUSH
6137: LD_EXP 24
6141: PUSH
6142: LD_EXP 25
6146: PUSH
6147: LD_EXP 26
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 139
// InGameOff ;
6162: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6166: LD_STRING OEast
6168: PPUSH
6169: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6173: LD_INT 10
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 424
// SaveForQuickRestart ;
6183: CALL_OW 22
// wait ( 0 0$20 ) ;
6187: LD_INT 700
6189: PPUSH
6190: CALL_OW 67
// SendSciToForest ;
6194: CALL 1524 0 0
// if Difficulty = 1 then
6198: LD_OWVAR 67
6202: PUSH
6203: LD_INT 1
6205: EQUAL
6206: IFFALSE 6210
// exit ;
6208: GO 6331
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6210: LD_INT 10500
6212: PUSH
6213: LD_INT 5250
6215: PUSH
6216: LD_INT 4200
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_OWVAR 67
6228: PUSH
6229: LD_INT 1
6231: MINUS
6232: ARRAY
6233: PPUSH
6234: CALL_OW 67
// if usAlert then
6238: LD_EXP 10
6242: IFFALSE 6246
// exit ;
6244: GO 6331
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: ST_TO_ADDR
// if not tmp then
6280: LD_VAR 0 3
6284: NOT
6285: IFFALSE 6289
// exit ;
6287: GO 6331
// ComExitBuilding ( tmp ) ;
6289: LD_VAR 0 3
6293: PPUSH
6294: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6298: LD_VAR 0 3
6302: PPUSH
6303: LD_INT 31
6305: PPUSH
6306: LD_INT 40
6308: PPUSH
6309: LD_INT 13
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: CALL_OW 180
// end ;
6331: LD_VAR 0 1
6335: RET
// every 3 3$00 do
6336: GO 6338
6338: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6339: LD_INT 1
6341: PPUSH
6342: LD_INT 570
6344: PPUSH
6345: LD_INT 350
6347: PPUSH
6348: CALL_OW 550
// wait ( 2 2$40 ) ;
6352: LD_INT 5600
6354: PPUSH
6355: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6359: LD_INT 0
6361: PPUSH
6362: LD_INT 570
6364: PPUSH
6365: LD_INT 350
6367: PPUSH
6368: CALL_OW 550
// end ;
6372: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6373: LD_EXP 4
6377: NOT
6378: PUSH
6379: LD_INT 2
6381: PPUSH
6382: LD_EXP 27
6386: PPUSH
6387: CALL_OW 292
6391: AND
6392: IFFALSE 7317
6394: GO 6396
6396: DISABLE
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6401: LD_INT 10
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 424
// aviradzeSpotted := true ;
6411: LD_ADDR_EXP 4
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6453: LD_EXP 23
6457: PPUSH
6458: LD_EXP 27
6462: PPUSH
6463: CALL_OW 250
6467: PPUSH
6468: LD_EXP 27
6472: PPUSH
6473: CALL_OW 251
6477: PPUSH
6478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6489: LD_EXP 23
6493: PPUSH
6494: LD_EXP 27
6498: PPUSH
6499: CALL_OW 296
6503: PUSH
6504: LD_INT 16
6506: LESS
6507: IFFALSE 6482
// InGameOn ;
6509: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6513: LD_INT 5
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 343
// if pepAmount > 2 then
6523: LD_VAR 0 2
6527: PUSH
6528: LD_INT 2
6530: GREATER
6531: IFFALSE 6547
// Say ( Heike , DH-1-spot ) else
6533: LD_EXP 23
6537: PPUSH
6538: LD_STRING DH-1-spot
6540: PPUSH
6541: CALL_OW 88
6545: GO 6559
// Say ( Heike , DH-1-spot-d ) ;
6547: LD_EXP 23
6551: PPUSH
6552: LD_STRING DH-1-spot-d
6554: PPUSH
6555: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6559: LD_EXP 23
6563: PPUSH
6564: LD_EXP 27
6568: PPUSH
6569: CALL_OW 250
6573: PPUSH
6574: LD_EXP 27
6578: PPUSH
6579: CALL_OW 251
6583: PPUSH
6584: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6588: LD_ADDR_VAR 0 1
6592: PUSH
6593: LD_EXP 26
6597: PUSH
6598: LD_EXP 25
6602: PUSH
6603: LD_EXP 24
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: FOR_IN
6614: IFFALSE 6653
// if GetDistUnits ( i , Aviradze ) > 7 then
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_EXP 27
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 7
6633: GREATER
6634: IFFALSE 6651
// ComMoveXY ( i , 102 , 40 ) ;
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_INT 102
6643: PPUSH
6644: LD_INT 40
6646: PPUSH
6647: CALL_OW 111
6651: GO 6613
6653: POP
6654: POP
// repeat wait ( 0 0$1 ) ;
6655: LD_INT 35
6657: PPUSH
6658: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6662: LD_EXP 23
6666: PPUSH
6667: LD_EXP 27
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 6
6679: LESS
6680: IFFALSE 6655
// ComTurnUnit ( Heike , Aviradze ) ;
6682: LD_EXP 23
6686: PPUSH
6687: LD_EXP 27
6691: PPUSH
6692: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6696: LD_EXP 27
6700: PUSH
6701: LD_EXP 29
6705: PUSH
6706: LD_EXP 28
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: PPUSH
6716: LD_EXP 23
6720: PPUSH
6721: CALL_OW 119
// if pepAmount > 1 then
6725: LD_VAR 0 2
6729: PUSH
6730: LD_INT 1
6732: GREATER
6733: IFFALSE 6785
// begin wait ( 0 0$2 ) ;
6735: LD_INT 70
6737: PPUSH
6738: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6742: LD_EXP 26
6746: PUSH
6747: LD_EXP 25
6751: PUSH
6752: LD_EXP 24
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PPUSH
6762: LD_EXP 27
6766: PPUSH
6767: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6771: LD_EXP 23
6775: PPUSH
6776: LD_STRING DH-2-spot
6778: PPUSH
6779: CALL_OW 88
// end else
6783: GO 6797
// Say ( Heike , DH-2-spot-d ) ;
6785: LD_EXP 23
6789: PPUSH
6790: LD_STRING DH-2-spot-d
6792: PPUSH
6793: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6797: LD_EXP 27
6801: PPUSH
6802: LD_STRING DA-2-spot
6804: PPUSH
6805: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6809: LD_EXP 23
6813: PPUSH
6814: LD_STRING DH-3-spot
6816: PPUSH
6817: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6821: LD_EXP 28
6825: PPUSH
6826: LD_EXP 23
6830: PPUSH
6831: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6835: LD_EXP 23
6839: PPUSH
6840: LD_EXP 28
6844: PPUSH
6845: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6849: LD_INT 10
6851: PPUSH
6852: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6856: LD_EXP 28
6860: PPUSH
6861: LD_STRING DK-3-spot
6863: PPUSH
6864: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6868: LD_EXP 28
6872: PPUSH
6873: LD_EXP 23
6877: PPUSH
6878: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6882: LD_EXP 23
6886: PPUSH
6887: LD_STRING DH-4-spot
6889: PPUSH
6890: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6894: LD_INT 10
6896: PPUSH
6897: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_EXP 27
6910: PPUSH
6911: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6915: LD_EXP 27
6919: PPUSH
6920: LD_STRING DA-4-spot
6922: PPUSH
6923: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6927: LD_EXP 28
6931: PPUSH
6932: LD_EXP 27
6936: PPUSH
6937: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6941: LD_EXP 28
6945: PPUSH
6946: LD_STRING DK-4-spot
6948: PPUSH
6949: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6953: LD_EXP 27
6957: PPUSH
6958: LD_EXP 28
6962: PPUSH
6963: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6967: LD_EXP 27
6971: PPUSH
6972: LD_STRING DA-5-spot
6974: PPUSH
6975: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6979: LD_EXP 28
6983: PPUSH
6984: LD_STRING DK-5-spot
6986: PPUSH
6987: CALL_OW 88
// if pepAmount = 1 then
6991: LD_VAR 0 2
6995: PUSH
6996: LD_INT 1
6998: EQUAL
6999: IFFALSE 7013
// Say ( Heike , DH-5-spot-f ) ;
7001: LD_EXP 23
7005: PPUSH
7006: LD_STRING DH-5-spot-f
7008: PPUSH
7009: CALL_OW 88
// if pepAmount < 3 then
7013: LD_VAR 0 2
7017: PUSH
7018: LD_INT 3
7020: LESS
7021: IFFALSE 7037
// Say ( Aviradze , DA-6-spot-f ) else
7023: LD_EXP 27
7027: PPUSH
7028: LD_STRING DA-6-spot-f
7030: PPUSH
7031: CALL_OW 88
7035: GO 7073
// if pepAmount < 4 then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 4
7044: LESS
7045: IFFALSE 7061
// Say ( Aviradze , DA-6-spot-c ) else
7047: LD_EXP 27
7051: PPUSH
7052: LD_STRING DA-6-spot-c
7054: PPUSH
7055: CALL_OW 88
7059: GO 7073
// Say ( Aviradze , DA-6-spot ) ;
7061: LD_EXP 27
7065: PPUSH
7066: LD_STRING DA-6-spot
7068: PPUSH
7069: CALL_OW 88
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7091
// Say ( Kamil , DKam-6-spot ) ;
7079: LD_EXP 26
7083: PPUSH
7084: LD_STRING DKam-6-spot
7086: PPUSH
7087: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7091: LD_EXP 28
7095: PPUSH
7096: LD_STRING DK-6-spot
7098: PPUSH
7099: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7103: LD_EXP 27
7107: PPUSH
7108: LD_EXP 23
7112: PPUSH
7113: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7117: LD_EXP 27
7121: PPUSH
7122: LD_STRING DA-7-spot
7124: PPUSH
7125: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7129: LD_EXP 23
7133: PPUSH
7134: LD_STRING DH-7-spot
7136: PPUSH
7137: CALL_OW 88
// if sciCounterKill >= 3 then
7141: LD_EXP 9
7145: PUSH
7146: LD_INT 3
7148: GREATEREQUAL
7149: IFFALSE 7175
// begin Say ( Heike , DH-7-spot-a ) ;
7151: LD_EXP 23
7155: PPUSH
7156: LD_STRING DH-7-spot-a
7158: PPUSH
7159: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7163: LD_EXP 27
7167: PPUSH
7168: LD_STRING DA-8-spot-a
7170: PPUSH
7171: CALL_OW 88
// end ; InGameOff ;
7175: CALL_OW 9
// if sciCounterKill < 3 then
7179: LD_EXP 9
7183: PUSH
7184: LD_INT 3
7186: LESS
7187: IFFALSE 7255
// begin SetSide ( Kaia , 2 ) ;
7189: LD_EXP 28
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: CALL_OW 235
// ComFree ( Kaia ) ;
7201: LD_EXP 28
7205: PPUSH
7206: CALL_OW 139
// if Kamil then
7210: LD_EXP 26
7214: IFFALSE 7237
// begin ComHold ( Kamil ) ;
7216: LD_EXP 26
7220: PPUSH
7221: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7225: LD_EXP 26
7229: PPUSH
7230: LD_INT 5
7232: PPUSH
7233: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7237: LD_STRING OSci
7239: PPUSH
7240: CALL_OW 337
// ComFree ( Aviradze ) ;
7244: LD_EXP 27
7248: PPUSH
7249: CALL_OW 139
// end else
7253: GO 7317
// begin for i in FilterAllUnits ( [ f_side , 5 ] ) do
7255: LD_ADDR_VAR 0 1
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PUSH
7275: FOR_IN
7276: IFFALSE 7292
// SetSide ( i , 2 ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: CALL_OW 235
7290: GO 7275
7292: POP
7293: POP
// aviradzeQuestDone := true ;
7294: LD_ADDR_EXP 8
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// attackDeltaAllowed := true ;
7302: LD_ADDR_EXP 14
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7310: LD_STRING ODelta2
7312: PPUSH
7313: CALL_OW 337
// end ; end ;
7317: PPOPN 2
7319: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7320: LD_EXP 27
7324: PPUSH
7325: LD_INT 106
7327: PPUSH
7328: LD_INT 38
7330: PPUSH
7331: CALL_OW 297
7335: PUSH
7336: LD_INT 8
7338: GREATER
7339: PUSH
7340: LD_EXP 27
7344: PPUSH
7345: CALL_OW 255
7349: PUSH
7350: LD_INT 5
7352: EQUAL
7353: AND
7354: IFFALSE 7375
7356: GO 7358
7358: DISABLE
// begin enable ;
7359: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7360: LD_EXP 27
7364: PPUSH
7365: LD_INT 106
7367: PPUSH
7368: LD_INT 38
7370: PPUSH
7371: CALL_OW 111
// end ;
7375: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7376: LD_EXP 10
7380: PUSH
7381: LD_EXP 8
7385: NOT
7386: AND
7387: IFFALSE 7404
7389: GO 7391
7391: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7392: LD_EXP 20
7396: PPUSH
7397: LD_STRING DDelta-Alarm-1
7399: PPUSH
7400: CALL 75342 0 2
7404: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7405: LD_EXP 7
7409: NOT
7410: PUSH
7411: LD_EXP 22
7415: PPUSH
7416: LD_EXP 23
7420: PPUSH
7421: CALL_OW 74
7425: PPUSH
7426: LD_EXP 23
7430: PPUSH
7431: CALL_OW 296
7435: PUSH
7436: LD_INT 8
7438: LESS
7439: AND
7440: PUSH
7441: LD_INT 2
7443: PPUSH
7444: LD_EXP 22
7448: PPUSH
7449: LD_EXP 23
7453: PPUSH
7454: CALL_OW 74
7458: PPUSH
7459: CALL_OW 292
7463: AND
7464: PUSH
7465: LD_INT 22
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 21
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: PUSH
7494: LD_INT 1
7496: GREATER
7497: AND
7498: PUSH
7499: LD_EXP 4
7503: NOT
7504: AND
7505: IFFALSE 7549
7507: GO 7509
7509: DISABLE
// begin sciSpotted := true ;
7510: LD_ADDR_EXP 7
7514: PUSH
7515: LD_INT 1
7517: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7518: LD_EXP 22
7522: PPUSH
7523: LD_EXP 23
7527: PPUSH
7528: CALL_OW 74
7532: PPUSH
7533: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7537: LD_EXP 23
7541: PPUSH
7542: LD_STRING DH-1-sci
7544: PPUSH
7545: CALL_OW 88
// end ;
7549: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7550: LD_EXP 4
7554: PUSH
7555: LD_EXP 7
7559: NOT
7560: AND
7561: PUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_EXP 22
7569: PPUSH
7570: LD_EXP 23
7574: PPUSH
7575: CALL_OW 74
7579: PPUSH
7580: CALL_OW 292
7584: AND
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 21
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PUSH
7615: LD_INT 1
7617: GREATER
7618: AND
7619: PUSH
7620: LD_EXP 4
7624: AND
7625: PUSH
7626: LD_EXP 8
7630: NOT
7631: AND
7632: IFFALSE 7773
7634: GO 7636
7636: DISABLE
7637: LD_INT 0
7639: PPUSH
// begin sciSpotted := true ;
7640: LD_ADDR_EXP 7
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_EXP 22
7657: PPUSH
7658: LD_EXP 23
7662: PPUSH
7663: CALL_OW 74
7667: ST_TO_ADDR
// DialogueOn ;
7668: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 250
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 251
7691: PPUSH
7692: LD_INT 2
7694: PPUSH
7695: LD_INT 3
7697: NEG
7698: PPUSH
7699: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7703: LD_VAR 0 1
7707: PPUSH
7708: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7712: LD_EXP 23
7716: PPUSH
7717: LD_STRING DH-1-sci-a
7719: PPUSH
7720: CALL_OW 88
// if Mike then
7724: LD_EXP 25
7728: IFFALSE 7742
// Say ( Mike , DM-1-sci-a ) ;
7730: LD_EXP 25
7734: PPUSH
7735: LD_STRING DM-1-sci-a
7737: PPUSH
7738: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 250
7751: PPUSH
7752: LD_VAR 0 1
7756: PPUSH
7757: CALL_OW 251
7761: PPUSH
7762: LD_INT 2
7764: PPUSH
7765: CALL_OW 331
// DialogueOff ;
7769: CALL_OW 7
// end ;
7773: PPOPN 1
7775: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7776: LD_EXP 10
7780: PUSH
7781: LD_EXP 19
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 1000
7793: LESS
7794: PUSH
7795: LD_INT 3
7797: PPUSH
7798: CALL_OW 256
7802: PUSH
7803: LD_INT 999
7805: LESS
7806: OR
7807: AND
7808: IFFALSE 8064
7810: GO 7812
7812: DISABLE
7813: LD_INT 0
7815: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7816: LD_ADDR_VAR 0 1
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 21
7833: PUSH
7834: LD_INT 2
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 58
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7857: LD_VAR 0 1
7861: PUSH
7862: LD_EXP 19
7866: PPUSH
7867: CALL_OW 302
7871: AND
7872: IFFALSE 7914
// begin if IsInUnit ( Gladstone ) then
7874: LD_EXP 19
7878: PPUSH
7879: CALL_OW 310
7883: IFFALSE 7894
// ComExitBuilding ( Gladstone ) ;
7885: LD_EXP 19
7889: PPUSH
7890: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7894: LD_EXP 19
7898: PPUSH
7899: LD_VAR 0 1
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: CALL_OW 180
// end else
7912: GO 7934
// if IsInUnit ( Gladstone ) then
7914: LD_EXP 19
7918: PPUSH
7919: CALL_OW 310
7923: IFFALSE 7934
// ComExitBuilding ( Gladstone ) ;
7925: LD_EXP 19
7929: PPUSH
7930: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7934: LD_EXP 19
7938: PPUSH
7939: LD_INT 27
7941: PPUSH
7942: LD_INT 51
7944: PPUSH
7945: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7949: LD_EXP 19
7953: PPUSH
7954: LD_STRING D8-Glad-2
7956: PPUSH
7957: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7961: LD_INT 35
7963: PPUSH
7964: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7968: LD_EXP 19
7972: PPUSH
7973: LD_INT 27
7975: PPUSH
7976: LD_INT 51
7978: PPUSH
7979: CALL_OW 307
7983: PUSH
7984: LD_EXP 19
7988: PPUSH
7989: CALL_OW 310
7993: PPUSH
7994: LD_INT 27
7996: PPUSH
7997: LD_INT 51
7999: PPUSH
8000: CALL_OW 307
8004: OR
8005: PUSH
8006: LD_EXP 19
8010: PPUSH
8011: CALL_OW 301
8015: OR
8016: IFFALSE 7961
// if IsDead ( Gladstone ) then
8018: LD_EXP 19
8022: PPUSH
8023: CALL_OW 301
8027: IFFALSE 8031
// exit ;
8029: GO 8064
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
8031: LD_INT 27
8033: PPUSH
8034: LD_INT 51
8036: PPUSH
8037: CALL_OW 428
8041: PPUSH
8042: CALL_OW 64
// gladstoneEscaped := true ;
8046: LD_ADDR_EXP 12
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
8054: LD_INT 1
8056: PPUSH
8057: LD_STRING 02_GladstoneEscaped
8059: PPUSH
8060: CALL_OW 39
// end ;
8064: PPOPN 1
8066: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone and GetSide ( Aviradze ) = 5 do
8067: LD_EXP 4
8071: PUSH
8072: LD_EXP 9
8076: PUSH
8077: LD_INT 3
8079: GREATEREQUAL
8080: PUSH
8081: LD_EXP 22
8085: NOT
8086: OR
8087: AND
8088: PUSH
8089: LD_EXP 8
8093: NOT
8094: AND
8095: PUSH
8096: LD_EXP 27
8100: PPUSH
8101: CALL_OW 255
8105: PUSH
8106: LD_INT 5
8108: EQUAL
8109: AND
8110: IFFALSE 8161
8112: GO 8114
8114: DISABLE
// begin DialogueOn ;
8115: CALL_OW 6
// Say ( Heike , DH-1-quest-done ) ;
8119: LD_EXP 23
8123: PPUSH
8124: LD_STRING DH-1-quest-done
8126: PPUSH
8127: CALL_OW 88
// if Givi then
8131: LD_EXP 24
8135: IFFALSE 8149
// Say ( Givi , DG-1-quest-done ) ;
8137: LD_EXP 24
8141: PPUSH
8142: LD_STRING DG-1-quest-done
8144: PPUSH
8145: CALL_OW 88
// DialogueOff ;
8149: CALL_OW 7
// aviradzeQuestDone := true ;
8153: LD_ADDR_EXP 8
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// end ;
8161: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 22
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 70
8179: PUSH
8180: LD_INT 1
8182: GREATER
8183: PUSH
8184: LD_EXP 8
8188: NOT
8189: AND
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: CALL_OW 255
8198: PUSH
8199: LD_INT 2
8201: NONEQUAL
8202: AND
8203: PUSH
8204: LD_EXP 25
8208: PPUSH
8209: CALL_OW 302
8213: AND
8214: PUSH
8215: LD_EXP 23
8219: PPUSH
8220: CALL_OW 302
8224: AND
8225: IFFALSE 8370
8227: GO 8229
8229: DISABLE
// begin DialogueOn ;
8230: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8234: LD_INT 47
8236: PPUSH
8237: LD_INT 19
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: LD_INT 6
8245: NEG
8246: PPUSH
8247: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8251: LD_INT 47
8253: PPUSH
8254: LD_INT 19
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8264: LD_INT 34
8266: PPUSH
8267: LD_INT 32
8269: PPUSH
8270: LD_INT 2
8272: PPUSH
8273: LD_INT 6
8275: NEG
8276: PPUSH
8277: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8281: LD_INT 34
8283: PPUSH
8284: LD_INT 32
8286: PPUSH
8287: LD_INT 2
8289: PPUSH
8290: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8294: LD_EXP 25
8298: PPUSH
8299: LD_STRING DM-Prem-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8306: LD_EXP 23
8310: PPUSH
8311: LD_STRING DH-Prem-2
8313: PPUSH
8314: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8318: LD_EXP 23
8322: PPUSH
8323: LD_STRING DH-Prem-3
8325: PPUSH
8326: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8330: LD_EXP 25
8334: PPUSH
8335: LD_STRING DM-Prem-4
8337: PPUSH
8338: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8342: LD_EXP 25
8346: PPUSH
8347: LD_STRING DM-Prem-5
8349: PPUSH
8350: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8354: LD_EXP 24
8358: PPUSH
8359: LD_STRING DG-Prem-6
8361: PPUSH
8362: CALL_OW 88
// DialogueOff ;
8366: CALL_OW 7
// end ;
8370: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8371: LD_INT 5
8373: PPUSH
8374: LD_EXP 23
8378: PPUSH
8379: CALL_OW 292
8383: PUSH
8384: LD_EXP 23
8388: PPUSH
8389: LD_EXP 27
8393: PPUSH
8394: CALL_OW 296
8398: PUSH
8399: LD_INT 6
8401: LESS
8402: AND
8403: PUSH
8404: LD_EXP 8
8408: AND
8409: PUSH
8410: LD_EXP 14
8414: NOT
8415: AND
8416: IFFALSE 8554
8418: GO 8420
8420: DISABLE
8421: LD_INT 0
8423: PPUSH
// begin attackDeltaAllowed := true ;
8424: LD_ADDR_EXP 14
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// InGameOn ;
8432: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8436: LD_EXP 23
8440: PPUSH
8441: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8445: LD_INT 10
8447: PPUSH
8448: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8452: LD_EXP 27
8456: PPUSH
8457: LD_EXP 23
8461: PPUSH
8462: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8466: LD_EXP 23
8470: PPUSH
8471: LD_EXP 27
8475: PPUSH
8476: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8480: LD_EXP 23
8484: PPUSH
8485: LD_STRING DH-1-return
8487: PPUSH
8488: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8492: LD_EXP 27
8496: PPUSH
8497: LD_STRING DA-1-return
8499: PPUSH
8500: CALL_OW 88
// InGameOff ;
8504: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8508: LD_STRING ODelta
8510: PPUSH
8511: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: PUSH
8535: FOR_IN
8536: IFFALSE 8552
// SetSide ( i , 2 ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_INT 2
8545: PPUSH
8546: CALL_OW 235
8550: GO 8535
8552: POP
8553: POP
// end ;
8554: PPOPN 1
8556: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8557: LD_EXP 10
8561: PUSH
8562: LD_EXP 14
8566: NOT
8567: AND
8568: IFFALSE 8581
8570: GO 8572
8572: DISABLE
// spottedBeforeRadio := true ;
8573: LD_ADDR_EXP 6
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
8581: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8582: LD_EXP 14
8586: PUSH
8587: LD_EXP 30
8591: PPUSH
8592: CALL_OW 302
8596: AND
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: CALL_OW 255
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: AND
8610: PUSH
8611: LD_EXP 20
8615: PPUSH
8616: CALL_OW 302
8620: AND
8621: PUSH
8622: LD_EXP 10
8626: NOT
8627: AND
8628: IFFALSE 9856
8630: GO 8632
8632: DISABLE
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
8637: PPUSH
// begin trap := 0 ;
8638: LD_ADDR_EXP 17
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8646: LD_INT 420
8648: PPUSH
8649: CALL_OW 67
// DialogueOn ;
8653: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8657: LD_EXP 30
8661: PPUSH
8662: LD_STRING DMar-1-radio
8664: PPUSH
8665: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8669: LD_EXP 23
8673: PPUSH
8674: LD_STRING DH-1-radio
8676: PPUSH
8677: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8681: LD_EXP 30
8685: PPUSH
8686: LD_STRING DMar-2-radio
8688: PPUSH
8689: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8693: LD_EXP 23
8697: PPUSH
8698: LD_STRING DH-2-radio
8700: PPUSH
8701: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8705: LD_EXP 26
8709: PPUSH
8710: CALL_OW 302
8714: PUSH
8715: LD_EXP 29
8719: PPUSH
8720: CALL_OW 302
8724: OR
8725: IFFALSE 9856
// begin case Query ( Q1Trap ) of 1 :
8727: LD_STRING Q1Trap
8729: PPUSH
8730: CALL_OW 97
8734: PUSH
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8949
8743: POP
// begin if IsOk ( Kamil ) then
8744: LD_EXP 26
8748: PPUSH
8749: CALL_OW 302
8753: IFFALSE 8832
// begin Say ( Kamil , DKam-2-radio ) ;
8755: LD_EXP 26
8759: PPUSH
8760: LD_STRING DKam-2-radio
8762: PPUSH
8763: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8767: LD_EXP 26
8771: PPUSH
8772: LD_STRING DKam-3-radio
8774: PPUSH
8775: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8779: LD_EXP 20
8783: PPUSH
8784: LD_STRING DDelta-3-radio
8786: PPUSH
8787: CALL 75342 0 2
// dwait ( 0 0$01 ) ;
8791: LD_INT 35
8793: PPUSH
8794: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8798: LD_EXP 23
8802: PPUSH
8803: LD_STRING DH-3-radio
8805: PPUSH
8806: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8810: LD_EXP 26
8814: PPUSH
8815: LD_STRING DKam-4-radio
8817: PPUSH
8818: CALL_OW 88
// trap := 1 ;
8822: LD_ADDR_EXP 17
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// end else
8830: GO 8943
// begin Say ( Sophia , DS-1-radio ) ;
8832: LD_EXP 29
8836: PPUSH
8837: LD_STRING DS-1-radio
8839: PPUSH
8840: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8844: LD_EXP 29
8848: PPUSH
8849: LD_STRING DS-2-radio
8851: PPUSH
8852: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_STRING DDelta-2-radio-s
8863: PPUSH
8864: CALL 75342 0 2
// Say ( Sophia , DS-3-radio ) ;
8868: LD_EXP 29
8872: PPUSH
8873: LD_STRING DS-3-radio
8875: PPUSH
8876: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8880: LD_EXP 20
8884: PPUSH
8885: LD_STRING DDelta-3-radio-s
8887: PPUSH
8888: CALL 75342 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8892: LD_EXP 29
8896: PPUSH
8897: LD_STRING DS-4-radio-s
8899: PPUSH
8900: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8904: LD_EXP 20
8908: PPUSH
8909: LD_STRING DDelta-4-radio-s
8911: PPUSH
8912: CALL 75342 0 2
// dwait ( 0 0$01 ) ;
8916: LD_INT 35
8918: PPUSH
8919: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8923: LD_EXP 23
8927: PPUSH
8928: LD_STRING DH-1-trap
8930: PPUSH
8931: CALL_OW 88
// trap := 0 ;
8935: LD_ADDR_EXP 17
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// end ; DialogueOff ;
8943: CALL_OW 7
// end ; 2 :
8947: GO 8967
8949: LD_INT 2
8951: DOUBLE
8952: EQUAL
8953: IFTRUE 8957
8955: GO 8966
8957: POP
// begin DialogueOff ;
8958: CALL_OW 7
// exit ;
8962: GO 9856
// end ; end ;
8964: GO 8967
8966: POP
// if trap = 1 then
8967: LD_EXP 17
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9427
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8977: LD_INT 64
8979: PPUSH
8980: LD_INT 32
8982: PPUSH
8983: LD_INT 2
8985: PPUSH
8986: LD_INT 8
8988: PPUSH
8989: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8993: LD_INT 64
8995: PPUSH
8996: LD_INT 32
8998: PPUSH
8999: CALL_OW 84
// tmp := [ ] ;
9003: LD_ADDR_VAR 0 3
9007: PUSH
9008: EMPTY
9009: ST_TO_ADDR
// k := 3 ;
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_INT 3
9017: ST_TO_ADDR
// if usForces < 3 then
9018: LD_EXP 21
9022: PUSH
9023: LD_INT 3
9025: LESS
9026: IFFALSE 9038
// k := usForces ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_EXP 21
9037: ST_TO_ADDR
// for i := 1 to k do
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: DOUBLE
9044: LD_INT 1
9046: DEC
9047: ST_TO_ADDR
9048: LD_VAR 0 2
9052: PUSH
9053: FOR_TO
9054: IFFALSE 9109
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9056: LD_ADDR_VAR 0 3
9060: PUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: PPUSH
9075: LD_EXP 21
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9089: LD_ADDR_EXP 21
9093: PUSH
9094: LD_EXP 21
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 3
9106: ST_TO_ADDR
// end ;
9107: GO 9053
9109: POP
9110: POP
// usPatrol := tmp ;
9111: LD_ADDR_EXP 16
9115: PUSH
9116: LD_VAR 0 3
9120: ST_TO_ADDR
// for i in tmp do
9121: LD_ADDR_VAR 0 1
9125: PUSH
9126: LD_VAR 0 3
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9262
// begin if IsInUnit ( i ) then
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 310
9143: IFFALSE 9154
// ComExitBuilding ( i ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_INT 63
9161: PPUSH
9162: LD_INT 31
9164: PPUSH
9165: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9169: LD_VAR 0 1
9173: PPUSH
9174: LD_INT 70
9176: PPUSH
9177: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 103
9188: PPUSH
9189: LD_INT 43
9191: PPUSH
9192: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 105
9203: PPUSH
9204: CALL_OW 202
// if Difficulty > 1 then
9208: LD_OWVAR 67
9212: PUSH
9213: LD_INT 1
9215: GREATER
9216: IFFALSE 9233
// AddComAgressiveMove ( i , 114 , 69 ) ;
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 114
9225: PPUSH
9226: LD_INT 69
9228: PPUSH
9229: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 105
9240: PPUSH
9241: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 42
9252: PPUSH
9253: LD_INT 20
9255: PPUSH
9256: CALL_OW 174
// end ;
9260: GO 9131
9262: POP
9263: POP
// wait ( 0 0$8 ) ;
9264: LD_INT 280
9266: PPUSH
9267: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9271: LD_INT 64
9273: PPUSH
9274: LD_INT 32
9276: PPUSH
9277: LD_INT 2
9279: PPUSH
9280: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for i in tmp do
9291: LD_ADDR_VAR 0 1
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9333
// if IsDead ( i ) then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9331
// tmp := tmp diff i ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 1
9329: DIFF
9330: ST_TO_ADDR
9331: GO 9301
9333: POP
9334: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9335: LD_VAR 0 3
9339: NOT
9340: PUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 95
9348: PUSH
9349: LD_INT 7
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 60
9361: PUSH
9362: EMPTY
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_VAR 0 3
9382: EQUAL
9383: OR
9384: IFFALSE 9284
// if tmp then
9386: LD_VAR 0 3
9390: IFFALSE 9417
// begin usPatrol := [ ] ;
9392: LD_ADDR_EXP 16
9396: PUSH
9397: EMPTY
9398: ST_TO_ADDR
// usForces := usForces union tmp ;
9399: LD_ADDR_EXP 21
9403: PUSH
9404: LD_EXP 21
9408: PUSH
9409: LD_VAR 0 3
9413: UNION
9414: ST_TO_ADDR
// end else
9415: GO 9425
// trickyMove := true ;
9417: LD_ADDR_EXP 15
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// end else
9425: GO 9856
// begin tmp := [ ] ;
9427: LD_ADDR_VAR 0 3
9431: PUSH
9432: EMPTY
9433: ST_TO_ADDR
// k := 4 ;
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: LD_INT 4
9441: ST_TO_ADDR
// if usForces < 4 then
9442: LD_EXP 21
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: IFFALSE 9462
// k := usForces ;
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_EXP 21
9461: ST_TO_ADDR
// for i := 1 to k do
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: DOUBLE
9468: LD_INT 1
9470: DEC
9471: ST_TO_ADDR
9472: LD_VAR 0 2
9476: PUSH
9477: FOR_TO
9478: IFFALSE 9533
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: PLUS
9498: PPUSH
9499: LD_EXP 21
9503: PUSH
9504: LD_INT 1
9506: ARRAY
9507: PPUSH
9508: CALL_OW 1
9512: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9513: LD_ADDR_EXP 21
9517: PUSH
9518: LD_EXP 21
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 3
9530: ST_TO_ADDR
// end ;
9531: GO 9477
9533: POP
9534: POP
// if Lynch then
9535: LD_EXP 20
9539: IFFALSE 9557
// tmp := tmp ^ Lynch ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: LD_VAR 0 3
9550: PUSH
9551: LD_EXP 20
9555: ADD
9556: ST_TO_ADDR
// usPatrol := tmp ;
9557: LD_ADDR_EXP 16
9561: PUSH
9562: LD_VAR 0 3
9566: ST_TO_ADDR
// for i in tmp do
9567: LD_ADDR_VAR 0 1
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: FOR_IN
9578: IFFALSE 9671
// begin if IsInUnit ( i ) then
9580: LD_VAR 0 1
9584: PPUSH
9585: CALL_OW 310
9589: IFFALSE 9600
// ComExitBuilding ( i ) ;
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9600: LD_VAR 0 1
9604: PPUSH
9605: LD_INT 69
9607: PPUSH
9608: LD_INT 15
9610: PPUSH
9611: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9615: LD_VAR 0 1
9619: PPUSH
9620: LD_INT 700
9622: PPUSH
9623: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9627: LD_VAR 0 1
9631: PPUSH
9632: LD_INT 55
9634: PPUSH
9635: LD_INT 43
9637: PPUSH
9638: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9642: LD_VAR 0 1
9646: PPUSH
9647: LD_INT 700
9649: PPUSH
9650: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9654: LD_VAR 0 1
9658: PPUSH
9659: LD_INT 42
9661: PPUSH
9662: LD_INT 20
9664: PPUSH
9665: CALL_OW 174
// end ;
9669: GO 9577
9671: POP
9672: POP
// repeat wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// for i in tmp do
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 3
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9722
// if IsDead ( i ) then
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 301
9702: IFFALSE 9720
// tmp := tmp diff i ;
9704: LD_ADDR_VAR 0 3
9708: PUSH
9709: LD_VAR 0 3
9713: PUSH
9714: LD_VAR 0 1
9718: DIFF
9719: ST_TO_ADDR
9720: GO 9690
9722: POP
9723: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9724: LD_VAR 0 3
9728: NOT
9729: PUSH
9730: LD_VAR 0 3
9734: PPUSH
9735: LD_INT 95
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 60
9750: PUSH
9751: EMPTY
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 72
9766: PUSH
9767: LD_VAR 0 3
9771: EQUAL
9772: OR
9773: IFFALSE 9673
// if not tmp then
9775: LD_VAR 0 3
9779: NOT
9780: IFFALSE 9792
// trickyMove := true else
9782: LD_ADDR_EXP 15
9786: PUSH
9787: LD_INT 1
9789: ST_TO_ADDR
9790: GO 9799
// usPatrol := [ ] ;
9792: LD_ADDR_EXP 16
9796: PUSH
9797: EMPTY
9798: ST_TO_ADDR
// if tmp diff Lynch then
9799: LD_VAR 0 3
9803: PUSH
9804: LD_EXP 20
9808: DIFF
9809: IFFALSE 9833
// usForces := usForces union ( tmp diff Lynch ) ;
9811: LD_ADDR_EXP 21
9815: PUSH
9816: LD_EXP 21
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_EXP 20
9830: DIFF
9831: UNION
9832: ST_TO_ADDR
// if IsOk ( Lynch ) then
9833: LD_EXP 20
9837: PPUSH
9838: CALL_OW 302
9842: IFFALSE 9856
// ComEnterUnit ( Lynch , Delta ) ;
9844: LD_EXP 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 120
// end ; end ; end ;
9856: PPOPN 3
9858: END
// every 0 0$1 trigger trickyMove do
9859: LD_EXP 15
9863: IFFALSE 9875
9865: GO 9867
9867: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9868: LD_STRING ACH_TRAP
9870: PPUSH
9871: CALL_OW 543
9875: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9876: LD_INT 22
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 23
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 69
9915: IFFALSE 9927
9917: GO 9919
9919: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9920: LD_STRING ACH_SCRAP
9922: PPUSH
9923: CALL_OW 543
9927: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9928: LD_EXP 16
9932: PPUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 72
9947: PUSH
9948: LD_INT 1
9950: PPUSH
9951: LD_EXP 23
9955: PPUSH
9956: CALL_OW 292
9960: AND
9961: IFFALSE 10094
9963: GO 9965
9965: DISABLE
// begin if not trap then
9966: LD_EXP 17
9970: NOT
9971: IFFALSE 9999
// begin Say ( Heike , DH-2-trap ) ;
9973: LD_EXP 23
9977: PPUSH
9978: LD_STRING DH-2-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9985: LD_EXP 25
9989: PPUSH
9990: LD_STRING DM-2-trap
9992: PPUSH
9993: CALL_OW 88
// end else
9997: GO 10011
// begin Say ( Heike , DH-1-trap-a ) ;
9999: LD_EXP 23
10003: PPUSH
10004: LD_STRING DH-1-trap-a
10006: PPUSH
10007: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// until trickyMove ;
10018: LD_EXP 15
10022: IFFALSE 10011
// Say ( Heike , DH-3-trap ) ;
10024: LD_EXP 23
10028: PPUSH
10029: LD_STRING DH-3-trap
10031: PPUSH
10032: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
10036: LD_EXP 24
10040: PPUSH
10041: CALL_OW 302
10045: PUSH
10046: LD_EXP 28
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10094
// begin Say ( Givi , DG-3-trap ) ;
10058: LD_EXP 24
10062: PPUSH
10063: LD_STRING DG-3-trap
10065: PPUSH
10066: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
10070: LD_EXP 28
10074: PPUSH
10075: LD_STRING DK-3-trap
10077: PPUSH
10078: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
10082: LD_EXP 24
10086: PPUSH
10087: LD_STRING DG-4-trap
10089: PPUSH
10090: CALL_OW 88
// end ; end ;
10094: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 255
10102: PUSH
10103: LD_INT 2
10105: EQUAL
10106: PUSH
10107: LD_EXP 14
10111: AND
10112: IFFALSE 10271
10114: GO 10116
10116: DISABLE
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
// begin if not IsOk ( Kaia ) then
10121: LD_EXP 28
10125: PPUSH
10126: CALL_OW 302
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10271
// if tick < 5 5$00 then
10135: LD_OWVAR 1
10139: PUSH
10140: LD_INT 10500
10142: LESS
10143: IFFALSE 10152
// SetAchievement ( ACH_DELTA ) ;
10145: LD_STRING ACH_DELTA
10147: PPUSH
10148: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10152: LD_EXP 28
10156: PPUSH
10157: LD_STRING DK-1-capture
10159: PPUSH
10160: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10164: LD_EXP 23
10168: PPUSH
10169: LD_STRING DH-1-capture
10171: PPUSH
10172: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 25
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: ST_TO_ADDR
// if not tmp then
10210: LD_VAR 0 2
10214: NOT
10215: IFFALSE 10219
// exit ;
10217: GO 10271
// for i in tmp do
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_VAR 0 2
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10269
// begin if IsInUnit ( i ) then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 310
10241: IFFALSE 10252
// ComExitBuilding ( i ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_INT 38
10259: PPUSH
10260: LD_INT 23
10262: PPUSH
10263: CALL_OW 174
// end ;
10267: GO 10229
10269: POP
10270: POP
// end ;
10271: PPOPN 2
10273: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10274: LD_INT 3
10276: PPUSH
10277: CALL_OW 255
10281: PUSH
10282: LD_INT 2
10284: EQUAL
10285: PUSH
10286: LD_EXP 14
10290: AND
10291: IFFALSE 10336
10293: GO 10295
10295: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10296: LD_INT 1
10298: PPUSH
10299: LD_INT 2
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// DialogueOn ;
10309: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10313: LD_EXP 27
10317: PPUSH
10318: LD_STRING DA-1-capture
10320: PPUSH
10321: CALL_OW 88
// DialogueOff ;
10325: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10329: LD_STRING OTame
10331: PPUSH
10332: CALL_OW 337
// end ;
10336: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10337: LD_INT 1
10339: PPUSH
10340: LD_INT 2
10342: PPUSH
10343: CALL_OW 321
10347: PUSH
10348: LD_INT 2
10350: EQUAL
10351: PUSH
10352: LD_EXP 14
10356: AND
10357: IFFALSE 10508
10359: GO 10361
10361: DISABLE
// begin DialogueOn ;
10362: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10366: LD_EXP 27
10370: PPUSH
10371: LD_STRING DA-1-ape
10373: PPUSH
10374: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10378: LD_EXP 23
10382: PPUSH
10383: LD_STRING DH-1-ape
10385: PPUSH
10386: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10390: LD_EXP 27
10394: PPUSH
10395: LD_STRING DA-2-ape
10397: PPUSH
10398: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10402: LD_EXP 27
10406: PPUSH
10407: LD_STRING DA-3-ape
10409: PPUSH
10410: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10414: LD_EXP 23
10418: PPUSH
10419: LD_STRING DH-3-ape
10421: PPUSH
10422: CALL_OW 88
// DialogueOff ;
10426: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10430: LD_INT 22
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 12
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: PUSH
10459: LD_INT 0
10461: EQUAL
10462: IFFALSE 10474
// SpawnApeman ( forest , 2 ) ;
10464: LD_INT 1
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10474: LD_INT 35
10476: PPUSH
10477: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10481: LD_INT 25
10483: PUSH
10484: LD_INT 12
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 69
10495: PUSH
10496: LD_INT 0
10498: EQUAL
10499: IFFALSE 10474
// YouLost ( Ape ) ;
10501: LD_STRING Ape
10503: PPUSH
10504: CALL_OW 104
// end ;
10508: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10509: LD_EXP 18
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: LD_INT 2
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_OWVAR 67
10536: ARRAY
10537: GREATEREQUAL
10538: IFFALSE 10589
10540: GO 10542
10542: DISABLE
// begin wait ( 0 0$5 ) ;
10543: LD_INT 175
10545: PPUSH
10546: CALL_OW 67
// DialogueOn ;
10550: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10554: LD_EXP 27
10558: PPUSH
10559: LD_STRING DA-1-failure
10561: PPUSH
10562: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10566: LD_EXP 27
10570: PPUSH
10571: LD_STRING DA-2-failure
10573: PPUSH
10574: CALL_OW 88
// YouLost ( Failure ) ;
10578: LD_STRING Failure
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10590: LD_EXP 28
10594: PPUSH
10595: CALL_OW 256
10599: PUSH
10600: LD_INT 3
10602: LESS
10603: IFFALSE 10736
10605: GO 10607
10607: DISABLE
// begin DialogueOn ;
10608: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10612: LD_EXP 28
10616: PPUSH
10617: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10621: LD_EXP 28
10625: PPUSH
10626: LD_STRING DK-Kaiaout-1
10628: PPUSH
10629: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10633: LD_EXP 23
10637: PPUSH
10638: LD_STRING DH-Kaiaout-2
10640: PPUSH
10641: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10645: LD_EXP 24
10649: PPUSH
10650: LD_STRING DG-Kaiaout-3
10652: PPUSH
10653: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10657: LD_EXP 23
10661: PPUSH
10662: LD_STRING DH-Kaiaout-4
10664: PPUSH
10665: CALL_OW 88
// if Givi then
10669: LD_EXP 24
10673: IFFALSE 10723
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10675: LD_EXP 24
10679: PPUSH
10680: LD_STRING DG-Kaiaout-5
10682: PPUSH
10683: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10687: LD_EXP 23
10691: PPUSH
10692: LD_STRING DH-Kaiaout-6
10694: PPUSH
10695: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10699: LD_EXP 24
10703: PPUSH
10704: LD_STRING DG-Kaiaout-7
10706: PPUSH
10707: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10711: LD_EXP 23
10715: PPUSH
10716: LD_STRING DH-Kaiaout-8
10718: PPUSH
10719: CALL_OW 88
// end ; DialogueOff ;
10723: CALL_OW 7
// KillUnit ( Kaia ) ;
10727: LD_EXP 28
10731: PPUSH
10732: CALL_OW 66
// end ;
10736: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var i , tmp ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: PUSH
10766: LD_EXP 27
10770: PPUSH
10771: CALL_OW 302
10775: AND
10776: PUSH
10777: LD_EXP 27
10781: PPUSH
10782: CALL_OW 255
10786: PUSH
10787: LD_INT 2
10789: EQUAL
10790: AND
10791: IFFALSE 11862
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10800: LD_INT 22
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 34
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: IFFALSE 11025
// begin Query ( QEnemyInSight ) ;
10848: LD_STRING QEnemyInSight
10850: PPUSH
10851: CALL_OW 97
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: ST_TO_ADDR
// for i in tmp do
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: LD_VAR 0 2
10916: PUSH
10917: FOR_IN
10918: IFFALSE 10937
// ComAgressiveMove ( i , 36 , 22 ) ;
10920: LD_VAR 0 1
10924: PPUSH
10925: LD_INT 36
10927: PPUSH
10928: LD_INT 22
10930: PPUSH
10931: CALL_OW 114
10935: GO 10917
10937: POP
10938: POP
// repeat wait ( 0 0$1 ) ;
10939: LD_INT 35
10941: PPUSH
10942: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10946: LD_INT 22
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 1
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 34
10971: PUSH
10972: LD_INT 4
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: NOT
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 0
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: AND
11023: IFFALSE 10939
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11025: LD_ADDR_VAR 0 2
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// InGameOn ;
11059: CALL_OW 8
// if tick <= 10 10$00 then
11063: LD_OWVAR 1
11067: PUSH
11068: LD_INT 21000
11070: LESSEQUAL
11071: IFFALSE 11080
// SetAchievement ( ACH_HSPEED_2 ) ;
11073: LD_STRING ACH_HSPEED_2
11075: PPUSH
11076: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
11080: LD_VAR 0 2
11084: PPUSH
11085: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_EXP 27
11098: PPUSH
11099: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
11103: LD_EXP 27
11107: PPUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 119
// wait ( 0 0$1 ) ;
11117: LD_INT 35
11119: PPUSH
11120: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
11124: LD_EXP 27
11128: PPUSH
11129: LD_STRING DA-1-tame-a
11131: PPUSH
11132: CALL_OW 88
// if IsOk ( Mike ) then
11136: LD_EXP 25
11140: PPUSH
11141: CALL_OW 302
11145: IFFALSE 11183
// begin Say ( Mike , DM-1-tame-a ) ;
11147: LD_EXP 25
11151: PPUSH
11152: LD_STRING DM-1-tame-a
11154: PPUSH
11155: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
11159: LD_EXP 29
11163: PPUSH
11164: LD_STRING DS-1-tame-a
11166: PPUSH
11167: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
11171: LD_EXP 25
11175: PPUSH
11176: LD_STRING DM-2-tame-a
11178: PPUSH
11179: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11183: LD_INT 105
11185: PPUSH
11186: CALL_OW 67
// PrepareFarmer ;
11190: CALL 12541 0 0
// CenterOnUnits ( Farmer ) ;
11194: LD_EXP 31
11198: PPUSH
11199: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11203: LD_EXP 31
11207: PPUSH
11208: LD_INT 105
11210: PPUSH
11211: LD_INT 59
11213: PPUSH
11214: CALL_OW 111
// AddComHold ( Farmer ) ;
11218: LD_EXP 31
11222: PPUSH
11223: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11227: LD_EXP 31
11231: PPUSH
11232: LD_STRING DF-1-end
11234: PPUSH
11235: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11239: LD_EXP 27
11243: PPUSH
11244: LD_STRING DA-1-end
11246: PPUSH
11247: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11251: LD_EXP 31
11255: PPUSH
11256: LD_STRING DF-2-end
11258: PPUSH
11259: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11263: LD_EXP 27
11267: PPUSH
11268: LD_STRING DA-2-end
11270: PPUSH
11271: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11275: LD_EXP 31
11279: PPUSH
11280: LD_STRING DF-3-end
11282: PPUSH
11283: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11287: LD_EXP 23
11291: PPUSH
11292: LD_STRING DH-3-end
11294: PPUSH
11295: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11299: LD_EXP 31
11303: PPUSH
11304: LD_STRING DF-4-end
11306: PPUSH
11307: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 52500
11318: PUSH
11319: LD_INT 47250
11321: PUSH
11322: LD_INT 42000
11324: PUSH
11325: LD_INT 31500
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESSEQUAL
11340: IFFALSE 11354
// AddMedal ( med1 , 1 ) else
11342: LD_STRING med1
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 101
11352: GO 11365
// AddMedal ( med1 , - 1 ) ;
11354: LD_STRING med1
11356: PPUSH
11357: LD_INT 1
11359: NEG
11360: PPUSH
11361: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11365: LD_INT 22
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: PUSH
11394: LD_INT 0
11396: EQUAL
11397: PUSH
11398: LD_EXP 12
11402: NOT
11403: AND
11404: IFFALSE 11418
// AddMedal ( med2 , 1 ) else
11406: LD_STRING med2
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 101
11416: GO 11429
// AddMedal ( med2 , - 1 ) ;
11418: LD_STRING med2
11420: PPUSH
11421: LD_INT 1
11423: NEG
11424: PPUSH
11425: CALL_OW 101
// if trickyMove then
11429: LD_EXP 15
11433: IFFALSE 11447
// AddMedal ( med3 , 1 ) else
11435: LD_STRING med3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 101
11445: GO 11477
// if spottedBeforeRadio then
11447: LD_EXP 6
11451: IFFALSE 11466
// AddMedal ( med3 , - 2 ) else
11453: LD_STRING med3
11455: PPUSH
11456: LD_INT 2
11458: NEG
11459: PPUSH
11460: CALL_OW 101
11464: GO 11477
// AddMedal ( med3 , - 1 ) ;
11466: LD_STRING med3
11468: PPUSH
11469: LD_INT 1
11471: NEG
11472: PPUSH
11473: CALL_OW 101
// GiveMedals ( MAIN ) ;
11477: LD_STRING MAIN
11479: PPUSH
11480: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11484: LD_INT 22
11486: PUSH
11487: LD_INT 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 23
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PPUSH
11513: LD_STRING 02_ape
11515: PPUSH
11516: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 23
11537: PUSH
11538: LD_INT 2
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 21
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: PPUSH
11560: CALL_OW 69
11564: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11565: LD_VAR 0 2
11569: PPUSH
11570: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11574: LD_EXP 23
11578: PPUSH
11579: LD_STRING 02_Heike
11581: PPUSH
11582: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11586: LD_EXP 27
11590: PPUSH
11591: LD_STRING 02_Aviradze
11593: PPUSH
11594: CALL_OW 38
// if Givi then
11598: LD_EXP 24
11602: IFFALSE 11616
// SaveCharacters ( Givi , 02_Givi ) ;
11604: LD_EXP 24
11608: PPUSH
11609: LD_STRING 02_Givi
11611: PPUSH
11612: CALL_OW 38
// if Mike then
11616: LD_EXP 25
11620: IFFALSE 11634
// SaveCharacters ( Mike , 02_Mike ) ;
11622: LD_EXP 25
11626: PPUSH
11627: LD_STRING 02_Mike
11629: PPUSH
11630: CALL_OW 38
// if Kamil then
11634: LD_EXP 26
11638: IFFALSE 11652
// SaveCharacters ( Kamil , 02_Kamil ) ;
11640: LD_EXP 26
11644: PPUSH
11645: LD_STRING 02_Kamil
11647: PPUSH
11648: CALL_OW 38
// if Kaia then
11652: LD_EXP 28
11656: IFFALSE 11670
// SaveCharacters ( Kaia , 02_Kaia ) ;
11658: LD_EXP 28
11662: PPUSH
11663: LD_STRING 02_Kaia
11665: PPUSH
11666: CALL_OW 38
// if Sophia then
11670: LD_EXP 29
11674: IFFALSE 11688
// SaveCharacters ( Sophia , 02_Sophia ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_STRING 02_Sophia
11683: PPUSH
11684: CALL_OW 38
// if Markov then
11688: LD_EXP 30
11692: IFFALSE 11706
// SaveCharacters ( Markov , 02_Markov ) ;
11694: LD_EXP 30
11698: PPUSH
11699: LD_STRING 02_Markov
11701: PPUSH
11702: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11706: LD_VAR 0 2
11710: PUSH
11711: LD_EXP 23
11715: PUSH
11716: LD_EXP 27
11720: PUSH
11721: LD_EXP 24
11725: PUSH
11726: LD_EXP 25
11730: PUSH
11731: LD_EXP 26
11735: PUSH
11736: LD_EXP 29
11740: PUSH
11741: LD_EXP 28
11745: PUSH
11746: LD_EXP 30
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: IFFALSE 11826
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11763: LD_VAR 0 2
11767: PUSH
11768: LD_EXP 23
11772: PUSH
11773: LD_EXP 27
11777: PUSH
11778: LD_EXP 24
11782: PUSH
11783: LD_EXP 25
11787: PUSH
11788: LD_EXP 26
11792: PUSH
11793: LD_EXP 29
11797: PUSH
11798: LD_EXP 28
11802: PUSH
11803: LD_EXP 30
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: DIFF
11818: PPUSH
11819: LD_STRING 02_others
11821: PPUSH
11822: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11826: LD_STRING enableBioCharacter(BIO_KRAY)
11828: PPUSH
11829: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11833: LD_STRING enableBioCharacter(BIO_AVIR)
11835: PPUSH
11836: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11840: LD_STRING enableBioCharacter(BIO_SOPH)
11842: PPUSH
11843: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11847: LD_STRING enableBioCharacter(BIO_KAMI)
11849: PPUSH
11850: CALL_OW 559
// YouWin ;
11854: CALL_OW 103
// InGameOff ;
11858: CALL_OW 9
// end ;
11862: PPOPN 2
11864: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11865: LD_OWVAR 1
11869: PUSH
11870: LD_EXP 13
11874: GREATER
11875: PUSH
11876: LD_EXP 4
11880: AND
11881: IFFALSE 11921
11883: GO 11885
11885: DISABLE
// begin InGameOn ;
11886: CALL_OW 8
// PrepareFarmer ;
11890: CALL 12541 0 0
// CenterNowOnUnits ( Farmer ) ;
11894: LD_EXP 31
11898: PPUSH
11899: CALL_OW 87
// wait ( 0 0$2 ) ;
11903: LD_INT 70
11905: PPUSH
11906: CALL_OW 67
// YouLost ( Farmer ) ;
11910: LD_STRING Farmer
11912: PPUSH
11913: CALL_OW 104
// InGameOff ;
11917: CALL_OW 9
// end ; end_of_file
11921: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
11926: PPUSH
// uc_side := 2 ;
11927: LD_ADDR_OWVAR 20
11931: PUSH
11932: LD_INT 2
11934: ST_TO_ADDR
// uc_nation := 2 ;
11935: LD_ADDR_OWVAR 21
11939: PUSH
11940: LD_INT 2
11942: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11943: LD_ADDR_EXP 23
11947: PUSH
11948: LD_STRING Heike
11950: PPUSH
11951: LD_EXP 1
11955: NOT
11956: PPUSH
11957: LD_EXP 2
11961: PPUSH
11962: CALL 33721 0 3
11966: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11967: LD_EXP 23
11971: PPUSH
11972: LD_INT 83
11974: PPUSH
11975: LD_INT 72
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11985: LD_ADDR_EXP 24
11989: PUSH
11990: LD_STRING Givi
11992: PPUSH
11993: LD_EXP 1
11997: NOT
11998: PPUSH
11999: LD_EXP 2
12003: PPUSH
12004: CALL 33721 0 3
12008: ST_TO_ADDR
// if Givi then
12009: LD_EXP 24
12013: IFFALSE 12033
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
12015: LD_EXP 24
12019: PPUSH
12020: LD_INT 87
12022: PPUSH
12023: LD_INT 76
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
12033: LD_ADDR_EXP 25
12037: PUSH
12038: LD_STRING Mike
12040: PPUSH
12041: LD_EXP 1
12045: NOT
12046: PPUSH
12047: LD_EXP 2
12051: PPUSH
12052: CALL 33721 0 3
12056: ST_TO_ADDR
// if Mike then
12057: LD_EXP 25
12061: IFFALSE 12081
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
12063: LD_EXP 25
12067: PPUSH
12068: LD_INT 84
12070: PPUSH
12071: LD_INT 76
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
12081: LD_ADDR_EXP 26
12085: PUSH
12086: LD_STRING Kamil
12088: PPUSH
12089: LD_EXP 1
12093: NOT
12094: PPUSH
12095: LD_EXP 2
12099: PPUSH
12100: CALL 33721 0 3
12104: ST_TO_ADDR
// if Kamil then
12105: LD_EXP 26
12109: IFFALSE 12129
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
12111: LD_EXP 26
12115: PPUSH
12116: LD_INT 85
12118: PPUSH
12119: LD_INT 78
12121: PPUSH
12122: LD_INT 0
12124: PPUSH
12125: CALL_OW 48
// uc_side := 5 ;
12129: LD_ADDR_OWVAR 20
12133: PUSH
12134: LD_INT 5
12136: ST_TO_ADDR
// uc_nation := 2 ;
12137: LD_ADDR_OWVAR 21
12141: PUSH
12142: LD_INT 2
12144: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
12145: LD_ADDR_EXP 27
12149: PUSH
12150: LD_STRING Aviradze
12152: PPUSH
12153: LD_INT 0
12155: PPUSH
12156: LD_STRING 
12158: PPUSH
12159: CALL 33721 0 3
12163: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
12164: LD_EXP 27
12168: PPUSH
12169: LD_INT 106
12171: PPUSH
12172: LD_INT 38
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12182: LD_EXP 27
12186: PPUSH
12187: LD_INT 103
12189: PPUSH
12190: LD_INT 38
12192: PPUSH
12193: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12197: LD_ADDR_EXP 28
12201: PUSH
12202: LD_STRING Kaia
12204: PPUSH
12205: LD_INT 0
12207: PPUSH
12208: LD_STRING 
12210: PPUSH
12211: CALL 33721 0 3
12215: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12216: LD_EXP 28
12220: PPUSH
12221: LD_INT 100
12223: PPUSH
12224: LD_INT 34
12226: PPUSH
12227: LD_INT 0
12229: PPUSH
12230: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12234: LD_EXP 28
12238: PPUSH
12239: LD_INT 100
12241: PPUSH
12242: LD_INT 39
12244: PPUSH
12245: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12249: LD_ADDR_EXP 29
12253: PUSH
12254: LD_STRING Sophia
12256: PPUSH
12257: LD_INT 0
12259: PPUSH
12260: LD_STRING 
12262: PPUSH
12263: CALL 33721 0 3
12267: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12268: LD_EXP 29
12272: PPUSH
12273: LD_INT 109
12275: PPUSH
12276: LD_INT 50
12278: PPUSH
12279: LD_INT 0
12281: PPUSH
12282: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12286: LD_EXP 29
12290: PPUSH
12291: LD_INT 100
12293: PPUSH
12294: LD_INT 39
12296: PPUSH
12297: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12301: LD_ADDR_EXP 30
12305: PUSH
12306: LD_STRING Markov
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: LD_STRING 
12314: PPUSH
12315: CALL 33721 0 3
12319: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12320: LD_INT 5
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 21
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: LD_INT 42
12337: PPUSH
12338: LD_INT 90
12340: PUSH
12341: LD_INT 70
12343: PUSH
12344: LD_INT 60
12346: PUSH
12347: LD_INT 50
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_OWVAR 67
12360: ARRAY
12361: PPUSH
12362: CALL 241 0 7
// veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 3
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 4
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 109
12395: PPUSH
12396: LD_INT 38
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12406: LD_EXP 30
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12420: LD_EXP 28
12424: PPUSH
12425: LD_EXP 27
12429: PPUSH
12430: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12434: LD_EXP 27
12438: PPUSH
12439: LD_EXP 28
12443: PPUSH
12444: CALL_OW 119
// if not Givi or not Mike then
12448: LD_EXP 24
12452: NOT
12453: PUSH
12454: LD_EXP 25
12458: NOT
12459: OR
12460: IFFALSE 12536
// begin uc_nation := 2 ;
12462: LD_ADDR_OWVAR 21
12466: PUSH
12467: LD_INT 2
12469: ST_TO_ADDR
// uc_side := 5 ;
12470: LD_ADDR_OWVAR 20
12474: PUSH
12475: LD_INT 5
12477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12478: LD_INT 1
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 380
// un := CreateHuman ;
12491: LD_ADDR_VAR 0 2
12495: PUSH
12496: CALL_OW 44
12500: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12501: LD_VAR 0 2
12505: PPUSH
12506: LD_INT 112
12508: PPUSH
12509: LD_INT 40
12511: PPUSH
12512: LD_INT 3
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: LD_EXP 27
12531: PPUSH
12532: CALL_OW 119
// end ; end ;
12536: LD_VAR 0 1
12540: RET
// export function PrepareFarmer ; var i ; begin
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
// uc_side := 5 ;
12545: LD_ADDR_OWVAR 20
12549: PUSH
12550: LD_INT 5
12552: ST_TO_ADDR
// uc_nation := 2 ;
12553: LD_ADDR_OWVAR 21
12557: PUSH
12558: LD_INT 2
12560: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12561: LD_ADDR_EXP 31
12565: PUSH
12566: LD_STRING Farmer
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: LD_STRING 
12574: PPUSH
12575: CALL 33721 0 3
12579: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12580: LD_EXP 31
12584: PPUSH
12585: LD_INT 106
12587: PPUSH
12588: LD_INT 62
12590: PPUSH
12591: LD_INT 0
12593: PPUSH
12594: CALL_OW 48
// for i := 1 to 5 do
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_INT 5
12610: PUSH
12611: FOR_TO
12612: IFFALSE 12650
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12614: LD_INT 1
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12627: CALL_OW 44
12631: PPUSH
12632: LD_INT 105
12634: PPUSH
12635: LD_INT 64
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 50
// end ;
12648: GO 12611
12650: POP
12651: POP
// end ; end_of_file
12652: LD_VAR 0 1
12656: RET
// every 2 2$20 + 0 0$10 do
12657: GO 12659
12659: DISABLE
// begin enable ;
12660: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12661: LD_INT 1
12663: PPUSH
12664: LD_INT 5
12666: PPUSH
12667: CALL_OW 12
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 55
// if tick > 6 6$00 then
12682: LD_OWVAR 1
12686: PUSH
12687: LD_INT 12600
12689: GREATER
12690: IFFALSE 12693
// disable ;
12692: DISABLE
// end ; end_of_file
12693: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12694: LD_VAR 0 1
12698: PUSH
12699: LD_EXP 23
12703: EQUAL
12704: IFFALSE 12713
// YouLost ( Heike ) ;
12706: LD_STRING Heike
12708: PPUSH
12709: CALL_OW 104
// if un = Aviradze then
12713: LD_VAR 0 1
12717: PUSH
12718: LD_EXP 27
12722: EQUAL
12723: IFFALSE 12732
// YouLost ( Aviradze ) ;
12725: LD_STRING Aviradze
12727: PPUSH
12728: CALL_OW 104
// if un = usLab then
12732: LD_VAR 0 1
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: IFFALSE 12749
// YouLost ( Lab ) ;
12742: LD_STRING Lab
12744: PPUSH
12745: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 22
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 23
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 69
12793: PUSH
12794: LD_EXP 23
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: DIFF
12808: IN
12809: PUSH
12810: LD_EXP 4
12814: AND
12815: IFFALSE 12831
// lostCounter := lostCounter + 1 ;
12817: LD_ADDR_EXP 18
12821: PUSH
12822: LD_EXP 18
12826: PUSH
12827: LD_INT 1
12829: PLUS
12830: ST_TO_ADDR
// end ;
12831: PPOPN 1
12833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12834: LD_INT 23
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 69
12862: PUSH
12863: LD_INT 0
12865: EQUAL
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 21
12879: PUSH
12880: LD_INT 3
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: AND
12900: IFFALSE 12912
12902: GO 12904
12904: DISABLE
// YouLost ( Eng ) ;
12905: LD_STRING Eng
12907: PPUSH
12908: CALL_OW 104
12912: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12913: LD_VAR 0 1
12917: PUSH
12918: LD_EXP 22
12922: IN
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 2
12931: EQUAL
12932: AND
12933: IFFALSE 12965
// begin usSci := usSci diff un ;
12935: LD_ADDR_EXP 22
12939: PUSH
12940: LD_EXP 22
12944: PUSH
12945: LD_VAR 0 1
12949: DIFF
12950: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12951: LD_ADDR_EXP 9
12955: PUSH
12956: LD_EXP 9
12960: PUSH
12961: LD_INT 1
12963: PLUS
12964: ST_TO_ADDR
// end ; end ;
12965: PPOPN 3
12967: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12968: LD_VAR 0 1
12972: PUSH
12973: LD_INT 2
12975: EQUAL
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: AND
12986: IFFALSE 12995
// YouLost ( FriendlyFire ) ;
12988: LD_STRING FriendlyFire
12990: PPUSH
12991: CALL_OW 104
// end ;
12995: PPOPN 2
12997: END
// on EnterBuilding ( b , un ) do begin if un = Gladstone then
12998: LD_VAR 0 2
13002: PUSH
13003: LD_EXP 19
13007: EQUAL
13008: IFFALSE 13022
// SetTag ( Gladstone , 0 ) ;
13010: LD_EXP 19
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 109
// end ; end_of_file end_of_file
13022: PPOPN 2
13024: END
// export globalGameSaveCounter ; every 0 0$1 do
13025: GO 13027
13027: DISABLE
// begin enable ;
13028: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13029: LD_STRING updateTimer(
13031: PUSH
13032: LD_OWVAR 1
13036: STR
13037: PUSH
13038: LD_STRING );
13040: STR
13041: PPUSH
13042: CALL_OW 559
// end ;
13046: END
// every 0 0$1 do
13047: GO 13049
13049: DISABLE
// begin globalGameSaveCounter := 0 ;
13050: LD_ADDR_EXP 32
13054: PUSH
13055: LD_INT 0
13057: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13058: LD_STRING setGameSaveCounter(0)
13060: PPUSH
13061: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13065: LD_STRING initStreamRollete();
13067: PPUSH
13068: CALL_OW 559
// InitStreamMode ;
13072: CALL 14398 0 0
// DefineStreamItems ( false ) ;
13076: LD_INT 0
13078: PPUSH
13079: CALL 14862 0 1
// end ;
13083: END
// export function SOS_MapStart ( ) ; begin
13084: LD_INT 0
13086: PPUSH
// if streamModeActive then
13087: LD_EXP 33
13091: IFFALSE 13100
// DefineStreamItems ( true ) ;
13093: LD_INT 1
13095: PPUSH
13096: CALL 14862 0 1
// UpdateLuaVariables ( ) ;
13100: CALL 13117 0 0
// UpdateFactoryWaypoints ( ) ;
13104: CALL 27731 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13108: CALL 27988 0 0
// end ;
13112: LD_VAR 0 1
13116: RET
// function UpdateLuaVariables ( ) ; begin
13117: LD_INT 0
13119: PPUSH
// if globalGameSaveCounter then
13120: LD_EXP 32
13124: IFFALSE 13158
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13126: LD_ADDR_EXP 32
13130: PUSH
13131: LD_EXP 32
13135: PPUSH
13136: CALL 72784 0 1
13140: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13141: LD_STRING setGameSaveCounter(
13143: PUSH
13144: LD_EXP 32
13148: STR
13149: PUSH
13150: LD_STRING )
13152: STR
13153: PPUSH
13154: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13158: LD_STRING setGameDifficulty(
13160: PUSH
13161: LD_OWVAR 67
13165: STR
13166: PUSH
13167: LD_STRING )
13169: STR
13170: PPUSH
13171: CALL_OW 559
// end ;
13175: LD_VAR 0 1
13179: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13180: LD_INT 0
13182: PPUSH
// if p2 = stream_mode then
13183: LD_VAR 0 2
13187: PUSH
13188: LD_INT 100
13190: EQUAL
13191: IFFALSE 14194
// begin if not StreamModeActive then
13193: LD_EXP 33
13197: NOT
13198: IFFALSE 13208
// StreamModeActive := true ;
13200: LD_ADDR_EXP 33
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// if p3 = 0 then
13208: LD_VAR 0 3
13212: PUSH
13213: LD_INT 0
13215: EQUAL
13216: IFFALSE 13222
// InitStreamMode ;
13218: CALL 14398 0 0
// if p3 = 1 then
13222: LD_VAR 0 3
13226: PUSH
13227: LD_INT 1
13229: EQUAL
13230: IFFALSE 13240
// sRocket := true ;
13232: LD_ADDR_EXP 38
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// if p3 = 2 then
13240: LD_VAR 0 3
13244: PUSH
13245: LD_INT 2
13247: EQUAL
13248: IFFALSE 13258
// sSpeed := true ;
13250: LD_ADDR_EXP 37
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// if p3 = 3 then
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 3
13265: EQUAL
13266: IFFALSE 13276
// sEngine := true ;
13268: LD_ADDR_EXP 39
13272: PUSH
13273: LD_INT 1
13275: ST_TO_ADDR
// if p3 = 4 then
13276: LD_VAR 0 3
13280: PUSH
13281: LD_INT 4
13283: EQUAL
13284: IFFALSE 13294
// sSpec := true ;
13286: LD_ADDR_EXP 36
13290: PUSH
13291: LD_INT 1
13293: ST_TO_ADDR
// if p3 = 5 then
13294: LD_VAR 0 3
13298: PUSH
13299: LD_INT 5
13301: EQUAL
13302: IFFALSE 13312
// sLevel := true ;
13304: LD_ADDR_EXP 40
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// if p3 = 6 then
13312: LD_VAR 0 3
13316: PUSH
13317: LD_INT 6
13319: EQUAL
13320: IFFALSE 13330
// sArmoury := true ;
13322: LD_ADDR_EXP 41
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// if p3 = 7 then
13330: LD_VAR 0 3
13334: PUSH
13335: LD_INT 7
13337: EQUAL
13338: IFFALSE 13348
// sRadar := true ;
13340: LD_ADDR_EXP 42
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// if p3 = 8 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_INT 8
13355: EQUAL
13356: IFFALSE 13366
// sBunker := true ;
13358: LD_ADDR_EXP 43
13362: PUSH
13363: LD_INT 1
13365: ST_TO_ADDR
// if p3 = 9 then
13366: LD_VAR 0 3
13370: PUSH
13371: LD_INT 9
13373: EQUAL
13374: IFFALSE 13384
// sHack := true ;
13376: LD_ADDR_EXP 44
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// if p3 = 10 then
13384: LD_VAR 0 3
13388: PUSH
13389: LD_INT 10
13391: EQUAL
13392: IFFALSE 13402
// sFire := true ;
13394: LD_ADDR_EXP 45
13398: PUSH
13399: LD_INT 1
13401: ST_TO_ADDR
// if p3 = 11 then
13402: LD_VAR 0 3
13406: PUSH
13407: LD_INT 11
13409: EQUAL
13410: IFFALSE 13420
// sRefresh := true ;
13412: LD_ADDR_EXP 46
13416: PUSH
13417: LD_INT 1
13419: ST_TO_ADDR
// if p3 = 12 then
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 12
13427: EQUAL
13428: IFFALSE 13438
// sExp := true ;
13430: LD_ADDR_EXP 47
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if p3 = 13 then
13438: LD_VAR 0 3
13442: PUSH
13443: LD_INT 13
13445: EQUAL
13446: IFFALSE 13456
// sDepot := true ;
13448: LD_ADDR_EXP 48
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if p3 = 14 then
13456: LD_VAR 0 3
13460: PUSH
13461: LD_INT 14
13463: EQUAL
13464: IFFALSE 13474
// sFlag := true ;
13466: LD_ADDR_EXP 49
13470: PUSH
13471: LD_INT 1
13473: ST_TO_ADDR
// if p3 = 15 then
13474: LD_VAR 0 3
13478: PUSH
13479: LD_INT 15
13481: EQUAL
13482: IFFALSE 13492
// sKamikadze := true ;
13484: LD_ADDR_EXP 57
13488: PUSH
13489: LD_INT 1
13491: ST_TO_ADDR
// if p3 = 16 then
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 16
13499: EQUAL
13500: IFFALSE 13510
// sTroll := true ;
13502: LD_ADDR_EXP 58
13506: PUSH
13507: LD_INT 1
13509: ST_TO_ADDR
// if p3 = 17 then
13510: LD_VAR 0 3
13514: PUSH
13515: LD_INT 17
13517: EQUAL
13518: IFFALSE 13528
// sSlow := true ;
13520: LD_ADDR_EXP 59
13524: PUSH
13525: LD_INT 1
13527: ST_TO_ADDR
// if p3 = 18 then
13528: LD_VAR 0 3
13532: PUSH
13533: LD_INT 18
13535: EQUAL
13536: IFFALSE 13546
// sLack := true ;
13538: LD_ADDR_EXP 60
13542: PUSH
13543: LD_INT 1
13545: ST_TO_ADDR
// if p3 = 19 then
13546: LD_VAR 0 3
13550: PUSH
13551: LD_INT 19
13553: EQUAL
13554: IFFALSE 13564
// sTank := true ;
13556: LD_ADDR_EXP 62
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// if p3 = 20 then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_INT 20
13571: EQUAL
13572: IFFALSE 13582
// sRemote := true ;
13574: LD_ADDR_EXP 63
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// if p3 = 21 then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 21
13589: EQUAL
13590: IFFALSE 13600
// sPowell := true ;
13592: LD_ADDR_EXP 64
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// if p3 = 22 then
13600: LD_VAR 0 3
13604: PUSH
13605: LD_INT 22
13607: EQUAL
13608: IFFALSE 13618
// sTeleport := true ;
13610: LD_ADDR_EXP 67
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// if p3 = 23 then
13618: LD_VAR 0 3
13622: PUSH
13623: LD_INT 23
13625: EQUAL
13626: IFFALSE 13636
// sOilTower := true ;
13628: LD_ADDR_EXP 69
13632: PUSH
13633: LD_INT 1
13635: ST_TO_ADDR
// if p3 = 24 then
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 24
13643: EQUAL
13644: IFFALSE 13654
// sShovel := true ;
13646: LD_ADDR_EXP 70
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// if p3 = 25 then
13654: LD_VAR 0 3
13658: PUSH
13659: LD_INT 25
13661: EQUAL
13662: IFFALSE 13672
// sSheik := true ;
13664: LD_ADDR_EXP 71
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// if p3 = 26 then
13672: LD_VAR 0 3
13676: PUSH
13677: LD_INT 26
13679: EQUAL
13680: IFFALSE 13690
// sEarthquake := true ;
13682: LD_ADDR_EXP 73
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// if p3 = 27 then
13690: LD_VAR 0 3
13694: PUSH
13695: LD_INT 27
13697: EQUAL
13698: IFFALSE 13708
// sAI := true ;
13700: LD_ADDR_EXP 74
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if p3 = 28 then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_INT 28
13715: EQUAL
13716: IFFALSE 13726
// sCargo := true ;
13718: LD_ADDR_EXP 77
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// if p3 = 29 then
13726: LD_VAR 0 3
13730: PUSH
13731: LD_INT 29
13733: EQUAL
13734: IFFALSE 13744
// sDLaser := true ;
13736: LD_ADDR_EXP 78
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// if p3 = 30 then
13744: LD_VAR 0 3
13748: PUSH
13749: LD_INT 30
13751: EQUAL
13752: IFFALSE 13762
// sExchange := true ;
13754: LD_ADDR_EXP 79
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// if p3 = 31 then
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 31
13769: EQUAL
13770: IFFALSE 13780
// sFac := true ;
13772: LD_ADDR_EXP 80
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// if p3 = 32 then
13780: LD_VAR 0 3
13784: PUSH
13785: LD_INT 32
13787: EQUAL
13788: IFFALSE 13798
// sPower := true ;
13790: LD_ADDR_EXP 81
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
// if p3 = 33 then
13798: LD_VAR 0 3
13802: PUSH
13803: LD_INT 33
13805: EQUAL
13806: IFFALSE 13816
// sRandom := true ;
13808: LD_ADDR_EXP 82
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// if p3 = 34 then
13816: LD_VAR 0 3
13820: PUSH
13821: LD_INT 34
13823: EQUAL
13824: IFFALSE 13834
// sShield := true ;
13826: LD_ADDR_EXP 83
13830: PUSH
13831: LD_INT 1
13833: ST_TO_ADDR
// if p3 = 35 then
13834: LD_VAR 0 3
13838: PUSH
13839: LD_INT 35
13841: EQUAL
13842: IFFALSE 13852
// sTime := true ;
13844: LD_ADDR_EXP 84
13848: PUSH
13849: LD_INT 1
13851: ST_TO_ADDR
// if p3 = 36 then
13852: LD_VAR 0 3
13856: PUSH
13857: LD_INT 36
13859: EQUAL
13860: IFFALSE 13870
// sTools := true ;
13862: LD_ADDR_EXP 85
13866: PUSH
13867: LD_INT 1
13869: ST_TO_ADDR
// if p3 = 101 then
13870: LD_VAR 0 3
13874: PUSH
13875: LD_INT 101
13877: EQUAL
13878: IFFALSE 13888
// sSold := true ;
13880: LD_ADDR_EXP 50
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if p3 = 102 then
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 102
13895: EQUAL
13896: IFFALSE 13906
// sDiff := true ;
13898: LD_ADDR_EXP 51
13902: PUSH
13903: LD_INT 1
13905: ST_TO_ADDR
// if p3 = 103 then
13906: LD_VAR 0 3
13910: PUSH
13911: LD_INT 103
13913: EQUAL
13914: IFFALSE 13924
// sFog := true ;
13916: LD_ADDR_EXP 54
13920: PUSH
13921: LD_INT 1
13923: ST_TO_ADDR
// if p3 = 104 then
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 104
13931: EQUAL
13932: IFFALSE 13942
// sReset := true ;
13934: LD_ADDR_EXP 55
13938: PUSH
13939: LD_INT 1
13941: ST_TO_ADDR
// if p3 = 105 then
13942: LD_VAR 0 3
13946: PUSH
13947: LD_INT 105
13949: EQUAL
13950: IFFALSE 13960
// sSun := true ;
13952: LD_ADDR_EXP 56
13956: PUSH
13957: LD_INT 1
13959: ST_TO_ADDR
// if p3 = 106 then
13960: LD_VAR 0 3
13964: PUSH
13965: LD_INT 106
13967: EQUAL
13968: IFFALSE 13978
// sTiger := true ;
13970: LD_ADDR_EXP 52
13974: PUSH
13975: LD_INT 1
13977: ST_TO_ADDR
// if p3 = 107 then
13978: LD_VAR 0 3
13982: PUSH
13983: LD_INT 107
13985: EQUAL
13986: IFFALSE 13996
// sBomb := true ;
13988: LD_ADDR_EXP 53
13992: PUSH
13993: LD_INT 1
13995: ST_TO_ADDR
// if p3 = 108 then
13996: LD_VAR 0 3
14000: PUSH
14001: LD_INT 108
14003: EQUAL
14004: IFFALSE 14014
// sWound := true ;
14006: LD_ADDR_EXP 61
14010: PUSH
14011: LD_INT 1
14013: ST_TO_ADDR
// if p3 = 109 then
14014: LD_VAR 0 3
14018: PUSH
14019: LD_INT 109
14021: EQUAL
14022: IFFALSE 14032
// sBetray := true ;
14024: LD_ADDR_EXP 65
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// if p3 = 110 then
14032: LD_VAR 0 3
14036: PUSH
14037: LD_INT 110
14039: EQUAL
14040: IFFALSE 14050
// sContamin := true ;
14042: LD_ADDR_EXP 66
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// if p3 = 111 then
14050: LD_VAR 0 3
14054: PUSH
14055: LD_INT 111
14057: EQUAL
14058: IFFALSE 14068
// sOil := true ;
14060: LD_ADDR_EXP 68
14064: PUSH
14065: LD_INT 1
14067: ST_TO_ADDR
// if p3 = 112 then
14068: LD_VAR 0 3
14072: PUSH
14073: LD_INT 112
14075: EQUAL
14076: IFFALSE 14086
// sStu := true ;
14078: LD_ADDR_EXP 72
14082: PUSH
14083: LD_INT 1
14085: ST_TO_ADDR
// if p3 = 113 then
14086: LD_VAR 0 3
14090: PUSH
14091: LD_INT 113
14093: EQUAL
14094: IFFALSE 14104
// sBazooka := true ;
14096: LD_ADDR_EXP 75
14100: PUSH
14101: LD_INT 1
14103: ST_TO_ADDR
// if p3 = 114 then
14104: LD_VAR 0 3
14108: PUSH
14109: LD_INT 114
14111: EQUAL
14112: IFFALSE 14122
// sMortar := true ;
14114: LD_ADDR_EXP 76
14118: PUSH
14119: LD_INT 1
14121: ST_TO_ADDR
// if p3 = 115 then
14122: LD_VAR 0 3
14126: PUSH
14127: LD_INT 115
14129: EQUAL
14130: IFFALSE 14140
// sRanger := true ;
14132: LD_ADDR_EXP 86
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// if p3 = 116 then
14140: LD_VAR 0 3
14144: PUSH
14145: LD_INT 116
14147: EQUAL
14148: IFFALSE 14158
// sComputer := true ;
14150: LD_ADDR_EXP 87
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// if p3 = 117 then
14158: LD_VAR 0 3
14162: PUSH
14163: LD_INT 117
14165: EQUAL
14166: IFFALSE 14176
// s30 := true ;
14168: LD_ADDR_EXP 88
14172: PUSH
14173: LD_INT 1
14175: ST_TO_ADDR
// if p3 = 118 then
14176: LD_VAR 0 3
14180: PUSH
14181: LD_INT 118
14183: EQUAL
14184: IFFALSE 14194
// s60 := true ;
14186: LD_ADDR_EXP 89
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// end ; if p2 = hack_mode then
14194: LD_VAR 0 2
14198: PUSH
14199: LD_INT 101
14201: EQUAL
14202: IFFALSE 14330
// begin case p3 of 1 :
14204: LD_VAR 0 3
14208: PUSH
14209: LD_INT 1
14211: DOUBLE
14212: EQUAL
14213: IFTRUE 14217
14215: GO 14224
14217: POP
// hHackUnlimitedResources ; 2 :
14218: CALL 26477 0 0
14222: GO 14330
14224: LD_INT 2
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14239
14232: POP
// hHackSetLevel10 ; 3 :
14233: CALL 26610 0 0
14237: GO 14330
14239: LD_INT 3
14241: DOUBLE
14242: EQUAL
14243: IFTRUE 14247
14245: GO 14254
14247: POP
// hHackSetLevel10YourUnits ; 4 :
14248: CALL 26695 0 0
14252: GO 14330
14254: LD_INT 4
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14269
14262: POP
// hHackInvincible ; 5 :
14263: CALL 27143 0 0
14267: GO 14330
14269: LD_INT 5
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14284
14277: POP
// hHackInvisible ; 6 :
14278: CALL 27254 0 0
14282: GO 14330
14284: LD_INT 6
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14299
14292: POP
// hHackChangeYourSide ; 7 :
14293: CALL 27311 0 0
14297: GO 14330
14299: LD_INT 7
14301: DOUBLE
14302: EQUAL
14303: IFTRUE 14307
14305: GO 14314
14307: POP
// hHackChangeUnitSide ; 8 :
14308: CALL 27353 0 0
14312: GO 14330
14314: LD_INT 8
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 14329
14322: POP
// hHackFog ; end ;
14323: CALL 27454 0 0
14327: GO 14330
14329: POP
// end ; if p2 = game_save_mode then
14330: LD_VAR 0 2
14334: PUSH
14335: LD_INT 102
14337: EQUAL
14338: IFFALSE 14393
// begin if p3 = 1 then
14340: LD_VAR 0 3
14344: PUSH
14345: LD_INT 1
14347: EQUAL
14348: IFFALSE 14360
// globalGameSaveCounter := p4 ;
14350: LD_ADDR_EXP 32
14354: PUSH
14355: LD_VAR 0 4
14359: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14360: LD_VAR 0 3
14364: PUSH
14365: LD_INT 2
14367: EQUAL
14368: PUSH
14369: LD_EXP 32
14373: AND
14374: IFFALSE 14393
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14376: LD_STRING setGameSaveCounter(
14378: PUSH
14379: LD_EXP 32
14383: STR
14384: PUSH
14385: LD_STRING )
14387: STR
14388: PPUSH
14389: CALL_OW 559
// end ; end ;
14393: LD_VAR 0 7
14397: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14398: LD_INT 0
14400: PPUSH
// streamModeActive := false ;
14401: LD_ADDR_EXP 33
14405: PUSH
14406: LD_INT 0
14408: ST_TO_ADDR
// normalCounter := 36 ;
14409: LD_ADDR_EXP 34
14413: PUSH
14414: LD_INT 36
14416: ST_TO_ADDR
// hardcoreCounter := 18 ;
14417: LD_ADDR_EXP 35
14421: PUSH
14422: LD_INT 18
14424: ST_TO_ADDR
// sRocket := false ;
14425: LD_ADDR_EXP 38
14429: PUSH
14430: LD_INT 0
14432: ST_TO_ADDR
// sSpeed := false ;
14433: LD_ADDR_EXP 37
14437: PUSH
14438: LD_INT 0
14440: ST_TO_ADDR
// sEngine := false ;
14441: LD_ADDR_EXP 39
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// sSpec := false ;
14449: LD_ADDR_EXP 36
14453: PUSH
14454: LD_INT 0
14456: ST_TO_ADDR
// sLevel := false ;
14457: LD_ADDR_EXP 40
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// sArmoury := false ;
14465: LD_ADDR_EXP 41
14469: PUSH
14470: LD_INT 0
14472: ST_TO_ADDR
// sRadar := false ;
14473: LD_ADDR_EXP 42
14477: PUSH
14478: LD_INT 0
14480: ST_TO_ADDR
// sBunker := false ;
14481: LD_ADDR_EXP 43
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// sHack := false ;
14489: LD_ADDR_EXP 44
14493: PUSH
14494: LD_INT 0
14496: ST_TO_ADDR
// sFire := false ;
14497: LD_ADDR_EXP 45
14501: PUSH
14502: LD_INT 0
14504: ST_TO_ADDR
// sRefresh := false ;
14505: LD_ADDR_EXP 46
14509: PUSH
14510: LD_INT 0
14512: ST_TO_ADDR
// sExp := false ;
14513: LD_ADDR_EXP 47
14517: PUSH
14518: LD_INT 0
14520: ST_TO_ADDR
// sDepot := false ;
14521: LD_ADDR_EXP 48
14525: PUSH
14526: LD_INT 0
14528: ST_TO_ADDR
// sFlag := false ;
14529: LD_ADDR_EXP 49
14533: PUSH
14534: LD_INT 0
14536: ST_TO_ADDR
// sKamikadze := false ;
14537: LD_ADDR_EXP 57
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// sTroll := false ;
14545: LD_ADDR_EXP 58
14549: PUSH
14550: LD_INT 0
14552: ST_TO_ADDR
// sSlow := false ;
14553: LD_ADDR_EXP 59
14557: PUSH
14558: LD_INT 0
14560: ST_TO_ADDR
// sLack := false ;
14561: LD_ADDR_EXP 60
14565: PUSH
14566: LD_INT 0
14568: ST_TO_ADDR
// sTank := false ;
14569: LD_ADDR_EXP 62
14573: PUSH
14574: LD_INT 0
14576: ST_TO_ADDR
// sRemote := false ;
14577: LD_ADDR_EXP 63
14581: PUSH
14582: LD_INT 0
14584: ST_TO_ADDR
// sPowell := false ;
14585: LD_ADDR_EXP 64
14589: PUSH
14590: LD_INT 0
14592: ST_TO_ADDR
// sTeleport := false ;
14593: LD_ADDR_EXP 67
14597: PUSH
14598: LD_INT 0
14600: ST_TO_ADDR
// sOilTower := false ;
14601: LD_ADDR_EXP 69
14605: PUSH
14606: LD_INT 0
14608: ST_TO_ADDR
// sShovel := false ;
14609: LD_ADDR_EXP 70
14613: PUSH
14614: LD_INT 0
14616: ST_TO_ADDR
// sSheik := false ;
14617: LD_ADDR_EXP 71
14621: PUSH
14622: LD_INT 0
14624: ST_TO_ADDR
// sEarthquake := false ;
14625: LD_ADDR_EXP 73
14629: PUSH
14630: LD_INT 0
14632: ST_TO_ADDR
// sAI := false ;
14633: LD_ADDR_EXP 74
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
// sCargo := false ;
14641: LD_ADDR_EXP 77
14645: PUSH
14646: LD_INT 0
14648: ST_TO_ADDR
// sDLaser := false ;
14649: LD_ADDR_EXP 78
14653: PUSH
14654: LD_INT 0
14656: ST_TO_ADDR
// sExchange := false ;
14657: LD_ADDR_EXP 79
14661: PUSH
14662: LD_INT 0
14664: ST_TO_ADDR
// sFac := false ;
14665: LD_ADDR_EXP 80
14669: PUSH
14670: LD_INT 0
14672: ST_TO_ADDR
// sPower := false ;
14673: LD_ADDR_EXP 81
14677: PUSH
14678: LD_INT 0
14680: ST_TO_ADDR
// sRandom := false ;
14681: LD_ADDR_EXP 82
14685: PUSH
14686: LD_INT 0
14688: ST_TO_ADDR
// sShield := false ;
14689: LD_ADDR_EXP 83
14693: PUSH
14694: LD_INT 0
14696: ST_TO_ADDR
// sTime := false ;
14697: LD_ADDR_EXP 84
14701: PUSH
14702: LD_INT 0
14704: ST_TO_ADDR
// sTools := false ;
14705: LD_ADDR_EXP 85
14709: PUSH
14710: LD_INT 0
14712: ST_TO_ADDR
// sSold := false ;
14713: LD_ADDR_EXP 50
14717: PUSH
14718: LD_INT 0
14720: ST_TO_ADDR
// sDiff := false ;
14721: LD_ADDR_EXP 51
14725: PUSH
14726: LD_INT 0
14728: ST_TO_ADDR
// sFog := false ;
14729: LD_ADDR_EXP 54
14733: PUSH
14734: LD_INT 0
14736: ST_TO_ADDR
// sReset := false ;
14737: LD_ADDR_EXP 55
14741: PUSH
14742: LD_INT 0
14744: ST_TO_ADDR
// sSun := false ;
14745: LD_ADDR_EXP 56
14749: PUSH
14750: LD_INT 0
14752: ST_TO_ADDR
// sTiger := false ;
14753: LD_ADDR_EXP 52
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
// sBomb := false ;
14761: LD_ADDR_EXP 53
14765: PUSH
14766: LD_INT 0
14768: ST_TO_ADDR
// sWound := false ;
14769: LD_ADDR_EXP 61
14773: PUSH
14774: LD_INT 0
14776: ST_TO_ADDR
// sBetray := false ;
14777: LD_ADDR_EXP 65
14781: PUSH
14782: LD_INT 0
14784: ST_TO_ADDR
// sContamin := false ;
14785: LD_ADDR_EXP 66
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// sOil := false ;
14793: LD_ADDR_EXP 68
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// sStu := false ;
14801: LD_ADDR_EXP 72
14805: PUSH
14806: LD_INT 0
14808: ST_TO_ADDR
// sBazooka := false ;
14809: LD_ADDR_EXP 75
14813: PUSH
14814: LD_INT 0
14816: ST_TO_ADDR
// sMortar := false ;
14817: LD_ADDR_EXP 76
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// sRanger := false ;
14825: LD_ADDR_EXP 86
14829: PUSH
14830: LD_INT 0
14832: ST_TO_ADDR
// sComputer := false ;
14833: LD_ADDR_EXP 87
14837: PUSH
14838: LD_INT 0
14840: ST_TO_ADDR
// s30 := false ;
14841: LD_ADDR_EXP 88
14845: PUSH
14846: LD_INT 0
14848: ST_TO_ADDR
// s60 := false ;
14849: LD_ADDR_EXP 89
14853: PUSH
14854: LD_INT 0
14856: ST_TO_ADDR
// end ;
14857: LD_VAR 0 1
14861: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14862: LD_INT 0
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
14868: PPUSH
14869: PPUSH
14870: PPUSH
// result := [ ] ;
14871: LD_ADDR_VAR 0 2
14875: PUSH
14876: EMPTY
14877: ST_TO_ADDR
// if campaign_id = 1 then
14878: LD_OWVAR 69
14882: PUSH
14883: LD_INT 1
14885: EQUAL
14886: IFFALSE 18052
// begin case mission_number of 1 :
14888: LD_OWVAR 70
14892: PUSH
14893: LD_INT 1
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 14977
14901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: LD_INT 4
14912: PUSH
14913: LD_INT 11
14915: PUSH
14916: LD_INT 12
14918: PUSH
14919: LD_INT 15
14921: PUSH
14922: LD_INT 16
14924: PUSH
14925: LD_INT 22
14927: PUSH
14928: LD_INT 23
14930: PUSH
14931: LD_INT 26
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 106
14953: PUSH
14954: LD_INT 116
14956: PUSH
14957: LD_INT 117
14959: PUSH
14960: LD_INT 118
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: ST_TO_ADDR
14975: GO 18050
14977: LD_INT 2
14979: DOUBLE
14980: EQUAL
14981: IFTRUE 14985
14983: GO 15069
14985: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: LD_INT 4
14996: PUSH
14997: LD_INT 11
14999: PUSH
15000: LD_INT 12
15002: PUSH
15003: LD_INT 15
15005: PUSH
15006: LD_INT 16
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_INT 23
15014: PUSH
15015: LD_INT 26
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 101
15031: PUSH
15032: LD_INT 102
15034: PUSH
15035: LD_INT 105
15037: PUSH
15038: LD_INT 106
15040: PUSH
15041: LD_INT 108
15043: PUSH
15044: LD_INT 116
15046: PUSH
15047: LD_INT 117
15049: PUSH
15050: LD_INT 118
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: ST_TO_ADDR
15067: GO 18050
15069: LD_INT 3
15071: DOUBLE
15072: EQUAL
15073: IFTRUE 15077
15075: GO 15165
15077: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_INT 2
15085: PUSH
15086: LD_INT 4
15088: PUSH
15089: LD_INT 5
15091: PUSH
15092: LD_INT 11
15094: PUSH
15095: LD_INT 12
15097: PUSH
15098: LD_INT 15
15100: PUSH
15101: LD_INT 16
15103: PUSH
15104: LD_INT 22
15106: PUSH
15107: LD_INT 26
15109: PUSH
15110: LD_INT 36
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 101
15127: PUSH
15128: LD_INT 102
15130: PUSH
15131: LD_INT 105
15133: PUSH
15134: LD_INT 106
15136: PUSH
15137: LD_INT 108
15139: PUSH
15140: LD_INT 116
15142: PUSH
15143: LD_INT 117
15145: PUSH
15146: LD_INT 118
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: ST_TO_ADDR
15163: GO 18050
15165: LD_INT 4
15167: DOUBLE
15168: EQUAL
15169: IFTRUE 15173
15171: GO 15269
15173: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15174: LD_ADDR_VAR 0 2
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: LD_INT 4
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: LD_INT 8
15190: PUSH
15191: LD_INT 11
15193: PUSH
15194: LD_INT 12
15196: PUSH
15197: LD_INT 15
15199: PUSH
15200: LD_INT 16
15202: PUSH
15203: LD_INT 22
15205: PUSH
15206: LD_INT 23
15208: PUSH
15209: LD_INT 26
15211: PUSH
15212: LD_INT 36
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 101
15231: PUSH
15232: LD_INT 102
15234: PUSH
15235: LD_INT 105
15237: PUSH
15238: LD_INT 106
15240: PUSH
15241: LD_INT 108
15243: PUSH
15244: LD_INT 116
15246: PUSH
15247: LD_INT 117
15249: PUSH
15250: LD_INT 118
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: ST_TO_ADDR
15267: GO 18050
15269: LD_INT 5
15271: DOUBLE
15272: EQUAL
15273: IFTRUE 15277
15275: GO 15389
15277: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15278: LD_ADDR_VAR 0 2
15282: PUSH
15283: LD_INT 2
15285: PUSH
15286: LD_INT 4
15288: PUSH
15289: LD_INT 5
15291: PUSH
15292: LD_INT 6
15294: PUSH
15295: LD_INT 8
15297: PUSH
15298: LD_INT 11
15300: PUSH
15301: LD_INT 12
15303: PUSH
15304: LD_INT 15
15306: PUSH
15307: LD_INT 16
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_INT 23
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 26
15321: PUSH
15322: LD_INT 36
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 101
15343: PUSH
15344: LD_INT 102
15346: PUSH
15347: LD_INT 105
15349: PUSH
15350: LD_INT 106
15352: PUSH
15353: LD_INT 108
15355: PUSH
15356: LD_INT 109
15358: PUSH
15359: LD_INT 112
15361: PUSH
15362: LD_INT 116
15364: PUSH
15365: LD_INT 117
15367: PUSH
15368: LD_INT 118
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: ST_TO_ADDR
15387: GO 18050
15389: LD_INT 6
15391: DOUBLE
15392: EQUAL
15393: IFTRUE 15397
15395: GO 15529
15397: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 8
15417: PUSH
15418: LD_INT 11
15420: PUSH
15421: LD_INT 12
15423: PUSH
15424: LD_INT 15
15426: PUSH
15427: LD_INT 16
15429: PUSH
15430: LD_INT 20
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 22
15438: PUSH
15439: LD_INT 23
15441: PUSH
15442: LD_INT 25
15444: PUSH
15445: LD_INT 26
15447: PUSH
15448: LD_INT 30
15450: PUSH
15451: LD_INT 31
15453: PUSH
15454: LD_INT 32
15456: PUSH
15457: LD_INT 36
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 101
15483: PUSH
15484: LD_INT 102
15486: PUSH
15487: LD_INT 105
15489: PUSH
15490: LD_INT 106
15492: PUSH
15493: LD_INT 108
15495: PUSH
15496: LD_INT 109
15498: PUSH
15499: LD_INT 112
15501: PUSH
15502: LD_INT 116
15504: PUSH
15505: LD_INT 117
15507: PUSH
15508: LD_INT 118
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: ST_TO_ADDR
15527: GO 18050
15529: LD_INT 7
15531: DOUBLE
15532: EQUAL
15533: IFTRUE 15537
15535: GO 15649
15537: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15538: LD_ADDR_VAR 0 2
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 4
15548: PUSH
15549: LD_INT 5
15551: PUSH
15552: LD_INT 7
15554: PUSH
15555: LD_INT 11
15557: PUSH
15558: LD_INT 12
15560: PUSH
15561: LD_INT 15
15563: PUSH
15564: LD_INT 16
15566: PUSH
15567: LD_INT 20
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_INT 23
15578: PUSH
15579: LD_INT 25
15581: PUSH
15582: LD_INT 26
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 101
15603: PUSH
15604: LD_INT 102
15606: PUSH
15607: LD_INT 103
15609: PUSH
15610: LD_INT 105
15612: PUSH
15613: LD_INT 106
15615: PUSH
15616: LD_INT 108
15618: PUSH
15619: LD_INT 112
15621: PUSH
15622: LD_INT 116
15624: PUSH
15625: LD_INT 117
15627: PUSH
15628: LD_INT 118
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: ST_TO_ADDR
15647: GO 18050
15649: LD_INT 8
15651: DOUBLE
15652: EQUAL
15653: IFTRUE 15657
15655: GO 15797
15657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15658: LD_ADDR_VAR 0 2
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: LD_INT 4
15668: PUSH
15669: LD_INT 5
15671: PUSH
15672: LD_INT 6
15674: PUSH
15675: LD_INT 7
15677: PUSH
15678: LD_INT 8
15680: PUSH
15681: LD_INT 11
15683: PUSH
15684: LD_INT 12
15686: PUSH
15687: LD_INT 15
15689: PUSH
15690: LD_INT 16
15692: PUSH
15693: LD_INT 20
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 22
15701: PUSH
15702: LD_INT 23
15704: PUSH
15705: LD_INT 25
15707: PUSH
15708: LD_INT 26
15710: PUSH
15711: LD_INT 30
15713: PUSH
15714: LD_INT 31
15716: PUSH
15717: LD_INT 32
15719: PUSH
15720: LD_INT 36
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 101
15747: PUSH
15748: LD_INT 102
15750: PUSH
15751: LD_INT 103
15753: PUSH
15754: LD_INT 105
15756: PUSH
15757: LD_INT 106
15759: PUSH
15760: LD_INT 108
15762: PUSH
15763: LD_INT 109
15765: PUSH
15766: LD_INT 112
15768: PUSH
15769: LD_INT 116
15771: PUSH
15772: LD_INT 117
15774: PUSH
15775: LD_INT 118
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: ST_TO_ADDR
15795: GO 18050
15797: LD_INT 9
15799: DOUBLE
15800: EQUAL
15801: IFTRUE 15805
15803: GO 15953
15805: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15806: LD_ADDR_VAR 0 2
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 4
15816: PUSH
15817: LD_INT 5
15819: PUSH
15820: LD_INT 6
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: LD_INT 8
15828: PUSH
15829: LD_INT 11
15831: PUSH
15832: LD_INT 12
15834: PUSH
15835: LD_INT 15
15837: PUSH
15838: LD_INT 16
15840: PUSH
15841: LD_INT 20
15843: PUSH
15844: LD_INT 21
15846: PUSH
15847: LD_INT 22
15849: PUSH
15850: LD_INT 23
15852: PUSH
15853: LD_INT 25
15855: PUSH
15856: LD_INT 26
15858: PUSH
15859: LD_INT 28
15861: PUSH
15862: LD_INT 30
15864: PUSH
15865: LD_INT 31
15867: PUSH
15868: LD_INT 32
15870: PUSH
15871: LD_INT 36
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 101
15899: PUSH
15900: LD_INT 102
15902: PUSH
15903: LD_INT 103
15905: PUSH
15906: LD_INT 105
15908: PUSH
15909: LD_INT 106
15911: PUSH
15912: LD_INT 108
15914: PUSH
15915: LD_INT 109
15917: PUSH
15918: LD_INT 112
15920: PUSH
15921: LD_INT 114
15923: PUSH
15924: LD_INT 116
15926: PUSH
15927: LD_INT 117
15929: PUSH
15930: LD_INT 118
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: ST_TO_ADDR
15951: GO 18050
15953: LD_INT 10
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16157
15961: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 4
15972: PUSH
15973: LD_INT 5
15975: PUSH
15976: LD_INT 6
15978: PUSH
15979: LD_INT 7
15981: PUSH
15982: LD_INT 8
15984: PUSH
15985: LD_INT 9
15987: PUSH
15988: LD_INT 10
15990: PUSH
15991: LD_INT 11
15993: PUSH
15994: LD_INT 12
15996: PUSH
15997: LD_INT 13
15999: PUSH
16000: LD_INT 14
16002: PUSH
16003: LD_INT 15
16005: PUSH
16006: LD_INT 16
16008: PUSH
16009: LD_INT 17
16011: PUSH
16012: LD_INT 18
16014: PUSH
16015: LD_INT 19
16017: PUSH
16018: LD_INT 20
16020: PUSH
16021: LD_INT 21
16023: PUSH
16024: LD_INT 22
16026: PUSH
16027: LD_INT 23
16029: PUSH
16030: LD_INT 24
16032: PUSH
16033: LD_INT 25
16035: PUSH
16036: LD_INT 26
16038: PUSH
16039: LD_INT 28
16041: PUSH
16042: LD_INT 30
16044: PUSH
16045: LD_INT 31
16047: PUSH
16048: LD_INT 32
16050: PUSH
16051: LD_INT 36
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 101
16087: PUSH
16088: LD_INT 102
16090: PUSH
16091: LD_INT 103
16093: PUSH
16094: LD_INT 104
16096: PUSH
16097: LD_INT 105
16099: PUSH
16100: LD_INT 106
16102: PUSH
16103: LD_INT 107
16105: PUSH
16106: LD_INT 108
16108: PUSH
16109: LD_INT 109
16111: PUSH
16112: LD_INT 110
16114: PUSH
16115: LD_INT 111
16117: PUSH
16118: LD_INT 112
16120: PUSH
16121: LD_INT 114
16123: PUSH
16124: LD_INT 116
16126: PUSH
16127: LD_INT 117
16129: PUSH
16130: LD_INT 118
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: ST_TO_ADDR
16155: GO 18050
16157: LD_INT 11
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16369
16165: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16166: LD_ADDR_VAR 0 2
16170: PUSH
16171: LD_INT 2
16173: PUSH
16174: LD_INT 3
16176: PUSH
16177: LD_INT 4
16179: PUSH
16180: LD_INT 5
16182: PUSH
16183: LD_INT 6
16185: PUSH
16186: LD_INT 7
16188: PUSH
16189: LD_INT 8
16191: PUSH
16192: LD_INT 9
16194: PUSH
16195: LD_INT 10
16197: PUSH
16198: LD_INT 11
16200: PUSH
16201: LD_INT 12
16203: PUSH
16204: LD_INT 13
16206: PUSH
16207: LD_INT 14
16209: PUSH
16210: LD_INT 15
16212: PUSH
16213: LD_INT 16
16215: PUSH
16216: LD_INT 17
16218: PUSH
16219: LD_INT 18
16221: PUSH
16222: LD_INT 19
16224: PUSH
16225: LD_INT 20
16227: PUSH
16228: LD_INT 21
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_INT 23
16236: PUSH
16237: LD_INT 24
16239: PUSH
16240: LD_INT 25
16242: PUSH
16243: LD_INT 26
16245: PUSH
16246: LD_INT 28
16248: PUSH
16249: LD_INT 30
16251: PUSH
16252: LD_INT 31
16254: PUSH
16255: LD_INT 32
16257: PUSH
16258: LD_INT 34
16260: PUSH
16261: LD_INT 36
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 101
16299: PUSH
16300: LD_INT 102
16302: PUSH
16303: LD_INT 103
16305: PUSH
16306: LD_INT 104
16308: PUSH
16309: LD_INT 105
16311: PUSH
16312: LD_INT 106
16314: PUSH
16315: LD_INT 107
16317: PUSH
16318: LD_INT 108
16320: PUSH
16321: LD_INT 109
16323: PUSH
16324: LD_INT 110
16326: PUSH
16327: LD_INT 111
16329: PUSH
16330: LD_INT 112
16332: PUSH
16333: LD_INT 114
16335: PUSH
16336: LD_INT 116
16338: PUSH
16339: LD_INT 117
16341: PUSH
16342: LD_INT 118
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: ST_TO_ADDR
16367: GO 18050
16369: LD_INT 12
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16597
16377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16378: LD_ADDR_VAR 0 2
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 5
16397: PUSH
16398: LD_INT 6
16400: PUSH
16401: LD_INT 7
16403: PUSH
16404: LD_INT 8
16406: PUSH
16407: LD_INT 9
16409: PUSH
16410: LD_INT 10
16412: PUSH
16413: LD_INT 11
16415: PUSH
16416: LD_INT 12
16418: PUSH
16419: LD_INT 13
16421: PUSH
16422: LD_INT 14
16424: PUSH
16425: LD_INT 15
16427: PUSH
16428: LD_INT 16
16430: PUSH
16431: LD_INT 17
16433: PUSH
16434: LD_INT 18
16436: PUSH
16437: LD_INT 19
16439: PUSH
16440: LD_INT 20
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_INT 23
16451: PUSH
16452: LD_INT 24
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 26
16460: PUSH
16461: LD_INT 27
16463: PUSH
16464: LD_INT 28
16466: PUSH
16467: LD_INT 30
16469: PUSH
16470: LD_INT 31
16472: PUSH
16473: LD_INT 32
16475: PUSH
16476: LD_INT 33
16478: PUSH
16479: LD_INT 34
16481: PUSH
16482: LD_INT 36
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 101
16523: PUSH
16524: LD_INT 102
16526: PUSH
16527: LD_INT 103
16529: PUSH
16530: LD_INT 104
16532: PUSH
16533: LD_INT 105
16535: PUSH
16536: LD_INT 106
16538: PUSH
16539: LD_INT 107
16541: PUSH
16542: LD_INT 108
16544: PUSH
16545: LD_INT 109
16547: PUSH
16548: LD_INT 110
16550: PUSH
16551: LD_INT 111
16553: PUSH
16554: LD_INT 112
16556: PUSH
16557: LD_INT 113
16559: PUSH
16560: LD_INT 114
16562: PUSH
16563: LD_INT 116
16565: PUSH
16566: LD_INT 117
16568: PUSH
16569: LD_INT 118
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 18050
16597: LD_INT 13
16599: DOUBLE
16600: EQUAL
16601: IFTRUE 16605
16603: GO 16813
16605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16606: LD_ADDR_VAR 0 2
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 4
16622: PUSH
16623: LD_INT 5
16625: PUSH
16626: LD_INT 8
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: LD_INT 10
16634: PUSH
16635: LD_INT 11
16637: PUSH
16638: LD_INT 12
16640: PUSH
16641: LD_INT 14
16643: PUSH
16644: LD_INT 15
16646: PUSH
16647: LD_INT 16
16649: PUSH
16650: LD_INT 17
16652: PUSH
16653: LD_INT 18
16655: PUSH
16656: LD_INT 19
16658: PUSH
16659: LD_INT 20
16661: PUSH
16662: LD_INT 21
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_INT 23
16670: PUSH
16671: LD_INT 24
16673: PUSH
16674: LD_INT 25
16676: PUSH
16677: LD_INT 26
16679: PUSH
16680: LD_INT 27
16682: PUSH
16683: LD_INT 28
16685: PUSH
16686: LD_INT 30
16688: PUSH
16689: LD_INT 31
16691: PUSH
16692: LD_INT 32
16694: PUSH
16695: LD_INT 33
16697: PUSH
16698: LD_INT 34
16700: PUSH
16701: LD_INT 36
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 101
16739: PUSH
16740: LD_INT 102
16742: PUSH
16743: LD_INT 103
16745: PUSH
16746: LD_INT 104
16748: PUSH
16749: LD_INT 105
16751: PUSH
16752: LD_INT 106
16754: PUSH
16755: LD_INT 107
16757: PUSH
16758: LD_INT 108
16760: PUSH
16761: LD_INT 109
16763: PUSH
16764: LD_INT 110
16766: PUSH
16767: LD_INT 111
16769: PUSH
16770: LD_INT 112
16772: PUSH
16773: LD_INT 113
16775: PUSH
16776: LD_INT 114
16778: PUSH
16779: LD_INT 116
16781: PUSH
16782: LD_INT 117
16784: PUSH
16785: LD_INT 118
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: ST_TO_ADDR
16811: GO 18050
16813: LD_INT 14
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 17045
16821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_INT 1
16829: PUSH
16830: LD_INT 2
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: LD_INT 4
16838: PUSH
16839: LD_INT 5
16841: PUSH
16842: LD_INT 6
16844: PUSH
16845: LD_INT 7
16847: PUSH
16848: LD_INT 8
16850: PUSH
16851: LD_INT 9
16853: PUSH
16854: LD_INT 10
16856: PUSH
16857: LD_INT 11
16859: PUSH
16860: LD_INT 12
16862: PUSH
16863: LD_INT 13
16865: PUSH
16866: LD_INT 14
16868: PUSH
16869: LD_INT 15
16871: PUSH
16872: LD_INT 16
16874: PUSH
16875: LD_INT 17
16877: PUSH
16878: LD_INT 18
16880: PUSH
16881: LD_INT 19
16883: PUSH
16884: LD_INT 20
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: LD_INT 22
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: LD_INT 25
16901: PUSH
16902: LD_INT 26
16904: PUSH
16905: LD_INT 27
16907: PUSH
16908: LD_INT 28
16910: PUSH
16911: LD_INT 29
16913: PUSH
16914: LD_INT 30
16916: PUSH
16917: LD_INT 31
16919: PUSH
16920: LD_INT 32
16922: PUSH
16923: LD_INT 33
16925: PUSH
16926: LD_INT 34
16928: PUSH
16929: LD_INT 36
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 101
16971: PUSH
16972: LD_INT 102
16974: PUSH
16975: LD_INT 103
16977: PUSH
16978: LD_INT 104
16980: PUSH
16981: LD_INT 105
16983: PUSH
16984: LD_INT 106
16986: PUSH
16987: LD_INT 107
16989: PUSH
16990: LD_INT 108
16992: PUSH
16993: LD_INT 109
16995: PUSH
16996: LD_INT 110
16998: PUSH
16999: LD_INT 111
17001: PUSH
17002: LD_INT 112
17004: PUSH
17005: LD_INT 113
17007: PUSH
17008: LD_INT 114
17010: PUSH
17011: LD_INT 116
17013: PUSH
17014: LD_INT 117
17016: PUSH
17017: LD_INT 118
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: ST_TO_ADDR
17043: GO 18050
17045: LD_INT 15
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17277
17053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17054: LD_ADDR_VAR 0 2
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: LD_INT 2
17064: PUSH
17065: LD_INT 3
17067: PUSH
17068: LD_INT 4
17070: PUSH
17071: LD_INT 5
17073: PUSH
17074: LD_INT 6
17076: PUSH
17077: LD_INT 7
17079: PUSH
17080: LD_INT 8
17082: PUSH
17083: LD_INT 9
17085: PUSH
17086: LD_INT 10
17088: PUSH
17089: LD_INT 11
17091: PUSH
17092: LD_INT 12
17094: PUSH
17095: LD_INT 13
17097: PUSH
17098: LD_INT 14
17100: PUSH
17101: LD_INT 15
17103: PUSH
17104: LD_INT 16
17106: PUSH
17107: LD_INT 17
17109: PUSH
17110: LD_INT 18
17112: PUSH
17113: LD_INT 19
17115: PUSH
17116: LD_INT 20
17118: PUSH
17119: LD_INT 21
17121: PUSH
17122: LD_INT 22
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 24
17130: PUSH
17131: LD_INT 25
17133: PUSH
17134: LD_INT 26
17136: PUSH
17137: LD_INT 27
17139: PUSH
17140: LD_INT 28
17142: PUSH
17143: LD_INT 29
17145: PUSH
17146: LD_INT 30
17148: PUSH
17149: LD_INT 31
17151: PUSH
17152: LD_INT 32
17154: PUSH
17155: LD_INT 33
17157: PUSH
17158: LD_INT 34
17160: PUSH
17161: LD_INT 36
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 101
17203: PUSH
17204: LD_INT 102
17206: PUSH
17207: LD_INT 103
17209: PUSH
17210: LD_INT 104
17212: PUSH
17213: LD_INT 105
17215: PUSH
17216: LD_INT 106
17218: PUSH
17219: LD_INT 107
17221: PUSH
17222: LD_INT 108
17224: PUSH
17225: LD_INT 109
17227: PUSH
17228: LD_INT 110
17230: PUSH
17231: LD_INT 111
17233: PUSH
17234: LD_INT 112
17236: PUSH
17237: LD_INT 113
17239: PUSH
17240: LD_INT 114
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: ST_TO_ADDR
17275: GO 18050
17277: LD_INT 16
17279: DOUBLE
17280: EQUAL
17281: IFTRUE 17285
17283: GO 17421
17285: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17286: LD_ADDR_VAR 0 2
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: LD_INT 4
17296: PUSH
17297: LD_INT 5
17299: PUSH
17300: LD_INT 7
17302: PUSH
17303: LD_INT 11
17305: PUSH
17306: LD_INT 12
17308: PUSH
17309: LD_INT 15
17311: PUSH
17312: LD_INT 16
17314: PUSH
17315: LD_INT 20
17317: PUSH
17318: LD_INT 21
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_INT 23
17326: PUSH
17327: LD_INT 25
17329: PUSH
17330: LD_INT 26
17332: PUSH
17333: LD_INT 30
17335: PUSH
17336: LD_INT 31
17338: PUSH
17339: LD_INT 32
17341: PUSH
17342: LD_INT 33
17344: PUSH
17345: LD_INT 34
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 101
17371: PUSH
17372: LD_INT 102
17374: PUSH
17375: LD_INT 103
17377: PUSH
17378: LD_INT 106
17380: PUSH
17381: LD_INT 108
17383: PUSH
17384: LD_INT 112
17386: PUSH
17387: LD_INT 113
17389: PUSH
17390: LD_INT 114
17392: PUSH
17393: LD_INT 116
17395: PUSH
17396: LD_INT 117
17398: PUSH
17399: LD_INT 118
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: ST_TO_ADDR
17419: GO 18050
17421: LD_INT 17
17423: DOUBLE
17424: EQUAL
17425: IFTRUE 17429
17427: GO 17653
17429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17430: LD_ADDR_VAR 0 2
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 4
17446: PUSH
17447: LD_INT 5
17449: PUSH
17450: LD_INT 6
17452: PUSH
17453: LD_INT 7
17455: PUSH
17456: LD_INT 8
17458: PUSH
17459: LD_INT 9
17461: PUSH
17462: LD_INT 10
17464: PUSH
17465: LD_INT 11
17467: PUSH
17468: LD_INT 12
17470: PUSH
17471: LD_INT 13
17473: PUSH
17474: LD_INT 14
17476: PUSH
17477: LD_INT 15
17479: PUSH
17480: LD_INT 16
17482: PUSH
17483: LD_INT 17
17485: PUSH
17486: LD_INT 18
17488: PUSH
17489: LD_INT 19
17491: PUSH
17492: LD_INT 20
17494: PUSH
17495: LD_INT 21
17497: PUSH
17498: LD_INT 22
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 24
17506: PUSH
17507: LD_INT 25
17509: PUSH
17510: LD_INT 26
17512: PUSH
17513: LD_INT 27
17515: PUSH
17516: LD_INT 28
17518: PUSH
17519: LD_INT 29
17521: PUSH
17522: LD_INT 30
17524: PUSH
17525: LD_INT 31
17527: PUSH
17528: LD_INT 32
17530: PUSH
17531: LD_INT 33
17533: PUSH
17534: LD_INT 34
17536: PUSH
17537: LD_INT 36
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 101
17579: PUSH
17580: LD_INT 102
17582: PUSH
17583: LD_INT 103
17585: PUSH
17586: LD_INT 104
17588: PUSH
17589: LD_INT 105
17591: PUSH
17592: LD_INT 106
17594: PUSH
17595: LD_INT 107
17597: PUSH
17598: LD_INT 108
17600: PUSH
17601: LD_INT 109
17603: PUSH
17604: LD_INT 110
17606: PUSH
17607: LD_INT 111
17609: PUSH
17610: LD_INT 112
17612: PUSH
17613: LD_INT 113
17615: PUSH
17616: LD_INT 114
17618: PUSH
17619: LD_INT 116
17621: PUSH
17622: LD_INT 117
17624: PUSH
17625: LD_INT 118
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: ST_TO_ADDR
17651: GO 18050
17653: LD_INT 18
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17661
17659: GO 17809
17661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17662: LD_ADDR_VAR 0 2
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 4
17672: PUSH
17673: LD_INT 5
17675: PUSH
17676: LD_INT 7
17678: PUSH
17679: LD_INT 11
17681: PUSH
17682: LD_INT 12
17684: PUSH
17685: LD_INT 15
17687: PUSH
17688: LD_INT 16
17690: PUSH
17691: LD_INT 20
17693: PUSH
17694: LD_INT 21
17696: PUSH
17697: LD_INT 22
17699: PUSH
17700: LD_INT 23
17702: PUSH
17703: LD_INT 25
17705: PUSH
17706: LD_INT 26
17708: PUSH
17709: LD_INT 30
17711: PUSH
17712: LD_INT 31
17714: PUSH
17715: LD_INT 32
17717: PUSH
17718: LD_INT 33
17720: PUSH
17721: LD_INT 34
17723: PUSH
17724: LD_INT 35
17726: PUSH
17727: LD_INT 36
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 101
17755: PUSH
17756: LD_INT 102
17758: PUSH
17759: LD_INT 103
17761: PUSH
17762: LD_INT 106
17764: PUSH
17765: LD_INT 108
17767: PUSH
17768: LD_INT 112
17770: PUSH
17771: LD_INT 113
17773: PUSH
17774: LD_INT 114
17776: PUSH
17777: LD_INT 115
17779: PUSH
17780: LD_INT 116
17782: PUSH
17783: LD_INT 117
17785: PUSH
17786: LD_INT 118
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: ST_TO_ADDR
17807: GO 18050
17809: LD_INT 19
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 18049
17817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17818: LD_ADDR_VAR 0 2
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: LD_INT 3
17831: PUSH
17832: LD_INT 4
17834: PUSH
17835: LD_INT 5
17837: PUSH
17838: LD_INT 6
17840: PUSH
17841: LD_INT 7
17843: PUSH
17844: LD_INT 8
17846: PUSH
17847: LD_INT 9
17849: PUSH
17850: LD_INT 10
17852: PUSH
17853: LD_INT 11
17855: PUSH
17856: LD_INT 12
17858: PUSH
17859: LD_INT 13
17861: PUSH
17862: LD_INT 14
17864: PUSH
17865: LD_INT 15
17867: PUSH
17868: LD_INT 16
17870: PUSH
17871: LD_INT 17
17873: PUSH
17874: LD_INT 18
17876: PUSH
17877: LD_INT 19
17879: PUSH
17880: LD_INT 20
17882: PUSH
17883: LD_INT 21
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_INT 23
17891: PUSH
17892: LD_INT 24
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 26
17900: PUSH
17901: LD_INT 27
17903: PUSH
17904: LD_INT 28
17906: PUSH
17907: LD_INT 29
17909: PUSH
17910: LD_INT 30
17912: PUSH
17913: LD_INT 31
17915: PUSH
17916: LD_INT 32
17918: PUSH
17919: LD_INT 33
17921: PUSH
17922: LD_INT 34
17924: PUSH
17925: LD_INT 35
17927: PUSH
17928: LD_INT 36
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 101
17971: PUSH
17972: LD_INT 102
17974: PUSH
17975: LD_INT 103
17977: PUSH
17978: LD_INT 104
17980: PUSH
17981: LD_INT 105
17983: PUSH
17984: LD_INT 106
17986: PUSH
17987: LD_INT 107
17989: PUSH
17990: LD_INT 108
17992: PUSH
17993: LD_INT 109
17995: PUSH
17996: LD_INT 110
17998: PUSH
17999: LD_INT 111
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 113
18007: PUSH
18008: LD_INT 114
18010: PUSH
18011: LD_INT 115
18013: PUSH
18014: LD_INT 116
18016: PUSH
18017: LD_INT 117
18019: PUSH
18020: LD_INT 118
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: ST_TO_ADDR
18047: GO 18050
18049: POP
// end else
18050: GO 18281
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18052: LD_ADDR_VAR 0 2
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: LD_INT 4
18068: PUSH
18069: LD_INT 5
18071: PUSH
18072: LD_INT 6
18074: PUSH
18075: LD_INT 7
18077: PUSH
18078: LD_INT 8
18080: PUSH
18081: LD_INT 9
18083: PUSH
18084: LD_INT 10
18086: PUSH
18087: LD_INT 11
18089: PUSH
18090: LD_INT 12
18092: PUSH
18093: LD_INT 13
18095: PUSH
18096: LD_INT 14
18098: PUSH
18099: LD_INT 15
18101: PUSH
18102: LD_INT 16
18104: PUSH
18105: LD_INT 17
18107: PUSH
18108: LD_INT 18
18110: PUSH
18111: LD_INT 19
18113: PUSH
18114: LD_INT 20
18116: PUSH
18117: LD_INT 21
18119: PUSH
18120: LD_INT 22
18122: PUSH
18123: LD_INT 23
18125: PUSH
18126: LD_INT 24
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 26
18134: PUSH
18135: LD_INT 27
18137: PUSH
18138: LD_INT 28
18140: PUSH
18141: LD_INT 29
18143: PUSH
18144: LD_INT 30
18146: PUSH
18147: LD_INT 31
18149: PUSH
18150: LD_INT 32
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: LD_INT 34
18158: PUSH
18159: LD_INT 35
18161: PUSH
18162: LD_INT 36
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 101
18205: PUSH
18206: LD_INT 102
18208: PUSH
18209: LD_INT 103
18211: PUSH
18212: LD_INT 104
18214: PUSH
18215: LD_INT 105
18217: PUSH
18218: LD_INT 106
18220: PUSH
18221: LD_INT 107
18223: PUSH
18224: LD_INT 108
18226: PUSH
18227: LD_INT 109
18229: PUSH
18230: LD_INT 110
18232: PUSH
18233: LD_INT 111
18235: PUSH
18236: LD_INT 112
18238: PUSH
18239: LD_INT 113
18241: PUSH
18242: LD_INT 114
18244: PUSH
18245: LD_INT 115
18247: PUSH
18248: LD_INT 116
18250: PUSH
18251: LD_INT 117
18253: PUSH
18254: LD_INT 118
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: ST_TO_ADDR
// if result then
18281: LD_VAR 0 2
18285: IFFALSE 19071
// begin normal :=  ;
18287: LD_ADDR_VAR 0 5
18291: PUSH
18292: LD_STRING 
18294: ST_TO_ADDR
// hardcore :=  ;
18295: LD_ADDR_VAR 0 6
18299: PUSH
18300: LD_STRING 
18302: ST_TO_ADDR
// active :=  ;
18303: LD_ADDR_VAR 0 7
18307: PUSH
18308: LD_STRING 
18310: ST_TO_ADDR
// for i = 1 to normalCounter do
18311: LD_ADDR_VAR 0 8
18315: PUSH
18316: DOUBLE
18317: LD_INT 1
18319: DEC
18320: ST_TO_ADDR
18321: LD_EXP 34
18325: PUSH
18326: FOR_TO
18327: IFFALSE 18428
// begin tmp := 0 ;
18329: LD_ADDR_VAR 0 3
18333: PUSH
18334: LD_STRING 0
18336: ST_TO_ADDR
// if result [ 1 ] then
18337: LD_VAR 0 2
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: IFFALSE 18410
// if result [ 1 ] [ 1 ] = i then
18347: LD_VAR 0 2
18351: PUSH
18352: LD_INT 1
18354: ARRAY
18355: PUSH
18356: LD_INT 1
18358: ARRAY
18359: PUSH
18360: LD_VAR 0 8
18364: EQUAL
18365: IFFALSE 18410
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18367: LD_ADDR_VAR 0 2
18371: PUSH
18372: LD_VAR 0 2
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_VAR 0 2
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: LD_INT 1
18391: PPUSH
18392: CALL_OW 3
18396: PPUSH
18397: CALL_OW 1
18401: ST_TO_ADDR
// tmp := 1 ;
18402: LD_ADDR_VAR 0 3
18406: PUSH
18407: LD_STRING 1
18409: ST_TO_ADDR
// end ; normal := normal & tmp ;
18410: LD_ADDR_VAR 0 5
18414: PUSH
18415: LD_VAR 0 5
18419: PUSH
18420: LD_VAR 0 3
18424: STR
18425: ST_TO_ADDR
// end ;
18426: GO 18326
18428: POP
18429: POP
// for i = 1 to hardcoreCounter do
18430: LD_ADDR_VAR 0 8
18434: PUSH
18435: DOUBLE
18436: LD_INT 1
18438: DEC
18439: ST_TO_ADDR
18440: LD_EXP 35
18444: PUSH
18445: FOR_TO
18446: IFFALSE 18551
// begin tmp := 0 ;
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: LD_STRING 0
18455: ST_TO_ADDR
// if result [ 2 ] then
18456: LD_VAR 0 2
18460: PUSH
18461: LD_INT 2
18463: ARRAY
18464: IFFALSE 18533
// if result [ 2 ] [ 1 ] = 100 + i then
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 2
18473: ARRAY
18474: PUSH
18475: LD_INT 1
18477: ARRAY
18478: PUSH
18479: LD_INT 100
18481: PUSH
18482: LD_VAR 0 8
18486: PLUS
18487: EQUAL
18488: IFFALSE 18533
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18490: LD_ADDR_VAR 0 2
18494: PUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: LD_INT 2
18502: PPUSH
18503: LD_VAR 0 2
18507: PUSH
18508: LD_INT 2
18510: ARRAY
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL_OW 3
18519: PPUSH
18520: CALL_OW 1
18524: ST_TO_ADDR
// tmp := 1 ;
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: LD_STRING 1
18532: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18533: LD_ADDR_VAR 0 6
18537: PUSH
18538: LD_VAR 0 6
18542: PUSH
18543: LD_VAR 0 3
18547: STR
18548: ST_TO_ADDR
// end ;
18549: GO 18445
18551: POP
18552: POP
// if isGameLoad then
18553: LD_VAR 0 1
18557: IFFALSE 19032
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18559: LD_ADDR_VAR 0 4
18563: PUSH
18564: LD_EXP 38
18568: PUSH
18569: LD_EXP 37
18573: PUSH
18574: LD_EXP 39
18578: PUSH
18579: LD_EXP 36
18583: PUSH
18584: LD_EXP 40
18588: PUSH
18589: LD_EXP 41
18593: PUSH
18594: LD_EXP 42
18598: PUSH
18599: LD_EXP 43
18603: PUSH
18604: LD_EXP 44
18608: PUSH
18609: LD_EXP 45
18613: PUSH
18614: LD_EXP 46
18618: PUSH
18619: LD_EXP 47
18623: PUSH
18624: LD_EXP 48
18628: PUSH
18629: LD_EXP 49
18633: PUSH
18634: LD_EXP 57
18638: PUSH
18639: LD_EXP 58
18643: PUSH
18644: LD_EXP 59
18648: PUSH
18649: LD_EXP 60
18653: PUSH
18654: LD_EXP 62
18658: PUSH
18659: LD_EXP 63
18663: PUSH
18664: LD_EXP 64
18668: PUSH
18669: LD_EXP 67
18673: PUSH
18674: LD_EXP 69
18678: PUSH
18679: LD_EXP 70
18683: PUSH
18684: LD_EXP 71
18688: PUSH
18689: LD_EXP 73
18693: PUSH
18694: LD_EXP 74
18698: PUSH
18699: LD_EXP 77
18703: PUSH
18704: LD_EXP 78
18708: PUSH
18709: LD_EXP 79
18713: PUSH
18714: LD_EXP 80
18718: PUSH
18719: LD_EXP 81
18723: PUSH
18724: LD_EXP 82
18728: PUSH
18729: LD_EXP 83
18733: PUSH
18734: LD_EXP 84
18738: PUSH
18739: LD_EXP 85
18743: PUSH
18744: LD_EXP 50
18748: PUSH
18749: LD_EXP 51
18753: PUSH
18754: LD_EXP 54
18758: PUSH
18759: LD_EXP 55
18763: PUSH
18764: LD_EXP 56
18768: PUSH
18769: LD_EXP 52
18773: PUSH
18774: LD_EXP 53
18778: PUSH
18779: LD_EXP 61
18783: PUSH
18784: LD_EXP 65
18788: PUSH
18789: LD_EXP 66
18793: PUSH
18794: LD_EXP 68
18798: PUSH
18799: LD_EXP 72
18803: PUSH
18804: LD_EXP 75
18808: PUSH
18809: LD_EXP 76
18813: PUSH
18814: LD_EXP 86
18818: PUSH
18819: LD_EXP 87
18823: PUSH
18824: LD_EXP 88
18828: PUSH
18829: LD_EXP 89
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: ST_TO_ADDR
// tmp :=  ;
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_STRING 
18897: ST_TO_ADDR
// for i = 1 to normalCounter do
18898: LD_ADDR_VAR 0 8
18902: PUSH
18903: DOUBLE
18904: LD_INT 1
18906: DEC
18907: ST_TO_ADDR
18908: LD_EXP 34
18912: PUSH
18913: FOR_TO
18914: IFFALSE 18950
// begin if flags [ i ] then
18916: LD_VAR 0 4
18920: PUSH
18921: LD_VAR 0 8
18925: ARRAY
18926: IFFALSE 18948
// tmp := tmp & i & ; ;
18928: LD_ADDR_VAR 0 3
18932: PUSH
18933: LD_VAR 0 3
18937: PUSH
18938: LD_VAR 0 8
18942: STR
18943: PUSH
18944: LD_STRING ;
18946: STR
18947: ST_TO_ADDR
// end ;
18948: GO 18913
18950: POP
18951: POP
// for i = 1 to hardcoreCounter do
18952: LD_ADDR_VAR 0 8
18956: PUSH
18957: DOUBLE
18958: LD_INT 1
18960: DEC
18961: ST_TO_ADDR
18962: LD_EXP 35
18966: PUSH
18967: FOR_TO
18968: IFFALSE 19014
// begin if flags [ normalCounter + i ] then
18970: LD_VAR 0 4
18974: PUSH
18975: LD_EXP 34
18979: PUSH
18980: LD_VAR 0 8
18984: PLUS
18985: ARRAY
18986: IFFALSE 19012
// tmp := tmp & ( 100 + i ) & ; ;
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 100
19000: PUSH
19001: LD_VAR 0 8
19005: PLUS
19006: STR
19007: PUSH
19008: LD_STRING ;
19010: STR
19011: ST_TO_ADDR
// end ;
19012: GO 18967
19014: POP
19015: POP
// if tmp then
19016: LD_VAR 0 3
19020: IFFALSE 19032
// active := tmp ;
19022: LD_ADDR_VAR 0 7
19026: PUSH
19027: LD_VAR 0 3
19031: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19032: LD_STRING getStreamItemsFromMission("
19034: PUSH
19035: LD_VAR 0 5
19039: STR
19040: PUSH
19041: LD_STRING ","
19043: STR
19044: PUSH
19045: LD_VAR 0 6
19049: STR
19050: PUSH
19051: LD_STRING ","
19053: STR
19054: PUSH
19055: LD_VAR 0 7
19059: STR
19060: PUSH
19061: LD_STRING ")
19063: STR
19064: PPUSH
19065: CALL_OW 559
// end else
19069: GO 19078
// ToLua ( getStreamItemsFromMission("","","") ) ;
19071: LD_STRING getStreamItemsFromMission("","","")
19073: PPUSH
19074: CALL_OW 559
// end ;
19078: LD_VAR 0 2
19082: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19083: LD_EXP 33
19087: PUSH
19088: LD_EXP 38
19092: AND
19093: IFFALSE 19217
19095: GO 19097
19097: DISABLE
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
// begin enable ;
19102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_OWVAR 2
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 34
19125: PUSH
19126: LD_INT 7
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 34
19135: PUSH
19136: LD_INT 45
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 34
19145: PUSH
19146: LD_INT 28
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 34
19155: PUSH
19156: LD_INT 47
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: ST_TO_ADDR
// if not tmp then
19179: LD_VAR 0 2
19183: NOT
19184: IFFALSE 19188
// exit ;
19186: GO 19217
// for i in tmp do
19188: LD_ADDR_VAR 0 1
19192: PUSH
19193: LD_VAR 0 2
19197: PUSH
19198: FOR_IN
19199: IFFALSE 19215
// begin SetLives ( i , 0 ) ;
19201: LD_VAR 0 1
19205: PPUSH
19206: LD_INT 0
19208: PPUSH
19209: CALL_OW 234
// end ;
19213: GO 19198
19215: POP
19216: POP
// end ;
19217: PPOPN 2
19219: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19220: LD_EXP 33
19224: PUSH
19225: LD_EXP 39
19229: AND
19230: IFFALSE 19314
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
// begin enable ;
19239: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_OWVAR 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 32
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: ST_TO_ADDR
// if not tmp then
19276: LD_VAR 0 2
19280: NOT
19281: IFFALSE 19285
// exit ;
19283: GO 19314
// for i in tmp do
19285: LD_ADDR_VAR 0 1
19289: PUSH
19290: LD_VAR 0 2
19294: PUSH
19295: FOR_IN
19296: IFFALSE 19312
// begin SetLives ( i , 0 ) ;
19298: LD_VAR 0 1
19302: PPUSH
19303: LD_INT 0
19305: PPUSH
19306: CALL_OW 234
// end ;
19310: GO 19295
19312: POP
19313: POP
// end ;
19314: PPOPN 2
19316: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19317: LD_EXP 33
19321: PUSH
19322: LD_EXP 36
19326: AND
19327: IFFALSE 19420
19329: GO 19331
19331: DISABLE
19332: LD_INT 0
19334: PPUSH
// begin enable ;
19335: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: LD_INT 22
19343: PUSH
19344: LD_OWVAR 2
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 5
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 25
19368: PUSH
19369: LD_INT 9
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 25
19378: PUSH
19379: LD_INT 8
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PPUSH
19396: CALL_OW 69
19400: PUSH
19401: FOR_IN
19402: IFFALSE 19418
// begin SetClass ( i , 1 ) ;
19404: LD_VAR 0 1
19408: PPUSH
19409: LD_INT 1
19411: PPUSH
19412: CALL_OW 336
// end ;
19416: GO 19401
19418: POP
19419: POP
// end ;
19420: PPOPN 1
19422: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19423: LD_EXP 33
19427: PUSH
19428: LD_EXP 37
19432: AND
19433: PUSH
19434: LD_OWVAR 65
19438: PUSH
19439: LD_INT 7
19441: LESS
19442: AND
19443: IFFALSE 19457
19445: GO 19447
19447: DISABLE
// begin enable ;
19448: ENABLE
// game_speed := 7 ;
19449: LD_ADDR_OWVAR 65
19453: PUSH
19454: LD_INT 7
19456: ST_TO_ADDR
// end ;
19457: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19458: LD_EXP 33
19462: PUSH
19463: LD_EXP 40
19467: AND
19468: IFFALSE 19670
19470: GO 19472
19472: DISABLE
19473: LD_INT 0
19475: PPUSH
19476: PPUSH
19477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19478: LD_ADDR_VAR 0 3
19482: PUSH
19483: LD_INT 81
19485: PUSH
19486: LD_OWVAR 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 21
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 69
19513: ST_TO_ADDR
// if not tmp then
19514: LD_VAR 0 3
19518: NOT
19519: IFFALSE 19523
// exit ;
19521: GO 19670
// if tmp > 5 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 5
19530: GREATER
19531: IFFALSE 19543
// k := 5 else
19533: LD_ADDR_VAR 0 2
19537: PUSH
19538: LD_INT 5
19540: ST_TO_ADDR
19541: GO 19553
// k := tmp ;
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: LD_VAR 0 3
19552: ST_TO_ADDR
// for i := 1 to k do
19553: LD_ADDR_VAR 0 1
19557: PUSH
19558: DOUBLE
19559: LD_INT 1
19561: DEC
19562: ST_TO_ADDR
19563: LD_VAR 0 2
19567: PUSH
19568: FOR_TO
19569: IFFALSE 19668
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_VAR 0 1
19580: ARRAY
19581: PPUSH
19582: LD_VAR 0 1
19586: PUSH
19587: LD_INT 4
19589: MOD
19590: PUSH
19591: LD_INT 1
19593: PLUS
19594: PPUSH
19595: CALL_OW 259
19599: PUSH
19600: LD_INT 10
19602: LESS
19603: IFFALSE 19666
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19605: LD_VAR 0 3
19609: PUSH
19610: LD_VAR 0 1
19614: ARRAY
19615: PPUSH
19616: LD_VAR 0 1
19620: PUSH
19621: LD_INT 4
19623: MOD
19624: PUSH
19625: LD_INT 1
19627: PLUS
19628: PPUSH
19629: LD_VAR 0 3
19633: PUSH
19634: LD_VAR 0 1
19638: ARRAY
19639: PPUSH
19640: LD_VAR 0 1
19644: PUSH
19645: LD_INT 4
19647: MOD
19648: PUSH
19649: LD_INT 1
19651: PLUS
19652: PPUSH
19653: CALL_OW 259
19657: PUSH
19658: LD_INT 1
19660: PLUS
19661: PPUSH
19662: CALL_OW 237
19666: GO 19568
19668: POP
19669: POP
// end ;
19670: PPOPN 3
19672: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19673: LD_EXP 33
19677: PUSH
19678: LD_EXP 41
19682: AND
19683: IFFALSE 19703
19685: GO 19687
19687: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19688: LD_INT 4
19690: PPUSH
19691: LD_OWVAR 2
19695: PPUSH
19696: LD_INT 0
19698: PPUSH
19699: CALL_OW 324
19703: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19704: LD_EXP 33
19708: PUSH
19709: LD_EXP 70
19713: AND
19714: IFFALSE 19734
19716: GO 19718
19718: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19719: LD_INT 19
19721: PPUSH
19722: LD_OWVAR 2
19726: PPUSH
19727: LD_INT 0
19729: PPUSH
19730: CALL_OW 324
19734: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19735: LD_EXP 33
19739: PUSH
19740: LD_EXP 42
19744: AND
19745: IFFALSE 19847
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin enable ;
19754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19755: LD_ADDR_VAR 0 2
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_OWVAR 2
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 34
19777: PUSH
19778: LD_INT 11
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 34
19787: PUSH
19788: LD_INT 30
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PPUSH
19804: CALL_OW 69
19808: ST_TO_ADDR
// if not tmp then
19809: LD_VAR 0 2
19813: NOT
19814: IFFALSE 19818
// exit ;
19816: GO 19847
// for i in tmp do
19818: LD_ADDR_VAR 0 1
19822: PUSH
19823: LD_VAR 0 2
19827: PUSH
19828: FOR_IN
19829: IFFALSE 19845
// begin SetLives ( i , 0 ) ;
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: CALL_OW 234
// end ;
19843: GO 19828
19845: POP
19846: POP
// end ;
19847: PPOPN 2
19849: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19850: LD_EXP 33
19854: PUSH
19855: LD_EXP 43
19859: AND
19860: IFFALSE 19880
19862: GO 19864
19864: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19865: LD_INT 32
19867: PPUSH
19868: LD_OWVAR 2
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: CALL_OW 324
19880: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19881: LD_EXP 33
19885: PUSH
19886: LD_EXP 44
19890: AND
19891: IFFALSE 20072
19893: GO 19895
19895: DISABLE
19896: LD_INT 0
19898: PPUSH
19899: PPUSH
19900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19901: LD_ADDR_VAR 0 2
19905: PUSH
19906: LD_INT 22
19908: PUSH
19909: LD_OWVAR 2
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 33
19920: PUSH
19921: LD_INT 3
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PPUSH
19932: CALL_OW 69
19936: ST_TO_ADDR
// if not tmp then
19937: LD_VAR 0 2
19941: NOT
19942: IFFALSE 19946
// exit ;
19944: GO 20072
// side := 0 ;
19946: LD_ADDR_VAR 0 3
19950: PUSH
19951: LD_INT 0
19953: ST_TO_ADDR
// for i := 1 to 8 do
19954: LD_ADDR_VAR 0 1
19958: PUSH
19959: DOUBLE
19960: LD_INT 1
19962: DEC
19963: ST_TO_ADDR
19964: LD_INT 8
19966: PUSH
19967: FOR_TO
19968: IFFALSE 20016
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19970: LD_OWVAR 2
19974: PUSH
19975: LD_VAR 0 1
19979: NONEQUAL
19980: PUSH
19981: LD_OWVAR 2
19985: PPUSH
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 81
19995: PUSH
19996: LD_INT 2
19998: EQUAL
19999: AND
20000: IFFALSE 20014
// begin side := i ;
20002: LD_ADDR_VAR 0 3
20006: PUSH
20007: LD_VAR 0 1
20011: ST_TO_ADDR
// break ;
20012: GO 20016
// end ;
20014: GO 19967
20016: POP
20017: POP
// if not side then
20018: LD_VAR 0 3
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20072
// for i := 1 to tmp do
20027: LD_ADDR_VAR 0 1
20031: PUSH
20032: DOUBLE
20033: LD_INT 1
20035: DEC
20036: ST_TO_ADDR
20037: LD_VAR 0 2
20041: PUSH
20042: FOR_TO
20043: IFFALSE 20070
// if Prob ( 60 ) then
20045: LD_INT 60
20047: PPUSH
20048: CALL_OW 13
20052: IFFALSE 20068
// SetSide ( i , side ) ;
20054: LD_VAR 0 1
20058: PPUSH
20059: LD_VAR 0 3
20063: PPUSH
20064: CALL_OW 235
20068: GO 20042
20070: POP
20071: POP
// end ;
20072: PPOPN 3
20074: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20075: LD_EXP 33
20079: PUSH
20080: LD_EXP 46
20084: AND
20085: IFFALSE 20204
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20093: LD_ADDR_VAR 0 1
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_OWVAR 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 21
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 3
20122: PUSH
20123: LD_INT 23
20125: PUSH
20126: LD_INT 0
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: PPUSH
20142: CALL_OW 69
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20202
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20150: LD_VAR 0 1
20154: PPUSH
20155: CALL_OW 257
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 3
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: IN
20178: IFFALSE 20200
// SetClass ( un , rand ( 1 , 4 ) ) ;
20180: LD_VAR 0 1
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: LD_INT 4
20190: PPUSH
20191: CALL_OW 12
20195: PPUSH
20196: CALL_OW 336
20200: GO 20147
20202: POP
20203: POP
// end ;
20204: PPOPN 1
20206: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20207: LD_EXP 33
20211: PUSH
20212: LD_EXP 45
20216: AND
20217: IFFALSE 20296
20219: GO 20221
20221: DISABLE
20222: LD_INT 0
20224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20225: LD_ADDR_VAR 0 1
20229: PUSH
20230: LD_INT 22
20232: PUSH
20233: LD_OWVAR 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 21
20244: PUSH
20245: LD_INT 3
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PPUSH
20256: CALL_OW 69
20260: ST_TO_ADDR
// if not tmp then
20261: LD_VAR 0 1
20265: NOT
20266: IFFALSE 20270
// exit ;
20268: GO 20296
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20270: LD_VAR 0 1
20274: PUSH
20275: LD_INT 1
20277: PPUSH
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 12
20287: ARRAY
20288: PPUSH
20289: LD_INT 100
20291: PPUSH
20292: CALL_OW 234
// end ;
20296: PPOPN 1
20298: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20299: LD_EXP 33
20303: PUSH
20304: LD_EXP 47
20308: AND
20309: IFFALSE 20407
20311: GO 20313
20313: DISABLE
20314: LD_INT 0
20316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20317: LD_ADDR_VAR 0 1
20321: PUSH
20322: LD_INT 22
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 21
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: ST_TO_ADDR
// if not tmp then
20353: LD_VAR 0 1
20357: NOT
20358: IFFALSE 20362
// exit ;
20360: GO 20407
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20362: LD_VAR 0 1
20366: PUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 12
20379: ARRAY
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_INT 4
20386: PPUSH
20387: CALL_OW 12
20391: PPUSH
20392: LD_INT 3000
20394: PPUSH
20395: LD_INT 9000
20397: PPUSH
20398: CALL_OW 12
20402: PPUSH
20403: CALL_OW 492
// end ;
20407: PPOPN 1
20409: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20410: LD_EXP 33
20414: PUSH
20415: LD_EXP 48
20419: AND
20420: IFFALSE 20440
20422: GO 20424
20424: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20425: LD_INT 1
20427: PPUSH
20428: LD_OWVAR 2
20432: PPUSH
20433: LD_INT 0
20435: PPUSH
20436: CALL_OW 324
20440: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20441: LD_EXP 33
20445: PUSH
20446: LD_EXP 49
20450: AND
20451: IFFALSE 20534
20453: GO 20455
20455: DISABLE
20456: LD_INT 0
20458: PPUSH
20459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20460: LD_ADDR_VAR 0 2
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_OWVAR 2
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 21
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PPUSH
20491: CALL_OW 69
20495: ST_TO_ADDR
// if not tmp then
20496: LD_VAR 0 2
20500: NOT
20501: IFFALSE 20505
// exit ;
20503: GO 20534
// for i in tmp do
20505: LD_ADDR_VAR 0 1
20509: PUSH
20510: LD_VAR 0 2
20514: PUSH
20515: FOR_IN
20516: IFFALSE 20532
// SetBLevel ( i , 10 ) ;
20518: LD_VAR 0 1
20522: PPUSH
20523: LD_INT 10
20525: PPUSH
20526: CALL_OW 241
20530: GO 20515
20532: POP
20533: POP
// end ;
20534: PPOPN 2
20536: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20537: LD_EXP 33
20541: PUSH
20542: LD_EXP 50
20546: AND
20547: IFFALSE 20658
20549: GO 20551
20551: DISABLE
20552: LD_INT 0
20554: PPUSH
20555: PPUSH
20556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20557: LD_ADDR_VAR 0 3
20561: PUSH
20562: LD_INT 22
20564: PUSH
20565: LD_OWVAR 2
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 25
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PPUSH
20588: CALL_OW 69
20592: ST_TO_ADDR
// if not tmp then
20593: LD_VAR 0 3
20597: NOT
20598: IFFALSE 20602
// exit ;
20600: GO 20658
// un := tmp [ rand ( 1 , tmp ) ] ;
20602: LD_ADDR_VAR 0 2
20606: PUSH
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 1
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: CALL_OW 12
20624: ARRAY
20625: ST_TO_ADDR
// if Crawls ( un ) then
20626: LD_VAR 0 2
20630: PPUSH
20631: CALL_OW 318
20635: IFFALSE 20646
// ComWalk ( un ) ;
20637: LD_VAR 0 2
20641: PPUSH
20642: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20646: LD_VAR 0 2
20650: PPUSH
20651: LD_INT 5
20653: PPUSH
20654: CALL_OW 336
// end ;
20658: PPOPN 3
20660: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20661: LD_EXP 33
20665: PUSH
20666: LD_EXP 51
20670: AND
20671: PUSH
20672: LD_OWVAR 67
20676: PUSH
20677: LD_INT 4
20679: LESS
20680: AND
20681: IFFALSE 20700
20683: GO 20685
20685: DISABLE
// begin Difficulty := Difficulty + 1 ;
20686: LD_ADDR_OWVAR 67
20690: PUSH
20691: LD_OWVAR 67
20695: PUSH
20696: LD_INT 1
20698: PLUS
20699: ST_TO_ADDR
// end ;
20700: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20701: LD_EXP 33
20705: PUSH
20706: LD_EXP 52
20710: AND
20711: IFFALSE 20814
20713: GO 20715
20715: DISABLE
20716: LD_INT 0
20718: PPUSH
// begin for i := 1 to 5 do
20719: LD_ADDR_VAR 0 1
20723: PUSH
20724: DOUBLE
20725: LD_INT 1
20727: DEC
20728: ST_TO_ADDR
20729: LD_INT 5
20731: PUSH
20732: FOR_TO
20733: IFFALSE 20812
// begin uc_nation := nation_nature ;
20735: LD_ADDR_OWVAR 21
20739: PUSH
20740: LD_INT 0
20742: ST_TO_ADDR
// uc_side := 0 ;
20743: LD_ADDR_OWVAR 20
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20751: LD_ADDR_OWVAR 29
20755: PUSH
20756: LD_INT 12
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: ST_TO_ADDR
// hc_agressivity := 20 ;
20766: LD_ADDR_OWVAR 35
20770: PUSH
20771: LD_INT 20
20773: ST_TO_ADDR
// hc_class := class_tiger ;
20774: LD_ADDR_OWVAR 28
20778: PUSH
20779: LD_INT 14
20781: ST_TO_ADDR
// hc_gallery :=  ;
20782: LD_ADDR_OWVAR 33
20786: PUSH
20787: LD_STRING 
20789: ST_TO_ADDR
// hc_name :=  ;
20790: LD_ADDR_OWVAR 26
20794: PUSH
20795: LD_STRING 
20797: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20798: CALL_OW 44
20802: PPUSH
20803: LD_INT 0
20805: PPUSH
20806: CALL_OW 51
// end ;
20810: GO 20732
20812: POP
20813: POP
// end ;
20814: PPOPN 1
20816: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20817: LD_EXP 33
20821: PUSH
20822: LD_EXP 53
20826: AND
20827: IFFALSE 20836
20829: GO 20831
20831: DISABLE
// StreamSibBomb ;
20832: CALL 20837 0 0
20836: END
// export function StreamSibBomb ; var i , x , y ; begin
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
// result := false ;
20843: LD_ADDR_VAR 0 1
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// for i := 1 to 16 do
20851: LD_ADDR_VAR 0 2
20855: PUSH
20856: DOUBLE
20857: LD_INT 1
20859: DEC
20860: ST_TO_ADDR
20861: LD_INT 16
20863: PUSH
20864: FOR_TO
20865: IFFALSE 21064
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20867: LD_ADDR_VAR 0 3
20871: PUSH
20872: LD_INT 10
20874: PUSH
20875: LD_INT 20
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: LD_INT 40
20883: PUSH
20884: LD_INT 50
20886: PUSH
20887: LD_INT 60
20889: PUSH
20890: LD_INT 70
20892: PUSH
20893: LD_INT 80
20895: PUSH
20896: LD_INT 90
20898: PUSH
20899: LD_INT 100
20901: PUSH
20902: LD_INT 110
20904: PUSH
20905: LD_INT 120
20907: PUSH
20908: LD_INT 130
20910: PUSH
20911: LD_INT 140
20913: PUSH
20914: LD_INT 150
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: PPUSH
20937: LD_INT 15
20939: PPUSH
20940: CALL_OW 12
20944: ARRAY
20945: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20946: LD_ADDR_VAR 0 4
20950: PUSH
20951: LD_INT 10
20953: PUSH
20954: LD_INT 20
20956: PUSH
20957: LD_INT 30
20959: PUSH
20960: LD_INT 40
20962: PUSH
20963: LD_INT 50
20965: PUSH
20966: LD_INT 60
20968: PUSH
20969: LD_INT 70
20971: PUSH
20972: LD_INT 80
20974: PUSH
20975: LD_INT 90
20977: PUSH
20978: LD_INT 100
20980: PUSH
20981: LD_INT 110
20983: PUSH
20984: LD_INT 120
20986: PUSH
20987: LD_INT 130
20989: PUSH
20990: LD_INT 140
20992: PUSH
20993: LD_INT 150
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: PPUSH
21016: LD_INT 15
21018: PPUSH
21019: CALL_OW 12
21023: ARRAY
21024: ST_TO_ADDR
// if ValidHex ( x , y ) then
21025: LD_VAR 0 3
21029: PPUSH
21030: LD_VAR 0 4
21034: PPUSH
21035: CALL_OW 488
21039: IFFALSE 21062
// begin result := [ x , y ] ;
21041: LD_ADDR_VAR 0 1
21045: PUSH
21046: LD_VAR 0 3
21050: PUSH
21051: LD_VAR 0 4
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: ST_TO_ADDR
// break ;
21060: GO 21064
// end ; end ;
21062: GO 20864
21064: POP
21065: POP
// if result then
21066: LD_VAR 0 1
21070: IFFALSE 21130
// begin ToLua ( playSibBomb() ) ;
21072: LD_STRING playSibBomb()
21074: PPUSH
21075: CALL_OW 559
// wait ( 0 0$14 ) ;
21079: LD_INT 490
21081: PPUSH
21082: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 1
21093: ARRAY
21094: PPUSH
21095: LD_VAR 0 1
21099: PUSH
21100: LD_INT 2
21102: ARRAY
21103: PPUSH
21104: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21108: LD_VAR 0 1
21112: PUSH
21113: LD_INT 1
21115: ARRAY
21116: PPUSH
21117: LD_VAR 0 1
21121: PUSH
21122: LD_INT 2
21124: ARRAY
21125: PPUSH
21126: CALL_OW 429
// end ; end ;
21130: LD_VAR 0 1
21134: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21135: LD_EXP 33
21139: PUSH
21140: LD_EXP 55
21144: AND
21145: IFFALSE 21157
21147: GO 21149
21149: DISABLE
// YouLost (  ) ;
21150: LD_STRING 
21152: PPUSH
21153: CALL_OW 104
21157: END
// every 0 0$1 trigger StreamModeActive and sFog do
21158: LD_EXP 33
21162: PUSH
21163: LD_EXP 54
21167: AND
21168: IFFALSE 21182
21170: GO 21172
21172: DISABLE
// FogOff ( your_side ) ;
21173: LD_OWVAR 2
21177: PPUSH
21178: CALL_OW 344
21182: END
// every 0 0$1 trigger StreamModeActive and sSun do
21183: LD_EXP 33
21187: PUSH
21188: LD_EXP 56
21192: AND
21193: IFFALSE 21221
21195: GO 21197
21197: DISABLE
// begin solar_recharge_percent := 0 ;
21198: LD_ADDR_OWVAR 79
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21206: LD_INT 10500
21208: PPUSH
21209: CALL_OW 67
// solar_recharge_percent := 100 ;
21213: LD_ADDR_OWVAR 79
21217: PUSH
21218: LD_INT 100
21220: ST_TO_ADDR
// end ;
21221: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21222: LD_EXP 33
21226: PUSH
21227: LD_EXP 57
21231: AND
21232: IFFALSE 21471
21234: GO 21236
21236: DISABLE
21237: LD_INT 0
21239: PPUSH
21240: PPUSH
21241: PPUSH
// begin tmp := [ ] ;
21242: LD_ADDR_VAR 0 3
21246: PUSH
21247: EMPTY
21248: ST_TO_ADDR
// for i := 1 to 6 do
21249: LD_ADDR_VAR 0 1
21253: PUSH
21254: DOUBLE
21255: LD_INT 1
21257: DEC
21258: ST_TO_ADDR
21259: LD_INT 6
21261: PUSH
21262: FOR_TO
21263: IFFALSE 21368
// begin uc_nation := nation_nature ;
21265: LD_ADDR_OWVAR 21
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// uc_side := 0 ;
21273: LD_ADDR_OWVAR 20
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21281: LD_ADDR_OWVAR 29
21285: PUSH
21286: LD_INT 12
21288: PUSH
21289: LD_INT 12
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: ST_TO_ADDR
// hc_agressivity := 20 ;
21296: LD_ADDR_OWVAR 35
21300: PUSH
21301: LD_INT 20
21303: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21304: LD_ADDR_OWVAR 28
21308: PUSH
21309: LD_INT 17
21311: ST_TO_ADDR
// hc_gallery :=  ;
21312: LD_ADDR_OWVAR 33
21316: PUSH
21317: LD_STRING 
21319: ST_TO_ADDR
// hc_name :=  ;
21320: LD_ADDR_OWVAR 26
21324: PUSH
21325: LD_STRING 
21327: ST_TO_ADDR
// un := CreateHuman ;
21328: LD_ADDR_VAR 0 2
21332: PUSH
21333: CALL_OW 44
21337: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21338: LD_VAR 0 2
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: CALL_OW 51
// tmp := tmp ^ un ;
21350: LD_ADDR_VAR 0 3
21354: PUSH
21355: LD_VAR 0 3
21359: PUSH
21360: LD_VAR 0 2
21364: ADD
21365: ST_TO_ADDR
// end ;
21366: GO 21262
21368: POP
21369: POP
// repeat wait ( 0 0$1 ) ;
21370: LD_INT 35
21372: PPUSH
21373: CALL_OW 67
// for un in tmp do
21377: LD_ADDR_VAR 0 2
21381: PUSH
21382: LD_VAR 0 3
21386: PUSH
21387: FOR_IN
21388: IFFALSE 21462
// begin if IsDead ( un ) then
21390: LD_VAR 0 2
21394: PPUSH
21395: CALL_OW 301
21399: IFFALSE 21419
// begin tmp := tmp diff un ;
21401: LD_ADDR_VAR 0 3
21405: PUSH
21406: LD_VAR 0 3
21410: PUSH
21411: LD_VAR 0 2
21415: DIFF
21416: ST_TO_ADDR
// continue ;
21417: GO 21387
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21419: LD_VAR 0 2
21423: PPUSH
21424: LD_INT 3
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL_OW 69
21445: PPUSH
21446: LD_VAR 0 2
21450: PPUSH
21451: CALL_OW 74
21455: PPUSH
21456: CALL_OW 115
// end ;
21460: GO 21387
21462: POP
21463: POP
// until not tmp ;
21464: LD_VAR 0 3
21468: NOT
21469: IFFALSE 21370
// end ;
21471: PPOPN 3
21473: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21474: LD_EXP 33
21478: PUSH
21479: LD_EXP 58
21483: AND
21484: IFFALSE 21538
21486: GO 21488
21488: DISABLE
// begin ToLua ( displayTroll(); ) ;
21489: LD_STRING displayTroll();
21491: PPUSH
21492: CALL_OW 559
// wait ( 3 3$00 ) ;
21496: LD_INT 6300
21498: PPUSH
21499: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21503: LD_STRING hideTroll();
21505: PPUSH
21506: CALL_OW 559
// wait ( 1 1$00 ) ;
21510: LD_INT 2100
21512: PPUSH
21513: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21517: LD_STRING displayTroll();
21519: PPUSH
21520: CALL_OW 559
// wait ( 1 1$00 ) ;
21524: LD_INT 2100
21526: PPUSH
21527: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21531: LD_STRING hideTroll();
21533: PPUSH
21534: CALL_OW 559
// end ;
21538: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21539: LD_EXP 33
21543: PUSH
21544: LD_EXP 59
21548: AND
21549: IFFALSE 21612
21551: GO 21553
21553: DISABLE
21554: LD_INT 0
21556: PPUSH
// begin p := 0 ;
21557: LD_ADDR_VAR 0 1
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// repeat game_speed := 1 ;
21565: LD_ADDR_OWVAR 65
21569: PUSH
21570: LD_INT 1
21572: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21573: LD_INT 35
21575: PPUSH
21576: CALL_OW 67
// p := p + 1 ;
21580: LD_ADDR_VAR 0 1
21584: PUSH
21585: LD_VAR 0 1
21589: PUSH
21590: LD_INT 1
21592: PLUS
21593: ST_TO_ADDR
// until p >= 60 ;
21594: LD_VAR 0 1
21598: PUSH
21599: LD_INT 60
21601: GREATEREQUAL
21602: IFFALSE 21565
// game_speed := 4 ;
21604: LD_ADDR_OWVAR 65
21608: PUSH
21609: LD_INT 4
21611: ST_TO_ADDR
// end ;
21612: PPOPN 1
21614: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21615: LD_EXP 33
21619: PUSH
21620: LD_EXP 60
21624: AND
21625: IFFALSE 21771
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21634: LD_ADDR_VAR 0 1
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 30
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 1
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 69
21687: ST_TO_ADDR
// if not depot then
21688: LD_VAR 0 1
21692: NOT
21693: IFFALSE 21697
// exit ;
21695: GO 21771
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_VAR 0 1
21706: PUSH
21707: LD_INT 1
21709: PPUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 12
21719: ARRAY
21720: PPUSH
21721: CALL_OW 274
21725: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21726: LD_VAR 0 2
21730: PPUSH
21731: LD_INT 1
21733: PPUSH
21734: LD_INT 0
21736: PPUSH
21737: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21741: LD_VAR 0 2
21745: PPUSH
21746: LD_INT 2
21748: PPUSH
21749: LD_INT 0
21751: PPUSH
21752: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21756: LD_VAR 0 2
21760: PPUSH
21761: LD_INT 3
21763: PPUSH
21764: LD_INT 0
21766: PPUSH
21767: CALL_OW 277
// end ;
21771: PPOPN 2
21773: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21774: LD_EXP 33
21778: PUSH
21779: LD_EXP 61
21783: AND
21784: IFFALSE 21881
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 3
21821: PUSH
21822: LD_INT 23
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: PPUSH
21841: CALL_OW 69
21845: ST_TO_ADDR
// if not tmp then
21846: LD_VAR 0 1
21850: NOT
21851: IFFALSE 21855
// exit ;
21853: GO 21881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21855: LD_VAR 0 1
21859: PUSH
21860: LD_INT 1
21862: PPUSH
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL_OW 12
21872: ARRAY
21873: PPUSH
21874: LD_INT 200
21876: PPUSH
21877: CALL_OW 234
// end ;
21881: PPOPN 1
21883: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21884: LD_EXP 33
21888: PUSH
21889: LD_EXP 62
21893: AND
21894: IFFALSE 21973
21896: GO 21898
21898: DISABLE
21899: LD_INT 0
21901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21902: LD_ADDR_VAR 0 1
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_OWVAR 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 21
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PPUSH
21933: CALL_OW 69
21937: ST_TO_ADDR
// if not tmp then
21938: LD_VAR 0 1
21942: NOT
21943: IFFALSE 21947
// exit ;
21945: GO 21973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21947: LD_VAR 0 1
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 1
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: PPUSH
21966: LD_INT 60
21968: PPUSH
21969: CALL_OW 234
// end ;
21973: PPOPN 1
21975: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21976: LD_EXP 33
21980: PUSH
21981: LD_EXP 63
21985: AND
21986: IFFALSE 22085
21988: GO 21990
21990: DISABLE
21991: LD_INT 0
21993: PPUSH
21994: PPUSH
// begin enable ;
21995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_INT 22
22003: PUSH
22004: LD_OWVAR 2
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 61
22015: PUSH
22016: EMPTY
22017: LIST
22018: PUSH
22019: LD_INT 33
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: ST_TO_ADDR
// if not tmp then
22039: LD_VAR 0 1
22043: NOT
22044: IFFALSE 22048
// exit ;
22046: GO 22085
// for i in tmp do
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: LD_VAR 0 1
22057: PUSH
22058: FOR_IN
22059: IFFALSE 22083
// if IsControledBy ( i ) then
22061: LD_VAR 0 2
22065: PPUSH
22066: CALL_OW 312
22070: IFFALSE 22081
// ComUnlink ( i ) ;
22072: LD_VAR 0 2
22076: PPUSH
22077: CALL_OW 136
22081: GO 22058
22083: POP
22084: POP
// end ;
22085: PPOPN 2
22087: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22088: LD_EXP 33
22092: PUSH
22093: LD_EXP 64
22097: AND
22098: IFFALSE 22238
22100: GO 22102
22102: DISABLE
22103: LD_INT 0
22105: PPUSH
22106: PPUSH
// begin ToLua ( displayPowell(); ) ;
22107: LD_STRING displayPowell();
22109: PPUSH
22110: CALL_OW 559
// uc_side := 0 ;
22114: LD_ADDR_OWVAR 20
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// uc_nation := 2 ;
22122: LD_ADDR_OWVAR 21
22126: PUSH
22127: LD_INT 2
22129: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22130: LD_ADDR_OWVAR 37
22134: PUSH
22135: LD_INT 14
22137: ST_TO_ADDR
// vc_engine := engine_siberite ;
22138: LD_ADDR_OWVAR 39
22142: PUSH
22143: LD_INT 3
22145: ST_TO_ADDR
// vc_control := control_apeman ;
22146: LD_ADDR_OWVAR 38
22150: PUSH
22151: LD_INT 5
22153: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22154: LD_ADDR_OWVAR 40
22158: PUSH
22159: LD_INT 29
22161: ST_TO_ADDR
// un := CreateVehicle ;
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: CALL_OW 45
22171: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22172: LD_VAR 0 2
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22184: LD_INT 35
22186: PPUSH
22187: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_INT 22
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: PPUSH
22213: LD_VAR 0 2
22217: PPUSH
22218: CALL_OW 74
22222: PPUSH
22223: CALL_OW 115
// until IsDead ( un ) ;
22227: LD_VAR 0 2
22231: PPUSH
22232: CALL_OW 301
22236: IFFALSE 22184
// end ;
22238: PPOPN 2
22240: END
// every 0 0$1 trigger StreamModeActive and sStu do
22241: LD_EXP 33
22245: PUSH
22246: LD_EXP 72
22250: AND
22251: IFFALSE 22267
22253: GO 22255
22255: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22256: LD_STRING displayStucuk();
22258: PPUSH
22259: CALL_OW 559
// ResetFog ;
22263: CALL_OW 335
// end ;
22267: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22268: LD_EXP 33
22272: PUSH
22273: LD_EXP 65
22277: AND
22278: IFFALSE 22419
22280: GO 22282
22282: DISABLE
22283: LD_INT 0
22285: PPUSH
22286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22287: LD_ADDR_VAR 0 2
22291: PUSH
22292: LD_INT 22
22294: PUSH
22295: LD_OWVAR 2
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 21
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PPUSH
22318: CALL_OW 69
22322: ST_TO_ADDR
// if not tmp then
22323: LD_VAR 0 2
22327: NOT
22328: IFFALSE 22332
// exit ;
22330: GO 22419
// un := tmp [ rand ( 1 , tmp ) ] ;
22332: LD_ADDR_VAR 0 1
22336: PUSH
22337: LD_VAR 0 2
22341: PUSH
22342: LD_INT 1
22344: PPUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: CALL_OW 12
22354: ARRAY
22355: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22356: LD_VAR 0 1
22360: PPUSH
22361: LD_INT 0
22363: PPUSH
22364: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_OWVAR 3
22377: PUSH
22378: LD_VAR 0 1
22382: DIFF
22383: PPUSH
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 74
22393: PPUSH
22394: CALL_OW 115
// wait ( 0 0$20 ) ;
22398: LD_INT 700
22400: PPUSH
22401: CALL_OW 67
// SetSide ( un , your_side ) ;
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_OWVAR 2
22414: PPUSH
22415: CALL_OW 235
// end ;
22419: PPOPN 2
22421: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22422: LD_EXP 33
22426: PUSH
22427: LD_EXP 66
22431: AND
22432: IFFALSE 22538
22434: GO 22436
22436: DISABLE
22437: LD_INT 0
22439: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22440: LD_ADDR_VAR 0 1
22444: PUSH
22445: LD_INT 22
22447: PUSH
22448: LD_OWVAR 2
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 30
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 69
22493: ST_TO_ADDR
// if not depot then
22494: LD_VAR 0 1
22498: NOT
22499: IFFALSE 22503
// exit ;
22501: GO 22538
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22503: LD_VAR 0 1
22507: PUSH
22508: LD_INT 1
22510: ARRAY
22511: PPUSH
22512: CALL_OW 250
22516: PPUSH
22517: LD_VAR 0 1
22521: PUSH
22522: LD_INT 1
22524: ARRAY
22525: PPUSH
22526: CALL_OW 251
22530: PPUSH
22531: LD_INT 70
22533: PPUSH
22534: CALL_OW 495
// end ;
22538: PPOPN 1
22540: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22541: LD_EXP 33
22545: PUSH
22546: LD_EXP 67
22550: AND
22551: IFFALSE 22762
22553: GO 22555
22555: DISABLE
22556: LD_INT 0
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22563: LD_ADDR_VAR 0 5
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_OWVAR 2
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 21
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL_OW 69
22598: ST_TO_ADDR
// if not tmp then
22599: LD_VAR 0 5
22603: NOT
22604: IFFALSE 22608
// exit ;
22606: GO 22762
// for i in tmp do
22608: LD_ADDR_VAR 0 1
22612: PUSH
22613: LD_VAR 0 5
22617: PUSH
22618: FOR_IN
22619: IFFALSE 22760
// begin d := rand ( 0 , 5 ) ;
22621: LD_ADDR_VAR 0 4
22625: PUSH
22626: LD_INT 0
22628: PPUSH
22629: LD_INT 5
22631: PPUSH
22632: CALL_OW 12
22636: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL_OW 250
22651: PPUSH
22652: LD_VAR 0 4
22656: PPUSH
22657: LD_INT 3
22659: PPUSH
22660: LD_INT 12
22662: PPUSH
22663: CALL_OW 12
22667: PPUSH
22668: CALL_OW 272
22672: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_VAR 0 1
22682: PPUSH
22683: CALL_OW 251
22687: PPUSH
22688: LD_VAR 0 4
22692: PPUSH
22693: LD_INT 3
22695: PPUSH
22696: LD_INT 12
22698: PPUSH
22699: CALL_OW 12
22703: PPUSH
22704: CALL_OW 273
22708: ST_TO_ADDR
// if ValidHex ( x , y ) then
22709: LD_VAR 0 2
22713: PPUSH
22714: LD_VAR 0 3
22718: PPUSH
22719: CALL_OW 488
22723: IFFALSE 22758
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22725: LD_VAR 0 1
22729: PPUSH
22730: LD_VAR 0 2
22734: PPUSH
22735: LD_VAR 0 3
22739: PPUSH
22740: LD_INT 3
22742: PPUSH
22743: LD_INT 6
22745: PPUSH
22746: CALL_OW 12
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 483
// end ;
22758: GO 22618
22760: POP
22761: POP
// end ;
22762: PPOPN 5
22764: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22765: LD_EXP 33
22769: PUSH
22770: LD_EXP 68
22774: AND
22775: IFFALSE 22869
22777: GO 22779
22779: DISABLE
22780: LD_INT 0
22782: PPUSH
22783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_OWVAR 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 32
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 69
22830: ST_TO_ADDR
// if not tmp then
22831: LD_VAR 0 2
22835: NOT
22836: IFFALSE 22840
// exit ;
22838: GO 22869
// for i in tmp do
22840: LD_ADDR_VAR 0 1
22844: PUSH
22845: LD_VAR 0 2
22849: PUSH
22850: FOR_IN
22851: IFFALSE 22867
// SetFuel ( i , 0 ) ;
22853: LD_VAR 0 1
22857: PPUSH
22858: LD_INT 0
22860: PPUSH
22861: CALL_OW 240
22865: GO 22850
22867: POP
22868: POP
// end ;
22869: PPOPN 2
22871: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22872: LD_EXP 33
22876: PUSH
22877: LD_EXP 69
22881: AND
22882: IFFALSE 22948
22884: GO 22886
22886: DISABLE
22887: LD_INT 0
22889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_INT 22
22897: PUSH
22898: LD_OWVAR 2
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 30
22909: PUSH
22910: LD_INT 29
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PPUSH
22921: CALL_OW 69
22925: ST_TO_ADDR
// if not tmp then
22926: LD_VAR 0 1
22930: NOT
22931: IFFALSE 22935
// exit ;
22933: GO 22948
// DestroyUnit ( tmp [ 1 ] ) ;
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: PPUSH
22944: CALL_OW 65
// end ;
22948: PPOPN 1
22950: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22951: LD_EXP 33
22955: PUSH
22956: LD_EXP 71
22960: AND
22961: IFFALSE 23090
22963: GO 22965
22965: DISABLE
22966: LD_INT 0
22968: PPUSH
// begin uc_side := 0 ;
22969: LD_ADDR_OWVAR 20
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
// uc_nation := nation_arabian ;
22977: LD_ADDR_OWVAR 21
22981: PUSH
22982: LD_INT 2
22984: ST_TO_ADDR
// hc_gallery :=  ;
22985: LD_ADDR_OWVAR 33
22989: PUSH
22990: LD_STRING 
22992: ST_TO_ADDR
// hc_name :=  ;
22993: LD_ADDR_OWVAR 26
22997: PUSH
22998: LD_STRING 
23000: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23001: LD_INT 1
23003: PPUSH
23004: LD_INT 11
23006: PPUSH
23007: LD_INT 10
23009: PPUSH
23010: CALL_OW 380
// un := CreateHuman ;
23014: LD_ADDR_VAR 0 1
23018: PUSH
23019: CALL_OW 44
23023: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_INT 1
23031: PPUSH
23032: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23036: LD_INT 35
23038: PPUSH
23039: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 22
23050: PUSH
23051: LD_OWVAR 2
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 69
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 74
23074: PPUSH
23075: CALL_OW 115
// until IsDead ( un ) ;
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL_OW 301
23088: IFFALSE 23036
// end ;
23090: PPOPN 1
23092: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23093: LD_EXP 33
23097: PUSH
23098: LD_EXP 73
23102: AND
23103: IFFALSE 23115
23105: GO 23107
23107: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23108: LD_STRING earthquake(getX(game), 0, 32)
23110: PPUSH
23111: CALL_OW 559
23115: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23116: LD_EXP 33
23120: PUSH
23121: LD_EXP 74
23125: AND
23126: IFFALSE 23217
23128: GO 23130
23130: DISABLE
23131: LD_INT 0
23133: PPUSH
// begin enable ;
23134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23135: LD_ADDR_VAR 0 1
23139: PUSH
23140: LD_INT 22
23142: PUSH
23143: LD_OWVAR 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 33
23164: PUSH
23165: LD_INT 3
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: PPUSH
23177: CALL_OW 69
23181: ST_TO_ADDR
// if not tmp then
23182: LD_VAR 0 1
23186: NOT
23187: IFFALSE 23191
// exit ;
23189: GO 23217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23191: LD_VAR 0 1
23195: PUSH
23196: LD_INT 1
23198: PPUSH
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 12
23208: ARRAY
23209: PPUSH
23210: LD_INT 1
23212: PPUSH
23213: CALL_OW 234
// end ;
23217: PPOPN 1
23219: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23220: LD_EXP 33
23224: PUSH
23225: LD_EXP 75
23229: AND
23230: IFFALSE 23371
23232: GO 23234
23234: DISABLE
23235: LD_INT 0
23237: PPUSH
23238: PPUSH
23239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: LD_INT 22
23247: PUSH
23248: LD_OWVAR 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 25
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 69
23275: ST_TO_ADDR
// if not tmp then
23276: LD_VAR 0 3
23280: NOT
23281: IFFALSE 23285
// exit ;
23283: GO 23371
// un := tmp [ rand ( 1 , tmp ) ] ;
23285: LD_ADDR_VAR 0 2
23289: PUSH
23290: LD_VAR 0 3
23294: PUSH
23295: LD_INT 1
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 12
23307: ARRAY
23308: ST_TO_ADDR
// if Crawls ( un ) then
23309: LD_VAR 0 2
23313: PPUSH
23314: CALL_OW 318
23318: IFFALSE 23329
// ComWalk ( un ) ;
23320: LD_VAR 0 2
23324: PPUSH
23325: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23329: LD_VAR 0 2
23333: PPUSH
23334: LD_INT 9
23336: PPUSH
23337: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23341: LD_INT 28
23343: PPUSH
23344: LD_OWVAR 2
23348: PPUSH
23349: LD_INT 2
23351: PPUSH
23352: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23356: LD_INT 29
23358: PPUSH
23359: LD_OWVAR 2
23363: PPUSH
23364: LD_INT 2
23366: PPUSH
23367: CALL_OW 322
// end ;
23371: PPOPN 3
23373: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23374: LD_EXP 33
23378: PUSH
23379: LD_EXP 76
23383: AND
23384: IFFALSE 23495
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
23393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23394: LD_ADDR_VAR 0 3
23398: PUSH
23399: LD_INT 22
23401: PUSH
23402: LD_OWVAR 2
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 25
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PPUSH
23425: CALL_OW 69
23429: ST_TO_ADDR
// if not tmp then
23430: LD_VAR 0 3
23434: NOT
23435: IFFALSE 23439
// exit ;
23437: GO 23495
// un := tmp [ rand ( 1 , tmp ) ] ;
23439: LD_ADDR_VAR 0 2
23443: PUSH
23444: LD_VAR 0 3
23448: PUSH
23449: LD_INT 1
23451: PPUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: CALL_OW 12
23461: ARRAY
23462: ST_TO_ADDR
// if Crawls ( un ) then
23463: LD_VAR 0 2
23467: PPUSH
23468: CALL_OW 318
23472: IFFALSE 23483
// ComWalk ( un ) ;
23474: LD_VAR 0 2
23478: PPUSH
23479: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23483: LD_VAR 0 2
23487: PPUSH
23488: LD_INT 8
23490: PPUSH
23491: CALL_OW 336
// end ;
23495: PPOPN 3
23497: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23498: LD_EXP 33
23502: PUSH
23503: LD_EXP 77
23507: AND
23508: IFFALSE 23652
23510: GO 23512
23512: DISABLE
23513: LD_INT 0
23515: PPUSH
23516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23517: LD_ADDR_VAR 0 2
23521: PUSH
23522: LD_INT 22
23524: PUSH
23525: LD_OWVAR 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 34
23549: PUSH
23550: LD_INT 12
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 34
23559: PUSH
23560: LD_INT 51
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 34
23569: PUSH
23570: LD_INT 32
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: LIST
23587: PPUSH
23588: CALL_OW 69
23592: ST_TO_ADDR
// if not tmp then
23593: LD_VAR 0 2
23597: NOT
23598: IFFALSE 23602
// exit ;
23600: GO 23652
// for i in tmp do
23602: LD_ADDR_VAR 0 1
23606: PUSH
23607: LD_VAR 0 2
23611: PUSH
23612: FOR_IN
23613: IFFALSE 23650
// if GetCargo ( i , mat_artifact ) = 0 then
23615: LD_VAR 0 1
23619: PPUSH
23620: LD_INT 4
23622: PPUSH
23623: CALL_OW 289
23627: PUSH
23628: LD_INT 0
23630: EQUAL
23631: IFFALSE 23648
// SetCargo ( i , mat_siberit , 100 ) ;
23633: LD_VAR 0 1
23637: PPUSH
23638: LD_INT 3
23640: PPUSH
23641: LD_INT 100
23643: PPUSH
23644: CALL_OW 290
23648: GO 23612
23650: POP
23651: POP
// end ;
23652: PPOPN 2
23654: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23655: LD_EXP 33
23659: PUSH
23660: LD_EXP 78
23664: AND
23665: IFFALSE 23848
23667: GO 23669
23669: DISABLE
23670: LD_INT 0
23672: PPUSH
23673: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23674: LD_ADDR_VAR 0 2
23678: PUSH
23679: LD_INT 22
23681: PUSH
23682: LD_OWVAR 2
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL_OW 69
23695: ST_TO_ADDR
// if not tmp then
23696: LD_VAR 0 2
23700: NOT
23701: IFFALSE 23705
// exit ;
23703: GO 23848
// for i := 1 to 2 do
23705: LD_ADDR_VAR 0 1
23709: PUSH
23710: DOUBLE
23711: LD_INT 1
23713: DEC
23714: ST_TO_ADDR
23715: LD_INT 2
23717: PUSH
23718: FOR_TO
23719: IFFALSE 23846
// begin uc_side := your_side ;
23721: LD_ADDR_OWVAR 20
23725: PUSH
23726: LD_OWVAR 2
23730: ST_TO_ADDR
// uc_nation := nation_american ;
23731: LD_ADDR_OWVAR 21
23735: PUSH
23736: LD_INT 1
23738: ST_TO_ADDR
// vc_chassis := us_morphling ;
23739: LD_ADDR_OWVAR 37
23743: PUSH
23744: LD_INT 5
23746: ST_TO_ADDR
// vc_engine := engine_siberite ;
23747: LD_ADDR_OWVAR 39
23751: PUSH
23752: LD_INT 3
23754: ST_TO_ADDR
// vc_control := control_computer ;
23755: LD_ADDR_OWVAR 38
23759: PUSH
23760: LD_INT 3
23762: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23763: LD_ADDR_OWVAR 40
23767: PUSH
23768: LD_INT 10
23770: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23771: LD_VAR 0 2
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: CALL_OW 310
23784: NOT
23785: IFFALSE 23832
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23787: CALL_OW 45
23791: PPUSH
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 250
23805: PPUSH
23806: LD_VAR 0 2
23810: PUSH
23811: LD_INT 1
23813: ARRAY
23814: PPUSH
23815: CALL_OW 251
23819: PPUSH
23820: LD_INT 12
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 50
23830: GO 23844
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23832: CALL_OW 45
23836: PPUSH
23837: LD_INT 1
23839: PPUSH
23840: CALL_OW 51
// end ;
23844: GO 23718
23846: POP
23847: POP
// end ;
23848: PPOPN 2
23850: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23851: LD_EXP 33
23855: PUSH
23856: LD_EXP 79
23860: AND
23861: IFFALSE 24083
23863: GO 23865
23865: DISABLE
23866: LD_INT 0
23868: PPUSH
23869: PPUSH
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23874: LD_ADDR_VAR 0 6
23878: PUSH
23879: LD_INT 22
23881: PUSH
23882: LD_OWVAR 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 3
23903: PUSH
23904: LD_INT 23
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: PPUSH
23923: CALL_OW 69
23927: ST_TO_ADDR
// if not tmp then
23928: LD_VAR 0 6
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 24083
// s1 := rand ( 1 , 4 ) ;
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_INT 1
23944: PPUSH
23945: LD_INT 4
23947: PPUSH
23948: CALL_OW 12
23952: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23953: LD_ADDR_VAR 0 4
23957: PUSH
23958: LD_VAR 0 6
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PPUSH
23967: LD_VAR 0 2
23971: PPUSH
23972: CALL_OW 259
23976: ST_TO_ADDR
// if s1 = 1 then
23977: LD_VAR 0 2
23981: PUSH
23982: LD_INT 1
23984: EQUAL
23985: IFFALSE 24005
// s2 := rand ( 2 , 4 ) else
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_INT 2
23994: PPUSH
23995: LD_INT 4
23997: PPUSH
23998: CALL_OW 12
24002: ST_TO_ADDR
24003: GO 24013
// s2 := 1 ;
24005: LD_ADDR_VAR 0 3
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24013: LD_ADDR_VAR 0 5
24017: PUSH
24018: LD_VAR 0 6
24022: PUSH
24023: LD_INT 1
24025: ARRAY
24026: PPUSH
24027: LD_VAR 0 3
24031: PPUSH
24032: CALL_OW 259
24036: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24037: LD_VAR 0 6
24041: PUSH
24042: LD_INT 1
24044: ARRAY
24045: PPUSH
24046: LD_VAR 0 2
24050: PPUSH
24051: LD_VAR 0 5
24055: PPUSH
24056: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24060: LD_VAR 0 6
24064: PUSH
24065: LD_INT 1
24067: ARRAY
24068: PPUSH
24069: LD_VAR 0 3
24073: PPUSH
24074: LD_VAR 0 4
24078: PPUSH
24079: CALL_OW 237
// end ;
24083: PPOPN 6
24085: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24086: LD_EXP 33
24090: PUSH
24091: LD_EXP 80
24095: AND
24096: IFFALSE 24175
24098: GO 24100
24100: DISABLE
24101: LD_INT 0
24103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24104: LD_ADDR_VAR 0 1
24108: PUSH
24109: LD_INT 22
24111: PUSH
24112: LD_OWVAR 2
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PPUSH
24135: CALL_OW 69
24139: ST_TO_ADDR
// if not tmp then
24140: LD_VAR 0 1
24144: NOT
24145: IFFALSE 24149
// exit ;
24147: GO 24175
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24149: LD_VAR 0 1
24153: PUSH
24154: LD_INT 1
24156: PPUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 12
24166: ARRAY
24167: PPUSH
24168: LD_INT 1
24170: PPUSH
24171: CALL_OW 234
// end ;
24175: PPOPN 1
24177: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24178: LD_EXP 33
24182: PUSH
24183: LD_EXP 81
24187: AND
24188: IFFALSE 24300
24190: GO 24192
24192: DISABLE
24193: LD_INT 0
24195: PPUSH
24196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24197: LD_ADDR_VAR 0 2
24201: PUSH
24202: LD_INT 22
24204: PUSH
24205: LD_OWVAR 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 30
24219: PUSH
24220: LD_INT 27
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 30
24229: PUSH
24230: LD_INT 26
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 30
24239: PUSH
24240: LD_INT 28
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PPUSH
24257: CALL_OW 69
24261: ST_TO_ADDR
// if not tmp then
24262: LD_VAR 0 2
24266: NOT
24267: IFFALSE 24271
// exit ;
24269: GO 24300
// for i in tmp do
24271: LD_ADDR_VAR 0 1
24275: PUSH
24276: LD_VAR 0 2
24280: PUSH
24281: FOR_IN
24282: IFFALSE 24298
// SetLives ( i , 1 ) ;
24284: LD_VAR 0 1
24288: PPUSH
24289: LD_INT 1
24291: PPUSH
24292: CALL_OW 234
24296: GO 24281
24298: POP
24299: POP
// end ;
24300: PPOPN 2
24302: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24303: LD_EXP 33
24307: PUSH
24308: LD_EXP 82
24312: AND
24313: IFFALSE 24600
24315: GO 24317
24317: DISABLE
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
// begin i := rand ( 1 , 7 ) ;
24323: LD_ADDR_VAR 0 1
24327: PUSH
24328: LD_INT 1
24330: PPUSH
24331: LD_INT 7
24333: PPUSH
24334: CALL_OW 12
24338: ST_TO_ADDR
// case i of 1 :
24339: LD_VAR 0 1
24343: PUSH
24344: LD_INT 1
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24362
24352: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24353: LD_STRING earthquake(getX(game), 0, 32)
24355: PPUSH
24356: CALL_OW 559
24360: GO 24600
24362: LD_INT 2
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24370
24368: GO 24384
24370: POP
// begin ToLua ( displayStucuk(); ) ;
24371: LD_STRING displayStucuk();
24373: PPUSH
24374: CALL_OW 559
// ResetFog ;
24378: CALL_OW 335
// end ; 3 :
24382: GO 24600
24384: LD_INT 3
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24496
24392: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24393: LD_ADDR_VAR 0 2
24397: PUSH
24398: LD_INT 22
24400: PUSH
24401: LD_OWVAR 2
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 25
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: ST_TO_ADDR
// if not tmp then
24429: LD_VAR 0 2
24433: NOT
24434: IFFALSE 24438
// exit ;
24436: GO 24600
// un := tmp [ rand ( 1 , tmp ) ] ;
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 1
24450: PPUSH
24451: LD_VAR 0 2
24455: PPUSH
24456: CALL_OW 12
24460: ARRAY
24461: ST_TO_ADDR
// if Crawls ( un ) then
24462: LD_VAR 0 3
24466: PPUSH
24467: CALL_OW 318
24471: IFFALSE 24482
// ComWalk ( un ) ;
24473: LD_VAR 0 3
24477: PPUSH
24478: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24482: LD_VAR 0 3
24486: PPUSH
24487: LD_INT 8
24489: PPUSH
24490: CALL_OW 336
// end ; 4 :
24494: GO 24600
24496: LD_INT 4
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24578
24504: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24505: LD_ADDR_VAR 0 2
24509: PUSH
24510: LD_INT 22
24512: PUSH
24513: LD_OWVAR 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 30
24524: PUSH
24525: LD_INT 29
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PPUSH
24536: CALL_OW 69
24540: ST_TO_ADDR
// if not tmp then
24541: LD_VAR 0 2
24545: NOT
24546: IFFALSE 24550
// exit ;
24548: GO 24600
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24550: LD_VAR 0 2
24554: PUSH
24555: LD_INT 1
24557: ARRAY
24558: PPUSH
24559: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24563: LD_VAR 0 2
24567: PUSH
24568: LD_INT 1
24570: ARRAY
24571: PPUSH
24572: CALL_OW 65
// end ; 5 .. 7 :
24576: GO 24600
24578: LD_INT 5
24580: DOUBLE
24581: GREATEREQUAL
24582: IFFALSE 24590
24584: LD_INT 7
24586: DOUBLE
24587: LESSEQUAL
24588: IFTRUE 24592
24590: GO 24599
24592: POP
// StreamSibBomb ; end ;
24593: CALL 20837 0 0
24597: GO 24600
24599: POP
// end ;
24600: PPOPN 3
24602: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24603: LD_EXP 33
24607: PUSH
24608: LD_EXP 83
24612: AND
24613: IFFALSE 24769
24615: GO 24617
24617: DISABLE
24618: LD_INT 0
24620: PPUSH
24621: PPUSH
24622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24623: LD_ADDR_VAR 0 2
24627: PUSH
24628: LD_INT 81
24630: PUSH
24631: LD_OWVAR 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: LD_INT 21
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 69
24676: ST_TO_ADDR
// if not tmp then
24677: LD_VAR 0 2
24681: NOT
24682: IFFALSE 24686
// exit ;
24684: GO 24769
// p := 0 ;
24686: LD_ADDR_VAR 0 3
24690: PUSH
24691: LD_INT 0
24693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24694: LD_INT 35
24696: PPUSH
24697: CALL_OW 67
// p := p + 1 ;
24701: LD_ADDR_VAR 0 3
24705: PUSH
24706: LD_VAR 0 3
24710: PUSH
24711: LD_INT 1
24713: PLUS
24714: ST_TO_ADDR
// for i in tmp do
24715: LD_ADDR_VAR 0 1
24719: PUSH
24720: LD_VAR 0 2
24724: PUSH
24725: FOR_IN
24726: IFFALSE 24757
// if GetLives ( i ) < 1000 then
24728: LD_VAR 0 1
24732: PPUSH
24733: CALL_OW 256
24737: PUSH
24738: LD_INT 1000
24740: LESS
24741: IFFALSE 24755
// SetLives ( i , 1000 ) ;
24743: LD_VAR 0 1
24747: PPUSH
24748: LD_INT 1000
24750: PPUSH
24751: CALL_OW 234
24755: GO 24725
24757: POP
24758: POP
// until p > 20 ;
24759: LD_VAR 0 3
24763: PUSH
24764: LD_INT 20
24766: GREATER
24767: IFFALSE 24694
// end ;
24769: PPOPN 3
24771: END
// every 0 0$1 trigger StreamModeActive and sTime do
24772: LD_EXP 33
24776: PUSH
24777: LD_EXP 84
24781: AND
24782: IFFALSE 24817
24784: GO 24786
24786: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24787: LD_INT 28
24789: PPUSH
24790: LD_OWVAR 2
24794: PPUSH
24795: LD_INT 2
24797: PPUSH
24798: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24802: LD_INT 30
24804: PPUSH
24805: LD_OWVAR 2
24809: PPUSH
24810: LD_INT 2
24812: PPUSH
24813: CALL_OW 322
// end ;
24817: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24818: LD_EXP 33
24822: PUSH
24823: LD_EXP 85
24827: AND
24828: IFFALSE 24949
24830: GO 24832
24832: DISABLE
24833: LD_INT 0
24835: PPUSH
24836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24837: LD_ADDR_VAR 0 2
24841: PUSH
24842: LD_INT 22
24844: PUSH
24845: LD_OWVAR 2
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 21
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 3
24866: PUSH
24867: LD_INT 23
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: ST_TO_ADDR
// if not tmp then
24891: LD_VAR 0 2
24895: NOT
24896: IFFALSE 24900
// exit ;
24898: GO 24949
// for i in tmp do
24900: LD_ADDR_VAR 0 1
24904: PUSH
24905: LD_VAR 0 2
24909: PUSH
24910: FOR_IN
24911: IFFALSE 24947
// begin if Crawls ( i ) then
24913: LD_VAR 0 1
24917: PPUSH
24918: CALL_OW 318
24922: IFFALSE 24933
// ComWalk ( i ) ;
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 138
// SetClass ( i , 2 ) ;
24933: LD_VAR 0 1
24937: PPUSH
24938: LD_INT 2
24940: PPUSH
24941: CALL_OW 336
// end ;
24945: GO 24910
24947: POP
24948: POP
// end ;
24949: PPOPN 2
24951: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24952: LD_EXP 33
24956: PUSH
24957: LD_EXP 86
24961: AND
24962: IFFALSE 25250
24964: GO 24966
24966: DISABLE
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
24971: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24972: LD_OWVAR 2
24976: PPUSH
24977: LD_INT 9
24979: PPUSH
24980: LD_INT 1
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24990: LD_INT 9
24992: PPUSH
24993: LD_OWVAR 2
24997: PPUSH
24998: CALL_OW 343
// uc_side := 9 ;
25002: LD_ADDR_OWVAR 20
25006: PUSH
25007: LD_INT 9
25009: ST_TO_ADDR
// uc_nation := 2 ;
25010: LD_ADDR_OWVAR 21
25014: PUSH
25015: LD_INT 2
25017: ST_TO_ADDR
// hc_name := Dark Warrior ;
25018: LD_ADDR_OWVAR 26
25022: PUSH
25023: LD_STRING Dark Warrior
25025: ST_TO_ADDR
// hc_gallery :=  ;
25026: LD_ADDR_OWVAR 33
25030: PUSH
25031: LD_STRING 
25033: ST_TO_ADDR
// hc_noskilllimit := true ;
25034: LD_ADDR_OWVAR 76
25038: PUSH
25039: LD_INT 1
25041: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25042: LD_ADDR_OWVAR 31
25046: PUSH
25047: LD_INT 30
25049: PUSH
25050: LD_INT 30
25052: PUSH
25053: LD_INT 30
25055: PUSH
25056: LD_INT 30
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: ST_TO_ADDR
// un := CreateHuman ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: CALL_OW 44
25074: ST_TO_ADDR
// hc_noskilllimit := false ;
25075: LD_ADDR_OWVAR 76
25079: PUSH
25080: LD_INT 0
25082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25083: LD_VAR 0 3
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 51
// ToLua ( playRanger() ) ;
25095: LD_STRING playRanger()
25097: PPUSH
25098: CALL_OW 559
// p := 0 ;
25102: LD_ADDR_VAR 0 2
25106: PUSH
25107: LD_INT 0
25109: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25110: LD_INT 35
25112: PPUSH
25113: CALL_OW 67
// p := p + 1 ;
25117: LD_ADDR_VAR 0 2
25121: PUSH
25122: LD_VAR 0 2
25126: PUSH
25127: LD_INT 1
25129: PLUS
25130: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25131: LD_VAR 0 3
25135: PPUSH
25136: CALL_OW 256
25140: PUSH
25141: LD_INT 1000
25143: LESS
25144: IFFALSE 25158
// SetLives ( un , 1000 ) ;
25146: LD_VAR 0 3
25150: PPUSH
25151: LD_INT 1000
25153: PPUSH
25154: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25158: LD_VAR 0 3
25162: PPUSH
25163: LD_INT 81
25165: PUSH
25166: LD_OWVAR 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 91
25177: PUSH
25178: LD_VAR 0 3
25182: PUSH
25183: LD_INT 30
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PPUSH
25195: CALL_OW 69
25199: PPUSH
25200: LD_VAR 0 3
25204: PPUSH
25205: CALL_OW 74
25209: PPUSH
25210: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 80
25221: GREATER
25222: PUSH
25223: LD_VAR 0 3
25227: PPUSH
25228: CALL_OW 301
25232: OR
25233: IFFALSE 25110
// if un then
25235: LD_VAR 0 3
25239: IFFALSE 25250
// RemoveUnit ( un ) ;
25241: LD_VAR 0 3
25245: PPUSH
25246: CALL_OW 64
// end ;
25250: PPOPN 3
25252: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25253: LD_EXP 87
25257: IFFALSE 25373
25259: GO 25261
25261: DISABLE
25262: LD_INT 0
25264: PPUSH
25265: PPUSH
25266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25267: LD_ADDR_VAR 0 2
25271: PUSH
25272: LD_INT 81
25274: PUSH
25275: LD_OWVAR 2
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 21
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 69
25302: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25303: LD_STRING playComputer()
25305: PPUSH
25306: CALL_OW 559
// if not tmp then
25310: LD_VAR 0 2
25314: NOT
25315: IFFALSE 25319
// exit ;
25317: GO 25373
// for i in tmp do
25319: LD_ADDR_VAR 0 1
25323: PUSH
25324: LD_VAR 0 2
25328: PUSH
25329: FOR_IN
25330: IFFALSE 25371
// for j := 1 to 4 do
25332: LD_ADDR_VAR 0 3
25336: PUSH
25337: DOUBLE
25338: LD_INT 1
25340: DEC
25341: ST_TO_ADDR
25342: LD_INT 4
25344: PUSH
25345: FOR_TO
25346: IFFALSE 25367
// SetSkill ( i , j , 10 ) ;
25348: LD_VAR 0 1
25352: PPUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 10
25360: PPUSH
25361: CALL_OW 237
25365: GO 25345
25367: POP
25368: POP
25369: GO 25329
25371: POP
25372: POP
// end ;
25373: PPOPN 3
25375: END
// every 0 0$1 trigger s30 do var i , tmp ;
25376: LD_EXP 88
25380: IFFALSE 25449
25382: GO 25384
25384: DISABLE
25385: LD_INT 0
25387: PPUSH
25388: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25389: LD_ADDR_VAR 0 2
25393: PUSH
25394: LD_INT 22
25396: PUSH
25397: LD_OWVAR 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 69
25410: ST_TO_ADDR
// if not tmp then
25411: LD_VAR 0 2
25415: NOT
25416: IFFALSE 25420
// exit ;
25418: GO 25449
// for i in tmp do
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: LD_VAR 0 2
25429: PUSH
25430: FOR_IN
25431: IFFALSE 25447
// SetLives ( i , 300 ) ;
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_INT 300
25440: PPUSH
25441: CALL_OW 234
25445: GO 25430
25447: POP
25448: POP
// end ;
25449: PPOPN 2
25451: END
// every 0 0$1 trigger s60 do var i , tmp ;
25452: LD_EXP 89
25456: IFFALSE 25525
25458: GO 25460
25460: DISABLE
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25465: LD_ADDR_VAR 0 2
25469: PUSH
25470: LD_INT 22
25472: PUSH
25473: LD_OWVAR 2
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PPUSH
25482: CALL_OW 69
25486: ST_TO_ADDR
// if not tmp then
25487: LD_VAR 0 2
25491: NOT
25492: IFFALSE 25496
// exit ;
25494: GO 25525
// for i in tmp do
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: LD_VAR 0 2
25505: PUSH
25506: FOR_IN
25507: IFFALSE 25523
// SetLives ( i , 600 ) ;
25509: LD_VAR 0 1
25513: PPUSH
25514: LD_INT 600
25516: PPUSH
25517: CALL_OW 234
25521: GO 25506
25523: POP
25524: POP
// end ;
25525: PPOPN 2
25527: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25528: LD_INT 0
25530: PPUSH
// case cmd of 301 :
25531: LD_VAR 0 1
25535: PUSH
25536: LD_INT 301
25538: DOUBLE
25539: EQUAL
25540: IFTRUE 25544
25542: GO 25576
25544: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25545: LD_VAR 0 6
25549: PPUSH
25550: LD_VAR 0 7
25554: PPUSH
25555: LD_VAR 0 8
25559: PPUSH
25560: LD_VAR 0 4
25564: PPUSH
25565: LD_VAR 0 5
25569: PPUSH
25570: CALL 26785 0 5
25574: GO 25697
25576: LD_INT 302
25578: DOUBLE
25579: EQUAL
25580: IFTRUE 25584
25582: GO 25621
25584: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25585: LD_VAR 0 6
25589: PPUSH
25590: LD_VAR 0 7
25594: PPUSH
25595: LD_VAR 0 8
25599: PPUSH
25600: LD_VAR 0 9
25604: PPUSH
25605: LD_VAR 0 4
25609: PPUSH
25610: LD_VAR 0 5
25614: PPUSH
25615: CALL 26876 0 6
25619: GO 25697
25621: LD_INT 303
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25666
25629: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25630: LD_VAR 0 6
25634: PPUSH
25635: LD_VAR 0 7
25639: PPUSH
25640: LD_VAR 0 8
25644: PPUSH
25645: LD_VAR 0 9
25649: PPUSH
25650: LD_VAR 0 4
25654: PPUSH
25655: LD_VAR 0 5
25659: PPUSH
25660: CALL 25702 0 6
25664: GO 25697
25666: LD_INT 304
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25696
25674: POP
// hHackTeleport ( unit , x , y ) ; end ;
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 4
25684: PPUSH
25685: LD_VAR 0 5
25689: PPUSH
25690: CALL 27469 0 3
25694: GO 25697
25696: POP
// end ;
25697: LD_VAR 0 12
25701: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25706: LD_VAR 0 1
25710: PUSH
25711: LD_INT 1
25713: LESS
25714: PUSH
25715: LD_VAR 0 1
25719: PUSH
25720: LD_INT 3
25722: GREATER
25723: OR
25724: PUSH
25725: LD_VAR 0 5
25729: PPUSH
25730: LD_VAR 0 6
25734: PPUSH
25735: CALL_OW 428
25739: OR
25740: IFFALSE 25744
// exit ;
25742: GO 26472
// uc_side := your_side ;
25744: LD_ADDR_OWVAR 20
25748: PUSH
25749: LD_OWVAR 2
25753: ST_TO_ADDR
// uc_nation := nation ;
25754: LD_ADDR_OWVAR 21
25758: PUSH
25759: LD_VAR 0 1
25763: ST_TO_ADDR
// bc_level = 1 ;
25764: LD_ADDR_OWVAR 43
25768: PUSH
25769: LD_INT 1
25771: ST_TO_ADDR
// case btype of 1 :
25772: LD_VAR 0 2
25776: PUSH
25777: LD_INT 1
25779: DOUBLE
25780: EQUAL
25781: IFTRUE 25785
25783: GO 25796
25785: POP
// bc_type := b_depot ; 2 :
25786: LD_ADDR_OWVAR 42
25790: PUSH
25791: LD_INT 0
25793: ST_TO_ADDR
25794: GO 26416
25796: LD_INT 2
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25815
25804: POP
// bc_type := b_warehouse ; 3 :
25805: LD_ADDR_OWVAR 42
25809: PUSH
25810: LD_INT 1
25812: ST_TO_ADDR
25813: GO 26416
25815: LD_INT 3
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25834
25823: POP
// bc_type := b_lab ; 4 .. 9 :
25824: LD_ADDR_OWVAR 42
25828: PUSH
25829: LD_INT 6
25831: ST_TO_ADDR
25832: GO 26416
25834: LD_INT 4
25836: DOUBLE
25837: GREATEREQUAL
25838: IFFALSE 25846
25840: LD_INT 9
25842: DOUBLE
25843: LESSEQUAL
25844: IFTRUE 25848
25846: GO 25908
25848: POP
// begin bc_type := b_lab_half ;
25849: LD_ADDR_OWVAR 42
25853: PUSH
25854: LD_INT 7
25856: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25857: LD_ADDR_OWVAR 44
25861: PUSH
25862: LD_INT 10
25864: PUSH
25865: LD_INT 11
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: LD_INT 15
25873: PUSH
25874: LD_INT 14
25876: PUSH
25877: LD_INT 13
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PUSH
25888: LD_VAR 0 2
25892: PUSH
25893: LD_INT 3
25895: MINUS
25896: ARRAY
25897: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25898: LD_ADDR_OWVAR 45
25902: PUSH
25903: LD_INT 9
25905: ST_TO_ADDR
// end ; 10 .. 13 :
25906: GO 26416
25908: LD_INT 10
25910: DOUBLE
25911: GREATEREQUAL
25912: IFFALSE 25920
25914: LD_INT 13
25916: DOUBLE
25917: LESSEQUAL
25918: IFTRUE 25922
25920: GO 25999
25922: POP
// begin bc_type := b_lab_full ;
25923: LD_ADDR_OWVAR 42
25927: PUSH
25928: LD_INT 8
25930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25931: LD_ADDR_OWVAR 44
25935: PUSH
25936: LD_INT 10
25938: PUSH
25939: LD_INT 12
25941: PUSH
25942: LD_INT 14
25944: PUSH
25945: LD_INT 13
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PUSH
25954: LD_VAR 0 2
25958: PUSH
25959: LD_INT 9
25961: MINUS
25962: ARRAY
25963: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25964: LD_ADDR_OWVAR 45
25968: PUSH
25969: LD_INT 11
25971: PUSH
25972: LD_INT 15
25974: PUSH
25975: LD_INT 12
25977: PUSH
25978: LD_INT 15
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: PUSH
25987: LD_VAR 0 2
25991: PUSH
25992: LD_INT 9
25994: MINUS
25995: ARRAY
25996: ST_TO_ADDR
// end ; 14 :
25997: GO 26416
25999: LD_INT 14
26001: DOUBLE
26002: EQUAL
26003: IFTRUE 26007
26005: GO 26018
26007: POP
// bc_type := b_workshop ; 15 :
26008: LD_ADDR_OWVAR 42
26012: PUSH
26013: LD_INT 2
26015: ST_TO_ADDR
26016: GO 26416
26018: LD_INT 15
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26037
26026: POP
// bc_type := b_factory ; 16 :
26027: LD_ADDR_OWVAR 42
26031: PUSH
26032: LD_INT 3
26034: ST_TO_ADDR
26035: GO 26416
26037: LD_INT 16
26039: DOUBLE
26040: EQUAL
26041: IFTRUE 26045
26043: GO 26056
26045: POP
// bc_type := b_ext_gun ; 17 :
26046: LD_ADDR_OWVAR 42
26050: PUSH
26051: LD_INT 17
26053: ST_TO_ADDR
26054: GO 26416
26056: LD_INT 17
26058: DOUBLE
26059: EQUAL
26060: IFTRUE 26064
26062: GO 26092
26064: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26065: LD_ADDR_OWVAR 42
26069: PUSH
26070: LD_INT 19
26072: PUSH
26073: LD_INT 23
26075: PUSH
26076: LD_INT 19
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: PUSH
26084: LD_VAR 0 1
26088: ARRAY
26089: ST_TO_ADDR
26090: GO 26416
26092: LD_INT 18
26094: DOUBLE
26095: EQUAL
26096: IFTRUE 26100
26098: GO 26111
26100: POP
// bc_type := b_ext_radar ; 19 :
26101: LD_ADDR_OWVAR 42
26105: PUSH
26106: LD_INT 20
26108: ST_TO_ADDR
26109: GO 26416
26111: LD_INT 19
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26119
26117: GO 26130
26119: POP
// bc_type := b_ext_radio ; 20 :
26120: LD_ADDR_OWVAR 42
26124: PUSH
26125: LD_INT 22
26127: ST_TO_ADDR
26128: GO 26416
26130: LD_INT 20
26132: DOUBLE
26133: EQUAL
26134: IFTRUE 26138
26136: GO 26149
26138: POP
// bc_type := b_ext_siberium ; 21 :
26139: LD_ADDR_OWVAR 42
26143: PUSH
26144: LD_INT 21
26146: ST_TO_ADDR
26147: GO 26416
26149: LD_INT 21
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26168
26157: POP
// bc_type := b_ext_computer ; 22 :
26158: LD_ADDR_OWVAR 42
26162: PUSH
26163: LD_INT 24
26165: ST_TO_ADDR
26166: GO 26416
26168: LD_INT 22
26170: DOUBLE
26171: EQUAL
26172: IFTRUE 26176
26174: GO 26187
26176: POP
// bc_type := b_ext_track ; 23 :
26177: LD_ADDR_OWVAR 42
26181: PUSH
26182: LD_INT 16
26184: ST_TO_ADDR
26185: GO 26416
26187: LD_INT 23
26189: DOUBLE
26190: EQUAL
26191: IFTRUE 26195
26193: GO 26206
26195: POP
// bc_type := b_ext_laser ; 24 :
26196: LD_ADDR_OWVAR 42
26200: PUSH
26201: LD_INT 25
26203: ST_TO_ADDR
26204: GO 26416
26206: LD_INT 24
26208: DOUBLE
26209: EQUAL
26210: IFTRUE 26214
26212: GO 26225
26214: POP
// bc_type := b_control_tower ; 25 :
26215: LD_ADDR_OWVAR 42
26219: PUSH
26220: LD_INT 36
26222: ST_TO_ADDR
26223: GO 26416
26225: LD_INT 25
26227: DOUBLE
26228: EQUAL
26229: IFTRUE 26233
26231: GO 26244
26233: POP
// bc_type := b_breastwork ; 26 :
26234: LD_ADDR_OWVAR 42
26238: PUSH
26239: LD_INT 31
26241: ST_TO_ADDR
26242: GO 26416
26244: LD_INT 26
26246: DOUBLE
26247: EQUAL
26248: IFTRUE 26252
26250: GO 26263
26252: POP
// bc_type := b_bunker ; 27 :
26253: LD_ADDR_OWVAR 42
26257: PUSH
26258: LD_INT 32
26260: ST_TO_ADDR
26261: GO 26416
26263: LD_INT 27
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26271
26269: GO 26282
26271: POP
// bc_type := b_turret ; 28 :
26272: LD_ADDR_OWVAR 42
26276: PUSH
26277: LD_INT 33
26279: ST_TO_ADDR
26280: GO 26416
26282: LD_INT 28
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26290
26288: GO 26301
26290: POP
// bc_type := b_armoury ; 29 :
26291: LD_ADDR_OWVAR 42
26295: PUSH
26296: LD_INT 4
26298: ST_TO_ADDR
26299: GO 26416
26301: LD_INT 29
26303: DOUBLE
26304: EQUAL
26305: IFTRUE 26309
26307: GO 26320
26309: POP
// bc_type := b_barracks ; 30 :
26310: LD_ADDR_OWVAR 42
26314: PUSH
26315: LD_INT 5
26317: ST_TO_ADDR
26318: GO 26416
26320: LD_INT 30
26322: DOUBLE
26323: EQUAL
26324: IFTRUE 26328
26326: GO 26339
26328: POP
// bc_type := b_solar_power ; 31 :
26329: LD_ADDR_OWVAR 42
26333: PUSH
26334: LD_INT 27
26336: ST_TO_ADDR
26337: GO 26416
26339: LD_INT 31
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26358
26347: POP
// bc_type := b_oil_power ; 32 :
26348: LD_ADDR_OWVAR 42
26352: PUSH
26353: LD_INT 26
26355: ST_TO_ADDR
26356: GO 26416
26358: LD_INT 32
26360: DOUBLE
26361: EQUAL
26362: IFTRUE 26366
26364: GO 26377
26366: POP
// bc_type := b_siberite_power ; 33 :
26367: LD_ADDR_OWVAR 42
26371: PUSH
26372: LD_INT 28
26374: ST_TO_ADDR
26375: GO 26416
26377: LD_INT 33
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26396
26385: POP
// bc_type := b_oil_mine ; 34 :
26386: LD_ADDR_OWVAR 42
26390: PUSH
26391: LD_INT 29
26393: ST_TO_ADDR
26394: GO 26416
26396: LD_INT 34
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26415
26404: POP
// bc_type := b_siberite_mine ; end ;
26405: LD_ADDR_OWVAR 42
26409: PUSH
26410: LD_INT 30
26412: ST_TO_ADDR
26413: GO 26416
26415: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26416: LD_ADDR_VAR 0 8
26420: PUSH
26421: LD_VAR 0 5
26425: PPUSH
26426: LD_VAR 0 6
26430: PPUSH
26431: LD_VAR 0 3
26435: PPUSH
26436: CALL_OW 47
26440: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26441: LD_OWVAR 42
26445: PUSH
26446: LD_INT 32
26448: PUSH
26449: LD_INT 33
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: IN
26456: IFFALSE 26472
// PlaceWeaponTurret ( b , weapon ) ;
26458: LD_VAR 0 8
26462: PPUSH
26463: LD_VAR 0 4
26467: PPUSH
26468: CALL_OW 431
// end ;
26472: LD_VAR 0 7
26476: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26477: LD_INT 0
26479: PPUSH
26480: PPUSH
26481: PPUSH
26482: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_OWVAR 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 30
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 30
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL_OW 69
26536: ST_TO_ADDR
// if not tmp then
26537: LD_VAR 0 4
26541: NOT
26542: IFFALSE 26546
// exit ;
26544: GO 26605
// for i in tmp do
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_VAR 0 4
26555: PUSH
26556: FOR_IN
26557: IFFALSE 26603
// for j = 1 to 3 do
26559: LD_ADDR_VAR 0 3
26563: PUSH
26564: DOUBLE
26565: LD_INT 1
26567: DEC
26568: ST_TO_ADDR
26569: LD_INT 3
26571: PUSH
26572: FOR_TO
26573: IFFALSE 26599
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26575: LD_VAR 0 2
26579: PPUSH
26580: CALL_OW 274
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: LD_INT 99999
26592: PPUSH
26593: CALL_OW 277
26597: GO 26572
26599: POP
26600: POP
26601: GO 26556
26603: POP
26604: POP
// end ;
26605: LD_VAR 0 1
26609: RET
// export function hHackSetLevel10 ; var i , j ; begin
26610: LD_INT 0
26612: PPUSH
26613: PPUSH
26614: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_INT 21
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PPUSH
26630: CALL_OW 69
26634: PUSH
26635: FOR_IN
26636: IFFALSE 26688
// if IsSelected ( i ) then
26638: LD_VAR 0 2
26642: PPUSH
26643: CALL_OW 306
26647: IFFALSE 26686
// begin for j := 1 to 4 do
26649: LD_ADDR_VAR 0 3
26653: PUSH
26654: DOUBLE
26655: LD_INT 1
26657: DEC
26658: ST_TO_ADDR
26659: LD_INT 4
26661: PUSH
26662: FOR_TO
26663: IFFALSE 26684
// SetSkill ( i , j , 10 ) ;
26665: LD_VAR 0 2
26669: PPUSH
26670: LD_VAR 0 3
26674: PPUSH
26675: LD_INT 10
26677: PPUSH
26678: CALL_OW 237
26682: GO 26662
26684: POP
26685: POP
// end ;
26686: GO 26635
26688: POP
26689: POP
// end ;
26690: LD_VAR 0 1
26694: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26700: LD_ADDR_VAR 0 2
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 21
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: PUSH
26736: FOR_IN
26737: IFFALSE 26778
// begin for j := 1 to 4 do
26739: LD_ADDR_VAR 0 3
26743: PUSH
26744: DOUBLE
26745: LD_INT 1
26747: DEC
26748: ST_TO_ADDR
26749: LD_INT 4
26751: PUSH
26752: FOR_TO
26753: IFFALSE 26774
// SetSkill ( i , j , 10 ) ;
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: LD_INT 10
26767: PPUSH
26768: CALL_OW 237
26772: GO 26752
26774: POP
26775: POP
// end ;
26776: GO 26736
26778: POP
26779: POP
// end ;
26780: LD_VAR 0 1
26784: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26785: LD_INT 0
26787: PPUSH
// uc_side := your_side ;
26788: LD_ADDR_OWVAR 20
26792: PUSH
26793: LD_OWVAR 2
26797: ST_TO_ADDR
// uc_nation := nation ;
26798: LD_ADDR_OWVAR 21
26802: PUSH
26803: LD_VAR 0 1
26807: ST_TO_ADDR
// InitHc ;
26808: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26812: LD_INT 0
26814: PPUSH
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_VAR 0 3
26824: PPUSH
26825: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26829: LD_VAR 0 4
26833: PPUSH
26834: LD_VAR 0 5
26838: PPUSH
26839: CALL_OW 428
26843: PUSH
26844: LD_INT 0
26846: EQUAL
26847: IFFALSE 26871
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26849: CALL_OW 44
26853: PPUSH
26854: LD_VAR 0 4
26858: PPUSH
26859: LD_VAR 0 5
26863: PPUSH
26864: LD_INT 1
26866: PPUSH
26867: CALL_OW 48
// end ;
26871: LD_VAR 0 6
26875: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
// uc_side := your_side ;
26880: LD_ADDR_OWVAR 20
26884: PUSH
26885: LD_OWVAR 2
26889: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26890: LD_VAR 0 1
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 4
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: IN
26917: IFFALSE 26929
// uc_nation := nation_american else
26919: LD_ADDR_OWVAR 21
26923: PUSH
26924: LD_INT 1
26926: ST_TO_ADDR
26927: GO 26972
// if chassis in [ 11 , 12 , 13 , 14 ] then
26929: LD_VAR 0 1
26933: PUSH
26934: LD_INT 11
26936: PUSH
26937: LD_INT 12
26939: PUSH
26940: LD_INT 13
26942: PUSH
26943: LD_INT 14
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: IN
26952: IFFALSE 26964
// uc_nation := nation_arabian else
26954: LD_ADDR_OWVAR 21
26958: PUSH
26959: LD_INT 2
26961: ST_TO_ADDR
26962: GO 26972
// uc_nation := nation_russian ;
26964: LD_ADDR_OWVAR 21
26968: PUSH
26969: LD_INT 3
26971: ST_TO_ADDR
// vc_chassis := chassis ;
26972: LD_ADDR_OWVAR 37
26976: PUSH
26977: LD_VAR 0 1
26981: ST_TO_ADDR
// vc_engine := engine ;
26982: LD_ADDR_OWVAR 39
26986: PUSH
26987: LD_VAR 0 2
26991: ST_TO_ADDR
// vc_control := control ;
26992: LD_ADDR_OWVAR 38
26996: PUSH
26997: LD_VAR 0 3
27001: ST_TO_ADDR
// vc_weapon := weapon ;
27002: LD_ADDR_OWVAR 40
27006: PUSH
27007: LD_VAR 0 4
27011: ST_TO_ADDR
// un := CreateVehicle ;
27012: LD_ADDR_VAR 0 8
27016: PUSH
27017: CALL_OW 45
27021: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27022: LD_VAR 0 8
27026: PPUSH
27027: LD_INT 0
27029: PPUSH
27030: LD_INT 5
27032: PPUSH
27033: CALL_OW 12
27037: PPUSH
27038: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27042: LD_VAR 0 8
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: LD_VAR 0 6
27056: PPUSH
27057: LD_INT 1
27059: PPUSH
27060: CALL_OW 48
// end ;
27064: LD_VAR 0 7
27068: RET
// export hInvincible ; every 1 do
27069: GO 27071
27071: DISABLE
// hInvincible := [ ] ;
27072: LD_ADDR_EXP 90
27076: PUSH
27077: EMPTY
27078: ST_TO_ADDR
27079: END
// every 10 do var i ;
27080: GO 27082
27082: DISABLE
27083: LD_INT 0
27085: PPUSH
// begin enable ;
27086: ENABLE
// if not hInvincible then
27087: LD_EXP 90
27091: NOT
27092: IFFALSE 27096
// exit ;
27094: GO 27140
// for i in hInvincible do
27096: LD_ADDR_VAR 0 1
27100: PUSH
27101: LD_EXP 90
27105: PUSH
27106: FOR_IN
27107: IFFALSE 27138
// if GetLives ( i ) < 1000 then
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 256
27118: PUSH
27119: LD_INT 1000
27121: LESS
27122: IFFALSE 27136
// SetLives ( i , 1000 ) ;
27124: LD_VAR 0 1
27128: PPUSH
27129: LD_INT 1000
27131: PPUSH
27132: CALL_OW 234
27136: GO 27106
27138: POP
27139: POP
// end ;
27140: PPOPN 1
27142: END
// export function hHackInvincible ; var i ; begin
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27147: LD_ADDR_VAR 0 2
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 21
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: PUSH
27185: FOR_IN
27186: IFFALSE 27247
// if IsSelected ( i ) then
27188: LD_VAR 0 2
27192: PPUSH
27193: CALL_OW 306
27197: IFFALSE 27245
// begin if i in hInvincible then
27199: LD_VAR 0 2
27203: PUSH
27204: LD_EXP 90
27208: IN
27209: IFFALSE 27229
// hInvincible := hInvincible diff i else
27211: LD_ADDR_EXP 90
27215: PUSH
27216: LD_EXP 90
27220: PUSH
27221: LD_VAR 0 2
27225: DIFF
27226: ST_TO_ADDR
27227: GO 27245
// hInvincible := hInvincible union i ;
27229: LD_ADDR_EXP 90
27233: PUSH
27234: LD_EXP 90
27238: PUSH
27239: LD_VAR 0 2
27243: UNION
27244: ST_TO_ADDR
// end ;
27245: GO 27185
27247: POP
27248: POP
// end ;
27249: LD_VAR 0 1
27253: RET
// export function hHackInvisible ; var i , j ; begin
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27259: LD_ADDR_VAR 0 2
27263: PUSH
27264: LD_INT 21
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PPUSH
27274: CALL_OW 69
27278: PUSH
27279: FOR_IN
27280: IFFALSE 27304
// if IsSelected ( i ) then
27282: LD_VAR 0 2
27286: PPUSH
27287: CALL_OW 306
27291: IFFALSE 27302
// ComForceInvisible ( i ) ;
27293: LD_VAR 0 2
27297: PPUSH
27298: CALL_OW 496
27302: GO 27279
27304: POP
27305: POP
// end ;
27306: LD_VAR 0 1
27310: RET
// export function hHackChangeYourSide ; begin
27311: LD_INT 0
27313: PPUSH
// if your_side = 8 then
27314: LD_OWVAR 2
27318: PUSH
27319: LD_INT 8
27321: EQUAL
27322: IFFALSE 27334
// your_side := 0 else
27324: LD_ADDR_OWVAR 2
27328: PUSH
27329: LD_INT 0
27331: ST_TO_ADDR
27332: GO 27348
// your_side := your_side + 1 ;
27334: LD_ADDR_OWVAR 2
27338: PUSH
27339: LD_OWVAR 2
27343: PUSH
27344: LD_INT 1
27346: PLUS
27347: ST_TO_ADDR
// end ;
27348: LD_VAR 0 1
27352: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
// for i in all_units do
27358: LD_ADDR_VAR 0 2
27362: PUSH
27363: LD_OWVAR 3
27367: PUSH
27368: FOR_IN
27369: IFFALSE 27447
// if IsSelected ( i ) then
27371: LD_VAR 0 2
27375: PPUSH
27376: CALL_OW 306
27380: IFFALSE 27445
// begin j := GetSide ( i ) ;
27382: LD_ADDR_VAR 0 3
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: CALL_OW 255
27396: ST_TO_ADDR
// if j = 8 then
27397: LD_VAR 0 3
27401: PUSH
27402: LD_INT 8
27404: EQUAL
27405: IFFALSE 27417
// j := 0 else
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: LD_INT 0
27414: ST_TO_ADDR
27415: GO 27431
// j := j + 1 ;
27417: LD_ADDR_VAR 0 3
27421: PUSH
27422: LD_VAR 0 3
27426: PUSH
27427: LD_INT 1
27429: PLUS
27430: ST_TO_ADDR
// SetSide ( i , j ) ;
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: CALL_OW 235
// end ;
27445: GO 27368
27447: POP
27448: POP
// end ;
27449: LD_VAR 0 1
27453: RET
// export function hHackFog ; begin
27454: LD_INT 0
27456: PPUSH
// FogOff ( true ) ;
27457: LD_INT 1
27459: PPUSH
27460: CALL_OW 344
// end ;
27464: LD_VAR 0 1
27468: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27469: LD_INT 0
27471: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27472: LD_VAR 0 1
27476: PPUSH
27477: LD_VAR 0 2
27481: PPUSH
27482: LD_VAR 0 3
27486: PPUSH
27487: LD_INT 1
27489: PPUSH
27490: LD_INT 1
27492: PPUSH
27493: CALL_OW 483
// CenterOnXY ( x , y ) ;
27497: LD_VAR 0 2
27501: PPUSH
27502: LD_VAR 0 3
27506: PPUSH
27507: CALL_OW 84
// end ;
27511: LD_VAR 0 4
27515: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27516: LD_INT 0
27518: PPUSH
27519: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27520: LD_VAR 0 1
27524: NOT
27525: PUSH
27526: LD_VAR 0 2
27530: PPUSH
27531: LD_VAR 0 3
27535: PPUSH
27536: CALL_OW 488
27540: NOT
27541: OR
27542: PUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 266
27552: PUSH
27553: LD_INT 3
27555: NONEQUAL
27556: PUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 247
27566: PUSH
27567: LD_INT 1
27569: EQUAL
27570: NOT
27571: AND
27572: OR
27573: IFFALSE 27577
// exit ;
27575: GO 27726
// if GetType ( factory ) = unit_human then
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 247
27586: PUSH
27587: LD_INT 1
27589: EQUAL
27590: IFFALSE 27607
// factory := IsInUnit ( factory ) ;
27592: LD_ADDR_VAR 0 1
27596: PUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 310
27606: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27607: LD_VAR 0 1
27611: PPUSH
27612: CALL_OW 266
27616: PUSH
27617: LD_INT 3
27619: NONEQUAL
27620: IFFALSE 27624
// exit ;
27622: GO 27726
// if HexInfo ( x , y ) = factory then
27624: LD_VAR 0 2
27628: PPUSH
27629: LD_VAR 0 3
27633: PPUSH
27634: CALL_OW 428
27638: PUSH
27639: LD_VAR 0 1
27643: EQUAL
27644: IFFALSE 27671
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27646: LD_ADDR_EXP 91
27650: PUSH
27651: LD_EXP 91
27655: PPUSH
27656: LD_VAR 0 1
27660: PPUSH
27661: LD_INT 0
27663: PPUSH
27664: CALL_OW 1
27668: ST_TO_ADDR
27669: GO 27722
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27671: LD_ADDR_EXP 91
27675: PUSH
27676: LD_EXP 91
27680: PPUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 255
27695: PUSH
27696: LD_VAR 0 1
27700: PUSH
27701: LD_VAR 0 2
27705: PUSH
27706: LD_VAR 0 3
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: PPUSH
27717: CALL_OW 1
27721: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27722: CALL 27731 0 0
// end ;
27726: LD_VAR 0 4
27730: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27731: LD_INT 0
27733: PPUSH
27734: PPUSH
27735: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27736: LD_STRING resetFactoryWaypoint();
27738: PPUSH
27739: CALL_OW 559
// if factoryWaypoints then
27743: LD_EXP 91
27747: IFFALSE 27873
// begin list := PrepareArray ( factoryWaypoints ) ;
27749: LD_ADDR_VAR 0 3
27753: PUSH
27754: LD_EXP 91
27758: PPUSH
27759: CALL 75181 0 1
27763: ST_TO_ADDR
// for i := 1 to list do
27764: LD_ADDR_VAR 0 2
27768: PUSH
27769: DOUBLE
27770: LD_INT 1
27772: DEC
27773: ST_TO_ADDR
27774: LD_VAR 0 3
27778: PUSH
27779: FOR_TO
27780: IFFALSE 27871
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27782: LD_STRING setFactoryWaypointXY(
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_VAR 0 2
27794: ARRAY
27795: PUSH
27796: LD_INT 1
27798: ARRAY
27799: STR
27800: PUSH
27801: LD_STRING ,
27803: STR
27804: PUSH
27805: LD_VAR 0 3
27809: PUSH
27810: LD_VAR 0 2
27814: ARRAY
27815: PUSH
27816: LD_INT 2
27818: ARRAY
27819: STR
27820: PUSH
27821: LD_STRING ,
27823: STR
27824: PUSH
27825: LD_VAR 0 3
27829: PUSH
27830: LD_VAR 0 2
27834: ARRAY
27835: PUSH
27836: LD_INT 3
27838: ARRAY
27839: STR
27840: PUSH
27841: LD_STRING ,
27843: STR
27844: PUSH
27845: LD_VAR 0 3
27849: PUSH
27850: LD_VAR 0 2
27854: ARRAY
27855: PUSH
27856: LD_INT 4
27858: ARRAY
27859: STR
27860: PUSH
27861: LD_STRING )
27863: STR
27864: PPUSH
27865: CALL_OW 559
27869: GO 27779
27871: POP
27872: POP
// end ; end ;
27873: LD_VAR 0 1
27877: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27878: LD_INT 0
27880: PPUSH
// if HexInfo ( x , y ) = warehouse then
27881: LD_VAR 0 2
27885: PPUSH
27886: LD_VAR 0 3
27890: PPUSH
27891: CALL_OW 428
27895: PUSH
27896: LD_VAR 0 1
27900: EQUAL
27901: IFFALSE 27928
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27903: LD_ADDR_EXP 92
27907: PUSH
27908: LD_EXP 92
27912: PPUSH
27913: LD_VAR 0 1
27917: PPUSH
27918: LD_INT 0
27920: PPUSH
27921: CALL_OW 1
27925: ST_TO_ADDR
27926: GO 27979
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27928: LD_ADDR_EXP 92
27932: PUSH
27933: LD_EXP 92
27937: PPUSH
27938: LD_VAR 0 1
27942: PPUSH
27943: LD_VAR 0 1
27947: PPUSH
27948: CALL_OW 255
27952: PUSH
27953: LD_VAR 0 1
27957: PUSH
27958: LD_VAR 0 2
27962: PUSH
27963: LD_VAR 0 3
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 1
27978: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27979: CALL 27988 0 0
// end ;
27983: LD_VAR 0 4
27987: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27988: LD_INT 0
27990: PPUSH
27991: PPUSH
27992: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27993: LD_STRING resetWarehouseGatheringPoints();
27995: PPUSH
27996: CALL_OW 559
// if warehouseGatheringPoints then
28000: LD_EXP 92
28004: IFFALSE 28130
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_EXP 92
28015: PPUSH
28016: CALL 75181 0 1
28020: ST_TO_ADDR
// for i := 1 to list do
28021: LD_ADDR_VAR 0 2
28025: PUSH
28026: DOUBLE
28027: LD_INT 1
28029: DEC
28030: ST_TO_ADDR
28031: LD_VAR 0 3
28035: PUSH
28036: FOR_TO
28037: IFFALSE 28128
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28039: LD_STRING setWarehouseGatheringPointXY(
28041: PUSH
28042: LD_VAR 0 3
28046: PUSH
28047: LD_VAR 0 2
28051: ARRAY
28052: PUSH
28053: LD_INT 1
28055: ARRAY
28056: STR
28057: PUSH
28058: LD_STRING ,
28060: STR
28061: PUSH
28062: LD_VAR 0 3
28066: PUSH
28067: LD_VAR 0 2
28071: ARRAY
28072: PUSH
28073: LD_INT 2
28075: ARRAY
28076: STR
28077: PUSH
28078: LD_STRING ,
28080: STR
28081: PUSH
28082: LD_VAR 0 3
28086: PUSH
28087: LD_VAR 0 2
28091: ARRAY
28092: PUSH
28093: LD_INT 3
28095: ARRAY
28096: STR
28097: PUSH
28098: LD_STRING ,
28100: STR
28101: PUSH
28102: LD_VAR 0 3
28106: PUSH
28107: LD_VAR 0 2
28111: ARRAY
28112: PUSH
28113: LD_INT 4
28115: ARRAY
28116: STR
28117: PUSH
28118: LD_STRING )
28120: STR
28121: PPUSH
28122: CALL_OW 559
28126: GO 28036
28128: POP
28129: POP
// end ; end ;
28130: LD_VAR 0 1
28134: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28135: LD_EXP 92
28139: IFFALSE 28824
28141: GO 28143
28143: DISABLE
28144: LD_INT 0
28146: PPUSH
28147: PPUSH
28148: PPUSH
28149: PPUSH
28150: PPUSH
28151: PPUSH
28152: PPUSH
28153: PPUSH
28154: PPUSH
// begin enable ;
28155: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28156: LD_ADDR_VAR 0 3
28160: PUSH
28161: LD_EXP 92
28165: PPUSH
28166: CALL 75181 0 1
28170: ST_TO_ADDR
// if not list then
28171: LD_VAR 0 3
28175: NOT
28176: IFFALSE 28180
// exit ;
28178: GO 28824
// for i := 1 to list do
28180: LD_ADDR_VAR 0 1
28184: PUSH
28185: DOUBLE
28186: LD_INT 1
28188: DEC
28189: ST_TO_ADDR
28190: LD_VAR 0 3
28194: PUSH
28195: FOR_TO
28196: IFFALSE 28822
// begin depot := list [ i ] [ 2 ] ;
28198: LD_ADDR_VAR 0 8
28202: PUSH
28203: LD_VAR 0 3
28207: PUSH
28208: LD_VAR 0 1
28212: ARRAY
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_VAR 0 3
28227: PUSH
28228: LD_VAR 0 1
28232: ARRAY
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28238: LD_VAR 0 8
28242: PPUSH
28243: CALL_OW 301
28247: PUSH
28248: LD_VAR 0 5
28252: PUSH
28253: LD_VAR 0 8
28257: PPUSH
28258: CALL_OW 255
28262: NONEQUAL
28263: OR
28264: IFFALSE 28293
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28266: LD_ADDR_EXP 92
28270: PUSH
28271: LD_EXP 92
28275: PPUSH
28276: LD_VAR 0 8
28280: PPUSH
28281: LD_INT 0
28283: PPUSH
28284: CALL_OW 1
28288: ST_TO_ADDR
// exit ;
28289: POP
28290: POP
28291: GO 28824
// end ; x := list [ i ] [ 3 ] ;
28293: LD_ADDR_VAR 0 6
28297: PUSH
28298: LD_VAR 0 3
28302: PUSH
28303: LD_VAR 0 1
28307: ARRAY
28308: PUSH
28309: LD_INT 3
28311: ARRAY
28312: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28313: LD_ADDR_VAR 0 7
28317: PUSH
28318: LD_VAR 0 3
28322: PUSH
28323: LD_VAR 0 1
28327: ARRAY
28328: PUSH
28329: LD_INT 4
28331: ARRAY
28332: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28333: LD_ADDR_VAR 0 9
28337: PUSH
28338: LD_VAR 0 6
28342: PPUSH
28343: LD_VAR 0 7
28347: PPUSH
28348: LD_INT 16
28350: PPUSH
28351: CALL 73769 0 3
28355: ST_TO_ADDR
// if not cratesNearbyPoint then
28356: LD_VAR 0 9
28360: NOT
28361: IFFALSE 28367
// exit ;
28363: POP
28364: POP
28365: GO 28824
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28367: LD_ADDR_VAR 0 4
28371: PUSH
28372: LD_INT 22
28374: PUSH
28375: LD_VAR 0 5
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 60
28389: PUSH
28390: EMPTY
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 91
28399: PUSH
28400: LD_VAR 0 8
28404: PUSH
28405: LD_INT 6
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 25
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 25
28428: PUSH
28429: LD_INT 16
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: PUSH
28452: LD_VAR 0 8
28456: PPUSH
28457: CALL_OW 313
28461: PPUSH
28462: LD_INT 3
28464: PUSH
28465: LD_INT 60
28467: PUSH
28468: EMPTY
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 25
28490: PUSH
28491: LD_INT 16
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PPUSH
28507: CALL_OW 72
28511: UNION
28512: ST_TO_ADDR
// if tmp then
28513: LD_VAR 0 4
28517: IFFALSE 28597
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28519: LD_ADDR_VAR 0 4
28523: PUSH
28524: LD_VAR 0 4
28528: PPUSH
28529: LD_INT 3
28531: PPUSH
28532: CALL 71738 0 2
28536: ST_TO_ADDR
// for j in tmp do
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_VAR 0 4
28546: PUSH
28547: FOR_IN
28548: IFFALSE 28591
// begin if IsInUnit ( j ) then
28550: LD_VAR 0 2
28554: PPUSH
28555: CALL_OW 310
28559: IFFALSE 28570
// ComExit ( j ) ;
28561: LD_VAR 0 2
28565: PPUSH
28566: CALL 71821 0 1
// AddComCollect ( j , x , y ) ;
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 6
28579: PPUSH
28580: LD_VAR 0 7
28584: PPUSH
28585: CALL_OW 177
// end ;
28589: GO 28547
28591: POP
28592: POP
// exit ;
28593: POP
28594: POP
28595: GO 28824
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28597: LD_ADDR_VAR 0 4
28601: PUSH
28602: LD_INT 22
28604: PUSH
28605: LD_VAR 0 5
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 91
28616: PUSH
28617: LD_VAR 0 8
28621: PUSH
28622: LD_INT 8
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 34
28635: PUSH
28636: LD_INT 12
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 34
28645: PUSH
28646: LD_INT 51
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 34
28655: PUSH
28656: LD_INT 32
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 34
28665: PUSH
28666: LD_INT 89
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: PPUSH
28685: CALL_OW 69
28689: ST_TO_ADDR
// if tmp then
28690: LD_VAR 0 4
28694: IFFALSE 28820
// begin for j in tmp do
28696: LD_ADDR_VAR 0 2
28700: PUSH
28701: LD_VAR 0 4
28705: PUSH
28706: FOR_IN
28707: IFFALSE 28818
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28709: LD_VAR 0 2
28713: PPUSH
28714: CALL_OW 262
28718: PUSH
28719: LD_INT 3
28721: EQUAL
28722: PUSH
28723: LD_VAR 0 2
28727: PPUSH
28728: CALL_OW 261
28732: PUSH
28733: LD_INT 20
28735: GREATER
28736: OR
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 314
28747: NOT
28748: AND
28749: PUSH
28750: LD_VAR 0 2
28754: PPUSH
28755: CALL_OW 263
28759: PUSH
28760: LD_INT 1
28762: NONEQUAL
28763: PUSH
28764: LD_VAR 0 2
28768: PPUSH
28769: CALL_OW 311
28773: OR
28774: AND
28775: IFFALSE 28816
// begin ComCollect ( j , x , y ) ;
28777: LD_VAR 0 2
28781: PPUSH
28782: LD_VAR 0 6
28786: PPUSH
28787: LD_VAR 0 7
28791: PPUSH
28792: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28796: LD_VAR 0 2
28800: PPUSH
28801: LD_VAR 0 8
28805: PPUSH
28806: CALL_OW 172
// exit ;
28810: POP
28811: POP
28812: POP
28813: POP
28814: GO 28824
// end ;
28816: GO 28706
28818: POP
28819: POP
// end ; end ;
28820: GO 28195
28822: POP
28823: POP
// end ; end_of_file
28824: PPOPN 9
28826: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28827: LD_INT 0
28829: PPUSH
28830: PPUSH
28831: PPUSH
28832: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28833: LD_VAR 0 1
28837: PPUSH
28838: CALL_OW 264
28842: PUSH
28843: LD_INT 91
28845: EQUAL
28846: IFFALSE 28918
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28848: LD_INT 68
28850: PPUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 255
28860: PPUSH
28861: CALL_OW 321
28865: PUSH
28866: LD_INT 2
28868: EQUAL
28869: IFFALSE 28881
// eff := 70 else
28871: LD_ADDR_VAR 0 4
28875: PUSH
28876: LD_INT 70
28878: ST_TO_ADDR
28879: GO 28889
// eff := 30 ;
28881: LD_ADDR_VAR 0 4
28885: PUSH
28886: LD_INT 30
28888: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28889: LD_VAR 0 1
28893: PPUSH
28894: CALL_OW 250
28898: PPUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL_OW 251
28908: PPUSH
28909: LD_VAR 0 4
28913: PPUSH
28914: CALL_OW 495
// end ; end ;
28918: LD_VAR 0 2
28922: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28923: LD_INT 0
28925: PPUSH
// end ;
28926: LD_VAR 0 4
28930: RET
// export function SOS_Command ( cmd ) ; begin
28931: LD_INT 0
28933: PPUSH
// end ;
28934: LD_VAR 0 2
28938: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28939: LD_INT 0
28941: PPUSH
// end ;
28942: LD_VAR 0 6
28946: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28947: LD_INT 0
28949: PPUSH
28950: PPUSH
// if not vehicle or not factory then
28951: LD_VAR 0 1
28955: NOT
28956: PUSH
28957: LD_VAR 0 2
28961: NOT
28962: OR
28963: IFFALSE 28967
// exit ;
28965: GO 29198
// if factoryWaypoints >= factory then
28967: LD_EXP 91
28971: PUSH
28972: LD_VAR 0 2
28976: GREATEREQUAL
28977: IFFALSE 29198
// if factoryWaypoints [ factory ] then
28979: LD_EXP 91
28983: PUSH
28984: LD_VAR 0 2
28988: ARRAY
28989: IFFALSE 29198
// begin if GetControl ( vehicle ) = control_manual then
28991: LD_VAR 0 1
28995: PPUSH
28996: CALL_OW 263
29000: PUSH
29001: LD_INT 1
29003: EQUAL
29004: IFFALSE 29085
// begin driver := IsDrivenBy ( vehicle ) ;
29006: LD_ADDR_VAR 0 4
29010: PUSH
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 311
29020: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29021: LD_VAR 0 4
29025: PPUSH
29026: LD_EXP 91
29030: PUSH
29031: LD_VAR 0 2
29035: ARRAY
29036: PUSH
29037: LD_INT 3
29039: ARRAY
29040: PPUSH
29041: LD_EXP 91
29045: PUSH
29046: LD_VAR 0 2
29050: ARRAY
29051: PUSH
29052: LD_INT 4
29054: ARRAY
29055: PPUSH
29056: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29069: LD_VAR 0 4
29073: PPUSH
29074: LD_VAR 0 2
29078: PPUSH
29079: CALL_OW 180
// end else
29083: GO 29198
// if GetControl ( vehicle ) = control_remote then
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 263
29094: PUSH
29095: LD_INT 2
29097: EQUAL
29098: IFFALSE 29159
// begin wait ( 0 0$2 ) ;
29100: LD_INT 70
29102: PPUSH
29103: CALL_OW 67
// if Connect ( vehicle ) then
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL 42029 0 1
29116: IFFALSE 29157
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29118: LD_VAR 0 1
29122: PPUSH
29123: LD_EXP 91
29127: PUSH
29128: LD_VAR 0 2
29132: ARRAY
29133: PUSH
29134: LD_INT 3
29136: ARRAY
29137: PPUSH
29138: LD_EXP 91
29142: PUSH
29143: LD_VAR 0 2
29147: ARRAY
29148: PUSH
29149: LD_INT 4
29151: ARRAY
29152: PPUSH
29153: CALL_OW 171
// end else
29157: GO 29198
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29159: LD_VAR 0 1
29163: PPUSH
29164: LD_EXP 91
29168: PUSH
29169: LD_VAR 0 2
29173: ARRAY
29174: PUSH
29175: LD_INT 3
29177: ARRAY
29178: PPUSH
29179: LD_EXP 91
29183: PUSH
29184: LD_VAR 0 2
29188: ARRAY
29189: PUSH
29190: LD_INT 4
29192: ARRAY
29193: PPUSH
29194: CALL_OW 171
// end ; end ;
29198: LD_VAR 0 3
29202: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29203: LD_INT 0
29205: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29206: LD_VAR 0 1
29210: PUSH
29211: LD_INT 250
29213: EQUAL
29214: PUSH
29215: LD_VAR 0 2
29219: PPUSH
29220: CALL_OW 264
29224: PUSH
29225: LD_INT 81
29227: EQUAL
29228: AND
29229: IFFALSE 29250
// MinerPlaceMine ( unit , x , y ) ;
29231: LD_VAR 0 2
29235: PPUSH
29236: LD_VAR 0 4
29240: PPUSH
29241: LD_VAR 0 5
29245: PPUSH
29246: CALL 32240 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29250: LD_VAR 0 1
29254: PUSH
29255: LD_INT 251
29257: EQUAL
29258: PUSH
29259: LD_VAR 0 2
29263: PPUSH
29264: CALL_OW 264
29268: PUSH
29269: LD_INT 81
29271: EQUAL
29272: AND
29273: IFFALSE 29294
// MinerDetonateMine ( unit , x , y ) ;
29275: LD_VAR 0 2
29279: PPUSH
29280: LD_VAR 0 4
29284: PPUSH
29285: LD_VAR 0 5
29289: PPUSH
29290: CALL 32515 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29294: LD_VAR 0 1
29298: PUSH
29299: LD_INT 252
29301: EQUAL
29302: PUSH
29303: LD_VAR 0 2
29307: PPUSH
29308: CALL_OW 264
29312: PUSH
29313: LD_INT 81
29315: EQUAL
29316: AND
29317: IFFALSE 29338
// MinerCreateMinefield ( unit , x , y ) ;
29319: LD_VAR 0 2
29323: PPUSH
29324: LD_VAR 0 4
29328: PPUSH
29329: LD_VAR 0 5
29333: PPUSH
29334: CALL 32932 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29338: LD_VAR 0 1
29342: PUSH
29343: LD_INT 253
29345: EQUAL
29346: PUSH
29347: LD_VAR 0 2
29351: PPUSH
29352: CALL_OW 257
29356: PUSH
29357: LD_INT 5
29359: EQUAL
29360: AND
29361: IFFALSE 29382
// ComBinocular ( unit , x , y ) ;
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_VAR 0 4
29372: PPUSH
29373: LD_VAR 0 5
29377: PPUSH
29378: CALL 33301 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29382: LD_VAR 0 1
29386: PUSH
29387: LD_INT 254
29389: EQUAL
29390: PUSH
29391: LD_VAR 0 2
29395: PPUSH
29396: CALL_OW 264
29400: PUSH
29401: LD_INT 99
29403: EQUAL
29404: AND
29405: PUSH
29406: LD_VAR 0 3
29410: PPUSH
29411: CALL_OW 263
29415: PUSH
29416: LD_INT 3
29418: EQUAL
29419: AND
29420: IFFALSE 29436
// HackDestroyVehicle ( unit , selectedUnit ) ;
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL 31604 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29436: LD_VAR 0 1
29440: PUSH
29441: LD_INT 255
29443: EQUAL
29444: PUSH
29445: LD_VAR 0 2
29449: PPUSH
29450: CALL_OW 264
29454: PUSH
29455: LD_INT 14
29457: PUSH
29458: LD_INT 53
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: IN
29465: AND
29466: PUSH
29467: LD_VAR 0 4
29471: PPUSH
29472: LD_VAR 0 5
29476: PPUSH
29477: CALL_OW 488
29481: AND
29482: IFFALSE 29506
// CutTreeXYR ( unit , x , y , 12 ) ;
29484: LD_VAR 0 2
29488: PPUSH
29489: LD_VAR 0 4
29493: PPUSH
29494: LD_VAR 0 5
29498: PPUSH
29499: LD_INT 12
29501: PPUSH
29502: CALL 29601 0 4
// if cmd = 256 then
29506: LD_VAR 0 1
29510: PUSH
29511: LD_INT 256
29513: EQUAL
29514: IFFALSE 29535
// SetFactoryWaypoint ( unit , x , y ) ;
29516: LD_VAR 0 2
29520: PPUSH
29521: LD_VAR 0 4
29525: PPUSH
29526: LD_VAR 0 5
29530: PPUSH
29531: CALL 27516 0 3
// if cmd = 257 then
29535: LD_VAR 0 1
29539: PUSH
29540: LD_INT 257
29542: EQUAL
29543: IFFALSE 29564
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29545: LD_VAR 0 2
29549: PPUSH
29550: LD_VAR 0 4
29554: PPUSH
29555: LD_VAR 0 5
29559: PPUSH
29560: CALL 27878 0 3
// if cmd = 258 then
29564: LD_VAR 0 1
29568: PUSH
29569: LD_INT 258
29571: EQUAL
29572: IFFALSE 29596
// BurnTreeXYR ( unit , x , y , 8 ) ;
29574: LD_VAR 0 2
29578: PPUSH
29579: LD_VAR 0 4
29583: PPUSH
29584: LD_VAR 0 5
29588: PPUSH
29589: LD_INT 8
29591: PPUSH
29592: CALL 29995 0 4
// end ;
29596: LD_VAR 0 6
29600: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29601: LD_INT 0
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 302
29621: NOT
29622: PUSH
29623: LD_VAR 0 2
29627: PPUSH
29628: LD_VAR 0 3
29632: PPUSH
29633: CALL_OW 488
29637: NOT
29638: OR
29639: PUSH
29640: LD_VAR 0 4
29644: NOT
29645: OR
29646: IFFALSE 29650
// exit ;
29648: GO 29990
// list := [ ] ;
29650: LD_ADDR_VAR 0 13
29654: PUSH
29655: EMPTY
29656: ST_TO_ADDR
// if x - r < 0 then
29657: LD_VAR 0 2
29661: PUSH
29662: LD_VAR 0 4
29666: MINUS
29667: PUSH
29668: LD_INT 0
29670: LESS
29671: IFFALSE 29683
// min_x := 0 else
29673: LD_ADDR_VAR 0 7
29677: PUSH
29678: LD_INT 0
29680: ST_TO_ADDR
29681: GO 29699
// min_x := x - r ;
29683: LD_ADDR_VAR 0 7
29687: PUSH
29688: LD_VAR 0 2
29692: PUSH
29693: LD_VAR 0 4
29697: MINUS
29698: ST_TO_ADDR
// if y - r < 0 then
29699: LD_VAR 0 3
29703: PUSH
29704: LD_VAR 0 4
29708: MINUS
29709: PUSH
29710: LD_INT 0
29712: LESS
29713: IFFALSE 29725
// min_y := 0 else
29715: LD_ADDR_VAR 0 8
29719: PUSH
29720: LD_INT 0
29722: ST_TO_ADDR
29723: GO 29741
// min_y := y - r ;
29725: LD_ADDR_VAR 0 8
29729: PUSH
29730: LD_VAR 0 3
29734: PUSH
29735: LD_VAR 0 4
29739: MINUS
29740: ST_TO_ADDR
// max_x := x + r ;
29741: LD_ADDR_VAR 0 9
29745: PUSH
29746: LD_VAR 0 2
29750: PUSH
29751: LD_VAR 0 4
29755: PLUS
29756: ST_TO_ADDR
// max_y := y + r ;
29757: LD_ADDR_VAR 0 10
29761: PUSH
29762: LD_VAR 0 3
29766: PUSH
29767: LD_VAR 0 4
29771: PLUS
29772: ST_TO_ADDR
// for _x = min_x to max_x do
29773: LD_ADDR_VAR 0 11
29777: PUSH
29778: DOUBLE
29779: LD_VAR 0 7
29783: DEC
29784: ST_TO_ADDR
29785: LD_VAR 0 9
29789: PUSH
29790: FOR_TO
29791: IFFALSE 29908
// for _y = min_y to max_y do
29793: LD_ADDR_VAR 0 12
29797: PUSH
29798: DOUBLE
29799: LD_VAR 0 8
29803: DEC
29804: ST_TO_ADDR
29805: LD_VAR 0 10
29809: PUSH
29810: FOR_TO
29811: IFFALSE 29904
// begin if not ValidHex ( _x , _y ) then
29813: LD_VAR 0 11
29817: PPUSH
29818: LD_VAR 0 12
29822: PPUSH
29823: CALL_OW 488
29827: NOT
29828: IFFALSE 29832
// continue ;
29830: GO 29810
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29832: LD_VAR 0 11
29836: PPUSH
29837: LD_VAR 0 12
29841: PPUSH
29842: CALL_OW 351
29846: PUSH
29847: LD_VAR 0 11
29851: PPUSH
29852: LD_VAR 0 12
29856: PPUSH
29857: CALL_OW 554
29861: AND
29862: IFFALSE 29902
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29864: LD_ADDR_VAR 0 13
29868: PUSH
29869: LD_VAR 0 13
29873: PPUSH
29874: LD_VAR 0 13
29878: PUSH
29879: LD_INT 1
29881: PLUS
29882: PPUSH
29883: LD_VAR 0 11
29887: PUSH
29888: LD_VAR 0 12
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 2
29901: ST_TO_ADDR
// end ;
29902: GO 29810
29904: POP
29905: POP
29906: GO 29790
29908: POP
29909: POP
// if not list then
29910: LD_VAR 0 13
29914: NOT
29915: IFFALSE 29919
// exit ;
29917: GO 29990
// for i in list do
29919: LD_ADDR_VAR 0 6
29923: PUSH
29924: LD_VAR 0 13
29928: PUSH
29929: FOR_IN
29930: IFFALSE 29988
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_STRING M
29939: PUSH
29940: LD_VAR 0 6
29944: PUSH
29945: LD_INT 1
29947: ARRAY
29948: PUSH
29949: LD_VAR 0 6
29953: PUSH
29954: LD_INT 2
29956: ARRAY
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: PPUSH
29982: CALL_OW 447
29986: GO 29929
29988: POP
29989: POP
// end ;
29990: LD_VAR 0 5
29994: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29995: LD_INT 0
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 302
30016: NOT
30017: PUSH
30018: LD_VAR 0 2
30022: PPUSH
30023: LD_VAR 0 3
30027: PPUSH
30028: CALL_OW 488
30032: NOT
30033: OR
30034: PUSH
30035: LD_VAR 0 4
30039: NOT
30040: OR
30041: IFFALSE 30045
// exit ;
30043: GO 30558
// list := [ ] ;
30045: LD_ADDR_VAR 0 13
30049: PUSH
30050: EMPTY
30051: ST_TO_ADDR
// if x - r < 0 then
30052: LD_VAR 0 2
30056: PUSH
30057: LD_VAR 0 4
30061: MINUS
30062: PUSH
30063: LD_INT 0
30065: LESS
30066: IFFALSE 30078
// min_x := 0 else
30068: LD_ADDR_VAR 0 7
30072: PUSH
30073: LD_INT 0
30075: ST_TO_ADDR
30076: GO 30094
// min_x := x - r ;
30078: LD_ADDR_VAR 0 7
30082: PUSH
30083: LD_VAR 0 2
30087: PUSH
30088: LD_VAR 0 4
30092: MINUS
30093: ST_TO_ADDR
// if y - r < 0 then
30094: LD_VAR 0 3
30098: PUSH
30099: LD_VAR 0 4
30103: MINUS
30104: PUSH
30105: LD_INT 0
30107: LESS
30108: IFFALSE 30120
// min_y := 0 else
30110: LD_ADDR_VAR 0 8
30114: PUSH
30115: LD_INT 0
30117: ST_TO_ADDR
30118: GO 30136
// min_y := y - r ;
30120: LD_ADDR_VAR 0 8
30124: PUSH
30125: LD_VAR 0 3
30129: PUSH
30130: LD_VAR 0 4
30134: MINUS
30135: ST_TO_ADDR
// max_x := x + r ;
30136: LD_ADDR_VAR 0 9
30140: PUSH
30141: LD_VAR 0 2
30145: PUSH
30146: LD_VAR 0 4
30150: PLUS
30151: ST_TO_ADDR
// max_y := y + r ;
30152: LD_ADDR_VAR 0 10
30156: PUSH
30157: LD_VAR 0 3
30161: PUSH
30162: LD_VAR 0 4
30166: PLUS
30167: ST_TO_ADDR
// for _x = min_x to max_x do
30168: LD_ADDR_VAR 0 11
30172: PUSH
30173: DOUBLE
30174: LD_VAR 0 7
30178: DEC
30179: ST_TO_ADDR
30180: LD_VAR 0 9
30184: PUSH
30185: FOR_TO
30186: IFFALSE 30303
// for _y = min_y to max_y do
30188: LD_ADDR_VAR 0 12
30192: PUSH
30193: DOUBLE
30194: LD_VAR 0 8
30198: DEC
30199: ST_TO_ADDR
30200: LD_VAR 0 10
30204: PUSH
30205: FOR_TO
30206: IFFALSE 30299
// begin if not ValidHex ( _x , _y ) then
30208: LD_VAR 0 11
30212: PPUSH
30213: LD_VAR 0 12
30217: PPUSH
30218: CALL_OW 488
30222: NOT
30223: IFFALSE 30227
// continue ;
30225: GO 30205
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30227: LD_VAR 0 11
30231: PPUSH
30232: LD_VAR 0 12
30236: PPUSH
30237: CALL_OW 351
30241: PUSH
30242: LD_VAR 0 11
30246: PPUSH
30247: LD_VAR 0 12
30251: PPUSH
30252: CALL_OW 554
30256: AND
30257: IFFALSE 30297
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30259: LD_ADDR_VAR 0 13
30263: PUSH
30264: LD_VAR 0 13
30268: PPUSH
30269: LD_VAR 0 13
30273: PUSH
30274: LD_INT 1
30276: PLUS
30277: PPUSH
30278: LD_VAR 0 11
30282: PUSH
30283: LD_VAR 0 12
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: CALL_OW 2
30296: ST_TO_ADDR
// end ;
30297: GO 30205
30299: POP
30300: POP
30301: GO 30185
30303: POP
30304: POP
// if not list then
30305: LD_VAR 0 13
30309: NOT
30310: IFFALSE 30314
// exit ;
30312: GO 30558
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30314: LD_ADDR_VAR 0 13
30318: PUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: LD_VAR 0 13
30328: PPUSH
30329: LD_INT 1
30331: PPUSH
30332: LD_INT 1
30334: PPUSH
30335: CALL 39171 0 4
30339: ST_TO_ADDR
// ComStop ( flame ) ;
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 141
// for i in list do
30349: LD_ADDR_VAR 0 6
30353: PUSH
30354: LD_VAR 0 13
30358: PUSH
30359: FOR_IN
30360: IFFALSE 30391
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_VAR 0 6
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: PPUSH
30376: LD_VAR 0 6
30380: PUSH
30381: LD_INT 2
30383: ARRAY
30384: PPUSH
30385: CALL_OW 176
30389: GO 30359
30391: POP
30392: POP
// repeat wait ( 0 0$1 ) ;
30393: LD_INT 35
30395: PPUSH
30396: CALL_OW 67
// task := GetTaskList ( flame ) ;
30400: LD_ADDR_VAR 0 14
30404: PUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 437
30414: ST_TO_ADDR
// if not task then
30415: LD_VAR 0 14
30419: NOT
30420: IFFALSE 30424
// exit ;
30422: GO 30558
// if task [ 1 ] [ 1 ] <> | then
30424: LD_VAR 0 14
30428: PUSH
30429: LD_INT 1
30431: ARRAY
30432: PUSH
30433: LD_INT 1
30435: ARRAY
30436: PUSH
30437: LD_STRING |
30439: NONEQUAL
30440: IFFALSE 30444
// exit ;
30442: GO 30558
// _x := task [ 1 ] [ 2 ] ;
30444: LD_ADDR_VAR 0 11
30448: PUSH
30449: LD_VAR 0 14
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PUSH
30458: LD_INT 2
30460: ARRAY
30461: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30462: LD_ADDR_VAR 0 12
30466: PUSH
30467: LD_VAR 0 14
30471: PUSH
30472: LD_INT 1
30474: ARRAY
30475: PUSH
30476: LD_INT 3
30478: ARRAY
30479: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30480: LD_VAR 0 11
30484: PPUSH
30485: LD_VAR 0 12
30489: PPUSH
30490: CALL_OW 351
30494: NOT
30495: PUSH
30496: LD_VAR 0 11
30500: PPUSH
30501: LD_VAR 0 12
30505: PPUSH
30506: CALL_OW 554
30510: NOT
30511: OR
30512: IFFALSE 30546
// begin task := Delete ( task , 1 ) ;
30514: LD_ADDR_VAR 0 14
30518: PUSH
30519: LD_VAR 0 14
30523: PPUSH
30524: LD_INT 1
30526: PPUSH
30527: CALL_OW 3
30531: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30532: LD_VAR 0 1
30536: PPUSH
30537: LD_VAR 0 14
30541: PPUSH
30542: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 314
30555: NOT
30556: IFFALSE 30393
// end ;
30558: LD_VAR 0 5
30562: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30563: LD_EXP 94
30567: NOT
30568: IFFALSE 30618
30570: GO 30572
30572: DISABLE
// begin initHack := true ;
30573: LD_ADDR_EXP 94
30577: PUSH
30578: LD_INT 1
30580: ST_TO_ADDR
// hackTanks := [ ] ;
30581: LD_ADDR_EXP 95
30585: PUSH
30586: EMPTY
30587: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30588: LD_ADDR_EXP 96
30592: PUSH
30593: EMPTY
30594: ST_TO_ADDR
// hackLimit := 3 ;
30595: LD_ADDR_EXP 97
30599: PUSH
30600: LD_INT 3
30602: ST_TO_ADDR
// hackDist := 12 ;
30603: LD_ADDR_EXP 98
30607: PUSH
30608: LD_INT 12
30610: ST_TO_ADDR
// hackCounter := [ ] ;
30611: LD_ADDR_EXP 99
30615: PUSH
30616: EMPTY
30617: ST_TO_ADDR
// end ;
30618: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30619: LD_EXP 94
30623: PUSH
30624: LD_INT 34
30626: PUSH
30627: LD_INT 99
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PPUSH
30634: CALL_OW 69
30638: AND
30639: IFFALSE 30892
30641: GO 30643
30643: DISABLE
30644: LD_INT 0
30646: PPUSH
30647: PPUSH
// begin enable ;
30648: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30649: LD_ADDR_VAR 0 1
30653: PUSH
30654: LD_INT 34
30656: PUSH
30657: LD_INT 99
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PPUSH
30664: CALL_OW 69
30668: PUSH
30669: FOR_IN
30670: IFFALSE 30890
// begin if not i in hackTanks then
30672: LD_VAR 0 1
30676: PUSH
30677: LD_EXP 95
30681: IN
30682: NOT
30683: IFFALSE 30766
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30685: LD_ADDR_EXP 95
30689: PUSH
30690: LD_EXP 95
30694: PPUSH
30695: LD_EXP 95
30699: PUSH
30700: LD_INT 1
30702: PLUS
30703: PPUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 1
30713: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30714: LD_ADDR_EXP 96
30718: PUSH
30719: LD_EXP 96
30723: PPUSH
30724: LD_EXP 96
30728: PUSH
30729: LD_INT 1
30731: PLUS
30732: PPUSH
30733: EMPTY
30734: PPUSH
30735: CALL_OW 1
30739: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30740: LD_ADDR_EXP 99
30744: PUSH
30745: LD_EXP 99
30749: PPUSH
30750: LD_EXP 99
30754: PUSH
30755: LD_INT 1
30757: PLUS
30758: PPUSH
30759: EMPTY
30760: PPUSH
30761: CALL_OW 1
30765: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 302
30775: NOT
30776: IFFALSE 30789
// begin HackUnlinkAll ( i ) ;
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL 30895 0 1
// continue ;
30787: GO 30669
// end ; HackCheckCapturedStatus ( i ) ;
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL 31338 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30798: LD_ADDR_VAR 0 2
30802: PUSH
30803: LD_INT 81
30805: PUSH
30806: LD_VAR 0 1
30810: PPUSH
30811: CALL_OW 255
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 33
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 91
30832: PUSH
30833: LD_VAR 0 1
30837: PUSH
30838: LD_EXP 98
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 50
30850: PUSH
30851: EMPTY
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: PPUSH
30860: CALL_OW 69
30864: ST_TO_ADDR
// if not tmp then
30865: LD_VAR 0 2
30869: NOT
30870: IFFALSE 30874
// continue ;
30872: GO 30669
// HackLink ( i , tmp ) ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: CALL 31031 0 2
// end ;
30888: GO 30669
30890: POP
30891: POP
// end ;
30892: PPOPN 2
30894: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30895: LD_INT 0
30897: PPUSH
30898: PPUSH
30899: PPUSH
// if not hack in hackTanks then
30900: LD_VAR 0 1
30904: PUSH
30905: LD_EXP 95
30909: IN
30910: NOT
30911: IFFALSE 30915
// exit ;
30913: GO 31026
// index := GetElementIndex ( hackTanks , hack ) ;
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: LD_EXP 95
30924: PPUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL 38468 0 2
30934: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30935: LD_EXP 96
30939: PUSH
30940: LD_VAR 0 4
30944: ARRAY
30945: IFFALSE 31026
// begin for i in hackTanksCaptured [ index ] do
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_EXP 96
30956: PUSH
30957: LD_VAR 0 4
30961: ARRAY
30962: PUSH
30963: FOR_IN
30964: IFFALSE 30990
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30966: LD_VAR 0 3
30970: PUSH
30971: LD_INT 1
30973: ARRAY
30974: PPUSH
30975: LD_VAR 0 3
30979: PUSH
30980: LD_INT 2
30982: ARRAY
30983: PPUSH
30984: CALL_OW 235
30988: GO 30963
30990: POP
30991: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30992: LD_ADDR_EXP 96
30996: PUSH
30997: LD_EXP 96
31001: PPUSH
31002: LD_VAR 0 4
31006: PPUSH
31007: EMPTY
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31014: LD_VAR 0 1
31018: PPUSH
31019: LD_INT 0
31021: PPUSH
31022: CALL_OW 505
// end ; end ;
31026: LD_VAR 0 2
31030: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31031: LD_INT 0
31033: PPUSH
31034: PPUSH
31035: PPUSH
// if not hack in hackTanks or not vehicles then
31036: LD_VAR 0 1
31040: PUSH
31041: LD_EXP 95
31045: IN
31046: NOT
31047: PUSH
31048: LD_VAR 0 2
31052: NOT
31053: OR
31054: IFFALSE 31058
// exit ;
31056: GO 31333
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: LD_VAR 0 1
31067: PPUSH
31068: LD_VAR 0 2
31072: PPUSH
31073: LD_INT 1
31075: PPUSH
31076: LD_INT 1
31078: PPUSH
31079: CALL 39118 0 4
31083: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31084: LD_ADDR_VAR 0 5
31088: PUSH
31089: LD_EXP 95
31093: PPUSH
31094: LD_VAR 0 1
31098: PPUSH
31099: CALL 38468 0 2
31103: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31104: LD_EXP 96
31108: PUSH
31109: LD_VAR 0 5
31113: ARRAY
31114: PUSH
31115: LD_EXP 97
31119: LESS
31120: IFFALSE 31309
// begin for i := 1 to vehicles do
31122: LD_ADDR_VAR 0 4
31126: PUSH
31127: DOUBLE
31128: LD_INT 1
31130: DEC
31131: ST_TO_ADDR
31132: LD_VAR 0 2
31136: PUSH
31137: FOR_TO
31138: IFFALSE 31307
// begin if hackTanksCaptured [ index ] = hackLimit then
31140: LD_EXP 96
31144: PUSH
31145: LD_VAR 0 5
31149: ARRAY
31150: PUSH
31151: LD_EXP 97
31155: EQUAL
31156: IFFALSE 31160
// break ;
31158: GO 31307
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31160: LD_ADDR_EXP 99
31164: PUSH
31165: LD_EXP 99
31169: PPUSH
31170: LD_VAR 0 5
31174: PPUSH
31175: LD_EXP 99
31179: PUSH
31180: LD_VAR 0 5
31184: ARRAY
31185: PUSH
31186: LD_INT 1
31188: PLUS
31189: PPUSH
31190: CALL_OW 1
31194: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31195: LD_ADDR_EXP 96
31199: PUSH
31200: LD_EXP 96
31204: PPUSH
31205: LD_VAR 0 5
31209: PUSH
31210: LD_EXP 96
31214: PUSH
31215: LD_VAR 0 5
31219: ARRAY
31220: PUSH
31221: LD_INT 1
31223: PLUS
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PPUSH
31229: LD_VAR 0 2
31233: PUSH
31234: LD_VAR 0 4
31238: ARRAY
31239: PUSH
31240: LD_VAR 0 2
31244: PUSH
31245: LD_VAR 0 4
31249: ARRAY
31250: PPUSH
31251: CALL_OW 255
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PPUSH
31260: CALL 38683 0 3
31264: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31265: LD_VAR 0 2
31269: PUSH
31270: LD_VAR 0 4
31274: ARRAY
31275: PPUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 255
31285: PPUSH
31286: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31290: LD_VAR 0 2
31294: PUSH
31295: LD_VAR 0 4
31299: ARRAY
31300: PPUSH
31301: CALL_OW 141
// end ;
31305: GO 31137
31307: POP
31308: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31309: LD_VAR 0 1
31313: PPUSH
31314: LD_EXP 96
31318: PUSH
31319: LD_VAR 0 5
31323: ARRAY
31324: PUSH
31325: LD_INT 0
31327: PLUS
31328: PPUSH
31329: CALL_OW 505
// end ;
31333: LD_VAR 0 3
31337: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
// if not hack in hackTanks then
31344: LD_VAR 0 1
31348: PUSH
31349: LD_EXP 95
31353: IN
31354: NOT
31355: IFFALSE 31359
// exit ;
31357: GO 31599
// index := GetElementIndex ( hackTanks , hack ) ;
31359: LD_ADDR_VAR 0 4
31363: PUSH
31364: LD_EXP 95
31368: PPUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL 38468 0 2
31378: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: DOUBLE
31385: LD_EXP 96
31389: PUSH
31390: LD_VAR 0 4
31394: ARRAY
31395: INC
31396: ST_TO_ADDR
31397: LD_INT 1
31399: PUSH
31400: FOR_DOWNTO
31401: IFFALSE 31573
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31403: LD_ADDR_VAR 0 5
31407: PUSH
31408: LD_EXP 96
31412: PUSH
31413: LD_VAR 0 4
31417: ARRAY
31418: PUSH
31419: LD_VAR 0 3
31423: ARRAY
31424: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31425: LD_VAR 0 5
31429: PUSH
31430: LD_INT 1
31432: ARRAY
31433: PPUSH
31434: CALL_OW 302
31438: NOT
31439: PUSH
31440: LD_VAR 0 5
31444: PUSH
31445: LD_INT 1
31447: ARRAY
31448: PPUSH
31449: CALL_OW 255
31453: PUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 255
31463: NONEQUAL
31464: OR
31465: IFFALSE 31571
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31467: LD_VAR 0 5
31471: PUSH
31472: LD_INT 1
31474: ARRAY
31475: PPUSH
31476: CALL_OW 305
31480: PUSH
31481: LD_VAR 0 5
31485: PUSH
31486: LD_INT 1
31488: ARRAY
31489: PPUSH
31490: CALL_OW 255
31494: PUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 255
31504: EQUAL
31505: AND
31506: IFFALSE 31530
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31508: LD_VAR 0 5
31512: PUSH
31513: LD_INT 1
31515: ARRAY
31516: PPUSH
31517: LD_VAR 0 5
31521: PUSH
31522: LD_INT 2
31524: ARRAY
31525: PPUSH
31526: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31530: LD_ADDR_EXP 96
31534: PUSH
31535: LD_EXP 96
31539: PPUSH
31540: LD_VAR 0 4
31544: PPUSH
31545: LD_EXP 96
31549: PUSH
31550: LD_VAR 0 4
31554: ARRAY
31555: PPUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: CALL_OW 3
31565: PPUSH
31566: CALL_OW 1
31570: ST_TO_ADDR
// end ; end ;
31571: GO 31400
31573: POP
31574: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31575: LD_VAR 0 1
31579: PPUSH
31580: LD_EXP 96
31584: PUSH
31585: LD_VAR 0 4
31589: ARRAY
31590: PUSH
31591: LD_INT 0
31593: PLUS
31594: PPUSH
31595: CALL_OW 505
// end ;
31599: LD_VAR 0 2
31603: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31604: LD_INT 0
31606: PPUSH
31607: PPUSH
31608: PPUSH
31609: PPUSH
// if not hack in hackTanks then
31610: LD_VAR 0 1
31614: PUSH
31615: LD_EXP 95
31619: IN
31620: NOT
31621: IFFALSE 31625
// exit ;
31623: GO 31710
// index := GetElementIndex ( hackTanks , hack ) ;
31625: LD_ADDR_VAR 0 5
31629: PUSH
31630: LD_EXP 95
31634: PPUSH
31635: LD_VAR 0 1
31639: PPUSH
31640: CALL 38468 0 2
31644: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: DOUBLE
31651: LD_INT 1
31653: DEC
31654: ST_TO_ADDR
31655: LD_EXP 96
31659: PUSH
31660: LD_VAR 0 5
31664: ARRAY
31665: PUSH
31666: FOR_TO
31667: IFFALSE 31708
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31669: LD_EXP 96
31673: PUSH
31674: LD_VAR 0 5
31678: ARRAY
31679: PUSH
31680: LD_VAR 0 4
31684: ARRAY
31685: PUSH
31686: LD_INT 1
31688: ARRAY
31689: PUSH
31690: LD_VAR 0 2
31694: EQUAL
31695: IFFALSE 31706
// KillUnit ( vehicle ) ;
31697: LD_VAR 0 2
31701: PPUSH
31702: CALL_OW 66
31706: GO 31666
31708: POP
31709: POP
// end ;
31710: LD_VAR 0 3
31714: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31715: LD_EXP 100
31719: NOT
31720: IFFALSE 31755
31722: GO 31724
31724: DISABLE
// begin initMiner := true ;
31725: LD_ADDR_EXP 100
31729: PUSH
31730: LD_INT 1
31732: ST_TO_ADDR
// minersList := [ ] ;
31733: LD_ADDR_EXP 101
31737: PUSH
31738: EMPTY
31739: ST_TO_ADDR
// minerMinesList := [ ] ;
31740: LD_ADDR_EXP 102
31744: PUSH
31745: EMPTY
31746: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31747: LD_ADDR_EXP 103
31751: PUSH
31752: LD_INT 5
31754: ST_TO_ADDR
// end ;
31755: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31756: LD_EXP 100
31760: PUSH
31761: LD_INT 34
31763: PUSH
31764: LD_INT 81
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PPUSH
31771: CALL_OW 69
31775: AND
31776: IFFALSE 32237
31778: GO 31780
31780: DISABLE
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
// begin enable ;
31787: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31788: LD_ADDR_VAR 0 1
31792: PUSH
31793: LD_INT 34
31795: PUSH
31796: LD_INT 81
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PPUSH
31803: CALL_OW 69
31807: PUSH
31808: FOR_IN
31809: IFFALSE 31881
// begin if not i in minersList then
31811: LD_VAR 0 1
31815: PUSH
31816: LD_EXP 101
31820: IN
31821: NOT
31822: IFFALSE 31879
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31824: LD_ADDR_EXP 101
31828: PUSH
31829: LD_EXP 101
31833: PPUSH
31834: LD_EXP 101
31838: PUSH
31839: LD_INT 1
31841: PLUS
31842: PPUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL_OW 1
31852: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31853: LD_ADDR_EXP 102
31857: PUSH
31858: LD_EXP 102
31862: PPUSH
31863: LD_EXP 102
31867: PUSH
31868: LD_INT 1
31870: PLUS
31871: PPUSH
31872: EMPTY
31873: PPUSH
31874: CALL_OW 1
31878: ST_TO_ADDR
// end end ;
31879: GO 31808
31881: POP
31882: POP
// for i := minerMinesList downto 1 do
31883: LD_ADDR_VAR 0 1
31887: PUSH
31888: DOUBLE
31889: LD_EXP 102
31893: INC
31894: ST_TO_ADDR
31895: LD_INT 1
31897: PUSH
31898: FOR_DOWNTO
31899: IFFALSE 32235
// begin if IsLive ( minersList [ i ] ) then
31901: LD_EXP 101
31905: PUSH
31906: LD_VAR 0 1
31910: ARRAY
31911: PPUSH
31912: CALL_OW 300
31916: IFFALSE 31944
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31918: LD_EXP 101
31922: PUSH
31923: LD_VAR 0 1
31927: ARRAY
31928: PPUSH
31929: LD_EXP 102
31933: PUSH
31934: LD_VAR 0 1
31938: ARRAY
31939: PPUSH
31940: CALL_OW 505
// if not minerMinesList [ i ] then
31944: LD_EXP 102
31948: PUSH
31949: LD_VAR 0 1
31953: ARRAY
31954: NOT
31955: IFFALSE 31959
// continue ;
31957: GO 31898
// for j := minerMinesList [ i ] downto 1 do
31959: LD_ADDR_VAR 0 2
31963: PUSH
31964: DOUBLE
31965: LD_EXP 102
31969: PUSH
31970: LD_VAR 0 1
31974: ARRAY
31975: INC
31976: ST_TO_ADDR
31977: LD_INT 1
31979: PUSH
31980: FOR_DOWNTO
31981: IFFALSE 32231
// begin side := GetSide ( minersList [ i ] ) ;
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: LD_EXP 101
31992: PUSH
31993: LD_VAR 0 1
31997: ARRAY
31998: PPUSH
31999: CALL_OW 255
32003: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32004: LD_ADDR_VAR 0 4
32008: PUSH
32009: LD_EXP 102
32013: PUSH
32014: LD_VAR 0 1
32018: ARRAY
32019: PUSH
32020: LD_VAR 0 2
32024: ARRAY
32025: PUSH
32026: LD_INT 1
32028: ARRAY
32029: PPUSH
32030: LD_EXP 102
32034: PUSH
32035: LD_VAR 0 1
32039: ARRAY
32040: PUSH
32041: LD_VAR 0 2
32045: ARRAY
32046: PUSH
32047: LD_INT 2
32049: ARRAY
32050: PPUSH
32051: CALL_OW 428
32055: ST_TO_ADDR
// if not tmp then
32056: LD_VAR 0 4
32060: NOT
32061: IFFALSE 32065
// continue ;
32063: GO 31980
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32065: LD_VAR 0 4
32069: PUSH
32070: LD_INT 81
32072: PUSH
32073: LD_VAR 0 3
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PPUSH
32082: CALL_OW 69
32086: IN
32087: PUSH
32088: LD_EXP 102
32092: PUSH
32093: LD_VAR 0 1
32097: ARRAY
32098: PUSH
32099: LD_VAR 0 2
32103: ARRAY
32104: PUSH
32105: LD_INT 1
32107: ARRAY
32108: PPUSH
32109: LD_EXP 102
32113: PUSH
32114: LD_VAR 0 1
32118: ARRAY
32119: PUSH
32120: LD_VAR 0 2
32124: ARRAY
32125: PUSH
32126: LD_INT 2
32128: ARRAY
32129: PPUSH
32130: CALL_OW 458
32134: AND
32135: IFFALSE 32229
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32137: LD_EXP 102
32141: PUSH
32142: LD_VAR 0 1
32146: ARRAY
32147: PUSH
32148: LD_VAR 0 2
32152: ARRAY
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: PPUSH
32158: LD_EXP 102
32162: PUSH
32163: LD_VAR 0 1
32167: ARRAY
32168: PUSH
32169: LD_VAR 0 2
32173: ARRAY
32174: PUSH
32175: LD_INT 2
32177: ARRAY
32178: PPUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32188: LD_ADDR_EXP 102
32192: PUSH
32193: LD_EXP 102
32197: PPUSH
32198: LD_VAR 0 1
32202: PPUSH
32203: LD_EXP 102
32207: PUSH
32208: LD_VAR 0 1
32212: ARRAY
32213: PPUSH
32214: LD_VAR 0 2
32218: PPUSH
32219: CALL_OW 3
32223: PPUSH
32224: CALL_OW 1
32228: ST_TO_ADDR
// end ; end ;
32229: GO 31980
32231: POP
32232: POP
// end ;
32233: GO 31898
32235: POP
32236: POP
// end ;
32237: PPOPN 4
32239: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32240: LD_INT 0
32242: PPUSH
32243: PPUSH
// result := false ;
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: LD_INT 0
32251: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32252: LD_VAR 0 1
32256: PPUSH
32257: CALL_OW 264
32261: PUSH
32262: LD_INT 81
32264: EQUAL
32265: NOT
32266: IFFALSE 32270
// exit ;
32268: GO 32510
// index := GetElementIndex ( minersList , unit ) ;
32270: LD_ADDR_VAR 0 5
32274: PUSH
32275: LD_EXP 101
32279: PPUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL 38468 0 2
32289: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32290: LD_EXP 102
32294: PUSH
32295: LD_VAR 0 5
32299: ARRAY
32300: PUSH
32301: LD_EXP 103
32305: GREATEREQUAL
32306: IFFALSE 32310
// exit ;
32308: GO 32510
// ComMoveXY ( unit , x , y ) ;
32310: LD_VAR 0 1
32314: PPUSH
32315: LD_VAR 0 2
32319: PPUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32329: LD_INT 35
32331: PPUSH
32332: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32336: LD_VAR 0 1
32340: PPUSH
32341: LD_VAR 0 2
32345: PPUSH
32346: LD_VAR 0 3
32350: PPUSH
32351: CALL 70220 0 3
32355: NOT
32356: PUSH
32357: LD_VAR 0 1
32361: PPUSH
32362: CALL_OW 314
32366: AND
32367: IFFALSE 32371
// exit ;
32369: GO 32510
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32371: LD_VAR 0 2
32375: PPUSH
32376: LD_VAR 0 3
32380: PPUSH
32381: CALL_OW 428
32385: PUSH
32386: LD_VAR 0 1
32390: EQUAL
32391: PUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 314
32401: NOT
32402: AND
32403: IFFALSE 32329
// PlaySoundXY ( x , y , PlantMine ) ;
32405: LD_VAR 0 2
32409: PPUSH
32410: LD_VAR 0 3
32414: PPUSH
32415: LD_STRING PlantMine
32417: PPUSH
32418: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: LD_VAR 0 1
32436: PPUSH
32437: CALL_OW 255
32441: PPUSH
32442: LD_INT 0
32444: PPUSH
32445: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32449: LD_ADDR_EXP 102
32453: PUSH
32454: LD_EXP 102
32458: PPUSH
32459: LD_VAR 0 5
32463: PUSH
32464: LD_EXP 102
32468: PUSH
32469: LD_VAR 0 5
32473: ARRAY
32474: PUSH
32475: LD_INT 1
32477: PLUS
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PPUSH
32483: LD_VAR 0 2
32487: PUSH
32488: LD_VAR 0 3
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PPUSH
32497: CALL 38683 0 3
32501: ST_TO_ADDR
// result := true ;
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_INT 1
32509: ST_TO_ADDR
// end ;
32510: LD_VAR 0 4
32514: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
32519: PPUSH
// if not unit in minersList then
32520: LD_VAR 0 1
32524: PUSH
32525: LD_EXP 101
32529: IN
32530: NOT
32531: IFFALSE 32535
// exit ;
32533: GO 32927
// index := GetElementIndex ( minersList , unit ) ;
32535: LD_ADDR_VAR 0 6
32539: PUSH
32540: LD_EXP 101
32544: PPUSH
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL 38468 0 2
32554: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: DOUBLE
32561: LD_EXP 102
32565: PUSH
32566: LD_VAR 0 6
32570: ARRAY
32571: INC
32572: ST_TO_ADDR
32573: LD_INT 1
32575: PUSH
32576: FOR_DOWNTO
32577: IFFALSE 32738
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32579: LD_EXP 102
32583: PUSH
32584: LD_VAR 0 6
32588: ARRAY
32589: PUSH
32590: LD_VAR 0 5
32594: ARRAY
32595: PUSH
32596: LD_INT 1
32598: ARRAY
32599: PUSH
32600: LD_VAR 0 2
32604: EQUAL
32605: PUSH
32606: LD_EXP 102
32610: PUSH
32611: LD_VAR 0 6
32615: ARRAY
32616: PUSH
32617: LD_VAR 0 5
32621: ARRAY
32622: PUSH
32623: LD_INT 2
32625: ARRAY
32626: PUSH
32627: LD_VAR 0 3
32631: EQUAL
32632: AND
32633: IFFALSE 32736
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32635: LD_EXP 102
32639: PUSH
32640: LD_VAR 0 6
32644: ARRAY
32645: PUSH
32646: LD_VAR 0 5
32650: ARRAY
32651: PUSH
32652: LD_INT 1
32654: ARRAY
32655: PPUSH
32656: LD_EXP 102
32660: PUSH
32661: LD_VAR 0 6
32665: ARRAY
32666: PUSH
32667: LD_VAR 0 5
32671: ARRAY
32672: PUSH
32673: LD_INT 2
32675: ARRAY
32676: PPUSH
32677: LD_VAR 0 1
32681: PPUSH
32682: CALL_OW 255
32686: PPUSH
32687: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32691: LD_ADDR_EXP 102
32695: PUSH
32696: LD_EXP 102
32700: PPUSH
32701: LD_VAR 0 6
32705: PPUSH
32706: LD_EXP 102
32710: PUSH
32711: LD_VAR 0 6
32715: ARRAY
32716: PPUSH
32717: LD_VAR 0 5
32721: PPUSH
32722: CALL_OW 3
32726: PPUSH
32727: CALL_OW 1
32731: ST_TO_ADDR
// exit ;
32732: POP
32733: POP
32734: GO 32927
// end ; end ;
32736: GO 32576
32738: POP
32739: POP
// for i := minerMinesList [ index ] downto 1 do
32740: LD_ADDR_VAR 0 5
32744: PUSH
32745: DOUBLE
32746: LD_EXP 102
32750: PUSH
32751: LD_VAR 0 6
32755: ARRAY
32756: INC
32757: ST_TO_ADDR
32758: LD_INT 1
32760: PUSH
32761: FOR_DOWNTO
32762: IFFALSE 32925
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32764: LD_EXP 102
32768: PUSH
32769: LD_VAR 0 6
32773: ARRAY
32774: PUSH
32775: LD_VAR 0 5
32779: ARRAY
32780: PUSH
32781: LD_INT 1
32783: ARRAY
32784: PPUSH
32785: LD_EXP 102
32789: PUSH
32790: LD_VAR 0 6
32794: ARRAY
32795: PUSH
32796: LD_VAR 0 5
32800: ARRAY
32801: PUSH
32802: LD_INT 2
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 2
32810: PPUSH
32811: LD_VAR 0 3
32815: PPUSH
32816: CALL_OW 298
32820: PUSH
32821: LD_INT 6
32823: LESS
32824: IFFALSE 32923
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32826: LD_EXP 102
32830: PUSH
32831: LD_VAR 0 6
32835: ARRAY
32836: PUSH
32837: LD_VAR 0 5
32841: ARRAY
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: PPUSH
32847: LD_EXP 102
32851: PUSH
32852: LD_VAR 0 6
32856: ARRAY
32857: PUSH
32858: LD_VAR 0 5
32862: ARRAY
32863: PUSH
32864: LD_INT 2
32866: ARRAY
32867: PPUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 255
32877: PPUSH
32878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32882: LD_ADDR_EXP 102
32886: PUSH
32887: LD_EXP 102
32891: PPUSH
32892: LD_VAR 0 6
32896: PPUSH
32897: LD_EXP 102
32901: PUSH
32902: LD_VAR 0 6
32906: ARRAY
32907: PPUSH
32908: LD_VAR 0 5
32912: PPUSH
32913: CALL_OW 3
32917: PPUSH
32918: CALL_OW 1
32922: ST_TO_ADDR
// end ; end ;
32923: GO 32761
32925: POP
32926: POP
// end ;
32927: LD_VAR 0 4
32931: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32932: LD_INT 0
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32943: LD_VAR 0 1
32947: PPUSH
32948: CALL_OW 264
32952: PUSH
32953: LD_INT 81
32955: EQUAL
32956: NOT
32957: PUSH
32958: LD_VAR 0 1
32962: PUSH
32963: LD_EXP 101
32967: IN
32968: NOT
32969: OR
32970: IFFALSE 32974
// exit ;
32972: GO 33296
// index := GetElementIndex ( minersList , unit ) ;
32974: LD_ADDR_VAR 0 6
32978: PUSH
32979: LD_EXP 101
32983: PPUSH
32984: LD_VAR 0 1
32988: PPUSH
32989: CALL 38468 0 2
32993: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32994: LD_ADDR_VAR 0 8
32998: PUSH
32999: LD_EXP 103
33003: PUSH
33004: LD_EXP 102
33008: PUSH
33009: LD_VAR 0 6
33013: ARRAY
33014: MINUS
33015: ST_TO_ADDR
// if not minesFreeAmount then
33016: LD_VAR 0 8
33020: NOT
33021: IFFALSE 33025
// exit ;
33023: GO 33296
// tmp := [ ] ;
33025: LD_ADDR_VAR 0 7
33029: PUSH
33030: EMPTY
33031: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33032: LD_ADDR_VAR 0 5
33036: PUSH
33037: DOUBLE
33038: LD_INT 1
33040: DEC
33041: ST_TO_ADDR
33042: LD_VAR 0 8
33046: PUSH
33047: FOR_TO
33048: IFFALSE 33243
// begin _d := rand ( 0 , 5 ) ;
33050: LD_ADDR_VAR 0 11
33054: PUSH
33055: LD_INT 0
33057: PPUSH
33058: LD_INT 5
33060: PPUSH
33061: CALL_OW 12
33065: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33066: LD_ADDR_VAR 0 12
33070: PUSH
33071: LD_INT 2
33073: PPUSH
33074: LD_INT 6
33076: PPUSH
33077: CALL_OW 12
33081: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33082: LD_ADDR_VAR 0 9
33086: PUSH
33087: LD_VAR 0 2
33091: PPUSH
33092: LD_VAR 0 11
33096: PPUSH
33097: LD_VAR 0 12
33101: PPUSH
33102: CALL_OW 272
33106: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33107: LD_ADDR_VAR 0 10
33111: PUSH
33112: LD_VAR 0 3
33116: PPUSH
33117: LD_VAR 0 11
33121: PPUSH
33122: LD_VAR 0 12
33126: PPUSH
33127: CALL_OW 273
33131: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33132: LD_VAR 0 9
33136: PPUSH
33137: LD_VAR 0 10
33141: PPUSH
33142: CALL_OW 488
33146: PUSH
33147: LD_VAR 0 9
33151: PUSH
33152: LD_VAR 0 10
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_VAR 0 7
33165: IN
33166: NOT
33167: AND
33168: PUSH
33169: LD_VAR 0 9
33173: PPUSH
33174: LD_VAR 0 10
33178: PPUSH
33179: CALL_OW 458
33183: NOT
33184: AND
33185: IFFALSE 33227
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33187: LD_ADDR_VAR 0 7
33191: PUSH
33192: LD_VAR 0 7
33196: PPUSH
33197: LD_VAR 0 7
33201: PUSH
33202: LD_INT 1
33204: PLUS
33205: PPUSH
33206: LD_VAR 0 9
33210: PUSH
33211: LD_VAR 0 10
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 1
33224: ST_TO_ADDR
33225: GO 33241
// i := i - 1 ;
33227: LD_ADDR_VAR 0 5
33231: PUSH
33232: LD_VAR 0 5
33236: PUSH
33237: LD_INT 1
33239: MINUS
33240: ST_TO_ADDR
// end ;
33241: GO 33047
33243: POP
33244: POP
// for i in tmp do
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_VAR 0 7
33254: PUSH
33255: FOR_IN
33256: IFFALSE 33294
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33258: LD_VAR 0 1
33262: PPUSH
33263: LD_VAR 0 5
33267: PUSH
33268: LD_INT 1
33270: ARRAY
33271: PPUSH
33272: LD_VAR 0 5
33276: PUSH
33277: LD_INT 2
33279: ARRAY
33280: PPUSH
33281: CALL 32240 0 3
33285: NOT
33286: IFFALSE 33292
// exit ;
33288: POP
33289: POP
33290: GO 33296
33292: GO 33255
33294: POP
33295: POP
// end ;
33296: LD_VAR 0 4
33300: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33301: LD_INT 0
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
// if not GetClass ( unit ) = class_sniper then
33310: LD_VAR 0 1
33314: PPUSH
33315: CALL_OW 257
33319: PUSH
33320: LD_INT 5
33322: EQUAL
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 33716
// dist := 8 ;
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_INT 8
33335: ST_TO_ADDR
// viewRange := 12 ;
33336: LD_ADDR_VAR 0 7
33340: PUSH
33341: LD_INT 12
33343: ST_TO_ADDR
// side := GetSide ( unit ) ;
33344: LD_ADDR_VAR 0 6
33348: PUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 255
33358: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33359: LD_INT 61
33361: PPUSH
33362: LD_VAR 0 6
33366: PPUSH
33367: CALL_OW 321
33371: PUSH
33372: LD_INT 2
33374: EQUAL
33375: IFFALSE 33385
// viewRange := 16 ;
33377: LD_ADDR_VAR 0 7
33381: PUSH
33382: LD_INT 16
33384: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33385: LD_VAR 0 1
33389: PPUSH
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 3
33399: PPUSH
33400: CALL_OW 297
33404: PUSH
33405: LD_VAR 0 5
33409: GREATER
33410: IFFALSE 33489
// begin ComMoveXY ( unit , x , y ) ;
33412: LD_VAR 0 1
33416: PPUSH
33417: LD_VAR 0 2
33421: PPUSH
33422: LD_VAR 0 3
33426: PPUSH
33427: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33431: LD_INT 35
33433: PPUSH
33434: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: CALL 70220 0 3
33457: NOT
33458: IFFALSE 33462
// exit ;
33460: GO 33716
// until GetDistUnitXY ( unit , x , y ) < dist ;
33462: LD_VAR 0 1
33466: PPUSH
33467: LD_VAR 0 2
33471: PPUSH
33472: LD_VAR 0 3
33476: PPUSH
33477: CALL_OW 297
33481: PUSH
33482: LD_VAR 0 5
33486: LESS
33487: IFFALSE 33431
// end ; ComTurnXY ( unit , x , y ) ;
33489: LD_VAR 0 1
33493: PPUSH
33494: LD_VAR 0 2
33498: PPUSH
33499: LD_VAR 0 3
33503: PPUSH
33504: CALL_OW 118
// wait ( 5 ) ;
33508: LD_INT 5
33510: PPUSH
33511: CALL_OW 67
// _d := GetDir ( unit ) ;
33515: LD_ADDR_VAR 0 10
33519: PUSH
33520: LD_VAR 0 1
33524: PPUSH
33525: CALL_OW 254
33529: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33530: LD_ADDR_VAR 0 8
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 250
33544: PPUSH
33545: LD_VAR 0 10
33549: PPUSH
33550: LD_VAR 0 5
33554: PPUSH
33555: CALL_OW 272
33559: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33560: LD_ADDR_VAR 0 9
33564: PUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 251
33574: PPUSH
33575: LD_VAR 0 10
33579: PPUSH
33580: LD_VAR 0 5
33584: PPUSH
33585: CALL_OW 273
33589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33590: LD_VAR 0 8
33594: PPUSH
33595: LD_VAR 0 9
33599: PPUSH
33600: CALL_OW 488
33604: NOT
33605: IFFALSE 33609
// exit ;
33607: GO 33716
// ComAnimCustom ( unit , 1 ) ;
33609: LD_VAR 0 1
33613: PPUSH
33614: LD_INT 1
33616: PPUSH
33617: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33621: LD_VAR 0 8
33625: PPUSH
33626: LD_VAR 0 9
33630: PPUSH
33631: LD_VAR 0 6
33635: PPUSH
33636: LD_VAR 0 7
33640: PPUSH
33641: CALL_OW 330
// repeat wait ( 1 ) ;
33645: LD_INT 1
33647: PPUSH
33648: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 316
33661: PUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 314
33671: OR
33672: PUSH
33673: LD_VAR 0 1
33677: PPUSH
33678: CALL_OW 302
33682: NOT
33683: OR
33684: PUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: CALL_OW 301
33694: OR
33695: IFFALSE 33645
// RemoveSeeing ( _x , _y , side ) ;
33697: LD_VAR 0 8
33701: PPUSH
33702: LD_VAR 0 9
33706: PPUSH
33707: LD_VAR 0 6
33711: PPUSH
33712: CALL_OW 331
// end ; end_of_file
33716: LD_VAR 0 4
33720: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33721: LD_INT 0
33723: PPUSH
33724: PPUSH
// if exist_mode then
33725: LD_VAR 0 2
33729: IFFALSE 33754
// unit := CreateCharacter ( prefix & ident ) else
33731: LD_ADDR_VAR 0 5
33735: PUSH
33736: LD_VAR 0 3
33740: PUSH
33741: LD_VAR 0 1
33745: STR
33746: PPUSH
33747: CALL_OW 34
33751: ST_TO_ADDR
33752: GO 33769
// unit := NewCharacter ( ident ) ;
33754: LD_ADDR_VAR 0 5
33758: PUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 25
33768: ST_TO_ADDR
// result := unit ;
33769: LD_ADDR_VAR 0 4
33773: PUSH
33774: LD_VAR 0 5
33778: ST_TO_ADDR
// end ;
33779: LD_VAR 0 4
33783: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33784: LD_INT 0
33786: PPUSH
33787: PPUSH
// if not side or not nation then
33788: LD_VAR 0 1
33792: NOT
33793: PUSH
33794: LD_VAR 0 2
33798: NOT
33799: OR
33800: IFFALSE 33804
// exit ;
33802: GO 34572
// case nation of nation_american :
33804: LD_VAR 0 2
33808: PUSH
33809: LD_INT 1
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 34031
33817: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33818: LD_ADDR_VAR 0 4
33822: PUSH
33823: LD_INT 35
33825: PUSH
33826: LD_INT 45
33828: PUSH
33829: LD_INT 46
33831: PUSH
33832: LD_INT 47
33834: PUSH
33835: LD_INT 82
33837: PUSH
33838: LD_INT 83
33840: PUSH
33841: LD_INT 84
33843: PUSH
33844: LD_INT 85
33846: PUSH
33847: LD_INT 86
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 6
33858: PUSH
33859: LD_INT 15
33861: PUSH
33862: LD_INT 16
33864: PUSH
33865: LD_INT 7
33867: PUSH
33868: LD_INT 12
33870: PUSH
33871: LD_INT 13
33873: PUSH
33874: LD_INT 10
33876: PUSH
33877: LD_INT 14
33879: PUSH
33880: LD_INT 20
33882: PUSH
33883: LD_INT 21
33885: PUSH
33886: LD_INT 22
33888: PUSH
33889: LD_INT 25
33891: PUSH
33892: LD_INT 32
33894: PUSH
33895: LD_INT 27
33897: PUSH
33898: LD_INT 36
33900: PUSH
33901: LD_INT 69
33903: PUSH
33904: LD_INT 39
33906: PUSH
33907: LD_INT 34
33909: PUSH
33910: LD_INT 40
33912: PUSH
33913: LD_INT 48
33915: PUSH
33916: LD_INT 49
33918: PUSH
33919: LD_INT 50
33921: PUSH
33922: LD_INT 51
33924: PUSH
33925: LD_INT 52
33927: PUSH
33928: LD_INT 53
33930: PUSH
33931: LD_INT 54
33933: PUSH
33934: LD_INT 55
33936: PUSH
33937: LD_INT 56
33939: PUSH
33940: LD_INT 57
33942: PUSH
33943: LD_INT 58
33945: PUSH
33946: LD_INT 59
33948: PUSH
33949: LD_INT 60
33951: PUSH
33952: LD_INT 61
33954: PUSH
33955: LD_INT 62
33957: PUSH
33958: LD_INT 80
33960: PUSH
33961: LD_INT 82
33963: PUSH
33964: LD_INT 83
33966: PUSH
33967: LD_INT 84
33969: PUSH
33970: LD_INT 85
33972: PUSH
33973: LD_INT 86
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
34029: GO 34496
34031: LD_INT 2
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34039
34037: GO 34265
34039: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34040: LD_ADDR_VAR 0 4
34044: PUSH
34045: LD_INT 35
34047: PUSH
34048: LD_INT 45
34050: PUSH
34051: LD_INT 46
34053: PUSH
34054: LD_INT 47
34056: PUSH
34057: LD_INT 82
34059: PUSH
34060: LD_INT 83
34062: PUSH
34063: LD_INT 84
34065: PUSH
34066: LD_INT 85
34068: PUSH
34069: LD_INT 87
34071: PUSH
34072: LD_INT 70
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 11
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 5
34089: PUSH
34090: LD_INT 6
34092: PUSH
34093: LD_INT 15
34095: PUSH
34096: LD_INT 18
34098: PUSH
34099: LD_INT 7
34101: PUSH
34102: LD_INT 17
34104: PUSH
34105: LD_INT 8
34107: PUSH
34108: LD_INT 20
34110: PUSH
34111: LD_INT 21
34113: PUSH
34114: LD_INT 22
34116: PUSH
34117: LD_INT 72
34119: PUSH
34120: LD_INT 26
34122: PUSH
34123: LD_INT 69
34125: PUSH
34126: LD_INT 39
34128: PUSH
34129: LD_INT 40
34131: PUSH
34132: LD_INT 41
34134: PUSH
34135: LD_INT 42
34137: PUSH
34138: LD_INT 43
34140: PUSH
34141: LD_INT 48
34143: PUSH
34144: LD_INT 49
34146: PUSH
34147: LD_INT 50
34149: PUSH
34150: LD_INT 51
34152: PUSH
34153: LD_INT 52
34155: PUSH
34156: LD_INT 53
34158: PUSH
34159: LD_INT 54
34161: PUSH
34162: LD_INT 55
34164: PUSH
34165: LD_INT 56
34167: PUSH
34168: LD_INT 60
34170: PUSH
34171: LD_INT 61
34173: PUSH
34174: LD_INT 62
34176: PUSH
34177: LD_INT 66
34179: PUSH
34180: LD_INT 67
34182: PUSH
34183: LD_INT 68
34185: PUSH
34186: LD_INT 81
34188: PUSH
34189: LD_INT 82
34191: PUSH
34192: LD_INT 83
34194: PUSH
34195: LD_INT 84
34197: PUSH
34198: LD_INT 85
34200: PUSH
34201: LD_INT 87
34203: PUSH
34204: LD_INT 88
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
34263: GO 34496
34265: LD_INT 3
34267: DOUBLE
34268: EQUAL
34269: IFTRUE 34273
34271: GO 34495
34273: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34274: LD_ADDR_VAR 0 4
34278: PUSH
34279: LD_INT 46
34281: PUSH
34282: LD_INT 47
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 82
34293: PUSH
34294: LD_INT 83
34296: PUSH
34297: LD_INT 84
34299: PUSH
34300: LD_INT 85
34302: PUSH
34303: LD_INT 86
34305: PUSH
34306: LD_INT 11
34308: PUSH
34309: LD_INT 9
34311: PUSH
34312: LD_INT 20
34314: PUSH
34315: LD_INT 19
34317: PUSH
34318: LD_INT 21
34320: PUSH
34321: LD_INT 24
34323: PUSH
34324: LD_INT 22
34326: PUSH
34327: LD_INT 25
34329: PUSH
34330: LD_INT 28
34332: PUSH
34333: LD_INT 29
34335: PUSH
34336: LD_INT 30
34338: PUSH
34339: LD_INT 31
34341: PUSH
34342: LD_INT 37
34344: PUSH
34345: LD_INT 38
34347: PUSH
34348: LD_INT 32
34350: PUSH
34351: LD_INT 27
34353: PUSH
34354: LD_INT 33
34356: PUSH
34357: LD_INT 69
34359: PUSH
34360: LD_INT 39
34362: PUSH
34363: LD_INT 34
34365: PUSH
34366: LD_INT 40
34368: PUSH
34369: LD_INT 71
34371: PUSH
34372: LD_INT 23
34374: PUSH
34375: LD_INT 44
34377: PUSH
34378: LD_INT 48
34380: PUSH
34381: LD_INT 49
34383: PUSH
34384: LD_INT 50
34386: PUSH
34387: LD_INT 51
34389: PUSH
34390: LD_INT 52
34392: PUSH
34393: LD_INT 53
34395: PUSH
34396: LD_INT 54
34398: PUSH
34399: LD_INT 55
34401: PUSH
34402: LD_INT 56
34404: PUSH
34405: LD_INT 57
34407: PUSH
34408: LD_INT 58
34410: PUSH
34411: LD_INT 59
34413: PUSH
34414: LD_INT 63
34416: PUSH
34417: LD_INT 64
34419: PUSH
34420: LD_INT 65
34422: PUSH
34423: LD_INT 82
34425: PUSH
34426: LD_INT 83
34428: PUSH
34429: LD_INT 84
34431: PUSH
34432: LD_INT 85
34434: PUSH
34435: LD_INT 86
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
34493: GO 34496
34495: POP
// if state > - 1 and state < 3 then
34496: LD_VAR 0 3
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: GREATER
34505: PUSH
34506: LD_VAR 0 3
34510: PUSH
34511: LD_INT 3
34513: LESS
34514: AND
34515: IFFALSE 34572
// for i in result do
34517: LD_ADDR_VAR 0 5
34521: PUSH
34522: LD_VAR 0 4
34526: PUSH
34527: FOR_IN
34528: IFFALSE 34570
// if GetTech ( i , side ) <> state then
34530: LD_VAR 0 5
34534: PPUSH
34535: LD_VAR 0 1
34539: PPUSH
34540: CALL_OW 321
34544: PUSH
34545: LD_VAR 0 3
34549: NONEQUAL
34550: IFFALSE 34568
// result := result diff i ;
34552: LD_ADDR_VAR 0 4
34556: PUSH
34557: LD_VAR 0 4
34561: PUSH
34562: LD_VAR 0 5
34566: DIFF
34567: ST_TO_ADDR
34568: GO 34527
34570: POP
34571: POP
// end ;
34572: LD_VAR 0 4
34576: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34577: LD_INT 0
34579: PPUSH
34580: PPUSH
34581: PPUSH
// result := true ;
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: LD_INT 1
34589: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: LD_VAR 0 2
34599: PPUSH
34600: CALL_OW 480
34604: ST_TO_ADDR
// if not tmp then
34605: LD_VAR 0 5
34609: NOT
34610: IFFALSE 34614
// exit ;
34612: GO 34663
// for i in tmp do
34614: LD_ADDR_VAR 0 4
34618: PUSH
34619: LD_VAR 0 5
34623: PUSH
34624: FOR_IN
34625: IFFALSE 34661
// if GetTech ( i , side ) <> state_researched then
34627: LD_VAR 0 4
34631: PPUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: CALL_OW 321
34641: PUSH
34642: LD_INT 2
34644: NONEQUAL
34645: IFFALSE 34659
// begin result := false ;
34647: LD_ADDR_VAR 0 3
34651: PUSH
34652: LD_INT 0
34654: ST_TO_ADDR
// exit ;
34655: POP
34656: POP
34657: GO 34663
// end ;
34659: GO 34624
34661: POP
34662: POP
// end ;
34663: LD_VAR 0 3
34667: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34668: LD_INT 0
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34683: LD_VAR 0 1
34687: NOT
34688: PUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 257
34698: PUSH
34699: LD_INT 9
34701: NONEQUAL
34702: OR
34703: IFFALSE 34707
// exit ;
34705: GO 35280
// side := GetSide ( unit ) ;
34707: LD_ADDR_VAR 0 9
34711: PUSH
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 255
34721: ST_TO_ADDR
// tech_space := tech_spacanom ;
34722: LD_ADDR_VAR 0 12
34726: PUSH
34727: LD_INT 29
34729: ST_TO_ADDR
// tech_time := tech_taurad ;
34730: LD_ADDR_VAR 0 13
34734: PUSH
34735: LD_INT 28
34737: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34738: LD_ADDR_VAR 0 11
34742: PUSH
34743: LD_VAR 0 1
34747: PPUSH
34748: CALL_OW 310
34752: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34753: LD_VAR 0 11
34757: PPUSH
34758: CALL_OW 247
34762: PUSH
34763: LD_INT 2
34765: EQUAL
34766: IFFALSE 34770
// exit ;
34768: GO 35280
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34770: LD_ADDR_VAR 0 8
34774: PUSH
34775: LD_INT 81
34777: PUSH
34778: LD_VAR 0 9
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: LD_INT 21
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PPUSH
34808: CALL_OW 69
34812: ST_TO_ADDR
// if not tmp then
34813: LD_VAR 0 8
34817: NOT
34818: IFFALSE 34822
// exit ;
34820: GO 35280
// if in_unit then
34822: LD_VAR 0 11
34826: IFFALSE 34850
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34828: LD_ADDR_VAR 0 10
34832: PUSH
34833: LD_VAR 0 8
34837: PPUSH
34838: LD_VAR 0 11
34842: PPUSH
34843: CALL_OW 74
34847: ST_TO_ADDR
34848: GO 34870
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34850: LD_ADDR_VAR 0 10
34854: PUSH
34855: LD_VAR 0 8
34859: PPUSH
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 74
34869: ST_TO_ADDR
// if not enemy then
34870: LD_VAR 0 10
34874: NOT
34875: IFFALSE 34879
// exit ;
34877: GO 35280
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34879: LD_VAR 0 11
34883: PUSH
34884: LD_VAR 0 11
34888: PPUSH
34889: LD_VAR 0 10
34893: PPUSH
34894: CALL_OW 296
34898: PUSH
34899: LD_INT 13
34901: GREATER
34902: AND
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: LD_VAR 0 10
34913: PPUSH
34914: CALL_OW 296
34918: PUSH
34919: LD_INT 12
34921: GREATER
34922: OR
34923: IFFALSE 34927
// exit ;
34925: GO 35280
// missile := [ 1 ] ;
34927: LD_ADDR_VAR 0 14
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34938: LD_VAR 0 9
34942: PPUSH
34943: LD_VAR 0 12
34947: PPUSH
34948: CALL_OW 325
34952: IFFALSE 34981
// missile := Replace ( missile , missile + 1 , 2 ) ;
34954: LD_ADDR_VAR 0 14
34958: PUSH
34959: LD_VAR 0 14
34963: PPUSH
34964: LD_VAR 0 14
34968: PUSH
34969: LD_INT 1
34971: PLUS
34972: PPUSH
34973: LD_INT 2
34975: PPUSH
34976: CALL_OW 1
34980: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34981: LD_VAR 0 9
34985: PPUSH
34986: LD_VAR 0 13
34990: PPUSH
34991: CALL_OW 325
34995: PUSH
34996: LD_VAR 0 10
35000: PPUSH
35001: CALL_OW 255
35005: PPUSH
35006: LD_VAR 0 13
35010: PPUSH
35011: CALL_OW 325
35015: NOT
35016: AND
35017: IFFALSE 35046
// missile := Replace ( missile , missile + 1 , 3 ) ;
35019: LD_ADDR_VAR 0 14
35023: PUSH
35024: LD_VAR 0 14
35028: PPUSH
35029: LD_VAR 0 14
35033: PUSH
35034: LD_INT 1
35036: PLUS
35037: PPUSH
35038: LD_INT 3
35040: PPUSH
35041: CALL_OW 1
35045: ST_TO_ADDR
// if missile < 2 then
35046: LD_VAR 0 14
35050: PUSH
35051: LD_INT 2
35053: LESS
35054: IFFALSE 35058
// exit ;
35056: GO 35280
// x := GetX ( enemy ) ;
35058: LD_ADDR_VAR 0 4
35062: PUSH
35063: LD_VAR 0 10
35067: PPUSH
35068: CALL_OW 250
35072: ST_TO_ADDR
// y := GetY ( enemy ) ;
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_VAR 0 10
35082: PPUSH
35083: CALL_OW 251
35087: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35088: LD_ADDR_VAR 0 6
35092: PUSH
35093: LD_VAR 0 4
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PPUSH
35102: LD_INT 1
35104: PPUSH
35105: CALL_OW 12
35109: PLUS
35110: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35111: LD_ADDR_VAR 0 7
35115: PUSH
35116: LD_VAR 0 5
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PPUSH
35125: LD_INT 1
35127: PPUSH
35128: CALL_OW 12
35132: PLUS
35133: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35134: LD_VAR 0 6
35138: PPUSH
35139: LD_VAR 0 7
35143: PPUSH
35144: CALL_OW 488
35148: NOT
35149: IFFALSE 35171
// begin _x := x ;
35151: LD_ADDR_VAR 0 6
35155: PUSH
35156: LD_VAR 0 4
35160: ST_TO_ADDR
// _y := y ;
35161: LD_ADDR_VAR 0 7
35165: PUSH
35166: LD_VAR 0 5
35170: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35171: LD_ADDR_VAR 0 3
35175: PUSH
35176: LD_INT 1
35178: PPUSH
35179: LD_VAR 0 14
35183: PPUSH
35184: CALL_OW 12
35188: ST_TO_ADDR
// case i of 1 :
35189: LD_VAR 0 3
35193: PUSH
35194: LD_INT 1
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35219
35202: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35203: LD_VAR 0 1
35207: PPUSH
35208: LD_VAR 0 10
35212: PPUSH
35213: CALL_OW 115
35217: GO 35280
35219: LD_INT 2
35221: DOUBLE
35222: EQUAL
35223: IFTRUE 35227
35225: GO 35249
35227: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35228: LD_VAR 0 1
35232: PPUSH
35233: LD_VAR 0 6
35237: PPUSH
35238: LD_VAR 0 7
35242: PPUSH
35243: CALL_OW 153
35247: GO 35280
35249: LD_INT 3
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35279
35257: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35258: LD_VAR 0 1
35262: PPUSH
35263: LD_VAR 0 6
35267: PPUSH
35268: LD_VAR 0 7
35272: PPUSH
35273: CALL_OW 154
35277: GO 35280
35279: POP
// end ;
35280: LD_VAR 0 2
35284: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35285: LD_INT 0
35287: PPUSH
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
// if not unit or not building then
35293: LD_VAR 0 1
35297: NOT
35298: PUSH
35299: LD_VAR 0 2
35303: NOT
35304: OR
35305: IFFALSE 35309
// exit ;
35307: GO 35467
// x := GetX ( building ) ;
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: LD_VAR 0 2
35318: PPUSH
35319: CALL_OW 250
35323: ST_TO_ADDR
// y := GetY ( building ) ;
35324: LD_ADDR_VAR 0 6
35328: PUSH
35329: LD_VAR 0 2
35333: PPUSH
35334: CALL_OW 251
35338: ST_TO_ADDR
// for i = 0 to 5 do
35339: LD_ADDR_VAR 0 4
35343: PUSH
35344: DOUBLE
35345: LD_INT 0
35347: DEC
35348: ST_TO_ADDR
35349: LD_INT 5
35351: PUSH
35352: FOR_TO
35353: IFFALSE 35465
// begin _x := ShiftX ( x , i , 3 ) ;
35355: LD_ADDR_VAR 0 7
35359: PUSH
35360: LD_VAR 0 5
35364: PPUSH
35365: LD_VAR 0 4
35369: PPUSH
35370: LD_INT 3
35372: PPUSH
35373: CALL_OW 272
35377: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35378: LD_ADDR_VAR 0 8
35382: PUSH
35383: LD_VAR 0 6
35387: PPUSH
35388: LD_VAR 0 4
35392: PPUSH
35393: LD_INT 3
35395: PPUSH
35396: CALL_OW 273
35400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35401: LD_VAR 0 7
35405: PPUSH
35406: LD_VAR 0 8
35410: PPUSH
35411: CALL_OW 488
35415: NOT
35416: IFFALSE 35420
// continue ;
35418: GO 35352
// if HexInfo ( _x , _y ) = 0 then
35420: LD_VAR 0 7
35424: PPUSH
35425: LD_VAR 0 8
35429: PPUSH
35430: CALL_OW 428
35434: PUSH
35435: LD_INT 0
35437: EQUAL
35438: IFFALSE 35463
// begin ComMoveXY ( unit , _x , _y ) ;
35440: LD_VAR 0 1
35444: PPUSH
35445: LD_VAR 0 7
35449: PPUSH
35450: LD_VAR 0 8
35454: PPUSH
35455: CALL_OW 111
// exit ;
35459: POP
35460: POP
35461: GO 35467
// end ; end ;
35463: GO 35352
35465: POP
35466: POP
// end ;
35467: LD_VAR 0 3
35471: RET
// export function ScanBase ( side , base_area ) ; begin
35472: LD_INT 0
35474: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_INT 81
35487: PUSH
35488: LD_VAR 0 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PPUSH
35497: CALL_OW 70
35501: ST_TO_ADDR
// end ;
35502: LD_VAR 0 3
35506: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
// result := false ;
35513: LD_ADDR_VAR 0 2
35517: PUSH
35518: LD_INT 0
35520: ST_TO_ADDR
// side := GetSide ( unit ) ;
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 255
35535: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35536: LD_ADDR_VAR 0 4
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 248
35550: ST_TO_ADDR
// case nat of 1 :
35551: LD_VAR 0 4
35555: PUSH
35556: LD_INT 1
35558: DOUBLE
35559: EQUAL
35560: IFTRUE 35564
35562: GO 35575
35564: POP
// tech := tech_lassight ; 2 :
35565: LD_ADDR_VAR 0 5
35569: PUSH
35570: LD_INT 12
35572: ST_TO_ADDR
35573: GO 35614
35575: LD_INT 2
35577: DOUBLE
35578: EQUAL
35579: IFTRUE 35583
35581: GO 35594
35583: POP
// tech := tech_mortar ; 3 :
35584: LD_ADDR_VAR 0 5
35588: PUSH
35589: LD_INT 41
35591: ST_TO_ADDR
35592: GO 35614
35594: LD_INT 3
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35602
35600: GO 35613
35602: POP
// tech := tech_bazooka ; end ;
35603: LD_ADDR_VAR 0 5
35607: PUSH
35608: LD_INT 44
35610: ST_TO_ADDR
35611: GO 35614
35613: POP
// if Researched ( side , tech ) then
35614: LD_VAR 0 3
35618: PPUSH
35619: LD_VAR 0 5
35623: PPUSH
35624: CALL_OW 325
35628: IFFALSE 35655
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35630: LD_ADDR_VAR 0 2
35634: PUSH
35635: LD_INT 5
35637: PUSH
35638: LD_INT 8
35640: PUSH
35641: LD_INT 9
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: PUSH
35649: LD_VAR 0 4
35653: ARRAY
35654: ST_TO_ADDR
// end ;
35655: LD_VAR 0 2
35659: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35660: LD_INT 0
35662: PPUSH
35663: PPUSH
35664: PPUSH
// if not mines then
35665: LD_VAR 0 2
35669: NOT
35670: IFFALSE 35674
// exit ;
35672: GO 35818
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35674: LD_ADDR_VAR 0 5
35678: PUSH
35679: LD_INT 81
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: LD_INT 21
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PPUSH
35712: CALL_OW 69
35716: ST_TO_ADDR
// for i in mines do
35717: LD_ADDR_VAR 0 4
35721: PUSH
35722: LD_VAR 0 2
35726: PUSH
35727: FOR_IN
35728: IFFALSE 35816
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35730: LD_VAR 0 4
35734: PUSH
35735: LD_INT 1
35737: ARRAY
35738: PPUSH
35739: LD_VAR 0 4
35743: PUSH
35744: LD_INT 2
35746: ARRAY
35747: PPUSH
35748: CALL_OW 458
35752: NOT
35753: IFFALSE 35757
// continue ;
35755: GO 35727
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35757: LD_VAR 0 4
35761: PUSH
35762: LD_INT 1
35764: ARRAY
35765: PPUSH
35766: LD_VAR 0 4
35770: PUSH
35771: LD_INT 2
35773: ARRAY
35774: PPUSH
35775: CALL_OW 428
35779: PUSH
35780: LD_VAR 0 5
35784: IN
35785: IFFALSE 35814
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35787: LD_VAR 0 4
35791: PUSH
35792: LD_INT 1
35794: ARRAY
35795: PPUSH
35796: LD_VAR 0 4
35800: PUSH
35801: LD_INT 2
35803: ARRAY
35804: PPUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 456
// end ;
35814: GO 35727
35816: POP
35817: POP
// end ;
35818: LD_VAR 0 3
35822: RET
// export function Count ( array ) ; begin
35823: LD_INT 0
35825: PPUSH
// result := array + 0 ;
35826: LD_ADDR_VAR 0 2
35830: PUSH
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 0
35838: PLUS
35839: ST_TO_ADDR
// end ;
35840: LD_VAR 0 2
35844: RET
// export function IsEmpty ( building ) ; begin
35845: LD_INT 0
35847: PPUSH
// if not building then
35848: LD_VAR 0 1
35852: NOT
35853: IFFALSE 35857
// exit ;
35855: GO 35900
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35857: LD_ADDR_VAR 0 2
35861: PUSH
35862: LD_VAR 0 1
35866: PUSH
35867: LD_INT 22
35869: PUSH
35870: LD_VAR 0 1
35874: PPUSH
35875: CALL_OW 255
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 58
35886: PUSH
35887: EMPTY
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PPUSH
35894: CALL_OW 69
35898: IN
35899: ST_TO_ADDR
// end ;
35900: LD_VAR 0 2
35904: RET
// export function IsNotFull ( building ) ; var places ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
// if not building then
35909: LD_VAR 0 1
35913: NOT
35914: IFFALSE 35918
// exit ;
35916: GO 35946
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 62
35933: PUSH
35934: EMPTY
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PPUSH
35941: CALL_OW 72
35945: ST_TO_ADDR
// end ;
35946: LD_VAR 0 2
35950: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35951: LD_INT 0
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
// tmp := [ ] ;
35957: LD_ADDR_VAR 0 3
35961: PUSH
35962: EMPTY
35963: ST_TO_ADDR
// list := [ ] ;
35964: LD_ADDR_VAR 0 5
35968: PUSH
35969: EMPTY
35970: ST_TO_ADDR
// for i = 16 to 25 do
35971: LD_ADDR_VAR 0 4
35975: PUSH
35976: DOUBLE
35977: LD_INT 16
35979: DEC
35980: ST_TO_ADDR
35981: LD_INT 25
35983: PUSH
35984: FOR_TO
35985: IFFALSE 36058
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35987: LD_ADDR_VAR 0 3
35991: PUSH
35992: LD_VAR 0 3
35996: PUSH
35997: LD_INT 22
35999: PUSH
36000: LD_VAR 0 1
36004: PPUSH
36005: CALL_OW 255
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 91
36016: PUSH
36017: LD_VAR 0 1
36021: PUSH
36022: LD_INT 6
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 30
36032: PUSH
36033: LD_VAR 0 4
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: PPUSH
36050: CALL_OW 69
36054: ADD
36055: ST_TO_ADDR
36056: GO 35984
36058: POP
36059: POP
// for i = 1 to tmp do
36060: LD_ADDR_VAR 0 4
36064: PUSH
36065: DOUBLE
36066: LD_INT 1
36068: DEC
36069: ST_TO_ADDR
36070: LD_VAR 0 3
36074: PUSH
36075: FOR_TO
36076: IFFALSE 36164
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36078: LD_ADDR_VAR 0 5
36082: PUSH
36083: LD_VAR 0 5
36087: PUSH
36088: LD_VAR 0 3
36092: PUSH
36093: LD_VAR 0 4
36097: ARRAY
36098: PPUSH
36099: CALL_OW 266
36103: PUSH
36104: LD_VAR 0 3
36108: PUSH
36109: LD_VAR 0 4
36113: ARRAY
36114: PPUSH
36115: CALL_OW 250
36119: PUSH
36120: LD_VAR 0 3
36124: PUSH
36125: LD_VAR 0 4
36129: ARRAY
36130: PPUSH
36131: CALL_OW 251
36135: PUSH
36136: LD_VAR 0 3
36140: PUSH
36141: LD_VAR 0 4
36145: ARRAY
36146: PPUSH
36147: CALL_OW 254
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: ADD
36161: ST_TO_ADDR
36162: GO 36075
36164: POP
36165: POP
// result := list ;
36166: LD_ADDR_VAR 0 2
36170: PUSH
36171: LD_VAR 0 5
36175: ST_TO_ADDR
// end ;
36176: LD_VAR 0 2
36180: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36181: LD_INT 0
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
// if not factory then
36190: LD_VAR 0 1
36194: NOT
36195: IFFALSE 36199
// exit ;
36197: GO 36792
// if control = control_apeman then
36199: LD_VAR 0 4
36203: PUSH
36204: LD_INT 5
36206: EQUAL
36207: IFFALSE 36316
// begin tmp := UnitsInside ( factory ) ;
36209: LD_ADDR_VAR 0 8
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 313
36223: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36224: LD_VAR 0 8
36228: PPUSH
36229: LD_INT 25
36231: PUSH
36232: LD_INT 12
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PPUSH
36239: CALL_OW 72
36243: NOT
36244: IFFALSE 36254
// control := control_manual ;
36246: LD_ADDR_VAR 0 4
36250: PUSH
36251: LD_INT 1
36253: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36254: LD_ADDR_VAR 0 8
36258: PUSH
36259: LD_VAR 0 1
36263: PPUSH
36264: CALL 35951 0 1
36268: ST_TO_ADDR
// if tmp then
36269: LD_VAR 0 8
36273: IFFALSE 36316
// begin for i in tmp do
36275: LD_ADDR_VAR 0 7
36279: PUSH
36280: LD_VAR 0 8
36284: PUSH
36285: FOR_IN
36286: IFFALSE 36314
// if i [ 1 ] = b_ext_radio then
36288: LD_VAR 0 7
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: PUSH
36297: LD_INT 22
36299: EQUAL
36300: IFFALSE 36312
// begin control := control_remote ;
36302: LD_ADDR_VAR 0 4
36306: PUSH
36307: LD_INT 2
36309: ST_TO_ADDR
// break ;
36310: GO 36314
// end ;
36312: GO 36285
36314: POP
36315: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36316: LD_VAR 0 1
36320: PPUSH
36321: LD_VAR 0 2
36325: PPUSH
36326: LD_VAR 0 3
36330: PPUSH
36331: LD_VAR 0 4
36335: PPUSH
36336: LD_VAR 0 5
36340: PPUSH
36341: CALL_OW 448
36345: IFFALSE 36380
// begin result := [ chassis , engine , control , weapon ] ;
36347: LD_ADDR_VAR 0 6
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_VAR 0 3
36361: PUSH
36362: LD_VAR 0 4
36366: PUSH
36367: LD_VAR 0 5
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// exit ;
36378: GO 36792
// end ; _chassis := AvailableChassisList ( factory ) ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 475
36394: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36395: LD_ADDR_VAR 0 11
36399: PUSH
36400: LD_VAR 0 1
36404: PPUSH
36405: CALL_OW 476
36409: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36410: LD_ADDR_VAR 0 12
36414: PUSH
36415: LD_VAR 0 1
36419: PPUSH
36420: CALL_OW 477
36424: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36425: LD_ADDR_VAR 0 10
36429: PUSH
36430: LD_VAR 0 1
36434: PPUSH
36435: CALL_OW 478
36439: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36440: LD_VAR 0 9
36444: NOT
36445: PUSH
36446: LD_VAR 0 11
36450: NOT
36451: OR
36452: PUSH
36453: LD_VAR 0 12
36457: NOT
36458: OR
36459: PUSH
36460: LD_VAR 0 10
36464: NOT
36465: OR
36466: IFFALSE 36501
// begin result := [ chassis , engine , control , weapon ] ;
36468: LD_ADDR_VAR 0 6
36472: PUSH
36473: LD_VAR 0 2
36477: PUSH
36478: LD_VAR 0 3
36482: PUSH
36483: LD_VAR 0 4
36487: PUSH
36488: LD_VAR 0 5
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// exit ;
36499: GO 36792
// end ; if not chassis in _chassis then
36501: LD_VAR 0 2
36505: PUSH
36506: LD_VAR 0 9
36510: IN
36511: NOT
36512: IFFALSE 36538
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36514: LD_ADDR_VAR 0 2
36518: PUSH
36519: LD_VAR 0 9
36523: PUSH
36524: LD_INT 1
36526: PPUSH
36527: LD_VAR 0 9
36531: PPUSH
36532: CALL_OW 12
36536: ARRAY
36537: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36538: LD_VAR 0 2
36542: PPUSH
36543: LD_VAR 0 3
36547: PPUSH
36548: CALL 36797 0 2
36552: NOT
36553: IFFALSE 36612
// repeat engine := _engine [ 1 ] ;
36555: LD_ADDR_VAR 0 3
36559: PUSH
36560: LD_VAR 0 11
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36569: LD_ADDR_VAR 0 11
36573: PUSH
36574: LD_VAR 0 11
36578: PPUSH
36579: LD_INT 1
36581: PPUSH
36582: CALL_OW 3
36586: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36587: LD_VAR 0 2
36591: PPUSH
36592: LD_VAR 0 3
36596: PPUSH
36597: CALL 36797 0 2
36601: PUSH
36602: LD_VAR 0 11
36606: PUSH
36607: EMPTY
36608: EQUAL
36609: OR
36610: IFFALSE 36555
// if not control in _control then
36612: LD_VAR 0 4
36616: PUSH
36617: LD_VAR 0 12
36621: IN
36622: NOT
36623: IFFALSE 36649
// control := _control [ rand ( 1 , _control ) ] ;
36625: LD_ADDR_VAR 0 4
36629: PUSH
36630: LD_VAR 0 12
36634: PUSH
36635: LD_INT 1
36637: PPUSH
36638: LD_VAR 0 12
36642: PPUSH
36643: CALL_OW 12
36647: ARRAY
36648: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36649: LD_VAR 0 2
36653: PPUSH
36654: LD_VAR 0 5
36658: PPUSH
36659: CALL 37017 0 2
36663: NOT
36664: IFFALSE 36723
// repeat weapon := _weapon [ 1 ] ;
36666: LD_ADDR_VAR 0 5
36670: PUSH
36671: LD_VAR 0 10
36675: PUSH
36676: LD_INT 1
36678: ARRAY
36679: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36680: LD_ADDR_VAR 0 10
36684: PUSH
36685: LD_VAR 0 10
36689: PPUSH
36690: LD_INT 1
36692: PPUSH
36693: CALL_OW 3
36697: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36698: LD_VAR 0 2
36702: PPUSH
36703: LD_VAR 0 5
36707: PPUSH
36708: CALL 37017 0 2
36712: PUSH
36713: LD_VAR 0 10
36717: PUSH
36718: EMPTY
36719: EQUAL
36720: OR
36721: IFFALSE 36666
// result := [ ] ;
36723: LD_ADDR_VAR 0 6
36727: PUSH
36728: EMPTY
36729: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36730: LD_VAR 0 1
36734: PPUSH
36735: LD_VAR 0 2
36739: PPUSH
36740: LD_VAR 0 3
36744: PPUSH
36745: LD_VAR 0 4
36749: PPUSH
36750: LD_VAR 0 5
36754: PPUSH
36755: CALL_OW 448
36759: IFFALSE 36792
// result := [ chassis , engine , control , weapon ] ;
36761: LD_ADDR_VAR 0 6
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_VAR 0 3
36775: PUSH
36776: LD_VAR 0 4
36780: PUSH
36781: LD_VAR 0 5
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: ST_TO_ADDR
// end ;
36792: LD_VAR 0 6
36796: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36797: LD_INT 0
36799: PPUSH
// if not chassis or not engine then
36800: LD_VAR 0 1
36804: NOT
36805: PUSH
36806: LD_VAR 0 2
36810: NOT
36811: OR
36812: IFFALSE 36816
// exit ;
36814: GO 37012
// case engine of engine_solar :
36816: LD_VAR 0 2
36820: PUSH
36821: LD_INT 2
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 36867
36829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 11
36837: PUSH
36838: LD_INT 12
36840: PUSH
36841: LD_INT 13
36843: PUSH
36844: LD_INT 14
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
36865: GO 36996
36867: LD_INT 1
36869: DOUBLE
36870: EQUAL
36871: IFTRUE 36875
36873: GO 36937
36875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36876: LD_ADDR_VAR 0 3
36880: PUSH
36881: LD_INT 11
36883: PUSH
36884: LD_INT 12
36886: PUSH
36887: LD_INT 13
36889: PUSH
36890: LD_INT 14
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 3
36901: PUSH
36902: LD_INT 4
36904: PUSH
36905: LD_INT 5
36907: PUSH
36908: LD_INT 21
36910: PUSH
36911: LD_INT 23
36913: PUSH
36914: LD_INT 22
36916: PUSH
36917: LD_INT 24
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
36935: GO 36996
36937: LD_INT 3
36939: DOUBLE
36940: EQUAL
36941: IFTRUE 36945
36943: GO 36995
36945: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36946: LD_ADDR_VAR 0 3
36950: PUSH
36951: LD_INT 13
36953: PUSH
36954: LD_INT 14
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: LD_INT 5
36968: PUSH
36969: LD_INT 21
36971: PUSH
36972: LD_INT 22
36974: PUSH
36975: LD_INT 23
36977: PUSH
36978: LD_INT 24
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
36993: GO 36996
36995: POP
// result := ( chassis in result ) ;
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_VAR 0 1
37005: PUSH
37006: LD_VAR 0 3
37010: IN
37011: ST_TO_ADDR
// end ;
37012: LD_VAR 0 3
37016: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37017: LD_INT 0
37019: PPUSH
// if not chassis or not weapon then
37020: LD_VAR 0 1
37024: NOT
37025: PUSH
37026: LD_VAR 0 2
37030: NOT
37031: OR
37032: IFFALSE 37036
// exit ;
37034: GO 38096
// case weapon of us_machine_gun :
37036: LD_VAR 0 2
37040: PUSH
37041: LD_INT 2
37043: DOUBLE
37044: EQUAL
37045: IFTRUE 37049
37047: GO 37079
37049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37050: LD_ADDR_VAR 0 3
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: LD_INT 4
37066: PUSH
37067: LD_INT 5
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
37077: GO 38080
37079: LD_INT 3
37081: DOUBLE
37082: EQUAL
37083: IFTRUE 37087
37085: GO 37117
37087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 3
37101: PUSH
37102: LD_INT 4
37104: PUSH
37105: LD_INT 5
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
37115: GO 38080
37117: LD_INT 11
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37155
37125: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: LD_INT 4
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: ST_TO_ADDR
37153: GO 38080
37155: LD_INT 4
37157: DOUBLE
37158: EQUAL
37159: IFTRUE 37163
37161: GO 37189
37163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 3
37174: PUSH
37175: LD_INT 4
37177: PUSH
37178: LD_INT 5
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
37187: GO 38080
37189: LD_INT 5
37191: DOUBLE
37192: EQUAL
37193: IFTRUE 37197
37195: GO 37223
37197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37198: LD_ADDR_VAR 0 3
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 4
37211: PUSH
37212: LD_INT 5
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: ST_TO_ADDR
37221: GO 38080
37223: LD_INT 9
37225: DOUBLE
37226: EQUAL
37227: IFTRUE 37231
37229: GO 37257
37231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: LD_INT 4
37245: PUSH
37246: LD_INT 5
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
37255: GO 38080
37257: LD_INT 7
37259: DOUBLE
37260: EQUAL
37261: IFTRUE 37265
37263: GO 37291
37265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37266: LD_ADDR_VAR 0 3
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: LD_INT 4
37279: PUSH
37280: LD_INT 5
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
37289: GO 38080
37291: LD_INT 12
37293: DOUBLE
37294: EQUAL
37295: IFTRUE 37299
37297: GO 37325
37299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37300: LD_ADDR_VAR 0 3
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 4
37313: PUSH
37314: LD_INT 5
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: ST_TO_ADDR
37323: GO 38080
37325: LD_INT 13
37327: DOUBLE
37328: EQUAL
37329: IFTRUE 37333
37331: GO 37359
37333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37334: LD_ADDR_VAR 0 3
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: LD_INT 4
37347: PUSH
37348: LD_INT 5
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
37357: GO 38080
37359: LD_INT 14
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37385
37367: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: ST_TO_ADDR
37383: GO 38080
37385: LD_INT 6
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37411
37393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: ST_TO_ADDR
37409: GO 38080
37411: LD_INT 10
37413: DOUBLE
37414: EQUAL
37415: IFTRUE 37419
37417: GO 37437
37419: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37420: LD_ADDR_VAR 0 3
37424: PUSH
37425: LD_INT 4
37427: PUSH
37428: LD_INT 5
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: ST_TO_ADDR
37435: GO 38080
37437: LD_INT 22
37439: DOUBLE
37440: EQUAL
37441: IFTRUE 37445
37443: GO 37471
37445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_INT 11
37453: PUSH
37454: LD_INT 12
37456: PUSH
37457: LD_INT 13
37459: PUSH
37460: LD_INT 14
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
37469: GO 38080
37471: LD_INT 23
37473: DOUBLE
37474: EQUAL
37475: IFTRUE 37479
37477: GO 37505
37479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37480: LD_ADDR_VAR 0 3
37484: PUSH
37485: LD_INT 11
37487: PUSH
37488: LD_INT 12
37490: PUSH
37491: LD_INT 13
37493: PUSH
37494: LD_INT 14
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
37503: GO 38080
37505: LD_INT 24
37507: DOUBLE
37508: EQUAL
37509: IFTRUE 37513
37511: GO 37539
37513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37514: LD_ADDR_VAR 0 3
37518: PUSH
37519: LD_INT 11
37521: PUSH
37522: LD_INT 12
37524: PUSH
37525: LD_INT 13
37527: PUSH
37528: LD_INT 14
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: ST_TO_ADDR
37537: GO 38080
37539: LD_INT 30
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37547
37545: GO 37573
37547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_INT 11
37555: PUSH
37556: LD_INT 12
37558: PUSH
37559: LD_INT 13
37561: PUSH
37562: LD_INT 14
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
37571: GO 38080
37573: LD_INT 25
37575: DOUBLE
37576: EQUAL
37577: IFTRUE 37581
37579: GO 37599
37581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37582: LD_ADDR_VAR 0 3
37586: PUSH
37587: LD_INT 13
37589: PUSH
37590: LD_INT 14
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: ST_TO_ADDR
37597: GO 38080
37599: LD_INT 27
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37607
37605: GO 37625
37607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: ST_TO_ADDR
37623: GO 38080
37625: LD_INT 92
37627: DOUBLE
37628: EQUAL
37629: IFTRUE 37633
37631: GO 37659
37633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37634: LD_ADDR_VAR 0 3
37638: PUSH
37639: LD_INT 11
37641: PUSH
37642: LD_INT 12
37644: PUSH
37645: LD_INT 13
37647: PUSH
37648: LD_INT 14
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: ST_TO_ADDR
37657: GO 38080
37659: LD_INT 28
37661: DOUBLE
37662: EQUAL
37663: IFTRUE 37667
37665: GO 37685
37667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37668: LD_ADDR_VAR 0 3
37672: PUSH
37673: LD_INT 13
37675: PUSH
37676: LD_INT 14
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: ST_TO_ADDR
37683: GO 38080
37685: LD_INT 29
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37693
37691: GO 37711
37693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: LD_INT 13
37701: PUSH
37702: LD_INT 14
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: ST_TO_ADDR
37709: GO 38080
37711: LD_INT 31
37713: DOUBLE
37714: EQUAL
37715: IFTRUE 37719
37717: GO 37737
37719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 13
37727: PUSH
37728: LD_INT 14
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: ST_TO_ADDR
37735: GO 38080
37737: LD_INT 26
37739: DOUBLE
37740: EQUAL
37741: IFTRUE 37745
37743: GO 37763
37745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37746: LD_ADDR_VAR 0 3
37750: PUSH
37751: LD_INT 13
37753: PUSH
37754: LD_INT 14
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: ST_TO_ADDR
37761: GO 38080
37763: LD_INT 42
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 37797
37771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_INT 21
37779: PUSH
37780: LD_INT 22
37782: PUSH
37783: LD_INT 23
37785: PUSH
37786: LD_INT 24
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
37795: GO 38080
37797: LD_INT 43
37799: DOUBLE
37800: EQUAL
37801: IFTRUE 37805
37803: GO 37831
37805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37806: LD_ADDR_VAR 0 3
37810: PUSH
37811: LD_INT 21
37813: PUSH
37814: LD_INT 22
37816: PUSH
37817: LD_INT 23
37819: PUSH
37820: LD_INT 24
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
37829: GO 38080
37831: LD_INT 44
37833: DOUBLE
37834: EQUAL
37835: IFTRUE 37839
37837: GO 37865
37839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_INT 21
37847: PUSH
37848: LD_INT 22
37850: PUSH
37851: LD_INT 23
37853: PUSH
37854: LD_INT 24
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
37863: GO 38080
37865: LD_INT 45
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 37899
37873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_INT 21
37881: PUSH
37882: LD_INT 22
37884: PUSH
37885: LD_INT 23
37887: PUSH
37888: LD_INT 24
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
37897: GO 38080
37899: LD_INT 49
37901: DOUBLE
37902: EQUAL
37903: IFTRUE 37907
37905: GO 37933
37907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37908: LD_ADDR_VAR 0 3
37912: PUSH
37913: LD_INT 21
37915: PUSH
37916: LD_INT 22
37918: PUSH
37919: LD_INT 23
37921: PUSH
37922: LD_INT 24
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: ST_TO_ADDR
37931: GO 38080
37933: LD_INT 51
37935: DOUBLE
37936: EQUAL
37937: IFTRUE 37941
37939: GO 37967
37941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37942: LD_ADDR_VAR 0 3
37946: PUSH
37947: LD_INT 21
37949: PUSH
37950: LD_INT 22
37952: PUSH
37953: LD_INT 23
37955: PUSH
37956: LD_INT 24
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
37965: GO 38080
37967: LD_INT 52
37969: DOUBLE
37970: EQUAL
37971: IFTRUE 37975
37973: GO 38001
37975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37976: LD_ADDR_VAR 0 3
37980: PUSH
37981: LD_INT 21
37983: PUSH
37984: LD_INT 22
37986: PUSH
37987: LD_INT 23
37989: PUSH
37990: LD_INT 24
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
37999: GO 38080
38001: LD_INT 53
38003: DOUBLE
38004: EQUAL
38005: IFTRUE 38009
38007: GO 38027
38009: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: LD_INT 23
38017: PUSH
38018: LD_INT 24
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: ST_TO_ADDR
38025: GO 38080
38027: LD_INT 46
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38035
38033: GO 38053
38035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38036: LD_ADDR_VAR 0 3
38040: PUSH
38041: LD_INT 23
38043: PUSH
38044: LD_INT 24
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: ST_TO_ADDR
38051: GO 38080
38053: LD_INT 47
38055: DOUBLE
38056: EQUAL
38057: IFTRUE 38061
38059: GO 38079
38061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38062: LD_ADDR_VAR 0 3
38066: PUSH
38067: LD_INT 23
38069: PUSH
38070: LD_INT 24
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: ST_TO_ADDR
38077: GO 38080
38079: POP
// result := ( chassis in result ) ;
38080: LD_ADDR_VAR 0 3
38084: PUSH
38085: LD_VAR 0 1
38089: PUSH
38090: LD_VAR 0 3
38094: IN
38095: ST_TO_ADDR
// end ;
38096: LD_VAR 0 3
38100: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38101: LD_INT 0
38103: PPUSH
38104: PPUSH
38105: PPUSH
38106: PPUSH
38107: PPUSH
38108: PPUSH
38109: PPUSH
// result := array ;
38110: LD_ADDR_VAR 0 5
38114: PUSH
38115: LD_VAR 0 1
38119: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38120: LD_VAR 0 1
38124: NOT
38125: PUSH
38126: LD_VAR 0 2
38130: NOT
38131: OR
38132: PUSH
38133: LD_VAR 0 3
38137: NOT
38138: OR
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_VAR 0 1
38149: GREATER
38150: OR
38151: PUSH
38152: LD_VAR 0 3
38156: PUSH
38157: LD_VAR 0 1
38161: GREATER
38162: OR
38163: IFFALSE 38167
// exit ;
38165: GO 38463
// if direction then
38167: LD_VAR 0 4
38171: IFFALSE 38235
// begin d := 1 ;
38173: LD_ADDR_VAR 0 9
38177: PUSH
38178: LD_INT 1
38180: ST_TO_ADDR
// if i_from > i_to then
38181: LD_VAR 0 2
38185: PUSH
38186: LD_VAR 0 3
38190: GREATER
38191: IFFALSE 38217
// length := ( array - i_from ) + i_to else
38193: LD_ADDR_VAR 0 11
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: LD_VAR 0 2
38207: MINUS
38208: PUSH
38209: LD_VAR 0 3
38213: PLUS
38214: ST_TO_ADDR
38215: GO 38233
// length := i_to - i_from ;
38217: LD_ADDR_VAR 0 11
38221: PUSH
38222: LD_VAR 0 3
38226: PUSH
38227: LD_VAR 0 2
38231: MINUS
38232: ST_TO_ADDR
// end else
38233: GO 38296
// begin d := - 1 ;
38235: LD_ADDR_VAR 0 9
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: ST_TO_ADDR
// if i_from > i_to then
38244: LD_VAR 0 2
38248: PUSH
38249: LD_VAR 0 3
38253: GREATER
38254: IFFALSE 38274
// length := i_from - i_to else
38256: LD_ADDR_VAR 0 11
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_VAR 0 3
38270: MINUS
38271: ST_TO_ADDR
38272: GO 38296
// length := ( array - i_to ) + i_from ;
38274: LD_ADDR_VAR 0 11
38278: PUSH
38279: LD_VAR 0 1
38283: PUSH
38284: LD_VAR 0 3
38288: MINUS
38289: PUSH
38290: LD_VAR 0 2
38294: PLUS
38295: ST_TO_ADDR
// end ; if not length then
38296: LD_VAR 0 11
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 38463
// tmp := array ;
38305: LD_ADDR_VAR 0 10
38309: PUSH
38310: LD_VAR 0 1
38314: ST_TO_ADDR
// for i = 1 to length do
38315: LD_ADDR_VAR 0 6
38319: PUSH
38320: DOUBLE
38321: LD_INT 1
38323: DEC
38324: ST_TO_ADDR
38325: LD_VAR 0 11
38329: PUSH
38330: FOR_TO
38331: IFFALSE 38451
// begin for j = 1 to array do
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: DOUBLE
38339: LD_INT 1
38341: DEC
38342: ST_TO_ADDR
38343: LD_VAR 0 1
38347: PUSH
38348: FOR_TO
38349: IFFALSE 38437
// begin k := j + d ;
38351: LD_ADDR_VAR 0 8
38355: PUSH
38356: LD_VAR 0 7
38360: PUSH
38361: LD_VAR 0 9
38365: PLUS
38366: ST_TO_ADDR
// if k > array then
38367: LD_VAR 0 8
38371: PUSH
38372: LD_VAR 0 1
38376: GREATER
38377: IFFALSE 38387
// k := 1 ;
38379: LD_ADDR_VAR 0 8
38383: PUSH
38384: LD_INT 1
38386: ST_TO_ADDR
// if not k then
38387: LD_VAR 0 8
38391: NOT
38392: IFFALSE 38404
// k := array ;
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_VAR 0 1
38403: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38404: LD_ADDR_VAR 0 10
38408: PUSH
38409: LD_VAR 0 10
38413: PPUSH
38414: LD_VAR 0 8
38418: PPUSH
38419: LD_VAR 0 1
38423: PUSH
38424: LD_VAR 0 7
38428: ARRAY
38429: PPUSH
38430: CALL_OW 1
38434: ST_TO_ADDR
// end ;
38435: GO 38348
38437: POP
38438: POP
// array := tmp ;
38439: LD_ADDR_VAR 0 1
38443: PUSH
38444: LD_VAR 0 10
38448: ST_TO_ADDR
// end ;
38449: GO 38330
38451: POP
38452: POP
// result := array ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_VAR 0 1
38462: ST_TO_ADDR
// end ;
38463: LD_VAR 0 5
38467: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
// result := 0 ;
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_INT 0
38479: ST_TO_ADDR
// if not array or not value in array then
38480: LD_VAR 0 1
38484: NOT
38485: PUSH
38486: LD_VAR 0 2
38490: PUSH
38491: LD_VAR 0 1
38495: IN
38496: NOT
38497: OR
38498: IFFALSE 38502
// exit ;
38500: GO 38556
// for i = 1 to array do
38502: LD_ADDR_VAR 0 4
38506: PUSH
38507: DOUBLE
38508: LD_INT 1
38510: DEC
38511: ST_TO_ADDR
38512: LD_VAR 0 1
38516: PUSH
38517: FOR_TO
38518: IFFALSE 38554
// if value = array [ i ] then
38520: LD_VAR 0 2
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: LD_VAR 0 4
38534: ARRAY
38535: EQUAL
38536: IFFALSE 38552
// begin result := i ;
38538: LD_ADDR_VAR 0 3
38542: PUSH
38543: LD_VAR 0 4
38547: ST_TO_ADDR
// exit ;
38548: POP
38549: POP
38550: GO 38556
// end ;
38552: GO 38517
38554: POP
38555: POP
// end ;
38556: LD_VAR 0 3
38560: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38561: LD_INT 0
38563: PPUSH
// vc_chassis := chassis ;
38564: LD_ADDR_OWVAR 37
38568: PUSH
38569: LD_VAR 0 1
38573: ST_TO_ADDR
// vc_engine := engine ;
38574: LD_ADDR_OWVAR 39
38578: PUSH
38579: LD_VAR 0 2
38583: ST_TO_ADDR
// vc_control := control ;
38584: LD_ADDR_OWVAR 38
38588: PUSH
38589: LD_VAR 0 3
38593: ST_TO_ADDR
// vc_weapon := weapon ;
38594: LD_ADDR_OWVAR 40
38598: PUSH
38599: LD_VAR 0 4
38603: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38604: LD_ADDR_OWVAR 41
38608: PUSH
38609: LD_VAR 0 5
38613: ST_TO_ADDR
// end ;
38614: LD_VAR 0 6
38618: RET
// export function WantPlant ( unit ) ; var task ; begin
38619: LD_INT 0
38621: PPUSH
38622: PPUSH
// result := false ;
38623: LD_ADDR_VAR 0 2
38627: PUSH
38628: LD_INT 0
38630: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38631: LD_ADDR_VAR 0 3
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 437
38645: ST_TO_ADDR
// if task then
38646: LD_VAR 0 3
38650: IFFALSE 38678
// if task [ 1 ] [ 1 ] = p then
38652: LD_VAR 0 3
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PUSH
38665: LD_STRING p
38667: EQUAL
38668: IFFALSE 38678
// result := true ;
38670: LD_ADDR_VAR 0 2
38674: PUSH
38675: LD_INT 1
38677: ST_TO_ADDR
// end ;
38678: LD_VAR 0 2
38682: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
// if pos < 1 then
38689: LD_VAR 0 2
38693: PUSH
38694: LD_INT 1
38696: LESS
38697: IFFALSE 38701
// exit ;
38699: GO 39004
// if pos = 1 then
38701: LD_VAR 0 2
38705: PUSH
38706: LD_INT 1
38708: EQUAL
38709: IFFALSE 38742
// result := Replace ( arr , pos [ 1 ] , value ) else
38711: LD_ADDR_VAR 0 4
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: LD_VAR 0 3
38734: PPUSH
38735: CALL_OW 1
38739: ST_TO_ADDR
38740: GO 39004
// begin tmp := arr ;
38742: LD_ADDR_VAR 0 6
38746: PUSH
38747: LD_VAR 0 1
38751: ST_TO_ADDR
// s_arr := [ tmp ] ;
38752: LD_ADDR_VAR 0 7
38756: PUSH
38757: LD_VAR 0 6
38761: PUSH
38762: EMPTY
38763: LIST
38764: ST_TO_ADDR
// for i = 1 to pos - 1 do
38765: LD_ADDR_VAR 0 5
38769: PUSH
38770: DOUBLE
38771: LD_INT 1
38773: DEC
38774: ST_TO_ADDR
38775: LD_VAR 0 2
38779: PUSH
38780: LD_INT 1
38782: MINUS
38783: PUSH
38784: FOR_TO
38785: IFFALSE 38830
// begin tmp := tmp [ pos [ i ] ] ;
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_VAR 0 6
38796: PUSH
38797: LD_VAR 0 2
38801: PUSH
38802: LD_VAR 0 5
38806: ARRAY
38807: ARRAY
38808: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38809: LD_ADDR_VAR 0 7
38813: PUSH
38814: LD_VAR 0 7
38818: PUSH
38819: LD_VAR 0 6
38823: PUSH
38824: EMPTY
38825: LIST
38826: ADD
38827: ST_TO_ADDR
// end ;
38828: GO 38784
38830: POP
38831: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 6
38841: PPUSH
38842: LD_VAR 0 2
38846: PUSH
38847: LD_VAR 0 2
38851: ARRAY
38852: PPUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: CALL_OW 1
38862: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38863: LD_ADDR_VAR 0 7
38867: PUSH
38868: LD_VAR 0 7
38872: PPUSH
38873: LD_VAR 0 7
38877: PPUSH
38878: LD_VAR 0 6
38882: PPUSH
38883: CALL_OW 1
38887: ST_TO_ADDR
// for i = s_arr downto 2 do
38888: LD_ADDR_VAR 0 5
38892: PUSH
38893: DOUBLE
38894: LD_VAR 0 7
38898: INC
38899: ST_TO_ADDR
38900: LD_INT 2
38902: PUSH
38903: FOR_DOWNTO
38904: IFFALSE 38988
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38906: LD_ADDR_VAR 0 6
38910: PUSH
38911: LD_VAR 0 7
38915: PUSH
38916: LD_VAR 0 5
38920: PUSH
38921: LD_INT 1
38923: MINUS
38924: ARRAY
38925: PPUSH
38926: LD_VAR 0 2
38930: PUSH
38931: LD_VAR 0 5
38935: PUSH
38936: LD_INT 1
38938: MINUS
38939: ARRAY
38940: PPUSH
38941: LD_VAR 0 7
38945: PUSH
38946: LD_VAR 0 5
38950: ARRAY
38951: PPUSH
38952: CALL_OW 1
38956: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 7
38966: PPUSH
38967: LD_VAR 0 5
38971: PUSH
38972: LD_INT 1
38974: MINUS
38975: PPUSH
38976: LD_VAR 0 6
38980: PPUSH
38981: CALL_OW 1
38985: ST_TO_ADDR
// end ;
38986: GO 38903
38988: POP
38989: POP
// result := s_arr [ 1 ] ;
38990: LD_ADDR_VAR 0 4
38994: PUSH
38995: LD_VAR 0 7
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: ST_TO_ADDR
// end ; end ;
39004: LD_VAR 0 4
39008: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39009: LD_INT 0
39011: PPUSH
39012: PPUSH
// if not list then
39013: LD_VAR 0 1
39017: NOT
39018: IFFALSE 39022
// exit ;
39020: GO 39113
// i := list [ pos1 ] ;
39022: LD_ADDR_VAR 0 5
39026: PUSH
39027: LD_VAR 0 1
39031: PUSH
39032: LD_VAR 0 2
39036: ARRAY
39037: ST_TO_ADDR
// if not i then
39038: LD_VAR 0 5
39042: NOT
39043: IFFALSE 39047
// exit ;
39045: GO 39113
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39047: LD_ADDR_VAR 0 1
39051: PUSH
39052: LD_VAR 0 1
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_VAR 0 1
39066: PUSH
39067: LD_VAR 0 3
39071: ARRAY
39072: PPUSH
39073: CALL_OW 1
39077: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39078: LD_ADDR_VAR 0 1
39082: PUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: LD_VAR 0 3
39092: PPUSH
39093: LD_VAR 0 5
39097: PPUSH
39098: CALL_OW 1
39102: ST_TO_ADDR
// result := list ;
39103: LD_ADDR_VAR 0 4
39107: PUSH
39108: LD_VAR 0 1
39112: ST_TO_ADDR
// end ;
39113: LD_VAR 0 4
39117: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39118: LD_INT 0
39120: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39121: LD_ADDR_VAR 0 5
39125: PUSH
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 250
39135: PPUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 251
39145: PPUSH
39146: LD_VAR 0 2
39150: PPUSH
39151: LD_VAR 0 3
39155: PPUSH
39156: LD_VAR 0 4
39160: PPUSH
39161: CALL 39539 0 5
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 5
39170: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
// if not list or not unit then
39177: LD_VAR 0 2
39181: NOT
39182: PUSH
39183: LD_VAR 0 1
39187: NOT
39188: OR
39189: IFFALSE 39193
// exit ;
39191: GO 39534
// result := [ ] ;
39193: LD_ADDR_VAR 0 5
39197: PUSH
39198: EMPTY
39199: ST_TO_ADDR
// for i in list do
39200: LD_ADDR_VAR 0 6
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: FOR_IN
39211: IFFALSE 39429
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39213: LD_ADDR_VAR 0 8
39217: PUSH
39218: LD_VAR 0 1
39222: PPUSH
39223: LD_VAR 0 6
39227: PUSH
39228: LD_INT 1
39230: ARRAY
39231: PPUSH
39232: LD_VAR 0 6
39236: PUSH
39237: LD_INT 2
39239: ARRAY
39240: PPUSH
39241: CALL_OW 297
39245: ST_TO_ADDR
// if not Count ( result ) then
39246: LD_VAR 0 5
39250: PPUSH
39251: CALL 35823 0 1
39255: NOT
39256: IFFALSE 39289
// begin result := Join ( result , [ i , tmp ] ) ;
39258: LD_ADDR_VAR 0 5
39262: PUSH
39263: LD_VAR 0 5
39267: PPUSH
39268: LD_VAR 0 6
39272: PUSH
39273: LD_VAR 0 8
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PPUSH
39282: CALL 71423 0 2
39286: ST_TO_ADDR
// continue ;
39287: GO 39210
// end ; if result [ result ] [ 2 ] <= tmp then
39289: LD_VAR 0 5
39293: PUSH
39294: LD_VAR 0 5
39298: ARRAY
39299: PUSH
39300: LD_INT 2
39302: ARRAY
39303: PUSH
39304: LD_VAR 0 8
39308: LESSEQUAL
39309: IFFALSE 39342
// result := Join ( result , [ i , tmp ] ) else
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_VAR 0 6
39325: PUSH
39326: LD_VAR 0 8
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PPUSH
39335: CALL 71423 0 2
39339: ST_TO_ADDR
39340: GO 39427
// begin for j := 1 to Count ( result ) do
39342: LD_ADDR_VAR 0 7
39346: PUSH
39347: DOUBLE
39348: LD_INT 1
39350: DEC
39351: ST_TO_ADDR
39352: LD_VAR 0 5
39356: PPUSH
39357: CALL 35823 0 1
39361: PUSH
39362: FOR_TO
39363: IFFALSE 39425
// begin if tmp < result [ j ] [ 2 ] then
39365: LD_VAR 0 8
39369: PUSH
39370: LD_VAR 0 5
39374: PUSH
39375: LD_VAR 0 7
39379: ARRAY
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: LESS
39385: IFFALSE 39423
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39387: LD_ADDR_VAR 0 5
39391: PUSH
39392: LD_VAR 0 5
39396: PPUSH
39397: LD_VAR 0 7
39401: PPUSH
39402: LD_VAR 0 6
39406: PUSH
39407: LD_VAR 0 8
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PPUSH
39416: CALL_OW 2
39420: ST_TO_ADDR
// break ;
39421: GO 39425
// end ; end ;
39423: GO 39362
39425: POP
39426: POP
// end ; end ;
39427: GO 39210
39429: POP
39430: POP
// if result and not asc then
39431: LD_VAR 0 5
39435: PUSH
39436: LD_VAR 0 3
39440: NOT
39441: AND
39442: IFFALSE 39459
// result := ReverseArray ( result ) ;
39444: LD_ADDR_VAR 0 5
39448: PUSH
39449: LD_VAR 0 5
39453: PPUSH
39454: CALL 66699 0 1
39458: ST_TO_ADDR
// tmp := [ ] ;
39459: LD_ADDR_VAR 0 8
39463: PUSH
39464: EMPTY
39465: ST_TO_ADDR
// if mode then
39466: LD_VAR 0 4
39470: IFFALSE 39534
// begin for i := 1 to result do
39472: LD_ADDR_VAR 0 6
39476: PUSH
39477: DOUBLE
39478: LD_INT 1
39480: DEC
39481: ST_TO_ADDR
39482: LD_VAR 0 5
39486: PUSH
39487: FOR_TO
39488: IFFALSE 39522
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39490: LD_ADDR_VAR 0 8
39494: PUSH
39495: LD_VAR 0 8
39499: PPUSH
39500: LD_VAR 0 5
39504: PUSH
39505: LD_VAR 0 6
39509: ARRAY
39510: PUSH
39511: LD_INT 1
39513: ARRAY
39514: PPUSH
39515: CALL 71423 0 2
39519: ST_TO_ADDR
39520: GO 39487
39522: POP
39523: POP
// result := tmp ;
39524: LD_ADDR_VAR 0 5
39528: PUSH
39529: LD_VAR 0 8
39533: ST_TO_ADDR
// end ; end ;
39534: LD_VAR 0 5
39538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
// if not list then
39545: LD_VAR 0 3
39549: NOT
39550: IFFALSE 39554
// exit ;
39552: GO 39942
// result := [ ] ;
39554: LD_ADDR_VAR 0 6
39558: PUSH
39559: EMPTY
39560: ST_TO_ADDR
// for i in list do
39561: LD_ADDR_VAR 0 7
39565: PUSH
39566: LD_VAR 0 3
39570: PUSH
39571: FOR_IN
39572: IFFALSE 39774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39574: LD_ADDR_VAR 0 9
39578: PUSH
39579: LD_VAR 0 7
39583: PPUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: LD_VAR 0 2
39593: PPUSH
39594: CALL_OW 297
39598: ST_TO_ADDR
// if not result then
39599: LD_VAR 0 6
39603: NOT
39604: IFFALSE 39630
// result := [ [ i , tmp ] ] else
39606: LD_ADDR_VAR 0 6
39610: PUSH
39611: LD_VAR 0 7
39615: PUSH
39616: LD_VAR 0 9
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: EMPTY
39626: LIST
39627: ST_TO_ADDR
39628: GO 39772
// begin if result [ result ] [ 2 ] < tmp then
39630: LD_VAR 0 6
39634: PUSH
39635: LD_VAR 0 6
39639: ARRAY
39640: PUSH
39641: LD_INT 2
39643: ARRAY
39644: PUSH
39645: LD_VAR 0 9
39649: LESS
39650: IFFALSE 39692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39652: LD_ADDR_VAR 0 6
39656: PUSH
39657: LD_VAR 0 6
39661: PPUSH
39662: LD_VAR 0 6
39666: PUSH
39667: LD_INT 1
39669: PLUS
39670: PPUSH
39671: LD_VAR 0 7
39675: PUSH
39676: LD_VAR 0 9
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PPUSH
39685: CALL_OW 2
39689: ST_TO_ADDR
39690: GO 39772
// for j = 1 to result do
39692: LD_ADDR_VAR 0 8
39696: PUSH
39697: DOUBLE
39698: LD_INT 1
39700: DEC
39701: ST_TO_ADDR
39702: LD_VAR 0 6
39706: PUSH
39707: FOR_TO
39708: IFFALSE 39770
// begin if tmp < result [ j ] [ 2 ] then
39710: LD_VAR 0 9
39714: PUSH
39715: LD_VAR 0 6
39719: PUSH
39720: LD_VAR 0 8
39724: ARRAY
39725: PUSH
39726: LD_INT 2
39728: ARRAY
39729: LESS
39730: IFFALSE 39768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39732: LD_ADDR_VAR 0 6
39736: PUSH
39737: LD_VAR 0 6
39741: PPUSH
39742: LD_VAR 0 8
39746: PPUSH
39747: LD_VAR 0 7
39751: PUSH
39752: LD_VAR 0 9
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PPUSH
39761: CALL_OW 2
39765: ST_TO_ADDR
// break ;
39766: GO 39770
// end ; end ;
39768: GO 39707
39770: POP
39771: POP
// end ; end ;
39772: GO 39571
39774: POP
39775: POP
// if result and not asc then
39776: LD_VAR 0 6
39780: PUSH
39781: LD_VAR 0 4
39785: NOT
39786: AND
39787: IFFALSE 39862
// begin tmp := result ;
39789: LD_ADDR_VAR 0 9
39793: PUSH
39794: LD_VAR 0 6
39798: ST_TO_ADDR
// for i = tmp downto 1 do
39799: LD_ADDR_VAR 0 7
39803: PUSH
39804: DOUBLE
39805: LD_VAR 0 9
39809: INC
39810: ST_TO_ADDR
39811: LD_INT 1
39813: PUSH
39814: FOR_DOWNTO
39815: IFFALSE 39860
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39817: LD_ADDR_VAR 0 6
39821: PUSH
39822: LD_VAR 0 6
39826: PPUSH
39827: LD_VAR 0 9
39831: PUSH
39832: LD_VAR 0 7
39836: MINUS
39837: PUSH
39838: LD_INT 1
39840: PLUS
39841: PPUSH
39842: LD_VAR 0 9
39846: PUSH
39847: LD_VAR 0 7
39851: ARRAY
39852: PPUSH
39853: CALL_OW 1
39857: ST_TO_ADDR
39858: GO 39814
39860: POP
39861: POP
// end ; tmp := [ ] ;
39862: LD_ADDR_VAR 0 9
39866: PUSH
39867: EMPTY
39868: ST_TO_ADDR
// if mode then
39869: LD_VAR 0 5
39873: IFFALSE 39942
// begin for i = 1 to result do
39875: LD_ADDR_VAR 0 7
39879: PUSH
39880: DOUBLE
39881: LD_INT 1
39883: DEC
39884: ST_TO_ADDR
39885: LD_VAR 0 6
39889: PUSH
39890: FOR_TO
39891: IFFALSE 39930
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39893: LD_ADDR_VAR 0 9
39897: PUSH
39898: LD_VAR 0 9
39902: PPUSH
39903: LD_VAR 0 7
39907: PPUSH
39908: LD_VAR 0 6
39912: PUSH
39913: LD_VAR 0 7
39917: ARRAY
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PPUSH
39923: CALL_OW 1
39927: ST_TO_ADDR
39928: GO 39890
39930: POP
39931: POP
// result := tmp ;
39932: LD_ADDR_VAR 0 6
39936: PUSH
39937: LD_VAR 0 9
39941: ST_TO_ADDR
// end ; end ;
39942: LD_VAR 0 6
39946: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39947: LD_INT 0
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
39954: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39955: LD_ADDR_VAR 0 5
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: ST_TO_ADDR
// if not x or not y then
39977: LD_VAR 0 2
39981: NOT
39982: PUSH
39983: LD_VAR 0 3
39987: NOT
39988: OR
39989: IFFALSE 39993
// exit ;
39991: GO 41643
// if not range then
39993: LD_VAR 0 4
39997: NOT
39998: IFFALSE 40008
// range := 10 ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_INT 10
40007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40008: LD_ADDR_VAR 0 8
40012: PUSH
40013: LD_INT 81
40015: PUSH
40016: LD_VAR 0 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 92
40027: PUSH
40028: LD_VAR 0 2
40032: PUSH
40033: LD_VAR 0 3
40037: PUSH
40038: LD_VAR 0 4
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 3
40051: PUSH
40052: LD_INT 21
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: PPUSH
40071: CALL_OW 69
40075: ST_TO_ADDR
// if not tmp then
40076: LD_VAR 0 8
40080: NOT
40081: IFFALSE 40085
// exit ;
40083: GO 41643
// for i in tmp do
40085: LD_ADDR_VAR 0 6
40089: PUSH
40090: LD_VAR 0 8
40094: PUSH
40095: FOR_IN
40096: IFFALSE 41618
// begin points := [ 0 , 0 , 0 ] ;
40098: LD_ADDR_VAR 0 9
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: ST_TO_ADDR
// bpoints := 1 ;
40117: LD_ADDR_VAR 0 10
40121: PUSH
40122: LD_INT 1
40124: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40125: LD_VAR 0 6
40129: PPUSH
40130: CALL_OW 247
40134: PUSH
40135: LD_INT 1
40137: DOUBLE
40138: EQUAL
40139: IFTRUE 40143
40141: GO 40721
40143: POP
// begin if GetClass ( i ) = 1 then
40144: LD_VAR 0 6
40148: PPUSH
40149: CALL_OW 257
40153: PUSH
40154: LD_INT 1
40156: EQUAL
40157: IFFALSE 40178
// points := [ 10 , 5 , 3 ] ;
40159: LD_ADDR_VAR 0 9
40163: PUSH
40164: LD_INT 10
40166: PUSH
40167: LD_INT 5
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40178: LD_VAR 0 6
40182: PPUSH
40183: CALL_OW 257
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 4
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: IN
40202: IFFALSE 40223
// points := [ 3 , 2 , 1 ] ;
40204: LD_ADDR_VAR 0 9
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40223: LD_VAR 0 6
40227: PPUSH
40228: CALL_OW 257
40232: PUSH
40233: LD_INT 5
40235: EQUAL
40236: IFFALSE 40257
// points := [ 130 , 5 , 2 ] ;
40238: LD_ADDR_VAR 0 9
40242: PUSH
40243: LD_INT 130
40245: PUSH
40246: LD_INT 5
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40257: LD_VAR 0 6
40261: PPUSH
40262: CALL_OW 257
40266: PUSH
40267: LD_INT 8
40269: EQUAL
40270: IFFALSE 40291
// points := [ 35 , 35 , 30 ] ;
40272: LD_ADDR_VAR 0 9
40276: PUSH
40277: LD_INT 35
40279: PUSH
40280: LD_INT 35
40282: PUSH
40283: LD_INT 30
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40291: LD_VAR 0 6
40295: PPUSH
40296: CALL_OW 257
40300: PUSH
40301: LD_INT 9
40303: EQUAL
40304: IFFALSE 40325
// points := [ 20 , 55 , 40 ] ;
40306: LD_ADDR_VAR 0 9
40310: PUSH
40311: LD_INT 20
40313: PUSH
40314: LD_INT 55
40316: PUSH
40317: LD_INT 40
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40325: LD_VAR 0 6
40329: PPUSH
40330: CALL_OW 257
40334: PUSH
40335: LD_INT 12
40337: PUSH
40338: LD_INT 16
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: IN
40345: IFFALSE 40366
// points := [ 5 , 3 , 2 ] ;
40347: LD_ADDR_VAR 0 9
40351: PUSH
40352: LD_INT 5
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40366: LD_VAR 0 6
40370: PPUSH
40371: CALL_OW 257
40375: PUSH
40376: LD_INT 17
40378: EQUAL
40379: IFFALSE 40400
// points := [ 100 , 50 , 75 ] ;
40381: LD_ADDR_VAR 0 9
40385: PUSH
40386: LD_INT 100
40388: PUSH
40389: LD_INT 50
40391: PUSH
40392: LD_INT 75
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40400: LD_VAR 0 6
40404: PPUSH
40405: CALL_OW 257
40409: PUSH
40410: LD_INT 15
40412: EQUAL
40413: IFFALSE 40434
// points := [ 10 , 5 , 3 ] ;
40415: LD_ADDR_VAR 0 9
40419: PUSH
40420: LD_INT 10
40422: PUSH
40423: LD_INT 5
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40434: LD_VAR 0 6
40438: PPUSH
40439: CALL_OW 257
40443: PUSH
40444: LD_INT 14
40446: EQUAL
40447: IFFALSE 40468
// points := [ 10 , 0 , 0 ] ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_INT 10
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40468: LD_VAR 0 6
40472: PPUSH
40473: CALL_OW 257
40477: PUSH
40478: LD_INT 11
40480: EQUAL
40481: IFFALSE 40502
// points := [ 30 , 10 , 5 ] ;
40483: LD_ADDR_VAR 0 9
40487: PUSH
40488: LD_INT 30
40490: PUSH
40491: LD_INT 10
40493: PUSH
40494: LD_INT 5
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_INT 5
40509: PPUSH
40510: CALL_OW 321
40514: PUSH
40515: LD_INT 2
40517: EQUAL
40518: IFFALSE 40535
// bpoints := bpoints * 1.8 ;
40520: LD_ADDR_VAR 0 10
40524: PUSH
40525: LD_VAR 0 10
40529: PUSH
40530: LD_REAL  1.80000000000000E+0000
40533: MUL
40534: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40535: LD_VAR 0 6
40539: PPUSH
40540: CALL_OW 257
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: IN
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: LD_INT 51
40571: PPUSH
40572: CALL_OW 321
40576: PUSH
40577: LD_INT 2
40579: EQUAL
40580: AND
40581: IFFALSE 40598
// bpoints := bpoints * 1.2 ;
40583: LD_ADDR_VAR 0 10
40587: PUSH
40588: LD_VAR 0 10
40592: PUSH
40593: LD_REAL  1.20000000000000E+0000
40596: MUL
40597: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40598: LD_VAR 0 6
40602: PPUSH
40603: CALL_OW 257
40607: PUSH
40608: LD_INT 5
40610: PUSH
40611: LD_INT 7
40613: PUSH
40614: LD_INT 9
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: IN
40622: PUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: LD_INT 52
40630: PPUSH
40631: CALL_OW 321
40635: PUSH
40636: LD_INT 2
40638: EQUAL
40639: AND
40640: IFFALSE 40657
// bpoints := bpoints * 1.5 ;
40642: LD_ADDR_VAR 0 10
40646: PUSH
40647: LD_VAR 0 10
40651: PUSH
40652: LD_REAL  1.50000000000000E+0000
40655: MUL
40656: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40657: LD_VAR 0 1
40661: PPUSH
40662: LD_INT 66
40664: PPUSH
40665: CALL_OW 321
40669: PUSH
40670: LD_INT 2
40672: EQUAL
40673: IFFALSE 40690
// bpoints := bpoints * 1.1 ;
40675: LD_ADDR_VAR 0 10
40679: PUSH
40680: LD_VAR 0 10
40684: PUSH
40685: LD_REAL  1.10000000000000E+0000
40688: MUL
40689: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40690: LD_ADDR_VAR 0 10
40694: PUSH
40695: LD_VAR 0 10
40699: PUSH
40700: LD_VAR 0 6
40704: PPUSH
40705: LD_INT 1
40707: PPUSH
40708: CALL_OW 259
40712: PUSH
40713: LD_REAL  1.15000000000000E+0000
40716: MUL
40717: MUL
40718: ST_TO_ADDR
// end ; unit_vehicle :
40719: GO 41547
40721: LD_INT 2
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 41535
40729: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 264
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 42
40745: PUSH
40746: LD_INT 24
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: IN
40754: IFFALSE 40775
// points := [ 25 , 5 , 3 ] ;
40756: LD_ADDR_VAR 0 9
40760: PUSH
40761: LD_INT 25
40763: PUSH
40764: LD_INT 5
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40775: LD_VAR 0 6
40779: PPUSH
40780: CALL_OW 264
40784: PUSH
40785: LD_INT 4
40787: PUSH
40788: LD_INT 43
40790: PUSH
40791: LD_INT 25
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: LIST
40798: IN
40799: IFFALSE 40820
// points := [ 40 , 15 , 5 ] ;
40801: LD_ADDR_VAR 0 9
40805: PUSH
40806: LD_INT 40
40808: PUSH
40809: LD_INT 15
40811: PUSH
40812: LD_INT 5
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40820: LD_VAR 0 6
40824: PPUSH
40825: CALL_OW 264
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: LD_INT 23
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: IN
40840: IFFALSE 40861
// points := [ 7 , 25 , 8 ] ;
40842: LD_ADDR_VAR 0 9
40846: PUSH
40847: LD_INT 7
40849: PUSH
40850: LD_INT 25
40852: PUSH
40853: LD_INT 8
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40861: LD_VAR 0 6
40865: PPUSH
40866: CALL_OW 264
40870: PUSH
40871: LD_INT 5
40873: PUSH
40874: LD_INT 27
40876: PUSH
40877: LD_INT 44
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: IN
40885: IFFALSE 40906
// points := [ 14 , 50 , 16 ] ;
40887: LD_ADDR_VAR 0 9
40891: PUSH
40892: LD_INT 14
40894: PUSH
40895: LD_INT 50
40897: PUSH
40898: LD_INT 16
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40906: LD_VAR 0 6
40910: PPUSH
40911: CALL_OW 264
40915: PUSH
40916: LD_INT 6
40918: PUSH
40919: LD_INT 46
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: IN
40926: IFFALSE 40947
// points := [ 32 , 120 , 70 ] ;
40928: LD_ADDR_VAR 0 9
40932: PUSH
40933: LD_INT 32
40935: PUSH
40936: LD_INT 120
40938: PUSH
40939: LD_INT 70
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40947: LD_VAR 0 6
40951: PPUSH
40952: CALL_OW 264
40956: PUSH
40957: LD_INT 7
40959: PUSH
40960: LD_INT 28
40962: PUSH
40963: LD_INT 45
40965: PUSH
40966: LD_INT 92
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: IN
40975: IFFALSE 40996
// points := [ 35 , 20 , 45 ] ;
40977: LD_ADDR_VAR 0 9
40981: PUSH
40982: LD_INT 35
40984: PUSH
40985: LD_INT 20
40987: PUSH
40988: LD_INT 45
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40996: LD_VAR 0 6
41000: PPUSH
41001: CALL_OW 264
41005: PUSH
41006: LD_INT 47
41008: PUSH
41009: EMPTY
41010: LIST
41011: IN
41012: IFFALSE 41033
// points := [ 67 , 45 , 75 ] ;
41014: LD_ADDR_VAR 0 9
41018: PUSH
41019: LD_INT 67
41021: PUSH
41022: LD_INT 45
41024: PUSH
41025: LD_INT 75
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41033: LD_VAR 0 6
41037: PPUSH
41038: CALL_OW 264
41042: PUSH
41043: LD_INT 26
41045: PUSH
41046: EMPTY
41047: LIST
41048: IN
41049: IFFALSE 41070
// points := [ 120 , 30 , 80 ] ;
41051: LD_ADDR_VAR 0 9
41055: PUSH
41056: LD_INT 120
41058: PUSH
41059: LD_INT 30
41061: PUSH
41062: LD_INT 80
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41070: LD_VAR 0 6
41074: PPUSH
41075: CALL_OW 264
41079: PUSH
41080: LD_INT 22
41082: PUSH
41083: EMPTY
41084: LIST
41085: IN
41086: IFFALSE 41107
// points := [ 40 , 1 , 1 ] ;
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: LD_INT 40
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41107: LD_VAR 0 6
41111: PPUSH
41112: CALL_OW 264
41116: PUSH
41117: LD_INT 29
41119: PUSH
41120: EMPTY
41121: LIST
41122: IN
41123: IFFALSE 41144
// points := [ 70 , 200 , 400 ] ;
41125: LD_ADDR_VAR 0 9
41129: PUSH
41130: LD_INT 70
41132: PUSH
41133: LD_INT 200
41135: PUSH
41136: LD_INT 400
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41144: LD_VAR 0 6
41148: PPUSH
41149: CALL_OW 264
41153: PUSH
41154: LD_INT 14
41156: PUSH
41157: LD_INT 53
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: IN
41164: IFFALSE 41185
// points := [ 40 , 10 , 20 ] ;
41166: LD_ADDR_VAR 0 9
41170: PUSH
41171: LD_INT 40
41173: PUSH
41174: LD_INT 10
41176: PUSH
41177: LD_INT 20
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41185: LD_VAR 0 6
41189: PPUSH
41190: CALL_OW 264
41194: PUSH
41195: LD_INT 9
41197: PUSH
41198: EMPTY
41199: LIST
41200: IN
41201: IFFALSE 41222
// points := [ 5 , 70 , 20 ] ;
41203: LD_ADDR_VAR 0 9
41207: PUSH
41208: LD_INT 5
41210: PUSH
41211: LD_INT 70
41213: PUSH
41214: LD_INT 20
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: LIST
41221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41222: LD_VAR 0 6
41226: PPUSH
41227: CALL_OW 264
41231: PUSH
41232: LD_INT 10
41234: PUSH
41235: EMPTY
41236: LIST
41237: IN
41238: IFFALSE 41259
// points := [ 35 , 110 , 70 ] ;
41240: LD_ADDR_VAR 0 9
41244: PUSH
41245: LD_INT 35
41247: PUSH
41248: LD_INT 110
41250: PUSH
41251: LD_INT 70
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41259: LD_VAR 0 6
41263: PPUSH
41264: CALL_OW 265
41268: PUSH
41269: LD_INT 25
41271: EQUAL
41272: IFFALSE 41293
// points := [ 80 , 65 , 100 ] ;
41274: LD_ADDR_VAR 0 9
41278: PUSH
41279: LD_INT 80
41281: PUSH
41282: LD_INT 65
41284: PUSH
41285: LD_INT 100
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41293: LD_VAR 0 6
41297: PPUSH
41298: CALL_OW 263
41302: PUSH
41303: LD_INT 1
41305: EQUAL
41306: IFFALSE 41341
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41308: LD_ADDR_VAR 0 10
41312: PUSH
41313: LD_VAR 0 10
41317: PUSH
41318: LD_VAR 0 6
41322: PPUSH
41323: CALL_OW 311
41327: PPUSH
41328: LD_INT 3
41330: PPUSH
41331: CALL_OW 259
41335: PUSH
41336: LD_INT 4
41338: MUL
41339: MUL
41340: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41341: LD_VAR 0 6
41345: PPUSH
41346: CALL_OW 263
41350: PUSH
41351: LD_INT 2
41353: EQUAL
41354: IFFALSE 41405
// begin j := IsControledBy ( i ) ;
41356: LD_ADDR_VAR 0 7
41360: PUSH
41361: LD_VAR 0 6
41365: PPUSH
41366: CALL_OW 312
41370: ST_TO_ADDR
// if j then
41371: LD_VAR 0 7
41375: IFFALSE 41405
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41377: LD_ADDR_VAR 0 10
41381: PUSH
41382: LD_VAR 0 10
41386: PUSH
41387: LD_VAR 0 7
41391: PPUSH
41392: LD_INT 3
41394: PPUSH
41395: CALL_OW 259
41399: PUSH
41400: LD_INT 3
41402: MUL
41403: MUL
41404: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41405: LD_VAR 0 6
41409: PPUSH
41410: CALL_OW 264
41414: PUSH
41415: LD_INT 5
41417: PUSH
41418: LD_INT 6
41420: PUSH
41421: LD_INT 46
41423: PUSH
41424: LD_INT 44
41426: PUSH
41427: LD_INT 47
41429: PUSH
41430: LD_INT 45
41432: PUSH
41433: LD_INT 28
41435: PUSH
41436: LD_INT 7
41438: PUSH
41439: LD_INT 27
41441: PUSH
41442: LD_INT 29
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: IN
41457: PUSH
41458: LD_VAR 0 1
41462: PPUSH
41463: LD_INT 52
41465: PPUSH
41466: CALL_OW 321
41470: PUSH
41471: LD_INT 2
41473: EQUAL
41474: AND
41475: IFFALSE 41492
// bpoints := bpoints * 1.2 ;
41477: LD_ADDR_VAR 0 10
41481: PUSH
41482: LD_VAR 0 10
41486: PUSH
41487: LD_REAL  1.20000000000000E+0000
41490: MUL
41491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41492: LD_VAR 0 6
41496: PPUSH
41497: CALL_OW 264
41501: PUSH
41502: LD_INT 6
41504: PUSH
41505: LD_INT 46
41507: PUSH
41508: LD_INT 47
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: IN
41516: IFFALSE 41533
// bpoints := bpoints * 1.2 ;
41518: LD_ADDR_VAR 0 10
41522: PUSH
41523: LD_VAR 0 10
41527: PUSH
41528: LD_REAL  1.20000000000000E+0000
41531: MUL
41532: ST_TO_ADDR
// end ; unit_building :
41533: GO 41547
41535: LD_INT 3
41537: DOUBLE
41538: EQUAL
41539: IFTRUE 41543
41541: GO 41546
41543: POP
// ; end ;
41544: GO 41547
41546: POP
// for j = 1 to 3 do
41547: LD_ADDR_VAR 0 7
41551: PUSH
41552: DOUBLE
41553: LD_INT 1
41555: DEC
41556: ST_TO_ADDR
41557: LD_INT 3
41559: PUSH
41560: FOR_TO
41561: IFFALSE 41614
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41563: LD_ADDR_VAR 0 5
41567: PUSH
41568: LD_VAR 0 5
41572: PPUSH
41573: LD_VAR 0 7
41577: PPUSH
41578: LD_VAR 0 5
41582: PUSH
41583: LD_VAR 0 7
41587: ARRAY
41588: PUSH
41589: LD_VAR 0 9
41593: PUSH
41594: LD_VAR 0 7
41598: ARRAY
41599: PUSH
41600: LD_VAR 0 10
41604: MUL
41605: PLUS
41606: PPUSH
41607: CALL_OW 1
41611: ST_TO_ADDR
41612: GO 41560
41614: POP
41615: POP
// end ;
41616: GO 40095
41618: POP
41619: POP
// result := Replace ( result , 4 , tmp ) ;
41620: LD_ADDR_VAR 0 5
41624: PUSH
41625: LD_VAR 0 5
41629: PPUSH
41630: LD_INT 4
41632: PPUSH
41633: LD_VAR 0 8
41637: PPUSH
41638: CALL_OW 1
41642: ST_TO_ADDR
// end ;
41643: LD_VAR 0 5
41647: RET
// export function DangerAtRange ( unit , range ) ; begin
41648: LD_INT 0
41650: PPUSH
// if not unit then
41651: LD_VAR 0 1
41655: NOT
41656: IFFALSE 41660
// exit ;
41658: GO 41705
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: CALL_OW 255
41674: PPUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 250
41684: PPUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL_OW 251
41694: PPUSH
41695: LD_VAR 0 2
41699: PPUSH
41700: CALL 39947 0 4
41704: ST_TO_ADDR
// end ;
41705: LD_VAR 0 3
41709: RET
// export function DangerInArea ( side , area ) ; begin
41710: LD_INT 0
41712: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: LD_INT 81
41725: PUSH
41726: LD_VAR 0 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PPUSH
41735: CALL_OW 70
41739: ST_TO_ADDR
// end ;
41740: LD_VAR 0 3
41744: RET
// export function IsExtension ( b ) ; begin
41745: LD_INT 0
41747: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41748: LD_ADDR_VAR 0 2
41752: PUSH
41753: LD_VAR 0 1
41757: PUSH
41758: LD_INT 23
41760: PUSH
41761: LD_INT 20
41763: PUSH
41764: LD_INT 22
41766: PUSH
41767: LD_INT 17
41769: PUSH
41770: LD_INT 24
41772: PUSH
41773: LD_INT 21
41775: PUSH
41776: LD_INT 19
41778: PUSH
41779: LD_INT 16
41781: PUSH
41782: LD_INT 25
41784: PUSH
41785: LD_INT 18
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: IN
41800: ST_TO_ADDR
// end ;
41801: LD_VAR 0 2
41805: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41806: LD_INT 0
41808: PPUSH
41809: PPUSH
41810: PPUSH
// result := [ ] ;
41811: LD_ADDR_VAR 0 4
41815: PUSH
41816: EMPTY
41817: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41818: LD_ADDR_VAR 0 5
41822: PUSH
41823: LD_VAR 0 2
41827: PPUSH
41828: LD_INT 21
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PPUSH
41838: CALL_OW 70
41842: ST_TO_ADDR
// if not tmp then
41843: LD_VAR 0 5
41847: NOT
41848: IFFALSE 41852
// exit ;
41850: GO 41916
// if checkLink then
41852: LD_VAR 0 3
41856: IFFALSE 41906
// begin for i in tmp do
41858: LD_ADDR_VAR 0 6
41862: PUSH
41863: LD_VAR 0 5
41867: PUSH
41868: FOR_IN
41869: IFFALSE 41904
// if GetBase ( i ) <> base then
41871: LD_VAR 0 6
41875: PPUSH
41876: CALL_OW 274
41880: PUSH
41881: LD_VAR 0 1
41885: NONEQUAL
41886: IFFALSE 41902
// ComLinkToBase ( base , i ) ;
41888: LD_VAR 0 1
41892: PPUSH
41893: LD_VAR 0 6
41897: PPUSH
41898: CALL_OW 169
41902: GO 41868
41904: POP
41905: POP
// end ; result := tmp ;
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 5
41915: ST_TO_ADDR
// end ;
41916: LD_VAR 0 4
41920: RET
// export function ComComplete ( units , b ) ; var i ; begin
41921: LD_INT 0
41923: PPUSH
41924: PPUSH
// if not units then
41925: LD_VAR 0 1
41929: NOT
41930: IFFALSE 41934
// exit ;
41932: GO 42024
// for i in units do
41934: LD_ADDR_VAR 0 4
41938: PUSH
41939: LD_VAR 0 1
41943: PUSH
41944: FOR_IN
41945: IFFALSE 42022
// if BuildingStatus ( b ) = bs_build then
41947: LD_VAR 0 2
41951: PPUSH
41952: CALL_OW 461
41956: PUSH
41957: LD_INT 1
41959: EQUAL
41960: IFFALSE 42020
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41962: LD_VAR 0 4
41966: PPUSH
41967: LD_STRING h
41969: PUSH
41970: LD_VAR 0 2
41974: PPUSH
41975: CALL_OW 250
41979: PUSH
41980: LD_VAR 0 2
41984: PPUSH
41985: CALL_OW 251
41989: PUSH
41990: LD_VAR 0 2
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: PPUSH
42016: CALL_OW 446
42020: GO 41944
42022: POP
42023: POP
// end ;
42024: LD_VAR 0 3
42028: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42029: LD_INT 0
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42037: LD_VAR 0 1
42041: NOT
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: CALL_OW 263
42052: PUSH
42053: LD_INT 2
42055: NONEQUAL
42056: OR
42057: IFFALSE 42061
// exit ;
42059: GO 42377
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42061: LD_ADDR_VAR 0 6
42065: PUSH
42066: LD_INT 22
42068: PUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 255
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: LD_INT 30
42088: PUSH
42089: LD_INT 36
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 34
42098: PUSH
42099: LD_INT 31
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PPUSH
42115: CALL_OW 69
42119: ST_TO_ADDR
// if not tmp then
42120: LD_VAR 0 6
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42377
// result := [ ] ;
42129: LD_ADDR_VAR 0 2
42133: PUSH
42134: EMPTY
42135: ST_TO_ADDR
// for i in tmp do
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: LD_VAR 0 6
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42218
// begin t := UnitsInside ( i ) ;
42149: LD_ADDR_VAR 0 4
42153: PUSH
42154: LD_VAR 0 3
42158: PPUSH
42159: CALL_OW 313
42163: ST_TO_ADDR
// if t then
42164: LD_VAR 0 4
42168: IFFALSE 42216
// for j in t do
42170: LD_ADDR_VAR 0 7
42174: PUSH
42175: LD_VAR 0 4
42179: PUSH
42180: FOR_IN
42181: IFFALSE 42214
// result := Replace ( result , result + 1 , j ) ;
42183: LD_ADDR_VAR 0 2
42187: PUSH
42188: LD_VAR 0 2
42192: PPUSH
42193: LD_VAR 0 2
42197: PUSH
42198: LD_INT 1
42200: PLUS
42201: PPUSH
42202: LD_VAR 0 7
42206: PPUSH
42207: CALL_OW 1
42211: ST_TO_ADDR
42212: GO 42180
42214: POP
42215: POP
// end ;
42216: GO 42146
42218: POP
42219: POP
// if not result then
42220: LD_VAR 0 2
42224: NOT
42225: IFFALSE 42229
// exit ;
42227: GO 42377
// mech := result [ 1 ] ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_VAR 0 2
42238: PUSH
42239: LD_INT 1
42241: ARRAY
42242: ST_TO_ADDR
// if result > 1 then
42243: LD_VAR 0 2
42247: PUSH
42248: LD_INT 1
42250: GREATER
42251: IFFALSE 42363
// begin for i = 2 to result do
42253: LD_ADDR_VAR 0 3
42257: PUSH
42258: DOUBLE
42259: LD_INT 2
42261: DEC
42262: ST_TO_ADDR
42263: LD_VAR 0 2
42267: PUSH
42268: FOR_TO
42269: IFFALSE 42361
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42271: LD_ADDR_VAR 0 4
42275: PUSH
42276: LD_VAR 0 2
42280: PUSH
42281: LD_VAR 0 3
42285: ARRAY
42286: PPUSH
42287: LD_INT 3
42289: PPUSH
42290: CALL_OW 259
42294: PUSH
42295: LD_VAR 0 2
42299: PUSH
42300: LD_VAR 0 3
42304: ARRAY
42305: PPUSH
42306: CALL_OW 432
42310: MINUS
42311: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42312: LD_VAR 0 4
42316: PUSH
42317: LD_VAR 0 5
42321: PPUSH
42322: LD_INT 3
42324: PPUSH
42325: CALL_OW 259
42329: PUSH
42330: LD_VAR 0 5
42334: PPUSH
42335: CALL_OW 432
42339: MINUS
42340: GREATEREQUAL
42341: IFFALSE 42359
// mech := result [ i ] ;
42343: LD_ADDR_VAR 0 5
42347: PUSH
42348: LD_VAR 0 2
42352: PUSH
42353: LD_VAR 0 3
42357: ARRAY
42358: ST_TO_ADDR
// end ;
42359: GO 42268
42361: POP
42362: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42363: LD_VAR 0 1
42367: PPUSH
42368: LD_VAR 0 5
42372: PPUSH
42373: CALL_OW 135
// end ;
42377: LD_VAR 0 2
42381: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
// result := [ ] ;
42397: LD_ADDR_VAR 0 7
42401: PUSH
42402: EMPTY
42403: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 266
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: IN
42424: NOT
42425: IFFALSE 42429
// exit ;
42427: GO 44063
// if name then
42429: LD_VAR 0 3
42433: IFFALSE 42449
// SetBName ( base_dep , name ) ;
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_VAR 0 3
42444: PPUSH
42445: CALL_OW 500
// base := GetBase ( base_dep ) ;
42449: LD_ADDR_VAR 0 15
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL_OW 274
42463: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42464: LD_ADDR_VAR 0 16
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: CALL_OW 255
42478: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42479: LD_ADDR_VAR 0 17
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 248
42493: ST_TO_ADDR
// if sources then
42494: LD_VAR 0 5
42498: IFFALSE 42545
// for i = 1 to 3 do
42500: LD_ADDR_VAR 0 8
42504: PUSH
42505: DOUBLE
42506: LD_INT 1
42508: DEC
42509: ST_TO_ADDR
42510: LD_INT 3
42512: PUSH
42513: FOR_TO
42514: IFFALSE 42543
// AddResourceType ( base , i , sources [ i ] ) ;
42516: LD_VAR 0 15
42520: PPUSH
42521: LD_VAR 0 8
42525: PPUSH
42526: LD_VAR 0 5
42530: PUSH
42531: LD_VAR 0 8
42535: ARRAY
42536: PPUSH
42537: CALL_OW 276
42541: GO 42513
42543: POP
42544: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42545: LD_ADDR_VAR 0 18
42549: PUSH
42550: LD_VAR 0 15
42554: PPUSH
42555: LD_VAR 0 2
42559: PPUSH
42560: LD_INT 1
42562: PPUSH
42563: CALL 41806 0 3
42567: ST_TO_ADDR
// InitHc ;
42568: CALL_OW 19
// InitUc ;
42572: CALL_OW 18
// uc_side := side ;
42576: LD_ADDR_OWVAR 20
42580: PUSH
42581: LD_VAR 0 16
42585: ST_TO_ADDR
// uc_nation := nation ;
42586: LD_ADDR_OWVAR 21
42590: PUSH
42591: LD_VAR 0 17
42595: ST_TO_ADDR
// if buildings then
42596: LD_VAR 0 18
42600: IFFALSE 43922
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42602: LD_ADDR_VAR 0 19
42606: PUSH
42607: LD_VAR 0 18
42611: PPUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 30
42617: PUSH
42618: LD_INT 29
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 30
42627: PUSH
42628: LD_INT 30
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: PPUSH
42640: CALL_OW 72
42644: ST_TO_ADDR
// if tmp then
42645: LD_VAR 0 19
42649: IFFALSE 42697
// for i in tmp do
42651: LD_ADDR_VAR 0 8
42655: PUSH
42656: LD_VAR 0 19
42660: PUSH
42661: FOR_IN
42662: IFFALSE 42695
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42664: LD_VAR 0 8
42668: PPUSH
42669: CALL_OW 250
42673: PPUSH
42674: LD_VAR 0 8
42678: PPUSH
42679: CALL_OW 251
42683: PPUSH
42684: LD_VAR 0 16
42688: PPUSH
42689: CALL_OW 441
42693: GO 42661
42695: POP
42696: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42697: LD_VAR 0 18
42701: PPUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 30
42707: PUSH
42708: LD_INT 32
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 30
42717: PUSH
42718: LD_INT 33
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: PPUSH
42730: CALL_OW 72
42734: IFFALSE 42822
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42736: LD_ADDR_VAR 0 8
42740: PUSH
42741: LD_VAR 0 18
42745: PPUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 30
42751: PUSH
42752: LD_INT 32
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: LD_INT 33
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: PPUSH
42774: CALL_OW 72
42778: PUSH
42779: FOR_IN
42780: IFFALSE 42820
// begin if not GetBWeapon ( i ) then
42782: LD_VAR 0 8
42786: PPUSH
42787: CALL_OW 269
42791: NOT
42792: IFFALSE 42818
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42794: LD_VAR 0 8
42798: PPUSH
42799: LD_VAR 0 8
42803: PPUSH
42804: LD_VAR 0 2
42808: PPUSH
42809: CALL 44068 0 2
42813: PPUSH
42814: CALL_OW 431
// end ;
42818: GO 42779
42820: POP
42821: POP
// end ; for i = 1 to personel do
42822: LD_ADDR_VAR 0 8
42826: PUSH
42827: DOUBLE
42828: LD_INT 1
42830: DEC
42831: ST_TO_ADDR
42832: LD_VAR 0 6
42836: PUSH
42837: FOR_TO
42838: IFFALSE 43902
// begin if i > 4 then
42840: LD_VAR 0 8
42844: PUSH
42845: LD_INT 4
42847: GREATER
42848: IFFALSE 42852
// break ;
42850: GO 43902
// case i of 1 :
42852: LD_VAR 0 8
42856: PUSH
42857: LD_INT 1
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42945
42865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42866: LD_ADDR_VAR 0 12
42870: PUSH
42871: LD_VAR 0 18
42875: PPUSH
42876: LD_INT 22
42878: PUSH
42879: LD_VAR 0 16
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 58
42890: PUSH
42891: EMPTY
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 30
42899: PUSH
42900: LD_INT 32
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 30
42909: PUSH
42910: LD_INT 4
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 30
42919: PUSH
42920: LD_INT 5
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: PPUSH
42938: CALL_OW 72
42942: ST_TO_ADDR
42943: GO 43167
42945: LD_INT 2
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42953
42951: GO 43015
42953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42954: LD_ADDR_VAR 0 12
42958: PUSH
42959: LD_VAR 0 18
42963: PPUSH
42964: LD_INT 22
42966: PUSH
42967: LD_VAR 0 16
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 30
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PPUSH
43008: CALL_OW 72
43012: ST_TO_ADDR
43013: GO 43167
43015: LD_INT 3
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43085
43023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43024: LD_ADDR_VAR 0 12
43028: PUSH
43029: LD_VAR 0 18
43033: PPUSH
43034: LD_INT 22
43036: PUSH
43037: LD_VAR 0 16
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 30
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 30
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PPUSH
43078: CALL_OW 72
43082: ST_TO_ADDR
43083: GO 43167
43085: LD_INT 4
43087: DOUBLE
43088: EQUAL
43089: IFTRUE 43093
43091: GO 43166
43093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43094: LD_ADDR_VAR 0 12
43098: PUSH
43099: LD_VAR 0 18
43103: PPUSH
43104: LD_INT 22
43106: PUSH
43107: LD_VAR 0 16
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 30
43121: PUSH
43122: LD_INT 6
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 30
43131: PUSH
43132: LD_INT 7
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 30
43141: PUSH
43142: LD_INT 8
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PPUSH
43159: CALL_OW 72
43163: ST_TO_ADDR
43164: GO 43167
43166: POP
// if i = 1 then
43167: LD_VAR 0 8
43171: PUSH
43172: LD_INT 1
43174: EQUAL
43175: IFFALSE 43286
// begin tmp := [ ] ;
43177: LD_ADDR_VAR 0 19
43181: PUSH
43182: EMPTY
43183: ST_TO_ADDR
// for j in f do
43184: LD_ADDR_VAR 0 9
43188: PUSH
43189: LD_VAR 0 12
43193: PUSH
43194: FOR_IN
43195: IFFALSE 43268
// if GetBType ( j ) = b_bunker then
43197: LD_VAR 0 9
43201: PPUSH
43202: CALL_OW 266
43206: PUSH
43207: LD_INT 32
43209: EQUAL
43210: IFFALSE 43237
// tmp := Insert ( tmp , 1 , j ) else
43212: LD_ADDR_VAR 0 19
43216: PUSH
43217: LD_VAR 0 19
43221: PPUSH
43222: LD_INT 1
43224: PPUSH
43225: LD_VAR 0 9
43229: PPUSH
43230: CALL_OW 2
43234: ST_TO_ADDR
43235: GO 43266
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43237: LD_ADDR_VAR 0 19
43241: PUSH
43242: LD_VAR 0 19
43246: PPUSH
43247: LD_VAR 0 19
43251: PUSH
43252: LD_INT 1
43254: PLUS
43255: PPUSH
43256: LD_VAR 0 9
43260: PPUSH
43261: CALL_OW 2
43265: ST_TO_ADDR
43266: GO 43194
43268: POP
43269: POP
// if tmp then
43270: LD_VAR 0 19
43274: IFFALSE 43286
// f := tmp ;
43276: LD_ADDR_VAR 0 12
43280: PUSH
43281: LD_VAR 0 19
43285: ST_TO_ADDR
// end ; x := personel [ i ] ;
43286: LD_ADDR_VAR 0 13
43290: PUSH
43291: LD_VAR 0 6
43295: PUSH
43296: LD_VAR 0 8
43300: ARRAY
43301: ST_TO_ADDR
// if x = - 1 then
43302: LD_VAR 0 13
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: EQUAL
43311: IFFALSE 43520
// begin for j in f do
43313: LD_ADDR_VAR 0 9
43317: PUSH
43318: LD_VAR 0 12
43322: PUSH
43323: FOR_IN
43324: IFFALSE 43516
// repeat InitHc ;
43326: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43330: LD_VAR 0 9
43334: PPUSH
43335: CALL_OW 266
43339: PUSH
43340: LD_INT 5
43342: EQUAL
43343: IFFALSE 43413
// begin if UnitsInside ( j ) < 3 then
43345: LD_VAR 0 9
43349: PPUSH
43350: CALL_OW 313
43354: PUSH
43355: LD_INT 3
43357: LESS
43358: IFFALSE 43394
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43360: LD_INT 0
43362: PPUSH
43363: LD_INT 5
43365: PUSH
43366: LD_INT 8
43368: PUSH
43369: LD_INT 9
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: PUSH
43377: LD_VAR 0 17
43381: ARRAY
43382: PPUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: CALL_OW 380
43392: GO 43411
// PrepareHuman ( false , i , skill ) ;
43394: LD_INT 0
43396: PPUSH
43397: LD_VAR 0 8
43401: PPUSH
43402: LD_VAR 0 4
43406: PPUSH
43407: CALL_OW 380
// end else
43411: GO 43430
// PrepareHuman ( false , i , skill ) ;
43413: LD_INT 0
43415: PPUSH
43416: LD_VAR 0 8
43420: PPUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: CALL_OW 380
// un := CreateHuman ;
43430: LD_ADDR_VAR 0 14
43434: PUSH
43435: CALL_OW 44
43439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43440: LD_ADDR_VAR 0 7
43444: PUSH
43445: LD_VAR 0 7
43449: PPUSH
43450: LD_INT 1
43452: PPUSH
43453: LD_VAR 0 14
43457: PPUSH
43458: CALL_OW 2
43462: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43463: LD_VAR 0 14
43467: PPUSH
43468: LD_VAR 0 9
43472: PPUSH
43473: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43477: LD_VAR 0 9
43481: PPUSH
43482: CALL_OW 313
43486: PUSH
43487: LD_INT 6
43489: EQUAL
43490: PUSH
43491: LD_VAR 0 9
43495: PPUSH
43496: CALL_OW 266
43500: PUSH
43501: LD_INT 32
43503: PUSH
43504: LD_INT 31
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: IN
43511: OR
43512: IFFALSE 43326
43514: GO 43323
43516: POP
43517: POP
// end else
43518: GO 43900
// for j = 1 to x do
43520: LD_ADDR_VAR 0 9
43524: PUSH
43525: DOUBLE
43526: LD_INT 1
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 13
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43898
// begin InitHc ;
43538: CALL_OW 19
// if not f then
43542: LD_VAR 0 12
43546: NOT
43547: IFFALSE 43636
// begin PrepareHuman ( false , i , skill ) ;
43549: LD_INT 0
43551: PPUSH
43552: LD_VAR 0 8
43556: PPUSH
43557: LD_VAR 0 4
43561: PPUSH
43562: CALL_OW 380
// un := CreateHuman ;
43566: LD_ADDR_VAR 0 14
43570: PUSH
43571: CALL_OW 44
43575: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43576: LD_ADDR_VAR 0 7
43580: PUSH
43581: LD_VAR 0 7
43585: PPUSH
43586: LD_INT 1
43588: PPUSH
43589: LD_VAR 0 14
43593: PPUSH
43594: CALL_OW 2
43598: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43599: LD_VAR 0 14
43603: PPUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 250
43613: PPUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: CALL_OW 251
43623: PPUSH
43624: LD_INT 10
43626: PPUSH
43627: LD_INT 0
43629: PPUSH
43630: CALL_OW 50
// continue ;
43634: GO 43535
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43636: LD_VAR 0 12
43640: PUSH
43641: LD_INT 1
43643: ARRAY
43644: PPUSH
43645: CALL_OW 313
43649: PUSH
43650: LD_VAR 0 12
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PPUSH
43659: CALL_OW 266
43663: PUSH
43664: LD_INT 32
43666: PUSH
43667: LD_INT 31
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: IN
43674: AND
43675: PUSH
43676: LD_VAR 0 12
43680: PUSH
43681: LD_INT 1
43683: ARRAY
43684: PPUSH
43685: CALL_OW 313
43689: PUSH
43690: LD_INT 6
43692: EQUAL
43693: OR
43694: IFFALSE 43714
// f := Delete ( f , 1 ) ;
43696: LD_ADDR_VAR 0 12
43700: PUSH
43701: LD_VAR 0 12
43705: PPUSH
43706: LD_INT 1
43708: PPUSH
43709: CALL_OW 3
43713: ST_TO_ADDR
// if not f then
43714: LD_VAR 0 12
43718: NOT
43719: IFFALSE 43737
// begin x := x + 2 ;
43721: LD_ADDR_VAR 0 13
43725: PUSH
43726: LD_VAR 0 13
43730: PUSH
43731: LD_INT 2
43733: PLUS
43734: ST_TO_ADDR
// continue ;
43735: GO 43535
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43737: LD_VAR 0 12
43741: PUSH
43742: LD_INT 1
43744: ARRAY
43745: PPUSH
43746: CALL_OW 266
43750: PUSH
43751: LD_INT 5
43753: EQUAL
43754: IFFALSE 43828
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43756: LD_VAR 0 12
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PPUSH
43765: CALL_OW 313
43769: PUSH
43770: LD_INT 3
43772: LESS
43773: IFFALSE 43809
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43775: LD_INT 0
43777: PPUSH
43778: LD_INT 5
43780: PUSH
43781: LD_INT 8
43783: PUSH
43784: LD_INT 9
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: PUSH
43792: LD_VAR 0 17
43796: ARRAY
43797: PPUSH
43798: LD_VAR 0 4
43802: PPUSH
43803: CALL_OW 380
43807: GO 43826
// PrepareHuman ( false , i , skill ) ;
43809: LD_INT 0
43811: PPUSH
43812: LD_VAR 0 8
43816: PPUSH
43817: LD_VAR 0 4
43821: PPUSH
43822: CALL_OW 380
// end else
43826: GO 43845
// PrepareHuman ( false , i , skill ) ;
43828: LD_INT 0
43830: PPUSH
43831: LD_VAR 0 8
43835: PPUSH
43836: LD_VAR 0 4
43840: PPUSH
43841: CALL_OW 380
// un := CreateHuman ;
43845: LD_ADDR_VAR 0 14
43849: PUSH
43850: CALL_OW 44
43854: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43855: LD_ADDR_VAR 0 7
43859: PUSH
43860: LD_VAR 0 7
43864: PPUSH
43865: LD_INT 1
43867: PPUSH
43868: LD_VAR 0 14
43872: PPUSH
43873: CALL_OW 2
43877: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43878: LD_VAR 0 14
43882: PPUSH
43883: LD_VAR 0 12
43887: PUSH
43888: LD_INT 1
43890: ARRAY
43891: PPUSH
43892: CALL_OW 52
// end ;
43896: GO 43535
43898: POP
43899: POP
// end ;
43900: GO 42837
43902: POP
43903: POP
// result := result ^ buildings ;
43904: LD_ADDR_VAR 0 7
43908: PUSH
43909: LD_VAR 0 7
43913: PUSH
43914: LD_VAR 0 18
43918: ADD
43919: ST_TO_ADDR
// end else
43920: GO 44063
// begin for i = 1 to personel do
43922: LD_ADDR_VAR 0 8
43926: PUSH
43927: DOUBLE
43928: LD_INT 1
43930: DEC
43931: ST_TO_ADDR
43932: LD_VAR 0 6
43936: PUSH
43937: FOR_TO
43938: IFFALSE 44061
// begin if i > 4 then
43940: LD_VAR 0 8
43944: PUSH
43945: LD_INT 4
43947: GREATER
43948: IFFALSE 43952
// break ;
43950: GO 44061
// x := personel [ i ] ;
43952: LD_ADDR_VAR 0 13
43956: PUSH
43957: LD_VAR 0 6
43961: PUSH
43962: LD_VAR 0 8
43966: ARRAY
43967: ST_TO_ADDR
// if x = - 1 then
43968: LD_VAR 0 13
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: EQUAL
43977: IFFALSE 43981
// continue ;
43979: GO 43937
// PrepareHuman ( false , i , skill ) ;
43981: LD_INT 0
43983: PPUSH
43984: LD_VAR 0 8
43988: PPUSH
43989: LD_VAR 0 4
43993: PPUSH
43994: CALL_OW 380
// un := CreateHuman ;
43998: LD_ADDR_VAR 0 14
44002: PUSH
44003: CALL_OW 44
44007: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44008: LD_VAR 0 14
44012: PPUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 250
44022: PPUSH
44023: LD_VAR 0 1
44027: PPUSH
44028: CALL_OW 251
44032: PPUSH
44033: LD_INT 10
44035: PPUSH
44036: LD_INT 0
44038: PPUSH
44039: CALL_OW 50
// result := result ^ un ;
44043: LD_ADDR_VAR 0 7
44047: PUSH
44048: LD_VAR 0 7
44052: PUSH
44053: LD_VAR 0 14
44057: ADD
44058: ST_TO_ADDR
// end ;
44059: GO 43937
44061: POP
44062: POP
// end ; end ;
44063: LD_VAR 0 7
44067: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44068: LD_INT 0
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
// result := false ;
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_INT 0
44093: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44094: LD_VAR 0 1
44098: NOT
44099: PUSH
44100: LD_VAR 0 1
44104: PPUSH
44105: CALL_OW 266
44109: PUSH
44110: LD_INT 32
44112: PUSH
44113: LD_INT 33
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: IN
44120: NOT
44121: OR
44122: IFFALSE 44126
// exit ;
44124: GO 45235
// nat := GetNation ( tower ) ;
44126: LD_ADDR_VAR 0 12
44130: PUSH
44131: LD_VAR 0 1
44135: PPUSH
44136: CALL_OW 248
44140: ST_TO_ADDR
// side := GetSide ( tower ) ;
44141: LD_ADDR_VAR 0 16
44145: PUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL_OW 255
44155: ST_TO_ADDR
// x := GetX ( tower ) ;
44156: LD_ADDR_VAR 0 10
44160: PUSH
44161: LD_VAR 0 1
44165: PPUSH
44166: CALL_OW 250
44170: ST_TO_ADDR
// y := GetY ( tower ) ;
44171: LD_ADDR_VAR 0 11
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: CALL_OW 251
44185: ST_TO_ADDR
// if not x or not y then
44186: LD_VAR 0 10
44190: NOT
44191: PUSH
44192: LD_VAR 0 11
44196: NOT
44197: OR
44198: IFFALSE 44202
// exit ;
44200: GO 45235
// weapon := 0 ;
44202: LD_ADDR_VAR 0 18
44206: PUSH
44207: LD_INT 0
44209: ST_TO_ADDR
// fac_list := [ ] ;
44210: LD_ADDR_VAR 0 17
44214: PUSH
44215: EMPTY
44216: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44217: LD_ADDR_VAR 0 6
44221: PUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 274
44231: PPUSH
44232: LD_VAR 0 2
44236: PPUSH
44237: LD_INT 0
44239: PPUSH
44240: CALL 41806 0 3
44244: PPUSH
44245: LD_INT 30
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PPUSH
44255: CALL_OW 72
44259: ST_TO_ADDR
// if not factories then
44260: LD_VAR 0 6
44264: NOT
44265: IFFALSE 44269
// exit ;
44267: GO 45235
// for i in factories do
44269: LD_ADDR_VAR 0 8
44273: PUSH
44274: LD_VAR 0 6
44278: PUSH
44279: FOR_IN
44280: IFFALSE 44305
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44282: LD_ADDR_VAR 0 17
44286: PUSH
44287: LD_VAR 0 17
44291: PUSH
44292: LD_VAR 0 8
44296: PPUSH
44297: CALL_OW 478
44301: UNION
44302: ST_TO_ADDR
44303: GO 44279
44305: POP
44306: POP
// if not fac_list then
44307: LD_VAR 0 17
44311: NOT
44312: IFFALSE 44316
// exit ;
44314: GO 45235
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44316: LD_ADDR_VAR 0 5
44320: PUSH
44321: LD_INT 4
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: LD_INT 9
44329: PUSH
44330: LD_INT 10
44332: PUSH
44333: LD_INT 6
44335: PUSH
44336: LD_INT 7
44338: PUSH
44339: LD_INT 11
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 27
44353: PUSH
44354: LD_INT 28
44356: PUSH
44357: LD_INT 26
44359: PUSH
44360: LD_INT 30
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 43
44371: PUSH
44372: LD_INT 44
44374: PUSH
44375: LD_INT 46
44377: PUSH
44378: LD_INT 45
44380: PUSH
44381: LD_INT 47
44383: PUSH
44384: LD_INT 49
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: PUSH
44400: LD_VAR 0 12
44404: ARRAY
44405: ST_TO_ADDR
// list := list isect fac_list ;
44406: LD_ADDR_VAR 0 5
44410: PUSH
44411: LD_VAR 0 5
44415: PUSH
44416: LD_VAR 0 17
44420: ISECT
44421: ST_TO_ADDR
// if not list then
44422: LD_VAR 0 5
44426: NOT
44427: IFFALSE 44431
// exit ;
44429: GO 45235
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44431: LD_VAR 0 12
44435: PUSH
44436: LD_INT 3
44438: EQUAL
44439: PUSH
44440: LD_INT 49
44442: PUSH
44443: LD_VAR 0 5
44447: IN
44448: AND
44449: PUSH
44450: LD_INT 31
44452: PPUSH
44453: LD_VAR 0 16
44457: PPUSH
44458: CALL_OW 321
44462: PUSH
44463: LD_INT 2
44465: EQUAL
44466: AND
44467: IFFALSE 44527
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44469: LD_INT 22
44471: PUSH
44472: LD_VAR 0 16
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 35
44483: PUSH
44484: LD_INT 49
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 91
44493: PUSH
44494: LD_VAR 0 1
44498: PUSH
44499: LD_INT 10
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: PPUSH
44512: CALL_OW 69
44516: NOT
44517: IFFALSE 44527
// weapon := ru_time_lapser ;
44519: LD_ADDR_VAR 0 18
44523: PUSH
44524: LD_INT 49
44526: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44527: LD_VAR 0 12
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: IN
44542: PUSH
44543: LD_INT 11
44545: PUSH
44546: LD_VAR 0 5
44550: IN
44551: PUSH
44552: LD_INT 30
44554: PUSH
44555: LD_VAR 0 5
44559: IN
44560: OR
44561: AND
44562: PUSH
44563: LD_INT 6
44565: PPUSH
44566: LD_VAR 0 16
44570: PPUSH
44571: CALL_OW 321
44575: PUSH
44576: LD_INT 2
44578: EQUAL
44579: AND
44580: IFFALSE 44745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44582: LD_INT 22
44584: PUSH
44585: LD_VAR 0 16
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 35
44599: PUSH
44600: LD_INT 11
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 35
44609: PUSH
44610: LD_INT 30
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 91
44624: PUSH
44625: LD_VAR 0 1
44629: PUSH
44630: LD_INT 18
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: PPUSH
44643: CALL_OW 69
44647: NOT
44648: PUSH
44649: LD_INT 22
44651: PUSH
44652: LD_VAR 0 16
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 30
44666: PUSH
44667: LD_INT 32
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 30
44676: PUSH
44677: LD_INT 33
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 91
44691: PUSH
44692: LD_VAR 0 1
44696: PUSH
44697: LD_INT 12
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: PPUSH
44713: CALL_OW 69
44717: PUSH
44718: LD_INT 2
44720: GREATER
44721: AND
44722: IFFALSE 44745
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44724: LD_ADDR_VAR 0 18
44728: PUSH
44729: LD_INT 11
44731: PUSH
44732: LD_INT 30
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_VAR 0 12
44743: ARRAY
44744: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44745: LD_VAR 0 18
44749: NOT
44750: PUSH
44751: LD_INT 40
44753: PPUSH
44754: LD_VAR 0 16
44758: PPUSH
44759: CALL_OW 321
44763: PUSH
44764: LD_INT 2
44766: EQUAL
44767: AND
44768: PUSH
44769: LD_INT 7
44771: PUSH
44772: LD_VAR 0 5
44776: IN
44777: PUSH
44778: LD_INT 28
44780: PUSH
44781: LD_VAR 0 5
44785: IN
44786: OR
44787: PUSH
44788: LD_INT 45
44790: PUSH
44791: LD_VAR 0 5
44795: IN
44796: OR
44797: AND
44798: IFFALSE 45052
// begin hex := GetHexInfo ( x , y ) ;
44800: LD_ADDR_VAR 0 4
44804: PUSH
44805: LD_VAR 0 10
44809: PPUSH
44810: LD_VAR 0 11
44814: PPUSH
44815: CALL_OW 546
44819: ST_TO_ADDR
// if hex [ 1 ] then
44820: LD_VAR 0 4
44824: PUSH
44825: LD_INT 1
44827: ARRAY
44828: IFFALSE 44832
// exit ;
44830: GO 45235
// height := hex [ 2 ] ;
44832: LD_ADDR_VAR 0 15
44836: PUSH
44837: LD_VAR 0 4
44841: PUSH
44842: LD_INT 2
44844: ARRAY
44845: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44846: LD_ADDR_VAR 0 14
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: LD_INT 5
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: ST_TO_ADDR
// for i in tmp do
44869: LD_ADDR_VAR 0 8
44873: PUSH
44874: LD_VAR 0 14
44878: PUSH
44879: FOR_IN
44880: IFFALSE 45050
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44882: LD_ADDR_VAR 0 9
44886: PUSH
44887: LD_VAR 0 10
44891: PPUSH
44892: LD_VAR 0 8
44896: PPUSH
44897: LD_INT 5
44899: PPUSH
44900: CALL_OW 272
44904: PUSH
44905: LD_VAR 0 11
44909: PPUSH
44910: LD_VAR 0 8
44914: PPUSH
44915: LD_INT 5
44917: PPUSH
44918: CALL_OW 273
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44927: LD_VAR 0 9
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: PPUSH
44936: LD_VAR 0 9
44940: PUSH
44941: LD_INT 2
44943: ARRAY
44944: PPUSH
44945: CALL_OW 488
44949: IFFALSE 45048
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44951: LD_ADDR_VAR 0 4
44955: PUSH
44956: LD_VAR 0 9
44960: PUSH
44961: LD_INT 1
44963: ARRAY
44964: PPUSH
44965: LD_VAR 0 9
44969: PUSH
44970: LD_INT 2
44972: ARRAY
44973: PPUSH
44974: CALL_OW 546
44978: ST_TO_ADDR
// if hex [ 1 ] then
44979: LD_VAR 0 4
44983: PUSH
44984: LD_INT 1
44986: ARRAY
44987: IFFALSE 44991
// continue ;
44989: GO 44879
// h := hex [ 2 ] ;
44991: LD_ADDR_VAR 0 13
44995: PUSH
44996: LD_VAR 0 4
45000: PUSH
45001: LD_INT 2
45003: ARRAY
45004: ST_TO_ADDR
// if h + 7 < height then
45005: LD_VAR 0 13
45009: PUSH
45010: LD_INT 7
45012: PLUS
45013: PUSH
45014: LD_VAR 0 15
45018: LESS
45019: IFFALSE 45048
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45021: LD_ADDR_VAR 0 18
45025: PUSH
45026: LD_INT 7
45028: PUSH
45029: LD_INT 28
45031: PUSH
45032: LD_INT 45
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: LIST
45039: PUSH
45040: LD_VAR 0 12
45044: ARRAY
45045: ST_TO_ADDR
// break ;
45046: GO 45050
// end ; end ; end ;
45048: GO 44879
45050: POP
45051: POP
// end ; if not weapon then
45052: LD_VAR 0 18
45056: NOT
45057: IFFALSE 45117
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45059: LD_ADDR_VAR 0 5
45063: PUSH
45064: LD_VAR 0 5
45068: PUSH
45069: LD_INT 11
45071: PUSH
45072: LD_INT 30
45074: PUSH
45075: LD_INT 49
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: DIFF
45083: ST_TO_ADDR
// if not list then
45084: LD_VAR 0 5
45088: NOT
45089: IFFALSE 45093
// exit ;
45091: GO 45235
// weapon := list [ rand ( 1 , list ) ] ;
45093: LD_ADDR_VAR 0 18
45097: PUSH
45098: LD_VAR 0 5
45102: PUSH
45103: LD_INT 1
45105: PPUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: CALL_OW 12
45115: ARRAY
45116: ST_TO_ADDR
// end ; if weapon then
45117: LD_VAR 0 18
45121: IFFALSE 45235
// begin tmp := CostOfWeapon ( weapon ) ;
45123: LD_ADDR_VAR 0 14
45127: PUSH
45128: LD_VAR 0 18
45132: PPUSH
45133: CALL_OW 451
45137: ST_TO_ADDR
// j := GetBase ( tower ) ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_VAR 0 1
45147: PPUSH
45148: CALL_OW 274
45152: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45153: LD_VAR 0 9
45157: PPUSH
45158: LD_INT 1
45160: PPUSH
45161: CALL_OW 275
45165: PUSH
45166: LD_VAR 0 14
45170: PUSH
45171: LD_INT 1
45173: ARRAY
45174: GREATEREQUAL
45175: PUSH
45176: LD_VAR 0 9
45180: PPUSH
45181: LD_INT 2
45183: PPUSH
45184: CALL_OW 275
45188: PUSH
45189: LD_VAR 0 14
45193: PUSH
45194: LD_INT 2
45196: ARRAY
45197: GREATEREQUAL
45198: AND
45199: PUSH
45200: LD_VAR 0 9
45204: PPUSH
45205: LD_INT 3
45207: PPUSH
45208: CALL_OW 275
45212: PUSH
45213: LD_VAR 0 14
45217: PUSH
45218: LD_INT 3
45220: ARRAY
45221: GREATEREQUAL
45222: AND
45223: IFFALSE 45235
// result := weapon ;
45225: LD_ADDR_VAR 0 3
45229: PUSH
45230: LD_VAR 0 18
45234: ST_TO_ADDR
// end ; end ;
45235: LD_VAR 0 3
45239: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45240: LD_INT 0
45242: PPUSH
45243: PPUSH
// result := true ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 1
45251: ST_TO_ADDR
// if array1 = array2 then
45252: LD_VAR 0 1
45256: PUSH
45257: LD_VAR 0 2
45261: EQUAL
45262: IFFALSE 45322
// begin for i = 1 to array1 do
45264: LD_ADDR_VAR 0 4
45268: PUSH
45269: DOUBLE
45270: LD_INT 1
45272: DEC
45273: ST_TO_ADDR
45274: LD_VAR 0 1
45278: PUSH
45279: FOR_TO
45280: IFFALSE 45318
// if array1 [ i ] <> array2 [ i ] then
45282: LD_VAR 0 1
45286: PUSH
45287: LD_VAR 0 4
45291: ARRAY
45292: PUSH
45293: LD_VAR 0 2
45297: PUSH
45298: LD_VAR 0 4
45302: ARRAY
45303: NONEQUAL
45304: IFFALSE 45316
// begin result := false ;
45306: LD_ADDR_VAR 0 3
45310: PUSH
45311: LD_INT 0
45313: ST_TO_ADDR
// break ;
45314: GO 45318
// end ;
45316: GO 45279
45318: POP
45319: POP
// end else
45320: GO 45330
// result := false ;
45322: LD_ADDR_VAR 0 3
45326: PUSH
45327: LD_INT 0
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 3
45334: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45335: LD_INT 0
45337: PPUSH
45338: PPUSH
// if not array1 or not array2 then
45339: LD_VAR 0 1
45343: NOT
45344: PUSH
45345: LD_VAR 0 2
45349: NOT
45350: OR
45351: IFFALSE 45355
// exit ;
45353: GO 45419
// result := true ;
45355: LD_ADDR_VAR 0 3
45359: PUSH
45360: LD_INT 1
45362: ST_TO_ADDR
// for i = 1 to array1 do
45363: LD_ADDR_VAR 0 4
45367: PUSH
45368: DOUBLE
45369: LD_INT 1
45371: DEC
45372: ST_TO_ADDR
45373: LD_VAR 0 1
45377: PUSH
45378: FOR_TO
45379: IFFALSE 45417
// if array1 [ i ] <> array2 [ i ] then
45381: LD_VAR 0 1
45385: PUSH
45386: LD_VAR 0 4
45390: ARRAY
45391: PUSH
45392: LD_VAR 0 2
45396: PUSH
45397: LD_VAR 0 4
45401: ARRAY
45402: NONEQUAL
45403: IFFALSE 45415
// begin result := false ;
45405: LD_ADDR_VAR 0 3
45409: PUSH
45410: LD_INT 0
45412: ST_TO_ADDR
// break ;
45413: GO 45417
// end ;
45415: GO 45378
45417: POP
45418: POP
// end ;
45419: LD_VAR 0 3
45423: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45424: LD_INT 0
45426: PPUSH
45427: PPUSH
45428: PPUSH
// pom := GetBase ( fac ) ;
45429: LD_ADDR_VAR 0 5
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: CALL_OW 274
45443: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45444: LD_ADDR_VAR 0 4
45448: PUSH
45449: LD_VAR 0 2
45453: PUSH
45454: LD_INT 1
45456: ARRAY
45457: PPUSH
45458: LD_VAR 0 2
45462: PUSH
45463: LD_INT 2
45465: ARRAY
45466: PPUSH
45467: LD_VAR 0 2
45471: PUSH
45472: LD_INT 3
45474: ARRAY
45475: PPUSH
45476: LD_VAR 0 2
45480: PUSH
45481: LD_INT 4
45483: ARRAY
45484: PPUSH
45485: CALL_OW 449
45489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45490: LD_ADDR_VAR 0 3
45494: PUSH
45495: LD_VAR 0 5
45499: PPUSH
45500: LD_INT 1
45502: PPUSH
45503: CALL_OW 275
45507: PUSH
45508: LD_VAR 0 4
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: GREATEREQUAL
45517: PUSH
45518: LD_VAR 0 5
45522: PPUSH
45523: LD_INT 2
45525: PPUSH
45526: CALL_OW 275
45530: PUSH
45531: LD_VAR 0 4
45535: PUSH
45536: LD_INT 2
45538: ARRAY
45539: GREATEREQUAL
45540: AND
45541: PUSH
45542: LD_VAR 0 5
45546: PPUSH
45547: LD_INT 3
45549: PPUSH
45550: CALL_OW 275
45554: PUSH
45555: LD_VAR 0 4
45559: PUSH
45560: LD_INT 3
45562: ARRAY
45563: GREATEREQUAL
45564: AND
45565: ST_TO_ADDR
// end ;
45566: LD_VAR 0 3
45570: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45571: LD_INT 0
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
// pom := GetBase ( building ) ;
45577: LD_ADDR_VAR 0 3
45581: PUSH
45582: LD_VAR 0 1
45586: PPUSH
45587: CALL_OW 274
45591: ST_TO_ADDR
// if not pom then
45592: LD_VAR 0 3
45596: NOT
45597: IFFALSE 45601
// exit ;
45599: GO 45771
// btype := GetBType ( building ) ;
45601: LD_ADDR_VAR 0 5
45605: PUSH
45606: LD_VAR 0 1
45610: PPUSH
45611: CALL_OW 266
45615: ST_TO_ADDR
// if btype = b_armoury then
45616: LD_VAR 0 5
45620: PUSH
45621: LD_INT 4
45623: EQUAL
45624: IFFALSE 45634
// btype := b_barracks ;
45626: LD_ADDR_VAR 0 5
45630: PUSH
45631: LD_INT 5
45633: ST_TO_ADDR
// if btype = b_depot then
45634: LD_VAR 0 5
45638: PUSH
45639: LD_INT 0
45641: EQUAL
45642: IFFALSE 45652
// btype := b_warehouse ;
45644: LD_ADDR_VAR 0 5
45648: PUSH
45649: LD_INT 1
45651: ST_TO_ADDR
// if btype = b_workshop then
45652: LD_VAR 0 5
45656: PUSH
45657: LD_INT 2
45659: EQUAL
45660: IFFALSE 45670
// btype := b_factory ;
45662: LD_ADDR_VAR 0 5
45666: PUSH
45667: LD_INT 3
45669: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45670: LD_ADDR_VAR 0 4
45674: PUSH
45675: LD_VAR 0 5
45679: PPUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 248
45689: PPUSH
45690: CALL_OW 450
45694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45695: LD_ADDR_VAR 0 2
45699: PUSH
45700: LD_VAR 0 3
45704: PPUSH
45705: LD_INT 1
45707: PPUSH
45708: CALL_OW 275
45712: PUSH
45713: LD_VAR 0 4
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: GREATEREQUAL
45722: PUSH
45723: LD_VAR 0 3
45727: PPUSH
45728: LD_INT 2
45730: PPUSH
45731: CALL_OW 275
45735: PUSH
45736: LD_VAR 0 4
45740: PUSH
45741: LD_INT 2
45743: ARRAY
45744: GREATEREQUAL
45745: AND
45746: PUSH
45747: LD_VAR 0 3
45751: PPUSH
45752: LD_INT 3
45754: PPUSH
45755: CALL_OW 275
45759: PUSH
45760: LD_VAR 0 4
45764: PUSH
45765: LD_INT 3
45767: ARRAY
45768: GREATEREQUAL
45769: AND
45770: ST_TO_ADDR
// end ;
45771: LD_VAR 0 2
45775: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45776: LD_INT 0
45778: PPUSH
45779: PPUSH
45780: PPUSH
// pom := GetBase ( building ) ;
45781: LD_ADDR_VAR 0 4
45785: PUSH
45786: LD_VAR 0 1
45790: PPUSH
45791: CALL_OW 274
45795: ST_TO_ADDR
// if not pom then
45796: LD_VAR 0 4
45800: NOT
45801: IFFALSE 45805
// exit ;
45803: GO 45906
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: LD_VAR 0 2
45814: PPUSH
45815: LD_VAR 0 1
45819: PPUSH
45820: CALL_OW 248
45824: PPUSH
45825: CALL_OW 450
45829: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45830: LD_ADDR_VAR 0 3
45834: PUSH
45835: LD_VAR 0 4
45839: PPUSH
45840: LD_INT 1
45842: PPUSH
45843: CALL_OW 275
45847: PUSH
45848: LD_VAR 0 5
45852: PUSH
45853: LD_INT 1
45855: ARRAY
45856: GREATEREQUAL
45857: PUSH
45858: LD_VAR 0 4
45862: PPUSH
45863: LD_INT 2
45865: PPUSH
45866: CALL_OW 275
45870: PUSH
45871: LD_VAR 0 5
45875: PUSH
45876: LD_INT 2
45878: ARRAY
45879: GREATEREQUAL
45880: AND
45881: PUSH
45882: LD_VAR 0 4
45886: PPUSH
45887: LD_INT 3
45889: PPUSH
45890: CALL_OW 275
45894: PUSH
45895: LD_VAR 0 5
45899: PUSH
45900: LD_INT 3
45902: ARRAY
45903: GREATEREQUAL
45904: AND
45905: ST_TO_ADDR
// end ;
45906: LD_VAR 0 3
45910: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45911: LD_INT 0
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
// result := false ;
45924: LD_ADDR_VAR 0 8
45928: PUSH
45929: LD_INT 0
45931: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45932: LD_VAR 0 5
45936: NOT
45937: PUSH
45938: LD_VAR 0 1
45942: NOT
45943: OR
45944: PUSH
45945: LD_VAR 0 2
45949: NOT
45950: OR
45951: PUSH
45952: LD_VAR 0 3
45956: NOT
45957: OR
45958: IFFALSE 45962
// exit ;
45960: GO 46776
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45962: LD_ADDR_VAR 0 14
45966: PUSH
45967: LD_VAR 0 1
45971: PPUSH
45972: LD_VAR 0 2
45976: PPUSH
45977: LD_VAR 0 3
45981: PPUSH
45982: LD_VAR 0 4
45986: PPUSH
45987: LD_VAR 0 5
45991: PUSH
45992: LD_INT 1
45994: ARRAY
45995: PPUSH
45996: CALL_OW 248
46000: PPUSH
46001: LD_INT 0
46003: PPUSH
46004: CALL 48029 0 6
46008: ST_TO_ADDR
// if not hexes then
46009: LD_VAR 0 14
46013: NOT
46014: IFFALSE 46018
// exit ;
46016: GO 46776
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46018: LD_ADDR_VAR 0 17
46022: PUSH
46023: LD_VAR 0 5
46027: PPUSH
46028: LD_INT 22
46030: PUSH
46031: LD_VAR 0 13
46035: PPUSH
46036: CALL_OW 255
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 30
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 30
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PPUSH
46077: CALL_OW 72
46081: ST_TO_ADDR
// for i = 1 to hexes do
46082: LD_ADDR_VAR 0 9
46086: PUSH
46087: DOUBLE
46088: LD_INT 1
46090: DEC
46091: ST_TO_ADDR
46092: LD_VAR 0 14
46096: PUSH
46097: FOR_TO
46098: IFFALSE 46774
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46100: LD_ADDR_VAR 0 13
46104: PUSH
46105: LD_VAR 0 14
46109: PUSH
46110: LD_VAR 0 9
46114: ARRAY
46115: PUSH
46116: LD_INT 1
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 14
46124: PUSH
46125: LD_VAR 0 9
46129: ARRAY
46130: PUSH
46131: LD_INT 2
46133: ARRAY
46134: PPUSH
46135: CALL_OW 428
46139: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46140: LD_VAR 0 14
46144: PUSH
46145: LD_VAR 0 9
46149: ARRAY
46150: PUSH
46151: LD_INT 1
46153: ARRAY
46154: PPUSH
46155: LD_VAR 0 14
46159: PUSH
46160: LD_VAR 0 9
46164: ARRAY
46165: PUSH
46166: LD_INT 2
46168: ARRAY
46169: PPUSH
46170: CALL_OW 351
46174: PUSH
46175: LD_VAR 0 14
46179: PUSH
46180: LD_VAR 0 9
46184: ARRAY
46185: PUSH
46186: LD_INT 1
46188: ARRAY
46189: PPUSH
46190: LD_VAR 0 14
46194: PUSH
46195: LD_VAR 0 9
46199: ARRAY
46200: PUSH
46201: LD_INT 2
46203: ARRAY
46204: PPUSH
46205: CALL_OW 488
46209: NOT
46210: OR
46211: PUSH
46212: LD_VAR 0 13
46216: PPUSH
46217: CALL_OW 247
46221: PUSH
46222: LD_INT 3
46224: EQUAL
46225: OR
46226: IFFALSE 46232
// exit ;
46228: POP
46229: POP
46230: GO 46776
// if not tmp then
46232: LD_VAR 0 13
46236: NOT
46237: IFFALSE 46241
// continue ;
46239: GO 46097
// result := true ;
46241: LD_ADDR_VAR 0 8
46245: PUSH
46246: LD_INT 1
46248: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46249: LD_VAR 0 6
46253: PUSH
46254: LD_VAR 0 13
46258: PPUSH
46259: CALL_OW 247
46263: PUSH
46264: LD_INT 2
46266: EQUAL
46267: AND
46268: PUSH
46269: LD_VAR 0 13
46273: PPUSH
46274: CALL_OW 263
46278: PUSH
46279: LD_INT 1
46281: EQUAL
46282: AND
46283: IFFALSE 46447
// begin if IsDrivenBy ( tmp ) then
46285: LD_VAR 0 13
46289: PPUSH
46290: CALL_OW 311
46294: IFFALSE 46298
// continue ;
46296: GO 46097
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46298: LD_VAR 0 6
46302: PPUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 60
46308: PUSH
46309: EMPTY
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: LD_INT 55
46321: PUSH
46322: EMPTY
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PPUSH
46333: CALL_OW 72
46337: IFFALSE 46445
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46339: LD_ADDR_VAR 0 18
46343: PUSH
46344: LD_VAR 0 6
46348: PPUSH
46349: LD_INT 3
46351: PUSH
46352: LD_INT 60
46354: PUSH
46355: EMPTY
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 55
46367: PUSH
46368: EMPTY
46369: LIST
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PPUSH
46379: CALL_OW 72
46383: PUSH
46384: LD_INT 1
46386: ARRAY
46387: ST_TO_ADDR
// if IsInUnit ( driver ) then
46388: LD_VAR 0 18
46392: PPUSH
46393: CALL_OW 310
46397: IFFALSE 46408
// ComExit ( driver ) ;
46399: LD_VAR 0 18
46403: PPUSH
46404: CALL 71821 0 1
// AddComEnterUnit ( driver , tmp ) ;
46408: LD_VAR 0 18
46412: PPUSH
46413: LD_VAR 0 13
46417: PPUSH
46418: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46422: LD_VAR 0 18
46426: PPUSH
46427: LD_VAR 0 7
46431: PPUSH
46432: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46436: LD_VAR 0 18
46440: PPUSH
46441: CALL_OW 181
// end ; continue ;
46445: GO 46097
// end ; if not cleaners or not tmp in cleaners then
46447: LD_VAR 0 6
46451: NOT
46452: PUSH
46453: LD_VAR 0 13
46457: PUSH
46458: LD_VAR 0 6
46462: IN
46463: NOT
46464: OR
46465: IFFALSE 46772
// begin if dep then
46467: LD_VAR 0 17
46471: IFFALSE 46607
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46473: LD_ADDR_VAR 0 16
46477: PUSH
46478: LD_VAR 0 17
46482: PUSH
46483: LD_INT 1
46485: ARRAY
46486: PPUSH
46487: CALL_OW 250
46491: PPUSH
46492: LD_VAR 0 17
46496: PUSH
46497: LD_INT 1
46499: ARRAY
46500: PPUSH
46501: CALL_OW 254
46505: PPUSH
46506: LD_INT 5
46508: PPUSH
46509: CALL_OW 272
46513: PUSH
46514: LD_VAR 0 17
46518: PUSH
46519: LD_INT 1
46521: ARRAY
46522: PPUSH
46523: CALL_OW 251
46527: PPUSH
46528: LD_VAR 0 17
46532: PUSH
46533: LD_INT 1
46535: ARRAY
46536: PPUSH
46537: CALL_OW 254
46541: PPUSH
46542: LD_INT 5
46544: PPUSH
46545: CALL_OW 273
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46554: LD_VAR 0 16
46558: PUSH
46559: LD_INT 1
46561: ARRAY
46562: PPUSH
46563: LD_VAR 0 16
46567: PUSH
46568: LD_INT 2
46570: ARRAY
46571: PPUSH
46572: CALL_OW 488
46576: IFFALSE 46607
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46578: LD_VAR 0 13
46582: PPUSH
46583: LD_VAR 0 16
46587: PUSH
46588: LD_INT 1
46590: ARRAY
46591: PPUSH
46592: LD_VAR 0 16
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PPUSH
46601: CALL_OW 111
// continue ;
46605: GO 46097
// end ; end ; r := GetDir ( tmp ) ;
46607: LD_ADDR_VAR 0 15
46611: PUSH
46612: LD_VAR 0 13
46616: PPUSH
46617: CALL_OW 254
46621: ST_TO_ADDR
// if r = 5 then
46622: LD_VAR 0 15
46626: PUSH
46627: LD_INT 5
46629: EQUAL
46630: IFFALSE 46640
// r := 0 ;
46632: LD_ADDR_VAR 0 15
46636: PUSH
46637: LD_INT 0
46639: ST_TO_ADDR
// for j = r to 5 do
46640: LD_ADDR_VAR 0 10
46644: PUSH
46645: DOUBLE
46646: LD_VAR 0 15
46650: DEC
46651: ST_TO_ADDR
46652: LD_INT 5
46654: PUSH
46655: FOR_TO
46656: IFFALSE 46770
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46658: LD_ADDR_VAR 0 11
46662: PUSH
46663: LD_VAR 0 13
46667: PPUSH
46668: CALL_OW 250
46672: PPUSH
46673: LD_VAR 0 10
46677: PPUSH
46678: LD_INT 2
46680: PPUSH
46681: CALL_OW 272
46685: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46686: LD_ADDR_VAR 0 12
46690: PUSH
46691: LD_VAR 0 13
46695: PPUSH
46696: CALL_OW 251
46700: PPUSH
46701: LD_VAR 0 10
46705: PPUSH
46706: LD_INT 2
46708: PPUSH
46709: CALL_OW 273
46713: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46714: LD_VAR 0 11
46718: PPUSH
46719: LD_VAR 0 12
46723: PPUSH
46724: CALL_OW 488
46728: PUSH
46729: LD_VAR 0 11
46733: PPUSH
46734: LD_VAR 0 12
46738: PPUSH
46739: CALL_OW 428
46743: NOT
46744: AND
46745: IFFALSE 46768
// begin ComMoveXY ( tmp , _x , _y ) ;
46747: LD_VAR 0 13
46751: PPUSH
46752: LD_VAR 0 11
46756: PPUSH
46757: LD_VAR 0 12
46761: PPUSH
46762: CALL_OW 111
// break ;
46766: GO 46770
// end ; end ;
46768: GO 46655
46770: POP
46771: POP
// end ; end ;
46772: GO 46097
46774: POP
46775: POP
// end ;
46776: LD_VAR 0 8
46780: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46781: LD_INT 0
46783: PPUSH
// result := true ;
46784: LD_ADDR_VAR 0 3
46788: PUSH
46789: LD_INT 1
46791: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46792: LD_VAR 0 2
46796: PUSH
46797: LD_INT 24
46799: DOUBLE
46800: EQUAL
46801: IFTRUE 46811
46803: LD_INT 33
46805: DOUBLE
46806: EQUAL
46807: IFTRUE 46811
46809: GO 46836
46811: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46812: LD_ADDR_VAR 0 3
46816: PUSH
46817: LD_INT 32
46819: PPUSH
46820: LD_VAR 0 1
46824: PPUSH
46825: CALL_OW 321
46829: PUSH
46830: LD_INT 2
46832: EQUAL
46833: ST_TO_ADDR
46834: GO 47152
46836: LD_INT 20
46838: DOUBLE
46839: EQUAL
46840: IFTRUE 46844
46842: GO 46869
46844: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46845: LD_ADDR_VAR 0 3
46849: PUSH
46850: LD_INT 6
46852: PPUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL_OW 321
46862: PUSH
46863: LD_INT 2
46865: EQUAL
46866: ST_TO_ADDR
46867: GO 47152
46869: LD_INT 22
46871: DOUBLE
46872: EQUAL
46873: IFTRUE 46883
46875: LD_INT 36
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46908
46883: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46884: LD_ADDR_VAR 0 3
46888: PUSH
46889: LD_INT 15
46891: PPUSH
46892: LD_VAR 0 1
46896: PPUSH
46897: CALL_OW 321
46901: PUSH
46902: LD_INT 2
46904: EQUAL
46905: ST_TO_ADDR
46906: GO 47152
46908: LD_INT 30
46910: DOUBLE
46911: EQUAL
46912: IFTRUE 46916
46914: GO 46941
46916: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46917: LD_ADDR_VAR 0 3
46921: PUSH
46922: LD_INT 20
46924: PPUSH
46925: LD_VAR 0 1
46929: PPUSH
46930: CALL_OW 321
46934: PUSH
46935: LD_INT 2
46937: EQUAL
46938: ST_TO_ADDR
46939: GO 47152
46941: LD_INT 28
46943: DOUBLE
46944: EQUAL
46945: IFTRUE 46955
46947: LD_INT 21
46949: DOUBLE
46950: EQUAL
46951: IFTRUE 46955
46953: GO 46980
46955: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_INT 21
46963: PPUSH
46964: LD_VAR 0 1
46968: PPUSH
46969: CALL_OW 321
46973: PUSH
46974: LD_INT 2
46976: EQUAL
46977: ST_TO_ADDR
46978: GO 47152
46980: LD_INT 16
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46988
46986: GO 47013
46988: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46989: LD_ADDR_VAR 0 3
46993: PUSH
46994: LD_INT 84
46996: PPUSH
46997: LD_VAR 0 1
47001: PPUSH
47002: CALL_OW 321
47006: PUSH
47007: LD_INT 2
47009: EQUAL
47010: ST_TO_ADDR
47011: GO 47152
47013: LD_INT 19
47015: DOUBLE
47016: EQUAL
47017: IFTRUE 47027
47019: LD_INT 23
47021: DOUBLE
47022: EQUAL
47023: IFTRUE 47027
47025: GO 47052
47027: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47028: LD_ADDR_VAR 0 3
47032: PUSH
47033: LD_INT 83
47035: PPUSH
47036: LD_VAR 0 1
47040: PPUSH
47041: CALL_OW 321
47045: PUSH
47046: LD_INT 2
47048: EQUAL
47049: ST_TO_ADDR
47050: GO 47152
47052: LD_INT 17
47054: DOUBLE
47055: EQUAL
47056: IFTRUE 47060
47058: GO 47085
47060: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47061: LD_ADDR_VAR 0 3
47065: PUSH
47066: LD_INT 39
47068: PPUSH
47069: LD_VAR 0 1
47073: PPUSH
47074: CALL_OW 321
47078: PUSH
47079: LD_INT 2
47081: EQUAL
47082: ST_TO_ADDR
47083: GO 47152
47085: LD_INT 18
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 47118
47093: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47094: LD_ADDR_VAR 0 3
47098: PUSH
47099: LD_INT 40
47101: PPUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: CALL_OW 321
47111: PUSH
47112: LD_INT 2
47114: EQUAL
47115: ST_TO_ADDR
47116: GO 47152
47118: LD_INT 27
47120: DOUBLE
47121: EQUAL
47122: IFTRUE 47126
47124: GO 47151
47126: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47127: LD_ADDR_VAR 0 3
47131: PUSH
47132: LD_INT 35
47134: PPUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: CALL_OW 321
47144: PUSH
47145: LD_INT 2
47147: EQUAL
47148: ST_TO_ADDR
47149: GO 47152
47151: POP
// end ;
47152: LD_VAR 0 3
47156: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47157: LD_INT 0
47159: PPUSH
47160: PPUSH
47161: PPUSH
47162: PPUSH
47163: PPUSH
47164: PPUSH
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
47169: PPUSH
// result := false ;
47170: LD_ADDR_VAR 0 6
47174: PUSH
47175: LD_INT 0
47177: ST_TO_ADDR
// if btype = b_depot then
47178: LD_VAR 0 2
47182: PUSH
47183: LD_INT 0
47185: EQUAL
47186: IFFALSE 47198
// begin result := true ;
47188: LD_ADDR_VAR 0 6
47192: PUSH
47193: LD_INT 1
47195: ST_TO_ADDR
// exit ;
47196: GO 48024
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47198: LD_VAR 0 1
47202: NOT
47203: PUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 266
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: IN
47224: NOT
47225: OR
47226: PUSH
47227: LD_VAR 0 2
47231: NOT
47232: OR
47233: PUSH
47234: LD_VAR 0 5
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: LD_INT 4
47253: PUSH
47254: LD_INT 5
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: IN
47265: NOT
47266: OR
47267: PUSH
47268: LD_VAR 0 3
47272: PPUSH
47273: LD_VAR 0 4
47277: PPUSH
47278: CALL_OW 488
47282: NOT
47283: OR
47284: IFFALSE 47288
// exit ;
47286: GO 48024
// side := GetSide ( depot ) ;
47288: LD_ADDR_VAR 0 9
47292: PUSH
47293: LD_VAR 0 1
47297: PPUSH
47298: CALL_OW 255
47302: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47303: LD_VAR 0 9
47307: PPUSH
47308: LD_VAR 0 2
47312: PPUSH
47313: CALL 46781 0 2
47317: NOT
47318: IFFALSE 47322
// exit ;
47320: GO 48024
// pom := GetBase ( depot ) ;
47322: LD_ADDR_VAR 0 10
47326: PUSH
47327: LD_VAR 0 1
47331: PPUSH
47332: CALL_OW 274
47336: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47337: LD_ADDR_VAR 0 11
47341: PUSH
47342: LD_VAR 0 2
47346: PPUSH
47347: LD_VAR 0 1
47351: PPUSH
47352: CALL_OW 248
47356: PPUSH
47357: CALL_OW 450
47361: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47362: LD_VAR 0 10
47366: PPUSH
47367: LD_INT 1
47369: PPUSH
47370: CALL_OW 275
47374: PUSH
47375: LD_VAR 0 11
47379: PUSH
47380: LD_INT 1
47382: ARRAY
47383: GREATEREQUAL
47384: PUSH
47385: LD_VAR 0 10
47389: PPUSH
47390: LD_INT 2
47392: PPUSH
47393: CALL_OW 275
47397: PUSH
47398: LD_VAR 0 11
47402: PUSH
47403: LD_INT 2
47405: ARRAY
47406: GREATEREQUAL
47407: AND
47408: PUSH
47409: LD_VAR 0 10
47413: PPUSH
47414: LD_INT 3
47416: PPUSH
47417: CALL_OW 275
47421: PUSH
47422: LD_VAR 0 11
47426: PUSH
47427: LD_INT 3
47429: ARRAY
47430: GREATEREQUAL
47431: AND
47432: NOT
47433: IFFALSE 47437
// exit ;
47435: GO 48024
// if GetBType ( depot ) = b_depot then
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 266
47446: PUSH
47447: LD_INT 0
47449: EQUAL
47450: IFFALSE 47462
// dist := 28 else
47452: LD_ADDR_VAR 0 14
47456: PUSH
47457: LD_INT 28
47459: ST_TO_ADDR
47460: GO 47470
// dist := 36 ;
47462: LD_ADDR_VAR 0 14
47466: PUSH
47467: LD_INT 36
47469: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47470: LD_VAR 0 1
47474: PPUSH
47475: LD_VAR 0 3
47479: PPUSH
47480: LD_VAR 0 4
47484: PPUSH
47485: CALL_OW 297
47489: PUSH
47490: LD_VAR 0 14
47494: GREATER
47495: IFFALSE 47499
// exit ;
47497: GO 48024
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47499: LD_ADDR_VAR 0 12
47503: PUSH
47504: LD_VAR 0 2
47508: PPUSH
47509: LD_VAR 0 3
47513: PPUSH
47514: LD_VAR 0 4
47518: PPUSH
47519: LD_VAR 0 5
47523: PPUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 248
47533: PPUSH
47534: LD_INT 0
47536: PPUSH
47537: CALL 48029 0 6
47541: ST_TO_ADDR
// if not hexes then
47542: LD_VAR 0 12
47546: NOT
47547: IFFALSE 47551
// exit ;
47549: GO 48024
// hex := GetHexInfo ( x , y ) ;
47551: LD_ADDR_VAR 0 15
47555: PUSH
47556: LD_VAR 0 3
47560: PPUSH
47561: LD_VAR 0 4
47565: PPUSH
47566: CALL_OW 546
47570: ST_TO_ADDR
// if hex [ 1 ] then
47571: LD_VAR 0 15
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: IFFALSE 47583
// exit ;
47581: GO 48024
// height := hex [ 2 ] ;
47583: LD_ADDR_VAR 0 13
47587: PUSH
47588: LD_VAR 0 15
47592: PUSH
47593: LD_INT 2
47595: ARRAY
47596: ST_TO_ADDR
// for i = 1 to hexes do
47597: LD_ADDR_VAR 0 7
47601: PUSH
47602: DOUBLE
47603: LD_INT 1
47605: DEC
47606: ST_TO_ADDR
47607: LD_VAR 0 12
47611: PUSH
47612: FOR_TO
47613: IFFALSE 47943
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47615: LD_VAR 0 12
47619: PUSH
47620: LD_VAR 0 7
47624: ARRAY
47625: PUSH
47626: LD_INT 1
47628: ARRAY
47629: PPUSH
47630: LD_VAR 0 12
47634: PUSH
47635: LD_VAR 0 7
47639: ARRAY
47640: PUSH
47641: LD_INT 2
47643: ARRAY
47644: PPUSH
47645: CALL_OW 488
47649: NOT
47650: PUSH
47651: LD_VAR 0 12
47655: PUSH
47656: LD_VAR 0 7
47660: ARRAY
47661: PUSH
47662: LD_INT 1
47664: ARRAY
47665: PPUSH
47666: LD_VAR 0 12
47670: PUSH
47671: LD_VAR 0 7
47675: ARRAY
47676: PUSH
47677: LD_INT 2
47679: ARRAY
47680: PPUSH
47681: CALL_OW 428
47685: PUSH
47686: LD_INT 0
47688: GREATER
47689: OR
47690: PUSH
47691: LD_VAR 0 12
47695: PUSH
47696: LD_VAR 0 7
47700: ARRAY
47701: PUSH
47702: LD_INT 1
47704: ARRAY
47705: PPUSH
47706: LD_VAR 0 12
47710: PUSH
47711: LD_VAR 0 7
47715: ARRAY
47716: PUSH
47717: LD_INT 2
47719: ARRAY
47720: PPUSH
47721: CALL_OW 351
47725: OR
47726: IFFALSE 47732
// exit ;
47728: POP
47729: POP
47730: GO 48024
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47732: LD_ADDR_VAR 0 8
47736: PUSH
47737: LD_VAR 0 12
47741: PUSH
47742: LD_VAR 0 7
47746: ARRAY
47747: PUSH
47748: LD_INT 1
47750: ARRAY
47751: PPUSH
47752: LD_VAR 0 12
47756: PUSH
47757: LD_VAR 0 7
47761: ARRAY
47762: PUSH
47763: LD_INT 2
47765: ARRAY
47766: PPUSH
47767: CALL_OW 546
47771: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47772: LD_VAR 0 8
47776: PUSH
47777: LD_INT 1
47779: ARRAY
47780: PUSH
47781: LD_VAR 0 8
47785: PUSH
47786: LD_INT 2
47788: ARRAY
47789: PUSH
47790: LD_VAR 0 13
47794: PUSH
47795: LD_INT 2
47797: PLUS
47798: GREATER
47799: OR
47800: PUSH
47801: LD_VAR 0 8
47805: PUSH
47806: LD_INT 2
47808: ARRAY
47809: PUSH
47810: LD_VAR 0 13
47814: PUSH
47815: LD_INT 2
47817: MINUS
47818: LESS
47819: OR
47820: PUSH
47821: LD_VAR 0 8
47825: PUSH
47826: LD_INT 3
47828: ARRAY
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 8
47835: PUSH
47836: LD_INT 9
47838: PUSH
47839: LD_INT 10
47841: PUSH
47842: LD_INT 11
47844: PUSH
47845: LD_INT 12
47847: PUSH
47848: LD_INT 13
47850: PUSH
47851: LD_INT 16
47853: PUSH
47854: LD_INT 17
47856: PUSH
47857: LD_INT 18
47859: PUSH
47860: LD_INT 19
47862: PUSH
47863: LD_INT 20
47865: PUSH
47866: LD_INT 21
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: IN
47884: NOT
47885: OR
47886: PUSH
47887: LD_VAR 0 8
47891: PUSH
47892: LD_INT 5
47894: ARRAY
47895: NOT
47896: OR
47897: PUSH
47898: LD_VAR 0 8
47902: PUSH
47903: LD_INT 6
47905: ARRAY
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 7
47915: PUSH
47916: LD_INT 9
47918: PUSH
47919: LD_INT 10
47921: PUSH
47922: LD_INT 11
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: IN
47933: NOT
47934: OR
47935: IFFALSE 47941
// exit ;
47937: POP
47938: POP
47939: GO 48024
// end ;
47941: GO 47612
47943: POP
47944: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47945: LD_VAR 0 9
47949: PPUSH
47950: LD_VAR 0 3
47954: PPUSH
47955: LD_VAR 0 4
47959: PPUSH
47960: LD_INT 20
47962: PPUSH
47963: CALL 39947 0 4
47967: PUSH
47968: LD_INT 4
47970: ARRAY
47971: IFFALSE 47975
// exit ;
47973: GO 48024
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47975: LD_VAR 0 2
47979: PUSH
47980: LD_INT 29
47982: PUSH
47983: LD_INT 30
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: IN
47990: PUSH
47991: LD_VAR 0 3
47995: PPUSH
47996: LD_VAR 0 4
48000: PPUSH
48001: LD_VAR 0 9
48005: PPUSH
48006: CALL_OW 440
48010: NOT
48011: AND
48012: IFFALSE 48016
// exit ;
48014: GO 48024
// result := true ;
48016: LD_ADDR_VAR 0 6
48020: PUSH
48021: LD_INT 1
48023: ST_TO_ADDR
// end ;
48024: LD_VAR 0 6
48028: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48029: LD_INT 0
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
// result = [ ] ;
48089: LD_ADDR_VAR 0 7
48093: PUSH
48094: EMPTY
48095: ST_TO_ADDR
// temp_list = [ ] ;
48096: LD_ADDR_VAR 0 9
48100: PUSH
48101: EMPTY
48102: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48103: LD_VAR 0 4
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 3
48119: PUSH
48120: LD_INT 4
48122: PUSH
48123: LD_INT 5
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: IN
48134: NOT
48135: PUSH
48136: LD_VAR 0 1
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: IN
48151: PUSH
48152: LD_VAR 0 5
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: IN
48171: NOT
48172: AND
48173: OR
48174: IFFALSE 48178
// exit ;
48176: GO 66569
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48178: LD_VAR 0 1
48182: PUSH
48183: LD_INT 6
48185: PUSH
48186: LD_INT 7
48188: PUSH
48189: LD_INT 8
48191: PUSH
48192: LD_INT 13
48194: PUSH
48195: LD_INT 12
48197: PUSH
48198: LD_INT 15
48200: PUSH
48201: LD_INT 11
48203: PUSH
48204: LD_INT 14
48206: PUSH
48207: LD_INT 10
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: IN
48221: IFFALSE 48231
// btype = b_lab ;
48223: LD_ADDR_VAR 0 1
48227: PUSH
48228: LD_INT 6
48230: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48231: LD_VAR 0 6
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: IN
48250: NOT
48251: PUSH
48252: LD_VAR 0 1
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: LD_INT 6
48271: PUSH
48272: LD_INT 36
48274: PUSH
48275: LD_INT 4
48277: PUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 31
48283: PUSH
48284: LD_INT 32
48286: PUSH
48287: LD_INT 33
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: IN
48303: NOT
48304: PUSH
48305: LD_VAR 0 6
48309: PUSH
48310: LD_INT 1
48312: EQUAL
48313: AND
48314: OR
48315: PUSH
48316: LD_VAR 0 1
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: IN
48331: NOT
48332: PUSH
48333: LD_VAR 0 6
48337: PUSH
48338: LD_INT 2
48340: EQUAL
48341: AND
48342: OR
48343: IFFALSE 48353
// mode = 0 ;
48345: LD_ADDR_VAR 0 6
48349: PUSH
48350: LD_INT 0
48352: ST_TO_ADDR
// case mode of 0 :
48353: LD_VAR 0 6
48357: PUSH
48358: LD_INT 0
48360: DOUBLE
48361: EQUAL
48362: IFTRUE 48366
48364: GO 59819
48366: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48367: LD_ADDR_VAR 0 11
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48560: LD_ADDR_VAR 0 12
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48756: LD_ADDR_VAR 0 13
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48955: LD_ADDR_VAR 0 14
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49151: LD_ADDR_VAR 0 15
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49344: LD_ADDR_VAR 0 16
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49537: LD_ADDR_VAR 0 17
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49767: LD_ADDR_VAR 0 18
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49997: LD_ADDR_VAR 0 19
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50227: LD_ADDR_VAR 0 20
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50457: LD_ADDR_VAR 0 21
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50687: LD_ADDR_VAR 0 22
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50917: LD_ADDR_VAR 0 23
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51197: LD_ADDR_VAR 0 24
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51473: LD_ADDR_VAR 0 25
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51747: LD_ADDR_VAR 0 26
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52023: LD_ADDR_VAR 0 27
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52303: LD_ADDR_VAR 0 28
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52585: LD_ADDR_VAR 0 29
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: LD_INT 3
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52864: LD_ADDR_VAR 0 30
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53142: LD_ADDR_VAR 0 31
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53420: LD_ADDR_VAR 0 32
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53698: LD_ADDR_VAR 0 33
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53977: LD_ADDR_VAR 0 34
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54257: LD_ADDR_VAR 0 35
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54369: LD_ADDR_VAR 0 36
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54481: LD_ADDR_VAR 0 37
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 38
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54705: LD_ADDR_VAR 0 39
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54817: LD_ADDR_VAR 0 40
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54929: LD_ADDR_VAR 0 41
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: LD_INT 3
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 3
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55279: LD_ADDR_VAR 0 42
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55629: LD_ADDR_VAR 0 43
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 3
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55977: LD_ADDR_VAR 0 44
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 3
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 3
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 3
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56327: LD_ADDR_VAR 0 45
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56677: LD_ADDR_VAR 0 46
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 3
56973: NEG
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57025: LD_ADDR_VAR 0 47
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57176: LD_ADDR_VAR 0 48
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57323: LD_ADDR_VAR 0 49
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57467: LD_ADDR_VAR 0 50
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57611: LD_ADDR_VAR 0 51
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57758: LD_ADDR_VAR 0 52
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57909: LD_ADDR_VAR 0 53
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58139: LD_ADDR_VAR 0 54
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58369: LD_ADDR_VAR 0 55
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58599: LD_ADDR_VAR 0 56
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58829: LD_ADDR_VAR 0 57
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59059: LD_ADDR_VAR 0 58
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59289: LD_ADDR_VAR 0 59
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59377: LD_ADDR_VAR 0 60
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59465: LD_ADDR_VAR 0 61
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59553: LD_ADDR_VAR 0 62
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59641: LD_ADDR_VAR 0 63
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59729: LD_ADDR_VAR 0 64
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// end ; 1 :
59817: GO 65714
59819: LD_INT 1
59821: DOUBLE
59822: EQUAL
59823: IFTRUE 59827
59825: GO 62450
59827: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59828: LD_ADDR_VAR 0 11
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59872: LD_ADDR_VAR 0 12
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59913: LD_ADDR_VAR 0 13
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59953: LD_ADDR_VAR 0 14
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59994: LD_ADDR_VAR 0 15
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60038: LD_ADDR_VAR 0 16
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60084: LD_ADDR_VAR 0 17
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60128: LD_ADDR_VAR 0 18
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60169: LD_ADDR_VAR 0 19
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60209: LD_ADDR_VAR 0 20
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60250: LD_ADDR_VAR 0 21
60254: PUSH
60255: LD_INT 2
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60294: LD_ADDR_VAR 0 22
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: LIST
60339: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60340: LD_ADDR_VAR 0 23
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60384: LD_ADDR_VAR 0 24
60388: PUSH
60389: LD_INT 3
60391: PUSH
60392: LD_INT 0
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 4
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60425: LD_ADDR_VAR 0 25
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: LD_INT 3
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 3
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60465: LD_ADDR_VAR 0 26
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 4
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60506: LD_ADDR_VAR 0 27
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60550: LD_ADDR_VAR 0 28
60554: PUSH
60555: LD_INT 3
60557: NEG
60558: PUSH
60559: LD_INT 3
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60596: LD_ADDR_VAR 0 29
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 4
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: LD_INT 4
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 5
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 4
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 6
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 6
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 5
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60751: LD_ADDR_VAR 0 30
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 3
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 5
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 5
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 5
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 6
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 6
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60894: LD_ADDR_VAR 0 31
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 4
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 5
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: LD_INT 5
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 6
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 6
61001: PUSH
61002: LD_INT 6
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: LD_INT 6
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61033: LD_ADDR_VAR 0 32
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 4
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 5
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 6
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 6
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61176: LD_ADDR_VAR 0 33
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 4
61228: NEG
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 5
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 6
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 6
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61331: LD_ADDR_VAR 0 34
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: LD_INT 3
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: NEG
61363: PUSH
61364: LD_INT 3
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: LD_INT 4
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: LD_INT 4
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 5
61422: NEG
61423: PUSH
61424: LD_INT 4
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 5
61434: NEG
61435: PUSH
61436: LD_INT 5
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: LD_INT 6
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 6
61458: NEG
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 6
61470: NEG
61471: PUSH
61472: LD_INT 6
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61494: LD_ADDR_VAR 0 41
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 3
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 2
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61538: LD_ADDR_VAR 0 42
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61579: LD_ADDR_VAR 0 43
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61619: LD_ADDR_VAR 0 44
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61660: LD_ADDR_VAR 0 45
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61704: LD_ADDR_VAR 0 46
61708: PUSH
61709: LD_INT 2
61711: NEG
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61750: LD_ADDR_VAR 0 47
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61783: LD_ADDR_VAR 0 48
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61814: LD_ADDR_VAR 0 49
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61843: LD_ADDR_VAR 0 50
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61872: LD_ADDR_VAR 0 51
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61903: LD_ADDR_VAR 0 52
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61936: LD_ADDR_VAR 0 53
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 3
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61980: LD_ADDR_VAR 0 54
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62021: LD_ADDR_VAR 0 55
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62061: LD_ADDR_VAR 0 56
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62102: LD_ADDR_VAR 0 57
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: NEG
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62146: LD_ADDR_VAR 0 58
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62192: LD_ADDR_VAR 0 59
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62236: LD_ADDR_VAR 0 60
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62277: LD_ADDR_VAR 0 61
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62317: LD_ADDR_VAR 0 62
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 2
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62358: LD_ADDR_VAR 0 63
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62402: LD_ADDR_VAR 0 64
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: ST_TO_ADDR
// end ; 2 :
62448: GO 65714
62450: LD_INT 2
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 65713
62458: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62459: LD_ADDR_VAR 0 29
62463: PUSH
62464: LD_INT 4
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 4
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 5
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 5
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 5
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: LD_INT 4
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 4
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 4
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 4
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 5
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 5
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 5
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 3
62742: NEG
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 3
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 4
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 4
62821: NEG
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 4
62844: NEG
62845: PUSH
62846: LD_INT 4
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: LD_INT 5
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 3
62868: NEG
62869: PUSH
62870: LD_INT 4
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: LD_INT 3
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 4
62892: NEG
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 5
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 5
62916: NEG
62917: PUSH
62918: LD_INT 5
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: LD_INT 5
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 5
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62997: LD_ADDR_VAR 0 30
63001: PUSH
63002: LD_INT 4
63004: PUSH
63005: LD_INT 4
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 4
63014: PUSH
63015: LD_INT 3
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 5
63024: PUSH
63025: LD_INT 4
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 5
63034: PUSH
63035: LD_INT 5
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: LD_INT 5
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: LD_INT 4
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 5
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: LD_INT 5
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 4
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: LD_INT 4
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 4
63187: NEG
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 3
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 4
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 5
63243: NEG
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: LD_INT 3
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 3
63301: NEG
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: NEG
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: NEG
63350: PUSH
63351: LD_INT 3
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: LD_INT 4
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 4
63385: NEG
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 4
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 5
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 4
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 3
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 4
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 5
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: LD_INT 5
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63544: LD_ADDR_VAR 0 31
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 5
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 4
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 5
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 4
63700: NEG
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 4
63711: NEG
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 4
63723: NEG
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 4
63746: NEG
63747: PUSH
63748: LD_INT 4
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 4
63758: NEG
63759: PUSH
63760: LD_INT 5
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 3
63770: NEG
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 3
63782: NEG
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 5
63806: NEG
63807: PUSH
63808: LD_INT 4
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 5
63818: NEG
63819: PUSH
63820: LD_INT 5
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: LD_INT 5
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 5
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 4
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 4
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: LD_INT 4
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 4
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 5
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 5
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 4
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 5
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64094: LD_ADDR_VAR 0 32
64098: PUSH
64099: LD_INT 4
64101: NEG
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 4
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 3
64135: NEG
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 4
64146: NEG
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 5
64157: NEG
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 5
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 5
64180: NEG
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 3
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: LD_INT 4
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: NEG
64228: PUSH
64229: LD_INT 3
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: NEG
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 4
64263: NEG
64264: PUSH
64265: LD_INT 3
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 4
64275: NEG
64276: PUSH
64277: LD_INT 4
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 4
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 4
64299: NEG
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 4
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: LD_INT 5
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 4
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 3
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: NEG
64367: PUSH
64368: LD_INT 4
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 5
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: LD_INT 3
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: NEG
64402: PUSH
64403: LD_INT 5
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 4
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 4
64506: PUSH
64507: LD_INT 4
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 4
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 5
64526: PUSH
64527: LD_INT 4
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 5
64536: PUSH
64537: LD_INT 5
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 4
64546: PUSH
64547: LD_INT 5
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: LD_INT 4
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 5
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 5
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64641: LD_ADDR_VAR 0 33
64645: PUSH
64646: LD_INT 4
64648: NEG
64649: PUSH
64650: LD_INT 4
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 4
64660: NEG
64661: PUSH
64662: LD_INT 5
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 3
64672: NEG
64673: PUSH
64674: LD_INT 4
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 3
64684: NEG
64685: PUSH
64686: LD_INT 3
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 4
64696: NEG
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 5
64708: NEG
64709: PUSH
64710: LD_INT 4
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 5
64720: NEG
64721: PUSH
64722: LD_INT 5
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 3
64732: NEG
64733: PUSH
64734: LD_INT 5
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 5
64744: NEG
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 4
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: LD_INT 3
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 3
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 4
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 5
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 5
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 4
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 5
64941: PUSH
64942: LD_INT 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: LD_INT 3
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: LD_INT 4
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 4
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: LD_INT 2
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 5
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 4
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 5
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 2
65123: NEG
65124: PUSH
65125: LD_INT 3
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65179: LD_ADDR_VAR 0 34
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_INT 4
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 4
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: LD_INT 4
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 5
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: LD_INT 3
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 2
65276: NEG
65277: PUSH
65278: LD_INT 5
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 2
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 4
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: LD_INT 4
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: LD_INT 4
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 5
65411: PUSH
65412: LD_INT 5
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: LD_INT 5
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 4
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 5
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: LD_INT 5
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 4
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 4
65564: NEG
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 4
65609: NEG
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 5
65620: NEG
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 5
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 5
65643: NEG
65644: PUSH
65645: LD_INT 2
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: NEG
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// end ; end ;
65711: GO 65714
65713: POP
// case btype of b_depot , b_warehouse :
65714: LD_VAR 0 1
65718: PUSH
65719: LD_INT 0
65721: DOUBLE
65722: EQUAL
65723: IFTRUE 65733
65725: LD_INT 1
65727: DOUBLE
65728: EQUAL
65729: IFTRUE 65733
65731: GO 65934
65733: POP
// case nation of nation_american :
65734: LD_VAR 0 5
65738: PUSH
65739: LD_INT 1
65741: DOUBLE
65742: EQUAL
65743: IFTRUE 65747
65745: GO 65803
65747: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65748: LD_ADDR_VAR 0 9
65752: PUSH
65753: LD_VAR 0 11
65757: PUSH
65758: LD_VAR 0 12
65762: PUSH
65763: LD_VAR 0 13
65767: PUSH
65768: LD_VAR 0 14
65772: PUSH
65773: LD_VAR 0 15
65777: PUSH
65778: LD_VAR 0 16
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: PUSH
65791: LD_VAR 0 4
65795: PUSH
65796: LD_INT 1
65798: PLUS
65799: ARRAY
65800: ST_TO_ADDR
65801: GO 65932
65803: LD_INT 2
65805: DOUBLE
65806: EQUAL
65807: IFTRUE 65811
65809: GO 65867
65811: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65812: LD_ADDR_VAR 0 9
65816: PUSH
65817: LD_VAR 0 17
65821: PUSH
65822: LD_VAR 0 18
65826: PUSH
65827: LD_VAR 0 19
65831: PUSH
65832: LD_VAR 0 20
65836: PUSH
65837: LD_VAR 0 21
65841: PUSH
65842: LD_VAR 0 22
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: PUSH
65855: LD_VAR 0 4
65859: PUSH
65860: LD_INT 1
65862: PLUS
65863: ARRAY
65864: ST_TO_ADDR
65865: GO 65932
65867: LD_INT 3
65869: DOUBLE
65870: EQUAL
65871: IFTRUE 65875
65873: GO 65931
65875: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65876: LD_ADDR_VAR 0 9
65880: PUSH
65881: LD_VAR 0 23
65885: PUSH
65886: LD_VAR 0 24
65890: PUSH
65891: LD_VAR 0 25
65895: PUSH
65896: LD_VAR 0 26
65900: PUSH
65901: LD_VAR 0 27
65905: PUSH
65906: LD_VAR 0 28
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: PUSH
65919: LD_VAR 0 4
65923: PUSH
65924: LD_INT 1
65926: PLUS
65927: ARRAY
65928: ST_TO_ADDR
65929: GO 65932
65931: POP
65932: GO 66487
65934: LD_INT 2
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65948
65940: LD_INT 3
65942: DOUBLE
65943: EQUAL
65944: IFTRUE 65948
65946: GO 66004
65948: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65949: LD_ADDR_VAR 0 9
65953: PUSH
65954: LD_VAR 0 29
65958: PUSH
65959: LD_VAR 0 30
65963: PUSH
65964: LD_VAR 0 31
65968: PUSH
65969: LD_VAR 0 32
65973: PUSH
65974: LD_VAR 0 33
65978: PUSH
65979: LD_VAR 0 34
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: PUSH
65992: LD_VAR 0 4
65996: PUSH
65997: LD_INT 1
65999: PLUS
66000: ARRAY
66001: ST_TO_ADDR
66002: GO 66487
66004: LD_INT 16
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66066
66010: LD_INT 17
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66066
66016: LD_INT 18
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66066
66022: LD_INT 19
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66066
66028: LD_INT 22
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66066
66034: LD_INT 20
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66066
66040: LD_INT 21
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66066
66046: LD_INT 23
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66066
66052: LD_INT 24
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66066
66058: LD_INT 25
66060: DOUBLE
66061: EQUAL
66062: IFTRUE 66066
66064: GO 66122
66066: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66067: LD_ADDR_VAR 0 9
66071: PUSH
66072: LD_VAR 0 35
66076: PUSH
66077: LD_VAR 0 36
66081: PUSH
66082: LD_VAR 0 37
66086: PUSH
66087: LD_VAR 0 38
66091: PUSH
66092: LD_VAR 0 39
66096: PUSH
66097: LD_VAR 0 40
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: LD_VAR 0 4
66114: PUSH
66115: LD_INT 1
66117: PLUS
66118: ARRAY
66119: ST_TO_ADDR
66120: GO 66487
66122: LD_INT 6
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66178
66128: LD_INT 7
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66178
66134: LD_INT 8
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66178
66140: LD_INT 13
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66178
66146: LD_INT 12
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66178
66152: LD_INT 15
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66178
66158: LD_INT 11
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66178
66164: LD_INT 14
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66178
66170: LD_INT 10
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66178
66176: GO 66234
66178: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66179: LD_ADDR_VAR 0 9
66183: PUSH
66184: LD_VAR 0 41
66188: PUSH
66189: LD_VAR 0 42
66193: PUSH
66194: LD_VAR 0 43
66198: PUSH
66199: LD_VAR 0 44
66203: PUSH
66204: LD_VAR 0 45
66208: PUSH
66209: LD_VAR 0 46
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: LD_VAR 0 4
66226: PUSH
66227: LD_INT 1
66229: PLUS
66230: ARRAY
66231: ST_TO_ADDR
66232: GO 66487
66234: LD_INT 36
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66242
66240: GO 66298
66242: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66243: LD_ADDR_VAR 0 9
66247: PUSH
66248: LD_VAR 0 47
66252: PUSH
66253: LD_VAR 0 48
66257: PUSH
66258: LD_VAR 0 49
66262: PUSH
66263: LD_VAR 0 50
66267: PUSH
66268: LD_VAR 0 51
66272: PUSH
66273: LD_VAR 0 52
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_VAR 0 4
66290: PUSH
66291: LD_INT 1
66293: PLUS
66294: ARRAY
66295: ST_TO_ADDR
66296: GO 66487
66298: LD_INT 4
66300: DOUBLE
66301: EQUAL
66302: IFTRUE 66324
66304: LD_INT 5
66306: DOUBLE
66307: EQUAL
66308: IFTRUE 66324
66310: LD_INT 34
66312: DOUBLE
66313: EQUAL
66314: IFTRUE 66324
66316: LD_INT 37
66318: DOUBLE
66319: EQUAL
66320: IFTRUE 66324
66322: GO 66380
66324: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66325: LD_ADDR_VAR 0 9
66329: PUSH
66330: LD_VAR 0 53
66334: PUSH
66335: LD_VAR 0 54
66339: PUSH
66340: LD_VAR 0 55
66344: PUSH
66345: LD_VAR 0 56
66349: PUSH
66350: LD_VAR 0 57
66354: PUSH
66355: LD_VAR 0 58
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 4
66372: PUSH
66373: LD_INT 1
66375: PLUS
66376: ARRAY
66377: ST_TO_ADDR
66378: GO 66487
66380: LD_INT 31
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66430
66386: LD_INT 32
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66430
66392: LD_INT 33
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66430
66398: LD_INT 27
66400: DOUBLE
66401: EQUAL
66402: IFTRUE 66430
66404: LD_INT 26
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66430
66410: LD_INT 28
66412: DOUBLE
66413: EQUAL
66414: IFTRUE 66430
66416: LD_INT 29
66418: DOUBLE
66419: EQUAL
66420: IFTRUE 66430
66422: LD_INT 30
66424: DOUBLE
66425: EQUAL
66426: IFTRUE 66430
66428: GO 66486
66430: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66431: LD_ADDR_VAR 0 9
66435: PUSH
66436: LD_VAR 0 59
66440: PUSH
66441: LD_VAR 0 60
66445: PUSH
66446: LD_VAR 0 61
66450: PUSH
66451: LD_VAR 0 62
66455: PUSH
66456: LD_VAR 0 63
66460: PUSH
66461: LD_VAR 0 64
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: PUSH
66474: LD_VAR 0 4
66478: PUSH
66479: LD_INT 1
66481: PLUS
66482: ARRAY
66483: ST_TO_ADDR
66484: GO 66487
66486: POP
// temp_list2 = [ ] ;
66487: LD_ADDR_VAR 0 10
66491: PUSH
66492: EMPTY
66493: ST_TO_ADDR
// for i in temp_list do
66494: LD_ADDR_VAR 0 8
66498: PUSH
66499: LD_VAR 0 9
66503: PUSH
66504: FOR_IN
66505: IFFALSE 66557
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66507: LD_ADDR_VAR 0 10
66511: PUSH
66512: LD_VAR 0 10
66516: PUSH
66517: LD_VAR 0 8
66521: PUSH
66522: LD_INT 1
66524: ARRAY
66525: PUSH
66526: LD_VAR 0 2
66530: PLUS
66531: PUSH
66532: LD_VAR 0 8
66536: PUSH
66537: LD_INT 2
66539: ARRAY
66540: PUSH
66541: LD_VAR 0 3
66545: PLUS
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: ADD
66554: ST_TO_ADDR
66555: GO 66504
66557: POP
66558: POP
// result = temp_list2 ;
66559: LD_ADDR_VAR 0 7
66563: PUSH
66564: LD_VAR 0 10
66568: ST_TO_ADDR
// end ;
66569: LD_VAR 0 7
66573: RET
// export function EnemyInRange ( unit , dist ) ; begin
66574: LD_INT 0
66576: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66577: LD_ADDR_VAR 0 3
66581: PUSH
66582: LD_VAR 0 1
66586: PPUSH
66587: CALL_OW 255
66591: PPUSH
66592: LD_VAR 0 1
66596: PPUSH
66597: CALL_OW 250
66601: PPUSH
66602: LD_VAR 0 1
66606: PPUSH
66607: CALL_OW 251
66611: PPUSH
66612: LD_VAR 0 2
66616: PPUSH
66617: CALL 39947 0 4
66621: PUSH
66622: LD_INT 4
66624: ARRAY
66625: ST_TO_ADDR
// end ;
66626: LD_VAR 0 3
66630: RET
// export function PlayerSeeMe ( unit ) ; begin
66631: LD_INT 0
66633: PPUSH
// result := See ( your_side , unit ) ;
66634: LD_ADDR_VAR 0 2
66638: PUSH
66639: LD_OWVAR 2
66643: PPUSH
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 292
66653: ST_TO_ADDR
// end ;
66654: LD_VAR 0 2
66658: RET
// export function ReverseDir ( unit ) ; begin
66659: LD_INT 0
66661: PPUSH
// if not unit then
66662: LD_VAR 0 1
66666: NOT
66667: IFFALSE 66671
// exit ;
66669: GO 66694
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66671: LD_ADDR_VAR 0 2
66675: PUSH
66676: LD_VAR 0 1
66680: PPUSH
66681: CALL_OW 254
66685: PUSH
66686: LD_INT 3
66688: PLUS
66689: PUSH
66690: LD_INT 6
66692: MOD
66693: ST_TO_ADDR
// end ;
66694: LD_VAR 0 2
66698: RET
// export function ReverseArray ( array ) ; var i ; begin
66699: LD_INT 0
66701: PPUSH
66702: PPUSH
// if not array then
66703: LD_VAR 0 1
66707: NOT
66708: IFFALSE 66712
// exit ;
66710: GO 66767
// result := [ ] ;
66712: LD_ADDR_VAR 0 2
66716: PUSH
66717: EMPTY
66718: ST_TO_ADDR
// for i := array downto 1 do
66719: LD_ADDR_VAR 0 3
66723: PUSH
66724: DOUBLE
66725: LD_VAR 0 1
66729: INC
66730: ST_TO_ADDR
66731: LD_INT 1
66733: PUSH
66734: FOR_DOWNTO
66735: IFFALSE 66765
// result := Join ( result , array [ i ] ) ;
66737: LD_ADDR_VAR 0 2
66741: PUSH
66742: LD_VAR 0 2
66746: PPUSH
66747: LD_VAR 0 1
66751: PUSH
66752: LD_VAR 0 3
66756: ARRAY
66757: PPUSH
66758: CALL 71423 0 2
66762: ST_TO_ADDR
66763: GO 66734
66765: POP
66766: POP
// end ;
66767: LD_VAR 0 2
66771: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66772: LD_INT 0
66774: PPUSH
66775: PPUSH
66776: PPUSH
66777: PPUSH
66778: PPUSH
66779: PPUSH
// if not unit or not hexes then
66780: LD_VAR 0 1
66784: NOT
66785: PUSH
66786: LD_VAR 0 2
66790: NOT
66791: OR
66792: IFFALSE 66796
// exit ;
66794: GO 66919
// dist := 9999 ;
66796: LD_ADDR_VAR 0 5
66800: PUSH
66801: LD_INT 9999
66803: ST_TO_ADDR
// for i = 1 to hexes do
66804: LD_ADDR_VAR 0 4
66808: PUSH
66809: DOUBLE
66810: LD_INT 1
66812: DEC
66813: ST_TO_ADDR
66814: LD_VAR 0 2
66818: PUSH
66819: FOR_TO
66820: IFFALSE 66907
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66822: LD_ADDR_VAR 0 6
66826: PUSH
66827: LD_VAR 0 1
66831: PPUSH
66832: LD_VAR 0 2
66836: PUSH
66837: LD_VAR 0 4
66841: ARRAY
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PPUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_VAR 0 4
66856: ARRAY
66857: PUSH
66858: LD_INT 2
66860: ARRAY
66861: PPUSH
66862: CALL_OW 297
66866: ST_TO_ADDR
// if tdist < dist then
66867: LD_VAR 0 6
66871: PUSH
66872: LD_VAR 0 5
66876: LESS
66877: IFFALSE 66905
// begin hex := hexes [ i ] ;
66879: LD_ADDR_VAR 0 8
66883: PUSH
66884: LD_VAR 0 2
66888: PUSH
66889: LD_VAR 0 4
66893: ARRAY
66894: ST_TO_ADDR
// dist := tdist ;
66895: LD_ADDR_VAR 0 5
66899: PUSH
66900: LD_VAR 0 6
66904: ST_TO_ADDR
// end ; end ;
66905: GO 66819
66907: POP
66908: POP
// result := hex ;
66909: LD_ADDR_VAR 0 3
66913: PUSH
66914: LD_VAR 0 8
66918: ST_TO_ADDR
// end ;
66919: LD_VAR 0 3
66923: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66924: LD_INT 0
66926: PPUSH
66927: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66928: LD_VAR 0 1
66932: NOT
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_INT 21
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 23
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PPUSH
66963: CALL_OW 69
66967: IN
66968: NOT
66969: OR
66970: IFFALSE 66974
// exit ;
66972: GO 67021
// for i = 1 to 3 do
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: DOUBLE
66980: LD_INT 1
66982: DEC
66983: ST_TO_ADDR
66984: LD_INT 3
66986: PUSH
66987: FOR_TO
66988: IFFALSE 67019
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66990: LD_VAR 0 1
66994: PPUSH
66995: CALL_OW 250
66999: PPUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 251
67009: PPUSH
67010: LD_INT 1
67012: PPUSH
67013: CALL_OW 453
67017: GO 66987
67019: POP
67020: POP
// end ;
67021: LD_VAR 0 2
67025: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67026: LD_INT 0
67028: PPUSH
67029: PPUSH
67030: PPUSH
67031: PPUSH
67032: PPUSH
67033: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67034: LD_VAR 0 1
67038: NOT
67039: PUSH
67040: LD_VAR 0 2
67044: NOT
67045: OR
67046: PUSH
67047: LD_VAR 0 1
67051: PPUSH
67052: CALL_OW 314
67056: OR
67057: IFFALSE 67061
// exit ;
67059: GO 67528
// if GetLives ( i ) < 250 then
67061: LD_VAR 0 4
67065: PPUSH
67066: CALL_OW 256
67070: PUSH
67071: LD_INT 250
67073: LESS
67074: IFFALSE 67087
// begin ComAutodestruct ( i ) ;
67076: LD_VAR 0 4
67080: PPUSH
67081: CALL 66924 0 1
// exit ;
67085: GO 67528
// end ; x := GetX ( enemy_unit ) ;
67087: LD_ADDR_VAR 0 7
67091: PUSH
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 250
67101: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67102: LD_ADDR_VAR 0 8
67106: PUSH
67107: LD_VAR 0 2
67111: PPUSH
67112: CALL_OW 251
67116: ST_TO_ADDR
// if not x or not y then
67117: LD_VAR 0 7
67121: NOT
67122: PUSH
67123: LD_VAR 0 8
67127: NOT
67128: OR
67129: IFFALSE 67133
// exit ;
67131: GO 67528
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67133: LD_ADDR_VAR 0 6
67137: PUSH
67138: LD_VAR 0 7
67142: PPUSH
67143: LD_INT 0
67145: PPUSH
67146: LD_INT 4
67148: PPUSH
67149: CALL_OW 272
67153: PUSH
67154: LD_VAR 0 8
67158: PPUSH
67159: LD_INT 0
67161: PPUSH
67162: LD_INT 4
67164: PPUSH
67165: CALL_OW 273
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_VAR 0 7
67178: PPUSH
67179: LD_INT 1
67181: PPUSH
67182: LD_INT 4
67184: PPUSH
67185: CALL_OW 272
67189: PUSH
67190: LD_VAR 0 8
67194: PPUSH
67195: LD_INT 1
67197: PPUSH
67198: LD_INT 4
67200: PPUSH
67201: CALL_OW 273
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_VAR 0 7
67214: PPUSH
67215: LD_INT 2
67217: PPUSH
67218: LD_INT 4
67220: PPUSH
67221: CALL_OW 272
67225: PUSH
67226: LD_VAR 0 8
67230: PPUSH
67231: LD_INT 2
67233: PPUSH
67234: LD_INT 4
67236: PPUSH
67237: CALL_OW 273
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_VAR 0 7
67250: PPUSH
67251: LD_INT 3
67253: PPUSH
67254: LD_INT 4
67256: PPUSH
67257: CALL_OW 272
67261: PUSH
67262: LD_VAR 0 8
67266: PPUSH
67267: LD_INT 3
67269: PPUSH
67270: LD_INT 4
67272: PPUSH
67273: CALL_OW 273
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_VAR 0 7
67286: PPUSH
67287: LD_INT 4
67289: PPUSH
67290: LD_INT 4
67292: PPUSH
67293: CALL_OW 272
67297: PUSH
67298: LD_VAR 0 8
67302: PPUSH
67303: LD_INT 4
67305: PPUSH
67306: LD_INT 4
67308: PPUSH
67309: CALL_OW 273
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 7
67322: PPUSH
67323: LD_INT 5
67325: PPUSH
67326: LD_INT 4
67328: PPUSH
67329: CALL_OW 272
67333: PUSH
67334: LD_VAR 0 8
67338: PPUSH
67339: LD_INT 5
67341: PPUSH
67342: LD_INT 4
67344: PPUSH
67345: CALL_OW 273
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// for i = tmp downto 1 do
67362: LD_ADDR_VAR 0 4
67366: PUSH
67367: DOUBLE
67368: LD_VAR 0 6
67372: INC
67373: ST_TO_ADDR
67374: LD_INT 1
67376: PUSH
67377: FOR_DOWNTO
67378: IFFALSE 67479
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67380: LD_VAR 0 6
67384: PUSH
67385: LD_VAR 0 4
67389: ARRAY
67390: PUSH
67391: LD_INT 1
67393: ARRAY
67394: PPUSH
67395: LD_VAR 0 6
67399: PUSH
67400: LD_VAR 0 4
67404: ARRAY
67405: PUSH
67406: LD_INT 2
67408: ARRAY
67409: PPUSH
67410: CALL_OW 488
67414: NOT
67415: PUSH
67416: LD_VAR 0 6
67420: PUSH
67421: LD_VAR 0 4
67425: ARRAY
67426: PUSH
67427: LD_INT 1
67429: ARRAY
67430: PPUSH
67431: LD_VAR 0 6
67435: PUSH
67436: LD_VAR 0 4
67440: ARRAY
67441: PUSH
67442: LD_INT 2
67444: ARRAY
67445: PPUSH
67446: CALL_OW 428
67450: PUSH
67451: LD_INT 0
67453: NONEQUAL
67454: OR
67455: IFFALSE 67477
// tmp := Delete ( tmp , i ) ;
67457: LD_ADDR_VAR 0 6
67461: PUSH
67462: LD_VAR 0 6
67466: PPUSH
67467: LD_VAR 0 4
67471: PPUSH
67472: CALL_OW 3
67476: ST_TO_ADDR
67477: GO 67377
67479: POP
67480: POP
// j := GetClosestHex ( unit , tmp ) ;
67481: LD_ADDR_VAR 0 5
67485: PUSH
67486: LD_VAR 0 1
67490: PPUSH
67491: LD_VAR 0 6
67495: PPUSH
67496: CALL 66772 0 2
67500: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67501: LD_VAR 0 1
67505: PPUSH
67506: LD_VAR 0 5
67510: PUSH
67511: LD_INT 1
67513: ARRAY
67514: PPUSH
67515: LD_VAR 0 5
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: PPUSH
67524: CALL_OW 111
// end ;
67528: LD_VAR 0 3
67532: RET
// export function PrepareApemanSoldier ( ) ; begin
67533: LD_INT 0
67535: PPUSH
// uc_nation := 0 ;
67536: LD_ADDR_OWVAR 21
67540: PUSH
67541: LD_INT 0
67543: ST_TO_ADDR
// hc_sex := sex_male ;
67544: LD_ADDR_OWVAR 27
67548: PUSH
67549: LD_INT 1
67551: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67552: LD_ADDR_OWVAR 28
67556: PUSH
67557: LD_INT 15
67559: ST_TO_ADDR
// hc_gallery :=  ;
67560: LD_ADDR_OWVAR 33
67564: PUSH
67565: LD_STRING 
67567: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67568: LD_ADDR_OWVAR 31
67572: PUSH
67573: LD_INT 0
67575: PPUSH
67576: LD_INT 3
67578: PPUSH
67579: CALL_OW 12
67583: PUSH
67584: LD_INT 0
67586: PPUSH
67587: LD_INT 3
67589: PPUSH
67590: CALL_OW 12
67594: PUSH
67595: LD_INT 0
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// end ;
67607: LD_VAR 0 1
67611: RET
// export function PrepareApemanEngineer ( ) ; begin
67612: LD_INT 0
67614: PPUSH
// uc_nation := 0 ;
67615: LD_ADDR_OWVAR 21
67619: PUSH
67620: LD_INT 0
67622: ST_TO_ADDR
// hc_sex := sex_male ;
67623: LD_ADDR_OWVAR 27
67627: PUSH
67628: LD_INT 1
67630: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67631: LD_ADDR_OWVAR 28
67635: PUSH
67636: LD_INT 16
67638: ST_TO_ADDR
// hc_gallery :=  ;
67639: LD_ADDR_OWVAR 33
67643: PUSH
67644: LD_STRING 
67646: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67647: LD_ADDR_OWVAR 31
67651: PUSH
67652: LD_INT 0
67654: PPUSH
67655: LD_INT 3
67657: PPUSH
67658: CALL_OW 12
67662: PUSH
67663: LD_INT 0
67665: PPUSH
67666: LD_INT 3
67668: PPUSH
67669: CALL_OW 12
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// end ;
67686: LD_VAR 0 1
67690: RET
// export function PrepareApeman ( agressivity ) ; begin
67691: LD_INT 0
67693: PPUSH
// uc_side := 0 ;
67694: LD_ADDR_OWVAR 20
67698: PUSH
67699: LD_INT 0
67701: ST_TO_ADDR
// uc_nation := 0 ;
67702: LD_ADDR_OWVAR 21
67706: PUSH
67707: LD_INT 0
67709: ST_TO_ADDR
// hc_sex := sex_male ;
67710: LD_ADDR_OWVAR 27
67714: PUSH
67715: LD_INT 1
67717: ST_TO_ADDR
// hc_class := class_apeman ;
67718: LD_ADDR_OWVAR 28
67722: PUSH
67723: LD_INT 12
67725: ST_TO_ADDR
// hc_gallery :=  ;
67726: LD_ADDR_OWVAR 33
67730: PUSH
67731: LD_STRING 
67733: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67734: LD_ADDR_OWVAR 35
67738: PUSH
67739: LD_VAR 0 1
67743: NEG
67744: PPUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 12
67754: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67755: LD_ADDR_OWVAR 31
67759: PUSH
67760: LD_INT 0
67762: PPUSH
67763: LD_INT 3
67765: PPUSH
67766: CALL_OW 12
67770: PUSH
67771: LD_INT 0
67773: PPUSH
67774: LD_INT 3
67776: PPUSH
67777: CALL_OW 12
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// end ;
67794: LD_VAR 0 2
67798: RET
// export function PrepareTiger ( agressivity ) ; begin
67799: LD_INT 0
67801: PPUSH
// uc_side := 0 ;
67802: LD_ADDR_OWVAR 20
67806: PUSH
67807: LD_INT 0
67809: ST_TO_ADDR
// uc_nation := 0 ;
67810: LD_ADDR_OWVAR 21
67814: PUSH
67815: LD_INT 0
67817: ST_TO_ADDR
// hc_class := class_tiger ;
67818: LD_ADDR_OWVAR 28
67822: PUSH
67823: LD_INT 14
67825: ST_TO_ADDR
// hc_gallery :=  ;
67826: LD_ADDR_OWVAR 33
67830: PUSH
67831: LD_STRING 
67833: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67834: LD_ADDR_OWVAR 35
67838: PUSH
67839: LD_VAR 0 1
67843: NEG
67844: PPUSH
67845: LD_VAR 0 1
67849: PPUSH
67850: CALL_OW 12
67854: ST_TO_ADDR
// end ;
67855: LD_VAR 0 2
67859: RET
// export function PrepareEnchidna ( ) ; begin
67860: LD_INT 0
67862: PPUSH
// uc_side := 0 ;
67863: LD_ADDR_OWVAR 20
67867: PUSH
67868: LD_INT 0
67870: ST_TO_ADDR
// uc_nation := 0 ;
67871: LD_ADDR_OWVAR 21
67875: PUSH
67876: LD_INT 0
67878: ST_TO_ADDR
// hc_class := class_baggie ;
67879: LD_ADDR_OWVAR 28
67883: PUSH
67884: LD_INT 13
67886: ST_TO_ADDR
// hc_gallery :=  ;
67887: LD_ADDR_OWVAR 33
67891: PUSH
67892: LD_STRING 
67894: ST_TO_ADDR
// end ;
67895: LD_VAR 0 1
67899: RET
// export function PrepareFrog ( ) ; begin
67900: LD_INT 0
67902: PPUSH
// uc_side := 0 ;
67903: LD_ADDR_OWVAR 20
67907: PUSH
67908: LD_INT 0
67910: ST_TO_ADDR
// uc_nation := 0 ;
67911: LD_ADDR_OWVAR 21
67915: PUSH
67916: LD_INT 0
67918: ST_TO_ADDR
// hc_class := class_frog ;
67919: LD_ADDR_OWVAR 28
67923: PUSH
67924: LD_INT 19
67926: ST_TO_ADDR
// hc_gallery :=  ;
67927: LD_ADDR_OWVAR 33
67931: PUSH
67932: LD_STRING 
67934: ST_TO_ADDR
// end ;
67935: LD_VAR 0 1
67939: RET
// export function PrepareFish ( ) ; begin
67940: LD_INT 0
67942: PPUSH
// uc_side := 0 ;
67943: LD_ADDR_OWVAR 20
67947: PUSH
67948: LD_INT 0
67950: ST_TO_ADDR
// uc_nation := 0 ;
67951: LD_ADDR_OWVAR 21
67955: PUSH
67956: LD_INT 0
67958: ST_TO_ADDR
// hc_class := class_fish ;
67959: LD_ADDR_OWVAR 28
67963: PUSH
67964: LD_INT 20
67966: ST_TO_ADDR
// hc_gallery :=  ;
67967: LD_ADDR_OWVAR 33
67971: PUSH
67972: LD_STRING 
67974: ST_TO_ADDR
// end ;
67975: LD_VAR 0 1
67979: RET
// export function PrepareBird ( ) ; begin
67980: LD_INT 0
67982: PPUSH
// uc_side := 0 ;
67983: LD_ADDR_OWVAR 20
67987: PUSH
67988: LD_INT 0
67990: ST_TO_ADDR
// uc_nation := 0 ;
67991: LD_ADDR_OWVAR 21
67995: PUSH
67996: LD_INT 0
67998: ST_TO_ADDR
// hc_class := class_phororhacos ;
67999: LD_ADDR_OWVAR 28
68003: PUSH
68004: LD_INT 18
68006: ST_TO_ADDR
// hc_gallery :=  ;
68007: LD_ADDR_OWVAR 33
68011: PUSH
68012: LD_STRING 
68014: ST_TO_ADDR
// end ;
68015: LD_VAR 0 1
68019: RET
// export function PrepareHorse ( ) ; begin
68020: LD_INT 0
68022: PPUSH
// uc_side := 0 ;
68023: LD_ADDR_OWVAR 20
68027: PUSH
68028: LD_INT 0
68030: ST_TO_ADDR
// uc_nation := 0 ;
68031: LD_ADDR_OWVAR 21
68035: PUSH
68036: LD_INT 0
68038: ST_TO_ADDR
// hc_class := class_horse ;
68039: LD_ADDR_OWVAR 28
68043: PUSH
68044: LD_INT 21
68046: ST_TO_ADDR
// hc_gallery :=  ;
68047: LD_ADDR_OWVAR 33
68051: PUSH
68052: LD_STRING 
68054: ST_TO_ADDR
// end ;
68055: LD_VAR 0 1
68059: RET
// export function PrepareMastodont ( ) ; begin
68060: LD_INT 0
68062: PPUSH
// uc_side := 0 ;
68063: LD_ADDR_OWVAR 20
68067: PUSH
68068: LD_INT 0
68070: ST_TO_ADDR
// uc_nation := 0 ;
68071: LD_ADDR_OWVAR 21
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68079: LD_ADDR_OWVAR 37
68083: PUSH
68084: LD_INT 31
68086: ST_TO_ADDR
// vc_control := control_rider ;
68087: LD_ADDR_OWVAR 38
68091: PUSH
68092: LD_INT 4
68094: ST_TO_ADDR
// end ;
68095: LD_VAR 0 1
68099: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68100: LD_INT 0
68102: PPUSH
68103: PPUSH
68104: PPUSH
// uc_side = 0 ;
68105: LD_ADDR_OWVAR 20
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// uc_nation = 0 ;
68113: LD_ADDR_OWVAR 21
68117: PUSH
68118: LD_INT 0
68120: ST_TO_ADDR
// InitHc_All ( ) ;
68121: CALL_OW 584
// InitVc ;
68125: CALL_OW 20
// if mastodonts then
68129: LD_VAR 0 6
68133: IFFALSE 68200
// for i = 1 to mastodonts do
68135: LD_ADDR_VAR 0 11
68139: PUSH
68140: DOUBLE
68141: LD_INT 1
68143: DEC
68144: ST_TO_ADDR
68145: LD_VAR 0 6
68149: PUSH
68150: FOR_TO
68151: IFFALSE 68198
// begin vc_chassis := 31 ;
68153: LD_ADDR_OWVAR 37
68157: PUSH
68158: LD_INT 31
68160: ST_TO_ADDR
// vc_control := control_rider ;
68161: LD_ADDR_OWVAR 38
68165: PUSH
68166: LD_INT 4
68168: ST_TO_ADDR
// animal := CreateVehicle ;
68169: LD_ADDR_VAR 0 12
68173: PUSH
68174: CALL_OW 45
68178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68179: LD_VAR 0 12
68183: PPUSH
68184: LD_VAR 0 8
68188: PPUSH
68189: LD_INT 0
68191: PPUSH
68192: CALL 70328 0 3
// end ;
68196: GO 68150
68198: POP
68199: POP
// if horses then
68200: LD_VAR 0 5
68204: IFFALSE 68271
// for i = 1 to horses do
68206: LD_ADDR_VAR 0 11
68210: PUSH
68211: DOUBLE
68212: LD_INT 1
68214: DEC
68215: ST_TO_ADDR
68216: LD_VAR 0 5
68220: PUSH
68221: FOR_TO
68222: IFFALSE 68269
// begin hc_class := 21 ;
68224: LD_ADDR_OWVAR 28
68228: PUSH
68229: LD_INT 21
68231: ST_TO_ADDR
// hc_gallery :=  ;
68232: LD_ADDR_OWVAR 33
68236: PUSH
68237: LD_STRING 
68239: ST_TO_ADDR
// animal := CreateHuman ;
68240: LD_ADDR_VAR 0 12
68244: PUSH
68245: CALL_OW 44
68249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68250: LD_VAR 0 12
68254: PPUSH
68255: LD_VAR 0 8
68259: PPUSH
68260: LD_INT 0
68262: PPUSH
68263: CALL 70328 0 3
// end ;
68267: GO 68221
68269: POP
68270: POP
// if birds then
68271: LD_VAR 0 1
68275: IFFALSE 68342
// for i = 1 to birds do
68277: LD_ADDR_VAR 0 11
68281: PUSH
68282: DOUBLE
68283: LD_INT 1
68285: DEC
68286: ST_TO_ADDR
68287: LD_VAR 0 1
68291: PUSH
68292: FOR_TO
68293: IFFALSE 68340
// begin hc_class := 18 ;
68295: LD_ADDR_OWVAR 28
68299: PUSH
68300: LD_INT 18
68302: ST_TO_ADDR
// hc_gallery =  ;
68303: LD_ADDR_OWVAR 33
68307: PUSH
68308: LD_STRING 
68310: ST_TO_ADDR
// animal := CreateHuman ;
68311: LD_ADDR_VAR 0 12
68315: PUSH
68316: CALL_OW 44
68320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68321: LD_VAR 0 12
68325: PPUSH
68326: LD_VAR 0 8
68330: PPUSH
68331: LD_INT 0
68333: PPUSH
68334: CALL 70328 0 3
// end ;
68338: GO 68292
68340: POP
68341: POP
// if tigers then
68342: LD_VAR 0 2
68346: IFFALSE 68430
// for i = 1 to tigers do
68348: LD_ADDR_VAR 0 11
68352: PUSH
68353: DOUBLE
68354: LD_INT 1
68356: DEC
68357: ST_TO_ADDR
68358: LD_VAR 0 2
68362: PUSH
68363: FOR_TO
68364: IFFALSE 68428
// begin hc_class = class_tiger ;
68366: LD_ADDR_OWVAR 28
68370: PUSH
68371: LD_INT 14
68373: ST_TO_ADDR
// hc_gallery =  ;
68374: LD_ADDR_OWVAR 33
68378: PUSH
68379: LD_STRING 
68381: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68382: LD_ADDR_OWVAR 35
68386: PUSH
68387: LD_INT 7
68389: NEG
68390: PPUSH
68391: LD_INT 7
68393: PPUSH
68394: CALL_OW 12
68398: ST_TO_ADDR
// animal := CreateHuman ;
68399: LD_ADDR_VAR 0 12
68403: PUSH
68404: CALL_OW 44
68408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68409: LD_VAR 0 12
68413: PPUSH
68414: LD_VAR 0 8
68418: PPUSH
68419: LD_INT 0
68421: PPUSH
68422: CALL 70328 0 3
// end ;
68426: GO 68363
68428: POP
68429: POP
// if apemans then
68430: LD_VAR 0 3
68434: IFFALSE 68557
// for i = 1 to apemans do
68436: LD_ADDR_VAR 0 11
68440: PUSH
68441: DOUBLE
68442: LD_INT 1
68444: DEC
68445: ST_TO_ADDR
68446: LD_VAR 0 3
68450: PUSH
68451: FOR_TO
68452: IFFALSE 68555
// begin hc_class = class_apeman ;
68454: LD_ADDR_OWVAR 28
68458: PUSH
68459: LD_INT 12
68461: ST_TO_ADDR
// hc_gallery =  ;
68462: LD_ADDR_OWVAR 33
68466: PUSH
68467: LD_STRING 
68469: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68470: LD_ADDR_OWVAR 35
68474: PUSH
68475: LD_INT 2
68477: NEG
68478: PPUSH
68479: LD_INT 2
68481: PPUSH
68482: CALL_OW 12
68486: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68487: LD_ADDR_OWVAR 31
68491: PUSH
68492: LD_INT 1
68494: PPUSH
68495: LD_INT 3
68497: PPUSH
68498: CALL_OW 12
68502: PUSH
68503: LD_INT 1
68505: PPUSH
68506: LD_INT 3
68508: PPUSH
68509: CALL_OW 12
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: ST_TO_ADDR
// animal := CreateHuman ;
68526: LD_ADDR_VAR 0 12
68530: PUSH
68531: CALL_OW 44
68535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68536: LD_VAR 0 12
68540: PPUSH
68541: LD_VAR 0 8
68545: PPUSH
68546: LD_INT 0
68548: PPUSH
68549: CALL 70328 0 3
// end ;
68553: GO 68451
68555: POP
68556: POP
// if enchidnas then
68557: LD_VAR 0 4
68561: IFFALSE 68628
// for i = 1 to enchidnas do
68563: LD_ADDR_VAR 0 11
68567: PUSH
68568: DOUBLE
68569: LD_INT 1
68571: DEC
68572: ST_TO_ADDR
68573: LD_VAR 0 4
68577: PUSH
68578: FOR_TO
68579: IFFALSE 68626
// begin hc_class = 13 ;
68581: LD_ADDR_OWVAR 28
68585: PUSH
68586: LD_INT 13
68588: ST_TO_ADDR
// hc_gallery =  ;
68589: LD_ADDR_OWVAR 33
68593: PUSH
68594: LD_STRING 
68596: ST_TO_ADDR
// animal := CreateHuman ;
68597: LD_ADDR_VAR 0 12
68601: PUSH
68602: CALL_OW 44
68606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68607: LD_VAR 0 12
68611: PPUSH
68612: LD_VAR 0 8
68616: PPUSH
68617: LD_INT 0
68619: PPUSH
68620: CALL 70328 0 3
// end ;
68624: GO 68578
68626: POP
68627: POP
// if fishes then
68628: LD_VAR 0 7
68632: IFFALSE 68699
// for i = 1 to fishes do
68634: LD_ADDR_VAR 0 11
68638: PUSH
68639: DOUBLE
68640: LD_INT 1
68642: DEC
68643: ST_TO_ADDR
68644: LD_VAR 0 7
68648: PUSH
68649: FOR_TO
68650: IFFALSE 68697
// begin hc_class = 20 ;
68652: LD_ADDR_OWVAR 28
68656: PUSH
68657: LD_INT 20
68659: ST_TO_ADDR
// hc_gallery =  ;
68660: LD_ADDR_OWVAR 33
68664: PUSH
68665: LD_STRING 
68667: ST_TO_ADDR
// animal := CreateHuman ;
68668: LD_ADDR_VAR 0 12
68672: PUSH
68673: CALL_OW 44
68677: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68678: LD_VAR 0 12
68682: PPUSH
68683: LD_VAR 0 9
68687: PPUSH
68688: LD_INT 0
68690: PPUSH
68691: CALL 70328 0 3
// end ;
68695: GO 68649
68697: POP
68698: POP
// end ;
68699: LD_VAR 0 10
68703: RET
// export function WantHeal ( sci , unit ) ; begin
68704: LD_INT 0
68706: PPUSH
// if GetTaskList ( sci ) > 0 then
68707: LD_VAR 0 1
68711: PPUSH
68712: CALL_OW 437
68716: PUSH
68717: LD_INT 0
68719: GREATER
68720: IFFALSE 68790
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68722: LD_VAR 0 1
68726: PPUSH
68727: CALL_OW 437
68731: PUSH
68732: LD_INT 1
68734: ARRAY
68735: PUSH
68736: LD_INT 1
68738: ARRAY
68739: PUSH
68740: LD_STRING l
68742: EQUAL
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: CALL_OW 437
68753: PUSH
68754: LD_INT 1
68756: ARRAY
68757: PUSH
68758: LD_INT 4
68760: ARRAY
68761: PUSH
68762: LD_VAR 0 2
68766: EQUAL
68767: AND
68768: IFFALSE 68780
// result := true else
68770: LD_ADDR_VAR 0 3
68774: PUSH
68775: LD_INT 1
68777: ST_TO_ADDR
68778: GO 68788
// result := false ;
68780: LD_ADDR_VAR 0 3
68784: PUSH
68785: LD_INT 0
68787: ST_TO_ADDR
// end else
68788: GO 68798
// result := false ;
68790: LD_ADDR_VAR 0 3
68794: PUSH
68795: LD_INT 0
68797: ST_TO_ADDR
// end ;
68798: LD_VAR 0 3
68802: RET
// export function HealTarget ( sci ) ; begin
68803: LD_INT 0
68805: PPUSH
// if not sci then
68806: LD_VAR 0 1
68810: NOT
68811: IFFALSE 68815
// exit ;
68813: GO 68880
// result := 0 ;
68815: LD_ADDR_VAR 0 2
68819: PUSH
68820: LD_INT 0
68822: ST_TO_ADDR
// if GetTaskList ( sci ) then
68823: LD_VAR 0 1
68827: PPUSH
68828: CALL_OW 437
68832: IFFALSE 68880
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68834: LD_VAR 0 1
68838: PPUSH
68839: CALL_OW 437
68843: PUSH
68844: LD_INT 1
68846: ARRAY
68847: PUSH
68848: LD_INT 1
68850: ARRAY
68851: PUSH
68852: LD_STRING l
68854: EQUAL
68855: IFFALSE 68880
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68857: LD_ADDR_VAR 0 2
68861: PUSH
68862: LD_VAR 0 1
68866: PPUSH
68867: CALL_OW 437
68871: PUSH
68872: LD_INT 1
68874: ARRAY
68875: PUSH
68876: LD_INT 4
68878: ARRAY
68879: ST_TO_ADDR
// end ;
68880: LD_VAR 0 2
68884: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68885: LD_INT 0
68887: PPUSH
68888: PPUSH
68889: PPUSH
68890: PPUSH
// if not base_units then
68891: LD_VAR 0 1
68895: NOT
68896: IFFALSE 68900
// exit ;
68898: GO 68987
// result := false ;
68900: LD_ADDR_VAR 0 2
68904: PUSH
68905: LD_INT 0
68907: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68908: LD_ADDR_VAR 0 5
68912: PUSH
68913: LD_VAR 0 1
68917: PPUSH
68918: LD_INT 21
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PPUSH
68928: CALL_OW 72
68932: ST_TO_ADDR
// if not tmp then
68933: LD_VAR 0 5
68937: NOT
68938: IFFALSE 68942
// exit ;
68940: GO 68987
// for i in tmp do
68942: LD_ADDR_VAR 0 3
68946: PUSH
68947: LD_VAR 0 5
68951: PUSH
68952: FOR_IN
68953: IFFALSE 68985
// begin result := EnemyInRange ( i , 22 ) ;
68955: LD_ADDR_VAR 0 2
68959: PUSH
68960: LD_VAR 0 3
68964: PPUSH
68965: LD_INT 22
68967: PPUSH
68968: CALL 66574 0 2
68972: ST_TO_ADDR
// if result then
68973: LD_VAR 0 2
68977: IFFALSE 68983
// exit ;
68979: POP
68980: POP
68981: GO 68987
// end ;
68983: GO 68952
68985: POP
68986: POP
// end ;
68987: LD_VAR 0 2
68991: RET
// export function FilterByTag ( units , tag ) ; begin
68992: LD_INT 0
68994: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68995: LD_ADDR_VAR 0 3
68999: PUSH
69000: LD_VAR 0 1
69004: PPUSH
69005: LD_INT 120
69007: PUSH
69008: LD_VAR 0 2
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PPUSH
69017: CALL_OW 72
69021: ST_TO_ADDR
// end ;
69022: LD_VAR 0 3
69026: RET
// export function IsDriver ( un ) ; begin
69027: LD_INT 0
69029: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69030: LD_ADDR_VAR 0 2
69034: PUSH
69035: LD_VAR 0 1
69039: PUSH
69040: LD_INT 55
69042: PUSH
69043: EMPTY
69044: LIST
69045: PPUSH
69046: CALL_OW 69
69050: IN
69051: ST_TO_ADDR
// end ;
69052: LD_VAR 0 2
69056: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69057: LD_INT 0
69059: PPUSH
69060: PPUSH
// list := [ ] ;
69061: LD_ADDR_VAR 0 5
69065: PUSH
69066: EMPTY
69067: ST_TO_ADDR
// case d of 0 :
69068: LD_VAR 0 3
69072: PUSH
69073: LD_INT 0
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69081
69079: GO 69214
69081: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69082: LD_ADDR_VAR 0 5
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_INT 4
69094: MINUS
69095: PUSH
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 4
69103: MINUS
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: PUSH
69113: LD_VAR 0 1
69117: PUSH
69118: LD_INT 3
69120: MINUS
69121: PUSH
69122: LD_VAR 0 2
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: PUSH
69135: LD_VAR 0 1
69139: PUSH
69140: LD_INT 4
69142: PLUS
69143: PUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 1
69161: PUSH
69162: LD_INT 3
69164: PLUS
69165: PUSH
69166: LD_VAR 0 2
69170: PUSH
69171: LD_INT 3
69173: PLUS
69174: PUSH
69175: LD_INT 5
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: LIST
69182: PUSH
69183: LD_VAR 0 1
69187: PUSH
69188: LD_VAR 0 2
69192: PUSH
69193: LD_INT 4
69195: PLUS
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: LIST
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: ST_TO_ADDR
// end ; 1 :
69212: GO 69912
69214: LD_INT 1
69216: DOUBLE
69217: EQUAL
69218: IFTRUE 69222
69220: GO 69355
69222: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69223: LD_ADDR_VAR 0 5
69227: PUSH
69228: LD_VAR 0 1
69232: PUSH
69233: LD_VAR 0 2
69237: PUSH
69238: LD_INT 4
69240: MINUS
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: LIST
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: LD_INT 3
69257: MINUS
69258: PUSH
69259: LD_VAR 0 2
69263: PUSH
69264: LD_INT 3
69266: MINUS
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: PUSH
69276: LD_VAR 0 1
69280: PUSH
69281: LD_INT 4
69283: MINUS
69284: PUSH
69285: LD_VAR 0 2
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: LD_VAR 0 1
69302: PUSH
69303: LD_VAR 0 2
69307: PUSH
69308: LD_INT 3
69310: PLUS
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: LD_VAR 0 1
69324: PUSH
69325: LD_INT 4
69327: PLUS
69328: PUSH
69329: LD_VAR 0 2
69333: PUSH
69334: LD_INT 4
69336: PLUS
69337: PUSH
69338: LD_INT 5
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: LIST
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// end ; 2 :
69353: GO 69912
69355: LD_INT 2
69357: DOUBLE
69358: EQUAL
69359: IFTRUE 69363
69361: GO 69492
69363: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69364: LD_ADDR_VAR 0 5
69368: PUSH
69369: LD_VAR 0 1
69373: PUSH
69374: LD_VAR 0 2
69378: PUSH
69379: LD_INT 3
69381: MINUS
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: PUSH
69391: LD_VAR 0 1
69395: PUSH
69396: LD_INT 4
69398: PLUS
69399: PUSH
69400: LD_VAR 0 2
69404: PUSH
69405: LD_INT 4
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_VAR 0 2
69422: PUSH
69423: LD_INT 4
69425: PLUS
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: PUSH
69435: LD_VAR 0 1
69439: PUSH
69440: LD_INT 3
69442: MINUS
69443: PUSH
69444: LD_VAR 0 2
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: PUSH
69457: LD_VAR 0 1
69461: PUSH
69462: LD_INT 4
69464: MINUS
69465: PUSH
69466: LD_VAR 0 2
69470: PUSH
69471: LD_INT 4
69473: MINUS
69474: PUSH
69475: LD_INT 2
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: ST_TO_ADDR
// end ; 3 :
69490: GO 69912
69492: LD_INT 3
69494: DOUBLE
69495: EQUAL
69496: IFTRUE 69500
69498: GO 69633
69500: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69501: LD_ADDR_VAR 0 5
69505: PUSH
69506: LD_VAR 0 1
69510: PUSH
69511: LD_INT 3
69513: PLUS
69514: PUSH
69515: LD_VAR 0 2
69519: PUSH
69520: LD_INT 4
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: PUSH
69528: LD_VAR 0 1
69532: PUSH
69533: LD_INT 4
69535: PLUS
69536: PUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 4
69544: PLUS
69545: PUSH
69546: LD_INT 5
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: PUSH
69554: LD_VAR 0 1
69558: PUSH
69559: LD_INT 4
69561: MINUS
69562: PUSH
69563: LD_VAR 0 2
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: LIST
69575: PUSH
69576: LD_VAR 0 1
69580: PUSH
69581: LD_VAR 0 2
69585: PUSH
69586: LD_INT 4
69588: MINUS
69589: PUSH
69590: LD_INT 3
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 3
69605: MINUS
69606: PUSH
69607: LD_VAR 0 2
69611: PUSH
69612: LD_INT 3
69614: MINUS
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: ST_TO_ADDR
// end ; 4 :
69631: GO 69912
69633: LD_INT 4
69635: DOUBLE
69636: EQUAL
69637: IFTRUE 69641
69639: GO 69774
69641: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69642: LD_ADDR_VAR 0 5
69646: PUSH
69647: LD_VAR 0 1
69651: PUSH
69652: LD_VAR 0 2
69656: PUSH
69657: LD_INT 4
69659: PLUS
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: PUSH
69669: LD_VAR 0 1
69673: PUSH
69674: LD_INT 3
69676: PLUS
69677: PUSH
69678: LD_VAR 0 2
69682: PUSH
69683: LD_INT 3
69685: PLUS
69686: PUSH
69687: LD_INT 5
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: LIST
69694: PUSH
69695: LD_VAR 0 1
69699: PUSH
69700: LD_INT 4
69702: PLUS
69703: PUSH
69704: LD_VAR 0 2
69708: PUSH
69709: LD_INT 4
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: PUSH
69717: LD_VAR 0 1
69721: PUSH
69722: LD_VAR 0 2
69726: PUSH
69727: LD_INT 3
69729: MINUS
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: PUSH
69739: LD_VAR 0 1
69743: PUSH
69744: LD_INT 4
69746: MINUS
69747: PUSH
69748: LD_VAR 0 2
69752: PUSH
69753: LD_INT 4
69755: MINUS
69756: PUSH
69757: LD_INT 2
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: LIST
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: ST_TO_ADDR
// end ; 5 :
69772: GO 69912
69774: LD_INT 5
69776: DOUBLE
69777: EQUAL
69778: IFTRUE 69782
69780: GO 69911
69782: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69783: LD_ADDR_VAR 0 5
69787: PUSH
69788: LD_VAR 0 1
69792: PUSH
69793: LD_INT 4
69795: MINUS
69796: PUSH
69797: LD_VAR 0 2
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: LIST
69809: PUSH
69810: LD_VAR 0 1
69814: PUSH
69815: LD_VAR 0 2
69819: PUSH
69820: LD_INT 4
69822: MINUS
69823: PUSH
69824: LD_INT 3
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: PUSH
69832: LD_VAR 0 1
69836: PUSH
69837: LD_INT 4
69839: PLUS
69840: PUSH
69841: LD_VAR 0 2
69845: PUSH
69846: LD_INT 4
69848: PLUS
69849: PUSH
69850: LD_INT 5
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: PUSH
69858: LD_VAR 0 1
69862: PUSH
69863: LD_INT 3
69865: PLUS
69866: PUSH
69867: LD_VAR 0 2
69871: PUSH
69872: LD_INT 4
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: PUSH
69880: LD_VAR 0 1
69884: PUSH
69885: LD_VAR 0 2
69889: PUSH
69890: LD_INT 3
69892: PLUS
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: LIST
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: ST_TO_ADDR
// end ; end ;
69909: GO 69912
69911: POP
// result := list ;
69912: LD_ADDR_VAR 0 4
69916: PUSH
69917: LD_VAR 0 5
69921: ST_TO_ADDR
// end ;
69922: LD_VAR 0 4
69926: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69927: LD_INT 0
69929: PPUSH
69930: PPUSH
69931: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69932: LD_VAR 0 1
69936: NOT
69937: PUSH
69938: LD_VAR 0 2
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: LD_INT 3
69951: PUSH
69952: LD_INT 4
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: IN
69961: NOT
69962: OR
69963: IFFALSE 69967
// exit ;
69965: GO 70050
// tmp := [ ] ;
69967: LD_ADDR_VAR 0 5
69971: PUSH
69972: EMPTY
69973: ST_TO_ADDR
// for i in units do
69974: LD_ADDR_VAR 0 4
69978: PUSH
69979: LD_VAR 0 1
69983: PUSH
69984: FOR_IN
69985: IFFALSE 70019
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69987: LD_ADDR_VAR 0 5
69991: PUSH
69992: LD_VAR 0 5
69996: PPUSH
69997: LD_VAR 0 4
70001: PPUSH
70002: LD_VAR 0 2
70006: PPUSH
70007: CALL_OW 259
70011: PPUSH
70012: CALL 71423 0 2
70016: ST_TO_ADDR
70017: GO 69984
70019: POP
70020: POP
// if not tmp then
70021: LD_VAR 0 5
70025: NOT
70026: IFFALSE 70030
// exit ;
70028: GO 70050
// result := SortListByListDesc ( units , tmp ) ;
70030: LD_ADDR_VAR 0 3
70034: PUSH
70035: LD_VAR 0 1
70039: PPUSH
70040: LD_VAR 0 5
70044: PPUSH
70045: CALL_OW 77
70049: ST_TO_ADDR
// end ;
70050: LD_VAR 0 3
70054: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70055: LD_INT 0
70057: PPUSH
70058: PPUSH
70059: PPUSH
// result := false ;
70060: LD_ADDR_VAR 0 3
70064: PUSH
70065: LD_INT 0
70067: ST_TO_ADDR
// if not building then
70068: LD_VAR 0 2
70072: NOT
70073: IFFALSE 70077
// exit ;
70075: GO 70215
// x := GetX ( building ) ;
70077: LD_ADDR_VAR 0 4
70081: PUSH
70082: LD_VAR 0 2
70086: PPUSH
70087: CALL_OW 250
70091: ST_TO_ADDR
// y := GetY ( building ) ;
70092: LD_ADDR_VAR 0 5
70096: PUSH
70097: LD_VAR 0 2
70101: PPUSH
70102: CALL_OW 251
70106: ST_TO_ADDR
// if not x or not y then
70107: LD_VAR 0 4
70111: NOT
70112: PUSH
70113: LD_VAR 0 5
70117: NOT
70118: OR
70119: IFFALSE 70123
// exit ;
70121: GO 70215
// if GetTaskList ( unit ) then
70123: LD_VAR 0 1
70127: PPUSH
70128: CALL_OW 437
70132: IFFALSE 70215
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70134: LD_STRING e
70136: PUSH
70137: LD_VAR 0 1
70141: PPUSH
70142: CALL_OW 437
70146: PUSH
70147: LD_INT 1
70149: ARRAY
70150: PUSH
70151: LD_INT 1
70153: ARRAY
70154: EQUAL
70155: PUSH
70156: LD_VAR 0 4
70160: PUSH
70161: LD_VAR 0 1
70165: PPUSH
70166: CALL_OW 437
70170: PUSH
70171: LD_INT 1
70173: ARRAY
70174: PUSH
70175: LD_INT 2
70177: ARRAY
70178: EQUAL
70179: AND
70180: PUSH
70181: LD_VAR 0 5
70185: PUSH
70186: LD_VAR 0 1
70190: PPUSH
70191: CALL_OW 437
70195: PUSH
70196: LD_INT 1
70198: ARRAY
70199: PUSH
70200: LD_INT 3
70202: ARRAY
70203: EQUAL
70204: AND
70205: IFFALSE 70215
// result := true end ;
70207: LD_ADDR_VAR 0 3
70211: PUSH
70212: LD_INT 1
70214: ST_TO_ADDR
// end ;
70215: LD_VAR 0 3
70219: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70220: LD_INT 0
70222: PPUSH
// result := false ;
70223: LD_ADDR_VAR 0 4
70227: PUSH
70228: LD_INT 0
70230: ST_TO_ADDR
// if GetTaskList ( unit ) then
70231: LD_VAR 0 1
70235: PPUSH
70236: CALL_OW 437
70240: IFFALSE 70323
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70242: LD_STRING M
70244: PUSH
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 437
70254: PUSH
70255: LD_INT 1
70257: ARRAY
70258: PUSH
70259: LD_INT 1
70261: ARRAY
70262: EQUAL
70263: PUSH
70264: LD_VAR 0 2
70268: PUSH
70269: LD_VAR 0 1
70273: PPUSH
70274: CALL_OW 437
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: PUSH
70283: LD_INT 2
70285: ARRAY
70286: EQUAL
70287: AND
70288: PUSH
70289: LD_VAR 0 3
70293: PUSH
70294: LD_VAR 0 1
70298: PPUSH
70299: CALL_OW 437
70303: PUSH
70304: LD_INT 1
70306: ARRAY
70307: PUSH
70308: LD_INT 3
70310: ARRAY
70311: EQUAL
70312: AND
70313: IFFALSE 70323
// result := true ;
70315: LD_ADDR_VAR 0 4
70319: PUSH
70320: LD_INT 1
70322: ST_TO_ADDR
// end ; end ;
70323: LD_VAR 0 4
70327: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70328: LD_INT 0
70330: PPUSH
70331: PPUSH
70332: PPUSH
70333: PPUSH
// if not unit or not area then
70334: LD_VAR 0 1
70338: NOT
70339: PUSH
70340: LD_VAR 0 2
70344: NOT
70345: OR
70346: IFFALSE 70350
// exit ;
70348: GO 70526
// tmp := AreaToList ( area , i ) ;
70350: LD_ADDR_VAR 0 6
70354: PUSH
70355: LD_VAR 0 2
70359: PPUSH
70360: LD_VAR 0 5
70364: PPUSH
70365: CALL_OW 517
70369: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70370: LD_ADDR_VAR 0 5
70374: PUSH
70375: DOUBLE
70376: LD_INT 1
70378: DEC
70379: ST_TO_ADDR
70380: LD_VAR 0 6
70384: PUSH
70385: LD_INT 1
70387: ARRAY
70388: PUSH
70389: FOR_TO
70390: IFFALSE 70524
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70392: LD_ADDR_VAR 0 7
70396: PUSH
70397: LD_VAR 0 6
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_VAR 0 5
70410: ARRAY
70411: PUSH
70412: LD_VAR 0 6
70416: PUSH
70417: LD_INT 2
70419: ARRAY
70420: PUSH
70421: LD_VAR 0 5
70425: ARRAY
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70431: LD_INT 92
70433: PUSH
70434: LD_VAR 0 7
70438: PUSH
70439: LD_INT 1
70441: ARRAY
70442: PUSH
70443: LD_VAR 0 7
70447: PUSH
70448: LD_INT 2
70450: ARRAY
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: PPUSH
70461: CALL_OW 69
70465: PUSH
70466: LD_INT 0
70468: EQUAL
70469: IFFALSE 70522
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70471: LD_VAR 0 1
70475: PPUSH
70476: LD_VAR 0 7
70480: PUSH
70481: LD_INT 1
70483: ARRAY
70484: PPUSH
70485: LD_VAR 0 7
70489: PUSH
70490: LD_INT 2
70492: ARRAY
70493: PPUSH
70494: LD_VAR 0 3
70498: PPUSH
70499: CALL_OW 48
// result := IsPlaced ( unit ) ;
70503: LD_ADDR_VAR 0 4
70507: PUSH
70508: LD_VAR 0 1
70512: PPUSH
70513: CALL_OW 305
70517: ST_TO_ADDR
// exit ;
70518: POP
70519: POP
70520: GO 70526
// end ; end ;
70522: GO 70389
70524: POP
70525: POP
// end ;
70526: LD_VAR 0 4
70530: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70531: LD_INT 0
70533: PPUSH
70534: PPUSH
70535: PPUSH
// if not side or side > 8 then
70536: LD_VAR 0 1
70540: NOT
70541: PUSH
70542: LD_VAR 0 1
70546: PUSH
70547: LD_INT 8
70549: GREATER
70550: OR
70551: IFFALSE 70555
// exit ;
70553: GO 70742
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70555: LD_ADDR_VAR 0 4
70559: PUSH
70560: LD_INT 22
70562: PUSH
70563: LD_VAR 0 1
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 21
70574: PUSH
70575: LD_INT 3
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PPUSH
70586: CALL_OW 69
70590: ST_TO_ADDR
// if not tmp then
70591: LD_VAR 0 4
70595: NOT
70596: IFFALSE 70600
// exit ;
70598: GO 70742
// enable_addtolog := true ;
70600: LD_ADDR_OWVAR 81
70604: PUSH
70605: LD_INT 1
70607: ST_TO_ADDR
// AddToLog ( [ ) ;
70608: LD_STRING [
70610: PPUSH
70611: CALL_OW 561
// for i in tmp do
70615: LD_ADDR_VAR 0 3
70619: PUSH
70620: LD_VAR 0 4
70624: PUSH
70625: FOR_IN
70626: IFFALSE 70733
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70628: LD_STRING [
70630: PUSH
70631: LD_VAR 0 3
70635: PPUSH
70636: CALL_OW 266
70640: STR
70641: PUSH
70642: LD_STRING , 
70644: STR
70645: PUSH
70646: LD_VAR 0 3
70650: PPUSH
70651: CALL_OW 250
70655: STR
70656: PUSH
70657: LD_STRING , 
70659: STR
70660: PUSH
70661: LD_VAR 0 3
70665: PPUSH
70666: CALL_OW 251
70670: STR
70671: PUSH
70672: LD_STRING , 
70674: STR
70675: PUSH
70676: LD_VAR 0 3
70680: PPUSH
70681: CALL_OW 254
70685: STR
70686: PUSH
70687: LD_STRING , 
70689: STR
70690: PUSH
70691: LD_VAR 0 3
70695: PPUSH
70696: LD_INT 1
70698: PPUSH
70699: CALL_OW 268
70703: STR
70704: PUSH
70705: LD_STRING , 
70707: STR
70708: PUSH
70709: LD_VAR 0 3
70713: PPUSH
70714: LD_INT 2
70716: PPUSH
70717: CALL_OW 268
70721: STR
70722: PUSH
70723: LD_STRING ],
70725: STR
70726: PPUSH
70727: CALL_OW 561
// end ;
70731: GO 70625
70733: POP
70734: POP
// AddToLog ( ]; ) ;
70735: LD_STRING ];
70737: PPUSH
70738: CALL_OW 561
// end ;
70742: LD_VAR 0 2
70746: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70747: LD_INT 0
70749: PPUSH
70750: PPUSH
70751: PPUSH
70752: PPUSH
70753: PPUSH
// if not area or not rate or not max then
70754: LD_VAR 0 1
70758: NOT
70759: PUSH
70760: LD_VAR 0 2
70764: NOT
70765: OR
70766: PUSH
70767: LD_VAR 0 4
70771: NOT
70772: OR
70773: IFFALSE 70777
// exit ;
70775: GO 70966
// while 1 do
70777: LD_INT 1
70779: IFFALSE 70966
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70781: LD_ADDR_VAR 0 9
70785: PUSH
70786: LD_VAR 0 1
70790: PPUSH
70791: LD_INT 1
70793: PPUSH
70794: CALL_OW 287
70798: PUSH
70799: LD_INT 10
70801: MUL
70802: ST_TO_ADDR
// r := rate / 10 ;
70803: LD_ADDR_VAR 0 7
70807: PUSH
70808: LD_VAR 0 2
70812: PUSH
70813: LD_INT 10
70815: DIVREAL
70816: ST_TO_ADDR
// time := 1 1$00 ;
70817: LD_ADDR_VAR 0 8
70821: PUSH
70822: LD_INT 2100
70824: ST_TO_ADDR
// if amount < min then
70825: LD_VAR 0 9
70829: PUSH
70830: LD_VAR 0 3
70834: LESS
70835: IFFALSE 70853
// r := r * 2 else
70837: LD_ADDR_VAR 0 7
70841: PUSH
70842: LD_VAR 0 7
70846: PUSH
70847: LD_INT 2
70849: MUL
70850: ST_TO_ADDR
70851: GO 70879
// if amount > max then
70853: LD_VAR 0 9
70857: PUSH
70858: LD_VAR 0 4
70862: GREATER
70863: IFFALSE 70879
// r := r / 2 ;
70865: LD_ADDR_VAR 0 7
70869: PUSH
70870: LD_VAR 0 7
70874: PUSH
70875: LD_INT 2
70877: DIVREAL
70878: ST_TO_ADDR
// time := time / r ;
70879: LD_ADDR_VAR 0 8
70883: PUSH
70884: LD_VAR 0 8
70888: PUSH
70889: LD_VAR 0 7
70893: DIVREAL
70894: ST_TO_ADDR
// if time < 0 then
70895: LD_VAR 0 8
70899: PUSH
70900: LD_INT 0
70902: LESS
70903: IFFALSE 70920
// time := time * - 1 ;
70905: LD_ADDR_VAR 0 8
70909: PUSH
70910: LD_VAR 0 8
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: MUL
70919: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70920: LD_VAR 0 8
70924: PUSH
70925: LD_INT 35
70927: PPUSH
70928: LD_INT 875
70930: PPUSH
70931: CALL_OW 12
70935: PLUS
70936: PPUSH
70937: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70941: LD_INT 1
70943: PPUSH
70944: LD_INT 5
70946: PPUSH
70947: CALL_OW 12
70951: PPUSH
70952: LD_VAR 0 1
70956: PPUSH
70957: LD_INT 1
70959: PPUSH
70960: CALL_OW 55
// end ;
70964: GO 70777
// end ;
70966: LD_VAR 0 5
70970: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70971: LD_INT 0
70973: PPUSH
70974: PPUSH
70975: PPUSH
70976: PPUSH
70977: PPUSH
70978: PPUSH
70979: PPUSH
70980: PPUSH
// if not turrets or not factories then
70981: LD_VAR 0 1
70985: NOT
70986: PUSH
70987: LD_VAR 0 2
70991: NOT
70992: OR
70993: IFFALSE 70997
// exit ;
70995: GO 71304
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70997: LD_ADDR_VAR 0 10
71001: PUSH
71002: LD_INT 5
71004: PUSH
71005: LD_INT 6
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 2
71014: PUSH
71015: LD_INT 4
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 3
71024: PUSH
71025: LD_INT 5
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 24
71039: PUSH
71040: LD_INT 25
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 23
71049: PUSH
71050: LD_INT 27
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 42
71063: PUSH
71064: LD_INT 43
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 44
71073: PUSH
71074: LD_INT 46
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 45
71083: PUSH
71084: LD_INT 47
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: LIST
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: ST_TO_ADDR
// result := [ ] ;
71101: LD_ADDR_VAR 0 3
71105: PUSH
71106: EMPTY
71107: ST_TO_ADDR
// for i in turrets do
71108: LD_ADDR_VAR 0 4
71112: PUSH
71113: LD_VAR 0 1
71117: PUSH
71118: FOR_IN
71119: IFFALSE 71302
// begin nat := GetNation ( i ) ;
71121: LD_ADDR_VAR 0 7
71125: PUSH
71126: LD_VAR 0 4
71130: PPUSH
71131: CALL_OW 248
71135: ST_TO_ADDR
// weapon := 0 ;
71136: LD_ADDR_VAR 0 8
71140: PUSH
71141: LD_INT 0
71143: ST_TO_ADDR
// if not nat then
71144: LD_VAR 0 7
71148: NOT
71149: IFFALSE 71153
// continue ;
71151: GO 71118
// for j in list [ nat ] do
71153: LD_ADDR_VAR 0 5
71157: PUSH
71158: LD_VAR 0 10
71162: PUSH
71163: LD_VAR 0 7
71167: ARRAY
71168: PUSH
71169: FOR_IN
71170: IFFALSE 71211
// if GetBWeapon ( i ) = j [ 1 ] then
71172: LD_VAR 0 4
71176: PPUSH
71177: CALL_OW 269
71181: PUSH
71182: LD_VAR 0 5
71186: PUSH
71187: LD_INT 1
71189: ARRAY
71190: EQUAL
71191: IFFALSE 71209
// begin weapon := j [ 2 ] ;
71193: LD_ADDR_VAR 0 8
71197: PUSH
71198: LD_VAR 0 5
71202: PUSH
71203: LD_INT 2
71205: ARRAY
71206: ST_TO_ADDR
// break ;
71207: GO 71211
// end ;
71209: GO 71169
71211: POP
71212: POP
// if not weapon then
71213: LD_VAR 0 8
71217: NOT
71218: IFFALSE 71222
// continue ;
71220: GO 71118
// for k in factories do
71222: LD_ADDR_VAR 0 6
71226: PUSH
71227: LD_VAR 0 2
71231: PUSH
71232: FOR_IN
71233: IFFALSE 71298
// begin weapons := AvailableWeaponList ( k ) ;
71235: LD_ADDR_VAR 0 9
71239: PUSH
71240: LD_VAR 0 6
71244: PPUSH
71245: CALL_OW 478
71249: ST_TO_ADDR
// if not weapons then
71250: LD_VAR 0 9
71254: NOT
71255: IFFALSE 71259
// continue ;
71257: GO 71232
// if weapon in weapons then
71259: LD_VAR 0 8
71263: PUSH
71264: LD_VAR 0 9
71268: IN
71269: IFFALSE 71296
// begin result := [ i , weapon ] ;
71271: LD_ADDR_VAR 0 3
71275: PUSH
71276: LD_VAR 0 4
71280: PUSH
71281: LD_VAR 0 8
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: ST_TO_ADDR
// exit ;
71290: POP
71291: POP
71292: POP
71293: POP
71294: GO 71304
// end ; end ;
71296: GO 71232
71298: POP
71299: POP
// end ;
71300: GO 71118
71302: POP
71303: POP
// end ;
71304: LD_VAR 0 3
71308: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71309: LD_INT 0
71311: PPUSH
// if not side or side > 8 then
71312: LD_VAR 0 3
71316: NOT
71317: PUSH
71318: LD_VAR 0 3
71322: PUSH
71323: LD_INT 8
71325: GREATER
71326: OR
71327: IFFALSE 71331
// exit ;
71329: GO 71390
// if not range then
71331: LD_VAR 0 4
71335: NOT
71336: IFFALSE 71347
// range := - 12 ;
71338: LD_ADDR_VAR 0 4
71342: PUSH
71343: LD_INT 12
71345: NEG
71346: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71347: LD_VAR 0 1
71351: PPUSH
71352: LD_VAR 0 2
71356: PPUSH
71357: LD_VAR 0 3
71361: PPUSH
71362: LD_VAR 0 4
71366: PPUSH
71367: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71371: LD_VAR 0 1
71375: PPUSH
71376: LD_VAR 0 2
71380: PPUSH
71381: LD_VAR 0 3
71385: PPUSH
71386: CALL_OW 331
// end ;
71390: LD_VAR 0 5
71394: RET
// export function Video ( mode ) ; begin
71395: LD_INT 0
71397: PPUSH
// ingame_video = mode ;
71398: LD_ADDR_OWVAR 52
71402: PUSH
71403: LD_VAR 0 1
71407: ST_TO_ADDR
// interface_hidden = mode ;
71408: LD_ADDR_OWVAR 54
71412: PUSH
71413: LD_VAR 0 1
71417: ST_TO_ADDR
// end ;
71418: LD_VAR 0 2
71422: RET
// export function Join ( array , element ) ; begin
71423: LD_INT 0
71425: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71426: LD_ADDR_VAR 0 3
71430: PUSH
71431: LD_VAR 0 1
71435: PPUSH
71436: LD_VAR 0 1
71440: PUSH
71441: LD_INT 1
71443: PLUS
71444: PPUSH
71445: LD_VAR 0 2
71449: PPUSH
71450: CALL_OW 1
71454: ST_TO_ADDR
// end ;
71455: LD_VAR 0 3
71459: RET
// export function JoinUnion ( array , element ) ; begin
71460: LD_INT 0
71462: PPUSH
// result := array union element ;
71463: LD_ADDR_VAR 0 3
71467: PUSH
71468: LD_VAR 0 1
71472: PUSH
71473: LD_VAR 0 2
71477: UNION
71478: ST_TO_ADDR
// end ;
71479: LD_VAR 0 3
71483: RET
// export function GetBehemoths ( side ) ; begin
71484: LD_INT 0
71486: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71487: LD_ADDR_VAR 0 2
71491: PUSH
71492: LD_INT 22
71494: PUSH
71495: LD_VAR 0 1
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 31
71506: PUSH
71507: LD_INT 25
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PPUSH
71518: CALL_OW 69
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 2
71527: RET
// export function Shuffle ( array ) ; var i , index ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
// result := [ ] ;
71533: LD_ADDR_VAR 0 2
71537: PUSH
71538: EMPTY
71539: ST_TO_ADDR
// if not array then
71540: LD_VAR 0 1
71544: NOT
71545: IFFALSE 71549
// exit ;
71547: GO 71648
// Randomize ;
71549: CALL_OW 10
// for i = array downto 1 do
71553: LD_ADDR_VAR 0 3
71557: PUSH
71558: DOUBLE
71559: LD_VAR 0 1
71563: INC
71564: ST_TO_ADDR
71565: LD_INT 1
71567: PUSH
71568: FOR_DOWNTO
71569: IFFALSE 71646
// begin index := rand ( 1 , array ) ;
71571: LD_ADDR_VAR 0 4
71575: PUSH
71576: LD_INT 1
71578: PPUSH
71579: LD_VAR 0 1
71583: PPUSH
71584: CALL_OW 12
71588: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71589: LD_ADDR_VAR 0 2
71593: PUSH
71594: LD_VAR 0 2
71598: PPUSH
71599: LD_VAR 0 2
71603: PUSH
71604: LD_INT 1
71606: PLUS
71607: PPUSH
71608: LD_VAR 0 1
71612: PUSH
71613: LD_VAR 0 4
71617: ARRAY
71618: PPUSH
71619: CALL_OW 2
71623: ST_TO_ADDR
// array := Delete ( array , index ) ;
71624: LD_ADDR_VAR 0 1
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: LD_VAR 0 4
71638: PPUSH
71639: CALL_OW 3
71643: ST_TO_ADDR
// end ;
71644: GO 71568
71646: POP
71647: POP
// end ;
71648: LD_VAR 0 2
71652: RET
// export function GetBaseMaterials ( base ) ; begin
71653: LD_INT 0
71655: PPUSH
// result := [ 0 , 0 , 0 ] ;
71656: LD_ADDR_VAR 0 2
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 0
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: LIST
71674: ST_TO_ADDR
// if not base then
71675: LD_VAR 0 1
71679: NOT
71680: IFFALSE 71684
// exit ;
71682: GO 71733
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71684: LD_ADDR_VAR 0 2
71688: PUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: LD_INT 1
71696: PPUSH
71697: CALL_OW 275
71701: PUSH
71702: LD_VAR 0 1
71706: PPUSH
71707: LD_INT 2
71709: PPUSH
71710: CALL_OW 275
71714: PUSH
71715: LD_VAR 0 1
71719: PPUSH
71720: LD_INT 3
71722: PPUSH
71723: CALL_OW 275
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: ST_TO_ADDR
// end ;
71733: LD_VAR 0 2
71737: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71738: LD_INT 0
71740: PPUSH
71741: PPUSH
// result := array ;
71742: LD_ADDR_VAR 0 3
71746: PUSH
71747: LD_VAR 0 1
71751: ST_TO_ADDR
// if size >= result then
71752: LD_VAR 0 2
71756: PUSH
71757: LD_VAR 0 3
71761: GREATEREQUAL
71762: IFFALSE 71766
// exit ;
71764: GO 71816
// if size then
71766: LD_VAR 0 2
71770: IFFALSE 71816
// for i := array downto size do
71772: LD_ADDR_VAR 0 4
71776: PUSH
71777: DOUBLE
71778: LD_VAR 0 1
71782: INC
71783: ST_TO_ADDR
71784: LD_VAR 0 2
71788: PUSH
71789: FOR_DOWNTO
71790: IFFALSE 71814
// result := Delete ( result , result ) ;
71792: LD_ADDR_VAR 0 3
71796: PUSH
71797: LD_VAR 0 3
71801: PPUSH
71802: LD_VAR 0 3
71806: PPUSH
71807: CALL_OW 3
71811: ST_TO_ADDR
71812: GO 71789
71814: POP
71815: POP
// end ;
71816: LD_VAR 0 3
71820: RET
// export function ComExit ( unit ) ; var tmp ; begin
71821: LD_INT 0
71823: PPUSH
71824: PPUSH
// if not IsInUnit ( unit ) then
71825: LD_VAR 0 1
71829: PPUSH
71830: CALL_OW 310
71834: NOT
71835: IFFALSE 71839
// exit ;
71837: GO 71899
// tmp := IsInUnit ( unit ) ;
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 310
71853: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71854: LD_VAR 0 3
71858: PPUSH
71859: CALL_OW 247
71863: PUSH
71864: LD_INT 2
71866: EQUAL
71867: IFFALSE 71880
// ComExitVehicle ( unit ) else
71869: LD_VAR 0 1
71873: PPUSH
71874: CALL_OW 121
71878: GO 71889
// ComExitBuilding ( unit ) ;
71880: LD_VAR 0 1
71884: PPUSH
71885: CALL_OW 122
// result := tmp ;
71889: LD_ADDR_VAR 0 2
71893: PUSH
71894: LD_VAR 0 3
71898: ST_TO_ADDR
// end ;
71899: LD_VAR 0 2
71903: RET
// export function ComExitAll ( units ) ; var i ; begin
71904: LD_INT 0
71906: PPUSH
71907: PPUSH
// if not units then
71908: LD_VAR 0 1
71912: NOT
71913: IFFALSE 71917
// exit ;
71915: GO 71943
// for i in units do
71917: LD_ADDR_VAR 0 3
71921: PUSH
71922: LD_VAR 0 1
71926: PUSH
71927: FOR_IN
71928: IFFALSE 71941
// ComExit ( i ) ;
71930: LD_VAR 0 3
71934: PPUSH
71935: CALL 71821 0 1
71939: GO 71927
71941: POP
71942: POP
// end ;
71943: LD_VAR 0 2
71947: RET
// export function ResetHc ; begin
71948: LD_INT 0
71950: PPUSH
// InitHc ;
71951: CALL_OW 19
// hc_importance := 0 ;
71955: LD_ADDR_OWVAR 32
71959: PUSH
71960: LD_INT 0
71962: ST_TO_ADDR
// end ;
71963: LD_VAR 0 1
71967: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71968: LD_INT 0
71970: PPUSH
71971: PPUSH
71972: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71973: LD_ADDR_VAR 0 6
71977: PUSH
71978: LD_VAR 0 1
71982: PUSH
71983: LD_VAR 0 3
71987: PLUS
71988: PUSH
71989: LD_INT 2
71991: DIV
71992: ST_TO_ADDR
// if _x < 0 then
71993: LD_VAR 0 6
71997: PUSH
71998: LD_INT 0
72000: LESS
72001: IFFALSE 72018
// _x := _x * - 1 ;
72003: LD_ADDR_VAR 0 6
72007: PUSH
72008: LD_VAR 0 6
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: MUL
72017: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72018: LD_ADDR_VAR 0 7
72022: PUSH
72023: LD_VAR 0 2
72027: PUSH
72028: LD_VAR 0 4
72032: PLUS
72033: PUSH
72034: LD_INT 2
72036: DIV
72037: ST_TO_ADDR
// if _y < 0 then
72038: LD_VAR 0 7
72042: PUSH
72043: LD_INT 0
72045: LESS
72046: IFFALSE 72063
// _y := _y * - 1 ;
72048: LD_ADDR_VAR 0 7
72052: PUSH
72053: LD_VAR 0 7
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: MUL
72062: ST_TO_ADDR
// result := [ _x , _y ] ;
72063: LD_ADDR_VAR 0 5
72067: PUSH
72068: LD_VAR 0 6
72072: PUSH
72073: LD_VAR 0 7
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: ST_TO_ADDR
// end ;
72082: LD_VAR 0 5
72086: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72087: LD_INT 0
72089: PPUSH
72090: PPUSH
72091: PPUSH
72092: PPUSH
// task := GetTaskList ( unit ) ;
72093: LD_ADDR_VAR 0 7
72097: PUSH
72098: LD_VAR 0 1
72102: PPUSH
72103: CALL_OW 437
72107: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72108: LD_VAR 0 7
72112: NOT
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 2
72123: PPUSH
72124: CALL_OW 308
72128: NOT
72129: AND
72130: IFFALSE 72134
// exit ;
72132: GO 72252
// if IsInArea ( unit , area ) then
72134: LD_VAR 0 1
72138: PPUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: CALL_OW 308
72148: IFFALSE 72166
// begin ComMoveToArea ( unit , goAway ) ;
72150: LD_VAR 0 1
72154: PPUSH
72155: LD_VAR 0 3
72159: PPUSH
72160: CALL_OW 113
// exit ;
72164: GO 72252
// end ; if task [ 1 ] [ 1 ] <> M then
72166: LD_VAR 0 7
72170: PUSH
72171: LD_INT 1
72173: ARRAY
72174: PUSH
72175: LD_INT 1
72177: ARRAY
72178: PUSH
72179: LD_STRING M
72181: NONEQUAL
72182: IFFALSE 72186
// exit ;
72184: GO 72252
// x := task [ 1 ] [ 2 ] ;
72186: LD_ADDR_VAR 0 5
72190: PUSH
72191: LD_VAR 0 7
72195: PUSH
72196: LD_INT 1
72198: ARRAY
72199: PUSH
72200: LD_INT 2
72202: ARRAY
72203: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72204: LD_ADDR_VAR 0 6
72208: PUSH
72209: LD_VAR 0 7
72213: PUSH
72214: LD_INT 1
72216: ARRAY
72217: PUSH
72218: LD_INT 3
72220: ARRAY
72221: ST_TO_ADDR
// if InArea ( x , y , area ) then
72222: LD_VAR 0 5
72226: PPUSH
72227: LD_VAR 0 6
72231: PPUSH
72232: LD_VAR 0 2
72236: PPUSH
72237: CALL_OW 309
72241: IFFALSE 72252
// ComStop ( unit ) ;
72243: LD_VAR 0 1
72247: PPUSH
72248: CALL_OW 141
// end ;
72252: LD_VAR 0 4
72256: RET
// export function Abs ( value ) ; begin
72257: LD_INT 0
72259: PPUSH
// result := value ;
72260: LD_ADDR_VAR 0 2
72264: PUSH
72265: LD_VAR 0 1
72269: ST_TO_ADDR
// if value < 0 then
72270: LD_VAR 0 1
72274: PUSH
72275: LD_INT 0
72277: LESS
72278: IFFALSE 72295
// result := value * - 1 ;
72280: LD_ADDR_VAR 0 2
72284: PUSH
72285: LD_VAR 0 1
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: MUL
72294: ST_TO_ADDR
// end ;
72295: LD_VAR 0 2
72299: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
72304: PPUSH
72305: PPUSH
72306: PPUSH
72307: PPUSH
72308: PPUSH
72309: PPUSH
// if not unit or not building then
72310: LD_VAR 0 1
72314: NOT
72315: PUSH
72316: LD_VAR 0 2
72320: NOT
72321: OR
72322: IFFALSE 72326
// exit ;
72324: GO 72552
// x := GetX ( building ) ;
72326: LD_ADDR_VAR 0 4
72330: PUSH
72331: LD_VAR 0 2
72335: PPUSH
72336: CALL_OW 250
72340: ST_TO_ADDR
// y := GetY ( building ) ;
72341: LD_ADDR_VAR 0 6
72345: PUSH
72346: LD_VAR 0 2
72350: PPUSH
72351: CALL_OW 251
72355: ST_TO_ADDR
// d := GetDir ( building ) ;
72356: LD_ADDR_VAR 0 8
72360: PUSH
72361: LD_VAR 0 2
72365: PPUSH
72366: CALL_OW 254
72370: ST_TO_ADDR
// r := 4 ;
72371: LD_ADDR_VAR 0 9
72375: PUSH
72376: LD_INT 4
72378: ST_TO_ADDR
// for i := 1 to 5 do
72379: LD_ADDR_VAR 0 10
72383: PUSH
72384: DOUBLE
72385: LD_INT 1
72387: DEC
72388: ST_TO_ADDR
72389: LD_INT 5
72391: PUSH
72392: FOR_TO
72393: IFFALSE 72550
// begin _x := ShiftX ( x , d , r + i ) ;
72395: LD_ADDR_VAR 0 5
72399: PUSH
72400: LD_VAR 0 4
72404: PPUSH
72405: LD_VAR 0 8
72409: PPUSH
72410: LD_VAR 0 9
72414: PUSH
72415: LD_VAR 0 10
72419: PLUS
72420: PPUSH
72421: CALL_OW 272
72425: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72426: LD_ADDR_VAR 0 7
72430: PUSH
72431: LD_VAR 0 6
72435: PPUSH
72436: LD_VAR 0 8
72440: PPUSH
72441: LD_VAR 0 9
72445: PUSH
72446: LD_VAR 0 10
72450: PLUS
72451: PPUSH
72452: CALL_OW 273
72456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72457: LD_VAR 0 5
72461: PPUSH
72462: LD_VAR 0 7
72466: PPUSH
72467: CALL_OW 488
72471: PUSH
72472: LD_VAR 0 5
72476: PPUSH
72477: LD_VAR 0 7
72481: PPUSH
72482: CALL_OW 428
72486: PPUSH
72487: CALL_OW 247
72491: PUSH
72492: LD_INT 3
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: IN
72502: NOT
72503: AND
72504: IFFALSE 72548
// begin ComMoveXY ( unit , _x , _y ) ;
72506: LD_VAR 0 1
72510: PPUSH
72511: LD_VAR 0 5
72515: PPUSH
72516: LD_VAR 0 7
72520: PPUSH
72521: CALL_OW 111
// result := [ _x , _y ] ;
72525: LD_ADDR_VAR 0 3
72529: PUSH
72530: LD_VAR 0 5
72534: PUSH
72535: LD_VAR 0 7
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: ST_TO_ADDR
// exit ;
72544: POP
72545: POP
72546: GO 72552
// end ; end ;
72548: GO 72392
72550: POP
72551: POP
// end ;
72552: LD_VAR 0 3
72556: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72557: LD_INT 0
72559: PPUSH
72560: PPUSH
72561: PPUSH
// result := 0 ;
72562: LD_ADDR_VAR 0 3
72566: PUSH
72567: LD_INT 0
72569: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72570: LD_VAR 0 1
72574: PUSH
72575: LD_INT 0
72577: LESS
72578: PUSH
72579: LD_VAR 0 1
72583: PUSH
72584: LD_INT 8
72586: GREATER
72587: OR
72588: PUSH
72589: LD_VAR 0 2
72593: PUSH
72594: LD_INT 0
72596: LESS
72597: OR
72598: PUSH
72599: LD_VAR 0 2
72603: PUSH
72604: LD_INT 8
72606: GREATER
72607: OR
72608: IFFALSE 72612
// exit ;
72610: GO 72687
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72612: LD_ADDR_VAR 0 4
72616: PUSH
72617: LD_INT 22
72619: PUSH
72620: LD_VAR 0 2
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PPUSH
72629: CALL_OW 69
72633: PUSH
72634: FOR_IN
72635: IFFALSE 72685
// begin un := UnitShoot ( i ) ;
72637: LD_ADDR_VAR 0 5
72641: PUSH
72642: LD_VAR 0 4
72646: PPUSH
72647: CALL_OW 504
72651: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72652: LD_VAR 0 5
72656: PPUSH
72657: CALL_OW 255
72661: PUSH
72662: LD_VAR 0 1
72666: EQUAL
72667: IFFALSE 72683
// begin result := un ;
72669: LD_ADDR_VAR 0 3
72673: PUSH
72674: LD_VAR 0 5
72678: ST_TO_ADDR
// exit ;
72679: POP
72680: POP
72681: GO 72687
// end ; end ;
72683: GO 72634
72685: POP
72686: POP
// end ;
72687: LD_VAR 0 3
72691: RET
// export function GetCargoBay ( units ) ; begin
72692: LD_INT 0
72694: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72695: LD_ADDR_VAR 0 2
72699: PUSH
72700: LD_VAR 0 1
72704: PPUSH
72705: LD_INT 2
72707: PUSH
72708: LD_INT 34
72710: PUSH
72711: LD_INT 12
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 34
72720: PUSH
72721: LD_INT 51
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 34
72730: PUSH
72731: LD_INT 32
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 34
72740: PUSH
72741: LD_INT 89
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: PPUSH
72755: CALL_OW 72
72759: ST_TO_ADDR
// end ;
72760: LD_VAR 0 2
72764: RET
// export function Negate ( value ) ; begin
72765: LD_INT 0
72767: PPUSH
// result := not value ;
72768: LD_ADDR_VAR 0 2
72772: PUSH
72773: LD_VAR 0 1
72777: NOT
72778: ST_TO_ADDR
// end ;
72779: LD_VAR 0 2
72783: RET
// export function Inc ( value ) ; begin
72784: LD_INT 0
72786: PPUSH
// result := value + 1 ;
72787: LD_ADDR_VAR 0 2
72791: PUSH
72792: LD_VAR 0 1
72796: PUSH
72797: LD_INT 1
72799: PLUS
72800: ST_TO_ADDR
// end ;
72801: LD_VAR 0 2
72805: RET
// export function Dec ( value ) ; begin
72806: LD_INT 0
72808: PPUSH
// result := value - 1 ;
72809: LD_ADDR_VAR 0 2
72813: PUSH
72814: LD_VAR 0 1
72818: PUSH
72819: LD_INT 1
72821: MINUS
72822: ST_TO_ADDR
// end ;
72823: LD_VAR 0 2
72827: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
72832: PPUSH
72833: PPUSH
72834: PPUSH
72835: PPUSH
72836: PPUSH
72837: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72838: LD_VAR 0 1
72842: PPUSH
72843: LD_VAR 0 2
72847: PPUSH
72848: CALL_OW 488
72852: NOT
72853: PUSH
72854: LD_VAR 0 3
72858: PPUSH
72859: LD_VAR 0 4
72863: PPUSH
72864: CALL_OW 488
72868: NOT
72869: OR
72870: IFFALSE 72883
// begin result := - 1 ;
72872: LD_ADDR_VAR 0 5
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: ST_TO_ADDR
// exit ;
72881: GO 73118
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72883: LD_ADDR_VAR 0 12
72887: PUSH
72888: LD_VAR 0 1
72892: PPUSH
72893: LD_VAR 0 2
72897: PPUSH
72898: LD_VAR 0 3
72902: PPUSH
72903: LD_VAR 0 4
72907: PPUSH
72908: CALL 71968 0 4
72912: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72913: LD_ADDR_VAR 0 11
72917: PUSH
72918: LD_VAR 0 1
72922: PPUSH
72923: LD_VAR 0 2
72927: PPUSH
72928: LD_VAR 0 12
72932: PUSH
72933: LD_INT 1
72935: ARRAY
72936: PPUSH
72937: LD_VAR 0 12
72941: PUSH
72942: LD_INT 2
72944: ARRAY
72945: PPUSH
72946: CALL_OW 298
72950: ST_TO_ADDR
// distance := 9999 ;
72951: LD_ADDR_VAR 0 10
72955: PUSH
72956: LD_INT 9999
72958: ST_TO_ADDR
// for i := 0 to 5 do
72959: LD_ADDR_VAR 0 6
72963: PUSH
72964: DOUBLE
72965: LD_INT 0
72967: DEC
72968: ST_TO_ADDR
72969: LD_INT 5
72971: PUSH
72972: FOR_TO
72973: IFFALSE 73116
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72975: LD_ADDR_VAR 0 7
72979: PUSH
72980: LD_VAR 0 1
72984: PPUSH
72985: LD_VAR 0 6
72989: PPUSH
72990: LD_VAR 0 11
72994: PPUSH
72995: CALL_OW 272
72999: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73000: LD_ADDR_VAR 0 8
73004: PUSH
73005: LD_VAR 0 2
73009: PPUSH
73010: LD_VAR 0 6
73014: PPUSH
73015: LD_VAR 0 11
73019: PPUSH
73020: CALL_OW 273
73024: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73025: LD_VAR 0 7
73029: PPUSH
73030: LD_VAR 0 8
73034: PPUSH
73035: CALL_OW 488
73039: NOT
73040: IFFALSE 73044
// continue ;
73042: GO 72972
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73044: LD_ADDR_VAR 0 9
73048: PUSH
73049: LD_VAR 0 12
73053: PUSH
73054: LD_INT 1
73056: ARRAY
73057: PPUSH
73058: LD_VAR 0 12
73062: PUSH
73063: LD_INT 2
73065: ARRAY
73066: PPUSH
73067: LD_VAR 0 7
73071: PPUSH
73072: LD_VAR 0 8
73076: PPUSH
73077: CALL_OW 298
73081: ST_TO_ADDR
// if tmp < distance then
73082: LD_VAR 0 9
73086: PUSH
73087: LD_VAR 0 10
73091: LESS
73092: IFFALSE 73114
// begin result := i ;
73094: LD_ADDR_VAR 0 5
73098: PUSH
73099: LD_VAR 0 6
73103: ST_TO_ADDR
// distance := tmp ;
73104: LD_ADDR_VAR 0 10
73108: PUSH
73109: LD_VAR 0 9
73113: ST_TO_ADDR
// end ; end ;
73114: GO 72972
73116: POP
73117: POP
// end ;
73118: LD_VAR 0 5
73122: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73123: LD_INT 0
73125: PPUSH
73126: PPUSH
// if not driver or not IsInUnit ( driver ) then
73127: LD_VAR 0 1
73131: NOT
73132: PUSH
73133: LD_VAR 0 1
73137: PPUSH
73138: CALL_OW 310
73142: NOT
73143: OR
73144: IFFALSE 73148
// exit ;
73146: GO 73238
// vehicle := IsInUnit ( driver ) ;
73148: LD_ADDR_VAR 0 3
73152: PUSH
73153: LD_VAR 0 1
73157: PPUSH
73158: CALL_OW 310
73162: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73163: LD_VAR 0 1
73167: PPUSH
73168: LD_STRING \
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: LD_INT 0
73176: PUSH
73177: LD_INT 0
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: LD_STRING E
73200: PUSH
73201: LD_INT 0
73203: PUSH
73204: LD_INT 0
73206: PUSH
73207: LD_VAR 0 3
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 0
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PPUSH
73234: CALL_OW 446
// end ;
73238: LD_VAR 0 2
73242: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73243: LD_INT 0
73245: PPUSH
73246: PPUSH
// if not driver or not IsInUnit ( driver ) then
73247: LD_VAR 0 1
73251: NOT
73252: PUSH
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 310
73262: NOT
73263: OR
73264: IFFALSE 73268
// exit ;
73266: GO 73358
// vehicle := IsInUnit ( driver ) ;
73268: LD_ADDR_VAR 0 3
73272: PUSH
73273: LD_VAR 0 1
73277: PPUSH
73278: CALL_OW 310
73282: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73283: LD_VAR 0 1
73287: PPUSH
73288: LD_STRING \
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: LD_INT 0
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: PUSH
73318: LD_STRING E
73320: PUSH
73321: LD_INT 0
73323: PUSH
73324: LD_INT 0
73326: PUSH
73327: LD_VAR 0 3
73331: PUSH
73332: LD_INT 0
73334: PUSH
73335: LD_INT 0
73337: PUSH
73338: LD_INT 0
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PPUSH
73354: CALL_OW 447
// end ;
73358: LD_VAR 0 2
73362: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73363: LD_INT 0
73365: PPUSH
73366: PPUSH
73367: PPUSH
// tmp := [ ] ;
73368: LD_ADDR_VAR 0 5
73372: PUSH
73373: EMPTY
73374: ST_TO_ADDR
// for i in units do
73375: LD_ADDR_VAR 0 4
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: FOR_IN
73386: IFFALSE 73424
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73388: LD_ADDR_VAR 0 5
73392: PUSH
73393: LD_VAR 0 5
73397: PPUSH
73398: LD_VAR 0 5
73402: PUSH
73403: LD_INT 1
73405: PLUS
73406: PPUSH
73407: LD_VAR 0 4
73411: PPUSH
73412: CALL_OW 256
73416: PPUSH
73417: CALL_OW 2
73421: ST_TO_ADDR
73422: GO 73385
73424: POP
73425: POP
// if not tmp then
73426: LD_VAR 0 5
73430: NOT
73431: IFFALSE 73435
// exit ;
73433: GO 73483
// if asc then
73435: LD_VAR 0 2
73439: IFFALSE 73463
// result := SortListByListAsc ( units , tmp ) else
73441: LD_ADDR_VAR 0 3
73445: PUSH
73446: LD_VAR 0 1
73450: PPUSH
73451: LD_VAR 0 5
73455: PPUSH
73456: CALL_OW 76
73460: ST_TO_ADDR
73461: GO 73483
// result := SortListByListDesc ( units , tmp ) ;
73463: LD_ADDR_VAR 0 3
73467: PUSH
73468: LD_VAR 0 1
73472: PPUSH
73473: LD_VAR 0 5
73477: PPUSH
73478: CALL_OW 77
73482: ST_TO_ADDR
// end ;
73483: LD_VAR 0 3
73487: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73488: LD_INT 0
73490: PPUSH
73491: PPUSH
// task := GetTaskList ( mech ) ;
73492: LD_ADDR_VAR 0 4
73496: PUSH
73497: LD_VAR 0 1
73501: PPUSH
73502: CALL_OW 437
73506: ST_TO_ADDR
// if not task then
73507: LD_VAR 0 4
73511: NOT
73512: IFFALSE 73516
// exit ;
73514: GO 73558
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73516: LD_ADDR_VAR 0 3
73520: PUSH
73521: LD_VAR 0 4
73525: PUSH
73526: LD_INT 1
73528: ARRAY
73529: PUSH
73530: LD_INT 1
73532: ARRAY
73533: PUSH
73534: LD_STRING r
73536: EQUAL
73537: PUSH
73538: LD_VAR 0 4
73542: PUSH
73543: LD_INT 1
73545: ARRAY
73546: PUSH
73547: LD_INT 4
73549: ARRAY
73550: PUSH
73551: LD_VAR 0 2
73555: EQUAL
73556: AND
73557: ST_TO_ADDR
// end ;
73558: LD_VAR 0 3
73562: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73563: LD_INT 0
73565: PPUSH
// SetDir ( unit , d ) ;
73566: LD_VAR 0 1
73570: PPUSH
73571: LD_VAR 0 4
73575: PPUSH
73576: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73580: LD_VAR 0 1
73584: PPUSH
73585: LD_VAR 0 2
73589: PPUSH
73590: LD_VAR 0 3
73594: PPUSH
73595: LD_VAR 0 5
73599: PPUSH
73600: CALL_OW 48
// end ;
73604: LD_VAR 0 6
73608: RET
// export function ToNaturalNumber ( number ) ; begin
73609: LD_INT 0
73611: PPUSH
// result := number div 1 ;
73612: LD_ADDR_VAR 0 2
73616: PUSH
73617: LD_VAR 0 1
73621: PUSH
73622: LD_INT 1
73624: DIV
73625: ST_TO_ADDR
// if number < 0 then
73626: LD_VAR 0 1
73630: PUSH
73631: LD_INT 0
73633: LESS
73634: IFFALSE 73644
// result := 0 ;
73636: LD_ADDR_VAR 0 2
73640: PUSH
73641: LD_INT 0
73643: ST_TO_ADDR
// end ;
73644: LD_VAR 0 2
73648: RET
// export function SortByClass ( units , class ) ; var un ; begin
73649: LD_INT 0
73651: PPUSH
73652: PPUSH
// if not units or not class then
73653: LD_VAR 0 1
73657: NOT
73658: PUSH
73659: LD_VAR 0 2
73663: NOT
73664: OR
73665: IFFALSE 73669
// exit ;
73667: GO 73764
// result := [ ] ;
73669: LD_ADDR_VAR 0 3
73673: PUSH
73674: EMPTY
73675: ST_TO_ADDR
// for un in units do
73676: LD_ADDR_VAR 0 4
73680: PUSH
73681: LD_VAR 0 1
73685: PUSH
73686: FOR_IN
73687: IFFALSE 73762
// if GetClass ( un ) = class then
73689: LD_VAR 0 4
73693: PPUSH
73694: CALL_OW 257
73698: PUSH
73699: LD_VAR 0 2
73703: EQUAL
73704: IFFALSE 73731
// result := Insert ( result , 1 , un ) else
73706: LD_ADDR_VAR 0 3
73710: PUSH
73711: LD_VAR 0 3
73715: PPUSH
73716: LD_INT 1
73718: PPUSH
73719: LD_VAR 0 4
73723: PPUSH
73724: CALL_OW 2
73728: ST_TO_ADDR
73729: GO 73760
// result := Replace ( result , result + 1 , un ) ;
73731: LD_ADDR_VAR 0 3
73735: PUSH
73736: LD_VAR 0 3
73740: PPUSH
73741: LD_VAR 0 3
73745: PUSH
73746: LD_INT 1
73748: PLUS
73749: PPUSH
73750: LD_VAR 0 4
73754: PPUSH
73755: CALL_OW 1
73759: ST_TO_ADDR
73760: GO 73686
73762: POP
73763: POP
// end ;
73764: LD_VAR 0 3
73768: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73769: LD_INT 0
73771: PPUSH
73772: PPUSH
73773: PPUSH
73774: PPUSH
73775: PPUSH
73776: PPUSH
73777: PPUSH
// result := [ ] ;
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: EMPTY
73784: ST_TO_ADDR
// if x - r < 0 then
73785: LD_VAR 0 1
73789: PUSH
73790: LD_VAR 0 3
73794: MINUS
73795: PUSH
73796: LD_INT 0
73798: LESS
73799: IFFALSE 73811
// min_x := 0 else
73801: LD_ADDR_VAR 0 8
73805: PUSH
73806: LD_INT 0
73808: ST_TO_ADDR
73809: GO 73827
// min_x := x - r ;
73811: LD_ADDR_VAR 0 8
73815: PUSH
73816: LD_VAR 0 1
73820: PUSH
73821: LD_VAR 0 3
73825: MINUS
73826: ST_TO_ADDR
// if y - r < 0 then
73827: LD_VAR 0 2
73831: PUSH
73832: LD_VAR 0 3
73836: MINUS
73837: PUSH
73838: LD_INT 0
73840: LESS
73841: IFFALSE 73853
// min_y := 0 else
73843: LD_ADDR_VAR 0 7
73847: PUSH
73848: LD_INT 0
73850: ST_TO_ADDR
73851: GO 73869
// min_y := y - r ;
73853: LD_ADDR_VAR 0 7
73857: PUSH
73858: LD_VAR 0 2
73862: PUSH
73863: LD_VAR 0 3
73867: MINUS
73868: ST_TO_ADDR
// max_x := x + r ;
73869: LD_ADDR_VAR 0 9
73873: PUSH
73874: LD_VAR 0 1
73878: PUSH
73879: LD_VAR 0 3
73883: PLUS
73884: ST_TO_ADDR
// max_y := y + r ;
73885: LD_ADDR_VAR 0 10
73889: PUSH
73890: LD_VAR 0 2
73894: PUSH
73895: LD_VAR 0 3
73899: PLUS
73900: ST_TO_ADDR
// for _x = min_x to max_x do
73901: LD_ADDR_VAR 0 5
73905: PUSH
73906: DOUBLE
73907: LD_VAR 0 8
73911: DEC
73912: ST_TO_ADDR
73913: LD_VAR 0 9
73917: PUSH
73918: FOR_TO
73919: IFFALSE 74020
// for _y = min_y to max_y do
73921: LD_ADDR_VAR 0 6
73925: PUSH
73926: DOUBLE
73927: LD_VAR 0 7
73931: DEC
73932: ST_TO_ADDR
73933: LD_VAR 0 10
73937: PUSH
73938: FOR_TO
73939: IFFALSE 74016
// begin if not ValidHex ( _x , _y ) then
73941: LD_VAR 0 5
73945: PPUSH
73946: LD_VAR 0 6
73950: PPUSH
73951: CALL_OW 488
73955: NOT
73956: IFFALSE 73960
// continue ;
73958: GO 73938
// if GetResourceTypeXY ( _x , _y ) then
73960: LD_VAR 0 5
73964: PPUSH
73965: LD_VAR 0 6
73969: PPUSH
73970: CALL_OW 283
73974: IFFALSE 74014
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_VAR 0 4
73985: PPUSH
73986: LD_VAR 0 4
73990: PUSH
73991: LD_INT 1
73993: PLUS
73994: PPUSH
73995: LD_VAR 0 5
73999: PUSH
74000: LD_VAR 0 6
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PPUSH
74009: CALL_OW 1
74013: ST_TO_ADDR
// end ;
74014: GO 73938
74016: POP
74017: POP
74018: GO 73918
74020: POP
74021: POP
// end ;
74022: LD_VAR 0 4
74026: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74027: LD_INT 0
74029: PPUSH
74030: PPUSH
74031: PPUSH
74032: PPUSH
74033: PPUSH
74034: PPUSH
74035: PPUSH
74036: PPUSH
// if not units then
74037: LD_VAR 0 1
74041: NOT
74042: IFFALSE 74046
// exit ;
74044: GO 74570
// result := UnitFilter ( units , [ f_ok ] ) ;
74046: LD_ADDR_VAR 0 3
74050: PUSH
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_INT 50
74058: PUSH
74059: EMPTY
74060: LIST
74061: PPUSH
74062: CALL_OW 72
74066: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74067: LD_ADDR_VAR 0 8
74071: PUSH
74072: LD_VAR 0 1
74076: PUSH
74077: LD_INT 1
74079: ARRAY
74080: PPUSH
74081: CALL_OW 255
74085: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74086: LD_ADDR_VAR 0 10
74090: PUSH
74091: LD_INT 29
74093: PUSH
74094: LD_INT 91
74096: PUSH
74097: LD_INT 49
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: LIST
74104: ST_TO_ADDR
// if not result then
74105: LD_VAR 0 3
74109: NOT
74110: IFFALSE 74114
// exit ;
74112: GO 74570
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74114: LD_ADDR_VAR 0 5
74118: PUSH
74119: LD_INT 81
74121: PUSH
74122: LD_VAR 0 8
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PPUSH
74131: CALL_OW 69
74135: ST_TO_ADDR
// for i in result do
74136: LD_ADDR_VAR 0 4
74140: PUSH
74141: LD_VAR 0 3
74145: PUSH
74146: FOR_IN
74147: IFFALSE 74568
// begin tag := GetTag ( i ) + 1 ;
74149: LD_ADDR_VAR 0 9
74153: PUSH
74154: LD_VAR 0 4
74158: PPUSH
74159: CALL_OW 110
74163: PUSH
74164: LD_INT 1
74166: PLUS
74167: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74168: LD_ADDR_VAR 0 7
74172: PUSH
74173: LD_VAR 0 4
74177: PPUSH
74178: CALL_OW 250
74182: PPUSH
74183: LD_VAR 0 4
74187: PPUSH
74188: CALL_OW 251
74192: PPUSH
74193: LD_INT 6
74195: PPUSH
74196: CALL 73769 0 3
74200: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74201: LD_VAR 0 4
74205: PPUSH
74206: CALL_OW 247
74210: PUSH
74211: LD_INT 2
74213: EQUAL
74214: PUSH
74215: LD_VAR 0 7
74219: AND
74220: PUSH
74221: LD_VAR 0 4
74225: PPUSH
74226: CALL_OW 264
74230: PUSH
74231: LD_VAR 0 10
74235: IN
74236: NOT
74237: AND
74238: IFFALSE 74277
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74240: LD_VAR 0 4
74244: PPUSH
74245: LD_VAR 0 7
74249: PUSH
74250: LD_INT 1
74252: ARRAY
74253: PUSH
74254: LD_INT 1
74256: ARRAY
74257: PPUSH
74258: LD_VAR 0 7
74262: PUSH
74263: LD_INT 1
74265: ARRAY
74266: PUSH
74267: LD_INT 2
74269: ARRAY
74270: PPUSH
74271: CALL_OW 116
74275: GO 74566
// if path > tag then
74277: LD_VAR 0 2
74281: PUSH
74282: LD_VAR 0 9
74286: GREATER
74287: IFFALSE 74495
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74289: LD_ADDR_VAR 0 6
74293: PUSH
74294: LD_VAR 0 5
74298: PPUSH
74299: LD_INT 91
74301: PUSH
74302: LD_VAR 0 4
74306: PUSH
74307: LD_INT 8
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: PPUSH
74315: CALL_OW 72
74319: ST_TO_ADDR
// if nearEnemy then
74320: LD_VAR 0 6
74324: IFFALSE 74393
// begin if GetWeapon ( i ) = ru_time_lapser then
74326: LD_VAR 0 4
74330: PPUSH
74331: CALL_OW 264
74335: PUSH
74336: LD_INT 49
74338: EQUAL
74339: IFFALSE 74367
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74341: LD_VAR 0 4
74345: PPUSH
74346: LD_VAR 0 6
74350: PPUSH
74351: LD_VAR 0 4
74355: PPUSH
74356: CALL_OW 74
74360: PPUSH
74361: CALL_OW 112
74365: GO 74391
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74367: LD_VAR 0 4
74371: PPUSH
74372: LD_VAR 0 6
74376: PPUSH
74377: LD_VAR 0 4
74381: PPUSH
74382: CALL_OW 74
74386: PPUSH
74387: CALL 75495 0 2
// end else
74391: GO 74493
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74393: LD_VAR 0 4
74397: PPUSH
74398: LD_VAR 0 2
74402: PUSH
74403: LD_VAR 0 9
74407: ARRAY
74408: PUSH
74409: LD_INT 1
74411: ARRAY
74412: PPUSH
74413: LD_VAR 0 2
74417: PUSH
74418: LD_VAR 0 9
74422: ARRAY
74423: PUSH
74424: LD_INT 2
74426: ARRAY
74427: PPUSH
74428: CALL_OW 297
74432: PUSH
74433: LD_INT 6
74435: GREATER
74436: IFFALSE 74479
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74438: LD_VAR 0 4
74442: PPUSH
74443: LD_VAR 0 2
74447: PUSH
74448: LD_VAR 0 9
74452: ARRAY
74453: PUSH
74454: LD_INT 1
74456: ARRAY
74457: PPUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_VAR 0 9
74467: ARRAY
74468: PUSH
74469: LD_INT 2
74471: ARRAY
74472: PPUSH
74473: CALL_OW 114
74477: GO 74493
// SetTag ( i , tag ) ;
74479: LD_VAR 0 4
74483: PPUSH
74484: LD_VAR 0 9
74488: PPUSH
74489: CALL_OW 109
// end else
74493: GO 74566
// if enemy then
74495: LD_VAR 0 5
74499: IFFALSE 74566
// begin if GetWeapon ( i ) = ru_time_lapser then
74501: LD_VAR 0 4
74505: PPUSH
74506: CALL_OW 264
74510: PUSH
74511: LD_INT 49
74513: EQUAL
74514: IFFALSE 74542
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74516: LD_VAR 0 4
74520: PPUSH
74521: LD_VAR 0 5
74525: PPUSH
74526: LD_VAR 0 4
74530: PPUSH
74531: CALL_OW 74
74535: PPUSH
74536: CALL_OW 112
74540: GO 74566
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74542: LD_VAR 0 4
74546: PPUSH
74547: LD_VAR 0 5
74551: PPUSH
74552: LD_VAR 0 4
74556: PPUSH
74557: CALL_OW 74
74561: PPUSH
74562: CALL 75495 0 2
// end ; end ;
74566: GO 74146
74568: POP
74569: POP
// end ;
74570: LD_VAR 0 3
74574: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74575: LD_INT 0
74577: PPUSH
74578: PPUSH
74579: PPUSH
// if not unit or IsInUnit ( unit ) then
74580: LD_VAR 0 1
74584: NOT
74585: PUSH
74586: LD_VAR 0 1
74590: PPUSH
74591: CALL_OW 310
74595: OR
74596: IFFALSE 74600
// exit ;
74598: GO 74691
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74600: LD_ADDR_VAR 0 4
74604: PUSH
74605: LD_VAR 0 1
74609: PPUSH
74610: CALL_OW 250
74614: PPUSH
74615: LD_VAR 0 2
74619: PPUSH
74620: LD_INT 1
74622: PPUSH
74623: CALL_OW 272
74627: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74628: LD_ADDR_VAR 0 5
74632: PUSH
74633: LD_VAR 0 1
74637: PPUSH
74638: CALL_OW 251
74642: PPUSH
74643: LD_VAR 0 2
74647: PPUSH
74648: LD_INT 1
74650: PPUSH
74651: CALL_OW 273
74655: ST_TO_ADDR
// if ValidHex ( x , y ) then
74656: LD_VAR 0 4
74660: PPUSH
74661: LD_VAR 0 5
74665: PPUSH
74666: CALL_OW 488
74670: IFFALSE 74691
// ComTurnXY ( unit , x , y ) ;
74672: LD_VAR 0 1
74676: PPUSH
74677: LD_VAR 0 4
74681: PPUSH
74682: LD_VAR 0 5
74686: PPUSH
74687: CALL_OW 118
// end ;
74691: LD_VAR 0 3
74695: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74696: LD_INT 0
74698: PPUSH
74699: PPUSH
// result := false ;
74700: LD_ADDR_VAR 0 3
74704: PUSH
74705: LD_INT 0
74707: ST_TO_ADDR
// if not units then
74708: LD_VAR 0 2
74712: NOT
74713: IFFALSE 74717
// exit ;
74715: GO 74762
// for i in units do
74717: LD_ADDR_VAR 0 4
74721: PUSH
74722: LD_VAR 0 2
74726: PUSH
74727: FOR_IN
74728: IFFALSE 74760
// if See ( side , i ) then
74730: LD_VAR 0 1
74734: PPUSH
74735: LD_VAR 0 4
74739: PPUSH
74740: CALL_OW 292
74744: IFFALSE 74758
// begin result := true ;
74746: LD_ADDR_VAR 0 3
74750: PUSH
74751: LD_INT 1
74753: ST_TO_ADDR
// exit ;
74754: POP
74755: POP
74756: GO 74762
// end ;
74758: GO 74727
74760: POP
74761: POP
// end ;
74762: LD_VAR 0 3
74766: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74767: LD_INT 0
74769: PPUSH
74770: PPUSH
74771: PPUSH
74772: PPUSH
// if not unit or not points then
74773: LD_VAR 0 1
74777: NOT
74778: PUSH
74779: LD_VAR 0 2
74783: NOT
74784: OR
74785: IFFALSE 74789
// exit ;
74787: GO 74879
// dist := 99999 ;
74789: LD_ADDR_VAR 0 5
74793: PUSH
74794: LD_INT 99999
74796: ST_TO_ADDR
// for i in points do
74797: LD_ADDR_VAR 0 4
74801: PUSH
74802: LD_VAR 0 2
74806: PUSH
74807: FOR_IN
74808: IFFALSE 74877
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74810: LD_ADDR_VAR 0 6
74814: PUSH
74815: LD_VAR 0 1
74819: PPUSH
74820: LD_VAR 0 4
74824: PUSH
74825: LD_INT 1
74827: ARRAY
74828: PPUSH
74829: LD_VAR 0 4
74833: PUSH
74834: LD_INT 2
74836: ARRAY
74837: PPUSH
74838: CALL_OW 297
74842: ST_TO_ADDR
// if tmpDist < dist then
74843: LD_VAR 0 6
74847: PUSH
74848: LD_VAR 0 5
74852: LESS
74853: IFFALSE 74875
// begin result := i ;
74855: LD_ADDR_VAR 0 3
74859: PUSH
74860: LD_VAR 0 4
74864: ST_TO_ADDR
// dist := tmpDist ;
74865: LD_ADDR_VAR 0 5
74869: PUSH
74870: LD_VAR 0 6
74874: ST_TO_ADDR
// end ; end ;
74875: GO 74807
74877: POP
74878: POP
// end ;
74879: LD_VAR 0 3
74883: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74884: LD_INT 0
74886: PPUSH
// uc_side := side ;
74887: LD_ADDR_OWVAR 20
74891: PUSH
74892: LD_VAR 0 1
74896: ST_TO_ADDR
// uc_nation := 3 ;
74897: LD_ADDR_OWVAR 21
74901: PUSH
74902: LD_INT 3
74904: ST_TO_ADDR
// vc_chassis := 25 ;
74905: LD_ADDR_OWVAR 37
74909: PUSH
74910: LD_INT 25
74912: ST_TO_ADDR
// vc_engine := engine_siberite ;
74913: LD_ADDR_OWVAR 39
74917: PUSH
74918: LD_INT 3
74920: ST_TO_ADDR
// vc_control := control_computer ;
74921: LD_ADDR_OWVAR 38
74925: PUSH
74926: LD_INT 3
74928: ST_TO_ADDR
// vc_weapon := 59 ;
74929: LD_ADDR_OWVAR 40
74933: PUSH
74934: LD_INT 59
74936: ST_TO_ADDR
// result := CreateVehicle ;
74937: LD_ADDR_VAR 0 5
74941: PUSH
74942: CALL_OW 45
74946: ST_TO_ADDR
// SetDir ( result , d ) ;
74947: LD_VAR 0 5
74951: PPUSH
74952: LD_VAR 0 4
74956: PPUSH
74957: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74961: LD_VAR 0 5
74965: PPUSH
74966: LD_VAR 0 2
74970: PPUSH
74971: LD_VAR 0 3
74975: PPUSH
74976: LD_INT 0
74978: PPUSH
74979: CALL_OW 48
// end ;
74983: LD_VAR 0 5
74987: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74988: LD_INT 0
74990: PPUSH
74991: PPUSH
74992: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74993: LD_ADDR_VAR 0 2
74997: PUSH
74998: LD_INT 0
75000: PUSH
75001: LD_INT 0
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: LD_INT 0
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75016: LD_VAR 0 1
75020: NOT
75021: PUSH
75022: LD_VAR 0 1
75026: PPUSH
75027: CALL_OW 264
75031: PUSH
75032: LD_INT 12
75034: PUSH
75035: LD_INT 51
75037: PUSH
75038: LD_INT 32
75040: PUSH
75041: LD_INT 89
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: IN
75050: NOT
75051: OR
75052: IFFALSE 75056
// exit ;
75054: GO 75154
// for i := 1 to 3 do
75056: LD_ADDR_VAR 0 3
75060: PUSH
75061: DOUBLE
75062: LD_INT 1
75064: DEC
75065: ST_TO_ADDR
75066: LD_INT 3
75068: PUSH
75069: FOR_TO
75070: IFFALSE 75152
// begin tmp := GetCargo ( cargo , i ) ;
75072: LD_ADDR_VAR 0 4
75076: PUSH
75077: LD_VAR 0 1
75081: PPUSH
75082: LD_VAR 0 3
75086: PPUSH
75087: CALL_OW 289
75091: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75092: LD_ADDR_VAR 0 2
75096: PUSH
75097: LD_VAR 0 2
75101: PPUSH
75102: LD_VAR 0 3
75106: PPUSH
75107: LD_VAR 0 4
75111: PPUSH
75112: CALL_OW 1
75116: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75117: LD_ADDR_VAR 0 2
75121: PUSH
75122: LD_VAR 0 2
75126: PPUSH
75127: LD_INT 4
75129: PPUSH
75130: LD_VAR 0 2
75134: PUSH
75135: LD_INT 4
75137: ARRAY
75138: PUSH
75139: LD_VAR 0 4
75143: PLUS
75144: PPUSH
75145: CALL_OW 1
75149: ST_TO_ADDR
// end ;
75150: GO 75069
75152: POP
75153: POP
// end ;
75154: LD_VAR 0 2
75158: RET
// export function Length ( array ) ; begin
75159: LD_INT 0
75161: PPUSH
// result := array + 0 ;
75162: LD_ADDR_VAR 0 2
75166: PUSH
75167: LD_VAR 0 1
75171: PUSH
75172: LD_INT 0
75174: PLUS
75175: ST_TO_ADDR
// end ;
75176: LD_VAR 0 2
75180: RET
// export function PrepareArray ( array ) ; begin
75181: LD_INT 0
75183: PPUSH
// result := array diff 0 ;
75184: LD_ADDR_VAR 0 2
75188: PUSH
75189: LD_VAR 0 1
75193: PUSH
75194: LD_INT 0
75196: DIFF
75197: ST_TO_ADDR
// if not result [ 1 ] then
75198: LD_VAR 0 2
75202: PUSH
75203: LD_INT 1
75205: ARRAY
75206: NOT
75207: IFFALSE 75227
// result := Delete ( result , 1 ) ;
75209: LD_ADDR_VAR 0 2
75213: PUSH
75214: LD_VAR 0 2
75218: PPUSH
75219: LD_INT 1
75221: PPUSH
75222: CALL_OW 3
75226: ST_TO_ADDR
// end ;
75227: LD_VAR 0 2
75231: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75232: LD_INT 0
75234: PPUSH
75235: PPUSH
75236: PPUSH
75237: PPUSH
// sibRocketRange := 25 ;
75238: LD_ADDR_VAR 0 6
75242: PUSH
75243: LD_INT 25
75245: ST_TO_ADDR
// result := false ;
75246: LD_ADDR_VAR 0 4
75250: PUSH
75251: LD_INT 0
75253: ST_TO_ADDR
// for i := 0 to 5 do
75254: LD_ADDR_VAR 0 5
75258: PUSH
75259: DOUBLE
75260: LD_INT 0
75262: DEC
75263: ST_TO_ADDR
75264: LD_INT 5
75266: PUSH
75267: FOR_TO
75268: IFFALSE 75335
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75270: LD_VAR 0 1
75274: PPUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: LD_VAR 0 6
75284: PPUSH
75285: CALL_OW 272
75289: PPUSH
75290: LD_VAR 0 2
75294: PPUSH
75295: LD_VAR 0 5
75299: PPUSH
75300: LD_VAR 0 6
75304: PPUSH
75305: CALL_OW 273
75309: PPUSH
75310: LD_VAR 0 3
75314: PPUSH
75315: CALL_OW 309
75319: IFFALSE 75333
// begin result := true ;
75321: LD_ADDR_VAR 0 4
75325: PUSH
75326: LD_INT 1
75328: ST_TO_ADDR
// exit ;
75329: POP
75330: POP
75331: GO 75337
// end ;
75333: GO 75267
75335: POP
75336: POP
// end ;
75337: LD_VAR 0 4
75341: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75342: LD_INT 0
75344: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75345: LD_VAR 0 1
75349: PPUSH
75350: LD_VAR 0 2
75354: PPUSH
75355: LD_INT 0
75357: PPUSH
75358: LD_INT 0
75360: PPUSH
75361: LD_INT 1
75363: PPUSH
75364: LD_INT 0
75366: PPUSH
75367: CALL_OW 587
// end ;
75371: LD_VAR 0 3
75375: RET
// export function CenterOnNow ( unit ) ; begin
75376: LD_INT 0
75378: PPUSH
// result := IsInUnit ( unit ) ;
75379: LD_ADDR_VAR 0 2
75383: PUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: CALL_OW 310
75393: ST_TO_ADDR
// if not result then
75394: LD_VAR 0 2
75398: NOT
75399: IFFALSE 75411
// result := unit ;
75401: LD_ADDR_VAR 0 2
75405: PUSH
75406: LD_VAR 0 1
75410: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75411: LD_VAR 0 1
75415: PPUSH
75416: CALL_OW 87
// end ;
75420: LD_VAR 0 2
75424: RET
// export function ComMoveHex ( unit , hex ) ; begin
75425: LD_INT 0
75427: PPUSH
// if not hex then
75428: LD_VAR 0 2
75432: NOT
75433: IFFALSE 75437
// exit ;
75435: GO 75490
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75437: LD_VAR 0 2
75441: PUSH
75442: LD_INT 1
75444: ARRAY
75445: PPUSH
75446: LD_VAR 0 2
75450: PUSH
75451: LD_INT 2
75453: ARRAY
75454: PPUSH
75455: CALL_OW 428
75459: IFFALSE 75463
// exit ;
75461: GO 75490
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75463: LD_VAR 0 1
75467: PPUSH
75468: LD_VAR 0 2
75472: PUSH
75473: LD_INT 1
75475: ARRAY
75476: PPUSH
75477: LD_VAR 0 2
75481: PUSH
75482: LD_INT 2
75484: ARRAY
75485: PPUSH
75486: CALL_OW 111
// end ;
75490: LD_VAR 0 3
75494: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75495: LD_INT 0
75497: PPUSH
75498: PPUSH
75499: PPUSH
// if not unit or not enemy then
75500: LD_VAR 0 1
75504: NOT
75505: PUSH
75506: LD_VAR 0 2
75510: NOT
75511: OR
75512: IFFALSE 75516
// exit ;
75514: GO 75640
// x := GetX ( enemy ) ;
75516: LD_ADDR_VAR 0 4
75520: PUSH
75521: LD_VAR 0 2
75525: PPUSH
75526: CALL_OW 250
75530: ST_TO_ADDR
// y := GetY ( enemy ) ;
75531: LD_ADDR_VAR 0 5
75535: PUSH
75536: LD_VAR 0 2
75540: PPUSH
75541: CALL_OW 251
75545: ST_TO_ADDR
// if ValidHex ( x , y ) then
75546: LD_VAR 0 4
75550: PPUSH
75551: LD_VAR 0 5
75555: PPUSH
75556: CALL_OW 488
75560: IFFALSE 75640
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
75562: LD_VAR 0 2
75566: PPUSH
75567: CALL_OW 247
75571: PUSH
75572: LD_INT 3
75574: PUSH
75575: LD_INT 2
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: IN
75582: PUSH
75583: LD_VAR 0 1
75587: PPUSH
75588: CALL_OW 255
75592: PPUSH
75593: LD_VAR 0 2
75597: PPUSH
75598: CALL_OW 292
75602: AND
75603: IFFALSE 75621
// ComAttackUnit ( unit , enemy ) else
75605: LD_VAR 0 1
75609: PPUSH
75610: LD_VAR 0 2
75614: PPUSH
75615: CALL_OW 115
75619: GO 75640
// ComAgressiveMove ( unit , x , y ) ;
75621: LD_VAR 0 1
75625: PPUSH
75626: LD_VAR 0 4
75630: PPUSH
75631: LD_VAR 0 5
75635: PPUSH
75636: CALL_OW 114
// end ;
75640: LD_VAR 0 3
75644: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75645: LD_INT 0
75647: PPUSH
75648: PPUSH
75649: PPUSH
// list := AreaToList ( area , 0 ) ;
75650: LD_ADDR_VAR 0 5
75654: PUSH
75655: LD_VAR 0 1
75659: PPUSH
75660: LD_INT 0
75662: PPUSH
75663: CALL_OW 517
75667: ST_TO_ADDR
// if not list then
75668: LD_VAR 0 5
75672: NOT
75673: IFFALSE 75677
// exit ;
75675: GO 75807
// if all then
75677: LD_VAR 0 2
75681: IFFALSE 75769
// begin for i := 1 to list [ 1 ] do
75683: LD_ADDR_VAR 0 4
75687: PUSH
75688: DOUBLE
75689: LD_INT 1
75691: DEC
75692: ST_TO_ADDR
75693: LD_VAR 0 5
75697: PUSH
75698: LD_INT 1
75700: ARRAY
75701: PUSH
75702: FOR_TO
75703: IFFALSE 75765
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75705: LD_ADDR_VAR 0 3
75709: PUSH
75710: LD_VAR 0 3
75714: PPUSH
75715: LD_VAR 0 3
75719: PUSH
75720: LD_INT 1
75722: PLUS
75723: PPUSH
75724: LD_VAR 0 5
75728: PUSH
75729: LD_INT 1
75731: ARRAY
75732: PUSH
75733: LD_VAR 0 4
75737: ARRAY
75738: PUSH
75739: LD_VAR 0 5
75743: PUSH
75744: LD_INT 2
75746: ARRAY
75747: PUSH
75748: LD_VAR 0 4
75752: ARRAY
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PPUSH
75758: CALL_OW 1
75762: ST_TO_ADDR
75763: GO 75702
75765: POP
75766: POP
// exit ;
75767: GO 75807
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75769: LD_ADDR_VAR 0 3
75773: PUSH
75774: LD_VAR 0 5
75778: PUSH
75779: LD_INT 1
75781: ARRAY
75782: PUSH
75783: LD_INT 1
75785: ARRAY
75786: PUSH
75787: LD_VAR 0 5
75791: PUSH
75792: LD_INT 2
75794: ARRAY
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: EMPTY
75805: LIST
75806: ST_TO_ADDR
// end ;
75807: LD_VAR 0 3
75811: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75812: LD_INT 0
75814: PPUSH
75815: PPUSH
// list := AreaToList ( area , 0 ) ;
75816: LD_ADDR_VAR 0 4
75820: PUSH
75821: LD_VAR 0 1
75825: PPUSH
75826: LD_INT 0
75828: PPUSH
75829: CALL_OW 517
75833: ST_TO_ADDR
// if not list then
75834: LD_VAR 0 4
75838: NOT
75839: IFFALSE 75843
// exit ;
75841: GO 75884
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: LD_VAR 0 4
75852: PUSH
75853: LD_INT 1
75855: ARRAY
75856: PUSH
75857: LD_INT 1
75859: ARRAY
75860: PUSH
75861: LD_VAR 0 4
75865: PUSH
75866: LD_INT 2
75868: ARRAY
75869: PUSH
75870: LD_INT 1
75872: ARRAY
75873: PUSH
75874: LD_VAR 0 2
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: LIST
75883: ST_TO_ADDR
// end ;
75884: LD_VAR 0 3
75888: RET
// export function First ( array ) ; begin
75889: LD_INT 0
75891: PPUSH
// if not array then
75892: LD_VAR 0 1
75896: NOT
75897: IFFALSE 75901
// exit ;
75899: GO 75915
// result := array [ 1 ] ;
75901: LD_ADDR_VAR 0 2
75905: PUSH
75906: LD_VAR 0 1
75910: PUSH
75911: LD_INT 1
75913: ARRAY
75914: ST_TO_ADDR
// end ;
75915: LD_VAR 0 2
75919: RET
// export function Last ( array ) ; begin
75920: LD_INT 0
75922: PPUSH
// if not array then
75923: LD_VAR 0 1
75927: NOT
75928: IFFALSE 75932
// exit ;
75930: GO 75948
// result := array [ array ] ;
75932: LD_ADDR_VAR 0 2
75936: PUSH
75937: LD_VAR 0 1
75941: PUSH
75942: LD_VAR 0 1
75946: ARRAY
75947: ST_TO_ADDR
// end ; end_of_file
75948: LD_VAR 0 2
75952: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75953: LD_VAR 0 1
75957: PUSH
75958: LD_INT 200
75960: DOUBLE
75961: GREATEREQUAL
75962: IFFALSE 75970
75964: LD_INT 299
75966: DOUBLE
75967: LESSEQUAL
75968: IFTRUE 75972
75970: GO 76004
75972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75973: LD_VAR 0 1
75977: PPUSH
75978: LD_VAR 0 2
75982: PPUSH
75983: LD_VAR 0 3
75987: PPUSH
75988: LD_VAR 0 4
75992: PPUSH
75993: LD_VAR 0 5
75997: PPUSH
75998: CALL 29203 0 5
76002: GO 76081
76004: LD_INT 300
76006: DOUBLE
76007: GREATEREQUAL
76008: IFFALSE 76016
76010: LD_INT 399
76012: DOUBLE
76013: LESSEQUAL
76014: IFTRUE 76018
76016: GO 76080
76018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76019: LD_VAR 0 1
76023: PPUSH
76024: LD_VAR 0 2
76028: PPUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: LD_VAR 0 4
76038: PPUSH
76039: LD_VAR 0 5
76043: PPUSH
76044: LD_VAR 0 6
76048: PPUSH
76049: LD_VAR 0 7
76053: PPUSH
76054: LD_VAR 0 8
76058: PPUSH
76059: LD_VAR 0 9
76063: PPUSH
76064: LD_VAR 0 10
76068: PPUSH
76069: LD_VAR 0 11
76073: PPUSH
76074: CALL 25528 0 11
76078: GO 76081
76080: POP
// end ;
76081: PPOPN 11
76083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76084: LD_VAR 0 1
76088: PPUSH
76089: LD_VAR 0 2
76093: PPUSH
76094: LD_VAR 0 3
76098: PPUSH
76099: LD_VAR 0 4
76103: PPUSH
76104: LD_VAR 0 5
76108: PPUSH
76109: CALL 28939 0 5
// end ; end_of_file
76113: PPOPN 5
76115: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76116: LD_VAR 0 1
76120: PPUSH
76121: LD_VAR 0 2
76125: PPUSH
76126: LD_VAR 0 3
76130: PPUSH
76131: LD_VAR 0 4
76135: PPUSH
76136: LD_VAR 0 5
76140: PPUSH
76141: LD_VAR 0 6
76145: PPUSH
76146: CALL 13180 0 6
// end ;
76150: PPOPN 6
76152: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76153: LD_INT 0
76155: PPUSH
// begin if not units then
76156: LD_VAR 0 1
76160: NOT
76161: IFFALSE 76165
// exit ;
76163: GO 76165
// end ;
76165: PPOPN 7
76167: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76168: CALL 13084 0 0
// end ;
76172: PPOPN 1
76174: END
