// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11684 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32882 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32882 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL_OW 94
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 2
8109: EQUAL
8110: AND
8111: PUSH
8112: LD_EXP 25
8116: PPUSH
8117: CALL_OW 302
8121: AND
8122: PUSH
8123: LD_EXP 23
8127: PPUSH
8128: CALL_OW 302
8132: AND
8133: IFFALSE 8278
8135: GO 8137
8137: DISABLE
// begin DialogueOn ;
8138: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8142: LD_INT 47
8144: PPUSH
8145: LD_INT 19
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 6
8153: NEG
8154: PPUSH
8155: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8159: LD_INT 47
8161: PPUSH
8162: LD_INT 19
8164: PPUSH
8165: LD_INT 2
8167: PPUSH
8168: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8172: LD_INT 34
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 6
8183: NEG
8184: PPUSH
8185: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8189: LD_INT 34
8191: PPUSH
8192: LD_INT 32
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8202: LD_EXP 25
8206: PPUSH
8207: LD_STRING DM-Prem-1
8209: PPUSH
8210: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8214: LD_EXP 23
8218: PPUSH
8219: LD_STRING DH-Prem-2
8221: PPUSH
8222: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8226: LD_EXP 23
8230: PPUSH
8231: LD_STRING DH-Prem-3
8233: PPUSH
8234: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8238: LD_EXP 25
8242: PPUSH
8243: LD_STRING DM-Prem-4
8245: PPUSH
8246: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8250: LD_EXP 25
8254: PPUSH
8255: LD_STRING DM-Prem-5
8257: PPUSH
8258: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8262: LD_EXP 24
8266: PPUSH
8267: LD_STRING DG-Prem-6
8269: PPUSH
8270: CALL_OW 88
// DialogueOff ;
8274: CALL_OW 7
// end ;
8278: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8279: LD_INT 5
8281: PPUSH
8282: LD_EXP 23
8286: PPUSH
8287: CALL_OW 292
8291: PUSH
8292: LD_EXP 23
8296: PPUSH
8297: LD_EXP 27
8301: PPUSH
8302: CALL_OW 296
8306: PUSH
8307: LD_INT 6
8309: LESS
8310: AND
8311: PUSH
8312: LD_EXP 8
8316: AND
8317: PUSH
8318: LD_EXP 14
8322: NOT
8323: AND
8324: IFFALSE 8462
8326: GO 8328
8328: DISABLE
8329: LD_INT 0
8331: PPUSH
// begin attackDeltaAllowed := true ;
8332: LD_ADDR_EXP 14
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// InGameOn ;
8340: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8344: LD_EXP 23
8348: PPUSH
8349: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8353: LD_INT 10
8355: PPUSH
8356: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8360: LD_EXP 27
8364: PPUSH
8365: LD_EXP 23
8369: PPUSH
8370: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8374: LD_EXP 23
8378: PPUSH
8379: LD_EXP 27
8383: PPUSH
8384: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_STRING DH-1-return
8395: PPUSH
8396: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8400: LD_EXP 27
8404: PPUSH
8405: LD_STRING DA-1-return
8407: PPUSH
8408: CALL_OW 88
// InGameOff ;
8412: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8416: LD_STRING ODelta
8418: PPUSH
8419: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 69
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8460
// SetSide ( i , 2 ) ;
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 235
8458: GO 8443
8460: POP
8461: POP
// end ;
8462: PPOPN 1
8464: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8465: LD_EXP 10
8469: PUSH
8470: LD_EXP 14
8474: NOT
8475: AND
8476: IFFALSE 8489
8478: GO 8480
8480: DISABLE
// spottedBeforeRadio := true ;
8481: LD_ADDR_EXP 6
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
8489: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8490: LD_EXP 14
8494: PUSH
8495: LD_EXP 30
8499: PPUSH
8500: CALL_OW 302
8504: AND
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: CALL_OW 255
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: AND
8518: PUSH
8519: LD_EXP 20
8523: PPUSH
8524: CALL_OW 302
8528: AND
8529: PUSH
8530: LD_EXP 10
8534: NOT
8535: AND
8536: IFFALSE 9764
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
8545: PPUSH
// begin trap := 0 ;
8546: LD_ADDR_EXP 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8554: LD_INT 420
8556: PPUSH
8557: CALL_OW 67
// DialogueOn ;
8561: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8565: LD_EXP 30
8569: PPUSH
8570: LD_STRING DMar-1-radio
8572: PPUSH
8573: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8577: LD_EXP 23
8581: PPUSH
8582: LD_STRING DH-1-radio
8584: PPUSH
8585: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8589: LD_EXP 30
8593: PPUSH
8594: LD_STRING DMar-2-radio
8596: PPUSH
8597: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8601: LD_EXP 23
8605: PPUSH
8606: LD_STRING DH-2-radio
8608: PPUSH
8609: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8613: LD_EXP 26
8617: PPUSH
8618: CALL_OW 302
8622: PUSH
8623: LD_EXP 29
8627: PPUSH
8628: CALL_OW 302
8632: OR
8633: IFFALSE 9764
// begin case Query ( Q1Trap ) of 1 :
8635: LD_STRING Q1Trap
8637: PPUSH
8638: CALL_OW 97
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8857
8651: POP
// begin if IsOk ( Kamil ) then
8652: LD_EXP 26
8656: PPUSH
8657: CALL_OW 302
8661: IFFALSE 8740
// begin Say ( Kamil , DKam-2-radio ) ;
8663: LD_EXP 26
8667: PPUSH
8668: LD_STRING DKam-2-radio
8670: PPUSH
8671: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8675: LD_EXP 26
8679: PPUSH
8680: LD_STRING DKam-3-radio
8682: PPUSH
8683: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8687: LD_EXP 20
8691: PPUSH
8692: LD_STRING DDelta-3-radio
8694: PPUSH
8695: CALL_OW 94
// dwait ( 0 0$01 ) ;
8699: LD_INT 35
8701: PPUSH
8702: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8706: LD_EXP 23
8710: PPUSH
8711: LD_STRING DH-3-radio
8713: PPUSH
8714: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8718: LD_EXP 26
8722: PPUSH
8723: LD_STRING DKam-4-radio
8725: PPUSH
8726: CALL_OW 88
// trap := 1 ;
8730: LD_ADDR_EXP 17
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// end else
8738: GO 8851
// begin Say ( Sophia , DS-1-radio ) ;
8740: LD_EXP 29
8744: PPUSH
8745: LD_STRING DS-1-radio
8747: PPUSH
8748: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8752: LD_EXP 29
8756: PPUSH
8757: LD_STRING DS-2-radio
8759: PPUSH
8760: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8764: LD_EXP 20
8768: PPUSH
8769: LD_STRING DDelta-2-radio-s
8771: PPUSH
8772: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8776: LD_EXP 29
8780: PPUSH
8781: LD_STRING DS-3-radio
8783: PPUSH
8784: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8788: LD_EXP 20
8792: PPUSH
8793: LD_STRING DDelta-3-radio-s
8795: PPUSH
8796: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8800: LD_EXP 29
8804: PPUSH
8805: LD_STRING DS-4-radio-s
8807: PPUSH
8808: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8812: LD_EXP 20
8816: PPUSH
8817: LD_STRING DDelta-4-radio-s
8819: PPUSH
8820: CALL_OW 94
// dwait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8831: LD_EXP 23
8835: PPUSH
8836: LD_STRING DH-1-trap
8838: PPUSH
8839: CALL_OW 88
// trap := 0 ;
8843: LD_ADDR_EXP 17
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// end ; DialogueOff ;
8851: CALL_OW 7
// end ; 2 :
8855: GO 8875
8857: LD_INT 2
8859: DOUBLE
8860: EQUAL
8861: IFTRUE 8865
8863: GO 8874
8865: POP
// begin DialogueOff ;
8866: CALL_OW 7
// exit ;
8870: GO 9764
// end ; end ;
8872: GO 8875
8874: POP
// if trap = 1 then
8875: LD_EXP 17
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 9335
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8885: LD_INT 64
8887: PPUSH
8888: LD_INT 32
8890: PPUSH
8891: LD_INT 2
8893: PPUSH
8894: LD_INT 8
8896: PPUSH
8897: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8901: LD_INT 64
8903: PPUSH
8904: LD_INT 32
8906: PPUSH
8907: CALL_OW 84
// tmp := [ ] ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// k := 3 ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: LD_INT 3
8925: ST_TO_ADDR
// if usForces < 3 then
8926: LD_EXP 21
8930: PUSH
8931: LD_INT 3
8933: LESS
8934: IFFALSE 8946
// k := usForces ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_EXP 21
8945: ST_TO_ADDR
// for i := 1 to k do
8946: LD_ADDR_VAR 0 1
8950: PUSH
8951: DOUBLE
8952: LD_INT 1
8954: DEC
8955: ST_TO_ADDR
8956: LD_VAR 0 2
8960: PUSH
8961: FOR_TO
8962: IFFALSE 9017
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8964: LD_ADDR_VAR 0 3
8968: PUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 1
8981: PLUS
8982: PPUSH
8983: LD_EXP 21
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: CALL_OW 1
8996: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8997: LD_ADDR_EXP 21
9001: PUSH
9002: LD_EXP 21
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ;
9015: GO 8961
9017: POP
9018: POP
// usPatrol := tmp ;
9019: LD_ADDR_EXP 16
9023: PUSH
9024: LD_VAR 0 3
9028: ST_TO_ADDR
// for i in tmp do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_VAR 0 3
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9170
// begin if IsInUnit ( i ) then
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 310
9051: IFFALSE 9062
// ComExitBuilding ( i ) ;
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 63
9069: PPUSH
9070: LD_INT 31
9072: PPUSH
9073: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 70
9084: PPUSH
9085: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9089: LD_VAR 0 1
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: LD_INT 43
9099: PPUSH
9100: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_INT 105
9111: PPUSH
9112: CALL_OW 202
// if Difficulty > 1 then
9116: LD_OWVAR 67
9120: PUSH
9121: LD_INT 1
9123: GREATER
9124: IFFALSE 9141
// AddComAgressiveMove ( i , 114 , 69 ) ;
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_INT 114
9133: PPUSH
9134: LD_INT 69
9136: PPUSH
9137: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_INT 105
9148: PPUSH
9149: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_INT 42
9160: PPUSH
9161: LD_INT 20
9163: PPUSH
9164: CALL_OW 174
// end ;
9168: GO 9039
9170: POP
9171: POP
// wait ( 0 0$8 ) ;
9172: LD_INT 280
9174: PPUSH
9175: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9179: LD_INT 64
9181: PPUSH
9182: LD_INT 32
9184: PPUSH
9185: LD_INT 2
9187: PPUSH
9188: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9192: LD_INT 35
9194: PPUSH
9195: CALL_OW 67
// for i in tmp do
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: FOR_IN
9210: IFFALSE 9241
// if IsDead ( i ) then
9212: LD_VAR 0 1
9216: PPUSH
9217: CALL_OW 301
9221: IFFALSE 9239
// tmp := tmp diff i ;
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: DIFF
9238: ST_TO_ADDR
9239: GO 9209
9241: POP
9242: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9243: LD_VAR 0 3
9247: NOT
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 95
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: LD_INT 60
9269: PUSH
9270: EMPTY
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 72
9285: PUSH
9286: LD_VAR 0 3
9290: EQUAL
9291: OR
9292: IFFALSE 9192
// if tmp then
9294: LD_VAR 0 3
9298: IFFALSE 9325
// begin usPatrol := [ ] ;
9300: LD_ADDR_EXP 16
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// usForces := usForces union tmp ;
9307: LD_ADDR_EXP 21
9311: PUSH
9312: LD_EXP 21
9316: PUSH
9317: LD_VAR 0 3
9321: UNION
9322: ST_TO_ADDR
// end else
9323: GO 9333
// trickyMove := true ;
9325: LD_ADDR_EXP 15
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// end else
9333: GO 9764
// begin tmp := [ ] ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: EMPTY
9341: ST_TO_ADDR
// k := 4 ;
9342: LD_ADDR_VAR 0 2
9346: PUSH
9347: LD_INT 4
9349: ST_TO_ADDR
// if usForces < 4 then
9350: LD_EXP 21
9354: PUSH
9355: LD_INT 4
9357: LESS
9358: IFFALSE 9370
// k := usForces ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_EXP 21
9369: ST_TO_ADDR
// for i := 1 to k do
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 2
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9441
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_VAR 0 3
9397: PPUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: PLUS
9406: PPUSH
9407: LD_EXP 21
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: CALL_OW 1
9420: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9421: LD_ADDR_EXP 21
9425: PUSH
9426: LD_EXP 21
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 3
9438: ST_TO_ADDR
// end ;
9439: GO 9385
9441: POP
9442: POP
// if Lynch then
9443: LD_EXP 20
9447: IFFALSE 9465
// tmp := tmp ^ Lynch ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 3
9458: PUSH
9459: LD_EXP 20
9463: ADD
9464: ST_TO_ADDR
// usPatrol := tmp ;
9465: LD_ADDR_EXP 16
9469: PUSH
9470: LD_VAR 0 3
9474: ST_TO_ADDR
// for i in tmp do
9475: LD_ADDR_VAR 0 1
9479: PUSH
9480: LD_VAR 0 3
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9579
// begin if IsInUnit ( i ) then
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 310
9497: IFFALSE 9508
// ComExitBuilding ( i ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_INT 69
9515: PPUSH
9516: LD_INT 15
9518: PPUSH
9519: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 55
9542: PPUSH
9543: LD_INT 43
9545: PPUSH
9546: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: LD_INT 700
9557: PPUSH
9558: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 20
9572: PPUSH
9573: CALL_OW 174
// end ;
9577: GO 9485
9579: POP
9580: POP
// repeat wait ( 0 0$1 ) ;
9581: LD_INT 35
9583: PPUSH
9584: CALL_OW 67
// for i in tmp do
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_VAR 0 3
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9630
// if IsDead ( i ) then
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 301
9610: IFFALSE 9628
// tmp := tmp diff i ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: LD_VAR 0 1
9626: DIFF
9627: ST_TO_ADDR
9628: GO 9598
9630: POP
9631: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9632: LD_VAR 0 3
9636: NOT
9637: PUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 95
9645: PUSH
9646: LD_INT 7
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 60
9658: PUSH
9659: EMPTY
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 72
9674: PUSH
9675: LD_VAR 0 3
9679: EQUAL
9680: OR
9681: IFFALSE 9581
// if not tmp then
9683: LD_VAR 0 3
9687: NOT
9688: IFFALSE 9700
// trickyMove := true else
9690: LD_ADDR_EXP 15
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
9698: GO 9707
// usPatrol := [ ] ;
9700: LD_ADDR_EXP 16
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// if tmp diff Lynch then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_EXP 20
9716: DIFF
9717: IFFALSE 9741
// usForces := usForces union ( tmp diff Lynch ) ;
9719: LD_ADDR_EXP 21
9723: PUSH
9724: LD_EXP 21
9728: PUSH
9729: LD_VAR 0 3
9733: PUSH
9734: LD_EXP 20
9738: DIFF
9739: UNION
9740: ST_TO_ADDR
// if IsOk ( Lynch ) then
9741: LD_EXP 20
9745: PPUSH
9746: CALL_OW 302
9750: IFFALSE 9764
// ComEnterUnit ( Lynch , Delta ) ;
9752: LD_EXP 20
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 120
// end ; end ; end ;
9764: PPOPN 3
9766: END
// every 0 0$1 trigger trickyMove do
9767: LD_EXP 15
9771: IFFALSE 9783
9773: GO 9775
9775: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9776: LD_STRING ACH_TRAP
9778: PPUSH
9779: CALL_OW 543
9783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 23
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: IFFALSE 9835
9825: GO 9827
9827: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9828: LD_STRING ACH_SCRAP
9830: PPUSH
9831: CALL_OW 543
9835: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9836: LD_EXP 16
9840: PPUSH
9841: LD_INT 101
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 72
9855: PUSH
9856: LD_INT 1
9858: PPUSH
9859: LD_EXP 23
9863: PPUSH
9864: CALL_OW 292
9868: AND
9869: IFFALSE 10002
9871: GO 9873
9873: DISABLE
// begin if not trap then
9874: LD_EXP 17
9878: NOT
9879: IFFALSE 9907
// begin Say ( Heike , DH-2-trap ) ;
9881: LD_EXP 23
9885: PPUSH
9886: LD_STRING DH-2-trap
9888: PPUSH
9889: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9893: LD_EXP 25
9897: PPUSH
9898: LD_STRING DM-2-trap
9900: PPUSH
9901: CALL_OW 88
// end else
9905: GO 9919
// begin Say ( Heike , DH-1-trap-a ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-trap-a
9914: PPUSH
9915: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9919: LD_INT 35
9921: PPUSH
9922: CALL_OW 67
// until trickyMove ;
9926: LD_EXP 15
9930: IFFALSE 9919
// Say ( Heike , DH-3-trap ) ;
9932: LD_EXP 23
9936: PPUSH
9937: LD_STRING DH-3-trap
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9944: LD_EXP 24
9948: PPUSH
9949: CALL_OW 302
9953: PUSH
9954: LD_EXP 28
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: IFFALSE 10002
// begin Say ( Givi , DG-3-trap ) ;
9966: LD_EXP 24
9970: PPUSH
9971: LD_STRING DG-3-trap
9973: PPUSH
9974: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9978: LD_EXP 28
9982: PPUSH
9983: LD_STRING DK-3-trap
9985: PPUSH
9986: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9990: LD_EXP 24
9994: PPUSH
9995: LD_STRING DG-4-trap
9997: PPUSH
9998: CALL_OW 88
// end ; end ;
10002: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 255
10010: PUSH
10011: LD_INT 2
10013: EQUAL
10014: PUSH
10015: LD_EXP 14
10019: AND
10020: IFFALSE 10179
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
// begin if not IsOk ( Kaia ) then
10029: LD_EXP 28
10033: PPUSH
10034: CALL_OW 302
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10179
// if tick < 5 5$00 then
10043: LD_OWVAR 1
10047: PUSH
10048: LD_INT 10500
10050: LESS
10051: IFFALSE 10060
// SetAchievement ( ACH_DELTA ) ;
10053: LD_STRING ACH_DELTA
10055: PPUSH
10056: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10060: LD_EXP 28
10064: PPUSH
10065: LD_STRING DK-1-capture
10067: PPUSH
10068: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10072: LD_EXP 23
10076: PPUSH
10077: LD_STRING DH-1-capture
10079: PPUSH
10080: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if not tmp then
10118: LD_VAR 0 2
10122: NOT
10123: IFFALSE 10127
// exit ;
10125: GO 10179
// for i in tmp do
10127: LD_ADDR_VAR 0 1
10131: PUSH
10132: LD_VAR 0 2
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10177
// begin if IsInUnit ( i ) then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 310
10149: IFFALSE 10160
// ComExitBuilding ( i ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 38
10167: PPUSH
10168: LD_INT 23
10170: PPUSH
10171: CALL_OW 174
// end ;
10175: GO 10137
10177: POP
10178: POP
// end ;
10179: PPOPN 2
10181: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 255
10189: PUSH
10190: LD_INT 2
10192: EQUAL
10193: PUSH
10194: LD_EXP 14
10198: AND
10199: IFFALSE 10231
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_STRING DA-1-capture
10215: PPUSH
10216: CALL_OW 88
// DialogueOff ;
10220: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10224: LD_STRING OTame
10226: PPUSH
10227: CALL_OW 337
// end ;
10231: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10232: LD_INT 1
10234: PPUSH
10235: LD_INT 2
10237: PPUSH
10238: CALL_OW 321
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: PUSH
10247: LD_EXP 14
10251: AND
10252: IFFALSE 10403
10254: GO 10256
10256: DISABLE
// begin DialogueOn ;
10257: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10261: LD_EXP 27
10265: PPUSH
10266: LD_STRING DA-1-ape
10268: PPUSH
10269: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10273: LD_EXP 23
10277: PPUSH
10278: LD_STRING DH-1-ape
10280: PPUSH
10281: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10285: LD_EXP 27
10289: PPUSH
10290: LD_STRING DA-2-ape
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10297: LD_EXP 27
10301: PPUSH
10302: LD_STRING DA-3-ape
10304: PPUSH
10305: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING DH-3-ape
10316: PPUSH
10317: CALL_OW 88
// DialogueOff ;
10321: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10325: LD_INT 22
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PUSH
10354: LD_INT 0
10356: EQUAL
10357: IFFALSE 10369
// SpawnApeman ( forest , 2 ) ;
10359: LD_INT 1
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10376: LD_INT 25
10378: PUSH
10379: LD_INT 12
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: LD_INT 0
10393: EQUAL
10394: IFFALSE 10369
// YouLost ( Ape ) ;
10396: LD_STRING Ape
10398: PPUSH
10399: CALL_OW 104
// end ;
10403: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10404: LD_EXP 18
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_OWVAR 67
10431: ARRAY
10432: GREATEREQUAL
10433: IFFALSE 10477
10435: GO 10437
10437: DISABLE
// begin DialogueOn ;
10438: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10442: LD_EXP 27
10446: PPUSH
10447: LD_STRING DA-1-failure
10449: PPUSH
10450: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10454: LD_EXP 27
10458: PPUSH
10459: LD_STRING DA-2-failure
10461: PPUSH
10462: CALL_OW 88
// YouLost ( Failure ) ;
10466: LD_STRING Failure
10468: PPUSH
10469: CALL_OW 104
// DialogueOff ;
10473: CALL_OW 7
// end ;
10477: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10478: LD_EXP 28
10482: PPUSH
10483: CALL_OW 256
10487: PUSH
10488: LD_INT 3
10490: LESS
10491: IFFALSE 10624
10493: GO 10495
10495: DISABLE
// begin DialogueOn ;
10496: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10500: LD_EXP 28
10504: PPUSH
10505: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10509: LD_EXP 28
10513: PPUSH
10514: LD_STRING DK-Kaiaout-1
10516: PPUSH
10517: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10521: LD_EXP 23
10525: PPUSH
10526: LD_STRING DH-Kaiaout-2
10528: PPUSH
10529: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10533: LD_EXP 24
10537: PPUSH
10538: LD_STRING DG-Kaiaout-3
10540: PPUSH
10541: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10545: LD_EXP 23
10549: PPUSH
10550: LD_STRING DH-Kaiaout-4
10552: PPUSH
10553: CALL_OW 88
// if Givi then
10557: LD_EXP 24
10561: IFFALSE 10611
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10563: LD_EXP 24
10567: PPUSH
10568: LD_STRING DG-Kaiaout-5
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10575: LD_EXP 23
10579: PPUSH
10580: LD_STRING DH-Kaiaout-6
10582: PPUSH
10583: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10587: LD_EXP 24
10591: PPUSH
10592: LD_STRING DG-Kaiaout-7
10594: PPUSH
10595: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10599: LD_EXP 23
10603: PPUSH
10604: LD_STRING DH-Kaiaout-8
10606: PPUSH
10607: CALL_OW 88
// end ; DialogueOff ;
10611: CALL_OW 7
// KillUnit ( Kaia ) ;
10615: LD_EXP 28
10619: PPUSH
10620: CALL_OW 66
// end ;
10624: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10625: LD_INT 22
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 23
10637: PUSH
10638: LD_INT 0
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_EXP 27
10658: PPUSH
10659: CALL_OW 302
10663: AND
10664: PUSH
10665: LD_EXP 27
10669: PPUSH
10670: CALL_OW 255
10674: PUSH
10675: LD_INT 2
10677: EQUAL
10678: AND
10679: IFFALSE 11624
10681: GO 10683
10683: DISABLE
10684: LD_INT 0
10686: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10687: LD_INT 22
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 34
10712: PUSH
10713: LD_INT 4
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: IFFALSE 10828
// begin Query ( QEnemyInSight ) ;
10735: LD_STRING QEnemyInSight
10737: PPUSH
10738: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10742: LD_INT 35
10744: PPUSH
10745: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10749: LD_INT 22
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 34
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: NOT
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 0
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: AND
10826: IFFALSE 10742
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 23
10845: PUSH
10846: LD_INT 0
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// InGameOn ;
10862: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_EXP 27
10884: PPUSH
10885: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10889: LD_EXP 27
10893: PPUSH
10894: LD_VAR 0 1
10898: PPUSH
10899: CALL_OW 119
// wait ( 0 0$1 ) ;
10903: LD_INT 35
10905: PPUSH
10906: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10910: LD_EXP 27
10914: PPUSH
10915: LD_STRING DA-1-tame-a
10917: PPUSH
10918: CALL_OW 88
// if IsOk ( Mike ) then
10922: LD_EXP 25
10926: PPUSH
10927: CALL_OW 302
10931: IFFALSE 10969
// begin Say ( Mike , DM-1-tame-a ) ;
10933: LD_EXP 25
10937: PPUSH
10938: LD_STRING DM-1-tame-a
10940: PPUSH
10941: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10945: LD_EXP 29
10949: PPUSH
10950: LD_STRING DS-1-tame-a
10952: PPUSH
10953: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10957: LD_EXP 25
10961: PPUSH
10962: LD_STRING DM-2-tame-a
10964: PPUSH
10965: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10969: LD_INT 105
10971: PPUSH
10972: CALL_OW 67
// PrepareFarmer ;
10976: CALL 12303 0 0
// CenterOnUnits ( Farmer ) ;
10980: LD_EXP 31
10984: PPUSH
10985: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10989: LD_EXP 31
10993: PPUSH
10994: LD_INT 105
10996: PPUSH
10997: LD_INT 59
10999: PPUSH
11000: CALL_OW 111
// AddComHold ( Farmer ) ;
11004: LD_EXP 31
11008: PPUSH
11009: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11013: LD_EXP 31
11017: PPUSH
11018: LD_STRING DF-1-end
11020: PPUSH
11021: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11025: LD_EXP 27
11029: PPUSH
11030: LD_STRING DA-1-end
11032: PPUSH
11033: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11037: LD_EXP 31
11041: PPUSH
11042: LD_STRING DF-2-end
11044: PPUSH
11045: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11049: LD_EXP 27
11053: PPUSH
11054: LD_STRING DA-2-end
11056: PPUSH
11057: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11061: LD_EXP 31
11065: PPUSH
11066: LD_STRING DF-3-end
11068: PPUSH
11069: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11073: LD_EXP 23
11077: PPUSH
11078: LD_STRING DH-3-end
11080: PPUSH
11081: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11085: LD_EXP 31
11089: PPUSH
11090: LD_STRING DF-4-end
11092: PPUSH
11093: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11097: LD_OWVAR 1
11101: PUSH
11102: LD_INT 52500
11104: PUSH
11105: LD_INT 47250
11107: PUSH
11108: LD_INT 42000
11110: PUSH
11111: LD_INT 31500
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: PUSH
11120: LD_OWVAR 67
11124: ARRAY
11125: LESSEQUAL
11126: IFFALSE 11140
// AddMedal ( med1 , 1 ) else
11128: LD_STRING med1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 101
11138: GO 11151
// AddMedal ( med1 , - 1 ) ;
11140: LD_STRING med1
11142: PPUSH
11143: LD_INT 1
11145: NEG
11146: PPUSH
11147: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11151: LD_INT 22
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PUSH
11180: LD_INT 0
11182: EQUAL
11183: PUSH
11184: LD_EXP 12
11188: NOT
11189: AND
11190: IFFALSE 11204
// AddMedal ( med2 , 1 ) else
11192: LD_STRING med2
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 101
11202: GO 11215
// AddMedal ( med2 , - 1 ) ;
11204: LD_STRING med2
11206: PPUSH
11207: LD_INT 1
11209: NEG
11210: PPUSH
11211: CALL_OW 101
// if trickyMove then
11215: LD_EXP 15
11219: IFFALSE 11233
// AddMedal ( med3 , 1 ) else
11221: LD_STRING med3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 101
11231: GO 11263
// if spottedBeforeRadio then
11233: LD_EXP 6
11237: IFFALSE 11252
// AddMedal ( med3 , - 2 ) else
11239: LD_STRING med3
11241: PPUSH
11242: LD_INT 2
11244: NEG
11245: PPUSH
11246: CALL_OW 101
11250: GO 11263
// AddMedal ( med3 , - 1 ) ;
11252: LD_STRING med3
11254: PPUSH
11255: LD_INT 1
11257: NEG
11258: PPUSH
11259: CALL_OW 101
// GiveMedals ( MAIN ) ;
11263: LD_STRING MAIN
11265: PPUSH
11266: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11270: LD_VAR 0 1
11274: PPUSH
11275: LD_STRING 02_ape
11277: PPUSH
11278: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11282: LD_ADDR_VAR 0 1
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 21
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11336: LD_EXP 23
11340: PPUSH
11341: LD_STRING 02_Heike
11343: PPUSH
11344: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_STRING 02_Aviradze
11355: PPUSH
11356: CALL_OW 38
// if Givi then
11360: LD_EXP 24
11364: IFFALSE 11378
// SaveCharacters ( Givi , 02_Givi ) ;
11366: LD_EXP 24
11370: PPUSH
11371: LD_STRING 02_Givi
11373: PPUSH
11374: CALL_OW 38
// if Mike then
11378: LD_EXP 25
11382: IFFALSE 11396
// SaveCharacters ( Mike , 02_Mike ) ;
11384: LD_EXP 25
11388: PPUSH
11389: LD_STRING 02_Mike
11391: PPUSH
11392: CALL_OW 38
// if Kamil then
11396: LD_EXP 26
11400: IFFALSE 11414
// SaveCharacters ( Kamil , 02_Kamil ) ;
11402: LD_EXP 26
11406: PPUSH
11407: LD_STRING 02_Kamil
11409: PPUSH
11410: CALL_OW 38
// if Kaia then
11414: LD_EXP 28
11418: IFFALSE 11432
// SaveCharacters ( Kaia , 02_Kaia ) ;
11420: LD_EXP 28
11424: PPUSH
11425: LD_STRING 02_Kaia
11427: PPUSH
11428: CALL_OW 38
// if Sophia then
11432: LD_EXP 29
11436: IFFALSE 11450
// SaveCharacters ( Sophia , 02_Sophia ) ;
11438: LD_EXP 29
11442: PPUSH
11443: LD_STRING 02_Sophia
11445: PPUSH
11446: CALL_OW 38
// if Markov then
11450: LD_EXP 30
11454: IFFALSE 11468
// SaveCharacters ( Markov , 02_Markov ) ;
11456: LD_EXP 30
11460: PPUSH
11461: LD_STRING 02_Markov
11463: PPUSH
11464: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11468: LD_VAR 0 1
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_EXP 27
11482: PUSH
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 25
11492: PUSH
11493: LD_EXP 26
11497: PUSH
11498: LD_EXP 29
11502: PUSH
11503: LD_EXP 28
11507: PUSH
11508: LD_EXP 30
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: DIFF
11523: IFFALSE 11588
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11525: LD_VAR 0 1
11529: PUSH
11530: LD_EXP 23
11534: PUSH
11535: LD_EXP 27
11539: PUSH
11540: LD_EXP 24
11544: PUSH
11545: LD_EXP 25
11549: PUSH
11550: LD_EXP 26
11554: PUSH
11555: LD_EXP 29
11559: PUSH
11560: LD_EXP 28
11564: PUSH
11565: LD_EXP 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING 02_others
11583: PPUSH
11584: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11588: LD_STRING enableBioCharacter(BIO_KRAY)
11590: PPUSH
11591: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11595: LD_STRING enableBioCharacter(BIO_AVIR)
11597: PPUSH
11598: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11602: LD_STRING enableBioCharacter(BIO_SOPH)
11604: PPUSH
11605: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11609: LD_STRING enableBioCharacter(BIO_KAMI)
11611: PPUSH
11612: CALL_OW 559
// YouWin ;
11616: CALL_OW 103
// InGameOff ;
11620: CALL_OW 9
// end ;
11624: PPOPN 1
11626: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11627: LD_OWVAR 1
11631: PUSH
11632: LD_EXP 13
11636: GREATER
11637: PUSH
11638: LD_EXP 4
11642: AND
11643: IFFALSE 11683
11645: GO 11647
11647: DISABLE
// begin InGameOn ;
11648: CALL_OW 8
// PrepareFarmer ;
11652: CALL 12303 0 0
// CenterNowOnUnits ( Farmer ) ;
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 87
// wait ( 0 0$2 ) ;
11665: LD_INT 70
11667: PPUSH
11668: CALL_OW 67
// YouLost ( Farmer ) ;
11672: LD_STRING Farmer
11674: PPUSH
11675: CALL_OW 104
// InGameOff ;
11679: CALL_OW 9
// end ; end_of_file
11683: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11684: LD_INT 0
11686: PPUSH
11687: PPUSH
11688: PPUSH
// uc_side := 2 ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_INT 2
11696: ST_TO_ADDR
// uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11705: LD_ADDR_EXP 23
11709: PUSH
11710: LD_STRING Heike
11712: PPUSH
11713: LD_EXP 1
11717: NOT
11718: PPUSH
11719: LD_EXP 2
11723: PPUSH
11724: CALL 32882 0 3
11728: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11729: LD_EXP 23
11733: PPUSH
11734: LD_INT 83
11736: PPUSH
11737: LD_INT 72
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11747: LD_ADDR_EXP 24
11751: PUSH
11752: LD_STRING Givi
11754: PPUSH
11755: LD_EXP 1
11759: NOT
11760: PPUSH
11761: LD_EXP 2
11765: PPUSH
11766: CALL 32882 0 3
11770: ST_TO_ADDR
// if Givi then
11771: LD_EXP 24
11775: IFFALSE 11795
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11777: LD_EXP 24
11781: PPUSH
11782: LD_INT 87
11784: PPUSH
11785: LD_INT 76
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11795: LD_ADDR_EXP 25
11799: PUSH
11800: LD_STRING Mike
11802: PPUSH
11803: LD_EXP 1
11807: NOT
11808: PPUSH
11809: LD_EXP 2
11813: PPUSH
11814: CALL 32882 0 3
11818: ST_TO_ADDR
// if Mike then
11819: LD_EXP 25
11823: IFFALSE 11843
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11825: LD_EXP 25
11829: PPUSH
11830: LD_INT 84
11832: PPUSH
11833: LD_INT 76
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11843: LD_ADDR_EXP 26
11847: PUSH
11848: LD_STRING Kamil
11850: PPUSH
11851: LD_EXP 1
11855: NOT
11856: PPUSH
11857: LD_EXP 2
11861: PPUSH
11862: CALL 32882 0 3
11866: ST_TO_ADDR
// if Kamil then
11867: LD_EXP 26
11871: IFFALSE 11891
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11873: LD_EXP 26
11877: PPUSH
11878: LD_INT 85
11880: PPUSH
11881: LD_INT 78
11883: PPUSH
11884: LD_INT 0
11886: PPUSH
11887: CALL_OW 48
// uc_side := 5 ;
11891: LD_ADDR_OWVAR 20
11895: PUSH
11896: LD_INT 5
11898: ST_TO_ADDR
// uc_nation := 2 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 2
11906: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11907: LD_ADDR_EXP 27
11911: PUSH
11912: LD_STRING Aviradze
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: LD_STRING 
11920: PPUSH
11921: CALL 32882 0 3
11925: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 106
11933: PPUSH
11934: LD_INT 38
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11944: LD_EXP 27
11948: PPUSH
11949: LD_INT 103
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11959: LD_ADDR_EXP 28
11963: PUSH
11964: LD_STRING Kaia
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: LD_STRING 
11972: PPUSH
11973: CALL 32882 0 3
11977: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11978: LD_EXP 28
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: LD_INT 34
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11996: LD_EXP 28
12000: PPUSH
12001: LD_INT 100
12003: PPUSH
12004: LD_INT 39
12006: PPUSH
12007: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12011: LD_ADDR_EXP 29
12015: PUSH
12016: LD_STRING Sophia
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: LD_STRING 
12024: PPUSH
12025: CALL 32882 0 3
12029: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12030: LD_EXP 29
12034: PPUSH
12035: LD_INT 109
12037: PPUSH
12038: LD_INT 50
12040: PPUSH
12041: LD_INT 0
12043: PPUSH
12044: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12048: LD_EXP 29
12052: PPUSH
12053: LD_INT 100
12055: PPUSH
12056: LD_INT 39
12058: PPUSH
12059: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12063: LD_ADDR_EXP 30
12067: PUSH
12068: LD_STRING Markov
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: LD_STRING 
12076: PPUSH
12077: CALL 32882 0 3
12081: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12082: LD_INT 5
12084: PPUSH
12085: LD_INT 3
12087: PPUSH
12088: LD_INT 21
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: LD_INT 42
12099: PPUSH
12100: LD_INT 90
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 60
12108: PUSH
12109: LD_INT 50
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_OWVAR 67
12122: ARRAY
12123: PPUSH
12124: CALL 241 0 7
// veh := CreateVehicle ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: CALL_OW 45
12137: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 109
12157: PPUSH
12158: LD_INT 38
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12168: LD_EXP 30
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12182: LD_EXP 28
12186: PPUSH
12187: LD_EXP 27
12191: PPUSH
12192: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12196: LD_EXP 27
12200: PPUSH
12201: LD_EXP 28
12205: PPUSH
12206: CALL_OW 119
// if not Givi or not Mike then
12210: LD_EXP 24
12214: NOT
12215: PUSH
12216: LD_EXP 25
12220: NOT
12221: OR
12222: IFFALSE 12298
// begin uc_nation := 2 ;
12224: LD_ADDR_OWVAR 21
12228: PUSH
12229: LD_INT 2
12231: ST_TO_ADDR
// uc_side := 5 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 5
12239: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 380
// un := CreateHuman ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: CALL_OW 44
12262: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 112
12270: PPUSH
12271: LD_INT 40
12273: PPUSH
12274: LD_INT 3
12276: PPUSH
12277: LD_INT 0
12279: PPUSH
12280: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_EXP 27
12293: PPUSH
12294: CALL_OW 119
// end ; end ;
12298: LD_VAR 0 1
12302: RET
// export function PrepareFarmer ; var i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// uc_side := 5 ;
12307: LD_ADDR_OWVAR 20
12311: PUSH
12312: LD_INT 5
12314: ST_TO_ADDR
// uc_nation := 2 ;
12315: LD_ADDR_OWVAR 21
12319: PUSH
12320: LD_INT 2
12322: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12323: LD_ADDR_EXP 31
12327: PUSH
12328: LD_STRING Farmer
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: LD_STRING 
12336: PPUSH
12337: CALL 32882 0 3
12341: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12342: LD_EXP 31
12346: PPUSH
12347: LD_INT 106
12349: PPUSH
12350: LD_INT 62
12352: PPUSH
12353: LD_INT 0
12355: PPUSH
12356: CALL_OW 48
// for i := 1 to 5 do
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 5
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12412
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12389: CALL_OW 44
12393: PPUSH
12394: LD_INT 105
12396: PPUSH
12397: LD_INT 64
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: LD_INT 0
12405: PPUSH
12406: CALL_OW 50
// end ;
12410: GO 12373
12412: POP
12413: POP
// end ; end_of_file
12414: LD_VAR 0 1
12418: RET
// every 2 2$20 + 0 0$10 do
12419: GO 12421
12421: DISABLE
// begin enable ;
12422: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12423: LD_INT 1
12425: PPUSH
12426: LD_INT 5
12428: PPUSH
12429: CALL_OW 12
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 55
// if tick > 6 6$00 then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 12600
12451: GREATER
12452: IFFALSE 12455
// disable ;
12454: DISABLE
// end ; end_of_file
12455: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12456: LD_VAR 0 1
12460: PUSH
12461: LD_EXP 23
12465: EQUAL
12466: IFFALSE 12475
// YouLost ( Heike ) ;
12468: LD_STRING Heike
12470: PPUSH
12471: CALL_OW 104
// if un = Aviradze then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 27
12484: EQUAL
12485: IFFALSE 12494
// YouLost ( Aviradze ) ;
12487: LD_STRING Aviradze
12489: PPUSH
12490: CALL_OW 104
// if un = usLab then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 3
12501: EQUAL
12502: IFFALSE 12511
// YouLost ( Lab ) ;
12504: LD_STRING Lab
12506: PPUSH
12507: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 22
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: PUSH
12556: LD_EXP 23
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: DIFF
12570: IN
12571: PUSH
12572: LD_EXP 4
12576: AND
12577: IFFALSE 12593
// lostCounter := lostCounter + 1 ;
12579: LD_ADDR_EXP 18
12583: PUSH
12584: LD_EXP 18
12588: PUSH
12589: LD_INT 1
12591: PLUS
12592: ST_TO_ADDR
// end ;
12593: PPOPN 1
12595: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12596: LD_INT 23
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_INT 0
12660: EQUAL
12661: AND
12662: IFFALSE 12674
12664: GO 12666
12666: DISABLE
// YouLost ( Eng ) ;
12667: LD_STRING Eng
12669: PPUSH
12670: CALL_OW 104
12674: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12675: LD_VAR 0 1
12679: PUSH
12680: LD_EXP 22
12684: IN
12685: PUSH
12686: LD_VAR 0 2
12690: PUSH
12691: LD_INT 2
12693: EQUAL
12694: AND
12695: IFFALSE 12727
// begin usSci := usSci diff un ;
12697: LD_ADDR_EXP 22
12701: PUSH
12702: LD_EXP 22
12706: PUSH
12707: LD_VAR 0 1
12711: DIFF
12712: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12713: LD_ADDR_EXP 9
12717: PUSH
12718: LD_EXP 9
12722: PUSH
12723: LD_INT 1
12725: PLUS
12726: ST_TO_ADDR
// end ; end ;
12727: PPOPN 3
12729: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 5
12746: EQUAL
12747: AND
12748: IFFALSE 12757
// YouLost ( FriendlyFire ) ;
12750: LD_STRING FriendlyFire
12752: PPUSH
12753: CALL_OW 104
// end ; end_of_file
12757: PPOPN 2
12759: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
12760: LD_INT 0
12762: PPUSH
// ar_miner := 81 ;
12763: LD_ADDR_EXP 39
12767: PUSH
12768: LD_INT 81
12770: ST_TO_ADDR
// ar_crane := 88 ;
12771: LD_ADDR_EXP 38
12775: PUSH
12776: LD_INT 88
12778: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12779: LD_ADDR_EXP 33
12783: PUSH
12784: LD_INT 89
12786: ST_TO_ADDR
// us_hack := 99 ;
12787: LD_ADDR_EXP 34
12791: PUSH
12792: LD_INT 99
12794: ST_TO_ADDR
// us_artillery := 97 ;
12795: LD_ADDR_EXP 35
12799: PUSH
12800: LD_INT 97
12802: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12803: LD_ADDR_EXP 36
12807: PUSH
12808: LD_INT 91
12810: ST_TO_ADDR
// ar_mortar := 92 ;
12811: LD_ADDR_EXP 37
12815: PUSH
12816: LD_INT 92
12818: ST_TO_ADDR
// ru_flamethrower := 93 ;
12819: LD_ADDR_EXP 40
12823: PUSH
12824: LD_INT 93
12826: ST_TO_ADDR
// ru_radar := 98 ;
12827: LD_ADDR_EXP 32
12831: PUSH
12832: LD_INT 98
12834: ST_TO_ADDR
// tech_Artillery := 80 ;
12835: LD_ADDR_EXP 41
12839: PUSH
12840: LD_INT 80
12842: ST_TO_ADDR
// tech_RadMat := 81 ;
12843: LD_ADDR_EXP 42
12847: PUSH
12848: LD_INT 81
12850: ST_TO_ADDR
// tech_BasicTools := 82 ;
12851: LD_ADDR_EXP 43
12855: PUSH
12856: LD_INT 82
12858: ST_TO_ADDR
// tech_Cargo := 83 ;
12859: LD_ADDR_EXP 44
12863: PUSH
12864: LD_INT 83
12866: ST_TO_ADDR
// tech_Track := 84 ;
12867: LD_ADDR_EXP 45
12871: PUSH
12872: LD_INT 84
12874: ST_TO_ADDR
// tech_Crane := 85 ;
12875: LD_ADDR_EXP 46
12879: PUSH
12880: LD_INT 85
12882: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12883: LD_ADDR_EXP 47
12887: PUSH
12888: LD_INT 86
12890: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12891: LD_ADDR_EXP 48
12895: PUSH
12896: LD_INT 87
12898: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12899: LD_ADDR_EXP 49
12903: PUSH
12904: LD_INT 88
12906: ST_TO_ADDR
// end ;
12907: LD_VAR 0 1
12911: RET
// every 1 do
12912: GO 12914
12914: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12915: CALL 12760 0 0
12919: END
// every 0 0$1 do
12920: GO 12922
12922: DISABLE
// begin enable ;
12923: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12924: LD_STRING updateTimer(
12926: PUSH
12927: LD_OWVAR 1
12931: STR
12932: PUSH
12933: LD_STRING );
12935: STR
12936: PPUSH
12937: CALL_OW 559
// end ;
12941: END
// export function SOS_MapStart ( ) ; begin
12942: LD_INT 0
12944: PPUSH
// if streamModeActive then
12945: LD_EXP 50
12949: IFFALSE 12958
// DefineStreamItems ( true ) ;
12951: LD_INT 1
12953: PPUSH
12954: CALL 14612 0 1
// UpdateFactoryWaypoints ( ) ;
12958: CALL 27473 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12962: CALL 27730 0 0
// end ;
12966: LD_VAR 0 1
12970: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12971: LD_INT 0
12973: PPUSH
// if p2 = 100 then
12974: LD_VAR 0 2
12978: PUSH
12979: LD_INT 100
12981: EQUAL
12982: IFFALSE 13985
// begin if not StreamModeActive then
12984: LD_EXP 50
12988: NOT
12989: IFFALSE 12999
// StreamModeActive := true ;
12991: LD_ADDR_EXP 50
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 0 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 0
13006: EQUAL
13007: IFFALSE 13013
// InitStreamMode ;
13009: CALL 14148 0 0
// if p3 = 1 then
13013: LD_VAR 0 3
13017: PUSH
13018: LD_INT 1
13020: EQUAL
13021: IFFALSE 13031
// sRocket := true ;
13023: LD_ADDR_EXP 55
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// if p3 = 2 then
13031: LD_VAR 0 3
13035: PUSH
13036: LD_INT 2
13038: EQUAL
13039: IFFALSE 13049
// sSpeed := true ;
13041: LD_ADDR_EXP 54
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// if p3 = 3 then
13049: LD_VAR 0 3
13053: PUSH
13054: LD_INT 3
13056: EQUAL
13057: IFFALSE 13067
// sEngine := true ;
13059: LD_ADDR_EXP 56
13063: PUSH
13064: LD_INT 1
13066: ST_TO_ADDR
// if p3 = 4 then
13067: LD_VAR 0 3
13071: PUSH
13072: LD_INT 4
13074: EQUAL
13075: IFFALSE 13085
// sSpec := true ;
13077: LD_ADDR_EXP 53
13081: PUSH
13082: LD_INT 1
13084: ST_TO_ADDR
// if p3 = 5 then
13085: LD_VAR 0 3
13089: PUSH
13090: LD_INT 5
13092: EQUAL
13093: IFFALSE 13103
// sLevel := true ;
13095: LD_ADDR_EXP 57
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// if p3 = 6 then
13103: LD_VAR 0 3
13107: PUSH
13108: LD_INT 6
13110: EQUAL
13111: IFFALSE 13121
// sArmoury := true ;
13113: LD_ADDR_EXP 58
13117: PUSH
13118: LD_INT 1
13120: ST_TO_ADDR
// if p3 = 7 then
13121: LD_VAR 0 3
13125: PUSH
13126: LD_INT 7
13128: EQUAL
13129: IFFALSE 13139
// sRadar := true ;
13131: LD_ADDR_EXP 59
13135: PUSH
13136: LD_INT 1
13138: ST_TO_ADDR
// if p3 = 8 then
13139: LD_VAR 0 3
13143: PUSH
13144: LD_INT 8
13146: EQUAL
13147: IFFALSE 13157
// sBunker := true ;
13149: LD_ADDR_EXP 60
13153: PUSH
13154: LD_INT 1
13156: ST_TO_ADDR
// if p3 = 9 then
13157: LD_VAR 0 3
13161: PUSH
13162: LD_INT 9
13164: EQUAL
13165: IFFALSE 13175
// sHack := true ;
13167: LD_ADDR_EXP 61
13171: PUSH
13172: LD_INT 1
13174: ST_TO_ADDR
// if p3 = 10 then
13175: LD_VAR 0 3
13179: PUSH
13180: LD_INT 10
13182: EQUAL
13183: IFFALSE 13193
// sFire := true ;
13185: LD_ADDR_EXP 62
13189: PUSH
13190: LD_INT 1
13192: ST_TO_ADDR
// if p3 = 11 then
13193: LD_VAR 0 3
13197: PUSH
13198: LD_INT 11
13200: EQUAL
13201: IFFALSE 13211
// sRefresh := true ;
13203: LD_ADDR_EXP 63
13207: PUSH
13208: LD_INT 1
13210: ST_TO_ADDR
// if p3 = 12 then
13211: LD_VAR 0 3
13215: PUSH
13216: LD_INT 12
13218: EQUAL
13219: IFFALSE 13229
// sExp := true ;
13221: LD_ADDR_EXP 64
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// if p3 = 13 then
13229: LD_VAR 0 3
13233: PUSH
13234: LD_INT 13
13236: EQUAL
13237: IFFALSE 13247
// sDepot := true ;
13239: LD_ADDR_EXP 65
13243: PUSH
13244: LD_INT 1
13246: ST_TO_ADDR
// if p3 = 14 then
13247: LD_VAR 0 3
13251: PUSH
13252: LD_INT 14
13254: EQUAL
13255: IFFALSE 13265
// sFlag := true ;
13257: LD_ADDR_EXP 66
13261: PUSH
13262: LD_INT 1
13264: ST_TO_ADDR
// if p3 = 15 then
13265: LD_VAR 0 3
13269: PUSH
13270: LD_INT 15
13272: EQUAL
13273: IFFALSE 13283
// sKamikadze := true ;
13275: LD_ADDR_EXP 74
13279: PUSH
13280: LD_INT 1
13282: ST_TO_ADDR
// if p3 = 16 then
13283: LD_VAR 0 3
13287: PUSH
13288: LD_INT 16
13290: EQUAL
13291: IFFALSE 13301
// sTroll := true ;
13293: LD_ADDR_EXP 75
13297: PUSH
13298: LD_INT 1
13300: ST_TO_ADDR
// if p3 = 17 then
13301: LD_VAR 0 3
13305: PUSH
13306: LD_INT 17
13308: EQUAL
13309: IFFALSE 13319
// sSlow := true ;
13311: LD_ADDR_EXP 76
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// if p3 = 18 then
13319: LD_VAR 0 3
13323: PUSH
13324: LD_INT 18
13326: EQUAL
13327: IFFALSE 13337
// sLack := true ;
13329: LD_ADDR_EXP 77
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// if p3 = 19 then
13337: LD_VAR 0 3
13341: PUSH
13342: LD_INT 19
13344: EQUAL
13345: IFFALSE 13355
// sTank := true ;
13347: LD_ADDR_EXP 79
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// if p3 = 20 then
13355: LD_VAR 0 3
13359: PUSH
13360: LD_INT 20
13362: EQUAL
13363: IFFALSE 13373
// sRemote := true ;
13365: LD_ADDR_EXP 80
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// if p3 = 21 then
13373: LD_VAR 0 3
13377: PUSH
13378: LD_INT 21
13380: EQUAL
13381: IFFALSE 13391
// sPowell := true ;
13383: LD_ADDR_EXP 81
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// if p3 = 22 then
13391: LD_VAR 0 3
13395: PUSH
13396: LD_INT 22
13398: EQUAL
13399: IFFALSE 13409
// sTeleport := true ;
13401: LD_ADDR_EXP 84
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// if p3 = 23 then
13409: LD_VAR 0 3
13413: PUSH
13414: LD_INT 23
13416: EQUAL
13417: IFFALSE 13427
// sOilTower := true ;
13419: LD_ADDR_EXP 86
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// if p3 = 24 then
13427: LD_VAR 0 3
13431: PUSH
13432: LD_INT 24
13434: EQUAL
13435: IFFALSE 13445
// sShovel := true ;
13437: LD_ADDR_EXP 87
13441: PUSH
13442: LD_INT 1
13444: ST_TO_ADDR
// if p3 = 25 then
13445: LD_VAR 0 3
13449: PUSH
13450: LD_INT 25
13452: EQUAL
13453: IFFALSE 13463
// sSheik := true ;
13455: LD_ADDR_EXP 88
13459: PUSH
13460: LD_INT 1
13462: ST_TO_ADDR
// if p3 = 26 then
13463: LD_VAR 0 3
13467: PUSH
13468: LD_INT 26
13470: EQUAL
13471: IFFALSE 13481
// sEarthquake := true ;
13473: LD_ADDR_EXP 90
13477: PUSH
13478: LD_INT 1
13480: ST_TO_ADDR
// if p3 = 27 then
13481: LD_VAR 0 3
13485: PUSH
13486: LD_INT 27
13488: EQUAL
13489: IFFALSE 13499
// sAI := true ;
13491: LD_ADDR_EXP 91
13495: PUSH
13496: LD_INT 1
13498: ST_TO_ADDR
// if p3 = 28 then
13499: LD_VAR 0 3
13503: PUSH
13504: LD_INT 28
13506: EQUAL
13507: IFFALSE 13517
// sCargo := true ;
13509: LD_ADDR_EXP 94
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// if p3 = 29 then
13517: LD_VAR 0 3
13521: PUSH
13522: LD_INT 29
13524: EQUAL
13525: IFFALSE 13535
// sDLaser := true ;
13527: LD_ADDR_EXP 95
13531: PUSH
13532: LD_INT 1
13534: ST_TO_ADDR
// if p3 = 30 then
13535: LD_VAR 0 3
13539: PUSH
13540: LD_INT 30
13542: EQUAL
13543: IFFALSE 13553
// sExchange := true ;
13545: LD_ADDR_EXP 96
13549: PUSH
13550: LD_INT 1
13552: ST_TO_ADDR
// if p3 = 31 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 31
13560: EQUAL
13561: IFFALSE 13571
// sFac := true ;
13563: LD_ADDR_EXP 97
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// if p3 = 32 then
13571: LD_VAR 0 3
13575: PUSH
13576: LD_INT 32
13578: EQUAL
13579: IFFALSE 13589
// sPower := true ;
13581: LD_ADDR_EXP 98
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// if p3 = 33 then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 33
13596: EQUAL
13597: IFFALSE 13607
// sRandom := true ;
13599: LD_ADDR_EXP 99
13603: PUSH
13604: LD_INT 1
13606: ST_TO_ADDR
// if p3 = 34 then
13607: LD_VAR 0 3
13611: PUSH
13612: LD_INT 34
13614: EQUAL
13615: IFFALSE 13625
// sShield := true ;
13617: LD_ADDR_EXP 100
13621: PUSH
13622: LD_INT 1
13624: ST_TO_ADDR
// if p3 = 35 then
13625: LD_VAR 0 3
13629: PUSH
13630: LD_INT 35
13632: EQUAL
13633: IFFALSE 13643
// sTime := true ;
13635: LD_ADDR_EXP 101
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// if p3 = 36 then
13643: LD_VAR 0 3
13647: PUSH
13648: LD_INT 36
13650: EQUAL
13651: IFFALSE 13661
// sTools := true ;
13653: LD_ADDR_EXP 102
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// if p3 = 101 then
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 101
13668: EQUAL
13669: IFFALSE 13679
// sSold := true ;
13671: LD_ADDR_EXP 67
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// if p3 = 102 then
13679: LD_VAR 0 3
13683: PUSH
13684: LD_INT 102
13686: EQUAL
13687: IFFALSE 13697
// sDiff := true ;
13689: LD_ADDR_EXP 68
13693: PUSH
13694: LD_INT 1
13696: ST_TO_ADDR
// if p3 = 103 then
13697: LD_VAR 0 3
13701: PUSH
13702: LD_INT 103
13704: EQUAL
13705: IFFALSE 13715
// sFog := true ;
13707: LD_ADDR_EXP 71
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// if p3 = 104 then
13715: LD_VAR 0 3
13719: PUSH
13720: LD_INT 104
13722: EQUAL
13723: IFFALSE 13733
// sReset := true ;
13725: LD_ADDR_EXP 72
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// if p3 = 105 then
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 105
13740: EQUAL
13741: IFFALSE 13751
// sSun := true ;
13743: LD_ADDR_EXP 73
13747: PUSH
13748: LD_INT 1
13750: ST_TO_ADDR
// if p3 = 106 then
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 106
13758: EQUAL
13759: IFFALSE 13769
// sTiger := true ;
13761: LD_ADDR_EXP 69
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// if p3 = 107 then
13769: LD_VAR 0 3
13773: PUSH
13774: LD_INT 107
13776: EQUAL
13777: IFFALSE 13787
// sBomb := true ;
13779: LD_ADDR_EXP 70
13783: PUSH
13784: LD_INT 1
13786: ST_TO_ADDR
// if p3 = 108 then
13787: LD_VAR 0 3
13791: PUSH
13792: LD_INT 108
13794: EQUAL
13795: IFFALSE 13805
// sWound := true ;
13797: LD_ADDR_EXP 78
13801: PUSH
13802: LD_INT 1
13804: ST_TO_ADDR
// if p3 = 109 then
13805: LD_VAR 0 3
13809: PUSH
13810: LD_INT 109
13812: EQUAL
13813: IFFALSE 13823
// sBetray := true ;
13815: LD_ADDR_EXP 82
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// if p3 = 110 then
13823: LD_VAR 0 3
13827: PUSH
13828: LD_INT 110
13830: EQUAL
13831: IFFALSE 13841
// sContamin := true ;
13833: LD_ADDR_EXP 83
13837: PUSH
13838: LD_INT 1
13840: ST_TO_ADDR
// if p3 = 111 then
13841: LD_VAR 0 3
13845: PUSH
13846: LD_INT 111
13848: EQUAL
13849: IFFALSE 13859
// sOil := true ;
13851: LD_ADDR_EXP 85
13855: PUSH
13856: LD_INT 1
13858: ST_TO_ADDR
// if p3 = 112 then
13859: LD_VAR 0 3
13863: PUSH
13864: LD_INT 112
13866: EQUAL
13867: IFFALSE 13877
// sStu := true ;
13869: LD_ADDR_EXP 89
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// if p3 = 113 then
13877: LD_VAR 0 3
13881: PUSH
13882: LD_INT 113
13884: EQUAL
13885: IFFALSE 13895
// sBazooka := true ;
13887: LD_ADDR_EXP 92
13891: PUSH
13892: LD_INT 1
13894: ST_TO_ADDR
// if p3 = 114 then
13895: LD_VAR 0 3
13899: PUSH
13900: LD_INT 114
13902: EQUAL
13903: IFFALSE 13913
// sMortar := true ;
13905: LD_ADDR_EXP 93
13909: PUSH
13910: LD_INT 1
13912: ST_TO_ADDR
// if p3 = 115 then
13913: LD_VAR 0 3
13917: PUSH
13918: LD_INT 115
13920: EQUAL
13921: IFFALSE 13931
// sRanger := true ;
13923: LD_ADDR_EXP 103
13927: PUSH
13928: LD_INT 1
13930: ST_TO_ADDR
// if p3 = 116 then
13931: LD_VAR 0 3
13935: PUSH
13936: LD_INT 116
13938: EQUAL
13939: IFFALSE 13949
// sComputer := true ;
13941: LD_ADDR_EXP 104
13945: PUSH
13946: LD_INT 1
13948: ST_TO_ADDR
// if p3 = 117 then
13949: LD_VAR 0 3
13953: PUSH
13954: LD_INT 117
13956: EQUAL
13957: IFFALSE 13967
// s30 := true ;
13959: LD_ADDR_EXP 105
13963: PUSH
13964: LD_INT 1
13966: ST_TO_ADDR
// if p3 = 118 then
13967: LD_VAR 0 3
13971: PUSH
13972: LD_INT 118
13974: EQUAL
13975: IFFALSE 13985
// s60 := true ;
13977: LD_ADDR_EXP 106
13981: PUSH
13982: LD_INT 1
13984: ST_TO_ADDR
// end ; if p2 = 101 then
13985: LD_VAR 0 2
13989: PUSH
13990: LD_INT 101
13992: EQUAL
13993: IFFALSE 14121
// begin case p3 of 1 :
13995: LD_VAR 0 3
13999: PUSH
14000: LD_INT 1
14002: DOUBLE
14003: EQUAL
14004: IFTRUE 14008
14006: GO 14015
14008: POP
// hHackUnlimitedResources ; 2 :
14009: CALL 26219 0 0
14013: GO 14121
14015: LD_INT 2
14017: DOUBLE
14018: EQUAL
14019: IFTRUE 14023
14021: GO 14030
14023: POP
// hHackSetLevel10 ; 3 :
14024: CALL 26352 0 0
14028: GO 14121
14030: LD_INT 3
14032: DOUBLE
14033: EQUAL
14034: IFTRUE 14038
14036: GO 14045
14038: POP
// hHackSetLevel10YourUnits ; 4 :
14039: CALL 26437 0 0
14043: GO 14121
14045: LD_INT 4
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14060
14053: POP
// hHackInvincible ; 5 :
14054: CALL 26885 0 0
14058: GO 14121
14060: LD_INT 5
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14075
14068: POP
// hHackInvisible ; 6 :
14069: CALL 26996 0 0
14073: GO 14121
14075: LD_INT 6
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14090
14083: POP
// hHackChangeYourSide ; 7 :
14084: CALL 27053 0 0
14088: GO 14121
14090: LD_INT 7
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14105
14098: POP
// hHackChangeUnitSide ; 8 :
14099: CALL 27095 0 0
14103: GO 14121
14105: LD_INT 8
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14120
14113: POP
// hHackFog ; end ;
14114: CALL 27196 0 0
14118: GO 14121
14120: POP
// end ; end ;
14121: LD_VAR 0 7
14125: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14126: GO 14128
14128: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14129: LD_STRING initStreamRollete();
14131: PPUSH
14132: CALL_OW 559
// InitStreamMode ;
14136: CALL 14148 0 0
// DefineStreamItems ( false ) ;
14140: LD_INT 0
14142: PPUSH
14143: CALL 14612 0 1
// end ;
14147: END
// function InitStreamMode ; begin
14148: LD_INT 0
14150: PPUSH
// streamModeActive := false ;
14151: LD_ADDR_EXP 50
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// normalCounter := 36 ;
14159: LD_ADDR_EXP 51
14163: PUSH
14164: LD_INT 36
14166: ST_TO_ADDR
// hardcoreCounter := 18 ;
14167: LD_ADDR_EXP 52
14171: PUSH
14172: LD_INT 18
14174: ST_TO_ADDR
// sRocket := false ;
14175: LD_ADDR_EXP 55
14179: PUSH
14180: LD_INT 0
14182: ST_TO_ADDR
// sSpeed := false ;
14183: LD_ADDR_EXP 54
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// sEngine := false ;
14191: LD_ADDR_EXP 56
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sSpec := false ;
14199: LD_ADDR_EXP 53
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sLevel := false ;
14207: LD_ADDR_EXP 57
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sArmoury := false ;
14215: LD_ADDR_EXP 58
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sRadar := false ;
14223: LD_ADDR_EXP 59
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sBunker := false ;
14231: LD_ADDR_EXP 60
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sHack := false ;
14239: LD_ADDR_EXP 61
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// sFire := false ;
14247: LD_ADDR_EXP 62
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sRefresh := false ;
14255: LD_ADDR_EXP 63
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sExp := false ;
14263: LD_ADDR_EXP 64
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sDepot := false ;
14271: LD_ADDR_EXP 65
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sFlag := false ;
14279: LD_ADDR_EXP 66
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sKamikadze := false ;
14287: LD_ADDR_EXP 74
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sTroll := false ;
14295: LD_ADDR_EXP 75
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sSlow := false ;
14303: LD_ADDR_EXP 76
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sLack := false ;
14311: LD_ADDR_EXP 77
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sTank := false ;
14319: LD_ADDR_EXP 79
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sRemote := false ;
14327: LD_ADDR_EXP 80
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sPowell := false ;
14335: LD_ADDR_EXP 81
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sTeleport := false ;
14343: LD_ADDR_EXP 84
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sOilTower := false ;
14351: LD_ADDR_EXP 86
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sShovel := false ;
14359: LD_ADDR_EXP 87
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sSheik := false ;
14367: LD_ADDR_EXP 88
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sEarthquake := false ;
14375: LD_ADDR_EXP 90
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sAI := false ;
14383: LD_ADDR_EXP 91
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// sCargo := false ;
14391: LD_ADDR_EXP 94
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// sDLaser := false ;
14399: LD_ADDR_EXP 95
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// sExchange := false ;
14407: LD_ADDR_EXP 96
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// sFac := false ;
14415: LD_ADDR_EXP 97
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// sPower := false ;
14423: LD_ADDR_EXP 98
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// sRandom := false ;
14431: LD_ADDR_EXP 99
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// sShield := false ;
14439: LD_ADDR_EXP 100
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// sTime := false ;
14447: LD_ADDR_EXP 101
14451: PUSH
14452: LD_INT 0
14454: ST_TO_ADDR
// sTools := false ;
14455: LD_ADDR_EXP 102
14459: PUSH
14460: LD_INT 0
14462: ST_TO_ADDR
// sSold := false ;
14463: LD_ADDR_EXP 67
14467: PUSH
14468: LD_INT 0
14470: ST_TO_ADDR
// sDiff := false ;
14471: LD_ADDR_EXP 68
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// sFog := false ;
14479: LD_ADDR_EXP 71
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// sReset := false ;
14487: LD_ADDR_EXP 72
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// sSun := false ;
14495: LD_ADDR_EXP 73
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// sTiger := false ;
14503: LD_ADDR_EXP 69
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// sBomb := false ;
14511: LD_ADDR_EXP 70
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// sWound := false ;
14519: LD_ADDR_EXP 78
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// sBetray := false ;
14527: LD_ADDR_EXP 82
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// sContamin := false ;
14535: LD_ADDR_EXP 83
14539: PUSH
14540: LD_INT 0
14542: ST_TO_ADDR
// sOil := false ;
14543: LD_ADDR_EXP 85
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// sStu := false ;
14551: LD_ADDR_EXP 89
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
// sBazooka := false ;
14559: LD_ADDR_EXP 92
14563: PUSH
14564: LD_INT 0
14566: ST_TO_ADDR
// sMortar := false ;
14567: LD_ADDR_EXP 93
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// sRanger := false ;
14575: LD_ADDR_EXP 103
14579: PUSH
14580: LD_INT 0
14582: ST_TO_ADDR
// sComputer := false ;
14583: LD_ADDR_EXP 104
14587: PUSH
14588: LD_INT 0
14590: ST_TO_ADDR
// s30 := false ;
14591: LD_ADDR_EXP 105
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// s60 := false ;
14599: LD_ADDR_EXP 106
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// end ;
14607: LD_VAR 0 1
14611: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14612: LD_INT 0
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
14620: PPUSH
// result := [ ] ;
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: EMPTY
14627: ST_TO_ADDR
// if campaign_id = 1 then
14628: LD_OWVAR 69
14632: PUSH
14633: LD_INT 1
14635: EQUAL
14636: IFFALSE 17802
// begin case mission_number of 1 :
14638: LD_OWVAR 70
14642: PUSH
14643: LD_INT 1
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14727
14651: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: LD_INT 4
14662: PUSH
14663: LD_INT 11
14665: PUSH
14666: LD_INT 12
14668: PUSH
14669: LD_INT 15
14671: PUSH
14672: LD_INT 16
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 23
14680: PUSH
14681: LD_INT 26
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 101
14697: PUSH
14698: LD_INT 102
14700: PUSH
14701: LD_INT 106
14703: PUSH
14704: LD_INT 116
14706: PUSH
14707: LD_INT 117
14709: PUSH
14710: LD_INT 118
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: ST_TO_ADDR
14725: GO 17800
14727: LD_INT 2
14729: DOUBLE
14730: EQUAL
14731: IFTRUE 14735
14733: GO 14819
14735: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14736: LD_ADDR_VAR 0 2
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 4
14746: PUSH
14747: LD_INT 11
14749: PUSH
14750: LD_INT 12
14752: PUSH
14753: LD_INT 15
14755: PUSH
14756: LD_INT 16
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 23
14764: PUSH
14765: LD_INT 26
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 101
14781: PUSH
14782: LD_INT 102
14784: PUSH
14785: LD_INT 105
14787: PUSH
14788: LD_INT 106
14790: PUSH
14791: LD_INT 108
14793: PUSH
14794: LD_INT 116
14796: PUSH
14797: LD_INT 117
14799: PUSH
14800: LD_INT 118
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: ST_TO_ADDR
14817: GO 17800
14819: LD_INT 3
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14915
14827: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 4
14838: PUSH
14839: LD_INT 5
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 15
14850: PUSH
14851: LD_INT 16
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_INT 26
14859: PUSH
14860: LD_INT 36
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 101
14877: PUSH
14878: LD_INT 102
14880: PUSH
14881: LD_INT 105
14883: PUSH
14884: LD_INT 106
14886: PUSH
14887: LD_INT 108
14889: PUSH
14890: LD_INT 116
14892: PUSH
14893: LD_INT 117
14895: PUSH
14896: LD_INT 118
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: ST_TO_ADDR
14913: GO 17800
14915: LD_INT 4
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 15019
14923: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14924: LD_ADDR_VAR 0 2
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 4
14934: PUSH
14935: LD_INT 5
14937: PUSH
14938: LD_INT 8
14940: PUSH
14941: LD_INT 11
14943: PUSH
14944: LD_INT 12
14946: PUSH
14947: LD_INT 15
14949: PUSH
14950: LD_INT 16
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 23
14958: PUSH
14959: LD_INT 26
14961: PUSH
14962: LD_INT 36
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 101
14981: PUSH
14982: LD_INT 102
14984: PUSH
14985: LD_INT 105
14987: PUSH
14988: LD_INT 106
14990: PUSH
14991: LD_INT 108
14993: PUSH
14994: LD_INT 116
14996: PUSH
14997: LD_INT 117
14999: PUSH
15000: LD_INT 118
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
15017: GO 17800
15019: LD_INT 5
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15139
15027: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: LD_INT 8
15047: PUSH
15048: LD_INT 11
15050: PUSH
15051: LD_INT 12
15053: PUSH
15054: LD_INT 15
15056: PUSH
15057: LD_INT 16
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 25
15068: PUSH
15069: LD_INT 26
15071: PUSH
15072: LD_INT 36
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 101
15093: PUSH
15094: LD_INT 102
15096: PUSH
15097: LD_INT 105
15099: PUSH
15100: LD_INT 106
15102: PUSH
15103: LD_INT 108
15105: PUSH
15106: LD_INT 109
15108: PUSH
15109: LD_INT 112
15111: PUSH
15112: LD_INT 116
15114: PUSH
15115: LD_INT 117
15117: PUSH
15118: LD_INT 118
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: ST_TO_ADDR
15137: GO 17800
15139: LD_INT 6
15141: DOUBLE
15142: EQUAL
15143: IFTRUE 15147
15145: GO 15279
15147: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15148: LD_ADDR_VAR 0 2
15152: PUSH
15153: LD_INT 2
15155: PUSH
15156: LD_INT 4
15158: PUSH
15159: LD_INT 5
15161: PUSH
15162: LD_INT 6
15164: PUSH
15165: LD_INT 8
15167: PUSH
15168: LD_INT 11
15170: PUSH
15171: LD_INT 12
15173: PUSH
15174: LD_INT 15
15176: PUSH
15177: LD_INT 16
15179: PUSH
15180: LD_INT 20
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 22
15188: PUSH
15189: LD_INT 23
15191: PUSH
15192: LD_INT 25
15194: PUSH
15195: LD_INT 26
15197: PUSH
15198: LD_INT 30
15200: PUSH
15201: LD_INT 31
15203: PUSH
15204: LD_INT 32
15206: PUSH
15207: LD_INT 36
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 101
15233: PUSH
15234: LD_INT 102
15236: PUSH
15237: LD_INT 105
15239: PUSH
15240: LD_INT 106
15242: PUSH
15243: LD_INT 108
15245: PUSH
15246: LD_INT 109
15248: PUSH
15249: LD_INT 112
15251: PUSH
15252: LD_INT 116
15254: PUSH
15255: LD_INT 117
15257: PUSH
15258: LD_INT 118
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: ST_TO_ADDR
15277: GO 17800
15279: LD_INT 7
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15287
15285: GO 15399
15287: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 4
15298: PUSH
15299: LD_INT 5
15301: PUSH
15302: LD_INT 7
15304: PUSH
15305: LD_INT 11
15307: PUSH
15308: LD_INT 12
15310: PUSH
15311: LD_INT 15
15313: PUSH
15314: LD_INT 16
15316: PUSH
15317: LD_INT 20
15319: PUSH
15320: LD_INT 21
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 23
15328: PUSH
15329: LD_INT 25
15331: PUSH
15332: LD_INT 26
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 101
15353: PUSH
15354: LD_INT 102
15356: PUSH
15357: LD_INT 103
15359: PUSH
15360: LD_INT 105
15362: PUSH
15363: LD_INT 106
15365: PUSH
15366: LD_INT 108
15368: PUSH
15369: LD_INT 112
15371: PUSH
15372: LD_INT 116
15374: PUSH
15375: LD_INT 117
15377: PUSH
15378: LD_INT 118
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: ST_TO_ADDR
15397: GO 17800
15399: LD_INT 8
15401: DOUBLE
15402: EQUAL
15403: IFTRUE 15407
15405: GO 15547
15407: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15408: LD_ADDR_VAR 0 2
15412: PUSH
15413: LD_INT 2
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: LD_INT 6
15424: PUSH
15425: LD_INT 7
15427: PUSH
15428: LD_INT 8
15430: PUSH
15431: LD_INT 11
15433: PUSH
15434: LD_INT 12
15436: PUSH
15437: LD_INT 15
15439: PUSH
15440: LD_INT 16
15442: PUSH
15443: LD_INT 20
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 22
15451: PUSH
15452: LD_INT 23
15454: PUSH
15455: LD_INT 25
15457: PUSH
15458: LD_INT 26
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: LD_INT 31
15466: PUSH
15467: LD_INT 32
15469: PUSH
15470: LD_INT 36
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 101
15497: PUSH
15498: LD_INT 102
15500: PUSH
15501: LD_INT 103
15503: PUSH
15504: LD_INT 105
15506: PUSH
15507: LD_INT 106
15509: PUSH
15510: LD_INT 108
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 112
15518: PUSH
15519: LD_INT 116
15521: PUSH
15522: LD_INT 117
15524: PUSH
15525: LD_INT 118
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: ST_TO_ADDR
15545: GO 17800
15547: LD_INT 9
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15703
15555: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15556: LD_ADDR_VAR 0 2
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: LD_INT 4
15566: PUSH
15567: LD_INT 5
15569: PUSH
15570: LD_INT 6
15572: PUSH
15573: LD_INT 7
15575: PUSH
15576: LD_INT 8
15578: PUSH
15579: LD_INT 11
15581: PUSH
15582: LD_INT 12
15584: PUSH
15585: LD_INT 15
15587: PUSH
15588: LD_INT 16
15590: PUSH
15591: LD_INT 20
15593: PUSH
15594: LD_INT 21
15596: PUSH
15597: LD_INT 22
15599: PUSH
15600: LD_INT 23
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 26
15608: PUSH
15609: LD_INT 28
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 31
15617: PUSH
15618: LD_INT 32
15620: PUSH
15621: LD_INT 36
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 101
15649: PUSH
15650: LD_INT 102
15652: PUSH
15653: LD_INT 103
15655: PUSH
15656: LD_INT 105
15658: PUSH
15659: LD_INT 106
15661: PUSH
15662: LD_INT 108
15664: PUSH
15665: LD_INT 109
15667: PUSH
15668: LD_INT 112
15670: PUSH
15671: LD_INT 114
15673: PUSH
15674: LD_INT 116
15676: PUSH
15677: LD_INT 117
15679: PUSH
15680: LD_INT 118
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: ST_TO_ADDR
15701: GO 17800
15703: LD_INT 10
15705: DOUBLE
15706: EQUAL
15707: IFTRUE 15711
15709: GO 15907
15711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15712: LD_ADDR_VAR 0 2
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: LD_INT 4
15722: PUSH
15723: LD_INT 5
15725: PUSH
15726: LD_INT 6
15728: PUSH
15729: LD_INT 7
15731: PUSH
15732: LD_INT 8
15734: PUSH
15735: LD_INT 9
15737: PUSH
15738: LD_INT 10
15740: PUSH
15741: LD_INT 11
15743: PUSH
15744: LD_INT 12
15746: PUSH
15747: LD_INT 13
15749: PUSH
15750: LD_INT 14
15752: PUSH
15753: LD_INT 15
15755: PUSH
15756: LD_INT 16
15758: PUSH
15759: LD_INT 17
15761: PUSH
15762: LD_INT 18
15764: PUSH
15765: LD_INT 19
15767: PUSH
15768: LD_INT 20
15770: PUSH
15771: LD_INT 21
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_INT 23
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 25
15785: PUSH
15786: LD_INT 26
15788: PUSH
15789: LD_INT 28
15791: PUSH
15792: LD_INT 30
15794: PUSH
15795: LD_INT 31
15797: PUSH
15798: LD_INT 32
15800: PUSH
15801: LD_INT 36
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 101
15837: PUSH
15838: LD_INT 102
15840: PUSH
15841: LD_INT 103
15843: PUSH
15844: LD_INT 104
15846: PUSH
15847: LD_INT 105
15849: PUSH
15850: LD_INT 106
15852: PUSH
15853: LD_INT 107
15855: PUSH
15856: LD_INT 108
15858: PUSH
15859: LD_INT 109
15861: PUSH
15862: LD_INT 110
15864: PUSH
15865: LD_INT 111
15867: PUSH
15868: LD_INT 112
15870: PUSH
15871: LD_INT 114
15873: PUSH
15874: LD_INT 116
15876: PUSH
15877: LD_INT 117
15879: PUSH
15880: LD_INT 118
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: ST_TO_ADDR
15905: GO 17800
15907: LD_INT 11
15909: DOUBLE
15910: EQUAL
15911: IFTRUE 15915
15913: GO 16119
15915: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15916: LD_ADDR_VAR 0 2
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: LD_INT 3
15926: PUSH
15927: LD_INT 4
15929: PUSH
15930: LD_INT 5
15932: PUSH
15933: LD_INT 6
15935: PUSH
15936: LD_INT 7
15938: PUSH
15939: LD_INT 8
15941: PUSH
15942: LD_INT 9
15944: PUSH
15945: LD_INT 10
15947: PUSH
15948: LD_INT 11
15950: PUSH
15951: LD_INT 12
15953: PUSH
15954: LD_INT 13
15956: PUSH
15957: LD_INT 14
15959: PUSH
15960: LD_INT 15
15962: PUSH
15963: LD_INT 16
15965: PUSH
15966: LD_INT 17
15968: PUSH
15969: LD_INT 18
15971: PUSH
15972: LD_INT 19
15974: PUSH
15975: LD_INT 20
15977: PUSH
15978: LD_INT 21
15980: PUSH
15981: LD_INT 22
15983: PUSH
15984: LD_INT 23
15986: PUSH
15987: LD_INT 24
15989: PUSH
15990: LD_INT 25
15992: PUSH
15993: LD_INT 26
15995: PUSH
15996: LD_INT 28
15998: PUSH
15999: LD_INT 30
16001: PUSH
16002: LD_INT 31
16004: PUSH
16005: LD_INT 32
16007: PUSH
16008: LD_INT 34
16010: PUSH
16011: LD_INT 36
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 101
16049: PUSH
16050: LD_INT 102
16052: PUSH
16053: LD_INT 103
16055: PUSH
16056: LD_INT 104
16058: PUSH
16059: LD_INT 105
16061: PUSH
16062: LD_INT 106
16064: PUSH
16065: LD_INT 107
16067: PUSH
16068: LD_INT 108
16070: PUSH
16071: LD_INT 109
16073: PUSH
16074: LD_INT 110
16076: PUSH
16077: LD_INT 111
16079: PUSH
16080: LD_INT 112
16082: PUSH
16083: LD_INT 114
16085: PUSH
16086: LD_INT 116
16088: PUSH
16089: LD_INT 117
16091: PUSH
16092: LD_INT 118
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: ST_TO_ADDR
16117: GO 17800
16119: LD_INT 12
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16347
16127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: LD_INT 3
16141: PUSH
16142: LD_INT 4
16144: PUSH
16145: LD_INT 5
16147: PUSH
16148: LD_INT 6
16150: PUSH
16151: LD_INT 7
16153: PUSH
16154: LD_INT 8
16156: PUSH
16157: LD_INT 9
16159: PUSH
16160: LD_INT 10
16162: PUSH
16163: LD_INT 11
16165: PUSH
16166: LD_INT 12
16168: PUSH
16169: LD_INT 13
16171: PUSH
16172: LD_INT 14
16174: PUSH
16175: LD_INT 15
16177: PUSH
16178: LD_INT 16
16180: PUSH
16181: LD_INT 17
16183: PUSH
16184: LD_INT 18
16186: PUSH
16187: LD_INT 19
16189: PUSH
16190: LD_INT 20
16192: PUSH
16193: LD_INT 21
16195: PUSH
16196: LD_INT 22
16198: PUSH
16199: LD_INT 23
16201: PUSH
16202: LD_INT 24
16204: PUSH
16205: LD_INT 25
16207: PUSH
16208: LD_INT 26
16210: PUSH
16211: LD_INT 27
16213: PUSH
16214: LD_INT 28
16216: PUSH
16217: LD_INT 30
16219: PUSH
16220: LD_INT 31
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: LD_INT 33
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 36
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 101
16273: PUSH
16274: LD_INT 102
16276: PUSH
16277: LD_INT 103
16279: PUSH
16280: LD_INT 104
16282: PUSH
16283: LD_INT 105
16285: PUSH
16286: LD_INT 106
16288: PUSH
16289: LD_INT 107
16291: PUSH
16292: LD_INT 108
16294: PUSH
16295: LD_INT 109
16297: PUSH
16298: LD_INT 110
16300: PUSH
16301: LD_INT 111
16303: PUSH
16304: LD_INT 112
16306: PUSH
16307: LD_INT 113
16309: PUSH
16310: LD_INT 114
16312: PUSH
16313: LD_INT 116
16315: PUSH
16316: LD_INT 117
16318: PUSH
16319: LD_INT 118
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: ST_TO_ADDR
16345: GO 17800
16347: LD_INT 13
16349: DOUBLE
16350: EQUAL
16351: IFTRUE 16355
16353: GO 16563
16355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: LD_INT 3
16369: PUSH
16370: LD_INT 4
16372: PUSH
16373: LD_INT 5
16375: PUSH
16376: LD_INT 8
16378: PUSH
16379: LD_INT 9
16381: PUSH
16382: LD_INT 10
16384: PUSH
16385: LD_INT 11
16387: PUSH
16388: LD_INT 12
16390: PUSH
16391: LD_INT 14
16393: PUSH
16394: LD_INT 15
16396: PUSH
16397: LD_INT 16
16399: PUSH
16400: LD_INT 17
16402: PUSH
16403: LD_INT 18
16405: PUSH
16406: LD_INT 19
16408: PUSH
16409: LD_INT 20
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_INT 23
16420: PUSH
16421: LD_INT 24
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 26
16429: PUSH
16430: LD_INT 27
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: LD_INT 30
16438: PUSH
16439: LD_INT 31
16441: PUSH
16442: LD_INT 32
16444: PUSH
16445: LD_INT 33
16447: PUSH
16448: LD_INT 34
16450: PUSH
16451: LD_INT 36
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 101
16489: PUSH
16490: LD_INT 102
16492: PUSH
16493: LD_INT 103
16495: PUSH
16496: LD_INT 104
16498: PUSH
16499: LD_INT 105
16501: PUSH
16502: LD_INT 106
16504: PUSH
16505: LD_INT 107
16507: PUSH
16508: LD_INT 108
16510: PUSH
16511: LD_INT 109
16513: PUSH
16514: LD_INT 110
16516: PUSH
16517: LD_INT 111
16519: PUSH
16520: LD_INT 112
16522: PUSH
16523: LD_INT 113
16525: PUSH
16526: LD_INT 114
16528: PUSH
16529: LD_INT 116
16531: PUSH
16532: LD_INT 117
16534: PUSH
16535: LD_INT 118
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: ST_TO_ADDR
16561: GO 17800
16563: LD_INT 14
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16571
16569: GO 16795
16571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16572: LD_ADDR_VAR 0 2
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: LD_INT 3
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: LD_INT 6
16594: PUSH
16595: LD_INT 7
16597: PUSH
16598: LD_INT 8
16600: PUSH
16601: LD_INT 9
16603: PUSH
16604: LD_INT 10
16606: PUSH
16607: LD_INT 11
16609: PUSH
16610: LD_INT 12
16612: PUSH
16613: LD_INT 13
16615: PUSH
16616: LD_INT 14
16618: PUSH
16619: LD_INT 15
16621: PUSH
16622: LD_INT 16
16624: PUSH
16625: LD_INT 17
16627: PUSH
16628: LD_INT 18
16630: PUSH
16631: LD_INT 19
16633: PUSH
16634: LD_INT 20
16636: PUSH
16637: LD_INT 21
16639: PUSH
16640: LD_INT 22
16642: PUSH
16643: LD_INT 23
16645: PUSH
16646: LD_INT 24
16648: PUSH
16649: LD_INT 25
16651: PUSH
16652: LD_INT 26
16654: PUSH
16655: LD_INT 27
16657: PUSH
16658: LD_INT 28
16660: PUSH
16661: LD_INT 29
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 31
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 33
16675: PUSH
16676: LD_INT 34
16678: PUSH
16679: LD_INT 36
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 101
16721: PUSH
16722: LD_INT 102
16724: PUSH
16725: LD_INT 103
16727: PUSH
16728: LD_INT 104
16730: PUSH
16731: LD_INT 105
16733: PUSH
16734: LD_INT 106
16736: PUSH
16737: LD_INT 107
16739: PUSH
16740: LD_INT 108
16742: PUSH
16743: LD_INT 109
16745: PUSH
16746: LD_INT 110
16748: PUSH
16749: LD_INT 111
16751: PUSH
16752: LD_INT 112
16754: PUSH
16755: LD_INT 113
16757: PUSH
16758: LD_INT 114
16760: PUSH
16761: LD_INT 116
16763: PUSH
16764: LD_INT 117
16766: PUSH
16767: LD_INT 118
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: ST_TO_ADDR
16793: GO 17800
16795: LD_INT 15
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 17027
16803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16804: LD_ADDR_VAR 0 2
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: LD_INT 2
16814: PUSH
16815: LD_INT 3
16817: PUSH
16818: LD_INT 4
16820: PUSH
16821: LD_INT 5
16823: PUSH
16824: LD_INT 6
16826: PUSH
16827: LD_INT 7
16829: PUSH
16830: LD_INT 8
16832: PUSH
16833: LD_INT 9
16835: PUSH
16836: LD_INT 10
16838: PUSH
16839: LD_INT 11
16841: PUSH
16842: LD_INT 12
16844: PUSH
16845: LD_INT 13
16847: PUSH
16848: LD_INT 14
16850: PUSH
16851: LD_INT 15
16853: PUSH
16854: LD_INT 16
16856: PUSH
16857: LD_INT 17
16859: PUSH
16860: LD_INT 18
16862: PUSH
16863: LD_INT 19
16865: PUSH
16866: LD_INT 20
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 22
16874: PUSH
16875: LD_INT 23
16877: PUSH
16878: LD_INT 24
16880: PUSH
16881: LD_INT 25
16883: PUSH
16884: LD_INT 26
16886: PUSH
16887: LD_INT 27
16889: PUSH
16890: LD_INT 28
16892: PUSH
16893: LD_INT 29
16895: PUSH
16896: LD_INT 30
16898: PUSH
16899: LD_INT 31
16901: PUSH
16902: LD_INT 32
16904: PUSH
16905: LD_INT 33
16907: PUSH
16908: LD_INT 34
16910: PUSH
16911: LD_INT 36
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 101
16953: PUSH
16954: LD_INT 102
16956: PUSH
16957: LD_INT 103
16959: PUSH
16960: LD_INT 104
16962: PUSH
16963: LD_INT 105
16965: PUSH
16966: LD_INT 106
16968: PUSH
16969: LD_INT 107
16971: PUSH
16972: LD_INT 108
16974: PUSH
16975: LD_INT 109
16977: PUSH
16978: LD_INT 110
16980: PUSH
16981: LD_INT 111
16983: PUSH
16984: LD_INT 112
16986: PUSH
16987: LD_INT 113
16989: PUSH
16990: LD_INT 114
16992: PUSH
16993: LD_INT 116
16995: PUSH
16996: LD_INT 117
16998: PUSH
16999: LD_INT 118
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17800
17027: LD_INT 16
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17171
17035: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 4
17046: PUSH
17047: LD_INT 5
17049: PUSH
17050: LD_INT 7
17052: PUSH
17053: LD_INT 11
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 15
17061: PUSH
17062: LD_INT 16
17064: PUSH
17065: LD_INT 20
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 22
17073: PUSH
17074: LD_INT 23
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 26
17082: PUSH
17083: LD_INT 30
17085: PUSH
17086: LD_INT 31
17088: PUSH
17089: LD_INT 32
17091: PUSH
17092: LD_INT 33
17094: PUSH
17095: LD_INT 34
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 101
17121: PUSH
17122: LD_INT 102
17124: PUSH
17125: LD_INT 103
17127: PUSH
17128: LD_INT 106
17130: PUSH
17131: LD_INT 108
17133: PUSH
17134: LD_INT 112
17136: PUSH
17137: LD_INT 113
17139: PUSH
17140: LD_INT 114
17142: PUSH
17143: LD_INT 116
17145: PUSH
17146: LD_INT 117
17148: PUSH
17149: LD_INT 118
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: ST_TO_ADDR
17169: GO 17800
17171: LD_INT 17
17173: DOUBLE
17174: EQUAL
17175: IFTRUE 17179
17177: GO 17403
17179: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17180: LD_ADDR_VAR 0 2
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: LD_INT 4
17196: PUSH
17197: LD_INT 5
17199: PUSH
17200: LD_INT 6
17202: PUSH
17203: LD_INT 7
17205: PUSH
17206: LD_INT 8
17208: PUSH
17209: LD_INT 9
17211: PUSH
17212: LD_INT 10
17214: PUSH
17215: LD_INT 11
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: LD_INT 13
17223: PUSH
17224: LD_INT 14
17226: PUSH
17227: LD_INT 15
17229: PUSH
17230: LD_INT 16
17232: PUSH
17233: LD_INT 17
17235: PUSH
17236: LD_INT 18
17238: PUSH
17239: LD_INT 19
17241: PUSH
17242: LD_INT 20
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 22
17250: PUSH
17251: LD_INT 23
17253: PUSH
17254: LD_INT 24
17256: PUSH
17257: LD_INT 25
17259: PUSH
17260: LD_INT 26
17262: PUSH
17263: LD_INT 27
17265: PUSH
17266: LD_INT 28
17268: PUSH
17269: LD_INT 29
17271: PUSH
17272: LD_INT 30
17274: PUSH
17275: LD_INT 31
17277: PUSH
17278: LD_INT 32
17280: PUSH
17281: LD_INT 33
17283: PUSH
17284: LD_INT 34
17286: PUSH
17287: LD_INT 36
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 101
17329: PUSH
17330: LD_INT 102
17332: PUSH
17333: LD_INT 103
17335: PUSH
17336: LD_INT 104
17338: PUSH
17339: LD_INT 105
17341: PUSH
17342: LD_INT 106
17344: PUSH
17345: LD_INT 107
17347: PUSH
17348: LD_INT 108
17350: PUSH
17351: LD_INT 109
17353: PUSH
17354: LD_INT 110
17356: PUSH
17357: LD_INT 111
17359: PUSH
17360: LD_INT 112
17362: PUSH
17363: LD_INT 113
17365: PUSH
17366: LD_INT 114
17368: PUSH
17369: LD_INT 116
17371: PUSH
17372: LD_INT 117
17374: PUSH
17375: LD_INT 118
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: ST_TO_ADDR
17401: GO 17800
17403: LD_INT 18
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17559
17411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17412: LD_ADDR_VAR 0 2
17416: PUSH
17417: LD_INT 2
17419: PUSH
17420: LD_INT 4
17422: PUSH
17423: LD_INT 5
17425: PUSH
17426: LD_INT 7
17428: PUSH
17429: LD_INT 11
17431: PUSH
17432: LD_INT 12
17434: PUSH
17435: LD_INT 15
17437: PUSH
17438: LD_INT 16
17440: PUSH
17441: LD_INT 20
17443: PUSH
17444: LD_INT 21
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 23
17452: PUSH
17453: LD_INT 25
17455: PUSH
17456: LD_INT 26
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 31
17464: PUSH
17465: LD_INT 32
17467: PUSH
17468: LD_INT 33
17470: PUSH
17471: LD_INT 34
17473: PUSH
17474: LD_INT 35
17476: PUSH
17477: LD_INT 36
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 101
17505: PUSH
17506: LD_INT 102
17508: PUSH
17509: LD_INT 103
17511: PUSH
17512: LD_INT 106
17514: PUSH
17515: LD_INT 108
17517: PUSH
17518: LD_INT 112
17520: PUSH
17521: LD_INT 113
17523: PUSH
17524: LD_INT 114
17526: PUSH
17527: LD_INT 115
17529: PUSH
17530: LD_INT 116
17532: PUSH
17533: LD_INT 117
17535: PUSH
17536: LD_INT 118
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: ST_TO_ADDR
17557: GO 17800
17559: LD_INT 19
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17799
17567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: LD_INT 2
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: LD_INT 4
17584: PUSH
17585: LD_INT 5
17587: PUSH
17588: LD_INT 6
17590: PUSH
17591: LD_INT 7
17593: PUSH
17594: LD_INT 8
17596: PUSH
17597: LD_INT 9
17599: PUSH
17600: LD_INT 10
17602: PUSH
17603: LD_INT 11
17605: PUSH
17606: LD_INT 12
17608: PUSH
17609: LD_INT 13
17611: PUSH
17612: LD_INT 14
17614: PUSH
17615: LD_INT 15
17617: PUSH
17618: LD_INT 16
17620: PUSH
17621: LD_INT 17
17623: PUSH
17624: LD_INT 18
17626: PUSH
17627: LD_INT 19
17629: PUSH
17630: LD_INT 20
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: LD_INT 23
17641: PUSH
17642: LD_INT 24
17644: PUSH
17645: LD_INT 25
17647: PUSH
17648: LD_INT 26
17650: PUSH
17651: LD_INT 27
17653: PUSH
17654: LD_INT 28
17656: PUSH
17657: LD_INT 29
17659: PUSH
17660: LD_INT 30
17662: PUSH
17663: LD_INT 31
17665: PUSH
17666: LD_INT 32
17668: PUSH
17669: LD_INT 33
17671: PUSH
17672: LD_INT 34
17674: PUSH
17675: LD_INT 35
17677: PUSH
17678: LD_INT 36
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 101
17721: PUSH
17722: LD_INT 102
17724: PUSH
17725: LD_INT 103
17727: PUSH
17728: LD_INT 104
17730: PUSH
17731: LD_INT 105
17733: PUSH
17734: LD_INT 106
17736: PUSH
17737: LD_INT 107
17739: PUSH
17740: LD_INT 108
17742: PUSH
17743: LD_INT 109
17745: PUSH
17746: LD_INT 110
17748: PUSH
17749: LD_INT 111
17751: PUSH
17752: LD_INT 112
17754: PUSH
17755: LD_INT 113
17757: PUSH
17758: LD_INT 114
17760: PUSH
17761: LD_INT 115
17763: PUSH
17764: LD_INT 116
17766: PUSH
17767: LD_INT 117
17769: PUSH
17770: LD_INT 118
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: ST_TO_ADDR
17797: GO 17800
17799: POP
// end else
17800: GO 18031
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: LD_INT 4
17818: PUSH
17819: LD_INT 5
17821: PUSH
17822: LD_INT 6
17824: PUSH
17825: LD_INT 7
17827: PUSH
17828: LD_INT 8
17830: PUSH
17831: LD_INT 9
17833: PUSH
17834: LD_INT 10
17836: PUSH
17837: LD_INT 11
17839: PUSH
17840: LD_INT 12
17842: PUSH
17843: LD_INT 13
17845: PUSH
17846: LD_INT 14
17848: PUSH
17849: LD_INT 15
17851: PUSH
17852: LD_INT 16
17854: PUSH
17855: LD_INT 17
17857: PUSH
17858: LD_INT 18
17860: PUSH
17861: LD_INT 19
17863: PUSH
17864: LD_INT 20
17866: PUSH
17867: LD_INT 21
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_INT 23
17875: PUSH
17876: LD_INT 24
17878: PUSH
17879: LD_INT 25
17881: PUSH
17882: LD_INT 26
17884: PUSH
17885: LD_INT 27
17887: PUSH
17888: LD_INT 28
17890: PUSH
17891: LD_INT 29
17893: PUSH
17894: LD_INT 30
17896: PUSH
17897: LD_INT 31
17899: PUSH
17900: LD_INT 32
17902: PUSH
17903: LD_INT 33
17905: PUSH
17906: LD_INT 34
17908: PUSH
17909: LD_INT 35
17911: PUSH
17912: LD_INT 36
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 101
17955: PUSH
17956: LD_INT 102
17958: PUSH
17959: LD_INT 103
17961: PUSH
17962: LD_INT 104
17964: PUSH
17965: LD_INT 105
17967: PUSH
17968: LD_INT 106
17970: PUSH
17971: LD_INT 107
17973: PUSH
17974: LD_INT 108
17976: PUSH
17977: LD_INT 109
17979: PUSH
17980: LD_INT 110
17982: PUSH
17983: LD_INT 111
17985: PUSH
17986: LD_INT 112
17988: PUSH
17989: LD_INT 113
17991: PUSH
17992: LD_INT 114
17994: PUSH
17995: LD_INT 115
17997: PUSH
17998: LD_INT 116
18000: PUSH
18001: LD_INT 117
18003: PUSH
18004: LD_INT 118
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: ST_TO_ADDR
// if result then
18031: LD_VAR 0 2
18035: IFFALSE 18821
// begin normal :=  ;
18037: LD_ADDR_VAR 0 5
18041: PUSH
18042: LD_STRING 
18044: ST_TO_ADDR
// hardcore :=  ;
18045: LD_ADDR_VAR 0 6
18049: PUSH
18050: LD_STRING 
18052: ST_TO_ADDR
// active :=  ;
18053: LD_ADDR_VAR 0 7
18057: PUSH
18058: LD_STRING 
18060: ST_TO_ADDR
// for i = 1 to normalCounter do
18061: LD_ADDR_VAR 0 8
18065: PUSH
18066: DOUBLE
18067: LD_INT 1
18069: DEC
18070: ST_TO_ADDR
18071: LD_EXP 51
18075: PUSH
18076: FOR_TO
18077: IFFALSE 18178
// begin tmp := 0 ;
18079: LD_ADDR_VAR 0 3
18083: PUSH
18084: LD_STRING 0
18086: ST_TO_ADDR
// if result [ 1 ] then
18087: LD_VAR 0 2
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: IFFALSE 18160
// if result [ 1 ] [ 1 ] = i then
18097: LD_VAR 0 2
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: PUSH
18106: LD_INT 1
18108: ARRAY
18109: PUSH
18110: LD_VAR 0 8
18114: EQUAL
18115: IFFALSE 18160
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 2
18126: PPUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 2
18134: PUSH
18135: LD_INT 1
18137: ARRAY
18138: PPUSH
18139: LD_INT 1
18141: PPUSH
18142: CALL_OW 3
18146: PPUSH
18147: CALL_OW 1
18151: ST_TO_ADDR
// tmp := 1 ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_STRING 1
18159: ST_TO_ADDR
// end ; normal := normal & tmp ;
18160: LD_ADDR_VAR 0 5
18164: PUSH
18165: LD_VAR 0 5
18169: PUSH
18170: LD_VAR 0 3
18174: STR
18175: ST_TO_ADDR
// end ;
18176: GO 18076
18178: POP
18179: POP
// for i = 1 to hardcoreCounter do
18180: LD_ADDR_VAR 0 8
18184: PUSH
18185: DOUBLE
18186: LD_INT 1
18188: DEC
18189: ST_TO_ADDR
18190: LD_EXP 52
18194: PUSH
18195: FOR_TO
18196: IFFALSE 18301
// begin tmp := 0 ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_STRING 0
18205: ST_TO_ADDR
// if result [ 2 ] then
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 2
18213: ARRAY
18214: IFFALSE 18283
// if result [ 2 ] [ 1 ] = 100 + i then
18216: LD_VAR 0 2
18220: PUSH
18221: LD_INT 2
18223: ARRAY
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PUSH
18229: LD_INT 100
18231: PUSH
18232: LD_VAR 0 8
18236: PLUS
18237: EQUAL
18238: IFFALSE 18283
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18240: LD_ADDR_VAR 0 2
18244: PUSH
18245: LD_VAR 0 2
18249: PPUSH
18250: LD_INT 2
18252: PPUSH
18253: LD_VAR 0 2
18257: PUSH
18258: LD_INT 2
18260: ARRAY
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 3
18269: PPUSH
18270: CALL_OW 1
18274: ST_TO_ADDR
// tmp := 1 ;
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: LD_STRING 1
18282: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18283: LD_ADDR_VAR 0 6
18287: PUSH
18288: LD_VAR 0 6
18292: PUSH
18293: LD_VAR 0 3
18297: STR
18298: ST_TO_ADDR
// end ;
18299: GO 18195
18301: POP
18302: POP
// if isGameLoad then
18303: LD_VAR 0 1
18307: IFFALSE 18782
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18309: LD_ADDR_VAR 0 4
18313: PUSH
18314: LD_EXP 55
18318: PUSH
18319: LD_EXP 54
18323: PUSH
18324: LD_EXP 56
18328: PUSH
18329: LD_EXP 53
18333: PUSH
18334: LD_EXP 57
18338: PUSH
18339: LD_EXP 58
18343: PUSH
18344: LD_EXP 59
18348: PUSH
18349: LD_EXP 60
18353: PUSH
18354: LD_EXP 61
18358: PUSH
18359: LD_EXP 62
18363: PUSH
18364: LD_EXP 63
18368: PUSH
18369: LD_EXP 64
18373: PUSH
18374: LD_EXP 65
18378: PUSH
18379: LD_EXP 66
18383: PUSH
18384: LD_EXP 74
18388: PUSH
18389: LD_EXP 75
18393: PUSH
18394: LD_EXP 76
18398: PUSH
18399: LD_EXP 77
18403: PUSH
18404: LD_EXP 79
18408: PUSH
18409: LD_EXP 80
18413: PUSH
18414: LD_EXP 81
18418: PUSH
18419: LD_EXP 84
18423: PUSH
18424: LD_EXP 86
18428: PUSH
18429: LD_EXP 87
18433: PUSH
18434: LD_EXP 88
18438: PUSH
18439: LD_EXP 90
18443: PUSH
18444: LD_EXP 91
18448: PUSH
18449: LD_EXP 94
18453: PUSH
18454: LD_EXP 95
18458: PUSH
18459: LD_EXP 96
18463: PUSH
18464: LD_EXP 97
18468: PUSH
18469: LD_EXP 98
18473: PUSH
18474: LD_EXP 99
18478: PUSH
18479: LD_EXP 100
18483: PUSH
18484: LD_EXP 101
18488: PUSH
18489: LD_EXP 102
18493: PUSH
18494: LD_EXP 67
18498: PUSH
18499: LD_EXP 68
18503: PUSH
18504: LD_EXP 71
18508: PUSH
18509: LD_EXP 72
18513: PUSH
18514: LD_EXP 73
18518: PUSH
18519: LD_EXP 69
18523: PUSH
18524: LD_EXP 70
18528: PUSH
18529: LD_EXP 78
18533: PUSH
18534: LD_EXP 82
18538: PUSH
18539: LD_EXP 83
18543: PUSH
18544: LD_EXP 85
18548: PUSH
18549: LD_EXP 89
18553: PUSH
18554: LD_EXP 92
18558: PUSH
18559: LD_EXP 93
18563: PUSH
18564: LD_EXP 103
18568: PUSH
18569: LD_EXP 104
18573: PUSH
18574: LD_EXP 105
18578: PUSH
18579: LD_EXP 106
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: ST_TO_ADDR
// tmp :=  ;
18640: LD_ADDR_VAR 0 3
18644: PUSH
18645: LD_STRING 
18647: ST_TO_ADDR
// for i = 1 to normalCounter do
18648: LD_ADDR_VAR 0 8
18652: PUSH
18653: DOUBLE
18654: LD_INT 1
18656: DEC
18657: ST_TO_ADDR
18658: LD_EXP 51
18662: PUSH
18663: FOR_TO
18664: IFFALSE 18700
// begin if flags [ i ] then
18666: LD_VAR 0 4
18670: PUSH
18671: LD_VAR 0 8
18675: ARRAY
18676: IFFALSE 18698
// tmp := tmp & i & ; ;
18678: LD_ADDR_VAR 0 3
18682: PUSH
18683: LD_VAR 0 3
18687: PUSH
18688: LD_VAR 0 8
18692: STR
18693: PUSH
18694: LD_STRING ;
18696: STR
18697: ST_TO_ADDR
// end ;
18698: GO 18663
18700: POP
18701: POP
// for i = 1 to hardcoreCounter do
18702: LD_ADDR_VAR 0 8
18706: PUSH
18707: DOUBLE
18708: LD_INT 1
18710: DEC
18711: ST_TO_ADDR
18712: LD_EXP 52
18716: PUSH
18717: FOR_TO
18718: IFFALSE 18764
// begin if flags [ normalCounter + i ] then
18720: LD_VAR 0 4
18724: PUSH
18725: LD_EXP 51
18729: PUSH
18730: LD_VAR 0 8
18734: PLUS
18735: ARRAY
18736: IFFALSE 18762
// tmp := tmp & ( 100 + i ) & ; ;
18738: LD_ADDR_VAR 0 3
18742: PUSH
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 100
18750: PUSH
18751: LD_VAR 0 8
18755: PLUS
18756: STR
18757: PUSH
18758: LD_STRING ;
18760: STR
18761: ST_TO_ADDR
// end ;
18762: GO 18717
18764: POP
18765: POP
// if tmp then
18766: LD_VAR 0 3
18770: IFFALSE 18782
// active := tmp ;
18772: LD_ADDR_VAR 0 7
18776: PUSH
18777: LD_VAR 0 3
18781: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18782: LD_STRING getStreamItemsFromMission("
18784: PUSH
18785: LD_VAR 0 5
18789: STR
18790: PUSH
18791: LD_STRING ","
18793: STR
18794: PUSH
18795: LD_VAR 0 6
18799: STR
18800: PUSH
18801: LD_STRING ","
18803: STR
18804: PUSH
18805: LD_VAR 0 7
18809: STR
18810: PUSH
18811: LD_STRING ")
18813: STR
18814: PPUSH
18815: CALL_OW 559
// end else
18819: GO 18828
// ToLua ( getStreamItemsFromMission("","","") ) ;
18821: LD_STRING getStreamItemsFromMission("","","")
18823: PPUSH
18824: CALL_OW 559
// end ;
18828: LD_VAR 0 2
18832: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18833: LD_EXP 50
18837: PUSH
18838: LD_EXP 55
18842: AND
18843: IFFALSE 18967
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
18851: PPUSH
// begin enable ;
18852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: LD_INT 22
18860: PUSH
18861: LD_OWVAR 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: LD_INT 34
18875: PUSH
18876: LD_INT 7
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 34
18885: PUSH
18886: LD_INT 45
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 34
18895: PUSH
18896: LD_INT 28
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 34
18905: PUSH
18906: LD_INT 47
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PPUSH
18924: CALL_OW 69
18928: ST_TO_ADDR
// if not tmp then
18929: LD_VAR 0 2
18933: NOT
18934: IFFALSE 18938
// exit ;
18936: GO 18967
// for i in tmp do
18938: LD_ADDR_VAR 0 1
18942: PUSH
18943: LD_VAR 0 2
18947: PUSH
18948: FOR_IN
18949: IFFALSE 18965
// begin SetLives ( i , 0 ) ;
18951: LD_VAR 0 1
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 234
// end ;
18963: GO 18948
18965: POP
18966: POP
// end ;
18967: PPOPN 2
18969: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18970: LD_EXP 50
18974: PUSH
18975: LD_EXP 56
18979: AND
18980: IFFALSE 19064
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
// begin enable ;
18989: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18990: LD_ADDR_VAR 0 2
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_OWVAR 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 32
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PPUSH
19021: CALL_OW 69
19025: ST_TO_ADDR
// if not tmp then
19026: LD_VAR 0 2
19030: NOT
19031: IFFALSE 19035
// exit ;
19033: GO 19064
// for i in tmp do
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_VAR 0 2
19044: PUSH
19045: FOR_IN
19046: IFFALSE 19062
// begin SetLives ( i , 0 ) ;
19048: LD_VAR 0 1
19052: PPUSH
19053: LD_INT 0
19055: PPUSH
19056: CALL_OW 234
// end ;
19060: GO 19045
19062: POP
19063: POP
// end ;
19064: PPOPN 2
19066: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19067: LD_EXP 50
19071: PUSH
19072: LD_EXP 53
19076: AND
19077: IFFALSE 19170
19079: GO 19081
19081: DISABLE
19082: LD_INT 0
19084: PPUSH
// begin enable ;
19085: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19086: LD_ADDR_VAR 0 1
19090: PUSH
19091: LD_INT 22
19093: PUSH
19094: LD_OWVAR 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: LD_INT 25
19108: PUSH
19109: LD_INT 5
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 25
19118: PUSH
19119: LD_INT 9
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 8
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PPUSH
19146: CALL_OW 69
19150: PUSH
19151: FOR_IN
19152: IFFALSE 19168
// begin SetClass ( i , 1 ) ;
19154: LD_VAR 0 1
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 336
// end ;
19166: GO 19151
19168: POP
19169: POP
// end ;
19170: PPOPN 1
19172: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19173: LD_EXP 50
19177: PUSH
19178: LD_EXP 54
19182: AND
19183: PUSH
19184: LD_OWVAR 65
19188: PUSH
19189: LD_INT 7
19191: LESS
19192: AND
19193: IFFALSE 19207
19195: GO 19197
19197: DISABLE
// begin enable ;
19198: ENABLE
// game_speed := 7 ;
19199: LD_ADDR_OWVAR 65
19203: PUSH
19204: LD_INT 7
19206: ST_TO_ADDR
// end ;
19207: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19208: LD_EXP 50
19212: PUSH
19213: LD_EXP 57
19217: AND
19218: IFFALSE 19420
19220: GO 19222
19222: DISABLE
19223: LD_INT 0
19225: PPUSH
19226: PPUSH
19227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19228: LD_ADDR_VAR 0 3
19232: PUSH
19233: LD_INT 81
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 69
19263: ST_TO_ADDR
// if not tmp then
19264: LD_VAR 0 3
19268: NOT
19269: IFFALSE 19273
// exit ;
19271: GO 19420
// if tmp > 5 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 5
19280: GREATER
19281: IFFALSE 19293
// k := 5 else
19283: LD_ADDR_VAR 0 2
19287: PUSH
19288: LD_INT 5
19290: ST_TO_ADDR
19291: GO 19303
// k := tmp ;
19293: LD_ADDR_VAR 0 2
19297: PUSH
19298: LD_VAR 0 3
19302: ST_TO_ADDR
// for i := 1 to k do
19303: LD_ADDR_VAR 0 1
19307: PUSH
19308: DOUBLE
19309: LD_INT 1
19311: DEC
19312: ST_TO_ADDR
19313: LD_VAR 0 2
19317: PUSH
19318: FOR_TO
19319: IFFALSE 19418
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: ARRAY
19331: PPUSH
19332: LD_VAR 0 1
19336: PUSH
19337: LD_INT 4
19339: MOD
19340: PUSH
19341: LD_INT 1
19343: PLUS
19344: PPUSH
19345: CALL_OW 259
19349: PUSH
19350: LD_INT 10
19352: LESS
19353: IFFALSE 19416
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19355: LD_VAR 0 3
19359: PUSH
19360: LD_VAR 0 1
19364: ARRAY
19365: PPUSH
19366: LD_VAR 0 1
19370: PUSH
19371: LD_INT 4
19373: MOD
19374: PUSH
19375: LD_INT 1
19377: PLUS
19378: PPUSH
19379: LD_VAR 0 3
19383: PUSH
19384: LD_VAR 0 1
19388: ARRAY
19389: PPUSH
19390: LD_VAR 0 1
19394: PUSH
19395: LD_INT 4
19397: MOD
19398: PUSH
19399: LD_INT 1
19401: PLUS
19402: PPUSH
19403: CALL_OW 259
19407: PUSH
19408: LD_INT 1
19410: PLUS
19411: PPUSH
19412: CALL_OW 237
19416: GO 19318
19418: POP
19419: POP
// end ;
19420: PPOPN 3
19422: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19423: LD_EXP 50
19427: PUSH
19428: LD_EXP 58
19432: AND
19433: IFFALSE 19453
19435: GO 19437
19437: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19438: LD_INT 4
19440: PPUSH
19441: LD_OWVAR 2
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: CALL_OW 324
19453: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19454: LD_EXP 50
19458: PUSH
19459: LD_EXP 87
19463: AND
19464: IFFALSE 19484
19466: GO 19468
19468: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19469: LD_INT 19
19471: PPUSH
19472: LD_OWVAR 2
19476: PPUSH
19477: LD_INT 0
19479: PPUSH
19480: CALL_OW 324
19484: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19485: LD_EXP 50
19489: PUSH
19490: LD_EXP 59
19494: AND
19495: IFFALSE 19597
19497: GO 19499
19499: DISABLE
19500: LD_INT 0
19502: PPUSH
19503: PPUSH
// begin enable ;
19504: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19505: LD_ADDR_VAR 0 2
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_OWVAR 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 34
19527: PUSH
19528: LD_INT 11
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 34
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 69
19558: ST_TO_ADDR
// if not tmp then
19559: LD_VAR 0 2
19563: NOT
19564: IFFALSE 19568
// exit ;
19566: GO 19597
// for i in tmp do
19568: LD_ADDR_VAR 0 1
19572: PUSH
19573: LD_VAR 0 2
19577: PUSH
19578: FOR_IN
19579: IFFALSE 19595
// begin SetLives ( i , 0 ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_INT 0
19588: PPUSH
19589: CALL_OW 234
// end ;
19593: GO 19578
19595: POP
19596: POP
// end ;
19597: PPOPN 2
19599: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19600: LD_EXP 50
19604: PUSH
19605: LD_EXP 60
19609: AND
19610: IFFALSE 19630
19612: GO 19614
19614: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19615: LD_INT 32
19617: PPUSH
19618: LD_OWVAR 2
19622: PPUSH
19623: LD_INT 0
19625: PPUSH
19626: CALL_OW 324
19630: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19631: LD_EXP 50
19635: PUSH
19636: LD_EXP 61
19640: AND
19641: IFFALSE 19822
19643: GO 19645
19645: DISABLE
19646: LD_INT 0
19648: PPUSH
19649: PPUSH
19650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: LD_INT 22
19658: PUSH
19659: LD_OWVAR 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 33
19670: PUSH
19671: LD_INT 3
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PPUSH
19682: CALL_OW 69
19686: ST_TO_ADDR
// if not tmp then
19687: LD_VAR 0 2
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19822
// side := 0 ;
19696: LD_ADDR_VAR 0 3
19700: PUSH
19701: LD_INT 0
19703: ST_TO_ADDR
// for i := 1 to 8 do
19704: LD_ADDR_VAR 0 1
19708: PUSH
19709: DOUBLE
19710: LD_INT 1
19712: DEC
19713: ST_TO_ADDR
19714: LD_INT 8
19716: PUSH
19717: FOR_TO
19718: IFFALSE 19766
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19720: LD_OWVAR 2
19724: PUSH
19725: LD_VAR 0 1
19729: NONEQUAL
19730: PUSH
19731: LD_OWVAR 2
19735: PPUSH
19736: LD_VAR 0 1
19740: PPUSH
19741: CALL_OW 81
19745: PUSH
19746: LD_INT 2
19748: EQUAL
19749: AND
19750: IFFALSE 19764
// begin side := i ;
19752: LD_ADDR_VAR 0 3
19756: PUSH
19757: LD_VAR 0 1
19761: ST_TO_ADDR
// break ;
19762: GO 19766
// end ;
19764: GO 19717
19766: POP
19767: POP
// if not side then
19768: LD_VAR 0 3
19772: NOT
19773: IFFALSE 19777
// exit ;
19775: GO 19822
// for i := 1 to tmp do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: DOUBLE
19783: LD_INT 1
19785: DEC
19786: ST_TO_ADDR
19787: LD_VAR 0 2
19791: PUSH
19792: FOR_TO
19793: IFFALSE 19820
// if Prob ( 60 ) then
19795: LD_INT 60
19797: PPUSH
19798: CALL_OW 13
19802: IFFALSE 19818
// SetSide ( i , side ) ;
19804: LD_VAR 0 1
19808: PPUSH
19809: LD_VAR 0 3
19813: PPUSH
19814: CALL_OW 235
19818: GO 19792
19820: POP
19821: POP
// end ;
19822: PPOPN 3
19824: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19825: LD_EXP 50
19829: PUSH
19830: LD_EXP 63
19834: AND
19835: IFFALSE 19954
19837: GO 19839
19839: DISABLE
19840: LD_INT 0
19842: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19843: LD_ADDR_VAR 0 1
19847: PUSH
19848: LD_INT 22
19850: PUSH
19851: LD_OWVAR 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 21
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 3
19872: PUSH
19873: LD_INT 23
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: LIST
19891: PPUSH
19892: CALL_OW 69
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19952
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 257
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: LD_INT 4
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: IN
19928: IFFALSE 19950
// SetClass ( un , rand ( 1 , 4 ) ) ;
19930: LD_VAR 0 1
19934: PPUSH
19935: LD_INT 1
19937: PPUSH
19938: LD_INT 4
19940: PPUSH
19941: CALL_OW 12
19945: PPUSH
19946: CALL_OW 336
19950: GO 19897
19952: POP
19953: POP
// end ;
19954: PPOPN 1
19956: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19957: LD_EXP 50
19961: PUSH
19962: LD_EXP 62
19966: AND
19967: IFFALSE 20046
19969: GO 19971
19971: DISABLE
19972: LD_INT 0
19974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_INT 22
19982: PUSH
19983: LD_OWVAR 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PPUSH
20006: CALL_OW 69
20010: ST_TO_ADDR
// if not tmp then
20011: LD_VAR 0 1
20015: NOT
20016: IFFALSE 20020
// exit ;
20018: GO 20046
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20020: LD_VAR 0 1
20024: PUSH
20025: LD_INT 1
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 12
20037: ARRAY
20038: PPUSH
20039: LD_INT 100
20041: PPUSH
20042: CALL_OW 234
// end ;
20046: PPOPN 1
20048: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20049: LD_EXP 50
20053: PUSH
20054: LD_EXP 64
20058: AND
20059: IFFALSE 20157
20061: GO 20063
20063: DISABLE
20064: LD_INT 0
20066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20067: LD_ADDR_VAR 0 1
20071: PUSH
20072: LD_INT 22
20074: PUSH
20075: LD_OWVAR 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 21
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: ST_TO_ADDR
// if not tmp then
20103: LD_VAR 0 1
20107: NOT
20108: IFFALSE 20112
// exit ;
20110: GO 20157
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20112: LD_VAR 0 1
20116: PUSH
20117: LD_INT 1
20119: PPUSH
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 12
20129: ARRAY
20130: PPUSH
20131: LD_INT 1
20133: PPUSH
20134: LD_INT 4
20136: PPUSH
20137: CALL_OW 12
20141: PPUSH
20142: LD_INT 3000
20144: PPUSH
20145: LD_INT 9000
20147: PPUSH
20148: CALL_OW 12
20152: PPUSH
20153: CALL_OW 492
// end ;
20157: PPOPN 1
20159: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20160: LD_EXP 50
20164: PUSH
20165: LD_EXP 65
20169: AND
20170: IFFALSE 20190
20172: GO 20174
20174: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20175: LD_INT 1
20177: PPUSH
20178: LD_OWVAR 2
20182: PPUSH
20183: LD_INT 0
20185: PPUSH
20186: CALL_OW 324
20190: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20191: LD_EXP 50
20195: PUSH
20196: LD_EXP 66
20200: AND
20201: IFFALSE 20284
20203: GO 20205
20205: DISABLE
20206: LD_INT 0
20208: PPUSH
20209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20210: LD_ADDR_VAR 0 2
20214: PUSH
20215: LD_INT 22
20217: PUSH
20218: LD_OWVAR 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 21
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20284
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20282
// SetBLevel ( i , 10 ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 10
20275: PPUSH
20276: CALL_OW 241
20280: GO 20265
20282: POP
20283: POP
// end ;
20284: PPOPN 2
20286: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20287: LD_EXP 50
20291: PUSH
20292: LD_EXP 67
20296: AND
20297: IFFALSE 20408
20299: GO 20301
20301: DISABLE
20302: LD_INT 0
20304: PPUSH
20305: PPUSH
20306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_OWVAR 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 25
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 69
20342: ST_TO_ADDR
// if not tmp then
20343: LD_VAR 0 3
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20408
// un := tmp [ rand ( 1 , tmp ) ] ;
20352: LD_ADDR_VAR 0 2
20356: PUSH
20357: LD_VAR 0 3
20361: PUSH
20362: LD_INT 1
20364: PPUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: CALL_OW 12
20374: ARRAY
20375: ST_TO_ADDR
// if Crawls ( un ) then
20376: LD_VAR 0 2
20380: PPUSH
20381: CALL_OW 318
20385: IFFALSE 20396
// ComWalk ( un ) ;
20387: LD_VAR 0 2
20391: PPUSH
20392: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20396: LD_VAR 0 2
20400: PPUSH
20401: LD_INT 5
20403: PPUSH
20404: CALL_OW 336
// end ;
20408: PPOPN 3
20410: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20411: LD_EXP 50
20415: PUSH
20416: LD_EXP 68
20420: AND
20421: PUSH
20422: LD_OWVAR 67
20426: PUSH
20427: LD_INT 4
20429: LESS
20430: AND
20431: IFFALSE 20450
20433: GO 20435
20435: DISABLE
// begin Difficulty := Difficulty + 1 ;
20436: LD_ADDR_OWVAR 67
20440: PUSH
20441: LD_OWVAR 67
20445: PUSH
20446: LD_INT 1
20448: PLUS
20449: ST_TO_ADDR
// end ;
20450: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20451: LD_EXP 50
20455: PUSH
20456: LD_EXP 69
20460: AND
20461: IFFALSE 20564
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
// begin for i := 1 to 5 do
20469: LD_ADDR_VAR 0 1
20473: PUSH
20474: DOUBLE
20475: LD_INT 1
20477: DEC
20478: ST_TO_ADDR
20479: LD_INT 5
20481: PUSH
20482: FOR_TO
20483: IFFALSE 20562
// begin uc_nation := nation_nature ;
20485: LD_ADDR_OWVAR 21
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// uc_side := 0 ;
20493: LD_ADDR_OWVAR 20
20497: PUSH
20498: LD_INT 0
20500: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20501: LD_ADDR_OWVAR 29
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: LD_INT 12
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: ST_TO_ADDR
// hc_agressivity := 20 ;
20516: LD_ADDR_OWVAR 35
20520: PUSH
20521: LD_INT 20
20523: ST_TO_ADDR
// hc_class := class_tiger ;
20524: LD_ADDR_OWVAR 28
20528: PUSH
20529: LD_INT 14
20531: ST_TO_ADDR
// hc_gallery :=  ;
20532: LD_ADDR_OWVAR 33
20536: PUSH
20537: LD_STRING 
20539: ST_TO_ADDR
// hc_name :=  ;
20540: LD_ADDR_OWVAR 26
20544: PUSH
20545: LD_STRING 
20547: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20548: CALL_OW 44
20552: PPUSH
20553: LD_INT 0
20555: PPUSH
20556: CALL_OW 51
// end ;
20560: GO 20482
20562: POP
20563: POP
// end ;
20564: PPOPN 1
20566: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20567: LD_EXP 50
20571: PUSH
20572: LD_EXP 70
20576: AND
20577: IFFALSE 20586
20579: GO 20581
20581: DISABLE
// StreamSibBomb ;
20582: CALL 20587 0 0
20586: END
// export function StreamSibBomb ; var i , x , y ; begin
20587: LD_INT 0
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
// result := false ;
20593: LD_ADDR_VAR 0 1
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// for i := 1 to 16 do
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: DOUBLE
20607: LD_INT 1
20609: DEC
20610: ST_TO_ADDR
20611: LD_INT 16
20613: PUSH
20614: FOR_TO
20615: IFFALSE 20814
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20617: LD_ADDR_VAR 0 3
20621: PUSH
20622: LD_INT 10
20624: PUSH
20625: LD_INT 20
20627: PUSH
20628: LD_INT 30
20630: PUSH
20631: LD_INT 40
20633: PUSH
20634: LD_INT 50
20636: PUSH
20637: LD_INT 60
20639: PUSH
20640: LD_INT 70
20642: PUSH
20643: LD_INT 80
20645: PUSH
20646: LD_INT 90
20648: PUSH
20649: LD_INT 100
20651: PUSH
20652: LD_INT 110
20654: PUSH
20655: LD_INT 120
20657: PUSH
20658: LD_INT 130
20660: PUSH
20661: LD_INT 140
20663: PUSH
20664: LD_INT 150
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PPUSH
20687: LD_INT 15
20689: PPUSH
20690: CALL_OW 12
20694: ARRAY
20695: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20696: LD_ADDR_VAR 0 4
20700: PUSH
20701: LD_INT 10
20703: PUSH
20704: LD_INT 20
20706: PUSH
20707: LD_INT 30
20709: PUSH
20710: LD_INT 40
20712: PUSH
20713: LD_INT 50
20715: PUSH
20716: LD_INT 60
20718: PUSH
20719: LD_INT 70
20721: PUSH
20722: LD_INT 80
20724: PUSH
20725: LD_INT 90
20727: PUSH
20728: LD_INT 100
20730: PUSH
20731: LD_INT 110
20733: PUSH
20734: LD_INT 120
20736: PUSH
20737: LD_INT 130
20739: PUSH
20740: LD_INT 140
20742: PUSH
20743: LD_INT 150
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PPUSH
20766: LD_INT 15
20768: PPUSH
20769: CALL_OW 12
20773: ARRAY
20774: ST_TO_ADDR
// if ValidHex ( x , y ) then
20775: LD_VAR 0 3
20779: PPUSH
20780: LD_VAR 0 4
20784: PPUSH
20785: CALL_OW 488
20789: IFFALSE 20812
// begin result := [ x , y ] ;
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: LD_VAR 0 3
20800: PUSH
20801: LD_VAR 0 4
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: ST_TO_ADDR
// break ;
20810: GO 20814
// end ; end ;
20812: GO 20614
20814: POP
20815: POP
// if result then
20816: LD_VAR 0 1
20820: IFFALSE 20880
// begin ToLua ( playSibBomb() ) ;
20822: LD_STRING playSibBomb()
20824: PPUSH
20825: CALL_OW 559
// wait ( 0 0$14 ) ;
20829: LD_INT 490
20831: PPUSH
20832: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20836: LD_VAR 0 1
20840: PUSH
20841: LD_INT 1
20843: ARRAY
20844: PPUSH
20845: LD_VAR 0 1
20849: PUSH
20850: LD_INT 2
20852: ARRAY
20853: PPUSH
20854: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20858: LD_VAR 0 1
20862: PUSH
20863: LD_INT 1
20865: ARRAY
20866: PPUSH
20867: LD_VAR 0 1
20871: PUSH
20872: LD_INT 2
20874: ARRAY
20875: PPUSH
20876: CALL_OW 429
// end ; end ;
20880: LD_VAR 0 1
20884: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20885: LD_EXP 50
20889: PUSH
20890: LD_EXP 72
20894: AND
20895: IFFALSE 20907
20897: GO 20899
20899: DISABLE
// YouLost (  ) ;
20900: LD_STRING 
20902: PPUSH
20903: CALL_OW 104
20907: END
// every 0 0$1 trigger StreamModeActive and sFog do
20908: LD_EXP 50
20912: PUSH
20913: LD_EXP 71
20917: AND
20918: IFFALSE 20932
20920: GO 20922
20922: DISABLE
// FogOff ( your_side ) ;
20923: LD_OWVAR 2
20927: PPUSH
20928: CALL_OW 344
20932: END
// every 0 0$1 trigger StreamModeActive and sSun do
20933: LD_EXP 50
20937: PUSH
20938: LD_EXP 73
20942: AND
20943: IFFALSE 20971
20945: GO 20947
20947: DISABLE
// begin solar_recharge_percent := 0 ;
20948: LD_ADDR_OWVAR 79
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20956: LD_INT 10500
20958: PPUSH
20959: CALL_OW 67
// solar_recharge_percent := 100 ;
20963: LD_ADDR_OWVAR 79
20967: PUSH
20968: LD_INT 100
20970: ST_TO_ADDR
// end ;
20971: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20972: LD_EXP 50
20976: PUSH
20977: LD_EXP 74
20981: AND
20982: IFFALSE 21221
20984: GO 20986
20986: DISABLE
20987: LD_INT 0
20989: PPUSH
20990: PPUSH
20991: PPUSH
// begin tmp := [ ] ;
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: EMPTY
20998: ST_TO_ADDR
// for i := 1 to 6 do
20999: LD_ADDR_VAR 0 1
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_INT 6
21011: PUSH
21012: FOR_TO
21013: IFFALSE 21118
// begin uc_nation := nation_nature ;
21015: LD_ADDR_OWVAR 21
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
// uc_side := 0 ;
21023: LD_ADDR_OWVAR 20
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21031: LD_ADDR_OWVAR 29
21035: PUSH
21036: LD_INT 12
21038: PUSH
21039: LD_INT 12
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: ST_TO_ADDR
// hc_agressivity := 20 ;
21046: LD_ADDR_OWVAR 35
21050: PUSH
21051: LD_INT 20
21053: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21054: LD_ADDR_OWVAR 28
21058: PUSH
21059: LD_INT 17
21061: ST_TO_ADDR
// hc_gallery :=  ;
21062: LD_ADDR_OWVAR 33
21066: PUSH
21067: LD_STRING 
21069: ST_TO_ADDR
// hc_name :=  ;
21070: LD_ADDR_OWVAR 26
21074: PUSH
21075: LD_STRING 
21077: ST_TO_ADDR
// un := CreateHuman ;
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: CALL_OW 44
21087: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21088: LD_VAR 0 2
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 51
// tmp := tmp ^ un ;
21100: LD_ADDR_VAR 0 3
21104: PUSH
21105: LD_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: ADD
21115: ST_TO_ADDR
// end ;
21116: GO 21012
21118: POP
21119: POP
// repeat wait ( 0 0$1 ) ;
21120: LD_INT 35
21122: PPUSH
21123: CALL_OW 67
// for un in tmp do
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_VAR 0 3
21136: PUSH
21137: FOR_IN
21138: IFFALSE 21212
// begin if IsDead ( un ) then
21140: LD_VAR 0 2
21144: PPUSH
21145: CALL_OW 301
21149: IFFALSE 21169
// begin tmp := tmp diff un ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 3
21160: PUSH
21161: LD_VAR 0 2
21165: DIFF
21166: ST_TO_ADDR
// continue ;
21167: GO 21137
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_INT 3
21176: PUSH
21177: LD_INT 22
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PPUSH
21191: CALL_OW 69
21195: PPUSH
21196: LD_VAR 0 2
21200: PPUSH
21201: CALL_OW 74
21205: PPUSH
21206: CALL_OW 115
// end ;
21210: GO 21137
21212: POP
21213: POP
// until not tmp ;
21214: LD_VAR 0 3
21218: NOT
21219: IFFALSE 21120
// end ;
21221: PPOPN 3
21223: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21224: LD_EXP 50
21228: PUSH
21229: LD_EXP 75
21233: AND
21234: IFFALSE 21288
21236: GO 21238
21238: DISABLE
// begin ToLua ( displayTroll(); ) ;
21239: LD_STRING displayTroll();
21241: PPUSH
21242: CALL_OW 559
// wait ( 3 3$00 ) ;
21246: LD_INT 6300
21248: PPUSH
21249: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21253: LD_STRING hideTroll();
21255: PPUSH
21256: CALL_OW 559
// wait ( 1 1$00 ) ;
21260: LD_INT 2100
21262: PPUSH
21263: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21267: LD_STRING displayTroll();
21269: PPUSH
21270: CALL_OW 559
// wait ( 1 1$00 ) ;
21274: LD_INT 2100
21276: PPUSH
21277: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21281: LD_STRING hideTroll();
21283: PPUSH
21284: CALL_OW 559
// end ;
21288: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21289: LD_EXP 50
21293: PUSH
21294: LD_EXP 76
21298: AND
21299: IFFALSE 21362
21301: GO 21303
21303: DISABLE
21304: LD_INT 0
21306: PPUSH
// begin p := 0 ;
21307: LD_ADDR_VAR 0 1
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
// repeat game_speed := 1 ;
21315: LD_ADDR_OWVAR 65
21319: PUSH
21320: LD_INT 1
21322: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21323: LD_INT 35
21325: PPUSH
21326: CALL_OW 67
// p := p + 1 ;
21330: LD_ADDR_VAR 0 1
21334: PUSH
21335: LD_VAR 0 1
21339: PUSH
21340: LD_INT 1
21342: PLUS
21343: ST_TO_ADDR
// until p >= 60 ;
21344: LD_VAR 0 1
21348: PUSH
21349: LD_INT 60
21351: GREATEREQUAL
21352: IFFALSE 21315
// game_speed := 4 ;
21354: LD_ADDR_OWVAR 65
21358: PUSH
21359: LD_INT 4
21361: ST_TO_ADDR
// end ;
21362: PPOPN 1
21364: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21365: LD_EXP 50
21369: PUSH
21370: LD_EXP 77
21374: AND
21375: IFFALSE 21521
21377: GO 21379
21379: DISABLE
21380: LD_INT 0
21382: PPUSH
21383: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21384: LD_ADDR_VAR 0 1
21388: PUSH
21389: LD_INT 22
21391: PUSH
21392: LD_OWVAR 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 30
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 30
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// if not depot then
21438: LD_VAR 0 1
21442: NOT
21443: IFFALSE 21447
// exit ;
21445: GO 21521
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21447: LD_ADDR_VAR 0 2
21451: PUSH
21452: LD_VAR 0 1
21456: PUSH
21457: LD_INT 1
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 12
21469: ARRAY
21470: PPUSH
21471: CALL_OW 274
21475: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21476: LD_VAR 0 2
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_INT 0
21486: PPUSH
21487: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21491: LD_VAR 0 2
21495: PPUSH
21496: LD_INT 2
21498: PPUSH
21499: LD_INT 0
21501: PPUSH
21502: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21506: LD_VAR 0 2
21510: PPUSH
21511: LD_INT 3
21513: PPUSH
21514: LD_INT 0
21516: PPUSH
21517: CALL_OW 277
// end ;
21521: PPOPN 2
21523: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21524: LD_EXP 50
21528: PUSH
21529: LD_EXP 78
21533: AND
21534: IFFALSE 21631
21536: GO 21538
21538: DISABLE
21539: LD_INT 0
21541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21542: LD_ADDR_VAR 0 1
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_OWVAR 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 3
21571: PUSH
21572: LD_INT 23
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: ST_TO_ADDR
// if not tmp then
21596: LD_VAR 0 1
21600: NOT
21601: IFFALSE 21605
// exit ;
21603: GO 21631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21605: LD_VAR 0 1
21609: PUSH
21610: LD_INT 1
21612: PPUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 12
21622: ARRAY
21623: PPUSH
21624: LD_INT 200
21626: PPUSH
21627: CALL_OW 234
// end ;
21631: PPOPN 1
21633: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21634: LD_EXP 50
21638: PUSH
21639: LD_EXP 79
21643: AND
21644: IFFALSE 21723
21646: GO 21648
21648: DISABLE
21649: LD_INT 0
21651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21652: LD_ADDR_VAR 0 1
21656: PUSH
21657: LD_INT 22
21659: PUSH
21660: LD_OWVAR 2
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 21
21671: PUSH
21672: LD_INT 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 69
21687: ST_TO_ADDR
// if not tmp then
21688: LD_VAR 0 1
21692: NOT
21693: IFFALSE 21697
// exit ;
21695: GO 21723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21697: LD_VAR 0 1
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_VAR 0 1
21709: PPUSH
21710: CALL_OW 12
21714: ARRAY
21715: PPUSH
21716: LD_INT 60
21718: PPUSH
21719: CALL_OW 234
// end ;
21723: PPOPN 1
21725: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21726: LD_EXP 50
21730: PUSH
21731: LD_EXP 80
21735: AND
21736: IFFALSE 21835
21738: GO 21740
21740: DISABLE
21741: LD_INT 0
21743: PPUSH
21744: PPUSH
// begin enable ;
21745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21746: LD_ADDR_VAR 0 1
21750: PUSH
21751: LD_INT 22
21753: PUSH
21754: LD_OWVAR 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 61
21765: PUSH
21766: EMPTY
21767: LIST
21768: PUSH
21769: LD_INT 33
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 1
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21835
// for i in tmp do
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_VAR 0 1
21807: PUSH
21808: FOR_IN
21809: IFFALSE 21833
// if IsControledBy ( i ) then
21811: LD_VAR 0 2
21815: PPUSH
21816: CALL_OW 312
21820: IFFALSE 21831
// ComUnlink ( i ) ;
21822: LD_VAR 0 2
21826: PPUSH
21827: CALL_OW 136
21831: GO 21808
21833: POP
21834: POP
// end ;
21835: PPOPN 2
21837: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21838: LD_EXP 50
21842: PUSH
21843: LD_EXP 81
21847: AND
21848: IFFALSE 21988
21850: GO 21852
21852: DISABLE
21853: LD_INT 0
21855: PPUSH
21856: PPUSH
// begin ToLua ( displayPowell(); ) ;
21857: LD_STRING displayPowell();
21859: PPUSH
21860: CALL_OW 559
// uc_side := 0 ;
21864: LD_ADDR_OWVAR 20
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// uc_nation := 2 ;
21872: LD_ADDR_OWVAR 21
21876: PUSH
21877: LD_INT 2
21879: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21880: LD_ADDR_OWVAR 37
21884: PUSH
21885: LD_INT 14
21887: ST_TO_ADDR
// vc_engine := engine_siberite ;
21888: LD_ADDR_OWVAR 39
21892: PUSH
21893: LD_INT 3
21895: ST_TO_ADDR
// vc_control := control_apeman ;
21896: LD_ADDR_OWVAR 38
21900: PUSH
21901: LD_INT 5
21903: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21904: LD_ADDR_OWVAR 40
21908: PUSH
21909: LD_INT 29
21911: ST_TO_ADDR
// un := CreateVehicle ;
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: CALL_OW 45
21921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21922: LD_VAR 0 2
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21934: LD_INT 35
21936: PPUSH
21937: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_INT 22
21948: PUSH
21949: LD_OWVAR 2
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: PPUSH
21963: LD_VAR 0 2
21967: PPUSH
21968: CALL_OW 74
21972: PPUSH
21973: CALL_OW 115
// until IsDead ( un ) ;
21977: LD_VAR 0 2
21981: PPUSH
21982: CALL_OW 301
21986: IFFALSE 21934
// end ;
21988: PPOPN 2
21990: END
// every 0 0$1 trigger StreamModeActive and sStu do
21991: LD_EXP 50
21995: PUSH
21996: LD_EXP 89
22000: AND
22001: IFFALSE 22017
22003: GO 22005
22005: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22006: LD_STRING displayStucuk();
22008: PPUSH
22009: CALL_OW 559
// ResetFog ;
22013: CALL_OW 335
// end ;
22017: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22018: LD_EXP 50
22022: PUSH
22023: LD_EXP 82
22027: AND
22028: IFFALSE 22169
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 21
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: ST_TO_ADDR
// if not tmp then
22073: LD_VAR 0 2
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22169
// un := tmp [ rand ( 1 , tmp ) ] ;
22082: LD_ADDR_VAR 0 1
22086: PUSH
22087: LD_VAR 0 2
22091: PUSH
22092: LD_INT 1
22094: PPUSH
22095: LD_VAR 0 2
22099: PPUSH
22100: CALL_OW 12
22104: ARRAY
22105: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22106: LD_VAR 0 1
22110: PPUSH
22111: LD_INT 0
22113: PPUSH
22114: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22118: LD_VAR 0 1
22122: PPUSH
22123: LD_OWVAR 3
22127: PUSH
22128: LD_VAR 0 1
22132: DIFF
22133: PPUSH
22134: LD_VAR 0 1
22138: PPUSH
22139: CALL_OW 74
22143: PPUSH
22144: CALL_OW 115
// wait ( 0 0$20 ) ;
22148: LD_INT 700
22150: PPUSH
22151: CALL_OW 67
// SetSide ( un , your_side ) ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_OWVAR 2
22164: PPUSH
22165: CALL_OW 235
// end ;
22169: PPOPN 2
22171: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22172: LD_EXP 50
22176: PUSH
22177: LD_EXP 83
22181: AND
22182: IFFALSE 22288
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22190: LD_ADDR_VAR 0 1
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_OWVAR 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 30
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PPUSH
22239: CALL_OW 69
22243: ST_TO_ADDR
// if not depot then
22244: LD_VAR 0 1
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22288
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22253: LD_VAR 0 1
22257: PUSH
22258: LD_INT 1
22260: ARRAY
22261: PPUSH
22262: CALL_OW 250
22266: PPUSH
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: CALL_OW 251
22280: PPUSH
22281: LD_INT 70
22283: PPUSH
22284: CALL_OW 495
// end ;
22288: PPOPN 1
22290: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22291: LD_EXP 50
22295: PUSH
22296: LD_EXP 84
22300: AND
22301: IFFALSE 22512
22303: GO 22305
22305: DISABLE
22306: LD_INT 0
22308: PPUSH
22309: PPUSH
22310: PPUSH
22311: PPUSH
22312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22313: LD_ADDR_VAR 0 5
22317: PUSH
22318: LD_INT 22
22320: PUSH
22321: LD_OWVAR 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 21
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 69
22348: ST_TO_ADDR
// if not tmp then
22349: LD_VAR 0 5
22353: NOT
22354: IFFALSE 22358
// exit ;
22356: GO 22512
// for i in tmp do
22358: LD_ADDR_VAR 0 1
22362: PUSH
22363: LD_VAR 0 5
22367: PUSH
22368: FOR_IN
22369: IFFALSE 22510
// begin d := rand ( 0 , 5 ) ;
22371: LD_ADDR_VAR 0 4
22375: PUSH
22376: LD_INT 0
22378: PPUSH
22379: LD_INT 5
22381: PPUSH
22382: CALL_OW 12
22386: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22387: LD_ADDR_VAR 0 2
22391: PUSH
22392: LD_VAR 0 1
22396: PPUSH
22397: CALL_OW 250
22401: PPUSH
22402: LD_VAR 0 4
22406: PPUSH
22407: LD_INT 3
22409: PPUSH
22410: LD_INT 12
22412: PPUSH
22413: CALL_OW 12
22417: PPUSH
22418: CALL_OW 272
22422: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 251
22437: PPUSH
22438: LD_VAR 0 4
22442: PPUSH
22443: LD_INT 3
22445: PPUSH
22446: LD_INT 12
22448: PPUSH
22449: CALL_OW 12
22453: PPUSH
22454: CALL_OW 273
22458: ST_TO_ADDR
// if ValidHex ( x , y ) then
22459: LD_VAR 0 2
22463: PPUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: CALL_OW 488
22473: IFFALSE 22508
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: LD_VAR 0 2
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 3
22492: PPUSH
22493: LD_INT 6
22495: PPUSH
22496: CALL_OW 12
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: CALL_OW 483
// end ;
22508: GO 22368
22510: POP
22511: POP
// end ;
22512: PPOPN 5
22514: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22515: LD_EXP 50
22519: PUSH
22520: LD_EXP 85
22524: AND
22525: IFFALSE 22619
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_OWVAR 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 32
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 21
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PPUSH
22576: CALL_OW 69
22580: ST_TO_ADDR
// if not tmp then
22581: LD_VAR 0 2
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 22619
// for i in tmp do
22590: LD_ADDR_VAR 0 1
22594: PUSH
22595: LD_VAR 0 2
22599: PUSH
22600: FOR_IN
22601: IFFALSE 22617
// SetFuel ( i , 0 ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: LD_INT 0
22610: PPUSH
22611: CALL_OW 240
22615: GO 22600
22617: POP
22618: POP
// end ;
22619: PPOPN 2
22621: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22622: LD_EXP 50
22626: PUSH
22627: LD_EXP 86
22631: AND
22632: IFFALSE 22698
22634: GO 22636
22636: DISABLE
22637: LD_INT 0
22639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_INT 22
22647: PUSH
22648: LD_OWVAR 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 30
22659: PUSH
22660: LD_INT 29
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PPUSH
22671: CALL_OW 69
22675: ST_TO_ADDR
// if not tmp then
22676: LD_VAR 0 1
22680: NOT
22681: IFFALSE 22685
// exit ;
22683: GO 22698
// DestroyUnit ( tmp [ 1 ] ) ;
22685: LD_VAR 0 1
22689: PUSH
22690: LD_INT 1
22692: ARRAY
22693: PPUSH
22694: CALL_OW 65
// end ;
22698: PPOPN 1
22700: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22701: LD_EXP 50
22705: PUSH
22706: LD_EXP 88
22710: AND
22711: IFFALSE 22840
22713: GO 22715
22715: DISABLE
22716: LD_INT 0
22718: PPUSH
// begin uc_side := 0 ;
22719: LD_ADDR_OWVAR 20
22723: PUSH
22724: LD_INT 0
22726: ST_TO_ADDR
// uc_nation := nation_arabian ;
22727: LD_ADDR_OWVAR 21
22731: PUSH
22732: LD_INT 2
22734: ST_TO_ADDR
// hc_gallery :=  ;
22735: LD_ADDR_OWVAR 33
22739: PUSH
22740: LD_STRING 
22742: ST_TO_ADDR
// hc_name :=  ;
22743: LD_ADDR_OWVAR 26
22747: PUSH
22748: LD_STRING 
22750: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22751: LD_INT 1
22753: PPUSH
22754: LD_INT 11
22756: PPUSH
22757: LD_INT 10
22759: PPUSH
22760: CALL_OW 380
// un := CreateHuman ;
22764: LD_ADDR_VAR 0 1
22768: PUSH
22769: CALL_OW 44
22773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22786: LD_INT 35
22788: PPUSH
22789: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22793: LD_VAR 0 1
22797: PPUSH
22798: LD_INT 22
22800: PUSH
22801: LD_OWVAR 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 74
22824: PPUSH
22825: CALL_OW 115
// until IsDead ( un ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 301
22838: IFFALSE 22786
// end ;
22840: PPOPN 1
22842: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22843: LD_EXP 50
22847: PUSH
22848: LD_EXP 90
22852: AND
22853: IFFALSE 22865
22855: GO 22857
22857: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22858: LD_STRING earthquake(getX(game), 0, 32)
22860: PPUSH
22861: CALL_OW 559
22865: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22866: LD_EXP 50
22870: PUSH
22871: LD_EXP 91
22875: AND
22876: IFFALSE 22967
22878: GO 22880
22880: DISABLE
22881: LD_INT 0
22883: PPUSH
// begin enable ;
22884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22885: LD_ADDR_VAR 0 1
22889: PUSH
22890: LD_INT 22
22892: PUSH
22893: LD_OWVAR 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 21
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 33
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 69
22931: ST_TO_ADDR
// if not tmp then
22932: LD_VAR 0 1
22936: NOT
22937: IFFALSE 22941
// exit ;
22939: GO 22967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22941: LD_VAR 0 1
22945: PUSH
22946: LD_INT 1
22948: PPUSH
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 12
22958: ARRAY
22959: PPUSH
22960: LD_INT 1
22962: PPUSH
22963: CALL_OW 234
// end ;
22967: PPOPN 1
22969: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22970: LD_EXP 50
22974: PUSH
22975: LD_EXP 92
22979: AND
22980: IFFALSE 23121
22982: GO 22984
22984: DISABLE
22985: LD_INT 0
22987: PPUSH
22988: PPUSH
22989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: LD_INT 22
22997: PUSH
22998: LD_OWVAR 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 25
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PPUSH
23021: CALL_OW 69
23025: ST_TO_ADDR
// if not tmp then
23026: LD_VAR 0 3
23030: NOT
23031: IFFALSE 23035
// exit ;
23033: GO 23121
// un := tmp [ rand ( 1 , tmp ) ] ;
23035: LD_ADDR_VAR 0 2
23039: PUSH
23040: LD_VAR 0 3
23044: PUSH
23045: LD_INT 1
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: CALL_OW 12
23057: ARRAY
23058: ST_TO_ADDR
// if Crawls ( un ) then
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 318
23068: IFFALSE 23079
// ComWalk ( un ) ;
23070: LD_VAR 0 2
23074: PPUSH
23075: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23079: LD_VAR 0 2
23083: PPUSH
23084: LD_INT 9
23086: PPUSH
23087: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23091: LD_INT 28
23093: PPUSH
23094: LD_OWVAR 2
23098: PPUSH
23099: LD_INT 2
23101: PPUSH
23102: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23106: LD_INT 29
23108: PPUSH
23109: LD_OWVAR 2
23113: PPUSH
23114: LD_INT 2
23116: PPUSH
23117: CALL_OW 322
// end ;
23121: PPOPN 3
23123: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23124: LD_EXP 50
23128: PUSH
23129: LD_EXP 93
23133: AND
23134: IFFALSE 23245
23136: GO 23138
23138: DISABLE
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_OWVAR 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 25
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PPUSH
23175: CALL_OW 69
23179: ST_TO_ADDR
// if not tmp then
23180: LD_VAR 0 3
23184: NOT
23185: IFFALSE 23189
// exit ;
23187: GO 23245
// un := tmp [ rand ( 1 , tmp ) ] ;
23189: LD_ADDR_VAR 0 2
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 1
23201: PPUSH
23202: LD_VAR 0 3
23206: PPUSH
23207: CALL_OW 12
23211: ARRAY
23212: ST_TO_ADDR
// if Crawls ( un ) then
23213: LD_VAR 0 2
23217: PPUSH
23218: CALL_OW 318
23222: IFFALSE 23233
// ComWalk ( un ) ;
23224: LD_VAR 0 2
23228: PPUSH
23229: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23233: LD_VAR 0 2
23237: PPUSH
23238: LD_INT 8
23240: PPUSH
23241: CALL_OW 336
// end ;
23245: PPOPN 3
23247: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23248: LD_EXP 50
23252: PUSH
23253: LD_EXP 94
23257: AND
23258: IFFALSE 23402
23260: GO 23262
23262: DISABLE
23263: LD_INT 0
23265: PPUSH
23266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23267: LD_ADDR_VAR 0 2
23271: PUSH
23272: LD_INT 22
23274: PUSH
23275: LD_OWVAR 2
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 21
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 34
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 34
23309: PUSH
23310: LD_INT 51
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 34
23319: PUSH
23320: LD_INT 32
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: PPUSH
23338: CALL_OW 69
23342: ST_TO_ADDR
// if not tmp then
23343: LD_VAR 0 2
23347: NOT
23348: IFFALSE 23352
// exit ;
23350: GO 23402
// for i in tmp do
23352: LD_ADDR_VAR 0 1
23356: PUSH
23357: LD_VAR 0 2
23361: PUSH
23362: FOR_IN
23363: IFFALSE 23400
// if GetCargo ( i , mat_artifact ) = 0 then
23365: LD_VAR 0 1
23369: PPUSH
23370: LD_INT 4
23372: PPUSH
23373: CALL_OW 289
23377: PUSH
23378: LD_INT 0
23380: EQUAL
23381: IFFALSE 23398
// SetCargo ( i , mat_siberit , 100 ) ;
23383: LD_VAR 0 1
23387: PPUSH
23388: LD_INT 3
23390: PPUSH
23391: LD_INT 100
23393: PPUSH
23394: CALL_OW 290
23398: GO 23362
23400: POP
23401: POP
// end ;
23402: PPOPN 2
23404: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23405: LD_EXP 50
23409: PUSH
23410: LD_EXP 95
23414: AND
23415: IFFALSE 23598
23417: GO 23419
23419: DISABLE
23420: LD_INT 0
23422: PPUSH
23423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23424: LD_ADDR_VAR 0 2
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_OWVAR 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PPUSH
23441: CALL_OW 69
23445: ST_TO_ADDR
// if not tmp then
23446: LD_VAR 0 2
23450: NOT
23451: IFFALSE 23455
// exit ;
23453: GO 23598
// for i := 1 to 2 do
23455: LD_ADDR_VAR 0 1
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_INT 2
23467: PUSH
23468: FOR_TO
23469: IFFALSE 23596
// begin uc_side := your_side ;
23471: LD_ADDR_OWVAR 20
23475: PUSH
23476: LD_OWVAR 2
23480: ST_TO_ADDR
// uc_nation := nation_american ;
23481: LD_ADDR_OWVAR 21
23485: PUSH
23486: LD_INT 1
23488: ST_TO_ADDR
// vc_chassis := us_morphling ;
23489: LD_ADDR_OWVAR 37
23493: PUSH
23494: LD_INT 5
23496: ST_TO_ADDR
// vc_engine := engine_siberite ;
23497: LD_ADDR_OWVAR 39
23501: PUSH
23502: LD_INT 3
23504: ST_TO_ADDR
// vc_control := control_computer ;
23505: LD_ADDR_OWVAR 38
23509: PUSH
23510: LD_INT 3
23512: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23513: LD_ADDR_OWVAR 40
23517: PUSH
23518: LD_INT 10
23520: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23521: LD_VAR 0 2
23525: PUSH
23526: LD_INT 1
23528: ARRAY
23529: PPUSH
23530: CALL_OW 310
23534: NOT
23535: IFFALSE 23582
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23537: CALL_OW 45
23541: PPUSH
23542: LD_VAR 0 2
23546: PUSH
23547: LD_INT 1
23549: ARRAY
23550: PPUSH
23551: CALL_OW 250
23555: PPUSH
23556: LD_VAR 0 2
23560: PUSH
23561: LD_INT 1
23563: ARRAY
23564: PPUSH
23565: CALL_OW 251
23569: PPUSH
23570: LD_INT 12
23572: PPUSH
23573: LD_INT 1
23575: PPUSH
23576: CALL_OW 50
23580: GO 23594
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23582: CALL_OW 45
23586: PPUSH
23587: LD_INT 1
23589: PPUSH
23590: CALL_OW 51
// end ;
23594: GO 23468
23596: POP
23597: POP
// end ;
23598: PPOPN 2
23600: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23601: LD_EXP 50
23605: PUSH
23606: LD_EXP 96
23610: AND
23611: IFFALSE 23833
23613: GO 23615
23615: DISABLE
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23624: LD_ADDR_VAR 0 6
23628: PUSH
23629: LD_INT 22
23631: PUSH
23632: LD_OWVAR 2
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 21
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 3
23653: PUSH
23654: LD_INT 23
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 69
23677: ST_TO_ADDR
// if not tmp then
23678: LD_VAR 0 6
23682: NOT
23683: IFFALSE 23687
// exit ;
23685: GO 23833
// s1 := rand ( 1 , 4 ) ;
23687: LD_ADDR_VAR 0 2
23691: PUSH
23692: LD_INT 1
23694: PPUSH
23695: LD_INT 4
23697: PPUSH
23698: CALL_OW 12
23702: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23703: LD_ADDR_VAR 0 4
23707: PUSH
23708: LD_VAR 0 6
23712: PUSH
23713: LD_INT 1
23715: ARRAY
23716: PPUSH
23717: LD_VAR 0 2
23721: PPUSH
23722: CALL_OW 259
23726: ST_TO_ADDR
// if s1 = 1 then
23727: LD_VAR 0 2
23731: PUSH
23732: LD_INT 1
23734: EQUAL
23735: IFFALSE 23755
// s2 := rand ( 2 , 4 ) else
23737: LD_ADDR_VAR 0 3
23741: PUSH
23742: LD_INT 2
23744: PPUSH
23745: LD_INT 4
23747: PPUSH
23748: CALL_OW 12
23752: ST_TO_ADDR
23753: GO 23763
// s2 := 1 ;
23755: LD_ADDR_VAR 0 3
23759: PUSH
23760: LD_INT 1
23762: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23763: LD_ADDR_VAR 0 5
23767: PUSH
23768: LD_VAR 0 6
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: LD_VAR 0 3
23781: PPUSH
23782: CALL_OW 259
23786: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23787: LD_VAR 0 6
23791: PUSH
23792: LD_INT 1
23794: ARRAY
23795: PPUSH
23796: LD_VAR 0 2
23800: PPUSH
23801: LD_VAR 0 5
23805: PPUSH
23806: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23810: LD_VAR 0 6
23814: PUSH
23815: LD_INT 1
23817: ARRAY
23818: PPUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: LD_VAR 0 4
23828: PPUSH
23829: CALL_OW 237
// end ;
23833: PPOPN 6
23835: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23836: LD_EXP 50
23840: PUSH
23841: LD_EXP 97
23845: AND
23846: IFFALSE 23925
23848: GO 23850
23850: DISABLE
23851: LD_INT 0
23853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23854: LD_ADDR_VAR 0 1
23858: PUSH
23859: LD_INT 22
23861: PUSH
23862: LD_OWVAR 2
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PPUSH
23885: CALL_OW 69
23889: ST_TO_ADDR
// if not tmp then
23890: LD_VAR 0 1
23894: NOT
23895: IFFALSE 23899
// exit ;
23897: GO 23925
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23899: LD_VAR 0 1
23903: PUSH
23904: LD_INT 1
23906: PPUSH
23907: LD_VAR 0 1
23911: PPUSH
23912: CALL_OW 12
23916: ARRAY
23917: PPUSH
23918: LD_INT 1
23920: PPUSH
23921: CALL_OW 234
// end ;
23925: PPOPN 1
23927: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23928: LD_EXP 50
23932: PUSH
23933: LD_EXP 98
23937: AND
23938: IFFALSE 24050
23940: GO 23942
23942: DISABLE
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23947: LD_ADDR_VAR 0 2
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_OWVAR 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: LD_INT 30
23969: PUSH
23970: LD_INT 27
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 30
23979: PUSH
23980: LD_INT 26
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: LD_INT 28
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PPUSH
24007: CALL_OW 69
24011: ST_TO_ADDR
// if not tmp then
24012: LD_VAR 0 2
24016: NOT
24017: IFFALSE 24021
// exit ;
24019: GO 24050
// for i in tmp do
24021: LD_ADDR_VAR 0 1
24025: PUSH
24026: LD_VAR 0 2
24030: PUSH
24031: FOR_IN
24032: IFFALSE 24048
// SetLives ( i , 1 ) ;
24034: LD_VAR 0 1
24038: PPUSH
24039: LD_INT 1
24041: PPUSH
24042: CALL_OW 234
24046: GO 24031
24048: POP
24049: POP
// end ;
24050: PPOPN 2
24052: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24053: LD_EXP 50
24057: PUSH
24058: LD_EXP 99
24062: AND
24063: IFFALSE 24350
24065: GO 24067
24067: DISABLE
24068: LD_INT 0
24070: PPUSH
24071: PPUSH
24072: PPUSH
// begin i := rand ( 1 , 7 ) ;
24073: LD_ADDR_VAR 0 1
24077: PUSH
24078: LD_INT 1
24080: PPUSH
24081: LD_INT 7
24083: PPUSH
24084: CALL_OW 12
24088: ST_TO_ADDR
// case i of 1 :
24089: LD_VAR 0 1
24093: PUSH
24094: LD_INT 1
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24112
24102: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24103: LD_STRING earthquake(getX(game), 0, 32)
24105: PPUSH
24106: CALL_OW 559
24110: GO 24350
24112: LD_INT 2
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24134
24120: POP
// begin ToLua ( displayStucuk(); ) ;
24121: LD_STRING displayStucuk();
24123: PPUSH
24124: CALL_OW 559
// ResetFog ;
24128: CALL_OW 335
// end ; 3 :
24132: GO 24350
24134: LD_INT 3
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24246
24142: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24143: LD_ADDR_VAR 0 2
24147: PUSH
24148: LD_INT 22
24150: PUSH
24151: LD_OWVAR 2
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 25
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PPUSH
24174: CALL_OW 69
24178: ST_TO_ADDR
// if not tmp then
24179: LD_VAR 0 2
24183: NOT
24184: IFFALSE 24188
// exit ;
24186: GO 24350
// un := tmp [ rand ( 1 , tmp ) ] ;
24188: LD_ADDR_VAR 0 3
24192: PUSH
24193: LD_VAR 0 2
24197: PUSH
24198: LD_INT 1
24200: PPUSH
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 12
24210: ARRAY
24211: ST_TO_ADDR
// if Crawls ( un ) then
24212: LD_VAR 0 3
24216: PPUSH
24217: CALL_OW 318
24221: IFFALSE 24232
// ComWalk ( un ) ;
24223: LD_VAR 0 3
24227: PPUSH
24228: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 8
24239: PPUSH
24240: CALL_OW 336
// end ; 4 :
24244: GO 24350
24246: LD_INT 4
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24328
24254: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24255: LD_ADDR_VAR 0 2
24259: PUSH
24260: LD_INT 22
24262: PUSH
24263: LD_OWVAR 2
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 30
24274: PUSH
24275: LD_INT 29
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 69
24290: ST_TO_ADDR
// if not tmp then
24291: LD_VAR 0 2
24295: NOT
24296: IFFALSE 24300
// exit ;
24298: GO 24350
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 1
24307: ARRAY
24308: PPUSH
24309: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24313: LD_VAR 0 2
24317: PUSH
24318: LD_INT 1
24320: ARRAY
24321: PPUSH
24322: CALL_OW 65
// end ; 5 .. 7 :
24326: GO 24350
24328: LD_INT 5
24330: DOUBLE
24331: GREATEREQUAL
24332: IFFALSE 24340
24334: LD_INT 7
24336: DOUBLE
24337: LESSEQUAL
24338: IFTRUE 24342
24340: GO 24349
24342: POP
// StreamSibBomb ; end ;
24343: CALL 20587 0 0
24347: GO 24350
24349: POP
// end ;
24350: PPOPN 3
24352: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24353: LD_EXP 50
24357: PUSH
24358: LD_EXP 100
24362: AND
24363: IFFALSE 24519
24365: GO 24367
24367: DISABLE
24368: LD_INT 0
24370: PPUSH
24371: PPUSH
24372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24373: LD_ADDR_VAR 0 2
24377: PUSH
24378: LD_INT 81
24380: PUSH
24381: LD_OWVAR 2
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: LD_INT 21
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 21
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL_OW 69
24426: ST_TO_ADDR
// if not tmp then
24427: LD_VAR 0 2
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24519
// p := 0 ;
24436: LD_ADDR_VAR 0 3
24440: PUSH
24441: LD_INT 0
24443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24444: LD_INT 35
24446: PPUSH
24447: CALL_OW 67
// p := p + 1 ;
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_VAR 0 3
24460: PUSH
24461: LD_INT 1
24463: PLUS
24464: ST_TO_ADDR
// for i in tmp do
24465: LD_ADDR_VAR 0 1
24469: PUSH
24470: LD_VAR 0 2
24474: PUSH
24475: FOR_IN
24476: IFFALSE 24507
// if GetLives ( i ) < 1000 then
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 256
24487: PUSH
24488: LD_INT 1000
24490: LESS
24491: IFFALSE 24505
// SetLives ( i , 1000 ) ;
24493: LD_VAR 0 1
24497: PPUSH
24498: LD_INT 1000
24500: PPUSH
24501: CALL_OW 234
24505: GO 24475
24507: POP
24508: POP
// until p > 20 ;
24509: LD_VAR 0 3
24513: PUSH
24514: LD_INT 20
24516: GREATER
24517: IFFALSE 24444
// end ;
24519: PPOPN 3
24521: END
// every 0 0$1 trigger StreamModeActive and sTime do
24522: LD_EXP 50
24526: PUSH
24527: LD_EXP 101
24531: AND
24532: IFFALSE 24567
24534: GO 24536
24536: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24537: LD_INT 28
24539: PPUSH
24540: LD_OWVAR 2
24544: PPUSH
24545: LD_INT 2
24547: PPUSH
24548: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24552: LD_INT 30
24554: PPUSH
24555: LD_OWVAR 2
24559: PPUSH
24560: LD_INT 2
24562: PPUSH
24563: CALL_OW 322
// end ;
24567: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24568: LD_EXP 50
24572: PUSH
24573: LD_EXP 102
24577: AND
24578: IFFALSE 24699
24580: GO 24582
24582: DISABLE
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24587: LD_ADDR_VAR 0 2
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_OWVAR 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 3
24616: PUSH
24617: LD_INT 23
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: PPUSH
24636: CALL_OW 69
24640: ST_TO_ADDR
// if not tmp then
24641: LD_VAR 0 2
24645: NOT
24646: IFFALSE 24650
// exit ;
24648: GO 24699
// for i in tmp do
24650: LD_ADDR_VAR 0 1
24654: PUSH
24655: LD_VAR 0 2
24659: PUSH
24660: FOR_IN
24661: IFFALSE 24697
// begin if Crawls ( i ) then
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 318
24672: IFFALSE 24683
// ComWalk ( i ) ;
24674: LD_VAR 0 1
24678: PPUSH
24679: CALL_OW 138
// SetClass ( i , 2 ) ;
24683: LD_VAR 0 1
24687: PPUSH
24688: LD_INT 2
24690: PPUSH
24691: CALL_OW 336
// end ;
24695: GO 24660
24697: POP
24698: POP
// end ;
24699: PPOPN 2
24701: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24702: LD_EXP 50
24706: PUSH
24707: LD_EXP 103
24711: AND
24712: IFFALSE 25000
24714: GO 24716
24716: DISABLE
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
24721: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24722: LD_OWVAR 2
24726: PPUSH
24727: LD_INT 9
24729: PPUSH
24730: LD_INT 1
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24740: LD_INT 9
24742: PPUSH
24743: LD_OWVAR 2
24747: PPUSH
24748: CALL_OW 343
// uc_side := 9 ;
24752: LD_ADDR_OWVAR 20
24756: PUSH
24757: LD_INT 9
24759: ST_TO_ADDR
// uc_nation := 2 ;
24760: LD_ADDR_OWVAR 21
24764: PUSH
24765: LD_INT 2
24767: ST_TO_ADDR
// hc_name := Dark Warrior ;
24768: LD_ADDR_OWVAR 26
24772: PUSH
24773: LD_STRING Dark Warrior
24775: ST_TO_ADDR
// hc_gallery :=  ;
24776: LD_ADDR_OWVAR 33
24780: PUSH
24781: LD_STRING 
24783: ST_TO_ADDR
// hc_noskilllimit := true ;
24784: LD_ADDR_OWVAR 76
24788: PUSH
24789: LD_INT 1
24791: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24792: LD_ADDR_OWVAR 31
24796: PUSH
24797: LD_INT 30
24799: PUSH
24800: LD_INT 30
24802: PUSH
24803: LD_INT 30
24805: PUSH
24806: LD_INT 30
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: ST_TO_ADDR
// un := CreateHuman ;
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: CALL_OW 44
24824: ST_TO_ADDR
// hc_noskilllimit := false ;
24825: LD_ADDR_OWVAR 76
24829: PUSH
24830: LD_INT 0
24832: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24833: LD_VAR 0 3
24837: PPUSH
24838: LD_INT 1
24840: PPUSH
24841: CALL_OW 51
// ToLua ( playRanger() ) ;
24845: LD_STRING playRanger()
24847: PPUSH
24848: CALL_OW 559
// p := 0 ;
24852: LD_ADDR_VAR 0 2
24856: PUSH
24857: LD_INT 0
24859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24860: LD_INT 35
24862: PPUSH
24863: CALL_OW 67
// p := p + 1 ;
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: LD_VAR 0 2
24876: PUSH
24877: LD_INT 1
24879: PLUS
24880: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24881: LD_VAR 0 3
24885: PPUSH
24886: CALL_OW 256
24890: PUSH
24891: LD_INT 1000
24893: LESS
24894: IFFALSE 24908
// SetLives ( un , 1000 ) ;
24896: LD_VAR 0 3
24900: PPUSH
24901: LD_INT 1000
24903: PPUSH
24904: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24908: LD_VAR 0 3
24912: PPUSH
24913: LD_INT 81
24915: PUSH
24916: LD_OWVAR 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 91
24927: PUSH
24928: LD_VAR 0 3
24932: PUSH
24933: LD_INT 30
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PPUSH
24945: CALL_OW 69
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: CALL_OW 74
24959: PPUSH
24960: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24964: LD_VAR 0 2
24968: PUSH
24969: LD_INT 80
24971: GREATER
24972: PUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 301
24982: OR
24983: IFFALSE 24860
// if un then
24985: LD_VAR 0 3
24989: IFFALSE 25000
// RemoveUnit ( un ) ;
24991: LD_VAR 0 3
24995: PPUSH
24996: CALL_OW 64
// end ;
25000: PPOPN 3
25002: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25003: LD_EXP 104
25007: IFFALSE 25123
25009: GO 25011
25011: DISABLE
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
25016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25017: LD_ADDR_VAR 0 2
25021: PUSH
25022: LD_INT 81
25024: PUSH
25025: LD_OWVAR 2
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25053: LD_STRING playComputer()
25055: PPUSH
25056: CALL_OW 559
// if not tmp then
25060: LD_VAR 0 2
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 25123
// for i in tmp do
25069: LD_ADDR_VAR 0 1
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25121
// for j := 1 to 4 do
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: DOUBLE
25088: LD_INT 1
25090: DEC
25091: ST_TO_ADDR
25092: LD_INT 4
25094: PUSH
25095: FOR_TO
25096: IFFALSE 25117
// SetSkill ( i , j , 10 ) ;
25098: LD_VAR 0 1
25102: PPUSH
25103: LD_VAR 0 3
25107: PPUSH
25108: LD_INT 10
25110: PPUSH
25111: CALL_OW 237
25115: GO 25095
25117: POP
25118: POP
25119: GO 25079
25121: POP
25122: POP
// end ;
25123: PPOPN 3
25125: END
// every 0 0$1 trigger s30 do var i , tmp ;
25126: LD_EXP 105
25130: IFFALSE 25199
25132: GO 25134
25134: DISABLE
25135: LD_INT 0
25137: PPUSH
25138: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_INT 22
25146: PUSH
25147: LD_OWVAR 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PPUSH
25156: CALL_OW 69
25160: ST_TO_ADDR
// if not tmp then
25161: LD_VAR 0 2
25165: NOT
25166: IFFALSE 25170
// exit ;
25168: GO 25199
// for i in tmp do
25170: LD_ADDR_VAR 0 1
25174: PUSH
25175: LD_VAR 0 2
25179: PUSH
25180: FOR_IN
25181: IFFALSE 25197
// SetLives ( i , 300 ) ;
25183: LD_VAR 0 1
25187: PPUSH
25188: LD_INT 300
25190: PPUSH
25191: CALL_OW 234
25195: GO 25180
25197: POP
25198: POP
// end ;
25199: PPOPN 2
25201: END
// every 0 0$1 trigger s60 do var i , tmp ;
25202: LD_EXP 106
25206: IFFALSE 25275
25208: GO 25210
25210: DISABLE
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25215: LD_ADDR_VAR 0 2
25219: PUSH
25220: LD_INT 22
25222: PUSH
25223: LD_OWVAR 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PPUSH
25232: CALL_OW 69
25236: ST_TO_ADDR
// if not tmp then
25237: LD_VAR 0 2
25241: NOT
25242: IFFALSE 25246
// exit ;
25244: GO 25275
// for i in tmp do
25246: LD_ADDR_VAR 0 1
25250: PUSH
25251: LD_VAR 0 2
25255: PUSH
25256: FOR_IN
25257: IFFALSE 25273
// SetLives ( i , 600 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_INT 600
25266: PPUSH
25267: CALL_OW 234
25271: GO 25256
25273: POP
25274: POP
// end ;
25275: PPOPN 2
25277: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25278: LD_INT 0
25280: PPUSH
// case cmd of 301 :
25281: LD_VAR 0 1
25285: PUSH
25286: LD_INT 301
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25326
25294: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25295: LD_VAR 0 6
25299: PPUSH
25300: LD_VAR 0 7
25304: PPUSH
25305: LD_VAR 0 8
25309: PPUSH
25310: LD_VAR 0 4
25314: PPUSH
25315: LD_VAR 0 5
25319: PPUSH
25320: CALL 26527 0 5
25324: GO 25447
25326: LD_INT 302
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25371
25334: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25335: LD_VAR 0 6
25339: PPUSH
25340: LD_VAR 0 7
25344: PPUSH
25345: LD_VAR 0 8
25349: PPUSH
25350: LD_VAR 0 9
25354: PPUSH
25355: LD_VAR 0 4
25359: PPUSH
25360: LD_VAR 0 5
25364: PPUSH
25365: CALL 26618 0 6
25369: GO 25447
25371: LD_INT 303
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25416
25379: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25380: LD_VAR 0 6
25384: PPUSH
25385: LD_VAR 0 7
25389: PPUSH
25390: LD_VAR 0 8
25394: PPUSH
25395: LD_VAR 0 9
25399: PPUSH
25400: LD_VAR 0 4
25404: PPUSH
25405: LD_VAR 0 5
25409: PPUSH
25410: CALL 25452 0 6
25414: GO 25447
25416: LD_INT 304
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25446
25424: POP
// hHackTeleport ( unit , x , y ) ; end ;
25425: LD_VAR 0 2
25429: PPUSH
25430: LD_VAR 0 4
25434: PPUSH
25435: LD_VAR 0 5
25439: PPUSH
25440: CALL 27211 0 3
25444: GO 25447
25446: POP
// end ;
25447: LD_VAR 0 12
25451: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25452: LD_INT 0
25454: PPUSH
25455: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25456: LD_VAR 0 1
25460: PUSH
25461: LD_INT 1
25463: LESS
25464: PUSH
25465: LD_VAR 0 1
25469: PUSH
25470: LD_INT 3
25472: GREATER
25473: OR
25474: PUSH
25475: LD_VAR 0 5
25479: PPUSH
25480: LD_VAR 0 6
25484: PPUSH
25485: CALL_OW 428
25489: OR
25490: IFFALSE 25494
// exit ;
25492: GO 26214
// uc_side := your_side ;
25494: LD_ADDR_OWVAR 20
25498: PUSH
25499: LD_OWVAR 2
25503: ST_TO_ADDR
// uc_nation := nation ;
25504: LD_ADDR_OWVAR 21
25508: PUSH
25509: LD_VAR 0 1
25513: ST_TO_ADDR
// bc_level = 1 ;
25514: LD_ADDR_OWVAR 43
25518: PUSH
25519: LD_INT 1
25521: ST_TO_ADDR
// case btype of 1 :
25522: LD_VAR 0 2
25526: PUSH
25527: LD_INT 1
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25546
25535: POP
// bc_type := b_depot ; 2 :
25536: LD_ADDR_OWVAR 42
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
25544: GO 26158
25546: LD_INT 2
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25554
25552: GO 25565
25554: POP
// bc_type := b_warehouse ; 3 :
25555: LD_ADDR_OWVAR 42
25559: PUSH
25560: LD_INT 1
25562: ST_TO_ADDR
25563: GO 26158
25565: LD_INT 3
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25584
25573: POP
// bc_type := b_lab ; 4 .. 9 :
25574: LD_ADDR_OWVAR 42
25578: PUSH
25579: LD_INT 6
25581: ST_TO_ADDR
25582: GO 26158
25584: LD_INT 4
25586: DOUBLE
25587: GREATEREQUAL
25588: IFFALSE 25596
25590: LD_INT 9
25592: DOUBLE
25593: LESSEQUAL
25594: IFTRUE 25598
25596: GO 25650
25598: POP
// begin bc_type := b_lab_half ;
25599: LD_ADDR_OWVAR 42
25603: PUSH
25604: LD_INT 7
25606: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25607: LD_ADDR_OWVAR 44
25611: PUSH
25612: LD_INT 10
25614: PUSH
25615: LD_INT 11
25617: PUSH
25618: LD_INT 12
25620: PUSH
25621: LD_INT 15
25623: PUSH
25624: LD_INT 14
25626: PUSH
25627: LD_INT 13
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: PUSH
25638: LD_VAR 0 2
25642: PUSH
25643: LD_INT 3
25645: MINUS
25646: ARRAY
25647: ST_TO_ADDR
// end ; 10 .. 13 :
25648: GO 26158
25650: LD_INT 10
25652: DOUBLE
25653: GREATEREQUAL
25654: IFFALSE 25662
25656: LD_INT 13
25658: DOUBLE
25659: LESSEQUAL
25660: IFTRUE 25664
25662: GO 25741
25664: POP
// begin bc_type := b_lab_full ;
25665: LD_ADDR_OWVAR 42
25669: PUSH
25670: LD_INT 8
25672: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25673: LD_ADDR_OWVAR 44
25677: PUSH
25678: LD_INT 10
25680: PUSH
25681: LD_INT 12
25683: PUSH
25684: LD_INT 14
25686: PUSH
25687: LD_INT 13
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: PUSH
25696: LD_VAR 0 2
25700: PUSH
25701: LD_INT 9
25703: MINUS
25704: ARRAY
25705: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25706: LD_ADDR_OWVAR 45
25710: PUSH
25711: LD_INT 11
25713: PUSH
25714: LD_INT 15
25716: PUSH
25717: LD_INT 12
25719: PUSH
25720: LD_INT 15
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: PUSH
25729: LD_VAR 0 2
25733: PUSH
25734: LD_INT 9
25736: MINUS
25737: ARRAY
25738: ST_TO_ADDR
// end ; 14 :
25739: GO 26158
25741: LD_INT 14
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25749
25747: GO 25760
25749: POP
// bc_type := b_workshop ; 15 :
25750: LD_ADDR_OWVAR 42
25754: PUSH
25755: LD_INT 2
25757: ST_TO_ADDR
25758: GO 26158
25760: LD_INT 15
25762: DOUBLE
25763: EQUAL
25764: IFTRUE 25768
25766: GO 25779
25768: POP
// bc_type := b_factory ; 16 :
25769: LD_ADDR_OWVAR 42
25773: PUSH
25774: LD_INT 3
25776: ST_TO_ADDR
25777: GO 26158
25779: LD_INT 16
25781: DOUBLE
25782: EQUAL
25783: IFTRUE 25787
25785: GO 25798
25787: POP
// bc_type := b_ext_gun ; 17 :
25788: LD_ADDR_OWVAR 42
25792: PUSH
25793: LD_INT 17
25795: ST_TO_ADDR
25796: GO 26158
25798: LD_INT 17
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25806
25804: GO 25834
25806: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25807: LD_ADDR_OWVAR 42
25811: PUSH
25812: LD_INT 19
25814: PUSH
25815: LD_INT 23
25817: PUSH
25818: LD_INT 19
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: PUSH
25826: LD_VAR 0 1
25830: ARRAY
25831: ST_TO_ADDR
25832: GO 26158
25834: LD_INT 18
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25853
25842: POP
// bc_type := b_ext_radar ; 19 :
25843: LD_ADDR_OWVAR 42
25847: PUSH
25848: LD_INT 20
25850: ST_TO_ADDR
25851: GO 26158
25853: LD_INT 19
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25872
25861: POP
// bc_type := b_ext_radio ; 20 :
25862: LD_ADDR_OWVAR 42
25866: PUSH
25867: LD_INT 22
25869: ST_TO_ADDR
25870: GO 26158
25872: LD_INT 20
25874: DOUBLE
25875: EQUAL
25876: IFTRUE 25880
25878: GO 25891
25880: POP
// bc_type := b_ext_siberium ; 21 :
25881: LD_ADDR_OWVAR 42
25885: PUSH
25886: LD_INT 21
25888: ST_TO_ADDR
25889: GO 26158
25891: LD_INT 21
25893: DOUBLE
25894: EQUAL
25895: IFTRUE 25899
25897: GO 25910
25899: POP
// bc_type := b_ext_computer ; 22 :
25900: LD_ADDR_OWVAR 42
25904: PUSH
25905: LD_INT 24
25907: ST_TO_ADDR
25908: GO 26158
25910: LD_INT 22
25912: DOUBLE
25913: EQUAL
25914: IFTRUE 25918
25916: GO 25929
25918: POP
// bc_type := b_ext_track ; 23 :
25919: LD_ADDR_OWVAR 42
25923: PUSH
25924: LD_INT 16
25926: ST_TO_ADDR
25927: GO 26158
25929: LD_INT 23
25931: DOUBLE
25932: EQUAL
25933: IFTRUE 25937
25935: GO 25948
25937: POP
// bc_type := b_ext_laser ; 24 :
25938: LD_ADDR_OWVAR 42
25942: PUSH
25943: LD_INT 25
25945: ST_TO_ADDR
25946: GO 26158
25948: LD_INT 24
25950: DOUBLE
25951: EQUAL
25952: IFTRUE 25956
25954: GO 25967
25956: POP
// bc_type := b_control_tower ; 25 :
25957: LD_ADDR_OWVAR 42
25961: PUSH
25962: LD_INT 36
25964: ST_TO_ADDR
25965: GO 26158
25967: LD_INT 25
25969: DOUBLE
25970: EQUAL
25971: IFTRUE 25975
25973: GO 25986
25975: POP
// bc_type := b_breastwork ; 26 :
25976: LD_ADDR_OWVAR 42
25980: PUSH
25981: LD_INT 31
25983: ST_TO_ADDR
25984: GO 26158
25986: LD_INT 26
25988: DOUBLE
25989: EQUAL
25990: IFTRUE 25994
25992: GO 26005
25994: POP
// bc_type := b_bunker ; 27 :
25995: LD_ADDR_OWVAR 42
25999: PUSH
26000: LD_INT 32
26002: ST_TO_ADDR
26003: GO 26158
26005: LD_INT 27
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26024
26013: POP
// bc_type := b_turret ; 28 :
26014: LD_ADDR_OWVAR 42
26018: PUSH
26019: LD_INT 33
26021: ST_TO_ADDR
26022: GO 26158
26024: LD_INT 28
26026: DOUBLE
26027: EQUAL
26028: IFTRUE 26032
26030: GO 26043
26032: POP
// bc_type := b_armoury ; 29 :
26033: LD_ADDR_OWVAR 42
26037: PUSH
26038: LD_INT 4
26040: ST_TO_ADDR
26041: GO 26158
26043: LD_INT 29
26045: DOUBLE
26046: EQUAL
26047: IFTRUE 26051
26049: GO 26062
26051: POP
// bc_type := b_barracks ; 30 :
26052: LD_ADDR_OWVAR 42
26056: PUSH
26057: LD_INT 5
26059: ST_TO_ADDR
26060: GO 26158
26062: LD_INT 30
26064: DOUBLE
26065: EQUAL
26066: IFTRUE 26070
26068: GO 26081
26070: POP
// bc_type := b_solar_power ; 31 :
26071: LD_ADDR_OWVAR 42
26075: PUSH
26076: LD_INT 27
26078: ST_TO_ADDR
26079: GO 26158
26081: LD_INT 31
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26100
26089: POP
// bc_type := b_oil_power ; 32 :
26090: LD_ADDR_OWVAR 42
26094: PUSH
26095: LD_INT 26
26097: ST_TO_ADDR
26098: GO 26158
26100: LD_INT 32
26102: DOUBLE
26103: EQUAL
26104: IFTRUE 26108
26106: GO 26119
26108: POP
// bc_type := b_siberite_power ; 33 :
26109: LD_ADDR_OWVAR 42
26113: PUSH
26114: LD_INT 28
26116: ST_TO_ADDR
26117: GO 26158
26119: LD_INT 33
26121: DOUBLE
26122: EQUAL
26123: IFTRUE 26127
26125: GO 26138
26127: POP
// bc_type := b_oil_mine ; 34 :
26128: LD_ADDR_OWVAR 42
26132: PUSH
26133: LD_INT 29
26135: ST_TO_ADDR
26136: GO 26158
26138: LD_INT 34
26140: DOUBLE
26141: EQUAL
26142: IFTRUE 26146
26144: GO 26157
26146: POP
// bc_type := b_siberite_mine ; end ;
26147: LD_ADDR_OWVAR 42
26151: PUSH
26152: LD_INT 30
26154: ST_TO_ADDR
26155: GO 26158
26157: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26158: LD_ADDR_VAR 0 8
26162: PUSH
26163: LD_VAR 0 5
26167: PPUSH
26168: LD_VAR 0 6
26172: PPUSH
26173: LD_VAR 0 3
26177: PPUSH
26178: CALL_OW 47
26182: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26183: LD_OWVAR 42
26187: PUSH
26188: LD_INT 32
26190: PUSH
26191: LD_INT 33
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: IN
26198: IFFALSE 26214
// PlaceWeaponTurret ( b , weapon ) ;
26200: LD_VAR 0 8
26204: PPUSH
26205: LD_VAR 0 4
26209: PPUSH
26210: CALL_OW 431
// end ;
26214: LD_VAR 0 7
26218: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26219: LD_INT 0
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26225: LD_ADDR_VAR 0 4
26229: PUSH
26230: LD_INT 22
26232: PUSH
26233: LD_OWVAR 2
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 30
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 30
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PPUSH
26274: CALL_OW 69
26278: ST_TO_ADDR
// if not tmp then
26279: LD_VAR 0 4
26283: NOT
26284: IFFALSE 26288
// exit ;
26286: GO 26347
// for i in tmp do
26288: LD_ADDR_VAR 0 2
26292: PUSH
26293: LD_VAR 0 4
26297: PUSH
26298: FOR_IN
26299: IFFALSE 26345
// for j = 1 to 3 do
26301: LD_ADDR_VAR 0 3
26305: PUSH
26306: DOUBLE
26307: LD_INT 1
26309: DEC
26310: ST_TO_ADDR
26311: LD_INT 3
26313: PUSH
26314: FOR_TO
26315: IFFALSE 26341
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26317: LD_VAR 0 2
26321: PPUSH
26322: CALL_OW 274
26326: PPUSH
26327: LD_VAR 0 3
26331: PPUSH
26332: LD_INT 99999
26334: PPUSH
26335: CALL_OW 277
26339: GO 26314
26341: POP
26342: POP
26343: GO 26298
26345: POP
26346: POP
// end ;
26347: LD_VAR 0 1
26351: RET
// export function hHackSetLevel10 ; var i , j ; begin
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
26356: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 21
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PPUSH
26372: CALL_OW 69
26376: PUSH
26377: FOR_IN
26378: IFFALSE 26430
// if IsSelected ( i ) then
26380: LD_VAR 0 2
26384: PPUSH
26385: CALL_OW 306
26389: IFFALSE 26428
// begin for j := 1 to 4 do
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: DOUBLE
26397: LD_INT 1
26399: DEC
26400: ST_TO_ADDR
26401: LD_INT 4
26403: PUSH
26404: FOR_TO
26405: IFFALSE 26426
// SetSkill ( i , j , 10 ) ;
26407: LD_VAR 0 2
26411: PPUSH
26412: LD_VAR 0 3
26416: PPUSH
26417: LD_INT 10
26419: PPUSH
26420: CALL_OW 237
26424: GO 26404
26426: POP
26427: POP
// end ;
26428: GO 26377
26430: POP
26431: POP
// end ;
26432: LD_VAR 0 1
26436: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
26441: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26442: LD_ADDR_VAR 0 2
26446: PUSH
26447: LD_INT 22
26449: PUSH
26450: LD_OWVAR 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 21
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: PUSH
26478: FOR_IN
26479: IFFALSE 26520
// begin for j := 1 to 4 do
26481: LD_ADDR_VAR 0 3
26485: PUSH
26486: DOUBLE
26487: LD_INT 1
26489: DEC
26490: ST_TO_ADDR
26491: LD_INT 4
26493: PUSH
26494: FOR_TO
26495: IFFALSE 26516
// SetSkill ( i , j , 10 ) ;
26497: LD_VAR 0 2
26501: PPUSH
26502: LD_VAR 0 3
26506: PPUSH
26507: LD_INT 10
26509: PPUSH
26510: CALL_OW 237
26514: GO 26494
26516: POP
26517: POP
// end ;
26518: GO 26478
26520: POP
26521: POP
// end ;
26522: LD_VAR 0 1
26526: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26527: LD_INT 0
26529: PPUSH
// uc_side := your_side ;
26530: LD_ADDR_OWVAR 20
26534: PUSH
26535: LD_OWVAR 2
26539: ST_TO_ADDR
// uc_nation := nation ;
26540: LD_ADDR_OWVAR 21
26544: PUSH
26545: LD_VAR 0 1
26549: ST_TO_ADDR
// InitHc ;
26550: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26554: LD_INT 0
26556: PPUSH
26557: LD_VAR 0 2
26561: PPUSH
26562: LD_VAR 0 3
26566: PPUSH
26567: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26571: LD_VAR 0 4
26575: PPUSH
26576: LD_VAR 0 5
26580: PPUSH
26581: CALL_OW 428
26585: PUSH
26586: LD_INT 0
26588: EQUAL
26589: IFFALSE 26613
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26591: CALL_OW 44
26595: PPUSH
26596: LD_VAR 0 4
26600: PPUSH
26601: LD_VAR 0 5
26605: PPUSH
26606: LD_INT 1
26608: PPUSH
26609: CALL_OW 48
// end ;
26613: LD_VAR 0 6
26617: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26618: LD_INT 0
26620: PPUSH
26621: PPUSH
// uc_side := your_side ;
26622: LD_ADDR_OWVAR 20
26626: PUSH
26627: LD_OWVAR 2
26631: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26632: LD_VAR 0 1
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: LD_INT 3
26645: PUSH
26646: LD_INT 4
26648: PUSH
26649: LD_INT 5
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: IN
26659: IFFALSE 26671
// uc_nation := nation_american else
26661: LD_ADDR_OWVAR 21
26665: PUSH
26666: LD_INT 1
26668: ST_TO_ADDR
26669: GO 26714
// if chassis in [ 11 , 12 , 13 , 14 ] then
26671: LD_VAR 0 1
26675: PUSH
26676: LD_INT 11
26678: PUSH
26679: LD_INT 12
26681: PUSH
26682: LD_INT 13
26684: PUSH
26685: LD_INT 14
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: IN
26694: IFFALSE 26706
// uc_nation := nation_arabian else
26696: LD_ADDR_OWVAR 21
26700: PUSH
26701: LD_INT 2
26703: ST_TO_ADDR
26704: GO 26714
// uc_nation := nation_russian ;
26706: LD_ADDR_OWVAR 21
26710: PUSH
26711: LD_INT 3
26713: ST_TO_ADDR
// vc_chassis := chassis ;
26714: LD_ADDR_OWVAR 37
26718: PUSH
26719: LD_VAR 0 1
26723: ST_TO_ADDR
// vc_engine := engine ;
26724: LD_ADDR_OWVAR 39
26728: PUSH
26729: LD_VAR 0 2
26733: ST_TO_ADDR
// vc_control := control ;
26734: LD_ADDR_OWVAR 38
26738: PUSH
26739: LD_VAR 0 3
26743: ST_TO_ADDR
// vc_weapon := weapon ;
26744: LD_ADDR_OWVAR 40
26748: PUSH
26749: LD_VAR 0 4
26753: ST_TO_ADDR
// un := CreateVehicle ;
26754: LD_ADDR_VAR 0 8
26758: PUSH
26759: CALL_OW 45
26763: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26764: LD_VAR 0 8
26768: PPUSH
26769: LD_INT 0
26771: PPUSH
26772: LD_INT 5
26774: PPUSH
26775: CALL_OW 12
26779: PPUSH
26780: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26784: LD_VAR 0 8
26788: PPUSH
26789: LD_VAR 0 5
26793: PPUSH
26794: LD_VAR 0 6
26798: PPUSH
26799: LD_INT 1
26801: PPUSH
26802: CALL_OW 48
// end ;
26806: LD_VAR 0 7
26810: RET
// export hInvincible ; every 1 do
26811: GO 26813
26813: DISABLE
// hInvincible := [ ] ;
26814: LD_ADDR_EXP 107
26818: PUSH
26819: EMPTY
26820: ST_TO_ADDR
26821: END
// every 10 do var i ;
26822: GO 26824
26824: DISABLE
26825: LD_INT 0
26827: PPUSH
// begin enable ;
26828: ENABLE
// if not hInvincible then
26829: LD_EXP 107
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26882
// for i in hInvincible do
26838: LD_ADDR_VAR 0 1
26842: PUSH
26843: LD_EXP 107
26847: PUSH
26848: FOR_IN
26849: IFFALSE 26880
// if GetLives ( i ) < 1000 then
26851: LD_VAR 0 1
26855: PPUSH
26856: CALL_OW 256
26860: PUSH
26861: LD_INT 1000
26863: LESS
26864: IFFALSE 26878
// SetLives ( i , 1000 ) ;
26866: LD_VAR 0 1
26870: PPUSH
26871: LD_INT 1000
26873: PPUSH
26874: CALL_OW 234
26878: GO 26848
26880: POP
26881: POP
// end ;
26882: PPOPN 1
26884: END
// export function hHackInvincible ; var i ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: LD_INT 21
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 21
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 69
26926: PUSH
26927: FOR_IN
26928: IFFALSE 26989
// if IsSelected ( i ) then
26930: LD_VAR 0 2
26934: PPUSH
26935: CALL_OW 306
26939: IFFALSE 26987
// begin if i in hInvincible then
26941: LD_VAR 0 2
26945: PUSH
26946: LD_EXP 107
26950: IN
26951: IFFALSE 26971
// hInvincible := hInvincible diff i else
26953: LD_ADDR_EXP 107
26957: PUSH
26958: LD_EXP 107
26962: PUSH
26963: LD_VAR 0 2
26967: DIFF
26968: ST_TO_ADDR
26969: GO 26987
// hInvincible := hInvincible union i ;
26971: LD_ADDR_EXP 107
26975: PUSH
26976: LD_EXP 107
26980: PUSH
26981: LD_VAR 0 2
26985: UNION
26986: ST_TO_ADDR
// end ;
26987: GO 26927
26989: POP
26990: POP
// end ;
26991: LD_VAR 0 1
26995: RET
// export function hHackInvisible ; var i , j ; begin
26996: LD_INT 0
26998: PPUSH
26999: PPUSH
27000: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27001: LD_ADDR_VAR 0 2
27005: PUSH
27006: LD_INT 21
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PPUSH
27016: CALL_OW 69
27020: PUSH
27021: FOR_IN
27022: IFFALSE 27046
// if IsSelected ( i ) then
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 306
27033: IFFALSE 27044
// ComForceInvisible ( i ) ;
27035: LD_VAR 0 2
27039: PPUSH
27040: CALL_OW 496
27044: GO 27021
27046: POP
27047: POP
// end ;
27048: LD_VAR 0 1
27052: RET
// export function hHackChangeYourSide ; begin
27053: LD_INT 0
27055: PPUSH
// if your_side = 8 then
27056: LD_OWVAR 2
27060: PUSH
27061: LD_INT 8
27063: EQUAL
27064: IFFALSE 27076
// your_side := 0 else
27066: LD_ADDR_OWVAR 2
27070: PUSH
27071: LD_INT 0
27073: ST_TO_ADDR
27074: GO 27090
// your_side := your_side + 1 ;
27076: LD_ADDR_OWVAR 2
27080: PUSH
27081: LD_OWVAR 2
27085: PUSH
27086: LD_INT 1
27088: PLUS
27089: ST_TO_ADDR
// end ;
27090: LD_VAR 0 1
27094: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27095: LD_INT 0
27097: PPUSH
27098: PPUSH
27099: PPUSH
// for i in all_units do
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_OWVAR 3
27109: PUSH
27110: FOR_IN
27111: IFFALSE 27189
// if IsSelected ( i ) then
27113: LD_VAR 0 2
27117: PPUSH
27118: CALL_OW 306
27122: IFFALSE 27187
// begin j := GetSide ( i ) ;
27124: LD_ADDR_VAR 0 3
27128: PUSH
27129: LD_VAR 0 2
27133: PPUSH
27134: CALL_OW 255
27138: ST_TO_ADDR
// if j = 8 then
27139: LD_VAR 0 3
27143: PUSH
27144: LD_INT 8
27146: EQUAL
27147: IFFALSE 27159
// j := 0 else
27149: LD_ADDR_VAR 0 3
27153: PUSH
27154: LD_INT 0
27156: ST_TO_ADDR
27157: GO 27173
// j := j + 1 ;
27159: LD_ADDR_VAR 0 3
27163: PUSH
27164: LD_VAR 0 3
27168: PUSH
27169: LD_INT 1
27171: PLUS
27172: ST_TO_ADDR
// SetSide ( i , j ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 3
27182: PPUSH
27183: CALL_OW 235
// end ;
27187: GO 27110
27189: POP
27190: POP
// end ;
27191: LD_VAR 0 1
27195: RET
// export function hHackFog ; begin
27196: LD_INT 0
27198: PPUSH
// FogOff ( true ) ;
27199: LD_INT 1
27201: PPUSH
27202: CALL_OW 344
// end ;
27206: LD_VAR 0 1
27210: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27211: LD_INT 0
27213: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27214: LD_VAR 0 1
27218: PPUSH
27219: LD_VAR 0 2
27223: PPUSH
27224: LD_VAR 0 3
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: LD_INT 1
27234: PPUSH
27235: CALL_OW 483
// CenterOnXY ( x , y ) ;
27239: LD_VAR 0 2
27243: PPUSH
27244: LD_VAR 0 3
27248: PPUSH
27249: CALL_OW 84
// end ;
27253: LD_VAR 0 4
27257: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27258: LD_INT 0
27260: PPUSH
27261: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27262: LD_VAR 0 1
27266: NOT
27267: PUSH
27268: LD_VAR 0 2
27272: PPUSH
27273: LD_VAR 0 3
27277: PPUSH
27278: CALL_OW 488
27282: NOT
27283: OR
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 266
27294: PUSH
27295: LD_INT 3
27297: NONEQUAL
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 247
27308: PUSH
27309: LD_INT 1
27311: EQUAL
27312: NOT
27313: AND
27314: OR
27315: IFFALSE 27319
// exit ;
27317: GO 27468
// if GetType ( factory ) = unit_human then
27319: LD_VAR 0 1
27323: PPUSH
27324: CALL_OW 247
27328: PUSH
27329: LD_INT 1
27331: EQUAL
27332: IFFALSE 27349
// factory := IsInUnit ( factory ) ;
27334: LD_ADDR_VAR 0 1
27338: PUSH
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 310
27348: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27349: LD_VAR 0 1
27353: PPUSH
27354: CALL_OW 266
27358: PUSH
27359: LD_INT 3
27361: NONEQUAL
27362: IFFALSE 27366
// exit ;
27364: GO 27468
// if HexInfo ( x , y ) = factory then
27366: LD_VAR 0 2
27370: PPUSH
27371: LD_VAR 0 3
27375: PPUSH
27376: CALL_OW 428
27380: PUSH
27381: LD_VAR 0 1
27385: EQUAL
27386: IFFALSE 27413
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27388: LD_ADDR_EXP 108
27392: PUSH
27393: LD_EXP 108
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: LD_INT 0
27405: PPUSH
27406: CALL_OW 1
27410: ST_TO_ADDR
27411: GO 27464
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27413: LD_ADDR_EXP 108
27417: PUSH
27418: LD_EXP 108
27422: PPUSH
27423: LD_VAR 0 1
27427: PPUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 255
27437: PUSH
27438: LD_VAR 0 1
27442: PUSH
27443: LD_VAR 0 2
27447: PUSH
27448: LD_VAR 0 3
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: PPUSH
27459: CALL_OW 1
27463: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27464: CALL 27473 0 0
// end ;
27468: LD_VAR 0 4
27472: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27473: LD_INT 0
27475: PPUSH
27476: PPUSH
27477: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27478: LD_STRING resetFactoryWaypoint();
27480: PPUSH
27481: CALL_OW 559
// if factoryWaypoints then
27485: LD_EXP 108
27489: IFFALSE 27615
// begin list := PrepareArray ( factoryWaypoints ) ;
27491: LD_ADDR_VAR 0 3
27495: PUSH
27496: LD_EXP 108
27500: PPUSH
27501: CALL 74047 0 1
27505: ST_TO_ADDR
// for i := 1 to list do
27506: LD_ADDR_VAR 0 2
27510: PUSH
27511: DOUBLE
27512: LD_INT 1
27514: DEC
27515: ST_TO_ADDR
27516: LD_VAR 0 3
27520: PUSH
27521: FOR_TO
27522: IFFALSE 27613
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27524: LD_STRING setFactoryWaypointXY(
27526: PUSH
27527: LD_VAR 0 3
27531: PUSH
27532: LD_VAR 0 2
27536: ARRAY
27537: PUSH
27538: LD_INT 1
27540: ARRAY
27541: STR
27542: PUSH
27543: LD_STRING ,
27545: STR
27546: PUSH
27547: LD_VAR 0 3
27551: PUSH
27552: LD_VAR 0 2
27556: ARRAY
27557: PUSH
27558: LD_INT 2
27560: ARRAY
27561: STR
27562: PUSH
27563: LD_STRING ,
27565: STR
27566: PUSH
27567: LD_VAR 0 3
27571: PUSH
27572: LD_VAR 0 2
27576: ARRAY
27577: PUSH
27578: LD_INT 3
27580: ARRAY
27581: STR
27582: PUSH
27583: LD_STRING ,
27585: STR
27586: PUSH
27587: LD_VAR 0 3
27591: PUSH
27592: LD_VAR 0 2
27596: ARRAY
27597: PUSH
27598: LD_INT 4
27600: ARRAY
27601: STR
27602: PUSH
27603: LD_STRING )
27605: STR
27606: PPUSH
27607: CALL_OW 559
27611: GO 27521
27613: POP
27614: POP
// end ; end ;
27615: LD_VAR 0 1
27619: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27620: LD_INT 0
27622: PPUSH
// if HexInfo ( x , y ) = warehouse then
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_VAR 0 3
27632: PPUSH
27633: CALL_OW 428
27637: PUSH
27638: LD_VAR 0 1
27642: EQUAL
27643: IFFALSE 27670
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27645: LD_ADDR_EXP 109
27649: PUSH
27650: LD_EXP 109
27654: PPUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_INT 0
27662: PPUSH
27663: CALL_OW 1
27667: ST_TO_ADDR
27668: GO 27721
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27670: LD_ADDR_EXP 109
27674: PUSH
27675: LD_EXP 109
27679: PPUSH
27680: LD_VAR 0 1
27684: PPUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 255
27694: PUSH
27695: LD_VAR 0 1
27699: PUSH
27700: LD_VAR 0 2
27704: PUSH
27705: LD_VAR 0 3
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: PPUSH
27716: CALL_OW 1
27720: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27721: CALL 27730 0 0
// end ;
27725: LD_VAR 0 4
27729: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27730: LD_INT 0
27732: PPUSH
27733: PPUSH
27734: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27735: LD_STRING resetWarehouseGatheringPoints();
27737: PPUSH
27738: CALL_OW 559
// if warehouseGatheringPoints then
27742: LD_EXP 109
27746: IFFALSE 27872
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_EXP 109
27757: PPUSH
27758: CALL 74047 0 1
27762: ST_TO_ADDR
// for i := 1 to list do
27763: LD_ADDR_VAR 0 2
27767: PUSH
27768: DOUBLE
27769: LD_INT 1
27771: DEC
27772: ST_TO_ADDR
27773: LD_VAR 0 3
27777: PUSH
27778: FOR_TO
27779: IFFALSE 27870
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27781: LD_STRING setWarehouseGatheringPointXY(
27783: PUSH
27784: LD_VAR 0 3
27788: PUSH
27789: LD_VAR 0 2
27793: ARRAY
27794: PUSH
27795: LD_INT 1
27797: ARRAY
27798: STR
27799: PUSH
27800: LD_STRING ,
27802: STR
27803: PUSH
27804: LD_VAR 0 3
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_INT 2
27817: ARRAY
27818: STR
27819: PUSH
27820: LD_STRING ,
27822: STR
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 2
27833: ARRAY
27834: PUSH
27835: LD_INT 3
27837: ARRAY
27838: STR
27839: PUSH
27840: LD_STRING ,
27842: STR
27843: PUSH
27844: LD_VAR 0 3
27848: PUSH
27849: LD_VAR 0 2
27853: ARRAY
27854: PUSH
27855: LD_INT 4
27857: ARRAY
27858: STR
27859: PUSH
27860: LD_STRING )
27862: STR
27863: PPUSH
27864: CALL_OW 559
27868: GO 27778
27870: POP
27871: POP
// end ; end ;
27872: LD_VAR 0 1
27876: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27877: LD_EXP 109
27881: IFFALSE 28568
27883: GO 27885
27885: DISABLE
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
// begin enable ;
27897: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_EXP 109
27907: PPUSH
27908: CALL 74047 0 1
27912: ST_TO_ADDR
// if not list then
27913: LD_VAR 0 3
27917: NOT
27918: IFFALSE 27922
// exit ;
27920: GO 28568
// for i := 1 to list do
27922: LD_ADDR_VAR 0 1
27926: PUSH
27927: DOUBLE
27928: LD_INT 1
27930: DEC
27931: ST_TO_ADDR
27932: LD_VAR 0 3
27936: PUSH
27937: FOR_TO
27938: IFFALSE 28566
// begin depot := list [ i ] [ 2 ] ;
27940: LD_ADDR_VAR 0 8
27944: PUSH
27945: LD_VAR 0 3
27949: PUSH
27950: LD_VAR 0 1
27954: ARRAY
27955: PUSH
27956: LD_INT 2
27958: ARRAY
27959: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27960: LD_ADDR_VAR 0 5
27964: PUSH
27965: LD_VAR 0 3
27969: PUSH
27970: LD_VAR 0 1
27974: ARRAY
27975: PUSH
27976: LD_INT 1
27978: ARRAY
27979: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27980: LD_VAR 0 8
27984: PPUSH
27985: CALL_OW 301
27989: PUSH
27990: LD_VAR 0 5
27994: PUSH
27995: LD_VAR 0 8
27999: PPUSH
28000: CALL_OW 255
28004: NONEQUAL
28005: OR
28006: IFFALSE 28035
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28008: LD_ADDR_EXP 109
28012: PUSH
28013: LD_EXP 109
28017: PPUSH
28018: LD_VAR 0 8
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 1
28030: ST_TO_ADDR
// exit ;
28031: POP
28032: POP
28033: GO 28568
// end ; x := list [ i ] [ 3 ] ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 3
28044: PUSH
28045: LD_VAR 0 1
28049: ARRAY
28050: PUSH
28051: LD_INT 3
28053: ARRAY
28054: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28055: LD_ADDR_VAR 0 7
28059: PUSH
28060: LD_VAR 0 3
28064: PUSH
28065: LD_VAR 0 1
28069: ARRAY
28070: PUSH
28071: LD_INT 4
28073: ARRAY
28074: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28075: LD_ADDR_VAR 0 9
28079: PUSH
28080: LD_VAR 0 6
28084: PPUSH
28085: LD_VAR 0 7
28089: PPUSH
28090: LD_INT 16
28092: PPUSH
28093: CALL 72631 0 3
28097: ST_TO_ADDR
// if not cratesNearbyPoint then
28098: LD_VAR 0 9
28102: NOT
28103: IFFALSE 28109
// exit ;
28105: POP
28106: POP
28107: GO 28568
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28109: LD_ADDR_VAR 0 4
28113: PUSH
28114: LD_INT 22
28116: PUSH
28117: LD_VAR 0 5
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: LD_INT 60
28131: PUSH
28132: EMPTY
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 91
28141: PUSH
28142: LD_VAR 0 8
28146: PUSH
28147: LD_INT 6
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: LD_INT 25
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 25
28170: PUSH
28171: LD_INT 16
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: PUSH
28194: LD_VAR 0 8
28198: PPUSH
28199: CALL_OW 313
28203: PPUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 60
28209: PUSH
28210: EMPTY
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 25
28232: PUSH
28233: LD_INT 16
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PPUSH
28249: CALL_OW 72
28253: UNION
28254: ST_TO_ADDR
// if tmp then
28255: LD_VAR 0 4
28259: IFFALSE 28339
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28261: LD_ADDR_VAR 0 4
28265: PUSH
28266: LD_VAR 0 4
28270: PPUSH
28271: LD_INT 3
28273: PPUSH
28274: CALL 70598 0 2
28278: ST_TO_ADDR
// for j in tmp do
28279: LD_ADDR_VAR 0 2
28283: PUSH
28284: LD_VAR 0 4
28288: PUSH
28289: FOR_IN
28290: IFFALSE 28333
// begin if IsInUnit ( j ) then
28292: LD_VAR 0 2
28296: PPUSH
28297: CALL_OW 310
28301: IFFALSE 28312
// ComExit ( j ) ;
28303: LD_VAR 0 2
28307: PPUSH
28308: CALL 70681 0 1
// AddComCollect ( j , x , y ) ;
28312: LD_VAR 0 2
28316: PPUSH
28317: LD_VAR 0 6
28321: PPUSH
28322: LD_VAR 0 7
28326: PPUSH
28327: CALL_OW 177
// end ;
28331: GO 28289
28333: POP
28334: POP
// exit ;
28335: POP
28336: POP
28337: GO 28568
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28339: LD_ADDR_VAR 0 4
28343: PUSH
28344: LD_INT 22
28346: PUSH
28347: LD_VAR 0 5
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 91
28358: PUSH
28359: LD_VAR 0 8
28363: PUSH
28364: LD_INT 8
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 34
28377: PUSH
28378: LD_INT 12
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 34
28387: PUSH
28388: LD_INT 51
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 34
28397: PUSH
28398: LD_INT 32
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 34
28407: PUSH
28408: LD_EXP 33
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: PPUSH
28429: CALL_OW 69
28433: ST_TO_ADDR
// if tmp then
28434: LD_VAR 0 4
28438: IFFALSE 28564
// begin for j in tmp do
28440: LD_ADDR_VAR 0 2
28444: PUSH
28445: LD_VAR 0 4
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28562
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28453: LD_VAR 0 2
28457: PPUSH
28458: CALL_OW 262
28462: PUSH
28463: LD_INT 3
28465: EQUAL
28466: PUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: CALL_OW 261
28476: PUSH
28477: LD_INT 20
28479: GREATER
28480: OR
28481: PUSH
28482: LD_VAR 0 2
28486: PPUSH
28487: CALL_OW 314
28491: NOT
28492: AND
28493: PUSH
28494: LD_VAR 0 2
28498: PPUSH
28499: CALL_OW 263
28503: PUSH
28504: LD_INT 1
28506: NONEQUAL
28507: PUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 311
28517: OR
28518: AND
28519: IFFALSE 28560
// begin ComCollect ( j , x , y ) ;
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_VAR 0 6
28530: PPUSH
28531: LD_VAR 0 7
28535: PPUSH
28536: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_VAR 0 8
28549: PPUSH
28550: CALL_OW 172
// exit ;
28554: POP
28555: POP
28556: POP
28557: POP
28558: GO 28568
// end ;
28560: GO 28450
28562: POP
28563: POP
// end ; end ;
28564: GO 27937
28566: POP
28567: POP
// end ; end_of_file
28568: PPOPN 9
28570: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28571: LD_INT 0
28573: PPUSH
28574: PPUSH
28575: PPUSH
28576: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 264
28586: PUSH
28587: LD_EXP 36
28591: EQUAL
28592: IFFALSE 28664
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28594: LD_INT 68
28596: PPUSH
28597: LD_VAR 0 1
28601: PPUSH
28602: CALL_OW 255
28606: PPUSH
28607: CALL_OW 321
28611: PUSH
28612: LD_INT 2
28614: EQUAL
28615: IFFALSE 28627
// eff := 70 else
28617: LD_ADDR_VAR 0 4
28621: PUSH
28622: LD_INT 70
28624: ST_TO_ADDR
28625: GO 28635
// eff := 30 ;
28627: LD_ADDR_VAR 0 4
28631: PUSH
28632: LD_INT 30
28634: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 250
28644: PPUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 251
28654: PPUSH
28655: LD_VAR 0 4
28659: PPUSH
28660: CALL_OW 495
// end ; end ;
28664: LD_VAR 0 2
28668: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28669: LD_INT 0
28671: PPUSH
// end ;
28672: LD_VAR 0 4
28676: RET
// export function SOS_Command ( cmd ) ; begin
28677: LD_INT 0
28679: PPUSH
// end ;
28680: LD_VAR 0 2
28684: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28685: LD_INT 0
28687: PPUSH
// end ;
28688: LD_VAR 0 6
28692: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
// if not vehicle or not factory then
28697: LD_VAR 0 1
28701: NOT
28702: PUSH
28703: LD_VAR 0 2
28707: NOT
28708: OR
28709: IFFALSE 28713
// exit ;
28711: GO 28944
// if factoryWaypoints >= factory then
28713: LD_EXP 108
28717: PUSH
28718: LD_VAR 0 2
28722: GREATEREQUAL
28723: IFFALSE 28944
// if factoryWaypoints [ factory ] then
28725: LD_EXP 108
28729: PUSH
28730: LD_VAR 0 2
28734: ARRAY
28735: IFFALSE 28944
// begin if GetControl ( vehicle ) = control_manual then
28737: LD_VAR 0 1
28741: PPUSH
28742: CALL_OW 263
28746: PUSH
28747: LD_INT 1
28749: EQUAL
28750: IFFALSE 28831
// begin driver := IsDrivenBy ( vehicle ) ;
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL_OW 311
28766: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28767: LD_VAR 0 4
28771: PPUSH
28772: LD_EXP 108
28776: PUSH
28777: LD_VAR 0 2
28781: ARRAY
28782: PUSH
28783: LD_INT 3
28785: ARRAY
28786: PPUSH
28787: LD_EXP 108
28791: PUSH
28792: LD_VAR 0 2
28796: ARRAY
28797: PUSH
28798: LD_INT 4
28800: ARRAY
28801: PPUSH
28802: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28806: LD_VAR 0 4
28810: PPUSH
28811: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28815: LD_VAR 0 4
28819: PPUSH
28820: LD_VAR 0 2
28824: PPUSH
28825: CALL_OW 180
// end else
28829: GO 28944
// if GetControl ( vehicle ) = control_remote then
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 263
28840: PUSH
28841: LD_INT 2
28843: EQUAL
28844: IFFALSE 28905
// begin wait ( 0 0$2 ) ;
28846: LD_INT 70
28848: PPUSH
28849: CALL_OW 67
// if Connect ( vehicle ) then
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL 40992 0 1
28862: IFFALSE 28903
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28864: LD_VAR 0 1
28868: PPUSH
28869: LD_EXP 108
28873: PUSH
28874: LD_VAR 0 2
28878: ARRAY
28879: PUSH
28880: LD_INT 3
28882: ARRAY
28883: PPUSH
28884: LD_EXP 108
28888: PUSH
28889: LD_VAR 0 2
28893: ARRAY
28894: PUSH
28895: LD_INT 4
28897: ARRAY
28898: PPUSH
28899: CALL_OW 171
// end else
28903: GO 28944
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_EXP 108
28914: PUSH
28915: LD_VAR 0 2
28919: ARRAY
28920: PUSH
28921: LD_INT 3
28923: ARRAY
28924: PPUSH
28925: LD_EXP 108
28929: PUSH
28930: LD_VAR 0 2
28934: ARRAY
28935: PUSH
28936: LD_INT 4
28938: ARRAY
28939: PPUSH
28940: CALL_OW 171
// end ; end ;
28944: LD_VAR 0 3
28948: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28949: LD_INT 0
28951: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28952: LD_VAR 0 1
28956: PUSH
28957: LD_INT 250
28959: EQUAL
28960: PUSH
28961: LD_VAR 0 2
28965: PPUSH
28966: CALL_OW 264
28970: PUSH
28971: LD_EXP 39
28975: EQUAL
28976: AND
28977: IFFALSE 28998
// MinerPlaceMine ( unit , x , y ) ;
28979: LD_VAR 0 2
28983: PPUSH
28984: LD_VAR 0 4
28988: PPUSH
28989: LD_VAR 0 5
28993: PPUSH
28994: CALL 31397 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28998: LD_VAR 0 1
29002: PUSH
29003: LD_INT 251
29005: EQUAL
29006: PUSH
29007: LD_VAR 0 2
29011: PPUSH
29012: CALL_OW 264
29016: PUSH
29017: LD_EXP 39
29021: EQUAL
29022: AND
29023: IFFALSE 29044
// MinerDetonateMine ( unit , x , y ) ;
29025: LD_VAR 0 2
29029: PPUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: LD_VAR 0 5
29039: PPUSH
29040: CALL 31674 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29044: LD_VAR 0 1
29048: PUSH
29049: LD_INT 252
29051: EQUAL
29052: PUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: CALL_OW 264
29062: PUSH
29063: LD_EXP 39
29067: EQUAL
29068: AND
29069: IFFALSE 29090
// MinerCreateMinefield ( unit , x , y ) ;
29071: LD_VAR 0 2
29075: PPUSH
29076: LD_VAR 0 4
29080: PPUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: CALL 32091 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29090: LD_VAR 0 1
29094: PUSH
29095: LD_INT 253
29097: EQUAL
29098: PUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL_OW 257
29108: PUSH
29109: LD_INT 5
29111: EQUAL
29112: AND
29113: IFFALSE 29134
// ComBinocular ( unit , x , y ) ;
29115: LD_VAR 0 2
29119: PPUSH
29120: LD_VAR 0 4
29124: PPUSH
29125: LD_VAR 0 5
29129: PPUSH
29130: CALL 32462 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29134: LD_VAR 0 1
29138: PUSH
29139: LD_INT 254
29141: EQUAL
29142: PUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 264
29152: PUSH
29153: LD_EXP 34
29157: EQUAL
29158: AND
29159: PUSH
29160: LD_VAR 0 3
29164: PPUSH
29165: CALL_OW 263
29169: PUSH
29170: LD_INT 3
29172: EQUAL
29173: AND
29174: IFFALSE 29190
// HackDestroyVehicle ( unit , selectedUnit ) ;
29176: LD_VAR 0 2
29180: PPUSH
29181: LD_VAR 0 3
29185: PPUSH
29186: CALL 30757 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29190: LD_VAR 0 1
29194: PUSH
29195: LD_INT 255
29197: EQUAL
29198: PUSH
29199: LD_VAR 0 2
29203: PPUSH
29204: CALL_OW 264
29208: PUSH
29209: LD_INT 14
29211: PUSH
29212: LD_INT 53
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: IN
29219: AND
29220: PUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: CALL_OW 488
29235: AND
29236: IFFALSE 29260
// CutTreeXYR ( unit , x , y , 12 ) ;
29238: LD_VAR 0 2
29242: PPUSH
29243: LD_VAR 0 4
29247: PPUSH
29248: LD_VAR 0 5
29252: PPUSH
29253: LD_INT 12
29255: PPUSH
29256: CALL 29323 0 4
// if cmd = 256 then
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 256
29267: EQUAL
29268: IFFALSE 29289
// SetFactoryWaypoint ( unit , x , y ) ;
29270: LD_VAR 0 2
29274: PPUSH
29275: LD_VAR 0 4
29279: PPUSH
29280: LD_VAR 0 5
29284: PPUSH
29285: CALL 27258 0 3
// if cmd = 257 then
29289: LD_VAR 0 1
29293: PUSH
29294: LD_INT 257
29296: EQUAL
29297: IFFALSE 29318
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29299: LD_VAR 0 2
29303: PPUSH
29304: LD_VAR 0 4
29308: PPUSH
29309: LD_VAR 0 5
29313: PPUSH
29314: CALL 27620 0 3
// end ;
29318: LD_VAR 0 6
29322: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29323: LD_INT 0
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29334: LD_VAR 0 1
29338: NOT
29339: PUSH
29340: LD_VAR 0 2
29344: PPUSH
29345: LD_VAR 0 3
29349: PPUSH
29350: CALL_OW 488
29354: NOT
29355: OR
29356: PUSH
29357: LD_VAR 0 4
29361: NOT
29362: OR
29363: IFFALSE 29367
// exit ;
29365: GO 29707
// list := [ ] ;
29367: LD_ADDR_VAR 0 13
29371: PUSH
29372: EMPTY
29373: ST_TO_ADDR
// if x - r < 0 then
29374: LD_VAR 0 2
29378: PUSH
29379: LD_VAR 0 4
29383: MINUS
29384: PUSH
29385: LD_INT 0
29387: LESS
29388: IFFALSE 29400
// min_x := 0 else
29390: LD_ADDR_VAR 0 7
29394: PUSH
29395: LD_INT 0
29397: ST_TO_ADDR
29398: GO 29416
// min_x := x - r ;
29400: LD_ADDR_VAR 0 7
29404: PUSH
29405: LD_VAR 0 2
29409: PUSH
29410: LD_VAR 0 4
29414: MINUS
29415: ST_TO_ADDR
// if y - r < 0 then
29416: LD_VAR 0 3
29420: PUSH
29421: LD_VAR 0 4
29425: MINUS
29426: PUSH
29427: LD_INT 0
29429: LESS
29430: IFFALSE 29442
// min_y := 0 else
29432: LD_ADDR_VAR 0 8
29436: PUSH
29437: LD_INT 0
29439: ST_TO_ADDR
29440: GO 29458
// min_y := y - r ;
29442: LD_ADDR_VAR 0 8
29446: PUSH
29447: LD_VAR 0 3
29451: PUSH
29452: LD_VAR 0 4
29456: MINUS
29457: ST_TO_ADDR
// max_x := x + r ;
29458: LD_ADDR_VAR 0 9
29462: PUSH
29463: LD_VAR 0 2
29467: PUSH
29468: LD_VAR 0 4
29472: PLUS
29473: ST_TO_ADDR
// max_y := y + r ;
29474: LD_ADDR_VAR 0 10
29478: PUSH
29479: LD_VAR 0 3
29483: PUSH
29484: LD_VAR 0 4
29488: PLUS
29489: ST_TO_ADDR
// for _x = min_x to max_x do
29490: LD_ADDR_VAR 0 11
29494: PUSH
29495: DOUBLE
29496: LD_VAR 0 7
29500: DEC
29501: ST_TO_ADDR
29502: LD_VAR 0 9
29506: PUSH
29507: FOR_TO
29508: IFFALSE 29625
// for _y = min_y to max_y do
29510: LD_ADDR_VAR 0 12
29514: PUSH
29515: DOUBLE
29516: LD_VAR 0 8
29520: DEC
29521: ST_TO_ADDR
29522: LD_VAR 0 10
29526: PUSH
29527: FOR_TO
29528: IFFALSE 29621
// begin if not ValidHex ( _x , _y ) then
29530: LD_VAR 0 11
29534: PPUSH
29535: LD_VAR 0 12
29539: PPUSH
29540: CALL_OW 488
29544: NOT
29545: IFFALSE 29549
// continue ;
29547: GO 29527
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29549: LD_VAR 0 11
29553: PPUSH
29554: LD_VAR 0 12
29558: PPUSH
29559: CALL_OW 351
29563: PUSH
29564: LD_VAR 0 11
29568: PPUSH
29569: LD_VAR 0 12
29573: PPUSH
29574: CALL_OW 554
29578: AND
29579: IFFALSE 29619
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29581: LD_ADDR_VAR 0 13
29585: PUSH
29586: LD_VAR 0 13
29590: PPUSH
29591: LD_VAR 0 13
29595: PUSH
29596: LD_INT 1
29598: PLUS
29599: PPUSH
29600: LD_VAR 0 11
29604: PUSH
29605: LD_VAR 0 12
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PPUSH
29614: CALL_OW 2
29618: ST_TO_ADDR
// end ;
29619: GO 29527
29621: POP
29622: POP
29623: GO 29507
29625: POP
29626: POP
// if not list then
29627: LD_VAR 0 13
29631: NOT
29632: IFFALSE 29636
// exit ;
29634: GO 29707
// for i in list do
29636: LD_ADDR_VAR 0 6
29640: PUSH
29641: LD_VAR 0 13
29645: PUSH
29646: FOR_IN
29647: IFFALSE 29705
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29649: LD_VAR 0 1
29653: PPUSH
29654: LD_STRING M
29656: PUSH
29657: LD_VAR 0 6
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PUSH
29666: LD_VAR 0 6
29670: PUSH
29671: LD_INT 2
29673: ARRAY
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: PPUSH
29699: CALL_OW 447
29703: GO 29646
29705: POP
29706: POP
// end ;
29707: LD_VAR 0 5
29711: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29712: LD_EXP 111
29716: NOT
29717: IFFALSE 29767
29719: GO 29721
29721: DISABLE
// begin initHack := true ;
29722: LD_ADDR_EXP 111
29726: PUSH
29727: LD_INT 1
29729: ST_TO_ADDR
// hackTanks := [ ] ;
29730: LD_ADDR_EXP 112
29734: PUSH
29735: EMPTY
29736: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29737: LD_ADDR_EXP 113
29741: PUSH
29742: EMPTY
29743: ST_TO_ADDR
// hackLimit := 3 ;
29744: LD_ADDR_EXP 114
29748: PUSH
29749: LD_INT 3
29751: ST_TO_ADDR
// hackDist := 12 ;
29752: LD_ADDR_EXP 115
29756: PUSH
29757: LD_INT 12
29759: ST_TO_ADDR
// hackCounter := [ ] ;
29760: LD_ADDR_EXP 116
29764: PUSH
29765: EMPTY
29766: ST_TO_ADDR
// end ;
29767: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29768: LD_EXP 111
29772: PUSH
29773: LD_INT 34
29775: PUSH
29776: LD_EXP 34
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PPUSH
29785: CALL_OW 69
29789: AND
29790: IFFALSE 30045
29792: GO 29794
29794: DISABLE
29795: LD_INT 0
29797: PPUSH
29798: PPUSH
// begin enable ;
29799: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29800: LD_ADDR_VAR 0 1
29804: PUSH
29805: LD_INT 34
29807: PUSH
29808: LD_EXP 34
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: PUSH
29822: FOR_IN
29823: IFFALSE 30043
// begin if not i in hackTanks then
29825: LD_VAR 0 1
29829: PUSH
29830: LD_EXP 112
29834: IN
29835: NOT
29836: IFFALSE 29919
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29838: LD_ADDR_EXP 112
29842: PUSH
29843: LD_EXP 112
29847: PPUSH
29848: LD_EXP 112
29852: PUSH
29853: LD_INT 1
29855: PLUS
29856: PPUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 1
29866: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29867: LD_ADDR_EXP 113
29871: PUSH
29872: LD_EXP 113
29876: PPUSH
29877: LD_EXP 113
29881: PUSH
29882: LD_INT 1
29884: PLUS
29885: PPUSH
29886: EMPTY
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29893: LD_ADDR_EXP 116
29897: PUSH
29898: LD_EXP 116
29902: PPUSH
29903: LD_EXP 116
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: PPUSH
29912: EMPTY
29913: PPUSH
29914: CALL_OW 1
29918: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 302
29928: NOT
29929: IFFALSE 29942
// begin HackUnlinkAll ( i ) ;
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL 30048 0 1
// continue ;
29940: GO 29822
// end ; HackCheckCapturedStatus ( i ) ;
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL 30491 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29951: LD_ADDR_VAR 0 2
29955: PUSH
29956: LD_INT 81
29958: PUSH
29959: LD_VAR 0 1
29963: PPUSH
29964: CALL_OW 255
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 33
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 91
29985: PUSH
29986: LD_VAR 0 1
29990: PUSH
29991: LD_EXP 115
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 50
30003: PUSH
30004: EMPTY
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL_OW 69
30017: ST_TO_ADDR
// if not tmp then
30018: LD_VAR 0 2
30022: NOT
30023: IFFALSE 30027
// continue ;
30025: GO 29822
// HackLink ( i , tmp ) ;
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: CALL 30184 0 2
// end ;
30041: GO 29822
30043: POP
30044: POP
// end ;
30045: PPOPN 2
30047: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30048: LD_INT 0
30050: PPUSH
30051: PPUSH
30052: PPUSH
// if not hack in hackTanks then
30053: LD_VAR 0 1
30057: PUSH
30058: LD_EXP 112
30062: IN
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30179
// index := GetElementIndex ( hackTanks , hack ) ;
30068: LD_ADDR_VAR 0 4
30072: PUSH
30073: LD_EXP 112
30077: PPUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL 37806 0 2
30087: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30088: LD_EXP 113
30092: PUSH
30093: LD_VAR 0 4
30097: ARRAY
30098: IFFALSE 30179
// begin for i in hackTanksCaptured [ index ] do
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_EXP 113
30109: PUSH
30110: LD_VAR 0 4
30114: ARRAY
30115: PUSH
30116: FOR_IN
30117: IFFALSE 30143
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30119: LD_VAR 0 3
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: LD_VAR 0 3
30132: PUSH
30133: LD_INT 2
30135: ARRAY
30136: PPUSH
30137: CALL_OW 235
30141: GO 30116
30143: POP
30144: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30145: LD_ADDR_EXP 113
30149: PUSH
30150: LD_EXP 113
30154: PPUSH
30155: LD_VAR 0 4
30159: PPUSH
30160: EMPTY
30161: PPUSH
30162: CALL_OW 1
30166: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_INT 0
30174: PPUSH
30175: CALL_OW 505
// end ; end ;
30179: LD_VAR 0 2
30183: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30184: LD_INT 0
30186: PPUSH
30187: PPUSH
30188: PPUSH
// if not hack in hackTanks or not vehicles then
30189: LD_VAR 0 1
30193: PUSH
30194: LD_EXP 112
30198: IN
30199: NOT
30200: PUSH
30201: LD_VAR 0 2
30205: NOT
30206: OR
30207: IFFALSE 30211
// exit ;
30209: GO 30486
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30211: LD_ADDR_VAR 0 2
30215: PUSH
30216: LD_VAR 0 1
30220: PPUSH
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_INT 1
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL 38456 0 4
30236: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30237: LD_ADDR_VAR 0 5
30241: PUSH
30242: LD_EXP 112
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL 37806 0 2
30256: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30257: LD_EXP 113
30261: PUSH
30262: LD_VAR 0 5
30266: ARRAY
30267: PUSH
30268: LD_EXP 114
30272: LESS
30273: IFFALSE 30462
// begin for i := 1 to vehicles do
30275: LD_ADDR_VAR 0 4
30279: PUSH
30280: DOUBLE
30281: LD_INT 1
30283: DEC
30284: ST_TO_ADDR
30285: LD_VAR 0 2
30289: PUSH
30290: FOR_TO
30291: IFFALSE 30460
// begin if hackTanksCaptured [ index ] = hackLimit then
30293: LD_EXP 113
30297: PUSH
30298: LD_VAR 0 5
30302: ARRAY
30303: PUSH
30304: LD_EXP 114
30308: EQUAL
30309: IFFALSE 30313
// break ;
30311: GO 30460
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30313: LD_ADDR_EXP 116
30317: PUSH
30318: LD_EXP 116
30322: PPUSH
30323: LD_VAR 0 5
30327: PPUSH
30328: LD_EXP 116
30332: PUSH
30333: LD_VAR 0 5
30337: ARRAY
30338: PUSH
30339: LD_INT 1
30341: PLUS
30342: PPUSH
30343: CALL_OW 1
30347: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30348: LD_ADDR_EXP 113
30352: PUSH
30353: LD_EXP 113
30357: PPUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_EXP 113
30367: PUSH
30368: LD_VAR 0 5
30372: ARRAY
30373: PUSH
30374: LD_INT 1
30376: PLUS
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: LD_VAR 0 2
30386: PUSH
30387: LD_VAR 0 4
30391: ARRAY
30392: PUSH
30393: LD_VAR 0 2
30397: PUSH
30398: LD_VAR 0 4
30402: ARRAY
30403: PPUSH
30404: CALL_OW 255
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PPUSH
30413: CALL 38021 0 3
30417: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30418: LD_VAR 0 2
30422: PUSH
30423: LD_VAR 0 4
30427: ARRAY
30428: PPUSH
30429: LD_VAR 0 1
30433: PPUSH
30434: CALL_OW 255
30438: PPUSH
30439: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30443: LD_VAR 0 2
30447: PUSH
30448: LD_VAR 0 4
30452: ARRAY
30453: PPUSH
30454: CALL_OW 141
// end ;
30458: GO 30290
30460: POP
30461: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_EXP 113
30471: PUSH
30472: LD_VAR 0 5
30476: ARRAY
30477: PUSH
30478: LD_INT 0
30480: PLUS
30481: PPUSH
30482: CALL_OW 505
// end ;
30486: LD_VAR 0 3
30490: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
// if not hack in hackTanks then
30497: LD_VAR 0 1
30501: PUSH
30502: LD_EXP 112
30506: IN
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30752
// index := GetElementIndex ( hackTanks , hack ) ;
30512: LD_ADDR_VAR 0 4
30516: PUSH
30517: LD_EXP 112
30521: PPUSH
30522: LD_VAR 0 1
30526: PPUSH
30527: CALL 37806 0 2
30531: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: DOUBLE
30538: LD_EXP 113
30542: PUSH
30543: LD_VAR 0 4
30547: ARRAY
30548: INC
30549: ST_TO_ADDR
30550: LD_INT 1
30552: PUSH
30553: FOR_DOWNTO
30554: IFFALSE 30726
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30556: LD_ADDR_VAR 0 5
30560: PUSH
30561: LD_EXP 113
30565: PUSH
30566: LD_VAR 0 4
30570: ARRAY
30571: PUSH
30572: LD_VAR 0 3
30576: ARRAY
30577: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30578: LD_VAR 0 5
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: PPUSH
30587: CALL_OW 302
30591: NOT
30592: PUSH
30593: LD_VAR 0 5
30597: PUSH
30598: LD_INT 1
30600: ARRAY
30601: PPUSH
30602: CALL_OW 255
30606: PUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 255
30616: NONEQUAL
30617: OR
30618: IFFALSE 30724
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30620: LD_VAR 0 5
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: PPUSH
30629: CALL_OW 305
30633: PUSH
30634: LD_VAR 0 5
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: CALL_OW 255
30647: PUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 255
30657: EQUAL
30658: AND
30659: IFFALSE 30683
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30661: LD_VAR 0 5
30665: PUSH
30666: LD_INT 1
30668: ARRAY
30669: PPUSH
30670: LD_VAR 0 5
30674: PUSH
30675: LD_INT 2
30677: ARRAY
30678: PPUSH
30679: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30683: LD_ADDR_EXP 113
30687: PUSH
30688: LD_EXP 113
30692: PPUSH
30693: LD_VAR 0 4
30697: PPUSH
30698: LD_EXP 113
30702: PUSH
30703: LD_VAR 0 4
30707: ARRAY
30708: PPUSH
30709: LD_VAR 0 3
30713: PPUSH
30714: CALL_OW 3
30718: PPUSH
30719: CALL_OW 1
30723: ST_TO_ADDR
// end ; end ;
30724: GO 30553
30726: POP
30727: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30728: LD_VAR 0 1
30732: PPUSH
30733: LD_EXP 113
30737: PUSH
30738: LD_VAR 0 4
30742: ARRAY
30743: PUSH
30744: LD_INT 0
30746: PLUS
30747: PPUSH
30748: CALL_OW 505
// end ;
30752: LD_VAR 0 2
30756: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
// if not hack in hackTanks then
30763: LD_VAR 0 1
30767: PUSH
30768: LD_EXP 112
30772: IN
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30863
// index := GetElementIndex ( hackTanks , hack ) ;
30778: LD_ADDR_VAR 0 5
30782: PUSH
30783: LD_EXP 112
30787: PPUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL 37806 0 2
30797: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30798: LD_ADDR_VAR 0 4
30802: PUSH
30803: DOUBLE
30804: LD_INT 1
30806: DEC
30807: ST_TO_ADDR
30808: LD_EXP 113
30812: PUSH
30813: LD_VAR 0 5
30817: ARRAY
30818: PUSH
30819: FOR_TO
30820: IFFALSE 30861
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30822: LD_EXP 113
30826: PUSH
30827: LD_VAR 0 5
30831: ARRAY
30832: PUSH
30833: LD_VAR 0 4
30837: ARRAY
30838: PUSH
30839: LD_INT 1
30841: ARRAY
30842: PUSH
30843: LD_VAR 0 2
30847: EQUAL
30848: IFFALSE 30859
// KillUnit ( vehicle ) ;
30850: LD_VAR 0 2
30854: PPUSH
30855: CALL_OW 66
30859: GO 30819
30861: POP
30862: POP
// end ;
30863: LD_VAR 0 3
30867: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30868: LD_EXP 117
30872: NOT
30873: IFFALSE 30908
30875: GO 30877
30877: DISABLE
// begin initMiner := true ;
30878: LD_ADDR_EXP 117
30882: PUSH
30883: LD_INT 1
30885: ST_TO_ADDR
// minersList := [ ] ;
30886: LD_ADDR_EXP 118
30890: PUSH
30891: EMPTY
30892: ST_TO_ADDR
// minerMinesList := [ ] ;
30893: LD_ADDR_EXP 119
30897: PUSH
30898: EMPTY
30899: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30900: LD_ADDR_EXP 120
30904: PUSH
30905: LD_INT 5
30907: ST_TO_ADDR
// end ;
30908: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30909: LD_EXP 117
30913: PUSH
30914: LD_INT 34
30916: PUSH
30917: LD_EXP 39
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PPUSH
30926: CALL_OW 69
30930: AND
30931: IFFALSE 31394
30933: GO 30935
30935: DISABLE
30936: LD_INT 0
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
// begin enable ;
30942: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30943: LD_ADDR_VAR 0 1
30947: PUSH
30948: LD_INT 34
30950: PUSH
30951: LD_EXP 39
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PPUSH
30960: CALL_OW 69
30964: PUSH
30965: FOR_IN
30966: IFFALSE 31038
// begin if not i in minersList then
30968: LD_VAR 0 1
30972: PUSH
30973: LD_EXP 118
30977: IN
30978: NOT
30979: IFFALSE 31036
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30981: LD_ADDR_EXP 118
30985: PUSH
30986: LD_EXP 118
30990: PPUSH
30991: LD_EXP 118
30995: PUSH
30996: LD_INT 1
30998: PLUS
30999: PPUSH
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 1
31009: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31010: LD_ADDR_EXP 119
31014: PUSH
31015: LD_EXP 119
31019: PPUSH
31020: LD_EXP 119
31024: PUSH
31025: LD_INT 1
31027: PLUS
31028: PPUSH
31029: EMPTY
31030: PPUSH
31031: CALL_OW 1
31035: ST_TO_ADDR
// end end ;
31036: GO 30965
31038: POP
31039: POP
// for i := minerMinesList downto 1 do
31040: LD_ADDR_VAR 0 1
31044: PUSH
31045: DOUBLE
31046: LD_EXP 119
31050: INC
31051: ST_TO_ADDR
31052: LD_INT 1
31054: PUSH
31055: FOR_DOWNTO
31056: IFFALSE 31392
// begin if IsLive ( minersList [ i ] ) then
31058: LD_EXP 118
31062: PUSH
31063: LD_VAR 0 1
31067: ARRAY
31068: PPUSH
31069: CALL_OW 300
31073: IFFALSE 31101
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31075: LD_EXP 118
31079: PUSH
31080: LD_VAR 0 1
31084: ARRAY
31085: PPUSH
31086: LD_EXP 119
31090: PUSH
31091: LD_VAR 0 1
31095: ARRAY
31096: PPUSH
31097: CALL_OW 505
// if not minerMinesList [ i ] then
31101: LD_EXP 119
31105: PUSH
31106: LD_VAR 0 1
31110: ARRAY
31111: NOT
31112: IFFALSE 31116
// continue ;
31114: GO 31055
// for j := minerMinesList [ i ] downto 1 do
31116: LD_ADDR_VAR 0 2
31120: PUSH
31121: DOUBLE
31122: LD_EXP 119
31126: PUSH
31127: LD_VAR 0 1
31131: ARRAY
31132: INC
31133: ST_TO_ADDR
31134: LD_INT 1
31136: PUSH
31137: FOR_DOWNTO
31138: IFFALSE 31388
// begin side := GetSide ( minersList [ i ] ) ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_EXP 118
31149: PUSH
31150: LD_VAR 0 1
31154: ARRAY
31155: PPUSH
31156: CALL_OW 255
31160: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: LD_EXP 119
31170: PUSH
31171: LD_VAR 0 1
31175: ARRAY
31176: PUSH
31177: LD_VAR 0 2
31181: ARRAY
31182: PUSH
31183: LD_INT 1
31185: ARRAY
31186: PPUSH
31187: LD_EXP 119
31191: PUSH
31192: LD_VAR 0 1
31196: ARRAY
31197: PUSH
31198: LD_VAR 0 2
31202: ARRAY
31203: PUSH
31204: LD_INT 2
31206: ARRAY
31207: PPUSH
31208: CALL_OW 428
31212: ST_TO_ADDR
// if not tmp then
31213: LD_VAR 0 4
31217: NOT
31218: IFFALSE 31222
// continue ;
31220: GO 31137
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31222: LD_VAR 0 4
31226: PUSH
31227: LD_INT 81
31229: PUSH
31230: LD_VAR 0 3
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PPUSH
31239: CALL_OW 69
31243: IN
31244: PUSH
31245: LD_EXP 119
31249: PUSH
31250: LD_VAR 0 1
31254: ARRAY
31255: PUSH
31256: LD_VAR 0 2
31260: ARRAY
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: PPUSH
31266: LD_EXP 119
31270: PUSH
31271: LD_VAR 0 1
31275: ARRAY
31276: PUSH
31277: LD_VAR 0 2
31281: ARRAY
31282: PUSH
31283: LD_INT 2
31285: ARRAY
31286: PPUSH
31287: CALL_OW 458
31291: AND
31292: IFFALSE 31386
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31294: LD_EXP 119
31298: PUSH
31299: LD_VAR 0 1
31303: ARRAY
31304: PUSH
31305: LD_VAR 0 2
31309: ARRAY
31310: PUSH
31311: LD_INT 1
31313: ARRAY
31314: PPUSH
31315: LD_EXP 119
31319: PUSH
31320: LD_VAR 0 1
31324: ARRAY
31325: PUSH
31326: LD_VAR 0 2
31330: ARRAY
31331: PUSH
31332: LD_INT 2
31334: ARRAY
31335: PPUSH
31336: LD_VAR 0 3
31340: PPUSH
31341: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31345: LD_ADDR_EXP 119
31349: PUSH
31350: LD_EXP 119
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: LD_EXP 119
31364: PUSH
31365: LD_VAR 0 1
31369: ARRAY
31370: PPUSH
31371: LD_VAR 0 2
31375: PPUSH
31376: CALL_OW 3
31380: PPUSH
31381: CALL_OW 1
31385: ST_TO_ADDR
// end ; end ;
31386: GO 31137
31388: POP
31389: POP
// end ;
31390: GO 31055
31392: POP
31393: POP
// end ;
31394: PPOPN 4
31396: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31397: LD_INT 0
31399: PPUSH
31400: PPUSH
// result := false ;
31401: LD_ADDR_VAR 0 4
31405: PUSH
31406: LD_INT 0
31408: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31409: LD_VAR 0 1
31413: PPUSH
31414: CALL_OW 264
31418: PUSH
31419: LD_EXP 39
31423: EQUAL
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 31669
// index := GetElementIndex ( minersList , unit ) ;
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_EXP 118
31438: PPUSH
31439: LD_VAR 0 1
31443: PPUSH
31444: CALL 37806 0 2
31448: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31449: LD_EXP 119
31453: PUSH
31454: LD_VAR 0 5
31458: ARRAY
31459: PUSH
31460: LD_EXP 120
31464: GREATEREQUAL
31465: IFFALSE 31469
// exit ;
31467: GO 31669
// ComMoveXY ( unit , x , y ) ;
31469: LD_VAR 0 1
31473: PPUSH
31474: LD_VAR 0 2
31478: PPUSH
31479: LD_VAR 0 3
31483: PPUSH
31484: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31488: LD_INT 35
31490: PPUSH
31491: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31495: LD_VAR 0 1
31499: PPUSH
31500: LD_VAR 0 2
31504: PPUSH
31505: LD_VAR 0 3
31509: PPUSH
31510: CALL 69092 0 3
31514: NOT
31515: PUSH
31516: LD_VAR 0 1
31520: PPUSH
31521: CALL_OW 314
31525: AND
31526: IFFALSE 31530
// exit ;
31528: GO 31669
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31530: LD_VAR 0 2
31534: PPUSH
31535: LD_VAR 0 3
31539: PPUSH
31540: CALL_OW 428
31544: PUSH
31545: LD_VAR 0 1
31549: EQUAL
31550: PUSH
31551: LD_VAR 0 1
31555: PPUSH
31556: CALL_OW 314
31560: NOT
31561: AND
31562: IFFALSE 31488
// PlaySoundXY ( x , y , PlantMine ) ;
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 3
31573: PPUSH
31574: LD_STRING PlantMine
31576: PPUSH
31577: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31581: LD_VAR 0 2
31585: PPUSH
31586: LD_VAR 0 3
31590: PPUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 255
31600: PPUSH
31601: LD_INT 0
31603: PPUSH
31604: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31608: LD_ADDR_EXP 119
31612: PUSH
31613: LD_EXP 119
31617: PPUSH
31618: LD_VAR 0 5
31622: PUSH
31623: LD_EXP 119
31627: PUSH
31628: LD_VAR 0 5
31632: ARRAY
31633: PUSH
31634: LD_INT 1
31636: PLUS
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PPUSH
31642: LD_VAR 0 2
31646: PUSH
31647: LD_VAR 0 3
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PPUSH
31656: CALL 38021 0 3
31660: ST_TO_ADDR
// result := true ;
31661: LD_ADDR_VAR 0 4
31665: PUSH
31666: LD_INT 1
31668: ST_TO_ADDR
// end ;
31669: LD_VAR 0 4
31673: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31674: LD_INT 0
31676: PPUSH
31677: PPUSH
31678: PPUSH
// if not unit in minersList then
31679: LD_VAR 0 1
31683: PUSH
31684: LD_EXP 118
31688: IN
31689: NOT
31690: IFFALSE 31694
// exit ;
31692: GO 32086
// index := GetElementIndex ( minersList , unit ) ;
31694: LD_ADDR_VAR 0 6
31698: PUSH
31699: LD_EXP 118
31703: PPUSH
31704: LD_VAR 0 1
31708: PPUSH
31709: CALL 37806 0 2
31713: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31714: LD_ADDR_VAR 0 5
31718: PUSH
31719: DOUBLE
31720: LD_EXP 119
31724: PUSH
31725: LD_VAR 0 6
31729: ARRAY
31730: INC
31731: ST_TO_ADDR
31732: LD_INT 1
31734: PUSH
31735: FOR_DOWNTO
31736: IFFALSE 31897
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31738: LD_EXP 119
31742: PUSH
31743: LD_VAR 0 6
31747: ARRAY
31748: PUSH
31749: LD_VAR 0 5
31753: ARRAY
31754: PUSH
31755: LD_INT 1
31757: ARRAY
31758: PUSH
31759: LD_VAR 0 2
31763: EQUAL
31764: PUSH
31765: LD_EXP 119
31769: PUSH
31770: LD_VAR 0 6
31774: ARRAY
31775: PUSH
31776: LD_VAR 0 5
31780: ARRAY
31781: PUSH
31782: LD_INT 2
31784: ARRAY
31785: PUSH
31786: LD_VAR 0 3
31790: EQUAL
31791: AND
31792: IFFALSE 31895
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31794: LD_EXP 119
31798: PUSH
31799: LD_VAR 0 6
31803: ARRAY
31804: PUSH
31805: LD_VAR 0 5
31809: ARRAY
31810: PUSH
31811: LD_INT 1
31813: ARRAY
31814: PPUSH
31815: LD_EXP 119
31819: PUSH
31820: LD_VAR 0 6
31824: ARRAY
31825: PUSH
31826: LD_VAR 0 5
31830: ARRAY
31831: PUSH
31832: LD_INT 2
31834: ARRAY
31835: PPUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 255
31845: PPUSH
31846: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31850: LD_ADDR_EXP 119
31854: PUSH
31855: LD_EXP 119
31859: PPUSH
31860: LD_VAR 0 6
31864: PPUSH
31865: LD_EXP 119
31869: PUSH
31870: LD_VAR 0 6
31874: ARRAY
31875: PPUSH
31876: LD_VAR 0 5
31880: PPUSH
31881: CALL_OW 3
31885: PPUSH
31886: CALL_OW 1
31890: ST_TO_ADDR
// exit ;
31891: POP
31892: POP
31893: GO 32086
// end ; end ;
31895: GO 31735
31897: POP
31898: POP
// for i := minerMinesList [ index ] downto 1 do
31899: LD_ADDR_VAR 0 5
31903: PUSH
31904: DOUBLE
31905: LD_EXP 119
31909: PUSH
31910: LD_VAR 0 6
31914: ARRAY
31915: INC
31916: ST_TO_ADDR
31917: LD_INT 1
31919: PUSH
31920: FOR_DOWNTO
31921: IFFALSE 32084
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31923: LD_EXP 119
31927: PUSH
31928: LD_VAR 0 6
31932: ARRAY
31933: PUSH
31934: LD_VAR 0 5
31938: ARRAY
31939: PUSH
31940: LD_INT 1
31942: ARRAY
31943: PPUSH
31944: LD_EXP 119
31948: PUSH
31949: LD_VAR 0 6
31953: ARRAY
31954: PUSH
31955: LD_VAR 0 5
31959: ARRAY
31960: PUSH
31961: LD_INT 2
31963: ARRAY
31964: PPUSH
31965: LD_VAR 0 2
31969: PPUSH
31970: LD_VAR 0 3
31974: PPUSH
31975: CALL_OW 298
31979: PUSH
31980: LD_INT 6
31982: LESS
31983: IFFALSE 32082
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31985: LD_EXP 119
31989: PUSH
31990: LD_VAR 0 6
31994: ARRAY
31995: PUSH
31996: LD_VAR 0 5
32000: ARRAY
32001: PUSH
32002: LD_INT 1
32004: ARRAY
32005: PPUSH
32006: LD_EXP 119
32010: PUSH
32011: LD_VAR 0 6
32015: ARRAY
32016: PUSH
32017: LD_VAR 0 5
32021: ARRAY
32022: PUSH
32023: LD_INT 2
32025: ARRAY
32026: PPUSH
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 255
32036: PPUSH
32037: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32041: LD_ADDR_EXP 119
32045: PUSH
32046: LD_EXP 119
32050: PPUSH
32051: LD_VAR 0 6
32055: PPUSH
32056: LD_EXP 119
32060: PUSH
32061: LD_VAR 0 6
32065: ARRAY
32066: PPUSH
32067: LD_VAR 0 5
32071: PPUSH
32072: CALL_OW 3
32076: PPUSH
32077: CALL_OW 1
32081: ST_TO_ADDR
// end ; end ;
32082: GO 31920
32084: POP
32085: POP
// end ;
32086: LD_VAR 0 4
32090: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32091: LD_INT 0
32093: PPUSH
32094: PPUSH
32095: PPUSH
32096: PPUSH
32097: PPUSH
32098: PPUSH
32099: PPUSH
32100: PPUSH
32101: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 264
32111: PUSH
32112: LD_EXP 39
32116: EQUAL
32117: NOT
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: LD_EXP 118
32128: IN
32129: NOT
32130: OR
32131: IFFALSE 32135
// exit ;
32133: GO 32457
// index := GetElementIndex ( minersList , unit ) ;
32135: LD_ADDR_VAR 0 6
32139: PUSH
32140: LD_EXP 118
32144: PPUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL 37806 0 2
32154: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32155: LD_ADDR_VAR 0 8
32159: PUSH
32160: LD_EXP 120
32164: PUSH
32165: LD_EXP 119
32169: PUSH
32170: LD_VAR 0 6
32174: ARRAY
32175: MINUS
32176: ST_TO_ADDR
// if not minesFreeAmount then
32177: LD_VAR 0 8
32181: NOT
32182: IFFALSE 32186
// exit ;
32184: GO 32457
// tmp := [ ] ;
32186: LD_ADDR_VAR 0 7
32190: PUSH
32191: EMPTY
32192: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32193: LD_ADDR_VAR 0 5
32197: PUSH
32198: DOUBLE
32199: LD_INT 1
32201: DEC
32202: ST_TO_ADDR
32203: LD_VAR 0 8
32207: PUSH
32208: FOR_TO
32209: IFFALSE 32404
// begin _d := rand ( 0 , 5 ) ;
32211: LD_ADDR_VAR 0 11
32215: PUSH
32216: LD_INT 0
32218: PPUSH
32219: LD_INT 5
32221: PPUSH
32222: CALL_OW 12
32226: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32227: LD_ADDR_VAR 0 12
32231: PUSH
32232: LD_INT 2
32234: PPUSH
32235: LD_INT 6
32237: PPUSH
32238: CALL_OW 12
32242: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32243: LD_ADDR_VAR 0 9
32247: PUSH
32248: LD_VAR 0 2
32252: PPUSH
32253: LD_VAR 0 11
32257: PPUSH
32258: LD_VAR 0 12
32262: PPUSH
32263: CALL_OW 272
32267: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32268: LD_ADDR_VAR 0 10
32272: PUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: LD_VAR 0 11
32282: PPUSH
32283: LD_VAR 0 12
32287: PPUSH
32288: CALL_OW 273
32292: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32293: LD_VAR 0 9
32297: PPUSH
32298: LD_VAR 0 10
32302: PPUSH
32303: CALL_OW 488
32307: PUSH
32308: LD_VAR 0 9
32312: PUSH
32313: LD_VAR 0 10
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_VAR 0 7
32326: IN
32327: NOT
32328: AND
32329: PUSH
32330: LD_VAR 0 9
32334: PPUSH
32335: LD_VAR 0 10
32339: PPUSH
32340: CALL_OW 458
32344: NOT
32345: AND
32346: IFFALSE 32388
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32348: LD_ADDR_VAR 0 7
32352: PUSH
32353: LD_VAR 0 7
32357: PPUSH
32358: LD_VAR 0 7
32362: PUSH
32363: LD_INT 1
32365: PLUS
32366: PPUSH
32367: LD_VAR 0 9
32371: PUSH
32372: LD_VAR 0 10
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PPUSH
32381: CALL_OW 1
32385: ST_TO_ADDR
32386: GO 32402
// i := i - 1 ;
32388: LD_ADDR_VAR 0 5
32392: PUSH
32393: LD_VAR 0 5
32397: PUSH
32398: LD_INT 1
32400: MINUS
32401: ST_TO_ADDR
// end ;
32402: GO 32208
32404: POP
32405: POP
// for i in tmp do
32406: LD_ADDR_VAR 0 5
32410: PUSH
32411: LD_VAR 0 7
32415: PUSH
32416: FOR_IN
32417: IFFALSE 32455
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32419: LD_VAR 0 1
32423: PPUSH
32424: LD_VAR 0 5
32428: PUSH
32429: LD_INT 1
32431: ARRAY
32432: PPUSH
32433: LD_VAR 0 5
32437: PUSH
32438: LD_INT 2
32440: ARRAY
32441: PPUSH
32442: CALL 31397 0 3
32446: NOT
32447: IFFALSE 32453
// exit ;
32449: POP
32450: POP
32451: GO 32457
32453: GO 32416
32455: POP
32456: POP
// end ;
32457: LD_VAR 0 4
32461: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32462: LD_INT 0
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
// if not GetClass ( unit ) = class_sniper then
32471: LD_VAR 0 1
32475: PPUSH
32476: CALL_OW 257
32480: PUSH
32481: LD_INT 5
32483: EQUAL
32484: NOT
32485: IFFALSE 32489
// exit ;
32487: GO 32877
// dist := 8 ;
32489: LD_ADDR_VAR 0 5
32493: PUSH
32494: LD_INT 8
32496: ST_TO_ADDR
// viewRange := 12 ;
32497: LD_ADDR_VAR 0 7
32501: PUSH
32502: LD_INT 12
32504: ST_TO_ADDR
// side := GetSide ( unit ) ;
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: LD_VAR 0 1
32514: PPUSH
32515: CALL_OW 255
32519: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32520: LD_INT 61
32522: PPUSH
32523: LD_VAR 0 6
32527: PPUSH
32528: CALL_OW 321
32532: PUSH
32533: LD_INT 2
32535: EQUAL
32536: IFFALSE 32546
// viewRange := 16 ;
32538: LD_ADDR_VAR 0 7
32542: PUSH
32543: LD_INT 16
32545: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_VAR 0 2
32555: PPUSH
32556: LD_VAR 0 3
32560: PPUSH
32561: CALL_OW 297
32565: PUSH
32566: LD_VAR 0 5
32570: GREATER
32571: IFFALSE 32650
// begin ComMoveXY ( unit , x , y ) ;
32573: LD_VAR 0 1
32577: PPUSH
32578: LD_VAR 0 2
32582: PPUSH
32583: LD_VAR 0 3
32587: PPUSH
32588: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32592: LD_INT 35
32594: PPUSH
32595: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32599: LD_VAR 0 1
32603: PPUSH
32604: LD_VAR 0 2
32608: PPUSH
32609: LD_VAR 0 3
32613: PPUSH
32614: CALL 69092 0 3
32618: NOT
32619: IFFALSE 32623
// exit ;
32621: GO 32877
// until GetDistUnitXY ( unit , x , y ) < dist ;
32623: LD_VAR 0 1
32627: PPUSH
32628: LD_VAR 0 2
32632: PPUSH
32633: LD_VAR 0 3
32637: PPUSH
32638: CALL_OW 297
32642: PUSH
32643: LD_VAR 0 5
32647: LESS
32648: IFFALSE 32592
// end ; ComTurnXY ( unit , x , y ) ;
32650: LD_VAR 0 1
32654: PPUSH
32655: LD_VAR 0 2
32659: PPUSH
32660: LD_VAR 0 3
32664: PPUSH
32665: CALL_OW 118
// wait ( 5 ) ;
32669: LD_INT 5
32671: PPUSH
32672: CALL_OW 67
// _d := GetDir ( unit ) ;
32676: LD_ADDR_VAR 0 10
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 254
32690: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32691: LD_ADDR_VAR 0 8
32695: PUSH
32696: LD_VAR 0 1
32700: PPUSH
32701: CALL_OW 250
32705: PPUSH
32706: LD_VAR 0 10
32710: PPUSH
32711: LD_VAR 0 5
32715: PPUSH
32716: CALL_OW 272
32720: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32721: LD_ADDR_VAR 0 9
32725: PUSH
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 251
32735: PPUSH
32736: LD_VAR 0 10
32740: PPUSH
32741: LD_VAR 0 5
32745: PPUSH
32746: CALL_OW 273
32750: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32751: LD_VAR 0 8
32755: PPUSH
32756: LD_VAR 0 9
32760: PPUSH
32761: CALL_OW 488
32765: NOT
32766: IFFALSE 32770
// exit ;
32768: GO 32877
// ComAnimCustom ( unit , 1 ) ;
32770: LD_VAR 0 1
32774: PPUSH
32775: LD_INT 1
32777: PPUSH
32778: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32782: LD_VAR 0 8
32786: PPUSH
32787: LD_VAR 0 9
32791: PPUSH
32792: LD_VAR 0 6
32796: PPUSH
32797: LD_VAR 0 7
32801: PPUSH
32802: CALL_OW 330
// repeat wait ( 1 ) ;
32806: LD_INT 1
32808: PPUSH
32809: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 316
32822: PUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 314
32832: OR
32833: PUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: CALL_OW 302
32843: NOT
32844: OR
32845: PUSH
32846: LD_VAR 0 1
32850: PPUSH
32851: CALL_OW 301
32855: OR
32856: IFFALSE 32806
// RemoveSeeing ( _x , _y , side ) ;
32858: LD_VAR 0 8
32862: PPUSH
32863: LD_VAR 0 9
32867: PPUSH
32868: LD_VAR 0 6
32872: PPUSH
32873: CALL_OW 331
// end ; end_of_file
32877: LD_VAR 0 4
32881: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32882: LD_INT 0
32884: PPUSH
32885: PPUSH
// if exist_mode then
32886: LD_VAR 0 2
32890: IFFALSE 32915
// unit := CreateCharacter ( prefix & ident ) else
32892: LD_ADDR_VAR 0 5
32896: PUSH
32897: LD_VAR 0 3
32901: PUSH
32902: LD_VAR 0 1
32906: STR
32907: PPUSH
32908: CALL_OW 34
32912: ST_TO_ADDR
32913: GO 32930
// unit := NewCharacter ( ident ) ;
32915: LD_ADDR_VAR 0 5
32919: PUSH
32920: LD_VAR 0 1
32924: PPUSH
32925: CALL_OW 25
32929: ST_TO_ADDR
// result := unit ;
32930: LD_ADDR_VAR 0 4
32934: PUSH
32935: LD_VAR 0 5
32939: ST_TO_ADDR
// end ;
32940: LD_VAR 0 4
32944: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32945: LD_INT 0
32947: PPUSH
32948: PPUSH
// if not side or not nation then
32949: LD_VAR 0 1
32953: NOT
32954: PUSH
32955: LD_VAR 0 2
32959: NOT
32960: OR
32961: IFFALSE 32965
// exit ;
32963: GO 33733
// case nation of nation_american :
32965: LD_VAR 0 2
32969: PUSH
32970: LD_INT 1
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 33192
32978: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32979: LD_ADDR_VAR 0 4
32983: PUSH
32984: LD_INT 35
32986: PUSH
32987: LD_INT 45
32989: PUSH
32990: LD_INT 46
32992: PUSH
32993: LD_INT 47
32995: PUSH
32996: LD_INT 82
32998: PUSH
32999: LD_INT 83
33001: PUSH
33002: LD_INT 84
33004: PUSH
33005: LD_INT 85
33007: PUSH
33008: LD_INT 86
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 6
33019: PUSH
33020: LD_INT 15
33022: PUSH
33023: LD_INT 16
33025: PUSH
33026: LD_INT 7
33028: PUSH
33029: LD_INT 12
33031: PUSH
33032: LD_INT 13
33034: PUSH
33035: LD_INT 10
33037: PUSH
33038: LD_INT 14
33040: PUSH
33041: LD_INT 20
33043: PUSH
33044: LD_INT 21
33046: PUSH
33047: LD_INT 22
33049: PUSH
33050: LD_INT 25
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: LD_INT 27
33058: PUSH
33059: LD_INT 36
33061: PUSH
33062: LD_INT 69
33064: PUSH
33065: LD_INT 39
33067: PUSH
33068: LD_INT 34
33070: PUSH
33071: LD_INT 40
33073: PUSH
33074: LD_INT 48
33076: PUSH
33077: LD_INT 49
33079: PUSH
33080: LD_INT 50
33082: PUSH
33083: LD_INT 51
33085: PUSH
33086: LD_INT 52
33088: PUSH
33089: LD_INT 53
33091: PUSH
33092: LD_INT 54
33094: PUSH
33095: LD_INT 55
33097: PUSH
33098: LD_INT 56
33100: PUSH
33101: LD_INT 57
33103: PUSH
33104: LD_INT 58
33106: PUSH
33107: LD_INT 59
33109: PUSH
33110: LD_INT 60
33112: PUSH
33113: LD_INT 61
33115: PUSH
33116: LD_INT 62
33118: PUSH
33119: LD_INT 80
33121: PUSH
33122: LD_INT 82
33124: PUSH
33125: LD_INT 83
33127: PUSH
33128: LD_INT 84
33130: PUSH
33131: LD_INT 85
33133: PUSH
33134: LD_INT 86
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
33190: GO 33657
33192: LD_INT 2
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33426
33200: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33201: LD_ADDR_VAR 0 4
33205: PUSH
33206: LD_INT 35
33208: PUSH
33209: LD_INT 45
33211: PUSH
33212: LD_INT 46
33214: PUSH
33215: LD_INT 47
33217: PUSH
33218: LD_INT 82
33220: PUSH
33221: LD_INT 83
33223: PUSH
33224: LD_INT 84
33226: PUSH
33227: LD_INT 85
33229: PUSH
33230: LD_INT 87
33232: PUSH
33233: LD_INT 70
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: LD_INT 11
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: LD_INT 4
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: LD_INT 6
33253: PUSH
33254: LD_INT 15
33256: PUSH
33257: LD_INT 18
33259: PUSH
33260: LD_INT 7
33262: PUSH
33263: LD_INT 17
33265: PUSH
33266: LD_INT 8
33268: PUSH
33269: LD_INT 20
33271: PUSH
33272: LD_INT 21
33274: PUSH
33275: LD_INT 22
33277: PUSH
33278: LD_INT 72
33280: PUSH
33281: LD_INT 26
33283: PUSH
33284: LD_INT 69
33286: PUSH
33287: LD_INT 39
33289: PUSH
33290: LD_INT 40
33292: PUSH
33293: LD_INT 41
33295: PUSH
33296: LD_INT 42
33298: PUSH
33299: LD_INT 43
33301: PUSH
33302: LD_INT 48
33304: PUSH
33305: LD_INT 49
33307: PUSH
33308: LD_INT 50
33310: PUSH
33311: LD_INT 51
33313: PUSH
33314: LD_INT 52
33316: PUSH
33317: LD_INT 53
33319: PUSH
33320: LD_INT 54
33322: PUSH
33323: LD_INT 55
33325: PUSH
33326: LD_INT 56
33328: PUSH
33329: LD_INT 60
33331: PUSH
33332: LD_INT 61
33334: PUSH
33335: LD_INT 62
33337: PUSH
33338: LD_INT 66
33340: PUSH
33341: LD_INT 67
33343: PUSH
33344: LD_INT 68
33346: PUSH
33347: LD_INT 81
33349: PUSH
33350: LD_INT 82
33352: PUSH
33353: LD_INT 83
33355: PUSH
33356: LD_INT 84
33358: PUSH
33359: LD_INT 85
33361: PUSH
33362: LD_INT 87
33364: PUSH
33365: LD_INT 88
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
33424: GO 33657
33426: LD_INT 3
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33656
33434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33435: LD_ADDR_VAR 0 4
33439: PUSH
33440: LD_INT 46
33442: PUSH
33443: LD_INT 47
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 82
33454: PUSH
33455: LD_INT 83
33457: PUSH
33458: LD_INT 84
33460: PUSH
33461: LD_INT 85
33463: PUSH
33464: LD_INT 86
33466: PUSH
33467: LD_INT 11
33469: PUSH
33470: LD_INT 9
33472: PUSH
33473: LD_INT 20
33475: PUSH
33476: LD_INT 19
33478: PUSH
33479: LD_INT 21
33481: PUSH
33482: LD_INT 24
33484: PUSH
33485: LD_INT 22
33487: PUSH
33488: LD_INT 25
33490: PUSH
33491: LD_INT 28
33493: PUSH
33494: LD_INT 29
33496: PUSH
33497: LD_INT 30
33499: PUSH
33500: LD_INT 31
33502: PUSH
33503: LD_INT 37
33505: PUSH
33506: LD_INT 38
33508: PUSH
33509: LD_INT 32
33511: PUSH
33512: LD_INT 27
33514: PUSH
33515: LD_INT 33
33517: PUSH
33518: LD_INT 69
33520: PUSH
33521: LD_INT 39
33523: PUSH
33524: LD_INT 34
33526: PUSH
33527: LD_INT 40
33529: PUSH
33530: LD_INT 71
33532: PUSH
33533: LD_INT 23
33535: PUSH
33536: LD_INT 44
33538: PUSH
33539: LD_INT 48
33541: PUSH
33542: LD_INT 49
33544: PUSH
33545: LD_INT 50
33547: PUSH
33548: LD_INT 51
33550: PUSH
33551: LD_INT 52
33553: PUSH
33554: LD_INT 53
33556: PUSH
33557: LD_INT 54
33559: PUSH
33560: LD_INT 55
33562: PUSH
33563: LD_INT 56
33565: PUSH
33566: LD_INT 57
33568: PUSH
33569: LD_INT 58
33571: PUSH
33572: LD_INT 59
33574: PUSH
33575: LD_INT 63
33577: PUSH
33578: LD_INT 64
33580: PUSH
33581: LD_INT 65
33583: PUSH
33584: LD_INT 82
33586: PUSH
33587: LD_INT 83
33589: PUSH
33590: LD_INT 84
33592: PUSH
33593: LD_INT 85
33595: PUSH
33596: LD_INT 86
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: ST_TO_ADDR
33654: GO 33657
33656: POP
// if state > - 1 and state < 3 then
33657: LD_VAR 0 3
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: GREATER
33666: PUSH
33667: LD_VAR 0 3
33671: PUSH
33672: LD_INT 3
33674: LESS
33675: AND
33676: IFFALSE 33733
// for i in result do
33678: LD_ADDR_VAR 0 5
33682: PUSH
33683: LD_VAR 0 4
33687: PUSH
33688: FOR_IN
33689: IFFALSE 33731
// if GetTech ( i , side ) <> state then
33691: LD_VAR 0 5
33695: PPUSH
33696: LD_VAR 0 1
33700: PPUSH
33701: CALL_OW 321
33705: PUSH
33706: LD_VAR 0 3
33710: NONEQUAL
33711: IFFALSE 33729
// result := result diff i ;
33713: LD_ADDR_VAR 0 4
33717: PUSH
33718: LD_VAR 0 4
33722: PUSH
33723: LD_VAR 0 5
33727: DIFF
33728: ST_TO_ADDR
33729: GO 33688
33731: POP
33732: POP
// end ;
33733: LD_VAR 0 4
33737: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33738: LD_INT 0
33740: PPUSH
33741: PPUSH
33742: PPUSH
// result := true ;
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_INT 1
33750: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33751: LD_ADDR_VAR 0 5
33755: PUSH
33756: LD_VAR 0 2
33760: PPUSH
33761: CALL_OW 480
33765: ST_TO_ADDR
// if not tmp then
33766: LD_VAR 0 5
33770: NOT
33771: IFFALSE 33775
// exit ;
33773: GO 33824
// for i in tmp do
33775: LD_ADDR_VAR 0 4
33779: PUSH
33780: LD_VAR 0 5
33784: PUSH
33785: FOR_IN
33786: IFFALSE 33822
// if GetTech ( i , side ) <> state_researched then
33788: LD_VAR 0 4
33792: PPUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: CALL_OW 321
33802: PUSH
33803: LD_INT 2
33805: NONEQUAL
33806: IFFALSE 33820
// begin result := false ;
33808: LD_ADDR_VAR 0 3
33812: PUSH
33813: LD_INT 0
33815: ST_TO_ADDR
// exit ;
33816: POP
33817: POP
33818: GO 33824
// end ;
33820: GO 33785
33822: POP
33823: POP
// end ;
33824: LD_VAR 0 3
33828: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33829: LD_INT 0
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33844: LD_VAR 0 1
33848: NOT
33849: PUSH
33850: LD_VAR 0 1
33854: PPUSH
33855: CALL_OW 257
33859: PUSH
33860: LD_INT 9
33862: NONEQUAL
33863: OR
33864: IFFALSE 33868
// exit ;
33866: GO 34441
// side := GetSide ( unit ) ;
33868: LD_ADDR_VAR 0 9
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 255
33882: ST_TO_ADDR
// tech_space := tech_spacanom ;
33883: LD_ADDR_VAR 0 12
33887: PUSH
33888: LD_INT 29
33890: ST_TO_ADDR
// tech_time := tech_taurad ;
33891: LD_ADDR_VAR 0 13
33895: PUSH
33896: LD_INT 28
33898: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33899: LD_ADDR_VAR 0 11
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 310
33913: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33914: LD_VAR 0 11
33918: PPUSH
33919: CALL_OW 247
33923: PUSH
33924: LD_INT 2
33926: EQUAL
33927: IFFALSE 33931
// exit ;
33929: GO 34441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33931: LD_ADDR_VAR 0 8
33935: PUSH
33936: LD_INT 81
33938: PUSH
33939: LD_VAR 0 9
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 3
33950: PUSH
33951: LD_INT 21
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PPUSH
33969: CALL_OW 69
33973: ST_TO_ADDR
// if not tmp then
33974: LD_VAR 0 8
33978: NOT
33979: IFFALSE 33983
// exit ;
33981: GO 34441
// if in_unit then
33983: LD_VAR 0 11
33987: IFFALSE 34011
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33989: LD_ADDR_VAR 0 10
33993: PUSH
33994: LD_VAR 0 8
33998: PPUSH
33999: LD_VAR 0 11
34003: PPUSH
34004: CALL_OW 74
34008: ST_TO_ADDR
34009: GO 34031
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34011: LD_ADDR_VAR 0 10
34015: PUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 74
34030: ST_TO_ADDR
// if not enemy then
34031: LD_VAR 0 10
34035: NOT
34036: IFFALSE 34040
// exit ;
34038: GO 34441
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34040: LD_VAR 0 11
34044: PUSH
34045: LD_VAR 0 11
34049: PPUSH
34050: LD_VAR 0 10
34054: PPUSH
34055: CALL_OW 296
34059: PUSH
34060: LD_INT 13
34062: GREATER
34063: AND
34064: PUSH
34065: LD_VAR 0 1
34069: PPUSH
34070: LD_VAR 0 10
34074: PPUSH
34075: CALL_OW 296
34079: PUSH
34080: LD_INT 12
34082: GREATER
34083: OR
34084: IFFALSE 34088
// exit ;
34086: GO 34441
// missile := [ 1 ] ;
34088: LD_ADDR_VAR 0 14
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34099: LD_VAR 0 9
34103: PPUSH
34104: LD_VAR 0 12
34108: PPUSH
34109: CALL_OW 325
34113: IFFALSE 34142
// missile := Replace ( missile , missile + 1 , 2 ) ;
34115: LD_ADDR_VAR 0 14
34119: PUSH
34120: LD_VAR 0 14
34124: PPUSH
34125: LD_VAR 0 14
34129: PUSH
34130: LD_INT 1
34132: PLUS
34133: PPUSH
34134: LD_INT 2
34136: PPUSH
34137: CALL_OW 1
34141: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34142: LD_VAR 0 9
34146: PPUSH
34147: LD_VAR 0 13
34151: PPUSH
34152: CALL_OW 325
34156: PUSH
34157: LD_VAR 0 10
34161: PPUSH
34162: CALL_OW 255
34166: PPUSH
34167: LD_VAR 0 13
34171: PPUSH
34172: CALL_OW 325
34176: NOT
34177: AND
34178: IFFALSE 34207
// missile := Replace ( missile , missile + 1 , 3 ) ;
34180: LD_ADDR_VAR 0 14
34184: PUSH
34185: LD_VAR 0 14
34189: PPUSH
34190: LD_VAR 0 14
34194: PUSH
34195: LD_INT 1
34197: PLUS
34198: PPUSH
34199: LD_INT 3
34201: PPUSH
34202: CALL_OW 1
34206: ST_TO_ADDR
// if missile < 2 then
34207: LD_VAR 0 14
34211: PUSH
34212: LD_INT 2
34214: LESS
34215: IFFALSE 34219
// exit ;
34217: GO 34441
// x := GetX ( enemy ) ;
34219: LD_ADDR_VAR 0 4
34223: PUSH
34224: LD_VAR 0 10
34228: PPUSH
34229: CALL_OW 250
34233: ST_TO_ADDR
// y := GetY ( enemy ) ;
34234: LD_ADDR_VAR 0 5
34238: PUSH
34239: LD_VAR 0 10
34243: PPUSH
34244: CALL_OW 251
34248: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34249: LD_ADDR_VAR 0 6
34253: PUSH
34254: LD_VAR 0 4
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: CALL_OW 12
34270: PLUS
34271: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34272: LD_ADDR_VAR 0 7
34276: PUSH
34277: LD_VAR 0 5
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PPUSH
34286: LD_INT 1
34288: PPUSH
34289: CALL_OW 12
34293: PLUS
34294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34295: LD_VAR 0 6
34299: PPUSH
34300: LD_VAR 0 7
34304: PPUSH
34305: CALL_OW 488
34309: NOT
34310: IFFALSE 34332
// begin _x := x ;
34312: LD_ADDR_VAR 0 6
34316: PUSH
34317: LD_VAR 0 4
34321: ST_TO_ADDR
// _y := y ;
34322: LD_ADDR_VAR 0 7
34326: PUSH
34327: LD_VAR 0 5
34331: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34332: LD_ADDR_VAR 0 3
34336: PUSH
34337: LD_INT 1
34339: PPUSH
34340: LD_VAR 0 14
34344: PPUSH
34345: CALL_OW 12
34349: ST_TO_ADDR
// case i of 1 :
34350: LD_VAR 0 3
34354: PUSH
34355: LD_INT 1
34357: DOUBLE
34358: EQUAL
34359: IFTRUE 34363
34361: GO 34380
34363: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34364: LD_VAR 0 1
34368: PPUSH
34369: LD_VAR 0 10
34373: PPUSH
34374: CALL_OW 115
34378: GO 34441
34380: LD_INT 2
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34410
34388: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34389: LD_VAR 0 1
34393: PPUSH
34394: LD_VAR 0 6
34398: PPUSH
34399: LD_VAR 0 7
34403: PPUSH
34404: CALL_OW 153
34408: GO 34441
34410: LD_INT 3
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34440
34418: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34419: LD_VAR 0 1
34423: PPUSH
34424: LD_VAR 0 6
34428: PPUSH
34429: LD_VAR 0 7
34433: PPUSH
34434: CALL_OW 154
34438: GO 34441
34440: POP
// end ;
34441: LD_VAR 0 2
34445: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34446: LD_INT 0
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
// if not unit or not building then
34454: LD_VAR 0 1
34458: NOT
34459: PUSH
34460: LD_VAR 0 2
34464: NOT
34465: OR
34466: IFFALSE 34470
// exit ;
34468: GO 34628
// x := GetX ( building ) ;
34470: LD_ADDR_VAR 0 5
34474: PUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: CALL_OW 250
34484: ST_TO_ADDR
// y := GetY ( building ) ;
34485: LD_ADDR_VAR 0 6
34489: PUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL_OW 251
34499: ST_TO_ADDR
// for i = 0 to 5 do
34500: LD_ADDR_VAR 0 4
34504: PUSH
34505: DOUBLE
34506: LD_INT 0
34508: DEC
34509: ST_TO_ADDR
34510: LD_INT 5
34512: PUSH
34513: FOR_TO
34514: IFFALSE 34626
// begin _x := ShiftX ( x , i , 3 ) ;
34516: LD_ADDR_VAR 0 7
34520: PUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: LD_VAR 0 4
34530: PPUSH
34531: LD_INT 3
34533: PPUSH
34534: CALL_OW 272
34538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34539: LD_ADDR_VAR 0 8
34543: PUSH
34544: LD_VAR 0 6
34548: PPUSH
34549: LD_VAR 0 4
34553: PPUSH
34554: LD_INT 3
34556: PPUSH
34557: CALL_OW 273
34561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34562: LD_VAR 0 7
34566: PPUSH
34567: LD_VAR 0 8
34571: PPUSH
34572: CALL_OW 488
34576: NOT
34577: IFFALSE 34581
// continue ;
34579: GO 34513
// if HexInfo ( _x , _y ) = 0 then
34581: LD_VAR 0 7
34585: PPUSH
34586: LD_VAR 0 8
34590: PPUSH
34591: CALL_OW 428
34595: PUSH
34596: LD_INT 0
34598: EQUAL
34599: IFFALSE 34624
// begin ComMoveXY ( unit , _x , _y ) ;
34601: LD_VAR 0 1
34605: PPUSH
34606: LD_VAR 0 7
34610: PPUSH
34611: LD_VAR 0 8
34615: PPUSH
34616: CALL_OW 111
// exit ;
34620: POP
34621: POP
34622: GO 34628
// end ; end ;
34624: GO 34513
34626: POP
34627: POP
// end ;
34628: LD_VAR 0 3
34632: RET
// export function ScanBase ( side , base_area ) ; begin
34633: LD_INT 0
34635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34636: LD_ADDR_VAR 0 3
34640: PUSH
34641: LD_VAR 0 2
34645: PPUSH
34646: LD_INT 81
34648: PUSH
34649: LD_VAR 0 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 70
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 3
34667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34668: LD_INT 0
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
// result := false ;
34674: LD_ADDR_VAR 0 2
34678: PUSH
34679: LD_INT 0
34681: ST_TO_ADDR
// side := GetSide ( unit ) ;
34682: LD_ADDR_VAR 0 3
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: CALL_OW 255
34696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34697: LD_ADDR_VAR 0 4
34701: PUSH
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL_OW 248
34711: ST_TO_ADDR
// case nat of 1 :
34712: LD_VAR 0 4
34716: PUSH
34717: LD_INT 1
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34736
34725: POP
// tech := tech_lassight ; 2 :
34726: LD_ADDR_VAR 0 5
34730: PUSH
34731: LD_INT 12
34733: ST_TO_ADDR
34734: GO 34775
34736: LD_INT 2
34738: DOUBLE
34739: EQUAL
34740: IFTRUE 34744
34742: GO 34755
34744: POP
// tech := tech_mortar ; 3 :
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_INT 41
34752: ST_TO_ADDR
34753: GO 34775
34755: LD_INT 3
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34763
34761: GO 34774
34763: POP
// tech := tech_bazooka ; end ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_INT 44
34771: ST_TO_ADDR
34772: GO 34775
34774: POP
// if Researched ( side , tech ) then
34775: LD_VAR 0 3
34779: PPUSH
34780: LD_VAR 0 5
34784: PPUSH
34785: CALL_OW 325
34789: IFFALSE 34816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34791: LD_ADDR_VAR 0 2
34795: PUSH
34796: LD_INT 5
34798: PUSH
34799: LD_INT 8
34801: PUSH
34802: LD_INT 9
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: PUSH
34810: LD_VAR 0 4
34814: ARRAY
34815: ST_TO_ADDR
// end ;
34816: LD_VAR 0 2
34820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34821: LD_INT 0
34823: PPUSH
34824: PPUSH
34825: PPUSH
// if not mines then
34826: LD_VAR 0 2
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 34979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34835: LD_ADDR_VAR 0 5
34839: PUSH
34840: LD_INT 81
34842: PUSH
34843: LD_VAR 0 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 21
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PPUSH
34873: CALL_OW 69
34877: ST_TO_ADDR
// for i in mines do
34878: LD_ADDR_VAR 0 4
34882: PUSH
34883: LD_VAR 0 2
34887: PUSH
34888: FOR_IN
34889: IFFALSE 34977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34891: LD_VAR 0 4
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: PPUSH
34900: LD_VAR 0 4
34904: PUSH
34905: LD_INT 2
34907: ARRAY
34908: PPUSH
34909: CALL_OW 458
34913: NOT
34914: IFFALSE 34918
// continue ;
34916: GO 34888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34918: LD_VAR 0 4
34922: PUSH
34923: LD_INT 1
34925: ARRAY
34926: PPUSH
34927: LD_VAR 0 4
34931: PUSH
34932: LD_INT 2
34934: ARRAY
34935: PPUSH
34936: CALL_OW 428
34940: PUSH
34941: LD_VAR 0 5
34945: IN
34946: IFFALSE 34975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34948: LD_VAR 0 4
34952: PUSH
34953: LD_INT 1
34955: ARRAY
34956: PPUSH
34957: LD_VAR 0 4
34961: PUSH
34962: LD_INT 2
34964: ARRAY
34965: PPUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 456
// end ;
34975: GO 34888
34977: POP
34978: POP
// end ;
34979: LD_VAR 0 3
34983: RET
// export function Count ( array ) ; var i ; begin
34984: LD_INT 0
34986: PPUSH
34987: PPUSH
// result := 0 ;
34988: LD_ADDR_VAR 0 2
34992: PUSH
34993: LD_INT 0
34995: ST_TO_ADDR
// for i in array do
34996: LD_ADDR_VAR 0 3
35000: PUSH
35001: LD_VAR 0 1
35005: PUSH
35006: FOR_IN
35007: IFFALSE 35031
// if i then
35009: LD_VAR 0 3
35013: IFFALSE 35029
// result := result + 1 ;
35015: LD_ADDR_VAR 0 2
35019: PUSH
35020: LD_VAR 0 2
35024: PUSH
35025: LD_INT 1
35027: PLUS
35028: ST_TO_ADDR
35029: GO 35006
35031: POP
35032: POP
// end ;
35033: LD_VAR 0 2
35037: RET
// export function IsEmpty ( building ) ; begin
35038: LD_INT 0
35040: PPUSH
// if not building then
35041: LD_VAR 0 1
35045: NOT
35046: IFFALSE 35050
// exit ;
35048: GO 35093
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35050: LD_ADDR_VAR 0 2
35054: PUSH
35055: LD_VAR 0 1
35059: PUSH
35060: LD_INT 22
35062: PUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL_OW 255
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 58
35079: PUSH
35080: EMPTY
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PPUSH
35087: CALL_OW 69
35091: IN
35092: ST_TO_ADDR
// end ;
35093: LD_VAR 0 2
35097: RET
// export function IsNotFull ( building ) ; var places ; begin
35098: LD_INT 0
35100: PPUSH
35101: PPUSH
// if not building then
35102: LD_VAR 0 1
35106: NOT
35107: IFFALSE 35111
// exit ;
35109: GO 35282
// result := false ;
35111: LD_ADDR_VAR 0 2
35115: PUSH
35116: LD_INT 0
35118: ST_TO_ADDR
// places := 0 ;
35119: LD_ADDR_VAR 0 3
35123: PUSH
35124: LD_INT 0
35126: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 266
35136: PUSH
35137: LD_INT 0
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35199
35143: LD_INT 1
35145: DOUBLE
35146: EQUAL
35147: IFTRUE 35199
35149: LD_INT 6
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35199
35155: LD_INT 7
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35199
35161: LD_INT 8
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35199
35167: LD_INT 4
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35199
35173: LD_INT 5
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35199
35179: LD_INT 2
35181: DOUBLE
35182: EQUAL
35183: IFTRUE 35199
35185: LD_INT 3
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35199
35191: LD_INT 35
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35210
35199: POP
// places := 6 ; b_bunker , b_breastwork :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 6
35207: ST_TO_ADDR
35208: GO 35255
35210: LD_INT 32
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35224
35216: LD_INT 31
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35224
35222: GO 35235
35224: POP
// places := 1 ; b_control_tower :
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_INT 1
35232: ST_TO_ADDR
35233: GO 35255
35235: LD_INT 36
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35254
35243: POP
// places := 3 ; end ;
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_INT 3
35251: ST_TO_ADDR
35252: GO 35255
35254: POP
// if places then
35255: LD_VAR 0 3
35259: IFFALSE 35282
// result := UnitsInside ( building ) < places ;
35261: LD_ADDR_VAR 0 2
35265: PUSH
35266: LD_VAR 0 1
35270: PPUSH
35271: CALL_OW 313
35275: PUSH
35276: LD_VAR 0 3
35280: LESS
35281: ST_TO_ADDR
// end ;
35282: LD_VAR 0 2
35286: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
// tmp := [ ] ;
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: EMPTY
35299: ST_TO_ADDR
// list := [ ] ;
35300: LD_ADDR_VAR 0 5
35304: PUSH
35305: EMPTY
35306: ST_TO_ADDR
// for i = 16 to 25 do
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: DOUBLE
35313: LD_INT 16
35315: DEC
35316: ST_TO_ADDR
35317: LD_INT 25
35319: PUSH
35320: FOR_TO
35321: IFFALSE 35394
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_VAR 0 3
35332: PUSH
35333: LD_INT 22
35335: PUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 255
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 91
35352: PUSH
35353: LD_VAR 0 1
35357: PUSH
35358: LD_INT 6
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 30
35368: PUSH
35369: LD_VAR 0 4
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: PPUSH
35386: CALL_OW 69
35390: ADD
35391: ST_TO_ADDR
35392: GO 35320
35394: POP
35395: POP
// for i = 1 to tmp do
35396: LD_ADDR_VAR 0 4
35400: PUSH
35401: DOUBLE
35402: LD_INT 1
35404: DEC
35405: ST_TO_ADDR
35406: LD_VAR 0 3
35410: PUSH
35411: FOR_TO
35412: IFFALSE 35500
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35414: LD_ADDR_VAR 0 5
35418: PUSH
35419: LD_VAR 0 5
35423: PUSH
35424: LD_VAR 0 3
35428: PUSH
35429: LD_VAR 0 4
35433: ARRAY
35434: PPUSH
35435: CALL_OW 266
35439: PUSH
35440: LD_VAR 0 3
35444: PUSH
35445: LD_VAR 0 4
35449: ARRAY
35450: PPUSH
35451: CALL_OW 250
35455: PUSH
35456: LD_VAR 0 3
35460: PUSH
35461: LD_VAR 0 4
35465: ARRAY
35466: PPUSH
35467: CALL_OW 251
35471: PUSH
35472: LD_VAR 0 3
35476: PUSH
35477: LD_VAR 0 4
35481: ARRAY
35482: PPUSH
35483: CALL_OW 254
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: ADD
35497: ST_TO_ADDR
35498: GO 35411
35500: POP
35501: POP
// result := list ;
35502: LD_ADDR_VAR 0 2
35506: PUSH
35507: LD_VAR 0 5
35511: ST_TO_ADDR
// end ;
35512: LD_VAR 0 2
35516: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35517: LD_INT 0
35519: PPUSH
35520: PPUSH
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
35525: PPUSH
// if not factory then
35526: LD_VAR 0 1
35530: NOT
35531: IFFALSE 35535
// exit ;
35533: GO 36128
// if control = control_apeman then
35535: LD_VAR 0 4
35539: PUSH
35540: LD_INT 5
35542: EQUAL
35543: IFFALSE 35652
// begin tmp := UnitsInside ( factory ) ;
35545: LD_ADDR_VAR 0 8
35549: PUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 313
35559: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35560: LD_VAR 0 8
35564: PPUSH
35565: LD_INT 25
35567: PUSH
35568: LD_INT 12
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PPUSH
35575: CALL_OW 72
35579: NOT
35580: IFFALSE 35590
// control := control_manual ;
35582: LD_ADDR_VAR 0 4
35586: PUSH
35587: LD_INT 1
35589: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35590: LD_ADDR_VAR 0 8
35594: PUSH
35595: LD_VAR 0 1
35599: PPUSH
35600: CALL 35287 0 1
35604: ST_TO_ADDR
// if tmp then
35605: LD_VAR 0 8
35609: IFFALSE 35652
// begin for i in tmp do
35611: LD_ADDR_VAR 0 7
35615: PUSH
35616: LD_VAR 0 8
35620: PUSH
35621: FOR_IN
35622: IFFALSE 35650
// if i [ 1 ] = b_ext_radio then
35624: LD_VAR 0 7
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PUSH
35633: LD_INT 22
35635: EQUAL
35636: IFFALSE 35648
// begin control := control_remote ;
35638: LD_ADDR_VAR 0 4
35642: PUSH
35643: LD_INT 2
35645: ST_TO_ADDR
// break ;
35646: GO 35650
// end ;
35648: GO 35621
35650: POP
35651: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35652: LD_VAR 0 1
35656: PPUSH
35657: LD_VAR 0 2
35661: PPUSH
35662: LD_VAR 0 3
35666: PPUSH
35667: LD_VAR 0 4
35671: PPUSH
35672: LD_VAR 0 5
35676: PPUSH
35677: CALL_OW 448
35681: IFFALSE 35716
// begin result := [ chassis , engine , control , weapon ] ;
35683: LD_ADDR_VAR 0 6
35687: PUSH
35688: LD_VAR 0 2
35692: PUSH
35693: LD_VAR 0 3
35697: PUSH
35698: LD_VAR 0 4
35702: PUSH
35703: LD_VAR 0 5
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// exit ;
35714: GO 36128
// end ; _chassis := AvailableChassisList ( factory ) ;
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: LD_VAR 0 1
35725: PPUSH
35726: CALL_OW 475
35730: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35731: LD_ADDR_VAR 0 11
35735: PUSH
35736: LD_VAR 0 1
35740: PPUSH
35741: CALL_OW 476
35745: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35746: LD_ADDR_VAR 0 12
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: CALL_OW 477
35760: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35761: LD_ADDR_VAR 0 10
35765: PUSH
35766: LD_VAR 0 1
35770: PPUSH
35771: CALL_OW 478
35775: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35776: LD_VAR 0 9
35780: NOT
35781: PUSH
35782: LD_VAR 0 11
35786: NOT
35787: OR
35788: PUSH
35789: LD_VAR 0 12
35793: NOT
35794: OR
35795: PUSH
35796: LD_VAR 0 10
35800: NOT
35801: OR
35802: IFFALSE 35837
// begin result := [ chassis , engine , control , weapon ] ;
35804: LD_ADDR_VAR 0 6
35808: PUSH
35809: LD_VAR 0 2
35813: PUSH
35814: LD_VAR 0 3
35818: PUSH
35819: LD_VAR 0 4
35823: PUSH
35824: LD_VAR 0 5
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
// exit ;
35835: GO 36128
// end ; if not chassis in _chassis then
35837: LD_VAR 0 2
35841: PUSH
35842: LD_VAR 0 9
35846: IN
35847: NOT
35848: IFFALSE 35874
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35850: LD_ADDR_VAR 0 2
35854: PUSH
35855: LD_VAR 0 9
35859: PUSH
35860: LD_INT 1
35862: PPUSH
35863: LD_VAR 0 9
35867: PPUSH
35868: CALL_OW 12
35872: ARRAY
35873: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35874: LD_VAR 0 2
35878: PPUSH
35879: LD_VAR 0 3
35883: PPUSH
35884: CALL 36133 0 2
35888: NOT
35889: IFFALSE 35948
// repeat engine := _engine [ 1 ] ;
35891: LD_ADDR_VAR 0 3
35895: PUSH
35896: LD_VAR 0 11
35900: PUSH
35901: LD_INT 1
35903: ARRAY
35904: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35905: LD_ADDR_VAR 0 11
35909: PUSH
35910: LD_VAR 0 11
35914: PPUSH
35915: LD_INT 1
35917: PPUSH
35918: CALL_OW 3
35922: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35923: LD_VAR 0 2
35927: PPUSH
35928: LD_VAR 0 3
35932: PPUSH
35933: CALL 36133 0 2
35937: PUSH
35938: LD_VAR 0 11
35942: PUSH
35943: EMPTY
35944: EQUAL
35945: OR
35946: IFFALSE 35891
// if not control in _control then
35948: LD_VAR 0 4
35952: PUSH
35953: LD_VAR 0 12
35957: IN
35958: NOT
35959: IFFALSE 35985
// control := _control [ rand ( 1 , _control ) ] ;
35961: LD_ADDR_VAR 0 4
35965: PUSH
35966: LD_VAR 0 12
35970: PUSH
35971: LD_INT 1
35973: PPUSH
35974: LD_VAR 0 12
35978: PPUSH
35979: CALL_OW 12
35983: ARRAY
35984: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35985: LD_VAR 0 2
35989: PPUSH
35990: LD_VAR 0 5
35994: PPUSH
35995: CALL 36353 0 2
35999: NOT
36000: IFFALSE 36059
// repeat weapon := _weapon [ 1 ] ;
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_VAR 0 10
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36016: LD_ADDR_VAR 0 10
36020: PUSH
36021: LD_VAR 0 10
36025: PPUSH
36026: LD_INT 1
36028: PPUSH
36029: CALL_OW 3
36033: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36034: LD_VAR 0 2
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL 36353 0 2
36048: PUSH
36049: LD_VAR 0 10
36053: PUSH
36054: EMPTY
36055: EQUAL
36056: OR
36057: IFFALSE 36002
// result := [ ] ;
36059: LD_ADDR_VAR 0 6
36063: PUSH
36064: EMPTY
36065: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36066: LD_VAR 0 1
36070: PPUSH
36071: LD_VAR 0 2
36075: PPUSH
36076: LD_VAR 0 3
36080: PPUSH
36081: LD_VAR 0 4
36085: PPUSH
36086: LD_VAR 0 5
36090: PPUSH
36091: CALL_OW 448
36095: IFFALSE 36128
// result := [ chassis , engine , control , weapon ] ;
36097: LD_ADDR_VAR 0 6
36101: PUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_VAR 0 3
36111: PUSH
36112: LD_VAR 0 4
36116: PUSH
36117: LD_VAR 0 5
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// end ;
36128: LD_VAR 0 6
36132: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36133: LD_INT 0
36135: PPUSH
// if not chassis or not engine then
36136: LD_VAR 0 1
36140: NOT
36141: PUSH
36142: LD_VAR 0 2
36146: NOT
36147: OR
36148: IFFALSE 36152
// exit ;
36150: GO 36348
// case engine of engine_solar :
36152: LD_VAR 0 2
36156: PUSH
36157: LD_INT 2
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36203
36165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_INT 11
36173: PUSH
36174: LD_INT 12
36176: PUSH
36177: LD_INT 13
36179: PUSH
36180: LD_INT 14
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
36201: GO 36332
36203: LD_INT 1
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36273
36211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 11
36219: PUSH
36220: LD_INT 12
36222: PUSH
36223: LD_INT 13
36225: PUSH
36226: LD_INT 14
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: LD_INT 4
36240: PUSH
36241: LD_INT 5
36243: PUSH
36244: LD_INT 21
36246: PUSH
36247: LD_INT 23
36249: PUSH
36250: LD_INT 22
36252: PUSH
36253: LD_INT 24
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
36271: GO 36332
36273: LD_INT 3
36275: DOUBLE
36276: EQUAL
36277: IFTRUE 36281
36279: GO 36331
36281: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36282: LD_ADDR_VAR 0 3
36286: PUSH
36287: LD_INT 13
36289: PUSH
36290: LD_INT 14
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: LD_INT 3
36298: PUSH
36299: LD_INT 4
36301: PUSH
36302: LD_INT 5
36304: PUSH
36305: LD_INT 21
36307: PUSH
36308: LD_INT 22
36310: PUSH
36311: LD_INT 23
36313: PUSH
36314: LD_INT 24
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: ST_TO_ADDR
36329: GO 36332
36331: POP
// result := ( chassis in result ) ;
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_VAR 0 1
36341: PUSH
36342: LD_VAR 0 3
36346: IN
36347: ST_TO_ADDR
// end ;
36348: LD_VAR 0 3
36352: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36353: LD_INT 0
36355: PPUSH
// if not chassis or not weapon then
36356: LD_VAR 0 1
36360: NOT
36361: PUSH
36362: LD_VAR 0 2
36366: NOT
36367: OR
36368: IFFALSE 36372
// exit ;
36370: GO 37434
// case weapon of us_machine_gun :
36372: LD_VAR 0 2
36376: PUSH
36377: LD_INT 2
36379: DOUBLE
36380: EQUAL
36381: IFTRUE 36385
36383: GO 36415
36385: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36386: LD_ADDR_VAR 0 3
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: LD_INT 4
36402: PUSH
36403: LD_INT 5
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
36413: GO 37418
36415: LD_INT 3
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36423
36421: GO 36453
36423: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36424: LD_ADDR_VAR 0 3
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 4
36440: PUSH
36441: LD_INT 5
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
36451: GO 37418
36453: LD_INT 11
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36491
36461: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36462: LD_ADDR_VAR 0 3
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 37418
36491: LD_INT 4
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36525
36499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: LD_INT 4
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 37418
36525: LD_INT 5
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36559
36533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: LD_INT 4
36547: PUSH
36548: LD_INT 5
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 37418
36559: LD_INT 9
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36593
36567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: LD_INT 4
36581: PUSH
36582: LD_INT 5
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
36591: GO 37418
36593: LD_INT 7
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36627
36601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 4
36615: PUSH
36616: LD_INT 5
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
36625: GO 37418
36627: LD_INT 12
36629: DOUBLE
36630: EQUAL
36631: IFTRUE 36635
36633: GO 36661
36635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36636: LD_ADDR_VAR 0 3
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: LD_INT 5
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
36659: GO 37418
36661: LD_INT 13
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 36695
36669: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36670: LD_ADDR_VAR 0 3
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 3
36680: PUSH
36681: LD_INT 4
36683: PUSH
36684: LD_INT 5
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
36693: GO 37418
36695: LD_INT 14
36697: DOUBLE
36698: EQUAL
36699: IFTRUE 36703
36701: GO 36721
36703: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36704: LD_ADDR_VAR 0 3
36708: PUSH
36709: LD_INT 4
36711: PUSH
36712: LD_INT 5
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: ST_TO_ADDR
36719: GO 37418
36721: LD_INT 6
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36747
36729: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 4
36737: PUSH
36738: LD_INT 5
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 37418
36747: LD_INT 10
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36773
36755: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 4
36763: PUSH
36764: LD_INT 5
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: ST_TO_ADDR
36771: GO 37418
36773: LD_INT 22
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36781
36779: GO 36807
36781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: LD_INT 11
36789: PUSH
36790: LD_INT 12
36792: PUSH
36793: LD_INT 13
36795: PUSH
36796: LD_INT 14
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
36805: GO 37418
36807: LD_INT 23
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36815
36813: GO 36841
36815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36816: LD_ADDR_VAR 0 3
36820: PUSH
36821: LD_INT 11
36823: PUSH
36824: LD_INT 12
36826: PUSH
36827: LD_INT 13
36829: PUSH
36830: LD_INT 14
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
36839: GO 37418
36841: LD_INT 24
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36849
36847: GO 36875
36849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_INT 11
36857: PUSH
36858: LD_INT 12
36860: PUSH
36861: LD_INT 13
36863: PUSH
36864: LD_INT 14
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
36873: GO 37418
36875: LD_INT 30
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36909
36883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_INT 11
36891: PUSH
36892: LD_INT 12
36894: PUSH
36895: LD_INT 13
36897: PUSH
36898: LD_INT 14
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
36907: GO 37418
36909: LD_INT 25
36911: DOUBLE
36912: EQUAL
36913: IFTRUE 36917
36915: GO 36935
36917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_INT 13
36925: PUSH
36926: LD_INT 14
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: ST_TO_ADDR
36933: GO 37418
36935: LD_INT 27
36937: DOUBLE
36938: EQUAL
36939: IFTRUE 36943
36941: GO 36961
36943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_INT 13
36951: PUSH
36952: LD_INT 14
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: ST_TO_ADDR
36959: GO 37418
36961: LD_EXP 37
36965: DOUBLE
36966: EQUAL
36967: IFTRUE 36971
36969: GO 36997
36971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_INT 11
36979: PUSH
36980: LD_INT 12
36982: PUSH
36983: LD_INT 13
36985: PUSH
36986: LD_INT 14
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
36995: GO 37418
36997: LD_INT 28
36999: DOUBLE
37000: EQUAL
37001: IFTRUE 37005
37003: GO 37023
37005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37006: LD_ADDR_VAR 0 3
37010: PUSH
37011: LD_INT 13
37013: PUSH
37014: LD_INT 14
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: ST_TO_ADDR
37021: GO 37418
37023: LD_INT 29
37025: DOUBLE
37026: EQUAL
37027: IFTRUE 37031
37029: GO 37049
37031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_INT 13
37039: PUSH
37040: LD_INT 14
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: ST_TO_ADDR
37047: GO 37418
37049: LD_INT 31
37051: DOUBLE
37052: EQUAL
37053: IFTRUE 37057
37055: GO 37075
37057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37058: LD_ADDR_VAR 0 3
37062: PUSH
37063: LD_INT 13
37065: PUSH
37066: LD_INT 14
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: ST_TO_ADDR
37073: GO 37418
37075: LD_INT 26
37077: DOUBLE
37078: EQUAL
37079: IFTRUE 37083
37081: GO 37101
37083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37084: LD_ADDR_VAR 0 3
37088: PUSH
37089: LD_INT 13
37091: PUSH
37092: LD_INT 14
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: ST_TO_ADDR
37099: GO 37418
37101: LD_INT 42
37103: DOUBLE
37104: EQUAL
37105: IFTRUE 37109
37107: GO 37135
37109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37110: LD_ADDR_VAR 0 3
37114: PUSH
37115: LD_INT 21
37117: PUSH
37118: LD_INT 22
37120: PUSH
37121: LD_INT 23
37123: PUSH
37124: LD_INT 24
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
37133: GO 37418
37135: LD_INT 43
37137: DOUBLE
37138: EQUAL
37139: IFTRUE 37143
37141: GO 37169
37143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_INT 21
37151: PUSH
37152: LD_INT 22
37154: PUSH
37155: LD_INT 23
37157: PUSH
37158: LD_INT 24
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
37167: GO 37418
37169: LD_INT 44
37171: DOUBLE
37172: EQUAL
37173: IFTRUE 37177
37175: GO 37203
37177: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37178: LD_ADDR_VAR 0 3
37182: PUSH
37183: LD_INT 21
37185: PUSH
37186: LD_INT 22
37188: PUSH
37189: LD_INT 23
37191: PUSH
37192: LD_INT 24
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: ST_TO_ADDR
37201: GO 37418
37203: LD_INT 45
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37237
37211: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37212: LD_ADDR_VAR 0 3
37216: PUSH
37217: LD_INT 21
37219: PUSH
37220: LD_INT 22
37222: PUSH
37223: LD_INT 23
37225: PUSH
37226: LD_INT 24
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: ST_TO_ADDR
37235: GO 37418
37237: LD_INT 49
37239: DOUBLE
37240: EQUAL
37241: IFTRUE 37245
37243: GO 37271
37245: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37246: LD_ADDR_VAR 0 3
37250: PUSH
37251: LD_INT 21
37253: PUSH
37254: LD_INT 22
37256: PUSH
37257: LD_INT 23
37259: PUSH
37260: LD_INT 24
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
37269: GO 37418
37271: LD_INT 51
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37279
37277: GO 37305
37279: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37280: LD_ADDR_VAR 0 3
37284: PUSH
37285: LD_INT 21
37287: PUSH
37288: LD_INT 22
37290: PUSH
37291: LD_INT 23
37293: PUSH
37294: LD_INT 24
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: ST_TO_ADDR
37303: GO 37418
37305: LD_INT 52
37307: DOUBLE
37308: EQUAL
37309: IFTRUE 37313
37311: GO 37339
37313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37314: LD_ADDR_VAR 0 3
37318: PUSH
37319: LD_INT 21
37321: PUSH
37322: LD_INT 22
37324: PUSH
37325: LD_INT 23
37327: PUSH
37328: LD_INT 24
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
37337: GO 37418
37339: LD_INT 53
37341: DOUBLE
37342: EQUAL
37343: IFTRUE 37347
37345: GO 37365
37347: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_INT 23
37355: PUSH
37356: LD_INT 24
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: ST_TO_ADDR
37363: GO 37418
37365: LD_INT 46
37367: DOUBLE
37368: EQUAL
37369: IFTRUE 37373
37371: GO 37391
37373: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37374: LD_ADDR_VAR 0 3
37378: PUSH
37379: LD_INT 23
37381: PUSH
37382: LD_INT 24
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: ST_TO_ADDR
37389: GO 37418
37391: LD_INT 47
37393: DOUBLE
37394: EQUAL
37395: IFTRUE 37399
37397: GO 37417
37399: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37400: LD_ADDR_VAR 0 3
37404: PUSH
37405: LD_INT 23
37407: PUSH
37408: LD_INT 24
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: ST_TO_ADDR
37415: GO 37418
37417: POP
// result := ( chassis in result ) ;
37418: LD_ADDR_VAR 0 3
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_VAR 0 3
37432: IN
37433: ST_TO_ADDR
// end ;
37434: LD_VAR 0 3
37438: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37439: LD_INT 0
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
// result := array ;
37448: LD_ADDR_VAR 0 5
37452: PUSH
37453: LD_VAR 0 1
37457: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37458: LD_VAR 0 1
37462: NOT
37463: PUSH
37464: LD_VAR 0 2
37468: NOT
37469: OR
37470: PUSH
37471: LD_VAR 0 3
37475: NOT
37476: OR
37477: PUSH
37478: LD_VAR 0 2
37482: PUSH
37483: LD_VAR 0 1
37487: GREATER
37488: OR
37489: PUSH
37490: LD_VAR 0 3
37494: PUSH
37495: LD_VAR 0 1
37499: GREATER
37500: OR
37501: IFFALSE 37505
// exit ;
37503: GO 37801
// if direction then
37505: LD_VAR 0 4
37509: IFFALSE 37573
// begin d := 1 ;
37511: LD_ADDR_VAR 0 9
37515: PUSH
37516: LD_INT 1
37518: ST_TO_ADDR
// if i_from > i_to then
37519: LD_VAR 0 2
37523: PUSH
37524: LD_VAR 0 3
37528: GREATER
37529: IFFALSE 37555
// length := ( array - i_from ) + i_to else
37531: LD_ADDR_VAR 0 11
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: LD_VAR 0 2
37545: MINUS
37546: PUSH
37547: LD_VAR 0 3
37551: PLUS
37552: ST_TO_ADDR
37553: GO 37571
// length := i_to - i_from ;
37555: LD_ADDR_VAR 0 11
37559: PUSH
37560: LD_VAR 0 3
37564: PUSH
37565: LD_VAR 0 2
37569: MINUS
37570: ST_TO_ADDR
// end else
37571: GO 37634
// begin d := - 1 ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: ST_TO_ADDR
// if i_from > i_to then
37582: LD_VAR 0 2
37586: PUSH
37587: LD_VAR 0 3
37591: GREATER
37592: IFFALSE 37612
// length := i_from - i_to else
37594: LD_ADDR_VAR 0 11
37598: PUSH
37599: LD_VAR 0 2
37603: PUSH
37604: LD_VAR 0 3
37608: MINUS
37609: ST_TO_ADDR
37610: GO 37634
// length := ( array - i_to ) + i_from ;
37612: LD_ADDR_VAR 0 11
37616: PUSH
37617: LD_VAR 0 1
37621: PUSH
37622: LD_VAR 0 3
37626: MINUS
37627: PUSH
37628: LD_VAR 0 2
37632: PLUS
37633: ST_TO_ADDR
// end ; if not length then
37634: LD_VAR 0 11
37638: NOT
37639: IFFALSE 37643
// exit ;
37641: GO 37801
// tmp := array ;
37643: LD_ADDR_VAR 0 10
37647: PUSH
37648: LD_VAR 0 1
37652: ST_TO_ADDR
// for i = 1 to length do
37653: LD_ADDR_VAR 0 6
37657: PUSH
37658: DOUBLE
37659: LD_INT 1
37661: DEC
37662: ST_TO_ADDR
37663: LD_VAR 0 11
37667: PUSH
37668: FOR_TO
37669: IFFALSE 37789
// begin for j = 1 to array do
37671: LD_ADDR_VAR 0 7
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_VAR 0 1
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37775
// begin k := j + d ;
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: LD_VAR 0 7
37698: PUSH
37699: LD_VAR 0 9
37703: PLUS
37704: ST_TO_ADDR
// if k > array then
37705: LD_VAR 0 8
37709: PUSH
37710: LD_VAR 0 1
37714: GREATER
37715: IFFALSE 37725
// k := 1 ;
37717: LD_ADDR_VAR 0 8
37721: PUSH
37722: LD_INT 1
37724: ST_TO_ADDR
// if not k then
37725: LD_VAR 0 8
37729: NOT
37730: IFFALSE 37742
// k := array ;
37732: LD_ADDR_VAR 0 8
37736: PUSH
37737: LD_VAR 0 1
37741: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37742: LD_ADDR_VAR 0 10
37746: PUSH
37747: LD_VAR 0 10
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: LD_VAR 0 1
37761: PUSH
37762: LD_VAR 0 7
37766: ARRAY
37767: PPUSH
37768: CALL_OW 1
37772: ST_TO_ADDR
// end ;
37773: GO 37686
37775: POP
37776: POP
// array := tmp ;
37777: LD_ADDR_VAR 0 1
37781: PUSH
37782: LD_VAR 0 10
37786: ST_TO_ADDR
// end ;
37787: GO 37668
37789: POP
37790: POP
// result := array ;
37791: LD_ADDR_VAR 0 5
37795: PUSH
37796: LD_VAR 0 1
37800: ST_TO_ADDR
// end ;
37801: LD_VAR 0 5
37805: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
// result := 0 ;
37810: LD_ADDR_VAR 0 3
37814: PUSH
37815: LD_INT 0
37817: ST_TO_ADDR
// if not array or not value in array then
37818: LD_VAR 0 1
37822: NOT
37823: PUSH
37824: LD_VAR 0 2
37828: PUSH
37829: LD_VAR 0 1
37833: IN
37834: NOT
37835: OR
37836: IFFALSE 37840
// exit ;
37838: GO 37894
// for i = 1 to array do
37840: LD_ADDR_VAR 0 4
37844: PUSH
37845: DOUBLE
37846: LD_INT 1
37848: DEC
37849: ST_TO_ADDR
37850: LD_VAR 0 1
37854: PUSH
37855: FOR_TO
37856: IFFALSE 37892
// if value = array [ i ] then
37858: LD_VAR 0 2
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: LD_VAR 0 4
37872: ARRAY
37873: EQUAL
37874: IFFALSE 37890
// begin result := i ;
37876: LD_ADDR_VAR 0 3
37880: PUSH
37881: LD_VAR 0 4
37885: ST_TO_ADDR
// exit ;
37886: POP
37887: POP
37888: GO 37894
// end ;
37890: GO 37855
37892: POP
37893: POP
// end ;
37894: LD_VAR 0 3
37898: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37899: LD_INT 0
37901: PPUSH
// vc_chassis := chassis ;
37902: LD_ADDR_OWVAR 37
37906: PUSH
37907: LD_VAR 0 1
37911: ST_TO_ADDR
// vc_engine := engine ;
37912: LD_ADDR_OWVAR 39
37916: PUSH
37917: LD_VAR 0 2
37921: ST_TO_ADDR
// vc_control := control ;
37922: LD_ADDR_OWVAR 38
37926: PUSH
37927: LD_VAR 0 3
37931: ST_TO_ADDR
// vc_weapon := weapon ;
37932: LD_ADDR_OWVAR 40
37936: PUSH
37937: LD_VAR 0 4
37941: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37942: LD_ADDR_OWVAR 41
37946: PUSH
37947: LD_VAR 0 5
37951: ST_TO_ADDR
// end ;
37952: LD_VAR 0 6
37956: RET
// export function WantPlant ( unit ) ; var task ; begin
37957: LD_INT 0
37959: PPUSH
37960: PPUSH
// result := false ;
37961: LD_ADDR_VAR 0 2
37965: PUSH
37966: LD_INT 0
37968: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 437
37983: ST_TO_ADDR
// if task then
37984: LD_VAR 0 3
37988: IFFALSE 38016
// if task [ 1 ] [ 1 ] = p then
37990: LD_VAR 0 3
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PUSH
37999: LD_INT 1
38001: ARRAY
38002: PUSH
38003: LD_STRING p
38005: EQUAL
38006: IFFALSE 38016
// result := true ;
38008: LD_ADDR_VAR 0 2
38012: PUSH
38013: LD_INT 1
38015: ST_TO_ADDR
// end ;
38016: LD_VAR 0 2
38020: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
// if pos < 1 then
38027: LD_VAR 0 2
38031: PUSH
38032: LD_INT 1
38034: LESS
38035: IFFALSE 38039
// exit ;
38037: GO 38342
// if pos = 1 then
38039: LD_VAR 0 2
38043: PUSH
38044: LD_INT 1
38046: EQUAL
38047: IFFALSE 38080
// result := Replace ( arr , pos [ 1 ] , value ) else
38049: LD_ADDR_VAR 0 4
38053: PUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: LD_VAR 0 2
38063: PUSH
38064: LD_INT 1
38066: ARRAY
38067: PPUSH
38068: LD_VAR 0 3
38072: PPUSH
38073: CALL_OW 1
38077: ST_TO_ADDR
38078: GO 38342
// begin tmp := arr ;
38080: LD_ADDR_VAR 0 6
38084: PUSH
38085: LD_VAR 0 1
38089: ST_TO_ADDR
// s_arr := [ tmp ] ;
38090: LD_ADDR_VAR 0 7
38094: PUSH
38095: LD_VAR 0 6
38099: PUSH
38100: EMPTY
38101: LIST
38102: ST_TO_ADDR
// for i = 1 to pos - 1 do
38103: LD_ADDR_VAR 0 5
38107: PUSH
38108: DOUBLE
38109: LD_INT 1
38111: DEC
38112: ST_TO_ADDR
38113: LD_VAR 0 2
38117: PUSH
38118: LD_INT 1
38120: MINUS
38121: PUSH
38122: FOR_TO
38123: IFFALSE 38168
// begin tmp := tmp [ pos [ i ] ] ;
38125: LD_ADDR_VAR 0 6
38129: PUSH
38130: LD_VAR 0 6
38134: PUSH
38135: LD_VAR 0 2
38139: PUSH
38140: LD_VAR 0 5
38144: ARRAY
38145: ARRAY
38146: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38147: LD_ADDR_VAR 0 7
38151: PUSH
38152: LD_VAR 0 7
38156: PUSH
38157: LD_VAR 0 6
38161: PUSH
38162: EMPTY
38163: LIST
38164: ADD
38165: ST_TO_ADDR
// end ;
38166: GO 38122
38168: POP
38169: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38170: LD_ADDR_VAR 0 6
38174: PUSH
38175: LD_VAR 0 6
38179: PPUSH
38180: LD_VAR 0 2
38184: PUSH
38185: LD_VAR 0 2
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 3
38195: PPUSH
38196: CALL_OW 1
38200: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38201: LD_ADDR_VAR 0 7
38205: PUSH
38206: LD_VAR 0 7
38210: PPUSH
38211: LD_VAR 0 7
38215: PPUSH
38216: LD_VAR 0 6
38220: PPUSH
38221: CALL_OW 1
38225: ST_TO_ADDR
// for i = s_arr downto 2 do
38226: LD_ADDR_VAR 0 5
38230: PUSH
38231: DOUBLE
38232: LD_VAR 0 7
38236: INC
38237: ST_TO_ADDR
38238: LD_INT 2
38240: PUSH
38241: FOR_DOWNTO
38242: IFFALSE 38326
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38244: LD_ADDR_VAR 0 6
38248: PUSH
38249: LD_VAR 0 7
38253: PUSH
38254: LD_VAR 0 5
38258: PUSH
38259: LD_INT 1
38261: MINUS
38262: ARRAY
38263: PPUSH
38264: LD_VAR 0 2
38268: PUSH
38269: LD_VAR 0 5
38273: PUSH
38274: LD_INT 1
38276: MINUS
38277: ARRAY
38278: PPUSH
38279: LD_VAR 0 7
38283: PUSH
38284: LD_VAR 0 5
38288: ARRAY
38289: PPUSH
38290: CALL_OW 1
38294: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38295: LD_ADDR_VAR 0 7
38299: PUSH
38300: LD_VAR 0 7
38304: PPUSH
38305: LD_VAR 0 5
38309: PUSH
38310: LD_INT 1
38312: MINUS
38313: PPUSH
38314: LD_VAR 0 6
38318: PPUSH
38319: CALL_OW 1
38323: ST_TO_ADDR
// end ;
38324: GO 38241
38326: POP
38327: POP
// result := s_arr [ 1 ] ;
38328: LD_ADDR_VAR 0 4
38332: PUSH
38333: LD_VAR 0 7
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: ST_TO_ADDR
// end ; end ;
38342: LD_VAR 0 4
38346: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38347: LD_INT 0
38349: PPUSH
38350: PPUSH
// if not list then
38351: LD_VAR 0 1
38355: NOT
38356: IFFALSE 38360
// exit ;
38358: GO 38451
// i := list [ pos1 ] ;
38360: LD_ADDR_VAR 0 5
38364: PUSH
38365: LD_VAR 0 1
38369: PUSH
38370: LD_VAR 0 2
38374: ARRAY
38375: ST_TO_ADDR
// if not i then
38376: LD_VAR 0 5
38380: NOT
38381: IFFALSE 38385
// exit ;
38383: GO 38451
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38385: LD_ADDR_VAR 0 1
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: LD_VAR 0 2
38399: PPUSH
38400: LD_VAR 0 1
38404: PUSH
38405: LD_VAR 0 3
38409: ARRAY
38410: PPUSH
38411: CALL_OW 1
38415: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38416: LD_ADDR_VAR 0 1
38420: PUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: LD_VAR 0 3
38430: PPUSH
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL_OW 1
38440: ST_TO_ADDR
// result := list ;
38441: LD_ADDR_VAR 0 4
38445: PUSH
38446: LD_VAR 0 1
38450: ST_TO_ADDR
// end ;
38451: LD_VAR 0 4
38455: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38456: LD_INT 0
38458: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38459: LD_ADDR_VAR 0 5
38463: PUSH
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 250
38473: PPUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 251
38483: PPUSH
38484: LD_VAR 0 2
38488: PPUSH
38489: LD_VAR 0 3
38493: PPUSH
38494: LD_VAR 0 4
38498: PPUSH
38499: CALL 38509 0 5
38503: ST_TO_ADDR
// end ;
38504: LD_VAR 0 5
38508: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38509: LD_INT 0
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
// if not list then
38515: LD_VAR 0 3
38519: NOT
38520: IFFALSE 38524
// exit ;
38522: GO 38912
// result := [ ] ;
38524: LD_ADDR_VAR 0 6
38528: PUSH
38529: EMPTY
38530: ST_TO_ADDR
// for i in list do
38531: LD_ADDR_VAR 0 7
38535: PUSH
38536: LD_VAR 0 3
38540: PUSH
38541: FOR_IN
38542: IFFALSE 38744
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38544: LD_ADDR_VAR 0 9
38548: PUSH
38549: LD_VAR 0 7
38553: PPUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: LD_VAR 0 2
38563: PPUSH
38564: CALL_OW 297
38568: ST_TO_ADDR
// if not result then
38569: LD_VAR 0 6
38573: NOT
38574: IFFALSE 38600
// result := [ [ i , tmp ] ] else
38576: LD_ADDR_VAR 0 6
38580: PUSH
38581: LD_VAR 0 7
38585: PUSH
38586: LD_VAR 0 9
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: ST_TO_ADDR
38598: GO 38742
// begin if result [ result ] [ 2 ] < tmp then
38600: LD_VAR 0 6
38604: PUSH
38605: LD_VAR 0 6
38609: ARRAY
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: PUSH
38615: LD_VAR 0 9
38619: LESS
38620: IFFALSE 38662
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38622: LD_ADDR_VAR 0 6
38626: PUSH
38627: LD_VAR 0 6
38631: PPUSH
38632: LD_VAR 0 6
38636: PUSH
38637: LD_INT 1
38639: PLUS
38640: PPUSH
38641: LD_VAR 0 7
38645: PUSH
38646: LD_VAR 0 9
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PPUSH
38655: CALL_OW 2
38659: ST_TO_ADDR
38660: GO 38742
// for j = 1 to result do
38662: LD_ADDR_VAR 0 8
38666: PUSH
38667: DOUBLE
38668: LD_INT 1
38670: DEC
38671: ST_TO_ADDR
38672: LD_VAR 0 6
38676: PUSH
38677: FOR_TO
38678: IFFALSE 38740
// begin if tmp < result [ j ] [ 2 ] then
38680: LD_VAR 0 9
38684: PUSH
38685: LD_VAR 0 6
38689: PUSH
38690: LD_VAR 0 8
38694: ARRAY
38695: PUSH
38696: LD_INT 2
38698: ARRAY
38699: LESS
38700: IFFALSE 38738
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38702: LD_ADDR_VAR 0 6
38706: PUSH
38707: LD_VAR 0 6
38711: PPUSH
38712: LD_VAR 0 8
38716: PPUSH
38717: LD_VAR 0 7
38721: PUSH
38722: LD_VAR 0 9
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PPUSH
38731: CALL_OW 2
38735: ST_TO_ADDR
// break ;
38736: GO 38740
// end ; end ;
38738: GO 38677
38740: POP
38741: POP
// end ; end ;
38742: GO 38541
38744: POP
38745: POP
// if result and not asc then
38746: LD_VAR 0 6
38750: PUSH
38751: LD_VAR 0 4
38755: NOT
38756: AND
38757: IFFALSE 38832
// begin tmp := result ;
38759: LD_ADDR_VAR 0 9
38763: PUSH
38764: LD_VAR 0 6
38768: ST_TO_ADDR
// for i = tmp downto 1 do
38769: LD_ADDR_VAR 0 7
38773: PUSH
38774: DOUBLE
38775: LD_VAR 0 9
38779: INC
38780: ST_TO_ADDR
38781: LD_INT 1
38783: PUSH
38784: FOR_DOWNTO
38785: IFFALSE 38830
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_VAR 0 6
38796: PPUSH
38797: LD_VAR 0 9
38801: PUSH
38802: LD_VAR 0 7
38806: MINUS
38807: PUSH
38808: LD_INT 1
38810: PLUS
38811: PPUSH
38812: LD_VAR 0 9
38816: PUSH
38817: LD_VAR 0 7
38821: ARRAY
38822: PPUSH
38823: CALL_OW 1
38827: ST_TO_ADDR
38828: GO 38784
38830: POP
38831: POP
// end ; tmp := [ ] ;
38832: LD_ADDR_VAR 0 9
38836: PUSH
38837: EMPTY
38838: ST_TO_ADDR
// if mode then
38839: LD_VAR 0 5
38843: IFFALSE 38912
// begin for i = 1 to result do
38845: LD_ADDR_VAR 0 7
38849: PUSH
38850: DOUBLE
38851: LD_INT 1
38853: DEC
38854: ST_TO_ADDR
38855: LD_VAR 0 6
38859: PUSH
38860: FOR_TO
38861: IFFALSE 38900
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38863: LD_ADDR_VAR 0 9
38867: PUSH
38868: LD_VAR 0 9
38872: PPUSH
38873: LD_VAR 0 7
38877: PPUSH
38878: LD_VAR 0 6
38882: PUSH
38883: LD_VAR 0 7
38887: ARRAY
38888: PUSH
38889: LD_INT 1
38891: ARRAY
38892: PPUSH
38893: CALL_OW 1
38897: ST_TO_ADDR
38898: GO 38860
38900: POP
38901: POP
// result := tmp ;
38902: LD_ADDR_VAR 0 6
38906: PUSH
38907: LD_VAR 0 9
38911: ST_TO_ADDR
// end ; end ;
38912: LD_VAR 0 6
38916: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38917: LD_INT 0
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38925: LD_ADDR_VAR 0 5
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// if not x or not y then
38947: LD_VAR 0 2
38951: NOT
38952: PUSH
38953: LD_VAR 0 3
38957: NOT
38958: OR
38959: IFFALSE 38963
// exit ;
38961: GO 40615
// if not range then
38963: LD_VAR 0 4
38967: NOT
38968: IFFALSE 38978
// range := 10 ;
38970: LD_ADDR_VAR 0 4
38974: PUSH
38975: LD_INT 10
38977: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38978: LD_ADDR_VAR 0 8
38982: PUSH
38983: LD_INT 81
38985: PUSH
38986: LD_VAR 0 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 92
38997: PUSH
38998: LD_VAR 0 2
39002: PUSH
39003: LD_VAR 0 3
39007: PUSH
39008: LD_VAR 0 4
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 21
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: PPUSH
39041: CALL_OW 69
39045: ST_TO_ADDR
// if not tmp then
39046: LD_VAR 0 8
39050: NOT
39051: IFFALSE 39055
// exit ;
39053: GO 40615
// for i in tmp do
39055: LD_ADDR_VAR 0 6
39059: PUSH
39060: LD_VAR 0 8
39064: PUSH
39065: FOR_IN
39066: IFFALSE 40590
// begin points := [ 0 , 0 , 0 ] ;
39068: LD_ADDR_VAR 0 9
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: LIST
39086: ST_TO_ADDR
// bpoints := 1 ;
39087: LD_ADDR_VAR 0 10
39091: PUSH
39092: LD_INT 1
39094: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39095: LD_VAR 0 6
39099: PPUSH
39100: CALL_OW 247
39104: PUSH
39105: LD_INT 1
39107: DOUBLE
39108: EQUAL
39109: IFTRUE 39113
39111: GO 39691
39113: POP
// begin if GetClass ( i ) = 1 then
39114: LD_VAR 0 6
39118: PPUSH
39119: CALL_OW 257
39123: PUSH
39124: LD_INT 1
39126: EQUAL
39127: IFFALSE 39148
// points := [ 10 , 5 , 3 ] ;
39129: LD_ADDR_VAR 0 9
39133: PUSH
39134: LD_INT 10
39136: PUSH
39137: LD_INT 5
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39148: LD_VAR 0 6
39152: PPUSH
39153: CALL_OW 257
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: LD_INT 4
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: IN
39172: IFFALSE 39193
// points := [ 3 , 2 , 1 ] ;
39174: LD_ADDR_VAR 0 9
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39193: LD_VAR 0 6
39197: PPUSH
39198: CALL_OW 257
39202: PUSH
39203: LD_INT 5
39205: EQUAL
39206: IFFALSE 39227
// points := [ 130 , 5 , 2 ] ;
39208: LD_ADDR_VAR 0 9
39212: PUSH
39213: LD_INT 130
39215: PUSH
39216: LD_INT 5
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39227: LD_VAR 0 6
39231: PPUSH
39232: CALL_OW 257
39236: PUSH
39237: LD_INT 8
39239: EQUAL
39240: IFFALSE 39261
// points := [ 35 , 35 , 30 ] ;
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: LD_INT 35
39249: PUSH
39250: LD_INT 35
39252: PUSH
39253: LD_INT 30
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39261: LD_VAR 0 6
39265: PPUSH
39266: CALL_OW 257
39270: PUSH
39271: LD_INT 9
39273: EQUAL
39274: IFFALSE 39295
// points := [ 20 , 55 , 40 ] ;
39276: LD_ADDR_VAR 0 9
39280: PUSH
39281: LD_INT 20
39283: PUSH
39284: LD_INT 55
39286: PUSH
39287: LD_INT 40
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39295: LD_VAR 0 6
39299: PPUSH
39300: CALL_OW 257
39304: PUSH
39305: LD_INT 12
39307: PUSH
39308: LD_INT 16
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: IN
39315: IFFALSE 39336
// points := [ 5 , 3 , 2 ] ;
39317: LD_ADDR_VAR 0 9
39321: PUSH
39322: LD_INT 5
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39336: LD_VAR 0 6
39340: PPUSH
39341: CALL_OW 257
39345: PUSH
39346: LD_INT 17
39348: EQUAL
39349: IFFALSE 39370
// points := [ 100 , 50 , 75 ] ;
39351: LD_ADDR_VAR 0 9
39355: PUSH
39356: LD_INT 100
39358: PUSH
39359: LD_INT 50
39361: PUSH
39362: LD_INT 75
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39370: LD_VAR 0 6
39374: PPUSH
39375: CALL_OW 257
39379: PUSH
39380: LD_INT 15
39382: EQUAL
39383: IFFALSE 39404
// points := [ 10 , 5 , 3 ] ;
39385: LD_ADDR_VAR 0 9
39389: PUSH
39390: LD_INT 10
39392: PUSH
39393: LD_INT 5
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39404: LD_VAR 0 6
39408: PPUSH
39409: CALL_OW 257
39413: PUSH
39414: LD_INT 14
39416: EQUAL
39417: IFFALSE 39438
// points := [ 10 , 0 , 0 ] ;
39419: LD_ADDR_VAR 0 9
39423: PUSH
39424: LD_INT 10
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39438: LD_VAR 0 6
39442: PPUSH
39443: CALL_OW 257
39447: PUSH
39448: LD_INT 11
39450: EQUAL
39451: IFFALSE 39472
// points := [ 30 , 10 , 5 ] ;
39453: LD_ADDR_VAR 0 9
39457: PUSH
39458: LD_INT 30
39460: PUSH
39461: LD_INT 10
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39472: LD_VAR 0 1
39476: PPUSH
39477: LD_INT 5
39479: PPUSH
39480: CALL_OW 321
39484: PUSH
39485: LD_INT 2
39487: EQUAL
39488: IFFALSE 39505
// bpoints := bpoints * 1.8 ;
39490: LD_ADDR_VAR 0 10
39494: PUSH
39495: LD_VAR 0 10
39499: PUSH
39500: LD_REAL  1.80000000000000E+0000
39503: MUL
39504: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39505: LD_VAR 0 6
39509: PPUSH
39510: CALL_OW 257
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: IN
39533: PUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: LD_INT 51
39541: PPUSH
39542: CALL_OW 321
39546: PUSH
39547: LD_INT 2
39549: EQUAL
39550: AND
39551: IFFALSE 39568
// bpoints := bpoints * 1.2 ;
39553: LD_ADDR_VAR 0 10
39557: PUSH
39558: LD_VAR 0 10
39562: PUSH
39563: LD_REAL  1.20000000000000E+0000
39566: MUL
39567: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39568: LD_VAR 0 6
39572: PPUSH
39573: CALL_OW 257
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: LD_INT 7
39583: PUSH
39584: LD_INT 9
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: IN
39592: PUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: LD_INT 52
39600: PPUSH
39601: CALL_OW 321
39605: PUSH
39606: LD_INT 2
39608: EQUAL
39609: AND
39610: IFFALSE 39627
// bpoints := bpoints * 1.5 ;
39612: LD_ADDR_VAR 0 10
39616: PUSH
39617: LD_VAR 0 10
39621: PUSH
39622: LD_REAL  1.50000000000000E+0000
39625: MUL
39626: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39627: LD_VAR 0 1
39631: PPUSH
39632: LD_INT 66
39634: PPUSH
39635: CALL_OW 321
39639: PUSH
39640: LD_INT 2
39642: EQUAL
39643: IFFALSE 39660
// bpoints := bpoints * 1.1 ;
39645: LD_ADDR_VAR 0 10
39649: PUSH
39650: LD_VAR 0 10
39654: PUSH
39655: LD_REAL  1.10000000000000E+0000
39658: MUL
39659: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39660: LD_ADDR_VAR 0 10
39664: PUSH
39665: LD_VAR 0 10
39669: PUSH
39670: LD_VAR 0 6
39674: PPUSH
39675: LD_INT 1
39677: PPUSH
39678: CALL_OW 259
39682: PUSH
39683: LD_REAL  1.15000000000000E+0000
39686: MUL
39687: MUL
39688: ST_TO_ADDR
// end ; unit_vehicle :
39689: GO 40519
39691: LD_INT 2
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 40507
39699: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39700: LD_VAR 0 6
39704: PPUSH
39705: CALL_OW 264
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 42
39715: PUSH
39716: LD_INT 24
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: IN
39724: IFFALSE 39745
// points := [ 25 , 5 , 3 ] ;
39726: LD_ADDR_VAR 0 9
39730: PUSH
39731: LD_INT 25
39733: PUSH
39734: LD_INT 5
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39745: LD_VAR 0 6
39749: PPUSH
39750: CALL_OW 264
39754: PUSH
39755: LD_INT 4
39757: PUSH
39758: LD_INT 43
39760: PUSH
39761: LD_INT 25
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: IN
39769: IFFALSE 39790
// points := [ 40 , 15 , 5 ] ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_INT 40
39778: PUSH
39779: LD_INT 15
39781: PUSH
39782: LD_INT 5
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39790: LD_VAR 0 6
39794: PPUSH
39795: CALL_OW 264
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: LD_INT 23
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: IN
39810: IFFALSE 39831
// points := [ 7 , 25 , 8 ] ;
39812: LD_ADDR_VAR 0 9
39816: PUSH
39817: LD_INT 7
39819: PUSH
39820: LD_INT 25
39822: PUSH
39823: LD_INT 8
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39831: LD_VAR 0 6
39835: PPUSH
39836: CALL_OW 264
39840: PUSH
39841: LD_INT 5
39843: PUSH
39844: LD_INT 27
39846: PUSH
39847: LD_INT 44
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: IN
39855: IFFALSE 39876
// points := [ 14 , 50 , 16 ] ;
39857: LD_ADDR_VAR 0 9
39861: PUSH
39862: LD_INT 14
39864: PUSH
39865: LD_INT 50
39867: PUSH
39868: LD_INT 16
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39876: LD_VAR 0 6
39880: PPUSH
39881: CALL_OW 264
39885: PUSH
39886: LD_INT 6
39888: PUSH
39889: LD_INT 46
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: IN
39896: IFFALSE 39917
// points := [ 32 , 120 , 70 ] ;
39898: LD_ADDR_VAR 0 9
39902: PUSH
39903: LD_INT 32
39905: PUSH
39906: LD_INT 120
39908: PUSH
39909: LD_INT 70
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39917: LD_VAR 0 6
39921: PPUSH
39922: CALL_OW 264
39926: PUSH
39927: LD_INT 7
39929: PUSH
39930: LD_INT 28
39932: PUSH
39933: LD_INT 45
39935: PUSH
39936: LD_EXP 37
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: IN
39947: IFFALSE 39968
// points := [ 35 , 20 , 45 ] ;
39949: LD_ADDR_VAR 0 9
39953: PUSH
39954: LD_INT 35
39956: PUSH
39957: LD_INT 20
39959: PUSH
39960: LD_INT 45
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39968: LD_VAR 0 6
39972: PPUSH
39973: CALL_OW 264
39977: PUSH
39978: LD_INT 47
39980: PUSH
39981: EMPTY
39982: LIST
39983: IN
39984: IFFALSE 40005
// points := [ 67 , 45 , 75 ] ;
39986: LD_ADDR_VAR 0 9
39990: PUSH
39991: LD_INT 67
39993: PUSH
39994: LD_INT 45
39996: PUSH
39997: LD_INT 75
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40005: LD_VAR 0 6
40009: PPUSH
40010: CALL_OW 264
40014: PUSH
40015: LD_INT 26
40017: PUSH
40018: EMPTY
40019: LIST
40020: IN
40021: IFFALSE 40042
// points := [ 120 , 30 , 80 ] ;
40023: LD_ADDR_VAR 0 9
40027: PUSH
40028: LD_INT 120
40030: PUSH
40031: LD_INT 30
40033: PUSH
40034: LD_INT 80
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40042: LD_VAR 0 6
40046: PPUSH
40047: CALL_OW 264
40051: PUSH
40052: LD_INT 22
40054: PUSH
40055: EMPTY
40056: LIST
40057: IN
40058: IFFALSE 40079
// points := [ 40 , 1 , 1 ] ;
40060: LD_ADDR_VAR 0 9
40064: PUSH
40065: LD_INT 40
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40079: LD_VAR 0 6
40083: PPUSH
40084: CALL_OW 264
40088: PUSH
40089: LD_INT 29
40091: PUSH
40092: EMPTY
40093: LIST
40094: IN
40095: IFFALSE 40116
// points := [ 70 , 200 , 400 ] ;
40097: LD_ADDR_VAR 0 9
40101: PUSH
40102: LD_INT 70
40104: PUSH
40105: LD_INT 200
40107: PUSH
40108: LD_INT 400
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40116: LD_VAR 0 6
40120: PPUSH
40121: CALL_OW 264
40125: PUSH
40126: LD_INT 14
40128: PUSH
40129: LD_INT 53
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: IN
40136: IFFALSE 40157
// points := [ 40 , 10 , 20 ] ;
40138: LD_ADDR_VAR 0 9
40142: PUSH
40143: LD_INT 40
40145: PUSH
40146: LD_INT 10
40148: PUSH
40149: LD_INT 20
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40157: LD_VAR 0 6
40161: PPUSH
40162: CALL_OW 264
40166: PUSH
40167: LD_INT 9
40169: PUSH
40170: EMPTY
40171: LIST
40172: IN
40173: IFFALSE 40194
// points := [ 5 , 70 , 20 ] ;
40175: LD_ADDR_VAR 0 9
40179: PUSH
40180: LD_INT 5
40182: PUSH
40183: LD_INT 70
40185: PUSH
40186: LD_INT 20
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40194: LD_VAR 0 6
40198: PPUSH
40199: CALL_OW 264
40203: PUSH
40204: LD_INT 10
40206: PUSH
40207: EMPTY
40208: LIST
40209: IN
40210: IFFALSE 40231
// points := [ 35 , 110 , 70 ] ;
40212: LD_ADDR_VAR 0 9
40216: PUSH
40217: LD_INT 35
40219: PUSH
40220: LD_INT 110
40222: PUSH
40223: LD_INT 70
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40231: LD_VAR 0 6
40235: PPUSH
40236: CALL_OW 265
40240: PUSH
40241: LD_INT 25
40243: EQUAL
40244: IFFALSE 40265
// points := [ 80 , 65 , 100 ] ;
40246: LD_ADDR_VAR 0 9
40250: PUSH
40251: LD_INT 80
40253: PUSH
40254: LD_INT 65
40256: PUSH
40257: LD_INT 100
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40265: LD_VAR 0 6
40269: PPUSH
40270: CALL_OW 263
40274: PUSH
40275: LD_INT 1
40277: EQUAL
40278: IFFALSE 40313
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40280: LD_ADDR_VAR 0 10
40284: PUSH
40285: LD_VAR 0 10
40289: PUSH
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 311
40299: PPUSH
40300: LD_INT 3
40302: PPUSH
40303: CALL_OW 259
40307: PUSH
40308: LD_INT 4
40310: MUL
40311: MUL
40312: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40313: LD_VAR 0 6
40317: PPUSH
40318: CALL_OW 263
40322: PUSH
40323: LD_INT 2
40325: EQUAL
40326: IFFALSE 40377
// begin j := IsControledBy ( i ) ;
40328: LD_ADDR_VAR 0 7
40332: PUSH
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 312
40342: ST_TO_ADDR
// if j then
40343: LD_VAR 0 7
40347: IFFALSE 40377
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40349: LD_ADDR_VAR 0 10
40353: PUSH
40354: LD_VAR 0 10
40358: PUSH
40359: LD_VAR 0 7
40363: PPUSH
40364: LD_INT 3
40366: PPUSH
40367: CALL_OW 259
40371: PUSH
40372: LD_INT 3
40374: MUL
40375: MUL
40376: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40377: LD_VAR 0 6
40381: PPUSH
40382: CALL_OW 264
40386: PUSH
40387: LD_INT 5
40389: PUSH
40390: LD_INT 6
40392: PUSH
40393: LD_INT 46
40395: PUSH
40396: LD_INT 44
40398: PUSH
40399: LD_INT 47
40401: PUSH
40402: LD_INT 45
40404: PUSH
40405: LD_INT 28
40407: PUSH
40408: LD_INT 7
40410: PUSH
40411: LD_INT 27
40413: PUSH
40414: LD_INT 29
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: IN
40429: PUSH
40430: LD_VAR 0 1
40434: PPUSH
40435: LD_INT 52
40437: PPUSH
40438: CALL_OW 321
40442: PUSH
40443: LD_INT 2
40445: EQUAL
40446: AND
40447: IFFALSE 40464
// bpoints := bpoints * 1.2 ;
40449: LD_ADDR_VAR 0 10
40453: PUSH
40454: LD_VAR 0 10
40458: PUSH
40459: LD_REAL  1.20000000000000E+0000
40462: MUL
40463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40464: LD_VAR 0 6
40468: PPUSH
40469: CALL_OW 264
40473: PUSH
40474: LD_INT 6
40476: PUSH
40477: LD_INT 46
40479: PUSH
40480: LD_INT 47
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: IN
40488: IFFALSE 40505
// bpoints := bpoints * 1.2 ;
40490: LD_ADDR_VAR 0 10
40494: PUSH
40495: LD_VAR 0 10
40499: PUSH
40500: LD_REAL  1.20000000000000E+0000
40503: MUL
40504: ST_TO_ADDR
// end ; unit_building :
40505: GO 40519
40507: LD_INT 3
40509: DOUBLE
40510: EQUAL
40511: IFTRUE 40515
40513: GO 40518
40515: POP
// ; end ;
40516: GO 40519
40518: POP
// for j = 1 to 3 do
40519: LD_ADDR_VAR 0 7
40523: PUSH
40524: DOUBLE
40525: LD_INT 1
40527: DEC
40528: ST_TO_ADDR
40529: LD_INT 3
40531: PUSH
40532: FOR_TO
40533: IFFALSE 40586
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40535: LD_ADDR_VAR 0 5
40539: PUSH
40540: LD_VAR 0 5
40544: PPUSH
40545: LD_VAR 0 7
40549: PPUSH
40550: LD_VAR 0 5
40554: PUSH
40555: LD_VAR 0 7
40559: ARRAY
40560: PUSH
40561: LD_VAR 0 9
40565: PUSH
40566: LD_VAR 0 7
40570: ARRAY
40571: PUSH
40572: LD_VAR 0 10
40576: MUL
40577: PLUS
40578: PPUSH
40579: CALL_OW 1
40583: ST_TO_ADDR
40584: GO 40532
40586: POP
40587: POP
// end ;
40588: GO 39065
40590: POP
40591: POP
// result := Replace ( result , 4 , tmp ) ;
40592: LD_ADDR_VAR 0 5
40596: PUSH
40597: LD_VAR 0 5
40601: PPUSH
40602: LD_INT 4
40604: PPUSH
40605: LD_VAR 0 8
40609: PPUSH
40610: CALL_OW 1
40614: ST_TO_ADDR
// end ;
40615: LD_VAR 0 5
40619: RET
// export function DangerAtRange ( unit , range ) ; begin
40620: LD_INT 0
40622: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40623: LD_ADDR_VAR 0 3
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: CALL_OW 255
40637: PPUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 250
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 251
40657: PPUSH
40658: LD_VAR 0 2
40662: PPUSH
40663: CALL 38917 0 4
40667: ST_TO_ADDR
// end ;
40668: LD_VAR 0 3
40672: RET
// export function DangerInArea ( side , area ) ; begin
40673: LD_INT 0
40675: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_VAR 0 2
40685: PPUSH
40686: LD_INT 81
40688: PUSH
40689: LD_VAR 0 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 70
40702: ST_TO_ADDR
// end ;
40703: LD_VAR 0 3
40707: RET
// export function IsExtension ( b ) ; begin
40708: LD_INT 0
40710: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40711: LD_ADDR_VAR 0 2
40715: PUSH
40716: LD_VAR 0 1
40720: PUSH
40721: LD_INT 23
40723: PUSH
40724: LD_INT 20
40726: PUSH
40727: LD_INT 22
40729: PUSH
40730: LD_INT 17
40732: PUSH
40733: LD_INT 24
40735: PUSH
40736: LD_INT 21
40738: PUSH
40739: LD_INT 19
40741: PUSH
40742: LD_INT 16
40744: PUSH
40745: LD_INT 25
40747: PUSH
40748: LD_INT 18
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: IN
40763: ST_TO_ADDR
// end ;
40764: LD_VAR 0 2
40768: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40769: LD_INT 0
40771: PPUSH
40772: PPUSH
40773: PPUSH
// result := [ ] ;
40774: LD_ADDR_VAR 0 4
40778: PUSH
40779: EMPTY
40780: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40781: LD_ADDR_VAR 0 5
40785: PUSH
40786: LD_VAR 0 2
40790: PPUSH
40791: LD_INT 21
40793: PUSH
40794: LD_INT 3
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PPUSH
40801: CALL_OW 70
40805: ST_TO_ADDR
// if not tmp then
40806: LD_VAR 0 5
40810: NOT
40811: IFFALSE 40815
// exit ;
40813: GO 40879
// if checkLink then
40815: LD_VAR 0 3
40819: IFFALSE 40869
// begin for i in tmp do
40821: LD_ADDR_VAR 0 6
40825: PUSH
40826: LD_VAR 0 5
40830: PUSH
40831: FOR_IN
40832: IFFALSE 40867
// if GetBase ( i ) <> base then
40834: LD_VAR 0 6
40838: PPUSH
40839: CALL_OW 274
40843: PUSH
40844: LD_VAR 0 1
40848: NONEQUAL
40849: IFFALSE 40865
// ComLinkToBase ( base , i ) ;
40851: LD_VAR 0 1
40855: PPUSH
40856: LD_VAR 0 6
40860: PPUSH
40861: CALL_OW 169
40865: GO 40831
40867: POP
40868: POP
// end ; result := tmp ;
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: LD_VAR 0 5
40878: ST_TO_ADDR
// end ;
40879: LD_VAR 0 4
40883: RET
// export function ComComplete ( units , b ) ; var i ; begin
40884: LD_INT 0
40886: PPUSH
40887: PPUSH
// if not units then
40888: LD_VAR 0 1
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 40987
// for i in units do
40897: LD_ADDR_VAR 0 4
40901: PUSH
40902: LD_VAR 0 1
40906: PUSH
40907: FOR_IN
40908: IFFALSE 40985
// if BuildingStatus ( b ) = bs_build then
40910: LD_VAR 0 2
40914: PPUSH
40915: CALL_OW 461
40919: PUSH
40920: LD_INT 1
40922: EQUAL
40923: IFFALSE 40983
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40925: LD_VAR 0 4
40929: PPUSH
40930: LD_STRING h
40932: PUSH
40933: LD_VAR 0 2
40937: PPUSH
40938: CALL_OW 250
40942: PUSH
40943: LD_VAR 0 2
40947: PPUSH
40948: CALL_OW 251
40952: PUSH
40953: LD_VAR 0 2
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: PPUSH
40979: CALL_OW 446
40983: GO 40907
40985: POP
40986: POP
// end ;
40987: LD_VAR 0 3
40991: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41000: LD_VAR 0 1
41004: NOT
41005: PUSH
41006: LD_VAR 0 1
41010: PPUSH
41011: CALL_OW 263
41015: PUSH
41016: LD_INT 2
41018: NONEQUAL
41019: OR
41020: IFFALSE 41024
// exit ;
41022: GO 41340
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41024: LD_ADDR_VAR 0 6
41028: PUSH
41029: LD_INT 22
41031: PUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 255
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: LD_INT 30
41051: PUSH
41052: LD_INT 36
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 34
41061: PUSH
41062: LD_INT 31
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PPUSH
41078: CALL_OW 69
41082: ST_TO_ADDR
// if not tmp then
41083: LD_VAR 0 6
41087: NOT
41088: IFFALSE 41092
// exit ;
41090: GO 41340
// result := [ ] ;
41092: LD_ADDR_VAR 0 2
41096: PUSH
41097: EMPTY
41098: ST_TO_ADDR
// for i in tmp do
41099: LD_ADDR_VAR 0 3
41103: PUSH
41104: LD_VAR 0 6
41108: PUSH
41109: FOR_IN
41110: IFFALSE 41181
// begin t := UnitsInside ( i ) ;
41112: LD_ADDR_VAR 0 4
41116: PUSH
41117: LD_VAR 0 3
41121: PPUSH
41122: CALL_OW 313
41126: ST_TO_ADDR
// if t then
41127: LD_VAR 0 4
41131: IFFALSE 41179
// for j in t do
41133: LD_ADDR_VAR 0 7
41137: PUSH
41138: LD_VAR 0 4
41142: PUSH
41143: FOR_IN
41144: IFFALSE 41177
// result := Replace ( result , result + 1 , j ) ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_VAR 0 2
41155: PPUSH
41156: LD_VAR 0 2
41160: PUSH
41161: LD_INT 1
41163: PLUS
41164: PPUSH
41165: LD_VAR 0 7
41169: PPUSH
41170: CALL_OW 1
41174: ST_TO_ADDR
41175: GO 41143
41177: POP
41178: POP
// end ;
41179: GO 41109
41181: POP
41182: POP
// if not result then
41183: LD_VAR 0 2
41187: NOT
41188: IFFALSE 41192
// exit ;
41190: GO 41340
// mech := result [ 1 ] ;
41192: LD_ADDR_VAR 0 5
41196: PUSH
41197: LD_VAR 0 2
41201: PUSH
41202: LD_INT 1
41204: ARRAY
41205: ST_TO_ADDR
// if result > 1 then
41206: LD_VAR 0 2
41210: PUSH
41211: LD_INT 1
41213: GREATER
41214: IFFALSE 41326
// begin for i = 2 to result do
41216: LD_ADDR_VAR 0 3
41220: PUSH
41221: DOUBLE
41222: LD_INT 2
41224: DEC
41225: ST_TO_ADDR
41226: LD_VAR 0 2
41230: PUSH
41231: FOR_TO
41232: IFFALSE 41324
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_VAR 0 2
41243: PUSH
41244: LD_VAR 0 3
41248: ARRAY
41249: PPUSH
41250: LD_INT 3
41252: PPUSH
41253: CALL_OW 259
41257: PUSH
41258: LD_VAR 0 2
41262: PUSH
41263: LD_VAR 0 3
41267: ARRAY
41268: PPUSH
41269: CALL_OW 432
41273: MINUS
41274: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41275: LD_VAR 0 4
41279: PUSH
41280: LD_VAR 0 5
41284: PPUSH
41285: LD_INT 3
41287: PPUSH
41288: CALL_OW 259
41292: PUSH
41293: LD_VAR 0 5
41297: PPUSH
41298: CALL_OW 432
41302: MINUS
41303: GREATEREQUAL
41304: IFFALSE 41322
// mech := result [ i ] ;
41306: LD_ADDR_VAR 0 5
41310: PUSH
41311: LD_VAR 0 2
41315: PUSH
41316: LD_VAR 0 3
41320: ARRAY
41321: ST_TO_ADDR
// end ;
41322: GO 41231
41324: POP
41325: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41326: LD_VAR 0 1
41330: PPUSH
41331: LD_VAR 0 5
41335: PPUSH
41336: CALL_OW 135
// end ;
41340: LD_VAR 0 2
41344: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41345: LD_INT 0
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
// result := [ ] ;
41360: LD_ADDR_VAR 0 7
41364: PUSH
41365: EMPTY
41366: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41367: LD_VAR 0 1
41371: PPUSH
41372: CALL_OW 266
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: IN
41387: NOT
41388: IFFALSE 41392
// exit ;
41390: GO 43026
// if name then
41392: LD_VAR 0 3
41396: IFFALSE 41412
// SetBName ( base_dep , name ) ;
41398: LD_VAR 0 1
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: CALL_OW 500
// base := GetBase ( base_dep ) ;
41412: LD_ADDR_VAR 0 15
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 274
41426: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41427: LD_ADDR_VAR 0 16
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 255
41441: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41442: LD_ADDR_VAR 0 17
41446: PUSH
41447: LD_VAR 0 1
41451: PPUSH
41452: CALL_OW 248
41456: ST_TO_ADDR
// if sources then
41457: LD_VAR 0 5
41461: IFFALSE 41508
// for i = 1 to 3 do
41463: LD_ADDR_VAR 0 8
41467: PUSH
41468: DOUBLE
41469: LD_INT 1
41471: DEC
41472: ST_TO_ADDR
41473: LD_INT 3
41475: PUSH
41476: FOR_TO
41477: IFFALSE 41506
// AddResourceType ( base , i , sources [ i ] ) ;
41479: LD_VAR 0 15
41483: PPUSH
41484: LD_VAR 0 8
41488: PPUSH
41489: LD_VAR 0 5
41493: PUSH
41494: LD_VAR 0 8
41498: ARRAY
41499: PPUSH
41500: CALL_OW 276
41504: GO 41476
41506: POP
41507: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41508: LD_ADDR_VAR 0 18
41512: PUSH
41513: LD_VAR 0 15
41517: PPUSH
41518: LD_VAR 0 2
41522: PPUSH
41523: LD_INT 1
41525: PPUSH
41526: CALL 40769 0 3
41530: ST_TO_ADDR
// InitHc ;
41531: CALL_OW 19
// InitUc ;
41535: CALL_OW 18
// uc_side := side ;
41539: LD_ADDR_OWVAR 20
41543: PUSH
41544: LD_VAR 0 16
41548: ST_TO_ADDR
// uc_nation := nation ;
41549: LD_ADDR_OWVAR 21
41553: PUSH
41554: LD_VAR 0 17
41558: ST_TO_ADDR
// if buildings then
41559: LD_VAR 0 18
41563: IFFALSE 42885
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41565: LD_ADDR_VAR 0 19
41569: PUSH
41570: LD_VAR 0 18
41574: PPUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 30
41580: PUSH
41581: LD_INT 29
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 30
41590: PUSH
41591: LD_INT 30
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: LIST
41602: PPUSH
41603: CALL_OW 72
41607: ST_TO_ADDR
// if tmp then
41608: LD_VAR 0 19
41612: IFFALSE 41660
// for i in tmp do
41614: LD_ADDR_VAR 0 8
41618: PUSH
41619: LD_VAR 0 19
41623: PUSH
41624: FOR_IN
41625: IFFALSE 41658
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41627: LD_VAR 0 8
41631: PPUSH
41632: CALL_OW 250
41636: PPUSH
41637: LD_VAR 0 8
41641: PPUSH
41642: CALL_OW 251
41646: PPUSH
41647: LD_VAR 0 16
41651: PPUSH
41652: CALL_OW 441
41656: GO 41624
41658: POP
41659: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41660: LD_VAR 0 18
41664: PPUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 30
41670: PUSH
41671: LD_INT 32
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 30
41680: PUSH
41681: LD_INT 33
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: PPUSH
41693: CALL_OW 72
41697: IFFALSE 41785
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41699: LD_ADDR_VAR 0 8
41703: PUSH
41704: LD_VAR 0 18
41708: PPUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 30
41714: PUSH
41715: LD_INT 32
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 30
41724: PUSH
41725: LD_INT 33
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: PPUSH
41737: CALL_OW 72
41741: PUSH
41742: FOR_IN
41743: IFFALSE 41783
// begin if not GetBWeapon ( i ) then
41745: LD_VAR 0 8
41749: PPUSH
41750: CALL_OW 269
41754: NOT
41755: IFFALSE 41781
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41757: LD_VAR 0 8
41761: PPUSH
41762: LD_VAR 0 8
41766: PPUSH
41767: LD_VAR 0 2
41771: PPUSH
41772: CALL 43031 0 2
41776: PPUSH
41777: CALL_OW 431
// end ;
41781: GO 41742
41783: POP
41784: POP
// end ; for i = 1 to personel do
41785: LD_ADDR_VAR 0 8
41789: PUSH
41790: DOUBLE
41791: LD_INT 1
41793: DEC
41794: ST_TO_ADDR
41795: LD_VAR 0 6
41799: PUSH
41800: FOR_TO
41801: IFFALSE 42865
// begin if i > 4 then
41803: LD_VAR 0 8
41807: PUSH
41808: LD_INT 4
41810: GREATER
41811: IFFALSE 41815
// break ;
41813: GO 42865
// case i of 1 :
41815: LD_VAR 0 8
41819: PUSH
41820: LD_INT 1
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41908
41828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41829: LD_ADDR_VAR 0 12
41833: PUSH
41834: LD_VAR 0 18
41838: PPUSH
41839: LD_INT 22
41841: PUSH
41842: LD_VAR 0 16
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 58
41853: PUSH
41854: EMPTY
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 30
41862: PUSH
41863: LD_INT 32
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 30
41872: PUSH
41873: LD_INT 4
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 30
41882: PUSH
41883: LD_INT 5
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: PPUSH
41901: CALL_OW 72
41905: ST_TO_ADDR
41906: GO 42130
41908: LD_INT 2
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 41978
41916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41917: LD_ADDR_VAR 0 12
41921: PUSH
41922: LD_VAR 0 18
41926: PPUSH
41927: LD_INT 22
41929: PUSH
41930: LD_VAR 0 16
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 30
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PPUSH
41971: CALL_OW 72
41975: ST_TO_ADDR
41976: GO 42130
41978: LD_INT 3
41980: DOUBLE
41981: EQUAL
41982: IFTRUE 41986
41984: GO 42048
41986: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41987: LD_ADDR_VAR 0 12
41991: PUSH
41992: LD_VAR 0 18
41996: PPUSH
41997: LD_INT 22
41999: PUSH
42000: LD_VAR 0 16
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 30
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 30
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PPUSH
42041: CALL_OW 72
42045: ST_TO_ADDR
42046: GO 42130
42048: LD_INT 4
42050: DOUBLE
42051: EQUAL
42052: IFTRUE 42056
42054: GO 42129
42056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42057: LD_ADDR_VAR 0 12
42061: PUSH
42062: LD_VAR 0 18
42066: PPUSH
42067: LD_INT 22
42069: PUSH
42070: LD_VAR 0 16
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 30
42084: PUSH
42085: LD_INT 6
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 30
42094: PUSH
42095: LD_INT 7
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 30
42104: PUSH
42105: LD_INT 8
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PPUSH
42122: CALL_OW 72
42126: ST_TO_ADDR
42127: GO 42130
42129: POP
// if i = 1 then
42130: LD_VAR 0 8
42134: PUSH
42135: LD_INT 1
42137: EQUAL
42138: IFFALSE 42249
// begin tmp := [ ] ;
42140: LD_ADDR_VAR 0 19
42144: PUSH
42145: EMPTY
42146: ST_TO_ADDR
// for j in f do
42147: LD_ADDR_VAR 0 9
42151: PUSH
42152: LD_VAR 0 12
42156: PUSH
42157: FOR_IN
42158: IFFALSE 42231
// if GetBType ( j ) = b_bunker then
42160: LD_VAR 0 9
42164: PPUSH
42165: CALL_OW 266
42169: PUSH
42170: LD_INT 32
42172: EQUAL
42173: IFFALSE 42200
// tmp := Insert ( tmp , 1 , j ) else
42175: LD_ADDR_VAR 0 19
42179: PUSH
42180: LD_VAR 0 19
42184: PPUSH
42185: LD_INT 1
42187: PPUSH
42188: LD_VAR 0 9
42192: PPUSH
42193: CALL_OW 2
42197: ST_TO_ADDR
42198: GO 42229
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42200: LD_ADDR_VAR 0 19
42204: PUSH
42205: LD_VAR 0 19
42209: PPUSH
42210: LD_VAR 0 19
42214: PUSH
42215: LD_INT 1
42217: PLUS
42218: PPUSH
42219: LD_VAR 0 9
42223: PPUSH
42224: CALL_OW 2
42228: ST_TO_ADDR
42229: GO 42157
42231: POP
42232: POP
// if tmp then
42233: LD_VAR 0 19
42237: IFFALSE 42249
// f := tmp ;
42239: LD_ADDR_VAR 0 12
42243: PUSH
42244: LD_VAR 0 19
42248: ST_TO_ADDR
// end ; x := personel [ i ] ;
42249: LD_ADDR_VAR 0 13
42253: PUSH
42254: LD_VAR 0 6
42258: PUSH
42259: LD_VAR 0 8
42263: ARRAY
42264: ST_TO_ADDR
// if x = - 1 then
42265: LD_VAR 0 13
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: EQUAL
42274: IFFALSE 42483
// begin for j in f do
42276: LD_ADDR_VAR 0 9
42280: PUSH
42281: LD_VAR 0 12
42285: PUSH
42286: FOR_IN
42287: IFFALSE 42479
// repeat InitHc ;
42289: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42293: LD_VAR 0 9
42297: PPUSH
42298: CALL_OW 266
42302: PUSH
42303: LD_INT 5
42305: EQUAL
42306: IFFALSE 42376
// begin if UnitsInside ( j ) < 3 then
42308: LD_VAR 0 9
42312: PPUSH
42313: CALL_OW 313
42317: PUSH
42318: LD_INT 3
42320: LESS
42321: IFFALSE 42357
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42323: LD_INT 0
42325: PPUSH
42326: LD_INT 5
42328: PUSH
42329: LD_INT 8
42331: PUSH
42332: LD_INT 9
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: LD_VAR 0 17
42344: ARRAY
42345: PPUSH
42346: LD_VAR 0 4
42350: PPUSH
42351: CALL_OW 380
42355: GO 42374
// PrepareHuman ( false , i , skill ) ;
42357: LD_INT 0
42359: PPUSH
42360: LD_VAR 0 8
42364: PPUSH
42365: LD_VAR 0 4
42369: PPUSH
42370: CALL_OW 380
// end else
42374: GO 42393
// PrepareHuman ( false , i , skill ) ;
42376: LD_INT 0
42378: PPUSH
42379: LD_VAR 0 8
42383: PPUSH
42384: LD_VAR 0 4
42388: PPUSH
42389: CALL_OW 380
// un := CreateHuman ;
42393: LD_ADDR_VAR 0 14
42397: PUSH
42398: CALL_OW 44
42402: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42403: LD_ADDR_VAR 0 7
42407: PUSH
42408: LD_VAR 0 7
42412: PPUSH
42413: LD_INT 1
42415: PPUSH
42416: LD_VAR 0 14
42420: PPUSH
42421: CALL_OW 2
42425: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42426: LD_VAR 0 14
42430: PPUSH
42431: LD_VAR 0 9
42435: PPUSH
42436: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42440: LD_VAR 0 9
42444: PPUSH
42445: CALL_OW 313
42449: PUSH
42450: LD_INT 6
42452: EQUAL
42453: PUSH
42454: LD_VAR 0 9
42458: PPUSH
42459: CALL_OW 266
42463: PUSH
42464: LD_INT 32
42466: PUSH
42467: LD_INT 31
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: IN
42474: OR
42475: IFFALSE 42289
42477: GO 42286
42479: POP
42480: POP
// end else
42481: GO 42863
// for j = 1 to x do
42483: LD_ADDR_VAR 0 9
42487: PUSH
42488: DOUBLE
42489: LD_INT 1
42491: DEC
42492: ST_TO_ADDR
42493: LD_VAR 0 13
42497: PUSH
42498: FOR_TO
42499: IFFALSE 42861
// begin InitHc ;
42501: CALL_OW 19
// if not f then
42505: LD_VAR 0 12
42509: NOT
42510: IFFALSE 42599
// begin PrepareHuman ( false , i , skill ) ;
42512: LD_INT 0
42514: PPUSH
42515: LD_VAR 0 8
42519: PPUSH
42520: LD_VAR 0 4
42524: PPUSH
42525: CALL_OW 380
// un := CreateHuman ;
42529: LD_ADDR_VAR 0 14
42533: PUSH
42534: CALL_OW 44
42538: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42539: LD_ADDR_VAR 0 7
42543: PUSH
42544: LD_VAR 0 7
42548: PPUSH
42549: LD_INT 1
42551: PPUSH
42552: LD_VAR 0 14
42556: PPUSH
42557: CALL_OW 2
42561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42562: LD_VAR 0 14
42566: PPUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: CALL_OW 250
42576: PPUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 251
42586: PPUSH
42587: LD_INT 10
42589: PPUSH
42590: LD_INT 0
42592: PPUSH
42593: CALL_OW 50
// continue ;
42597: GO 42498
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42599: LD_VAR 0 12
42603: PUSH
42604: LD_INT 1
42606: ARRAY
42607: PPUSH
42608: CALL_OW 313
42612: PUSH
42613: LD_VAR 0 12
42617: PUSH
42618: LD_INT 1
42620: ARRAY
42621: PPUSH
42622: CALL_OW 266
42626: PUSH
42627: LD_INT 32
42629: PUSH
42630: LD_INT 31
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: IN
42637: AND
42638: PUSH
42639: LD_VAR 0 12
42643: PUSH
42644: LD_INT 1
42646: ARRAY
42647: PPUSH
42648: CALL_OW 313
42652: PUSH
42653: LD_INT 6
42655: EQUAL
42656: OR
42657: IFFALSE 42677
// f := Delete ( f , 1 ) ;
42659: LD_ADDR_VAR 0 12
42663: PUSH
42664: LD_VAR 0 12
42668: PPUSH
42669: LD_INT 1
42671: PPUSH
42672: CALL_OW 3
42676: ST_TO_ADDR
// if not f then
42677: LD_VAR 0 12
42681: NOT
42682: IFFALSE 42700
// begin x := x + 2 ;
42684: LD_ADDR_VAR 0 13
42688: PUSH
42689: LD_VAR 0 13
42693: PUSH
42694: LD_INT 2
42696: PLUS
42697: ST_TO_ADDR
// continue ;
42698: GO 42498
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42700: LD_VAR 0 12
42704: PUSH
42705: LD_INT 1
42707: ARRAY
42708: PPUSH
42709: CALL_OW 266
42713: PUSH
42714: LD_INT 5
42716: EQUAL
42717: IFFALSE 42791
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42719: LD_VAR 0 12
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PPUSH
42728: CALL_OW 313
42732: PUSH
42733: LD_INT 3
42735: LESS
42736: IFFALSE 42772
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42738: LD_INT 0
42740: PPUSH
42741: LD_INT 5
42743: PUSH
42744: LD_INT 8
42746: PUSH
42747: LD_INT 9
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: PUSH
42755: LD_VAR 0 17
42759: ARRAY
42760: PPUSH
42761: LD_VAR 0 4
42765: PPUSH
42766: CALL_OW 380
42770: GO 42789
// PrepareHuman ( false , i , skill ) ;
42772: LD_INT 0
42774: PPUSH
42775: LD_VAR 0 8
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: CALL_OW 380
// end else
42789: GO 42808
// PrepareHuman ( false , i , skill ) ;
42791: LD_INT 0
42793: PPUSH
42794: LD_VAR 0 8
42798: PPUSH
42799: LD_VAR 0 4
42803: PPUSH
42804: CALL_OW 380
// un := CreateHuman ;
42808: LD_ADDR_VAR 0 14
42812: PUSH
42813: CALL_OW 44
42817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42818: LD_ADDR_VAR 0 7
42822: PUSH
42823: LD_VAR 0 7
42827: PPUSH
42828: LD_INT 1
42830: PPUSH
42831: LD_VAR 0 14
42835: PPUSH
42836: CALL_OW 2
42840: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42841: LD_VAR 0 14
42845: PPUSH
42846: LD_VAR 0 12
42850: PUSH
42851: LD_INT 1
42853: ARRAY
42854: PPUSH
42855: CALL_OW 52
// end ;
42859: GO 42498
42861: POP
42862: POP
// end ;
42863: GO 41800
42865: POP
42866: POP
// result := result ^ buildings ;
42867: LD_ADDR_VAR 0 7
42871: PUSH
42872: LD_VAR 0 7
42876: PUSH
42877: LD_VAR 0 18
42881: ADD
42882: ST_TO_ADDR
// end else
42883: GO 43026
// begin for i = 1 to personel do
42885: LD_ADDR_VAR 0 8
42889: PUSH
42890: DOUBLE
42891: LD_INT 1
42893: DEC
42894: ST_TO_ADDR
42895: LD_VAR 0 6
42899: PUSH
42900: FOR_TO
42901: IFFALSE 43024
// begin if i > 4 then
42903: LD_VAR 0 8
42907: PUSH
42908: LD_INT 4
42910: GREATER
42911: IFFALSE 42915
// break ;
42913: GO 43024
// x := personel [ i ] ;
42915: LD_ADDR_VAR 0 13
42919: PUSH
42920: LD_VAR 0 6
42924: PUSH
42925: LD_VAR 0 8
42929: ARRAY
42930: ST_TO_ADDR
// if x = - 1 then
42931: LD_VAR 0 13
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: EQUAL
42940: IFFALSE 42944
// continue ;
42942: GO 42900
// PrepareHuman ( false , i , skill ) ;
42944: LD_INT 0
42946: PPUSH
42947: LD_VAR 0 8
42951: PPUSH
42952: LD_VAR 0 4
42956: PPUSH
42957: CALL_OW 380
// un := CreateHuman ;
42961: LD_ADDR_VAR 0 14
42965: PUSH
42966: CALL_OW 44
42970: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42971: LD_VAR 0 14
42975: PPUSH
42976: LD_VAR 0 1
42980: PPUSH
42981: CALL_OW 250
42985: PPUSH
42986: LD_VAR 0 1
42990: PPUSH
42991: CALL_OW 251
42995: PPUSH
42996: LD_INT 10
42998: PPUSH
42999: LD_INT 0
43001: PPUSH
43002: CALL_OW 50
// result := result ^ un ;
43006: LD_ADDR_VAR 0 7
43010: PUSH
43011: LD_VAR 0 7
43015: PUSH
43016: LD_VAR 0 14
43020: ADD
43021: ST_TO_ADDR
// end ;
43022: GO 42900
43024: POP
43025: POP
// end ; end ;
43026: LD_VAR 0 7
43030: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43031: LD_INT 0
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
43038: PPUSH
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
// result := false ;
43049: LD_ADDR_VAR 0 3
43053: PUSH
43054: LD_INT 0
43056: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43057: LD_VAR 0 1
43061: NOT
43062: PUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: CALL_OW 266
43072: PUSH
43073: LD_INT 32
43075: PUSH
43076: LD_INT 33
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: IN
43083: NOT
43084: OR
43085: IFFALSE 43089
// exit ;
43087: GO 44198
// nat := GetNation ( tower ) ;
43089: LD_ADDR_VAR 0 12
43093: PUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 248
43103: ST_TO_ADDR
// side := GetSide ( tower ) ;
43104: LD_ADDR_VAR 0 16
43108: PUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 255
43118: ST_TO_ADDR
// x := GetX ( tower ) ;
43119: LD_ADDR_VAR 0 10
43123: PUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: CALL_OW 250
43133: ST_TO_ADDR
// y := GetY ( tower ) ;
43134: LD_ADDR_VAR 0 11
43138: PUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 251
43148: ST_TO_ADDR
// if not x or not y then
43149: LD_VAR 0 10
43153: NOT
43154: PUSH
43155: LD_VAR 0 11
43159: NOT
43160: OR
43161: IFFALSE 43165
// exit ;
43163: GO 44198
// weapon := 0 ;
43165: LD_ADDR_VAR 0 18
43169: PUSH
43170: LD_INT 0
43172: ST_TO_ADDR
// fac_list := [ ] ;
43173: LD_ADDR_VAR 0 17
43177: PUSH
43178: EMPTY
43179: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43180: LD_ADDR_VAR 0 6
43184: PUSH
43185: LD_VAR 0 1
43189: PPUSH
43190: CALL_OW 274
43194: PPUSH
43195: LD_VAR 0 2
43199: PPUSH
43200: LD_INT 0
43202: PPUSH
43203: CALL 40769 0 3
43207: PPUSH
43208: LD_INT 30
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PPUSH
43218: CALL_OW 72
43222: ST_TO_ADDR
// if not factories then
43223: LD_VAR 0 6
43227: NOT
43228: IFFALSE 43232
// exit ;
43230: GO 44198
// for i in factories do
43232: LD_ADDR_VAR 0 8
43236: PUSH
43237: LD_VAR 0 6
43241: PUSH
43242: FOR_IN
43243: IFFALSE 43268
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43245: LD_ADDR_VAR 0 17
43249: PUSH
43250: LD_VAR 0 17
43254: PUSH
43255: LD_VAR 0 8
43259: PPUSH
43260: CALL_OW 478
43264: UNION
43265: ST_TO_ADDR
43266: GO 43242
43268: POP
43269: POP
// if not fac_list then
43270: LD_VAR 0 17
43274: NOT
43275: IFFALSE 43279
// exit ;
43277: GO 44198
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43279: LD_ADDR_VAR 0 5
43283: PUSH
43284: LD_INT 4
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: LD_INT 9
43292: PUSH
43293: LD_INT 10
43295: PUSH
43296: LD_INT 6
43298: PUSH
43299: LD_INT 7
43301: PUSH
43302: LD_INT 11
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 27
43316: PUSH
43317: LD_INT 28
43319: PUSH
43320: LD_INT 26
43322: PUSH
43323: LD_INT 30
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 43
43334: PUSH
43335: LD_INT 44
43337: PUSH
43338: LD_INT 46
43340: PUSH
43341: LD_INT 45
43343: PUSH
43344: LD_INT 47
43346: PUSH
43347: LD_INT 49
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: LD_VAR 0 12
43367: ARRAY
43368: ST_TO_ADDR
// list := list isect fac_list ;
43369: LD_ADDR_VAR 0 5
43373: PUSH
43374: LD_VAR 0 5
43378: PUSH
43379: LD_VAR 0 17
43383: ISECT
43384: ST_TO_ADDR
// if not list then
43385: LD_VAR 0 5
43389: NOT
43390: IFFALSE 43394
// exit ;
43392: GO 44198
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43394: LD_VAR 0 12
43398: PUSH
43399: LD_INT 3
43401: EQUAL
43402: PUSH
43403: LD_INT 49
43405: PUSH
43406: LD_VAR 0 5
43410: IN
43411: AND
43412: PUSH
43413: LD_INT 31
43415: PPUSH
43416: LD_VAR 0 16
43420: PPUSH
43421: CALL_OW 321
43425: PUSH
43426: LD_INT 2
43428: EQUAL
43429: AND
43430: IFFALSE 43490
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43432: LD_INT 22
43434: PUSH
43435: LD_VAR 0 16
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 35
43446: PUSH
43447: LD_INT 49
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 91
43456: PUSH
43457: LD_VAR 0 1
43461: PUSH
43462: LD_INT 10
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 69
43479: NOT
43480: IFFALSE 43490
// weapon := ru_time_lapser ;
43482: LD_ADDR_VAR 0 18
43486: PUSH
43487: LD_INT 49
43489: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43490: LD_VAR 0 12
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: IN
43505: PUSH
43506: LD_INT 11
43508: PUSH
43509: LD_VAR 0 5
43513: IN
43514: PUSH
43515: LD_INT 30
43517: PUSH
43518: LD_VAR 0 5
43522: IN
43523: OR
43524: AND
43525: PUSH
43526: LD_INT 6
43528: PPUSH
43529: LD_VAR 0 16
43533: PPUSH
43534: CALL_OW 321
43538: PUSH
43539: LD_INT 2
43541: EQUAL
43542: AND
43543: IFFALSE 43708
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43545: LD_INT 22
43547: PUSH
43548: LD_VAR 0 16
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 35
43562: PUSH
43563: LD_INT 11
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 35
43572: PUSH
43573: LD_INT 30
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 91
43587: PUSH
43588: LD_VAR 0 1
43592: PUSH
43593: LD_INT 18
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: PPUSH
43606: CALL_OW 69
43610: NOT
43611: PUSH
43612: LD_INT 22
43614: PUSH
43615: LD_VAR 0 16
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 30
43629: PUSH
43630: LD_INT 32
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 30
43639: PUSH
43640: LD_INT 33
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 91
43654: PUSH
43655: LD_VAR 0 1
43659: PUSH
43660: LD_INT 12
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: PPUSH
43676: CALL_OW 69
43680: PUSH
43681: LD_INT 2
43683: GREATER
43684: AND
43685: IFFALSE 43708
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43687: LD_ADDR_VAR 0 18
43691: PUSH
43692: LD_INT 11
43694: PUSH
43695: LD_INT 30
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_VAR 0 12
43706: ARRAY
43707: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43708: LD_VAR 0 18
43712: NOT
43713: PUSH
43714: LD_INT 40
43716: PPUSH
43717: LD_VAR 0 16
43721: PPUSH
43722: CALL_OW 321
43726: PUSH
43727: LD_INT 2
43729: EQUAL
43730: AND
43731: PUSH
43732: LD_INT 7
43734: PUSH
43735: LD_VAR 0 5
43739: IN
43740: PUSH
43741: LD_INT 28
43743: PUSH
43744: LD_VAR 0 5
43748: IN
43749: OR
43750: PUSH
43751: LD_INT 45
43753: PUSH
43754: LD_VAR 0 5
43758: IN
43759: OR
43760: AND
43761: IFFALSE 44015
// begin hex := GetHexInfo ( x , y ) ;
43763: LD_ADDR_VAR 0 4
43767: PUSH
43768: LD_VAR 0 10
43772: PPUSH
43773: LD_VAR 0 11
43777: PPUSH
43778: CALL_OW 546
43782: ST_TO_ADDR
// if hex [ 1 ] then
43783: LD_VAR 0 4
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: IFFALSE 43795
// exit ;
43793: GO 44198
// height := hex [ 2 ] ;
43795: LD_ADDR_VAR 0 15
43799: PUSH
43800: LD_VAR 0 4
43804: PUSH
43805: LD_INT 2
43807: ARRAY
43808: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43809: LD_ADDR_VAR 0 14
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: LD_INT 5
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: ST_TO_ADDR
// for i in tmp do
43832: LD_ADDR_VAR 0 8
43836: PUSH
43837: LD_VAR 0 14
43841: PUSH
43842: FOR_IN
43843: IFFALSE 44013
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43845: LD_ADDR_VAR 0 9
43849: PUSH
43850: LD_VAR 0 10
43854: PPUSH
43855: LD_VAR 0 8
43859: PPUSH
43860: LD_INT 5
43862: PPUSH
43863: CALL_OW 272
43867: PUSH
43868: LD_VAR 0 11
43872: PPUSH
43873: LD_VAR 0 8
43877: PPUSH
43878: LD_INT 5
43880: PPUSH
43881: CALL_OW 273
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43890: LD_VAR 0 9
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PPUSH
43899: LD_VAR 0 9
43903: PUSH
43904: LD_INT 2
43906: ARRAY
43907: PPUSH
43908: CALL_OW 488
43912: IFFALSE 44011
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43914: LD_ADDR_VAR 0 4
43918: PUSH
43919: LD_VAR 0 9
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PPUSH
43928: LD_VAR 0 9
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: PPUSH
43937: CALL_OW 546
43941: ST_TO_ADDR
// if hex [ 1 ] then
43942: LD_VAR 0 4
43946: PUSH
43947: LD_INT 1
43949: ARRAY
43950: IFFALSE 43954
// continue ;
43952: GO 43842
// h := hex [ 2 ] ;
43954: LD_ADDR_VAR 0 13
43958: PUSH
43959: LD_VAR 0 4
43963: PUSH
43964: LD_INT 2
43966: ARRAY
43967: ST_TO_ADDR
// if h + 7 < height then
43968: LD_VAR 0 13
43972: PUSH
43973: LD_INT 7
43975: PLUS
43976: PUSH
43977: LD_VAR 0 15
43981: LESS
43982: IFFALSE 44011
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43984: LD_ADDR_VAR 0 18
43988: PUSH
43989: LD_INT 7
43991: PUSH
43992: LD_INT 28
43994: PUSH
43995: LD_INT 45
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: PUSH
44003: LD_VAR 0 12
44007: ARRAY
44008: ST_TO_ADDR
// break ;
44009: GO 44013
// end ; end ; end ;
44011: GO 43842
44013: POP
44014: POP
// end ; if not weapon then
44015: LD_VAR 0 18
44019: NOT
44020: IFFALSE 44080
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44022: LD_ADDR_VAR 0 5
44026: PUSH
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 11
44034: PUSH
44035: LD_INT 30
44037: PUSH
44038: LD_INT 49
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: DIFF
44046: ST_TO_ADDR
// if not list then
44047: LD_VAR 0 5
44051: NOT
44052: IFFALSE 44056
// exit ;
44054: GO 44198
// weapon := list [ rand ( 1 , list ) ] ;
44056: LD_ADDR_VAR 0 18
44060: PUSH
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 1
44068: PPUSH
44069: LD_VAR 0 5
44073: PPUSH
44074: CALL_OW 12
44078: ARRAY
44079: ST_TO_ADDR
// end ; if weapon then
44080: LD_VAR 0 18
44084: IFFALSE 44198
// begin tmp := CostOfWeapon ( weapon ) ;
44086: LD_ADDR_VAR 0 14
44090: PUSH
44091: LD_VAR 0 18
44095: PPUSH
44096: CALL_OW 451
44100: ST_TO_ADDR
// j := GetBase ( tower ) ;
44101: LD_ADDR_VAR 0 9
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 274
44115: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44116: LD_VAR 0 9
44120: PPUSH
44121: LD_INT 1
44123: PPUSH
44124: CALL_OW 275
44128: PUSH
44129: LD_VAR 0 14
44133: PUSH
44134: LD_INT 1
44136: ARRAY
44137: GREATEREQUAL
44138: PUSH
44139: LD_VAR 0 9
44143: PPUSH
44144: LD_INT 2
44146: PPUSH
44147: CALL_OW 275
44151: PUSH
44152: LD_VAR 0 14
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: GREATEREQUAL
44161: AND
44162: PUSH
44163: LD_VAR 0 9
44167: PPUSH
44168: LD_INT 3
44170: PPUSH
44171: CALL_OW 275
44175: PUSH
44176: LD_VAR 0 14
44180: PUSH
44181: LD_INT 3
44183: ARRAY
44184: GREATEREQUAL
44185: AND
44186: IFFALSE 44198
// result := weapon ;
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_VAR 0 18
44197: ST_TO_ADDR
// end ; end ;
44198: LD_VAR 0 3
44202: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44203: LD_INT 0
44205: PPUSH
44206: PPUSH
// result := true ;
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: LD_INT 1
44214: ST_TO_ADDR
// if array1 = array2 then
44215: LD_VAR 0 1
44219: PUSH
44220: LD_VAR 0 2
44224: EQUAL
44225: IFFALSE 44285
// begin for i = 1 to array1 do
44227: LD_ADDR_VAR 0 4
44231: PUSH
44232: DOUBLE
44233: LD_INT 1
44235: DEC
44236: ST_TO_ADDR
44237: LD_VAR 0 1
44241: PUSH
44242: FOR_TO
44243: IFFALSE 44281
// if array1 [ i ] <> array2 [ i ] then
44245: LD_VAR 0 1
44249: PUSH
44250: LD_VAR 0 4
44254: ARRAY
44255: PUSH
44256: LD_VAR 0 2
44260: PUSH
44261: LD_VAR 0 4
44265: ARRAY
44266: NONEQUAL
44267: IFFALSE 44279
// begin result := false ;
44269: LD_ADDR_VAR 0 3
44273: PUSH
44274: LD_INT 0
44276: ST_TO_ADDR
// break ;
44277: GO 44281
// end ;
44279: GO 44242
44281: POP
44282: POP
// end else
44283: GO 44293
// result := false ;
44285: LD_ADDR_VAR 0 3
44289: PUSH
44290: LD_INT 0
44292: ST_TO_ADDR
// end ;
44293: LD_VAR 0 3
44297: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44298: LD_INT 0
44300: PPUSH
44301: PPUSH
// if not array1 or not array2 then
44302: LD_VAR 0 1
44306: NOT
44307: PUSH
44308: LD_VAR 0 2
44312: NOT
44313: OR
44314: IFFALSE 44318
// exit ;
44316: GO 44382
// result := true ;
44318: LD_ADDR_VAR 0 3
44322: PUSH
44323: LD_INT 1
44325: ST_TO_ADDR
// for i = 1 to array1 do
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: DOUBLE
44332: LD_INT 1
44334: DEC
44335: ST_TO_ADDR
44336: LD_VAR 0 1
44340: PUSH
44341: FOR_TO
44342: IFFALSE 44380
// if array1 [ i ] <> array2 [ i ] then
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 4
44353: ARRAY
44354: PUSH
44355: LD_VAR 0 2
44359: PUSH
44360: LD_VAR 0 4
44364: ARRAY
44365: NONEQUAL
44366: IFFALSE 44378
// begin result := false ;
44368: LD_ADDR_VAR 0 3
44372: PUSH
44373: LD_INT 0
44375: ST_TO_ADDR
// break ;
44376: GO 44380
// end ;
44378: GO 44341
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 3
44386: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
// pom := GetBase ( fac ) ;
44392: LD_ADDR_VAR 0 5
44396: PUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: CALL_OW 274
44406: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: LD_VAR 0 2
44416: PUSH
44417: LD_INT 1
44419: ARRAY
44420: PPUSH
44421: LD_VAR 0 2
44425: PUSH
44426: LD_INT 2
44428: ARRAY
44429: PPUSH
44430: LD_VAR 0 2
44434: PUSH
44435: LD_INT 3
44437: ARRAY
44438: PPUSH
44439: LD_VAR 0 2
44443: PUSH
44444: LD_INT 4
44446: ARRAY
44447: PPUSH
44448: CALL_OW 449
44452: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44453: LD_ADDR_VAR 0 3
44457: PUSH
44458: LD_VAR 0 5
44462: PPUSH
44463: LD_INT 1
44465: PPUSH
44466: CALL_OW 275
44470: PUSH
44471: LD_VAR 0 4
44475: PUSH
44476: LD_INT 1
44478: ARRAY
44479: GREATEREQUAL
44480: PUSH
44481: LD_VAR 0 5
44485: PPUSH
44486: LD_INT 2
44488: PPUSH
44489: CALL_OW 275
44493: PUSH
44494: LD_VAR 0 4
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: GREATEREQUAL
44503: AND
44504: PUSH
44505: LD_VAR 0 5
44509: PPUSH
44510: LD_INT 3
44512: PPUSH
44513: CALL_OW 275
44517: PUSH
44518: LD_VAR 0 4
44522: PUSH
44523: LD_INT 3
44525: ARRAY
44526: GREATEREQUAL
44527: AND
44528: ST_TO_ADDR
// end ;
44529: LD_VAR 0 3
44533: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44534: LD_INT 0
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
// pom := GetBase ( building ) ;
44540: LD_ADDR_VAR 0 3
44544: PUSH
44545: LD_VAR 0 1
44549: PPUSH
44550: CALL_OW 274
44554: ST_TO_ADDR
// if not pom then
44555: LD_VAR 0 3
44559: NOT
44560: IFFALSE 44564
// exit ;
44562: GO 44734
// btype := GetBType ( building ) ;
44564: LD_ADDR_VAR 0 5
44568: PUSH
44569: LD_VAR 0 1
44573: PPUSH
44574: CALL_OW 266
44578: ST_TO_ADDR
// if btype = b_armoury then
44579: LD_VAR 0 5
44583: PUSH
44584: LD_INT 4
44586: EQUAL
44587: IFFALSE 44597
// btype := b_barracks ;
44589: LD_ADDR_VAR 0 5
44593: PUSH
44594: LD_INT 5
44596: ST_TO_ADDR
// if btype = b_depot then
44597: LD_VAR 0 5
44601: PUSH
44602: LD_INT 0
44604: EQUAL
44605: IFFALSE 44615
// btype := b_warehouse ;
44607: LD_ADDR_VAR 0 5
44611: PUSH
44612: LD_INT 1
44614: ST_TO_ADDR
// if btype = b_workshop then
44615: LD_VAR 0 5
44619: PUSH
44620: LD_INT 2
44622: EQUAL
44623: IFFALSE 44633
// btype := b_factory ;
44625: LD_ADDR_VAR 0 5
44629: PUSH
44630: LD_INT 3
44632: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44633: LD_ADDR_VAR 0 4
44637: PUSH
44638: LD_VAR 0 5
44642: PPUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: CALL_OW 248
44652: PPUSH
44653: CALL_OW 450
44657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44658: LD_ADDR_VAR 0 2
44662: PUSH
44663: LD_VAR 0 3
44667: PPUSH
44668: LD_INT 1
44670: PPUSH
44671: CALL_OW 275
44675: PUSH
44676: LD_VAR 0 4
44680: PUSH
44681: LD_INT 1
44683: ARRAY
44684: GREATEREQUAL
44685: PUSH
44686: LD_VAR 0 3
44690: PPUSH
44691: LD_INT 2
44693: PPUSH
44694: CALL_OW 275
44698: PUSH
44699: LD_VAR 0 4
44703: PUSH
44704: LD_INT 2
44706: ARRAY
44707: GREATEREQUAL
44708: AND
44709: PUSH
44710: LD_VAR 0 3
44714: PPUSH
44715: LD_INT 3
44717: PPUSH
44718: CALL_OW 275
44722: PUSH
44723: LD_VAR 0 4
44727: PUSH
44728: LD_INT 3
44730: ARRAY
44731: GREATEREQUAL
44732: AND
44733: ST_TO_ADDR
// end ;
44734: LD_VAR 0 2
44738: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44739: LD_INT 0
44741: PPUSH
44742: PPUSH
44743: PPUSH
// pom := GetBase ( building ) ;
44744: LD_ADDR_VAR 0 4
44748: PUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: CALL_OW 274
44758: ST_TO_ADDR
// if not pom then
44759: LD_VAR 0 4
44763: NOT
44764: IFFALSE 44768
// exit ;
44766: GO 44869
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44768: LD_ADDR_VAR 0 5
44772: PUSH
44773: LD_VAR 0 2
44777: PPUSH
44778: LD_VAR 0 1
44782: PPUSH
44783: CALL_OW 248
44787: PPUSH
44788: CALL_OW 450
44792: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_VAR 0 4
44802: PPUSH
44803: LD_INT 1
44805: PPUSH
44806: CALL_OW 275
44810: PUSH
44811: LD_VAR 0 5
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: GREATEREQUAL
44820: PUSH
44821: LD_VAR 0 4
44825: PPUSH
44826: LD_INT 2
44828: PPUSH
44829: CALL_OW 275
44833: PUSH
44834: LD_VAR 0 5
44838: PUSH
44839: LD_INT 2
44841: ARRAY
44842: GREATEREQUAL
44843: AND
44844: PUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: LD_INT 3
44852: PPUSH
44853: CALL_OW 275
44857: PUSH
44858: LD_VAR 0 5
44862: PUSH
44863: LD_INT 3
44865: ARRAY
44866: GREATEREQUAL
44867: AND
44868: ST_TO_ADDR
// end ;
44869: LD_VAR 0 3
44873: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44874: LD_INT 0
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
// result := false ;
44887: LD_ADDR_VAR 0 8
44891: PUSH
44892: LD_INT 0
44894: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44895: LD_VAR 0 5
44899: NOT
44900: PUSH
44901: LD_VAR 0 1
44905: NOT
44906: OR
44907: PUSH
44908: LD_VAR 0 2
44912: NOT
44913: OR
44914: PUSH
44915: LD_VAR 0 3
44919: NOT
44920: OR
44921: IFFALSE 44925
// exit ;
44923: GO 45739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44925: LD_ADDR_VAR 0 14
44929: PUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_VAR 0 2
44939: PPUSH
44940: LD_VAR 0 3
44944: PPUSH
44945: LD_VAR 0 4
44949: PPUSH
44950: LD_VAR 0 5
44954: PUSH
44955: LD_INT 1
44957: ARRAY
44958: PPUSH
44959: CALL_OW 248
44963: PPUSH
44964: LD_INT 0
44966: PPUSH
44967: CALL 46976 0 6
44971: ST_TO_ADDR
// if not hexes then
44972: LD_VAR 0 14
44976: NOT
44977: IFFALSE 44981
// exit ;
44979: GO 45739
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44981: LD_ADDR_VAR 0 17
44985: PUSH
44986: LD_VAR 0 5
44990: PPUSH
44991: LD_INT 22
44993: PUSH
44994: LD_VAR 0 13
44998: PPUSH
44999: CALL_OW 255
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 30
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 30
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PPUSH
45040: CALL_OW 72
45044: ST_TO_ADDR
// for i = 1 to hexes do
45045: LD_ADDR_VAR 0 9
45049: PUSH
45050: DOUBLE
45051: LD_INT 1
45053: DEC
45054: ST_TO_ADDR
45055: LD_VAR 0 14
45059: PUSH
45060: FOR_TO
45061: IFFALSE 45737
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45063: LD_ADDR_VAR 0 13
45067: PUSH
45068: LD_VAR 0 14
45072: PUSH
45073: LD_VAR 0 9
45077: ARRAY
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PPUSH
45083: LD_VAR 0 14
45087: PUSH
45088: LD_VAR 0 9
45092: ARRAY
45093: PUSH
45094: LD_INT 2
45096: ARRAY
45097: PPUSH
45098: CALL_OW 428
45102: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45103: LD_VAR 0 14
45107: PUSH
45108: LD_VAR 0 9
45112: ARRAY
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: PPUSH
45118: LD_VAR 0 14
45122: PUSH
45123: LD_VAR 0 9
45127: ARRAY
45128: PUSH
45129: LD_INT 2
45131: ARRAY
45132: PPUSH
45133: CALL_OW 351
45137: PUSH
45138: LD_VAR 0 14
45142: PUSH
45143: LD_VAR 0 9
45147: ARRAY
45148: PUSH
45149: LD_INT 1
45151: ARRAY
45152: PPUSH
45153: LD_VAR 0 14
45157: PUSH
45158: LD_VAR 0 9
45162: ARRAY
45163: PUSH
45164: LD_INT 2
45166: ARRAY
45167: PPUSH
45168: CALL_OW 488
45172: NOT
45173: OR
45174: PUSH
45175: LD_VAR 0 13
45179: PPUSH
45180: CALL_OW 247
45184: PUSH
45185: LD_INT 3
45187: EQUAL
45188: OR
45189: IFFALSE 45195
// exit ;
45191: POP
45192: POP
45193: GO 45739
// if not tmp then
45195: LD_VAR 0 13
45199: NOT
45200: IFFALSE 45204
// continue ;
45202: GO 45060
// result := true ;
45204: LD_ADDR_VAR 0 8
45208: PUSH
45209: LD_INT 1
45211: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45212: LD_VAR 0 6
45216: PUSH
45217: LD_VAR 0 13
45221: PPUSH
45222: CALL_OW 247
45226: PUSH
45227: LD_INT 2
45229: EQUAL
45230: AND
45231: PUSH
45232: LD_VAR 0 13
45236: PPUSH
45237: CALL_OW 263
45241: PUSH
45242: LD_INT 1
45244: EQUAL
45245: AND
45246: IFFALSE 45410
// begin if IsDrivenBy ( tmp ) then
45248: LD_VAR 0 13
45252: PPUSH
45253: CALL_OW 311
45257: IFFALSE 45261
// continue ;
45259: GO 45060
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45261: LD_VAR 0 6
45265: PPUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 60
45271: PUSH
45272: EMPTY
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 55
45284: PUSH
45285: EMPTY
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PPUSH
45296: CALL_OW 72
45300: IFFALSE 45408
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45302: LD_ADDR_VAR 0 18
45306: PUSH
45307: LD_VAR 0 6
45311: PPUSH
45312: LD_INT 3
45314: PUSH
45315: LD_INT 60
45317: PUSH
45318: EMPTY
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: LD_INT 55
45330: PUSH
45331: EMPTY
45332: LIST
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PPUSH
45342: CALL_OW 72
45346: PUSH
45347: LD_INT 1
45349: ARRAY
45350: ST_TO_ADDR
// if IsInUnit ( driver ) then
45351: LD_VAR 0 18
45355: PPUSH
45356: CALL_OW 310
45360: IFFALSE 45371
// ComExit ( driver ) ;
45362: LD_VAR 0 18
45366: PPUSH
45367: CALL 70681 0 1
// AddComEnterUnit ( driver , tmp ) ;
45371: LD_VAR 0 18
45375: PPUSH
45376: LD_VAR 0 13
45380: PPUSH
45381: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45385: LD_VAR 0 18
45389: PPUSH
45390: LD_VAR 0 7
45394: PPUSH
45395: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45399: LD_VAR 0 18
45403: PPUSH
45404: CALL_OW 181
// end ; continue ;
45408: GO 45060
// end ; if not cleaners or not tmp in cleaners then
45410: LD_VAR 0 6
45414: NOT
45415: PUSH
45416: LD_VAR 0 13
45420: PUSH
45421: LD_VAR 0 6
45425: IN
45426: NOT
45427: OR
45428: IFFALSE 45735
// begin if dep then
45430: LD_VAR 0 17
45434: IFFALSE 45570
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45436: LD_ADDR_VAR 0 16
45440: PUSH
45441: LD_VAR 0 17
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PPUSH
45450: CALL_OW 250
45454: PPUSH
45455: LD_VAR 0 17
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: PPUSH
45464: CALL_OW 254
45468: PPUSH
45469: LD_INT 5
45471: PPUSH
45472: CALL_OW 272
45476: PUSH
45477: LD_VAR 0 17
45481: PUSH
45482: LD_INT 1
45484: ARRAY
45485: PPUSH
45486: CALL_OW 251
45490: PPUSH
45491: LD_VAR 0 17
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PPUSH
45500: CALL_OW 254
45504: PPUSH
45505: LD_INT 5
45507: PPUSH
45508: CALL_OW 273
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45517: LD_VAR 0 16
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: LD_VAR 0 16
45530: PUSH
45531: LD_INT 2
45533: ARRAY
45534: PPUSH
45535: CALL_OW 488
45539: IFFALSE 45570
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45541: LD_VAR 0 13
45545: PPUSH
45546: LD_VAR 0 16
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 16
45559: PUSH
45560: LD_INT 2
45562: ARRAY
45563: PPUSH
45564: CALL_OW 111
// continue ;
45568: GO 45060
// end ; end ; r := GetDir ( tmp ) ;
45570: LD_ADDR_VAR 0 15
45574: PUSH
45575: LD_VAR 0 13
45579: PPUSH
45580: CALL_OW 254
45584: ST_TO_ADDR
// if r = 5 then
45585: LD_VAR 0 15
45589: PUSH
45590: LD_INT 5
45592: EQUAL
45593: IFFALSE 45603
// r := 0 ;
45595: LD_ADDR_VAR 0 15
45599: PUSH
45600: LD_INT 0
45602: ST_TO_ADDR
// for j = r to 5 do
45603: LD_ADDR_VAR 0 10
45607: PUSH
45608: DOUBLE
45609: LD_VAR 0 15
45613: DEC
45614: ST_TO_ADDR
45615: LD_INT 5
45617: PUSH
45618: FOR_TO
45619: IFFALSE 45733
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45621: LD_ADDR_VAR 0 11
45625: PUSH
45626: LD_VAR 0 13
45630: PPUSH
45631: CALL_OW 250
45635: PPUSH
45636: LD_VAR 0 10
45640: PPUSH
45641: LD_INT 2
45643: PPUSH
45644: CALL_OW 272
45648: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45649: LD_ADDR_VAR 0 12
45653: PUSH
45654: LD_VAR 0 13
45658: PPUSH
45659: CALL_OW 251
45663: PPUSH
45664: LD_VAR 0 10
45668: PPUSH
45669: LD_INT 2
45671: PPUSH
45672: CALL_OW 273
45676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45677: LD_VAR 0 11
45681: PPUSH
45682: LD_VAR 0 12
45686: PPUSH
45687: CALL_OW 488
45691: PUSH
45692: LD_VAR 0 11
45696: PPUSH
45697: LD_VAR 0 12
45701: PPUSH
45702: CALL_OW 428
45706: NOT
45707: AND
45708: IFFALSE 45731
// begin ComMoveXY ( tmp , _x , _y ) ;
45710: LD_VAR 0 13
45714: PPUSH
45715: LD_VAR 0 11
45719: PPUSH
45720: LD_VAR 0 12
45724: PPUSH
45725: CALL_OW 111
// break ;
45729: GO 45733
// end ; end ;
45731: GO 45618
45733: POP
45734: POP
// end ; end ;
45735: GO 45060
45737: POP
45738: POP
// end ;
45739: LD_VAR 0 8
45743: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45744: LD_INT 0
45746: PPUSH
// result := true ;
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_INT 1
45754: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45755: LD_VAR 0 2
45759: PUSH
45760: LD_INT 24
45762: DOUBLE
45763: EQUAL
45764: IFTRUE 45774
45766: LD_INT 33
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45774
45772: GO 45799
45774: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45775: LD_ADDR_VAR 0 3
45779: PUSH
45780: LD_INT 32
45782: PPUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 321
45792: PUSH
45793: LD_INT 2
45795: EQUAL
45796: ST_TO_ADDR
45797: GO 46119
45799: LD_INT 20
45801: DOUBLE
45802: EQUAL
45803: IFTRUE 45807
45805: GO 45832
45807: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45808: LD_ADDR_VAR 0 3
45812: PUSH
45813: LD_INT 6
45815: PPUSH
45816: LD_VAR 0 1
45820: PPUSH
45821: CALL_OW 321
45825: PUSH
45826: LD_INT 2
45828: EQUAL
45829: ST_TO_ADDR
45830: GO 46119
45832: LD_INT 22
45834: DOUBLE
45835: EQUAL
45836: IFTRUE 45846
45838: LD_INT 36
45840: DOUBLE
45841: EQUAL
45842: IFTRUE 45846
45844: GO 45871
45846: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_INT 15
45854: PPUSH
45855: LD_VAR 0 1
45859: PPUSH
45860: CALL_OW 321
45864: PUSH
45865: LD_INT 2
45867: EQUAL
45868: ST_TO_ADDR
45869: GO 46119
45871: LD_INT 30
45873: DOUBLE
45874: EQUAL
45875: IFTRUE 45879
45877: GO 45904
45879: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_INT 20
45887: PPUSH
45888: LD_VAR 0 1
45892: PPUSH
45893: CALL_OW 321
45897: PUSH
45898: LD_INT 2
45900: EQUAL
45901: ST_TO_ADDR
45902: GO 46119
45904: LD_INT 28
45906: DOUBLE
45907: EQUAL
45908: IFTRUE 45918
45910: LD_INT 21
45912: DOUBLE
45913: EQUAL
45914: IFTRUE 45918
45916: GO 45943
45918: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45919: LD_ADDR_VAR 0 3
45923: PUSH
45924: LD_INT 21
45926: PPUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: CALL_OW 321
45936: PUSH
45937: LD_INT 2
45939: EQUAL
45940: ST_TO_ADDR
45941: GO 46119
45943: LD_INT 16
45945: DOUBLE
45946: EQUAL
45947: IFTRUE 45951
45949: GO 45978
45951: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45952: LD_ADDR_VAR 0 3
45956: PUSH
45957: LD_EXP 45
45961: PPUSH
45962: LD_VAR 0 1
45966: PPUSH
45967: CALL_OW 321
45971: PUSH
45972: LD_INT 2
45974: EQUAL
45975: ST_TO_ADDR
45976: GO 46119
45978: LD_INT 19
45980: DOUBLE
45981: EQUAL
45982: IFTRUE 45992
45984: LD_INT 23
45986: DOUBLE
45987: EQUAL
45988: IFTRUE 45992
45990: GO 46019
45992: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45993: LD_ADDR_VAR 0 3
45997: PUSH
45998: LD_EXP 44
46002: PPUSH
46003: LD_VAR 0 1
46007: PPUSH
46008: CALL_OW 321
46012: PUSH
46013: LD_INT 2
46015: EQUAL
46016: ST_TO_ADDR
46017: GO 46119
46019: LD_INT 17
46021: DOUBLE
46022: EQUAL
46023: IFTRUE 46027
46025: GO 46052
46027: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46028: LD_ADDR_VAR 0 3
46032: PUSH
46033: LD_INT 39
46035: PPUSH
46036: LD_VAR 0 1
46040: PPUSH
46041: CALL_OW 321
46045: PUSH
46046: LD_INT 2
46048: EQUAL
46049: ST_TO_ADDR
46050: GO 46119
46052: LD_INT 18
46054: DOUBLE
46055: EQUAL
46056: IFTRUE 46060
46058: GO 46085
46060: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46061: LD_ADDR_VAR 0 3
46065: PUSH
46066: LD_INT 40
46068: PPUSH
46069: LD_VAR 0 1
46073: PPUSH
46074: CALL_OW 321
46078: PUSH
46079: LD_INT 2
46081: EQUAL
46082: ST_TO_ADDR
46083: GO 46119
46085: LD_INT 27
46087: DOUBLE
46088: EQUAL
46089: IFTRUE 46093
46091: GO 46118
46093: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46094: LD_ADDR_VAR 0 3
46098: PUSH
46099: LD_INT 35
46101: PPUSH
46102: LD_VAR 0 1
46106: PPUSH
46107: CALL_OW 321
46111: PUSH
46112: LD_INT 2
46114: EQUAL
46115: ST_TO_ADDR
46116: GO 46119
46118: POP
// end ;
46119: LD_VAR 0 3
46123: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46124: LD_INT 0
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
// result := false ;
46137: LD_ADDR_VAR 0 6
46141: PUSH
46142: LD_INT 0
46144: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46145: LD_VAR 0 1
46149: NOT
46150: PUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 266
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: IN
46171: NOT
46172: OR
46173: PUSH
46174: LD_VAR 0 2
46178: NOT
46179: OR
46180: PUSH
46181: LD_VAR 0 5
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 4
46200: PUSH
46201: LD_INT 5
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: IN
46212: NOT
46213: OR
46214: PUSH
46215: LD_VAR 0 3
46219: PPUSH
46220: LD_VAR 0 4
46224: PPUSH
46225: CALL_OW 488
46229: NOT
46230: OR
46231: IFFALSE 46235
// exit ;
46233: GO 46971
// side := GetSide ( depot ) ;
46235: LD_ADDR_VAR 0 9
46239: PUSH
46240: LD_VAR 0 1
46244: PPUSH
46245: CALL_OW 255
46249: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46250: LD_VAR 0 9
46254: PPUSH
46255: LD_VAR 0 2
46259: PPUSH
46260: CALL 45744 0 2
46264: NOT
46265: IFFALSE 46269
// exit ;
46267: GO 46971
// pom := GetBase ( depot ) ;
46269: LD_ADDR_VAR 0 10
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 274
46283: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46284: LD_ADDR_VAR 0 11
46288: PUSH
46289: LD_VAR 0 2
46293: PPUSH
46294: LD_VAR 0 1
46298: PPUSH
46299: CALL_OW 248
46303: PPUSH
46304: CALL_OW 450
46308: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46309: LD_VAR 0 10
46313: PPUSH
46314: LD_INT 1
46316: PPUSH
46317: CALL_OW 275
46321: PUSH
46322: LD_VAR 0 11
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: GREATEREQUAL
46331: PUSH
46332: LD_VAR 0 10
46336: PPUSH
46337: LD_INT 2
46339: PPUSH
46340: CALL_OW 275
46344: PUSH
46345: LD_VAR 0 11
46349: PUSH
46350: LD_INT 2
46352: ARRAY
46353: GREATEREQUAL
46354: AND
46355: PUSH
46356: LD_VAR 0 10
46360: PPUSH
46361: LD_INT 3
46363: PPUSH
46364: CALL_OW 275
46368: PUSH
46369: LD_VAR 0 11
46373: PUSH
46374: LD_INT 3
46376: ARRAY
46377: GREATEREQUAL
46378: AND
46379: NOT
46380: IFFALSE 46384
// exit ;
46382: GO 46971
// if GetBType ( depot ) = b_depot then
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 266
46393: PUSH
46394: LD_INT 0
46396: EQUAL
46397: IFFALSE 46409
// dist := 28 else
46399: LD_ADDR_VAR 0 14
46403: PUSH
46404: LD_INT 28
46406: ST_TO_ADDR
46407: GO 46417
// dist := 36 ;
46409: LD_ADDR_VAR 0 14
46413: PUSH
46414: LD_INT 36
46416: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46417: LD_VAR 0 1
46421: PPUSH
46422: LD_VAR 0 3
46426: PPUSH
46427: LD_VAR 0 4
46431: PPUSH
46432: CALL_OW 297
46436: PUSH
46437: LD_VAR 0 14
46441: GREATER
46442: IFFALSE 46446
// exit ;
46444: GO 46971
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46446: LD_ADDR_VAR 0 12
46450: PUSH
46451: LD_VAR 0 2
46455: PPUSH
46456: LD_VAR 0 3
46460: PPUSH
46461: LD_VAR 0 4
46465: PPUSH
46466: LD_VAR 0 5
46470: PPUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL_OW 248
46480: PPUSH
46481: LD_INT 0
46483: PPUSH
46484: CALL 46976 0 6
46488: ST_TO_ADDR
// if not hexes then
46489: LD_VAR 0 12
46493: NOT
46494: IFFALSE 46498
// exit ;
46496: GO 46971
// hex := GetHexInfo ( x , y ) ;
46498: LD_ADDR_VAR 0 15
46502: PUSH
46503: LD_VAR 0 3
46507: PPUSH
46508: LD_VAR 0 4
46512: PPUSH
46513: CALL_OW 546
46517: ST_TO_ADDR
// if hex [ 1 ] then
46518: LD_VAR 0 15
46522: PUSH
46523: LD_INT 1
46525: ARRAY
46526: IFFALSE 46530
// exit ;
46528: GO 46971
// height := hex [ 2 ] ;
46530: LD_ADDR_VAR 0 13
46534: PUSH
46535: LD_VAR 0 15
46539: PUSH
46540: LD_INT 2
46542: ARRAY
46543: ST_TO_ADDR
// for i = 1 to hexes do
46544: LD_ADDR_VAR 0 7
46548: PUSH
46549: DOUBLE
46550: LD_INT 1
46552: DEC
46553: ST_TO_ADDR
46554: LD_VAR 0 12
46558: PUSH
46559: FOR_TO
46560: IFFALSE 46890
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46562: LD_VAR 0 12
46566: PUSH
46567: LD_VAR 0 7
46571: ARRAY
46572: PUSH
46573: LD_INT 1
46575: ARRAY
46576: PPUSH
46577: LD_VAR 0 12
46581: PUSH
46582: LD_VAR 0 7
46586: ARRAY
46587: PUSH
46588: LD_INT 2
46590: ARRAY
46591: PPUSH
46592: CALL_OW 488
46596: NOT
46597: PUSH
46598: LD_VAR 0 12
46602: PUSH
46603: LD_VAR 0 7
46607: ARRAY
46608: PUSH
46609: LD_INT 1
46611: ARRAY
46612: PPUSH
46613: LD_VAR 0 12
46617: PUSH
46618: LD_VAR 0 7
46622: ARRAY
46623: PUSH
46624: LD_INT 2
46626: ARRAY
46627: PPUSH
46628: CALL_OW 428
46632: PUSH
46633: LD_INT 0
46635: GREATER
46636: OR
46637: PUSH
46638: LD_VAR 0 12
46642: PUSH
46643: LD_VAR 0 7
46647: ARRAY
46648: PUSH
46649: LD_INT 1
46651: ARRAY
46652: PPUSH
46653: LD_VAR 0 12
46657: PUSH
46658: LD_VAR 0 7
46662: ARRAY
46663: PUSH
46664: LD_INT 2
46666: ARRAY
46667: PPUSH
46668: CALL_OW 351
46672: OR
46673: IFFALSE 46679
// exit ;
46675: POP
46676: POP
46677: GO 46971
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46679: LD_ADDR_VAR 0 8
46683: PUSH
46684: LD_VAR 0 12
46688: PUSH
46689: LD_VAR 0 7
46693: ARRAY
46694: PUSH
46695: LD_INT 1
46697: ARRAY
46698: PPUSH
46699: LD_VAR 0 12
46703: PUSH
46704: LD_VAR 0 7
46708: ARRAY
46709: PUSH
46710: LD_INT 2
46712: ARRAY
46713: PPUSH
46714: CALL_OW 546
46718: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46719: LD_VAR 0 8
46723: PUSH
46724: LD_INT 1
46726: ARRAY
46727: PUSH
46728: LD_VAR 0 8
46732: PUSH
46733: LD_INT 2
46735: ARRAY
46736: PUSH
46737: LD_VAR 0 13
46741: PUSH
46742: LD_INT 2
46744: PLUS
46745: GREATER
46746: OR
46747: PUSH
46748: LD_VAR 0 8
46752: PUSH
46753: LD_INT 2
46755: ARRAY
46756: PUSH
46757: LD_VAR 0 13
46761: PUSH
46762: LD_INT 2
46764: MINUS
46765: LESS
46766: OR
46767: PUSH
46768: LD_VAR 0 8
46772: PUSH
46773: LD_INT 3
46775: ARRAY
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 8
46782: PUSH
46783: LD_INT 9
46785: PUSH
46786: LD_INT 10
46788: PUSH
46789: LD_INT 11
46791: PUSH
46792: LD_INT 12
46794: PUSH
46795: LD_INT 13
46797: PUSH
46798: LD_INT 16
46800: PUSH
46801: LD_INT 17
46803: PUSH
46804: LD_INT 18
46806: PUSH
46807: LD_INT 19
46809: PUSH
46810: LD_INT 20
46812: PUSH
46813: LD_INT 21
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: IN
46831: NOT
46832: OR
46833: PUSH
46834: LD_VAR 0 8
46838: PUSH
46839: LD_INT 5
46841: ARRAY
46842: NOT
46843: OR
46844: PUSH
46845: LD_VAR 0 8
46849: PUSH
46850: LD_INT 6
46852: ARRAY
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 7
46862: PUSH
46863: LD_INT 9
46865: PUSH
46866: LD_INT 10
46868: PUSH
46869: LD_INT 11
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: IN
46880: NOT
46881: OR
46882: IFFALSE 46888
// exit ;
46884: POP
46885: POP
46886: GO 46971
// end ;
46888: GO 46559
46890: POP
46891: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46892: LD_VAR 0 9
46896: PPUSH
46897: LD_VAR 0 3
46901: PPUSH
46902: LD_VAR 0 4
46906: PPUSH
46907: LD_INT 20
46909: PPUSH
46910: CALL 38917 0 4
46914: PUSH
46915: LD_INT 4
46917: ARRAY
46918: IFFALSE 46922
// exit ;
46920: GO 46971
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46922: LD_VAR 0 2
46926: PUSH
46927: LD_INT 29
46929: PUSH
46930: LD_INT 30
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: IN
46937: PUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: LD_VAR 0 4
46947: PPUSH
46948: LD_VAR 0 9
46952: PPUSH
46953: CALL_OW 440
46957: NOT
46958: AND
46959: IFFALSE 46963
// exit ;
46961: GO 46971
// result := true ;
46963: LD_ADDR_VAR 0 6
46967: PUSH
46968: LD_INT 1
46970: ST_TO_ADDR
// end ;
46971: LD_VAR 0 6
46975: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46976: LD_INT 0
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
47018: PPUSH
47019: PPUSH
47020: PPUSH
47021: PPUSH
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
47026: PPUSH
47027: PPUSH
47028: PPUSH
47029: PPUSH
47030: PPUSH
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
// result = [ ] ;
47036: LD_ADDR_VAR 0 7
47040: PUSH
47041: EMPTY
47042: ST_TO_ADDR
// temp_list = [ ] ;
47043: LD_ADDR_VAR 0 9
47047: PUSH
47048: EMPTY
47049: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47050: LD_VAR 0 4
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 4
47069: PUSH
47070: LD_INT 5
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: IN
47081: NOT
47082: PUSH
47083: LD_VAR 0 1
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: IN
47098: PUSH
47099: LD_VAR 0 5
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: IN
47118: NOT
47119: AND
47120: OR
47121: IFFALSE 47125
// exit ;
47123: GO 65516
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47125: LD_VAR 0 1
47129: PUSH
47130: LD_INT 6
47132: PUSH
47133: LD_INT 7
47135: PUSH
47136: LD_INT 8
47138: PUSH
47139: LD_INT 13
47141: PUSH
47142: LD_INT 12
47144: PUSH
47145: LD_INT 15
47147: PUSH
47148: LD_INT 11
47150: PUSH
47151: LD_INT 14
47153: PUSH
47154: LD_INT 10
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: IN
47168: IFFALSE 47178
// btype = b_lab ;
47170: LD_ADDR_VAR 0 1
47174: PUSH
47175: LD_INT 6
47177: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47178: LD_VAR 0 6
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: IN
47197: NOT
47198: PUSH
47199: LD_VAR 0 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: LD_INT 6
47218: PUSH
47219: LD_INT 36
47221: PUSH
47222: LD_INT 4
47224: PUSH
47225: LD_INT 5
47227: PUSH
47228: LD_INT 31
47230: PUSH
47231: LD_INT 32
47233: PUSH
47234: LD_INT 33
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: IN
47250: NOT
47251: PUSH
47252: LD_VAR 0 6
47256: PUSH
47257: LD_INT 1
47259: EQUAL
47260: AND
47261: OR
47262: PUSH
47263: LD_VAR 0 1
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 3
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: IN
47278: NOT
47279: PUSH
47280: LD_VAR 0 6
47284: PUSH
47285: LD_INT 2
47287: EQUAL
47288: AND
47289: OR
47290: IFFALSE 47300
// mode = 0 ;
47292: LD_ADDR_VAR 0 6
47296: PUSH
47297: LD_INT 0
47299: ST_TO_ADDR
// case mode of 0 :
47300: LD_VAR 0 6
47304: PUSH
47305: LD_INT 0
47307: DOUBLE
47308: EQUAL
47309: IFTRUE 47313
47311: GO 58766
47313: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47314: LD_ADDR_VAR 0 11
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47507: LD_ADDR_VAR 0 12
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47703: LD_ADDR_VAR 0 13
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 3
47874: NEG
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47902: LD_ADDR_VAR 0 14
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48098: LD_ADDR_VAR 0 15
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48291: LD_ADDR_VAR 0 16
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 2
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48484: LD_ADDR_VAR 0 17
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48714: LD_ADDR_VAR 0 18
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48944: LD_ADDR_VAR 0 19
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 2
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49174: LD_ADDR_VAR 0 20
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49404: LD_ADDR_VAR 0 21
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: NEG
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49634: LD_ADDR_VAR 0 22
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49864: LD_ADDR_VAR 0 23
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50144: LD_ADDR_VAR 0 24
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50420: LD_ADDR_VAR 0 25
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50694: LD_ADDR_VAR 0 26
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50970: LD_ADDR_VAR 0 27
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51250: LD_ADDR_VAR 0 28
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51532: LD_ADDR_VAR 0 29
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51811: LD_ADDR_VAR 0 30
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52089: LD_ADDR_VAR 0 31
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 32
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52645: LD_ADDR_VAR 0 33
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52924: LD_ADDR_VAR 0 34
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53204: LD_ADDR_VAR 0 35
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53316: LD_ADDR_VAR 0 36
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53428: LD_ADDR_VAR 0 37
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53540: LD_ADDR_VAR 0 38
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53652: LD_ADDR_VAR 0 39
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53764: LD_ADDR_VAR 0 40
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53876: LD_ADDR_VAR 0 41
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54226: LD_ADDR_VAR 0 42
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54576: LD_ADDR_VAR 0 43
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54924: LD_ADDR_VAR 0 44
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: LD_INT 3
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55274: LD_ADDR_VAR 0 45
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 3
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 3
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55624: LD_ADDR_VAR 0 46
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 3
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55972: LD_ADDR_VAR 0 47
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56123: LD_ADDR_VAR 0 48
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56270: LD_ADDR_VAR 0 49
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56414: LD_ADDR_VAR 0 50
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 51
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56705: LD_ADDR_VAR 0 52
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56856: LD_ADDR_VAR 0 53
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57086: LD_ADDR_VAR 0 54
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57316: LD_ADDR_VAR 0 55
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 2
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57546: LD_ADDR_VAR 0 56
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57776: LD_ADDR_VAR 0 57
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 1
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: NEG
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58006: LD_ADDR_VAR 0 58
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58236: LD_ADDR_VAR 0 59
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58324: LD_ADDR_VAR 0 60
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58412: LD_ADDR_VAR 0 61
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58500: LD_ADDR_VAR 0 62
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 63
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58676: LD_ADDR_VAR 0 64
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: ST_TO_ADDR
// end ; 1 :
58764: GO 64661
58766: LD_INT 1
58768: DOUBLE
58769: EQUAL
58770: IFTRUE 58774
58772: GO 61397
58774: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58775: LD_ADDR_VAR 0 11
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58819: LD_ADDR_VAR 0 12
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58860: LD_ADDR_VAR 0 13
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58900: LD_ADDR_VAR 0 14
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58941: LD_ADDR_VAR 0 15
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58985: LD_ADDR_VAR 0 16
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: LD_INT 3
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59031: LD_ADDR_VAR 0 17
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59075: LD_ADDR_VAR 0 18
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59116: LD_ADDR_VAR 0 19
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59156: LD_ADDR_VAR 0 20
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59197: LD_ADDR_VAR 0 21
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59241: LD_ADDR_VAR 0 22
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59287: LD_ADDR_VAR 0 23
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 4
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59331: LD_ADDR_VAR 0 24
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 4
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59372: LD_ADDR_VAR 0 25
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59412: LD_ADDR_VAR 0 26
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59453: LD_ADDR_VAR 0 27
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 4
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59497: LD_ADDR_VAR 0 28
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 4
59528: NEG
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59543: LD_ADDR_VAR 0 29
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 4
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 5
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 6
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 6
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59698: LD_ADDR_VAR 0 30
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 5
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 5
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 5
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 6
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 6
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59841: LD_ADDR_VAR 0 31
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 4
59888: PUSH
59889: LD_INT 4
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 5
59918: PUSH
59919: LD_INT 5
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: LD_INT 5
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 6
59938: PUSH
59939: LD_INT 5
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 6
59948: PUSH
59949: LD_INT 6
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 5
59958: PUSH
59959: LD_INT 6
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59980: LD_ADDR_VAR 0 32
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 4
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 5
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 5
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 6
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 6
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: LD_INT 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60123: LD_ADDR_VAR 0 33
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 5
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 5
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 5
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 6
60243: NEG
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 6
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60278: LD_ADDR_VAR 0 34
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 4
60345: NEG
60346: PUSH
60347: LD_INT 4
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: LD_INT 5
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 5
60369: NEG
60370: PUSH
60371: LD_INT 4
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: LD_INT 5
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 5
60393: NEG
60394: PUSH
60395: LD_INT 6
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 6
60405: NEG
60406: PUSH
60407: LD_INT 5
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 6
60417: NEG
60418: PUSH
60419: LD_INT 6
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60441: LD_ADDR_VAR 0 41
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: LD_INT 3
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60485: LD_ADDR_VAR 0 42
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60526: LD_ADDR_VAR 0 43
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60566: LD_ADDR_VAR 0 44
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60607: LD_ADDR_VAR 0 45
60611: PUSH
60612: LD_INT 2
60614: NEG
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60651: LD_ADDR_VAR 0 46
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: LD_INT 3
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: NEG
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60697: LD_ADDR_VAR 0 47
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60730: LD_ADDR_VAR 0 48
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60761: LD_ADDR_VAR 0 49
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60790: LD_ADDR_VAR 0 50
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60819: LD_ADDR_VAR 0 51
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60850: LD_ADDR_VAR 0 52
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60883: LD_ADDR_VAR 0 53
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60927: LD_ADDR_VAR 0 54
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60968: LD_ADDR_VAR 0 55
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61008: LD_ADDR_VAR 0 56
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61049: LD_ADDR_VAR 0 57
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: NEG
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61093: LD_ADDR_VAR 0 58
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 3
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61139: LD_ADDR_VAR 0 59
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61183: LD_ADDR_VAR 0 60
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61224: LD_ADDR_VAR 0 61
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61264: LD_ADDR_VAR 0 62
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61305: LD_ADDR_VAR 0 63
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: LIST
61348: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61349: LD_ADDR_VAR 0 64
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// end ; 2 :
61395: GO 64661
61397: LD_INT 2
61399: DOUBLE
61400: EQUAL
61401: IFTRUE 61405
61403: GO 64660
61405: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61406: LD_ADDR_VAR 0 29
61410: PUSH
61411: LD_INT 4
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 5
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 5
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 4
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: LD_INT 4
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 4
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 4
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 5
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 4
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 5
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: LD_INT 5
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: LD_INT 3
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 4
61839: NEG
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 5
61851: NEG
61852: PUSH
61853: LD_INT 4
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: NEG
61864: PUSH
61865: LD_INT 5
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: LD_INT 5
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 5
61887: NEG
61888: PUSH
61889: LD_INT 3
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61944: LD_ADDR_VAR 0 30
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: LD_INT 4
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 5
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: LD_INT 5
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 3
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 5
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: LD_INT 5
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 4
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: NEG
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 4
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 5
62190: NEG
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 5
62213: NEG
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: LD_INT 4
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: LD_INT 3
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 4
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: LD_INT 4
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: LD_INT 4
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 4
62332: NEG
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 4
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 5
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 4
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 4
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 5
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: LD_INT 5
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62491: LD_ADDR_VAR 0 31
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 4
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 5
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 4
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 5
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 3
62591: NEG
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: NEG
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 4
62647: NEG
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 4
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 4
62693: NEG
62694: PUSH
62695: LD_INT 4
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 5
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 4
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 5
62753: NEG
62754: PUSH
62755: LD_INT 4
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: LD_INT 5
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: LD_INT 5
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 5
62789: NEG
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 4
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 3
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 4
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: LD_INT 4
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 4
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 5
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 5
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 5
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63041: LD_ADDR_VAR 0 32
63045: PUSH
63046: LD_INT 4
63048: NEG
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 4
63059: NEG
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 4
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 5
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 5
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 5
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 3
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: LD_INT 4
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: NEG
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 2
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: LD_INT 4
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 4
63246: NEG
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 4
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 5
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 4
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 3
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: LD_INT 4
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 5
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: LD_INT 5
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 3
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: LD_INT 4
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 5
63473: PUSH
63474: LD_INT 4
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 5
63483: PUSH
63484: LD_INT 5
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 4
63493: PUSH
63494: LD_INT 5
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 3
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: PUSH
63514: LD_INT 3
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 5
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: LD_INT 5
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63588: LD_ADDR_VAR 0 33
63592: PUSH
63593: LD_INT 4
63595: NEG
63596: PUSH
63597: LD_INT 4
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 4
63607: NEG
63608: PUSH
63609: LD_INT 5
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: LD_INT 4
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: LD_INT 3
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 4
63643: NEG
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 5
63655: NEG
63656: PUSH
63657: LD_INT 4
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: LD_INT 5
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: LD_INT 5
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 5
63691: NEG
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 4
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 4
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 4
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 5
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 5
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 5
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: LD_INT 3
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 3
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 4
63918: PUSH
63919: LD_INT 3
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 4
63928: PUSH
63929: LD_INT 4
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: PUSH
63939: LD_INT 4
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: LD_INT 3
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 4
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: LD_INT 4
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 3
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 4
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 5
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 5
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 4
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 5
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64126: LD_ADDR_VAR 0 34
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 4
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: LD_INT 4
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: LD_INT 4
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 5
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: LD_INT 3
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: NEG
64224: PUSH
64225: LD_INT 5
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 4
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 4
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 4
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 4
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 5
64348: PUSH
64349: LD_INT 4
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 5
64358: PUSH
64359: LD_INT 5
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 4
64368: PUSH
64369: LD_INT 5
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 4
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 5
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: LD_INT 5
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: LD_INT 3
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: LD_INT 4
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 4
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: PUSH
64491: LD_INT 4
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 4
64511: NEG
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 4
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 4
64556: NEG
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 5
64567: NEG
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 5
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 5
64590: NEG
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: NEG
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: ST_TO_ADDR
// end ; end ;
64658: GO 64661
64660: POP
// case btype of b_depot , b_warehouse :
64661: LD_VAR 0 1
64665: PUSH
64666: LD_INT 0
64668: DOUBLE
64669: EQUAL
64670: IFTRUE 64680
64672: LD_INT 1
64674: DOUBLE
64675: EQUAL
64676: IFTRUE 64680
64678: GO 64881
64680: POP
// case nation of nation_american :
64681: LD_VAR 0 5
64685: PUSH
64686: LD_INT 1
64688: DOUBLE
64689: EQUAL
64690: IFTRUE 64694
64692: GO 64750
64694: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64695: LD_ADDR_VAR 0 9
64699: PUSH
64700: LD_VAR 0 11
64704: PUSH
64705: LD_VAR 0 12
64709: PUSH
64710: LD_VAR 0 13
64714: PUSH
64715: LD_VAR 0 14
64719: PUSH
64720: LD_VAR 0 15
64724: PUSH
64725: LD_VAR 0 16
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: PUSH
64738: LD_VAR 0 4
64742: PUSH
64743: LD_INT 1
64745: PLUS
64746: ARRAY
64747: ST_TO_ADDR
64748: GO 64879
64750: LD_INT 2
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64758
64756: GO 64814
64758: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64759: LD_ADDR_VAR 0 9
64763: PUSH
64764: LD_VAR 0 17
64768: PUSH
64769: LD_VAR 0 18
64773: PUSH
64774: LD_VAR 0 19
64778: PUSH
64779: LD_VAR 0 20
64783: PUSH
64784: LD_VAR 0 21
64788: PUSH
64789: LD_VAR 0 22
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: LD_VAR 0 4
64806: PUSH
64807: LD_INT 1
64809: PLUS
64810: ARRAY
64811: ST_TO_ADDR
64812: GO 64879
64814: LD_INT 3
64816: DOUBLE
64817: EQUAL
64818: IFTRUE 64822
64820: GO 64878
64822: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64823: LD_ADDR_VAR 0 9
64827: PUSH
64828: LD_VAR 0 23
64832: PUSH
64833: LD_VAR 0 24
64837: PUSH
64838: LD_VAR 0 25
64842: PUSH
64843: LD_VAR 0 26
64847: PUSH
64848: LD_VAR 0 27
64852: PUSH
64853: LD_VAR 0 28
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: PUSH
64866: LD_VAR 0 4
64870: PUSH
64871: LD_INT 1
64873: PLUS
64874: ARRAY
64875: ST_TO_ADDR
64876: GO 64879
64878: POP
64879: GO 65434
64881: LD_INT 2
64883: DOUBLE
64884: EQUAL
64885: IFTRUE 64895
64887: LD_INT 3
64889: DOUBLE
64890: EQUAL
64891: IFTRUE 64895
64893: GO 64951
64895: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64896: LD_ADDR_VAR 0 9
64900: PUSH
64901: LD_VAR 0 29
64905: PUSH
64906: LD_VAR 0 30
64910: PUSH
64911: LD_VAR 0 31
64915: PUSH
64916: LD_VAR 0 32
64920: PUSH
64921: LD_VAR 0 33
64925: PUSH
64926: LD_VAR 0 34
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: PUSH
64939: LD_VAR 0 4
64943: PUSH
64944: LD_INT 1
64946: PLUS
64947: ARRAY
64948: ST_TO_ADDR
64949: GO 65434
64951: LD_INT 16
64953: DOUBLE
64954: EQUAL
64955: IFTRUE 65013
64957: LD_INT 17
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 65013
64963: LD_INT 18
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 65013
64969: LD_INT 19
64971: DOUBLE
64972: EQUAL
64973: IFTRUE 65013
64975: LD_INT 22
64977: DOUBLE
64978: EQUAL
64979: IFTRUE 65013
64981: LD_INT 20
64983: DOUBLE
64984: EQUAL
64985: IFTRUE 65013
64987: LD_INT 21
64989: DOUBLE
64990: EQUAL
64991: IFTRUE 65013
64993: LD_INT 23
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65013
64999: LD_INT 24
65001: DOUBLE
65002: EQUAL
65003: IFTRUE 65013
65005: LD_INT 25
65007: DOUBLE
65008: EQUAL
65009: IFTRUE 65013
65011: GO 65069
65013: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65014: LD_ADDR_VAR 0 9
65018: PUSH
65019: LD_VAR 0 35
65023: PUSH
65024: LD_VAR 0 36
65028: PUSH
65029: LD_VAR 0 37
65033: PUSH
65034: LD_VAR 0 38
65038: PUSH
65039: LD_VAR 0 39
65043: PUSH
65044: LD_VAR 0 40
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: PUSH
65057: LD_VAR 0 4
65061: PUSH
65062: LD_INT 1
65064: PLUS
65065: ARRAY
65066: ST_TO_ADDR
65067: GO 65434
65069: LD_INT 6
65071: DOUBLE
65072: EQUAL
65073: IFTRUE 65125
65075: LD_INT 7
65077: DOUBLE
65078: EQUAL
65079: IFTRUE 65125
65081: LD_INT 8
65083: DOUBLE
65084: EQUAL
65085: IFTRUE 65125
65087: LD_INT 13
65089: DOUBLE
65090: EQUAL
65091: IFTRUE 65125
65093: LD_INT 12
65095: DOUBLE
65096: EQUAL
65097: IFTRUE 65125
65099: LD_INT 15
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65125
65105: LD_INT 11
65107: DOUBLE
65108: EQUAL
65109: IFTRUE 65125
65111: LD_INT 14
65113: DOUBLE
65114: EQUAL
65115: IFTRUE 65125
65117: LD_INT 10
65119: DOUBLE
65120: EQUAL
65121: IFTRUE 65125
65123: GO 65181
65125: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65126: LD_ADDR_VAR 0 9
65130: PUSH
65131: LD_VAR 0 41
65135: PUSH
65136: LD_VAR 0 42
65140: PUSH
65141: LD_VAR 0 43
65145: PUSH
65146: LD_VAR 0 44
65150: PUSH
65151: LD_VAR 0 45
65155: PUSH
65156: LD_VAR 0 46
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: PUSH
65169: LD_VAR 0 4
65173: PUSH
65174: LD_INT 1
65176: PLUS
65177: ARRAY
65178: ST_TO_ADDR
65179: GO 65434
65181: LD_INT 36
65183: DOUBLE
65184: EQUAL
65185: IFTRUE 65189
65187: GO 65245
65189: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65190: LD_ADDR_VAR 0 9
65194: PUSH
65195: LD_VAR 0 47
65199: PUSH
65200: LD_VAR 0 48
65204: PUSH
65205: LD_VAR 0 49
65209: PUSH
65210: LD_VAR 0 50
65214: PUSH
65215: LD_VAR 0 51
65219: PUSH
65220: LD_VAR 0 52
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: PUSH
65233: LD_VAR 0 4
65237: PUSH
65238: LD_INT 1
65240: PLUS
65241: ARRAY
65242: ST_TO_ADDR
65243: GO 65434
65245: LD_INT 4
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65271
65251: LD_INT 5
65253: DOUBLE
65254: EQUAL
65255: IFTRUE 65271
65257: LD_INT 34
65259: DOUBLE
65260: EQUAL
65261: IFTRUE 65271
65263: LD_INT 37
65265: DOUBLE
65266: EQUAL
65267: IFTRUE 65271
65269: GO 65327
65271: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65272: LD_ADDR_VAR 0 9
65276: PUSH
65277: LD_VAR 0 53
65281: PUSH
65282: LD_VAR 0 54
65286: PUSH
65287: LD_VAR 0 55
65291: PUSH
65292: LD_VAR 0 56
65296: PUSH
65297: LD_VAR 0 57
65301: PUSH
65302: LD_VAR 0 58
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: LD_VAR 0 4
65319: PUSH
65320: LD_INT 1
65322: PLUS
65323: ARRAY
65324: ST_TO_ADDR
65325: GO 65434
65327: LD_INT 31
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65377
65333: LD_INT 32
65335: DOUBLE
65336: EQUAL
65337: IFTRUE 65377
65339: LD_INT 33
65341: DOUBLE
65342: EQUAL
65343: IFTRUE 65377
65345: LD_INT 27
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65377
65351: LD_INT 26
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65377
65357: LD_INT 28
65359: DOUBLE
65360: EQUAL
65361: IFTRUE 65377
65363: LD_INT 29
65365: DOUBLE
65366: EQUAL
65367: IFTRUE 65377
65369: LD_INT 30
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65377
65375: GO 65433
65377: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65378: LD_ADDR_VAR 0 9
65382: PUSH
65383: LD_VAR 0 59
65387: PUSH
65388: LD_VAR 0 60
65392: PUSH
65393: LD_VAR 0 61
65397: PUSH
65398: LD_VAR 0 62
65402: PUSH
65403: LD_VAR 0 63
65407: PUSH
65408: LD_VAR 0 64
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 4
65425: PUSH
65426: LD_INT 1
65428: PLUS
65429: ARRAY
65430: ST_TO_ADDR
65431: GO 65434
65433: POP
// temp_list2 = [ ] ;
65434: LD_ADDR_VAR 0 10
65438: PUSH
65439: EMPTY
65440: ST_TO_ADDR
// for i in temp_list do
65441: LD_ADDR_VAR 0 8
65445: PUSH
65446: LD_VAR 0 9
65450: PUSH
65451: FOR_IN
65452: IFFALSE 65504
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65454: LD_ADDR_VAR 0 10
65458: PUSH
65459: LD_VAR 0 10
65463: PUSH
65464: LD_VAR 0 8
65468: PUSH
65469: LD_INT 1
65471: ARRAY
65472: PUSH
65473: LD_VAR 0 2
65477: PLUS
65478: PUSH
65479: LD_VAR 0 8
65483: PUSH
65484: LD_INT 2
65486: ARRAY
65487: PUSH
65488: LD_VAR 0 3
65492: PLUS
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: ADD
65501: ST_TO_ADDR
65502: GO 65451
65504: POP
65505: POP
// result = temp_list2 ;
65506: LD_ADDR_VAR 0 7
65510: PUSH
65511: LD_VAR 0 10
65515: ST_TO_ADDR
// end ;
65516: LD_VAR 0 7
65520: RET
// export function EnemyInRange ( unit , dist ) ; begin
65521: LD_INT 0
65523: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65524: LD_ADDR_VAR 0 3
65528: PUSH
65529: LD_VAR 0 1
65533: PPUSH
65534: CALL_OW 255
65538: PPUSH
65539: LD_VAR 0 1
65543: PPUSH
65544: CALL_OW 250
65548: PPUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: CALL_OW 251
65558: PPUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: CALL 38917 0 4
65568: PUSH
65569: LD_INT 4
65571: ARRAY
65572: ST_TO_ADDR
// end ;
65573: LD_VAR 0 3
65577: RET
// export function PlayerSeeMe ( unit ) ; begin
65578: LD_INT 0
65580: PPUSH
// result := See ( your_side , unit ) ;
65581: LD_ADDR_VAR 0 2
65585: PUSH
65586: LD_OWVAR 2
65590: PPUSH
65591: LD_VAR 0 1
65595: PPUSH
65596: CALL_OW 292
65600: ST_TO_ADDR
// end ;
65601: LD_VAR 0 2
65605: RET
// export function ReverseDir ( unit ) ; begin
65606: LD_INT 0
65608: PPUSH
// if not unit then
65609: LD_VAR 0 1
65613: NOT
65614: IFFALSE 65618
// exit ;
65616: GO 65641
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65618: LD_ADDR_VAR 0 2
65622: PUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 254
65632: PUSH
65633: LD_INT 3
65635: PLUS
65636: PUSH
65637: LD_INT 6
65639: MOD
65640: ST_TO_ADDR
// end ;
65641: LD_VAR 0 2
65645: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65646: LD_INT 0
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
// if not hexes then
65653: LD_VAR 0 2
65657: NOT
65658: IFFALSE 65662
// exit ;
65660: GO 65810
// dist := 9999 ;
65662: LD_ADDR_VAR 0 5
65666: PUSH
65667: LD_INT 9999
65669: ST_TO_ADDR
// for i = 1 to hexes do
65670: LD_ADDR_VAR 0 4
65674: PUSH
65675: DOUBLE
65676: LD_INT 1
65678: DEC
65679: ST_TO_ADDR
65680: LD_VAR 0 2
65684: PUSH
65685: FOR_TO
65686: IFFALSE 65798
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65688: LD_VAR 0 1
65692: PPUSH
65693: LD_VAR 0 2
65697: PUSH
65698: LD_VAR 0 4
65702: ARRAY
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PPUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_VAR 0 4
65717: ARRAY
65718: PUSH
65719: LD_INT 2
65721: ARRAY
65722: PPUSH
65723: CALL_OW 297
65727: PUSH
65728: LD_VAR 0 5
65732: LESS
65733: IFFALSE 65796
// begin hex := hexes [ i ] ;
65735: LD_ADDR_VAR 0 7
65739: PUSH
65740: LD_VAR 0 2
65744: PUSH
65745: LD_VAR 0 4
65749: ARRAY
65750: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65751: LD_ADDR_VAR 0 5
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 2
65765: PUSH
65766: LD_VAR 0 4
65770: ARRAY
65771: PUSH
65772: LD_INT 1
65774: ARRAY
65775: PPUSH
65776: LD_VAR 0 2
65780: PUSH
65781: LD_VAR 0 4
65785: ARRAY
65786: PUSH
65787: LD_INT 2
65789: ARRAY
65790: PPUSH
65791: CALL_OW 297
65795: ST_TO_ADDR
// end ; end ;
65796: GO 65685
65798: POP
65799: POP
// result := hex ;
65800: LD_ADDR_VAR 0 3
65804: PUSH
65805: LD_VAR 0 7
65809: ST_TO_ADDR
// end ;
65810: LD_VAR 0 3
65814: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65815: LD_INT 0
65817: PPUSH
65818: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65819: LD_VAR 0 1
65823: NOT
65824: PUSH
65825: LD_VAR 0 1
65829: PUSH
65830: LD_INT 21
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 23
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PPUSH
65854: CALL_OW 69
65858: IN
65859: NOT
65860: OR
65861: IFFALSE 65865
// exit ;
65863: GO 65912
// for i = 1 to 3 do
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: DOUBLE
65871: LD_INT 1
65873: DEC
65874: ST_TO_ADDR
65875: LD_INT 3
65877: PUSH
65878: FOR_TO
65879: IFFALSE 65910
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65881: LD_VAR 0 1
65885: PPUSH
65886: CALL_OW 250
65890: PPUSH
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL_OW 251
65900: PPUSH
65901: LD_INT 1
65903: PPUSH
65904: CALL_OW 453
65908: GO 65878
65910: POP
65911: POP
// end ;
65912: LD_VAR 0 2
65916: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65917: LD_INT 0
65919: PPUSH
65920: PPUSH
65921: PPUSH
65922: PPUSH
65923: PPUSH
65924: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65925: LD_VAR 0 1
65929: NOT
65930: PUSH
65931: LD_VAR 0 2
65935: NOT
65936: OR
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL_OW 314
65947: OR
65948: IFFALSE 65952
// exit ;
65950: GO 66393
// x := GetX ( enemy_unit ) ;
65952: LD_ADDR_VAR 0 7
65956: PUSH
65957: LD_VAR 0 2
65961: PPUSH
65962: CALL_OW 250
65966: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65967: LD_ADDR_VAR 0 8
65971: PUSH
65972: LD_VAR 0 2
65976: PPUSH
65977: CALL_OW 251
65981: ST_TO_ADDR
// if not x or not y then
65982: LD_VAR 0 7
65986: NOT
65987: PUSH
65988: LD_VAR 0 8
65992: NOT
65993: OR
65994: IFFALSE 65998
// exit ;
65996: GO 66393
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65998: LD_ADDR_VAR 0 6
66002: PUSH
66003: LD_VAR 0 7
66007: PPUSH
66008: LD_INT 0
66010: PPUSH
66011: LD_INT 4
66013: PPUSH
66014: CALL_OW 272
66018: PUSH
66019: LD_VAR 0 8
66023: PPUSH
66024: LD_INT 0
66026: PPUSH
66027: LD_INT 4
66029: PPUSH
66030: CALL_OW 273
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_VAR 0 7
66043: PPUSH
66044: LD_INT 1
66046: PPUSH
66047: LD_INT 4
66049: PPUSH
66050: CALL_OW 272
66054: PUSH
66055: LD_VAR 0 8
66059: PPUSH
66060: LD_INT 1
66062: PPUSH
66063: LD_INT 4
66065: PPUSH
66066: CALL_OW 273
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_VAR 0 7
66079: PPUSH
66080: LD_INT 2
66082: PPUSH
66083: LD_INT 4
66085: PPUSH
66086: CALL_OW 272
66090: PUSH
66091: LD_VAR 0 8
66095: PPUSH
66096: LD_INT 2
66098: PPUSH
66099: LD_INT 4
66101: PPUSH
66102: CALL_OW 273
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_VAR 0 7
66115: PPUSH
66116: LD_INT 3
66118: PPUSH
66119: LD_INT 4
66121: PPUSH
66122: CALL_OW 272
66126: PUSH
66127: LD_VAR 0 8
66131: PPUSH
66132: LD_INT 3
66134: PPUSH
66135: LD_INT 4
66137: PPUSH
66138: CALL_OW 273
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 7
66151: PPUSH
66152: LD_INT 4
66154: PPUSH
66155: LD_INT 4
66157: PPUSH
66158: CALL_OW 272
66162: PUSH
66163: LD_VAR 0 8
66167: PPUSH
66168: LD_INT 4
66170: PPUSH
66171: LD_INT 4
66173: PPUSH
66174: CALL_OW 273
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_VAR 0 7
66187: PPUSH
66188: LD_INT 5
66190: PPUSH
66191: LD_INT 4
66193: PPUSH
66194: CALL_OW 272
66198: PUSH
66199: LD_VAR 0 8
66203: PPUSH
66204: LD_INT 5
66206: PPUSH
66207: LD_INT 4
66209: PPUSH
66210: CALL_OW 273
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// for i = tmp downto 1 do
66227: LD_ADDR_VAR 0 4
66231: PUSH
66232: DOUBLE
66233: LD_VAR 0 6
66237: INC
66238: ST_TO_ADDR
66239: LD_INT 1
66241: PUSH
66242: FOR_DOWNTO
66243: IFFALSE 66344
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66245: LD_VAR 0 6
66249: PUSH
66250: LD_VAR 0 4
66254: ARRAY
66255: PUSH
66256: LD_INT 1
66258: ARRAY
66259: PPUSH
66260: LD_VAR 0 6
66264: PUSH
66265: LD_VAR 0 4
66269: ARRAY
66270: PUSH
66271: LD_INT 2
66273: ARRAY
66274: PPUSH
66275: CALL_OW 488
66279: NOT
66280: PUSH
66281: LD_VAR 0 6
66285: PUSH
66286: LD_VAR 0 4
66290: ARRAY
66291: PUSH
66292: LD_INT 1
66294: ARRAY
66295: PPUSH
66296: LD_VAR 0 6
66300: PUSH
66301: LD_VAR 0 4
66305: ARRAY
66306: PUSH
66307: LD_INT 2
66309: ARRAY
66310: PPUSH
66311: CALL_OW 428
66315: PUSH
66316: LD_INT 0
66318: NONEQUAL
66319: OR
66320: IFFALSE 66342
// tmp := Delete ( tmp , i ) ;
66322: LD_ADDR_VAR 0 6
66326: PUSH
66327: LD_VAR 0 6
66331: PPUSH
66332: LD_VAR 0 4
66336: PPUSH
66337: CALL_OW 3
66341: ST_TO_ADDR
66342: GO 66242
66344: POP
66345: POP
// j := GetClosestHex ( unit , tmp ) ;
66346: LD_ADDR_VAR 0 5
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 6
66360: PPUSH
66361: CALL 65646 0 2
66365: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66366: LD_VAR 0 1
66370: PPUSH
66371: LD_VAR 0 5
66375: PUSH
66376: LD_INT 1
66378: ARRAY
66379: PPUSH
66380: LD_VAR 0 5
66384: PUSH
66385: LD_INT 2
66387: ARRAY
66388: PPUSH
66389: CALL_OW 111
// end ;
66393: LD_VAR 0 3
66397: RET
// export function PrepareApemanSoldier ( ) ; begin
66398: LD_INT 0
66400: PPUSH
// uc_nation := 0 ;
66401: LD_ADDR_OWVAR 21
66405: PUSH
66406: LD_INT 0
66408: ST_TO_ADDR
// hc_sex := sex_male ;
66409: LD_ADDR_OWVAR 27
66413: PUSH
66414: LD_INT 1
66416: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66417: LD_ADDR_OWVAR 28
66421: PUSH
66422: LD_INT 15
66424: ST_TO_ADDR
// hc_gallery :=  ;
66425: LD_ADDR_OWVAR 33
66429: PUSH
66430: LD_STRING 
66432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66433: LD_ADDR_OWVAR 31
66437: PUSH
66438: LD_INT 0
66440: PPUSH
66441: LD_INT 3
66443: PPUSH
66444: CALL_OW 12
66448: PUSH
66449: LD_INT 0
66451: PPUSH
66452: LD_INT 3
66454: PPUSH
66455: CALL_OW 12
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// end ;
66472: LD_VAR 0 1
66476: RET
// export function PrepareApemanEngineer ( ) ; begin
66477: LD_INT 0
66479: PPUSH
// uc_nation := 0 ;
66480: LD_ADDR_OWVAR 21
66484: PUSH
66485: LD_INT 0
66487: ST_TO_ADDR
// hc_sex := sex_male ;
66488: LD_ADDR_OWVAR 27
66492: PUSH
66493: LD_INT 1
66495: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66496: LD_ADDR_OWVAR 28
66500: PUSH
66501: LD_INT 16
66503: ST_TO_ADDR
// hc_gallery :=  ;
66504: LD_ADDR_OWVAR 33
66508: PUSH
66509: LD_STRING 
66511: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66512: LD_ADDR_OWVAR 31
66516: PUSH
66517: LD_INT 0
66519: PPUSH
66520: LD_INT 3
66522: PPUSH
66523: CALL_OW 12
66527: PUSH
66528: LD_INT 0
66530: PPUSH
66531: LD_INT 3
66533: PPUSH
66534: CALL_OW 12
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 1
66555: RET
// export function PrepareApeman ( agressivity ) ; begin
66556: LD_INT 0
66558: PPUSH
// uc_side := 0 ;
66559: LD_ADDR_OWVAR 20
66563: PUSH
66564: LD_INT 0
66566: ST_TO_ADDR
// uc_nation := 0 ;
66567: LD_ADDR_OWVAR 21
66571: PUSH
66572: LD_INT 0
66574: ST_TO_ADDR
// hc_sex := sex_male ;
66575: LD_ADDR_OWVAR 27
66579: PUSH
66580: LD_INT 1
66582: ST_TO_ADDR
// hc_class := class_apeman ;
66583: LD_ADDR_OWVAR 28
66587: PUSH
66588: LD_INT 12
66590: ST_TO_ADDR
// hc_gallery :=  ;
66591: LD_ADDR_OWVAR 33
66595: PUSH
66596: LD_STRING 
66598: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66599: LD_ADDR_OWVAR 35
66603: PUSH
66604: LD_VAR 0 1
66608: NEG
66609: PPUSH
66610: LD_VAR 0 1
66614: PPUSH
66615: CALL_OW 12
66619: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66620: LD_ADDR_OWVAR 31
66624: PUSH
66625: LD_INT 0
66627: PPUSH
66628: LD_INT 3
66630: PPUSH
66631: CALL_OW 12
66635: PUSH
66636: LD_INT 0
66638: PPUSH
66639: LD_INT 3
66641: PPUSH
66642: CALL_OW 12
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// end ;
66659: LD_VAR 0 2
66663: RET
// export function PrepareTiger ( agressivity ) ; begin
66664: LD_INT 0
66666: PPUSH
// uc_side := 0 ;
66667: LD_ADDR_OWVAR 20
66671: PUSH
66672: LD_INT 0
66674: ST_TO_ADDR
// uc_nation := 0 ;
66675: LD_ADDR_OWVAR 21
66679: PUSH
66680: LD_INT 0
66682: ST_TO_ADDR
// hc_class := class_tiger ;
66683: LD_ADDR_OWVAR 28
66687: PUSH
66688: LD_INT 14
66690: ST_TO_ADDR
// hc_gallery :=  ;
66691: LD_ADDR_OWVAR 33
66695: PUSH
66696: LD_STRING 
66698: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66699: LD_ADDR_OWVAR 35
66703: PUSH
66704: LD_VAR 0 1
66708: NEG
66709: PPUSH
66710: LD_VAR 0 1
66714: PPUSH
66715: CALL_OW 12
66719: ST_TO_ADDR
// end ;
66720: LD_VAR 0 2
66724: RET
// export function PrepareEnchidna ( ) ; begin
66725: LD_INT 0
66727: PPUSH
// uc_side := 0 ;
66728: LD_ADDR_OWVAR 20
66732: PUSH
66733: LD_INT 0
66735: ST_TO_ADDR
// uc_nation := 0 ;
66736: LD_ADDR_OWVAR 21
66740: PUSH
66741: LD_INT 0
66743: ST_TO_ADDR
// hc_class := class_baggie ;
66744: LD_ADDR_OWVAR 28
66748: PUSH
66749: LD_INT 13
66751: ST_TO_ADDR
// hc_gallery :=  ;
66752: LD_ADDR_OWVAR 33
66756: PUSH
66757: LD_STRING 
66759: ST_TO_ADDR
// end ;
66760: LD_VAR 0 1
66764: RET
// export function PrepareFrog ( ) ; begin
66765: LD_INT 0
66767: PPUSH
// uc_side := 0 ;
66768: LD_ADDR_OWVAR 20
66772: PUSH
66773: LD_INT 0
66775: ST_TO_ADDR
// uc_nation := 0 ;
66776: LD_ADDR_OWVAR 21
66780: PUSH
66781: LD_INT 0
66783: ST_TO_ADDR
// hc_class := class_frog ;
66784: LD_ADDR_OWVAR 28
66788: PUSH
66789: LD_INT 19
66791: ST_TO_ADDR
// hc_gallery :=  ;
66792: LD_ADDR_OWVAR 33
66796: PUSH
66797: LD_STRING 
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 1
66804: RET
// export function PrepareFish ( ) ; begin
66805: LD_INT 0
66807: PPUSH
// uc_side := 0 ;
66808: LD_ADDR_OWVAR 20
66812: PUSH
66813: LD_INT 0
66815: ST_TO_ADDR
// uc_nation := 0 ;
66816: LD_ADDR_OWVAR 21
66820: PUSH
66821: LD_INT 0
66823: ST_TO_ADDR
// hc_class := class_fish ;
66824: LD_ADDR_OWVAR 28
66828: PUSH
66829: LD_INT 20
66831: ST_TO_ADDR
// hc_gallery :=  ;
66832: LD_ADDR_OWVAR 33
66836: PUSH
66837: LD_STRING 
66839: ST_TO_ADDR
// end ;
66840: LD_VAR 0 1
66844: RET
// export function PrepareBird ( ) ; begin
66845: LD_INT 0
66847: PPUSH
// uc_side := 0 ;
66848: LD_ADDR_OWVAR 20
66852: PUSH
66853: LD_INT 0
66855: ST_TO_ADDR
// uc_nation := 0 ;
66856: LD_ADDR_OWVAR 21
66860: PUSH
66861: LD_INT 0
66863: ST_TO_ADDR
// hc_class := class_phororhacos ;
66864: LD_ADDR_OWVAR 28
66868: PUSH
66869: LD_INT 18
66871: ST_TO_ADDR
// hc_gallery :=  ;
66872: LD_ADDR_OWVAR 33
66876: PUSH
66877: LD_STRING 
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 1
66884: RET
// export function PrepareHorse ( ) ; begin
66885: LD_INT 0
66887: PPUSH
// uc_side := 0 ;
66888: LD_ADDR_OWVAR 20
66892: PUSH
66893: LD_INT 0
66895: ST_TO_ADDR
// uc_nation := 0 ;
66896: LD_ADDR_OWVAR 21
66900: PUSH
66901: LD_INT 0
66903: ST_TO_ADDR
// hc_class := class_horse ;
66904: LD_ADDR_OWVAR 28
66908: PUSH
66909: LD_INT 21
66911: ST_TO_ADDR
// hc_gallery :=  ;
66912: LD_ADDR_OWVAR 33
66916: PUSH
66917: LD_STRING 
66919: ST_TO_ADDR
// end ;
66920: LD_VAR 0 1
66924: RET
// export function PrepareMastodont ( ) ; begin
66925: LD_INT 0
66927: PPUSH
// uc_side := 0 ;
66928: LD_ADDR_OWVAR 20
66932: PUSH
66933: LD_INT 0
66935: ST_TO_ADDR
// uc_nation := 0 ;
66936: LD_ADDR_OWVAR 21
66940: PUSH
66941: LD_INT 0
66943: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66944: LD_ADDR_OWVAR 37
66948: PUSH
66949: LD_INT 31
66951: ST_TO_ADDR
// vc_control := control_rider ;
66952: LD_ADDR_OWVAR 38
66956: PUSH
66957: LD_INT 4
66959: ST_TO_ADDR
// end ;
66960: LD_VAR 0 1
66964: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66965: LD_INT 0
66967: PPUSH
66968: PPUSH
66969: PPUSH
// uc_side = 0 ;
66970: LD_ADDR_OWVAR 20
66974: PUSH
66975: LD_INT 0
66977: ST_TO_ADDR
// uc_nation = 0 ;
66978: LD_ADDR_OWVAR 21
66982: PUSH
66983: LD_INT 0
66985: ST_TO_ADDR
// InitHc_All ( ) ;
66986: CALL_OW 584
// InitVc ;
66990: CALL_OW 20
// if mastodonts then
66994: LD_VAR 0 6
66998: IFFALSE 67065
// for i = 1 to mastodonts do
67000: LD_ADDR_VAR 0 11
67004: PUSH
67005: DOUBLE
67006: LD_INT 1
67008: DEC
67009: ST_TO_ADDR
67010: LD_VAR 0 6
67014: PUSH
67015: FOR_TO
67016: IFFALSE 67063
// begin vc_chassis := 31 ;
67018: LD_ADDR_OWVAR 37
67022: PUSH
67023: LD_INT 31
67025: ST_TO_ADDR
// vc_control := control_rider ;
67026: LD_ADDR_OWVAR 38
67030: PUSH
67031: LD_INT 4
67033: ST_TO_ADDR
// animal := CreateVehicle ;
67034: LD_ADDR_VAR 0 12
67038: PUSH
67039: CALL_OW 45
67043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67044: LD_VAR 0 12
67048: PPUSH
67049: LD_VAR 0 8
67053: PPUSH
67054: LD_INT 0
67056: PPUSH
67057: CALL 69200 0 3
// end ;
67061: GO 67015
67063: POP
67064: POP
// if horses then
67065: LD_VAR 0 5
67069: IFFALSE 67136
// for i = 1 to horses do
67071: LD_ADDR_VAR 0 11
67075: PUSH
67076: DOUBLE
67077: LD_INT 1
67079: DEC
67080: ST_TO_ADDR
67081: LD_VAR 0 5
67085: PUSH
67086: FOR_TO
67087: IFFALSE 67134
// begin hc_class := 21 ;
67089: LD_ADDR_OWVAR 28
67093: PUSH
67094: LD_INT 21
67096: ST_TO_ADDR
// hc_gallery :=  ;
67097: LD_ADDR_OWVAR 33
67101: PUSH
67102: LD_STRING 
67104: ST_TO_ADDR
// animal := CreateHuman ;
67105: LD_ADDR_VAR 0 12
67109: PUSH
67110: CALL_OW 44
67114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67115: LD_VAR 0 12
67119: PPUSH
67120: LD_VAR 0 8
67124: PPUSH
67125: LD_INT 0
67127: PPUSH
67128: CALL 69200 0 3
// end ;
67132: GO 67086
67134: POP
67135: POP
// if birds then
67136: LD_VAR 0 1
67140: IFFALSE 67207
// for i = 1 to birds do
67142: LD_ADDR_VAR 0 11
67146: PUSH
67147: DOUBLE
67148: LD_INT 1
67150: DEC
67151: ST_TO_ADDR
67152: LD_VAR 0 1
67156: PUSH
67157: FOR_TO
67158: IFFALSE 67205
// begin hc_class = 18 ;
67160: LD_ADDR_OWVAR 28
67164: PUSH
67165: LD_INT 18
67167: ST_TO_ADDR
// hc_gallery =  ;
67168: LD_ADDR_OWVAR 33
67172: PUSH
67173: LD_STRING 
67175: ST_TO_ADDR
// animal := CreateHuman ;
67176: LD_ADDR_VAR 0 12
67180: PUSH
67181: CALL_OW 44
67185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67186: LD_VAR 0 12
67190: PPUSH
67191: LD_VAR 0 8
67195: PPUSH
67196: LD_INT 0
67198: PPUSH
67199: CALL 69200 0 3
// end ;
67203: GO 67157
67205: POP
67206: POP
// if tigers then
67207: LD_VAR 0 2
67211: IFFALSE 67295
// for i = 1 to tigers do
67213: LD_ADDR_VAR 0 11
67217: PUSH
67218: DOUBLE
67219: LD_INT 1
67221: DEC
67222: ST_TO_ADDR
67223: LD_VAR 0 2
67227: PUSH
67228: FOR_TO
67229: IFFALSE 67293
// begin hc_class = class_tiger ;
67231: LD_ADDR_OWVAR 28
67235: PUSH
67236: LD_INT 14
67238: ST_TO_ADDR
// hc_gallery =  ;
67239: LD_ADDR_OWVAR 33
67243: PUSH
67244: LD_STRING 
67246: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67247: LD_ADDR_OWVAR 35
67251: PUSH
67252: LD_INT 7
67254: NEG
67255: PPUSH
67256: LD_INT 7
67258: PPUSH
67259: CALL_OW 12
67263: ST_TO_ADDR
// animal := CreateHuman ;
67264: LD_ADDR_VAR 0 12
67268: PUSH
67269: CALL_OW 44
67273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67274: LD_VAR 0 12
67278: PPUSH
67279: LD_VAR 0 8
67283: PPUSH
67284: LD_INT 0
67286: PPUSH
67287: CALL 69200 0 3
// end ;
67291: GO 67228
67293: POP
67294: POP
// if apemans then
67295: LD_VAR 0 3
67299: IFFALSE 67422
// for i = 1 to apemans do
67301: LD_ADDR_VAR 0 11
67305: PUSH
67306: DOUBLE
67307: LD_INT 1
67309: DEC
67310: ST_TO_ADDR
67311: LD_VAR 0 3
67315: PUSH
67316: FOR_TO
67317: IFFALSE 67420
// begin hc_class = class_apeman ;
67319: LD_ADDR_OWVAR 28
67323: PUSH
67324: LD_INT 12
67326: ST_TO_ADDR
// hc_gallery =  ;
67327: LD_ADDR_OWVAR 33
67331: PUSH
67332: LD_STRING 
67334: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67335: LD_ADDR_OWVAR 35
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PPUSH
67344: LD_INT 2
67346: PPUSH
67347: CALL_OW 12
67351: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67352: LD_ADDR_OWVAR 31
67356: PUSH
67357: LD_INT 1
67359: PPUSH
67360: LD_INT 3
67362: PPUSH
67363: CALL_OW 12
67367: PUSH
67368: LD_INT 1
67370: PPUSH
67371: LD_INT 3
67373: PPUSH
67374: CALL_OW 12
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: ST_TO_ADDR
// animal := CreateHuman ;
67391: LD_ADDR_VAR 0 12
67395: PUSH
67396: CALL_OW 44
67400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67401: LD_VAR 0 12
67405: PPUSH
67406: LD_VAR 0 8
67410: PPUSH
67411: LD_INT 0
67413: PPUSH
67414: CALL 69200 0 3
// end ;
67418: GO 67316
67420: POP
67421: POP
// if enchidnas then
67422: LD_VAR 0 4
67426: IFFALSE 67493
// for i = 1 to enchidnas do
67428: LD_ADDR_VAR 0 11
67432: PUSH
67433: DOUBLE
67434: LD_INT 1
67436: DEC
67437: ST_TO_ADDR
67438: LD_VAR 0 4
67442: PUSH
67443: FOR_TO
67444: IFFALSE 67491
// begin hc_class = 13 ;
67446: LD_ADDR_OWVAR 28
67450: PUSH
67451: LD_INT 13
67453: ST_TO_ADDR
// hc_gallery =  ;
67454: LD_ADDR_OWVAR 33
67458: PUSH
67459: LD_STRING 
67461: ST_TO_ADDR
// animal := CreateHuman ;
67462: LD_ADDR_VAR 0 12
67466: PUSH
67467: CALL_OW 44
67471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67472: LD_VAR 0 12
67476: PPUSH
67477: LD_VAR 0 8
67481: PPUSH
67482: LD_INT 0
67484: PPUSH
67485: CALL 69200 0 3
// end ;
67489: GO 67443
67491: POP
67492: POP
// if fishes then
67493: LD_VAR 0 7
67497: IFFALSE 67564
// for i = 1 to fishes do
67499: LD_ADDR_VAR 0 11
67503: PUSH
67504: DOUBLE
67505: LD_INT 1
67507: DEC
67508: ST_TO_ADDR
67509: LD_VAR 0 7
67513: PUSH
67514: FOR_TO
67515: IFFALSE 67562
// begin hc_class = 20 ;
67517: LD_ADDR_OWVAR 28
67521: PUSH
67522: LD_INT 20
67524: ST_TO_ADDR
// hc_gallery =  ;
67525: LD_ADDR_OWVAR 33
67529: PUSH
67530: LD_STRING 
67532: ST_TO_ADDR
// animal := CreateHuman ;
67533: LD_ADDR_VAR 0 12
67537: PUSH
67538: CALL_OW 44
67542: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67543: LD_VAR 0 12
67547: PPUSH
67548: LD_VAR 0 9
67552: PPUSH
67553: LD_INT 0
67555: PPUSH
67556: CALL 69200 0 3
// end ;
67560: GO 67514
67562: POP
67563: POP
// end ;
67564: LD_VAR 0 10
67568: RET
// export function WantHeal ( sci , unit ) ; begin
67569: LD_INT 0
67571: PPUSH
// if GetTaskList ( sci ) > 0 then
67572: LD_VAR 0 1
67576: PPUSH
67577: CALL_OW 437
67581: PUSH
67582: LD_INT 0
67584: GREATER
67585: IFFALSE 67655
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67587: LD_VAR 0 1
67591: PPUSH
67592: CALL_OW 437
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PUSH
67601: LD_INT 1
67603: ARRAY
67604: PUSH
67605: LD_STRING l
67607: EQUAL
67608: PUSH
67609: LD_VAR 0 1
67613: PPUSH
67614: CALL_OW 437
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PUSH
67623: LD_INT 4
67625: ARRAY
67626: PUSH
67627: LD_VAR 0 2
67631: EQUAL
67632: AND
67633: IFFALSE 67645
// result := true else
67635: LD_ADDR_VAR 0 3
67639: PUSH
67640: LD_INT 1
67642: ST_TO_ADDR
67643: GO 67653
// result := false ;
67645: LD_ADDR_VAR 0 3
67649: PUSH
67650: LD_INT 0
67652: ST_TO_ADDR
// end else
67653: GO 67663
// result := false ;
67655: LD_ADDR_VAR 0 3
67659: PUSH
67660: LD_INT 0
67662: ST_TO_ADDR
// end ;
67663: LD_VAR 0 3
67667: RET
// export function HealTarget ( sci ) ; begin
67668: LD_INT 0
67670: PPUSH
// if not sci then
67671: LD_VAR 0 1
67675: NOT
67676: IFFALSE 67680
// exit ;
67678: GO 67745
// result := 0 ;
67680: LD_ADDR_VAR 0 2
67684: PUSH
67685: LD_INT 0
67687: ST_TO_ADDR
// if GetTaskList ( sci ) then
67688: LD_VAR 0 1
67692: PPUSH
67693: CALL_OW 437
67697: IFFALSE 67745
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67699: LD_VAR 0 1
67703: PPUSH
67704: CALL_OW 437
67708: PUSH
67709: LD_INT 1
67711: ARRAY
67712: PUSH
67713: LD_INT 1
67715: ARRAY
67716: PUSH
67717: LD_STRING l
67719: EQUAL
67720: IFFALSE 67745
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67722: LD_ADDR_VAR 0 2
67726: PUSH
67727: LD_VAR 0 1
67731: PPUSH
67732: CALL_OW 437
67736: PUSH
67737: LD_INT 1
67739: ARRAY
67740: PUSH
67741: LD_INT 4
67743: ARRAY
67744: ST_TO_ADDR
// end ;
67745: LD_VAR 0 2
67749: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67750: LD_INT 0
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
// if not base_units then
67756: LD_VAR 0 1
67760: NOT
67761: IFFALSE 67765
// exit ;
67763: GO 67852
// result := false ;
67765: LD_ADDR_VAR 0 2
67769: PUSH
67770: LD_INT 0
67772: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67773: LD_ADDR_VAR 0 5
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: LD_INT 21
67785: PUSH
67786: LD_INT 3
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PPUSH
67793: CALL_OW 72
67797: ST_TO_ADDR
// if not tmp then
67798: LD_VAR 0 5
67802: NOT
67803: IFFALSE 67807
// exit ;
67805: GO 67852
// for i in tmp do
67807: LD_ADDR_VAR 0 3
67811: PUSH
67812: LD_VAR 0 5
67816: PUSH
67817: FOR_IN
67818: IFFALSE 67850
// begin result := EnemyInRange ( i , 22 ) ;
67820: LD_ADDR_VAR 0 2
67824: PUSH
67825: LD_VAR 0 3
67829: PPUSH
67830: LD_INT 22
67832: PPUSH
67833: CALL 65521 0 2
67837: ST_TO_ADDR
// if result then
67838: LD_VAR 0 2
67842: IFFALSE 67848
// exit ;
67844: POP
67845: POP
67846: GO 67852
// end ;
67848: GO 67817
67850: POP
67851: POP
// end ;
67852: LD_VAR 0 2
67856: RET
// export function FilterByTag ( units , tag ) ; begin
67857: LD_INT 0
67859: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67860: LD_ADDR_VAR 0 3
67864: PUSH
67865: LD_VAR 0 1
67869: PPUSH
67870: LD_INT 120
67872: PUSH
67873: LD_VAR 0 2
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PPUSH
67882: CALL_OW 72
67886: ST_TO_ADDR
// end ;
67887: LD_VAR 0 3
67891: RET
// export function IsDriver ( un ) ; begin
67892: LD_INT 0
67894: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67895: LD_ADDR_VAR 0 2
67899: PUSH
67900: LD_VAR 0 1
67904: PUSH
67905: LD_INT 55
67907: PUSH
67908: EMPTY
67909: LIST
67910: PPUSH
67911: CALL_OW 69
67915: IN
67916: ST_TO_ADDR
// end ;
67917: LD_VAR 0 2
67921: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67922: LD_INT 0
67924: PPUSH
67925: PPUSH
// list := [ ] ;
67926: LD_ADDR_VAR 0 5
67930: PUSH
67931: EMPTY
67932: ST_TO_ADDR
// case d of 0 :
67933: LD_VAR 0 3
67937: PUSH
67938: LD_INT 0
67940: DOUBLE
67941: EQUAL
67942: IFTRUE 67946
67944: GO 68079
67946: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67947: LD_ADDR_VAR 0 5
67951: PUSH
67952: LD_VAR 0 1
67956: PUSH
67957: LD_INT 4
67959: MINUS
67960: PUSH
67961: LD_VAR 0 2
67965: PUSH
67966: LD_INT 4
67968: MINUS
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: PUSH
67978: LD_VAR 0 1
67982: PUSH
67983: LD_INT 3
67985: MINUS
67986: PUSH
67987: LD_VAR 0 2
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: PUSH
68000: LD_VAR 0 1
68004: PUSH
68005: LD_INT 4
68007: PLUS
68008: PUSH
68009: LD_VAR 0 2
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: LIST
68021: PUSH
68022: LD_VAR 0 1
68026: PUSH
68027: LD_INT 3
68029: PLUS
68030: PUSH
68031: LD_VAR 0 2
68035: PUSH
68036: LD_INT 3
68038: PLUS
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 4
68060: PLUS
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: ST_TO_ADDR
// end ; 1 :
68077: GO 68777
68079: LD_INT 1
68081: DOUBLE
68082: EQUAL
68083: IFTRUE 68087
68085: GO 68220
68087: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68088: LD_ADDR_VAR 0 5
68092: PUSH
68093: LD_VAR 0 1
68097: PUSH
68098: LD_VAR 0 2
68102: PUSH
68103: LD_INT 4
68105: MINUS
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: PUSH
68115: LD_VAR 0 1
68119: PUSH
68120: LD_INT 3
68122: MINUS
68123: PUSH
68124: LD_VAR 0 2
68128: PUSH
68129: LD_INT 3
68131: MINUS
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: PUSH
68141: LD_VAR 0 1
68145: PUSH
68146: LD_INT 4
68148: MINUS
68149: PUSH
68150: LD_VAR 0 2
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: PUSH
68163: LD_VAR 0 1
68167: PUSH
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 3
68175: PLUS
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: LIST
68184: PUSH
68185: LD_VAR 0 1
68189: PUSH
68190: LD_INT 4
68192: PLUS
68193: PUSH
68194: LD_VAR 0 2
68198: PUSH
68199: LD_INT 4
68201: PLUS
68202: PUSH
68203: LD_INT 5
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: LIST
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// end ; 2 :
68218: GO 68777
68220: LD_INT 2
68222: DOUBLE
68223: EQUAL
68224: IFTRUE 68228
68226: GO 68357
68228: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68229: LD_ADDR_VAR 0 5
68233: PUSH
68234: LD_VAR 0 1
68238: PUSH
68239: LD_VAR 0 2
68243: PUSH
68244: LD_INT 3
68246: MINUS
68247: PUSH
68248: LD_INT 3
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: PUSH
68256: LD_VAR 0 1
68260: PUSH
68261: LD_INT 4
68263: PLUS
68264: PUSH
68265: LD_VAR 0 2
68269: PUSH
68270: LD_INT 4
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: PUSH
68278: LD_VAR 0 1
68282: PUSH
68283: LD_VAR 0 2
68287: PUSH
68288: LD_INT 4
68290: PLUS
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: PUSH
68300: LD_VAR 0 1
68304: PUSH
68305: LD_INT 3
68307: MINUS
68308: PUSH
68309: LD_VAR 0 2
68313: PUSH
68314: LD_INT 1
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: PUSH
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 4
68329: MINUS
68330: PUSH
68331: LD_VAR 0 2
68335: PUSH
68336: LD_INT 4
68338: MINUS
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: ST_TO_ADDR
// end ; 3 :
68355: GO 68777
68357: LD_INT 3
68359: DOUBLE
68360: EQUAL
68361: IFTRUE 68365
68363: GO 68498
68365: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68366: LD_ADDR_VAR 0 5
68370: PUSH
68371: LD_VAR 0 1
68375: PUSH
68376: LD_INT 3
68378: PLUS
68379: PUSH
68380: LD_VAR 0 2
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: PUSH
68393: LD_VAR 0 1
68397: PUSH
68398: LD_INT 4
68400: PLUS
68401: PUSH
68402: LD_VAR 0 2
68406: PUSH
68407: LD_INT 4
68409: PLUS
68410: PUSH
68411: LD_INT 5
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: PUSH
68419: LD_VAR 0 1
68423: PUSH
68424: LD_INT 4
68426: MINUS
68427: PUSH
68428: LD_VAR 0 2
68432: PUSH
68433: LD_INT 1
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: LIST
68440: PUSH
68441: LD_VAR 0 1
68445: PUSH
68446: LD_VAR 0 2
68450: PUSH
68451: LD_INT 4
68453: MINUS
68454: PUSH
68455: LD_INT 3
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: LIST
68462: PUSH
68463: LD_VAR 0 1
68467: PUSH
68468: LD_INT 3
68470: MINUS
68471: PUSH
68472: LD_VAR 0 2
68476: PUSH
68477: LD_INT 3
68479: MINUS
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: LIST
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// end ; 4 :
68496: GO 68777
68498: LD_INT 4
68500: DOUBLE
68501: EQUAL
68502: IFTRUE 68506
68504: GO 68639
68506: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68507: LD_ADDR_VAR 0 5
68511: PUSH
68512: LD_VAR 0 1
68516: PUSH
68517: LD_VAR 0 2
68521: PUSH
68522: LD_INT 4
68524: PLUS
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: PUSH
68534: LD_VAR 0 1
68538: PUSH
68539: LD_INT 3
68541: PLUS
68542: PUSH
68543: LD_VAR 0 2
68547: PUSH
68548: LD_INT 3
68550: PLUS
68551: PUSH
68552: LD_INT 5
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: PUSH
68560: LD_VAR 0 1
68564: PUSH
68565: LD_INT 4
68567: PLUS
68568: PUSH
68569: LD_VAR 0 2
68573: PUSH
68574: LD_INT 4
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: LIST
68581: PUSH
68582: LD_VAR 0 1
68586: PUSH
68587: LD_VAR 0 2
68591: PUSH
68592: LD_INT 3
68594: MINUS
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: PUSH
68604: LD_VAR 0 1
68608: PUSH
68609: LD_INT 4
68611: MINUS
68612: PUSH
68613: LD_VAR 0 2
68617: PUSH
68618: LD_INT 4
68620: MINUS
68621: PUSH
68622: LD_INT 2
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: ST_TO_ADDR
// end ; 5 :
68637: GO 68777
68639: LD_INT 5
68641: DOUBLE
68642: EQUAL
68643: IFTRUE 68647
68645: GO 68776
68647: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68648: LD_ADDR_VAR 0 5
68652: PUSH
68653: LD_VAR 0 1
68657: PUSH
68658: LD_INT 4
68660: MINUS
68661: PUSH
68662: LD_VAR 0 2
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: PUSH
68675: LD_VAR 0 1
68679: PUSH
68680: LD_VAR 0 2
68684: PUSH
68685: LD_INT 4
68687: MINUS
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: LIST
68696: PUSH
68697: LD_VAR 0 1
68701: PUSH
68702: LD_INT 4
68704: PLUS
68705: PUSH
68706: LD_VAR 0 2
68710: PUSH
68711: LD_INT 4
68713: PLUS
68714: PUSH
68715: LD_INT 5
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: LIST
68722: PUSH
68723: LD_VAR 0 1
68727: PUSH
68728: LD_INT 3
68730: PLUS
68731: PUSH
68732: LD_VAR 0 2
68736: PUSH
68737: LD_INT 4
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: LIST
68744: PUSH
68745: LD_VAR 0 1
68749: PUSH
68750: LD_VAR 0 2
68754: PUSH
68755: LD_INT 3
68757: PLUS
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: ST_TO_ADDR
// end ; end ;
68774: GO 68777
68776: POP
// result := list ;
68777: LD_ADDR_VAR 0 4
68781: PUSH
68782: LD_VAR 0 5
68786: ST_TO_ADDR
// end ;
68787: LD_VAR 0 4
68791: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68792: LD_INT 0
68794: PPUSH
68795: PPUSH
68796: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68797: LD_VAR 0 1
68801: NOT
68802: PUSH
68803: LD_VAR 0 2
68807: PUSH
68808: LD_INT 1
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: IN
68826: NOT
68827: OR
68828: IFFALSE 68832
// exit ;
68830: GO 68924
// tmp := [ ] ;
68832: LD_ADDR_VAR 0 5
68836: PUSH
68837: EMPTY
68838: ST_TO_ADDR
// for i in units do
68839: LD_ADDR_VAR 0 4
68843: PUSH
68844: LD_VAR 0 1
68848: PUSH
68849: FOR_IN
68850: IFFALSE 68893
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68852: LD_ADDR_VAR 0 5
68856: PUSH
68857: LD_VAR 0 5
68861: PPUSH
68862: LD_VAR 0 5
68866: PUSH
68867: LD_INT 1
68869: PLUS
68870: PPUSH
68871: LD_VAR 0 4
68875: PPUSH
68876: LD_VAR 0 2
68880: PPUSH
68881: CALL_OW 259
68885: PPUSH
68886: CALL_OW 2
68890: ST_TO_ADDR
68891: GO 68849
68893: POP
68894: POP
// if not tmp then
68895: LD_VAR 0 5
68899: NOT
68900: IFFALSE 68904
// exit ;
68902: GO 68924
// result := SortListByListDesc ( units , tmp ) ;
68904: LD_ADDR_VAR 0 3
68908: PUSH
68909: LD_VAR 0 1
68913: PPUSH
68914: LD_VAR 0 5
68918: PPUSH
68919: CALL_OW 77
68923: ST_TO_ADDR
// end ;
68924: LD_VAR 0 3
68928: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68929: LD_INT 0
68931: PPUSH
68932: PPUSH
68933: PPUSH
// result := false ;
68934: LD_ADDR_VAR 0 3
68938: PUSH
68939: LD_INT 0
68941: ST_TO_ADDR
// x := GetX ( building ) ;
68942: LD_ADDR_VAR 0 4
68946: PUSH
68947: LD_VAR 0 2
68951: PPUSH
68952: CALL_OW 250
68956: ST_TO_ADDR
// y := GetY ( building ) ;
68957: LD_ADDR_VAR 0 5
68961: PUSH
68962: LD_VAR 0 2
68966: PPUSH
68967: CALL_OW 251
68971: ST_TO_ADDR
// if not building or not x or not y then
68972: LD_VAR 0 2
68976: NOT
68977: PUSH
68978: LD_VAR 0 4
68982: NOT
68983: OR
68984: PUSH
68985: LD_VAR 0 5
68989: NOT
68990: OR
68991: IFFALSE 68995
// exit ;
68993: GO 69087
// if GetTaskList ( unit ) then
68995: LD_VAR 0 1
68999: PPUSH
69000: CALL_OW 437
69004: IFFALSE 69087
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69006: LD_STRING e
69008: PUSH
69009: LD_VAR 0 1
69013: PPUSH
69014: CALL_OW 437
69018: PUSH
69019: LD_INT 1
69021: ARRAY
69022: PUSH
69023: LD_INT 1
69025: ARRAY
69026: EQUAL
69027: PUSH
69028: LD_VAR 0 4
69032: PUSH
69033: LD_VAR 0 1
69037: PPUSH
69038: CALL_OW 437
69042: PUSH
69043: LD_INT 1
69045: ARRAY
69046: PUSH
69047: LD_INT 2
69049: ARRAY
69050: EQUAL
69051: AND
69052: PUSH
69053: LD_VAR 0 5
69057: PUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 437
69067: PUSH
69068: LD_INT 1
69070: ARRAY
69071: PUSH
69072: LD_INT 3
69074: ARRAY
69075: EQUAL
69076: AND
69077: IFFALSE 69087
// result := true end ;
69079: LD_ADDR_VAR 0 3
69083: PUSH
69084: LD_INT 1
69086: ST_TO_ADDR
// end ;
69087: LD_VAR 0 3
69091: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69092: LD_INT 0
69094: PPUSH
// result := false ;
69095: LD_ADDR_VAR 0 4
69099: PUSH
69100: LD_INT 0
69102: ST_TO_ADDR
// if GetTaskList ( unit ) then
69103: LD_VAR 0 1
69107: PPUSH
69108: CALL_OW 437
69112: IFFALSE 69195
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69114: LD_STRING M
69116: PUSH
69117: LD_VAR 0 1
69121: PPUSH
69122: CALL_OW 437
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_INT 1
69133: ARRAY
69134: EQUAL
69135: PUSH
69136: LD_VAR 0 2
69140: PUSH
69141: LD_VAR 0 1
69145: PPUSH
69146: CALL_OW 437
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PUSH
69155: LD_INT 2
69157: ARRAY
69158: EQUAL
69159: AND
69160: PUSH
69161: LD_VAR 0 3
69165: PUSH
69166: LD_VAR 0 1
69170: PPUSH
69171: CALL_OW 437
69175: PUSH
69176: LD_INT 1
69178: ARRAY
69179: PUSH
69180: LD_INT 3
69182: ARRAY
69183: EQUAL
69184: AND
69185: IFFALSE 69195
// result := true ;
69187: LD_ADDR_VAR 0 4
69191: PUSH
69192: LD_INT 1
69194: ST_TO_ADDR
// end ; end ;
69195: LD_VAR 0 4
69199: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69200: LD_INT 0
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
// if not unit or not area then
69206: LD_VAR 0 1
69210: NOT
69211: PUSH
69212: LD_VAR 0 2
69216: NOT
69217: OR
69218: IFFALSE 69222
// exit ;
69220: GO 69386
// tmp := AreaToList ( area , i ) ;
69222: LD_ADDR_VAR 0 6
69226: PUSH
69227: LD_VAR 0 2
69231: PPUSH
69232: LD_VAR 0 5
69236: PPUSH
69237: CALL_OW 517
69241: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69242: LD_ADDR_VAR 0 5
69246: PUSH
69247: DOUBLE
69248: LD_INT 1
69250: DEC
69251: ST_TO_ADDR
69252: LD_VAR 0 6
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: FOR_TO
69262: IFFALSE 69384
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69264: LD_ADDR_VAR 0 7
69268: PUSH
69269: LD_VAR 0 6
69273: PUSH
69274: LD_INT 1
69276: ARRAY
69277: PUSH
69278: LD_VAR 0 5
69282: ARRAY
69283: PUSH
69284: LD_VAR 0 6
69288: PUSH
69289: LD_INT 2
69291: ARRAY
69292: PUSH
69293: LD_VAR 0 5
69297: ARRAY
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69303: LD_VAR 0 7
69307: PUSH
69308: LD_INT 1
69310: ARRAY
69311: PPUSH
69312: LD_VAR 0 7
69316: PUSH
69317: LD_INT 2
69319: ARRAY
69320: PPUSH
69321: CALL_OW 428
69325: PUSH
69326: LD_INT 0
69328: EQUAL
69329: IFFALSE 69382
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69331: LD_VAR 0 1
69335: PPUSH
69336: LD_VAR 0 7
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 7
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PPUSH
69354: LD_VAR 0 3
69358: PPUSH
69359: CALL_OW 48
// result := IsPlaced ( unit ) ;
69363: LD_ADDR_VAR 0 4
69367: PUSH
69368: LD_VAR 0 1
69372: PPUSH
69373: CALL_OW 305
69377: ST_TO_ADDR
// exit ;
69378: POP
69379: POP
69380: GO 69386
// end ; end ;
69382: GO 69261
69384: POP
69385: POP
// end ;
69386: LD_VAR 0 4
69390: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69391: LD_INT 0
69393: PPUSH
69394: PPUSH
69395: PPUSH
// if not side or side > 8 then
69396: LD_VAR 0 1
69400: NOT
69401: PUSH
69402: LD_VAR 0 1
69406: PUSH
69407: LD_INT 8
69409: GREATER
69410: OR
69411: IFFALSE 69415
// exit ;
69413: GO 69602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69415: LD_ADDR_VAR 0 4
69419: PUSH
69420: LD_INT 22
69422: PUSH
69423: LD_VAR 0 1
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 21
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PPUSH
69446: CALL_OW 69
69450: ST_TO_ADDR
// if not tmp then
69451: LD_VAR 0 4
69455: NOT
69456: IFFALSE 69460
// exit ;
69458: GO 69602
// enable_addtolog := true ;
69460: LD_ADDR_OWVAR 81
69464: PUSH
69465: LD_INT 1
69467: ST_TO_ADDR
// AddToLog ( [ ) ;
69468: LD_STRING [
69470: PPUSH
69471: CALL_OW 561
// for i in tmp do
69475: LD_ADDR_VAR 0 3
69479: PUSH
69480: LD_VAR 0 4
69484: PUSH
69485: FOR_IN
69486: IFFALSE 69593
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69488: LD_STRING [
69490: PUSH
69491: LD_VAR 0 3
69495: PPUSH
69496: CALL_OW 266
69500: STR
69501: PUSH
69502: LD_STRING , 
69504: STR
69505: PUSH
69506: LD_VAR 0 3
69510: PPUSH
69511: CALL_OW 250
69515: STR
69516: PUSH
69517: LD_STRING , 
69519: STR
69520: PUSH
69521: LD_VAR 0 3
69525: PPUSH
69526: CALL_OW 251
69530: STR
69531: PUSH
69532: LD_STRING , 
69534: STR
69535: PUSH
69536: LD_VAR 0 3
69540: PPUSH
69541: CALL_OW 254
69545: STR
69546: PUSH
69547: LD_STRING , 
69549: STR
69550: PUSH
69551: LD_VAR 0 3
69555: PPUSH
69556: LD_INT 1
69558: PPUSH
69559: CALL_OW 268
69563: STR
69564: PUSH
69565: LD_STRING , 
69567: STR
69568: PUSH
69569: LD_VAR 0 3
69573: PPUSH
69574: LD_INT 2
69576: PPUSH
69577: CALL_OW 268
69581: STR
69582: PUSH
69583: LD_STRING ],
69585: STR
69586: PPUSH
69587: CALL_OW 561
// end ;
69591: GO 69485
69593: POP
69594: POP
// AddToLog ( ]; ) ;
69595: LD_STRING ];
69597: PPUSH
69598: CALL_OW 561
// end ;
69602: LD_VAR 0 2
69606: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69607: LD_INT 0
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
69613: PPUSH
// if not area or not rate or not max then
69614: LD_VAR 0 1
69618: NOT
69619: PUSH
69620: LD_VAR 0 2
69624: NOT
69625: OR
69626: PUSH
69627: LD_VAR 0 4
69631: NOT
69632: OR
69633: IFFALSE 69637
// exit ;
69635: GO 69826
// while 1 do
69637: LD_INT 1
69639: IFFALSE 69826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69641: LD_ADDR_VAR 0 9
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: LD_INT 1
69653: PPUSH
69654: CALL_OW 287
69658: PUSH
69659: LD_INT 10
69661: MUL
69662: ST_TO_ADDR
// r := rate / 10 ;
69663: LD_ADDR_VAR 0 7
69667: PUSH
69668: LD_VAR 0 2
69672: PUSH
69673: LD_INT 10
69675: DIVREAL
69676: ST_TO_ADDR
// time := 1 1$00 ;
69677: LD_ADDR_VAR 0 8
69681: PUSH
69682: LD_INT 2100
69684: ST_TO_ADDR
// if amount < min then
69685: LD_VAR 0 9
69689: PUSH
69690: LD_VAR 0 3
69694: LESS
69695: IFFALSE 69713
// r := r * 2 else
69697: LD_ADDR_VAR 0 7
69701: PUSH
69702: LD_VAR 0 7
69706: PUSH
69707: LD_INT 2
69709: MUL
69710: ST_TO_ADDR
69711: GO 69739
// if amount > max then
69713: LD_VAR 0 9
69717: PUSH
69718: LD_VAR 0 4
69722: GREATER
69723: IFFALSE 69739
// r := r / 2 ;
69725: LD_ADDR_VAR 0 7
69729: PUSH
69730: LD_VAR 0 7
69734: PUSH
69735: LD_INT 2
69737: DIVREAL
69738: ST_TO_ADDR
// time := time / r ;
69739: LD_ADDR_VAR 0 8
69743: PUSH
69744: LD_VAR 0 8
69748: PUSH
69749: LD_VAR 0 7
69753: DIVREAL
69754: ST_TO_ADDR
// if time < 0 then
69755: LD_VAR 0 8
69759: PUSH
69760: LD_INT 0
69762: LESS
69763: IFFALSE 69780
// time := time * - 1 ;
69765: LD_ADDR_VAR 0 8
69769: PUSH
69770: LD_VAR 0 8
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: MUL
69779: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69780: LD_VAR 0 8
69784: PUSH
69785: LD_INT 35
69787: PPUSH
69788: LD_INT 875
69790: PPUSH
69791: CALL_OW 12
69795: PLUS
69796: PPUSH
69797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69801: LD_INT 1
69803: PPUSH
69804: LD_INT 5
69806: PPUSH
69807: CALL_OW 12
69811: PPUSH
69812: LD_VAR 0 1
69816: PPUSH
69817: LD_INT 1
69819: PPUSH
69820: CALL_OW 55
// end ;
69824: GO 69637
// end ;
69826: LD_VAR 0 5
69830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69831: LD_INT 0
69833: PPUSH
69834: PPUSH
69835: PPUSH
69836: PPUSH
69837: PPUSH
69838: PPUSH
69839: PPUSH
69840: PPUSH
// if not turrets or not factories then
69841: LD_VAR 0 1
69845: NOT
69846: PUSH
69847: LD_VAR 0 2
69851: NOT
69852: OR
69853: IFFALSE 69857
// exit ;
69855: GO 70164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69857: LD_ADDR_VAR 0 10
69861: PUSH
69862: LD_INT 5
69864: PUSH
69865: LD_INT 6
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: LD_INT 5
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 24
69899: PUSH
69900: LD_INT 25
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 23
69909: PUSH
69910: LD_INT 27
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 42
69923: PUSH
69924: LD_INT 43
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 44
69933: PUSH
69934: LD_INT 46
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 45
69943: PUSH
69944: LD_INT 47
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: LIST
69960: ST_TO_ADDR
// result := [ ] ;
69961: LD_ADDR_VAR 0 3
69965: PUSH
69966: EMPTY
69967: ST_TO_ADDR
// for i in turrets do
69968: LD_ADDR_VAR 0 4
69972: PUSH
69973: LD_VAR 0 1
69977: PUSH
69978: FOR_IN
69979: IFFALSE 70162
// begin nat := GetNation ( i ) ;
69981: LD_ADDR_VAR 0 7
69985: PUSH
69986: LD_VAR 0 4
69990: PPUSH
69991: CALL_OW 248
69995: ST_TO_ADDR
// weapon := 0 ;
69996: LD_ADDR_VAR 0 8
70000: PUSH
70001: LD_INT 0
70003: ST_TO_ADDR
// if not nat then
70004: LD_VAR 0 7
70008: NOT
70009: IFFALSE 70013
// continue ;
70011: GO 69978
// for j in list [ nat ] do
70013: LD_ADDR_VAR 0 5
70017: PUSH
70018: LD_VAR 0 10
70022: PUSH
70023: LD_VAR 0 7
70027: ARRAY
70028: PUSH
70029: FOR_IN
70030: IFFALSE 70071
// if GetBWeapon ( i ) = j [ 1 ] then
70032: LD_VAR 0 4
70036: PPUSH
70037: CALL_OW 269
70041: PUSH
70042: LD_VAR 0 5
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: EQUAL
70051: IFFALSE 70069
// begin weapon := j [ 2 ] ;
70053: LD_ADDR_VAR 0 8
70057: PUSH
70058: LD_VAR 0 5
70062: PUSH
70063: LD_INT 2
70065: ARRAY
70066: ST_TO_ADDR
// break ;
70067: GO 70071
// end ;
70069: GO 70029
70071: POP
70072: POP
// if not weapon then
70073: LD_VAR 0 8
70077: NOT
70078: IFFALSE 70082
// continue ;
70080: GO 69978
// for k in factories do
70082: LD_ADDR_VAR 0 6
70086: PUSH
70087: LD_VAR 0 2
70091: PUSH
70092: FOR_IN
70093: IFFALSE 70158
// begin weapons := AvailableWeaponList ( k ) ;
70095: LD_ADDR_VAR 0 9
70099: PUSH
70100: LD_VAR 0 6
70104: PPUSH
70105: CALL_OW 478
70109: ST_TO_ADDR
// if not weapons then
70110: LD_VAR 0 9
70114: NOT
70115: IFFALSE 70119
// continue ;
70117: GO 70092
// if weapon in weapons then
70119: LD_VAR 0 8
70123: PUSH
70124: LD_VAR 0 9
70128: IN
70129: IFFALSE 70156
// begin result := [ i , weapon ] ;
70131: LD_ADDR_VAR 0 3
70135: PUSH
70136: LD_VAR 0 4
70140: PUSH
70141: LD_VAR 0 8
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: ST_TO_ADDR
// exit ;
70150: POP
70151: POP
70152: POP
70153: POP
70154: GO 70164
// end ; end ;
70156: GO 70092
70158: POP
70159: POP
// end ;
70160: GO 69978
70162: POP
70163: POP
// end ;
70164: LD_VAR 0 3
70168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70169: LD_INT 0
70171: PPUSH
// if not side or side > 8 then
70172: LD_VAR 0 3
70176: NOT
70177: PUSH
70178: LD_VAR 0 3
70182: PUSH
70183: LD_INT 8
70185: GREATER
70186: OR
70187: IFFALSE 70191
// exit ;
70189: GO 70250
// if not range then
70191: LD_VAR 0 4
70195: NOT
70196: IFFALSE 70207
// range := - 12 ;
70198: LD_ADDR_VAR 0 4
70202: PUSH
70203: LD_INT 12
70205: NEG
70206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70207: LD_VAR 0 1
70211: PPUSH
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_VAR 0 3
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70231: LD_VAR 0 1
70235: PPUSH
70236: LD_VAR 0 2
70240: PPUSH
70241: LD_VAR 0 3
70245: PPUSH
70246: CALL_OW 331
// end ;
70250: LD_VAR 0 5
70254: RET
// export function Video ( mode ) ; begin
70255: LD_INT 0
70257: PPUSH
// ingame_video = mode ;
70258: LD_ADDR_OWVAR 52
70262: PUSH
70263: LD_VAR 0 1
70267: ST_TO_ADDR
// interface_hidden = mode ;
70268: LD_ADDR_OWVAR 54
70272: PUSH
70273: LD_VAR 0 1
70277: ST_TO_ADDR
// end ;
70278: LD_VAR 0 2
70282: RET
// export function Join ( array , element ) ; begin
70283: LD_INT 0
70285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_VAR 0 1
70295: PPUSH
70296: LD_VAR 0 1
70300: PUSH
70301: LD_INT 1
70303: PLUS
70304: PPUSH
70305: LD_VAR 0 2
70309: PPUSH
70310: CALL_OW 1
70314: ST_TO_ADDR
// end ;
70315: LD_VAR 0 3
70319: RET
// export function JoinUnion ( array , element ) ; begin
70320: LD_INT 0
70322: PPUSH
// result := array union element ;
70323: LD_ADDR_VAR 0 3
70327: PUSH
70328: LD_VAR 0 1
70332: PUSH
70333: LD_VAR 0 2
70337: UNION
70338: ST_TO_ADDR
// end ;
70339: LD_VAR 0 3
70343: RET
// export function GetBehemoths ( side ) ; begin
70344: LD_INT 0
70346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70347: LD_ADDR_VAR 0 2
70351: PUSH
70352: LD_INT 22
70354: PUSH
70355: LD_VAR 0 1
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 31
70366: PUSH
70367: LD_INT 25
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PPUSH
70378: CALL_OW 69
70382: ST_TO_ADDR
// end ;
70383: LD_VAR 0 2
70387: RET
// export function Shuffle ( array ) ; var i , index ; begin
70388: LD_INT 0
70390: PPUSH
70391: PPUSH
70392: PPUSH
// result := [ ] ;
70393: LD_ADDR_VAR 0 2
70397: PUSH
70398: EMPTY
70399: ST_TO_ADDR
// if not array then
70400: LD_VAR 0 1
70404: NOT
70405: IFFALSE 70409
// exit ;
70407: GO 70508
// Randomize ;
70409: CALL_OW 10
// for i = array downto 1 do
70413: LD_ADDR_VAR 0 3
70417: PUSH
70418: DOUBLE
70419: LD_VAR 0 1
70423: INC
70424: ST_TO_ADDR
70425: LD_INT 1
70427: PUSH
70428: FOR_DOWNTO
70429: IFFALSE 70506
// begin index := rand ( 1 , array ) ;
70431: LD_ADDR_VAR 0 4
70435: PUSH
70436: LD_INT 1
70438: PPUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: CALL_OW 12
70448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70449: LD_ADDR_VAR 0 2
70453: PUSH
70454: LD_VAR 0 2
70458: PPUSH
70459: LD_VAR 0 2
70463: PUSH
70464: LD_INT 1
70466: PLUS
70467: PPUSH
70468: LD_VAR 0 1
70472: PUSH
70473: LD_VAR 0 4
70477: ARRAY
70478: PPUSH
70479: CALL_OW 2
70483: ST_TO_ADDR
// array := Delete ( array , index ) ;
70484: LD_ADDR_VAR 0 1
70488: PUSH
70489: LD_VAR 0 1
70493: PPUSH
70494: LD_VAR 0 4
70498: PPUSH
70499: CALL_OW 3
70503: ST_TO_ADDR
// end ;
70504: GO 70428
70506: POP
70507: POP
// end ;
70508: LD_VAR 0 2
70512: RET
// export function GetBaseMaterials ( base ) ; begin
70513: LD_INT 0
70515: PPUSH
// result := [ 0 , 0 , 0 ] ;
70516: LD_ADDR_VAR 0 2
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: LIST
70534: ST_TO_ADDR
// if not base then
70535: LD_VAR 0 1
70539: NOT
70540: IFFALSE 70544
// exit ;
70542: GO 70593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_VAR 0 1
70553: PPUSH
70554: LD_INT 1
70556: PPUSH
70557: CALL_OW 275
70561: PUSH
70562: LD_VAR 0 1
70566: PPUSH
70567: LD_INT 2
70569: PPUSH
70570: CALL_OW 275
70574: PUSH
70575: LD_VAR 0 1
70579: PPUSH
70580: LD_INT 3
70582: PPUSH
70583: CALL_OW 275
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: ST_TO_ADDR
// end ;
70593: LD_VAR 0 2
70597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70598: LD_INT 0
70600: PPUSH
70601: PPUSH
// result := array ;
70602: LD_ADDR_VAR 0 3
70606: PUSH
70607: LD_VAR 0 1
70611: ST_TO_ADDR
// if size >= result then
70612: LD_VAR 0 2
70616: PUSH
70617: LD_VAR 0 3
70621: GREATEREQUAL
70622: IFFALSE 70626
// exit ;
70624: GO 70676
// if size then
70626: LD_VAR 0 2
70630: IFFALSE 70676
// for i := array downto size do
70632: LD_ADDR_VAR 0 4
70636: PUSH
70637: DOUBLE
70638: LD_VAR 0 1
70642: INC
70643: ST_TO_ADDR
70644: LD_VAR 0 2
70648: PUSH
70649: FOR_DOWNTO
70650: IFFALSE 70674
// result := Delete ( result , result ) ;
70652: LD_ADDR_VAR 0 3
70656: PUSH
70657: LD_VAR 0 3
70661: PPUSH
70662: LD_VAR 0 3
70666: PPUSH
70667: CALL_OW 3
70671: ST_TO_ADDR
70672: GO 70649
70674: POP
70675: POP
// end ;
70676: LD_VAR 0 3
70680: RET
// export function ComExit ( unit ) ; var tmp ; begin
70681: LD_INT 0
70683: PPUSH
70684: PPUSH
// if not IsInUnit ( unit ) then
70685: LD_VAR 0 1
70689: PPUSH
70690: CALL_OW 310
70694: NOT
70695: IFFALSE 70699
// exit ;
70697: GO 70759
// tmp := IsInUnit ( unit ) ;
70699: LD_ADDR_VAR 0 3
70703: PUSH
70704: LD_VAR 0 1
70708: PPUSH
70709: CALL_OW 310
70713: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70714: LD_VAR 0 3
70718: PPUSH
70719: CALL_OW 247
70723: PUSH
70724: LD_INT 2
70726: EQUAL
70727: IFFALSE 70740
// ComExitVehicle ( unit ) else
70729: LD_VAR 0 1
70733: PPUSH
70734: CALL_OW 121
70738: GO 70749
// ComExitBuilding ( unit ) ;
70740: LD_VAR 0 1
70744: PPUSH
70745: CALL_OW 122
// result := tmp ;
70749: LD_ADDR_VAR 0 2
70753: PUSH
70754: LD_VAR 0 3
70758: ST_TO_ADDR
// end ;
70759: LD_VAR 0 2
70763: RET
// export function ComExitAll ( units ) ; var i ; begin
70764: LD_INT 0
70766: PPUSH
70767: PPUSH
// if not units then
70768: LD_VAR 0 1
70772: NOT
70773: IFFALSE 70777
// exit ;
70775: GO 70803
// for i in units do
70777: LD_ADDR_VAR 0 3
70781: PUSH
70782: LD_VAR 0 1
70786: PUSH
70787: FOR_IN
70788: IFFALSE 70801
// ComExit ( i ) ;
70790: LD_VAR 0 3
70794: PPUSH
70795: CALL 70681 0 1
70799: GO 70787
70801: POP
70802: POP
// end ;
70803: LD_VAR 0 2
70807: RET
// export function ResetHc ; begin
70808: LD_INT 0
70810: PPUSH
// InitHc ;
70811: CALL_OW 19
// hc_importance := 0 ;
70815: LD_ADDR_OWVAR 32
70819: PUSH
70820: LD_INT 0
70822: ST_TO_ADDR
// end ;
70823: LD_VAR 0 1
70827: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70828: LD_INT 0
70830: PPUSH
70831: PPUSH
70832: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70833: LD_ADDR_VAR 0 6
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_VAR 0 3
70847: PLUS
70848: PUSH
70849: LD_INT 2
70851: DIV
70852: ST_TO_ADDR
// if _x < 0 then
70853: LD_VAR 0 6
70857: PUSH
70858: LD_INT 0
70860: LESS
70861: IFFALSE 70878
// _x := _x * - 1 ;
70863: LD_ADDR_VAR 0 6
70867: PUSH
70868: LD_VAR 0 6
70872: PUSH
70873: LD_INT 1
70875: NEG
70876: MUL
70877: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70878: LD_ADDR_VAR 0 7
70882: PUSH
70883: LD_VAR 0 2
70887: PUSH
70888: LD_VAR 0 4
70892: PLUS
70893: PUSH
70894: LD_INT 2
70896: DIV
70897: ST_TO_ADDR
// if _y < 0 then
70898: LD_VAR 0 7
70902: PUSH
70903: LD_INT 0
70905: LESS
70906: IFFALSE 70923
// _y := _y * - 1 ;
70908: LD_ADDR_VAR 0 7
70912: PUSH
70913: LD_VAR 0 7
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: MUL
70922: ST_TO_ADDR
// result := [ _x , _y ] ;
70923: LD_ADDR_VAR 0 5
70927: PUSH
70928: LD_VAR 0 6
70932: PUSH
70933: LD_VAR 0 7
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: ST_TO_ADDR
// end ;
70942: LD_VAR 0 5
70946: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70947: LD_INT 0
70949: PPUSH
70950: PPUSH
70951: PPUSH
70952: PPUSH
// task := GetTaskList ( unit ) ;
70953: LD_ADDR_VAR 0 7
70957: PUSH
70958: LD_VAR 0 1
70962: PPUSH
70963: CALL_OW 437
70967: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70968: LD_VAR 0 7
70972: NOT
70973: PUSH
70974: LD_VAR 0 1
70978: PPUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: CALL_OW 308
70988: NOT
70989: AND
70990: IFFALSE 70994
// exit ;
70992: GO 71112
// if IsInArea ( unit , area ) then
70994: LD_VAR 0 1
70998: PPUSH
70999: LD_VAR 0 2
71003: PPUSH
71004: CALL_OW 308
71008: IFFALSE 71026
// begin ComMoveToArea ( unit , goAway ) ;
71010: LD_VAR 0 1
71014: PPUSH
71015: LD_VAR 0 3
71019: PPUSH
71020: CALL_OW 113
// exit ;
71024: GO 71112
// end ; if task [ 1 ] [ 1 ] <> M then
71026: LD_VAR 0 7
71030: PUSH
71031: LD_INT 1
71033: ARRAY
71034: PUSH
71035: LD_INT 1
71037: ARRAY
71038: PUSH
71039: LD_STRING M
71041: NONEQUAL
71042: IFFALSE 71046
// exit ;
71044: GO 71112
// x := task [ 1 ] [ 2 ] ;
71046: LD_ADDR_VAR 0 5
71050: PUSH
71051: LD_VAR 0 7
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PUSH
71060: LD_INT 2
71062: ARRAY
71063: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71064: LD_ADDR_VAR 0 6
71068: PUSH
71069: LD_VAR 0 7
71073: PUSH
71074: LD_INT 1
71076: ARRAY
71077: PUSH
71078: LD_INT 3
71080: ARRAY
71081: ST_TO_ADDR
// if InArea ( x , y , area ) then
71082: LD_VAR 0 5
71086: PPUSH
71087: LD_VAR 0 6
71091: PPUSH
71092: LD_VAR 0 2
71096: PPUSH
71097: CALL_OW 309
71101: IFFALSE 71112
// ComStop ( unit ) ;
71103: LD_VAR 0 1
71107: PPUSH
71108: CALL_OW 141
// end ;
71112: LD_VAR 0 4
71116: RET
// export function Abs ( value ) ; begin
71117: LD_INT 0
71119: PPUSH
// result := value ;
71120: LD_ADDR_VAR 0 2
71124: PUSH
71125: LD_VAR 0 1
71129: ST_TO_ADDR
// if value < 0 then
71130: LD_VAR 0 1
71134: PUSH
71135: LD_INT 0
71137: LESS
71138: IFFALSE 71155
// result := value * - 1 ;
71140: LD_ADDR_VAR 0 2
71144: PUSH
71145: LD_VAR 0 1
71149: PUSH
71150: LD_INT 1
71152: NEG
71153: MUL
71154: ST_TO_ADDR
// end ;
71155: LD_VAR 0 2
71159: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71160: LD_INT 0
71162: PPUSH
71163: PPUSH
71164: PPUSH
71165: PPUSH
71166: PPUSH
71167: PPUSH
71168: PPUSH
71169: PPUSH
// if not unit or not building then
71170: LD_VAR 0 1
71174: NOT
71175: PUSH
71176: LD_VAR 0 2
71180: NOT
71181: OR
71182: IFFALSE 71186
// exit ;
71184: GO 71412
// x := GetX ( building ) ;
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: LD_VAR 0 2
71195: PPUSH
71196: CALL_OW 250
71200: ST_TO_ADDR
// y := GetY ( building ) ;
71201: LD_ADDR_VAR 0 6
71205: PUSH
71206: LD_VAR 0 2
71210: PPUSH
71211: CALL_OW 251
71215: ST_TO_ADDR
// d := GetDir ( building ) ;
71216: LD_ADDR_VAR 0 8
71220: PUSH
71221: LD_VAR 0 2
71225: PPUSH
71226: CALL_OW 254
71230: ST_TO_ADDR
// r := 4 ;
71231: LD_ADDR_VAR 0 9
71235: PUSH
71236: LD_INT 4
71238: ST_TO_ADDR
// for i := 1 to 5 do
71239: LD_ADDR_VAR 0 10
71243: PUSH
71244: DOUBLE
71245: LD_INT 1
71247: DEC
71248: ST_TO_ADDR
71249: LD_INT 5
71251: PUSH
71252: FOR_TO
71253: IFFALSE 71410
// begin _x := ShiftX ( x , d , r + i ) ;
71255: LD_ADDR_VAR 0 5
71259: PUSH
71260: LD_VAR 0 4
71264: PPUSH
71265: LD_VAR 0 8
71269: PPUSH
71270: LD_VAR 0 9
71274: PUSH
71275: LD_VAR 0 10
71279: PLUS
71280: PPUSH
71281: CALL_OW 272
71285: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71286: LD_ADDR_VAR 0 7
71290: PUSH
71291: LD_VAR 0 6
71295: PPUSH
71296: LD_VAR 0 8
71300: PPUSH
71301: LD_VAR 0 9
71305: PUSH
71306: LD_VAR 0 10
71310: PLUS
71311: PPUSH
71312: CALL_OW 273
71316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71317: LD_VAR 0 5
71321: PPUSH
71322: LD_VAR 0 7
71326: PPUSH
71327: CALL_OW 488
71331: PUSH
71332: LD_VAR 0 5
71336: PPUSH
71337: LD_VAR 0 7
71341: PPUSH
71342: CALL_OW 428
71346: PPUSH
71347: CALL_OW 247
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: LD_INT 2
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: IN
71362: NOT
71363: AND
71364: IFFALSE 71408
// begin ComMoveXY ( unit , _x , _y ) ;
71366: LD_VAR 0 1
71370: PPUSH
71371: LD_VAR 0 5
71375: PPUSH
71376: LD_VAR 0 7
71380: PPUSH
71381: CALL_OW 111
// result := [ _x , _y ] ;
71385: LD_ADDR_VAR 0 3
71389: PUSH
71390: LD_VAR 0 5
71394: PUSH
71395: LD_VAR 0 7
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// exit ;
71404: POP
71405: POP
71406: GO 71412
// end ; end ;
71408: GO 71252
71410: POP
71411: POP
// end ;
71412: LD_VAR 0 3
71416: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71417: LD_INT 0
71419: PPUSH
71420: PPUSH
71421: PPUSH
// result := 0 ;
71422: LD_ADDR_VAR 0 3
71426: PUSH
71427: LD_INT 0
71429: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71430: LD_VAR 0 1
71434: PUSH
71435: LD_INT 0
71437: LESS
71438: PUSH
71439: LD_VAR 0 1
71443: PUSH
71444: LD_INT 8
71446: GREATER
71447: OR
71448: PUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_INT 0
71456: LESS
71457: OR
71458: PUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_INT 8
71466: GREATER
71467: OR
71468: IFFALSE 71472
// exit ;
71470: GO 71547
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71472: LD_ADDR_VAR 0 4
71476: PUSH
71477: LD_INT 22
71479: PUSH
71480: LD_VAR 0 2
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PPUSH
71489: CALL_OW 69
71493: PUSH
71494: FOR_IN
71495: IFFALSE 71545
// begin un := UnitShoot ( i ) ;
71497: LD_ADDR_VAR 0 5
71501: PUSH
71502: LD_VAR 0 4
71506: PPUSH
71507: CALL_OW 504
71511: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71512: LD_VAR 0 5
71516: PPUSH
71517: CALL_OW 255
71521: PUSH
71522: LD_VAR 0 1
71526: EQUAL
71527: IFFALSE 71543
// begin result := un ;
71529: LD_ADDR_VAR 0 3
71533: PUSH
71534: LD_VAR 0 5
71538: ST_TO_ADDR
// exit ;
71539: POP
71540: POP
71541: GO 71547
// end ; end ;
71543: GO 71494
71545: POP
71546: POP
// end ;
71547: LD_VAR 0 3
71551: RET
// export function GetCargoBay ( units ) ; begin
71552: LD_INT 0
71554: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71555: LD_ADDR_VAR 0 2
71559: PUSH
71560: LD_VAR 0 1
71564: PPUSH
71565: LD_INT 2
71567: PUSH
71568: LD_INT 34
71570: PUSH
71571: LD_INT 12
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 34
71580: PUSH
71581: LD_INT 51
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 34
71590: PUSH
71591: LD_INT 32
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 34
71600: PUSH
71601: LD_EXP 33
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: PPUSH
71617: CALL_OW 72
71621: ST_TO_ADDR
// end ;
71622: LD_VAR 0 2
71626: RET
// export function Negate ( value ) ; begin
71627: LD_INT 0
71629: PPUSH
// result := not value ;
71630: LD_ADDR_VAR 0 2
71634: PUSH
71635: LD_VAR 0 1
71639: NOT
71640: ST_TO_ADDR
// end ;
71641: LD_VAR 0 2
71645: RET
// export function Inc ( value ) ; begin
71646: LD_INT 0
71648: PPUSH
// result := value + 1 ;
71649: LD_ADDR_VAR 0 2
71653: PUSH
71654: LD_VAR 0 1
71658: PUSH
71659: LD_INT 1
71661: PLUS
71662: ST_TO_ADDR
// end ;
71663: LD_VAR 0 2
71667: RET
// export function Dec ( value ) ; begin
71668: LD_INT 0
71670: PPUSH
// result := value - 1 ;
71671: LD_ADDR_VAR 0 2
71675: PUSH
71676: LD_VAR 0 1
71680: PUSH
71681: LD_INT 1
71683: MINUS
71684: ST_TO_ADDR
// end ;
71685: LD_VAR 0 2
71689: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71690: LD_INT 0
71692: PPUSH
71693: PPUSH
71694: PPUSH
71695: PPUSH
71696: PPUSH
71697: PPUSH
71698: PPUSH
71699: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71700: LD_VAR 0 1
71704: PPUSH
71705: LD_VAR 0 2
71709: PPUSH
71710: CALL_OW 488
71714: NOT
71715: PUSH
71716: LD_VAR 0 3
71720: PPUSH
71721: LD_VAR 0 4
71725: PPUSH
71726: CALL_OW 488
71730: NOT
71731: OR
71732: IFFALSE 71745
// begin result := - 1 ;
71734: LD_ADDR_VAR 0 5
71738: PUSH
71739: LD_INT 1
71741: NEG
71742: ST_TO_ADDR
// exit ;
71743: GO 71980
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71745: LD_ADDR_VAR 0 12
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_VAR 0 2
71759: PPUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: CALL 70828 0 4
71774: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71775: LD_ADDR_VAR 0 11
71779: PUSH
71780: LD_VAR 0 1
71784: PPUSH
71785: LD_VAR 0 2
71789: PPUSH
71790: LD_VAR 0 12
71794: PUSH
71795: LD_INT 1
71797: ARRAY
71798: PPUSH
71799: LD_VAR 0 12
71803: PUSH
71804: LD_INT 2
71806: ARRAY
71807: PPUSH
71808: CALL_OW 298
71812: ST_TO_ADDR
// distance := 9999 ;
71813: LD_ADDR_VAR 0 10
71817: PUSH
71818: LD_INT 9999
71820: ST_TO_ADDR
// for i := 0 to 5 do
71821: LD_ADDR_VAR 0 6
71825: PUSH
71826: DOUBLE
71827: LD_INT 0
71829: DEC
71830: ST_TO_ADDR
71831: LD_INT 5
71833: PUSH
71834: FOR_TO
71835: IFFALSE 71978
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71837: LD_ADDR_VAR 0 7
71841: PUSH
71842: LD_VAR 0 1
71846: PPUSH
71847: LD_VAR 0 6
71851: PPUSH
71852: LD_VAR 0 11
71856: PPUSH
71857: CALL_OW 272
71861: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71862: LD_ADDR_VAR 0 8
71866: PUSH
71867: LD_VAR 0 2
71871: PPUSH
71872: LD_VAR 0 6
71876: PPUSH
71877: LD_VAR 0 11
71881: PPUSH
71882: CALL_OW 273
71886: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71887: LD_VAR 0 7
71891: PPUSH
71892: LD_VAR 0 8
71896: PPUSH
71897: CALL_OW 488
71901: NOT
71902: IFFALSE 71906
// continue ;
71904: GO 71834
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71906: LD_ADDR_VAR 0 9
71910: PUSH
71911: LD_VAR 0 12
71915: PUSH
71916: LD_INT 1
71918: ARRAY
71919: PPUSH
71920: LD_VAR 0 12
71924: PUSH
71925: LD_INT 2
71927: ARRAY
71928: PPUSH
71929: LD_VAR 0 7
71933: PPUSH
71934: LD_VAR 0 8
71938: PPUSH
71939: CALL_OW 298
71943: ST_TO_ADDR
// if tmp < distance then
71944: LD_VAR 0 9
71948: PUSH
71949: LD_VAR 0 10
71953: LESS
71954: IFFALSE 71976
// begin result := i ;
71956: LD_ADDR_VAR 0 5
71960: PUSH
71961: LD_VAR 0 6
71965: ST_TO_ADDR
// distance := tmp ;
71966: LD_ADDR_VAR 0 10
71970: PUSH
71971: LD_VAR 0 9
71975: ST_TO_ADDR
// end ; end ;
71976: GO 71834
71978: POP
71979: POP
// end ;
71980: LD_VAR 0 5
71984: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
// if not driver or not IsInUnit ( driver ) then
71989: LD_VAR 0 1
71993: NOT
71994: PUSH
71995: LD_VAR 0 1
71999: PPUSH
72000: CALL_OW 310
72004: NOT
72005: OR
72006: IFFALSE 72010
// exit ;
72008: GO 72100
// vehicle := IsInUnit ( driver ) ;
72010: LD_ADDR_VAR 0 3
72014: PUSH
72015: LD_VAR 0 1
72019: PPUSH
72020: CALL_OW 310
72024: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72025: LD_VAR 0 1
72029: PPUSH
72030: LD_STRING \
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: LD_INT 0
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: LD_STRING E
72062: PUSH
72063: LD_INT 0
72065: PUSH
72066: LD_INT 0
72068: PUSH
72069: LD_VAR 0 3
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PPUSH
72096: CALL_OW 446
// end ;
72100: LD_VAR 0 2
72104: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72105: LD_INT 0
72107: PPUSH
72108: PPUSH
// if not driver or not IsInUnit ( driver ) then
72109: LD_VAR 0 1
72113: NOT
72114: PUSH
72115: LD_VAR 0 1
72119: PPUSH
72120: CALL_OW 310
72124: NOT
72125: OR
72126: IFFALSE 72130
// exit ;
72128: GO 72220
// vehicle := IsInUnit ( driver ) ;
72130: LD_ADDR_VAR 0 3
72134: PUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: CALL_OW 310
72144: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72145: LD_VAR 0 1
72149: PPUSH
72150: LD_STRING \
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: PUSH
72180: LD_STRING E
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: LD_VAR 0 3
72193: PUSH
72194: LD_INT 0
72196: PUSH
72197: LD_INT 0
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PPUSH
72216: CALL_OW 447
// end ;
72220: LD_VAR 0 2
72224: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72225: LD_INT 0
72227: PPUSH
72228: PPUSH
72229: PPUSH
// tmp := [ ] ;
72230: LD_ADDR_VAR 0 5
72234: PUSH
72235: EMPTY
72236: ST_TO_ADDR
// for i in units do
72237: LD_ADDR_VAR 0 4
72241: PUSH
72242: LD_VAR 0 1
72246: PUSH
72247: FOR_IN
72248: IFFALSE 72286
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72250: LD_ADDR_VAR 0 5
72254: PUSH
72255: LD_VAR 0 5
72259: PPUSH
72260: LD_VAR 0 5
72264: PUSH
72265: LD_INT 1
72267: PLUS
72268: PPUSH
72269: LD_VAR 0 4
72273: PPUSH
72274: CALL_OW 256
72278: PPUSH
72279: CALL_OW 2
72283: ST_TO_ADDR
72284: GO 72247
72286: POP
72287: POP
// if not tmp then
72288: LD_VAR 0 5
72292: NOT
72293: IFFALSE 72297
// exit ;
72295: GO 72345
// if asc then
72297: LD_VAR 0 2
72301: IFFALSE 72325
// result := SortListByListAsc ( units , tmp ) else
72303: LD_ADDR_VAR 0 3
72307: PUSH
72308: LD_VAR 0 1
72312: PPUSH
72313: LD_VAR 0 5
72317: PPUSH
72318: CALL_OW 76
72322: ST_TO_ADDR
72323: GO 72345
// result := SortListByListDesc ( units , tmp ) ;
72325: LD_ADDR_VAR 0 3
72329: PUSH
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_VAR 0 5
72339: PPUSH
72340: CALL_OW 77
72344: ST_TO_ADDR
// end ;
72345: LD_VAR 0 3
72349: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72350: LD_INT 0
72352: PPUSH
72353: PPUSH
// task := GetTaskList ( mech ) ;
72354: LD_ADDR_VAR 0 4
72358: PUSH
72359: LD_VAR 0 1
72363: PPUSH
72364: CALL_OW 437
72368: ST_TO_ADDR
// if not task then
72369: LD_VAR 0 4
72373: NOT
72374: IFFALSE 72378
// exit ;
72376: GO 72420
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72378: LD_ADDR_VAR 0 3
72382: PUSH
72383: LD_VAR 0 4
72387: PUSH
72388: LD_INT 1
72390: ARRAY
72391: PUSH
72392: LD_INT 1
72394: ARRAY
72395: PUSH
72396: LD_STRING r
72398: EQUAL
72399: PUSH
72400: LD_VAR 0 4
72404: PUSH
72405: LD_INT 1
72407: ARRAY
72408: PUSH
72409: LD_INT 4
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 2
72417: EQUAL
72418: AND
72419: ST_TO_ADDR
// end ;
72420: LD_VAR 0 3
72424: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72425: LD_INT 0
72427: PPUSH
// SetDir ( unit , d ) ;
72428: LD_VAR 0 1
72432: PPUSH
72433: LD_VAR 0 4
72437: PPUSH
72438: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72442: LD_VAR 0 1
72446: PPUSH
72447: LD_VAR 0 2
72451: PPUSH
72452: LD_VAR 0 3
72456: PPUSH
72457: LD_VAR 0 5
72461: PPUSH
72462: CALL_OW 48
// end ;
72466: LD_VAR 0 6
72470: RET
// export function ToNaturalNumber ( number ) ; begin
72471: LD_INT 0
72473: PPUSH
// result := number div 1 ;
72474: LD_ADDR_VAR 0 2
72478: PUSH
72479: LD_VAR 0 1
72483: PUSH
72484: LD_INT 1
72486: DIV
72487: ST_TO_ADDR
// if number < 0 then
72488: LD_VAR 0 1
72492: PUSH
72493: LD_INT 0
72495: LESS
72496: IFFALSE 72506
// result := 0 ;
72498: LD_ADDR_VAR 0 2
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// end ;
72506: LD_VAR 0 2
72510: RET
// export function SortByClass ( units , class ) ; var un ; begin
72511: LD_INT 0
72513: PPUSH
72514: PPUSH
// if not units or not class then
72515: LD_VAR 0 1
72519: NOT
72520: PUSH
72521: LD_VAR 0 2
72525: NOT
72526: OR
72527: IFFALSE 72531
// exit ;
72529: GO 72626
// result := [ ] ;
72531: LD_ADDR_VAR 0 3
72535: PUSH
72536: EMPTY
72537: ST_TO_ADDR
// for un in units do
72538: LD_ADDR_VAR 0 4
72542: PUSH
72543: LD_VAR 0 1
72547: PUSH
72548: FOR_IN
72549: IFFALSE 72624
// if GetClass ( un ) = class then
72551: LD_VAR 0 4
72555: PPUSH
72556: CALL_OW 257
72560: PUSH
72561: LD_VAR 0 2
72565: EQUAL
72566: IFFALSE 72593
// result := Insert ( result , 1 , un ) else
72568: LD_ADDR_VAR 0 3
72572: PUSH
72573: LD_VAR 0 3
72577: PPUSH
72578: LD_INT 1
72580: PPUSH
72581: LD_VAR 0 4
72585: PPUSH
72586: CALL_OW 2
72590: ST_TO_ADDR
72591: GO 72622
// result := Replace ( result , result + 1 , un ) ;
72593: LD_ADDR_VAR 0 3
72597: PUSH
72598: LD_VAR 0 3
72602: PPUSH
72603: LD_VAR 0 3
72607: PUSH
72608: LD_INT 1
72610: PLUS
72611: PPUSH
72612: LD_VAR 0 4
72616: PPUSH
72617: CALL_OW 1
72621: ST_TO_ADDR
72622: GO 72548
72624: POP
72625: POP
// end ;
72626: LD_VAR 0 3
72630: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
72635: PPUSH
72636: PPUSH
72637: PPUSH
72638: PPUSH
72639: PPUSH
// result := [ ] ;
72640: LD_ADDR_VAR 0 4
72644: PUSH
72645: EMPTY
72646: ST_TO_ADDR
// if x - r < 0 then
72647: LD_VAR 0 1
72651: PUSH
72652: LD_VAR 0 3
72656: MINUS
72657: PUSH
72658: LD_INT 0
72660: LESS
72661: IFFALSE 72673
// min_x := 0 else
72663: LD_ADDR_VAR 0 8
72667: PUSH
72668: LD_INT 0
72670: ST_TO_ADDR
72671: GO 72689
// min_x := x - r ;
72673: LD_ADDR_VAR 0 8
72677: PUSH
72678: LD_VAR 0 1
72682: PUSH
72683: LD_VAR 0 3
72687: MINUS
72688: ST_TO_ADDR
// if y - r < 0 then
72689: LD_VAR 0 2
72693: PUSH
72694: LD_VAR 0 3
72698: MINUS
72699: PUSH
72700: LD_INT 0
72702: LESS
72703: IFFALSE 72715
// min_y := 0 else
72705: LD_ADDR_VAR 0 7
72709: PUSH
72710: LD_INT 0
72712: ST_TO_ADDR
72713: GO 72731
// min_y := y - r ;
72715: LD_ADDR_VAR 0 7
72719: PUSH
72720: LD_VAR 0 2
72724: PUSH
72725: LD_VAR 0 3
72729: MINUS
72730: ST_TO_ADDR
// max_x := x + r ;
72731: LD_ADDR_VAR 0 9
72735: PUSH
72736: LD_VAR 0 1
72740: PUSH
72741: LD_VAR 0 3
72745: PLUS
72746: ST_TO_ADDR
// max_y := y + r ;
72747: LD_ADDR_VAR 0 10
72751: PUSH
72752: LD_VAR 0 2
72756: PUSH
72757: LD_VAR 0 3
72761: PLUS
72762: ST_TO_ADDR
// for _x = min_x to max_x do
72763: LD_ADDR_VAR 0 5
72767: PUSH
72768: DOUBLE
72769: LD_VAR 0 8
72773: DEC
72774: ST_TO_ADDR
72775: LD_VAR 0 9
72779: PUSH
72780: FOR_TO
72781: IFFALSE 72882
// for _y = min_y to max_y do
72783: LD_ADDR_VAR 0 6
72787: PUSH
72788: DOUBLE
72789: LD_VAR 0 7
72793: DEC
72794: ST_TO_ADDR
72795: LD_VAR 0 10
72799: PUSH
72800: FOR_TO
72801: IFFALSE 72878
// begin if not ValidHex ( _x , _y ) then
72803: LD_VAR 0 5
72807: PPUSH
72808: LD_VAR 0 6
72812: PPUSH
72813: CALL_OW 488
72817: NOT
72818: IFFALSE 72822
// continue ;
72820: GO 72800
// if GetResourceTypeXY ( _x , _y ) then
72822: LD_VAR 0 5
72826: PPUSH
72827: LD_VAR 0 6
72831: PPUSH
72832: CALL_OW 283
72836: IFFALSE 72876
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72838: LD_ADDR_VAR 0 4
72842: PUSH
72843: LD_VAR 0 4
72847: PPUSH
72848: LD_VAR 0 4
72852: PUSH
72853: LD_INT 1
72855: PLUS
72856: PPUSH
72857: LD_VAR 0 5
72861: PUSH
72862: LD_VAR 0 6
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PPUSH
72871: CALL_OW 1
72875: ST_TO_ADDR
// end ;
72876: GO 72800
72878: POP
72879: POP
72880: GO 72780
72882: POP
72883: POP
// end ;
72884: LD_VAR 0 4
72888: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72889: LD_INT 0
72891: PPUSH
72892: PPUSH
72893: PPUSH
72894: PPUSH
72895: PPUSH
72896: PPUSH
72897: PPUSH
72898: PPUSH
// if not units then
72899: LD_VAR 0 1
72903: NOT
72904: IFFALSE 72908
// exit ;
72906: GO 73434
// result := UnitFilter ( units , [ f_ok ] ) ;
72908: LD_ADDR_VAR 0 3
72912: PUSH
72913: LD_VAR 0 1
72917: PPUSH
72918: LD_INT 50
72920: PUSH
72921: EMPTY
72922: LIST
72923: PPUSH
72924: CALL_OW 72
72928: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72929: LD_ADDR_VAR 0 8
72933: PUSH
72934: LD_VAR 0 1
72938: PUSH
72939: LD_INT 1
72941: ARRAY
72942: PPUSH
72943: CALL_OW 255
72947: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72948: LD_ADDR_VAR 0 10
72952: PUSH
72953: LD_INT 29
72955: PUSH
72956: LD_EXP 36
72960: PUSH
72961: LD_INT 49
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: LIST
72968: ST_TO_ADDR
// if not result then
72969: LD_VAR 0 3
72973: NOT
72974: IFFALSE 72978
// exit ;
72976: GO 73434
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72978: LD_ADDR_VAR 0 5
72982: PUSH
72983: LD_INT 81
72985: PUSH
72986: LD_VAR 0 8
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PPUSH
72995: CALL_OW 69
72999: ST_TO_ADDR
// for i in result do
73000: LD_ADDR_VAR 0 4
73004: PUSH
73005: LD_VAR 0 3
73009: PUSH
73010: FOR_IN
73011: IFFALSE 73432
// begin tag := GetTag ( i ) + 1 ;
73013: LD_ADDR_VAR 0 9
73017: PUSH
73018: LD_VAR 0 4
73022: PPUSH
73023: CALL_OW 110
73027: PUSH
73028: LD_INT 1
73030: PLUS
73031: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73032: LD_ADDR_VAR 0 7
73036: PUSH
73037: LD_VAR 0 4
73041: PPUSH
73042: CALL_OW 250
73046: PPUSH
73047: LD_VAR 0 4
73051: PPUSH
73052: CALL_OW 251
73056: PPUSH
73057: LD_INT 6
73059: PPUSH
73060: CALL 72631 0 3
73064: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73065: LD_VAR 0 4
73069: PPUSH
73070: CALL_OW 247
73074: PUSH
73075: LD_INT 2
73077: EQUAL
73078: PUSH
73079: LD_VAR 0 7
73083: AND
73084: PUSH
73085: LD_VAR 0 4
73089: PPUSH
73090: CALL_OW 264
73094: PUSH
73095: LD_VAR 0 10
73099: IN
73100: NOT
73101: AND
73102: IFFALSE 73141
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73104: LD_VAR 0 4
73108: PPUSH
73109: LD_VAR 0 7
73113: PUSH
73114: LD_INT 1
73116: ARRAY
73117: PUSH
73118: LD_INT 1
73120: ARRAY
73121: PPUSH
73122: LD_VAR 0 7
73126: PUSH
73127: LD_INT 1
73129: ARRAY
73130: PUSH
73131: LD_INT 2
73133: ARRAY
73134: PPUSH
73135: CALL_OW 116
73139: GO 73430
// if path > tag then
73141: LD_VAR 0 2
73145: PUSH
73146: LD_VAR 0 9
73150: GREATER
73151: IFFALSE 73359
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73153: LD_ADDR_VAR 0 6
73157: PUSH
73158: LD_VAR 0 5
73162: PPUSH
73163: LD_INT 91
73165: PUSH
73166: LD_VAR 0 4
73170: PUSH
73171: LD_INT 8
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: LIST
73178: PPUSH
73179: CALL_OW 72
73183: ST_TO_ADDR
// if nearEnemy then
73184: LD_VAR 0 6
73188: IFFALSE 73257
// begin if GetWeapon ( i ) = ru_time_lapser then
73190: LD_VAR 0 4
73194: PPUSH
73195: CALL_OW 264
73199: PUSH
73200: LD_INT 49
73202: EQUAL
73203: IFFALSE 73231
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73205: LD_VAR 0 4
73209: PPUSH
73210: LD_VAR 0 6
73214: PPUSH
73215: LD_VAR 0 4
73219: PPUSH
73220: CALL_OW 74
73224: PPUSH
73225: CALL_OW 112
73229: GO 73255
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73231: LD_VAR 0 4
73235: PPUSH
73236: LD_VAR 0 6
73240: PPUSH
73241: LD_VAR 0 4
73245: PPUSH
73246: CALL_OW 74
73250: PPUSH
73251: CALL_OW 115
// end else
73255: GO 73357
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73257: LD_VAR 0 4
73261: PPUSH
73262: LD_VAR 0 2
73266: PUSH
73267: LD_VAR 0 9
73271: ARRAY
73272: PUSH
73273: LD_INT 1
73275: ARRAY
73276: PPUSH
73277: LD_VAR 0 2
73281: PUSH
73282: LD_VAR 0 9
73286: ARRAY
73287: PUSH
73288: LD_INT 2
73290: ARRAY
73291: PPUSH
73292: CALL_OW 297
73296: PUSH
73297: LD_INT 6
73299: GREATER
73300: IFFALSE 73343
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73302: LD_VAR 0 4
73306: PPUSH
73307: LD_VAR 0 2
73311: PUSH
73312: LD_VAR 0 9
73316: ARRAY
73317: PUSH
73318: LD_INT 1
73320: ARRAY
73321: PPUSH
73322: LD_VAR 0 2
73326: PUSH
73327: LD_VAR 0 9
73331: ARRAY
73332: PUSH
73333: LD_INT 2
73335: ARRAY
73336: PPUSH
73337: CALL_OW 114
73341: GO 73357
// SetTag ( i , tag ) ;
73343: LD_VAR 0 4
73347: PPUSH
73348: LD_VAR 0 9
73352: PPUSH
73353: CALL_OW 109
// end else
73357: GO 73430
// if enemy then
73359: LD_VAR 0 5
73363: IFFALSE 73430
// begin if GetWeapon ( i ) = ru_time_lapser then
73365: LD_VAR 0 4
73369: PPUSH
73370: CALL_OW 264
73374: PUSH
73375: LD_INT 49
73377: EQUAL
73378: IFFALSE 73406
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73380: LD_VAR 0 4
73384: PPUSH
73385: LD_VAR 0 5
73389: PPUSH
73390: LD_VAR 0 4
73394: PPUSH
73395: CALL_OW 74
73399: PPUSH
73400: CALL_OW 112
73404: GO 73430
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73406: LD_VAR 0 4
73410: PPUSH
73411: LD_VAR 0 5
73415: PPUSH
73416: LD_VAR 0 4
73420: PPUSH
73421: CALL_OW 74
73425: PPUSH
73426: CALL_OW 115
// end ; end ;
73430: GO 73010
73432: POP
73433: POP
// end ;
73434: LD_VAR 0 3
73438: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73439: LD_INT 0
73441: PPUSH
73442: PPUSH
73443: PPUSH
// if not unit or IsInUnit ( unit ) then
73444: LD_VAR 0 1
73448: NOT
73449: PUSH
73450: LD_VAR 0 1
73454: PPUSH
73455: CALL_OW 310
73459: OR
73460: IFFALSE 73464
// exit ;
73462: GO 73555
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73464: LD_ADDR_VAR 0 4
73468: PUSH
73469: LD_VAR 0 1
73473: PPUSH
73474: CALL_OW 250
73478: PPUSH
73479: LD_VAR 0 2
73483: PPUSH
73484: LD_INT 1
73486: PPUSH
73487: CALL_OW 272
73491: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73492: LD_ADDR_VAR 0 5
73496: PUSH
73497: LD_VAR 0 1
73501: PPUSH
73502: CALL_OW 251
73506: PPUSH
73507: LD_VAR 0 2
73511: PPUSH
73512: LD_INT 1
73514: PPUSH
73515: CALL_OW 273
73519: ST_TO_ADDR
// if ValidHex ( x , y ) then
73520: LD_VAR 0 4
73524: PPUSH
73525: LD_VAR 0 5
73529: PPUSH
73530: CALL_OW 488
73534: IFFALSE 73555
// ComTurnXY ( unit , x , y ) ;
73536: LD_VAR 0 1
73540: PPUSH
73541: LD_VAR 0 4
73545: PPUSH
73546: LD_VAR 0 5
73550: PPUSH
73551: CALL_OW 118
// end ;
73555: LD_VAR 0 3
73559: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73560: LD_INT 0
73562: PPUSH
73563: PPUSH
// result := false ;
73564: LD_ADDR_VAR 0 3
73568: PUSH
73569: LD_INT 0
73571: ST_TO_ADDR
// if not units then
73572: LD_VAR 0 2
73576: NOT
73577: IFFALSE 73581
// exit ;
73579: GO 73626
// for i in units do
73581: LD_ADDR_VAR 0 4
73585: PUSH
73586: LD_VAR 0 2
73590: PUSH
73591: FOR_IN
73592: IFFALSE 73624
// if See ( side , i ) then
73594: LD_VAR 0 1
73598: PPUSH
73599: LD_VAR 0 4
73603: PPUSH
73604: CALL_OW 292
73608: IFFALSE 73622
// begin result := true ;
73610: LD_ADDR_VAR 0 3
73614: PUSH
73615: LD_INT 1
73617: ST_TO_ADDR
// exit ;
73618: POP
73619: POP
73620: GO 73626
// end ;
73622: GO 73591
73624: POP
73625: POP
// end ;
73626: LD_VAR 0 3
73630: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73631: LD_INT 0
73633: PPUSH
73634: PPUSH
73635: PPUSH
73636: PPUSH
// if not unit or not points then
73637: LD_VAR 0 1
73641: NOT
73642: PUSH
73643: LD_VAR 0 2
73647: NOT
73648: OR
73649: IFFALSE 73653
// exit ;
73651: GO 73743
// dist := 99999 ;
73653: LD_ADDR_VAR 0 5
73657: PUSH
73658: LD_INT 99999
73660: ST_TO_ADDR
// for i in points do
73661: LD_ADDR_VAR 0 4
73665: PUSH
73666: LD_VAR 0 2
73670: PUSH
73671: FOR_IN
73672: IFFALSE 73741
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73674: LD_ADDR_VAR 0 6
73678: PUSH
73679: LD_VAR 0 1
73683: PPUSH
73684: LD_VAR 0 4
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PPUSH
73693: LD_VAR 0 4
73697: PUSH
73698: LD_INT 2
73700: ARRAY
73701: PPUSH
73702: CALL_OW 297
73706: ST_TO_ADDR
// if tmpDist < dist then
73707: LD_VAR 0 6
73711: PUSH
73712: LD_VAR 0 5
73716: LESS
73717: IFFALSE 73739
// begin result := i ;
73719: LD_ADDR_VAR 0 3
73723: PUSH
73724: LD_VAR 0 4
73728: ST_TO_ADDR
// dist := tmpDist ;
73729: LD_ADDR_VAR 0 5
73733: PUSH
73734: LD_VAR 0 6
73738: ST_TO_ADDR
// end ; end ;
73739: GO 73671
73741: POP
73742: POP
// end ;
73743: LD_VAR 0 3
73747: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73748: LD_INT 0
73750: PPUSH
// uc_side := side ;
73751: LD_ADDR_OWVAR 20
73755: PUSH
73756: LD_VAR 0 1
73760: ST_TO_ADDR
// uc_nation := 3 ;
73761: LD_ADDR_OWVAR 21
73765: PUSH
73766: LD_INT 3
73768: ST_TO_ADDR
// vc_chassis := 25 ;
73769: LD_ADDR_OWVAR 37
73773: PUSH
73774: LD_INT 25
73776: ST_TO_ADDR
// vc_engine := engine_siberite ;
73777: LD_ADDR_OWVAR 39
73781: PUSH
73782: LD_INT 3
73784: ST_TO_ADDR
// vc_control := control_computer ;
73785: LD_ADDR_OWVAR 38
73789: PUSH
73790: LD_INT 3
73792: ST_TO_ADDR
// vc_weapon := 59 ;
73793: LD_ADDR_OWVAR 40
73797: PUSH
73798: LD_INT 59
73800: ST_TO_ADDR
// result := CreateVehicle ;
73801: LD_ADDR_VAR 0 5
73805: PUSH
73806: CALL_OW 45
73810: ST_TO_ADDR
// SetDir ( result , d ) ;
73811: LD_VAR 0 5
73815: PPUSH
73816: LD_VAR 0 4
73820: PPUSH
73821: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73825: LD_VAR 0 5
73829: PPUSH
73830: LD_VAR 0 2
73834: PPUSH
73835: LD_VAR 0 3
73839: PPUSH
73840: LD_INT 0
73842: PPUSH
73843: CALL_OW 48
// end ;
73847: LD_VAR 0 5
73851: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73852: LD_INT 0
73854: PPUSH
73855: PPUSH
73856: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73857: LD_ADDR_VAR 0 2
73861: PUSH
73862: LD_INT 0
73864: PUSH
73865: LD_INT 0
73867: PUSH
73868: LD_INT 0
73870: PUSH
73871: LD_INT 0
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73880: LD_VAR 0 1
73884: NOT
73885: PUSH
73886: LD_VAR 0 1
73890: PPUSH
73891: CALL_OW 264
73895: PUSH
73896: LD_INT 12
73898: PUSH
73899: LD_INT 51
73901: PUSH
73902: LD_INT 32
73904: PUSH
73905: LD_EXP 33
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: IN
73916: NOT
73917: OR
73918: IFFALSE 73922
// exit ;
73920: GO 74020
// for i := 1 to 3 do
73922: LD_ADDR_VAR 0 3
73926: PUSH
73927: DOUBLE
73928: LD_INT 1
73930: DEC
73931: ST_TO_ADDR
73932: LD_INT 3
73934: PUSH
73935: FOR_TO
73936: IFFALSE 74018
// begin tmp := GetCargo ( cargo , i ) ;
73938: LD_ADDR_VAR 0 4
73942: PUSH
73943: LD_VAR 0 1
73947: PPUSH
73948: LD_VAR 0 3
73952: PPUSH
73953: CALL_OW 289
73957: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: LD_VAR 0 2
73967: PPUSH
73968: LD_VAR 0 3
73972: PPUSH
73973: LD_VAR 0 4
73977: PPUSH
73978: CALL_OW 1
73982: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73983: LD_ADDR_VAR 0 2
73987: PUSH
73988: LD_VAR 0 2
73992: PPUSH
73993: LD_INT 4
73995: PPUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_INT 4
74003: ARRAY
74004: PUSH
74005: LD_VAR 0 4
74009: PLUS
74010: PPUSH
74011: CALL_OW 1
74015: ST_TO_ADDR
// end ;
74016: GO 73935
74018: POP
74019: POP
// end ;
74020: LD_VAR 0 2
74024: RET
// export function Length ( array ) ; begin
74025: LD_INT 0
74027: PPUSH
// result := array + 0 ;
74028: LD_ADDR_VAR 0 2
74032: PUSH
74033: LD_VAR 0 1
74037: PUSH
74038: LD_INT 0
74040: PLUS
74041: ST_TO_ADDR
// end ;
74042: LD_VAR 0 2
74046: RET
// export function PrepareArray ( array ) ; begin
74047: LD_INT 0
74049: PPUSH
// result := array diff 0 ;
74050: LD_ADDR_VAR 0 2
74054: PUSH
74055: LD_VAR 0 1
74059: PUSH
74060: LD_INT 0
74062: DIFF
74063: ST_TO_ADDR
// if not result [ 1 ] then
74064: LD_VAR 0 2
74068: PUSH
74069: LD_INT 1
74071: ARRAY
74072: NOT
74073: IFFALSE 74093
// result := Delete ( result , 1 ) ;
74075: LD_ADDR_VAR 0 2
74079: PUSH
74080: LD_VAR 0 2
74084: PPUSH
74085: LD_INT 1
74087: PPUSH
74088: CALL_OW 3
74092: ST_TO_ADDR
// end ; end_of_file
74093: LD_VAR 0 2
74097: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74098: LD_VAR 0 1
74102: PUSH
74103: LD_INT 200
74105: DOUBLE
74106: GREATEREQUAL
74107: IFFALSE 74115
74109: LD_INT 299
74111: DOUBLE
74112: LESSEQUAL
74113: IFTRUE 74117
74115: GO 74149
74117: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74118: LD_VAR 0 1
74122: PPUSH
74123: LD_VAR 0 2
74127: PPUSH
74128: LD_VAR 0 3
74132: PPUSH
74133: LD_VAR 0 4
74137: PPUSH
74138: LD_VAR 0 5
74142: PPUSH
74143: CALL 28949 0 5
74147: GO 74226
74149: LD_INT 300
74151: DOUBLE
74152: GREATEREQUAL
74153: IFFALSE 74161
74155: LD_INT 399
74157: DOUBLE
74158: LESSEQUAL
74159: IFTRUE 74163
74161: GO 74225
74163: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74164: LD_VAR 0 1
74168: PPUSH
74169: LD_VAR 0 2
74173: PPUSH
74174: LD_VAR 0 3
74178: PPUSH
74179: LD_VAR 0 4
74183: PPUSH
74184: LD_VAR 0 5
74188: PPUSH
74189: LD_VAR 0 6
74193: PPUSH
74194: LD_VAR 0 7
74198: PPUSH
74199: LD_VAR 0 8
74203: PPUSH
74204: LD_VAR 0 9
74208: PPUSH
74209: LD_VAR 0 10
74213: PPUSH
74214: LD_VAR 0 11
74218: PPUSH
74219: CALL 25278 0 11
74223: GO 74226
74225: POP
// end ;
74226: PPOPN 11
74228: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74229: LD_VAR 0 1
74233: PPUSH
74234: LD_VAR 0 2
74238: PPUSH
74239: LD_VAR 0 3
74243: PPUSH
74244: LD_VAR 0 4
74248: PPUSH
74249: LD_VAR 0 5
74253: PPUSH
74254: CALL 28685 0 5
// end ; end_of_file
74258: PPOPN 5
74260: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74261: LD_VAR 0 1
74265: PPUSH
74266: LD_VAR 0 2
74270: PPUSH
74271: LD_VAR 0 3
74275: PPUSH
74276: LD_VAR 0 4
74280: PPUSH
74281: LD_VAR 0 5
74285: PPUSH
74286: LD_VAR 0 6
74290: PPUSH
74291: CALL 12971 0 6
// end ;
74295: PPOPN 6
74297: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74298: LD_INT 0
74300: PPUSH
// begin if not units then
74301: LD_VAR 0 1
74305: NOT
74306: IFFALSE 74310
// exit ;
74308: GO 74310
// end ;
74310: PPOPN 7
74312: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74313: CALL 12942 0 0
// end ;
74317: PPOPN 1
74319: END
