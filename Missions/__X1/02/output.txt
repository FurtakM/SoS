// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11302 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29729 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29729 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11242
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10337: LD_INT 22
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 25
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 34
10362: PUSH
10363: LD_INT 4
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: IFFALSE 10478
// begin Query ( QEnemyInSight ) ;
10385: LD_STRING QEnemyInSight
10387: PPUSH
10388: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10399: LD_INT 22
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: NOT
10446: PUSH
10447: LD_INT 22
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 23
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: AND
10476: IFFALSE 10392
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10478: LD_ADDR_VAR 0 1
10482: PUSH
10483: LD_INT 22
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 23
10495: PUSH
10496: LD_INT 0
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 69
10511: ST_TO_ADDR
// InGameOn ;
10512: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10516: LD_VAR 0 1
10520: PPUSH
10521: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10525: LD_VAR 0 1
10529: PPUSH
10530: LD_EXP 27
10534: PPUSH
10535: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 119
// wait ( 0 0$1 ) ;
10553: LD_INT 35
10555: PPUSH
10556: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10560: LD_EXP 27
10564: PPUSH
10565: LD_STRING DA-1-tame-a
10567: PPUSH
10568: CALL_OW 88
// if IsOk ( Mike ) then
10572: LD_EXP 25
10576: PPUSH
10577: CALL_OW 302
10581: IFFALSE 10619
// begin Say ( Mike , DM-1-tame-a ) ;
10583: LD_EXP 25
10587: PPUSH
10588: LD_STRING DM-1-tame-a
10590: PPUSH
10591: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10595: LD_EXP 29
10599: PPUSH
10600: LD_STRING DS-1-tame-a
10602: PPUSH
10603: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10607: LD_EXP 25
10611: PPUSH
10612: LD_STRING DM-2-tame-a
10614: PPUSH
10615: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10619: LD_INT 105
10621: PPUSH
10622: CALL_OW 67
// PrepareFarmer ;
10626: CALL 11917 0 0
// CenterOnUnits ( Farmer ) ;
10630: LD_EXP 31
10634: PPUSH
10635: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10639: LD_EXP 31
10643: PPUSH
10644: LD_INT 105
10646: PPUSH
10647: LD_INT 59
10649: PPUSH
10650: CALL_OW 111
// AddComHold ( Farmer ) ;
10654: LD_EXP 31
10658: PPUSH
10659: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10663: LD_EXP 31
10667: PPUSH
10668: LD_STRING DF-1-end
10670: PPUSH
10671: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10675: LD_EXP 27
10679: PPUSH
10680: LD_STRING DA-1-end
10682: PPUSH
10683: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10687: LD_EXP 31
10691: PPUSH
10692: LD_STRING DF-2-end
10694: PPUSH
10695: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10699: LD_EXP 27
10703: PPUSH
10704: LD_STRING DA-2-end
10706: PPUSH
10707: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10711: LD_EXP 31
10715: PPUSH
10716: LD_STRING DF-3-end
10718: PPUSH
10719: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING DH-3-end
10730: PPUSH
10731: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10735: LD_EXP 31
10739: PPUSH
10740: LD_STRING DF-4-end
10742: PPUSH
10743: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10747: LD_OWVAR 1
10751: PUSH
10752: LD_INT 52500
10754: PUSH
10755: LD_INT 47250
10757: PUSH
10758: LD_INT 42000
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PUSH
10766: LD_OWVAR 67
10770: ARRAY
10771: LESSEQUAL
10772: IFFALSE 10786
// AddMedal ( med1 , 1 ) else
10774: LD_STRING med1
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
10784: GO 10797
// AddMedal ( med1 , - 1 ) ;
10786: LD_STRING med1
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10797: LD_INT 22
10799: PUSH
10800: LD_INT 1
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 4
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: PUSH
10826: LD_INT 0
10828: EQUAL
10829: PUSH
10830: LD_EXP 12
10834: NOT
10835: AND
10836: IFFALSE 10850
// AddMedal ( med2 , 1 ) else
10838: LD_STRING med2
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 101
10848: GO 10861
// AddMedal ( med2 , - 1 ) ;
10850: LD_STRING med2
10852: PPUSH
10853: LD_INT 1
10855: NEG
10856: PPUSH
10857: CALL_OW 101
// if trickyMove then
10861: LD_EXP 15
10865: IFFALSE 10879
// AddMedal ( med3 , 1 ) else
10867: LD_STRING med3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 101
10877: GO 10909
// if spottedBeforeRadio then
10879: LD_EXP 6
10883: IFFALSE 10898
// AddMedal ( med3 , - 2 ) else
10885: LD_STRING med3
10887: PPUSH
10888: LD_INT 2
10890: NEG
10891: PPUSH
10892: CALL_OW 101
10896: GO 10909
// AddMedal ( med3 , - 1 ) ;
10898: LD_STRING med3
10900: PPUSH
10901: LD_INT 1
10903: NEG
10904: PPUSH
10905: CALL_OW 101
// GiveMedals ( MAIN ) ;
10909: LD_STRING MAIN
10911: PPUSH
10912: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10916: LD_VAR 0 1
10920: PPUSH
10921: LD_STRING 02_ape
10923: PPUSH
10924: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 23
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10982: LD_EXP 23
10986: PPUSH
10987: LD_STRING 02_Heike
10989: PPUSH
10990: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10994: LD_EXP 27
10998: PPUSH
10999: LD_STRING 02_Aviradze
11001: PPUSH
11002: CALL_OW 38
// if Givi then
11006: LD_EXP 24
11010: IFFALSE 11024
// SaveCharacters ( Givi , 02_Givi ) ;
11012: LD_EXP 24
11016: PPUSH
11017: LD_STRING 02_Givi
11019: PPUSH
11020: CALL_OW 38
// if Mike then
11024: LD_EXP 25
11028: IFFALSE 11042
// SaveCharacters ( Mike , 02_Mike ) ;
11030: LD_EXP 25
11034: PPUSH
11035: LD_STRING 02_Mike
11037: PPUSH
11038: CALL_OW 38
// if Kamil then
11042: LD_EXP 26
11046: IFFALSE 11060
// SaveCharacters ( Kamil , 02_Kamil ) ;
11048: LD_EXP 26
11052: PPUSH
11053: LD_STRING 02_Kamil
11055: PPUSH
11056: CALL_OW 38
// if Kaia then
11060: LD_EXP 28
11064: IFFALSE 11078
// SaveCharacters ( Kaia , 02_Kaia ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING 02_Kaia
11073: PPUSH
11074: CALL_OW 38
// if Sophia then
11078: LD_EXP 29
11082: IFFALSE 11096
// SaveCharacters ( Sophia , 02_Sophia ) ;
11084: LD_EXP 29
11088: PPUSH
11089: LD_STRING 02_Sophia
11091: PPUSH
11092: CALL_OW 38
// if Markov then
11096: LD_EXP 30
11100: IFFALSE 11114
// SaveCharacters ( Markov , 02_Markov ) ;
11102: LD_EXP 30
11106: PPUSH
11107: LD_STRING 02_Markov
11109: PPUSH
11110: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11114: LD_VAR 0 1
11118: PUSH
11119: LD_EXP 23
11123: PUSH
11124: LD_EXP 27
11128: PUSH
11129: LD_EXP 24
11133: PUSH
11134: LD_EXP 25
11138: PUSH
11139: LD_EXP 26
11143: PUSH
11144: LD_EXP 29
11148: PUSH
11149: LD_EXP 28
11153: PUSH
11154: LD_EXP 30
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: DIFF
11169: IFFALSE 11234
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11171: LD_VAR 0 1
11175: PUSH
11176: LD_EXP 23
11180: PUSH
11181: LD_EXP 27
11185: PUSH
11186: LD_EXP 24
11190: PUSH
11191: LD_EXP 25
11195: PUSH
11196: LD_EXP 26
11200: PUSH
11201: LD_EXP 29
11205: PUSH
11206: LD_EXP 28
11210: PUSH
11211: LD_EXP 30
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: DIFF
11226: PPUSH
11227: LD_STRING 02_others
11229: PPUSH
11230: CALL_OW 38
// YouWin ;
11234: CALL_OW 103
// InGameOff ;
11238: CALL_OW 9
// end ;
11242: PPOPN 1
11244: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11245: LD_OWVAR 1
11249: PUSH
11250: LD_EXP 13
11254: GREATER
11255: PUSH
11256: LD_EXP 4
11260: AND
11261: IFFALSE 11301
11263: GO 11265
11265: DISABLE
// begin InGameOn ;
11266: CALL_OW 8
// PrepareFarmer ;
11270: CALL 11917 0 0
// CenterNowOnUnits ( Farmer ) ;
11274: LD_EXP 31
11278: PPUSH
11279: CALL_OW 87
// wait ( 0 0$2 ) ;
11283: LD_INT 70
11285: PPUSH
11286: CALL_OW 67
// YouLost ( Farmer ) ;
11290: LD_STRING Farmer
11292: PPUSH
11293: CALL_OW 104
// InGameOff ;
11297: CALL_OW 9
// end ; end_of_file
11301: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11302: LD_INT 0
11304: PPUSH
11305: PPUSH
11306: PPUSH
// uc_side := 2 ;
11307: LD_ADDR_OWVAR 20
11311: PUSH
11312: LD_INT 2
11314: ST_TO_ADDR
// uc_nation := 2 ;
11315: LD_ADDR_OWVAR 21
11319: PUSH
11320: LD_INT 2
11322: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11323: LD_ADDR_EXP 23
11327: PUSH
11328: LD_STRING Heike
11330: PPUSH
11331: LD_EXP 1
11335: NOT
11336: PPUSH
11337: LD_EXP 2
11341: PPUSH
11342: CALL 29729 0 3
11346: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11347: LD_EXP 23
11351: PPUSH
11352: LD_INT 83
11354: PPUSH
11355: LD_INT 72
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11365: LD_ADDR_EXP 24
11369: PUSH
11370: LD_STRING Givi
11372: PPUSH
11373: LD_EXP 1
11377: NOT
11378: PPUSH
11379: LD_EXP 2
11383: PPUSH
11384: CALL 29729 0 3
11388: ST_TO_ADDR
// if Givi then
11389: LD_EXP 24
11393: IFFALSE 11413
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11395: LD_EXP 24
11399: PPUSH
11400: LD_INT 87
11402: PPUSH
11403: LD_INT 76
11405: PPUSH
11406: LD_INT 0
11408: PPUSH
11409: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11413: LD_ADDR_EXP 25
11417: PUSH
11418: LD_STRING Mike
11420: PPUSH
11421: LD_EXP 1
11425: NOT
11426: PPUSH
11427: LD_EXP 2
11431: PPUSH
11432: CALL 29729 0 3
11436: ST_TO_ADDR
// if Mike then
11437: LD_EXP 25
11441: IFFALSE 11461
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11443: LD_EXP 25
11447: PPUSH
11448: LD_INT 84
11450: PPUSH
11451: LD_INT 76
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11461: LD_ADDR_EXP 26
11465: PUSH
11466: LD_STRING Kamil
11468: PPUSH
11469: LD_EXP 1
11473: NOT
11474: PPUSH
11475: LD_EXP 2
11479: PPUSH
11480: CALL 29729 0 3
11484: ST_TO_ADDR
// if Kamil then
11485: LD_EXP 26
11489: IFFALSE 11509
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11491: LD_EXP 26
11495: PPUSH
11496: LD_INT 85
11498: PPUSH
11499: LD_INT 78
11501: PPUSH
11502: LD_INT 0
11504: PPUSH
11505: CALL_OW 48
// uc_side := 5 ;
11509: LD_ADDR_OWVAR 20
11513: PUSH
11514: LD_INT 5
11516: ST_TO_ADDR
// uc_nation := 2 ;
11517: LD_ADDR_OWVAR 21
11521: PUSH
11522: LD_INT 2
11524: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11525: LD_ADDR_EXP 27
11529: PUSH
11530: LD_STRING Aviradze
11532: PPUSH
11533: LD_INT 0
11535: PPUSH
11536: LD_STRING 
11538: PPUSH
11539: CALL 29729 0 3
11543: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11544: LD_EXP 27
11548: PPUSH
11549: LD_INT 106
11551: PPUSH
11552: LD_INT 38
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11562: LD_EXP 27
11566: PPUSH
11567: LD_INT 103
11569: PPUSH
11570: LD_INT 38
11572: PPUSH
11573: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11577: LD_ADDR_EXP 28
11581: PUSH
11582: LD_STRING Kaia
11584: PPUSH
11585: LD_INT 0
11587: PPUSH
11588: LD_STRING 
11590: PPUSH
11591: CALL 29729 0 3
11595: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11596: LD_EXP 28
11600: PPUSH
11601: LD_INT 100
11603: PPUSH
11604: LD_INT 34
11606: PPUSH
11607: LD_INT 0
11609: PPUSH
11610: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_INT 100
11621: PPUSH
11622: LD_INT 39
11624: PPUSH
11625: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11629: LD_ADDR_EXP 29
11633: PUSH
11634: LD_STRING Sophia
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: LD_STRING 
11642: PPUSH
11643: CALL 29729 0 3
11647: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11648: LD_EXP 29
11652: PPUSH
11653: LD_INT 109
11655: PPUSH
11656: LD_INT 50
11658: PPUSH
11659: LD_INT 0
11661: PPUSH
11662: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11666: LD_EXP 29
11670: PPUSH
11671: LD_INT 100
11673: PPUSH
11674: LD_INT 39
11676: PPUSH
11677: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11681: LD_ADDR_EXP 30
11685: PUSH
11686: LD_STRING Markov
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: LD_STRING 
11694: PPUSH
11695: CALL 29729 0 3
11699: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11700: LD_INT 5
11702: PPUSH
11703: LD_INT 3
11705: PPUSH
11706: LD_INT 21
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: LD_INT 42
11717: PPUSH
11718: LD_INT 90
11720: PUSH
11721: LD_INT 70
11723: PUSH
11724: LD_INT 60
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: LD_OWVAR 67
11736: ARRAY
11737: PPUSH
11738: CALL 237 0 7
// veh := CreateVehicle ;
11742: LD_ADDR_VAR 0 3
11746: PUSH
11747: CALL_OW 45
11751: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11752: LD_VAR 0 3
11756: PPUSH
11757: LD_INT 4
11759: PPUSH
11760: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 109
11771: PPUSH
11772: LD_INT 38
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11782: LD_EXP 30
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11796: LD_EXP 28
11800: PPUSH
11801: LD_EXP 27
11805: PPUSH
11806: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11810: LD_EXP 27
11814: PPUSH
11815: LD_EXP 28
11819: PPUSH
11820: CALL_OW 119
// if not Givi or not Mike then
11824: LD_EXP 24
11828: NOT
11829: PUSH
11830: LD_EXP 25
11834: NOT
11835: OR
11836: IFFALSE 11912
// begin uc_nation := 2 ;
11838: LD_ADDR_OWVAR 21
11842: PUSH
11843: LD_INT 2
11845: ST_TO_ADDR
// uc_side := 5 ;
11846: LD_ADDR_OWVAR 20
11850: PUSH
11851: LD_INT 5
11853: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11854: LD_INT 1
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 380
// un := CreateHuman ;
11867: LD_ADDR_VAR 0 2
11871: PUSH
11872: CALL_OW 44
11876: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11877: LD_VAR 0 2
11881: PPUSH
11882: LD_INT 112
11884: PPUSH
11885: LD_INT 40
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_EXP 27
11907: PPUSH
11908: CALL_OW 119
// end ; end ;
11912: LD_VAR 0 1
11916: RET
// export function PrepareFarmer ; var i ; begin
11917: LD_INT 0
11919: PPUSH
11920: PPUSH
// uc_side := 5 ;
11921: LD_ADDR_OWVAR 20
11925: PUSH
11926: LD_INT 5
11928: ST_TO_ADDR
// uc_nation := 2 ;
11929: LD_ADDR_OWVAR 21
11933: PUSH
11934: LD_INT 2
11936: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11937: LD_ADDR_EXP 31
11941: PUSH
11942: LD_STRING Farmer
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: LD_STRING 
11950: PPUSH
11951: CALL 29729 0 3
11955: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11956: LD_EXP 31
11960: PPUSH
11961: LD_INT 106
11963: PPUSH
11964: LD_INT 62
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 48
// for i := 1 to 5 do
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_INT 5
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12026
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11990: LD_INT 1
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12003: CALL_OW 44
12007: PPUSH
12008: LD_INT 105
12010: PPUSH
12011: LD_INT 64
12013: PPUSH
12014: LD_INT 3
12016: PPUSH
12017: LD_INT 0
12019: PPUSH
12020: CALL_OW 50
// end ;
12024: GO 11987
12026: POP
12027: POP
// end ; end_of_file
12028: LD_VAR 0 1
12032: RET
// every 2 2$20 + 0 0$10 do
12033: GO 12035
12035: DISABLE
// begin enable ;
12036: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12037: LD_INT 1
12039: PPUSH
12040: LD_INT 5
12042: PPUSH
12043: CALL_OW 12
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 55
// if tick > 6 6$00 then
12058: LD_OWVAR 1
12062: PUSH
12063: LD_INT 12600
12065: GREATER
12066: IFFALSE 12069
// disable ;
12068: DISABLE
// end ; end_of_file
12069: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12070: LD_VAR 0 1
12074: PUSH
12075: LD_EXP 23
12079: EQUAL
12080: IFFALSE 12089
// YouLost ( Heike ) ;
12082: LD_STRING Heike
12084: PPUSH
12085: CALL_OW 104
// if un = Aviradze then
12089: LD_VAR 0 1
12093: PUSH
12094: LD_EXP 27
12098: EQUAL
12099: IFFALSE 12108
// YouLost ( Aviradze ) ;
12101: LD_STRING Aviradze
12103: PPUSH
12104: CALL_OW 104
// if un = usLab then
12108: LD_VAR 0 1
12112: PUSH
12113: LD_INT 3
12115: EQUAL
12116: IFFALSE 12125
// YouLost ( Lab ) ;
12118: LD_STRING Lab
12120: PPUSH
12121: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12125: LD_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 23
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: PUSH
12170: LD_EXP 23
12174: PUSH
12175: LD_EXP 27
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: DIFF
12184: IN
12185: PUSH
12186: LD_EXP 4
12190: AND
12191: IFFALSE 12207
// lostCounter := lostCounter + 1 ;
12193: LD_ADDR_EXP 18
12197: PUSH
12198: LD_EXP 18
12202: PUSH
12203: LD_INT 1
12205: PLUS
12206: ST_TO_ADDR
// end ;
12207: PPOPN 1
12209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12210: LD_INT 23
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 25
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 69
12238: PUSH
12239: LD_INT 0
12241: EQUAL
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 69
12271: PUSH
12272: LD_INT 0
12274: EQUAL
12275: AND
12276: IFFALSE 12288
12278: GO 12280
12280: DISABLE
// YouLost ( Eng ) ;
12281: LD_STRING Eng
12283: PPUSH
12284: CALL_OW 104
12288: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12289: LD_VAR 0 1
12293: PUSH
12294: LD_EXP 22
12298: IN
12299: PUSH
12300: LD_VAR 0 2
12304: PUSH
12305: LD_INT 2
12307: EQUAL
12308: AND
12309: IFFALSE 12341
// begin usSci := usSci diff un ;
12311: LD_ADDR_EXP 22
12315: PUSH
12316: LD_EXP 22
12320: PUSH
12321: LD_VAR 0 1
12325: DIFF
12326: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12327: LD_ADDR_EXP 9
12331: PUSH
12332: LD_EXP 9
12336: PUSH
12337: LD_INT 1
12339: PLUS
12340: ST_TO_ADDR
// end ; end ;
12341: PPOPN 3
12343: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 2
12351: EQUAL
12352: PUSH
12353: LD_VAR 0 2
12357: PUSH
12358: LD_INT 5
12360: EQUAL
12361: AND
12362: IFFALSE 12371
// YouLost ( FriendlyFire ) ;
12364: LD_STRING FriendlyFire
12366: PPUSH
12367: CALL_OW 104
// end ; end_of_file
12371: PPOPN 2
12373: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12374: LD_INT 0
12376: PPUSH
// ar_miner := 81 ;
12377: LD_ADDR_EXP 39
12381: PUSH
12382: LD_INT 81
12384: ST_TO_ADDR
// ar_crane := 88 ;
12385: LD_ADDR_EXP 38
12389: PUSH
12390: LD_INT 88
12392: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12393: LD_ADDR_EXP 33
12397: PUSH
12398: LD_INT 89
12400: ST_TO_ADDR
// us_hack := 99 ;
12401: LD_ADDR_EXP 34
12405: PUSH
12406: LD_INT 99
12408: ST_TO_ADDR
// us_artillery := 97 ;
12409: LD_ADDR_EXP 35
12413: PUSH
12414: LD_INT 97
12416: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12417: LD_ADDR_EXP 36
12421: PUSH
12422: LD_INT 91
12424: ST_TO_ADDR
// ar_mortar := 92 ;
12425: LD_ADDR_EXP 37
12429: PUSH
12430: LD_INT 92
12432: ST_TO_ADDR
// ru_radar := 98 ;
12433: LD_ADDR_EXP 32
12437: PUSH
12438: LD_INT 98
12440: ST_TO_ADDR
// tech_Artillery := 80 ;
12441: LD_ADDR_EXP 40
12445: PUSH
12446: LD_INT 80
12448: ST_TO_ADDR
// tech_RadMat := 81 ;
12449: LD_ADDR_EXP 41
12453: PUSH
12454: LD_INT 81
12456: ST_TO_ADDR
// tech_BasicTools := 82 ;
12457: LD_ADDR_EXP 42
12461: PUSH
12462: LD_INT 82
12464: ST_TO_ADDR
// tech_Cargo := 83 ;
12465: LD_ADDR_EXP 43
12469: PUSH
12470: LD_INT 83
12472: ST_TO_ADDR
// tech_Track := 84 ;
12473: LD_ADDR_EXP 44
12477: PUSH
12478: LD_INT 84
12480: ST_TO_ADDR
// tech_Crane := 85 ;
12481: LD_ADDR_EXP 45
12485: PUSH
12486: LD_INT 85
12488: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12489: LD_ADDR_EXP 46
12493: PUSH
12494: LD_INT 86
12496: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12497: LD_ADDR_EXP 47
12501: PUSH
12502: LD_INT 87
12504: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12505: LD_ADDR_EXP 48
12509: PUSH
12510: LD_INT 88
12512: ST_TO_ADDR
// class_mastodont := 31 ;
12513: LD_ADDR_EXP 49
12517: PUSH
12518: LD_INT 31
12520: ST_TO_ADDR
// class_horse := 21 ;
12521: LD_ADDR_EXP 50
12525: PUSH
12526: LD_INT 21
12528: ST_TO_ADDR
// end ;
12529: LD_VAR 0 1
12533: RET
// every 1 do
12534: GO 12536
12536: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12537: CALL 12374 0 0
12541: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12542: LD_INT 0
12544: PPUSH
// if p2 = 100 then
12545: LD_VAR 0 2
12549: PUSH
12550: LD_INT 100
12552: EQUAL
12553: IFFALSE 13502
// begin if not StreamModeActive then
12555: LD_EXP 51
12559: NOT
12560: IFFALSE 12570
// StreamModeActive := true ;
12562: LD_ADDR_EXP 51
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 0 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 0
12577: EQUAL
12578: IFFALSE 12584
// InitStreamMode ;
12580: CALL 13662 0 0
// if p3 = 1 then
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 1
12591: EQUAL
12592: IFFALSE 12602
// sRocket := true ;
12594: LD_ADDR_EXP 56
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if p3 = 2 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 2
12609: EQUAL
12610: IFFALSE 12620
// sSpeed := true ;
12612: LD_ADDR_EXP 55
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if p3 = 3 then
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 3
12627: EQUAL
12628: IFFALSE 12638
// sEngine := true ;
12630: LD_ADDR_EXP 57
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// if p3 = 4 then
12638: LD_VAR 0 3
12642: PUSH
12643: LD_INT 4
12645: EQUAL
12646: IFFALSE 12656
// sSpec := true ;
12648: LD_ADDR_EXP 54
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// if p3 = 5 then
12656: LD_VAR 0 3
12660: PUSH
12661: LD_INT 5
12663: EQUAL
12664: IFFALSE 12674
// sLevel := true ;
12666: LD_ADDR_EXP 58
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// if p3 = 6 then
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 6
12681: EQUAL
12682: IFFALSE 12692
// sArmoury := true ;
12684: LD_ADDR_EXP 59
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if p3 = 7 then
12692: LD_VAR 0 3
12696: PUSH
12697: LD_INT 7
12699: EQUAL
12700: IFFALSE 12710
// sRadar := true ;
12702: LD_ADDR_EXP 60
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// if p3 = 8 then
12710: LD_VAR 0 3
12714: PUSH
12715: LD_INT 8
12717: EQUAL
12718: IFFALSE 12728
// sBunker := true ;
12720: LD_ADDR_EXP 61
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// if p3 = 9 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 9
12735: EQUAL
12736: IFFALSE 12746
// sHack := true ;
12738: LD_ADDR_EXP 62
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// if p3 = 10 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 10
12753: EQUAL
12754: IFFALSE 12764
// sFire := true ;
12756: LD_ADDR_EXP 63
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 11 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 11
12771: EQUAL
12772: IFFALSE 12782
// sRefresh := true ;
12774: LD_ADDR_EXP 64
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 12 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 12
12789: EQUAL
12790: IFFALSE 12800
// sExp := true ;
12792: LD_ADDR_EXP 65
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 13 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 13
12807: EQUAL
12808: IFFALSE 12818
// sDepot := true ;
12810: LD_ADDR_EXP 66
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 14 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 14
12825: EQUAL
12826: IFFALSE 12836
// sFlag := true ;
12828: LD_ADDR_EXP 67
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 15 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 15
12843: EQUAL
12844: IFFALSE 12854
// sKamikadze := true ;
12846: LD_ADDR_EXP 75
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 16 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 16
12861: EQUAL
12862: IFFALSE 12872
// sTroll := true ;
12864: LD_ADDR_EXP 76
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 17 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 17
12879: EQUAL
12880: IFFALSE 12890
// sSlow := true ;
12882: LD_ADDR_EXP 77
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 18 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 18
12897: EQUAL
12898: IFFALSE 12908
// sLack := true ;
12900: LD_ADDR_EXP 78
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 19 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 19
12915: EQUAL
12916: IFFALSE 12926
// sTank := true ;
12918: LD_ADDR_EXP 80
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 20 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 20
12933: EQUAL
12934: IFFALSE 12944
// sRemote := true ;
12936: LD_ADDR_EXP 81
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 21 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 21
12951: EQUAL
12952: IFFALSE 12962
// sPowell := true ;
12954: LD_ADDR_EXP 82
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 22 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 22
12969: EQUAL
12970: IFFALSE 12980
// sTeleport := true ;
12972: LD_ADDR_EXP 85
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 23 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 23
12987: EQUAL
12988: IFFALSE 12998
// sOilTower := true ;
12990: LD_ADDR_EXP 87
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 24 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 24
13005: EQUAL
13006: IFFALSE 13016
// sShovel := true ;
13008: LD_ADDR_EXP 88
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 25 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 25
13023: EQUAL
13024: IFFALSE 13034
// sSheik := true ;
13026: LD_ADDR_EXP 89
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// if p3 = 26 then
13034: LD_VAR 0 3
13038: PUSH
13039: LD_INT 26
13041: EQUAL
13042: IFFALSE 13052
// sEarthquake := true ;
13044: LD_ADDR_EXP 91
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// if p3 = 27 then
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 27
13059: EQUAL
13060: IFFALSE 13070
// sAI := true ;
13062: LD_ADDR_EXP 92
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// if p3 = 28 then
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 28
13077: EQUAL
13078: IFFALSE 13088
// sCargo := true ;
13080: LD_ADDR_EXP 95
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// if p3 = 29 then
13088: LD_VAR 0 3
13092: PUSH
13093: LD_INT 29
13095: EQUAL
13096: IFFALSE 13106
// sDLaser := true ;
13098: LD_ADDR_EXP 96
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// if p3 = 30 then
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 30
13113: EQUAL
13114: IFFALSE 13124
// sExchange := true ;
13116: LD_ADDR_EXP 97
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// if p3 = 31 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_INT 31
13131: EQUAL
13132: IFFALSE 13142
// sFac := true ;
13134: LD_ADDR_EXP 98
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// if p3 = 32 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 32
13149: EQUAL
13150: IFFALSE 13160
// sPower := true ;
13152: LD_ADDR_EXP 99
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 33 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 33
13167: EQUAL
13168: IFFALSE 13178
// sRandom := true ;
13170: LD_ADDR_EXP 100
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 34 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 34
13185: EQUAL
13186: IFFALSE 13196
// sShield := true ;
13188: LD_ADDR_EXP 101
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 35 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 35
13203: EQUAL
13204: IFFALSE 13214
// sTime := true ;
13206: LD_ADDR_EXP 102
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 36 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 36
13221: EQUAL
13222: IFFALSE 13232
// sTools := true ;
13224: LD_ADDR_EXP 103
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 101 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 101
13239: EQUAL
13240: IFFALSE 13250
// sSold := true ;
13242: LD_ADDR_EXP 68
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 102 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 102
13257: EQUAL
13258: IFFALSE 13268
// sDiff := true ;
13260: LD_ADDR_EXP 69
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 103 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 103
13275: EQUAL
13276: IFFALSE 13286
// sFog := true ;
13278: LD_ADDR_EXP 72
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 104 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 104
13293: EQUAL
13294: IFFALSE 13304
// sReset := true ;
13296: LD_ADDR_EXP 73
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 105 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 105
13311: EQUAL
13312: IFFALSE 13322
// sSun := true ;
13314: LD_ADDR_EXP 74
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 106 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 106
13329: EQUAL
13330: IFFALSE 13340
// sTiger := true ;
13332: LD_ADDR_EXP 70
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 107 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 107
13347: EQUAL
13348: IFFALSE 13358
// sBomb := true ;
13350: LD_ADDR_EXP 71
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 108 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 108
13365: EQUAL
13366: IFFALSE 13376
// sWound := true ;
13368: LD_ADDR_EXP 79
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 109 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 109
13383: EQUAL
13384: IFFALSE 13394
// sBetray := true ;
13386: LD_ADDR_EXP 83
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 110 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 110
13401: EQUAL
13402: IFFALSE 13412
// sContamin := true ;
13404: LD_ADDR_EXP 84
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// if p3 = 111 then
13412: LD_VAR 0 3
13416: PUSH
13417: LD_INT 111
13419: EQUAL
13420: IFFALSE 13430
// sOil := true ;
13422: LD_ADDR_EXP 86
13426: PUSH
13427: LD_INT 1
13429: ST_TO_ADDR
// if p3 = 112 then
13430: LD_VAR 0 3
13434: PUSH
13435: LD_INT 112
13437: EQUAL
13438: IFFALSE 13448
// sStu := true ;
13440: LD_ADDR_EXP 90
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// if p3 = 113 then
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 113
13455: EQUAL
13456: IFFALSE 13466
// sBazooka := true ;
13458: LD_ADDR_EXP 93
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if p3 = 114 then
13466: LD_VAR 0 3
13470: PUSH
13471: LD_INT 114
13473: EQUAL
13474: IFFALSE 13484
// sMortar := true ;
13476: LD_ADDR_EXP 94
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// if p3 = 115 then
13484: LD_VAR 0 3
13488: PUSH
13489: LD_INT 115
13491: EQUAL
13492: IFFALSE 13502
// sRanger := true ;
13494: LD_ADDR_EXP 104
13498: PUSH
13499: LD_INT 1
13501: ST_TO_ADDR
// end ; if p2 = 101 then
13502: LD_VAR 0 2
13506: PUSH
13507: LD_INT 101
13509: EQUAL
13510: IFFALSE 13638
// begin case p3 of 1 :
13512: LD_VAR 0 3
13516: PUSH
13517: LD_INT 1
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13532
13525: POP
// hHackUnlimitedResources ; 2 :
13526: CALL 24675 0 0
13530: GO 13638
13532: LD_INT 2
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13547
13540: POP
// hHackSetLevel10 ; 3 :
13541: CALL 24808 0 0
13545: GO 13638
13547: LD_INT 3
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13562
13555: POP
// hHackSetLevel10YourUnits ; 4 :
13556: CALL 24893 0 0
13560: GO 13638
13562: LD_INT 4
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13577
13570: POP
// hHackInvincible ; 5 :
13571: CALL 25341 0 0
13575: GO 13638
13577: LD_INT 5
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13592
13585: POP
// hHackInvisible ; 6 :
13586: CALL 25452 0 0
13590: GO 13638
13592: LD_INT 6
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13607
13600: POP
// hHackChangeYourSide ; 7 :
13601: CALL 25509 0 0
13605: GO 13638
13607: LD_INT 7
13609: DOUBLE
13610: EQUAL
13611: IFTRUE 13615
13613: GO 13622
13615: POP
// hHackChangeUnitSide ; 8 :
13616: CALL 25551 0 0
13620: GO 13638
13622: LD_INT 8
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13637
13630: POP
// hHackFog ; end ;
13631: CALL 25652 0 0
13635: GO 13638
13637: POP
// end ; end ;
13638: LD_VAR 0 7
13642: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13643: GO 13645
13645: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13646: LD_STRING initStreamRollete();
13648: PPUSH
13649: CALL_OW 559
// InitStreamMode ;
13653: CALL 13662 0 0
// DefineStreamItems ( ) ;
13657: CALL 14102 0 0
// end ;
13661: END
// function InitStreamMode ; begin
13662: LD_INT 0
13664: PPUSH
// streamModeActive := false ;
13665: LD_ADDR_EXP 51
13669: PUSH
13670: LD_INT 0
13672: ST_TO_ADDR
// normalCounter := 36 ;
13673: LD_ADDR_EXP 52
13677: PUSH
13678: LD_INT 36
13680: ST_TO_ADDR
// hardcoreCounter := 16 ;
13681: LD_ADDR_EXP 53
13685: PUSH
13686: LD_INT 16
13688: ST_TO_ADDR
// sRocket := false ;
13689: LD_ADDR_EXP 56
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// sSpeed := false ;
13697: LD_ADDR_EXP 55
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// sEngine := false ;
13705: LD_ADDR_EXP 57
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// sSpec := false ;
13713: LD_ADDR_EXP 54
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// sLevel := false ;
13721: LD_ADDR_EXP 58
13725: PUSH
13726: LD_INT 0
13728: ST_TO_ADDR
// sArmoury := false ;
13729: LD_ADDR_EXP 59
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// sRadar := false ;
13737: LD_ADDR_EXP 60
13741: PUSH
13742: LD_INT 0
13744: ST_TO_ADDR
// sBunker := false ;
13745: LD_ADDR_EXP 61
13749: PUSH
13750: LD_INT 0
13752: ST_TO_ADDR
// sHack := false ;
13753: LD_ADDR_EXP 62
13757: PUSH
13758: LD_INT 0
13760: ST_TO_ADDR
// sFire := false ;
13761: LD_ADDR_EXP 63
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// sRefresh := false ;
13769: LD_ADDR_EXP 64
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// sExp := false ;
13777: LD_ADDR_EXP 65
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// sDepot := false ;
13785: LD_ADDR_EXP 66
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// sFlag := false ;
13793: LD_ADDR_EXP 67
13797: PUSH
13798: LD_INT 0
13800: ST_TO_ADDR
// sKamikadze := false ;
13801: LD_ADDR_EXP 75
13805: PUSH
13806: LD_INT 0
13808: ST_TO_ADDR
// sTroll := false ;
13809: LD_ADDR_EXP 76
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// sSlow := false ;
13817: LD_ADDR_EXP 77
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// sLack := false ;
13825: LD_ADDR_EXP 78
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// sTank := false ;
13833: LD_ADDR_EXP 80
13837: PUSH
13838: LD_INT 0
13840: ST_TO_ADDR
// sRemote := false ;
13841: LD_ADDR_EXP 81
13845: PUSH
13846: LD_INT 0
13848: ST_TO_ADDR
// sPowell := false ;
13849: LD_ADDR_EXP 82
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// sTeleport := false ;
13857: LD_ADDR_EXP 85
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// sOilTower := false ;
13865: LD_ADDR_EXP 87
13869: PUSH
13870: LD_INT 0
13872: ST_TO_ADDR
// sShovel := false ;
13873: LD_ADDR_EXP 88
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// sSheik := false ;
13881: LD_ADDR_EXP 89
13885: PUSH
13886: LD_INT 0
13888: ST_TO_ADDR
// sEarthquake := false ;
13889: LD_ADDR_EXP 91
13893: PUSH
13894: LD_INT 0
13896: ST_TO_ADDR
// sAI := false ;
13897: LD_ADDR_EXP 92
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// sCargo := false ;
13905: LD_ADDR_EXP 95
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// sDLaser := false ;
13913: LD_ADDR_EXP 96
13917: PUSH
13918: LD_INT 0
13920: ST_TO_ADDR
// sExchange := false ;
13921: LD_ADDR_EXP 97
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// sFac := false ;
13929: LD_ADDR_EXP 98
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// sPower := false ;
13937: LD_ADDR_EXP 99
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// sRandom := false ;
13945: LD_ADDR_EXP 100
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// sShield := false ;
13953: LD_ADDR_EXP 101
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// sTime := false ;
13961: LD_ADDR_EXP 102
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// sTools := false ;
13969: LD_ADDR_EXP 103
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// sSold := false ;
13977: LD_ADDR_EXP 68
13981: PUSH
13982: LD_INT 0
13984: ST_TO_ADDR
// sDiff := false ;
13985: LD_ADDR_EXP 69
13989: PUSH
13990: LD_INT 0
13992: ST_TO_ADDR
// sFog := false ;
13993: LD_ADDR_EXP 72
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// sReset := false ;
14001: LD_ADDR_EXP 73
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// sSun := false ;
14009: LD_ADDR_EXP 74
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// sTiger := false ;
14017: LD_ADDR_EXP 70
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// sBomb := false ;
14025: LD_ADDR_EXP 71
14029: PUSH
14030: LD_INT 0
14032: ST_TO_ADDR
// sWound := false ;
14033: LD_ADDR_EXP 79
14037: PUSH
14038: LD_INT 0
14040: ST_TO_ADDR
// sBetray := false ;
14041: LD_ADDR_EXP 83
14045: PUSH
14046: LD_INT 0
14048: ST_TO_ADDR
// sContamin := false ;
14049: LD_ADDR_EXP 84
14053: PUSH
14054: LD_INT 0
14056: ST_TO_ADDR
// sOil := false ;
14057: LD_ADDR_EXP 86
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// sStu := false ;
14065: LD_ADDR_EXP 90
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// sBazooka := false ;
14073: LD_ADDR_EXP 93
14077: PUSH
14078: LD_INT 0
14080: ST_TO_ADDR
// sMortar := false ;
14081: LD_ADDR_EXP 94
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// sRanger := false ;
14089: LD_ADDR_EXP 104
14093: PUSH
14094: LD_INT 0
14096: ST_TO_ADDR
// end ;
14097: LD_VAR 0 1
14101: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
// result := [ ] ;
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: EMPTY
14115: ST_TO_ADDR
// if campaign_id = 1 then
14116: LD_OWVAR 69
14120: PUSH
14121: LD_INT 1
14123: EQUAL
14124: IFFALSE 17062
// begin case mission_number of 1 :
14126: LD_OWVAR 70
14130: PUSH
14131: LD_INT 1
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14203
14139: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14140: LD_ADDR_VAR 0 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 4
14150: PUSH
14151: LD_INT 11
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 15
14159: PUSH
14160: LD_INT 16
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_INT 23
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 101
14185: PUSH
14186: LD_INT 102
14188: PUSH
14189: LD_INT 106
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: ST_TO_ADDR
14201: GO 17060
14203: LD_INT 2
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14283
14211: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 26
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 101
14257: PUSH
14258: LD_INT 102
14260: PUSH
14261: LD_INT 105
14263: PUSH
14264: LD_INT 106
14266: PUSH
14267: LD_INT 108
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: ST_TO_ADDR
14281: GO 17060
14283: LD_INT 3
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14367
14291: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 4
14302: PUSH
14303: LD_INT 5
14305: PUSH
14306: LD_INT 11
14308: PUSH
14309: LD_INT 12
14311: PUSH
14312: LD_INT 15
14314: PUSH
14315: LD_INT 16
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 26
14323: PUSH
14324: LD_INT 36
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 101
14341: PUSH
14342: LD_INT 102
14344: PUSH
14345: LD_INT 105
14347: PUSH
14348: LD_INT 106
14350: PUSH
14351: LD_INT 108
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: ST_TO_ADDR
14365: GO 17060
14367: LD_INT 4
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14375
14373: GO 14459
14375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: LD_INT 4
14386: PUSH
14387: LD_INT 5
14389: PUSH
14390: LD_INT 8
14392: PUSH
14393: LD_INT 11
14395: PUSH
14396: LD_INT 12
14398: PUSH
14399: LD_INT 15
14401: PUSH
14402: LD_INT 16
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_INT 23
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: LD_INT 36
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 101
14433: PUSH
14434: LD_INT 102
14436: PUSH
14437: LD_INT 105
14439: PUSH
14440: LD_INT 106
14442: PUSH
14443: LD_INT 108
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: ST_TO_ADDR
14457: GO 17060
14459: LD_INT 5
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14567
14467: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14468: LD_ADDR_VAR 0 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 5
14481: PUSH
14482: LD_INT 6
14484: PUSH
14485: LD_INT 8
14487: PUSH
14488: LD_INT 11
14490: PUSH
14491: LD_INT 12
14493: PUSH
14494: LD_INT 15
14496: PUSH
14497: LD_INT 16
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 23
14505: PUSH
14506: LD_INT 25
14508: PUSH
14509: LD_INT 26
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 101
14533: PUSH
14534: LD_INT 102
14536: PUSH
14537: LD_INT 105
14539: PUSH
14540: LD_INT 106
14542: PUSH
14543: LD_INT 108
14545: PUSH
14546: LD_INT 109
14548: PUSH
14549: LD_INT 112
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: ST_TO_ADDR
14565: GO 17060
14567: LD_INT 6
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14695
14575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14576: LD_ADDR_VAR 0 1
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 8
14595: PUSH
14596: LD_INT 11
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 15
14604: PUSH
14605: LD_INT 16
14607: PUSH
14608: LD_INT 20
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_INT 23
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 26
14625: PUSH
14626: LD_INT 30
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 32
14634: PUSH
14635: LD_INT 36
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 101
14661: PUSH
14662: LD_INT 102
14664: PUSH
14665: LD_INT 105
14667: PUSH
14668: LD_INT 106
14670: PUSH
14671: LD_INT 108
14673: PUSH
14674: LD_INT 109
14676: PUSH
14677: LD_INT 112
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: ST_TO_ADDR
14693: GO 17060
14695: LD_INT 7
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14803
14703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: LD_INT 4
14714: PUSH
14715: LD_INT 5
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: LD_INT 11
14723: PUSH
14724: LD_INT 12
14726: PUSH
14727: LD_INT 15
14729: PUSH
14730: LD_INT 16
14732: PUSH
14733: LD_INT 20
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 22
14741: PUSH
14742: LD_INT 23
14744: PUSH
14745: LD_INT 25
14747: PUSH
14748: LD_INT 26
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 101
14769: PUSH
14770: LD_INT 102
14772: PUSH
14773: LD_INT 103
14775: PUSH
14776: LD_INT 105
14778: PUSH
14779: LD_INT 106
14781: PUSH
14782: LD_INT 108
14784: PUSH
14785: LD_INT 112
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
14801: GO 17060
14803: LD_INT 8
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 14939
14811: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 5
14825: PUSH
14826: LD_INT 6
14828: PUSH
14829: LD_INT 7
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: LD_INT 11
14837: PUSH
14838: LD_INT 12
14840: PUSH
14841: LD_INT 15
14843: PUSH
14844: LD_INT 16
14846: PUSH
14847: LD_INT 20
14849: PUSH
14850: LD_INT 21
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_INT 23
14858: PUSH
14859: LD_INT 25
14861: PUSH
14862: LD_INT 26
14864: PUSH
14865: LD_INT 30
14867: PUSH
14868: LD_INT 31
14870: PUSH
14871: LD_INT 32
14873: PUSH
14874: LD_INT 36
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 101
14901: PUSH
14902: LD_INT 102
14904: PUSH
14905: LD_INT 103
14907: PUSH
14908: LD_INT 105
14910: PUSH
14911: LD_INT 106
14913: PUSH
14914: LD_INT 108
14916: PUSH
14917: LD_INT 109
14919: PUSH
14920: LD_INT 112
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 17060
14939: LD_INT 9
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 15083
14947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: LD_INT 6
14964: PUSH
14965: LD_INT 7
14967: PUSH
14968: LD_INT 8
14970: PUSH
14971: LD_INT 11
14973: PUSH
14974: LD_INT 12
14976: PUSH
14977: LD_INT 15
14979: PUSH
14980: LD_INT 16
14982: PUSH
14983: LD_INT 20
14985: PUSH
14986: LD_INT 21
14988: PUSH
14989: LD_INT 22
14991: PUSH
14992: LD_INT 23
14994: PUSH
14995: LD_INT 25
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 28
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 31
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: LD_INT 36
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 101
15041: PUSH
15042: LD_INT 102
15044: PUSH
15045: LD_INT 103
15047: PUSH
15048: LD_INT 105
15050: PUSH
15051: LD_INT 106
15053: PUSH
15054: LD_INT 108
15056: PUSH
15057: LD_INT 109
15059: PUSH
15060: LD_INT 112
15062: PUSH
15063: LD_INT 114
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: ST_TO_ADDR
15081: GO 17060
15083: LD_INT 10
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15275
15091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15092: LD_ADDR_VAR 0 1
15096: PUSH
15097: LD_INT 2
15099: PUSH
15100: LD_INT 4
15102: PUSH
15103: LD_INT 5
15105: PUSH
15106: LD_INT 6
15108: PUSH
15109: LD_INT 7
15111: PUSH
15112: LD_INT 8
15114: PUSH
15115: LD_INT 9
15117: PUSH
15118: LD_INT 10
15120: PUSH
15121: LD_INT 11
15123: PUSH
15124: LD_INT 12
15126: PUSH
15127: LD_INT 13
15129: PUSH
15130: LD_INT 14
15132: PUSH
15133: LD_INT 15
15135: PUSH
15136: LD_INT 16
15138: PUSH
15139: LD_INT 17
15141: PUSH
15142: LD_INT 18
15144: PUSH
15145: LD_INT 19
15147: PUSH
15148: LD_INT 20
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 22
15156: PUSH
15157: LD_INT 23
15159: PUSH
15160: LD_INT 24
15162: PUSH
15163: LD_INT 25
15165: PUSH
15166: LD_INT 26
15168: PUSH
15169: LD_INT 28
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 31
15177: PUSH
15178: LD_INT 32
15180: PUSH
15181: LD_INT 36
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 101
15217: PUSH
15218: LD_INT 102
15220: PUSH
15221: LD_INT 103
15223: PUSH
15224: LD_INT 104
15226: PUSH
15227: LD_INT 105
15229: PUSH
15230: LD_INT 106
15232: PUSH
15233: LD_INT 107
15235: PUSH
15236: LD_INT 108
15238: PUSH
15239: LD_INT 109
15241: PUSH
15242: LD_INT 110
15244: PUSH
15245: LD_INT 111
15247: PUSH
15248: LD_INT 112
15250: PUSH
15251: LD_INT 114
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: ST_TO_ADDR
15273: GO 17060
15275: LD_INT 11
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15475
15283: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15284: LD_ADDR_VAR 0 1
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: LD_INT 3
15294: PUSH
15295: LD_INT 4
15297: PUSH
15298: LD_INT 5
15300: PUSH
15301: LD_INT 6
15303: PUSH
15304: LD_INT 7
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: LD_INT 9
15312: PUSH
15313: LD_INT 10
15315: PUSH
15316: LD_INT 11
15318: PUSH
15319: LD_INT 12
15321: PUSH
15322: LD_INT 13
15324: PUSH
15325: LD_INT 14
15327: PUSH
15328: LD_INT 15
15330: PUSH
15331: LD_INT 16
15333: PUSH
15334: LD_INT 17
15336: PUSH
15337: LD_INT 18
15339: PUSH
15340: LD_INT 19
15342: PUSH
15343: LD_INT 20
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_INT 23
15354: PUSH
15355: LD_INT 24
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: LD_INT 28
15366: PUSH
15367: LD_INT 30
15369: PUSH
15370: LD_INT 31
15372: PUSH
15373: LD_INT 32
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 36
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 101
15417: PUSH
15418: LD_INT 102
15420: PUSH
15421: LD_INT 103
15423: PUSH
15424: LD_INT 104
15426: PUSH
15427: LD_INT 105
15429: PUSH
15430: LD_INT 106
15432: PUSH
15433: LD_INT 107
15435: PUSH
15436: LD_INT 108
15438: PUSH
15439: LD_INT 109
15441: PUSH
15442: LD_INT 110
15444: PUSH
15445: LD_INT 111
15447: PUSH
15448: LD_INT 112
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: ST_TO_ADDR
15473: GO 17060
15475: LD_INT 12
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15691
15483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: LD_INT 3
15497: PUSH
15498: LD_INT 4
15500: PUSH
15501: LD_INT 5
15503: PUSH
15504: LD_INT 6
15506: PUSH
15507: LD_INT 7
15509: PUSH
15510: LD_INT 8
15512: PUSH
15513: LD_INT 9
15515: PUSH
15516: LD_INT 10
15518: PUSH
15519: LD_INT 11
15521: PUSH
15522: LD_INT 12
15524: PUSH
15525: LD_INT 13
15527: PUSH
15528: LD_INT 14
15530: PUSH
15531: LD_INT 15
15533: PUSH
15534: LD_INT 16
15536: PUSH
15537: LD_INT 17
15539: PUSH
15540: LD_INT 18
15542: PUSH
15543: LD_INT 19
15545: PUSH
15546: LD_INT 20
15548: PUSH
15549: LD_INT 21
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_INT 23
15557: PUSH
15558: LD_INT 24
15560: PUSH
15561: LD_INT 25
15563: PUSH
15564: LD_INT 26
15566: PUSH
15567: LD_INT 27
15569: PUSH
15570: LD_INT 28
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: LD_INT 31
15578: PUSH
15579: LD_INT 32
15581: PUSH
15582: LD_INT 33
15584: PUSH
15585: LD_INT 34
15587: PUSH
15588: LD_INT 36
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 101
15629: PUSH
15630: LD_INT 102
15632: PUSH
15633: LD_INT 103
15635: PUSH
15636: LD_INT 104
15638: PUSH
15639: LD_INT 105
15641: PUSH
15642: LD_INT 106
15644: PUSH
15645: LD_INT 107
15647: PUSH
15648: LD_INT 108
15650: PUSH
15651: LD_INT 109
15653: PUSH
15654: LD_INT 110
15656: PUSH
15657: LD_INT 111
15659: PUSH
15660: LD_INT 112
15662: PUSH
15663: LD_INT 113
15665: PUSH
15666: LD_INT 114
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: ST_TO_ADDR
15689: GO 17060
15691: LD_INT 13
15693: DOUBLE
15694: EQUAL
15695: IFTRUE 15699
15697: GO 15895
15699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15700: LD_ADDR_VAR 0 1
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 4
15716: PUSH
15717: LD_INT 5
15719: PUSH
15720: LD_INT 8
15722: PUSH
15723: LD_INT 9
15725: PUSH
15726: LD_INT 10
15728: PUSH
15729: LD_INT 11
15731: PUSH
15732: LD_INT 12
15734: PUSH
15735: LD_INT 14
15737: PUSH
15738: LD_INT 15
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: LD_INT 17
15746: PUSH
15747: LD_INT 18
15749: PUSH
15750: LD_INT 19
15752: PUSH
15753: LD_INT 20
15755: PUSH
15756: LD_INT 21
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 23
15764: PUSH
15765: LD_INT 24
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 26
15773: PUSH
15774: LD_INT 27
15776: PUSH
15777: LD_INT 28
15779: PUSH
15780: LD_INT 30
15782: PUSH
15783: LD_INT 31
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: LD_INT 33
15791: PUSH
15792: LD_INT 34
15794: PUSH
15795: LD_INT 36
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 101
15833: PUSH
15834: LD_INT 102
15836: PUSH
15837: LD_INT 103
15839: PUSH
15840: LD_INT 104
15842: PUSH
15843: LD_INT 105
15845: PUSH
15846: LD_INT 106
15848: PUSH
15849: LD_INT 107
15851: PUSH
15852: LD_INT 108
15854: PUSH
15855: LD_INT 109
15857: PUSH
15858: LD_INT 110
15860: PUSH
15861: LD_INT 111
15863: PUSH
15864: LD_INT 112
15866: PUSH
15867: LD_INT 113
15869: PUSH
15870: LD_INT 114
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: ST_TO_ADDR
15893: GO 17060
15895: LD_INT 14
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 16115
15903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: LD_INT 3
15917: PUSH
15918: LD_INT 4
15920: PUSH
15921: LD_INT 5
15923: PUSH
15924: LD_INT 6
15926: PUSH
15927: LD_INT 7
15929: PUSH
15930: LD_INT 8
15932: PUSH
15933: LD_INT 9
15935: PUSH
15936: LD_INT 10
15938: PUSH
15939: LD_INT 11
15941: PUSH
15942: LD_INT 12
15944: PUSH
15945: LD_INT 13
15947: PUSH
15948: LD_INT 14
15950: PUSH
15951: LD_INT 15
15953: PUSH
15954: LD_INT 16
15956: PUSH
15957: LD_INT 17
15959: PUSH
15960: LD_INT 18
15962: PUSH
15963: LD_INT 19
15965: PUSH
15966: LD_INT 20
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 26
15986: PUSH
15987: LD_INT 27
15989: PUSH
15990: LD_INT 28
15992: PUSH
15993: LD_INT 29
15995: PUSH
15996: LD_INT 30
15998: PUSH
15999: LD_INT 31
16001: PUSH
16002: LD_INT 32
16004: PUSH
16005: LD_INT 33
16007: PUSH
16008: LD_INT 34
16010: PUSH
16011: LD_INT 36
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 101
16053: PUSH
16054: LD_INT 102
16056: PUSH
16057: LD_INT 103
16059: PUSH
16060: LD_INT 104
16062: PUSH
16063: LD_INT 105
16065: PUSH
16066: LD_INT 106
16068: PUSH
16069: LD_INT 107
16071: PUSH
16072: LD_INT 108
16074: PUSH
16075: LD_INT 109
16077: PUSH
16078: LD_INT 110
16080: PUSH
16081: LD_INT 111
16083: PUSH
16084: LD_INT 112
16086: PUSH
16087: LD_INT 113
16089: PUSH
16090: LD_INT 114
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: ST_TO_ADDR
16113: GO 17060
16115: LD_INT 15
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16335
16123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: LD_INT 3
16137: PUSH
16138: LD_INT 4
16140: PUSH
16141: LD_INT 5
16143: PUSH
16144: LD_INT 6
16146: PUSH
16147: LD_INT 7
16149: PUSH
16150: LD_INT 8
16152: PUSH
16153: LD_INT 9
16155: PUSH
16156: LD_INT 10
16158: PUSH
16159: LD_INT 11
16161: PUSH
16162: LD_INT 12
16164: PUSH
16165: LD_INT 13
16167: PUSH
16168: LD_INT 14
16170: PUSH
16171: LD_INT 15
16173: PUSH
16174: LD_INT 16
16176: PUSH
16177: LD_INT 17
16179: PUSH
16180: LD_INT 18
16182: PUSH
16183: LD_INT 19
16185: PUSH
16186: LD_INT 20
16188: PUSH
16189: LD_INT 21
16191: PUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 23
16197: PUSH
16198: LD_INT 24
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 26
16206: PUSH
16207: LD_INT 27
16209: PUSH
16210: LD_INT 28
16212: PUSH
16213: LD_INT 29
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 31
16221: PUSH
16222: LD_INT 32
16224: PUSH
16225: LD_INT 33
16227: PUSH
16228: LD_INT 34
16230: PUSH
16231: LD_INT 36
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 101
16273: PUSH
16274: LD_INT 102
16276: PUSH
16277: LD_INT 103
16279: PUSH
16280: LD_INT 104
16282: PUSH
16283: LD_INT 105
16285: PUSH
16286: LD_INT 106
16288: PUSH
16289: LD_INT 107
16291: PUSH
16292: LD_INT 108
16294: PUSH
16295: LD_INT 109
16297: PUSH
16298: LD_INT 110
16300: PUSH
16301: LD_INT 111
16303: PUSH
16304: LD_INT 112
16306: PUSH
16307: LD_INT 113
16309: PUSH
16310: LD_INT 114
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: ST_TO_ADDR
16333: GO 17060
16335: LD_INT 16
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16467
16343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16344: LD_ADDR_VAR 0 1
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: LD_INT 4
16354: PUSH
16355: LD_INT 5
16357: PUSH
16358: LD_INT 7
16360: PUSH
16361: LD_INT 11
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 15
16369: PUSH
16370: LD_INT 16
16372: PUSH
16373: LD_INT 20
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 22
16381: PUSH
16382: LD_INT 23
16384: PUSH
16385: LD_INT 25
16387: PUSH
16388: LD_INT 26
16390: PUSH
16391: LD_INT 30
16393: PUSH
16394: LD_INT 31
16396: PUSH
16397: LD_INT 32
16399: PUSH
16400: LD_INT 33
16402: PUSH
16403: LD_INT 34
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 101
16429: PUSH
16430: LD_INT 102
16432: PUSH
16433: LD_INT 103
16435: PUSH
16436: LD_INT 106
16438: PUSH
16439: LD_INT 108
16441: PUSH
16442: LD_INT 112
16444: PUSH
16445: LD_INT 113
16447: PUSH
16448: LD_INT 114
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 17060
16467: LD_INT 17
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16687
16475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: LD_INT 2
16486: PUSH
16487: LD_INT 3
16489: PUSH
16490: LD_INT 4
16492: PUSH
16493: LD_INT 5
16495: PUSH
16496: LD_INT 6
16498: PUSH
16499: LD_INT 7
16501: PUSH
16502: LD_INT 8
16504: PUSH
16505: LD_INT 9
16507: PUSH
16508: LD_INT 10
16510: PUSH
16511: LD_INT 11
16513: PUSH
16514: LD_INT 12
16516: PUSH
16517: LD_INT 13
16519: PUSH
16520: LD_INT 14
16522: PUSH
16523: LD_INT 15
16525: PUSH
16526: LD_INT 16
16528: PUSH
16529: LD_INT 17
16531: PUSH
16532: LD_INT 18
16534: PUSH
16535: LD_INT 19
16537: PUSH
16538: LD_INT 20
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 22
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: LD_INT 24
16552: PUSH
16553: LD_INT 25
16555: PUSH
16556: LD_INT 26
16558: PUSH
16559: LD_INT 27
16561: PUSH
16562: LD_INT 28
16564: PUSH
16565: LD_INT 29
16567: PUSH
16568: LD_INT 30
16570: PUSH
16571: LD_INT 31
16573: PUSH
16574: LD_INT 32
16576: PUSH
16577: LD_INT 33
16579: PUSH
16580: LD_INT 34
16582: PUSH
16583: LD_INT 36
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 101
16625: PUSH
16626: LD_INT 102
16628: PUSH
16629: LD_INT 103
16631: PUSH
16632: LD_INT 104
16634: PUSH
16635: LD_INT 105
16637: PUSH
16638: LD_INT 106
16640: PUSH
16641: LD_INT 107
16643: PUSH
16644: LD_INT 108
16646: PUSH
16647: LD_INT 109
16649: PUSH
16650: LD_INT 110
16652: PUSH
16653: LD_INT 111
16655: PUSH
16656: LD_INT 112
16658: PUSH
16659: LD_INT 113
16661: PUSH
16662: LD_INT 114
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
16685: GO 17060
16687: LD_INT 18
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16831
16695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 4
16706: PUSH
16707: LD_INT 5
16709: PUSH
16710: LD_INT 7
16712: PUSH
16713: LD_INT 11
16715: PUSH
16716: LD_INT 12
16718: PUSH
16719: LD_INT 15
16721: PUSH
16722: LD_INT 16
16724: PUSH
16725: LD_INT 20
16727: PUSH
16728: LD_INT 21
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: LD_INT 23
16736: PUSH
16737: LD_INT 25
16739: PUSH
16740: LD_INT 26
16742: PUSH
16743: LD_INT 30
16745: PUSH
16746: LD_INT 31
16748: PUSH
16749: LD_INT 32
16751: PUSH
16752: LD_INT 33
16754: PUSH
16755: LD_INT 34
16757: PUSH
16758: LD_INT 35
16760: PUSH
16761: LD_INT 36
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 101
16789: PUSH
16790: LD_INT 102
16792: PUSH
16793: LD_INT 103
16795: PUSH
16796: LD_INT 106
16798: PUSH
16799: LD_INT 108
16801: PUSH
16802: LD_INT 112
16804: PUSH
16805: LD_INT 113
16807: PUSH
16808: LD_INT 114
16810: PUSH
16811: LD_INT 115
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: ST_TO_ADDR
16829: GO 17060
16831: LD_INT 19
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 17059
16839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: LD_INT 2
16850: PUSH
16851: LD_INT 3
16853: PUSH
16854: LD_INT 4
16856: PUSH
16857: LD_INT 5
16859: PUSH
16860: LD_INT 6
16862: PUSH
16863: LD_INT 7
16865: PUSH
16866: LD_INT 8
16868: PUSH
16869: LD_INT 9
16871: PUSH
16872: LD_INT 10
16874: PUSH
16875: LD_INT 11
16877: PUSH
16878: LD_INT 12
16880: PUSH
16881: LD_INT 13
16883: PUSH
16884: LD_INT 14
16886: PUSH
16887: LD_INT 15
16889: PUSH
16890: LD_INT 16
16892: PUSH
16893: LD_INT 17
16895: PUSH
16896: LD_INT 18
16898: PUSH
16899: LD_INT 19
16901: PUSH
16902: LD_INT 20
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 23
16913: PUSH
16914: LD_INT 24
16916: PUSH
16917: LD_INT 25
16919: PUSH
16920: LD_INT 26
16922: PUSH
16923: LD_INT 27
16925: PUSH
16926: LD_INT 28
16928: PUSH
16929: LD_INT 29
16931: PUSH
16932: LD_INT 30
16934: PUSH
16935: LD_INT 31
16937: PUSH
16938: LD_INT 32
16940: PUSH
16941: LD_INT 33
16943: PUSH
16944: LD_INT 34
16946: PUSH
16947: LD_INT 35
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 101
16993: PUSH
16994: LD_INT 102
16996: PUSH
16997: LD_INT 103
16999: PUSH
17000: LD_INT 104
17002: PUSH
17003: LD_INT 105
17005: PUSH
17006: LD_INT 106
17008: PUSH
17009: LD_INT 107
17011: PUSH
17012: LD_INT 108
17014: PUSH
17015: LD_INT 109
17017: PUSH
17018: LD_INT 110
17020: PUSH
17021: LD_INT 111
17023: PUSH
17024: LD_INT 112
17026: PUSH
17027: LD_INT 113
17029: PUSH
17030: LD_INT 114
17032: PUSH
17033: LD_INT 115
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 17060
17059: POP
// end else
17060: GO 17279
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17062: LD_ADDR_VAR 0 1
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 6
17084: PUSH
17085: LD_INT 7
17087: PUSH
17088: LD_INT 8
17090: PUSH
17091: LD_INT 9
17093: PUSH
17094: LD_INT 10
17096: PUSH
17097: LD_INT 11
17099: PUSH
17100: LD_INT 12
17102: PUSH
17103: LD_INT 13
17105: PUSH
17106: LD_INT 14
17108: PUSH
17109: LD_INT 15
17111: PUSH
17112: LD_INT 16
17114: PUSH
17115: LD_INT 17
17117: PUSH
17118: LD_INT 18
17120: PUSH
17121: LD_INT 19
17123: PUSH
17124: LD_INT 20
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_INT 23
17135: PUSH
17136: LD_INT 24
17138: PUSH
17139: LD_INT 25
17141: PUSH
17142: LD_INT 26
17144: PUSH
17145: LD_INT 27
17147: PUSH
17148: LD_INT 28
17150: PUSH
17151: LD_INT 29
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: LD_INT 31
17159: PUSH
17160: LD_INT 32
17162: PUSH
17163: LD_INT 33
17165: PUSH
17166: LD_INT 34
17168: PUSH
17169: LD_INT 35
17171: PUSH
17172: LD_INT 36
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 101
17215: PUSH
17216: LD_INT 102
17218: PUSH
17219: LD_INT 103
17221: PUSH
17222: LD_INT 104
17224: PUSH
17225: LD_INT 105
17227: PUSH
17228: LD_INT 106
17230: PUSH
17231: LD_INT 107
17233: PUSH
17234: LD_INT 108
17236: PUSH
17237: LD_INT 109
17239: PUSH
17240: LD_INT 110
17242: PUSH
17243: LD_INT 111
17245: PUSH
17246: LD_INT 112
17248: PUSH
17249: LD_INT 113
17251: PUSH
17252: LD_INT 114
17254: PUSH
17255: LD_INT 115
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: ST_TO_ADDR
// if result then
17279: LD_VAR 0 1
17283: IFFALSE 17572
// begin normal :=  ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_STRING 
17292: ST_TO_ADDR
// hardcore :=  ;
17293: LD_ADDR_VAR 0 4
17297: PUSH
17298: LD_STRING 
17300: ST_TO_ADDR
// for i = 1 to normalCounter do
17301: LD_ADDR_VAR 0 5
17305: PUSH
17306: DOUBLE
17307: LD_INT 1
17309: DEC
17310: ST_TO_ADDR
17311: LD_EXP 52
17315: PUSH
17316: FOR_TO
17317: IFFALSE 17418
// begin tmp := 0 ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_STRING 0
17326: ST_TO_ADDR
// if result [ 1 ] then
17327: LD_VAR 0 1
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: IFFALSE 17400
// if result [ 1 ] [ 1 ] = i then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 1
17344: ARRAY
17345: PUSH
17346: LD_INT 1
17348: ARRAY
17349: PUSH
17350: LD_VAR 0 5
17354: EQUAL
17355: IFFALSE 17400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: LD_VAR 0 1
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 3
17386: PPUSH
17387: CALL_OW 1
17391: ST_TO_ADDR
// tmp := 1 ;
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: LD_STRING 1
17399: ST_TO_ADDR
// end ; normal := normal & tmp ;
17400: LD_ADDR_VAR 0 3
17404: PUSH
17405: LD_VAR 0 3
17409: PUSH
17410: LD_VAR 0 2
17414: STR
17415: ST_TO_ADDR
// end ;
17416: GO 17316
17418: POP
17419: POP
// for i = 1 to hardcoreCounter do
17420: LD_ADDR_VAR 0 5
17424: PUSH
17425: DOUBLE
17426: LD_INT 1
17428: DEC
17429: ST_TO_ADDR
17430: LD_EXP 53
17434: PUSH
17435: FOR_TO
17436: IFFALSE 17541
// begin tmp := 0 ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: LD_STRING 0
17445: ST_TO_ADDR
// if result [ 2 ] then
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 2
17453: ARRAY
17454: IFFALSE 17523
// if result [ 2 ] [ 1 ] = 100 + i then
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 2
17463: ARRAY
17464: PUSH
17465: LD_INT 1
17467: ARRAY
17468: PUSH
17469: LD_INT 100
17471: PUSH
17472: LD_VAR 0 5
17476: PLUS
17477: EQUAL
17478: IFFALSE 17523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 2
17492: PPUSH
17493: LD_VAR 0 1
17497: PUSH
17498: LD_INT 2
17500: ARRAY
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 3
17509: PPUSH
17510: CALL_OW 1
17514: ST_TO_ADDR
// tmp := 1 ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_STRING 1
17522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17523: LD_ADDR_VAR 0 4
17527: PUSH
17528: LD_VAR 0 4
17532: PUSH
17533: LD_VAR 0 2
17537: STR
17538: ST_TO_ADDR
// end ;
17539: GO 17435
17541: POP
17542: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17543: LD_STRING getStreamItemsFromMission("
17545: PUSH
17546: LD_VAR 0 3
17550: STR
17551: PUSH
17552: LD_STRING ","
17554: STR
17555: PUSH
17556: LD_VAR 0 4
17560: STR
17561: PUSH
17562: LD_STRING ")
17564: STR
17565: PPUSH
17566: CALL_OW 559
// end else
17570: GO 17579
// ToLua ( getStreamItemsFromMission("","") ) ;
17572: LD_STRING getStreamItemsFromMission("","")
17574: PPUSH
17575: CALL_OW 559
// end ;
17579: LD_VAR 0 1
17583: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17584: LD_EXP 51
17588: PUSH
17589: LD_EXP 56
17593: AND
17594: IFFALSE 17718
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin enable ;
17603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 34
17626: PUSH
17627: LD_INT 7
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 34
17636: PUSH
17637: LD_INT 45
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 34
17646: PUSH
17647: LD_INT 28
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 34
17656: PUSH
17657: LD_INT 47
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// if not tmp then
17680: LD_VAR 0 2
17684: NOT
17685: IFFALSE 17689
// exit ;
17687: GO 17718
// for i in tmp do
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 2
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17716
// begin SetLives ( i , 0 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 0
17709: PPUSH
17710: CALL_OW 234
// end ;
17714: GO 17699
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17721: LD_EXP 51
17725: PUSH
17726: LD_EXP 57
17730: AND
17731: IFFALSE 17815
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
// begin enable ;
17740: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 32
17760: PUSH
17761: LD_INT 3
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 2
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17815
// for i in tmp do
17786: LD_ADDR_VAR 0 1
17790: PUSH
17791: LD_VAR 0 2
17795: PUSH
17796: FOR_IN
17797: IFFALSE 17813
// begin SetLives ( i , 0 ) ;
17799: LD_VAR 0 1
17803: PPUSH
17804: LD_INT 0
17806: PPUSH
17807: CALL_OW 234
// end ;
17811: GO 17796
17813: POP
17814: POP
// end ;
17815: PPOPN 2
17817: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17818: LD_EXP 51
17822: PUSH
17823: LD_EXP 54
17827: AND
17828: IFFALSE 17921
17830: GO 17832
17832: DISABLE
17833: LD_INT 0
17835: PPUSH
// begin enable ;
17836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_INT 22
17844: PUSH
17845: LD_OWVAR 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 2
17856: PUSH
17857: LD_INT 25
17859: PUSH
17860: LD_INT 5
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 25
17869: PUSH
17870: LD_INT 9
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 25
17879: PUSH
17880: LD_INT 8
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17919
// begin SetClass ( i , 1 ) ;
17905: LD_VAR 0 1
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: CALL_OW 336
// end ;
17917: GO 17902
17919: POP
17920: POP
// end ;
17921: PPOPN 1
17923: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17924: LD_EXP 51
17928: PUSH
17929: LD_EXP 55
17933: AND
17934: PUSH
17935: LD_OWVAR 65
17939: PUSH
17940: LD_INT 7
17942: LESS
17943: AND
17944: IFFALSE 17958
17946: GO 17948
17948: DISABLE
// begin enable ;
17949: ENABLE
// game_speed := 7 ;
17950: LD_ADDR_OWVAR 65
17954: PUSH
17955: LD_INT 7
17957: ST_TO_ADDR
// end ;
17958: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17959: LD_EXP 51
17963: PUSH
17964: LD_EXP 58
17968: AND
17969: IFFALSE 18171
17971: GO 17973
17973: DISABLE
17974: LD_INT 0
17976: PPUSH
17977: PPUSH
17978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17979: LD_ADDR_VAR 0 3
17983: PUSH
17984: LD_INT 81
17986: PUSH
17987: LD_OWVAR 2
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: ST_TO_ADDR
// if not tmp then
18015: LD_VAR 0 3
18019: NOT
18020: IFFALSE 18024
// exit ;
18022: GO 18171
// if tmp > 5 then
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 5
18031: GREATER
18032: IFFALSE 18044
// k := 5 else
18034: LD_ADDR_VAR 0 2
18038: PUSH
18039: LD_INT 5
18041: ST_TO_ADDR
18042: GO 18054
// k := tmp ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: LD_VAR 0 3
18053: ST_TO_ADDR
// for i := 1 to k do
18054: LD_ADDR_VAR 0 1
18058: PUSH
18059: DOUBLE
18060: LD_INT 1
18062: DEC
18063: ST_TO_ADDR
18064: LD_VAR 0 2
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18169
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18072: LD_VAR 0 3
18076: PUSH
18077: LD_VAR 0 1
18081: ARRAY
18082: PPUSH
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 4
18090: MOD
18091: PUSH
18092: LD_INT 1
18094: PLUS
18095: PPUSH
18096: CALL_OW 259
18100: PUSH
18101: LD_INT 10
18103: LESS
18104: IFFALSE 18167
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18106: LD_VAR 0 3
18110: PUSH
18111: LD_VAR 0 1
18115: ARRAY
18116: PPUSH
18117: LD_VAR 0 1
18121: PUSH
18122: LD_INT 4
18124: MOD
18125: PUSH
18126: LD_INT 1
18128: PLUS
18129: PPUSH
18130: LD_VAR 0 3
18134: PUSH
18135: LD_VAR 0 1
18139: ARRAY
18140: PPUSH
18141: LD_VAR 0 1
18145: PUSH
18146: LD_INT 4
18148: MOD
18149: PUSH
18150: LD_INT 1
18152: PLUS
18153: PPUSH
18154: CALL_OW 259
18158: PUSH
18159: LD_INT 1
18161: PLUS
18162: PPUSH
18163: CALL_OW 237
18167: GO 18069
18169: POP
18170: POP
// end ;
18171: PPOPN 3
18173: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18174: LD_EXP 51
18178: PUSH
18179: LD_EXP 59
18183: AND
18184: IFFALSE 18204
18186: GO 18188
18188: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18189: LD_INT 4
18191: PPUSH
18192: LD_OWVAR 2
18196: PPUSH
18197: LD_INT 0
18199: PPUSH
18200: CALL_OW 324
18204: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18205: LD_EXP 51
18209: PUSH
18210: LD_EXP 88
18214: AND
18215: IFFALSE 18235
18217: GO 18219
18219: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18220: LD_INT 19
18222: PPUSH
18223: LD_OWVAR 2
18227: PPUSH
18228: LD_INT 0
18230: PPUSH
18231: CALL_OW 324
18235: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18236: LD_EXP 51
18240: PUSH
18241: LD_EXP 60
18245: AND
18246: IFFALSE 18348
18248: GO 18250
18250: DISABLE
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
// begin enable ;
18255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_OWVAR 2
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 34
18278: PUSH
18279: LD_INT 11
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 34
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: ST_TO_ADDR
// if not tmp then
18310: LD_VAR 0 2
18314: NOT
18315: IFFALSE 18319
// exit ;
18317: GO 18348
// for i in tmp do
18319: LD_ADDR_VAR 0 1
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: FOR_IN
18330: IFFALSE 18346
// begin SetLives ( i , 0 ) ;
18332: LD_VAR 0 1
18336: PPUSH
18337: LD_INT 0
18339: PPUSH
18340: CALL_OW 234
// end ;
18344: GO 18329
18346: POP
18347: POP
// end ;
18348: PPOPN 2
18350: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18351: LD_EXP 51
18355: PUSH
18356: LD_EXP 61
18360: AND
18361: IFFALSE 18381
18363: GO 18365
18365: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18366: LD_INT 32
18368: PPUSH
18369: LD_OWVAR 2
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: CALL_OW 324
18381: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18382: LD_EXP 51
18386: PUSH
18387: LD_EXP 62
18391: AND
18392: IFFALSE 18573
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
18401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18402: LD_ADDR_VAR 0 2
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_OWVAR 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 33
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: ST_TO_ADDR
// if not tmp then
18438: LD_VAR 0 2
18442: NOT
18443: IFFALSE 18447
// exit ;
18445: GO 18573
// side := 0 ;
18447: LD_ADDR_VAR 0 3
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// for i := 1 to 8 do
18455: LD_ADDR_VAR 0 1
18459: PUSH
18460: DOUBLE
18461: LD_INT 1
18463: DEC
18464: ST_TO_ADDR
18465: LD_INT 8
18467: PUSH
18468: FOR_TO
18469: IFFALSE 18517
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18471: LD_OWVAR 2
18475: PUSH
18476: LD_VAR 0 1
18480: NONEQUAL
18481: PUSH
18482: LD_OWVAR 2
18486: PPUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 81
18496: PUSH
18497: LD_INT 2
18499: EQUAL
18500: AND
18501: IFFALSE 18515
// begin side := i ;
18503: LD_ADDR_VAR 0 3
18507: PUSH
18508: LD_VAR 0 1
18512: ST_TO_ADDR
// break ;
18513: GO 18517
// end ;
18515: GO 18468
18517: POP
18518: POP
// if not side then
18519: LD_VAR 0 3
18523: NOT
18524: IFFALSE 18528
// exit ;
18526: GO 18573
// for i := 1 to tmp do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: DOUBLE
18534: LD_INT 1
18536: DEC
18537: ST_TO_ADDR
18538: LD_VAR 0 2
18542: PUSH
18543: FOR_TO
18544: IFFALSE 18571
// if Prob ( 60 ) then
18546: LD_INT 60
18548: PPUSH
18549: CALL_OW 13
18553: IFFALSE 18569
// SetSide ( i , side ) ;
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: CALL_OW 235
18569: GO 18543
18571: POP
18572: POP
// end ;
18573: PPOPN 3
18575: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18576: LD_EXP 51
18580: PUSH
18581: LD_EXP 64
18585: AND
18586: IFFALSE 18705
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18594: LD_ADDR_VAR 0 1
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_OWVAR 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 21
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: LD_INT 23
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: FOR_IN
18649: IFFALSE 18703
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 257
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 4
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: IN
18679: IFFALSE 18701
// SetClass ( un , rand ( 1 , 4 ) ) ;
18681: LD_VAR 0 1
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_INT 4
18691: PPUSH
18692: CALL_OW 12
18696: PPUSH
18697: CALL_OW 336
18701: GO 18648
18703: POP
18704: POP
// end ;
18705: PPOPN 1
18707: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18708: LD_EXP 51
18712: PUSH
18713: LD_EXP 63
18717: AND
18718: IFFALSE 18797
18720: GO 18722
18722: DISABLE
18723: LD_INT 0
18725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: ST_TO_ADDR
// if not tmp then
18762: LD_VAR 0 1
18766: NOT
18767: IFFALSE 18771
// exit ;
18769: GO 18797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 12
18788: ARRAY
18789: PPUSH
18790: LD_INT 100
18792: PPUSH
18793: CALL_OW 234
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18800: LD_EXP 51
18804: PUSH
18805: LD_EXP 65
18809: AND
18810: IFFALSE 18908
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18818: LD_ADDR_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 21
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: ST_TO_ADDR
// if not tmp then
18854: LD_VAR 0 1
18858: NOT
18859: IFFALSE 18863
// exit ;
18861: GO 18908
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18863: LD_VAR 0 1
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 12
18880: ARRAY
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: LD_INT 4
18887: PPUSH
18888: CALL_OW 12
18892: PPUSH
18893: LD_INT 3000
18895: PPUSH
18896: LD_INT 9000
18898: PPUSH
18899: CALL_OW 12
18903: PPUSH
18904: CALL_OW 492
// end ;
18908: PPOPN 1
18910: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18911: LD_EXP 51
18915: PUSH
18916: LD_EXP 66
18920: AND
18921: IFFALSE 18941
18923: GO 18925
18925: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18926: LD_INT 1
18928: PPUSH
18929: LD_OWVAR 2
18933: PPUSH
18934: LD_INT 0
18936: PPUSH
18937: CALL_OW 324
18941: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18942: LD_EXP 51
18946: PUSH
18947: LD_EXP 67
18951: AND
18952: IFFALSE 19035
18954: GO 18956
18956: DISABLE
18957: LD_INT 0
18959: PPUSH
18960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_INT 22
18968: PUSH
18969: LD_OWVAR 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 21
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 69
18996: ST_TO_ADDR
// if not tmp then
18997: LD_VAR 0 2
19001: NOT
19002: IFFALSE 19006
// exit ;
19004: GO 19035
// for i in tmp do
19006: LD_ADDR_VAR 0 1
19010: PUSH
19011: LD_VAR 0 2
19015: PUSH
19016: FOR_IN
19017: IFFALSE 19033
// SetBLevel ( i , 10 ) ;
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_INT 10
19026: PPUSH
19027: CALL_OW 241
19031: GO 19016
19033: POP
19034: POP
// end ;
19035: PPOPN 2
19037: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19038: LD_EXP 51
19042: PUSH
19043: LD_EXP 68
19047: AND
19048: IFFALSE 19159
19050: GO 19052
19052: DISABLE
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
19057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_OWVAR 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: ST_TO_ADDR
// if not tmp then
19094: LD_VAR 0 3
19098: NOT
19099: IFFALSE 19103
// exit ;
19101: GO 19159
// un := tmp [ rand ( 1 , tmp ) ] ;
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 1
19115: PPUSH
19116: LD_VAR 0 3
19120: PPUSH
19121: CALL_OW 12
19125: ARRAY
19126: ST_TO_ADDR
// if Crawls ( un ) then
19127: LD_VAR 0 2
19131: PPUSH
19132: CALL_OW 318
19136: IFFALSE 19147
// ComWalk ( un ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19147: LD_VAR 0 2
19151: PPUSH
19152: LD_INT 5
19154: PPUSH
19155: CALL_OW 336
// end ;
19159: PPOPN 3
19161: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19162: LD_EXP 51
19166: PUSH
19167: LD_EXP 69
19171: AND
19172: PUSH
19173: LD_OWVAR 67
19177: PUSH
19178: LD_INT 3
19180: LESS
19181: AND
19182: IFFALSE 19201
19184: GO 19186
19186: DISABLE
// Difficulty := Difficulty + 1 ;
19187: LD_ADDR_OWVAR 67
19191: PUSH
19192: LD_OWVAR 67
19196: PUSH
19197: LD_INT 1
19199: PLUS
19200: ST_TO_ADDR
19201: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19202: LD_EXP 51
19206: PUSH
19207: LD_EXP 70
19211: AND
19212: IFFALSE 19315
19214: GO 19216
19216: DISABLE
19217: LD_INT 0
19219: PPUSH
// begin for i := 1 to 5 do
19220: LD_ADDR_VAR 0 1
19224: PUSH
19225: DOUBLE
19226: LD_INT 1
19228: DEC
19229: ST_TO_ADDR
19230: LD_INT 5
19232: PUSH
19233: FOR_TO
19234: IFFALSE 19313
// begin uc_nation := nation_nature ;
19236: LD_ADDR_OWVAR 21
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// uc_side := 0 ;
19244: LD_ADDR_OWVAR 20
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19252: LD_ADDR_OWVAR 29
19256: PUSH
19257: LD_INT 12
19259: PUSH
19260: LD_INT 12
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: ST_TO_ADDR
// hc_agressivity := 20 ;
19267: LD_ADDR_OWVAR 35
19271: PUSH
19272: LD_INT 20
19274: ST_TO_ADDR
// hc_class := class_tiger ;
19275: LD_ADDR_OWVAR 28
19279: PUSH
19280: LD_INT 14
19282: ST_TO_ADDR
// hc_gallery :=  ;
19283: LD_ADDR_OWVAR 33
19287: PUSH
19288: LD_STRING 
19290: ST_TO_ADDR
// hc_name :=  ;
19291: LD_ADDR_OWVAR 26
19295: PUSH
19296: LD_STRING 
19298: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19299: CALL_OW 44
19303: PPUSH
19304: LD_INT 0
19306: PPUSH
19307: CALL_OW 51
// end ;
19311: GO 19233
19313: POP
19314: POP
// end ;
19315: PPOPN 1
19317: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19318: LD_EXP 51
19322: PUSH
19323: LD_EXP 71
19327: AND
19328: IFFALSE 19337
19330: GO 19332
19332: DISABLE
// StreamSibBomb ;
19333: CALL 19338 0 0
19337: END
// export function StreamSibBomb ; var i , x , y ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
// result := false ;
19344: LD_ADDR_VAR 0 1
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// for i := 1 to 16 do
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: DOUBLE
19358: LD_INT 1
19360: DEC
19361: ST_TO_ADDR
19362: LD_INT 16
19364: PUSH
19365: FOR_TO
19366: IFFALSE 19565
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_INT 10
19375: PUSH
19376: LD_INT 20
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 40
19384: PUSH
19385: LD_INT 50
19387: PUSH
19388: LD_INT 60
19390: PUSH
19391: LD_INT 70
19393: PUSH
19394: LD_INT 80
19396: PUSH
19397: LD_INT 90
19399: PUSH
19400: LD_INT 100
19402: PUSH
19403: LD_INT 110
19405: PUSH
19406: LD_INT 120
19408: PUSH
19409: LD_INT 130
19411: PUSH
19412: LD_INT 140
19414: PUSH
19415: LD_INT 150
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PPUSH
19438: LD_INT 15
19440: PPUSH
19441: CALL_OW 12
19445: ARRAY
19446: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19447: LD_ADDR_VAR 0 4
19451: PUSH
19452: LD_INT 10
19454: PUSH
19455: LD_INT 20
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 40
19463: PUSH
19464: LD_INT 50
19466: PUSH
19467: LD_INT 60
19469: PUSH
19470: LD_INT 70
19472: PUSH
19473: LD_INT 80
19475: PUSH
19476: LD_INT 90
19478: PUSH
19479: LD_INT 100
19481: PUSH
19482: LD_INT 110
19484: PUSH
19485: LD_INT 120
19487: PUSH
19488: LD_INT 130
19490: PUSH
19491: LD_INT 140
19493: PUSH
19494: LD_INT 150
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 1
19516: PPUSH
19517: LD_INT 15
19519: PPUSH
19520: CALL_OW 12
19524: ARRAY
19525: ST_TO_ADDR
// if ValidHex ( x , y ) then
19526: LD_VAR 0 3
19530: PPUSH
19531: LD_VAR 0 4
19535: PPUSH
19536: CALL_OW 488
19540: IFFALSE 19563
// begin result := [ x , y ] ;
19542: LD_ADDR_VAR 0 1
19546: PUSH
19547: LD_VAR 0 3
19551: PUSH
19552: LD_VAR 0 4
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: ST_TO_ADDR
// break ;
19561: GO 19565
// end ; end ;
19563: GO 19365
19565: POP
19566: POP
// if result then
19567: LD_VAR 0 1
19571: IFFALSE 19631
// begin ToLua ( playSibBomb() ) ;
19573: LD_STRING playSibBomb()
19575: PPUSH
19576: CALL_OW 559
// wait ( 0 0$14 ) ;
19580: LD_INT 490
19582: PPUSH
19583: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19587: LD_VAR 0 1
19591: PUSH
19592: LD_INT 1
19594: ARRAY
19595: PPUSH
19596: LD_VAR 0 1
19600: PUSH
19601: LD_INT 2
19603: ARRAY
19604: PPUSH
19605: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19609: LD_VAR 0 1
19613: PUSH
19614: LD_INT 1
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 1
19622: PUSH
19623: LD_INT 2
19625: ARRAY
19626: PPUSH
19627: CALL_OW 429
// end ; end ;
19631: LD_VAR 0 1
19635: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19636: LD_EXP 51
19640: PUSH
19641: LD_EXP 73
19645: AND
19646: IFFALSE 19658
19648: GO 19650
19650: DISABLE
// YouLost (  ) ;
19651: LD_STRING 
19653: PPUSH
19654: CALL_OW 104
19658: END
// every 0 0$1 trigger StreamModeActive and sFog do
19659: LD_EXP 51
19663: PUSH
19664: LD_EXP 72
19668: AND
19669: IFFALSE 19683
19671: GO 19673
19673: DISABLE
// FogOff ( your_side ) ;
19674: LD_OWVAR 2
19678: PPUSH
19679: CALL_OW 344
19683: END
// every 0 0$1 trigger StreamModeActive and sSun do
19684: LD_EXP 51
19688: PUSH
19689: LD_EXP 74
19693: AND
19694: IFFALSE 19722
19696: GO 19698
19698: DISABLE
// begin solar_recharge_percent := 0 ;
19699: LD_ADDR_OWVAR 79
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19707: LD_INT 10500
19709: PPUSH
19710: CALL_OW 67
// solar_recharge_percent := 100 ;
19714: LD_ADDR_OWVAR 79
19718: PUSH
19719: LD_INT 100
19721: ST_TO_ADDR
// end ;
19722: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19723: LD_EXP 51
19727: PUSH
19728: LD_EXP 75
19732: AND
19733: IFFALSE 19972
19735: GO 19737
19737: DISABLE
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
19742: PPUSH
// begin tmp := [ ] ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: EMPTY
19749: ST_TO_ADDR
// for i := 1 to 6 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 6
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19869
// begin uc_nation := nation_nature ;
19766: LD_ADDR_OWVAR 21
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19782: LD_ADDR_OWVAR 29
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 12
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: ST_TO_ADDR
// hc_agressivity := 20 ;
19797: LD_ADDR_OWVAR 35
19801: PUSH
19802: LD_INT 20
19804: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19805: LD_ADDR_OWVAR 28
19809: PUSH
19810: LD_INT 17
19812: ST_TO_ADDR
// hc_gallery :=  ;
19813: LD_ADDR_OWVAR 33
19817: PUSH
19818: LD_STRING 
19820: ST_TO_ADDR
// hc_name :=  ;
19821: LD_ADDR_OWVAR 26
19825: PUSH
19826: LD_STRING 
19828: ST_TO_ADDR
// un := CreateHuman ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: CALL_OW 44
19838: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_INT 1
19846: PPUSH
19847: CALL_OW 51
// tmp := tmp ^ un ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_VAR 0 3
19860: PUSH
19861: LD_VAR 0 2
19865: ADD
19866: ST_TO_ADDR
// end ;
19867: GO 19763
19869: POP
19870: POP
// repeat wait ( 0 0$1 ) ;
19871: LD_INT 35
19873: PPUSH
19874: CALL_OW 67
// for un in tmp do
19878: LD_ADDR_VAR 0 2
19882: PUSH
19883: LD_VAR 0 3
19887: PUSH
19888: FOR_IN
19889: IFFALSE 19963
// begin if IsDead ( un ) then
19891: LD_VAR 0 2
19895: PPUSH
19896: CALL_OW 301
19900: IFFALSE 19920
// begin tmp := tmp diff un ;
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_VAR 0 2
19916: DIFF
19917: ST_TO_ADDR
// continue ;
19918: GO 19888
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19920: LD_VAR 0 2
19924: PPUSH
19925: LD_INT 3
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PPUSH
19942: CALL_OW 69
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 74
19956: PPUSH
19957: CALL_OW 115
// end ;
19961: GO 19888
19963: POP
19964: POP
// until not tmp ;
19965: LD_VAR 0 3
19969: NOT
19970: IFFALSE 19871
// end ;
19972: PPOPN 3
19974: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19975: LD_EXP 51
19979: PUSH
19980: LD_EXP 76
19984: AND
19985: IFFALSE 20039
19987: GO 19989
19989: DISABLE
// begin ToLua ( displayTroll(); ) ;
19990: LD_STRING displayTroll();
19992: PPUSH
19993: CALL_OW 559
// wait ( 3 3$00 ) ;
19997: LD_INT 6300
19999: PPUSH
20000: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20004: LD_STRING hideTroll();
20006: PPUSH
20007: CALL_OW 559
// wait ( 1 1$00 ) ;
20011: LD_INT 2100
20013: PPUSH
20014: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20018: LD_STRING displayTroll();
20020: PPUSH
20021: CALL_OW 559
// wait ( 1 1$00 ) ;
20025: LD_INT 2100
20027: PPUSH
20028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20032: LD_STRING hideTroll();
20034: PPUSH
20035: CALL_OW 559
// end ;
20039: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20040: LD_EXP 51
20044: PUSH
20045: LD_EXP 77
20049: AND
20050: IFFALSE 20113
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
// begin p := 0 ;
20058: LD_ADDR_VAR 0 1
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// repeat game_speed := 1 ;
20066: LD_ADDR_OWVAR 65
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20074: LD_INT 35
20076: PPUSH
20077: CALL_OW 67
// p := p + 1 ;
20081: LD_ADDR_VAR 0 1
20085: PUSH
20086: LD_VAR 0 1
20090: PUSH
20091: LD_INT 1
20093: PLUS
20094: ST_TO_ADDR
// until p >= 60 ;
20095: LD_VAR 0 1
20099: PUSH
20100: LD_INT 60
20102: GREATEREQUAL
20103: IFFALSE 20066
// game_speed := 4 ;
20105: LD_ADDR_OWVAR 65
20109: PUSH
20110: LD_INT 4
20112: ST_TO_ADDR
// end ;
20113: PPOPN 1
20115: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20116: LD_EXP 51
20120: PUSH
20121: LD_EXP 78
20125: AND
20126: IFFALSE 20272
20128: GO 20130
20130: DISABLE
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: ST_TO_ADDR
// if not depot then
20189: LD_VAR 0 1
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20272
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20198: LD_ADDR_VAR 0 2
20202: PUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: PPUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL_OW 12
20220: ARRAY
20221: PPUSH
20222: CALL_OW 274
20226: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20227: LD_VAR 0 2
20231: PPUSH
20232: LD_INT 1
20234: PPUSH
20235: LD_INT 0
20237: PPUSH
20238: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20242: LD_VAR 0 2
20246: PPUSH
20247: LD_INT 2
20249: PPUSH
20250: LD_INT 0
20252: PPUSH
20253: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20257: LD_VAR 0 2
20261: PPUSH
20262: LD_INT 3
20264: PPUSH
20265: LD_INT 0
20267: PPUSH
20268: CALL_OW 277
// end ;
20272: PPOPN 2
20274: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20275: LD_EXP 51
20279: PUSH
20280: LD_EXP 79
20284: AND
20285: IFFALSE 20382
20287: GO 20289
20289: DISABLE
20290: LD_INT 0
20292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20293: LD_ADDR_VAR 0 1
20297: PUSH
20298: LD_INT 22
20300: PUSH
20301: LD_OWVAR 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 21
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: LD_INT 23
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: PPUSH
20342: CALL_OW 69
20346: ST_TO_ADDR
// if not tmp then
20347: LD_VAR 0 1
20351: NOT
20352: IFFALSE 20356
// exit ;
20354: GO 20382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20356: LD_VAR 0 1
20360: PUSH
20361: LD_INT 1
20363: PPUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 12
20373: ARRAY
20374: PPUSH
20375: LD_INT 200
20377: PPUSH
20378: CALL_OW 234
// end ;
20382: PPOPN 1
20384: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20385: LD_EXP 51
20389: PUSH
20390: LD_EXP 80
20394: AND
20395: IFFALSE 20474
20397: GO 20399
20399: DISABLE
20400: LD_INT 0
20402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: ST_TO_ADDR
// if not tmp then
20439: LD_VAR 0 1
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20448: LD_VAR 0 1
20452: PUSH
20453: LD_INT 1
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 12
20465: ARRAY
20466: PPUSH
20467: LD_INT 60
20469: PPUSH
20470: CALL_OW 234
// end ;
20474: PPOPN 1
20476: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20477: LD_EXP 51
20481: PUSH
20482: LD_EXP 81
20486: AND
20487: IFFALSE 20586
20489: GO 20491
20491: DISABLE
20492: LD_INT 0
20494: PPUSH
20495: PPUSH
// begin enable ;
20496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_INT 22
20504: PUSH
20505: LD_OWVAR 2
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 61
20516: PUSH
20517: EMPTY
20518: LIST
20519: PUSH
20520: LD_INT 33
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: ST_TO_ADDR
// if not tmp then
20540: LD_VAR 0 1
20544: NOT
20545: IFFALSE 20549
// exit ;
20547: GO 20586
// for i in tmp do
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_VAR 0 1
20558: PUSH
20559: FOR_IN
20560: IFFALSE 20584
// if IsControledBy ( i ) then
20562: LD_VAR 0 2
20566: PPUSH
20567: CALL_OW 312
20571: IFFALSE 20582
// ComUnlink ( i ) ;
20573: LD_VAR 0 2
20577: PPUSH
20578: CALL_OW 136
20582: GO 20559
20584: POP
20585: POP
// end ;
20586: PPOPN 2
20588: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20589: LD_EXP 51
20593: PUSH
20594: LD_EXP 82
20598: AND
20599: IFFALSE 20739
20601: GO 20603
20603: DISABLE
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
// begin ToLua ( displayPowell(); ) ;
20608: LD_STRING displayPowell();
20610: PPUSH
20611: CALL_OW 559
// uc_side := 0 ;
20615: LD_ADDR_OWVAR 20
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// uc_nation := 2 ;
20623: LD_ADDR_OWVAR 21
20627: PUSH
20628: LD_INT 2
20630: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20631: LD_ADDR_OWVAR 37
20635: PUSH
20636: LD_INT 14
20638: ST_TO_ADDR
// vc_engine := engine_siberite ;
20639: LD_ADDR_OWVAR 39
20643: PUSH
20644: LD_INT 3
20646: ST_TO_ADDR
// vc_control := control_apeman ;
20647: LD_ADDR_OWVAR 38
20651: PUSH
20652: LD_INT 5
20654: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20655: LD_ADDR_OWVAR 40
20659: PUSH
20660: LD_INT 29
20662: ST_TO_ADDR
// un := CreateVehicle ;
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: CALL_OW 45
20672: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20673: LD_VAR 0 2
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20685: LD_INT 35
20687: PPUSH
20688: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_INT 22
20699: PUSH
20700: LD_OWVAR 2
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: PPUSH
20714: LD_VAR 0 2
20718: PPUSH
20719: CALL_OW 74
20723: PPUSH
20724: CALL_OW 115
// until IsDead ( un ) ;
20728: LD_VAR 0 2
20732: PPUSH
20733: CALL_OW 301
20737: IFFALSE 20685
// end ;
20739: PPOPN 2
20741: END
// every 0 0$1 trigger StreamModeActive and sStu do
20742: LD_EXP 51
20746: PUSH
20747: LD_EXP 90
20751: AND
20752: IFFALSE 20768
20754: GO 20756
20756: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20757: LD_STRING displayStucuk();
20759: PPUSH
20760: CALL_OW 559
// ResetFog ;
20764: CALL_OW 335
// end ;
20768: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20769: LD_EXP 51
20773: PUSH
20774: LD_EXP 83
20778: AND
20779: IFFALSE 20920
20781: GO 20783
20783: DISABLE
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20788: LD_ADDR_VAR 0 2
20792: PUSH
20793: LD_INT 22
20795: PUSH
20796: LD_OWVAR 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: ST_TO_ADDR
// if not tmp then
20824: LD_VAR 0 2
20828: NOT
20829: IFFALSE 20833
// exit ;
20831: GO 20920
// un := tmp [ rand ( 1 , tmp ) ] ;
20833: LD_ADDR_VAR 0 1
20837: PUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: PPUSH
20846: LD_VAR 0 2
20850: PPUSH
20851: CALL_OW 12
20855: ARRAY
20856: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 0
20864: PPUSH
20865: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20869: LD_VAR 0 1
20873: PPUSH
20874: LD_OWVAR 3
20878: PUSH
20879: LD_VAR 0 1
20883: DIFF
20884: PPUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 74
20894: PPUSH
20895: CALL_OW 115
// wait ( 0 0$20 ) ;
20899: LD_INT 700
20901: PPUSH
20902: CALL_OW 67
// SetSide ( un , your_side ) ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_OWVAR 2
20915: PPUSH
20916: CALL_OW 235
// end ;
20920: PPOPN 2
20922: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20923: LD_EXP 51
20927: PUSH
20928: LD_EXP 84
20932: AND
20933: IFFALSE 21039
20935: GO 20937
20937: DISABLE
20938: LD_INT 0
20940: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20941: LD_ADDR_VAR 0 1
20945: PUSH
20946: LD_INT 22
20948: PUSH
20949: LD_OWVAR 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 30
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 69
20994: ST_TO_ADDR
// if not depot then
20995: LD_VAR 0 1
20999: NOT
21000: IFFALSE 21004
// exit ;
21002: GO 21039
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21004: LD_VAR 0 1
21008: PUSH
21009: LD_INT 1
21011: ARRAY
21012: PPUSH
21013: CALL_OW 250
21017: PPUSH
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: CALL_OW 251
21031: PPUSH
21032: LD_INT 70
21034: PPUSH
21035: CALL_OW 495
// end ;
21039: PPOPN 1
21041: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21042: LD_EXP 51
21046: PUSH
21047: LD_EXP 85
21051: AND
21052: IFFALSE 21263
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21064: LD_ADDR_VAR 0 5
21068: PUSH
21069: LD_INT 22
21071: PUSH
21072: LD_OWVAR 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: ST_TO_ADDR
// if not tmp then
21100: LD_VAR 0 5
21104: NOT
21105: IFFALSE 21109
// exit ;
21107: GO 21263
// for i in tmp do
21109: LD_ADDR_VAR 0 1
21113: PUSH
21114: LD_VAR 0 5
21118: PUSH
21119: FOR_IN
21120: IFFALSE 21261
// begin d := rand ( 0 , 5 ) ;
21122: LD_ADDR_VAR 0 4
21126: PUSH
21127: LD_INT 0
21129: PPUSH
21130: LD_INT 5
21132: PPUSH
21133: CALL_OW 12
21137: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21138: LD_ADDR_VAR 0 2
21142: PUSH
21143: LD_VAR 0 1
21147: PPUSH
21148: CALL_OW 250
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: LD_INT 3
21160: PPUSH
21161: LD_INT 12
21163: PPUSH
21164: CALL_OW 12
21168: PPUSH
21169: CALL_OW 272
21173: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21174: LD_ADDR_VAR 0 3
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 251
21188: PPUSH
21189: LD_VAR 0 4
21193: PPUSH
21194: LD_INT 3
21196: PPUSH
21197: LD_INT 12
21199: PPUSH
21200: CALL_OW 12
21204: PPUSH
21205: CALL_OW 273
21209: ST_TO_ADDR
// if ValidHex ( x , y ) then
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: CALL_OW 488
21224: IFFALSE 21259
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_VAR 0 2
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: LD_INT 3
21243: PPUSH
21244: LD_INT 6
21246: PPUSH
21247: CALL_OW 12
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: CALL_OW 483
// end ;
21259: GO 21119
21261: POP
21262: POP
// end ;
21263: PPOPN 5
21265: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21266: LD_EXP 51
21270: PUSH
21271: LD_EXP 86
21275: AND
21276: IFFALSE 21370
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21285: LD_ADDR_VAR 0 2
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_OWVAR 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 32
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 21
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 2
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21370
// for i in tmp do
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21368
// SetFuel ( i , 0 ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 0
21361: PPUSH
21362: CALL_OW 240
21366: GO 21351
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21373: LD_EXP 51
21377: PUSH
21378: LD_EXP 87
21382: AND
21383: IFFALSE 21449
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_OWVAR 2
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 30
21410: PUSH
21411: LD_INT 29
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PPUSH
21422: CALL_OW 69
21426: ST_TO_ADDR
// if not tmp then
21427: LD_VAR 0 1
21431: NOT
21432: IFFALSE 21436
// exit ;
21434: GO 21449
// DestroyUnit ( tmp [ 1 ] ) ;
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: CALL_OW 65
// end ;
21449: PPOPN 1
21451: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21452: LD_EXP 51
21456: PUSH
21457: LD_EXP 89
21461: AND
21462: IFFALSE 21591
21464: GO 21466
21466: DISABLE
21467: LD_INT 0
21469: PPUSH
// begin uc_side := 0 ;
21470: LD_ADDR_OWVAR 20
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// uc_nation := nation_arabian ;
21478: LD_ADDR_OWVAR 21
21482: PUSH
21483: LD_INT 2
21485: ST_TO_ADDR
// hc_gallery :=  ;
21486: LD_ADDR_OWVAR 33
21490: PUSH
21491: LD_STRING 
21493: ST_TO_ADDR
// hc_name :=  ;
21494: LD_ADDR_OWVAR 26
21498: PUSH
21499: LD_STRING 
21501: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21502: LD_INT 1
21504: PPUSH
21505: LD_INT 11
21507: PPUSH
21508: LD_INT 10
21510: PPUSH
21511: CALL_OW 380
// un := CreateHuman ;
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: CALL_OW 44
21524: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21537: LD_INT 35
21539: PPUSH
21540: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_INT 22
21551: PUSH
21552: LD_OWVAR 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: PPUSH
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 74
21575: PPUSH
21576: CALL_OW 115
// until IsDead ( un ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 301
21589: IFFALSE 21537
// end ;
21591: PPOPN 1
21593: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21594: LD_EXP 51
21598: PUSH
21599: LD_EXP 91
21603: AND
21604: IFFALSE 21616
21606: GO 21608
21608: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21609: LD_STRING earthquake(getX(game), 0, 32)
21611: PPUSH
21612: CALL_OW 559
21616: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21617: LD_EXP 51
21621: PUSH
21622: LD_EXP 92
21626: AND
21627: IFFALSE 21718
21629: GO 21631
21631: DISABLE
21632: LD_INT 0
21634: PPUSH
// begin enable ;
21635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21636: LD_ADDR_VAR 0 1
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_OWVAR 2
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 33
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 1
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: CALL_OW 12
21709: ARRAY
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 234
// end ;
21718: PPOPN 1
21720: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21721: LD_EXP 51
21725: PUSH
21726: LD_EXP 93
21730: AND
21731: IFFALSE 21872
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 3
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21872
// un := tmp [ rand ( 1 , tmp ) ] ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_VAR 0 3
21795: PUSH
21796: LD_INT 1
21798: PPUSH
21799: LD_VAR 0 3
21803: PPUSH
21804: CALL_OW 12
21808: ARRAY
21809: ST_TO_ADDR
// if Crawls ( un ) then
21810: LD_VAR 0 2
21814: PPUSH
21815: CALL_OW 318
21819: IFFALSE 21830
// ComWalk ( un ) ;
21821: LD_VAR 0 2
21825: PPUSH
21826: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21830: LD_VAR 0 2
21834: PPUSH
21835: LD_INT 9
21837: PPUSH
21838: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21842: LD_INT 28
21844: PPUSH
21845: LD_OWVAR 2
21849: PPUSH
21850: LD_INT 2
21852: PPUSH
21853: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21857: LD_INT 29
21859: PPUSH
21860: LD_OWVAR 2
21864: PPUSH
21865: LD_INT 2
21867: PPUSH
21868: CALL_OW 322
// end ;
21872: PPOPN 3
21874: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21875: LD_EXP 51
21879: PUSH
21880: LD_EXP 94
21884: AND
21885: IFFALSE 21996
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
21894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_INT 22
21902: PUSH
21903: LD_OWVAR 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 25
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 3
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21996
// un := tmp [ rand ( 1 , tmp ) ] ;
21940: LD_ADDR_VAR 0 2
21944: PUSH
21945: LD_VAR 0 3
21949: PUSH
21950: LD_INT 1
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: CALL_OW 12
21962: ARRAY
21963: ST_TO_ADDR
// if Crawls ( un ) then
21964: LD_VAR 0 2
21968: PPUSH
21969: CALL_OW 318
21973: IFFALSE 21984
// ComWalk ( un ) ;
21975: LD_VAR 0 2
21979: PPUSH
21980: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_INT 8
21991: PPUSH
21992: CALL_OW 336
// end ;
21996: PPOPN 3
21998: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21999: LD_EXP 51
22003: PUSH
22004: LD_EXP 95
22008: AND
22009: IFFALSE 22153
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22018: LD_ADDR_VAR 0 2
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_OWVAR 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 21
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 34
22050: PUSH
22051: LD_INT 12
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 34
22060: PUSH
22061: LD_INT 51
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 34
22070: PUSH
22071: LD_INT 32
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: PPUSH
22089: CALL_OW 69
22093: ST_TO_ADDR
// if not tmp then
22094: LD_VAR 0 2
22098: NOT
22099: IFFALSE 22103
// exit ;
22101: GO 22153
// for i in tmp do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: LD_VAR 0 2
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22151
// if GetCargo ( i , mat_artifact ) = 0 then
22116: LD_VAR 0 1
22120: PPUSH
22121: LD_INT 4
22123: PPUSH
22124: CALL_OW 289
22128: PUSH
22129: LD_INT 0
22131: EQUAL
22132: IFFALSE 22149
// SetCargo ( i , mat_siberit , 100 ) ;
22134: LD_VAR 0 1
22138: PPUSH
22139: LD_INT 3
22141: PPUSH
22142: LD_INT 100
22144: PPUSH
22145: CALL_OW 290
22149: GO 22113
22151: POP
22152: POP
// end ;
22153: PPOPN 2
22155: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22156: LD_EXP 51
22160: PUSH
22161: LD_EXP 96
22165: AND
22166: IFFALSE 22349
22168: GO 22170
22170: DISABLE
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22175: LD_ADDR_VAR 0 2
22179: PUSH
22180: LD_INT 22
22182: PUSH
22183: LD_OWVAR 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PPUSH
22192: CALL_OW 69
22196: ST_TO_ADDR
// if not tmp then
22197: LD_VAR 0 2
22201: NOT
22202: IFFALSE 22206
// exit ;
22204: GO 22349
// for i := 1 to 2 do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: DOUBLE
22212: LD_INT 1
22214: DEC
22215: ST_TO_ADDR
22216: LD_INT 2
22218: PUSH
22219: FOR_TO
22220: IFFALSE 22347
// begin uc_side := your_side ;
22222: LD_ADDR_OWVAR 20
22226: PUSH
22227: LD_OWVAR 2
22231: ST_TO_ADDR
// uc_nation := nation_american ;
22232: LD_ADDR_OWVAR 21
22236: PUSH
22237: LD_INT 1
22239: ST_TO_ADDR
// vc_chassis := us_morphling ;
22240: LD_ADDR_OWVAR 37
22244: PUSH
22245: LD_INT 5
22247: ST_TO_ADDR
// vc_engine := engine_siberite ;
22248: LD_ADDR_OWVAR 39
22252: PUSH
22253: LD_INT 3
22255: ST_TO_ADDR
// vc_control := control_computer ;
22256: LD_ADDR_OWVAR 38
22260: PUSH
22261: LD_INT 3
22263: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22264: LD_ADDR_OWVAR 40
22268: PUSH
22269: LD_INT 10
22271: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22272: LD_VAR 0 2
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 310
22285: NOT
22286: IFFALSE 22333
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22288: CALL_OW 45
22292: PPUSH
22293: LD_VAR 0 2
22297: PUSH
22298: LD_INT 1
22300: ARRAY
22301: PPUSH
22302: CALL_OW 250
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: CALL_OW 251
22320: PPUSH
22321: LD_INT 12
22323: PPUSH
22324: LD_INT 1
22326: PPUSH
22327: CALL_OW 50
22331: GO 22345
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22333: CALL_OW 45
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 51
// end ;
22345: GO 22219
22347: POP
22348: POP
// end ;
22349: PPOPN 2
22351: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22352: LD_EXP 51
22356: PUSH
22357: LD_EXP 97
22361: AND
22362: IFFALSE 22584
22364: GO 22366
22366: DISABLE
22367: LD_INT 0
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22375: LD_ADDR_VAR 0 6
22379: PUSH
22380: LD_INT 22
22382: PUSH
22383: LD_OWVAR 2
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 21
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 23
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: PPUSH
22424: CALL_OW 69
22428: ST_TO_ADDR
// if not tmp then
22429: LD_VAR 0 6
22433: NOT
22434: IFFALSE 22438
// exit ;
22436: GO 22584
// s1 := rand ( 1 , 4 ) ;
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 1
22445: PPUSH
22446: LD_INT 4
22448: PPUSH
22449: CALL_OW 12
22453: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22454: LD_ADDR_VAR 0 4
22458: PUSH
22459: LD_VAR 0 6
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 2
22472: PPUSH
22473: CALL_OW 259
22477: ST_TO_ADDR
// if s1 = 1 then
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 1
22485: EQUAL
22486: IFFALSE 22506
// s2 := rand ( 2 , 4 ) else
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_INT 2
22495: PPUSH
22496: LD_INT 4
22498: PPUSH
22499: CALL_OW 12
22503: ST_TO_ADDR
22504: GO 22514
// s2 := 1 ;
22506: LD_ADDR_VAR 0 3
22510: PUSH
22511: LD_INT 1
22513: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22514: LD_ADDR_VAR 0 5
22518: PUSH
22519: LD_VAR 0 6
22523: PUSH
22524: LD_INT 1
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: CALL_OW 259
22537: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22538: LD_VAR 0 6
22542: PUSH
22543: LD_INT 1
22545: ARRAY
22546: PPUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: LD_VAR 0 5
22556: PPUSH
22557: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22561: LD_VAR 0 6
22565: PUSH
22566: LD_INT 1
22568: ARRAY
22569: PPUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_VAR 0 4
22579: PPUSH
22580: CALL_OW 237
// end ;
22584: PPOPN 6
22586: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22587: LD_EXP 51
22591: PUSH
22592: LD_EXP 98
22596: AND
22597: IFFALSE 22676
22599: GO 22601
22601: DISABLE
22602: LD_INT 0
22604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22605: LD_ADDR_VAR 0 1
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_OWVAR 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 30
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PPUSH
22636: CALL_OW 69
22640: ST_TO_ADDR
// if not tmp then
22641: LD_VAR 0 1
22645: NOT
22646: IFFALSE 22650
// exit ;
22648: GO 22676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22650: LD_VAR 0 1
22654: PUSH
22655: LD_INT 1
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 12
22667: ARRAY
22668: PPUSH
22669: LD_INT 1
22671: PPUSH
22672: CALL_OW 234
// end ;
22676: PPOPN 1
22678: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22679: LD_EXP 51
22683: PUSH
22684: LD_EXP 99
22688: AND
22689: IFFALSE 22801
22691: GO 22693
22693: DISABLE
22694: LD_INT 0
22696: PPUSH
22697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22698: LD_ADDR_VAR 0 2
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_OWVAR 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 27
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 30
22730: PUSH
22731: LD_INT 26
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 30
22740: PUSH
22741: LD_INT 28
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 69
22762: ST_TO_ADDR
// if not tmp then
22763: LD_VAR 0 2
22767: NOT
22768: IFFALSE 22772
// exit ;
22770: GO 22801
// for i in tmp do
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: LD_VAR 0 2
22781: PUSH
22782: FOR_IN
22783: IFFALSE 22799
// SetLives ( i , 1 ) ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 234
22797: GO 22782
22799: POP
22800: POP
// end ;
22801: PPOPN 2
22803: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22804: LD_EXP 51
22808: PUSH
22809: LD_EXP 100
22813: AND
22814: IFFALSE 23088
22816: GO 22818
22818: DISABLE
22819: LD_INT 0
22821: PPUSH
22822: PPUSH
22823: PPUSH
// begin i := rand ( 1 , 7 ) ;
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_INT 1
22831: PPUSH
22832: LD_INT 7
22834: PPUSH
22835: CALL_OW 12
22839: ST_TO_ADDR
// case i of 1 :
22840: LD_VAR 0 1
22844: PUSH
22845: LD_INT 1
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 22863
22853: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22854: LD_STRING earthquake(getX(game), 0, 32)
22856: PPUSH
22857: CALL_OW 559
22861: GO 23088
22863: LD_INT 2
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22885
22871: POP
// begin ToLua ( displayStucuk(); ) ;
22872: LD_STRING displayStucuk();
22874: PPUSH
22875: CALL_OW 559
// ResetFog ;
22879: CALL_OW 335
// end ; 3 :
22883: GO 23088
22885: LD_INT 3
22887: DOUBLE
22888: EQUAL
22889: IFTRUE 22893
22891: GO 22997
22893: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_OWVAR 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 25
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PPUSH
22925: CALL_OW 69
22929: ST_TO_ADDR
// if not tmp then
22930: LD_VAR 0 2
22934: NOT
22935: IFFALSE 22939
// exit ;
22937: GO 23088
// un := tmp [ rand ( 1 , tmp ) ] ;
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_VAR 0 2
22948: PUSH
22949: LD_INT 1
22951: PPUSH
22952: LD_VAR 0 2
22956: PPUSH
22957: CALL_OW 12
22961: ARRAY
22962: ST_TO_ADDR
// if Crawls ( un ) then
22963: LD_VAR 0 3
22967: PPUSH
22968: CALL_OW 318
22972: IFFALSE 22983
// ComWalk ( un ) ;
22974: LD_VAR 0 3
22978: PPUSH
22979: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22983: LD_VAR 0 3
22987: PPUSH
22988: LD_INT 8
22990: PPUSH
22991: CALL_OW 336
// end ; 4 :
22995: GO 23088
22997: LD_INT 4
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23066
23005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_OWVAR 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 29
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// if not tmp then
23042: LD_VAR 0 2
23046: NOT
23047: IFFALSE 23051
// exit ;
23049: GO 23088
// DestroyUnit ( tmp [ 1 ] ) ;
23051: LD_VAR 0 2
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: CALL_OW 65
// end ; 5 .. 7 :
23064: GO 23088
23066: LD_INT 5
23068: DOUBLE
23069: GREATEREQUAL
23070: IFFALSE 23078
23072: LD_INT 7
23074: DOUBLE
23075: LESSEQUAL
23076: IFTRUE 23080
23078: GO 23087
23080: POP
// StreamSibBomb ; end ;
23081: CALL 19338 0 0
23085: GO 23088
23087: POP
// end ;
23088: PPOPN 3
23090: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23091: LD_EXP 51
23095: PUSH
23096: LD_EXP 101
23100: AND
23101: IFFALSE 23257
23103: GO 23105
23105: DISABLE
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23111: LD_ADDR_VAR 0 2
23115: PUSH
23116: LD_INT 81
23118: PUSH
23119: LD_OWVAR 2
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 21
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 21
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 69
23164: ST_TO_ADDR
// if not tmp then
23165: LD_VAR 0 2
23169: NOT
23170: IFFALSE 23174
// exit ;
23172: GO 23257
// p := 0 ;
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23182: LD_INT 35
23184: PPUSH
23185: CALL_OW 67
// p := p + 1 ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 1
23201: PLUS
23202: ST_TO_ADDR
// for i in tmp do
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_VAR 0 2
23212: PUSH
23213: FOR_IN
23214: IFFALSE 23245
// if GetLives ( i ) < 1000 then
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 256
23225: PUSH
23226: LD_INT 1000
23228: LESS
23229: IFFALSE 23243
// SetLives ( i , 1000 ) ;
23231: LD_VAR 0 1
23235: PPUSH
23236: LD_INT 1000
23238: PPUSH
23239: CALL_OW 234
23243: GO 23213
23245: POP
23246: POP
// until p > 20 ;
23247: LD_VAR 0 3
23251: PUSH
23252: LD_INT 20
23254: GREATER
23255: IFFALSE 23182
// end ;
23257: PPOPN 3
23259: END
// every 0 0$1 trigger StreamModeActive and sTime do
23260: LD_EXP 51
23264: PUSH
23265: LD_EXP 102
23269: AND
23270: IFFALSE 23305
23272: GO 23274
23274: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23275: LD_INT 28
23277: PPUSH
23278: LD_OWVAR 2
23282: PPUSH
23283: LD_INT 2
23285: PPUSH
23286: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23290: LD_INT 30
23292: PPUSH
23293: LD_OWVAR 2
23297: PPUSH
23298: LD_INT 2
23300: PPUSH
23301: CALL_OW 322
// end ;
23305: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23306: LD_EXP 51
23310: PUSH
23311: LD_EXP 103
23315: AND
23316: IFFALSE 23437
23318: GO 23320
23320: DISABLE
23321: LD_INT 0
23323: PPUSH
23324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23325: LD_ADDR_VAR 0 2
23329: PUSH
23330: LD_INT 22
23332: PUSH
23333: LD_OWVAR 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 23
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: ST_TO_ADDR
// if not tmp then
23379: LD_VAR 0 2
23383: NOT
23384: IFFALSE 23388
// exit ;
23386: GO 23437
// for i in tmp do
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: LD_VAR 0 2
23397: PUSH
23398: FOR_IN
23399: IFFALSE 23435
// begin if Crawls ( i ) then
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 318
23410: IFFALSE 23421
// ComWalk ( i ) ;
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 138
// SetClass ( i , 2 ) ;
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_INT 2
23428: PPUSH
23429: CALL_OW 336
// end ;
23433: GO 23398
23435: POP
23436: POP
// end ;
23437: PPOPN 2
23439: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23440: LD_EXP 51
23444: PUSH
23445: LD_EXP 104
23449: AND
23450: IFFALSE 23731
23452: GO 23454
23454: DISABLE
23455: LD_INT 0
23457: PPUSH
23458: PPUSH
23459: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23460: LD_OWVAR 2
23464: PPUSH
23465: LD_INT 9
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: LD_INT 1
23473: PPUSH
23474: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23478: LD_INT 9
23480: PPUSH
23481: LD_OWVAR 2
23485: PPUSH
23486: CALL_OW 343
// uc_side := 9 ;
23490: LD_ADDR_OWVAR 20
23494: PUSH
23495: LD_INT 9
23497: ST_TO_ADDR
// uc_nation := 2 ;
23498: LD_ADDR_OWVAR 21
23502: PUSH
23503: LD_INT 2
23505: ST_TO_ADDR
// hc_name := Dark Warrior ;
23506: LD_ADDR_OWVAR 26
23510: PUSH
23511: LD_STRING Dark Warrior
23513: ST_TO_ADDR
// hc_gallery :=  ;
23514: LD_ADDR_OWVAR 33
23518: PUSH
23519: LD_STRING 
23521: ST_TO_ADDR
// hc_noskilllimit := true ;
23522: LD_ADDR_OWVAR 76
23526: PUSH
23527: LD_INT 1
23529: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23530: LD_ADDR_OWVAR 31
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 30
23540: PUSH
23541: LD_INT 30
23543: PUSH
23544: LD_INT 30
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// un := CreateHuman ;
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: CALL_OW 44
23562: ST_TO_ADDR
// hc_noskilllimit := false ;
23563: LD_ADDR_OWVAR 76
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23571: LD_VAR 0 3
23575: PPUSH
23576: LD_INT 1
23578: PPUSH
23579: CALL_OW 51
// p := 0 ;
23583: LD_ADDR_VAR 0 2
23587: PUSH
23588: LD_INT 0
23590: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23591: LD_INT 35
23593: PPUSH
23594: CALL_OW 67
// p := p + 1 ;
23598: LD_ADDR_VAR 0 2
23602: PUSH
23603: LD_VAR 0 2
23607: PUSH
23608: LD_INT 1
23610: PLUS
23611: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23612: LD_VAR 0 3
23616: PPUSH
23617: CALL_OW 256
23621: PUSH
23622: LD_INT 1000
23624: LESS
23625: IFFALSE 23639
// SetLives ( un , 1000 ) ;
23627: LD_VAR 0 3
23631: PPUSH
23632: LD_INT 1000
23634: PPUSH
23635: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 81
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 91
23658: PUSH
23659: LD_VAR 0 3
23663: PUSH
23664: LD_INT 30
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 69
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: CALL_OW 74
23690: PPUSH
23691: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23695: LD_VAR 0 2
23699: PUSH
23700: LD_INT 60
23702: GREATER
23703: PUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: CALL_OW 301
23713: OR
23714: IFFALSE 23591
// if un then
23716: LD_VAR 0 3
23720: IFFALSE 23731
// RemoveUnit ( un ) ;
23722: LD_VAR 0 3
23726: PPUSH
23727: CALL_OW 64
// end ;
23731: PPOPN 3
23733: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23734: LD_INT 0
23736: PPUSH
// case cmd of 301 :
23737: LD_VAR 0 1
23741: PUSH
23742: LD_INT 301
23744: DOUBLE
23745: EQUAL
23746: IFTRUE 23750
23748: GO 23782
23750: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23751: LD_VAR 0 6
23755: PPUSH
23756: LD_VAR 0 7
23760: PPUSH
23761: LD_VAR 0 8
23765: PPUSH
23766: LD_VAR 0 4
23770: PPUSH
23771: LD_VAR 0 5
23775: PPUSH
23776: CALL 24983 0 5
23780: GO 23903
23782: LD_INT 302
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23827
23790: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23791: LD_VAR 0 6
23795: PPUSH
23796: LD_VAR 0 7
23800: PPUSH
23801: LD_VAR 0 8
23805: PPUSH
23806: LD_VAR 0 9
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: LD_VAR 0 5
23820: PPUSH
23821: CALL 25074 0 6
23825: GO 23903
23827: LD_INT 303
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23872
23835: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23836: LD_VAR 0 6
23840: PPUSH
23841: LD_VAR 0 7
23845: PPUSH
23846: LD_VAR 0 8
23850: PPUSH
23851: LD_VAR 0 9
23855: PPUSH
23856: LD_VAR 0 4
23860: PPUSH
23861: LD_VAR 0 5
23865: PPUSH
23866: CALL 23908 0 6
23870: GO 23903
23872: LD_INT 304
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23902
23880: POP
// hHackTeleport ( unit , x , y ) ; end ;
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 4
23890: PPUSH
23891: LD_VAR 0 5
23895: PPUSH
23896: CALL 25667 0 3
23900: GO 23903
23902: POP
// end ;
23903: LD_VAR 0 12
23907: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23908: LD_INT 0
23910: PPUSH
23911: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 1
23919: LESS
23920: PUSH
23921: LD_VAR 0 1
23925: PUSH
23926: LD_INT 3
23928: GREATER
23929: OR
23930: PUSH
23931: LD_VAR 0 5
23935: PPUSH
23936: LD_VAR 0 6
23940: PPUSH
23941: CALL_OW 428
23945: OR
23946: IFFALSE 23950
// exit ;
23948: GO 24670
// uc_side := your_side ;
23950: LD_ADDR_OWVAR 20
23954: PUSH
23955: LD_OWVAR 2
23959: ST_TO_ADDR
// uc_nation := nation ;
23960: LD_ADDR_OWVAR 21
23964: PUSH
23965: LD_VAR 0 1
23969: ST_TO_ADDR
// bc_level = 1 ;
23970: LD_ADDR_OWVAR 43
23974: PUSH
23975: LD_INT 1
23977: ST_TO_ADDR
// case btype of 1 :
23978: LD_VAR 0 2
23982: PUSH
23983: LD_INT 1
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24002
23991: POP
// bc_type := b_depot ; 2 :
23992: LD_ADDR_OWVAR 42
23996: PUSH
23997: LD_INT 0
23999: ST_TO_ADDR
24000: GO 24614
24002: LD_INT 2
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24021
24010: POP
// bc_type := b_warehouse ; 3 :
24011: LD_ADDR_OWVAR 42
24015: PUSH
24016: LD_INT 1
24018: ST_TO_ADDR
24019: GO 24614
24021: LD_INT 3
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24040
24029: POP
// bc_type := b_lab ; 4 .. 9 :
24030: LD_ADDR_OWVAR 42
24034: PUSH
24035: LD_INT 6
24037: ST_TO_ADDR
24038: GO 24614
24040: LD_INT 4
24042: DOUBLE
24043: GREATEREQUAL
24044: IFFALSE 24052
24046: LD_INT 9
24048: DOUBLE
24049: LESSEQUAL
24050: IFTRUE 24054
24052: GO 24106
24054: POP
// begin bc_type := b_lab_half ;
24055: LD_ADDR_OWVAR 42
24059: PUSH
24060: LD_INT 7
24062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24063: LD_ADDR_OWVAR 44
24067: PUSH
24068: LD_INT 10
24070: PUSH
24071: LD_INT 11
24073: PUSH
24074: LD_INT 12
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 14
24082: PUSH
24083: LD_INT 13
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: LD_VAR 0 2
24098: PUSH
24099: LD_INT 3
24101: MINUS
24102: ARRAY
24103: ST_TO_ADDR
// end ; 10 .. 13 :
24104: GO 24614
24106: LD_INT 10
24108: DOUBLE
24109: GREATEREQUAL
24110: IFFALSE 24118
24112: LD_INT 13
24114: DOUBLE
24115: LESSEQUAL
24116: IFTRUE 24120
24118: GO 24197
24120: POP
// begin bc_type := b_lab_full ;
24121: LD_ADDR_OWVAR 42
24125: PUSH
24126: LD_INT 8
24128: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24129: LD_ADDR_OWVAR 44
24133: PUSH
24134: LD_INT 10
24136: PUSH
24137: LD_INT 12
24139: PUSH
24140: LD_INT 14
24142: PUSH
24143: LD_INT 13
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_INT 9
24159: MINUS
24160: ARRAY
24161: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24162: LD_ADDR_OWVAR 45
24166: PUSH
24167: LD_INT 11
24169: PUSH
24170: LD_INT 15
24172: PUSH
24173: LD_INT 12
24175: PUSH
24176: LD_INT 15
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: PUSH
24185: LD_VAR 0 2
24189: PUSH
24190: LD_INT 9
24192: MINUS
24193: ARRAY
24194: ST_TO_ADDR
// end ; 14 :
24195: GO 24614
24197: LD_INT 14
24199: DOUBLE
24200: EQUAL
24201: IFTRUE 24205
24203: GO 24216
24205: POP
// bc_type := b_workshop ; 15 :
24206: LD_ADDR_OWVAR 42
24210: PUSH
24211: LD_INT 2
24213: ST_TO_ADDR
24214: GO 24614
24216: LD_INT 15
24218: DOUBLE
24219: EQUAL
24220: IFTRUE 24224
24222: GO 24235
24224: POP
// bc_type := b_factory ; 16 :
24225: LD_ADDR_OWVAR 42
24229: PUSH
24230: LD_INT 3
24232: ST_TO_ADDR
24233: GO 24614
24235: LD_INT 16
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24254
24243: POP
// bc_type := b_ext_gun ; 17 :
24244: LD_ADDR_OWVAR 42
24248: PUSH
24249: LD_INT 17
24251: ST_TO_ADDR
24252: GO 24614
24254: LD_INT 17
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24290
24262: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24263: LD_ADDR_OWVAR 42
24267: PUSH
24268: LD_INT 19
24270: PUSH
24271: LD_INT 23
24273: PUSH
24274: LD_INT 19
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: LD_VAR 0 1
24286: ARRAY
24287: ST_TO_ADDR
24288: GO 24614
24290: LD_INT 18
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// bc_type := b_ext_radar ; 19 :
24299: LD_ADDR_OWVAR 42
24303: PUSH
24304: LD_INT 20
24306: ST_TO_ADDR
24307: GO 24614
24309: LD_INT 19
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// bc_type := b_ext_radio ; 20 :
24318: LD_ADDR_OWVAR 42
24322: PUSH
24323: LD_INT 22
24325: ST_TO_ADDR
24326: GO 24614
24328: LD_INT 20
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24347
24336: POP
// bc_type := b_ext_siberium ; 21 :
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 21
24344: ST_TO_ADDR
24345: GO 24614
24347: LD_INT 21
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24366
24355: POP
// bc_type := b_ext_computer ; 22 :
24356: LD_ADDR_OWVAR 42
24360: PUSH
24361: LD_INT 24
24363: ST_TO_ADDR
24364: GO 24614
24366: LD_INT 22
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24385
24374: POP
// bc_type := b_ext_track ; 23 :
24375: LD_ADDR_OWVAR 42
24379: PUSH
24380: LD_INT 16
24382: ST_TO_ADDR
24383: GO 24614
24385: LD_INT 23
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24404
24393: POP
// bc_type := b_ext_laser ; 24 :
24394: LD_ADDR_OWVAR 42
24398: PUSH
24399: LD_INT 25
24401: ST_TO_ADDR
24402: GO 24614
24404: LD_INT 24
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24423
24412: POP
// bc_type := b_control_tower ; 25 :
24413: LD_ADDR_OWVAR 42
24417: PUSH
24418: LD_INT 36
24420: ST_TO_ADDR
24421: GO 24614
24423: LD_INT 25
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24442
24431: POP
// bc_type := b_breastwork ; 26 :
24432: LD_ADDR_OWVAR 42
24436: PUSH
24437: LD_INT 31
24439: ST_TO_ADDR
24440: GO 24614
24442: LD_INT 26
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24461
24450: POP
// bc_type := b_bunker ; 27 :
24451: LD_ADDR_OWVAR 42
24455: PUSH
24456: LD_INT 32
24458: ST_TO_ADDR
24459: GO 24614
24461: LD_INT 27
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24480
24469: POP
// bc_type := b_turret ; 28 :
24470: LD_ADDR_OWVAR 42
24474: PUSH
24475: LD_INT 33
24477: ST_TO_ADDR
24478: GO 24614
24480: LD_INT 28
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24499
24488: POP
// bc_type := b_armoury ; 29 :
24489: LD_ADDR_OWVAR 42
24493: PUSH
24494: LD_INT 4
24496: ST_TO_ADDR
24497: GO 24614
24499: LD_INT 29
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24518
24507: POP
// bc_type := b_barracks ; 30 :
24508: LD_ADDR_OWVAR 42
24512: PUSH
24513: LD_INT 5
24515: ST_TO_ADDR
24516: GO 24614
24518: LD_INT 30
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24537
24526: POP
// bc_type := b_solar_power ; 31 :
24527: LD_ADDR_OWVAR 42
24531: PUSH
24532: LD_INT 27
24534: ST_TO_ADDR
24535: GO 24614
24537: LD_INT 31
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24556
24545: POP
// bc_type := b_oil_power ; 32 :
24546: LD_ADDR_OWVAR 42
24550: PUSH
24551: LD_INT 26
24553: ST_TO_ADDR
24554: GO 24614
24556: LD_INT 32
24558: DOUBLE
24559: EQUAL
24560: IFTRUE 24564
24562: GO 24575
24564: POP
// bc_type := b_siberite_power ; 33 :
24565: LD_ADDR_OWVAR 42
24569: PUSH
24570: LD_INT 28
24572: ST_TO_ADDR
24573: GO 24614
24575: LD_INT 33
24577: DOUBLE
24578: EQUAL
24579: IFTRUE 24583
24581: GO 24594
24583: POP
// bc_type := b_oil_mine ; 34 :
24584: LD_ADDR_OWVAR 42
24588: PUSH
24589: LD_INT 29
24591: ST_TO_ADDR
24592: GO 24614
24594: LD_INT 34
24596: DOUBLE
24597: EQUAL
24598: IFTRUE 24602
24600: GO 24613
24602: POP
// bc_type := b_siberite_mine ; end ;
24603: LD_ADDR_OWVAR 42
24607: PUSH
24608: LD_INT 30
24610: ST_TO_ADDR
24611: GO 24614
24613: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24614: LD_ADDR_VAR 0 8
24618: PUSH
24619: LD_VAR 0 5
24623: PPUSH
24624: LD_VAR 0 6
24628: PPUSH
24629: LD_VAR 0 3
24633: PPUSH
24634: CALL_OW 47
24638: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24639: LD_OWVAR 42
24643: PUSH
24644: LD_INT 32
24646: PUSH
24647: LD_INT 33
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: IN
24654: IFFALSE 24670
// PlaceWeaponTurret ( b , weapon ) ;
24656: LD_VAR 0 8
24660: PPUSH
24661: LD_VAR 0 4
24665: PPUSH
24666: CALL_OW 431
// end ;
24670: LD_VAR 0 7
24674: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
24679: PPUSH
24680: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: LD_INT 22
24688: PUSH
24689: LD_OWVAR 2
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 30
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: CALL_OW 69
24734: ST_TO_ADDR
// if not tmp then
24735: LD_VAR 0 4
24739: NOT
24740: IFFALSE 24744
// exit ;
24742: GO 24803
// for i in tmp do
24744: LD_ADDR_VAR 0 2
24748: PUSH
24749: LD_VAR 0 4
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24801
// for j = 1 to 3 do
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: DOUBLE
24763: LD_INT 1
24765: DEC
24766: ST_TO_ADDR
24767: LD_INT 3
24769: PUSH
24770: FOR_TO
24771: IFFALSE 24797
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: CALL_OW 274
24782: PPUSH
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_INT 99999
24790: PPUSH
24791: CALL_OW 277
24795: GO 24770
24797: POP
24798: POP
24799: GO 24754
24801: POP
24802: POP
// end ;
24803: LD_VAR 0 1
24807: RET
// export function hHackSetLevel10 ; var i , j ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
24812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24813: LD_ADDR_VAR 0 2
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PPUSH
24828: CALL_OW 69
24832: PUSH
24833: FOR_IN
24834: IFFALSE 24886
// if IsSelected ( i ) then
24836: LD_VAR 0 2
24840: PPUSH
24841: CALL_OW 306
24845: IFFALSE 24884
// begin for j := 1 to 4 do
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: DOUBLE
24853: LD_INT 1
24855: DEC
24856: ST_TO_ADDR
24857: LD_INT 4
24859: PUSH
24860: FOR_TO
24861: IFFALSE 24882
// SetSkill ( i , j , 10 ) ;
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_VAR 0 3
24872: PPUSH
24873: LD_INT 10
24875: PPUSH
24876: CALL_OW 237
24880: GO 24860
24882: POP
24883: POP
// end ;
24884: GO 24833
24886: POP
24887: POP
// end ;
24888: LD_VAR 0 1
24892: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
24897: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 22
24905: PUSH
24906: LD_OWVAR 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: PUSH
24934: FOR_IN
24935: IFFALSE 24976
// begin for j := 1 to 4 do
24937: LD_ADDR_VAR 0 3
24941: PUSH
24942: DOUBLE
24943: LD_INT 1
24945: DEC
24946: ST_TO_ADDR
24947: LD_INT 4
24949: PUSH
24950: FOR_TO
24951: IFFALSE 24972
// SetSkill ( i , j , 10 ) ;
24953: LD_VAR 0 2
24957: PPUSH
24958: LD_VAR 0 3
24962: PPUSH
24963: LD_INT 10
24965: PPUSH
24966: CALL_OW 237
24970: GO 24950
24972: POP
24973: POP
// end ;
24974: GO 24934
24976: POP
24977: POP
// end ;
24978: LD_VAR 0 1
24982: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24983: LD_INT 0
24985: PPUSH
// uc_side := your_side ;
24986: LD_ADDR_OWVAR 20
24990: PUSH
24991: LD_OWVAR 2
24995: ST_TO_ADDR
// uc_nation := nation ;
24996: LD_ADDR_OWVAR 21
25000: PUSH
25001: LD_VAR 0 1
25005: ST_TO_ADDR
// InitHc ;
25006: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25010: LD_INT 0
25012: PPUSH
25013: LD_VAR 0 2
25017: PPUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25027: LD_VAR 0 4
25031: PPUSH
25032: LD_VAR 0 5
25036: PPUSH
25037: CALL_OW 428
25041: PUSH
25042: LD_INT 0
25044: EQUAL
25045: IFFALSE 25069
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25047: CALL_OW 44
25051: PPUSH
25052: LD_VAR 0 4
25056: PPUSH
25057: LD_VAR 0 5
25061: PPUSH
25062: LD_INT 1
25064: PPUSH
25065: CALL_OW 48
// end ;
25069: LD_VAR 0 6
25073: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25074: LD_INT 0
25076: PPUSH
25077: PPUSH
// uc_side := your_side ;
25078: LD_ADDR_OWVAR 20
25082: PUSH
25083: LD_OWVAR 2
25087: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25088: LD_VAR 0 1
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: LD_INT 4
25104: PUSH
25105: LD_INT 5
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: IN
25115: IFFALSE 25127
// uc_nation := nation_american else
25117: LD_ADDR_OWVAR 21
25121: PUSH
25122: LD_INT 1
25124: ST_TO_ADDR
25125: GO 25170
// if chassis in [ 11 , 12 , 13 , 14 ] then
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 11
25134: PUSH
25135: LD_INT 12
25137: PUSH
25138: LD_INT 13
25140: PUSH
25141: LD_INT 14
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: IN
25150: IFFALSE 25162
// uc_nation := nation_arabian else
25152: LD_ADDR_OWVAR 21
25156: PUSH
25157: LD_INT 2
25159: ST_TO_ADDR
25160: GO 25170
// uc_nation := nation_russian ;
25162: LD_ADDR_OWVAR 21
25166: PUSH
25167: LD_INT 3
25169: ST_TO_ADDR
// vc_chassis := chassis ;
25170: LD_ADDR_OWVAR 37
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
// vc_engine := engine ;
25180: LD_ADDR_OWVAR 39
25184: PUSH
25185: LD_VAR 0 2
25189: ST_TO_ADDR
// vc_control := control ;
25190: LD_ADDR_OWVAR 38
25194: PUSH
25195: LD_VAR 0 3
25199: ST_TO_ADDR
// vc_weapon := weapon ;
25200: LD_ADDR_OWVAR 40
25204: PUSH
25205: LD_VAR 0 4
25209: ST_TO_ADDR
// un := CreateVehicle ;
25210: LD_ADDR_VAR 0 8
25214: PUSH
25215: CALL_OW 45
25219: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25220: LD_VAR 0 8
25224: PPUSH
25225: LD_INT 0
25227: PPUSH
25228: LD_INT 5
25230: PPUSH
25231: CALL_OW 12
25235: PPUSH
25236: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25240: LD_VAR 0 8
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 48
// end ;
25262: LD_VAR 0 7
25266: RET
// export hInvincible ; every 1 do
25267: GO 25269
25269: DISABLE
// hInvincible := [ ] ;
25270: LD_ADDR_EXP 105
25274: PUSH
25275: EMPTY
25276: ST_TO_ADDR
25277: END
// every 10 do var i ;
25278: GO 25280
25280: DISABLE
25281: LD_INT 0
25283: PPUSH
// begin enable ;
25284: ENABLE
// if not hInvincible then
25285: LD_EXP 105
25289: NOT
25290: IFFALSE 25294
// exit ;
25292: GO 25338
// for i in hInvincible do
25294: LD_ADDR_VAR 0 1
25298: PUSH
25299: LD_EXP 105
25303: PUSH
25304: FOR_IN
25305: IFFALSE 25336
// if GetLives ( i ) < 1000 then
25307: LD_VAR 0 1
25311: PPUSH
25312: CALL_OW 256
25316: PUSH
25317: LD_INT 1000
25319: LESS
25320: IFFALSE 25334
// SetLives ( i , 1000 ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_INT 1000
25329: PPUSH
25330: CALL_OW 234
25334: GO 25304
25336: POP
25337: POP
// end ;
25338: PPOPN 1
25340: END
// export function hHackInvincible ; var i ; begin
25341: LD_INT 0
25343: PPUSH
25344: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25345: LD_ADDR_VAR 0 2
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 21
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: PPUSH
25378: CALL_OW 69
25382: PUSH
25383: FOR_IN
25384: IFFALSE 25445
// if IsSelected ( i ) then
25386: LD_VAR 0 2
25390: PPUSH
25391: CALL_OW 306
25395: IFFALSE 25443
// begin if i in hInvincible then
25397: LD_VAR 0 2
25401: PUSH
25402: LD_EXP 105
25406: IN
25407: IFFALSE 25427
// hInvincible := hInvincible diff i else
25409: LD_ADDR_EXP 105
25413: PUSH
25414: LD_EXP 105
25418: PUSH
25419: LD_VAR 0 2
25423: DIFF
25424: ST_TO_ADDR
25425: GO 25443
// hInvincible := hInvincible union i ;
25427: LD_ADDR_EXP 105
25431: PUSH
25432: LD_EXP 105
25436: PUSH
25437: LD_VAR 0 2
25441: UNION
25442: ST_TO_ADDR
// end ;
25443: GO 25383
25445: POP
25446: POP
// end ;
25447: LD_VAR 0 1
25451: RET
// export function hHackInvisible ; var i , j ; begin
25452: LD_INT 0
25454: PPUSH
25455: PPUSH
25456: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25457: LD_ADDR_VAR 0 2
25461: PUSH
25462: LD_INT 21
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25502
// if IsSelected ( i ) then
25480: LD_VAR 0 2
25484: PPUSH
25485: CALL_OW 306
25489: IFFALSE 25500
// ComForceInvisible ( i ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: CALL_OW 496
25500: GO 25477
25502: POP
25503: POP
// end ;
25504: LD_VAR 0 1
25508: RET
// export function hHackChangeYourSide ; begin
25509: LD_INT 0
25511: PPUSH
// if your_side = 8 then
25512: LD_OWVAR 2
25516: PUSH
25517: LD_INT 8
25519: EQUAL
25520: IFFALSE 25532
// your_side := 0 else
25522: LD_ADDR_OWVAR 2
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
25530: GO 25546
// your_side := your_side + 1 ;
25532: LD_ADDR_OWVAR 2
25536: PUSH
25537: LD_OWVAR 2
25541: PUSH
25542: LD_INT 1
25544: PLUS
25545: ST_TO_ADDR
// end ;
25546: LD_VAR 0 1
25550: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25551: LD_INT 0
25553: PPUSH
25554: PPUSH
25555: PPUSH
// for i in all_units do
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_OWVAR 3
25565: PUSH
25566: FOR_IN
25567: IFFALSE 25645
// if IsSelected ( i ) then
25569: LD_VAR 0 2
25573: PPUSH
25574: CALL_OW 306
25578: IFFALSE 25643
// begin j := GetSide ( i ) ;
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_VAR 0 2
25589: PPUSH
25590: CALL_OW 255
25594: ST_TO_ADDR
// if j = 8 then
25595: LD_VAR 0 3
25599: PUSH
25600: LD_INT 8
25602: EQUAL
25603: IFFALSE 25615
// j := 0 else
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_INT 0
25612: ST_TO_ADDR
25613: GO 25629
// j := j + 1 ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_INT 1
25627: PLUS
25628: ST_TO_ADDR
// SetSide ( i , j ) ;
25629: LD_VAR 0 2
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: CALL_OW 235
// end ;
25643: GO 25566
25645: POP
25646: POP
// end ;
25647: LD_VAR 0 1
25651: RET
// export function hHackFog ; begin
25652: LD_INT 0
25654: PPUSH
// FogOff ( true ) ;
25655: LD_INT 1
25657: PPUSH
25658: CALL_OW 344
// end ;
25662: LD_VAR 0 1
25666: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25667: LD_INT 0
25669: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25670: LD_VAR 0 1
25674: PPUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: LD_INT 1
25687: PPUSH
25688: LD_INT 1
25690: PPUSH
25691: CALL_OW 483
// CenterOnXY ( x , y ) ;
25695: LD_VAR 0 2
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: CALL_OW 84
// end ; end_of_file
25709: LD_VAR 0 4
25713: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25714: LD_INT 0
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25720: LD_VAR 0 1
25724: PPUSH
25725: CALL_OW 264
25729: PUSH
25730: LD_EXP 36
25734: EQUAL
25735: IFFALSE 25807
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25737: LD_INT 68
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL_OW 255
25749: PPUSH
25750: CALL_OW 321
25754: PUSH
25755: LD_INT 2
25757: EQUAL
25758: IFFALSE 25770
// eff := 70 else
25760: LD_ADDR_VAR 0 4
25764: PUSH
25765: LD_INT 70
25767: ST_TO_ADDR
25768: GO 25778
// eff := 30 ;
25770: LD_ADDR_VAR 0 4
25774: PUSH
25775: LD_INT 30
25777: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 250
25787: PPUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 251
25797: PPUSH
25798: LD_VAR 0 4
25802: PPUSH
25803: CALL_OW 495
// end ; end ;
25807: LD_VAR 0 2
25811: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25812: LD_INT 0
25814: PPUSH
// end ;
25815: LD_VAR 0 4
25819: RET
// export function SOS_Command ( cmd ) ; begin
25820: LD_INT 0
25822: PPUSH
// end ;
25823: LD_VAR 0 2
25827: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25828: LD_INT 0
25830: PPUSH
// if cmd = 121 then
25831: LD_VAR 0 1
25835: PUSH
25836: LD_INT 121
25838: EQUAL
25839: IFFALSE 25841
// end ;
25841: LD_VAR 0 6
25845: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25846: LD_INT 0
25848: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 250
25856: EQUAL
25857: PUSH
25858: LD_VAR 0 2
25862: PPUSH
25863: CALL_OW 264
25867: PUSH
25868: LD_EXP 39
25872: EQUAL
25873: AND
25874: IFFALSE 25895
// MinerPlaceMine ( unit , x , y ) ;
25876: LD_VAR 0 2
25880: PPUSH
25881: LD_VAR 0 4
25885: PPUSH
25886: LD_VAR 0 5
25890: PPUSH
25891: CALL 28244 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25895: LD_VAR 0 1
25899: PUSH
25900: LD_INT 251
25902: EQUAL
25903: PUSH
25904: LD_VAR 0 2
25908: PPUSH
25909: CALL_OW 264
25913: PUSH
25914: LD_EXP 39
25918: EQUAL
25919: AND
25920: IFFALSE 25941
// MinerDetonateMine ( unit , x , y ) ;
25922: LD_VAR 0 2
25926: PPUSH
25927: LD_VAR 0 4
25931: PPUSH
25932: LD_VAR 0 5
25936: PPUSH
25937: CALL 28521 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25941: LD_VAR 0 1
25945: PUSH
25946: LD_INT 252
25948: EQUAL
25949: PUSH
25950: LD_VAR 0 2
25954: PPUSH
25955: CALL_OW 264
25959: PUSH
25960: LD_EXP 39
25964: EQUAL
25965: AND
25966: IFFALSE 25987
// MinerCreateMinefield ( unit , x , y ) ;
25968: LD_VAR 0 2
25972: PPUSH
25973: LD_VAR 0 4
25977: PPUSH
25978: LD_VAR 0 5
25982: PPUSH
25983: CALL 28938 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25987: LD_VAR 0 1
25991: PUSH
25992: LD_INT 253
25994: EQUAL
25995: PUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: CALL_OW 257
26005: PUSH
26006: LD_INT 5
26008: EQUAL
26009: AND
26010: IFFALSE 26031
// ComBinocular ( unit , x , y ) ;
26012: LD_VAR 0 2
26016: PPUSH
26017: LD_VAR 0 4
26021: PPUSH
26022: LD_VAR 0 5
26026: PPUSH
26027: CALL 29309 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26031: LD_VAR 0 1
26035: PUSH
26036: LD_INT 254
26038: EQUAL
26039: PUSH
26040: LD_VAR 0 2
26044: PPUSH
26045: CALL_OW 264
26049: PUSH
26050: LD_EXP 34
26054: EQUAL
26055: AND
26056: PUSH
26057: LD_VAR 0 3
26061: PPUSH
26062: CALL_OW 263
26066: PUSH
26067: LD_INT 3
26069: EQUAL
26070: AND
26071: IFFALSE 26087
// HackDestroyVehicle ( unit , selectedUnit ) ;
26073: LD_VAR 0 2
26077: PPUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: CALL 27604 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 255
26094: EQUAL
26095: PUSH
26096: LD_VAR 0 2
26100: PPUSH
26101: CALL_OW 264
26105: PUSH
26106: LD_INT 14
26108: PUSH
26109: LD_INT 53
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: IN
26116: AND
26117: PUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: LD_VAR 0 5
26127: PPUSH
26128: CALL_OW 488
26132: AND
26133: IFFALSE 26157
// CutTreeXYR ( unit , x , y , 12 ) ;
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: LD_VAR 0 5
26149: PPUSH
26150: LD_INT 12
26152: PPUSH
26153: CALL 26170 0 4
// end ;
26157: LD_VAR 0 6
26161: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26162: LD_INT 0
26164: PPUSH
// end ;
26165: LD_VAR 0 4
26169: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26181: LD_VAR 0 1
26185: NOT
26186: PUSH
26187: LD_VAR 0 2
26191: PPUSH
26192: LD_VAR 0 3
26196: PPUSH
26197: CALL_OW 488
26201: NOT
26202: OR
26203: PUSH
26204: LD_VAR 0 4
26208: NOT
26209: OR
26210: IFFALSE 26214
// exit ;
26212: GO 26554
// list := [ ] ;
26214: LD_ADDR_VAR 0 13
26218: PUSH
26219: EMPTY
26220: ST_TO_ADDR
// if x - r < 0 then
26221: LD_VAR 0 2
26225: PUSH
26226: LD_VAR 0 4
26230: MINUS
26231: PUSH
26232: LD_INT 0
26234: LESS
26235: IFFALSE 26247
// min_x := 0 else
26237: LD_ADDR_VAR 0 7
26241: PUSH
26242: LD_INT 0
26244: ST_TO_ADDR
26245: GO 26263
// min_x := x - r ;
26247: LD_ADDR_VAR 0 7
26251: PUSH
26252: LD_VAR 0 2
26256: PUSH
26257: LD_VAR 0 4
26261: MINUS
26262: ST_TO_ADDR
// if y - r < 0 then
26263: LD_VAR 0 3
26267: PUSH
26268: LD_VAR 0 4
26272: MINUS
26273: PUSH
26274: LD_INT 0
26276: LESS
26277: IFFALSE 26289
// min_y := 0 else
26279: LD_ADDR_VAR 0 8
26283: PUSH
26284: LD_INT 0
26286: ST_TO_ADDR
26287: GO 26305
// min_y := y - r ;
26289: LD_ADDR_VAR 0 8
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 4
26303: MINUS
26304: ST_TO_ADDR
// max_x := x + r ;
26305: LD_ADDR_VAR 0 9
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: LD_VAR 0 4
26319: PLUS
26320: ST_TO_ADDR
// max_y := y + r ;
26321: LD_ADDR_VAR 0 10
26325: PUSH
26326: LD_VAR 0 3
26330: PUSH
26331: LD_VAR 0 4
26335: PLUS
26336: ST_TO_ADDR
// for _x = min_x to max_x do
26337: LD_ADDR_VAR 0 11
26341: PUSH
26342: DOUBLE
26343: LD_VAR 0 7
26347: DEC
26348: ST_TO_ADDR
26349: LD_VAR 0 9
26353: PUSH
26354: FOR_TO
26355: IFFALSE 26472
// for _y = min_y to max_y do
26357: LD_ADDR_VAR 0 12
26361: PUSH
26362: DOUBLE
26363: LD_VAR 0 8
26367: DEC
26368: ST_TO_ADDR
26369: LD_VAR 0 10
26373: PUSH
26374: FOR_TO
26375: IFFALSE 26468
// begin if not ValidHex ( _x , _y ) then
26377: LD_VAR 0 11
26381: PPUSH
26382: LD_VAR 0 12
26386: PPUSH
26387: CALL_OW 488
26391: NOT
26392: IFFALSE 26396
// continue ;
26394: GO 26374
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26396: LD_VAR 0 11
26400: PPUSH
26401: LD_VAR 0 12
26405: PPUSH
26406: CALL_OW 351
26410: PUSH
26411: LD_VAR 0 11
26415: PPUSH
26416: LD_VAR 0 12
26420: PPUSH
26421: CALL_OW 554
26425: AND
26426: IFFALSE 26466
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26428: LD_ADDR_VAR 0 13
26432: PUSH
26433: LD_VAR 0 13
26437: PPUSH
26438: LD_VAR 0 13
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: LD_VAR 0 11
26451: PUSH
26452: LD_VAR 0 12
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PPUSH
26461: CALL_OW 2
26465: ST_TO_ADDR
// end ;
26466: GO 26374
26468: POP
26469: POP
26470: GO 26354
26472: POP
26473: POP
// if not list then
26474: LD_VAR 0 13
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26554
// for i in list do
26483: LD_ADDR_VAR 0 6
26487: PUSH
26488: LD_VAR 0 13
26492: PUSH
26493: FOR_IN
26494: IFFALSE 26552
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_STRING M
26503: PUSH
26504: LD_VAR 0 6
26508: PUSH
26509: LD_INT 1
26511: ARRAY
26512: PUSH
26513: LD_VAR 0 6
26517: PUSH
26518: LD_INT 2
26520: ARRAY
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: PPUSH
26546: CALL_OW 447
26550: GO 26493
26552: POP
26553: POP
// end ;
26554: LD_VAR 0 5
26558: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26559: LD_EXP 108
26563: NOT
26564: IFFALSE 26614
26566: GO 26568
26568: DISABLE
// begin initHack := true ;
26569: LD_ADDR_EXP 108
26573: PUSH
26574: LD_INT 1
26576: ST_TO_ADDR
// hackTanks := [ ] ;
26577: LD_ADDR_EXP 109
26581: PUSH
26582: EMPTY
26583: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26584: LD_ADDR_EXP 110
26588: PUSH
26589: EMPTY
26590: ST_TO_ADDR
// hackLimit := 3 ;
26591: LD_ADDR_EXP 111
26595: PUSH
26596: LD_INT 3
26598: ST_TO_ADDR
// hackDist := 12 ;
26599: LD_ADDR_EXP 112
26603: PUSH
26604: LD_INT 12
26606: ST_TO_ADDR
// hackCounter := [ ] ;
26607: LD_ADDR_EXP 113
26611: PUSH
26612: EMPTY
26613: ST_TO_ADDR
// end ;
26614: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26615: LD_EXP 108
26619: PUSH
26620: LD_INT 34
26622: PUSH
26623: LD_EXP 34
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PPUSH
26632: CALL_OW 69
26636: AND
26637: IFFALSE 26892
26639: GO 26641
26641: DISABLE
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
// begin enable ;
26646: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26647: LD_ADDR_VAR 0 1
26651: PUSH
26652: LD_INT 34
26654: PUSH
26655: LD_EXP 34
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26890
// begin if not i in hackTanks then
26672: LD_VAR 0 1
26676: PUSH
26677: LD_EXP 109
26681: IN
26682: NOT
26683: IFFALSE 26766
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26685: LD_ADDR_EXP 109
26689: PUSH
26690: LD_EXP 109
26694: PPUSH
26695: LD_EXP 109
26699: PUSH
26700: LD_INT 1
26702: PLUS
26703: PPUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: CALL_OW 1
26713: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26714: LD_ADDR_EXP 110
26718: PUSH
26719: LD_EXP 110
26723: PPUSH
26724: LD_EXP 110
26728: PUSH
26729: LD_INT 1
26731: PLUS
26732: PPUSH
26733: EMPTY
26734: PPUSH
26735: CALL_OW 1
26739: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26740: LD_ADDR_EXP 113
26744: PUSH
26745: LD_EXP 113
26749: PPUSH
26750: LD_EXP 113
26754: PUSH
26755: LD_INT 1
26757: PLUS
26758: PPUSH
26759: EMPTY
26760: PPUSH
26761: CALL_OW 1
26765: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 302
26775: NOT
26776: IFFALSE 26789
// begin HackUnlinkAll ( i ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL 26895 0 1
// continue ;
26787: GO 26669
// end ; HackCheckCapturedStatus ( i ) ;
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL 27338 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: LD_INT 81
26805: PUSH
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 255
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 33
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 91
26832: PUSH
26833: LD_VAR 0 1
26837: PUSH
26838: LD_EXP 112
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 50
26850: PUSH
26851: EMPTY
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: ST_TO_ADDR
// if not tmp then
26865: LD_VAR 0 2
26869: NOT
26870: IFFALSE 26874
// continue ;
26872: GO 26669
// HackLink ( i , tmp ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: CALL 27031 0 2
// end ;
26888: GO 26669
26890: POP
26891: POP
// end ;
26892: PPOPN 2
26894: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
26899: PPUSH
// if not hack in hackTanks then
26900: LD_VAR 0 1
26904: PUSH
26905: LD_EXP 109
26909: IN
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27026
// index := GetElementIndex ( hackTanks , hack ) ;
26915: LD_ADDR_VAR 0 4
26919: PUSH
26920: LD_EXP 109
26924: PPUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL 34500 0 2
26934: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26935: LD_EXP 110
26939: PUSH
26940: LD_VAR 0 4
26944: ARRAY
26945: IFFALSE 27026
// begin for i in hackTanksCaptured [ index ] do
26947: LD_ADDR_VAR 0 3
26951: PUSH
26952: LD_EXP 110
26956: PUSH
26957: LD_VAR 0 4
26961: ARRAY
26962: PUSH
26963: FOR_IN
26964: IFFALSE 26990
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26966: LD_VAR 0 3
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: LD_VAR 0 3
26979: PUSH
26980: LD_INT 2
26982: ARRAY
26983: PPUSH
26984: CALL_OW 235
26988: GO 26963
26990: POP
26991: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26992: LD_ADDR_EXP 110
26996: PUSH
26997: LD_EXP 110
27001: PPUSH
27002: LD_VAR 0 4
27006: PPUSH
27007: EMPTY
27008: PPUSH
27009: CALL_OW 1
27013: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27014: LD_VAR 0 1
27018: PPUSH
27019: LD_INT 0
27021: PPUSH
27022: CALL_OW 505
// end ; end ;
27026: LD_VAR 0 2
27030: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27031: LD_INT 0
27033: PPUSH
27034: PPUSH
27035: PPUSH
// if not hack in hackTanks or not vehicles then
27036: LD_VAR 0 1
27040: PUSH
27041: LD_EXP 109
27045: IN
27046: NOT
27047: PUSH
27048: LD_VAR 0 2
27052: NOT
27053: OR
27054: IFFALSE 27058
// exit ;
27056: GO 27333
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: LD_VAR 0 2
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL 35150 0 4
27083: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_EXP 109
27093: PPUSH
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL 34500 0 2
27103: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27104: LD_EXP 110
27108: PUSH
27109: LD_VAR 0 5
27113: ARRAY
27114: PUSH
27115: LD_EXP 111
27119: LESS
27120: IFFALSE 27309
// begin for i := 1 to vehicles do
27122: LD_ADDR_VAR 0 4
27126: PUSH
27127: DOUBLE
27128: LD_INT 1
27130: DEC
27131: ST_TO_ADDR
27132: LD_VAR 0 2
27136: PUSH
27137: FOR_TO
27138: IFFALSE 27307
// begin if hackTanksCaptured [ index ] = hackLimit then
27140: LD_EXP 110
27144: PUSH
27145: LD_VAR 0 5
27149: ARRAY
27150: PUSH
27151: LD_EXP 111
27155: EQUAL
27156: IFFALSE 27160
// break ;
27158: GO 27307
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27160: LD_ADDR_EXP 113
27164: PUSH
27165: LD_EXP 113
27169: PPUSH
27170: LD_VAR 0 5
27174: PPUSH
27175: LD_EXP 113
27179: PUSH
27180: LD_VAR 0 5
27184: ARRAY
27185: PUSH
27186: LD_INT 1
27188: PLUS
27189: PPUSH
27190: CALL_OW 1
27194: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27195: LD_ADDR_EXP 110
27199: PUSH
27200: LD_EXP 110
27204: PPUSH
27205: LD_VAR 0 5
27209: PUSH
27210: LD_EXP 110
27214: PUSH
27215: LD_VAR 0 5
27219: ARRAY
27220: PUSH
27221: LD_INT 1
27223: PLUS
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PPUSH
27229: LD_VAR 0 2
27233: PUSH
27234: LD_VAR 0 4
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 2
27244: PUSH
27245: LD_VAR 0 4
27249: ARRAY
27250: PPUSH
27251: CALL_OW 255
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL 34715 0 3
27264: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27265: LD_VAR 0 2
27269: PUSH
27270: LD_VAR 0 4
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 255
27285: PPUSH
27286: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27290: LD_VAR 0 2
27294: PUSH
27295: LD_VAR 0 4
27299: ARRAY
27300: PPUSH
27301: CALL_OW 141
// end ;
27305: GO 27137
27307: POP
27308: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27309: LD_VAR 0 1
27313: PPUSH
27314: LD_EXP 110
27318: PUSH
27319: LD_VAR 0 5
27323: ARRAY
27324: PUSH
27325: LD_INT 0
27327: PLUS
27328: PPUSH
27329: CALL_OW 505
// end ;
27333: LD_VAR 0 3
27337: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27338: LD_INT 0
27340: PPUSH
27341: PPUSH
27342: PPUSH
27343: PPUSH
// if not hack in hackTanks then
27344: LD_VAR 0 1
27348: PUSH
27349: LD_EXP 109
27353: IN
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27599
// index := GetElementIndex ( hackTanks , hack ) ;
27359: LD_ADDR_VAR 0 4
27363: PUSH
27364: LD_EXP 109
27368: PPUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL 34500 0 2
27378: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: DOUBLE
27385: LD_EXP 110
27389: PUSH
27390: LD_VAR 0 4
27394: ARRAY
27395: INC
27396: ST_TO_ADDR
27397: LD_INT 1
27399: PUSH
27400: FOR_DOWNTO
27401: IFFALSE 27573
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27403: LD_ADDR_VAR 0 5
27407: PUSH
27408: LD_EXP 110
27412: PUSH
27413: LD_VAR 0 4
27417: ARRAY
27418: PUSH
27419: LD_VAR 0 3
27423: ARRAY
27424: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27425: LD_VAR 0 5
27429: PUSH
27430: LD_INT 1
27432: ARRAY
27433: PPUSH
27434: CALL_OW 302
27438: NOT
27439: PUSH
27440: LD_VAR 0 5
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PPUSH
27449: CALL_OW 255
27453: PUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 255
27463: NONEQUAL
27464: OR
27465: IFFALSE 27571
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27467: LD_VAR 0 5
27471: PUSH
27472: LD_INT 1
27474: ARRAY
27475: PPUSH
27476: CALL_OW 305
27480: PUSH
27481: LD_VAR 0 5
27485: PUSH
27486: LD_INT 1
27488: ARRAY
27489: PPUSH
27490: CALL_OW 255
27494: PUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 255
27504: EQUAL
27505: AND
27506: IFFALSE 27530
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27508: LD_VAR 0 5
27512: PUSH
27513: LD_INT 1
27515: ARRAY
27516: PPUSH
27517: LD_VAR 0 5
27521: PUSH
27522: LD_INT 2
27524: ARRAY
27525: PPUSH
27526: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27530: LD_ADDR_EXP 110
27534: PUSH
27535: LD_EXP 110
27539: PPUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_EXP 110
27549: PUSH
27550: LD_VAR 0 4
27554: ARRAY
27555: PPUSH
27556: LD_VAR 0 3
27560: PPUSH
27561: CALL_OW 3
27565: PPUSH
27566: CALL_OW 1
27570: ST_TO_ADDR
// end ; end ;
27571: GO 27400
27573: POP
27574: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27575: LD_VAR 0 1
27579: PPUSH
27580: LD_EXP 110
27584: PUSH
27585: LD_VAR 0 4
27589: ARRAY
27590: PUSH
27591: LD_INT 0
27593: PLUS
27594: PPUSH
27595: CALL_OW 505
// end ;
27599: LD_VAR 0 2
27603: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27604: LD_INT 0
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
// if not hack in hackTanks then
27610: LD_VAR 0 1
27614: PUSH
27615: LD_EXP 109
27619: IN
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 27710
// index := GetElementIndex ( hackTanks , hack ) ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_EXP 109
27634: PPUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL 34500 0 2
27644: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: DOUBLE
27651: LD_INT 1
27653: DEC
27654: ST_TO_ADDR
27655: LD_EXP 110
27659: PUSH
27660: LD_VAR 0 5
27664: ARRAY
27665: PUSH
27666: FOR_TO
27667: IFFALSE 27708
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27669: LD_EXP 110
27673: PUSH
27674: LD_VAR 0 5
27678: ARRAY
27679: PUSH
27680: LD_VAR 0 4
27684: ARRAY
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: PUSH
27690: LD_VAR 0 2
27694: EQUAL
27695: IFFALSE 27706
// KillUnit ( vehicle ) ;
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 66
27706: GO 27666
27708: POP
27709: POP
// end ;
27710: LD_VAR 0 3
27714: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27715: LD_EXP 114
27719: NOT
27720: IFFALSE 27755
27722: GO 27724
27724: DISABLE
// begin initMiner := true ;
27725: LD_ADDR_EXP 114
27729: PUSH
27730: LD_INT 1
27732: ST_TO_ADDR
// minersList := [ ] ;
27733: LD_ADDR_EXP 115
27737: PUSH
27738: EMPTY
27739: ST_TO_ADDR
// minerMinesList := [ ] ;
27740: LD_ADDR_EXP 116
27744: PUSH
27745: EMPTY
27746: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27747: LD_ADDR_EXP 117
27751: PUSH
27752: LD_INT 5
27754: ST_TO_ADDR
// end ;
27755: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27756: LD_EXP 114
27760: PUSH
27761: LD_INT 34
27763: PUSH
27764: LD_EXP 39
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: AND
27778: IFFALSE 28241
27780: GO 27782
27782: DISABLE
27783: LD_INT 0
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
// begin enable ;
27789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27790: LD_ADDR_VAR 0 1
27794: PUSH
27795: LD_INT 34
27797: PUSH
27798: LD_EXP 39
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 69
27811: PUSH
27812: FOR_IN
27813: IFFALSE 27885
// begin if not i in minersList then
27815: LD_VAR 0 1
27819: PUSH
27820: LD_EXP 115
27824: IN
27825: NOT
27826: IFFALSE 27883
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27828: LD_ADDR_EXP 115
27832: PUSH
27833: LD_EXP 115
27837: PPUSH
27838: LD_EXP 115
27842: PUSH
27843: LD_INT 1
27845: PLUS
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 1
27856: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27857: LD_ADDR_EXP 116
27861: PUSH
27862: LD_EXP 116
27866: PPUSH
27867: LD_EXP 116
27871: PUSH
27872: LD_INT 1
27874: PLUS
27875: PPUSH
27876: EMPTY
27877: PPUSH
27878: CALL_OW 1
27882: ST_TO_ADDR
// end end ;
27883: GO 27812
27885: POP
27886: POP
// for i := minerMinesList downto 1 do
27887: LD_ADDR_VAR 0 1
27891: PUSH
27892: DOUBLE
27893: LD_EXP 116
27897: INC
27898: ST_TO_ADDR
27899: LD_INT 1
27901: PUSH
27902: FOR_DOWNTO
27903: IFFALSE 28239
// begin if IsLive ( minersList [ i ] ) then
27905: LD_EXP 115
27909: PUSH
27910: LD_VAR 0 1
27914: ARRAY
27915: PPUSH
27916: CALL_OW 300
27920: IFFALSE 27948
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27922: LD_EXP 115
27926: PUSH
27927: LD_VAR 0 1
27931: ARRAY
27932: PPUSH
27933: LD_EXP 116
27937: PUSH
27938: LD_VAR 0 1
27942: ARRAY
27943: PPUSH
27944: CALL_OW 505
// if not minerMinesList [ i ] then
27948: LD_EXP 116
27952: PUSH
27953: LD_VAR 0 1
27957: ARRAY
27958: NOT
27959: IFFALSE 27963
// continue ;
27961: GO 27902
// for j := minerMinesList [ i ] downto 1 do
27963: LD_ADDR_VAR 0 2
27967: PUSH
27968: DOUBLE
27969: LD_EXP 116
27973: PUSH
27974: LD_VAR 0 1
27978: ARRAY
27979: INC
27980: ST_TO_ADDR
27981: LD_INT 1
27983: PUSH
27984: FOR_DOWNTO
27985: IFFALSE 28235
// begin side := GetSide ( minersList [ i ] ) ;
27987: LD_ADDR_VAR 0 3
27991: PUSH
27992: LD_EXP 115
27996: PUSH
27997: LD_VAR 0 1
28001: ARRAY
28002: PPUSH
28003: CALL_OW 255
28007: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28008: LD_ADDR_VAR 0 4
28012: PUSH
28013: LD_EXP 116
28017: PUSH
28018: LD_VAR 0 1
28022: ARRAY
28023: PUSH
28024: LD_VAR 0 2
28028: ARRAY
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: PPUSH
28034: LD_EXP 116
28038: PUSH
28039: LD_VAR 0 1
28043: ARRAY
28044: PUSH
28045: LD_VAR 0 2
28049: ARRAY
28050: PUSH
28051: LD_INT 2
28053: ARRAY
28054: PPUSH
28055: CALL_OW 428
28059: ST_TO_ADDR
// if not tmp then
28060: LD_VAR 0 4
28064: NOT
28065: IFFALSE 28069
// continue ;
28067: GO 27984
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28069: LD_VAR 0 4
28073: PUSH
28074: LD_INT 81
28076: PUSH
28077: LD_VAR 0 3
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: IN
28091: PUSH
28092: LD_EXP 116
28096: PUSH
28097: LD_VAR 0 1
28101: ARRAY
28102: PUSH
28103: LD_VAR 0 2
28107: ARRAY
28108: PUSH
28109: LD_INT 1
28111: ARRAY
28112: PPUSH
28113: LD_EXP 116
28117: PUSH
28118: LD_VAR 0 1
28122: ARRAY
28123: PUSH
28124: LD_VAR 0 2
28128: ARRAY
28129: PUSH
28130: LD_INT 2
28132: ARRAY
28133: PPUSH
28134: CALL_OW 458
28138: AND
28139: IFFALSE 28233
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28141: LD_EXP 116
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PUSH
28152: LD_VAR 0 2
28156: ARRAY
28157: PUSH
28158: LD_INT 1
28160: ARRAY
28161: PPUSH
28162: LD_EXP 116
28166: PUSH
28167: LD_VAR 0 1
28171: ARRAY
28172: PUSH
28173: LD_VAR 0 2
28177: ARRAY
28178: PUSH
28179: LD_INT 2
28181: ARRAY
28182: PPUSH
28183: LD_VAR 0 3
28187: PPUSH
28188: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28192: LD_ADDR_EXP 116
28196: PUSH
28197: LD_EXP 116
28201: PPUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_EXP 116
28211: PUSH
28212: LD_VAR 0 1
28216: ARRAY
28217: PPUSH
28218: LD_VAR 0 2
28222: PPUSH
28223: CALL_OW 3
28227: PPUSH
28228: CALL_OW 1
28232: ST_TO_ADDR
// end ; end ;
28233: GO 27984
28235: POP
28236: POP
// end ;
28237: GO 27902
28239: POP
28240: POP
// end ;
28241: PPOPN 4
28243: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28244: LD_INT 0
28246: PPUSH
28247: PPUSH
// result := false ;
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 264
28265: PUSH
28266: LD_EXP 39
28270: EQUAL
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28516
// index := GetElementIndex ( minersList , unit ) ;
28276: LD_ADDR_VAR 0 5
28280: PUSH
28281: LD_EXP 115
28285: PPUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL 34500 0 2
28295: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28296: LD_EXP 116
28300: PUSH
28301: LD_VAR 0 5
28305: ARRAY
28306: PUSH
28307: LD_EXP 117
28311: GREATEREQUAL
28312: IFFALSE 28316
// exit ;
28314: GO 28516
// ComMoveXY ( unit , x , y ) ;
28316: LD_VAR 0 1
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: LD_VAR 0 3
28330: PPUSH
28331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28335: LD_INT 35
28337: PPUSH
28338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28342: LD_VAR 0 1
28346: PPUSH
28347: LD_VAR 0 2
28351: PPUSH
28352: LD_VAR 0 3
28356: PPUSH
28357: CALL 65273 0 3
28361: NOT
28362: PUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 314
28372: AND
28373: IFFALSE 28377
// exit ;
28375: GO 28516
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: CALL_OW 428
28391: PUSH
28392: LD_VAR 0 1
28396: EQUAL
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 314
28407: NOT
28408: AND
28409: IFFALSE 28335
// PlaySoundXY ( x , y , PlantMine ) ;
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: LD_STRING PlantMine
28423: PPUSH
28424: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 255
28447: PPUSH
28448: LD_INT 0
28450: PPUSH
28451: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28455: LD_ADDR_EXP 116
28459: PUSH
28460: LD_EXP 116
28464: PPUSH
28465: LD_VAR 0 5
28469: PUSH
28470: LD_EXP 116
28474: PUSH
28475: LD_VAR 0 5
28479: ARRAY
28480: PUSH
28481: LD_INT 1
28483: PLUS
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PPUSH
28489: LD_VAR 0 2
28493: PUSH
28494: LD_VAR 0 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL 34715 0 3
28507: ST_TO_ADDR
// result := true ;
28508: LD_ADDR_VAR 0 4
28512: PUSH
28513: LD_INT 1
28515: ST_TO_ADDR
// end ;
28516: LD_VAR 0 4
28520: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
28525: PPUSH
// if not unit in minersList then
28526: LD_VAR 0 1
28530: PUSH
28531: LD_EXP 115
28535: IN
28536: NOT
28537: IFFALSE 28541
// exit ;
28539: GO 28933
// index := GetElementIndex ( minersList , unit ) ;
28541: LD_ADDR_VAR 0 6
28545: PUSH
28546: LD_EXP 115
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL 34500 0 2
28560: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28561: LD_ADDR_VAR 0 5
28565: PUSH
28566: DOUBLE
28567: LD_EXP 116
28571: PUSH
28572: LD_VAR 0 6
28576: ARRAY
28577: INC
28578: ST_TO_ADDR
28579: LD_INT 1
28581: PUSH
28582: FOR_DOWNTO
28583: IFFALSE 28744
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28585: LD_EXP 116
28589: PUSH
28590: LD_VAR 0 6
28594: ARRAY
28595: PUSH
28596: LD_VAR 0 5
28600: ARRAY
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: PUSH
28606: LD_VAR 0 2
28610: EQUAL
28611: PUSH
28612: LD_EXP 116
28616: PUSH
28617: LD_VAR 0 6
28621: ARRAY
28622: PUSH
28623: LD_VAR 0 5
28627: ARRAY
28628: PUSH
28629: LD_INT 2
28631: ARRAY
28632: PUSH
28633: LD_VAR 0 3
28637: EQUAL
28638: AND
28639: IFFALSE 28742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28641: LD_EXP 116
28645: PUSH
28646: LD_VAR 0 6
28650: ARRAY
28651: PUSH
28652: LD_VAR 0 5
28656: ARRAY
28657: PUSH
28658: LD_INT 1
28660: ARRAY
28661: PPUSH
28662: LD_EXP 116
28666: PUSH
28667: LD_VAR 0 6
28671: ARRAY
28672: PUSH
28673: LD_VAR 0 5
28677: ARRAY
28678: PUSH
28679: LD_INT 2
28681: ARRAY
28682: PPUSH
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 255
28692: PPUSH
28693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28697: LD_ADDR_EXP 116
28701: PUSH
28702: LD_EXP 116
28706: PPUSH
28707: LD_VAR 0 6
28711: PPUSH
28712: LD_EXP 116
28716: PUSH
28717: LD_VAR 0 6
28721: ARRAY
28722: PPUSH
28723: LD_VAR 0 5
28727: PPUSH
28728: CALL_OW 3
28732: PPUSH
28733: CALL_OW 1
28737: ST_TO_ADDR
// exit ;
28738: POP
28739: POP
28740: GO 28933
// end ; end ;
28742: GO 28582
28744: POP
28745: POP
// for i := minerMinesList [ index ] downto 1 do
28746: LD_ADDR_VAR 0 5
28750: PUSH
28751: DOUBLE
28752: LD_EXP 116
28756: PUSH
28757: LD_VAR 0 6
28761: ARRAY
28762: INC
28763: ST_TO_ADDR
28764: LD_INT 1
28766: PUSH
28767: FOR_DOWNTO
28768: IFFALSE 28931
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28770: LD_EXP 116
28774: PUSH
28775: LD_VAR 0 6
28779: ARRAY
28780: PUSH
28781: LD_VAR 0 5
28785: ARRAY
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: LD_EXP 116
28795: PUSH
28796: LD_VAR 0 6
28800: ARRAY
28801: PUSH
28802: LD_VAR 0 5
28806: ARRAY
28807: PUSH
28808: LD_INT 2
28810: ARRAY
28811: PPUSH
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: CALL_OW 298
28826: PUSH
28827: LD_INT 6
28829: LESS
28830: IFFALSE 28929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28832: LD_EXP 116
28836: PUSH
28837: LD_VAR 0 6
28841: ARRAY
28842: PUSH
28843: LD_VAR 0 5
28847: ARRAY
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PPUSH
28853: LD_EXP 116
28857: PUSH
28858: LD_VAR 0 6
28862: ARRAY
28863: PUSH
28864: LD_VAR 0 5
28868: ARRAY
28869: PUSH
28870: LD_INT 2
28872: ARRAY
28873: PPUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 255
28883: PPUSH
28884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28888: LD_ADDR_EXP 116
28892: PUSH
28893: LD_EXP 116
28897: PPUSH
28898: LD_VAR 0 6
28902: PPUSH
28903: LD_EXP 116
28907: PUSH
28908: LD_VAR 0 6
28912: ARRAY
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 3
28923: PPUSH
28924: CALL_OW 1
28928: ST_TO_ADDR
// end ; end ;
28929: GO 28767
28931: POP
28932: POP
// end ;
28933: LD_VAR 0 4
28937: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 264
28958: PUSH
28959: LD_EXP 39
28963: EQUAL
28964: NOT
28965: PUSH
28966: LD_VAR 0 1
28970: PUSH
28971: LD_EXP 115
28975: IN
28976: NOT
28977: OR
28978: IFFALSE 28982
// exit ;
28980: GO 29304
// index := GetElementIndex ( minersList , unit ) ;
28982: LD_ADDR_VAR 0 6
28986: PUSH
28987: LD_EXP 115
28991: PPUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL 34500 0 2
29001: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29002: LD_ADDR_VAR 0 8
29006: PUSH
29007: LD_EXP 117
29011: PUSH
29012: LD_EXP 116
29016: PUSH
29017: LD_VAR 0 6
29021: ARRAY
29022: MINUS
29023: ST_TO_ADDR
// if not minesFreeAmount then
29024: LD_VAR 0 8
29028: NOT
29029: IFFALSE 29033
// exit ;
29031: GO 29304
// tmp := [ ] ;
29033: LD_ADDR_VAR 0 7
29037: PUSH
29038: EMPTY
29039: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29040: LD_ADDR_VAR 0 5
29044: PUSH
29045: DOUBLE
29046: LD_INT 1
29048: DEC
29049: ST_TO_ADDR
29050: LD_VAR 0 8
29054: PUSH
29055: FOR_TO
29056: IFFALSE 29251
// begin _d := rand ( 0 , 5 ) ;
29058: LD_ADDR_VAR 0 11
29062: PUSH
29063: LD_INT 0
29065: PPUSH
29066: LD_INT 5
29068: PPUSH
29069: CALL_OW 12
29073: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29074: LD_ADDR_VAR 0 12
29078: PUSH
29079: LD_INT 2
29081: PPUSH
29082: LD_INT 6
29084: PPUSH
29085: CALL_OW 12
29089: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29090: LD_ADDR_VAR 0 9
29094: PUSH
29095: LD_VAR 0 2
29099: PPUSH
29100: LD_VAR 0 11
29104: PPUSH
29105: LD_VAR 0 12
29109: PPUSH
29110: CALL_OW 272
29114: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29115: LD_ADDR_VAR 0 10
29119: PUSH
29120: LD_VAR 0 3
29124: PPUSH
29125: LD_VAR 0 11
29129: PPUSH
29130: LD_VAR 0 12
29134: PPUSH
29135: CALL_OW 273
29139: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29140: LD_VAR 0 9
29144: PPUSH
29145: LD_VAR 0 10
29149: PPUSH
29150: CALL_OW 488
29154: PUSH
29155: LD_VAR 0 9
29159: PUSH
29160: LD_VAR 0 10
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_VAR 0 7
29173: IN
29174: NOT
29175: AND
29176: PUSH
29177: LD_VAR 0 9
29181: PPUSH
29182: LD_VAR 0 10
29186: PPUSH
29187: CALL_OW 458
29191: NOT
29192: AND
29193: IFFALSE 29235
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29195: LD_ADDR_VAR 0 7
29199: PUSH
29200: LD_VAR 0 7
29204: PPUSH
29205: LD_VAR 0 7
29209: PUSH
29210: LD_INT 1
29212: PLUS
29213: PPUSH
29214: LD_VAR 0 9
29218: PUSH
29219: LD_VAR 0 10
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 1
29232: ST_TO_ADDR
29233: GO 29249
// i := i - 1 ;
29235: LD_ADDR_VAR 0 5
29239: PUSH
29240: LD_VAR 0 5
29244: PUSH
29245: LD_INT 1
29247: MINUS
29248: ST_TO_ADDR
// end ;
29249: GO 29055
29251: POP
29252: POP
// for i in tmp do
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_VAR 0 7
29262: PUSH
29263: FOR_IN
29264: IFFALSE 29302
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_VAR 0 5
29275: PUSH
29276: LD_INT 1
29278: ARRAY
29279: PPUSH
29280: LD_VAR 0 5
29284: PUSH
29285: LD_INT 2
29287: ARRAY
29288: PPUSH
29289: CALL 28244 0 3
29293: NOT
29294: IFFALSE 29300
// exit ;
29296: POP
29297: POP
29298: GO 29304
29300: GO 29263
29302: POP
29303: POP
// end ;
29304: LD_VAR 0 4
29308: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
// if not GetClass ( unit ) = class_sniper then
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 257
29327: PUSH
29328: LD_INT 5
29330: EQUAL
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29724
// dist := 8 ;
29336: LD_ADDR_VAR 0 5
29340: PUSH
29341: LD_INT 8
29343: ST_TO_ADDR
// viewRange := 12 ;
29344: LD_ADDR_VAR 0 7
29348: PUSH
29349: LD_INT 12
29351: ST_TO_ADDR
// side := GetSide ( unit ) ;
29352: LD_ADDR_VAR 0 6
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 255
29366: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29367: LD_INT 61
29369: PPUSH
29370: LD_VAR 0 6
29374: PPUSH
29375: CALL_OW 321
29379: PUSH
29380: LD_INT 2
29382: EQUAL
29383: IFFALSE 29393
// viewRange := 16 ;
29385: LD_ADDR_VAR 0 7
29389: PUSH
29390: LD_INT 16
29392: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29393: LD_VAR 0 1
29397: PPUSH
29398: LD_VAR 0 2
29402: PPUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: CALL_OW 297
29412: PUSH
29413: LD_VAR 0 5
29417: GREATER
29418: IFFALSE 29497
// begin ComMoveXY ( unit , x , y ) ;
29420: LD_VAR 0 1
29424: PPUSH
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_VAR 0 3
29434: PPUSH
29435: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29439: LD_INT 35
29441: PPUSH
29442: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_VAR 0 3
29460: PPUSH
29461: CALL 65273 0 3
29465: NOT
29466: IFFALSE 29470
// exit ;
29468: GO 29724
// until GetDistUnitXY ( unit , x , y ) < dist ;
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_VAR 0 2
29479: PPUSH
29480: LD_VAR 0 3
29484: PPUSH
29485: CALL_OW 297
29489: PUSH
29490: LD_VAR 0 5
29494: LESS
29495: IFFALSE 29439
// end ; ComTurnXY ( unit , x , y ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: LD_VAR 0 2
29506: PPUSH
29507: LD_VAR 0 3
29511: PPUSH
29512: CALL_OW 118
// wait ( 5 ) ;
29516: LD_INT 5
29518: PPUSH
29519: CALL_OW 67
// _d := GetDir ( unit ) ;
29523: LD_ADDR_VAR 0 10
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 254
29537: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29538: LD_ADDR_VAR 0 8
29542: PUSH
29543: LD_VAR 0 1
29547: PPUSH
29548: CALL_OW 250
29552: PPUSH
29553: LD_VAR 0 10
29557: PPUSH
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 272
29567: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29568: LD_ADDR_VAR 0 9
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 251
29582: PPUSH
29583: LD_VAR 0 10
29587: PPUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: CALL_OW 273
29597: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29598: LD_VAR 0 8
29602: PPUSH
29603: LD_VAR 0 9
29607: PPUSH
29608: CALL_OW 488
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29724
// ComAnimCustom ( unit , 1 ) ;
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_INT 1
29624: PPUSH
29625: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29629: LD_VAR 0 8
29633: PPUSH
29634: LD_VAR 0 9
29638: PPUSH
29639: LD_VAR 0 6
29643: PPUSH
29644: LD_VAR 0 7
29648: PPUSH
29649: CALL_OW 330
// repeat wait ( 1 ) ;
29653: LD_INT 1
29655: PPUSH
29656: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 316
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 314
29679: OR
29680: PUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 302
29690: NOT
29691: OR
29692: PUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 301
29702: OR
29703: IFFALSE 29653
// RemoveSeeing ( _x , _y , side ) ;
29705: LD_VAR 0 8
29709: PPUSH
29710: LD_VAR 0 9
29714: PPUSH
29715: LD_VAR 0 6
29719: PPUSH
29720: CALL_OW 331
// end ; end_of_file
29724: LD_VAR 0 4
29728: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
// if exist_mode then
29733: LD_VAR 0 2
29737: IFFALSE 29762
// unit := CreateCharacter ( prefix & ident ) else
29739: LD_ADDR_VAR 0 5
29743: PUSH
29744: LD_VAR 0 3
29748: PUSH
29749: LD_VAR 0 1
29753: STR
29754: PPUSH
29755: CALL_OW 34
29759: ST_TO_ADDR
29760: GO 29777
// unit := NewCharacter ( ident ) ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 25
29776: ST_TO_ADDR
// result := unit ;
29777: LD_ADDR_VAR 0 4
29781: PUSH
29782: LD_VAR 0 5
29786: ST_TO_ADDR
// end ;
29787: LD_VAR 0 4
29791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29792: LD_INT 0
29794: PPUSH
29795: PPUSH
// if not side or not nation then
29796: LD_VAR 0 1
29800: NOT
29801: PUSH
29802: LD_VAR 0 2
29806: NOT
29807: OR
29808: IFFALSE 29812
// exit ;
29810: GO 30580
// case nation of nation_american :
29812: LD_VAR 0 2
29816: PUSH
29817: LD_INT 1
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 30039
29825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29826: LD_ADDR_VAR 0 4
29830: PUSH
29831: LD_INT 35
29833: PUSH
29834: LD_INT 45
29836: PUSH
29837: LD_INT 46
29839: PUSH
29840: LD_INT 47
29842: PUSH
29843: LD_INT 82
29845: PUSH
29846: LD_INT 83
29848: PUSH
29849: LD_INT 84
29851: PUSH
29852: LD_INT 85
29854: PUSH
29855: LD_INT 86
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 6
29866: PUSH
29867: LD_INT 15
29869: PUSH
29870: LD_INT 16
29872: PUSH
29873: LD_INT 7
29875: PUSH
29876: LD_INT 12
29878: PUSH
29879: LD_INT 13
29881: PUSH
29882: LD_INT 10
29884: PUSH
29885: LD_INT 14
29887: PUSH
29888: LD_INT 20
29890: PUSH
29891: LD_INT 21
29893: PUSH
29894: LD_INT 22
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 32
29902: PUSH
29903: LD_INT 27
29905: PUSH
29906: LD_INT 36
29908: PUSH
29909: LD_INT 69
29911: PUSH
29912: LD_INT 39
29914: PUSH
29915: LD_INT 34
29917: PUSH
29918: LD_INT 40
29920: PUSH
29921: LD_INT 48
29923: PUSH
29924: LD_INT 49
29926: PUSH
29927: LD_INT 50
29929: PUSH
29930: LD_INT 51
29932: PUSH
29933: LD_INT 52
29935: PUSH
29936: LD_INT 53
29938: PUSH
29939: LD_INT 54
29941: PUSH
29942: LD_INT 55
29944: PUSH
29945: LD_INT 56
29947: PUSH
29948: LD_INT 57
29950: PUSH
29951: LD_INT 58
29953: PUSH
29954: LD_INT 59
29956: PUSH
29957: LD_INT 60
29959: PUSH
29960: LD_INT 61
29962: PUSH
29963: LD_INT 62
29965: PUSH
29966: LD_INT 80
29968: PUSH
29969: LD_INT 82
29971: PUSH
29972: LD_INT 83
29974: PUSH
29975: LD_INT 84
29977: PUSH
29978: LD_INT 85
29980: PUSH
29981: LD_INT 86
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
30037: GO 30504
30039: LD_INT 2
30041: DOUBLE
30042: EQUAL
30043: IFTRUE 30047
30045: GO 30273
30047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30048: LD_ADDR_VAR 0 4
30052: PUSH
30053: LD_INT 35
30055: PUSH
30056: LD_INT 45
30058: PUSH
30059: LD_INT 46
30061: PUSH
30062: LD_INT 47
30064: PUSH
30065: LD_INT 82
30067: PUSH
30068: LD_INT 83
30070: PUSH
30071: LD_INT 84
30073: PUSH
30074: LD_INT 85
30076: PUSH
30077: LD_INT 87
30079: PUSH
30080: LD_INT 70
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 11
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: LD_INT 6
30100: PUSH
30101: LD_INT 15
30103: PUSH
30104: LD_INT 18
30106: PUSH
30107: LD_INT 7
30109: PUSH
30110: LD_INT 17
30112: PUSH
30113: LD_INT 8
30115: PUSH
30116: LD_INT 20
30118: PUSH
30119: LD_INT 21
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_INT 72
30127: PUSH
30128: LD_INT 26
30130: PUSH
30131: LD_INT 69
30133: PUSH
30134: LD_INT 39
30136: PUSH
30137: LD_INT 40
30139: PUSH
30140: LD_INT 41
30142: PUSH
30143: LD_INT 42
30145: PUSH
30146: LD_INT 43
30148: PUSH
30149: LD_INT 48
30151: PUSH
30152: LD_INT 49
30154: PUSH
30155: LD_INT 50
30157: PUSH
30158: LD_INT 51
30160: PUSH
30161: LD_INT 52
30163: PUSH
30164: LD_INT 53
30166: PUSH
30167: LD_INT 54
30169: PUSH
30170: LD_INT 55
30172: PUSH
30173: LD_INT 56
30175: PUSH
30176: LD_INT 60
30178: PUSH
30179: LD_INT 61
30181: PUSH
30182: LD_INT 62
30184: PUSH
30185: LD_INT 66
30187: PUSH
30188: LD_INT 67
30190: PUSH
30191: LD_INT 68
30193: PUSH
30194: LD_INT 81
30196: PUSH
30197: LD_INT 82
30199: PUSH
30200: LD_INT 83
30202: PUSH
30203: LD_INT 84
30205: PUSH
30206: LD_INT 85
30208: PUSH
30209: LD_INT 87
30211: PUSH
30212: LD_INT 88
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: ST_TO_ADDR
30271: GO 30504
30273: LD_INT 3
30275: DOUBLE
30276: EQUAL
30277: IFTRUE 30281
30279: GO 30503
30281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30282: LD_ADDR_VAR 0 4
30286: PUSH
30287: LD_INT 46
30289: PUSH
30290: LD_INT 47
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 82
30301: PUSH
30302: LD_INT 83
30304: PUSH
30305: LD_INT 84
30307: PUSH
30308: LD_INT 85
30310: PUSH
30311: LD_INT 86
30313: PUSH
30314: LD_INT 11
30316: PUSH
30317: LD_INT 9
30319: PUSH
30320: LD_INT 20
30322: PUSH
30323: LD_INT 19
30325: PUSH
30326: LD_INT 21
30328: PUSH
30329: LD_INT 24
30331: PUSH
30332: LD_INT 22
30334: PUSH
30335: LD_INT 25
30337: PUSH
30338: LD_INT 28
30340: PUSH
30341: LD_INT 29
30343: PUSH
30344: LD_INT 30
30346: PUSH
30347: LD_INT 31
30349: PUSH
30350: LD_INT 37
30352: PUSH
30353: LD_INT 38
30355: PUSH
30356: LD_INT 32
30358: PUSH
30359: LD_INT 27
30361: PUSH
30362: LD_INT 33
30364: PUSH
30365: LD_INT 69
30367: PUSH
30368: LD_INT 39
30370: PUSH
30371: LD_INT 34
30373: PUSH
30374: LD_INT 40
30376: PUSH
30377: LD_INT 71
30379: PUSH
30380: LD_INT 23
30382: PUSH
30383: LD_INT 44
30385: PUSH
30386: LD_INT 48
30388: PUSH
30389: LD_INT 49
30391: PUSH
30392: LD_INT 50
30394: PUSH
30395: LD_INT 51
30397: PUSH
30398: LD_INT 52
30400: PUSH
30401: LD_INT 53
30403: PUSH
30404: LD_INT 54
30406: PUSH
30407: LD_INT 55
30409: PUSH
30410: LD_INT 56
30412: PUSH
30413: LD_INT 57
30415: PUSH
30416: LD_INT 58
30418: PUSH
30419: LD_INT 59
30421: PUSH
30422: LD_INT 63
30424: PUSH
30425: LD_INT 64
30427: PUSH
30428: LD_INT 65
30430: PUSH
30431: LD_INT 82
30433: PUSH
30434: LD_INT 83
30436: PUSH
30437: LD_INT 84
30439: PUSH
30440: LD_INT 85
30442: PUSH
30443: LD_INT 86
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
30501: GO 30504
30503: POP
// if state > - 1 and state < 3 then
30504: LD_VAR 0 3
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: GREATER
30513: PUSH
30514: LD_VAR 0 3
30518: PUSH
30519: LD_INT 3
30521: LESS
30522: AND
30523: IFFALSE 30580
// for i in result do
30525: LD_ADDR_VAR 0 5
30529: PUSH
30530: LD_VAR 0 4
30534: PUSH
30535: FOR_IN
30536: IFFALSE 30578
// if GetTech ( i , side ) <> state then
30538: LD_VAR 0 5
30542: PPUSH
30543: LD_VAR 0 1
30547: PPUSH
30548: CALL_OW 321
30552: PUSH
30553: LD_VAR 0 3
30557: NONEQUAL
30558: IFFALSE 30576
// result := result diff i ;
30560: LD_ADDR_VAR 0 4
30564: PUSH
30565: LD_VAR 0 4
30569: PUSH
30570: LD_VAR 0 5
30574: DIFF
30575: ST_TO_ADDR
30576: GO 30535
30578: POP
30579: POP
// end ;
30580: LD_VAR 0 4
30584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
30589: PPUSH
// result := true ;
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_INT 1
30597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30598: LD_ADDR_VAR 0 5
30602: PUSH
30603: LD_VAR 0 2
30607: PPUSH
30608: CALL_OW 480
30612: ST_TO_ADDR
// if not tmp then
30613: LD_VAR 0 5
30617: NOT
30618: IFFALSE 30622
// exit ;
30620: GO 30671
// for i in tmp do
30622: LD_ADDR_VAR 0 4
30626: PUSH
30627: LD_VAR 0 5
30631: PUSH
30632: FOR_IN
30633: IFFALSE 30669
// if GetTech ( i , side ) <> state_researched then
30635: LD_VAR 0 4
30639: PPUSH
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL_OW 321
30649: PUSH
30650: LD_INT 2
30652: NONEQUAL
30653: IFFALSE 30667
// begin result := false ;
30655: LD_ADDR_VAR 0 3
30659: PUSH
30660: LD_INT 0
30662: ST_TO_ADDR
// exit ;
30663: POP
30664: POP
30665: GO 30671
// end ;
30667: GO 30632
30669: POP
30670: POP
// end ;
30671: LD_VAR 0 3
30675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30676: LD_INT 0
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30691: LD_VAR 0 1
30695: NOT
30696: PUSH
30697: LD_VAR 0 1
30701: PPUSH
30702: CALL_OW 257
30706: PUSH
30707: LD_INT 9
30709: NONEQUAL
30710: OR
30711: IFFALSE 30715
// exit ;
30713: GO 31288
// side := GetSide ( unit ) ;
30715: LD_ADDR_VAR 0 9
30719: PUSH
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 255
30729: ST_TO_ADDR
// tech_space := tech_spacanom ;
30730: LD_ADDR_VAR 0 12
30734: PUSH
30735: LD_INT 29
30737: ST_TO_ADDR
// tech_time := tech_taurad ;
30738: LD_ADDR_VAR 0 13
30742: PUSH
30743: LD_INT 28
30745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30746: LD_ADDR_VAR 0 11
30750: PUSH
30751: LD_VAR 0 1
30755: PPUSH
30756: CALL_OW 310
30760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30761: LD_VAR 0 11
30765: PPUSH
30766: CALL_OW 247
30770: PUSH
30771: LD_INT 2
30773: EQUAL
30774: IFFALSE 30778
// exit ;
30776: GO 31288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30778: LD_ADDR_VAR 0 8
30782: PUSH
30783: LD_INT 81
30785: PUSH
30786: LD_VAR 0 9
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 21
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 69
30820: ST_TO_ADDR
// if not tmp then
30821: LD_VAR 0 8
30825: NOT
30826: IFFALSE 30830
// exit ;
30828: GO 31288
// if in_unit then
30830: LD_VAR 0 11
30834: IFFALSE 30858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30836: LD_ADDR_VAR 0 10
30840: PUSH
30841: LD_VAR 0 8
30845: PPUSH
30846: LD_VAR 0 11
30850: PPUSH
30851: CALL_OW 74
30855: ST_TO_ADDR
30856: GO 30878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30858: LD_ADDR_VAR 0 10
30862: PUSH
30863: LD_VAR 0 8
30867: PPUSH
30868: LD_VAR 0 1
30872: PPUSH
30873: CALL_OW 74
30877: ST_TO_ADDR
// if not enemy then
30878: LD_VAR 0 10
30882: NOT
30883: IFFALSE 30887
// exit ;
30885: GO 31288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30887: LD_VAR 0 11
30891: PUSH
30892: LD_VAR 0 11
30896: PPUSH
30897: LD_VAR 0 10
30901: PPUSH
30902: CALL_OW 296
30906: PUSH
30907: LD_INT 13
30909: GREATER
30910: AND
30911: PUSH
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_VAR 0 10
30921: PPUSH
30922: CALL_OW 296
30926: PUSH
30927: LD_INT 12
30929: GREATER
30930: OR
30931: IFFALSE 30935
// exit ;
30933: GO 31288
// missile := [ 1 ] ;
30935: LD_ADDR_VAR 0 14
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30946: LD_VAR 0 9
30950: PPUSH
30951: LD_VAR 0 12
30955: PPUSH
30956: CALL_OW 325
30960: IFFALSE 30989
// missile := Insert ( missile , missile + 1 , 2 ) ;
30962: LD_ADDR_VAR 0 14
30966: PUSH
30967: LD_VAR 0 14
30971: PPUSH
30972: LD_VAR 0 14
30976: PUSH
30977: LD_INT 1
30979: PLUS
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 2
30988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30989: LD_VAR 0 9
30993: PPUSH
30994: LD_VAR 0 13
30998: PPUSH
30999: CALL_OW 325
31003: PUSH
31004: LD_VAR 0 10
31008: PPUSH
31009: CALL_OW 255
31013: PPUSH
31014: LD_VAR 0 13
31018: PPUSH
31019: CALL_OW 325
31023: NOT
31024: AND
31025: IFFALSE 31054
// missile := Insert ( missile , missile + 1 , 3 ) ;
31027: LD_ADDR_VAR 0 14
31031: PUSH
31032: LD_VAR 0 14
31036: PPUSH
31037: LD_VAR 0 14
31041: PUSH
31042: LD_INT 1
31044: PLUS
31045: PPUSH
31046: LD_INT 3
31048: PPUSH
31049: CALL_OW 2
31053: ST_TO_ADDR
// if missile < 2 then
31054: LD_VAR 0 14
31058: PUSH
31059: LD_INT 2
31061: LESS
31062: IFFALSE 31066
// exit ;
31064: GO 31288
// x := GetX ( enemy ) ;
31066: LD_ADDR_VAR 0 4
31070: PUSH
31071: LD_VAR 0 10
31075: PPUSH
31076: CALL_OW 250
31080: ST_TO_ADDR
// y := GetY ( enemy ) ;
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_VAR 0 10
31090: PPUSH
31091: CALL_OW 251
31095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31096: LD_ADDR_VAR 0 6
31100: PUSH
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PPUSH
31110: LD_INT 1
31112: PPUSH
31113: CALL_OW 12
31117: PLUS
31118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31119: LD_ADDR_VAR 0 7
31123: PUSH
31124: LD_VAR 0 5
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PPUSH
31133: LD_INT 1
31135: PPUSH
31136: CALL_OW 12
31140: PLUS
31141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31142: LD_VAR 0 6
31146: PPUSH
31147: LD_VAR 0 7
31151: PPUSH
31152: CALL_OW 488
31156: NOT
31157: IFFALSE 31179
// begin _x := x ;
31159: LD_ADDR_VAR 0 6
31163: PUSH
31164: LD_VAR 0 4
31168: ST_TO_ADDR
// _y := y ;
31169: LD_ADDR_VAR 0 7
31173: PUSH
31174: LD_VAR 0 5
31178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31179: LD_ADDR_VAR 0 3
31183: PUSH
31184: LD_INT 1
31186: PPUSH
31187: LD_VAR 0 14
31191: PPUSH
31192: CALL_OW 12
31196: ST_TO_ADDR
// case i of 1 :
31197: LD_VAR 0 3
31201: PUSH
31202: LD_INT 1
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31227
31210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_VAR 0 10
31220: PPUSH
31221: CALL_OW 115
31225: GO 31288
31227: LD_INT 2
31229: DOUBLE
31230: EQUAL
31231: IFTRUE 31235
31233: GO 31257
31235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_VAR 0 6
31245: PPUSH
31246: LD_VAR 0 7
31250: PPUSH
31251: CALL_OW 153
31255: GO 31288
31257: LD_INT 3
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31287
31265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31266: LD_VAR 0 1
31270: PPUSH
31271: LD_VAR 0 6
31275: PPUSH
31276: LD_VAR 0 7
31280: PPUSH
31281: CALL_OW 154
31285: GO 31288
31287: POP
// end ;
31288: LD_VAR 0 2
31292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31293: LD_INT 0
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
// if not unit or not building then
31301: LD_VAR 0 1
31305: NOT
31306: PUSH
31307: LD_VAR 0 2
31311: NOT
31312: OR
31313: IFFALSE 31317
// exit ;
31315: GO 31475
// x := GetX ( building ) ;
31317: LD_ADDR_VAR 0 5
31321: PUSH
31322: LD_VAR 0 2
31326: PPUSH
31327: CALL_OW 250
31331: ST_TO_ADDR
// y := GetY ( building ) ;
31332: LD_ADDR_VAR 0 6
31336: PUSH
31337: LD_VAR 0 2
31341: PPUSH
31342: CALL_OW 251
31346: ST_TO_ADDR
// for i = 0 to 5 do
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: DOUBLE
31353: LD_INT 0
31355: DEC
31356: ST_TO_ADDR
31357: LD_INT 5
31359: PUSH
31360: FOR_TO
31361: IFFALSE 31473
// begin _x := ShiftX ( x , i , 3 ) ;
31363: LD_ADDR_VAR 0 7
31367: PUSH
31368: LD_VAR 0 5
31372: PPUSH
31373: LD_VAR 0 4
31377: PPUSH
31378: LD_INT 3
31380: PPUSH
31381: CALL_OW 272
31385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31386: LD_ADDR_VAR 0 8
31390: PUSH
31391: LD_VAR 0 6
31395: PPUSH
31396: LD_VAR 0 4
31400: PPUSH
31401: LD_INT 3
31403: PPUSH
31404: CALL_OW 273
31408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31409: LD_VAR 0 7
31413: PPUSH
31414: LD_VAR 0 8
31418: PPUSH
31419: CALL_OW 488
31423: NOT
31424: IFFALSE 31428
// continue ;
31426: GO 31360
// if HexInfo ( _x , _y ) = 0 then
31428: LD_VAR 0 7
31432: PPUSH
31433: LD_VAR 0 8
31437: PPUSH
31438: CALL_OW 428
31442: PUSH
31443: LD_INT 0
31445: EQUAL
31446: IFFALSE 31471
// begin ComMoveXY ( unit , _x , _y ) ;
31448: LD_VAR 0 1
31452: PPUSH
31453: LD_VAR 0 7
31457: PPUSH
31458: LD_VAR 0 8
31462: PPUSH
31463: CALL_OW 111
// exit ;
31467: POP
31468: POP
31469: GO 31475
// end ; end ;
31471: GO 31360
31473: POP
31474: POP
// end ;
31475: LD_VAR 0 3
31479: RET
// export function ScanBase ( side , base_area ) ; begin
31480: LD_INT 0
31482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_VAR 0 2
31492: PPUSH
31493: LD_INT 81
31495: PUSH
31496: LD_VAR 0 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PPUSH
31505: CALL_OW 70
31509: ST_TO_ADDR
// end ;
31510: LD_VAR 0 3
31514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31515: LD_INT 0
31517: PPUSH
31518: PPUSH
31519: PPUSH
31520: PPUSH
// result := false ;
31521: LD_ADDR_VAR 0 2
31525: PUSH
31526: LD_INT 0
31528: ST_TO_ADDR
// side := GetSide ( unit ) ;
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 255
31543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31544: LD_ADDR_VAR 0 4
31548: PUSH
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 248
31558: ST_TO_ADDR
// case nat of 1 :
31559: LD_VAR 0 4
31563: PUSH
31564: LD_INT 1
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31583
31572: POP
// tech := tech_lassight ; 2 :
31573: LD_ADDR_VAR 0 5
31577: PUSH
31578: LD_INT 12
31580: ST_TO_ADDR
31581: GO 31622
31583: LD_INT 2
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31602
31591: POP
// tech := tech_mortar ; 3 :
31592: LD_ADDR_VAR 0 5
31596: PUSH
31597: LD_INT 41
31599: ST_TO_ADDR
31600: GO 31622
31602: LD_INT 3
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31621
31610: POP
// tech := tech_bazooka ; end ;
31611: LD_ADDR_VAR 0 5
31615: PUSH
31616: LD_INT 44
31618: ST_TO_ADDR
31619: GO 31622
31621: POP
// if Researched ( side , tech ) then
31622: LD_VAR 0 3
31626: PPUSH
31627: LD_VAR 0 5
31631: PPUSH
31632: CALL_OW 325
31636: IFFALSE 31663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31638: LD_ADDR_VAR 0 2
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: LD_INT 8
31648: PUSH
31649: LD_INT 9
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: PUSH
31657: LD_VAR 0 4
31661: ARRAY
31662: ST_TO_ADDR
// end ;
31663: LD_VAR 0 2
31667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31668: LD_INT 0
31670: PPUSH
31671: PPUSH
31672: PPUSH
// if not mines then
31673: LD_VAR 0 2
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31682: LD_ADDR_VAR 0 5
31686: PUSH
31687: LD_INT 81
31689: PUSH
31690: LD_VAR 0 1
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 21
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PPUSH
31720: CALL_OW 69
31724: ST_TO_ADDR
// for i in mines do
31725: LD_ADDR_VAR 0 4
31729: PUSH
31730: LD_VAR 0 2
31734: PUSH
31735: FOR_IN
31736: IFFALSE 31824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31738: LD_VAR 0 4
31742: PUSH
31743: LD_INT 1
31745: ARRAY
31746: PPUSH
31747: LD_VAR 0 4
31751: PUSH
31752: LD_INT 2
31754: ARRAY
31755: PPUSH
31756: CALL_OW 458
31760: NOT
31761: IFFALSE 31765
// continue ;
31763: GO 31735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31765: LD_VAR 0 4
31769: PUSH
31770: LD_INT 1
31772: ARRAY
31773: PPUSH
31774: LD_VAR 0 4
31778: PUSH
31779: LD_INT 2
31781: ARRAY
31782: PPUSH
31783: CALL_OW 428
31787: PUSH
31788: LD_VAR 0 5
31792: IN
31793: IFFALSE 31822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31795: LD_VAR 0 4
31799: PUSH
31800: LD_INT 1
31802: ARRAY
31803: PPUSH
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 2
31811: ARRAY
31812: PPUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 456
// end ;
31822: GO 31735
31824: POP
31825: POP
// end ;
31826: LD_VAR 0 3
31830: RET
// export function Count ( array ) ; var i ; begin
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
// result := 0 ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_INT 0
31842: ST_TO_ADDR
// for i in array do
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_VAR 0 1
31852: PUSH
31853: FOR_IN
31854: IFFALSE 31878
// if i then
31856: LD_VAR 0 3
31860: IFFALSE 31876
// result := result + 1 ;
31862: LD_ADDR_VAR 0 2
31866: PUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 1
31874: PLUS
31875: ST_TO_ADDR
31876: GO 31853
31878: POP
31879: POP
// end ;
31880: LD_VAR 0 2
31884: RET
// export function IsEmpty ( building ) ; begin
31885: LD_INT 0
31887: PPUSH
// if not building then
31888: LD_VAR 0 1
31892: NOT
31893: IFFALSE 31897
// exit ;
31895: GO 31940
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31897: LD_ADDR_VAR 0 2
31901: PUSH
31902: LD_VAR 0 1
31906: PUSH
31907: LD_INT 22
31909: PUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 255
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 58
31926: PUSH
31927: EMPTY
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 69
31938: IN
31939: ST_TO_ADDR
// end ;
31940: LD_VAR 0 2
31944: RET
// export function IsNotFull ( building ) ; begin
31945: LD_INT 0
31947: PPUSH
// if not building then
31948: LD_VAR 0 1
31952: NOT
31953: IFFALSE 31957
// exit ;
31955: GO 31976
// result := UnitsInside ( building ) < 6 ;
31957: LD_ADDR_VAR 0 2
31961: PUSH
31962: LD_VAR 0 1
31966: PPUSH
31967: CALL_OW 313
31971: PUSH
31972: LD_INT 6
31974: LESS
31975: ST_TO_ADDR
// end ;
31976: LD_VAR 0 2
31980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31981: LD_INT 0
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
// tmp := [ ] ;
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: EMPTY
31993: ST_TO_ADDR
// list := [ ] ;
31994: LD_ADDR_VAR 0 5
31998: PUSH
31999: EMPTY
32000: ST_TO_ADDR
// for i = 16 to 25 do
32001: LD_ADDR_VAR 0 4
32005: PUSH
32006: DOUBLE
32007: LD_INT 16
32009: DEC
32010: ST_TO_ADDR
32011: LD_INT 25
32013: PUSH
32014: FOR_TO
32015: IFFALSE 32088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_VAR 0 3
32026: PUSH
32027: LD_INT 22
32029: PUSH
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 255
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 91
32046: PUSH
32047: LD_VAR 0 1
32051: PUSH
32052: LD_INT 6
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 30
32062: PUSH
32063: LD_VAR 0 4
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: PPUSH
32080: CALL_OW 69
32084: ADD
32085: ST_TO_ADDR
32086: GO 32014
32088: POP
32089: POP
// for i = 1 to tmp do
32090: LD_ADDR_VAR 0 4
32094: PUSH
32095: DOUBLE
32096: LD_INT 1
32098: DEC
32099: ST_TO_ADDR
32100: LD_VAR 0 3
32104: PUSH
32105: FOR_TO
32106: IFFALSE 32194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32108: LD_ADDR_VAR 0 5
32112: PUSH
32113: LD_VAR 0 5
32117: PUSH
32118: LD_VAR 0 3
32122: PUSH
32123: LD_VAR 0 4
32127: ARRAY
32128: PPUSH
32129: CALL_OW 266
32133: PUSH
32134: LD_VAR 0 3
32138: PUSH
32139: LD_VAR 0 4
32143: ARRAY
32144: PPUSH
32145: CALL_OW 250
32149: PUSH
32150: LD_VAR 0 3
32154: PUSH
32155: LD_VAR 0 4
32159: ARRAY
32160: PPUSH
32161: CALL_OW 251
32165: PUSH
32166: LD_VAR 0 3
32170: PUSH
32171: LD_VAR 0 4
32175: ARRAY
32176: PPUSH
32177: CALL_OW 254
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: PUSH
32188: EMPTY
32189: LIST
32190: ADD
32191: ST_TO_ADDR
32192: GO 32105
32194: POP
32195: POP
// result := list ;
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_VAR 0 5
32205: ST_TO_ADDR
// end ;
32206: LD_VAR 0 2
32210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
// if not factory then
32220: LD_VAR 0 1
32224: NOT
32225: IFFALSE 32229
// exit ;
32227: GO 32822
// if control = control_apeman then
32229: LD_VAR 0 4
32233: PUSH
32234: LD_INT 5
32236: EQUAL
32237: IFFALSE 32346
// begin tmp := UnitsInside ( factory ) ;
32239: LD_ADDR_VAR 0 8
32243: PUSH
32244: LD_VAR 0 1
32248: PPUSH
32249: CALL_OW 313
32253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32254: LD_VAR 0 8
32258: PPUSH
32259: LD_INT 25
32261: PUSH
32262: LD_INT 12
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 72
32273: NOT
32274: IFFALSE 32284
// control := control_manual ;
32276: LD_ADDR_VAR 0 4
32280: PUSH
32281: LD_INT 1
32283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32284: LD_ADDR_VAR 0 8
32288: PUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL 31981 0 1
32298: ST_TO_ADDR
// if tmp then
32299: LD_VAR 0 8
32303: IFFALSE 32346
// begin for i in tmp do
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: LD_VAR 0 8
32314: PUSH
32315: FOR_IN
32316: IFFALSE 32344
// if i [ 1 ] = b_ext_radio then
32318: LD_VAR 0 7
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PUSH
32327: LD_INT 22
32329: EQUAL
32330: IFFALSE 32342
// begin control := control_remote ;
32332: LD_ADDR_VAR 0 4
32336: PUSH
32337: LD_INT 2
32339: ST_TO_ADDR
// break ;
32340: GO 32344
// end ;
32342: GO 32315
32344: POP
32345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32346: LD_VAR 0 1
32350: PPUSH
32351: LD_VAR 0 2
32355: PPUSH
32356: LD_VAR 0 3
32360: PPUSH
32361: LD_VAR 0 4
32365: PPUSH
32366: LD_VAR 0 5
32370: PPUSH
32371: CALL_OW 448
32375: IFFALSE 32410
// begin result := [ chassis , engine , control , weapon ] ;
32377: LD_ADDR_VAR 0 6
32381: PUSH
32382: LD_VAR 0 2
32386: PUSH
32387: LD_VAR 0 3
32391: PUSH
32392: LD_VAR 0 4
32396: PUSH
32397: LD_VAR 0 5
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// exit ;
32408: GO 32822
// end ; _chassis := AvailableChassisList ( factory ) ;
32410: LD_ADDR_VAR 0 9
32414: PUSH
32415: LD_VAR 0 1
32419: PPUSH
32420: CALL_OW 475
32424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32425: LD_ADDR_VAR 0 11
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 476
32439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32440: LD_ADDR_VAR 0 12
32444: PUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 477
32454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32455: LD_ADDR_VAR 0 10
32459: PUSH
32460: LD_VAR 0 1
32464: PPUSH
32465: CALL_OW 478
32469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32470: LD_VAR 0 9
32474: NOT
32475: PUSH
32476: LD_VAR 0 11
32480: NOT
32481: OR
32482: PUSH
32483: LD_VAR 0 12
32487: NOT
32488: OR
32489: PUSH
32490: LD_VAR 0 10
32494: NOT
32495: OR
32496: IFFALSE 32531
// begin result := [ chassis , engine , control , weapon ] ;
32498: LD_ADDR_VAR 0 6
32502: PUSH
32503: LD_VAR 0 2
32507: PUSH
32508: LD_VAR 0 3
32512: PUSH
32513: LD_VAR 0 4
32517: PUSH
32518: LD_VAR 0 5
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// exit ;
32529: GO 32822
// end ; if not chassis in _chassis then
32531: LD_VAR 0 2
32535: PUSH
32536: LD_VAR 0 9
32540: IN
32541: NOT
32542: IFFALSE 32568
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32544: LD_ADDR_VAR 0 2
32548: PUSH
32549: LD_VAR 0 9
32553: PUSH
32554: LD_INT 1
32556: PPUSH
32557: LD_VAR 0 9
32561: PPUSH
32562: CALL_OW 12
32566: ARRAY
32567: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32568: LD_VAR 0 2
32572: PPUSH
32573: LD_VAR 0 3
32577: PPUSH
32578: CALL 32827 0 2
32582: NOT
32583: IFFALSE 32642
// repeat engine := _engine [ 1 ] ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 11
32594: PUSH
32595: LD_INT 1
32597: ARRAY
32598: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32599: LD_ADDR_VAR 0 11
32603: PUSH
32604: LD_VAR 0 11
32608: PPUSH
32609: LD_INT 1
32611: PPUSH
32612: CALL_OW 3
32616: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32617: LD_VAR 0 2
32621: PPUSH
32622: LD_VAR 0 3
32626: PPUSH
32627: CALL 32827 0 2
32631: PUSH
32632: LD_VAR 0 11
32636: PUSH
32637: EMPTY
32638: EQUAL
32639: OR
32640: IFFALSE 32585
// if not control in _control then
32642: LD_VAR 0 4
32646: PUSH
32647: LD_VAR 0 12
32651: IN
32652: NOT
32653: IFFALSE 32679
// control := _control [ rand ( 1 , _control ) ] ;
32655: LD_ADDR_VAR 0 4
32659: PUSH
32660: LD_VAR 0 12
32664: PUSH
32665: LD_INT 1
32667: PPUSH
32668: LD_VAR 0 12
32672: PPUSH
32673: CALL_OW 12
32677: ARRAY
32678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32679: LD_VAR 0 2
32683: PPUSH
32684: LD_VAR 0 5
32688: PPUSH
32689: CALL 33047 0 2
32693: NOT
32694: IFFALSE 32753
// repeat weapon := _weapon [ 1 ] ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 10
32705: PUSH
32706: LD_INT 1
32708: ARRAY
32709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32710: LD_ADDR_VAR 0 10
32714: PUSH
32715: LD_VAR 0 10
32719: PPUSH
32720: LD_INT 1
32722: PPUSH
32723: CALL_OW 3
32727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32728: LD_VAR 0 2
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL 33047 0 2
32742: PUSH
32743: LD_VAR 0 10
32747: PUSH
32748: EMPTY
32749: EQUAL
32750: OR
32751: IFFALSE 32696
// result := [ ] ;
32753: LD_ADDR_VAR 0 6
32757: PUSH
32758: EMPTY
32759: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32760: LD_VAR 0 1
32764: PPUSH
32765: LD_VAR 0 2
32769: PPUSH
32770: LD_VAR 0 3
32774: PPUSH
32775: LD_VAR 0 4
32779: PPUSH
32780: LD_VAR 0 5
32784: PPUSH
32785: CALL_OW 448
32789: IFFALSE 32822
// result := [ chassis , engine , control , weapon ] ;
32791: LD_ADDR_VAR 0 6
32795: PUSH
32796: LD_VAR 0 2
32800: PUSH
32801: LD_VAR 0 3
32805: PUSH
32806: LD_VAR 0 4
32810: PUSH
32811: LD_VAR 0 5
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 6
32826: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32827: LD_INT 0
32829: PPUSH
// if not chassis or not engine then
32830: LD_VAR 0 1
32834: NOT
32835: PUSH
32836: LD_VAR 0 2
32840: NOT
32841: OR
32842: IFFALSE 32846
// exit ;
32844: GO 33042
// case engine of engine_solar :
32846: LD_VAR 0 2
32850: PUSH
32851: LD_INT 2
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32897
32859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_INT 11
32867: PUSH
32868: LD_INT 12
32870: PUSH
32871: LD_INT 13
32873: PUSH
32874: LD_INT 14
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 3
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
32895: GO 33026
32897: LD_INT 1
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32967
32905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_INT 11
32913: PUSH
32914: LD_INT 12
32916: PUSH
32917: LD_INT 13
32919: PUSH
32920: LD_INT 14
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 5
32937: PUSH
32938: LD_INT 21
32940: PUSH
32941: LD_INT 23
32943: PUSH
32944: LD_INT 22
32946: PUSH
32947: LD_INT 24
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33026
32967: LD_INT 3
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 33025
32975: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 13
32983: PUSH
32984: LD_INT 14
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: LD_INT 21
33001: PUSH
33002: LD_INT 22
33004: PUSH
33005: LD_INT 23
33007: PUSH
33008: LD_INT 24
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
33023: GO 33026
33025: POP
// result := ( chassis in result ) ;
33026: LD_ADDR_VAR 0 3
33030: PUSH
33031: LD_VAR 0 1
33035: PUSH
33036: LD_VAR 0 3
33040: IN
33041: ST_TO_ADDR
// end ;
33042: LD_VAR 0 3
33046: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33047: LD_INT 0
33049: PPUSH
// if not chassis or not weapon then
33050: LD_VAR 0 1
33054: NOT
33055: PUSH
33056: LD_VAR 0 2
33060: NOT
33061: OR
33062: IFFALSE 33066
// exit ;
33064: GO 34128
// case weapon of us_machine_gun :
33066: LD_VAR 0 2
33070: PUSH
33071: LD_INT 2
33073: DOUBLE
33074: EQUAL
33075: IFTRUE 33079
33077: GO 33109
33079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33080: LD_ADDR_VAR 0 3
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: LD_INT 4
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
33107: GO 34112
33109: LD_INT 3
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33147
33117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: LD_INT 4
33134: PUSH
33135: LD_INT 5
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
33145: GO 34112
33147: LD_INT 11
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33185
33155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: LD_INT 4
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
33183: GO 34112
33185: LD_INT 4
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33219
33193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: LD_INT 4
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
33217: GO 34112
33219: LD_INT 5
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33253
33227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
33251: GO 34112
33253: LD_INT 9
33255: DOUBLE
33256: EQUAL
33257: IFTRUE 33261
33259: GO 33287
33261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33262: LD_ADDR_VAR 0 3
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: LD_INT 5
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 34112
33287: LD_INT 7
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33321
33295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
33319: GO 34112
33321: LD_INT 12
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33329
33327: GO 33355
33329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: LD_INT 4
33343: PUSH
33344: LD_INT 5
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: ST_TO_ADDR
33353: GO 34112
33355: LD_INT 13
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33389
33363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33364: LD_ADDR_VAR 0 3
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 4
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: ST_TO_ADDR
33387: GO 34112
33389: LD_INT 14
33391: DOUBLE
33392: EQUAL
33393: IFTRUE 33397
33395: GO 33415
33397: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33398: LD_ADDR_VAR 0 3
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: LD_INT 5
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: ST_TO_ADDR
33413: GO 34112
33415: LD_INT 6
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33441
33423: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33424: LD_ADDR_VAR 0 3
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 5
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: ST_TO_ADDR
33439: GO 34112
33441: LD_INT 10
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33467
33449: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_INT 4
33457: PUSH
33458: LD_INT 5
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: ST_TO_ADDR
33465: GO 34112
33467: LD_INT 22
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33501
33475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 11
33483: PUSH
33484: LD_INT 12
33486: PUSH
33487: LD_INT 13
33489: PUSH
33490: LD_INT 14
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
33499: GO 34112
33501: LD_INT 23
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33535
33509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_INT 11
33517: PUSH
33518: LD_INT 12
33520: PUSH
33521: LD_INT 13
33523: PUSH
33524: LD_INT 14
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: ST_TO_ADDR
33533: GO 34112
33535: LD_INT 24
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33569
33543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: LD_INT 11
33551: PUSH
33552: LD_INT 12
33554: PUSH
33555: LD_INT 13
33557: PUSH
33558: LD_INT 14
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: ST_TO_ADDR
33567: GO 34112
33569: LD_INT 30
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33577
33575: GO 33603
33577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_INT 11
33585: PUSH
33586: LD_INT 12
33588: PUSH
33589: LD_INT 13
33591: PUSH
33592: LD_INT 14
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 34112
33603: LD_INT 25
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33629
33611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 13
33619: PUSH
33620: LD_INT 14
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: ST_TO_ADDR
33627: GO 34112
33629: LD_INT 27
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33637
33635: GO 33655
33637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 13
33645: PUSH
33646: LD_INT 14
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: ST_TO_ADDR
33653: GO 34112
33655: LD_EXP 37
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33665
33663: GO 33691
33665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_INT 11
33673: PUSH
33674: LD_INT 12
33676: PUSH
33677: LD_INT 13
33679: PUSH
33680: LD_INT 14
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
33689: GO 34112
33691: LD_INT 28
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33699
33697: GO 33717
33699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33700: LD_ADDR_VAR 0 3
33704: PUSH
33705: LD_INT 13
33707: PUSH
33708: LD_INT 14
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 34112
33717: LD_INT 29
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33743
33725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_INT 13
33733: PUSH
33734: LD_INT 14
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 34112
33743: LD_INT 31
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33769
33751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 13
33759: PUSH
33760: LD_INT 14
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: ST_TO_ADDR
33767: GO 34112
33769: LD_INT 26
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33777
33775: GO 33795
33777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_INT 13
33785: PUSH
33786: LD_INT 14
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: ST_TO_ADDR
33793: GO 34112
33795: LD_INT 42
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33829
33803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33804: LD_ADDR_VAR 0 3
33808: PUSH
33809: LD_INT 21
33811: PUSH
33812: LD_INT 22
33814: PUSH
33815: LD_INT 23
33817: PUSH
33818: LD_INT 24
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 34112
33829: LD_INT 43
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33863
33837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 22
33848: PUSH
33849: LD_INT 23
33851: PUSH
33852: LD_INT 24
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: ST_TO_ADDR
33861: GO 34112
33863: LD_INT 44
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33897
33871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 21
33879: PUSH
33880: LD_INT 22
33882: PUSH
33883: LD_INT 23
33885: PUSH
33886: LD_INT 24
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: ST_TO_ADDR
33895: GO 34112
33897: LD_INT 45
33899: DOUBLE
33900: EQUAL
33901: IFTRUE 33905
33903: GO 33931
33905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33906: LD_ADDR_VAR 0 3
33910: PUSH
33911: LD_INT 21
33913: PUSH
33914: LD_INT 22
33916: PUSH
33917: LD_INT 23
33919: PUSH
33920: LD_INT 24
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: ST_TO_ADDR
33929: GO 34112
33931: LD_INT 49
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33939
33937: GO 33965
33939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_INT 21
33947: PUSH
33948: LD_INT 22
33950: PUSH
33951: LD_INT 23
33953: PUSH
33954: LD_INT 24
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
33963: GO 34112
33965: LD_INT 51
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33973
33971: GO 33999
33973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33974: LD_ADDR_VAR 0 3
33978: PUSH
33979: LD_INT 21
33981: PUSH
33982: LD_INT 22
33984: PUSH
33985: LD_INT 23
33987: PUSH
33988: LD_INT 24
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: ST_TO_ADDR
33997: GO 34112
33999: LD_INT 52
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34007
34005: GO 34033
34007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_INT 21
34015: PUSH
34016: LD_INT 22
34018: PUSH
34019: LD_INT 23
34021: PUSH
34022: LD_INT 24
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
34031: GO 34112
34033: LD_INT 53
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34059
34041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_INT 23
34049: PUSH
34050: LD_INT 24
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34112
34059: LD_INT 46
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34085
34067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_INT 23
34075: PUSH
34076: LD_INT 24
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: ST_TO_ADDR
34083: GO 34112
34085: LD_INT 47
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34093
34091: GO 34111
34093: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_INT 23
34101: PUSH
34102: LD_INT 24
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: ST_TO_ADDR
34109: GO 34112
34111: POP
// result := ( chassis in result ) ;
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_VAR 0 1
34121: PUSH
34122: LD_VAR 0 3
34126: IN
34127: ST_TO_ADDR
// end ;
34128: LD_VAR 0 3
34132: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34133: LD_INT 0
34135: PPUSH
34136: PPUSH
34137: PPUSH
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
// result := array ;
34142: LD_ADDR_VAR 0 5
34146: PUSH
34147: LD_VAR 0 1
34151: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34152: LD_VAR 0 1
34156: NOT
34157: PUSH
34158: LD_VAR 0 2
34162: NOT
34163: OR
34164: PUSH
34165: LD_VAR 0 3
34169: NOT
34170: OR
34171: PUSH
34172: LD_VAR 0 2
34176: PUSH
34177: LD_VAR 0 1
34181: GREATER
34182: OR
34183: PUSH
34184: LD_VAR 0 3
34188: PUSH
34189: LD_VAR 0 1
34193: GREATER
34194: OR
34195: IFFALSE 34199
// exit ;
34197: GO 34495
// if direction then
34199: LD_VAR 0 4
34203: IFFALSE 34267
// begin d := 1 ;
34205: LD_ADDR_VAR 0 9
34209: PUSH
34210: LD_INT 1
34212: ST_TO_ADDR
// if i_from > i_to then
34213: LD_VAR 0 2
34217: PUSH
34218: LD_VAR 0 3
34222: GREATER
34223: IFFALSE 34249
// length := ( array - i_from ) + i_to else
34225: LD_ADDR_VAR 0 11
34229: PUSH
34230: LD_VAR 0 1
34234: PUSH
34235: LD_VAR 0 2
34239: MINUS
34240: PUSH
34241: LD_VAR 0 3
34245: PLUS
34246: ST_TO_ADDR
34247: GO 34265
// length := i_to - i_from ;
34249: LD_ADDR_VAR 0 11
34253: PUSH
34254: LD_VAR 0 3
34258: PUSH
34259: LD_VAR 0 2
34263: MINUS
34264: ST_TO_ADDR
// end else
34265: GO 34328
// begin d := - 1 ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: ST_TO_ADDR
// if i_from > i_to then
34276: LD_VAR 0 2
34280: PUSH
34281: LD_VAR 0 3
34285: GREATER
34286: IFFALSE 34306
// length := i_from - i_to else
34288: LD_ADDR_VAR 0 11
34292: PUSH
34293: LD_VAR 0 2
34297: PUSH
34298: LD_VAR 0 3
34302: MINUS
34303: ST_TO_ADDR
34304: GO 34328
// length := ( array - i_to ) + i_from ;
34306: LD_ADDR_VAR 0 11
34310: PUSH
34311: LD_VAR 0 1
34315: PUSH
34316: LD_VAR 0 3
34320: MINUS
34321: PUSH
34322: LD_VAR 0 2
34326: PLUS
34327: ST_TO_ADDR
// end ; if not length then
34328: LD_VAR 0 11
34332: NOT
34333: IFFALSE 34337
// exit ;
34335: GO 34495
// tmp := array ;
34337: LD_ADDR_VAR 0 10
34341: PUSH
34342: LD_VAR 0 1
34346: ST_TO_ADDR
// for i = 1 to length do
34347: LD_ADDR_VAR 0 6
34351: PUSH
34352: DOUBLE
34353: LD_INT 1
34355: DEC
34356: ST_TO_ADDR
34357: LD_VAR 0 11
34361: PUSH
34362: FOR_TO
34363: IFFALSE 34483
// begin for j = 1 to array do
34365: LD_ADDR_VAR 0 7
34369: PUSH
34370: DOUBLE
34371: LD_INT 1
34373: DEC
34374: ST_TO_ADDR
34375: LD_VAR 0 1
34379: PUSH
34380: FOR_TO
34381: IFFALSE 34469
// begin k := j + d ;
34383: LD_ADDR_VAR 0 8
34387: PUSH
34388: LD_VAR 0 7
34392: PUSH
34393: LD_VAR 0 9
34397: PLUS
34398: ST_TO_ADDR
// if k > array then
34399: LD_VAR 0 8
34403: PUSH
34404: LD_VAR 0 1
34408: GREATER
34409: IFFALSE 34419
// k := 1 ;
34411: LD_ADDR_VAR 0 8
34415: PUSH
34416: LD_INT 1
34418: ST_TO_ADDR
// if not k then
34419: LD_VAR 0 8
34423: NOT
34424: IFFALSE 34436
// k := array ;
34426: LD_ADDR_VAR 0 8
34430: PUSH
34431: LD_VAR 0 1
34435: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34436: LD_ADDR_VAR 0 10
34440: PUSH
34441: LD_VAR 0 10
34445: PPUSH
34446: LD_VAR 0 8
34450: PPUSH
34451: LD_VAR 0 1
34455: PUSH
34456: LD_VAR 0 7
34460: ARRAY
34461: PPUSH
34462: CALL_OW 1
34466: ST_TO_ADDR
// end ;
34467: GO 34380
34469: POP
34470: POP
// array := tmp ;
34471: LD_ADDR_VAR 0 1
34475: PUSH
34476: LD_VAR 0 10
34480: ST_TO_ADDR
// end ;
34481: GO 34362
34483: POP
34484: POP
// result := array ;
34485: LD_ADDR_VAR 0 5
34489: PUSH
34490: LD_VAR 0 1
34494: ST_TO_ADDR
// end ;
34495: LD_VAR 0 5
34499: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34500: LD_INT 0
34502: PPUSH
34503: PPUSH
// result := 0 ;
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_INT 0
34511: ST_TO_ADDR
// if not array or not value in array then
34512: LD_VAR 0 1
34516: NOT
34517: PUSH
34518: LD_VAR 0 2
34522: PUSH
34523: LD_VAR 0 1
34527: IN
34528: NOT
34529: OR
34530: IFFALSE 34534
// exit ;
34532: GO 34588
// for i = 1 to array do
34534: LD_ADDR_VAR 0 4
34538: PUSH
34539: DOUBLE
34540: LD_INT 1
34542: DEC
34543: ST_TO_ADDR
34544: LD_VAR 0 1
34548: PUSH
34549: FOR_TO
34550: IFFALSE 34586
// if value = array [ i ] then
34552: LD_VAR 0 2
34556: PUSH
34557: LD_VAR 0 1
34561: PUSH
34562: LD_VAR 0 4
34566: ARRAY
34567: EQUAL
34568: IFFALSE 34584
// begin result := i ;
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: LD_VAR 0 4
34579: ST_TO_ADDR
// exit ;
34580: POP
34581: POP
34582: GO 34588
// end ;
34584: GO 34549
34586: POP
34587: POP
// end ;
34588: LD_VAR 0 3
34592: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34593: LD_INT 0
34595: PPUSH
// vc_chassis := chassis ;
34596: LD_ADDR_OWVAR 37
34600: PUSH
34601: LD_VAR 0 1
34605: ST_TO_ADDR
// vc_engine := engine ;
34606: LD_ADDR_OWVAR 39
34610: PUSH
34611: LD_VAR 0 2
34615: ST_TO_ADDR
// vc_control := control ;
34616: LD_ADDR_OWVAR 38
34620: PUSH
34621: LD_VAR 0 3
34625: ST_TO_ADDR
// vc_weapon := weapon ;
34626: LD_ADDR_OWVAR 40
34630: PUSH
34631: LD_VAR 0 4
34635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34636: LD_ADDR_OWVAR 41
34640: PUSH
34641: LD_VAR 0 5
34645: ST_TO_ADDR
// end ;
34646: LD_VAR 0 6
34650: RET
// export function WantPlant ( unit ) ; var task ; begin
34651: LD_INT 0
34653: PPUSH
34654: PPUSH
// result := false ;
34655: LD_ADDR_VAR 0 2
34659: PUSH
34660: LD_INT 0
34662: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34663: LD_ADDR_VAR 0 3
34667: PUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 437
34677: ST_TO_ADDR
// if task then
34678: LD_VAR 0 3
34682: IFFALSE 34710
// if task [ 1 ] [ 1 ] = p then
34684: LD_VAR 0 3
34688: PUSH
34689: LD_INT 1
34691: ARRAY
34692: PUSH
34693: LD_INT 1
34695: ARRAY
34696: PUSH
34697: LD_STRING p
34699: EQUAL
34700: IFFALSE 34710
// result := true ;
34702: LD_ADDR_VAR 0 2
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// end ;
34710: LD_VAR 0 2
34714: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34715: LD_INT 0
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
// if pos < 1 then
34721: LD_VAR 0 2
34725: PUSH
34726: LD_INT 1
34728: LESS
34729: IFFALSE 34733
// exit ;
34731: GO 35036
// if pos = 1 then
34733: LD_VAR 0 2
34737: PUSH
34738: LD_INT 1
34740: EQUAL
34741: IFFALSE 34774
// result := Replace ( arr , pos [ 1 ] , value ) else
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_VAR 0 1
34752: PPUSH
34753: LD_VAR 0 2
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: PPUSH
34762: LD_VAR 0 3
34766: PPUSH
34767: CALL_OW 1
34771: ST_TO_ADDR
34772: GO 35036
// begin tmp := arr ;
34774: LD_ADDR_VAR 0 6
34778: PUSH
34779: LD_VAR 0 1
34783: ST_TO_ADDR
// s_arr := [ tmp ] ;
34784: LD_ADDR_VAR 0 7
34788: PUSH
34789: LD_VAR 0 6
34793: PUSH
34794: EMPTY
34795: LIST
34796: ST_TO_ADDR
// for i = 1 to pos - 1 do
34797: LD_ADDR_VAR 0 5
34801: PUSH
34802: DOUBLE
34803: LD_INT 1
34805: DEC
34806: ST_TO_ADDR
34807: LD_VAR 0 2
34811: PUSH
34812: LD_INT 1
34814: MINUS
34815: PUSH
34816: FOR_TO
34817: IFFALSE 34862
// begin tmp := tmp [ pos [ i ] ] ;
34819: LD_ADDR_VAR 0 6
34823: PUSH
34824: LD_VAR 0 6
34828: PUSH
34829: LD_VAR 0 2
34833: PUSH
34834: LD_VAR 0 5
34838: ARRAY
34839: ARRAY
34840: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34841: LD_ADDR_VAR 0 7
34845: PUSH
34846: LD_VAR 0 7
34850: PUSH
34851: LD_VAR 0 6
34855: PUSH
34856: EMPTY
34857: LIST
34858: ADD
34859: ST_TO_ADDR
// end ;
34860: GO 34816
34862: POP
34863: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34864: LD_ADDR_VAR 0 6
34868: PUSH
34869: LD_VAR 0 6
34873: PPUSH
34874: LD_VAR 0 2
34878: PUSH
34879: LD_VAR 0 2
34883: ARRAY
34884: PPUSH
34885: LD_VAR 0 3
34889: PPUSH
34890: CALL_OW 1
34894: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34895: LD_ADDR_VAR 0 7
34899: PUSH
34900: LD_VAR 0 7
34904: PPUSH
34905: LD_VAR 0 7
34909: PPUSH
34910: LD_VAR 0 6
34914: PPUSH
34915: CALL_OW 1
34919: ST_TO_ADDR
// for i = s_arr downto 2 do
34920: LD_ADDR_VAR 0 5
34924: PUSH
34925: DOUBLE
34926: LD_VAR 0 7
34930: INC
34931: ST_TO_ADDR
34932: LD_INT 2
34934: PUSH
34935: FOR_DOWNTO
34936: IFFALSE 35020
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34938: LD_ADDR_VAR 0 6
34942: PUSH
34943: LD_VAR 0 7
34947: PUSH
34948: LD_VAR 0 5
34952: PUSH
34953: LD_INT 1
34955: MINUS
34956: ARRAY
34957: PPUSH
34958: LD_VAR 0 2
34962: PUSH
34963: LD_VAR 0 5
34967: PUSH
34968: LD_INT 1
34970: MINUS
34971: ARRAY
34972: PPUSH
34973: LD_VAR 0 7
34977: PUSH
34978: LD_VAR 0 5
34982: ARRAY
34983: PPUSH
34984: CALL_OW 1
34988: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34989: LD_ADDR_VAR 0 7
34993: PUSH
34994: LD_VAR 0 7
34998: PPUSH
34999: LD_VAR 0 5
35003: PUSH
35004: LD_INT 1
35006: MINUS
35007: PPUSH
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 1
35017: ST_TO_ADDR
// end ;
35018: GO 34935
35020: POP
35021: POP
// result := s_arr [ 1 ] ;
35022: LD_ADDR_VAR 0 4
35026: PUSH
35027: LD_VAR 0 7
35031: PUSH
35032: LD_INT 1
35034: ARRAY
35035: ST_TO_ADDR
// end ; end ;
35036: LD_VAR 0 4
35040: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35041: LD_INT 0
35043: PPUSH
35044: PPUSH
// if not list then
35045: LD_VAR 0 1
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35145
// i := list [ pos1 ] ;
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_VAR 0 1
35063: PUSH
35064: LD_VAR 0 2
35068: ARRAY
35069: ST_TO_ADDR
// if not i then
35070: LD_VAR 0 5
35074: NOT
35075: IFFALSE 35079
// exit ;
35077: GO 35145
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35079: LD_ADDR_VAR 0 1
35083: PUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: LD_VAR 0 2
35093: PPUSH
35094: LD_VAR 0 1
35098: PUSH
35099: LD_VAR 0 3
35103: ARRAY
35104: PPUSH
35105: CALL_OW 1
35109: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35110: LD_ADDR_VAR 0 1
35114: PUSH
35115: LD_VAR 0 1
35119: PPUSH
35120: LD_VAR 0 3
35124: PPUSH
35125: LD_VAR 0 5
35129: PPUSH
35130: CALL_OW 1
35134: ST_TO_ADDR
// result := list ;
35135: LD_ADDR_VAR 0 4
35139: PUSH
35140: LD_VAR 0 1
35144: ST_TO_ADDR
// end ;
35145: LD_VAR 0 4
35149: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35150: LD_INT 0
35152: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35153: LD_ADDR_VAR 0 5
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 250
35167: PPUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL_OW 251
35177: PPUSH
35178: LD_VAR 0 2
35182: PPUSH
35183: LD_VAR 0 3
35187: PPUSH
35188: LD_VAR 0 4
35192: PPUSH
35193: CALL 35203 0 5
35197: ST_TO_ADDR
// end ;
35198: LD_VAR 0 5
35202: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35203: LD_INT 0
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
// if not list then
35209: LD_VAR 0 3
35213: NOT
35214: IFFALSE 35218
// exit ;
35216: GO 35606
// result := [ ] ;
35218: LD_ADDR_VAR 0 6
35222: PUSH
35223: EMPTY
35224: ST_TO_ADDR
// for i in list do
35225: LD_ADDR_VAR 0 7
35229: PUSH
35230: LD_VAR 0 3
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35438
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35238: LD_ADDR_VAR 0 9
35242: PUSH
35243: LD_VAR 0 7
35247: PPUSH
35248: LD_VAR 0 1
35252: PPUSH
35253: LD_VAR 0 2
35257: PPUSH
35258: CALL_OW 297
35262: ST_TO_ADDR
// if not result then
35263: LD_VAR 0 6
35267: NOT
35268: IFFALSE 35294
// result := [ [ i , tmp ] ] else
35270: LD_ADDR_VAR 0 6
35274: PUSH
35275: LD_VAR 0 7
35279: PUSH
35280: LD_VAR 0 9
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: EMPTY
35290: LIST
35291: ST_TO_ADDR
35292: GO 35436
// begin if result [ result ] [ 2 ] < tmp then
35294: LD_VAR 0 6
35298: PUSH
35299: LD_VAR 0 6
35303: ARRAY
35304: PUSH
35305: LD_INT 2
35307: ARRAY
35308: PUSH
35309: LD_VAR 0 9
35313: LESS
35314: IFFALSE 35356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35316: LD_ADDR_VAR 0 6
35320: PUSH
35321: LD_VAR 0 6
35325: PPUSH
35326: LD_VAR 0 6
35330: PUSH
35331: LD_INT 1
35333: PLUS
35334: PPUSH
35335: LD_VAR 0 7
35339: PUSH
35340: LD_VAR 0 9
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PPUSH
35349: CALL_OW 2
35353: ST_TO_ADDR
35354: GO 35436
// for j = 1 to result do
35356: LD_ADDR_VAR 0 8
35360: PUSH
35361: DOUBLE
35362: LD_INT 1
35364: DEC
35365: ST_TO_ADDR
35366: LD_VAR 0 6
35370: PUSH
35371: FOR_TO
35372: IFFALSE 35434
// begin if tmp < result [ j ] [ 2 ] then
35374: LD_VAR 0 9
35378: PUSH
35379: LD_VAR 0 6
35383: PUSH
35384: LD_VAR 0 8
35388: ARRAY
35389: PUSH
35390: LD_INT 2
35392: ARRAY
35393: LESS
35394: IFFALSE 35432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35396: LD_ADDR_VAR 0 6
35400: PUSH
35401: LD_VAR 0 6
35405: PPUSH
35406: LD_VAR 0 8
35410: PPUSH
35411: LD_VAR 0 7
35415: PUSH
35416: LD_VAR 0 9
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PPUSH
35425: CALL_OW 2
35429: ST_TO_ADDR
// break ;
35430: GO 35434
// end ; end ;
35432: GO 35371
35434: POP
35435: POP
// end ; end ;
35436: GO 35235
35438: POP
35439: POP
// if result and not asc then
35440: LD_VAR 0 6
35444: PUSH
35445: LD_VAR 0 4
35449: NOT
35450: AND
35451: IFFALSE 35526
// begin tmp := result ;
35453: LD_ADDR_VAR 0 9
35457: PUSH
35458: LD_VAR 0 6
35462: ST_TO_ADDR
// for i = tmp downto 1 do
35463: LD_ADDR_VAR 0 7
35467: PUSH
35468: DOUBLE
35469: LD_VAR 0 9
35473: INC
35474: ST_TO_ADDR
35475: LD_INT 1
35477: PUSH
35478: FOR_DOWNTO
35479: IFFALSE 35524
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35481: LD_ADDR_VAR 0 6
35485: PUSH
35486: LD_VAR 0 6
35490: PPUSH
35491: LD_VAR 0 9
35495: PUSH
35496: LD_VAR 0 7
35500: MINUS
35501: PUSH
35502: LD_INT 1
35504: PLUS
35505: PPUSH
35506: LD_VAR 0 9
35510: PUSH
35511: LD_VAR 0 7
35515: ARRAY
35516: PPUSH
35517: CALL_OW 1
35521: ST_TO_ADDR
35522: GO 35478
35524: POP
35525: POP
// end ; tmp := [ ] ;
35526: LD_ADDR_VAR 0 9
35530: PUSH
35531: EMPTY
35532: ST_TO_ADDR
// if mode then
35533: LD_VAR 0 5
35537: IFFALSE 35606
// begin for i = 1 to result do
35539: LD_ADDR_VAR 0 7
35543: PUSH
35544: DOUBLE
35545: LD_INT 1
35547: DEC
35548: ST_TO_ADDR
35549: LD_VAR 0 6
35553: PUSH
35554: FOR_TO
35555: IFFALSE 35594
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35557: LD_ADDR_VAR 0 9
35561: PUSH
35562: LD_VAR 0 9
35566: PPUSH
35567: LD_VAR 0 7
35571: PPUSH
35572: LD_VAR 0 6
35576: PUSH
35577: LD_VAR 0 7
35581: ARRAY
35582: PUSH
35583: LD_INT 1
35585: ARRAY
35586: PPUSH
35587: CALL_OW 1
35591: ST_TO_ADDR
35592: GO 35554
35594: POP
35595: POP
// result := tmp ;
35596: LD_ADDR_VAR 0 6
35600: PUSH
35601: LD_VAR 0 9
35605: ST_TO_ADDR
// end ; end ;
35606: LD_VAR 0 6
35610: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35611: LD_INT 0
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35619: LD_ADDR_VAR 0 5
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// if not x or not y then
35641: LD_VAR 0 2
35645: NOT
35646: PUSH
35647: LD_VAR 0 3
35651: NOT
35652: OR
35653: IFFALSE 35657
// exit ;
35655: GO 37309
// if not range then
35657: LD_VAR 0 4
35661: NOT
35662: IFFALSE 35672
// range := 10 ;
35664: LD_ADDR_VAR 0 4
35668: PUSH
35669: LD_INT 10
35671: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35672: LD_ADDR_VAR 0 8
35676: PUSH
35677: LD_INT 81
35679: PUSH
35680: LD_VAR 0 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 92
35691: PUSH
35692: LD_VAR 0 2
35696: PUSH
35697: LD_VAR 0 3
35701: PUSH
35702: LD_VAR 0 4
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 3
35715: PUSH
35716: LD_INT 21
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: PPUSH
35735: CALL_OW 69
35739: ST_TO_ADDR
// if not tmp then
35740: LD_VAR 0 8
35744: NOT
35745: IFFALSE 35749
// exit ;
35747: GO 37309
// for i in tmp do
35749: LD_ADDR_VAR 0 6
35753: PUSH
35754: LD_VAR 0 8
35758: PUSH
35759: FOR_IN
35760: IFFALSE 37284
// begin points := [ 0 , 0 , 0 ] ;
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// bpoints := 1 ;
35781: LD_ADDR_VAR 0 10
35785: PUSH
35786: LD_INT 1
35788: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35789: LD_VAR 0 6
35793: PPUSH
35794: CALL_OW 247
35798: PUSH
35799: LD_INT 1
35801: DOUBLE
35802: EQUAL
35803: IFTRUE 35807
35805: GO 36385
35807: POP
// begin if GetClass ( i ) = 1 then
35808: LD_VAR 0 6
35812: PPUSH
35813: CALL_OW 257
35817: PUSH
35818: LD_INT 1
35820: EQUAL
35821: IFFALSE 35842
// points := [ 10 , 5 , 3 ] ;
35823: LD_ADDR_VAR 0 9
35827: PUSH
35828: LD_INT 10
35830: PUSH
35831: LD_INT 5
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35842: LD_VAR 0 6
35846: PPUSH
35847: CALL_OW 257
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: LD_INT 4
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: IN
35866: IFFALSE 35887
// points := [ 3 , 2 , 1 ] ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 257
35896: PUSH
35897: LD_INT 5
35899: EQUAL
35900: IFFALSE 35921
// points := [ 130 , 5 , 2 ] ;
35902: LD_ADDR_VAR 0 9
35906: PUSH
35907: LD_INT 130
35909: PUSH
35910: LD_INT 5
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35921: LD_VAR 0 6
35925: PPUSH
35926: CALL_OW 257
35930: PUSH
35931: LD_INT 8
35933: EQUAL
35934: IFFALSE 35955
// points := [ 35 , 35 , 30 ] ;
35936: LD_ADDR_VAR 0 9
35940: PUSH
35941: LD_INT 35
35943: PUSH
35944: LD_INT 35
35946: PUSH
35947: LD_INT 30
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35955: LD_VAR 0 6
35959: PPUSH
35960: CALL_OW 257
35964: PUSH
35965: LD_INT 9
35967: EQUAL
35968: IFFALSE 35989
// points := [ 20 , 55 , 40 ] ;
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_INT 20
35977: PUSH
35978: LD_INT 55
35980: PUSH
35981: LD_INT 40
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 257
35998: PUSH
35999: LD_INT 12
36001: PUSH
36002: LD_INT 16
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: IN
36009: IFFALSE 36030
// points := [ 5 , 3 , 2 ] ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_INT 5
36018: PUSH
36019: LD_INT 3
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 257
36039: PUSH
36040: LD_INT 17
36042: EQUAL
36043: IFFALSE 36064
// points := [ 100 , 50 , 75 ] ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_INT 100
36052: PUSH
36053: LD_INT 50
36055: PUSH
36056: LD_INT 75
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36064: LD_VAR 0 6
36068: PPUSH
36069: CALL_OW 257
36073: PUSH
36074: LD_INT 15
36076: EQUAL
36077: IFFALSE 36098
// points := [ 10 , 5 , 3 ] ;
36079: LD_ADDR_VAR 0 9
36083: PUSH
36084: LD_INT 10
36086: PUSH
36087: LD_INT 5
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36098: LD_VAR 0 6
36102: PPUSH
36103: CALL_OW 257
36107: PUSH
36108: LD_INT 14
36110: EQUAL
36111: IFFALSE 36132
// points := [ 10 , 0 , 0 ] ;
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_INT 10
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36132: LD_VAR 0 6
36136: PPUSH
36137: CALL_OW 257
36141: PUSH
36142: LD_INT 11
36144: EQUAL
36145: IFFALSE 36166
// points := [ 30 , 10 , 5 ] ;
36147: LD_ADDR_VAR 0 9
36151: PUSH
36152: LD_INT 30
36154: PUSH
36155: LD_INT 10
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36166: LD_VAR 0 1
36170: PPUSH
36171: LD_INT 5
36173: PPUSH
36174: CALL_OW 321
36178: PUSH
36179: LD_INT 2
36181: EQUAL
36182: IFFALSE 36199
// bpoints := bpoints * 1.8 ;
36184: LD_ADDR_VAR 0 10
36188: PUSH
36189: LD_VAR 0 10
36193: PUSH
36194: LD_REAL  1.80000000000000E+0000
36197: MUL
36198: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36199: LD_VAR 0 6
36203: PPUSH
36204: CALL_OW 257
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: LD_INT 4
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: IN
36227: PUSH
36228: LD_VAR 0 1
36232: PPUSH
36233: LD_INT 51
36235: PPUSH
36236: CALL_OW 321
36240: PUSH
36241: LD_INT 2
36243: EQUAL
36244: AND
36245: IFFALSE 36262
// bpoints := bpoints * 1.2 ;
36247: LD_ADDR_VAR 0 10
36251: PUSH
36252: LD_VAR 0 10
36256: PUSH
36257: LD_REAL  1.20000000000000E+0000
36260: MUL
36261: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36262: LD_VAR 0 6
36266: PPUSH
36267: CALL_OW 257
36271: PUSH
36272: LD_INT 5
36274: PUSH
36275: LD_INT 7
36277: PUSH
36278: LD_INT 9
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: IN
36286: PUSH
36287: LD_VAR 0 1
36291: PPUSH
36292: LD_INT 52
36294: PPUSH
36295: CALL_OW 321
36299: PUSH
36300: LD_INT 2
36302: EQUAL
36303: AND
36304: IFFALSE 36321
// bpoints := bpoints * 1.5 ;
36306: LD_ADDR_VAR 0 10
36310: PUSH
36311: LD_VAR 0 10
36315: PUSH
36316: LD_REAL  1.50000000000000E+0000
36319: MUL
36320: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36321: LD_VAR 0 1
36325: PPUSH
36326: LD_INT 66
36328: PPUSH
36329: CALL_OW 321
36333: PUSH
36334: LD_INT 2
36336: EQUAL
36337: IFFALSE 36354
// bpoints := bpoints * 1.1 ;
36339: LD_ADDR_VAR 0 10
36343: PUSH
36344: LD_VAR 0 10
36348: PUSH
36349: LD_REAL  1.10000000000000E+0000
36352: MUL
36353: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36354: LD_ADDR_VAR 0 10
36358: PUSH
36359: LD_VAR 0 10
36363: PUSH
36364: LD_VAR 0 6
36368: PPUSH
36369: LD_INT 1
36371: PPUSH
36372: CALL_OW 259
36376: PUSH
36377: LD_REAL  1.15000000000000E+0000
36380: MUL
36381: MUL
36382: ST_TO_ADDR
// end ; unit_vehicle :
36383: GO 37213
36385: LD_INT 2
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 37201
36393: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36394: LD_VAR 0 6
36398: PPUSH
36399: CALL_OW 264
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 42
36409: PUSH
36410: LD_INT 24
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: IN
36418: IFFALSE 36439
// points := [ 25 , 5 , 3 ] ;
36420: LD_ADDR_VAR 0 9
36424: PUSH
36425: LD_INT 25
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36439: LD_VAR 0 6
36443: PPUSH
36444: CALL_OW 264
36448: PUSH
36449: LD_INT 4
36451: PUSH
36452: LD_INT 43
36454: PUSH
36455: LD_INT 25
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: IN
36463: IFFALSE 36484
// points := [ 40 , 15 , 5 ] ;
36465: LD_ADDR_VAR 0 9
36469: PUSH
36470: LD_INT 40
36472: PUSH
36473: LD_INT 15
36475: PUSH
36476: LD_INT 5
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36484: LD_VAR 0 6
36488: PPUSH
36489: CALL_OW 264
36493: PUSH
36494: LD_INT 3
36496: PUSH
36497: LD_INT 23
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: IN
36504: IFFALSE 36525
// points := [ 7 , 25 , 8 ] ;
36506: LD_ADDR_VAR 0 9
36510: PUSH
36511: LD_INT 7
36513: PUSH
36514: LD_INT 25
36516: PUSH
36517: LD_INT 8
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36525: LD_VAR 0 6
36529: PPUSH
36530: CALL_OW 264
36534: PUSH
36535: LD_INT 5
36537: PUSH
36538: LD_INT 27
36540: PUSH
36541: LD_INT 44
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: IN
36549: IFFALSE 36570
// points := [ 14 , 50 , 16 ] ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_INT 14
36558: PUSH
36559: LD_INT 50
36561: PUSH
36562: LD_INT 16
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36570: LD_VAR 0 6
36574: PPUSH
36575: CALL_OW 264
36579: PUSH
36580: LD_INT 6
36582: PUSH
36583: LD_INT 46
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: IN
36590: IFFALSE 36611
// points := [ 32 , 120 , 70 ] ;
36592: LD_ADDR_VAR 0 9
36596: PUSH
36597: LD_INT 32
36599: PUSH
36600: LD_INT 120
36602: PUSH
36603: LD_INT 70
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36611: LD_VAR 0 6
36615: PPUSH
36616: CALL_OW 264
36620: PUSH
36621: LD_INT 7
36623: PUSH
36624: LD_INT 28
36626: PUSH
36627: LD_INT 45
36629: PUSH
36630: LD_EXP 37
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: IN
36641: IFFALSE 36662
// points := [ 35 , 20 , 45 ] ;
36643: LD_ADDR_VAR 0 9
36647: PUSH
36648: LD_INT 35
36650: PUSH
36651: LD_INT 20
36653: PUSH
36654: LD_INT 45
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36662: LD_VAR 0 6
36666: PPUSH
36667: CALL_OW 264
36671: PUSH
36672: LD_INT 47
36674: PUSH
36675: EMPTY
36676: LIST
36677: IN
36678: IFFALSE 36699
// points := [ 67 , 45 , 75 ] ;
36680: LD_ADDR_VAR 0 9
36684: PUSH
36685: LD_INT 67
36687: PUSH
36688: LD_INT 45
36690: PUSH
36691: LD_INT 75
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36699: LD_VAR 0 6
36703: PPUSH
36704: CALL_OW 264
36708: PUSH
36709: LD_INT 26
36711: PUSH
36712: EMPTY
36713: LIST
36714: IN
36715: IFFALSE 36736
// points := [ 120 , 30 , 80 ] ;
36717: LD_ADDR_VAR 0 9
36721: PUSH
36722: LD_INT 120
36724: PUSH
36725: LD_INT 30
36727: PUSH
36728: LD_INT 80
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36736: LD_VAR 0 6
36740: PPUSH
36741: CALL_OW 264
36745: PUSH
36746: LD_INT 22
36748: PUSH
36749: EMPTY
36750: LIST
36751: IN
36752: IFFALSE 36773
// points := [ 40 , 1 , 1 ] ;
36754: LD_ADDR_VAR 0 9
36758: PUSH
36759: LD_INT 40
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36773: LD_VAR 0 6
36777: PPUSH
36778: CALL_OW 264
36782: PUSH
36783: LD_INT 29
36785: PUSH
36786: EMPTY
36787: LIST
36788: IN
36789: IFFALSE 36810
// points := [ 70 , 200 , 400 ] ;
36791: LD_ADDR_VAR 0 9
36795: PUSH
36796: LD_INT 70
36798: PUSH
36799: LD_INT 200
36801: PUSH
36802: LD_INT 400
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36810: LD_VAR 0 6
36814: PPUSH
36815: CALL_OW 264
36819: PUSH
36820: LD_INT 14
36822: PUSH
36823: LD_INT 53
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: IN
36830: IFFALSE 36851
// points := [ 40 , 10 , 20 ] ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_INT 40
36839: PUSH
36840: LD_INT 10
36842: PUSH
36843: LD_INT 20
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 264
36860: PUSH
36861: LD_INT 9
36863: PUSH
36864: EMPTY
36865: LIST
36866: IN
36867: IFFALSE 36888
// points := [ 5 , 70 , 20 ] ;
36869: LD_ADDR_VAR 0 9
36873: PUSH
36874: LD_INT 5
36876: PUSH
36877: LD_INT 70
36879: PUSH
36880: LD_INT 20
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36888: LD_VAR 0 6
36892: PPUSH
36893: CALL_OW 264
36897: PUSH
36898: LD_INT 10
36900: PUSH
36901: EMPTY
36902: LIST
36903: IN
36904: IFFALSE 36925
// points := [ 35 , 110 , 70 ] ;
36906: LD_ADDR_VAR 0 9
36910: PUSH
36911: LD_INT 35
36913: PUSH
36914: LD_INT 110
36916: PUSH
36917: LD_INT 70
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36925: LD_VAR 0 6
36929: PPUSH
36930: CALL_OW 265
36934: PUSH
36935: LD_INT 25
36937: EQUAL
36938: IFFALSE 36959
// points := [ 80 , 65 , 100 ] ;
36940: LD_ADDR_VAR 0 9
36944: PUSH
36945: LD_INT 80
36947: PUSH
36948: LD_INT 65
36950: PUSH
36951: LD_INT 100
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36959: LD_VAR 0 6
36963: PPUSH
36964: CALL_OW 263
36968: PUSH
36969: LD_INT 1
36971: EQUAL
36972: IFFALSE 37007
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36974: LD_ADDR_VAR 0 10
36978: PUSH
36979: LD_VAR 0 10
36983: PUSH
36984: LD_VAR 0 6
36988: PPUSH
36989: CALL_OW 311
36993: PPUSH
36994: LD_INT 3
36996: PPUSH
36997: CALL_OW 259
37001: PUSH
37002: LD_INT 4
37004: MUL
37005: MUL
37006: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37007: LD_VAR 0 6
37011: PPUSH
37012: CALL_OW 263
37016: PUSH
37017: LD_INT 2
37019: EQUAL
37020: IFFALSE 37071
// begin j := IsControledBy ( i ) ;
37022: LD_ADDR_VAR 0 7
37026: PUSH
37027: LD_VAR 0 6
37031: PPUSH
37032: CALL_OW 312
37036: ST_TO_ADDR
// if j then
37037: LD_VAR 0 7
37041: IFFALSE 37071
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37043: LD_ADDR_VAR 0 10
37047: PUSH
37048: LD_VAR 0 10
37052: PUSH
37053: LD_VAR 0 7
37057: PPUSH
37058: LD_INT 3
37060: PPUSH
37061: CALL_OW 259
37065: PUSH
37066: LD_INT 3
37068: MUL
37069: MUL
37070: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37071: LD_VAR 0 6
37075: PPUSH
37076: CALL_OW 264
37080: PUSH
37081: LD_INT 5
37083: PUSH
37084: LD_INT 6
37086: PUSH
37087: LD_INT 46
37089: PUSH
37090: LD_INT 44
37092: PUSH
37093: LD_INT 47
37095: PUSH
37096: LD_INT 45
37098: PUSH
37099: LD_INT 28
37101: PUSH
37102: LD_INT 7
37104: PUSH
37105: LD_INT 27
37107: PUSH
37108: LD_INT 29
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: IN
37123: PUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_INT 52
37131: PPUSH
37132: CALL_OW 321
37136: PUSH
37137: LD_INT 2
37139: EQUAL
37140: AND
37141: IFFALSE 37158
// bpoints := bpoints * 1.2 ;
37143: LD_ADDR_VAR 0 10
37147: PUSH
37148: LD_VAR 0 10
37152: PUSH
37153: LD_REAL  1.20000000000000E+0000
37156: MUL
37157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37158: LD_VAR 0 6
37162: PPUSH
37163: CALL_OW 264
37167: PUSH
37168: LD_INT 6
37170: PUSH
37171: LD_INT 46
37173: PUSH
37174: LD_INT 47
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: IN
37182: IFFALSE 37199
// bpoints := bpoints * 1.2 ;
37184: LD_ADDR_VAR 0 10
37188: PUSH
37189: LD_VAR 0 10
37193: PUSH
37194: LD_REAL  1.20000000000000E+0000
37197: MUL
37198: ST_TO_ADDR
// end ; unit_building :
37199: GO 37213
37201: LD_INT 3
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37212
37209: POP
// ; end ;
37210: GO 37213
37212: POP
// for j = 1 to 3 do
37213: LD_ADDR_VAR 0 7
37217: PUSH
37218: DOUBLE
37219: LD_INT 1
37221: DEC
37222: ST_TO_ADDR
37223: LD_INT 3
37225: PUSH
37226: FOR_TO
37227: IFFALSE 37280
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37229: LD_ADDR_VAR 0 5
37233: PUSH
37234: LD_VAR 0 5
37238: PPUSH
37239: LD_VAR 0 7
37243: PPUSH
37244: LD_VAR 0 5
37248: PUSH
37249: LD_VAR 0 7
37253: ARRAY
37254: PUSH
37255: LD_VAR 0 9
37259: PUSH
37260: LD_VAR 0 7
37264: ARRAY
37265: PUSH
37266: LD_VAR 0 10
37270: MUL
37271: PLUS
37272: PPUSH
37273: CALL_OW 1
37277: ST_TO_ADDR
37278: GO 37226
37280: POP
37281: POP
// end ;
37282: GO 35759
37284: POP
37285: POP
// result := Replace ( result , 4 , tmp ) ;
37286: LD_ADDR_VAR 0 5
37290: PUSH
37291: LD_VAR 0 5
37295: PPUSH
37296: LD_INT 4
37298: PPUSH
37299: LD_VAR 0 8
37303: PPUSH
37304: CALL_OW 1
37308: ST_TO_ADDR
// end ;
37309: LD_VAR 0 5
37313: RET
// export function DangerAtRange ( unit , range ) ; begin
37314: LD_INT 0
37316: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37317: LD_ADDR_VAR 0 3
37321: PUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: CALL_OW 255
37331: PPUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: CALL_OW 250
37341: PPUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 251
37351: PPUSH
37352: LD_VAR 0 2
37356: PPUSH
37357: CALL 35611 0 4
37361: ST_TO_ADDR
// end ;
37362: LD_VAR 0 3
37366: RET
// export function DangerInArea ( side , area ) ; begin
37367: LD_INT 0
37369: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37370: LD_ADDR_VAR 0 3
37374: PUSH
37375: LD_VAR 0 2
37379: PPUSH
37380: LD_INT 81
37382: PUSH
37383: LD_VAR 0 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PPUSH
37392: CALL_OW 70
37396: ST_TO_ADDR
// end ;
37397: LD_VAR 0 3
37401: RET
// export function IsExtension ( b ) ; begin
37402: LD_INT 0
37404: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37405: LD_ADDR_VAR 0 2
37409: PUSH
37410: LD_VAR 0 1
37414: PUSH
37415: LD_INT 23
37417: PUSH
37418: LD_INT 20
37420: PUSH
37421: LD_INT 22
37423: PUSH
37424: LD_INT 17
37426: PUSH
37427: LD_INT 24
37429: PUSH
37430: LD_INT 21
37432: PUSH
37433: LD_INT 19
37435: PUSH
37436: LD_INT 16
37438: PUSH
37439: LD_INT 25
37441: PUSH
37442: LD_INT 18
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: IN
37457: ST_TO_ADDR
// end ;
37458: LD_VAR 0 2
37462: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37463: LD_INT 0
37465: PPUSH
37466: PPUSH
37467: PPUSH
// result := [ ] ;
37468: LD_ADDR_VAR 0 4
37472: PUSH
37473: EMPTY
37474: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: LD_VAR 0 2
37484: PPUSH
37485: LD_INT 21
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 70
37499: ST_TO_ADDR
// if not tmp then
37500: LD_VAR 0 5
37504: NOT
37505: IFFALSE 37509
// exit ;
37507: GO 37573
// if checkLink then
37509: LD_VAR 0 3
37513: IFFALSE 37563
// begin for i in tmp do
37515: LD_ADDR_VAR 0 6
37519: PUSH
37520: LD_VAR 0 5
37524: PUSH
37525: FOR_IN
37526: IFFALSE 37561
// if GetBase ( i ) <> base then
37528: LD_VAR 0 6
37532: PPUSH
37533: CALL_OW 274
37537: PUSH
37538: LD_VAR 0 1
37542: NONEQUAL
37543: IFFALSE 37559
// ComLinkToBase ( base , i ) ;
37545: LD_VAR 0 1
37549: PPUSH
37550: LD_VAR 0 6
37554: PPUSH
37555: CALL_OW 169
37559: GO 37525
37561: POP
37562: POP
// end ; result := tmp ;
37563: LD_ADDR_VAR 0 4
37567: PUSH
37568: LD_VAR 0 5
37572: ST_TO_ADDR
// end ;
37573: LD_VAR 0 4
37577: RET
// export function ComComplete ( units , b ) ; var i ; begin
37578: LD_INT 0
37580: PPUSH
37581: PPUSH
// if not units then
37582: LD_VAR 0 1
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37681
// for i in units do
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_VAR 0 1
37600: PUSH
37601: FOR_IN
37602: IFFALSE 37679
// if BuildingStatus ( b ) = bs_build then
37604: LD_VAR 0 2
37608: PPUSH
37609: CALL_OW 461
37613: PUSH
37614: LD_INT 1
37616: EQUAL
37617: IFFALSE 37677
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37619: LD_VAR 0 4
37623: PPUSH
37624: LD_STRING h
37626: PUSH
37627: LD_VAR 0 2
37631: PPUSH
37632: CALL_OW 250
37636: PUSH
37637: LD_VAR 0 2
37641: PPUSH
37642: CALL_OW 251
37646: PUSH
37647: LD_VAR 0 2
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: PPUSH
37673: CALL_OW 446
37677: GO 37601
37679: POP
37680: POP
// end ;
37681: LD_VAR 0 3
37685: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37686: LD_INT 0
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37694: LD_VAR 0 1
37698: NOT
37699: PUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 263
37709: PUSH
37710: LD_INT 2
37712: EQUAL
37713: NOT
37714: OR
37715: IFFALSE 37719
// exit ;
37717: GO 38035
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37719: LD_ADDR_VAR 0 6
37723: PUSH
37724: LD_INT 22
37726: PUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 255
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 30
37746: PUSH
37747: LD_INT 36
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 34
37756: PUSH
37757: LD_INT 31
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PPUSH
37773: CALL_OW 69
37777: ST_TO_ADDR
// if not tmp then
37778: LD_VAR 0 6
37782: NOT
37783: IFFALSE 37787
// exit ;
37785: GO 38035
// result := [ ] ;
37787: LD_ADDR_VAR 0 2
37791: PUSH
37792: EMPTY
37793: ST_TO_ADDR
// for i in tmp do
37794: LD_ADDR_VAR 0 3
37798: PUSH
37799: LD_VAR 0 6
37803: PUSH
37804: FOR_IN
37805: IFFALSE 37876
// begin t := UnitsInside ( i ) ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: LD_VAR 0 3
37816: PPUSH
37817: CALL_OW 313
37821: ST_TO_ADDR
// if t then
37822: LD_VAR 0 4
37826: IFFALSE 37874
// for j in t do
37828: LD_ADDR_VAR 0 7
37832: PUSH
37833: LD_VAR 0 4
37837: PUSH
37838: FOR_IN
37839: IFFALSE 37872
// result := Insert ( result , result + 1 , j ) ;
37841: LD_ADDR_VAR 0 2
37845: PUSH
37846: LD_VAR 0 2
37850: PPUSH
37851: LD_VAR 0 2
37855: PUSH
37856: LD_INT 1
37858: PLUS
37859: PPUSH
37860: LD_VAR 0 7
37864: PPUSH
37865: CALL_OW 2
37869: ST_TO_ADDR
37870: GO 37838
37872: POP
37873: POP
// end ;
37874: GO 37804
37876: POP
37877: POP
// if not result then
37878: LD_VAR 0 2
37882: NOT
37883: IFFALSE 37887
// exit ;
37885: GO 38035
// mech := result [ 1 ] ;
37887: LD_ADDR_VAR 0 5
37891: PUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 1
37899: ARRAY
37900: ST_TO_ADDR
// if result > 1 then
37901: LD_VAR 0 2
37905: PUSH
37906: LD_INT 1
37908: GREATER
37909: IFFALSE 38021
// for i = 2 to result do
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: DOUBLE
37917: LD_INT 2
37919: DEC
37920: ST_TO_ADDR
37921: LD_VAR 0 2
37925: PUSH
37926: FOR_TO
37927: IFFALSE 38019
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37929: LD_ADDR_VAR 0 4
37933: PUSH
37934: LD_VAR 0 2
37938: PUSH
37939: LD_VAR 0 3
37943: ARRAY
37944: PPUSH
37945: LD_INT 3
37947: PPUSH
37948: CALL_OW 259
37952: PUSH
37953: LD_VAR 0 2
37957: PUSH
37958: LD_VAR 0 3
37962: ARRAY
37963: PPUSH
37964: CALL_OW 432
37968: MINUS
37969: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37970: LD_VAR 0 4
37974: PUSH
37975: LD_VAR 0 5
37979: PPUSH
37980: LD_INT 3
37982: PPUSH
37983: CALL_OW 259
37987: PUSH
37988: LD_VAR 0 5
37992: PPUSH
37993: CALL_OW 432
37997: MINUS
37998: GREATEREQUAL
37999: IFFALSE 38017
// mech := result [ i ] ;
38001: LD_ADDR_VAR 0 5
38005: PUSH
38006: LD_VAR 0 2
38010: PUSH
38011: LD_VAR 0 3
38015: ARRAY
38016: ST_TO_ADDR
// end ;
38017: GO 37926
38019: POP
38020: POP
// ComLinkTo ( vehicle , mech ) ;
38021: LD_VAR 0 1
38025: PPUSH
38026: LD_VAR 0 5
38030: PPUSH
38031: CALL_OW 135
// end ;
38035: LD_VAR 0 2
38039: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
// result := [ ] ;
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: EMPTY
38061: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38062: LD_VAR 0 1
38066: PPUSH
38067: CALL_OW 266
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: IN
38082: NOT
38083: IFFALSE 38087
// exit ;
38085: GO 39721
// if name then
38087: LD_VAR 0 3
38091: IFFALSE 38107
// SetBName ( base_dep , name ) ;
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_VAR 0 3
38102: PPUSH
38103: CALL_OW 500
// base := GetBase ( base_dep ) ;
38107: LD_ADDR_VAR 0 15
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 274
38121: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38122: LD_ADDR_VAR 0 16
38126: PUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL_OW 255
38136: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38137: LD_ADDR_VAR 0 17
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 248
38151: ST_TO_ADDR
// if sources then
38152: LD_VAR 0 5
38156: IFFALSE 38203
// for i = 1 to 3 do
38158: LD_ADDR_VAR 0 8
38162: PUSH
38163: DOUBLE
38164: LD_INT 1
38166: DEC
38167: ST_TO_ADDR
38168: LD_INT 3
38170: PUSH
38171: FOR_TO
38172: IFFALSE 38201
// AddResourceType ( base , i , sources [ i ] ) ;
38174: LD_VAR 0 15
38178: PPUSH
38179: LD_VAR 0 8
38183: PPUSH
38184: LD_VAR 0 5
38188: PUSH
38189: LD_VAR 0 8
38193: ARRAY
38194: PPUSH
38195: CALL_OW 276
38199: GO 38171
38201: POP
38202: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38203: LD_ADDR_VAR 0 18
38207: PUSH
38208: LD_VAR 0 15
38212: PPUSH
38213: LD_VAR 0 2
38217: PPUSH
38218: LD_INT 1
38220: PPUSH
38221: CALL 37463 0 3
38225: ST_TO_ADDR
// InitHc ;
38226: CALL_OW 19
// InitUc ;
38230: CALL_OW 18
// uc_side := side ;
38234: LD_ADDR_OWVAR 20
38238: PUSH
38239: LD_VAR 0 16
38243: ST_TO_ADDR
// uc_nation := nation ;
38244: LD_ADDR_OWVAR 21
38248: PUSH
38249: LD_VAR 0 17
38253: ST_TO_ADDR
// if buildings then
38254: LD_VAR 0 18
38258: IFFALSE 39580
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38260: LD_ADDR_VAR 0 19
38264: PUSH
38265: LD_VAR 0 18
38269: PPUSH
38270: LD_INT 2
38272: PUSH
38273: LD_INT 30
38275: PUSH
38276: LD_INT 29
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 30
38285: PUSH
38286: LD_INT 30
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: PPUSH
38298: CALL_OW 72
38302: ST_TO_ADDR
// if tmp then
38303: LD_VAR 0 19
38307: IFFALSE 38355
// for i in tmp do
38309: LD_ADDR_VAR 0 8
38313: PUSH
38314: LD_VAR 0 19
38318: PUSH
38319: FOR_IN
38320: IFFALSE 38353
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38322: LD_VAR 0 8
38326: PPUSH
38327: CALL_OW 250
38331: PPUSH
38332: LD_VAR 0 8
38336: PPUSH
38337: CALL_OW 251
38341: PPUSH
38342: LD_VAR 0 16
38346: PPUSH
38347: CALL_OW 441
38351: GO 38319
38353: POP
38354: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38355: LD_VAR 0 18
38359: PPUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 30
38365: PUSH
38366: LD_INT 32
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 30
38375: PUSH
38376: LD_INT 33
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: PPUSH
38388: CALL_OW 72
38392: IFFALSE 38480
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_VAR 0 18
38403: PPUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 30
38409: PUSH
38410: LD_INT 32
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 30
38419: PUSH
38420: LD_INT 33
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PPUSH
38432: CALL_OW 72
38436: PUSH
38437: FOR_IN
38438: IFFALSE 38478
// begin if not GetBWeapon ( i ) then
38440: LD_VAR 0 8
38444: PPUSH
38445: CALL_OW 269
38449: NOT
38450: IFFALSE 38476
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38452: LD_VAR 0 8
38456: PPUSH
38457: LD_VAR 0 8
38461: PPUSH
38462: LD_VAR 0 2
38466: PPUSH
38467: CALL 39726 0 2
38471: PPUSH
38472: CALL_OW 431
// end ;
38476: GO 38437
38478: POP
38479: POP
// end ; for i = 1 to personel do
38480: LD_ADDR_VAR 0 8
38484: PUSH
38485: DOUBLE
38486: LD_INT 1
38488: DEC
38489: ST_TO_ADDR
38490: LD_VAR 0 6
38494: PUSH
38495: FOR_TO
38496: IFFALSE 39560
// begin if i > 4 then
38498: LD_VAR 0 8
38502: PUSH
38503: LD_INT 4
38505: GREATER
38506: IFFALSE 38510
// break ;
38508: GO 39560
// case i of 1 :
38510: LD_VAR 0 8
38514: PUSH
38515: LD_INT 1
38517: DOUBLE
38518: EQUAL
38519: IFTRUE 38523
38521: GO 38603
38523: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38524: LD_ADDR_VAR 0 12
38528: PUSH
38529: LD_VAR 0 18
38533: PPUSH
38534: LD_INT 22
38536: PUSH
38537: LD_VAR 0 16
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 58
38548: PUSH
38549: EMPTY
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 30
38557: PUSH
38558: LD_INT 32
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 30
38567: PUSH
38568: LD_INT 4
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 30
38577: PUSH
38578: LD_INT 5
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PPUSH
38596: CALL_OW 72
38600: ST_TO_ADDR
38601: GO 38825
38603: LD_INT 2
38605: DOUBLE
38606: EQUAL
38607: IFTRUE 38611
38609: GO 38673
38611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38612: LD_ADDR_VAR 0 12
38616: PUSH
38617: LD_VAR 0 18
38621: PPUSH
38622: LD_INT 22
38624: PUSH
38625: LD_VAR 0 16
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 30
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 30
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 72
38670: ST_TO_ADDR
38671: GO 38825
38673: LD_INT 3
38675: DOUBLE
38676: EQUAL
38677: IFTRUE 38681
38679: GO 38743
38681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38682: LD_ADDR_VAR 0 12
38686: PUSH
38687: LD_VAR 0 18
38691: PPUSH
38692: LD_INT 22
38694: PUSH
38695: LD_VAR 0 16
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 30
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 30
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PPUSH
38736: CALL_OW 72
38740: ST_TO_ADDR
38741: GO 38825
38743: LD_INT 4
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38824
38751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38752: LD_ADDR_VAR 0 12
38756: PUSH
38757: LD_VAR 0 18
38761: PPUSH
38762: LD_INT 22
38764: PUSH
38765: LD_VAR 0 16
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 30
38779: PUSH
38780: LD_INT 6
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 7
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 30
38799: PUSH
38800: LD_INT 8
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PPUSH
38817: CALL_OW 72
38821: ST_TO_ADDR
38822: GO 38825
38824: POP
// if i = 1 then
38825: LD_VAR 0 8
38829: PUSH
38830: LD_INT 1
38832: EQUAL
38833: IFFALSE 38944
// begin tmp := [ ] ;
38835: LD_ADDR_VAR 0 19
38839: PUSH
38840: EMPTY
38841: ST_TO_ADDR
// for j in f do
38842: LD_ADDR_VAR 0 9
38846: PUSH
38847: LD_VAR 0 12
38851: PUSH
38852: FOR_IN
38853: IFFALSE 38926
// if GetBType ( j ) = b_bunker then
38855: LD_VAR 0 9
38859: PPUSH
38860: CALL_OW 266
38864: PUSH
38865: LD_INT 32
38867: EQUAL
38868: IFFALSE 38895
// tmp := Insert ( tmp , 1 , j ) else
38870: LD_ADDR_VAR 0 19
38874: PUSH
38875: LD_VAR 0 19
38879: PPUSH
38880: LD_INT 1
38882: PPUSH
38883: LD_VAR 0 9
38887: PPUSH
38888: CALL_OW 2
38892: ST_TO_ADDR
38893: GO 38924
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38895: LD_ADDR_VAR 0 19
38899: PUSH
38900: LD_VAR 0 19
38904: PPUSH
38905: LD_VAR 0 19
38909: PUSH
38910: LD_INT 1
38912: PLUS
38913: PPUSH
38914: LD_VAR 0 9
38918: PPUSH
38919: CALL_OW 2
38923: ST_TO_ADDR
38924: GO 38852
38926: POP
38927: POP
// if tmp then
38928: LD_VAR 0 19
38932: IFFALSE 38944
// f := tmp ;
38934: LD_ADDR_VAR 0 12
38938: PUSH
38939: LD_VAR 0 19
38943: ST_TO_ADDR
// end ; x := personel [ i ] ;
38944: LD_ADDR_VAR 0 13
38948: PUSH
38949: LD_VAR 0 6
38953: PUSH
38954: LD_VAR 0 8
38958: ARRAY
38959: ST_TO_ADDR
// if x = - 1 then
38960: LD_VAR 0 13
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: EQUAL
38969: IFFALSE 39178
// begin for j in f do
38971: LD_ADDR_VAR 0 9
38975: PUSH
38976: LD_VAR 0 12
38980: PUSH
38981: FOR_IN
38982: IFFALSE 39174
// repeat InitHc ;
38984: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38988: LD_VAR 0 9
38992: PPUSH
38993: CALL_OW 266
38997: PUSH
38998: LD_INT 5
39000: EQUAL
39001: IFFALSE 39071
// begin if UnitsInside ( j ) < 3 then
39003: LD_VAR 0 9
39007: PPUSH
39008: CALL_OW 313
39012: PUSH
39013: LD_INT 3
39015: LESS
39016: IFFALSE 39052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39018: LD_INT 0
39020: PPUSH
39021: LD_INT 5
39023: PUSH
39024: LD_INT 8
39026: PUSH
39027: LD_INT 9
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: LIST
39034: PUSH
39035: LD_VAR 0 17
39039: ARRAY
39040: PPUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: CALL_OW 380
39050: GO 39069
// PrepareHuman ( false , i , skill ) ;
39052: LD_INT 0
39054: PPUSH
39055: LD_VAR 0 8
39059: PPUSH
39060: LD_VAR 0 4
39064: PPUSH
39065: CALL_OW 380
// end else
39069: GO 39088
// PrepareHuman ( false , i , skill ) ;
39071: LD_INT 0
39073: PPUSH
39074: LD_VAR 0 8
39078: PPUSH
39079: LD_VAR 0 4
39083: PPUSH
39084: CALL_OW 380
// un := CreateHuman ;
39088: LD_ADDR_VAR 0 14
39092: PUSH
39093: CALL_OW 44
39097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39098: LD_ADDR_VAR 0 7
39102: PUSH
39103: LD_VAR 0 7
39107: PPUSH
39108: LD_INT 1
39110: PPUSH
39111: LD_VAR 0 14
39115: PPUSH
39116: CALL_OW 2
39120: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39121: LD_VAR 0 14
39125: PPUSH
39126: LD_VAR 0 9
39130: PPUSH
39131: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39135: LD_VAR 0 9
39139: PPUSH
39140: CALL_OW 313
39144: PUSH
39145: LD_INT 6
39147: EQUAL
39148: PUSH
39149: LD_VAR 0 9
39153: PPUSH
39154: CALL_OW 266
39158: PUSH
39159: LD_INT 32
39161: PUSH
39162: LD_INT 31
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: IN
39169: OR
39170: IFFALSE 38984
39172: GO 38981
39174: POP
39175: POP
// end else
39176: GO 39558
// for j = 1 to x do
39178: LD_ADDR_VAR 0 9
39182: PUSH
39183: DOUBLE
39184: LD_INT 1
39186: DEC
39187: ST_TO_ADDR
39188: LD_VAR 0 13
39192: PUSH
39193: FOR_TO
39194: IFFALSE 39556
// begin InitHc ;
39196: CALL_OW 19
// if not f then
39200: LD_VAR 0 12
39204: NOT
39205: IFFALSE 39294
// begin PrepareHuman ( false , i , skill ) ;
39207: LD_INT 0
39209: PPUSH
39210: LD_VAR 0 8
39214: PPUSH
39215: LD_VAR 0 4
39219: PPUSH
39220: CALL_OW 380
// un := CreateHuman ;
39224: LD_ADDR_VAR 0 14
39228: PUSH
39229: CALL_OW 44
39233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39234: LD_ADDR_VAR 0 7
39238: PUSH
39239: LD_VAR 0 7
39243: PPUSH
39244: LD_INT 1
39246: PPUSH
39247: LD_VAR 0 14
39251: PPUSH
39252: CALL_OW 2
39256: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39257: LD_VAR 0 14
39261: PPUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 250
39271: PPUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 251
39281: PPUSH
39282: LD_INT 10
39284: PPUSH
39285: LD_INT 0
39287: PPUSH
39288: CALL_OW 50
// continue ;
39292: GO 39193
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39294: LD_VAR 0 12
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: PPUSH
39303: CALL_OW 313
39307: PUSH
39308: LD_VAR 0 12
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PPUSH
39317: CALL_OW 266
39321: PUSH
39322: LD_INT 32
39324: PUSH
39325: LD_INT 31
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: IN
39332: AND
39333: PUSH
39334: LD_VAR 0 12
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PPUSH
39343: CALL_OW 313
39347: PUSH
39348: LD_INT 6
39350: EQUAL
39351: OR
39352: IFFALSE 39372
// f := Delete ( f , 1 ) ;
39354: LD_ADDR_VAR 0 12
39358: PUSH
39359: LD_VAR 0 12
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: CALL_OW 3
39371: ST_TO_ADDR
// if not f then
39372: LD_VAR 0 12
39376: NOT
39377: IFFALSE 39395
// begin x := x + 2 ;
39379: LD_ADDR_VAR 0 13
39383: PUSH
39384: LD_VAR 0 13
39388: PUSH
39389: LD_INT 2
39391: PLUS
39392: ST_TO_ADDR
// continue ;
39393: GO 39193
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39395: LD_VAR 0 12
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PPUSH
39404: CALL_OW 266
39408: PUSH
39409: LD_INT 5
39411: EQUAL
39412: IFFALSE 39486
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39414: LD_VAR 0 12
39418: PUSH
39419: LD_INT 1
39421: ARRAY
39422: PPUSH
39423: CALL_OW 313
39427: PUSH
39428: LD_INT 3
39430: LESS
39431: IFFALSE 39467
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39433: LD_INT 0
39435: PPUSH
39436: LD_INT 5
39438: PUSH
39439: LD_INT 8
39441: PUSH
39442: LD_INT 9
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 17
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 4
39460: PPUSH
39461: CALL_OW 380
39465: GO 39484
// PrepareHuman ( false , i , skill ) ;
39467: LD_INT 0
39469: PPUSH
39470: LD_VAR 0 8
39474: PPUSH
39475: LD_VAR 0 4
39479: PPUSH
39480: CALL_OW 380
// end else
39484: GO 39503
// PrepareHuman ( false , i , skill ) ;
39486: LD_INT 0
39488: PPUSH
39489: LD_VAR 0 8
39493: PPUSH
39494: LD_VAR 0 4
39498: PPUSH
39499: CALL_OW 380
// un := CreateHuman ;
39503: LD_ADDR_VAR 0 14
39507: PUSH
39508: CALL_OW 44
39512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39513: LD_ADDR_VAR 0 7
39517: PUSH
39518: LD_VAR 0 7
39522: PPUSH
39523: LD_INT 1
39525: PPUSH
39526: LD_VAR 0 14
39530: PPUSH
39531: CALL_OW 2
39535: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39536: LD_VAR 0 14
39540: PPUSH
39541: LD_VAR 0 12
39545: PUSH
39546: LD_INT 1
39548: ARRAY
39549: PPUSH
39550: CALL_OW 52
// end ;
39554: GO 39193
39556: POP
39557: POP
// end ;
39558: GO 38495
39560: POP
39561: POP
// result := result ^ buildings ;
39562: LD_ADDR_VAR 0 7
39566: PUSH
39567: LD_VAR 0 7
39571: PUSH
39572: LD_VAR 0 18
39576: ADD
39577: ST_TO_ADDR
// end else
39578: GO 39721
// begin for i = 1 to personel do
39580: LD_ADDR_VAR 0 8
39584: PUSH
39585: DOUBLE
39586: LD_INT 1
39588: DEC
39589: ST_TO_ADDR
39590: LD_VAR 0 6
39594: PUSH
39595: FOR_TO
39596: IFFALSE 39719
// begin if i > 4 then
39598: LD_VAR 0 8
39602: PUSH
39603: LD_INT 4
39605: GREATER
39606: IFFALSE 39610
// break ;
39608: GO 39719
// x := personel [ i ] ;
39610: LD_ADDR_VAR 0 13
39614: PUSH
39615: LD_VAR 0 6
39619: PUSH
39620: LD_VAR 0 8
39624: ARRAY
39625: ST_TO_ADDR
// if x = - 1 then
39626: LD_VAR 0 13
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: EQUAL
39635: IFFALSE 39639
// continue ;
39637: GO 39595
// PrepareHuman ( false , i , skill ) ;
39639: LD_INT 0
39641: PPUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_VAR 0 4
39651: PPUSH
39652: CALL_OW 380
// un := CreateHuman ;
39656: LD_ADDR_VAR 0 14
39660: PUSH
39661: CALL_OW 44
39665: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39666: LD_VAR 0 14
39670: PPUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 250
39680: PPUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 251
39690: PPUSH
39691: LD_INT 10
39693: PPUSH
39694: LD_INT 0
39696: PPUSH
39697: CALL_OW 50
// result := result ^ un ;
39701: LD_ADDR_VAR 0 7
39705: PUSH
39706: LD_VAR 0 7
39710: PUSH
39711: LD_VAR 0 14
39715: ADD
39716: ST_TO_ADDR
// end ;
39717: GO 39595
39719: POP
39720: POP
// end ; end ;
39721: LD_VAR 0 7
39725: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39726: LD_INT 0
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
39740: PPUSH
39741: PPUSH
39742: PPUSH
39743: PPUSH
// result := false ;
39744: LD_ADDR_VAR 0 3
39748: PUSH
39749: LD_INT 0
39751: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39752: LD_VAR 0 1
39756: NOT
39757: PUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 266
39767: PUSH
39768: LD_INT 32
39770: PUSH
39771: LD_INT 33
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: IN
39778: NOT
39779: OR
39780: IFFALSE 39784
// exit ;
39782: GO 40893
// nat := GetNation ( tower ) ;
39784: LD_ADDR_VAR 0 12
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 248
39798: ST_TO_ADDR
// side := GetSide ( tower ) ;
39799: LD_ADDR_VAR 0 16
39803: PUSH
39804: LD_VAR 0 1
39808: PPUSH
39809: CALL_OW 255
39813: ST_TO_ADDR
// x := GetX ( tower ) ;
39814: LD_ADDR_VAR 0 10
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 250
39828: ST_TO_ADDR
// y := GetY ( tower ) ;
39829: LD_ADDR_VAR 0 11
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 251
39843: ST_TO_ADDR
// if not x or not y then
39844: LD_VAR 0 10
39848: NOT
39849: PUSH
39850: LD_VAR 0 11
39854: NOT
39855: OR
39856: IFFALSE 39860
// exit ;
39858: GO 40893
// weapon := 0 ;
39860: LD_ADDR_VAR 0 18
39864: PUSH
39865: LD_INT 0
39867: ST_TO_ADDR
// fac_list := [ ] ;
39868: LD_ADDR_VAR 0 17
39872: PUSH
39873: EMPTY
39874: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39875: LD_ADDR_VAR 0 6
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 274
39889: PPUSH
39890: LD_VAR 0 2
39894: PPUSH
39895: LD_INT 0
39897: PPUSH
39898: CALL 37463 0 3
39902: PPUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 72
39917: ST_TO_ADDR
// if not factories then
39918: LD_VAR 0 6
39922: NOT
39923: IFFALSE 39927
// exit ;
39925: GO 40893
// for i in factories do
39927: LD_ADDR_VAR 0 8
39931: PUSH
39932: LD_VAR 0 6
39936: PUSH
39937: FOR_IN
39938: IFFALSE 39963
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39940: LD_ADDR_VAR 0 17
39944: PUSH
39945: LD_VAR 0 17
39949: PUSH
39950: LD_VAR 0 8
39954: PPUSH
39955: CALL_OW 478
39959: UNION
39960: ST_TO_ADDR
39961: GO 39937
39963: POP
39964: POP
// if not fac_list then
39965: LD_VAR 0 17
39969: NOT
39970: IFFALSE 39974
// exit ;
39972: GO 40893
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39974: LD_ADDR_VAR 0 5
39978: PUSH
39979: LD_INT 4
39981: PUSH
39982: LD_INT 5
39984: PUSH
39985: LD_INT 9
39987: PUSH
39988: LD_INT 10
39990: PUSH
39991: LD_INT 6
39993: PUSH
39994: LD_INT 7
39996: PUSH
39997: LD_INT 11
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 27
40011: PUSH
40012: LD_INT 28
40014: PUSH
40015: LD_INT 26
40017: PUSH
40018: LD_INT 30
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 43
40029: PUSH
40030: LD_INT 44
40032: PUSH
40033: LD_INT 46
40035: PUSH
40036: LD_INT 45
40038: PUSH
40039: LD_INT 47
40041: PUSH
40042: LD_INT 49
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: PUSH
40058: LD_VAR 0 12
40062: ARRAY
40063: ST_TO_ADDR
// list := list isect fac_list ;
40064: LD_ADDR_VAR 0 5
40068: PUSH
40069: LD_VAR 0 5
40073: PUSH
40074: LD_VAR 0 17
40078: ISECT
40079: ST_TO_ADDR
// if not list then
40080: LD_VAR 0 5
40084: NOT
40085: IFFALSE 40089
// exit ;
40087: GO 40893
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40089: LD_VAR 0 12
40093: PUSH
40094: LD_INT 3
40096: EQUAL
40097: PUSH
40098: LD_INT 49
40100: PUSH
40101: LD_VAR 0 5
40105: IN
40106: AND
40107: PUSH
40108: LD_INT 31
40110: PPUSH
40111: LD_VAR 0 16
40115: PPUSH
40116: CALL_OW 321
40120: PUSH
40121: LD_INT 2
40123: EQUAL
40124: AND
40125: IFFALSE 40185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40127: LD_INT 22
40129: PUSH
40130: LD_VAR 0 16
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 35
40141: PUSH
40142: LD_INT 49
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 91
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: LD_INT 10
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: PPUSH
40170: CALL_OW 69
40174: NOT
40175: IFFALSE 40185
// weapon := ru_time_lapser ;
40177: LD_ADDR_VAR 0 18
40181: PUSH
40182: LD_INT 49
40184: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40185: LD_VAR 0 12
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: IN
40200: PUSH
40201: LD_INT 11
40203: PUSH
40204: LD_VAR 0 5
40208: IN
40209: PUSH
40210: LD_INT 30
40212: PUSH
40213: LD_VAR 0 5
40217: IN
40218: OR
40219: AND
40220: PUSH
40221: LD_INT 6
40223: PPUSH
40224: LD_VAR 0 16
40228: PPUSH
40229: CALL_OW 321
40233: PUSH
40234: LD_INT 2
40236: EQUAL
40237: AND
40238: IFFALSE 40403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40240: LD_INT 22
40242: PUSH
40243: LD_VAR 0 16
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 35
40257: PUSH
40258: LD_INT 11
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 35
40267: PUSH
40268: LD_INT 30
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 91
40282: PUSH
40283: LD_VAR 0 1
40287: PUSH
40288: LD_INT 18
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: PPUSH
40301: CALL_OW 69
40305: NOT
40306: PUSH
40307: LD_INT 22
40309: PUSH
40310: LD_VAR 0 16
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 30
40324: PUSH
40325: LD_INT 32
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 30
40334: PUSH
40335: LD_INT 33
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 91
40349: PUSH
40350: LD_VAR 0 1
40354: PUSH
40355: LD_INT 12
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: PPUSH
40371: CALL_OW 69
40375: PUSH
40376: LD_INT 2
40378: GREATER
40379: AND
40380: IFFALSE 40403
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40382: LD_ADDR_VAR 0 18
40386: PUSH
40387: LD_INT 11
40389: PUSH
40390: LD_INT 30
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_VAR 0 12
40401: ARRAY
40402: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40403: LD_VAR 0 18
40407: NOT
40408: PUSH
40409: LD_INT 40
40411: PPUSH
40412: LD_VAR 0 16
40416: PPUSH
40417: CALL_OW 321
40421: PUSH
40422: LD_INT 2
40424: EQUAL
40425: AND
40426: PUSH
40427: LD_INT 7
40429: PUSH
40430: LD_VAR 0 5
40434: IN
40435: PUSH
40436: LD_INT 28
40438: PUSH
40439: LD_VAR 0 5
40443: IN
40444: OR
40445: PUSH
40446: LD_INT 45
40448: PUSH
40449: LD_VAR 0 5
40453: IN
40454: OR
40455: AND
40456: IFFALSE 40710
// begin hex := GetHexInfo ( x , y ) ;
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: LD_VAR 0 11
40472: PPUSH
40473: CALL_OW 546
40477: ST_TO_ADDR
// if hex [ 1 ] then
40478: LD_VAR 0 4
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: IFFALSE 40490
// exit ;
40488: GO 40893
// height := hex [ 2 ] ;
40490: LD_ADDR_VAR 0 15
40494: PUSH
40495: LD_VAR 0 4
40499: PUSH
40500: LD_INT 2
40502: ARRAY
40503: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40504: LD_ADDR_VAR 0 14
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 3
40517: PUSH
40518: LD_INT 5
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: ST_TO_ADDR
// for i in tmp do
40527: LD_ADDR_VAR 0 8
40531: PUSH
40532: LD_VAR 0 14
40536: PUSH
40537: FOR_IN
40538: IFFALSE 40708
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40540: LD_ADDR_VAR 0 9
40544: PUSH
40545: LD_VAR 0 10
40549: PPUSH
40550: LD_VAR 0 8
40554: PPUSH
40555: LD_INT 5
40557: PPUSH
40558: CALL_OW 272
40562: PUSH
40563: LD_VAR 0 11
40567: PPUSH
40568: LD_VAR 0 8
40572: PPUSH
40573: LD_INT 5
40575: PPUSH
40576: CALL_OW 273
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40585: LD_VAR 0 9
40589: PUSH
40590: LD_INT 1
40592: ARRAY
40593: PPUSH
40594: LD_VAR 0 9
40598: PUSH
40599: LD_INT 2
40601: ARRAY
40602: PPUSH
40603: CALL_OW 488
40607: IFFALSE 40706
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_VAR 0 9
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: PPUSH
40623: LD_VAR 0 9
40627: PUSH
40628: LD_INT 2
40630: ARRAY
40631: PPUSH
40632: CALL_OW 546
40636: ST_TO_ADDR
// if hex [ 1 ] then
40637: LD_VAR 0 4
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: IFFALSE 40649
// continue ;
40647: GO 40537
// h := hex [ 2 ] ;
40649: LD_ADDR_VAR 0 13
40653: PUSH
40654: LD_VAR 0 4
40658: PUSH
40659: LD_INT 2
40661: ARRAY
40662: ST_TO_ADDR
// if h + 7 < height then
40663: LD_VAR 0 13
40667: PUSH
40668: LD_INT 7
40670: PLUS
40671: PUSH
40672: LD_VAR 0 15
40676: LESS
40677: IFFALSE 40706
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40679: LD_ADDR_VAR 0 18
40683: PUSH
40684: LD_INT 7
40686: PUSH
40687: LD_INT 28
40689: PUSH
40690: LD_INT 45
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: PUSH
40698: LD_VAR 0 12
40702: ARRAY
40703: ST_TO_ADDR
// break ;
40704: GO 40708
// end ; end ; end ;
40706: GO 40537
40708: POP
40709: POP
// end ; if not weapon then
40710: LD_VAR 0 18
40714: NOT
40715: IFFALSE 40775
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40717: LD_ADDR_VAR 0 5
40721: PUSH
40722: LD_VAR 0 5
40726: PUSH
40727: LD_INT 11
40729: PUSH
40730: LD_INT 30
40732: PUSH
40733: LD_INT 49
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: DIFF
40741: ST_TO_ADDR
// if not list then
40742: LD_VAR 0 5
40746: NOT
40747: IFFALSE 40751
// exit ;
40749: GO 40893
// weapon := list [ rand ( 1 , list ) ] ;
40751: LD_ADDR_VAR 0 18
40755: PUSH
40756: LD_VAR 0 5
40760: PUSH
40761: LD_INT 1
40763: PPUSH
40764: LD_VAR 0 5
40768: PPUSH
40769: CALL_OW 12
40773: ARRAY
40774: ST_TO_ADDR
// end ; if weapon then
40775: LD_VAR 0 18
40779: IFFALSE 40893
// begin tmp := CostOfWeapon ( weapon ) ;
40781: LD_ADDR_VAR 0 14
40785: PUSH
40786: LD_VAR 0 18
40790: PPUSH
40791: CALL_OW 451
40795: ST_TO_ADDR
// j := GetBase ( tower ) ;
40796: LD_ADDR_VAR 0 9
40800: PUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 274
40810: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40811: LD_VAR 0 9
40815: PPUSH
40816: LD_INT 1
40818: PPUSH
40819: CALL_OW 275
40823: PUSH
40824: LD_VAR 0 14
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: GREATEREQUAL
40833: PUSH
40834: LD_VAR 0 9
40838: PPUSH
40839: LD_INT 2
40841: PPUSH
40842: CALL_OW 275
40846: PUSH
40847: LD_VAR 0 14
40851: PUSH
40852: LD_INT 2
40854: ARRAY
40855: GREATEREQUAL
40856: AND
40857: PUSH
40858: LD_VAR 0 9
40862: PPUSH
40863: LD_INT 3
40865: PPUSH
40866: CALL_OW 275
40870: PUSH
40871: LD_VAR 0 14
40875: PUSH
40876: LD_INT 3
40878: ARRAY
40879: GREATEREQUAL
40880: AND
40881: IFFALSE 40893
// result := weapon ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 18
40892: ST_TO_ADDR
// end ; end ;
40893: LD_VAR 0 3
40897: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
// result := true ;
40902: LD_ADDR_VAR 0 3
40906: PUSH
40907: LD_INT 1
40909: ST_TO_ADDR
// if array1 = array2 then
40910: LD_VAR 0 1
40914: PUSH
40915: LD_VAR 0 2
40919: EQUAL
40920: IFFALSE 40980
// begin for i = 1 to array1 do
40922: LD_ADDR_VAR 0 4
40926: PUSH
40927: DOUBLE
40928: LD_INT 1
40930: DEC
40931: ST_TO_ADDR
40932: LD_VAR 0 1
40936: PUSH
40937: FOR_TO
40938: IFFALSE 40976
// if array1 [ i ] <> array2 [ i ] then
40940: LD_VAR 0 1
40944: PUSH
40945: LD_VAR 0 4
40949: ARRAY
40950: PUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_VAR 0 4
40960: ARRAY
40961: NONEQUAL
40962: IFFALSE 40974
// begin result := false ;
40964: LD_ADDR_VAR 0 3
40968: PUSH
40969: LD_INT 0
40971: ST_TO_ADDR
// break ;
40972: GO 40976
// end ;
40974: GO 40937
40976: POP
40977: POP
// end else
40978: GO 40988
// result := false ;
40980: LD_ADDR_VAR 0 3
40984: PUSH
40985: LD_INT 0
40987: ST_TO_ADDR
// end ;
40988: LD_VAR 0 3
40992: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40993: LD_INT 0
40995: PPUSH
40996: PPUSH
// if not array1 or not array2 then
40997: LD_VAR 0 1
41001: NOT
41002: PUSH
41003: LD_VAR 0 2
41007: NOT
41008: OR
41009: IFFALSE 41013
// exit ;
41011: GO 41077
// result := true ;
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_INT 1
41020: ST_TO_ADDR
// for i = 1 to array1 do
41021: LD_ADDR_VAR 0 4
41025: PUSH
41026: DOUBLE
41027: LD_INT 1
41029: DEC
41030: ST_TO_ADDR
41031: LD_VAR 0 1
41035: PUSH
41036: FOR_TO
41037: IFFALSE 41075
// if array1 [ i ] <> array2 [ i ] then
41039: LD_VAR 0 1
41043: PUSH
41044: LD_VAR 0 4
41048: ARRAY
41049: PUSH
41050: LD_VAR 0 2
41054: PUSH
41055: LD_VAR 0 4
41059: ARRAY
41060: NONEQUAL
41061: IFFALSE 41073
// begin result := false ;
41063: LD_ADDR_VAR 0 3
41067: PUSH
41068: LD_INT 0
41070: ST_TO_ADDR
// break ;
41071: GO 41075
// end ;
41073: GO 41036
41075: POP
41076: POP
// end ;
41077: LD_VAR 0 3
41081: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41082: LD_INT 0
41084: PPUSH
41085: PPUSH
41086: PPUSH
// pom := GetBase ( fac ) ;
41087: LD_ADDR_VAR 0 5
41091: PUSH
41092: LD_VAR 0 1
41096: PPUSH
41097: CALL_OW 274
41101: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41102: LD_ADDR_VAR 0 4
41106: PUSH
41107: LD_VAR 0 2
41111: PUSH
41112: LD_INT 1
41114: ARRAY
41115: PPUSH
41116: LD_VAR 0 2
41120: PUSH
41121: LD_INT 2
41123: ARRAY
41124: PPUSH
41125: LD_VAR 0 2
41129: PUSH
41130: LD_INT 3
41132: ARRAY
41133: PPUSH
41134: LD_VAR 0 2
41138: PUSH
41139: LD_INT 4
41141: ARRAY
41142: PPUSH
41143: CALL_OW 449
41147: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_VAR 0 5
41157: PPUSH
41158: LD_INT 1
41160: PPUSH
41161: CALL_OW 275
41165: PUSH
41166: LD_VAR 0 4
41170: PUSH
41171: LD_INT 1
41173: ARRAY
41174: GREATEREQUAL
41175: PUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: LD_INT 2
41183: PPUSH
41184: CALL_OW 275
41188: PUSH
41189: LD_VAR 0 4
41193: PUSH
41194: LD_INT 2
41196: ARRAY
41197: GREATEREQUAL
41198: AND
41199: PUSH
41200: LD_VAR 0 5
41204: PPUSH
41205: LD_INT 3
41207: PPUSH
41208: CALL_OW 275
41212: PUSH
41213: LD_VAR 0 4
41217: PUSH
41218: LD_INT 3
41220: ARRAY
41221: GREATEREQUAL
41222: AND
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 3
41228: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
// pom := GetBase ( building ) ;
41235: LD_ADDR_VAR 0 3
41239: PUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 274
41249: ST_TO_ADDR
// if not pom then
41250: LD_VAR 0 3
41254: NOT
41255: IFFALSE 41259
// exit ;
41257: GO 41429
// btype := GetBType ( building ) ;
41259: LD_ADDR_VAR 0 5
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 266
41273: ST_TO_ADDR
// if btype = b_armoury then
41274: LD_VAR 0 5
41278: PUSH
41279: LD_INT 4
41281: EQUAL
41282: IFFALSE 41292
// btype := b_barracks ;
41284: LD_ADDR_VAR 0 5
41288: PUSH
41289: LD_INT 5
41291: ST_TO_ADDR
// if btype = b_depot then
41292: LD_VAR 0 5
41296: PUSH
41297: LD_INT 0
41299: EQUAL
41300: IFFALSE 41310
// btype := b_warehouse ;
41302: LD_ADDR_VAR 0 5
41306: PUSH
41307: LD_INT 1
41309: ST_TO_ADDR
// if btype = b_workshop then
41310: LD_VAR 0 5
41314: PUSH
41315: LD_INT 2
41317: EQUAL
41318: IFFALSE 41328
// btype := b_factory ;
41320: LD_ADDR_VAR 0 5
41324: PUSH
41325: LD_INT 3
41327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41328: LD_ADDR_VAR 0 4
41332: PUSH
41333: LD_VAR 0 5
41337: PPUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 248
41347: PPUSH
41348: CALL_OW 450
41352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41353: LD_ADDR_VAR 0 2
41357: PUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: LD_INT 1
41365: PPUSH
41366: CALL_OW 275
41370: PUSH
41371: LD_VAR 0 4
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: GREATEREQUAL
41380: PUSH
41381: LD_VAR 0 3
41385: PPUSH
41386: LD_INT 2
41388: PPUSH
41389: CALL_OW 275
41393: PUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: GREATEREQUAL
41403: AND
41404: PUSH
41405: LD_VAR 0 3
41409: PPUSH
41410: LD_INT 3
41412: PPUSH
41413: CALL_OW 275
41417: PUSH
41418: LD_VAR 0 4
41422: PUSH
41423: LD_INT 3
41425: ARRAY
41426: GREATEREQUAL
41427: AND
41428: ST_TO_ADDR
// end ;
41429: LD_VAR 0 2
41433: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41434: LD_INT 0
41436: PPUSH
41437: PPUSH
41438: PPUSH
// pom := GetBase ( building ) ;
41439: LD_ADDR_VAR 0 4
41443: PUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 274
41453: ST_TO_ADDR
// if not pom then
41454: LD_VAR 0 4
41458: NOT
41459: IFFALSE 41463
// exit ;
41461: GO 41564
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41463: LD_ADDR_VAR 0 5
41467: PUSH
41468: LD_VAR 0 2
41472: PPUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 248
41482: PPUSH
41483: CALL_OW 450
41487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41488: LD_ADDR_VAR 0 3
41492: PUSH
41493: LD_VAR 0 4
41497: PPUSH
41498: LD_INT 1
41500: PPUSH
41501: CALL_OW 275
41505: PUSH
41506: LD_VAR 0 5
41510: PUSH
41511: LD_INT 1
41513: ARRAY
41514: GREATEREQUAL
41515: PUSH
41516: LD_VAR 0 4
41520: PPUSH
41521: LD_INT 2
41523: PPUSH
41524: CALL_OW 275
41528: PUSH
41529: LD_VAR 0 5
41533: PUSH
41534: LD_INT 2
41536: ARRAY
41537: GREATEREQUAL
41538: AND
41539: PUSH
41540: LD_VAR 0 4
41544: PPUSH
41545: LD_INT 3
41547: PPUSH
41548: CALL_OW 275
41552: PUSH
41553: LD_VAR 0 5
41557: PUSH
41558: LD_INT 3
41560: ARRAY
41561: GREATEREQUAL
41562: AND
41563: ST_TO_ADDR
// end ;
41564: LD_VAR 0 3
41568: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41569: LD_INT 0
41571: PPUSH
41572: PPUSH
41573: PPUSH
41574: PPUSH
41575: PPUSH
41576: PPUSH
41577: PPUSH
41578: PPUSH
41579: PPUSH
41580: PPUSH
41581: PPUSH
// result := false ;
41582: LD_ADDR_VAR 0 8
41586: PUSH
41587: LD_INT 0
41589: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41590: LD_VAR 0 5
41594: NOT
41595: PUSH
41596: LD_VAR 0 1
41600: NOT
41601: OR
41602: PUSH
41603: LD_VAR 0 2
41607: NOT
41608: OR
41609: PUSH
41610: LD_VAR 0 3
41614: NOT
41615: OR
41616: IFFALSE 41620
// exit ;
41618: GO 42434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41620: LD_ADDR_VAR 0 14
41624: PUSH
41625: LD_VAR 0 1
41629: PPUSH
41630: LD_VAR 0 2
41634: PPUSH
41635: LD_VAR 0 3
41639: PPUSH
41640: LD_VAR 0 4
41644: PPUSH
41645: LD_VAR 0 5
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PPUSH
41654: CALL_OW 248
41658: PPUSH
41659: LD_INT 0
41661: PPUSH
41662: CALL 43671 0 6
41666: ST_TO_ADDR
// if not hexes then
41667: LD_VAR 0 14
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 42434
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41676: LD_ADDR_VAR 0 17
41680: PUSH
41681: LD_VAR 0 5
41685: PPUSH
41686: LD_INT 22
41688: PUSH
41689: LD_VAR 0 13
41693: PPUSH
41694: CALL_OW 255
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 30
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 30
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PPUSH
41735: CALL_OW 72
41739: ST_TO_ADDR
// for i = 1 to hexes do
41740: LD_ADDR_VAR 0 9
41744: PUSH
41745: DOUBLE
41746: LD_INT 1
41748: DEC
41749: ST_TO_ADDR
41750: LD_VAR 0 14
41754: PUSH
41755: FOR_TO
41756: IFFALSE 42432
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41758: LD_ADDR_VAR 0 13
41762: PUSH
41763: LD_VAR 0 14
41767: PUSH
41768: LD_VAR 0 9
41772: ARRAY
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: PPUSH
41778: LD_VAR 0 14
41782: PUSH
41783: LD_VAR 0 9
41787: ARRAY
41788: PUSH
41789: LD_INT 2
41791: ARRAY
41792: PPUSH
41793: CALL_OW 428
41797: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41798: LD_VAR 0 14
41802: PUSH
41803: LD_VAR 0 9
41807: ARRAY
41808: PUSH
41809: LD_INT 1
41811: ARRAY
41812: PPUSH
41813: LD_VAR 0 14
41817: PUSH
41818: LD_VAR 0 9
41822: ARRAY
41823: PUSH
41824: LD_INT 2
41826: ARRAY
41827: PPUSH
41828: CALL_OW 351
41832: PUSH
41833: LD_VAR 0 14
41837: PUSH
41838: LD_VAR 0 9
41842: ARRAY
41843: PUSH
41844: LD_INT 1
41846: ARRAY
41847: PPUSH
41848: LD_VAR 0 14
41852: PUSH
41853: LD_VAR 0 9
41857: ARRAY
41858: PUSH
41859: LD_INT 2
41861: ARRAY
41862: PPUSH
41863: CALL_OW 488
41867: NOT
41868: OR
41869: PUSH
41870: LD_VAR 0 13
41874: PPUSH
41875: CALL_OW 247
41879: PUSH
41880: LD_INT 3
41882: EQUAL
41883: OR
41884: IFFALSE 41890
// exit ;
41886: POP
41887: POP
41888: GO 42434
// if not tmp then
41890: LD_VAR 0 13
41894: NOT
41895: IFFALSE 41899
// continue ;
41897: GO 41755
// result := true ;
41899: LD_ADDR_VAR 0 8
41903: PUSH
41904: LD_INT 1
41906: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41907: LD_VAR 0 6
41911: PUSH
41912: LD_VAR 0 13
41916: PPUSH
41917: CALL_OW 247
41921: PUSH
41922: LD_INT 2
41924: EQUAL
41925: AND
41926: PUSH
41927: LD_VAR 0 13
41931: PPUSH
41932: CALL_OW 263
41936: PUSH
41937: LD_INT 1
41939: EQUAL
41940: AND
41941: IFFALSE 42105
// begin if IsDrivenBy ( tmp ) then
41943: LD_VAR 0 13
41947: PPUSH
41948: CALL_OW 311
41952: IFFALSE 41956
// continue ;
41954: GO 41755
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41956: LD_VAR 0 6
41960: PPUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 60
41966: PUSH
41967: EMPTY
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 55
41979: PUSH
41980: EMPTY
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: CALL_OW 72
41995: IFFALSE 42103
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41997: LD_ADDR_VAR 0 18
42001: PUSH
42002: LD_VAR 0 6
42006: PPUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 60
42012: PUSH
42013: EMPTY
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 55
42025: PUSH
42026: EMPTY
42027: LIST
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PPUSH
42037: CALL_OW 72
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: ST_TO_ADDR
// if IsInUnit ( driver ) then
42046: LD_VAR 0 18
42050: PPUSH
42051: CALL_OW 310
42055: IFFALSE 42066
// ComExit ( driver ) ;
42057: LD_VAR 0 18
42061: PPUSH
42062: CALL 66855 0 1
// AddComEnterUnit ( driver , tmp ) ;
42066: LD_VAR 0 18
42070: PPUSH
42071: LD_VAR 0 13
42075: PPUSH
42076: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42080: LD_VAR 0 18
42084: PPUSH
42085: LD_VAR 0 7
42089: PPUSH
42090: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42094: LD_VAR 0 18
42098: PPUSH
42099: CALL_OW 181
// end ; continue ;
42103: GO 41755
// end ; if not cleaners or not tmp in cleaners then
42105: LD_VAR 0 6
42109: NOT
42110: PUSH
42111: LD_VAR 0 13
42115: PUSH
42116: LD_VAR 0 6
42120: IN
42121: NOT
42122: OR
42123: IFFALSE 42430
// begin if dep then
42125: LD_VAR 0 17
42129: IFFALSE 42265
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42131: LD_ADDR_VAR 0 16
42135: PUSH
42136: LD_VAR 0 17
42140: PUSH
42141: LD_INT 1
42143: ARRAY
42144: PPUSH
42145: CALL_OW 250
42149: PPUSH
42150: LD_VAR 0 17
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: CALL_OW 254
42163: PPUSH
42164: LD_INT 5
42166: PPUSH
42167: CALL_OW 272
42171: PUSH
42172: LD_VAR 0 17
42176: PUSH
42177: LD_INT 1
42179: ARRAY
42180: PPUSH
42181: CALL_OW 251
42185: PPUSH
42186: LD_VAR 0 17
42190: PUSH
42191: LD_INT 1
42193: ARRAY
42194: PPUSH
42195: CALL_OW 254
42199: PPUSH
42200: LD_INT 5
42202: PPUSH
42203: CALL_OW 273
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42212: LD_VAR 0 16
42216: PUSH
42217: LD_INT 1
42219: ARRAY
42220: PPUSH
42221: LD_VAR 0 16
42225: PUSH
42226: LD_INT 2
42228: ARRAY
42229: PPUSH
42230: CALL_OW 488
42234: IFFALSE 42265
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42236: LD_VAR 0 13
42240: PPUSH
42241: LD_VAR 0 16
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: PPUSH
42250: LD_VAR 0 16
42254: PUSH
42255: LD_INT 2
42257: ARRAY
42258: PPUSH
42259: CALL_OW 111
// continue ;
42263: GO 41755
// end ; end ; r := GetDir ( tmp ) ;
42265: LD_ADDR_VAR 0 15
42269: PUSH
42270: LD_VAR 0 13
42274: PPUSH
42275: CALL_OW 254
42279: ST_TO_ADDR
// if r = 5 then
42280: LD_VAR 0 15
42284: PUSH
42285: LD_INT 5
42287: EQUAL
42288: IFFALSE 42298
// r := 0 ;
42290: LD_ADDR_VAR 0 15
42294: PUSH
42295: LD_INT 0
42297: ST_TO_ADDR
// for j = r to 5 do
42298: LD_ADDR_VAR 0 10
42302: PUSH
42303: DOUBLE
42304: LD_VAR 0 15
42308: DEC
42309: ST_TO_ADDR
42310: LD_INT 5
42312: PUSH
42313: FOR_TO
42314: IFFALSE 42428
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42316: LD_ADDR_VAR 0 11
42320: PUSH
42321: LD_VAR 0 13
42325: PPUSH
42326: CALL_OW 250
42330: PPUSH
42331: LD_VAR 0 10
42335: PPUSH
42336: LD_INT 2
42338: PPUSH
42339: CALL_OW 272
42343: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42344: LD_ADDR_VAR 0 12
42348: PUSH
42349: LD_VAR 0 13
42353: PPUSH
42354: CALL_OW 251
42358: PPUSH
42359: LD_VAR 0 10
42363: PPUSH
42364: LD_INT 2
42366: PPUSH
42367: CALL_OW 273
42371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42372: LD_VAR 0 11
42376: PPUSH
42377: LD_VAR 0 12
42381: PPUSH
42382: CALL_OW 488
42386: PUSH
42387: LD_VAR 0 11
42391: PPUSH
42392: LD_VAR 0 12
42396: PPUSH
42397: CALL_OW 428
42401: NOT
42402: AND
42403: IFFALSE 42426
// begin ComMoveXY ( tmp , _x , _y ) ;
42405: LD_VAR 0 13
42409: PPUSH
42410: LD_VAR 0 11
42414: PPUSH
42415: LD_VAR 0 12
42419: PPUSH
42420: CALL_OW 111
// break ;
42424: GO 42428
// end ; end ;
42426: GO 42313
42428: POP
42429: POP
// end ; end ;
42430: GO 41755
42432: POP
42433: POP
// end ;
42434: LD_VAR 0 8
42438: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42439: LD_INT 0
42441: PPUSH
// result := true ;
42442: LD_ADDR_VAR 0 3
42446: PUSH
42447: LD_INT 1
42449: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42450: LD_VAR 0 2
42454: PUSH
42455: LD_INT 24
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42469
42461: LD_INT 33
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42469
42467: GO 42494
42469: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42470: LD_ADDR_VAR 0 3
42474: PUSH
42475: LD_INT 32
42477: PPUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: CALL_OW 321
42487: PUSH
42488: LD_INT 2
42490: EQUAL
42491: ST_TO_ADDR
42492: GO 42814
42494: LD_INT 20
42496: DOUBLE
42497: EQUAL
42498: IFTRUE 42502
42500: GO 42527
42502: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42503: LD_ADDR_VAR 0 3
42507: PUSH
42508: LD_INT 6
42510: PPUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 321
42520: PUSH
42521: LD_INT 2
42523: EQUAL
42524: ST_TO_ADDR
42525: GO 42814
42527: LD_INT 22
42529: DOUBLE
42530: EQUAL
42531: IFTRUE 42541
42533: LD_INT 36
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42566
42541: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42542: LD_ADDR_VAR 0 3
42546: PUSH
42547: LD_INT 15
42549: PPUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: CALL_OW 321
42559: PUSH
42560: LD_INT 2
42562: EQUAL
42563: ST_TO_ADDR
42564: GO 42814
42566: LD_INT 30
42568: DOUBLE
42569: EQUAL
42570: IFTRUE 42574
42572: GO 42599
42574: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42575: LD_ADDR_VAR 0 3
42579: PUSH
42580: LD_INT 20
42582: PPUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 321
42592: PUSH
42593: LD_INT 2
42595: EQUAL
42596: ST_TO_ADDR
42597: GO 42814
42599: LD_INT 28
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42613
42605: LD_INT 21
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42613
42611: GO 42638
42613: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_INT 21
42621: PPUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 321
42631: PUSH
42632: LD_INT 2
42634: EQUAL
42635: ST_TO_ADDR
42636: GO 42814
42638: LD_INT 16
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42673
42646: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_EXP 44
42656: PPUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 321
42666: PUSH
42667: LD_INT 2
42669: EQUAL
42670: ST_TO_ADDR
42671: GO 42814
42673: LD_INT 19
42675: DOUBLE
42676: EQUAL
42677: IFTRUE 42687
42679: LD_INT 23
42681: DOUBLE
42682: EQUAL
42683: IFTRUE 42687
42685: GO 42714
42687: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42688: LD_ADDR_VAR 0 3
42692: PUSH
42693: LD_EXP 43
42697: PPUSH
42698: LD_VAR 0 1
42702: PPUSH
42703: CALL_OW 321
42707: PUSH
42708: LD_INT 2
42710: EQUAL
42711: ST_TO_ADDR
42712: GO 42814
42714: LD_INT 17
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42747
42722: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 39
42730: PPUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 321
42740: PUSH
42741: LD_INT 2
42743: EQUAL
42744: ST_TO_ADDR
42745: GO 42814
42747: LD_INT 18
42749: DOUBLE
42750: EQUAL
42751: IFTRUE 42755
42753: GO 42780
42755: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42756: LD_ADDR_VAR 0 3
42760: PUSH
42761: LD_INT 40
42763: PPUSH
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 321
42773: PUSH
42774: LD_INT 2
42776: EQUAL
42777: ST_TO_ADDR
42778: GO 42814
42780: LD_INT 27
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42813
42788: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 35
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 321
42806: PUSH
42807: LD_INT 2
42809: EQUAL
42810: ST_TO_ADDR
42811: GO 42814
42813: POP
// end ;
42814: LD_VAR 0 3
42818: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42819: LD_INT 0
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
// result := false ;
42832: LD_ADDR_VAR 0 6
42836: PUSH
42837: LD_INT 0
42839: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42840: LD_VAR 0 1
42844: NOT
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 266
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: IN
42866: NOT
42867: OR
42868: PUSH
42869: LD_VAR 0 2
42873: NOT
42874: OR
42875: PUSH
42876: LD_VAR 0 5
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: LD_INT 4
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: IN
42907: NOT
42908: OR
42909: PUSH
42910: LD_VAR 0 3
42914: PPUSH
42915: LD_VAR 0 4
42919: PPUSH
42920: CALL_OW 488
42924: NOT
42925: OR
42926: IFFALSE 42930
// exit ;
42928: GO 43666
// side := GetSide ( depot ) ;
42930: LD_ADDR_VAR 0 9
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 255
42944: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42945: LD_VAR 0 9
42949: PPUSH
42950: LD_VAR 0 2
42954: PPUSH
42955: CALL 42439 0 2
42959: NOT
42960: IFFALSE 42964
// exit ;
42962: GO 43666
// pom := GetBase ( depot ) ;
42964: LD_ADDR_VAR 0 10
42968: PUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 274
42978: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42979: LD_ADDR_VAR 0 11
42983: PUSH
42984: LD_VAR 0 2
42988: PPUSH
42989: LD_VAR 0 1
42993: PPUSH
42994: CALL_OW 248
42998: PPUSH
42999: CALL_OW 450
43003: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43004: LD_VAR 0 10
43008: PPUSH
43009: LD_INT 1
43011: PPUSH
43012: CALL_OW 275
43016: PUSH
43017: LD_VAR 0 11
43021: PUSH
43022: LD_INT 1
43024: ARRAY
43025: GREATEREQUAL
43026: PUSH
43027: LD_VAR 0 10
43031: PPUSH
43032: LD_INT 2
43034: PPUSH
43035: CALL_OW 275
43039: PUSH
43040: LD_VAR 0 11
43044: PUSH
43045: LD_INT 2
43047: ARRAY
43048: GREATEREQUAL
43049: AND
43050: PUSH
43051: LD_VAR 0 10
43055: PPUSH
43056: LD_INT 3
43058: PPUSH
43059: CALL_OW 275
43063: PUSH
43064: LD_VAR 0 11
43068: PUSH
43069: LD_INT 3
43071: ARRAY
43072: GREATEREQUAL
43073: AND
43074: NOT
43075: IFFALSE 43079
// exit ;
43077: GO 43666
// if GetBType ( depot ) = b_depot then
43079: LD_VAR 0 1
43083: PPUSH
43084: CALL_OW 266
43088: PUSH
43089: LD_INT 0
43091: EQUAL
43092: IFFALSE 43104
// dist := 28 else
43094: LD_ADDR_VAR 0 14
43098: PUSH
43099: LD_INT 28
43101: ST_TO_ADDR
43102: GO 43112
// dist := 36 ;
43104: LD_ADDR_VAR 0 14
43108: PUSH
43109: LD_INT 36
43111: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43112: LD_VAR 0 1
43116: PPUSH
43117: LD_VAR 0 3
43121: PPUSH
43122: LD_VAR 0 4
43126: PPUSH
43127: CALL_OW 297
43131: PUSH
43132: LD_VAR 0 14
43136: GREATER
43137: IFFALSE 43141
// exit ;
43139: GO 43666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43141: LD_ADDR_VAR 0 12
43145: PUSH
43146: LD_VAR 0 2
43150: PPUSH
43151: LD_VAR 0 3
43155: PPUSH
43156: LD_VAR 0 4
43160: PPUSH
43161: LD_VAR 0 5
43165: PPUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: CALL_OW 248
43175: PPUSH
43176: LD_INT 0
43178: PPUSH
43179: CALL 43671 0 6
43183: ST_TO_ADDR
// if not hexes then
43184: LD_VAR 0 12
43188: NOT
43189: IFFALSE 43193
// exit ;
43191: GO 43666
// hex := GetHexInfo ( x , y ) ;
43193: LD_ADDR_VAR 0 15
43197: PUSH
43198: LD_VAR 0 3
43202: PPUSH
43203: LD_VAR 0 4
43207: PPUSH
43208: CALL_OW 546
43212: ST_TO_ADDR
// if hex [ 1 ] then
43213: LD_VAR 0 15
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: IFFALSE 43225
// exit ;
43223: GO 43666
// height := hex [ 2 ] ;
43225: LD_ADDR_VAR 0 13
43229: PUSH
43230: LD_VAR 0 15
43234: PUSH
43235: LD_INT 2
43237: ARRAY
43238: ST_TO_ADDR
// for i = 1 to hexes do
43239: LD_ADDR_VAR 0 7
43243: PUSH
43244: DOUBLE
43245: LD_INT 1
43247: DEC
43248: ST_TO_ADDR
43249: LD_VAR 0 12
43253: PUSH
43254: FOR_TO
43255: IFFALSE 43585
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43257: LD_VAR 0 12
43261: PUSH
43262: LD_VAR 0 7
43266: ARRAY
43267: PUSH
43268: LD_INT 1
43270: ARRAY
43271: PPUSH
43272: LD_VAR 0 12
43276: PUSH
43277: LD_VAR 0 7
43281: ARRAY
43282: PUSH
43283: LD_INT 2
43285: ARRAY
43286: PPUSH
43287: CALL_OW 488
43291: NOT
43292: PUSH
43293: LD_VAR 0 12
43297: PUSH
43298: LD_VAR 0 7
43302: ARRAY
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PPUSH
43308: LD_VAR 0 12
43312: PUSH
43313: LD_VAR 0 7
43317: ARRAY
43318: PUSH
43319: LD_INT 2
43321: ARRAY
43322: PPUSH
43323: CALL_OW 428
43327: PUSH
43328: LD_INT 0
43330: GREATER
43331: OR
43332: PUSH
43333: LD_VAR 0 12
43337: PUSH
43338: LD_VAR 0 7
43342: ARRAY
43343: PUSH
43344: LD_INT 1
43346: ARRAY
43347: PPUSH
43348: LD_VAR 0 12
43352: PUSH
43353: LD_VAR 0 7
43357: ARRAY
43358: PUSH
43359: LD_INT 2
43361: ARRAY
43362: PPUSH
43363: CALL_OW 351
43367: OR
43368: IFFALSE 43374
// exit ;
43370: POP
43371: POP
43372: GO 43666
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43374: LD_ADDR_VAR 0 8
43378: PUSH
43379: LD_VAR 0 12
43383: PUSH
43384: LD_VAR 0 7
43388: ARRAY
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PPUSH
43394: LD_VAR 0 12
43398: PUSH
43399: LD_VAR 0 7
43403: ARRAY
43404: PUSH
43405: LD_INT 2
43407: ARRAY
43408: PPUSH
43409: CALL_OW 546
43413: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43414: LD_VAR 0 8
43418: PUSH
43419: LD_INT 1
43421: ARRAY
43422: PUSH
43423: LD_VAR 0 8
43427: PUSH
43428: LD_INT 2
43430: ARRAY
43431: PUSH
43432: LD_VAR 0 13
43436: PUSH
43437: LD_INT 2
43439: PLUS
43440: GREATER
43441: OR
43442: PUSH
43443: LD_VAR 0 8
43447: PUSH
43448: LD_INT 2
43450: ARRAY
43451: PUSH
43452: LD_VAR 0 13
43456: PUSH
43457: LD_INT 2
43459: MINUS
43460: LESS
43461: OR
43462: PUSH
43463: LD_VAR 0 8
43467: PUSH
43468: LD_INT 3
43470: ARRAY
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 8
43477: PUSH
43478: LD_INT 9
43480: PUSH
43481: LD_INT 10
43483: PUSH
43484: LD_INT 11
43486: PUSH
43487: LD_INT 12
43489: PUSH
43490: LD_INT 13
43492: PUSH
43493: LD_INT 16
43495: PUSH
43496: LD_INT 17
43498: PUSH
43499: LD_INT 18
43501: PUSH
43502: LD_INT 19
43504: PUSH
43505: LD_INT 20
43507: PUSH
43508: LD_INT 21
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: IN
43526: NOT
43527: OR
43528: PUSH
43529: LD_VAR 0 8
43533: PUSH
43534: LD_INT 5
43536: ARRAY
43537: NOT
43538: OR
43539: PUSH
43540: LD_VAR 0 8
43544: PUSH
43545: LD_INT 6
43547: ARRAY
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: LD_INT 7
43557: PUSH
43558: LD_INT 9
43560: PUSH
43561: LD_INT 10
43563: PUSH
43564: LD_INT 11
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: IN
43575: NOT
43576: OR
43577: IFFALSE 43583
// exit ;
43579: POP
43580: POP
43581: GO 43666
// end ;
43583: GO 43254
43585: POP
43586: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43587: LD_VAR 0 9
43591: PPUSH
43592: LD_VAR 0 3
43596: PPUSH
43597: LD_VAR 0 4
43601: PPUSH
43602: LD_INT 20
43604: PPUSH
43605: CALL 35611 0 4
43609: PUSH
43610: LD_INT 4
43612: ARRAY
43613: IFFALSE 43617
// exit ;
43615: GO 43666
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43617: LD_VAR 0 2
43621: PUSH
43622: LD_INT 29
43624: PUSH
43625: LD_INT 30
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: IN
43632: PUSH
43633: LD_VAR 0 3
43637: PPUSH
43638: LD_VAR 0 4
43642: PPUSH
43643: LD_VAR 0 9
43647: PPUSH
43648: CALL_OW 440
43652: NOT
43653: AND
43654: IFFALSE 43658
// exit ;
43656: GO 43666
// result := true ;
43658: LD_ADDR_VAR 0 6
43662: PUSH
43663: LD_INT 1
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 6
43670: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43671: LD_INT 0
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
43727: PPUSH
43728: PPUSH
43729: PPUSH
43730: PPUSH
// result = [ ] ;
43731: LD_ADDR_VAR 0 7
43735: PUSH
43736: EMPTY
43737: ST_TO_ADDR
// temp_list = [ ] ;
43738: LD_ADDR_VAR 0 9
43742: PUSH
43743: EMPTY
43744: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43745: LD_VAR 0 4
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 4
43764: PUSH
43765: LD_INT 5
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: IN
43776: NOT
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: IN
43793: PUSH
43794: LD_VAR 0 5
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: IN
43813: NOT
43814: AND
43815: OR
43816: IFFALSE 43820
// exit ;
43818: GO 62211
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43820: LD_VAR 0 1
43824: PUSH
43825: LD_INT 6
43827: PUSH
43828: LD_INT 7
43830: PUSH
43831: LD_INT 8
43833: PUSH
43834: LD_INT 13
43836: PUSH
43837: LD_INT 12
43839: PUSH
43840: LD_INT 15
43842: PUSH
43843: LD_INT 11
43845: PUSH
43846: LD_INT 14
43848: PUSH
43849: LD_INT 10
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: IN
43863: IFFALSE 43873
// btype = b_lab ;
43865: LD_ADDR_VAR 0 1
43869: PUSH
43870: LD_INT 6
43872: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43873: LD_VAR 0 6
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: IN
43892: NOT
43893: PUSH
43894: LD_VAR 0 1
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: LD_INT 6
43913: PUSH
43914: LD_INT 36
43916: PUSH
43917: LD_INT 4
43919: PUSH
43920: LD_INT 5
43922: PUSH
43923: LD_INT 31
43925: PUSH
43926: LD_INT 32
43928: PUSH
43929: LD_INT 33
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: IN
43945: NOT
43946: PUSH
43947: LD_VAR 0 6
43951: PUSH
43952: LD_INT 1
43954: EQUAL
43955: AND
43956: OR
43957: PUSH
43958: LD_VAR 0 1
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: IN
43973: NOT
43974: PUSH
43975: LD_VAR 0 6
43979: PUSH
43980: LD_INT 2
43982: EQUAL
43983: AND
43984: OR
43985: IFFALSE 43995
// mode = 0 ;
43987: LD_ADDR_VAR 0 6
43991: PUSH
43992: LD_INT 0
43994: ST_TO_ADDR
// case mode of 0 :
43995: LD_VAR 0 6
43999: PUSH
44000: LD_INT 0
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 55461
44008: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44009: LD_ADDR_VAR 0 11
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44202: LD_ADDR_VAR 0 12
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44398: LD_ADDR_VAR 0 13
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 3
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44597: LD_ADDR_VAR 0 14
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44793: LD_ADDR_VAR 0 15
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 3
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44986: LD_ADDR_VAR 0 16
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45179: LD_ADDR_VAR 0 17
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45409: LD_ADDR_VAR 0 18
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45639: LD_ADDR_VAR 0 19
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45869: LD_ADDR_VAR 0 20
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46099: LD_ADDR_VAR 0 21
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46329: LD_ADDR_VAR 0 22
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46559: LD_ADDR_VAR 0 23
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: LD_INT 3
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 3
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46839: LD_ADDR_VAR 0 24
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 3
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47115: LD_ADDR_VAR 0 25
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47389: LD_ADDR_VAR 0 26
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47665: LD_ADDR_VAR 0 27
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47945: LD_ADDR_VAR 0 28
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 3
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48227: LD_ADDR_VAR 0 29
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48506: LD_ADDR_VAR 0 30
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 3
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48784: LD_ADDR_VAR 0 31
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 3
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49062: LD_ADDR_VAR 0 32
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49340: LD_ADDR_VAR 0 33
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49619: LD_ADDR_VAR 0 34
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49899: LD_ADDR_VAR 0 35
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50011: LD_ADDR_VAR 0 36
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50123: LD_ADDR_VAR 0 37
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50235: LD_ADDR_VAR 0 38
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50347: LD_ADDR_VAR 0 39
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50459: LD_ADDR_VAR 0 40
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50571: LD_ADDR_VAR 0 41
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 3
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50921: LD_ADDR_VAR 0 42
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51271: LD_ADDR_VAR 0 43
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51619: LD_ADDR_VAR 0 44
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51969: LD_ADDR_VAR 0 45
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: NEG
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: NEG
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52319: LD_ADDR_VAR 0 46
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52667: LD_ADDR_VAR 0 47
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52818: LD_ADDR_VAR 0 48
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52965: LD_ADDR_VAR 0 49
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53109: LD_ADDR_VAR 0 50
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53253: LD_ADDR_VAR 0 51
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53400: LD_ADDR_VAR 0 52
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53551: LD_ADDR_VAR 0 53
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53781: LD_ADDR_VAR 0 54
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54011: LD_ADDR_VAR 0 55
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54241: LD_ADDR_VAR 0 56
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 2
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54471: LD_ADDR_VAR 0 57
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54701: LD_ADDR_VAR 0 58
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54931: LD_ADDR_VAR 0 59
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55019: LD_ADDR_VAR 0 60
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55107: LD_ADDR_VAR 0 61
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55195: LD_ADDR_VAR 0 62
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55283: LD_ADDR_VAR 0 63
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55371: LD_ADDR_VAR 0 64
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// end ; 1 :
55459: GO 61356
55461: LD_INT 1
55463: DOUBLE
55464: EQUAL
55465: IFTRUE 55469
55467: GO 58092
55469: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55470: LD_ADDR_VAR 0 11
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 3
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55514: LD_ADDR_VAR 0 12
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55555: LD_ADDR_VAR 0 13
55559: PUSH
55560: LD_INT 3
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55595: LD_ADDR_VAR 0 14
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55636: LD_ADDR_VAR 0 15
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55680: LD_ADDR_VAR 0 16
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55726: LD_ADDR_VAR 0 17
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55770: LD_ADDR_VAR 0 18
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55811: LD_ADDR_VAR 0 19
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55851: LD_ADDR_VAR 0 20
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55892: LD_ADDR_VAR 0 21
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55936: LD_ADDR_VAR 0 22
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55982: LD_ADDR_VAR 0 23
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 4
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56026: LD_ADDR_VAR 0 24
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56067: LD_ADDR_VAR 0 25
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56107: LD_ADDR_VAR 0 26
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56148: LD_ADDR_VAR 0 27
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 4
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56192: LD_ADDR_VAR 0 28
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56238: LD_ADDR_VAR 0 29
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 3
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 4
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 5
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 5
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 4
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 6
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 6
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 5
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56393: LD_ADDR_VAR 0 30
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 4
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 5
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 5
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 6
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 6
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56536: LD_ADDR_VAR 0 31
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: LD_INT 4
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 4
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: LD_INT 4
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 5
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 6
56633: PUSH
56634: LD_INT 5
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 6
56643: PUSH
56644: LD_INT 6
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 5
56653: PUSH
56654: LD_INT 6
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56675: LD_ADDR_VAR 0 32
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 5
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 5
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 6
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 6
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 5
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56818: LD_ADDR_VAR 0 33
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 4
56870: NEG
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 4
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 5
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 5
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 6
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 6
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56973: LD_ADDR_VAR 0 34
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: LD_INT 4
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: LD_INT 4
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 4
57052: NEG
57053: PUSH
57054: LD_INT 5
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: NEG
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 5
57076: NEG
57077: PUSH
57078: LD_INT 5
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 5
57088: NEG
57089: PUSH
57090: LD_INT 6
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 6
57100: NEG
57101: PUSH
57102: LD_INT 5
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 6
57112: NEG
57113: PUSH
57114: LD_INT 6
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57136: LD_ADDR_VAR 0 41
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57180: LD_ADDR_VAR 0 42
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57221: LD_ADDR_VAR 0 43
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57261: LD_ADDR_VAR 0 44
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57302: LD_ADDR_VAR 0 45
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57346: LD_ADDR_VAR 0 46
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57392: LD_ADDR_VAR 0 47
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57425: LD_ADDR_VAR 0 48
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57456: LD_ADDR_VAR 0 49
57460: PUSH
57461: LD_INT 3
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57485: LD_ADDR_VAR 0 50
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57514: LD_ADDR_VAR 0 51
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57545: LD_ADDR_VAR 0 52
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57578: LD_ADDR_VAR 0 53
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57622: LD_ADDR_VAR 0 54
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57663: LD_ADDR_VAR 0 55
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57703: LD_ADDR_VAR 0 56
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57744: LD_ADDR_VAR 0 57
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 3
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57788: LD_ADDR_VAR 0 58
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57834: LD_ADDR_VAR 0 59
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57878: LD_ADDR_VAR 0 60
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57919: LD_ADDR_VAR 0 61
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57959: LD_ADDR_VAR 0 62
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58000: LD_ADDR_VAR 0 63
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58044: LD_ADDR_VAR 0 64
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// end ; 2 :
58090: GO 61356
58092: LD_INT 2
58094: DOUBLE
58095: EQUAL
58096: IFTRUE 58100
58098: GO 61355
58100: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58101: LD_ADDR_VAR 0 29
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 5
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 5
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 4
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 4
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 5
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 4
58440: NEG
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 4
58463: NEG
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 4
58486: NEG
58487: PUSH
58488: LD_INT 4
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 4
58498: NEG
58499: PUSH
58500: LD_INT 5
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 4
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 5
58546: NEG
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 5
58558: NEG
58559: PUSH
58560: LD_INT 5
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 5
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58639: LD_ADDR_VAR 0 30
58643: PUSH
58644: LD_INT 4
58646: PUSH
58647: LD_INT 4
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 5
58666: PUSH
58667: LD_INT 4
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 5
58676: PUSH
58677: LD_INT 5
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 4
58686: PUSH
58687: LD_INT 5
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: LD_INT 5
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 4
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 4
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 4
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 4
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 5
58885: NEG
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 5
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 5
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: LD_INT 4
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 4
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59186: LD_ADDR_VAR 0 31
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 4
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 4
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 4
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 5
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 5
59460: NEG
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 4
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 5
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 5
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59736: LD_ADDR_VAR 0 32
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 4
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 3
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 5
59799: NEG
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 5
59822: NEG
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 3
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 4
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 5
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 4
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: LD_INT 3
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 5
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 4
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 4
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: LD_INT 4
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 4
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: LD_INT 4
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: LD_INT 5
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 4
60188: PUSH
60189: LD_INT 5
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 3
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 5
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 5
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60283: LD_ADDR_VAR 0 33
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 5
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 4
60338: NEG
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 5
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 4
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 5
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: LD_INT 4
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 4
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: LD_INT 5
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 5
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 5
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60821: LD_ADDR_VAR 0 34
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 5
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 3
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 4
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 5
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: LD_INT 3
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: LD_INT 5
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 4
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 5
61053: PUSH
61054: LD_INT 5
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: PUSH
61064: LD_INT 5
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: PUSH
61074: LD_INT 4
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 4
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 5
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// end ; end ;
61353: GO 61356
61355: POP
// case btype of b_depot , b_warehouse :
61356: LD_VAR 0 1
61360: PUSH
61361: LD_INT 0
61363: DOUBLE
61364: EQUAL
61365: IFTRUE 61375
61367: LD_INT 1
61369: DOUBLE
61370: EQUAL
61371: IFTRUE 61375
61373: GO 61576
61375: POP
// case nation of nation_american :
61376: LD_VAR 0 5
61380: PUSH
61381: LD_INT 1
61383: DOUBLE
61384: EQUAL
61385: IFTRUE 61389
61387: GO 61445
61389: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61390: LD_ADDR_VAR 0 9
61394: PUSH
61395: LD_VAR 0 11
61399: PUSH
61400: LD_VAR 0 12
61404: PUSH
61405: LD_VAR 0 13
61409: PUSH
61410: LD_VAR 0 14
61414: PUSH
61415: LD_VAR 0 15
61419: PUSH
61420: LD_VAR 0 16
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: LD_VAR 0 4
61437: PUSH
61438: LD_INT 1
61440: PLUS
61441: ARRAY
61442: ST_TO_ADDR
61443: GO 61574
61445: LD_INT 2
61447: DOUBLE
61448: EQUAL
61449: IFTRUE 61453
61451: GO 61509
61453: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61454: LD_ADDR_VAR 0 9
61458: PUSH
61459: LD_VAR 0 17
61463: PUSH
61464: LD_VAR 0 18
61468: PUSH
61469: LD_VAR 0 19
61473: PUSH
61474: LD_VAR 0 20
61478: PUSH
61479: LD_VAR 0 21
61483: PUSH
61484: LD_VAR 0 22
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: PUSH
61497: LD_VAR 0 4
61501: PUSH
61502: LD_INT 1
61504: PLUS
61505: ARRAY
61506: ST_TO_ADDR
61507: GO 61574
61509: LD_INT 3
61511: DOUBLE
61512: EQUAL
61513: IFTRUE 61517
61515: GO 61573
61517: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61518: LD_ADDR_VAR 0 9
61522: PUSH
61523: LD_VAR 0 23
61527: PUSH
61528: LD_VAR 0 24
61532: PUSH
61533: LD_VAR 0 25
61537: PUSH
61538: LD_VAR 0 26
61542: PUSH
61543: LD_VAR 0 27
61547: PUSH
61548: LD_VAR 0 28
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: PUSH
61561: LD_VAR 0 4
61565: PUSH
61566: LD_INT 1
61568: PLUS
61569: ARRAY
61570: ST_TO_ADDR
61571: GO 61574
61573: POP
61574: GO 62129
61576: LD_INT 2
61578: DOUBLE
61579: EQUAL
61580: IFTRUE 61590
61582: LD_INT 3
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61590
61588: GO 61646
61590: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61591: LD_ADDR_VAR 0 9
61595: PUSH
61596: LD_VAR 0 29
61600: PUSH
61601: LD_VAR 0 30
61605: PUSH
61606: LD_VAR 0 31
61610: PUSH
61611: LD_VAR 0 32
61615: PUSH
61616: LD_VAR 0 33
61620: PUSH
61621: LD_VAR 0 34
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: PUSH
61634: LD_VAR 0 4
61638: PUSH
61639: LD_INT 1
61641: PLUS
61642: ARRAY
61643: ST_TO_ADDR
61644: GO 62129
61646: LD_INT 16
61648: DOUBLE
61649: EQUAL
61650: IFTRUE 61708
61652: LD_INT 17
61654: DOUBLE
61655: EQUAL
61656: IFTRUE 61708
61658: LD_INT 18
61660: DOUBLE
61661: EQUAL
61662: IFTRUE 61708
61664: LD_INT 19
61666: DOUBLE
61667: EQUAL
61668: IFTRUE 61708
61670: LD_INT 22
61672: DOUBLE
61673: EQUAL
61674: IFTRUE 61708
61676: LD_INT 20
61678: DOUBLE
61679: EQUAL
61680: IFTRUE 61708
61682: LD_INT 21
61684: DOUBLE
61685: EQUAL
61686: IFTRUE 61708
61688: LD_INT 23
61690: DOUBLE
61691: EQUAL
61692: IFTRUE 61708
61694: LD_INT 24
61696: DOUBLE
61697: EQUAL
61698: IFTRUE 61708
61700: LD_INT 25
61702: DOUBLE
61703: EQUAL
61704: IFTRUE 61708
61706: GO 61764
61708: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61709: LD_ADDR_VAR 0 9
61713: PUSH
61714: LD_VAR 0 35
61718: PUSH
61719: LD_VAR 0 36
61723: PUSH
61724: LD_VAR 0 37
61728: PUSH
61729: LD_VAR 0 38
61733: PUSH
61734: LD_VAR 0 39
61738: PUSH
61739: LD_VAR 0 40
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: PUSH
61752: LD_VAR 0 4
61756: PUSH
61757: LD_INT 1
61759: PLUS
61760: ARRAY
61761: ST_TO_ADDR
61762: GO 62129
61764: LD_INT 6
61766: DOUBLE
61767: EQUAL
61768: IFTRUE 61820
61770: LD_INT 7
61772: DOUBLE
61773: EQUAL
61774: IFTRUE 61820
61776: LD_INT 8
61778: DOUBLE
61779: EQUAL
61780: IFTRUE 61820
61782: LD_INT 13
61784: DOUBLE
61785: EQUAL
61786: IFTRUE 61820
61788: LD_INT 12
61790: DOUBLE
61791: EQUAL
61792: IFTRUE 61820
61794: LD_INT 15
61796: DOUBLE
61797: EQUAL
61798: IFTRUE 61820
61800: LD_INT 11
61802: DOUBLE
61803: EQUAL
61804: IFTRUE 61820
61806: LD_INT 14
61808: DOUBLE
61809: EQUAL
61810: IFTRUE 61820
61812: LD_INT 10
61814: DOUBLE
61815: EQUAL
61816: IFTRUE 61820
61818: GO 61876
61820: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61821: LD_ADDR_VAR 0 9
61825: PUSH
61826: LD_VAR 0 41
61830: PUSH
61831: LD_VAR 0 42
61835: PUSH
61836: LD_VAR 0 43
61840: PUSH
61841: LD_VAR 0 44
61845: PUSH
61846: LD_VAR 0 45
61850: PUSH
61851: LD_VAR 0 46
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: PUSH
61864: LD_VAR 0 4
61868: PUSH
61869: LD_INT 1
61871: PLUS
61872: ARRAY
61873: ST_TO_ADDR
61874: GO 62129
61876: LD_INT 36
61878: DOUBLE
61879: EQUAL
61880: IFTRUE 61884
61882: GO 61940
61884: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61885: LD_ADDR_VAR 0 9
61889: PUSH
61890: LD_VAR 0 47
61894: PUSH
61895: LD_VAR 0 48
61899: PUSH
61900: LD_VAR 0 49
61904: PUSH
61905: LD_VAR 0 50
61909: PUSH
61910: LD_VAR 0 51
61914: PUSH
61915: LD_VAR 0 52
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: PUSH
61928: LD_VAR 0 4
61932: PUSH
61933: LD_INT 1
61935: PLUS
61936: ARRAY
61937: ST_TO_ADDR
61938: GO 62129
61940: LD_INT 4
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61966
61946: LD_INT 5
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61966
61952: LD_INT 34
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61966
61958: LD_INT 37
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61966
61964: GO 62022
61966: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61967: LD_ADDR_VAR 0 9
61971: PUSH
61972: LD_VAR 0 53
61976: PUSH
61977: LD_VAR 0 54
61981: PUSH
61982: LD_VAR 0 55
61986: PUSH
61987: LD_VAR 0 56
61991: PUSH
61992: LD_VAR 0 57
61996: PUSH
61997: LD_VAR 0 58
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: PUSH
62010: LD_VAR 0 4
62014: PUSH
62015: LD_INT 1
62017: PLUS
62018: ARRAY
62019: ST_TO_ADDR
62020: GO 62129
62022: LD_INT 31
62024: DOUBLE
62025: EQUAL
62026: IFTRUE 62072
62028: LD_INT 32
62030: DOUBLE
62031: EQUAL
62032: IFTRUE 62072
62034: LD_INT 33
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62072
62040: LD_INT 27
62042: DOUBLE
62043: EQUAL
62044: IFTRUE 62072
62046: LD_INT 26
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62072
62052: LD_INT 28
62054: DOUBLE
62055: EQUAL
62056: IFTRUE 62072
62058: LD_INT 29
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62072
62064: LD_INT 30
62066: DOUBLE
62067: EQUAL
62068: IFTRUE 62072
62070: GO 62128
62072: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62073: LD_ADDR_VAR 0 9
62077: PUSH
62078: LD_VAR 0 59
62082: PUSH
62083: LD_VAR 0 60
62087: PUSH
62088: LD_VAR 0 61
62092: PUSH
62093: LD_VAR 0 62
62097: PUSH
62098: LD_VAR 0 63
62102: PUSH
62103: LD_VAR 0 64
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 4
62120: PUSH
62121: LD_INT 1
62123: PLUS
62124: ARRAY
62125: ST_TO_ADDR
62126: GO 62129
62128: POP
// temp_list2 = [ ] ;
62129: LD_ADDR_VAR 0 10
62133: PUSH
62134: EMPTY
62135: ST_TO_ADDR
// for i in temp_list do
62136: LD_ADDR_VAR 0 8
62140: PUSH
62141: LD_VAR 0 9
62145: PUSH
62146: FOR_IN
62147: IFFALSE 62199
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62149: LD_ADDR_VAR 0 10
62153: PUSH
62154: LD_VAR 0 10
62158: PUSH
62159: LD_VAR 0 8
62163: PUSH
62164: LD_INT 1
62166: ARRAY
62167: PUSH
62168: LD_VAR 0 2
62172: PLUS
62173: PUSH
62174: LD_VAR 0 8
62178: PUSH
62179: LD_INT 2
62181: ARRAY
62182: PUSH
62183: LD_VAR 0 3
62187: PLUS
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: ADD
62196: ST_TO_ADDR
62197: GO 62146
62199: POP
62200: POP
// result = temp_list2 ;
62201: LD_ADDR_VAR 0 7
62205: PUSH
62206: LD_VAR 0 10
62210: ST_TO_ADDR
// end ;
62211: LD_VAR 0 7
62215: RET
// export function EnemyInRange ( unit , dist ) ; begin
62216: LD_INT 0
62218: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62219: LD_ADDR_VAR 0 3
62223: PUSH
62224: LD_VAR 0 1
62228: PPUSH
62229: CALL_OW 255
62233: PPUSH
62234: LD_VAR 0 1
62238: PPUSH
62239: CALL_OW 250
62243: PPUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: CALL_OW 251
62253: PPUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: CALL 35611 0 4
62263: PUSH
62264: LD_INT 4
62266: ARRAY
62267: ST_TO_ADDR
// end ;
62268: LD_VAR 0 3
62272: RET
// export function PlayerSeeMe ( unit ) ; begin
62273: LD_INT 0
62275: PPUSH
// result := See ( your_side , unit ) ;
62276: LD_ADDR_VAR 0 2
62280: PUSH
62281: LD_OWVAR 2
62285: PPUSH
62286: LD_VAR 0 1
62290: PPUSH
62291: CALL_OW 292
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 2
62300: RET
// export function ReverseDir ( unit ) ; begin
62301: LD_INT 0
62303: PPUSH
// if not unit then
62304: LD_VAR 0 1
62308: NOT
62309: IFFALSE 62313
// exit ;
62311: GO 62336
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62313: LD_ADDR_VAR 0 2
62317: PUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 254
62327: PUSH
62328: LD_INT 3
62330: PLUS
62331: PUSH
62332: LD_INT 6
62334: MOD
62335: ST_TO_ADDR
// end ;
62336: LD_VAR 0 2
62340: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62341: LD_INT 0
62343: PPUSH
62344: PPUSH
62345: PPUSH
62346: PPUSH
62347: PPUSH
// if not hexes then
62348: LD_VAR 0 2
62352: NOT
62353: IFFALSE 62357
// exit ;
62355: GO 62505
// dist := 9999 ;
62357: LD_ADDR_VAR 0 5
62361: PUSH
62362: LD_INT 9999
62364: ST_TO_ADDR
// for i = 1 to hexes do
62365: LD_ADDR_VAR 0 4
62369: PUSH
62370: DOUBLE
62371: LD_INT 1
62373: DEC
62374: ST_TO_ADDR
62375: LD_VAR 0 2
62379: PUSH
62380: FOR_TO
62381: IFFALSE 62493
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62383: LD_VAR 0 1
62387: PPUSH
62388: LD_VAR 0 2
62392: PUSH
62393: LD_VAR 0 4
62397: ARRAY
62398: PUSH
62399: LD_INT 1
62401: ARRAY
62402: PPUSH
62403: LD_VAR 0 2
62407: PUSH
62408: LD_VAR 0 4
62412: ARRAY
62413: PUSH
62414: LD_INT 2
62416: ARRAY
62417: PPUSH
62418: CALL_OW 297
62422: PUSH
62423: LD_VAR 0 5
62427: LESS
62428: IFFALSE 62491
// begin hex := hexes [ i ] ;
62430: LD_ADDR_VAR 0 7
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: LD_VAR 0 4
62444: ARRAY
62445: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62446: LD_ADDR_VAR 0 5
62450: PUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: LD_VAR 0 2
62460: PUSH
62461: LD_VAR 0 4
62465: ARRAY
62466: PUSH
62467: LD_INT 1
62469: ARRAY
62470: PPUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_VAR 0 4
62480: ARRAY
62481: PUSH
62482: LD_INT 2
62484: ARRAY
62485: PPUSH
62486: CALL_OW 297
62490: ST_TO_ADDR
// end ; end ;
62491: GO 62380
62493: POP
62494: POP
// result := hex ;
62495: LD_ADDR_VAR 0 3
62499: PUSH
62500: LD_VAR 0 7
62504: ST_TO_ADDR
// end ;
62505: LD_VAR 0 3
62509: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62510: LD_INT 0
62512: PPUSH
62513: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62514: LD_VAR 0 1
62518: NOT
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: LD_INT 21
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 23
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PPUSH
62549: CALL_OW 69
62553: IN
62554: NOT
62555: OR
62556: IFFALSE 62560
// exit ;
62558: GO 62607
// for i = 1 to 3 do
62560: LD_ADDR_VAR 0 3
62564: PUSH
62565: DOUBLE
62566: LD_INT 1
62568: DEC
62569: ST_TO_ADDR
62570: LD_INT 3
62572: PUSH
62573: FOR_TO
62574: IFFALSE 62605
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 250
62585: PPUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL_OW 251
62595: PPUSH
62596: LD_INT 1
62598: PPUSH
62599: CALL_OW 453
62603: GO 62573
62605: POP
62606: POP
// end ;
62607: LD_VAR 0 2
62611: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62612: LD_INT 0
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
62618: PPUSH
62619: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62620: LD_VAR 0 1
62624: NOT
62625: PUSH
62626: LD_VAR 0 2
62630: NOT
62631: OR
62632: PUSH
62633: LD_VAR 0 1
62637: PPUSH
62638: CALL_OW 314
62642: OR
62643: IFFALSE 62647
// exit ;
62645: GO 63088
// x := GetX ( enemy_unit ) ;
62647: LD_ADDR_VAR 0 7
62651: PUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: CALL_OW 250
62661: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62662: LD_ADDR_VAR 0 8
62666: PUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: CALL_OW 251
62676: ST_TO_ADDR
// if not x or not y then
62677: LD_VAR 0 7
62681: NOT
62682: PUSH
62683: LD_VAR 0 8
62687: NOT
62688: OR
62689: IFFALSE 62693
// exit ;
62691: GO 63088
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62693: LD_ADDR_VAR 0 6
62697: PUSH
62698: LD_VAR 0 7
62702: PPUSH
62703: LD_INT 0
62705: PPUSH
62706: LD_INT 4
62708: PPUSH
62709: CALL_OW 272
62713: PUSH
62714: LD_VAR 0 8
62718: PPUSH
62719: LD_INT 0
62721: PPUSH
62722: LD_INT 4
62724: PPUSH
62725: CALL_OW 273
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 7
62738: PPUSH
62739: LD_INT 1
62741: PPUSH
62742: LD_INT 4
62744: PPUSH
62745: CALL_OW 272
62749: PUSH
62750: LD_VAR 0 8
62754: PPUSH
62755: LD_INT 1
62757: PPUSH
62758: LD_INT 4
62760: PPUSH
62761: CALL_OW 273
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_VAR 0 7
62774: PPUSH
62775: LD_INT 2
62777: PPUSH
62778: LD_INT 4
62780: PPUSH
62781: CALL_OW 272
62785: PUSH
62786: LD_VAR 0 8
62790: PPUSH
62791: LD_INT 2
62793: PPUSH
62794: LD_INT 4
62796: PPUSH
62797: CALL_OW 273
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_VAR 0 7
62810: PPUSH
62811: LD_INT 3
62813: PPUSH
62814: LD_INT 4
62816: PPUSH
62817: CALL_OW 272
62821: PUSH
62822: LD_VAR 0 8
62826: PPUSH
62827: LD_INT 3
62829: PPUSH
62830: LD_INT 4
62832: PPUSH
62833: CALL_OW 273
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_VAR 0 7
62846: PPUSH
62847: LD_INT 4
62849: PPUSH
62850: LD_INT 4
62852: PPUSH
62853: CALL_OW 272
62857: PUSH
62858: LD_VAR 0 8
62862: PPUSH
62863: LD_INT 4
62865: PPUSH
62866: LD_INT 4
62868: PPUSH
62869: CALL_OW 273
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_VAR 0 7
62882: PPUSH
62883: LD_INT 5
62885: PPUSH
62886: LD_INT 4
62888: PPUSH
62889: CALL_OW 272
62893: PUSH
62894: LD_VAR 0 8
62898: PPUSH
62899: LD_INT 5
62901: PPUSH
62902: LD_INT 4
62904: PPUSH
62905: CALL_OW 273
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: ST_TO_ADDR
// for i = tmp downto 1 do
62922: LD_ADDR_VAR 0 4
62926: PUSH
62927: DOUBLE
62928: LD_VAR 0 6
62932: INC
62933: ST_TO_ADDR
62934: LD_INT 1
62936: PUSH
62937: FOR_DOWNTO
62938: IFFALSE 63039
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62940: LD_VAR 0 6
62944: PUSH
62945: LD_VAR 0 4
62949: ARRAY
62950: PUSH
62951: LD_INT 1
62953: ARRAY
62954: PPUSH
62955: LD_VAR 0 6
62959: PUSH
62960: LD_VAR 0 4
62964: ARRAY
62965: PUSH
62966: LD_INT 2
62968: ARRAY
62969: PPUSH
62970: CALL_OW 488
62974: NOT
62975: PUSH
62976: LD_VAR 0 6
62980: PUSH
62981: LD_VAR 0 4
62985: ARRAY
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PPUSH
62991: LD_VAR 0 6
62995: PUSH
62996: LD_VAR 0 4
63000: ARRAY
63001: PUSH
63002: LD_INT 2
63004: ARRAY
63005: PPUSH
63006: CALL_OW 428
63010: PUSH
63011: LD_INT 0
63013: NONEQUAL
63014: OR
63015: IFFALSE 63037
// tmp := Delete ( tmp , i ) ;
63017: LD_ADDR_VAR 0 6
63021: PUSH
63022: LD_VAR 0 6
63026: PPUSH
63027: LD_VAR 0 4
63031: PPUSH
63032: CALL_OW 3
63036: ST_TO_ADDR
63037: GO 62937
63039: POP
63040: POP
// j := GetClosestHex ( unit , tmp ) ;
63041: LD_ADDR_VAR 0 5
63045: PUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: LD_VAR 0 6
63055: PPUSH
63056: CALL 62341 0 2
63060: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63061: LD_VAR 0 1
63065: PPUSH
63066: LD_VAR 0 5
63070: PUSH
63071: LD_INT 1
63073: ARRAY
63074: PPUSH
63075: LD_VAR 0 5
63079: PUSH
63080: LD_INT 2
63082: ARRAY
63083: PPUSH
63084: CALL_OW 111
// end ;
63088: LD_VAR 0 3
63092: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63093: LD_INT 0
63095: PPUSH
63096: PPUSH
63097: PPUSH
// uc_side = 0 ;
63098: LD_ADDR_OWVAR 20
63102: PUSH
63103: LD_INT 0
63105: ST_TO_ADDR
// uc_nation = 0 ;
63106: LD_ADDR_OWVAR 21
63110: PUSH
63111: LD_INT 0
63113: ST_TO_ADDR
// InitHc_All ( ) ;
63114: CALL_OW 584
// InitVc ;
63118: CALL_OW 20
// if mastodonts then
63122: LD_VAR 0 6
63126: IFFALSE 63193
// for i = 1 to mastodonts do
63128: LD_ADDR_VAR 0 11
63132: PUSH
63133: DOUBLE
63134: LD_INT 1
63136: DEC
63137: ST_TO_ADDR
63138: LD_VAR 0 6
63142: PUSH
63143: FOR_TO
63144: IFFALSE 63191
// begin vc_chassis := 31 ;
63146: LD_ADDR_OWVAR 37
63150: PUSH
63151: LD_INT 31
63153: ST_TO_ADDR
// vc_control := control_rider ;
63154: LD_ADDR_OWVAR 38
63158: PUSH
63159: LD_INT 4
63161: ST_TO_ADDR
// animal := CreateVehicle ;
63162: LD_ADDR_VAR 0 12
63166: PUSH
63167: CALL_OW 45
63171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63172: LD_VAR 0 12
63176: PPUSH
63177: LD_VAR 0 8
63181: PPUSH
63182: LD_INT 0
63184: PPUSH
63185: CALL 65381 0 3
// end ;
63189: GO 63143
63191: POP
63192: POP
// if horses then
63193: LD_VAR 0 5
63197: IFFALSE 63264
// for i = 1 to horses do
63199: LD_ADDR_VAR 0 11
63203: PUSH
63204: DOUBLE
63205: LD_INT 1
63207: DEC
63208: ST_TO_ADDR
63209: LD_VAR 0 5
63213: PUSH
63214: FOR_TO
63215: IFFALSE 63262
// begin hc_class := 21 ;
63217: LD_ADDR_OWVAR 28
63221: PUSH
63222: LD_INT 21
63224: ST_TO_ADDR
// hc_gallery :=  ;
63225: LD_ADDR_OWVAR 33
63229: PUSH
63230: LD_STRING 
63232: ST_TO_ADDR
// animal := CreateHuman ;
63233: LD_ADDR_VAR 0 12
63237: PUSH
63238: CALL_OW 44
63242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63243: LD_VAR 0 12
63247: PPUSH
63248: LD_VAR 0 8
63252: PPUSH
63253: LD_INT 0
63255: PPUSH
63256: CALL 65381 0 3
// end ;
63260: GO 63214
63262: POP
63263: POP
// if birds then
63264: LD_VAR 0 1
63268: IFFALSE 63335
// for i = 1 to birds do
63270: LD_ADDR_VAR 0 11
63274: PUSH
63275: DOUBLE
63276: LD_INT 1
63278: DEC
63279: ST_TO_ADDR
63280: LD_VAR 0 1
63284: PUSH
63285: FOR_TO
63286: IFFALSE 63333
// begin hc_class = 18 ;
63288: LD_ADDR_OWVAR 28
63292: PUSH
63293: LD_INT 18
63295: ST_TO_ADDR
// hc_gallery =  ;
63296: LD_ADDR_OWVAR 33
63300: PUSH
63301: LD_STRING 
63303: ST_TO_ADDR
// animal := CreateHuman ;
63304: LD_ADDR_VAR 0 12
63308: PUSH
63309: CALL_OW 44
63313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63314: LD_VAR 0 12
63318: PPUSH
63319: LD_VAR 0 8
63323: PPUSH
63324: LD_INT 0
63326: PPUSH
63327: CALL 65381 0 3
// end ;
63331: GO 63285
63333: POP
63334: POP
// if tigers then
63335: LD_VAR 0 2
63339: IFFALSE 63423
// for i = 1 to tigers do
63341: LD_ADDR_VAR 0 11
63345: PUSH
63346: DOUBLE
63347: LD_INT 1
63349: DEC
63350: ST_TO_ADDR
63351: LD_VAR 0 2
63355: PUSH
63356: FOR_TO
63357: IFFALSE 63421
// begin hc_class = class_tiger ;
63359: LD_ADDR_OWVAR 28
63363: PUSH
63364: LD_INT 14
63366: ST_TO_ADDR
// hc_gallery =  ;
63367: LD_ADDR_OWVAR 33
63371: PUSH
63372: LD_STRING 
63374: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63375: LD_ADDR_OWVAR 35
63379: PUSH
63380: LD_INT 7
63382: NEG
63383: PPUSH
63384: LD_INT 7
63386: PPUSH
63387: CALL_OW 12
63391: ST_TO_ADDR
// animal := CreateHuman ;
63392: LD_ADDR_VAR 0 12
63396: PUSH
63397: CALL_OW 44
63401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63402: LD_VAR 0 12
63406: PPUSH
63407: LD_VAR 0 8
63411: PPUSH
63412: LD_INT 0
63414: PPUSH
63415: CALL 65381 0 3
// end ;
63419: GO 63356
63421: POP
63422: POP
// if apemans then
63423: LD_VAR 0 3
63427: IFFALSE 63550
// for i = 1 to apemans do
63429: LD_ADDR_VAR 0 11
63433: PUSH
63434: DOUBLE
63435: LD_INT 1
63437: DEC
63438: ST_TO_ADDR
63439: LD_VAR 0 3
63443: PUSH
63444: FOR_TO
63445: IFFALSE 63548
// begin hc_class = class_apeman ;
63447: LD_ADDR_OWVAR 28
63451: PUSH
63452: LD_INT 12
63454: ST_TO_ADDR
// hc_gallery =  ;
63455: LD_ADDR_OWVAR 33
63459: PUSH
63460: LD_STRING 
63462: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63463: LD_ADDR_OWVAR 35
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PPUSH
63472: LD_INT 2
63474: PPUSH
63475: CALL_OW 12
63479: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63480: LD_ADDR_OWVAR 31
63484: PUSH
63485: LD_INT 1
63487: PPUSH
63488: LD_INT 3
63490: PPUSH
63491: CALL_OW 12
63495: PUSH
63496: LD_INT 1
63498: PPUSH
63499: LD_INT 3
63501: PPUSH
63502: CALL_OW 12
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: ST_TO_ADDR
// animal := CreateHuman ;
63519: LD_ADDR_VAR 0 12
63523: PUSH
63524: CALL_OW 44
63528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63529: LD_VAR 0 12
63533: PPUSH
63534: LD_VAR 0 8
63538: PPUSH
63539: LD_INT 0
63541: PPUSH
63542: CALL 65381 0 3
// end ;
63546: GO 63444
63548: POP
63549: POP
// if enchidnas then
63550: LD_VAR 0 4
63554: IFFALSE 63621
// for i = 1 to enchidnas do
63556: LD_ADDR_VAR 0 11
63560: PUSH
63561: DOUBLE
63562: LD_INT 1
63564: DEC
63565: ST_TO_ADDR
63566: LD_VAR 0 4
63570: PUSH
63571: FOR_TO
63572: IFFALSE 63619
// begin hc_class = 13 ;
63574: LD_ADDR_OWVAR 28
63578: PUSH
63579: LD_INT 13
63581: ST_TO_ADDR
// hc_gallery =  ;
63582: LD_ADDR_OWVAR 33
63586: PUSH
63587: LD_STRING 
63589: ST_TO_ADDR
// animal := CreateHuman ;
63590: LD_ADDR_VAR 0 12
63594: PUSH
63595: CALL_OW 44
63599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63600: LD_VAR 0 12
63604: PPUSH
63605: LD_VAR 0 8
63609: PPUSH
63610: LD_INT 0
63612: PPUSH
63613: CALL 65381 0 3
// end ;
63617: GO 63571
63619: POP
63620: POP
// if fishes then
63621: LD_VAR 0 7
63625: IFFALSE 63692
// for i = 1 to fishes do
63627: LD_ADDR_VAR 0 11
63631: PUSH
63632: DOUBLE
63633: LD_INT 1
63635: DEC
63636: ST_TO_ADDR
63637: LD_VAR 0 7
63641: PUSH
63642: FOR_TO
63643: IFFALSE 63690
// begin hc_class = 20 ;
63645: LD_ADDR_OWVAR 28
63649: PUSH
63650: LD_INT 20
63652: ST_TO_ADDR
// hc_gallery =  ;
63653: LD_ADDR_OWVAR 33
63657: PUSH
63658: LD_STRING 
63660: ST_TO_ADDR
// animal := CreateHuman ;
63661: LD_ADDR_VAR 0 12
63665: PUSH
63666: CALL_OW 44
63670: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63671: LD_VAR 0 12
63675: PPUSH
63676: LD_VAR 0 9
63680: PPUSH
63681: LD_INT 0
63683: PPUSH
63684: CALL 65381 0 3
// end ;
63688: GO 63642
63690: POP
63691: POP
// end ;
63692: LD_VAR 0 10
63696: RET
// export function WantHeal ( sci , unit ) ; begin
63697: LD_INT 0
63699: PPUSH
// if GetTaskList ( sci ) > 0 then
63700: LD_VAR 0 1
63704: PPUSH
63705: CALL_OW 437
63709: PUSH
63710: LD_INT 0
63712: GREATER
63713: IFFALSE 63783
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63715: LD_VAR 0 1
63719: PPUSH
63720: CALL_OW 437
63724: PUSH
63725: LD_INT 1
63727: ARRAY
63728: PUSH
63729: LD_INT 1
63731: ARRAY
63732: PUSH
63733: LD_STRING l
63735: EQUAL
63736: PUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 437
63746: PUSH
63747: LD_INT 1
63749: ARRAY
63750: PUSH
63751: LD_INT 4
63753: ARRAY
63754: PUSH
63755: LD_VAR 0 2
63759: EQUAL
63760: AND
63761: IFFALSE 63773
// result := true else
63763: LD_ADDR_VAR 0 3
63767: PUSH
63768: LD_INT 1
63770: ST_TO_ADDR
63771: GO 63781
// result := false ;
63773: LD_ADDR_VAR 0 3
63777: PUSH
63778: LD_INT 0
63780: ST_TO_ADDR
// end else
63781: GO 63791
// result := false ;
63783: LD_ADDR_VAR 0 3
63787: PUSH
63788: LD_INT 0
63790: ST_TO_ADDR
// end ;
63791: LD_VAR 0 3
63795: RET
// export function HealTarget ( sci ) ; begin
63796: LD_INT 0
63798: PPUSH
// if not sci then
63799: LD_VAR 0 1
63803: NOT
63804: IFFALSE 63808
// exit ;
63806: GO 63873
// result := 0 ;
63808: LD_ADDR_VAR 0 2
63812: PUSH
63813: LD_INT 0
63815: ST_TO_ADDR
// if GetTaskList ( sci ) then
63816: LD_VAR 0 1
63820: PPUSH
63821: CALL_OW 437
63825: IFFALSE 63873
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63827: LD_VAR 0 1
63831: PPUSH
63832: CALL_OW 437
63836: PUSH
63837: LD_INT 1
63839: ARRAY
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PUSH
63845: LD_STRING l
63847: EQUAL
63848: IFFALSE 63873
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63850: LD_ADDR_VAR 0 2
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 437
63864: PUSH
63865: LD_INT 1
63867: ARRAY
63868: PUSH
63869: LD_INT 4
63871: ARRAY
63872: ST_TO_ADDR
// end ;
63873: LD_VAR 0 2
63877: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63878: LD_INT 0
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
// if not base_units then
63884: LD_VAR 0 1
63888: NOT
63889: IFFALSE 63893
// exit ;
63891: GO 63980
// result := false ;
63893: LD_ADDR_VAR 0 2
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63901: LD_ADDR_VAR 0 5
63905: PUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: LD_INT 21
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PPUSH
63921: CALL_OW 72
63925: ST_TO_ADDR
// if not tmp then
63926: LD_VAR 0 5
63930: NOT
63931: IFFALSE 63935
// exit ;
63933: GO 63980
// for i in tmp do
63935: LD_ADDR_VAR 0 3
63939: PUSH
63940: LD_VAR 0 5
63944: PUSH
63945: FOR_IN
63946: IFFALSE 63978
// begin result := EnemyInRange ( i , 22 ) ;
63948: LD_ADDR_VAR 0 2
63952: PUSH
63953: LD_VAR 0 3
63957: PPUSH
63958: LD_INT 22
63960: PPUSH
63961: CALL 62216 0 2
63965: ST_TO_ADDR
// if result then
63966: LD_VAR 0 2
63970: IFFALSE 63976
// exit ;
63972: POP
63973: POP
63974: GO 63980
// end ;
63976: GO 63945
63978: POP
63979: POP
// end ;
63980: LD_VAR 0 2
63984: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63985: LD_INT 0
63987: PPUSH
63988: PPUSH
// if not units then
63989: LD_VAR 0 1
63993: NOT
63994: IFFALSE 63998
// exit ;
63996: GO 64068
// result := [ ] ;
63998: LD_ADDR_VAR 0 3
64002: PUSH
64003: EMPTY
64004: ST_TO_ADDR
// for i in units do
64005: LD_ADDR_VAR 0 4
64009: PUSH
64010: LD_VAR 0 1
64014: PUSH
64015: FOR_IN
64016: IFFALSE 64066
// if GetTag ( i ) = tag then
64018: LD_VAR 0 4
64022: PPUSH
64023: CALL_OW 110
64027: PUSH
64028: LD_VAR 0 2
64032: EQUAL
64033: IFFALSE 64064
// result := Insert ( result , result + 1 , i ) ;
64035: LD_ADDR_VAR 0 3
64039: PUSH
64040: LD_VAR 0 3
64044: PPUSH
64045: LD_VAR 0 3
64049: PUSH
64050: LD_INT 1
64052: PLUS
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: CALL_OW 2
64063: ST_TO_ADDR
64064: GO 64015
64066: POP
64067: POP
// end ;
64068: LD_VAR 0 3
64072: RET
// export function IsDriver ( un ) ; begin
64073: LD_INT 0
64075: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64076: LD_ADDR_VAR 0 2
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 55
64088: PUSH
64089: EMPTY
64090: LIST
64091: PPUSH
64092: CALL_OW 69
64096: IN
64097: ST_TO_ADDR
// end ;
64098: LD_VAR 0 2
64102: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
// list := [ ] ;
64107: LD_ADDR_VAR 0 5
64111: PUSH
64112: EMPTY
64113: ST_TO_ADDR
// case d of 0 :
64114: LD_VAR 0 3
64118: PUSH
64119: LD_INT 0
64121: DOUBLE
64122: EQUAL
64123: IFTRUE 64127
64125: GO 64260
64127: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64128: LD_ADDR_VAR 0 5
64132: PUSH
64133: LD_VAR 0 1
64137: PUSH
64138: LD_INT 4
64140: MINUS
64141: PUSH
64142: LD_VAR 0 2
64146: PUSH
64147: LD_INT 4
64149: MINUS
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: PUSH
64159: LD_VAR 0 1
64163: PUSH
64164: LD_INT 3
64166: MINUS
64167: PUSH
64168: LD_VAR 0 2
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: PUSH
64181: LD_VAR 0 1
64185: PUSH
64186: LD_INT 4
64188: PLUS
64189: PUSH
64190: LD_VAR 0 2
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: PUSH
64203: LD_VAR 0 1
64207: PUSH
64208: LD_INT 3
64210: PLUS
64211: PUSH
64212: LD_VAR 0 2
64216: PUSH
64217: LD_INT 3
64219: PLUS
64220: PUSH
64221: LD_INT 5
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: PUSH
64229: LD_VAR 0 1
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 4
64241: PLUS
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: ST_TO_ADDR
// end ; 1 :
64258: GO 64958
64260: LD_INT 1
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64268
64266: GO 64401
64268: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64269: LD_ADDR_VAR 0 5
64273: PUSH
64274: LD_VAR 0 1
64278: PUSH
64279: LD_VAR 0 2
64283: PUSH
64284: LD_INT 4
64286: MINUS
64287: PUSH
64288: LD_INT 3
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: LIST
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: LD_INT 3
64303: MINUS
64304: PUSH
64305: LD_VAR 0 2
64309: PUSH
64310: LD_INT 3
64312: MINUS
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: LIST
64321: PUSH
64322: LD_VAR 0 1
64326: PUSH
64327: LD_INT 4
64329: MINUS
64330: PUSH
64331: LD_VAR 0 2
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: PUSH
64344: LD_VAR 0 1
64348: PUSH
64349: LD_VAR 0 2
64353: PUSH
64354: LD_INT 3
64356: PLUS
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: PUSH
64366: LD_VAR 0 1
64370: PUSH
64371: LD_INT 4
64373: PLUS
64374: PUSH
64375: LD_VAR 0 2
64379: PUSH
64380: LD_INT 4
64382: PLUS
64383: PUSH
64384: LD_INT 5
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: ST_TO_ADDR
// end ; 2 :
64399: GO 64958
64401: LD_INT 2
64403: DOUBLE
64404: EQUAL
64405: IFTRUE 64409
64407: GO 64538
64409: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64410: LD_ADDR_VAR 0 5
64414: PUSH
64415: LD_VAR 0 1
64419: PUSH
64420: LD_VAR 0 2
64424: PUSH
64425: LD_INT 3
64427: MINUS
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: PUSH
64437: LD_VAR 0 1
64441: PUSH
64442: LD_INT 4
64444: PLUS
64445: PUSH
64446: LD_VAR 0 2
64450: PUSH
64451: LD_INT 4
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: PUSH
64459: LD_VAR 0 1
64463: PUSH
64464: LD_VAR 0 2
64468: PUSH
64469: LD_INT 4
64471: PLUS
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: PUSH
64481: LD_VAR 0 1
64485: PUSH
64486: LD_INT 3
64488: MINUS
64489: PUSH
64490: LD_VAR 0 2
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: LIST
64502: PUSH
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 4
64510: MINUS
64511: PUSH
64512: LD_VAR 0 2
64516: PUSH
64517: LD_INT 4
64519: MINUS
64520: PUSH
64521: LD_INT 2
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: ST_TO_ADDR
// end ; 3 :
64536: GO 64958
64538: LD_INT 3
64540: DOUBLE
64541: EQUAL
64542: IFTRUE 64546
64544: GO 64679
64546: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64547: LD_ADDR_VAR 0 5
64551: PUSH
64552: LD_VAR 0 1
64556: PUSH
64557: LD_INT 3
64559: PLUS
64560: PUSH
64561: LD_VAR 0 2
64565: PUSH
64566: LD_INT 4
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: PUSH
64574: LD_VAR 0 1
64578: PUSH
64579: LD_INT 4
64581: PLUS
64582: PUSH
64583: LD_VAR 0 2
64587: PUSH
64588: LD_INT 4
64590: PLUS
64591: PUSH
64592: LD_INT 5
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: PUSH
64600: LD_VAR 0 1
64604: PUSH
64605: LD_INT 4
64607: MINUS
64608: PUSH
64609: LD_VAR 0 2
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: LIST
64621: PUSH
64622: LD_VAR 0 1
64626: PUSH
64627: LD_VAR 0 2
64631: PUSH
64632: LD_INT 4
64634: MINUS
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_VAR 0 1
64648: PUSH
64649: LD_INT 3
64651: MINUS
64652: PUSH
64653: LD_VAR 0 2
64657: PUSH
64658: LD_INT 3
64660: MINUS
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: ST_TO_ADDR
// end ; 4 :
64677: GO 64958
64679: LD_INT 4
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64687
64685: GO 64820
64687: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64688: LD_ADDR_VAR 0 5
64692: PUSH
64693: LD_VAR 0 1
64697: PUSH
64698: LD_VAR 0 2
64702: PUSH
64703: LD_INT 4
64705: PLUS
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: LIST
64714: PUSH
64715: LD_VAR 0 1
64719: PUSH
64720: LD_INT 3
64722: PLUS
64723: PUSH
64724: LD_VAR 0 2
64728: PUSH
64729: LD_INT 3
64731: PLUS
64732: PUSH
64733: LD_INT 5
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 4
64748: PLUS
64749: PUSH
64750: LD_VAR 0 2
64754: PUSH
64755: LD_INT 4
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: PUSH
64763: LD_VAR 0 1
64767: PUSH
64768: LD_VAR 0 2
64772: PUSH
64773: LD_INT 3
64775: MINUS
64776: PUSH
64777: LD_INT 3
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: LIST
64784: PUSH
64785: LD_VAR 0 1
64789: PUSH
64790: LD_INT 4
64792: MINUS
64793: PUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_INT 4
64801: MINUS
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// end ; 5 :
64818: GO 64958
64820: LD_INT 5
64822: DOUBLE
64823: EQUAL
64824: IFTRUE 64828
64826: GO 64957
64828: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64829: LD_ADDR_VAR 0 5
64833: PUSH
64834: LD_VAR 0 1
64838: PUSH
64839: LD_INT 4
64841: MINUS
64842: PUSH
64843: LD_VAR 0 2
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: PUSH
64856: LD_VAR 0 1
64860: PUSH
64861: LD_VAR 0 2
64865: PUSH
64866: LD_INT 4
64868: MINUS
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: LIST
64877: PUSH
64878: LD_VAR 0 1
64882: PUSH
64883: LD_INT 4
64885: PLUS
64886: PUSH
64887: LD_VAR 0 2
64891: PUSH
64892: LD_INT 4
64894: PLUS
64895: PUSH
64896: LD_INT 5
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: PUSH
64904: LD_VAR 0 1
64908: PUSH
64909: LD_INT 3
64911: PLUS
64912: PUSH
64913: LD_VAR 0 2
64917: PUSH
64918: LD_INT 4
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: PUSH
64926: LD_VAR 0 1
64930: PUSH
64931: LD_VAR 0 2
64935: PUSH
64936: LD_INT 3
64938: PLUS
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: ST_TO_ADDR
// end ; end ;
64955: GO 64958
64957: POP
// result := list ;
64958: LD_ADDR_VAR 0 4
64962: PUSH
64963: LD_VAR 0 5
64967: ST_TO_ADDR
// end ;
64968: LD_VAR 0 4
64972: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64973: LD_INT 0
64975: PPUSH
64976: PPUSH
64977: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64978: LD_VAR 0 1
64982: NOT
64983: PUSH
64984: LD_VAR 0 2
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: IN
65007: NOT
65008: OR
65009: IFFALSE 65013
// exit ;
65011: GO 65105
// tmp := [ ] ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: EMPTY
65019: ST_TO_ADDR
// for i in units do
65020: LD_ADDR_VAR 0 4
65024: PUSH
65025: LD_VAR 0 1
65029: PUSH
65030: FOR_IN
65031: IFFALSE 65074
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65033: LD_ADDR_VAR 0 5
65037: PUSH
65038: LD_VAR 0 5
65042: PPUSH
65043: LD_VAR 0 5
65047: PUSH
65048: LD_INT 1
65050: PLUS
65051: PPUSH
65052: LD_VAR 0 4
65056: PPUSH
65057: LD_VAR 0 2
65061: PPUSH
65062: CALL_OW 259
65066: PPUSH
65067: CALL_OW 2
65071: ST_TO_ADDR
65072: GO 65030
65074: POP
65075: POP
// if not tmp then
65076: LD_VAR 0 5
65080: NOT
65081: IFFALSE 65085
// exit ;
65083: GO 65105
// result := SortListByListDesc ( units , tmp ) ;
65085: LD_ADDR_VAR 0 3
65089: PUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: LD_VAR 0 5
65099: PPUSH
65100: CALL_OW 77
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 3
65109: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65110: LD_INT 0
65112: PPUSH
65113: PPUSH
65114: PPUSH
// result := false ;
65115: LD_ADDR_VAR 0 3
65119: PUSH
65120: LD_INT 0
65122: ST_TO_ADDR
// x := GetX ( building ) ;
65123: LD_ADDR_VAR 0 4
65127: PUSH
65128: LD_VAR 0 2
65132: PPUSH
65133: CALL_OW 250
65137: ST_TO_ADDR
// y := GetY ( building ) ;
65138: LD_ADDR_VAR 0 5
65142: PUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: CALL_OW 251
65152: ST_TO_ADDR
// if not building or not x or not y then
65153: LD_VAR 0 2
65157: NOT
65158: PUSH
65159: LD_VAR 0 4
65163: NOT
65164: OR
65165: PUSH
65166: LD_VAR 0 5
65170: NOT
65171: OR
65172: IFFALSE 65176
// exit ;
65174: GO 65268
// if GetTaskList ( unit ) then
65176: LD_VAR 0 1
65180: PPUSH
65181: CALL_OW 437
65185: IFFALSE 65268
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65187: LD_STRING e
65189: PUSH
65190: LD_VAR 0 1
65194: PPUSH
65195: CALL_OW 437
65199: PUSH
65200: LD_INT 1
65202: ARRAY
65203: PUSH
65204: LD_INT 1
65206: ARRAY
65207: EQUAL
65208: PUSH
65209: LD_VAR 0 4
65213: PUSH
65214: LD_VAR 0 1
65218: PPUSH
65219: CALL_OW 437
65223: PUSH
65224: LD_INT 1
65226: ARRAY
65227: PUSH
65228: LD_INT 2
65230: ARRAY
65231: EQUAL
65232: AND
65233: PUSH
65234: LD_VAR 0 5
65238: PUSH
65239: LD_VAR 0 1
65243: PPUSH
65244: CALL_OW 437
65248: PUSH
65249: LD_INT 1
65251: ARRAY
65252: PUSH
65253: LD_INT 3
65255: ARRAY
65256: EQUAL
65257: AND
65258: IFFALSE 65268
// result := true end ;
65260: LD_ADDR_VAR 0 3
65264: PUSH
65265: LD_INT 1
65267: ST_TO_ADDR
// end ;
65268: LD_VAR 0 3
65272: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65273: LD_INT 0
65275: PPUSH
// result := false ;
65276: LD_ADDR_VAR 0 4
65280: PUSH
65281: LD_INT 0
65283: ST_TO_ADDR
// if GetTaskList ( unit ) then
65284: LD_VAR 0 1
65288: PPUSH
65289: CALL_OW 437
65293: IFFALSE 65376
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65295: LD_STRING M
65297: PUSH
65298: LD_VAR 0 1
65302: PPUSH
65303: CALL_OW 437
65307: PUSH
65308: LD_INT 1
65310: ARRAY
65311: PUSH
65312: LD_INT 1
65314: ARRAY
65315: EQUAL
65316: PUSH
65317: LD_VAR 0 2
65321: PUSH
65322: LD_VAR 0 1
65326: PPUSH
65327: CALL_OW 437
65331: PUSH
65332: LD_INT 1
65334: ARRAY
65335: PUSH
65336: LD_INT 2
65338: ARRAY
65339: EQUAL
65340: AND
65341: PUSH
65342: LD_VAR 0 3
65346: PUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 437
65356: PUSH
65357: LD_INT 1
65359: ARRAY
65360: PUSH
65361: LD_INT 3
65363: ARRAY
65364: EQUAL
65365: AND
65366: IFFALSE 65376
// result := true ;
65368: LD_ADDR_VAR 0 4
65372: PUSH
65373: LD_INT 1
65375: ST_TO_ADDR
// end ; end ;
65376: LD_VAR 0 4
65380: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65381: LD_INT 0
65383: PPUSH
65384: PPUSH
65385: PPUSH
65386: PPUSH
// if not unit or not area then
65387: LD_VAR 0 1
65391: NOT
65392: PUSH
65393: LD_VAR 0 2
65397: NOT
65398: OR
65399: IFFALSE 65403
// exit ;
65401: GO 65567
// tmp := AreaToList ( area , i ) ;
65403: LD_ADDR_VAR 0 6
65407: PUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: LD_VAR 0 5
65417: PPUSH
65418: CALL_OW 517
65422: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65423: LD_ADDR_VAR 0 5
65427: PUSH
65428: DOUBLE
65429: LD_INT 1
65431: DEC
65432: ST_TO_ADDR
65433: LD_VAR 0 6
65437: PUSH
65438: LD_INT 1
65440: ARRAY
65441: PUSH
65442: FOR_TO
65443: IFFALSE 65565
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65445: LD_ADDR_VAR 0 7
65449: PUSH
65450: LD_VAR 0 6
65454: PUSH
65455: LD_INT 1
65457: ARRAY
65458: PUSH
65459: LD_VAR 0 5
65463: ARRAY
65464: PUSH
65465: LD_VAR 0 6
65469: PUSH
65470: LD_INT 2
65472: ARRAY
65473: PUSH
65474: LD_VAR 0 5
65478: ARRAY
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65484: LD_VAR 0 7
65488: PUSH
65489: LD_INT 1
65491: ARRAY
65492: PPUSH
65493: LD_VAR 0 7
65497: PUSH
65498: LD_INT 2
65500: ARRAY
65501: PPUSH
65502: CALL_OW 428
65506: PUSH
65507: LD_INT 0
65509: EQUAL
65510: IFFALSE 65563
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65512: LD_VAR 0 1
65516: PPUSH
65517: LD_VAR 0 7
65521: PUSH
65522: LD_INT 1
65524: ARRAY
65525: PPUSH
65526: LD_VAR 0 7
65530: PUSH
65531: LD_INT 2
65533: ARRAY
65534: PPUSH
65535: LD_VAR 0 3
65539: PPUSH
65540: CALL_OW 48
// result := IsPlaced ( unit ) ;
65544: LD_ADDR_VAR 0 4
65548: PUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: CALL_OW 305
65558: ST_TO_ADDR
// exit ;
65559: POP
65560: POP
65561: GO 65567
// end ; end ;
65563: GO 65442
65565: POP
65566: POP
// end ;
65567: LD_VAR 0 4
65571: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65572: LD_INT 0
65574: PPUSH
65575: PPUSH
65576: PPUSH
// if not side or side > 8 then
65577: LD_VAR 0 1
65581: NOT
65582: PUSH
65583: LD_VAR 0 1
65587: PUSH
65588: LD_INT 8
65590: GREATER
65591: OR
65592: IFFALSE 65596
// exit ;
65594: GO 65783
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65596: LD_ADDR_VAR 0 4
65600: PUSH
65601: LD_INT 22
65603: PUSH
65604: LD_VAR 0 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 21
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PPUSH
65627: CALL_OW 69
65631: ST_TO_ADDR
// if not tmp then
65632: LD_VAR 0 4
65636: NOT
65637: IFFALSE 65641
// exit ;
65639: GO 65783
// enable_addtolog := true ;
65641: LD_ADDR_OWVAR 81
65645: PUSH
65646: LD_INT 1
65648: ST_TO_ADDR
// AddToLog ( [ ) ;
65649: LD_STRING [
65651: PPUSH
65652: CALL_OW 561
// for i in tmp do
65656: LD_ADDR_VAR 0 3
65660: PUSH
65661: LD_VAR 0 4
65665: PUSH
65666: FOR_IN
65667: IFFALSE 65774
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65669: LD_STRING [
65671: PUSH
65672: LD_VAR 0 3
65676: PPUSH
65677: CALL_OW 266
65681: STR
65682: PUSH
65683: LD_STRING , 
65685: STR
65686: PUSH
65687: LD_VAR 0 3
65691: PPUSH
65692: CALL_OW 250
65696: STR
65697: PUSH
65698: LD_STRING , 
65700: STR
65701: PUSH
65702: LD_VAR 0 3
65706: PPUSH
65707: CALL_OW 251
65711: STR
65712: PUSH
65713: LD_STRING , 
65715: STR
65716: PUSH
65717: LD_VAR 0 3
65721: PPUSH
65722: CALL_OW 254
65726: STR
65727: PUSH
65728: LD_STRING , 
65730: STR
65731: PUSH
65732: LD_VAR 0 3
65736: PPUSH
65737: LD_INT 1
65739: PPUSH
65740: CALL_OW 268
65744: STR
65745: PUSH
65746: LD_STRING , 
65748: STR
65749: PUSH
65750: LD_VAR 0 3
65754: PPUSH
65755: LD_INT 2
65757: PPUSH
65758: CALL_OW 268
65762: STR
65763: PUSH
65764: LD_STRING ],
65766: STR
65767: PPUSH
65768: CALL_OW 561
// end ;
65772: GO 65666
65774: POP
65775: POP
// AddToLog ( ]; ) ;
65776: LD_STRING ];
65778: PPUSH
65779: CALL_OW 561
// end ;
65783: LD_VAR 0 2
65787: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65788: LD_INT 0
65790: PPUSH
65791: PPUSH
65792: PPUSH
65793: PPUSH
65794: PPUSH
// if not area or not rate or not max then
65795: LD_VAR 0 1
65799: NOT
65800: PUSH
65801: LD_VAR 0 2
65805: NOT
65806: OR
65807: PUSH
65808: LD_VAR 0 4
65812: NOT
65813: OR
65814: IFFALSE 65818
// exit ;
65816: GO 66010
// while 1 do
65818: LD_INT 1
65820: IFFALSE 66010
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65822: LD_ADDR_VAR 0 9
65826: PUSH
65827: LD_VAR 0 1
65831: PPUSH
65832: LD_INT 1
65834: PPUSH
65835: CALL_OW 287
65839: PUSH
65840: LD_INT 10
65842: MUL
65843: ST_TO_ADDR
// r := rate / 10 ;
65844: LD_ADDR_VAR 0 7
65848: PUSH
65849: LD_VAR 0 2
65853: PUSH
65854: LD_INT 10
65856: DIVREAL
65857: ST_TO_ADDR
// time := 1 1$00 ;
65858: LD_ADDR_VAR 0 8
65862: PUSH
65863: LD_INT 2100
65865: ST_TO_ADDR
// if amount < min then
65866: LD_VAR 0 9
65870: PUSH
65871: LD_VAR 0 3
65875: LESS
65876: IFFALSE 65894
// r := r * 2 else
65878: LD_ADDR_VAR 0 7
65882: PUSH
65883: LD_VAR 0 7
65887: PUSH
65888: LD_INT 2
65890: MUL
65891: ST_TO_ADDR
65892: GO 65920
// if amount > max then
65894: LD_VAR 0 9
65898: PUSH
65899: LD_VAR 0 4
65903: GREATER
65904: IFFALSE 65920
// r := r / 2 ;
65906: LD_ADDR_VAR 0 7
65910: PUSH
65911: LD_VAR 0 7
65915: PUSH
65916: LD_INT 2
65918: DIVREAL
65919: ST_TO_ADDR
// time := time / r ;
65920: LD_ADDR_VAR 0 8
65924: PUSH
65925: LD_VAR 0 8
65929: PUSH
65930: LD_VAR 0 7
65934: DIVREAL
65935: ST_TO_ADDR
// if time < 0 then
65936: LD_VAR 0 8
65940: PUSH
65941: LD_INT 0
65943: LESS
65944: IFFALSE 65961
// time := time * - 1 ;
65946: LD_ADDR_VAR 0 8
65950: PUSH
65951: LD_VAR 0 8
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: MUL
65960: ST_TO_ADDR
// wait ( time ) ;
65961: LD_VAR 0 8
65965: PPUSH
65966: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65970: LD_INT 35
65972: PPUSH
65973: LD_INT 875
65975: PPUSH
65976: CALL_OW 12
65980: PPUSH
65981: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65985: LD_INT 1
65987: PPUSH
65988: LD_INT 5
65990: PPUSH
65991: CALL_OW 12
65995: PPUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: LD_INT 1
66003: PPUSH
66004: CALL_OW 55
// end ;
66008: GO 65818
// end ;
66010: LD_VAR 0 5
66014: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66015: LD_INT 0
66017: PPUSH
66018: PPUSH
66019: PPUSH
66020: PPUSH
66021: PPUSH
66022: PPUSH
66023: PPUSH
66024: PPUSH
// if not turrets or not factories then
66025: LD_VAR 0 1
66029: NOT
66030: PUSH
66031: LD_VAR 0 2
66035: NOT
66036: OR
66037: IFFALSE 66041
// exit ;
66039: GO 66348
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66041: LD_ADDR_VAR 0 10
66045: PUSH
66046: LD_INT 5
66048: PUSH
66049: LD_INT 6
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: LD_INT 4
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: LD_INT 5
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 24
66083: PUSH
66084: LD_INT 25
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 23
66093: PUSH
66094: LD_INT 27
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 42
66107: PUSH
66108: LD_INT 43
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 44
66117: PUSH
66118: LD_INT 46
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 45
66127: PUSH
66128: LD_INT 47
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: LIST
66144: ST_TO_ADDR
// result := [ ] ;
66145: LD_ADDR_VAR 0 3
66149: PUSH
66150: EMPTY
66151: ST_TO_ADDR
// for i in turrets do
66152: LD_ADDR_VAR 0 4
66156: PUSH
66157: LD_VAR 0 1
66161: PUSH
66162: FOR_IN
66163: IFFALSE 66346
// begin nat := GetNation ( i ) ;
66165: LD_ADDR_VAR 0 7
66169: PUSH
66170: LD_VAR 0 4
66174: PPUSH
66175: CALL_OW 248
66179: ST_TO_ADDR
// weapon := 0 ;
66180: LD_ADDR_VAR 0 8
66184: PUSH
66185: LD_INT 0
66187: ST_TO_ADDR
// if not nat then
66188: LD_VAR 0 7
66192: NOT
66193: IFFALSE 66197
// continue ;
66195: GO 66162
// for j in list [ nat ] do
66197: LD_ADDR_VAR 0 5
66201: PUSH
66202: LD_VAR 0 10
66206: PUSH
66207: LD_VAR 0 7
66211: ARRAY
66212: PUSH
66213: FOR_IN
66214: IFFALSE 66255
// if GetBWeapon ( i ) = j [ 1 ] then
66216: LD_VAR 0 4
66220: PPUSH
66221: CALL_OW 269
66225: PUSH
66226: LD_VAR 0 5
66230: PUSH
66231: LD_INT 1
66233: ARRAY
66234: EQUAL
66235: IFFALSE 66253
// begin weapon := j [ 2 ] ;
66237: LD_ADDR_VAR 0 8
66241: PUSH
66242: LD_VAR 0 5
66246: PUSH
66247: LD_INT 2
66249: ARRAY
66250: ST_TO_ADDR
// break ;
66251: GO 66255
// end ;
66253: GO 66213
66255: POP
66256: POP
// if not weapon then
66257: LD_VAR 0 8
66261: NOT
66262: IFFALSE 66266
// continue ;
66264: GO 66162
// for k in factories do
66266: LD_ADDR_VAR 0 6
66270: PUSH
66271: LD_VAR 0 2
66275: PUSH
66276: FOR_IN
66277: IFFALSE 66342
// begin weapons := AvailableWeaponList ( k ) ;
66279: LD_ADDR_VAR 0 9
66283: PUSH
66284: LD_VAR 0 6
66288: PPUSH
66289: CALL_OW 478
66293: ST_TO_ADDR
// if not weapons then
66294: LD_VAR 0 9
66298: NOT
66299: IFFALSE 66303
// continue ;
66301: GO 66276
// if weapon in weapons then
66303: LD_VAR 0 8
66307: PUSH
66308: LD_VAR 0 9
66312: IN
66313: IFFALSE 66340
// begin result := [ i , weapon ] ;
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: LD_VAR 0 4
66324: PUSH
66325: LD_VAR 0 8
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: ST_TO_ADDR
// exit ;
66334: POP
66335: POP
66336: POP
66337: POP
66338: GO 66348
// end ; end ;
66340: GO 66276
66342: POP
66343: POP
// end ;
66344: GO 66162
66346: POP
66347: POP
// end ;
66348: LD_VAR 0 3
66352: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66353: LD_INT 0
66355: PPUSH
// if not side or side > 8 then
66356: LD_VAR 0 3
66360: NOT
66361: PUSH
66362: LD_VAR 0 3
66366: PUSH
66367: LD_INT 8
66369: GREATER
66370: OR
66371: IFFALSE 66375
// exit ;
66373: GO 66434
// if not range then
66375: LD_VAR 0 4
66379: NOT
66380: IFFALSE 66391
// range := - 12 ;
66382: LD_ADDR_VAR 0 4
66386: PUSH
66387: LD_INT 12
66389: NEG
66390: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66391: LD_VAR 0 1
66395: PPUSH
66396: LD_VAR 0 2
66400: PPUSH
66401: LD_VAR 0 3
66405: PPUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66415: LD_VAR 0 1
66419: PPUSH
66420: LD_VAR 0 2
66424: PPUSH
66425: LD_VAR 0 3
66429: PPUSH
66430: CALL_OW 331
// end ;
66434: LD_VAR 0 5
66438: RET
// export function Video ( mode ) ; begin
66439: LD_INT 0
66441: PPUSH
// ingame_video = mode ;
66442: LD_ADDR_OWVAR 52
66446: PUSH
66447: LD_VAR 0 1
66451: ST_TO_ADDR
// interface_hidden = mode ;
66452: LD_ADDR_OWVAR 54
66456: PUSH
66457: LD_VAR 0 1
66461: ST_TO_ADDR
// end ;
66462: LD_VAR 0 2
66466: RET
// export function Join ( array , element ) ; begin
66467: LD_INT 0
66469: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66470: LD_ADDR_VAR 0 3
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 1
66487: PLUS
66488: PPUSH
66489: LD_VAR 0 2
66493: PPUSH
66494: CALL_OW 1
66498: ST_TO_ADDR
// end ;
66499: LD_VAR 0 3
66503: RET
// export function JoinUnion ( array , element ) ; begin
66504: LD_INT 0
66506: PPUSH
// result := array union element ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 1
66516: PUSH
66517: LD_VAR 0 2
66521: UNION
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 3
66527: RET
// export function GetBehemoths ( side ) ; begin
66528: LD_INT 0
66530: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66531: LD_ADDR_VAR 0 2
66535: PUSH
66536: LD_INT 22
66538: PUSH
66539: LD_VAR 0 1
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 31
66550: PUSH
66551: LD_INT 25
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PPUSH
66562: CALL_OW 69
66566: ST_TO_ADDR
// end ;
66567: LD_VAR 0 2
66571: RET
// export function Shuffle ( array ) ; var i , index ; begin
66572: LD_INT 0
66574: PPUSH
66575: PPUSH
66576: PPUSH
// result := [ ] ;
66577: LD_ADDR_VAR 0 2
66581: PUSH
66582: EMPTY
66583: ST_TO_ADDR
// if not array then
66584: LD_VAR 0 1
66588: NOT
66589: IFFALSE 66593
// exit ;
66591: GO 66692
// Randomize ;
66593: CALL_OW 10
// for i = array downto 1 do
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: DOUBLE
66603: LD_VAR 0 1
66607: INC
66608: ST_TO_ADDR
66609: LD_INT 1
66611: PUSH
66612: FOR_DOWNTO
66613: IFFALSE 66690
// begin index := rand ( 1 , array ) ;
66615: LD_ADDR_VAR 0 4
66619: PUSH
66620: LD_INT 1
66622: PPUSH
66623: LD_VAR 0 1
66627: PPUSH
66628: CALL_OW 12
66632: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66633: LD_ADDR_VAR 0 2
66637: PUSH
66638: LD_VAR 0 2
66642: PPUSH
66643: LD_VAR 0 2
66647: PUSH
66648: LD_INT 1
66650: PLUS
66651: PPUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_VAR 0 4
66661: ARRAY
66662: PPUSH
66663: CALL_OW 2
66667: ST_TO_ADDR
// array := Delete ( array , index ) ;
66668: LD_ADDR_VAR 0 1
66672: PUSH
66673: LD_VAR 0 1
66677: PPUSH
66678: LD_VAR 0 4
66682: PPUSH
66683: CALL_OW 3
66687: ST_TO_ADDR
// end ;
66688: GO 66612
66690: POP
66691: POP
// end ;
66692: LD_VAR 0 2
66696: RET
// export function GetBaseMaterials ( base ) ; begin
66697: LD_INT 0
66699: PPUSH
// result := [ 0 , 0 , 0 ] ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// if not base then
66719: LD_VAR 0 1
66723: NOT
66724: IFFALSE 66728
// exit ;
66726: GO 66777
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66728: LD_ADDR_VAR 0 2
66732: PUSH
66733: LD_VAR 0 1
66737: PPUSH
66738: LD_INT 1
66740: PPUSH
66741: CALL_OW 275
66745: PUSH
66746: LD_VAR 0 1
66750: PPUSH
66751: LD_INT 2
66753: PPUSH
66754: CALL_OW 275
66758: PUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: LD_INT 3
66766: PPUSH
66767: CALL_OW 275
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// end ;
66777: LD_VAR 0 2
66781: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66782: LD_INT 0
66784: PPUSH
66785: PPUSH
// result := array ;
66786: LD_ADDR_VAR 0 3
66790: PUSH
66791: LD_VAR 0 1
66795: ST_TO_ADDR
// if size > 0 then
66796: LD_VAR 0 2
66800: PUSH
66801: LD_INT 0
66803: GREATER
66804: IFFALSE 66850
// for i := array downto size do
66806: LD_ADDR_VAR 0 4
66810: PUSH
66811: DOUBLE
66812: LD_VAR 0 1
66816: INC
66817: ST_TO_ADDR
66818: LD_VAR 0 2
66822: PUSH
66823: FOR_DOWNTO
66824: IFFALSE 66848
// result := Delete ( result , result ) ;
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: LD_VAR 0 3
66835: PPUSH
66836: LD_VAR 0 3
66840: PPUSH
66841: CALL_OW 3
66845: ST_TO_ADDR
66846: GO 66823
66848: POP
66849: POP
// end ;
66850: LD_VAR 0 3
66854: RET
// export function ComExit ( unit ) ; var tmp ; begin
66855: LD_INT 0
66857: PPUSH
66858: PPUSH
// if not IsInUnit ( unit ) then
66859: LD_VAR 0 1
66863: PPUSH
66864: CALL_OW 310
66868: NOT
66869: IFFALSE 66873
// exit ;
66871: GO 66933
// tmp := IsInUnit ( unit ) ;
66873: LD_ADDR_VAR 0 3
66877: PUSH
66878: LD_VAR 0 1
66882: PPUSH
66883: CALL_OW 310
66887: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66888: LD_VAR 0 3
66892: PPUSH
66893: CALL_OW 247
66897: PUSH
66898: LD_INT 2
66900: EQUAL
66901: IFFALSE 66914
// ComExitVehicle ( unit ) else
66903: LD_VAR 0 1
66907: PPUSH
66908: CALL_OW 121
66912: GO 66923
// ComExitBuilding ( unit ) ;
66914: LD_VAR 0 1
66918: PPUSH
66919: CALL_OW 122
// result := tmp ;
66923: LD_ADDR_VAR 0 2
66927: PUSH
66928: LD_VAR 0 3
66932: ST_TO_ADDR
// end ;
66933: LD_VAR 0 2
66937: RET
// export function ComExitAll ( units ) ; var i ; begin
66938: LD_INT 0
66940: PPUSH
66941: PPUSH
// if not units then
66942: LD_VAR 0 1
66946: NOT
66947: IFFALSE 66951
// exit ;
66949: GO 66977
// for i in units do
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: FOR_IN
66962: IFFALSE 66975
// ComExit ( i ) ;
66964: LD_VAR 0 3
66968: PPUSH
66969: CALL 66855 0 1
66973: GO 66961
66975: POP
66976: POP
// end ;
66977: LD_VAR 0 2
66981: RET
// export function ResetHc ; begin
66982: LD_INT 0
66984: PPUSH
// InitHc ;
66985: CALL_OW 19
// hc_importance := 0 ;
66989: LD_ADDR_OWVAR 32
66993: PUSH
66994: LD_INT 0
66996: ST_TO_ADDR
// end ;
66997: LD_VAR 0 1
67001: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67002: LD_INT 0
67004: PPUSH
67005: PPUSH
67006: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67007: LD_ADDR_VAR 0 6
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_VAR 0 3
67021: PLUS
67022: PUSH
67023: LD_INT 2
67025: DIV
67026: ST_TO_ADDR
// if _x < 0 then
67027: LD_VAR 0 6
67031: PUSH
67032: LD_INT 0
67034: LESS
67035: IFFALSE 67052
// _x := _x * - 1 ;
67037: LD_ADDR_VAR 0 6
67041: PUSH
67042: LD_VAR 0 6
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: MUL
67051: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67052: LD_ADDR_VAR 0 7
67056: PUSH
67057: LD_VAR 0 2
67061: PUSH
67062: LD_VAR 0 4
67066: PLUS
67067: PUSH
67068: LD_INT 2
67070: DIV
67071: ST_TO_ADDR
// if _y < 0 then
67072: LD_VAR 0 7
67076: PUSH
67077: LD_INT 0
67079: LESS
67080: IFFALSE 67097
// _y := _y * - 1 ;
67082: LD_ADDR_VAR 0 7
67086: PUSH
67087: LD_VAR 0 7
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: MUL
67096: ST_TO_ADDR
// result := [ _x , _y ] ;
67097: LD_ADDR_VAR 0 5
67101: PUSH
67102: LD_VAR 0 6
67106: PUSH
67107: LD_VAR 0 7
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: ST_TO_ADDR
// end ;
67116: LD_VAR 0 5
67120: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67121: LD_INT 0
67123: PPUSH
67124: PPUSH
67125: PPUSH
67126: PPUSH
// task := GetTaskList ( unit ) ;
67127: LD_ADDR_VAR 0 7
67131: PUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: CALL_OW 437
67141: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67142: LD_VAR 0 7
67146: NOT
67147: PUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: LD_VAR 0 2
67157: PPUSH
67158: CALL_OW 308
67162: NOT
67163: AND
67164: IFFALSE 67168
// exit ;
67166: GO 67286
// if IsInArea ( unit , area ) then
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_VAR 0 2
67177: PPUSH
67178: CALL_OW 308
67182: IFFALSE 67200
// begin ComMoveToArea ( unit , goAway ) ;
67184: LD_VAR 0 1
67188: PPUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: CALL_OW 113
// exit ;
67198: GO 67286
// end ; if task [ 1 ] [ 1 ] <> M then
67200: LD_VAR 0 7
67204: PUSH
67205: LD_INT 1
67207: ARRAY
67208: PUSH
67209: LD_INT 1
67211: ARRAY
67212: PUSH
67213: LD_STRING M
67215: NONEQUAL
67216: IFFALSE 67220
// exit ;
67218: GO 67286
// x := task [ 1 ] [ 2 ] ;
67220: LD_ADDR_VAR 0 5
67224: PUSH
67225: LD_VAR 0 7
67229: PUSH
67230: LD_INT 1
67232: ARRAY
67233: PUSH
67234: LD_INT 2
67236: ARRAY
67237: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67238: LD_ADDR_VAR 0 6
67242: PUSH
67243: LD_VAR 0 7
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PUSH
67252: LD_INT 3
67254: ARRAY
67255: ST_TO_ADDR
// if InArea ( x , y , area ) then
67256: LD_VAR 0 5
67260: PPUSH
67261: LD_VAR 0 6
67265: PPUSH
67266: LD_VAR 0 2
67270: PPUSH
67271: CALL_OW 309
67275: IFFALSE 67286
// ComStop ( unit ) ;
67277: LD_VAR 0 1
67281: PPUSH
67282: CALL_OW 141
// end ;
67286: LD_VAR 0 4
67290: RET
// export function Abs ( value ) ; begin
67291: LD_INT 0
67293: PPUSH
// result := value ;
67294: LD_ADDR_VAR 0 2
67298: PUSH
67299: LD_VAR 0 1
67303: ST_TO_ADDR
// if value < 0 then
67304: LD_VAR 0 1
67308: PUSH
67309: LD_INT 0
67311: LESS
67312: IFFALSE 67329
// result := value * - 1 ;
67314: LD_ADDR_VAR 0 2
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: MUL
67328: ST_TO_ADDR
// end ;
67329: LD_VAR 0 2
67333: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67334: LD_INT 0
67336: PPUSH
67337: PPUSH
67338: PPUSH
67339: PPUSH
67340: PPUSH
67341: PPUSH
67342: PPUSH
67343: PPUSH
// if not unit or not building then
67344: LD_VAR 0 1
67348: NOT
67349: PUSH
67350: LD_VAR 0 2
67354: NOT
67355: OR
67356: IFFALSE 67360
// exit ;
67358: GO 67586
// x := GetX ( building ) ;
67360: LD_ADDR_VAR 0 4
67364: PUSH
67365: LD_VAR 0 2
67369: PPUSH
67370: CALL_OW 250
67374: ST_TO_ADDR
// y := GetY ( building ) ;
67375: LD_ADDR_VAR 0 6
67379: PUSH
67380: LD_VAR 0 2
67384: PPUSH
67385: CALL_OW 251
67389: ST_TO_ADDR
// d := GetDir ( building ) ;
67390: LD_ADDR_VAR 0 8
67394: PUSH
67395: LD_VAR 0 2
67399: PPUSH
67400: CALL_OW 254
67404: ST_TO_ADDR
// r := 4 ;
67405: LD_ADDR_VAR 0 9
67409: PUSH
67410: LD_INT 4
67412: ST_TO_ADDR
// for i := 1 to 5 do
67413: LD_ADDR_VAR 0 10
67417: PUSH
67418: DOUBLE
67419: LD_INT 1
67421: DEC
67422: ST_TO_ADDR
67423: LD_INT 5
67425: PUSH
67426: FOR_TO
67427: IFFALSE 67584
// begin _x := ShiftX ( x , d , r + i ) ;
67429: LD_ADDR_VAR 0 5
67433: PUSH
67434: LD_VAR 0 4
67438: PPUSH
67439: LD_VAR 0 8
67443: PPUSH
67444: LD_VAR 0 9
67448: PUSH
67449: LD_VAR 0 10
67453: PLUS
67454: PPUSH
67455: CALL_OW 272
67459: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67460: LD_ADDR_VAR 0 7
67464: PUSH
67465: LD_VAR 0 6
67469: PPUSH
67470: LD_VAR 0 8
67474: PPUSH
67475: LD_VAR 0 9
67479: PUSH
67480: LD_VAR 0 10
67484: PLUS
67485: PPUSH
67486: CALL_OW 273
67490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67491: LD_VAR 0 5
67495: PPUSH
67496: LD_VAR 0 7
67500: PPUSH
67501: CALL_OW 488
67505: PUSH
67506: LD_VAR 0 5
67510: PPUSH
67511: LD_VAR 0 7
67515: PPUSH
67516: CALL_OW 428
67520: PPUSH
67521: CALL_OW 247
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: IN
67536: NOT
67537: AND
67538: IFFALSE 67582
// begin ComMoveXY ( unit , _x , _y ) ;
67540: LD_VAR 0 1
67544: PPUSH
67545: LD_VAR 0 5
67549: PPUSH
67550: LD_VAR 0 7
67554: PPUSH
67555: CALL_OW 111
// result := [ _x , _y ] ;
67559: LD_ADDR_VAR 0 3
67563: PUSH
67564: LD_VAR 0 5
67568: PUSH
67569: LD_VAR 0 7
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// exit ;
67578: POP
67579: POP
67580: GO 67586
// end ; end ;
67582: GO 67426
67584: POP
67585: POP
// end ;
67586: LD_VAR 0 3
67590: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
67595: PPUSH
// result := 0 ;
67596: LD_ADDR_VAR 0 3
67600: PUSH
67601: LD_INT 0
67603: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67604: LD_VAR 0 1
67608: PUSH
67609: LD_INT 0
67611: LESS
67612: PUSH
67613: LD_VAR 0 1
67617: PUSH
67618: LD_INT 8
67620: GREATER
67621: OR
67622: PUSH
67623: LD_VAR 0 2
67627: PUSH
67628: LD_INT 0
67630: LESS
67631: OR
67632: PUSH
67633: LD_VAR 0 2
67637: PUSH
67638: LD_INT 8
67640: GREATER
67641: OR
67642: IFFALSE 67646
// exit ;
67644: GO 67721
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: LD_INT 22
67653: PUSH
67654: LD_VAR 0 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PPUSH
67663: CALL_OW 69
67667: PUSH
67668: FOR_IN
67669: IFFALSE 67719
// begin un := UnitShoot ( i ) ;
67671: LD_ADDR_VAR 0 5
67675: PUSH
67676: LD_VAR 0 4
67680: PPUSH
67681: CALL_OW 504
67685: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67686: LD_VAR 0 5
67690: PPUSH
67691: CALL_OW 255
67695: PUSH
67696: LD_VAR 0 1
67700: EQUAL
67701: IFFALSE 67717
// begin result := un ;
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: LD_VAR 0 5
67712: ST_TO_ADDR
// exit ;
67713: POP
67714: POP
67715: GO 67721
// end ; end ;
67717: GO 67668
67719: POP
67720: POP
// end ;
67721: LD_VAR 0 3
67725: RET
// export function GetCargoBay ( units ) ; begin
67726: LD_INT 0
67728: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67729: LD_ADDR_VAR 0 2
67733: PUSH
67734: LD_VAR 0 1
67738: PPUSH
67739: LD_INT 2
67741: PUSH
67742: LD_INT 34
67744: PUSH
67745: LD_INT 12
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 34
67754: PUSH
67755: LD_INT 51
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 34
67764: PUSH
67765: LD_INT 32
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 34
67774: PUSH
67775: LD_EXP 33
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: PPUSH
67791: CALL_OW 72
67795: ST_TO_ADDR
// end ;
67796: LD_VAR 0 2
67800: RET
// export function Negate ( value ) ; begin
67801: LD_INT 0
67803: PPUSH
// result := not value ;
67804: LD_ADDR_VAR 0 2
67808: PUSH
67809: LD_VAR 0 1
67813: NOT
67814: ST_TO_ADDR
// end ;
67815: LD_VAR 0 2
67819: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67820: LD_INT 0
67822: PPUSH
// if x1 = x2 then
67823: LD_VAR 0 1
67827: PUSH
67828: LD_VAR 0 3
67832: EQUAL
67833: IFFALSE 67867
// begin if y1 > y2 then
67835: LD_VAR 0 2
67839: PUSH
67840: LD_VAR 0 4
67844: GREATER
67845: IFFALSE 67857
// result := 0 else
67847: LD_ADDR_VAR 0 5
67851: PUSH
67852: LD_INT 0
67854: ST_TO_ADDR
67855: GO 67865
// result := 3 ;
67857: LD_ADDR_VAR 0 5
67861: PUSH
67862: LD_INT 3
67864: ST_TO_ADDR
// exit ;
67865: GO 67953
// end ; if y1 = y2 then
67867: LD_VAR 0 2
67871: PUSH
67872: LD_VAR 0 4
67876: EQUAL
67877: IFFALSE 67911
// begin if x1 > x2 then
67879: LD_VAR 0 1
67883: PUSH
67884: LD_VAR 0 3
67888: GREATER
67889: IFFALSE 67901
// result := 1 else
67891: LD_ADDR_VAR 0 5
67895: PUSH
67896: LD_INT 1
67898: ST_TO_ADDR
67899: GO 67909
// result := 4 ;
67901: LD_ADDR_VAR 0 5
67905: PUSH
67906: LD_INT 4
67908: ST_TO_ADDR
// exit ;
67909: GO 67953
// end ; if x1 > x2 and y1 > y2 then
67911: LD_VAR 0 1
67915: PUSH
67916: LD_VAR 0 3
67920: GREATER
67921: PUSH
67922: LD_VAR 0 2
67926: PUSH
67927: LD_VAR 0 4
67931: GREATER
67932: AND
67933: IFFALSE 67945
// result := 2 else
67935: LD_ADDR_VAR 0 5
67939: PUSH
67940: LD_INT 2
67942: ST_TO_ADDR
67943: GO 67953
// result := 5 ;
67945: LD_ADDR_VAR 0 5
67949: PUSH
67950: LD_INT 5
67952: ST_TO_ADDR
// end ;
67953: LD_VAR 0 5
67957: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67958: LD_INT 0
67960: PPUSH
67961: PPUSH
// if not driver or not IsInUnit ( driver ) then
67962: LD_VAR 0 1
67966: NOT
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: CALL_OW 310
67977: NOT
67978: OR
67979: IFFALSE 67983
// exit ;
67981: GO 68073
// vehicle := IsInUnit ( driver ) ;
67983: LD_ADDR_VAR 0 3
67987: PUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: CALL_OW 310
67997: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_STRING \
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: PUSH
68033: LD_STRING E
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_VAR 0 3
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 0
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PPUSH
68069: CALL_OW 446
// end ;
68073: LD_VAR 0 2
68077: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68078: LD_INT 0
68080: PPUSH
68081: PPUSH
// if not driver or not IsInUnit ( driver ) then
68082: LD_VAR 0 1
68086: NOT
68087: PUSH
68088: LD_VAR 0 1
68092: PPUSH
68093: CALL_OW 310
68097: NOT
68098: OR
68099: IFFALSE 68103
// exit ;
68101: GO 68193
// vehicle := IsInUnit ( driver ) ;
68103: LD_ADDR_VAR 0 3
68107: PUSH
68108: LD_VAR 0 1
68112: PPUSH
68113: CALL_OW 310
68117: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68118: LD_VAR 0 1
68122: PPUSH
68123: LD_STRING \
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 0
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: PUSH
68153: LD_STRING E
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_VAR 0 3
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PPUSH
68189: CALL_OW 447
// end ;
68193: LD_VAR 0 2
68197: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68198: LD_INT 0
68200: PPUSH
68201: PPUSH
68202: PPUSH
// tmp := [ ] ;
68203: LD_ADDR_VAR 0 5
68207: PUSH
68208: EMPTY
68209: ST_TO_ADDR
// for i in units do
68210: LD_ADDR_VAR 0 4
68214: PUSH
68215: LD_VAR 0 1
68219: PUSH
68220: FOR_IN
68221: IFFALSE 68259
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68223: LD_ADDR_VAR 0 5
68227: PUSH
68228: LD_VAR 0 5
68232: PPUSH
68233: LD_VAR 0 5
68237: PUSH
68238: LD_INT 1
68240: PLUS
68241: PPUSH
68242: LD_VAR 0 4
68246: PPUSH
68247: CALL_OW 256
68251: PPUSH
68252: CALL_OW 2
68256: ST_TO_ADDR
68257: GO 68220
68259: POP
68260: POP
// if not tmp then
68261: LD_VAR 0 5
68265: NOT
68266: IFFALSE 68270
// exit ;
68268: GO 68318
// if asc then
68270: LD_VAR 0 2
68274: IFFALSE 68298
// result := SortListByListAsc ( units , tmp ) else
68276: LD_ADDR_VAR 0 3
68280: PUSH
68281: LD_VAR 0 1
68285: PPUSH
68286: LD_VAR 0 5
68290: PPUSH
68291: CALL_OW 76
68295: ST_TO_ADDR
68296: GO 68318
// result := SortListByListDesc ( units , tmp ) ;
68298: LD_ADDR_VAR 0 3
68302: PUSH
68303: LD_VAR 0 1
68307: PPUSH
68308: LD_VAR 0 5
68312: PPUSH
68313: CALL_OW 77
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 3
68322: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68323: LD_INT 0
68325: PPUSH
68326: PPUSH
// task := GetTaskList ( mech ) ;
68327: LD_ADDR_VAR 0 4
68331: PUSH
68332: LD_VAR 0 1
68336: PPUSH
68337: CALL_OW 437
68341: ST_TO_ADDR
// if not task then
68342: LD_VAR 0 4
68346: NOT
68347: IFFALSE 68351
// exit ;
68349: GO 68393
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68351: LD_ADDR_VAR 0 3
68355: PUSH
68356: LD_VAR 0 4
68360: PUSH
68361: LD_INT 1
68363: ARRAY
68364: PUSH
68365: LD_INT 1
68367: ARRAY
68368: PUSH
68369: LD_STRING r
68371: EQUAL
68372: PUSH
68373: LD_VAR 0 4
68377: PUSH
68378: LD_INT 1
68380: ARRAY
68381: PUSH
68382: LD_INT 4
68384: ARRAY
68385: PUSH
68386: LD_VAR 0 2
68390: EQUAL
68391: AND
68392: ST_TO_ADDR
// end ;
68393: LD_VAR 0 3
68397: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68398: LD_INT 0
68400: PPUSH
// SetDir ( unit , d ) ;
68401: LD_VAR 0 1
68405: PPUSH
68406: LD_VAR 0 4
68410: PPUSH
68411: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68415: LD_VAR 0 1
68419: PPUSH
68420: LD_VAR 0 2
68424: PPUSH
68425: LD_VAR 0 3
68429: PPUSH
68430: LD_VAR 0 5
68434: PPUSH
68435: CALL_OW 48
// end ;
68439: LD_VAR 0 6
68443: RET
// export function ToNaturalNumber ( number ) ; begin
68444: LD_INT 0
68446: PPUSH
// result := number div 1 ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_VAR 0 1
68456: PUSH
68457: LD_INT 1
68459: DIV
68460: ST_TO_ADDR
// if number < 0 then
68461: LD_VAR 0 1
68465: PUSH
68466: LD_INT 0
68468: LESS
68469: IFFALSE 68479
// result := 0 ;
68471: LD_ADDR_VAR 0 2
68475: PUSH
68476: LD_INT 0
68478: ST_TO_ADDR
// end ; end_of_file
68479: LD_VAR 0 2
68483: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68484: LD_VAR 0 1
68488: PUSH
68489: LD_INT 200
68491: DOUBLE
68492: GREATEREQUAL
68493: IFFALSE 68501
68495: LD_INT 299
68497: DOUBLE
68498: LESSEQUAL
68499: IFTRUE 68503
68501: GO 68535
68503: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68504: LD_VAR 0 1
68508: PPUSH
68509: LD_VAR 0 2
68513: PPUSH
68514: LD_VAR 0 3
68518: PPUSH
68519: LD_VAR 0 4
68523: PPUSH
68524: LD_VAR 0 5
68528: PPUSH
68529: CALL 25846 0 5
68533: GO 68612
68535: LD_INT 300
68537: DOUBLE
68538: GREATEREQUAL
68539: IFFALSE 68547
68541: LD_INT 399
68543: DOUBLE
68544: LESSEQUAL
68545: IFTRUE 68549
68547: GO 68611
68549: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68550: LD_VAR 0 1
68554: PPUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_VAR 0 3
68564: PPUSH
68565: LD_VAR 0 4
68569: PPUSH
68570: LD_VAR 0 5
68574: PPUSH
68575: LD_VAR 0 6
68579: PPUSH
68580: LD_VAR 0 7
68584: PPUSH
68585: LD_VAR 0 8
68589: PPUSH
68590: LD_VAR 0 9
68594: PPUSH
68595: LD_VAR 0 10
68599: PPUSH
68600: LD_VAR 0 11
68604: PPUSH
68605: CALL 23734 0 11
68609: GO 68612
68611: POP
// end ;
68612: PPOPN 11
68614: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68615: LD_VAR 0 1
68619: PPUSH
68620: LD_VAR 0 2
68624: PPUSH
68625: LD_VAR 0 3
68629: PPUSH
68630: LD_VAR 0 4
68634: PPUSH
68635: LD_VAR 0 5
68639: PPUSH
68640: CALL 25828 0 5
// end ; end_of_file
68644: PPOPN 5
68646: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68647: LD_VAR 0 1
68651: PPUSH
68652: LD_VAR 0 2
68656: PPUSH
68657: LD_VAR 0 3
68661: PPUSH
68662: LD_VAR 0 4
68666: PPUSH
68667: LD_VAR 0 5
68671: PPUSH
68672: LD_VAR 0 6
68676: PPUSH
68677: CALL 12542 0 6
// end ;
68681: PPOPN 6
68683: END
