// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11745 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32904 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32904 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74258 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_EXP 8
8103: NOT
8104: AND
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 255
8113: PUSH
8114: LD_INT 2
8116: NONEQUAL
8117: AND
8118: PUSH
8119: LD_EXP 25
8123: PPUSH
8124: CALL_OW 302
8128: AND
8129: PUSH
8130: LD_EXP 23
8134: PPUSH
8135: CALL_OW 302
8139: AND
8140: IFFALSE 8285
8142: GO 8144
8144: DISABLE
// begin DialogueOn ;
8145: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8149: LD_INT 47
8151: PPUSH
8152: LD_INT 19
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: LD_INT 6
8160: NEG
8161: PPUSH
8162: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8166: LD_INT 47
8168: PPUSH
8169: LD_INT 19
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8179: LD_INT 34
8181: PPUSH
8182: LD_INT 32
8184: PPUSH
8185: LD_INT 2
8187: PPUSH
8188: LD_INT 6
8190: NEG
8191: PPUSH
8192: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8196: LD_INT 34
8198: PPUSH
8199: LD_INT 32
8201: PPUSH
8202: LD_INT 2
8204: PPUSH
8205: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8209: LD_EXP 25
8213: PPUSH
8214: LD_STRING DM-Prem-1
8216: PPUSH
8217: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8221: LD_EXP 23
8225: PPUSH
8226: LD_STRING DH-Prem-2
8228: PPUSH
8229: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8233: LD_EXP 23
8237: PPUSH
8238: LD_STRING DH-Prem-3
8240: PPUSH
8241: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8245: LD_EXP 25
8249: PPUSH
8250: LD_STRING DM-Prem-4
8252: PPUSH
8253: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8257: LD_EXP 25
8261: PPUSH
8262: LD_STRING DM-Prem-5
8264: PPUSH
8265: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8269: LD_EXP 24
8273: PPUSH
8274: LD_STRING DG-Prem-6
8276: PPUSH
8277: CALL_OW 88
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8286: LD_INT 5
8288: PPUSH
8289: LD_EXP 23
8293: PPUSH
8294: CALL_OW 292
8298: PUSH
8299: LD_EXP 23
8303: PPUSH
8304: LD_EXP 27
8308: PPUSH
8309: CALL_OW 296
8313: PUSH
8314: LD_INT 6
8316: LESS
8317: AND
8318: PUSH
8319: LD_EXP 8
8323: AND
8324: PUSH
8325: LD_EXP 14
8329: NOT
8330: AND
8331: IFFALSE 8469
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
// begin attackDeltaAllowed := true ;
8339: LD_ADDR_EXP 14
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// InGameOn ;
8347: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8351: LD_EXP 23
8355: PPUSH
8356: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8367: LD_EXP 27
8371: PPUSH
8372: LD_EXP 23
8376: PPUSH
8377: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8381: LD_EXP 23
8385: PPUSH
8386: LD_EXP 27
8390: PPUSH
8391: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8395: LD_EXP 23
8399: PPUSH
8400: LD_STRING DH-1-return
8402: PPUSH
8403: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8407: LD_EXP 27
8411: PPUSH
8412: LD_STRING DA-1-return
8414: PPUSH
8415: CALL_OW 88
// InGameOff ;
8419: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8423: LD_STRING ODelta
8425: PPUSH
8426: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8467
// SetSide ( i , 2 ) ;
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 235
8465: GO 8450
8467: POP
8468: POP
// end ;
8469: PPOPN 1
8471: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 14
8481: NOT
8482: AND
8483: IFFALSE 8496
8485: GO 8487
8487: DISABLE
// spottedBeforeRadio := true ;
8488: LD_ADDR_EXP 6
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
8496: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8497: LD_EXP 14
8501: PUSH
8502: LD_EXP 30
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: PUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 255
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: AND
8525: PUSH
8526: LD_EXP 20
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: PUSH
8537: LD_EXP 10
8541: NOT
8542: AND
8543: IFFALSE 9771
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin trap := 0 ;
8553: LD_ADDR_EXP 17
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8561: LD_INT 420
8563: PPUSH
8564: CALL_OW 67
// DialogueOn ;
8568: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8572: LD_EXP 30
8576: PPUSH
8577: LD_STRING DMar-1-radio
8579: PPUSH
8580: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8584: LD_EXP 23
8588: PPUSH
8589: LD_STRING DH-1-radio
8591: PPUSH
8592: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8596: LD_EXP 30
8600: PPUSH
8601: LD_STRING DMar-2-radio
8603: PPUSH
8604: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8608: LD_EXP 23
8612: PPUSH
8613: LD_STRING DH-2-radio
8615: PPUSH
8616: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8620: LD_EXP 26
8624: PPUSH
8625: CALL_OW 302
8629: PUSH
8630: LD_EXP 29
8634: PPUSH
8635: CALL_OW 302
8639: OR
8640: IFFALSE 9771
// begin case Query ( Q1Trap ) of 1 :
8642: LD_STRING Q1Trap
8644: PPUSH
8645: CALL_OW 97
8649: PUSH
8650: LD_INT 1
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8864
8658: POP
// begin if IsOk ( Kamil ) then
8659: LD_EXP 26
8663: PPUSH
8664: CALL_OW 302
8668: IFFALSE 8747
// begin Say ( Kamil , DKam-2-radio ) ;
8670: LD_EXP 26
8674: PPUSH
8675: LD_STRING DKam-2-radio
8677: PPUSH
8678: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8682: LD_EXP 26
8686: PPUSH
8687: LD_STRING DKam-3-radio
8689: PPUSH
8690: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8694: LD_EXP 20
8698: PPUSH
8699: LD_STRING DDelta-3-radio
8701: PPUSH
8702: CALL 74258 0 2
// dwait ( 0 0$01 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8713: LD_EXP 23
8717: PPUSH
8718: LD_STRING DH-3-radio
8720: PPUSH
8721: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8725: LD_EXP 26
8729: PPUSH
8730: LD_STRING DKam-4-radio
8732: PPUSH
8733: CALL_OW 88
// trap := 1 ;
8737: LD_ADDR_EXP 17
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end else
8745: GO 8858
// begin Say ( Sophia , DS-1-radio ) ;
8747: LD_EXP 29
8751: PPUSH
8752: LD_STRING DS-1-radio
8754: PPUSH
8755: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8759: LD_EXP 29
8763: PPUSH
8764: LD_STRING DS-2-radio
8766: PPUSH
8767: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8771: LD_EXP 20
8775: PPUSH
8776: LD_STRING DDelta-2-radio-s
8778: PPUSH
8779: CALL 74258 0 2
// Say ( Sophia , DS-3-radio ) ;
8783: LD_EXP 29
8787: PPUSH
8788: LD_STRING DS-3-radio
8790: PPUSH
8791: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8795: LD_EXP 20
8799: PPUSH
8800: LD_STRING DDelta-3-radio-s
8802: PPUSH
8803: CALL 74258 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8807: LD_EXP 29
8811: PPUSH
8812: LD_STRING DS-4-radio-s
8814: PPUSH
8815: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8819: LD_EXP 20
8823: PPUSH
8824: LD_STRING DDelta-4-radio-s
8826: PPUSH
8827: CALL 74258 0 2
// dwait ( 0 0$01 ) ;
8831: LD_INT 35
8833: PPUSH
8834: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8838: LD_EXP 23
8842: PPUSH
8843: LD_STRING DH-1-trap
8845: PPUSH
8846: CALL_OW 88
// trap := 0 ;
8850: LD_ADDR_EXP 17
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// end ; DialogueOff ;
8858: CALL_OW 7
// end ; 2 :
8862: GO 8882
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8881
8872: POP
// begin DialogueOff ;
8873: CALL_OW 7
// exit ;
8877: GO 9771
// end ; end ;
8879: GO 8882
8881: POP
// if trap = 1 then
8882: LD_EXP 17
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9342
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8892: LD_INT 64
8894: PPUSH
8895: LD_INT 32
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: PPUSH
8904: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8908: LD_INT 64
8910: PPUSH
8911: LD_INT 32
8913: PPUSH
8914: CALL_OW 84
// tmp := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// k := 3 ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 3
8932: ST_TO_ADDR
// if usForces < 3 then
8933: LD_EXP 21
8937: PUSH
8938: LD_INT 3
8940: LESS
8941: IFFALSE 8953
// k := usForces ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 21
8952: ST_TO_ADDR
// for i := 1 to k do
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 2
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9024
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 1
8988: PLUS
8989: PPUSH
8990: LD_EXP 21
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9004: LD_ADDR_EXP 21
9008: PUSH
9009: LD_EXP 21
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 3
9021: ST_TO_ADDR
// end ;
9022: GO 8968
9024: POP
9025: POP
// usPatrol := tmp ;
9026: LD_ADDR_EXP 16
9030: PUSH
9031: LD_VAR 0 3
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9177
// begin if IsInUnit ( i ) then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 310
9058: IFFALSE 9069
// ComExitBuilding ( i ) ;
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: LD_INT 31
9079: PPUSH
9080: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9084: LD_VAR 0 1
9088: PPUSH
9089: LD_INT 70
9091: PPUSH
9092: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_INT 103
9103: PPUSH
9104: LD_INT 43
9106: PPUSH
9107: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_INT 105
9118: PPUSH
9119: CALL_OW 202
// if Difficulty > 1 then
9123: LD_OWVAR 67
9127: PUSH
9128: LD_INT 1
9130: GREATER
9131: IFFALSE 9148
// AddComAgressiveMove ( i , 114 , 69 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 114
9140: PPUSH
9141: LD_INT 69
9143: PPUSH
9144: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 42
9167: PPUSH
9168: LD_INT 20
9170: PPUSH
9171: CALL_OW 174
// end ;
9175: GO 9046
9177: POP
9178: POP
// wait ( 0 0$8 ) ;
9179: LD_INT 280
9181: PPUSH
9182: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9186: LD_INT 64
9188: PPUSH
9189: LD_INT 32
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// for i in tmp do
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_VAR 0 3
9215: PUSH
9216: FOR_IN
9217: IFFALSE 9248
// if IsDead ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 301
9228: IFFALSE 9246
// tmp := tmp diff i ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_VAR 0 3
9239: PUSH
9240: LD_VAR 0 1
9244: DIFF
9245: ST_TO_ADDR
9246: GO 9216
9248: POP
9249: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9250: LD_VAR 0 3
9254: NOT
9255: PUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 95
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 60
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: PUSH
9293: LD_VAR 0 3
9297: EQUAL
9298: OR
9299: IFFALSE 9199
// if tmp then
9301: LD_VAR 0 3
9305: IFFALSE 9332
// begin usPatrol := [ ] ;
9307: LD_ADDR_EXP 16
9311: PUSH
9312: EMPTY
9313: ST_TO_ADDR
// usForces := usForces union tmp ;
9314: LD_ADDR_EXP 21
9318: PUSH
9319: LD_EXP 21
9323: PUSH
9324: LD_VAR 0 3
9328: UNION
9329: ST_TO_ADDR
// end else
9330: GO 9340
// trickyMove := true ;
9332: LD_ADDR_EXP 15
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end else
9340: GO 9771
// begin tmp := [ ] ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// k := 4 ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// if usForces < 4 then
9357: LD_EXP 21
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: IFFALSE 9377
// k := usForces ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_EXP 21
9376: ST_TO_ADDR
// for i := 1 to k do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_VAR 0 2
9391: PUSH
9392: FOR_TO
9393: IFFALSE 9448
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: LD_EXP 21
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 1
9427: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9428: LD_ADDR_EXP 21
9432: PUSH
9433: LD_EXP 21
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 3
9445: ST_TO_ADDR
// end ;
9446: GO 9392
9448: POP
9449: POP
// if Lynch then
9450: LD_EXP 20
9454: IFFALSE 9472
// tmp := tmp ^ Lynch ;
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: LD_VAR 0 3
9465: PUSH
9466: LD_EXP 20
9470: ADD
9471: ST_TO_ADDR
// usPatrol := tmp ;
9472: LD_ADDR_EXP 16
9476: PUSH
9477: LD_VAR 0 3
9481: ST_TO_ADDR
// for i in tmp do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 3
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9586
// begin if IsInUnit ( i ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 310
9504: IFFALSE 9515
// ComExitBuilding ( i ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 69
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 700
9537: PPUSH
9538: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 55
9549: PPUSH
9550: LD_INT 43
9552: PPUSH
9553: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: LD_INT 700
9564: PPUSH
9565: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_INT 42
9576: PPUSH
9577: LD_INT 20
9579: PPUSH
9580: CALL_OW 174
// end ;
9584: GO 9492
9586: POP
9587: POP
// repeat wait ( 0 0$1 ) ;
9588: LD_INT 35
9590: PPUSH
9591: CALL_OW 67
// for i in tmp do
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 3
9604: PUSH
9605: FOR_IN
9606: IFFALSE 9637
// if IsDead ( i ) then
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 301
9617: IFFALSE 9635
// tmp := tmp diff i ;
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: LD_VAR 0 1
9633: DIFF
9634: ST_TO_ADDR
9635: GO 9605
9637: POP
9638: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9639: LD_VAR 0 3
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 95
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 60
9665: PUSH
9666: EMPTY
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_VAR 0 3
9686: EQUAL
9687: OR
9688: IFFALSE 9588
// if not tmp then
9690: LD_VAR 0 3
9694: NOT
9695: IFFALSE 9707
// trickyMove := true else
9697: LD_ADDR_EXP 15
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
9705: GO 9714
// usPatrol := [ ] ;
9707: LD_ADDR_EXP 16
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// if tmp diff Lynch then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_EXP 20
9723: DIFF
9724: IFFALSE 9748
// usForces := usForces union ( tmp diff Lynch ) ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_EXP 20
9745: DIFF
9746: UNION
9747: ST_TO_ADDR
// if IsOk ( Lynch ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: IFFALSE 9771
// ComEnterUnit ( Lynch , Delta ) ;
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 120
// end ; end ; end ;
9771: PPOPN 3
9773: END
// every 0 0$1 trigger trickyMove do
9774: LD_EXP 15
9778: IFFALSE 9790
9780: GO 9782
9782: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9783: LD_STRING ACH_TRAP
9785: PPUSH
9786: CALL_OW 543
9790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9791: LD_INT 22
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9835: LD_STRING ACH_SCRAP
9837: PPUSH
9838: CALL_OW 543
9842: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9843: LD_EXP 16
9847: PPUSH
9848: LD_INT 101
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 23
9870: PPUSH
9871: CALL_OW 292
9875: AND
9876: IFFALSE 10009
9878: GO 9880
9880: DISABLE
// begin if not trap then
9881: LD_EXP 17
9885: NOT
9886: IFFALSE 9914
// begin Say ( Heike , DH-2-trap ) ;
9888: LD_EXP 23
9892: PPUSH
9893: LD_STRING DH-2-trap
9895: PPUSH
9896: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9900: LD_EXP 25
9904: PPUSH
9905: LD_STRING DM-2-trap
9907: PPUSH
9908: CALL_OW 88
// end else
9912: GO 9926
// begin Say ( Heike , DH-1-trap-a ) ;
9914: LD_EXP 23
9918: PPUSH
9919: LD_STRING DH-1-trap-a
9921: PPUSH
9922: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// until trickyMove ;
9933: LD_EXP 15
9937: IFFALSE 9926
// Say ( Heike , DH-3-trap ) ;
9939: LD_EXP 23
9943: PPUSH
9944: LD_STRING DH-3-trap
9946: PPUSH
9947: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9951: LD_EXP 24
9955: PPUSH
9956: CALL_OW 302
9960: PUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 302
9970: AND
9971: IFFALSE 10009
// begin Say ( Givi , DG-3-trap ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DG-3-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9985: LD_EXP 28
9989: PPUSH
9990: LD_STRING DK-3-trap
9992: PPUSH
9993: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9997: LD_EXP 24
10001: PPUSH
10002: LD_STRING DG-4-trap
10004: PPUSH
10005: CALL_OW 88
// end ; end ;
10009: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 255
10017: PUSH
10018: LD_INT 2
10020: EQUAL
10021: PUSH
10022: LD_EXP 14
10026: AND
10027: IFFALSE 10186
10029: GO 10031
10031: DISABLE
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// begin if not IsOk ( Kaia ) then
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 302
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10186
// if tick < 5 5$00 then
10050: LD_OWVAR 1
10054: PUSH
10055: LD_INT 10500
10057: LESS
10058: IFFALSE 10067
// SetAchievement ( ACH_DELTA ) ;
10060: LD_STRING ACH_DELTA
10062: PPUSH
10063: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10067: LD_EXP 28
10071: PPUSH
10072: LD_STRING DK-1-capture
10074: PPUSH
10075: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10079: LD_EXP 23
10083: PPUSH
10084: LD_STRING DH-1-capture
10086: PPUSH
10087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10186
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10184
// begin if IsInUnit ( i ) then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: IFFALSE 10167
// ComExitBuilding ( i ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10167: LD_VAR 0 1
10171: PPUSH
10172: LD_INT 38
10174: PPUSH
10175: LD_INT 23
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10144
10184: POP
10185: POP
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10189: LD_INT 3
10191: PPUSH
10192: CALL_OW 255
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: PUSH
10201: LD_EXP 14
10205: AND
10206: IFFALSE 10251
10208: GO 10210
10210: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10211: LD_INT 1
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 322
// DialogueOn ;
10224: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10228: LD_EXP 27
10232: PPUSH
10233: LD_STRING DA-1-capture
10235: PPUSH
10236: CALL_OW 88
// DialogueOff ;
10240: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10244: LD_STRING OTame
10246: PPUSH
10247: CALL_OW 337
// end ;
10251: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10252: LD_INT 1
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: CALL_OW 321
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: PUSH
10267: LD_EXP 14
10271: AND
10272: IFFALSE 10423
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10281: LD_EXP 27
10285: PPUSH
10286: LD_STRING DA-1-ape
10288: PPUSH
10289: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10293: LD_EXP 23
10297: PPUSH
10298: LD_STRING DH-1-ape
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10305: LD_EXP 27
10309: PPUSH
10310: LD_STRING DA-2-ape
10312: PPUSH
10313: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10317: LD_EXP 27
10321: PPUSH
10322: LD_STRING DA-3-ape
10324: PPUSH
10325: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10329: LD_EXP 23
10333: PPUSH
10334: LD_STRING DH-3-ape
10336: PPUSH
10337: CALL_OW 88
// DialogueOff ;
10341: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10345: LD_INT 22
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 25
10357: PUSH
10358: LD_INT 12
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 69
10373: PUSH
10374: LD_INT 0
10376: EQUAL
10377: IFFALSE 10389
// SpawnApeman ( forest , 2 ) ;
10379: LD_INT 1
10381: PPUSH
10382: LD_INT 2
10384: PPUSH
10385: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10389: LD_INT 35
10391: PPUSH
10392: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10396: LD_INT 25
10398: PUSH
10399: LD_INT 12
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PPUSH
10406: CALL_OW 69
10410: PUSH
10411: LD_INT 0
10413: EQUAL
10414: IFFALSE 10389
// YouLost ( Ape ) ;
10416: LD_STRING Ape
10418: PPUSH
10419: CALL_OW 104
// end ;
10423: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10424: LD_EXP 18
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 2
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: LD_OWVAR 67
10451: ARRAY
10452: GREATEREQUAL
10453: IFFALSE 10497
10455: GO 10457
10457: DISABLE
// begin DialogueOn ;
10458: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10462: LD_EXP 27
10466: PPUSH
10467: LD_STRING DA-1-failure
10469: PPUSH
10470: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10474: LD_EXP 27
10478: PPUSH
10479: LD_STRING DA-2-failure
10481: PPUSH
10482: CALL_OW 88
// YouLost ( Failure ) ;
10486: LD_STRING Failure
10488: PPUSH
10489: CALL_OW 104
// DialogueOff ;
10493: CALL_OW 7
// end ;
10497: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10498: LD_EXP 28
10502: PPUSH
10503: CALL_OW 256
10507: PUSH
10508: LD_INT 3
10510: LESS
10511: IFFALSE 10644
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10520: LD_EXP 28
10524: PPUSH
10525: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10529: LD_EXP 28
10533: PPUSH
10534: LD_STRING DK-Kaiaout-1
10536: PPUSH
10537: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10541: LD_EXP 23
10545: PPUSH
10546: LD_STRING DH-Kaiaout-2
10548: PPUSH
10549: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10553: LD_EXP 24
10557: PPUSH
10558: LD_STRING DG-Kaiaout-3
10560: PPUSH
10561: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10565: LD_EXP 23
10569: PPUSH
10570: LD_STRING DH-Kaiaout-4
10572: PPUSH
10573: CALL_OW 88
// if Givi then
10577: LD_EXP 24
10581: IFFALSE 10631
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10583: LD_EXP 24
10587: PPUSH
10588: LD_STRING DG-Kaiaout-5
10590: PPUSH
10591: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10595: LD_EXP 23
10599: PPUSH
10600: LD_STRING DH-Kaiaout-6
10602: PPUSH
10603: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10607: LD_EXP 24
10611: PPUSH
10612: LD_STRING DG-Kaiaout-7
10614: PPUSH
10615: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10619: LD_EXP 23
10623: PPUSH
10624: LD_STRING DH-Kaiaout-8
10626: PPUSH
10627: CALL_OW 88
// end ; DialogueOff ;
10631: CALL_OW 7
// KillUnit ( Kaia ) ;
10635: LD_EXP 28
10639: PPUSH
10640: CALL_OW 66
// end ;
10644: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10645: LD_INT 22
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 23
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_EXP 27
10678: PPUSH
10679: CALL_OW 302
10683: AND
10684: PUSH
10685: LD_EXP 27
10689: PPUSH
10690: CALL_OW 255
10694: PUSH
10695: LD_INT 2
10697: EQUAL
10698: AND
10699: IFFALSE 11685
10701: GO 10703
10703: DISABLE
10704: LD_INT 0
10706: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10707: LD_INT 22
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 34
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: IFFALSE 10848
// begin Query ( QEnemyInSight ) ;
10755: LD_STRING QEnemyInSight
10757: PPUSH
10758: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10762: LD_INT 35
10764: PPUSH
10765: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10769: LD_INT 22
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 34
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: NOT
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 23
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: AND
10846: IFFALSE 10762
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 0
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: ST_TO_ADDR
// InGameOn ;
10882: CALL_OW 8
// if tick <= 10 10$00 then
10886: LD_OWVAR 1
10890: PUSH
10891: LD_INT 21000
10893: LESSEQUAL
10894: IFFALSE 10903
// SetAchievement ( ACH_HSPEED_2 ) ;
10896: LD_STRING ACH_HSPEED_2
10898: PPUSH
10899: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10912: LD_VAR 0 1
10916: PPUSH
10917: LD_EXP 27
10921: PPUSH
10922: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10926: LD_EXP 27
10930: PPUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 119
// wait ( 0 0$1 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10947: LD_EXP 27
10951: PPUSH
10952: LD_STRING DA-1-tame-a
10954: PPUSH
10955: CALL_OW 88
// if IsOk ( Mike ) then
10959: LD_EXP 25
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11006
// begin Say ( Mike , DM-1-tame-a ) ;
10970: LD_EXP 25
10974: PPUSH
10975: LD_STRING DM-1-tame-a
10977: PPUSH
10978: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10982: LD_EXP 29
10986: PPUSH
10987: LD_STRING DS-1-tame-a
10989: PPUSH
10990: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10994: LD_EXP 25
10998: PPUSH
10999: LD_STRING DM-2-tame-a
11001: PPUSH
11002: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// PrepareFarmer ;
11013: CALL 12364 0 0
// CenterOnUnits ( Farmer ) ;
11017: LD_EXP 31
11021: PPUSH
11022: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11026: LD_EXP 31
11030: PPUSH
11031: LD_INT 105
11033: PPUSH
11034: LD_INT 59
11036: PPUSH
11037: CALL_OW 111
// AddComHold ( Farmer ) ;
11041: LD_EXP 31
11045: PPUSH
11046: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11050: LD_EXP 31
11054: PPUSH
11055: LD_STRING DF-1-end
11057: PPUSH
11058: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11062: LD_EXP 27
11066: PPUSH
11067: LD_STRING DA-1-end
11069: PPUSH
11070: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11074: LD_EXP 31
11078: PPUSH
11079: LD_STRING DF-2-end
11081: PPUSH
11082: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11086: LD_EXP 27
11090: PPUSH
11091: LD_STRING DA-2-end
11093: PPUSH
11094: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11098: LD_EXP 31
11102: PPUSH
11103: LD_STRING DF-3-end
11105: PPUSH
11106: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11110: LD_EXP 23
11114: PPUSH
11115: LD_STRING DH-3-end
11117: PPUSH
11118: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11122: LD_EXP 31
11126: PPUSH
11127: LD_STRING DF-4-end
11129: PPUSH
11130: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11134: LD_OWVAR 1
11138: PUSH
11139: LD_INT 52500
11141: PUSH
11142: LD_INT 47250
11144: PUSH
11145: LD_INT 42000
11147: PUSH
11148: LD_INT 31500
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PUSH
11157: LD_OWVAR 67
11161: ARRAY
11162: LESSEQUAL
11163: IFFALSE 11177
// AddMedal ( med1 , 1 ) else
11165: LD_STRING med1
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 101
11175: GO 11188
// AddMedal ( med1 , - 1 ) ;
11177: LD_STRING med1
11179: PPUSH
11180: LD_INT 1
11182: NEG
11183: PPUSH
11184: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11188: LD_INT 22
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 4
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 69
11216: PUSH
11217: LD_INT 0
11219: EQUAL
11220: PUSH
11221: LD_EXP 12
11225: NOT
11226: AND
11227: IFFALSE 11241
// AddMedal ( med2 , 1 ) else
11229: LD_STRING med2
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: CALL_OW 101
11239: GO 11252
// AddMedal ( med2 , - 1 ) ;
11241: LD_STRING med2
11243: PPUSH
11244: LD_INT 1
11246: NEG
11247: PPUSH
11248: CALL_OW 101
// if trickyMove then
11252: LD_EXP 15
11256: IFFALSE 11270
// AddMedal ( med3 , 1 ) else
11258: LD_STRING med3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 101
11268: GO 11300
// if spottedBeforeRadio then
11270: LD_EXP 6
11274: IFFALSE 11289
// AddMedal ( med3 , - 2 ) else
11276: LD_STRING med3
11278: PPUSH
11279: LD_INT 2
11281: NEG
11282: PPUSH
11283: CALL_OW 101
11287: GO 11300
// AddMedal ( med3 , - 1 ) ;
11289: LD_STRING med3
11291: PPUSH
11292: LD_INT 1
11294: NEG
11295: PPUSH
11296: CALL_OW 101
// GiveMedals ( MAIN ) ;
11300: LD_STRING MAIN
11302: PPUSH
11303: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11307: LD_INT 22
11309: PUSH
11310: LD_INT 2
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 69
11335: PPUSH
11336: LD_STRING 02_ape
11338: PPUSH
11339: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 23
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 69
11387: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11397: LD_EXP 23
11401: PPUSH
11402: LD_STRING 02_Heike
11404: PPUSH
11405: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11409: LD_EXP 27
11413: PPUSH
11414: LD_STRING 02_Aviradze
11416: PPUSH
11417: CALL_OW 38
// if Givi then
11421: LD_EXP 24
11425: IFFALSE 11439
// SaveCharacters ( Givi , 02_Givi ) ;
11427: LD_EXP 24
11431: PPUSH
11432: LD_STRING 02_Givi
11434: PPUSH
11435: CALL_OW 38
// if Mike then
11439: LD_EXP 25
11443: IFFALSE 11457
// SaveCharacters ( Mike , 02_Mike ) ;
11445: LD_EXP 25
11449: PPUSH
11450: LD_STRING 02_Mike
11452: PPUSH
11453: CALL_OW 38
// if Kamil then
11457: LD_EXP 26
11461: IFFALSE 11475
// SaveCharacters ( Kamil , 02_Kamil ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING 02_Kamil
11470: PPUSH
11471: CALL_OW 38
// if Kaia then
11475: LD_EXP 28
11479: IFFALSE 11493
// SaveCharacters ( Kaia , 02_Kaia ) ;
11481: LD_EXP 28
11485: PPUSH
11486: LD_STRING 02_Kaia
11488: PPUSH
11489: CALL_OW 38
// if Sophia then
11493: LD_EXP 29
11497: IFFALSE 11511
// SaveCharacters ( Sophia , 02_Sophia ) ;
11499: LD_EXP 29
11503: PPUSH
11504: LD_STRING 02_Sophia
11506: PPUSH
11507: CALL_OW 38
// if Markov then
11511: LD_EXP 30
11515: IFFALSE 11529
// SaveCharacters ( Markov , 02_Markov ) ;
11517: LD_EXP 30
11521: PPUSH
11522: LD_STRING 02_Markov
11524: PPUSH
11525: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11529: LD_VAR 0 1
11533: PUSH
11534: LD_EXP 23
11538: PUSH
11539: LD_EXP 27
11543: PUSH
11544: LD_EXP 24
11548: PUSH
11549: LD_EXP 25
11553: PUSH
11554: LD_EXP 26
11558: PUSH
11559: LD_EXP 29
11563: PUSH
11564: LD_EXP 28
11568: PUSH
11569: LD_EXP 30
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: DIFF
11584: IFFALSE 11649
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11586: LD_VAR 0 1
11590: PUSH
11591: LD_EXP 23
11595: PUSH
11596: LD_EXP 27
11600: PUSH
11601: LD_EXP 24
11605: PUSH
11606: LD_EXP 25
11610: PUSH
11611: LD_EXP 26
11615: PUSH
11616: LD_EXP 29
11620: PUSH
11621: LD_EXP 28
11625: PUSH
11626: LD_EXP 30
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: DIFF
11641: PPUSH
11642: LD_STRING 02_others
11644: PPUSH
11645: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11649: LD_STRING enableBioCharacter(BIO_KRAY)
11651: PPUSH
11652: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11656: LD_STRING enableBioCharacter(BIO_AVIR)
11658: PPUSH
11659: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11663: LD_STRING enableBioCharacter(BIO_SOPH)
11665: PPUSH
11666: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11670: LD_STRING enableBioCharacter(BIO_KAMI)
11672: PPUSH
11673: CALL_OW 559
// YouWin ;
11677: CALL_OW 103
// InGameOff ;
11681: CALL_OW 9
// end ;
11685: PPOPN 1
11687: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11688: LD_OWVAR 1
11692: PUSH
11693: LD_EXP 13
11697: GREATER
11698: PUSH
11699: LD_EXP 4
11703: AND
11704: IFFALSE 11744
11706: GO 11708
11708: DISABLE
// begin InGameOn ;
11709: CALL_OW 8
// PrepareFarmer ;
11713: CALL 12364 0 0
// CenterNowOnUnits ( Farmer ) ;
11717: LD_EXP 31
11721: PPUSH
11722: CALL_OW 87
// wait ( 0 0$2 ) ;
11726: LD_INT 70
11728: PPUSH
11729: CALL_OW 67
// YouLost ( Farmer ) ;
11733: LD_STRING Farmer
11735: PPUSH
11736: CALL_OW 104
// InGameOff ;
11740: CALL_OW 9
// end ; end_of_file
11744: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// uc_side := 2 ;
11750: LD_ADDR_OWVAR 20
11754: PUSH
11755: LD_INT 2
11757: ST_TO_ADDR
// uc_nation := 2 ;
11758: LD_ADDR_OWVAR 21
11762: PUSH
11763: LD_INT 2
11765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11766: LD_ADDR_EXP 23
11770: PUSH
11771: LD_STRING Heike
11773: PPUSH
11774: LD_EXP 1
11778: NOT
11779: PPUSH
11780: LD_EXP 2
11784: PPUSH
11785: CALL 32904 0 3
11789: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11790: LD_EXP 23
11794: PPUSH
11795: LD_INT 83
11797: PPUSH
11798: LD_INT 72
11800: PPUSH
11801: LD_INT 0
11803: PPUSH
11804: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_STRING Givi
11815: PPUSH
11816: LD_EXP 1
11820: NOT
11821: PPUSH
11822: LD_EXP 2
11826: PPUSH
11827: CALL 32904 0 3
11831: ST_TO_ADDR
// if Givi then
11832: LD_EXP 24
11836: IFFALSE 11856
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11838: LD_EXP 24
11842: PPUSH
11843: LD_INT 87
11845: PPUSH
11846: LD_INT 76
11848: PPUSH
11849: LD_INT 0
11851: PPUSH
11852: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11856: LD_ADDR_EXP 25
11860: PUSH
11861: LD_STRING Mike
11863: PPUSH
11864: LD_EXP 1
11868: NOT
11869: PPUSH
11870: LD_EXP 2
11874: PPUSH
11875: CALL 32904 0 3
11879: ST_TO_ADDR
// if Mike then
11880: LD_EXP 25
11884: IFFALSE 11904
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11886: LD_EXP 25
11890: PPUSH
11891: LD_INT 84
11893: PPUSH
11894: LD_INT 76
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11904: LD_ADDR_EXP 26
11908: PUSH
11909: LD_STRING Kamil
11911: PPUSH
11912: LD_EXP 1
11916: NOT
11917: PPUSH
11918: LD_EXP 2
11922: PPUSH
11923: CALL 32904 0 3
11927: ST_TO_ADDR
// if Kamil then
11928: LD_EXP 26
11932: IFFALSE 11952
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11934: LD_EXP 26
11938: PPUSH
11939: LD_INT 85
11941: PPUSH
11942: LD_INT 78
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: CALL_OW 48
// uc_side := 5 ;
11952: LD_ADDR_OWVAR 20
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
// uc_nation := 2 ;
11960: LD_ADDR_OWVAR 21
11964: PUSH
11965: LD_INT 2
11967: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11968: LD_ADDR_EXP 27
11972: PUSH
11973: LD_STRING Aviradze
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: LD_STRING 
11981: PPUSH
11982: CALL 32904 0 3
11986: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11987: LD_EXP 27
11991: PPUSH
11992: LD_INT 106
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12005: LD_EXP 27
12009: PPUSH
12010: LD_INT 103
12012: PPUSH
12013: LD_INT 38
12015: PPUSH
12016: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12020: LD_ADDR_EXP 28
12024: PUSH
12025: LD_STRING Kaia
12027: PPUSH
12028: LD_INT 0
12030: PPUSH
12031: LD_STRING 
12033: PPUSH
12034: CALL 32904 0 3
12038: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12039: LD_EXP 28
12043: PPUSH
12044: LD_INT 100
12046: PPUSH
12047: LD_INT 34
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12057: LD_EXP 28
12061: PPUSH
12062: LD_INT 100
12064: PPUSH
12065: LD_INT 39
12067: PPUSH
12068: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12072: LD_ADDR_EXP 29
12076: PUSH
12077: LD_STRING Sophia
12079: PPUSH
12080: LD_INT 0
12082: PPUSH
12083: LD_STRING 
12085: PPUSH
12086: CALL 32904 0 3
12090: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12091: LD_EXP 29
12095: PPUSH
12096: LD_INT 109
12098: PPUSH
12099: LD_INT 50
12101: PPUSH
12102: LD_INT 0
12104: PPUSH
12105: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12109: LD_EXP 29
12113: PPUSH
12114: LD_INT 100
12116: PPUSH
12117: LD_INT 39
12119: PPUSH
12120: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12124: LD_ADDR_EXP 30
12128: PUSH
12129: LD_STRING Markov
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: LD_STRING 
12137: PPUSH
12138: CALL 32904 0 3
12142: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12143: LD_INT 5
12145: PPUSH
12146: LD_INT 3
12148: PPUSH
12149: LD_INT 21
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 42
12160: PPUSH
12161: LD_INT 90
12163: PUSH
12164: LD_INT 70
12166: PUSH
12167: LD_INT 60
12169: PUSH
12170: LD_INT 50
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_OWVAR 67
12183: ARRAY
12184: PPUSH
12185: CALL 241 0 7
// veh := CreateVehicle ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: CALL_OW 45
12198: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 4
12206: PPUSH
12207: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 109
12218: PPUSH
12219: LD_INT 38
12221: PPUSH
12222: LD_INT 0
12224: PPUSH
12225: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12229: LD_EXP 30
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12243: LD_EXP 28
12247: PPUSH
12248: LD_EXP 27
12252: PPUSH
12253: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12257: LD_EXP 27
12261: PPUSH
12262: LD_EXP 28
12266: PPUSH
12267: CALL_OW 119
// if not Givi or not Mike then
12271: LD_EXP 24
12275: NOT
12276: PUSH
12277: LD_EXP 25
12281: NOT
12282: OR
12283: IFFALSE 12359
// begin uc_nation := 2 ;
12285: LD_ADDR_OWVAR 21
12289: PUSH
12290: LD_INT 2
12292: ST_TO_ADDR
// uc_side := 5 ;
12293: LD_ADDR_OWVAR 20
12297: PUSH
12298: LD_INT 5
12300: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 380
// un := CreateHuman ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: CALL_OW 44
12323: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12324: LD_VAR 0 2
12328: PPUSH
12329: LD_INT 112
12331: PPUSH
12332: LD_INT 40
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12345: LD_VAR 0 2
12349: PPUSH
12350: LD_EXP 27
12354: PPUSH
12355: CALL_OW 119
// end ; end ;
12359: LD_VAR 0 1
12363: RET
// export function PrepareFarmer ; var i ; begin
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
// uc_side := 5 ;
12368: LD_ADDR_OWVAR 20
12372: PUSH
12373: LD_INT 5
12375: ST_TO_ADDR
// uc_nation := 2 ;
12376: LD_ADDR_OWVAR 21
12380: PUSH
12381: LD_INT 2
12383: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12384: LD_ADDR_EXP 31
12388: PUSH
12389: LD_STRING Farmer
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: LD_STRING 
12397: PPUSH
12398: CALL 32904 0 3
12402: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12403: LD_EXP 31
12407: PPUSH
12408: LD_INT 106
12410: PPUSH
12411: LD_INT 62
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 48
// for i := 1 to 5 do
12421: LD_ADDR_VAR 0 2
12425: PUSH
12426: DOUBLE
12427: LD_INT 1
12429: DEC
12430: ST_TO_ADDR
12431: LD_INT 5
12433: PUSH
12434: FOR_TO
12435: IFFALSE 12473
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12437: LD_INT 1
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12450: CALL_OW 44
12454: PPUSH
12455: LD_INT 105
12457: PPUSH
12458: LD_INT 64
12460: PPUSH
12461: LD_INT 3
12463: PPUSH
12464: LD_INT 0
12466: PPUSH
12467: CALL_OW 50
// end ;
12471: GO 12434
12473: POP
12474: POP
// end ; end_of_file
12475: LD_VAR 0 1
12479: RET
// every 2 2$20 + 0 0$10 do
12480: GO 12482
12482: DISABLE
// begin enable ;
12483: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12484: LD_INT 1
12486: PPUSH
12487: LD_INT 5
12489: PPUSH
12490: CALL_OW 12
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 55
// if tick > 6 6$00 then
12505: LD_OWVAR 1
12509: PUSH
12510: LD_INT 12600
12512: GREATER
12513: IFFALSE 12516
// disable ;
12515: DISABLE
// end ; end_of_file
12516: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12517: LD_VAR 0 1
12521: PUSH
12522: LD_EXP 23
12526: EQUAL
12527: IFFALSE 12536
// YouLost ( Heike ) ;
12529: LD_STRING Heike
12531: PPUSH
12532: CALL_OW 104
// if un = Aviradze then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 27
12545: EQUAL
12546: IFFALSE 12555
// YouLost ( Aviradze ) ;
12548: LD_STRING Aviradze
12550: PPUSH
12551: CALL_OW 104
// if un = usLab then
12555: LD_VAR 0 1
12559: PUSH
12560: LD_INT 3
12562: EQUAL
12563: IFFALSE 12572
// YouLost ( Lab ) ;
12565: LD_STRING Lab
12567: PPUSH
12568: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12572: LD_VAR 0 1
12576: PUSH
12577: LD_INT 22
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 23
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: PUSH
12617: LD_EXP 23
12621: PUSH
12622: LD_EXP 27
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: DIFF
12631: IN
12632: PUSH
12633: LD_EXP 4
12637: AND
12638: IFFALSE 12654
// lostCounter := lostCounter + 1 ;
12640: LD_ADDR_EXP 18
12644: PUSH
12645: LD_EXP 18
12649: PUSH
12650: LD_INT 1
12652: PLUS
12653: ST_TO_ADDR
// end ;
12654: PPOPN 1
12656: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12657: LD_INT 23
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_INT 0
12688: EQUAL
12689: PUSH
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: AND
12723: IFFALSE 12735
12725: GO 12727
12727: DISABLE
// YouLost ( Eng ) ;
12728: LD_STRING Eng
12730: PPUSH
12731: CALL_OW 104
12735: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 22
12745: IN
12746: PUSH
12747: LD_VAR 0 2
12751: PUSH
12752: LD_INT 2
12754: EQUAL
12755: AND
12756: IFFALSE 12788
// begin usSci := usSci diff un ;
12758: LD_ADDR_EXP 22
12762: PUSH
12763: LD_EXP 22
12767: PUSH
12768: LD_VAR 0 1
12772: DIFF
12773: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12774: LD_ADDR_EXP 9
12778: PUSH
12779: LD_EXP 9
12783: PUSH
12784: LD_INT 1
12786: PLUS
12787: ST_TO_ADDR
// end ; end ;
12788: PPOPN 3
12790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12791: LD_VAR 0 1
12795: PUSH
12796: LD_INT 2
12798: EQUAL
12799: PUSH
12800: LD_VAR 0 2
12804: PUSH
12805: LD_INT 5
12807: EQUAL
12808: AND
12809: IFFALSE 12818
// YouLost ( FriendlyFire ) ;
12811: LD_STRING FriendlyFire
12813: PPUSH
12814: CALL_OW 104
// end ; end_of_file end_of_file
12818: PPOPN 2
12820: END
// export globalGameSaveCounter ; every 0 0$1 do
12821: GO 12823
12823: DISABLE
// begin enable ;
12824: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12825: LD_STRING updateTimer(
12827: PUSH
12828: LD_OWVAR 1
12832: STR
12833: PUSH
12834: LD_STRING );
12836: STR
12837: PPUSH
12838: CALL_OW 559
// end ;
12842: END
// every 0 0$1 do
12843: GO 12845
12845: DISABLE
// begin globalGameSaveCounter := 0 ;
12846: LD_ADDR_EXP 32
12850: PUSH
12851: LD_INT 0
12853: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12854: LD_STRING setGameSaveCounter(0)
12856: PPUSH
12857: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12861: LD_STRING initStreamRollete();
12863: PPUSH
12864: CALL_OW 559
// InitStreamMode ;
12868: CALL 14194 0 0
// DefineStreamItems ( false ) ;
12872: LD_INT 0
12874: PPUSH
12875: CALL 14658 0 1
// end ;
12879: END
// export function SOS_MapStart ( ) ; begin
12880: LD_INT 0
12882: PPUSH
// if streamModeActive then
12883: LD_EXP 33
12887: IFFALSE 12896
// DefineStreamItems ( true ) ;
12889: LD_INT 1
12891: PPUSH
12892: CALL 14658 0 1
// UpdateLuaVariables ( ) ;
12896: CALL 12913 0 0
// UpdateFactoryWaypoints ( ) ;
12900: CALL 27519 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12904: CALL 27776 0 0
// end ;
12908: LD_VAR 0 1
12912: RET
// function UpdateLuaVariables ( ) ; begin
12913: LD_INT 0
12915: PPUSH
// if globalGameSaveCounter then
12916: LD_EXP 32
12920: IFFALSE 12954
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12922: LD_ADDR_EXP 32
12926: PUSH
12927: LD_EXP 32
12931: PPUSH
12932: CALL 71700 0 1
12936: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12937: LD_STRING setGameSaveCounter(
12939: PUSH
12940: LD_EXP 32
12944: STR
12945: PUSH
12946: LD_STRING )
12948: STR
12949: PPUSH
12950: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12954: LD_STRING setGameDifficulty(
12956: PUSH
12957: LD_OWVAR 67
12961: STR
12962: PUSH
12963: LD_STRING )
12965: STR
12966: PPUSH
12967: CALL_OW 559
// end ;
12971: LD_VAR 0 1
12975: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12976: LD_INT 0
12978: PPUSH
// if p2 = stream_mode then
12979: LD_VAR 0 2
12983: PUSH
12984: LD_INT 100
12986: EQUAL
12987: IFFALSE 13990
// begin if not StreamModeActive then
12989: LD_EXP 33
12993: NOT
12994: IFFALSE 13004
// StreamModeActive := true ;
12996: LD_ADDR_EXP 33
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 0 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 0
13011: EQUAL
13012: IFFALSE 13018
// InitStreamMode ;
13014: CALL 14194 0 0
// if p3 = 1 then
13018: LD_VAR 0 3
13022: PUSH
13023: LD_INT 1
13025: EQUAL
13026: IFFALSE 13036
// sRocket := true ;
13028: LD_ADDR_EXP 38
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// if p3 = 2 then
13036: LD_VAR 0 3
13040: PUSH
13041: LD_INT 2
13043: EQUAL
13044: IFFALSE 13054
// sSpeed := true ;
13046: LD_ADDR_EXP 37
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if p3 = 3 then
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 3
13061: EQUAL
13062: IFFALSE 13072
// sEngine := true ;
13064: LD_ADDR_EXP 39
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// if p3 = 4 then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 4
13079: EQUAL
13080: IFFALSE 13090
// sSpec := true ;
13082: LD_ADDR_EXP 36
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// if p3 = 5 then
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 5
13097: EQUAL
13098: IFFALSE 13108
// sLevel := true ;
13100: LD_ADDR_EXP 40
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// if p3 = 6 then
13108: LD_VAR 0 3
13112: PUSH
13113: LD_INT 6
13115: EQUAL
13116: IFFALSE 13126
// sArmoury := true ;
13118: LD_ADDR_EXP 41
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// if p3 = 7 then
13126: LD_VAR 0 3
13130: PUSH
13131: LD_INT 7
13133: EQUAL
13134: IFFALSE 13144
// sRadar := true ;
13136: LD_ADDR_EXP 42
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// if p3 = 8 then
13144: LD_VAR 0 3
13148: PUSH
13149: LD_INT 8
13151: EQUAL
13152: IFFALSE 13162
// sBunker := true ;
13154: LD_ADDR_EXP 43
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// if p3 = 9 then
13162: LD_VAR 0 3
13166: PUSH
13167: LD_INT 9
13169: EQUAL
13170: IFFALSE 13180
// sHack := true ;
13172: LD_ADDR_EXP 44
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// if p3 = 10 then
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 10
13187: EQUAL
13188: IFFALSE 13198
// sFire := true ;
13190: LD_ADDR_EXP 45
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 11 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 11
13205: EQUAL
13206: IFFALSE 13216
// sRefresh := true ;
13208: LD_ADDR_EXP 46
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// if p3 = 12 then
13216: LD_VAR 0 3
13220: PUSH
13221: LD_INT 12
13223: EQUAL
13224: IFFALSE 13234
// sExp := true ;
13226: LD_ADDR_EXP 47
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// if p3 = 13 then
13234: LD_VAR 0 3
13238: PUSH
13239: LD_INT 13
13241: EQUAL
13242: IFFALSE 13252
// sDepot := true ;
13244: LD_ADDR_EXP 48
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if p3 = 14 then
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 14
13259: EQUAL
13260: IFFALSE 13270
// sFlag := true ;
13262: LD_ADDR_EXP 49
13266: PUSH
13267: LD_INT 1
13269: ST_TO_ADDR
// if p3 = 15 then
13270: LD_VAR 0 3
13274: PUSH
13275: LD_INT 15
13277: EQUAL
13278: IFFALSE 13288
// sKamikadze := true ;
13280: LD_ADDR_EXP 57
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if p3 = 16 then
13288: LD_VAR 0 3
13292: PUSH
13293: LD_INT 16
13295: EQUAL
13296: IFFALSE 13306
// sTroll := true ;
13298: LD_ADDR_EXP 58
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// if p3 = 17 then
13306: LD_VAR 0 3
13310: PUSH
13311: LD_INT 17
13313: EQUAL
13314: IFFALSE 13324
// sSlow := true ;
13316: LD_ADDR_EXP 59
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// if p3 = 18 then
13324: LD_VAR 0 3
13328: PUSH
13329: LD_INT 18
13331: EQUAL
13332: IFFALSE 13342
// sLack := true ;
13334: LD_ADDR_EXP 60
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// if p3 = 19 then
13342: LD_VAR 0 3
13346: PUSH
13347: LD_INT 19
13349: EQUAL
13350: IFFALSE 13360
// sTank := true ;
13352: LD_ADDR_EXP 62
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// if p3 = 20 then
13360: LD_VAR 0 3
13364: PUSH
13365: LD_INT 20
13367: EQUAL
13368: IFFALSE 13378
// sRemote := true ;
13370: LD_ADDR_EXP 63
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// if p3 = 21 then
13378: LD_VAR 0 3
13382: PUSH
13383: LD_INT 21
13385: EQUAL
13386: IFFALSE 13396
// sPowell := true ;
13388: LD_ADDR_EXP 64
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// if p3 = 22 then
13396: LD_VAR 0 3
13400: PUSH
13401: LD_INT 22
13403: EQUAL
13404: IFFALSE 13414
// sTeleport := true ;
13406: LD_ADDR_EXP 67
13410: PUSH
13411: LD_INT 1
13413: ST_TO_ADDR
// if p3 = 23 then
13414: LD_VAR 0 3
13418: PUSH
13419: LD_INT 23
13421: EQUAL
13422: IFFALSE 13432
// sOilTower := true ;
13424: LD_ADDR_EXP 69
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
// if p3 = 24 then
13432: LD_VAR 0 3
13436: PUSH
13437: LD_INT 24
13439: EQUAL
13440: IFFALSE 13450
// sShovel := true ;
13442: LD_ADDR_EXP 70
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
// if p3 = 25 then
13450: LD_VAR 0 3
13454: PUSH
13455: LD_INT 25
13457: EQUAL
13458: IFFALSE 13468
// sSheik := true ;
13460: LD_ADDR_EXP 71
13464: PUSH
13465: LD_INT 1
13467: ST_TO_ADDR
// if p3 = 26 then
13468: LD_VAR 0 3
13472: PUSH
13473: LD_INT 26
13475: EQUAL
13476: IFFALSE 13486
// sEarthquake := true ;
13478: LD_ADDR_EXP 73
13482: PUSH
13483: LD_INT 1
13485: ST_TO_ADDR
// if p3 = 27 then
13486: LD_VAR 0 3
13490: PUSH
13491: LD_INT 27
13493: EQUAL
13494: IFFALSE 13504
// sAI := true ;
13496: LD_ADDR_EXP 74
13500: PUSH
13501: LD_INT 1
13503: ST_TO_ADDR
// if p3 = 28 then
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 28
13511: EQUAL
13512: IFFALSE 13522
// sCargo := true ;
13514: LD_ADDR_EXP 77
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// if p3 = 29 then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_INT 29
13529: EQUAL
13530: IFFALSE 13540
// sDLaser := true ;
13532: LD_ADDR_EXP 78
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// if p3 = 30 then
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 30
13547: EQUAL
13548: IFFALSE 13558
// sExchange := true ;
13550: LD_ADDR_EXP 79
13554: PUSH
13555: LD_INT 1
13557: ST_TO_ADDR
// if p3 = 31 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 31
13565: EQUAL
13566: IFFALSE 13576
// sFac := true ;
13568: LD_ADDR_EXP 80
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// if p3 = 32 then
13576: LD_VAR 0 3
13580: PUSH
13581: LD_INT 32
13583: EQUAL
13584: IFFALSE 13594
// sPower := true ;
13586: LD_ADDR_EXP 81
13590: PUSH
13591: LD_INT 1
13593: ST_TO_ADDR
// if p3 = 33 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 33
13601: EQUAL
13602: IFFALSE 13612
// sRandom := true ;
13604: LD_ADDR_EXP 82
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// if p3 = 34 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 34
13619: EQUAL
13620: IFFALSE 13630
// sShield := true ;
13622: LD_ADDR_EXP 83
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 35 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 35
13637: EQUAL
13638: IFFALSE 13648
// sTime := true ;
13640: LD_ADDR_EXP 84
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 36 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 36
13655: EQUAL
13656: IFFALSE 13666
// sTools := true ;
13658: LD_ADDR_EXP 85
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 101 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 101
13673: EQUAL
13674: IFFALSE 13684
// sSold := true ;
13676: LD_ADDR_EXP 50
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 102 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 102
13691: EQUAL
13692: IFFALSE 13702
// sDiff := true ;
13694: LD_ADDR_EXP 51
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 103 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 103
13709: EQUAL
13710: IFFALSE 13720
// sFog := true ;
13712: LD_ADDR_EXP 54
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 104 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 104
13727: EQUAL
13728: IFFALSE 13738
// sReset := true ;
13730: LD_ADDR_EXP 55
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 105 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 105
13745: EQUAL
13746: IFFALSE 13756
// sSun := true ;
13748: LD_ADDR_EXP 56
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 106 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 106
13763: EQUAL
13764: IFFALSE 13774
// sTiger := true ;
13766: LD_ADDR_EXP 52
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 107 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 107
13781: EQUAL
13782: IFFALSE 13792
// sBomb := true ;
13784: LD_ADDR_EXP 53
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 108 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 108
13799: EQUAL
13800: IFFALSE 13810
// sWound := true ;
13802: LD_ADDR_EXP 61
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 109 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 109
13817: EQUAL
13818: IFFALSE 13828
// sBetray := true ;
13820: LD_ADDR_EXP 65
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 110 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 110
13835: EQUAL
13836: IFFALSE 13846
// sContamin := true ;
13838: LD_ADDR_EXP 66
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 111 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 111
13853: EQUAL
13854: IFFALSE 13864
// sOil := true ;
13856: LD_ADDR_EXP 68
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 112 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 112
13871: EQUAL
13872: IFFALSE 13882
// sStu := true ;
13874: LD_ADDR_EXP 72
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 113 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 113
13889: EQUAL
13890: IFFALSE 13900
// sBazooka := true ;
13892: LD_ADDR_EXP 75
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 114 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 114
13907: EQUAL
13908: IFFALSE 13918
// sMortar := true ;
13910: LD_ADDR_EXP 76
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 115 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 115
13925: EQUAL
13926: IFFALSE 13936
// sRanger := true ;
13928: LD_ADDR_EXP 86
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 116 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 116
13943: EQUAL
13944: IFFALSE 13954
// sComputer := true ;
13946: LD_ADDR_EXP 87
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 117 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 117
13961: EQUAL
13962: IFFALSE 13972
// s30 := true ;
13964: LD_ADDR_EXP 88
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 118 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 118
13979: EQUAL
13980: IFFALSE 13990
// s60 := true ;
13982: LD_ADDR_EXP 89
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// end ; if p2 = hack_mode then
13990: LD_VAR 0 2
13994: PUSH
13995: LD_INT 101
13997: EQUAL
13998: IFFALSE 14126
// begin case p3 of 1 :
14000: LD_VAR 0 3
14004: PUSH
14005: LD_INT 1
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14020
14013: POP
// hHackUnlimitedResources ; 2 :
14014: CALL 26265 0 0
14018: GO 14126
14020: LD_INT 2
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14035
14028: POP
// hHackSetLevel10 ; 3 :
14029: CALL 26398 0 0
14033: GO 14126
14035: LD_INT 3
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14050
14043: POP
// hHackSetLevel10YourUnits ; 4 :
14044: CALL 26483 0 0
14048: GO 14126
14050: LD_INT 4
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14065
14058: POP
// hHackInvincible ; 5 :
14059: CALL 26931 0 0
14063: GO 14126
14065: LD_INT 5
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14080
14073: POP
// hHackInvisible ; 6 :
14074: CALL 27042 0 0
14078: GO 14126
14080: LD_INT 6
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14095
14088: POP
// hHackChangeYourSide ; 7 :
14089: CALL 27099 0 0
14093: GO 14126
14095: LD_INT 7
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14110
14103: POP
// hHackChangeUnitSide ; 8 :
14104: CALL 27141 0 0
14108: GO 14126
14110: LD_INT 8
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14125
14118: POP
// hHackFog ; end ;
14119: CALL 27242 0 0
14123: GO 14126
14125: POP
// end ; if p2 = game_save_mode then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_INT 102
14133: EQUAL
14134: IFFALSE 14189
// begin if p3 = 1 then
14136: LD_VAR 0 3
14140: PUSH
14141: LD_INT 1
14143: EQUAL
14144: IFFALSE 14156
// globalGameSaveCounter := p4 ;
14146: LD_ADDR_EXP 32
14150: PUSH
14151: LD_VAR 0 4
14155: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14156: LD_VAR 0 3
14160: PUSH
14161: LD_INT 2
14163: EQUAL
14164: PUSH
14165: LD_EXP 32
14169: AND
14170: IFFALSE 14189
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14172: LD_STRING setGameSaveCounter(
14174: PUSH
14175: LD_EXP 32
14179: STR
14180: PUSH
14181: LD_STRING )
14183: STR
14184: PPUSH
14185: CALL_OW 559
// end ; end ;
14189: LD_VAR 0 7
14193: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14194: LD_INT 0
14196: PPUSH
// streamModeActive := false ;
14197: LD_ADDR_EXP 33
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// normalCounter := 36 ;
14205: LD_ADDR_EXP 34
14209: PUSH
14210: LD_INT 36
14212: ST_TO_ADDR
// hardcoreCounter := 18 ;
14213: LD_ADDR_EXP 35
14217: PUSH
14218: LD_INT 18
14220: ST_TO_ADDR
// sRocket := false ;
14221: LD_ADDR_EXP 38
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sSpeed := false ;
14229: LD_ADDR_EXP 37
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sEngine := false ;
14237: LD_ADDR_EXP 39
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sSpec := false ;
14245: LD_ADDR_EXP 36
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sLevel := false ;
14253: LD_ADDR_EXP 40
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sArmoury := false ;
14261: LD_ADDR_EXP 41
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sRadar := false ;
14269: LD_ADDR_EXP 42
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sBunker := false ;
14277: LD_ADDR_EXP 43
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sHack := false ;
14285: LD_ADDR_EXP 44
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sFire := false ;
14293: LD_ADDR_EXP 45
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sRefresh := false ;
14301: LD_ADDR_EXP 46
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sExp := false ;
14309: LD_ADDR_EXP 47
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sDepot := false ;
14317: LD_ADDR_EXP 48
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sFlag := false ;
14325: LD_ADDR_EXP 49
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sKamikadze := false ;
14333: LD_ADDR_EXP 57
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sTroll := false ;
14341: LD_ADDR_EXP 58
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sSlow := false ;
14349: LD_ADDR_EXP 59
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sLack := false ;
14357: LD_ADDR_EXP 60
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sTank := false ;
14365: LD_ADDR_EXP 62
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sRemote := false ;
14373: LD_ADDR_EXP 63
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sPowell := false ;
14381: LD_ADDR_EXP 64
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sTeleport := false ;
14389: LD_ADDR_EXP 67
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sOilTower := false ;
14397: LD_ADDR_EXP 69
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sShovel := false ;
14405: LD_ADDR_EXP 70
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sSheik := false ;
14413: LD_ADDR_EXP 71
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sEarthquake := false ;
14421: LD_ADDR_EXP 73
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sAI := false ;
14429: LD_ADDR_EXP 74
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sCargo := false ;
14437: LD_ADDR_EXP 77
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sDLaser := false ;
14445: LD_ADDR_EXP 78
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sExchange := false ;
14453: LD_ADDR_EXP 79
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sFac := false ;
14461: LD_ADDR_EXP 80
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sPower := false ;
14469: LD_ADDR_EXP 81
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sRandom := false ;
14477: LD_ADDR_EXP 82
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sShield := false ;
14485: LD_ADDR_EXP 83
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sTime := false ;
14493: LD_ADDR_EXP 84
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sTools := false ;
14501: LD_ADDR_EXP 85
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sSold := false ;
14509: LD_ADDR_EXP 50
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sDiff := false ;
14517: LD_ADDR_EXP 51
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sFog := false ;
14525: LD_ADDR_EXP 54
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sReset := false ;
14533: LD_ADDR_EXP 55
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sSun := false ;
14541: LD_ADDR_EXP 56
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sTiger := false ;
14549: LD_ADDR_EXP 52
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sBomb := false ;
14557: LD_ADDR_EXP 53
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sWound := false ;
14565: LD_ADDR_EXP 61
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sBetray := false ;
14573: LD_ADDR_EXP 65
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// sContamin := false ;
14581: LD_ADDR_EXP 66
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// sOil := false ;
14589: LD_ADDR_EXP 68
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// sStu := false ;
14597: LD_ADDR_EXP 72
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// sBazooka := false ;
14605: LD_ADDR_EXP 75
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// sMortar := false ;
14613: LD_ADDR_EXP 76
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// sRanger := false ;
14621: LD_ADDR_EXP 86
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// sComputer := false ;
14629: LD_ADDR_EXP 87
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// s30 := false ;
14637: LD_ADDR_EXP 88
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// s60 := false ;
14645: LD_ADDR_EXP 89
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 1
14657: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// result := [ ] ;
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// if campaign_id = 1 then
14674: LD_OWVAR 69
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: IFFALSE 17848
// begin case mission_number of 1 :
14684: LD_OWVAR 70
14688: PUSH
14689: LD_INT 1
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14773
14697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 15
14717: PUSH
14718: LD_INT 16
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 26
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 102
14746: PUSH
14747: LD_INT 106
14749: PUSH
14750: LD_INT 116
14752: PUSH
14753: LD_INT 117
14755: PUSH
14756: LD_INT 118
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: ST_TO_ADDR
14771: GO 17846
14773: LD_INT 2
14775: DOUBLE
14776: EQUAL
14777: IFTRUE 14781
14779: GO 14865
14781: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 11
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 15
14801: PUSH
14802: LD_INT 16
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 23
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 101
14827: PUSH
14828: LD_INT 102
14830: PUSH
14831: LD_INT 105
14833: PUSH
14834: LD_INT 106
14836: PUSH
14837: LD_INT 108
14839: PUSH
14840: LD_INT 116
14842: PUSH
14843: LD_INT 117
14845: PUSH
14846: LD_INT 118
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
14863: GO 17846
14865: LD_INT 3
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14961
14873: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: LD_INT 11
14890: PUSH
14891: LD_INT 12
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_INT 26
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 101
14923: PUSH
14924: LD_INT 102
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 116
14938: PUSH
14939: LD_INT 117
14941: PUSH
14942: LD_INT 118
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: ST_TO_ADDR
14959: GO 17846
14961: LD_INT 4
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15065
14969: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 4
14980: PUSH
14981: LD_INT 5
14983: PUSH
14984: LD_INT 8
14986: PUSH
14987: LD_INT 11
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: LD_INT 15
14995: PUSH
14996: LD_INT 16
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 26
15007: PUSH
15008: LD_INT 36
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 105
15033: PUSH
15034: LD_INT 106
15036: PUSH
15037: LD_INT 108
15039: PUSH
15040: LD_INT 116
15042: PUSH
15043: LD_INT 117
15045: PUSH
15046: LD_INT 118
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: ST_TO_ADDR
15063: GO 17846
15065: LD_INT 5
15067: DOUBLE
15068: EQUAL
15069: IFTRUE 15073
15071: GO 15185
15073: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: LD_INT 6
15090: PUSH
15091: LD_INT 8
15093: PUSH
15094: LD_INT 11
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: LD_INT 15
15102: PUSH
15103: LD_INT 16
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 25
15114: PUSH
15115: LD_INT 26
15117: PUSH
15118: LD_INT 36
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 101
15139: PUSH
15140: LD_INT 102
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 108
15151: PUSH
15152: LD_INT 109
15154: PUSH
15155: LD_INT 112
15157: PUSH
15158: LD_INT 116
15160: PUSH
15161: LD_INT 117
15163: PUSH
15164: LD_INT 118
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: ST_TO_ADDR
15183: GO 17846
15185: LD_INT 6
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15325
15193: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: LD_INT 4
15204: PUSH
15205: LD_INT 5
15207: PUSH
15208: LD_INT 6
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 11
15216: PUSH
15217: LD_INT 12
15219: PUSH
15220: LD_INT 15
15222: PUSH
15223: LD_INT 16
15225: PUSH
15226: LD_INT 20
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_INT 23
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: LD_INT 30
15246: PUSH
15247: LD_INT 31
15249: PUSH
15250: LD_INT 32
15252: PUSH
15253: LD_INT 36
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 101
15279: PUSH
15280: LD_INT 102
15282: PUSH
15283: LD_INT 105
15285: PUSH
15286: LD_INT 106
15288: PUSH
15289: LD_INT 108
15291: PUSH
15292: LD_INT 109
15294: PUSH
15295: LD_INT 112
15297: PUSH
15298: LD_INT 116
15300: PUSH
15301: LD_INT 117
15303: PUSH
15304: LD_INT 118
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: ST_TO_ADDR
15323: GO 17846
15325: LD_INT 7
15327: DOUBLE
15328: EQUAL
15329: IFTRUE 15333
15331: GO 15445
15333: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15334: LD_ADDR_VAR 0 2
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: LD_INT 4
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 11
15353: PUSH
15354: LD_INT 12
15356: PUSH
15357: LD_INT 15
15359: PUSH
15360: LD_INT 16
15362: PUSH
15363: LD_INT 20
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 23
15374: PUSH
15375: LD_INT 25
15377: PUSH
15378: LD_INT 26
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 101
15399: PUSH
15400: LD_INT 102
15402: PUSH
15403: LD_INT 103
15405: PUSH
15406: LD_INT 105
15408: PUSH
15409: LD_INT 106
15411: PUSH
15412: LD_INT 108
15414: PUSH
15415: LD_INT 112
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: ST_TO_ADDR
15443: GO 17846
15445: LD_INT 8
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15593
15453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 11
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 15
15485: PUSH
15486: LD_INT 16
15488: PUSH
15489: LD_INT 20
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 22
15497: PUSH
15498: LD_INT 23
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 31
15512: PUSH
15513: LD_INT 32
15515: PUSH
15516: LD_INT 36
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 101
15543: PUSH
15544: LD_INT 102
15546: PUSH
15547: LD_INT 103
15549: PUSH
15550: LD_INT 105
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 109
15561: PUSH
15562: LD_INT 112
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 17846
15593: LD_INT 9
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15749
15601: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: LD_INT 7
15621: PUSH
15622: LD_INT 8
15624: PUSH
15625: LD_INT 11
15627: PUSH
15628: LD_INT 12
15630: PUSH
15631: LD_INT 15
15633: PUSH
15634: LD_INT 16
15636: PUSH
15637: LD_INT 20
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_INT 23
15648: PUSH
15649: LD_INT 25
15651: PUSH
15652: LD_INT 26
15654: PUSH
15655: LD_INT 28
15657: PUSH
15658: LD_INT 30
15660: PUSH
15661: LD_INT 31
15663: PUSH
15664: LD_INT 32
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 101
15695: PUSH
15696: LD_INT 102
15698: PUSH
15699: LD_INT 103
15701: PUSH
15702: LD_INT 105
15704: PUSH
15705: LD_INT 106
15707: PUSH
15708: LD_INT 108
15710: PUSH
15711: LD_INT 109
15713: PUSH
15714: LD_INT 112
15716: PUSH
15717: LD_INT 114
15719: PUSH
15720: LD_INT 116
15722: PUSH
15723: LD_INT 117
15725: PUSH
15726: LD_INT 118
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
15747: GO 17846
15749: LD_INT 10
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15953
15757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15758: LD_ADDR_VAR 0 2
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: LD_INT 6
15774: PUSH
15775: LD_INT 7
15777: PUSH
15778: LD_INT 8
15780: PUSH
15781: LD_INT 9
15783: PUSH
15784: LD_INT 10
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 13
15795: PUSH
15796: LD_INT 14
15798: PUSH
15799: LD_INT 15
15801: PUSH
15802: LD_INT 16
15804: PUSH
15805: LD_INT 17
15807: PUSH
15808: LD_INT 18
15810: PUSH
15811: LD_INT 19
15813: PUSH
15814: LD_INT 20
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 23
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 25
15831: PUSH
15832: LD_INT 26
15834: PUSH
15835: LD_INT 28
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 36
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 114
15919: PUSH
15920: LD_INT 116
15922: PUSH
15923: LD_INT 117
15925: PUSH
15926: LD_INT 118
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: ST_TO_ADDR
15951: GO 17846
15953: LD_INT 11
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16165
15961: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 3
15972: PUSH
15973: LD_INT 4
15975: PUSH
15976: LD_INT 5
15978: PUSH
15979: LD_INT 6
15981: PUSH
15982: LD_INT 7
15984: PUSH
15985: LD_INT 8
15987: PUSH
15988: LD_INT 9
15990: PUSH
15991: LD_INT 10
15993: PUSH
15994: LD_INT 11
15996: PUSH
15997: LD_INT 12
15999: PUSH
16000: LD_INT 13
16002: PUSH
16003: LD_INT 14
16005: PUSH
16006: LD_INT 15
16008: PUSH
16009: LD_INT 16
16011: PUSH
16012: LD_INT 17
16014: PUSH
16015: LD_INT 18
16017: PUSH
16018: LD_INT 19
16020: PUSH
16021: LD_INT 20
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_INT 23
16032: PUSH
16033: LD_INT 24
16035: PUSH
16036: LD_INT 25
16038: PUSH
16039: LD_INT 26
16041: PUSH
16042: LD_INT 28
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 31
16050: PUSH
16051: LD_INT 32
16053: PUSH
16054: LD_INT 34
16056: PUSH
16057: LD_INT 36
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 101
16095: PUSH
16096: LD_INT 102
16098: PUSH
16099: LD_INT 103
16101: PUSH
16102: LD_INT 104
16104: PUSH
16105: LD_INT 105
16107: PUSH
16108: LD_INT 106
16110: PUSH
16111: LD_INT 107
16113: PUSH
16114: LD_INT 108
16116: PUSH
16117: LD_INT 109
16119: PUSH
16120: LD_INT 110
16122: PUSH
16123: LD_INT 111
16125: PUSH
16126: LD_INT 112
16128: PUSH
16129: LD_INT 114
16131: PUSH
16132: LD_INT 116
16134: PUSH
16135: LD_INT 117
16137: PUSH
16138: LD_INT 118
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 17846
16165: LD_INT 12
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16393
16173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16174: LD_ADDR_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 4
16190: PUSH
16191: LD_INT 5
16193: PUSH
16194: LD_INT 6
16196: PUSH
16197: LD_INT 7
16199: PUSH
16200: LD_INT 8
16202: PUSH
16203: LD_INT 9
16205: PUSH
16206: LD_INT 10
16208: PUSH
16209: LD_INT 11
16211: PUSH
16212: LD_INT 12
16214: PUSH
16215: LD_INT 13
16217: PUSH
16218: LD_INT 14
16220: PUSH
16221: LD_INT 15
16223: PUSH
16224: LD_INT 16
16226: PUSH
16227: LD_INT 17
16229: PUSH
16230: LD_INT 18
16232: PUSH
16233: LD_INT 19
16235: PUSH
16236: LD_INT 20
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 23
16247: PUSH
16248: LD_INT 24
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 26
16256: PUSH
16257: LD_INT 27
16259: PUSH
16260: LD_INT 28
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 31
16268: PUSH
16269: LD_INT 32
16271: PUSH
16272: LD_INT 33
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 36
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 104
16328: PUSH
16329: LD_INT 105
16331: PUSH
16332: LD_INT 106
16334: PUSH
16335: LD_INT 107
16337: PUSH
16338: LD_INT 108
16340: PUSH
16341: LD_INT 109
16343: PUSH
16344: LD_INT 110
16346: PUSH
16347: LD_INT 111
16349: PUSH
16350: LD_INT 112
16352: PUSH
16353: LD_INT 113
16355: PUSH
16356: LD_INT 114
16358: PUSH
16359: LD_INT 116
16361: PUSH
16362: LD_INT 117
16364: PUSH
16365: LD_INT 118
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
16391: GO 17846
16393: LD_INT 13
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 16609
16401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 3
16415: PUSH
16416: LD_INT 4
16418: PUSH
16419: LD_INT 5
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 9
16427: PUSH
16428: LD_INT 10
16430: PUSH
16431: LD_INT 11
16433: PUSH
16434: LD_INT 12
16436: PUSH
16437: LD_INT 14
16439: PUSH
16440: LD_INT 15
16442: PUSH
16443: LD_INT 16
16445: PUSH
16446: LD_INT 17
16448: PUSH
16449: LD_INT 18
16451: PUSH
16452: LD_INT 19
16454: PUSH
16455: LD_INT 20
16457: PUSH
16458: LD_INT 21
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_INT 23
16466: PUSH
16467: LD_INT 24
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 26
16475: PUSH
16476: LD_INT 27
16478: PUSH
16479: LD_INT 28
16481: PUSH
16482: LD_INT 30
16484: PUSH
16485: LD_INT 31
16487: PUSH
16488: LD_INT 32
16490: PUSH
16491: LD_INT 33
16493: PUSH
16494: LD_INT 34
16496: PUSH
16497: LD_INT 36
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 101
16535: PUSH
16536: LD_INT 102
16538: PUSH
16539: LD_INT 103
16541: PUSH
16542: LD_INT 104
16544: PUSH
16545: LD_INT 105
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: LD_INT 107
16553: PUSH
16554: LD_INT 108
16556: PUSH
16557: LD_INT 109
16559: PUSH
16560: LD_INT 110
16562: PUSH
16563: LD_INT 111
16565: PUSH
16566: LD_INT 112
16568: PUSH
16569: LD_INT 113
16571: PUSH
16572: LD_INT 114
16574: PUSH
16575: LD_INT 116
16577: PUSH
16578: LD_INT 117
16580: PUSH
16581: LD_INT 118
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: ST_TO_ADDR
16607: GO 17846
16609: LD_INT 14
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16841
16617: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: LD_INT 4
16634: PUSH
16635: LD_INT 5
16637: PUSH
16638: LD_INT 6
16640: PUSH
16641: LD_INT 7
16643: PUSH
16644: LD_INT 8
16646: PUSH
16647: LD_INT 9
16649: PUSH
16650: LD_INT 10
16652: PUSH
16653: LD_INT 11
16655: PUSH
16656: LD_INT 12
16658: PUSH
16659: LD_INT 13
16661: PUSH
16662: LD_INT 14
16664: PUSH
16665: LD_INT 15
16667: PUSH
16668: LD_INT 16
16670: PUSH
16671: LD_INT 17
16673: PUSH
16674: LD_INT 18
16676: PUSH
16677: LD_INT 19
16679: PUSH
16680: LD_INT 20
16682: PUSH
16683: LD_INT 21
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_INT 23
16691: PUSH
16692: LD_INT 24
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 26
16700: PUSH
16701: LD_INT 27
16703: PUSH
16704: LD_INT 28
16706: PUSH
16707: LD_INT 29
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 31
16715: PUSH
16716: LD_INT 32
16718: PUSH
16719: LD_INT 33
16721: PUSH
16722: LD_INT 34
16724: PUSH
16725: LD_INT 36
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 104
16776: PUSH
16777: LD_INT 105
16779: PUSH
16780: LD_INT 106
16782: PUSH
16783: LD_INT 107
16785: PUSH
16786: LD_INT 108
16788: PUSH
16789: LD_INT 109
16791: PUSH
16792: LD_INT 110
16794: PUSH
16795: LD_INT 111
16797: PUSH
16798: LD_INT 112
16800: PUSH
16801: LD_INT 113
16803: PUSH
16804: LD_INT 114
16806: PUSH
16807: LD_INT 116
16809: PUSH
16810: LD_INT 117
16812: PUSH
16813: LD_INT 118
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
16839: GO 17846
16841: LD_INT 15
16843: DOUBLE
16844: EQUAL
16845: IFTRUE 16849
16847: GO 17073
16849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: LD_INT 6
16872: PUSH
16873: LD_INT 7
16875: PUSH
16876: LD_INT 8
16878: PUSH
16879: LD_INT 9
16881: PUSH
16882: LD_INT 10
16884: PUSH
16885: LD_INT 11
16887: PUSH
16888: LD_INT 12
16890: PUSH
16891: LD_INT 13
16893: PUSH
16894: LD_INT 14
16896: PUSH
16897: LD_INT 15
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 17
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: LD_INT 19
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 23
16923: PUSH
16924: LD_INT 24
16926: PUSH
16927: LD_INT 25
16929: PUSH
16930: LD_INT 26
16932: PUSH
16933: LD_INT 27
16935: PUSH
16936: LD_INT 28
16938: PUSH
16939: LD_INT 29
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 31
16947: PUSH
16948: LD_INT 32
16950: PUSH
16951: LD_INT 33
16953: PUSH
16954: LD_INT 34
16956: PUSH
16957: LD_INT 36
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 101
16999: PUSH
17000: LD_INT 102
17002: PUSH
17003: LD_INT 103
17005: PUSH
17006: LD_INT 104
17008: PUSH
17009: LD_INT 105
17011: PUSH
17012: LD_INT 106
17014: PUSH
17015: LD_INT 107
17017: PUSH
17018: LD_INT 108
17020: PUSH
17021: LD_INT 109
17023: PUSH
17024: LD_INT 110
17026: PUSH
17027: LD_INT 111
17029: PUSH
17030: LD_INT 112
17032: PUSH
17033: LD_INT 113
17035: PUSH
17036: LD_INT 114
17038: PUSH
17039: LD_INT 116
17041: PUSH
17042: LD_INT 117
17044: PUSH
17045: LD_INT 118
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: ST_TO_ADDR
17071: GO 17846
17073: LD_INT 16
17075: DOUBLE
17076: EQUAL
17077: IFTRUE 17081
17079: GO 17217
17081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: LD_INT 5
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: LD_INT 11
17101: PUSH
17102: LD_INT 12
17104: PUSH
17105: LD_INT 15
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 25
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 30
17131: PUSH
17132: LD_INT 31
17134: PUSH
17135: LD_INT 32
17137: PUSH
17138: LD_INT 33
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 101
17167: PUSH
17168: LD_INT 102
17170: PUSH
17171: LD_INT 103
17173: PUSH
17174: LD_INT 106
17176: PUSH
17177: LD_INT 108
17179: PUSH
17180: LD_INT 112
17182: PUSH
17183: LD_INT 113
17185: PUSH
17186: LD_INT 114
17188: PUSH
17189: LD_INT 116
17191: PUSH
17192: LD_INT 117
17194: PUSH
17195: LD_INT 118
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
17215: GO 17846
17217: LD_INT 17
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17449
17225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17226: LD_ADDR_VAR 0 2
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: LD_INT 5
17245: PUSH
17246: LD_INT 6
17248: PUSH
17249: LD_INT 7
17251: PUSH
17252: LD_INT 8
17254: PUSH
17255: LD_INT 9
17257: PUSH
17258: LD_INT 10
17260: PUSH
17261: LD_INT 11
17263: PUSH
17264: LD_INT 12
17266: PUSH
17267: LD_INT 13
17269: PUSH
17270: LD_INT 14
17272: PUSH
17273: LD_INT 15
17275: PUSH
17276: LD_INT 16
17278: PUSH
17279: LD_INT 17
17281: PUSH
17282: LD_INT 18
17284: PUSH
17285: LD_INT 19
17287: PUSH
17288: LD_INT 20
17290: PUSH
17291: LD_INT 21
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_INT 23
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 25
17305: PUSH
17306: LD_INT 26
17308: PUSH
17309: LD_INT 27
17311: PUSH
17312: LD_INT 28
17314: PUSH
17315: LD_INT 29
17317: PUSH
17318: LD_INT 30
17320: PUSH
17321: LD_INT 31
17323: PUSH
17324: LD_INT 32
17326: PUSH
17327: LD_INT 33
17329: PUSH
17330: LD_INT 34
17332: PUSH
17333: LD_INT 36
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 101
17375: PUSH
17376: LD_INT 102
17378: PUSH
17379: LD_INT 103
17381: PUSH
17382: LD_INT 104
17384: PUSH
17385: LD_INT 105
17387: PUSH
17388: LD_INT 106
17390: PUSH
17391: LD_INT 107
17393: PUSH
17394: LD_INT 108
17396: PUSH
17397: LD_INT 109
17399: PUSH
17400: LD_INT 110
17402: PUSH
17403: LD_INT 111
17405: PUSH
17406: LD_INT 112
17408: PUSH
17409: LD_INT 113
17411: PUSH
17412: LD_INT 114
17414: PUSH
17415: LD_INT 116
17417: PUSH
17418: LD_INT 117
17420: PUSH
17421: LD_INT 118
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: ST_TO_ADDR
17447: GO 17846
17449: LD_INT 18
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17605
17457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 4
17468: PUSH
17469: LD_INT 5
17471: PUSH
17472: LD_INT 7
17474: PUSH
17475: LD_INT 11
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 15
17483: PUSH
17484: LD_INT 16
17486: PUSH
17487: LD_INT 20
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 22
17495: PUSH
17496: LD_INT 23
17498: PUSH
17499: LD_INT 25
17501: PUSH
17502: LD_INT 26
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 32
17513: PUSH
17514: LD_INT 33
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 35
17522: PUSH
17523: LD_INT 36
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 101
17551: PUSH
17552: LD_INT 102
17554: PUSH
17555: LD_INT 103
17557: PUSH
17558: LD_INT 106
17560: PUSH
17561: LD_INT 108
17563: PUSH
17564: LD_INT 112
17566: PUSH
17567: LD_INT 113
17569: PUSH
17570: LD_INT 114
17572: PUSH
17573: LD_INT 115
17575: PUSH
17576: LD_INT 116
17578: PUSH
17579: LD_INT 117
17581: PUSH
17582: LD_INT 118
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: ST_TO_ADDR
17603: GO 17846
17605: LD_INT 19
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17845
17613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: LD_INT 4
17630: PUSH
17631: LD_INT 5
17633: PUSH
17634: LD_INT 6
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: LD_INT 8
17642: PUSH
17643: LD_INT 9
17645: PUSH
17646: LD_INT 10
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 13
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: LD_INT 15
17663: PUSH
17664: LD_INT 16
17666: PUSH
17667: LD_INT 17
17669: PUSH
17670: LD_INT 18
17672: PUSH
17673: LD_INT 19
17675: PUSH
17676: LD_INT 20
17678: PUSH
17679: LD_INT 21
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: LD_INT 24
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 26
17696: PUSH
17697: LD_INT 27
17699: PUSH
17700: LD_INT 28
17702: PUSH
17703: LD_INT 29
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 31
17711: PUSH
17712: LD_INT 32
17714: PUSH
17715: LD_INT 33
17717: PUSH
17718: LD_INT 34
17720: PUSH
17721: LD_INT 35
17723: PUSH
17724: LD_INT 36
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 101
17767: PUSH
17768: LD_INT 102
17770: PUSH
17771: LD_INT 103
17773: PUSH
17774: LD_INT 104
17776: PUSH
17777: LD_INT 105
17779: PUSH
17780: LD_INT 106
17782: PUSH
17783: LD_INT 107
17785: PUSH
17786: LD_INT 108
17788: PUSH
17789: LD_INT 109
17791: PUSH
17792: LD_INT 110
17794: PUSH
17795: LD_INT 111
17797: PUSH
17798: LD_INT 112
17800: PUSH
17801: LD_INT 113
17803: PUSH
17804: LD_INT 114
17806: PUSH
17807: LD_INT 115
17809: PUSH
17810: LD_INT 116
17812: PUSH
17813: LD_INT 117
17815: PUSH
17816: LD_INT 118
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: ST_TO_ADDR
17843: GO 17846
17845: POP
// end else
17846: GO 18077
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17848: LD_ADDR_VAR 0 2
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 5
17867: PUSH
17868: LD_INT 6
17870: PUSH
17871: LD_INT 7
17873: PUSH
17874: LD_INT 8
17876: PUSH
17877: LD_INT 9
17879: PUSH
17880: LD_INT 10
17882: PUSH
17883: LD_INT 11
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: LD_INT 13
17891: PUSH
17892: LD_INT 14
17894: PUSH
17895: LD_INT 15
17897: PUSH
17898: LD_INT 16
17900: PUSH
17901: LD_INT 17
17903: PUSH
17904: LD_INT 18
17906: PUSH
17907: LD_INT 19
17909: PUSH
17910: LD_INT 20
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 24
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 26
17930: PUSH
17931: LD_INT 27
17933: PUSH
17934: LD_INT 28
17936: PUSH
17937: LD_INT 29
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 33
17951: PUSH
17952: LD_INT 34
17954: PUSH
17955: LD_INT 35
17957: PUSH
17958: LD_INT 36
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 101
18001: PUSH
18002: LD_INT 102
18004: PUSH
18005: LD_INT 103
18007: PUSH
18008: LD_INT 104
18010: PUSH
18011: LD_INT 105
18013: PUSH
18014: LD_INT 106
18016: PUSH
18017: LD_INT 107
18019: PUSH
18020: LD_INT 108
18022: PUSH
18023: LD_INT 109
18025: PUSH
18026: LD_INT 110
18028: PUSH
18029: LD_INT 111
18031: PUSH
18032: LD_INT 112
18034: PUSH
18035: LD_INT 113
18037: PUSH
18038: LD_INT 114
18040: PUSH
18041: LD_INT 115
18043: PUSH
18044: LD_INT 116
18046: PUSH
18047: LD_INT 117
18049: PUSH
18050: LD_INT 118
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: ST_TO_ADDR
// if result then
18077: LD_VAR 0 2
18081: IFFALSE 18867
// begin normal :=  ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_STRING 
18090: ST_TO_ADDR
// hardcore :=  ;
18091: LD_ADDR_VAR 0 6
18095: PUSH
18096: LD_STRING 
18098: ST_TO_ADDR
// active :=  ;
18099: LD_ADDR_VAR 0 7
18103: PUSH
18104: LD_STRING 
18106: ST_TO_ADDR
// for i = 1 to normalCounter do
18107: LD_ADDR_VAR 0 8
18111: PUSH
18112: DOUBLE
18113: LD_INT 1
18115: DEC
18116: ST_TO_ADDR
18117: LD_EXP 34
18121: PUSH
18122: FOR_TO
18123: IFFALSE 18224
// begin tmp := 0 ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_STRING 0
18132: ST_TO_ADDR
// if result [ 1 ] then
18133: LD_VAR 0 2
18137: PUSH
18138: LD_INT 1
18140: ARRAY
18141: IFFALSE 18206
// if result [ 1 ] [ 1 ] = i then
18143: LD_VAR 0 2
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PUSH
18156: LD_VAR 0 8
18160: EQUAL
18161: IFFALSE 18206
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18163: LD_ADDR_VAR 0 2
18167: PUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_VAR 0 2
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 3
18192: PPUSH
18193: CALL_OW 1
18197: ST_TO_ADDR
// tmp := 1 ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_STRING 1
18205: ST_TO_ADDR
// end ; normal := normal & tmp ;
18206: LD_ADDR_VAR 0 5
18210: PUSH
18211: LD_VAR 0 5
18215: PUSH
18216: LD_VAR 0 3
18220: STR
18221: ST_TO_ADDR
// end ;
18222: GO 18122
18224: POP
18225: POP
// for i = 1 to hardcoreCounter do
18226: LD_ADDR_VAR 0 8
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_EXP 35
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18347
// begin tmp := 0 ;
18244: LD_ADDR_VAR 0 3
18248: PUSH
18249: LD_STRING 0
18251: ST_TO_ADDR
// if result [ 2 ] then
18252: LD_VAR 0 2
18256: PUSH
18257: LD_INT 2
18259: ARRAY
18260: IFFALSE 18329
// if result [ 2 ] [ 1 ] = 100 + i then
18262: LD_VAR 0 2
18266: PUSH
18267: LD_INT 2
18269: ARRAY
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PUSH
18275: LD_INT 100
18277: PUSH
18278: LD_VAR 0 8
18282: PLUS
18283: EQUAL
18284: IFFALSE 18329
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18286: LD_ADDR_VAR 0 2
18290: PUSH
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_INT 2
18298: PPUSH
18299: LD_VAR 0 2
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 3
18315: PPUSH
18316: CALL_OW 1
18320: ST_TO_ADDR
// tmp := 1 ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_STRING 1
18328: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_VAR 0 6
18338: PUSH
18339: LD_VAR 0 3
18343: STR
18344: ST_TO_ADDR
// end ;
18345: GO 18241
18347: POP
18348: POP
// if isGameLoad then
18349: LD_VAR 0 1
18353: IFFALSE 18828
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_EXP 38
18364: PUSH
18365: LD_EXP 37
18369: PUSH
18370: LD_EXP 39
18374: PUSH
18375: LD_EXP 36
18379: PUSH
18380: LD_EXP 40
18384: PUSH
18385: LD_EXP 41
18389: PUSH
18390: LD_EXP 42
18394: PUSH
18395: LD_EXP 43
18399: PUSH
18400: LD_EXP 44
18404: PUSH
18405: LD_EXP 45
18409: PUSH
18410: LD_EXP 46
18414: PUSH
18415: LD_EXP 47
18419: PUSH
18420: LD_EXP 48
18424: PUSH
18425: LD_EXP 49
18429: PUSH
18430: LD_EXP 57
18434: PUSH
18435: LD_EXP 58
18439: PUSH
18440: LD_EXP 59
18444: PUSH
18445: LD_EXP 60
18449: PUSH
18450: LD_EXP 62
18454: PUSH
18455: LD_EXP 63
18459: PUSH
18460: LD_EXP 64
18464: PUSH
18465: LD_EXP 67
18469: PUSH
18470: LD_EXP 69
18474: PUSH
18475: LD_EXP 70
18479: PUSH
18480: LD_EXP 71
18484: PUSH
18485: LD_EXP 73
18489: PUSH
18490: LD_EXP 74
18494: PUSH
18495: LD_EXP 77
18499: PUSH
18500: LD_EXP 78
18504: PUSH
18505: LD_EXP 79
18509: PUSH
18510: LD_EXP 80
18514: PUSH
18515: LD_EXP 81
18519: PUSH
18520: LD_EXP 82
18524: PUSH
18525: LD_EXP 83
18529: PUSH
18530: LD_EXP 84
18534: PUSH
18535: LD_EXP 85
18539: PUSH
18540: LD_EXP 50
18544: PUSH
18545: LD_EXP 51
18549: PUSH
18550: LD_EXP 54
18554: PUSH
18555: LD_EXP 55
18559: PUSH
18560: LD_EXP 56
18564: PUSH
18565: LD_EXP 52
18569: PUSH
18570: LD_EXP 53
18574: PUSH
18575: LD_EXP 61
18579: PUSH
18580: LD_EXP 65
18584: PUSH
18585: LD_EXP 66
18589: PUSH
18590: LD_EXP 68
18594: PUSH
18595: LD_EXP 72
18599: PUSH
18600: LD_EXP 75
18604: PUSH
18605: LD_EXP 76
18609: PUSH
18610: LD_EXP 86
18614: PUSH
18615: LD_EXP 87
18619: PUSH
18620: LD_EXP 88
18624: PUSH
18625: LD_EXP 89
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: ST_TO_ADDR
// tmp :=  ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_STRING 
18693: ST_TO_ADDR
// for i = 1 to normalCounter do
18694: LD_ADDR_VAR 0 8
18698: PUSH
18699: DOUBLE
18700: LD_INT 1
18702: DEC
18703: ST_TO_ADDR
18704: LD_EXP 34
18708: PUSH
18709: FOR_TO
18710: IFFALSE 18746
// begin if flags [ i ] then
18712: LD_VAR 0 4
18716: PUSH
18717: LD_VAR 0 8
18721: ARRAY
18722: IFFALSE 18744
// tmp := tmp & i & ; ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 8
18738: STR
18739: PUSH
18740: LD_STRING ;
18742: STR
18743: ST_TO_ADDR
// end ;
18744: GO 18709
18746: POP
18747: POP
// for i = 1 to hardcoreCounter do
18748: LD_ADDR_VAR 0 8
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 35
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// begin if flags [ normalCounter + i ] then
18766: LD_VAR 0 4
18770: PUSH
18771: LD_EXP 34
18775: PUSH
18776: LD_VAR 0 8
18780: PLUS
18781: ARRAY
18782: IFFALSE 18808
// tmp := tmp & ( 100 + i ) & ; ;
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 100
18796: PUSH
18797: LD_VAR 0 8
18801: PLUS
18802: STR
18803: PUSH
18804: LD_STRING ;
18806: STR
18807: ST_TO_ADDR
// end ;
18808: GO 18763
18810: POP
18811: POP
// if tmp then
18812: LD_VAR 0 3
18816: IFFALSE 18828
// active := tmp ;
18818: LD_ADDR_VAR 0 7
18822: PUSH
18823: LD_VAR 0 3
18827: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18828: LD_STRING getStreamItemsFromMission("
18830: PUSH
18831: LD_VAR 0 5
18835: STR
18836: PUSH
18837: LD_STRING ","
18839: STR
18840: PUSH
18841: LD_VAR 0 6
18845: STR
18846: PUSH
18847: LD_STRING ","
18849: STR
18850: PUSH
18851: LD_VAR 0 7
18855: STR
18856: PUSH
18857: LD_STRING ")
18859: STR
18860: PPUSH
18861: CALL_OW 559
// end else
18865: GO 18874
// ToLua ( getStreamItemsFromMission("","","") ) ;
18867: LD_STRING getStreamItemsFromMission("","","")
18869: PPUSH
18870: CALL_OW 559
// end ;
18874: LD_VAR 0 2
18878: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18879: LD_EXP 33
18883: PUSH
18884: LD_EXP 38
18888: AND
18889: IFFALSE 19013
18891: GO 18893
18893: DISABLE
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
// begin enable ;
18898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 7
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: LD_INT 45
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 34
18941: PUSH
18942: LD_INT 28
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 34
18951: PUSH
18952: LD_INT 47
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19013
// for i in tmp do
18984: LD_ADDR_VAR 0 1
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19011
// begin SetLives ( i , 0 ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_INT 0
19004: PPUSH
19005: CALL_OW 234
// end ;
19009: GO 18994
19011: POP
19012: POP
// end ;
19013: PPOPN 2
19015: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19016: LD_EXP 33
19020: PUSH
19021: LD_EXP 39
19025: AND
19026: IFFALSE 19110
19028: GO 19030
19030: DISABLE
19031: LD_INT 0
19033: PPUSH
19034: PPUSH
// begin enable ;
19035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_OWVAR 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 32
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: ST_TO_ADDR
// if not tmp then
19072: LD_VAR 0 2
19076: NOT
19077: IFFALSE 19081
// exit ;
19079: GO 19110
// for i in tmp do
19081: LD_ADDR_VAR 0 1
19085: PUSH
19086: LD_VAR 0 2
19090: PUSH
19091: FOR_IN
19092: IFFALSE 19108
// begin SetLives ( i , 0 ) ;
19094: LD_VAR 0 1
19098: PPUSH
19099: LD_INT 0
19101: PPUSH
19102: CALL_OW 234
// end ;
19106: GO 19091
19108: POP
19109: POP
// end ;
19110: PPOPN 2
19112: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19113: LD_EXP 33
19117: PUSH
19118: LD_EXP 36
19122: AND
19123: IFFALSE 19216
19125: GO 19127
19127: DISABLE
19128: LD_INT 0
19130: PPUSH
// begin enable ;
19131: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19132: LD_ADDR_VAR 0 1
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_OWVAR 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 5
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 9
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: PUSH
19197: FOR_IN
19198: IFFALSE 19214
// begin SetClass ( i , 1 ) ;
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 336
// end ;
19212: GO 19197
19214: POP
19215: POP
// end ;
19216: PPOPN 1
19218: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19219: LD_EXP 33
19223: PUSH
19224: LD_EXP 37
19228: AND
19229: PUSH
19230: LD_OWVAR 65
19234: PUSH
19235: LD_INT 7
19237: LESS
19238: AND
19239: IFFALSE 19253
19241: GO 19243
19243: DISABLE
// begin enable ;
19244: ENABLE
// game_speed := 7 ;
19245: LD_ADDR_OWVAR 65
19249: PUSH
19250: LD_INT 7
19252: ST_TO_ADDR
// end ;
19253: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19254: LD_EXP 33
19258: PUSH
19259: LD_EXP 40
19263: AND
19264: IFFALSE 19466
19266: GO 19268
19268: DISABLE
19269: LD_INT 0
19271: PPUSH
19272: PPUSH
19273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_INT 81
19281: PUSH
19282: LD_OWVAR 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 3
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19466
// if tmp > 5 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 5
19326: GREATER
19327: IFFALSE 19339
// k := 5 else
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 5
19336: ST_TO_ADDR
19337: GO 19349
// k := tmp ;
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_VAR 0 3
19348: ST_TO_ADDR
// for i := 1 to k do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: DOUBLE
19355: LD_INT 1
19357: DEC
19358: ST_TO_ADDR
19359: LD_VAR 0 2
19363: PUSH
19364: FOR_TO
19365: IFFALSE 19464
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19367: LD_VAR 0 3
19371: PUSH
19372: LD_VAR 0 1
19376: ARRAY
19377: PPUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_INT 4
19385: MOD
19386: PUSH
19387: LD_INT 1
19389: PLUS
19390: PPUSH
19391: CALL_OW 259
19395: PUSH
19396: LD_INT 10
19398: LESS
19399: IFFALSE 19462
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ARRAY
19411: PPUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 4
19419: MOD
19420: PUSH
19421: LD_INT 1
19423: PLUS
19424: PPUSH
19425: LD_VAR 0 3
19429: PUSH
19430: LD_VAR 0 1
19434: ARRAY
19435: PPUSH
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 4
19443: MOD
19444: PUSH
19445: LD_INT 1
19447: PLUS
19448: PPUSH
19449: CALL_OW 259
19453: PUSH
19454: LD_INT 1
19456: PLUS
19457: PPUSH
19458: CALL_OW 237
19462: GO 19364
19464: POP
19465: POP
// end ;
19466: PPOPN 3
19468: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19469: LD_EXP 33
19473: PUSH
19474: LD_EXP 41
19478: AND
19479: IFFALSE 19499
19481: GO 19483
19483: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19484: LD_INT 4
19486: PPUSH
19487: LD_OWVAR 2
19491: PPUSH
19492: LD_INT 0
19494: PPUSH
19495: CALL_OW 324
19499: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19500: LD_EXP 33
19504: PUSH
19505: LD_EXP 70
19509: AND
19510: IFFALSE 19530
19512: GO 19514
19514: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19515: LD_INT 19
19517: PPUSH
19518: LD_OWVAR 2
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: CALL_OW 324
19530: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19531: LD_EXP 33
19535: PUSH
19536: LD_EXP 42
19540: AND
19541: IFFALSE 19643
19543: GO 19545
19545: DISABLE
19546: LD_INT 0
19548: PPUSH
19549: PPUSH
// begin enable ;
19550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 11
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 69
19604: ST_TO_ADDR
// if not tmp then
19605: LD_VAR 0 2
19609: NOT
19610: IFFALSE 19614
// exit ;
19612: GO 19643
// for i in tmp do
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: LD_VAR 0 2
19623: PUSH
19624: FOR_IN
19625: IFFALSE 19641
// begin SetLives ( i , 0 ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: LD_INT 0
19634: PPUSH
19635: CALL_OW 234
// end ;
19639: GO 19624
19641: POP
19642: POP
// end ;
19643: PPOPN 2
19645: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19646: LD_EXP 33
19650: PUSH
19651: LD_EXP 43
19655: AND
19656: IFFALSE 19676
19658: GO 19660
19660: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19661: LD_INT 32
19663: PPUSH
19664: LD_OWVAR 2
19668: PPUSH
19669: LD_INT 0
19671: PPUSH
19672: CALL_OW 324
19676: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19677: LD_EXP 33
19681: PUSH
19682: LD_EXP 44
19686: AND
19687: IFFALSE 19868
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
19696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_INT 22
19704: PUSH
19705: LD_OWVAR 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 33
19716: PUSH
19717: LD_INT 3
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: ST_TO_ADDR
// if not tmp then
19733: LD_VAR 0 2
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19868
// side := 0 ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// for i := 1 to 8 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 8
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19812
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19766: LD_OWVAR 2
19770: PUSH
19771: LD_VAR 0 1
19775: NONEQUAL
19776: PUSH
19777: LD_OWVAR 2
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 81
19791: PUSH
19792: LD_INT 2
19794: EQUAL
19795: AND
19796: IFFALSE 19810
// begin side := i ;
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_VAR 0 1
19807: ST_TO_ADDR
// break ;
19808: GO 19812
// end ;
19810: GO 19763
19812: POP
19813: POP
// if not side then
19814: LD_VAR 0 3
19818: NOT
19819: IFFALSE 19823
// exit ;
19821: GO 19868
// for i := 1 to tmp do
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: DOUBLE
19829: LD_INT 1
19831: DEC
19832: ST_TO_ADDR
19833: LD_VAR 0 2
19837: PUSH
19838: FOR_TO
19839: IFFALSE 19866
// if Prob ( 60 ) then
19841: LD_INT 60
19843: PPUSH
19844: CALL_OW 13
19848: IFFALSE 19864
// SetSide ( i , side ) ;
19850: LD_VAR 0 1
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
19864: GO 19838
19866: POP
19867: POP
// end ;
19868: PPOPN 3
19870: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19871: LD_EXP 33
19875: PUSH
19876: LD_EXP 46
19880: AND
19881: IFFALSE 20000
19883: GO 19885
19885: DISABLE
19886: LD_INT 0
19888: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19889: LD_ADDR_VAR 0 1
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_OWVAR 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 21
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: LD_INT 23
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19998
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19946: LD_VAR 0 1
19950: PPUSH
19951: CALL_OW 257
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 3
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19996
// SetClass ( un , rand ( 1 , 4 ) ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: LD_INT 1
19983: PPUSH
19984: LD_INT 4
19986: PPUSH
19987: CALL_OW 12
19991: PPUSH
19992: CALL_OW 336
19996: GO 19943
19998: POP
19999: POP
// end ;
20000: PPOPN 1
20002: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20003: LD_EXP 33
20007: PUSH
20008: LD_EXP 45
20012: AND
20013: IFFALSE 20092
20015: GO 20017
20017: DISABLE
20018: LD_INT 0
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 21
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: ST_TO_ADDR
// if not tmp then
20057: LD_VAR 0 1
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20066: LD_VAR 0 1
20070: PUSH
20071: LD_INT 1
20073: PPUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 12
20083: ARRAY
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 234
// end ;
20092: PPOPN 1
20094: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20095: LD_EXP 33
20099: PUSH
20100: LD_EXP 47
20104: AND
20105: IFFALSE 20203
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20113: LD_ADDR_VAR 0 1
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 21
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 1
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20203
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: PPUSH
20177: LD_INT 1
20179: PPUSH
20180: LD_INT 4
20182: PPUSH
20183: CALL_OW 12
20187: PPUSH
20188: LD_INT 3000
20190: PPUSH
20191: LD_INT 9000
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: CALL_OW 492
// end ;
20203: PPOPN 1
20205: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20206: LD_EXP 33
20210: PUSH
20211: LD_EXP 48
20215: AND
20216: IFFALSE 20236
20218: GO 20220
20220: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20221: LD_INT 1
20223: PPUSH
20224: LD_OWVAR 2
20228: PPUSH
20229: LD_INT 0
20231: PPUSH
20232: CALL_OW 324
20236: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20237: LD_EXP 33
20241: PUSH
20242: LD_EXP 49
20246: AND
20247: IFFALSE 20330
20249: GO 20251
20251: DISABLE
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20256: LD_ADDR_VAR 0 2
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_OWVAR 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PPUSH
20287: CALL_OW 69
20291: ST_TO_ADDR
// if not tmp then
20292: LD_VAR 0 2
20296: NOT
20297: IFFALSE 20301
// exit ;
20299: GO 20330
// for i in tmp do
20301: LD_ADDR_VAR 0 1
20305: PUSH
20306: LD_VAR 0 2
20310: PUSH
20311: FOR_IN
20312: IFFALSE 20328
// SetBLevel ( i , 10 ) ;
20314: LD_VAR 0 1
20318: PPUSH
20319: LD_INT 10
20321: PPUSH
20322: CALL_OW 241
20326: GO 20311
20328: POP
20329: POP
// end ;
20330: PPOPN 2
20332: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20333: LD_EXP 33
20337: PUSH
20338: LD_EXP 50
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 5
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20457: LD_EXP 33
20461: PUSH
20462: LD_EXP 51
20466: AND
20467: PUSH
20468: LD_OWVAR 67
20472: PUSH
20473: LD_INT 4
20475: LESS
20476: AND
20477: IFFALSE 20496
20479: GO 20481
20481: DISABLE
// begin Difficulty := Difficulty + 1 ;
20482: LD_ADDR_OWVAR 67
20486: PUSH
20487: LD_OWVAR 67
20491: PUSH
20492: LD_INT 1
20494: PLUS
20495: ST_TO_ADDR
// end ;
20496: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20497: LD_EXP 33
20501: PUSH
20502: LD_EXP 52
20506: AND
20507: IFFALSE 20610
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
// begin for i := 1 to 5 do
20515: LD_ADDR_VAR 0 1
20519: PUSH
20520: DOUBLE
20521: LD_INT 1
20523: DEC
20524: ST_TO_ADDR
20525: LD_INT 5
20527: PUSH
20528: FOR_TO
20529: IFFALSE 20608
// begin uc_nation := nation_nature ;
20531: LD_ADDR_OWVAR 21
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// uc_side := 0 ;
20539: LD_ADDR_OWVAR 20
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20547: LD_ADDR_OWVAR 29
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// hc_agressivity := 20 ;
20562: LD_ADDR_OWVAR 35
20566: PUSH
20567: LD_INT 20
20569: ST_TO_ADDR
// hc_class := class_tiger ;
20570: LD_ADDR_OWVAR 28
20574: PUSH
20575: LD_INT 14
20577: ST_TO_ADDR
// hc_gallery :=  ;
20578: LD_ADDR_OWVAR 33
20582: PUSH
20583: LD_STRING 
20585: ST_TO_ADDR
// hc_name :=  ;
20586: LD_ADDR_OWVAR 26
20590: PUSH
20591: LD_STRING 
20593: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20594: CALL_OW 44
20598: PPUSH
20599: LD_INT 0
20601: PPUSH
20602: CALL_OW 51
// end ;
20606: GO 20528
20608: POP
20609: POP
// end ;
20610: PPOPN 1
20612: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20613: LD_EXP 33
20617: PUSH
20618: LD_EXP 53
20622: AND
20623: IFFALSE 20632
20625: GO 20627
20627: DISABLE
// StreamSibBomb ;
20628: CALL 20633 0 0
20632: END
// export function StreamSibBomb ; var i , x , y ; begin
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
20638: PPUSH
// result := false ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 0
20646: ST_TO_ADDR
// for i := 1 to 16 do
20647: LD_ADDR_VAR 0 2
20651: PUSH
20652: DOUBLE
20653: LD_INT 1
20655: DEC
20656: ST_TO_ADDR
20657: LD_INT 16
20659: PUSH
20660: FOR_TO
20661: IFFALSE 20860
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_INT 10
20670: PUSH
20671: LD_INT 20
20673: PUSH
20674: LD_INT 30
20676: PUSH
20677: LD_INT 40
20679: PUSH
20680: LD_INT 50
20682: PUSH
20683: LD_INT 60
20685: PUSH
20686: LD_INT 70
20688: PUSH
20689: LD_INT 80
20691: PUSH
20692: LD_INT 90
20694: PUSH
20695: LD_INT 100
20697: PUSH
20698: LD_INT 110
20700: PUSH
20701: LD_INT 120
20703: PUSH
20704: LD_INT 130
20706: PUSH
20707: LD_INT 140
20709: PUSH
20710: LD_INT 150
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PPUSH
20733: LD_INT 15
20735: PPUSH
20736: CALL_OW 12
20740: ARRAY
20741: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20742: LD_ADDR_VAR 0 4
20746: PUSH
20747: LD_INT 10
20749: PUSH
20750: LD_INT 20
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 40
20758: PUSH
20759: LD_INT 50
20761: PUSH
20762: LD_INT 60
20764: PUSH
20765: LD_INT 70
20767: PUSH
20768: LD_INT 80
20770: PUSH
20771: LD_INT 90
20773: PUSH
20774: LD_INT 100
20776: PUSH
20777: LD_INT 110
20779: PUSH
20780: LD_INT 120
20782: PUSH
20783: LD_INT 130
20785: PUSH
20786: LD_INT 140
20788: PUSH
20789: LD_INT 150
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: PPUSH
20812: LD_INT 15
20814: PPUSH
20815: CALL_OW 12
20819: ARRAY
20820: ST_TO_ADDR
// if ValidHex ( x , y ) then
20821: LD_VAR 0 3
20825: PPUSH
20826: LD_VAR 0 4
20830: PPUSH
20831: CALL_OW 488
20835: IFFALSE 20858
// begin result := [ x , y ] ;
20837: LD_ADDR_VAR 0 1
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_VAR 0 4
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: ST_TO_ADDR
// break ;
20856: GO 20860
// end ; end ;
20858: GO 20660
20860: POP
20861: POP
// if result then
20862: LD_VAR 0 1
20866: IFFALSE 20926
// begin ToLua ( playSibBomb() ) ;
20868: LD_STRING playSibBomb()
20870: PPUSH
20871: CALL_OW 559
// wait ( 0 0$14 ) ;
20875: LD_INT 490
20877: PPUSH
20878: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20882: LD_VAR 0 1
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_VAR 0 1
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: PPUSH
20900: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20904: LD_VAR 0 1
20908: PUSH
20909: LD_INT 1
20911: ARRAY
20912: PPUSH
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 2
20920: ARRAY
20921: PPUSH
20922: CALL_OW 429
// end ; end ;
20926: LD_VAR 0 1
20930: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20931: LD_EXP 33
20935: PUSH
20936: LD_EXP 55
20940: AND
20941: IFFALSE 20953
20943: GO 20945
20945: DISABLE
// YouLost (  ) ;
20946: LD_STRING 
20948: PPUSH
20949: CALL_OW 104
20953: END
// every 0 0$1 trigger StreamModeActive and sFog do
20954: LD_EXP 33
20958: PUSH
20959: LD_EXP 54
20963: AND
20964: IFFALSE 20978
20966: GO 20968
20968: DISABLE
// FogOff ( your_side ) ;
20969: LD_OWVAR 2
20973: PPUSH
20974: CALL_OW 344
20978: END
// every 0 0$1 trigger StreamModeActive and sSun do
20979: LD_EXP 33
20983: PUSH
20984: LD_EXP 56
20988: AND
20989: IFFALSE 21017
20991: GO 20993
20993: DISABLE
// begin solar_recharge_percent := 0 ;
20994: LD_ADDR_OWVAR 79
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21002: LD_INT 10500
21004: PPUSH
21005: CALL_OW 67
// solar_recharge_percent := 100 ;
21009: LD_ADDR_OWVAR 79
21013: PUSH
21014: LD_INT 100
21016: ST_TO_ADDR
// end ;
21017: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21018: LD_EXP 33
21022: PUSH
21023: LD_EXP 57
21027: AND
21028: IFFALSE 21267
21030: GO 21032
21032: DISABLE
21033: LD_INT 0
21035: PPUSH
21036: PPUSH
21037: PPUSH
// begin tmp := [ ] ;
21038: LD_ADDR_VAR 0 3
21042: PUSH
21043: EMPTY
21044: ST_TO_ADDR
// for i := 1 to 6 do
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: DOUBLE
21051: LD_INT 1
21053: DEC
21054: ST_TO_ADDR
21055: LD_INT 6
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21164
// begin uc_nation := nation_nature ;
21061: LD_ADDR_OWVAR 21
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// uc_side := 0 ;
21069: LD_ADDR_OWVAR 20
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21077: LD_ADDR_OWVAR 29
21081: PUSH
21082: LD_INT 12
21084: PUSH
21085: LD_INT 12
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: ST_TO_ADDR
// hc_agressivity := 20 ;
21092: LD_ADDR_OWVAR 35
21096: PUSH
21097: LD_INT 20
21099: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21100: LD_ADDR_OWVAR 28
21104: PUSH
21105: LD_INT 17
21107: ST_TO_ADDR
// hc_gallery :=  ;
21108: LD_ADDR_OWVAR 33
21112: PUSH
21113: LD_STRING 
21115: ST_TO_ADDR
// hc_name :=  ;
21116: LD_ADDR_OWVAR 26
21120: PUSH
21121: LD_STRING 
21123: ST_TO_ADDR
// un := CreateHuman ;
21124: LD_ADDR_VAR 0 2
21128: PUSH
21129: CALL_OW 44
21133: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 51
// tmp := tmp ^ un ;
21146: LD_ADDR_VAR 0 3
21150: PUSH
21151: LD_VAR 0 3
21155: PUSH
21156: LD_VAR 0 2
21160: ADD
21161: ST_TO_ADDR
// end ;
21162: GO 21058
21164: POP
21165: POP
// repeat wait ( 0 0$1 ) ;
21166: LD_INT 35
21168: PPUSH
21169: CALL_OW 67
// for un in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21258
// begin if IsDead ( un ) then
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 301
21195: IFFALSE 21215
// begin tmp := tmp diff un ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 2
21211: DIFF
21212: ST_TO_ADDR
// continue ;
21213: GO 21183
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_INT 3
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 74
21251: PPUSH
21252: CALL_OW 115
// end ;
21256: GO 21183
21258: POP
21259: POP
// until not tmp ;
21260: LD_VAR 0 3
21264: NOT
21265: IFFALSE 21166
// end ;
21267: PPOPN 3
21269: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21270: LD_EXP 33
21274: PUSH
21275: LD_EXP 58
21279: AND
21280: IFFALSE 21334
21282: GO 21284
21284: DISABLE
// begin ToLua ( displayTroll(); ) ;
21285: LD_STRING displayTroll();
21287: PPUSH
21288: CALL_OW 559
// wait ( 3 3$00 ) ;
21292: LD_INT 6300
21294: PPUSH
21295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21299: LD_STRING hideTroll();
21301: PPUSH
21302: CALL_OW 559
// wait ( 1 1$00 ) ;
21306: LD_INT 2100
21308: PPUSH
21309: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21313: LD_STRING displayTroll();
21315: PPUSH
21316: CALL_OW 559
// wait ( 1 1$00 ) ;
21320: LD_INT 2100
21322: PPUSH
21323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21327: LD_STRING hideTroll();
21329: PPUSH
21330: CALL_OW 559
// end ;
21334: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21335: LD_EXP 33
21339: PUSH
21340: LD_EXP 59
21344: AND
21345: IFFALSE 21408
21347: GO 21349
21349: DISABLE
21350: LD_INT 0
21352: PPUSH
// begin p := 0 ;
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// repeat game_speed := 1 ;
21361: LD_ADDR_OWVAR 65
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21369: LD_INT 35
21371: PPUSH
21372: CALL_OW 67
// p := p + 1 ;
21376: LD_ADDR_VAR 0 1
21380: PUSH
21381: LD_VAR 0 1
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
// until p >= 60 ;
21390: LD_VAR 0 1
21394: PUSH
21395: LD_INT 60
21397: GREATEREQUAL
21398: IFFALSE 21361
// game_speed := 4 ;
21400: LD_ADDR_OWVAR 65
21404: PUSH
21405: LD_INT 4
21407: ST_TO_ADDR
// end ;
21408: PPOPN 1
21410: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21411: LD_EXP 33
21415: PUSH
21416: LD_EXP 60
21420: AND
21421: IFFALSE 21567
21423: GO 21425
21425: DISABLE
21426: LD_INT 0
21428: PPUSH
21429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21430: LD_ADDR_VAR 0 1
21434: PUSH
21435: LD_INT 22
21437: PUSH
21438: LD_OWVAR 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 30
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PPUSH
21479: CALL_OW 69
21483: ST_TO_ADDR
// if not depot then
21484: LD_VAR 0 1
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21567
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_VAR 0 1
21502: PUSH
21503: LD_INT 1
21505: PPUSH
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 12
21515: ARRAY
21516: PPUSH
21517: CALL_OW 274
21521: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_INT 2
21544: PPUSH
21545: LD_INT 0
21547: PPUSH
21548: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 0
21562: PPUSH
21563: CALL_OW 277
// end ;
21567: PPOPN 2
21569: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21570: LD_EXP 33
21574: PUSH
21575: LD_EXP 61
21579: AND
21580: IFFALSE 21677
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21588: LD_ADDR_VAR 0 1
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_OWVAR 2
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 21
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: ST_TO_ADDR
// if not tmp then
21642: LD_VAR 0 1
21646: NOT
21647: IFFALSE 21651
// exit ;
21649: GO 21677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21651: LD_VAR 0 1
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 12
21668: ARRAY
21669: PPUSH
21670: LD_INT 200
21672: PPUSH
21673: CALL_OW 234
// end ;
21677: PPOPN 1
21679: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21680: LD_EXP 33
21684: PUSH
21685: LD_EXP 62
21689: AND
21690: IFFALSE 21769
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_OWVAR 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: ST_TO_ADDR
// if not tmp then
21734: LD_VAR 0 1
21738: NOT
21739: IFFALSE 21743
// exit ;
21741: GO 21769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21743: LD_VAR 0 1
21747: PUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 12
21760: ARRAY
21761: PPUSH
21762: LD_INT 60
21764: PPUSH
21765: CALL_OW 234
// end ;
21769: PPOPN 1
21771: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21772: LD_EXP 33
21776: PUSH
21777: LD_EXP 63
21781: AND
21782: IFFALSE 21881
21784: GO 21786
21786: DISABLE
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
// begin enable ;
21791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 61
21811: PUSH
21812: EMPTY
21813: LIST
21814: PUSH
21815: LD_INT 33
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: ST_TO_ADDR
// if not tmp then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 21881
// for i in tmp do
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_VAR 0 1
21853: PUSH
21854: FOR_IN
21855: IFFALSE 21879
// if IsControledBy ( i ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 312
21866: IFFALSE 21877
// ComUnlink ( i ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 136
21877: GO 21854
21879: POP
21880: POP
// end ;
21881: PPOPN 2
21883: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21884: LD_EXP 33
21888: PUSH
21889: LD_EXP 64
21893: AND
21894: IFFALSE 22034
21896: GO 21898
21898: DISABLE
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
// begin ToLua ( displayPowell(); ) ;
21903: LD_STRING displayPowell();
21905: PPUSH
21906: CALL_OW 559
// uc_side := 0 ;
21910: LD_ADDR_OWVAR 20
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// uc_nation := 2 ;
21918: LD_ADDR_OWVAR 21
21922: PUSH
21923: LD_INT 2
21925: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21926: LD_ADDR_OWVAR 37
21930: PUSH
21931: LD_INT 14
21933: ST_TO_ADDR
// vc_engine := engine_siberite ;
21934: LD_ADDR_OWVAR 39
21938: PUSH
21939: LD_INT 3
21941: ST_TO_ADDR
// vc_control := control_apeman ;
21942: LD_ADDR_OWVAR 38
21946: PUSH
21947: LD_INT 5
21949: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21950: LD_ADDR_OWVAR 40
21954: PUSH
21955: LD_INT 29
21957: ST_TO_ADDR
// un := CreateVehicle ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: CALL_OW 45
21967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21980: LD_INT 35
21982: PPUSH
21983: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_INT 22
21994: PUSH
21995: LD_OWVAR 2
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 69
22008: PPUSH
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 74
22018: PPUSH
22019: CALL_OW 115
// until IsDead ( un ) ;
22023: LD_VAR 0 2
22027: PPUSH
22028: CALL_OW 301
22032: IFFALSE 21980
// end ;
22034: PPOPN 2
22036: END
// every 0 0$1 trigger StreamModeActive and sStu do
22037: LD_EXP 33
22041: PUSH
22042: LD_EXP 72
22046: AND
22047: IFFALSE 22063
22049: GO 22051
22051: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22052: LD_STRING displayStucuk();
22054: PPUSH
22055: CALL_OW 559
// ResetFog ;
22059: CALL_OW 335
// end ;
22063: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22064: LD_EXP 33
22068: PUSH
22069: LD_EXP 65
22073: AND
22074: IFFALSE 22215
22076: GO 22078
22078: DISABLE
22079: LD_INT 0
22081: PPUSH
22082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: LD_OWVAR 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: ST_TO_ADDR
// if not tmp then
22119: LD_VAR 0 2
22123: NOT
22124: IFFALSE 22128
// exit ;
22126: GO 22215
// un := tmp [ rand ( 1 , tmp ) ] ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 2
22137: PUSH
22138: LD_INT 1
22140: PPUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: CALL_OW 12
22150: ARRAY
22151: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_INT 0
22159: PPUSH
22160: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22164: LD_VAR 0 1
22168: PPUSH
22169: LD_OWVAR 3
22173: PUSH
22174: LD_VAR 0 1
22178: DIFF
22179: PPUSH
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL_OW 74
22189: PPUSH
22190: CALL_OW 115
// wait ( 0 0$20 ) ;
22194: LD_INT 700
22196: PPUSH
22197: CALL_OW 67
// SetSide ( un , your_side ) ;
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_OWVAR 2
22210: PPUSH
22211: CALL_OW 235
// end ;
22215: PPOPN 2
22217: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22218: LD_EXP 33
22222: PUSH
22223: LD_EXP 66
22227: AND
22228: IFFALSE 22334
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: ST_TO_ADDR
// if not depot then
22290: LD_VAR 0 1
22294: NOT
22295: IFFALSE 22299
// exit ;
22297: GO 22334
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22299: LD_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: CALL_OW 250
22312: PPUSH
22313: LD_VAR 0 1
22317: PUSH
22318: LD_INT 1
22320: ARRAY
22321: PPUSH
22322: CALL_OW 251
22326: PPUSH
22327: LD_INT 70
22329: PPUSH
22330: CALL_OW 495
// end ;
22334: PPOPN 1
22336: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22337: LD_EXP 33
22341: PUSH
22342: LD_EXP 67
22346: AND
22347: IFFALSE 22558
22349: GO 22351
22351: DISABLE
22352: LD_INT 0
22354: PPUSH
22355: PPUSH
22356: PPUSH
22357: PPUSH
22358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22359: LD_ADDR_VAR 0 5
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_OWVAR 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 21
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: ST_TO_ADDR
// if not tmp then
22395: LD_VAR 0 5
22399: NOT
22400: IFFALSE 22404
// exit ;
22402: GO 22558
// for i in tmp do
22404: LD_ADDR_VAR 0 1
22408: PUSH
22409: LD_VAR 0 5
22413: PUSH
22414: FOR_IN
22415: IFFALSE 22556
// begin d := rand ( 0 , 5 ) ;
22417: LD_ADDR_VAR 0 4
22421: PUSH
22422: LD_INT 0
22424: PPUSH
22425: LD_INT 5
22427: PPUSH
22428: CALL_OW 12
22432: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PPUSH
22448: LD_VAR 0 4
22452: PPUSH
22453: LD_INT 3
22455: PPUSH
22456: LD_INT 12
22458: PPUSH
22459: CALL_OW 12
22463: PPUSH
22464: CALL_OW 272
22468: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 251
22483: PPUSH
22484: LD_VAR 0 4
22488: PPUSH
22489: LD_INT 3
22491: PPUSH
22492: LD_INT 12
22494: PPUSH
22495: CALL_OW 12
22499: PPUSH
22500: CALL_OW 273
22504: ST_TO_ADDR
// if ValidHex ( x , y ) then
22505: LD_VAR 0 2
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: CALL_OW 488
22519: IFFALSE 22554
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: LD_VAR 0 3
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: CALL_OW 12
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 483
// end ;
22554: GO 22414
22556: POP
22557: POP
// end ;
22558: PPOPN 5
22560: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22561: LD_EXP 33
22565: PUSH
22566: LD_EXP 68
22570: AND
22571: IFFALSE 22665
22573: GO 22575
22575: DISABLE
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: ST_TO_ADDR
// if not tmp then
22627: LD_VAR 0 2
22631: NOT
22632: IFFALSE 22636
// exit ;
22634: GO 22665
// for i in tmp do
22636: LD_ADDR_VAR 0 1
22640: PUSH
22641: LD_VAR 0 2
22645: PUSH
22646: FOR_IN
22647: IFFALSE 22663
// SetFuel ( i , 0 ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 0
22656: PPUSH
22657: CALL_OW 240
22661: GO 22646
22663: POP
22664: POP
// end ;
22665: PPOPN 2
22667: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22668: LD_EXP 33
22672: PUSH
22673: LD_EXP 69
22677: AND
22678: IFFALSE 22744
22680: GO 22682
22682: DISABLE
22683: LD_INT 0
22685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22686: LD_ADDR_VAR 0 1
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_OWVAR 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 29
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: ST_TO_ADDR
// if not tmp then
22722: LD_VAR 0 1
22726: NOT
22727: IFFALSE 22731
// exit ;
22729: GO 22744
// DestroyUnit ( tmp [ 1 ] ) ;
22731: LD_VAR 0 1
22735: PUSH
22736: LD_INT 1
22738: ARRAY
22739: PPUSH
22740: CALL_OW 65
// end ;
22744: PPOPN 1
22746: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22747: LD_EXP 33
22751: PUSH
22752: LD_EXP 71
22756: AND
22757: IFFALSE 22886
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
// begin uc_side := 0 ;
22765: LD_ADDR_OWVAR 20
22769: PUSH
22770: LD_INT 0
22772: ST_TO_ADDR
// uc_nation := nation_arabian ;
22773: LD_ADDR_OWVAR 21
22777: PUSH
22778: LD_INT 2
22780: ST_TO_ADDR
// hc_gallery :=  ;
22781: LD_ADDR_OWVAR 33
22785: PUSH
22786: LD_STRING 
22788: ST_TO_ADDR
// hc_name :=  ;
22789: LD_ADDR_OWVAR 26
22793: PUSH
22794: LD_STRING 
22796: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22797: LD_INT 1
22799: PPUSH
22800: LD_INT 11
22802: PPUSH
22803: LD_INT 10
22805: PPUSH
22806: CALL_OW 380
// un := CreateHuman ;
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: CALL_OW 44
22819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_INT 1
22827: PPUSH
22828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22832: LD_INT 35
22834: PPUSH
22835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: PPUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 74
22870: PPUSH
22871: CALL_OW 115
// until IsDead ( un ) ;
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 301
22884: IFFALSE 22832
// end ;
22886: PPOPN 1
22888: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22889: LD_EXP 33
22893: PUSH
22894: LD_EXP 73
22898: AND
22899: IFFALSE 22911
22901: GO 22903
22903: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22904: LD_STRING earthquake(getX(game), 0, 32)
22906: PPUSH
22907: CALL_OW 559
22911: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22912: LD_EXP 33
22916: PUSH
22917: LD_EXP 74
22921: AND
22922: IFFALSE 23013
22924: GO 22926
22926: DISABLE
22927: LD_INT 0
22929: PPUSH
// begin enable ;
22930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22931: LD_ADDR_VAR 0 1
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_OWVAR 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 33
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: ST_TO_ADDR
// if not tmp then
22978: LD_VAR 0 1
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22987: LD_VAR 0 1
22991: PUSH
22992: LD_INT 1
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 12
23004: ARRAY
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 234
// end ;
23013: PPOPN 1
23015: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23016: LD_EXP 33
23020: PUSH
23021: LD_EXP 75
23025: AND
23026: IFFALSE 23167
23028: GO 23030
23030: DISABLE
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_OWVAR 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 25
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 3
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23167
// un := tmp [ rand ( 1 , tmp ) ] ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_VAR 0 3
23090: PUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: CALL_OW 12
23103: ARRAY
23104: ST_TO_ADDR
// if Crawls ( un ) then
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 318
23114: IFFALSE 23125
// ComWalk ( un ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_INT 9
23132: PPUSH
23133: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23137: LD_INT 28
23139: PPUSH
23140: LD_OWVAR 2
23144: PPUSH
23145: LD_INT 2
23147: PPUSH
23148: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23152: LD_INT 29
23154: PPUSH
23155: LD_OWVAR 2
23159: PPUSH
23160: LD_INT 2
23162: PPUSH
23163: CALL_OW 322
// end ;
23167: PPOPN 3
23169: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23170: LD_EXP 33
23174: PUSH
23175: LD_EXP 76
23179: AND
23180: IFFALSE 23291
23182: GO 23184
23184: DISABLE
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
23189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_OWVAR 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 25
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if not tmp then
23226: LD_VAR 0 3
23230: NOT
23231: IFFALSE 23235
// exit ;
23233: GO 23291
// un := tmp [ rand ( 1 , tmp ) ] ;
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_VAR 0 3
23244: PUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: CALL_OW 12
23257: ARRAY
23258: ST_TO_ADDR
// if Crawls ( un ) then
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL_OW 318
23268: IFFALSE 23279
// ComWalk ( un ) ;
23270: LD_VAR 0 2
23274: PPUSH
23275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_INT 8
23286: PPUSH
23287: CALL_OW 336
// end ;
23291: PPOPN 3
23293: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23294: LD_EXP 33
23298: PUSH
23299: LD_EXP 77
23303: AND
23304: IFFALSE 23448
23306: GO 23308
23308: DISABLE
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_OWVAR 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 34
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: LD_INT 51
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 34
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 69
23388: ST_TO_ADDR
// if not tmp then
23389: LD_VAR 0 2
23393: NOT
23394: IFFALSE 23398
// exit ;
23396: GO 23448
// for i in tmp do
23398: LD_ADDR_VAR 0 1
23402: PUSH
23403: LD_VAR 0 2
23407: PUSH
23408: FOR_IN
23409: IFFALSE 23446
// if GetCargo ( i , mat_artifact ) = 0 then
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 4
23418: PPUSH
23419: CALL_OW 289
23423: PUSH
23424: LD_INT 0
23426: EQUAL
23427: IFFALSE 23444
// SetCargo ( i , mat_siberit , 100 ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 100
23439: PPUSH
23440: CALL_OW 290
23444: GO 23408
23446: POP
23447: POP
// end ;
23448: PPOPN 2
23450: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23451: LD_EXP 33
23455: PUSH
23456: LD_EXP 78
23460: AND
23461: IFFALSE 23644
23463: GO 23465
23465: DISABLE
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_INT 22
23477: PUSH
23478: LD_OWVAR 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: ST_TO_ADDR
// if not tmp then
23492: LD_VAR 0 2
23496: NOT
23497: IFFALSE 23501
// exit ;
23499: GO 23644
// for i := 1 to 2 do
23501: LD_ADDR_VAR 0 1
23505: PUSH
23506: DOUBLE
23507: LD_INT 1
23509: DEC
23510: ST_TO_ADDR
23511: LD_INT 2
23513: PUSH
23514: FOR_TO
23515: IFFALSE 23642
// begin uc_side := your_side ;
23517: LD_ADDR_OWVAR 20
23521: PUSH
23522: LD_OWVAR 2
23526: ST_TO_ADDR
// uc_nation := nation_american ;
23527: LD_ADDR_OWVAR 21
23531: PUSH
23532: LD_INT 1
23534: ST_TO_ADDR
// vc_chassis := us_morphling ;
23535: LD_ADDR_OWVAR 37
23539: PUSH
23540: LD_INT 5
23542: ST_TO_ADDR
// vc_engine := engine_siberite ;
23543: LD_ADDR_OWVAR 39
23547: PUSH
23548: LD_INT 3
23550: ST_TO_ADDR
// vc_control := control_computer ;
23551: LD_ADDR_OWVAR 38
23555: PUSH
23556: LD_INT 3
23558: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23559: LD_ADDR_OWVAR 40
23563: PUSH
23564: LD_INT 10
23566: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23567: LD_VAR 0 2
23571: PUSH
23572: LD_INT 1
23574: ARRAY
23575: PPUSH
23576: CALL_OW 310
23580: NOT
23581: IFFALSE 23628
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23583: CALL_OW 45
23587: PPUSH
23588: LD_VAR 0 2
23592: PUSH
23593: LD_INT 1
23595: ARRAY
23596: PPUSH
23597: CALL_OW 250
23601: PPUSH
23602: LD_VAR 0 2
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PPUSH
23611: CALL_OW 251
23615: PPUSH
23616: LD_INT 12
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 50
23626: GO 23640
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23628: CALL_OW 45
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 51
// end ;
23640: GO 23514
23642: POP
23643: POP
// end ;
23644: PPOPN 2
23646: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23647: LD_EXP 33
23651: PUSH
23652: LD_EXP 79
23656: AND
23657: IFFALSE 23879
23659: GO 23661
23661: DISABLE
23662: LD_INT 0
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23670: LD_ADDR_VAR 0 6
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_OWVAR 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: LD_INT 23
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 69
23723: ST_TO_ADDR
// if not tmp then
23724: LD_VAR 0 6
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23879
// s1 := rand ( 1 , 4 ) ;
23733: LD_ADDR_VAR 0 2
23737: PUSH
23738: LD_INT 1
23740: PPUSH
23741: LD_INT 4
23743: PPUSH
23744: CALL_OW 12
23748: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23749: LD_ADDR_VAR 0 4
23753: PUSH
23754: LD_VAR 0 6
23758: PUSH
23759: LD_INT 1
23761: ARRAY
23762: PPUSH
23763: LD_VAR 0 2
23767: PPUSH
23768: CALL_OW 259
23772: ST_TO_ADDR
// if s1 = 1 then
23773: LD_VAR 0 2
23777: PUSH
23778: LD_INT 1
23780: EQUAL
23781: IFFALSE 23801
// s2 := rand ( 2 , 4 ) else
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_INT 2
23790: PPUSH
23791: LD_INT 4
23793: PPUSH
23794: CALL_OW 12
23798: ST_TO_ADDR
23799: GO 23809
// s2 := 1 ;
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 1
23808: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 6
23818: PUSH
23819: LD_INT 1
23821: ARRAY
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: CALL_OW 259
23832: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23833: LD_VAR 0 6
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: PPUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: LD_VAR 0 5
23851: PPUSH
23852: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23856: LD_VAR 0 6
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: CALL_OW 237
// end ;
23879: PPOPN 6
23881: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23882: LD_EXP 33
23886: PUSH
23887: LD_EXP 80
23891: AND
23892: IFFALSE 23971
23894: GO 23896
23896: DISABLE
23897: LD_INT 0
23899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23900: LD_ADDR_VAR 0 1
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_OWVAR 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 69
23935: ST_TO_ADDR
// if not tmp then
23936: LD_VAR 0 1
23940: NOT
23941: IFFALSE 23945
// exit ;
23943: GO 23971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23945: LD_VAR 0 1
23949: PUSH
23950: LD_INT 1
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 12
23962: ARRAY
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 234
// end ;
23971: PPOPN 1
23973: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23974: LD_EXP 33
23978: PUSH
23979: LD_EXP 81
23983: AND
23984: IFFALSE 24096
23986: GO 23988
23988: DISABLE
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23993: LD_ADDR_VAR 0 2
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_OWVAR 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 27
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 26
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 28
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: ST_TO_ADDR
// if not tmp then
24058: LD_VAR 0 2
24062: NOT
24063: IFFALSE 24067
// exit ;
24065: GO 24096
// for i in tmp do
24067: LD_ADDR_VAR 0 1
24071: PUSH
24072: LD_VAR 0 2
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24094
// SetLives ( i , 1 ) ;
24080: LD_VAR 0 1
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 234
24092: GO 24077
24094: POP
24095: POP
// end ;
24096: PPOPN 2
24098: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24099: LD_EXP 33
24103: PUSH
24104: LD_EXP 82
24108: AND
24109: IFFALSE 24396
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
24118: PPUSH
// begin i := rand ( 1 , 7 ) ;
24119: LD_ADDR_VAR 0 1
24123: PUSH
24124: LD_INT 1
24126: PPUSH
24127: LD_INT 7
24129: PPUSH
24130: CALL_OW 12
24134: ST_TO_ADDR
// case i of 1 :
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24158
24148: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24149: LD_STRING earthquake(getX(game), 0, 32)
24151: PPUSH
24152: CALL_OW 559
24156: GO 24396
24158: LD_INT 2
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24180
24166: POP
// begin ToLua ( displayStucuk(); ) ;
24167: LD_STRING displayStucuk();
24169: PPUSH
24170: CALL_OW 559
// ResetFog ;
24174: CALL_OW 335
// end ; 3 :
24178: GO 24396
24180: LD_INT 3
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24292
24188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 25
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24396
// un := tmp [ rand ( 1 , tmp ) ] ;
24234: LD_ADDR_VAR 0 3
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_INT 1
24246: PPUSH
24247: LD_VAR 0 2
24251: PPUSH
24252: CALL_OW 12
24256: ARRAY
24257: ST_TO_ADDR
// if Crawls ( un ) then
24258: LD_VAR 0 3
24262: PPUSH
24263: CALL_OW 318
24267: IFFALSE 24278
// ComWalk ( un ) ;
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24278: LD_VAR 0 3
24282: PPUSH
24283: LD_INT 8
24285: PPUSH
24286: CALL_OW 336
// end ; 4 :
24290: GO 24396
24292: LD_INT 4
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24374
24300: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24301: LD_ADDR_VAR 0 2
24305: PUSH
24306: LD_INT 22
24308: PUSH
24309: LD_OWVAR 2
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: LD_INT 29
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PPUSH
24332: CALL_OW 69
24336: ST_TO_ADDR
// if not tmp then
24337: LD_VAR 0 2
24341: NOT
24342: IFFALSE 24346
// exit ;
24344: GO 24396
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: PPUSH
24355: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24359: LD_VAR 0 2
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: CALL_OW 65
// end ; 5 .. 7 :
24372: GO 24396
24374: LD_INT 5
24376: DOUBLE
24377: GREATEREQUAL
24378: IFFALSE 24386
24380: LD_INT 7
24382: DOUBLE
24383: LESSEQUAL
24384: IFTRUE 24388
24386: GO 24395
24388: POP
// StreamSibBomb ; end ;
24389: CALL 20633 0 0
24393: GO 24396
24395: POP
// end ;
24396: PPOPN 3
24398: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24399: LD_EXP 33
24403: PUSH
24404: LD_EXP 83
24408: AND
24409: IFFALSE 24565
24411: GO 24413
24413: DISABLE
24414: LD_INT 0
24416: PPUSH
24417: PPUSH
24418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24419: LD_ADDR_VAR 0 2
24423: PUSH
24424: LD_INT 81
24426: PUSH
24427: LD_OWVAR 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 21
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24565
// p := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24490: LD_INT 35
24492: PPUSH
24493: CALL_OW 67
// p := p + 1 ;
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_INT 1
24509: PLUS
24510: ST_TO_ADDR
// for i in tmp do
24511: LD_ADDR_VAR 0 1
24515: PUSH
24516: LD_VAR 0 2
24520: PUSH
24521: FOR_IN
24522: IFFALSE 24553
// if GetLives ( i ) < 1000 then
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 256
24533: PUSH
24534: LD_INT 1000
24536: LESS
24537: IFFALSE 24551
// SetLives ( i , 1000 ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_INT 1000
24546: PPUSH
24547: CALL_OW 234
24551: GO 24521
24553: POP
24554: POP
// until p > 20 ;
24555: LD_VAR 0 3
24559: PUSH
24560: LD_INT 20
24562: GREATER
24563: IFFALSE 24490
// end ;
24565: PPOPN 3
24567: END
// every 0 0$1 trigger StreamModeActive and sTime do
24568: LD_EXP 33
24572: PUSH
24573: LD_EXP 84
24577: AND
24578: IFFALSE 24613
24580: GO 24582
24582: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24583: LD_INT 28
24585: PPUSH
24586: LD_OWVAR 2
24590: PPUSH
24591: LD_INT 2
24593: PPUSH
24594: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24598: LD_INT 30
24600: PPUSH
24601: LD_OWVAR 2
24605: PPUSH
24606: LD_INT 2
24608: PPUSH
24609: CALL_OW 322
// end ;
24613: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24614: LD_EXP 33
24618: PUSH
24619: LD_EXP 85
24623: AND
24624: IFFALSE 24745
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_OWVAR 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: ST_TO_ADDR
// if not tmp then
24687: LD_VAR 0 2
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 24745
// for i in tmp do
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24743
// begin if Crawls ( i ) then
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 318
24718: IFFALSE 24729
// ComWalk ( i ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 138
// SetClass ( i , 2 ) ;
24729: LD_VAR 0 1
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL_OW 336
// end ;
24741: GO 24706
24743: POP
24744: POP
// end ;
24745: PPOPN 2
24747: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24748: LD_EXP 33
24752: PUSH
24753: LD_EXP 86
24757: AND
24758: IFFALSE 25046
24760: GO 24762
24762: DISABLE
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24768: LD_OWVAR 2
24772: PPUSH
24773: LD_INT 9
24775: PPUSH
24776: LD_INT 1
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24786: LD_INT 9
24788: PPUSH
24789: LD_OWVAR 2
24793: PPUSH
24794: CALL_OW 343
// uc_side := 9 ;
24798: LD_ADDR_OWVAR 20
24802: PUSH
24803: LD_INT 9
24805: ST_TO_ADDR
// uc_nation := 2 ;
24806: LD_ADDR_OWVAR 21
24810: PUSH
24811: LD_INT 2
24813: ST_TO_ADDR
// hc_name := Dark Warrior ;
24814: LD_ADDR_OWVAR 26
24818: PUSH
24819: LD_STRING Dark Warrior
24821: ST_TO_ADDR
// hc_gallery :=  ;
24822: LD_ADDR_OWVAR 33
24826: PUSH
24827: LD_STRING 
24829: ST_TO_ADDR
// hc_noskilllimit := true ;
24830: LD_ADDR_OWVAR 76
24834: PUSH
24835: LD_INT 1
24837: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24838: LD_ADDR_OWVAR 31
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 30
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
// un := CreateHuman ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: CALL_OW 44
24870: ST_TO_ADDR
// hc_noskilllimit := false ;
24871: LD_ADDR_OWVAR 76
24875: PUSH
24876: LD_INT 0
24878: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24879: LD_VAR 0 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: CALL_OW 51
// ToLua ( playRanger() ) ;
24891: LD_STRING playRanger()
24893: PPUSH
24894: CALL_OW 559
// p := 0 ;
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 0
24905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24906: LD_INT 35
24908: PPUSH
24909: CALL_OW 67
// p := p + 1 ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_VAR 0 2
24922: PUSH
24923: LD_INT 1
24925: PLUS
24926: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24927: LD_VAR 0 3
24931: PPUSH
24932: CALL_OW 256
24936: PUSH
24937: LD_INT 1000
24939: LESS
24940: IFFALSE 24954
// SetLives ( un , 1000 ) ;
24942: LD_VAR 0 3
24946: PPUSH
24947: LD_INT 1000
24949: PPUSH
24950: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24954: LD_VAR 0 3
24958: PPUSH
24959: LD_INT 81
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 91
24973: PUSH
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL_OW 74
25005: PPUSH
25006: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25010: LD_VAR 0 2
25014: PUSH
25015: LD_INT 80
25017: GREATER
25018: PUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 301
25028: OR
25029: IFFALSE 24906
// if un then
25031: LD_VAR 0 3
25035: IFFALSE 25046
// RemoveUnit ( un ) ;
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 64
// end ;
25046: PPOPN 3
25048: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25049: LD_EXP 87
25053: IFFALSE 25169
25055: GO 25057
25057: DISABLE
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25063: LD_ADDR_VAR 0 2
25067: PUSH
25068: LD_INT 81
25070: PUSH
25071: LD_OWVAR 2
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 21
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PPUSH
25094: CALL_OW 69
25098: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25099: LD_STRING playComputer()
25101: PPUSH
25102: CALL_OW 559
// if not tmp then
25106: LD_VAR 0 2
25110: NOT
25111: IFFALSE 25115
// exit ;
25113: GO 25169
// for i in tmp do
25115: LD_ADDR_VAR 0 1
25119: PUSH
25120: LD_VAR 0 2
25124: PUSH
25125: FOR_IN
25126: IFFALSE 25167
// for j := 1 to 4 do
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_INT 4
25140: PUSH
25141: FOR_TO
25142: IFFALSE 25163
// SetSkill ( i , j , 10 ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_INT 10
25156: PPUSH
25157: CALL_OW 237
25161: GO 25141
25163: POP
25164: POP
25165: GO 25125
25167: POP
25168: POP
// end ;
25169: PPOPN 3
25171: END
// every 0 0$1 trigger s30 do var i , tmp ;
25172: LD_EXP 88
25176: IFFALSE 25245
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
25184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25185: LD_ADDR_VAR 0 2
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_OWVAR 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 2
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25245
// for i in tmp do
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: FOR_IN
25227: IFFALSE 25243
// SetLives ( i , 300 ) ;
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_INT 300
25236: PPUSH
25237: CALL_OW 234
25241: GO 25226
25243: POP
25244: POP
// end ;
25245: PPOPN 2
25247: END
// every 0 0$1 trigger s60 do var i , tmp ;
25248: LD_EXP 89
25252: IFFALSE 25321
25254: GO 25256
25256: DISABLE
25257: LD_INT 0
25259: PPUSH
25260: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: LD_INT 22
25268: PUSH
25269: LD_OWVAR 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 69
25282: ST_TO_ADDR
// if not tmp then
25283: LD_VAR 0 2
25287: NOT
25288: IFFALSE 25292
// exit ;
25290: GO 25321
// for i in tmp do
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_VAR 0 2
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25319
// SetLives ( i , 600 ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 600
25312: PPUSH
25313: CALL_OW 234
25317: GO 25302
25319: POP
25320: POP
// end ;
25321: PPOPN 2
25323: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25324: LD_INT 0
25326: PPUSH
// case cmd of 301 :
25327: LD_VAR 0 1
25331: PUSH
25332: LD_INT 301
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25372
25340: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25341: LD_VAR 0 6
25345: PPUSH
25346: LD_VAR 0 7
25350: PPUSH
25351: LD_VAR 0 8
25355: PPUSH
25356: LD_VAR 0 4
25360: PPUSH
25361: LD_VAR 0 5
25365: PPUSH
25366: CALL 26573 0 5
25370: GO 25493
25372: LD_INT 302
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25417
25380: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25381: LD_VAR 0 6
25385: PPUSH
25386: LD_VAR 0 7
25390: PPUSH
25391: LD_VAR 0 8
25395: PPUSH
25396: LD_VAR 0 9
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: LD_VAR 0 5
25410: PPUSH
25411: CALL 26664 0 6
25415: GO 25493
25417: LD_INT 303
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25462
25425: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25426: LD_VAR 0 6
25430: PPUSH
25431: LD_VAR 0 7
25435: PPUSH
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_VAR 0 9
25445: PPUSH
25446: LD_VAR 0 4
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: CALL 25498 0 6
25460: GO 25493
25462: LD_INT 304
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25492
25470: POP
// hHackTeleport ( unit , x , y ) ; end ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_VAR 0 5
25485: PPUSH
25486: CALL 27257 0 3
25490: GO 25493
25492: POP
// end ;
25493: LD_VAR 0 12
25497: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25498: LD_INT 0
25500: PPUSH
25501: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25502: LD_VAR 0 1
25506: PUSH
25507: LD_INT 1
25509: LESS
25510: PUSH
25511: LD_VAR 0 1
25515: PUSH
25516: LD_INT 3
25518: GREATER
25519: OR
25520: PUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: LD_VAR 0 6
25530: PPUSH
25531: CALL_OW 428
25535: OR
25536: IFFALSE 25540
// exit ;
25538: GO 26260
// uc_side := your_side ;
25540: LD_ADDR_OWVAR 20
25544: PUSH
25545: LD_OWVAR 2
25549: ST_TO_ADDR
// uc_nation := nation ;
25550: LD_ADDR_OWVAR 21
25554: PUSH
25555: LD_VAR 0 1
25559: ST_TO_ADDR
// bc_level = 1 ;
25560: LD_ADDR_OWVAR 43
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// case btype of 1 :
25568: LD_VAR 0 2
25572: PUSH
25573: LD_INT 1
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25592
25581: POP
// bc_type := b_depot ; 2 :
25582: LD_ADDR_OWVAR 42
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
25590: GO 26204
25592: LD_INT 2
25594: DOUBLE
25595: EQUAL
25596: IFTRUE 25600
25598: GO 25611
25600: POP
// bc_type := b_warehouse ; 3 :
25601: LD_ADDR_OWVAR 42
25605: PUSH
25606: LD_INT 1
25608: ST_TO_ADDR
25609: GO 26204
25611: LD_INT 3
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25630
25619: POP
// bc_type := b_lab ; 4 .. 9 :
25620: LD_ADDR_OWVAR 42
25624: PUSH
25625: LD_INT 6
25627: ST_TO_ADDR
25628: GO 26204
25630: LD_INT 4
25632: DOUBLE
25633: GREATEREQUAL
25634: IFFALSE 25642
25636: LD_INT 9
25638: DOUBLE
25639: LESSEQUAL
25640: IFTRUE 25644
25642: GO 25696
25644: POP
// begin bc_type := b_lab_half ;
25645: LD_ADDR_OWVAR 42
25649: PUSH
25650: LD_INT 7
25652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25653: LD_ADDR_OWVAR 44
25657: PUSH
25658: LD_INT 10
25660: PUSH
25661: LD_INT 11
25663: PUSH
25664: LD_INT 12
25666: PUSH
25667: LD_INT 15
25669: PUSH
25670: LD_INT 14
25672: PUSH
25673: LD_INT 13
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: PUSH
25684: LD_VAR 0 2
25688: PUSH
25689: LD_INT 3
25691: MINUS
25692: ARRAY
25693: ST_TO_ADDR
// end ; 10 .. 13 :
25694: GO 26204
25696: LD_INT 10
25698: DOUBLE
25699: GREATEREQUAL
25700: IFFALSE 25708
25702: LD_INT 13
25704: DOUBLE
25705: LESSEQUAL
25706: IFTRUE 25710
25708: GO 25787
25710: POP
// begin bc_type := b_lab_full ;
25711: LD_ADDR_OWVAR 42
25715: PUSH
25716: LD_INT 8
25718: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25719: LD_ADDR_OWVAR 44
25723: PUSH
25724: LD_INT 10
25726: PUSH
25727: LD_INT 12
25729: PUSH
25730: LD_INT 14
25732: PUSH
25733: LD_INT 13
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: LD_VAR 0 2
25746: PUSH
25747: LD_INT 9
25749: MINUS
25750: ARRAY
25751: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25752: LD_ADDR_OWVAR 45
25756: PUSH
25757: LD_INT 11
25759: PUSH
25760: LD_INT 15
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 15
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: PUSH
25775: LD_VAR 0 2
25779: PUSH
25780: LD_INT 9
25782: MINUS
25783: ARRAY
25784: ST_TO_ADDR
// end ; 14 :
25785: GO 26204
25787: LD_INT 14
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// bc_type := b_workshop ; 15 :
25796: LD_ADDR_OWVAR 42
25800: PUSH
25801: LD_INT 2
25803: ST_TO_ADDR
25804: GO 26204
25806: LD_INT 15
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25825
25814: POP
// bc_type := b_factory ; 16 :
25815: LD_ADDR_OWVAR 42
25819: PUSH
25820: LD_INT 3
25822: ST_TO_ADDR
25823: GO 26204
25825: LD_INT 16
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25844
25833: POP
// bc_type := b_ext_gun ; 17 :
25834: LD_ADDR_OWVAR 42
25838: PUSH
25839: LD_INT 17
25841: ST_TO_ADDR
25842: GO 26204
25844: LD_INT 17
25846: DOUBLE
25847: EQUAL
25848: IFTRUE 25852
25850: GO 25880
25852: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25853: LD_ADDR_OWVAR 42
25857: PUSH
25858: LD_INT 19
25860: PUSH
25861: LD_INT 23
25863: PUSH
25864: LD_INT 19
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: PUSH
25872: LD_VAR 0 1
25876: ARRAY
25877: ST_TO_ADDR
25878: GO 26204
25880: LD_INT 18
25882: DOUBLE
25883: EQUAL
25884: IFTRUE 25888
25886: GO 25899
25888: POP
// bc_type := b_ext_radar ; 19 :
25889: LD_ADDR_OWVAR 42
25893: PUSH
25894: LD_INT 20
25896: ST_TO_ADDR
25897: GO 26204
25899: LD_INT 19
25901: DOUBLE
25902: EQUAL
25903: IFTRUE 25907
25905: GO 25918
25907: POP
// bc_type := b_ext_radio ; 20 :
25908: LD_ADDR_OWVAR 42
25912: PUSH
25913: LD_INT 22
25915: ST_TO_ADDR
25916: GO 26204
25918: LD_INT 20
25920: DOUBLE
25921: EQUAL
25922: IFTRUE 25926
25924: GO 25937
25926: POP
// bc_type := b_ext_siberium ; 21 :
25927: LD_ADDR_OWVAR 42
25931: PUSH
25932: LD_INT 21
25934: ST_TO_ADDR
25935: GO 26204
25937: LD_INT 21
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25956
25945: POP
// bc_type := b_ext_computer ; 22 :
25946: LD_ADDR_OWVAR 42
25950: PUSH
25951: LD_INT 24
25953: ST_TO_ADDR
25954: GO 26204
25956: LD_INT 22
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 25975
25964: POP
// bc_type := b_ext_track ; 23 :
25965: LD_ADDR_OWVAR 42
25969: PUSH
25970: LD_INT 16
25972: ST_TO_ADDR
25973: GO 26204
25975: LD_INT 23
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 25994
25983: POP
// bc_type := b_ext_laser ; 24 :
25984: LD_ADDR_OWVAR 42
25988: PUSH
25989: LD_INT 25
25991: ST_TO_ADDR
25992: GO 26204
25994: LD_INT 24
25996: DOUBLE
25997: EQUAL
25998: IFTRUE 26002
26000: GO 26013
26002: POP
// bc_type := b_control_tower ; 25 :
26003: LD_ADDR_OWVAR 42
26007: PUSH
26008: LD_INT 36
26010: ST_TO_ADDR
26011: GO 26204
26013: LD_INT 25
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26032
26021: POP
// bc_type := b_breastwork ; 26 :
26022: LD_ADDR_OWVAR 42
26026: PUSH
26027: LD_INT 31
26029: ST_TO_ADDR
26030: GO 26204
26032: LD_INT 26
26034: DOUBLE
26035: EQUAL
26036: IFTRUE 26040
26038: GO 26051
26040: POP
// bc_type := b_bunker ; 27 :
26041: LD_ADDR_OWVAR 42
26045: PUSH
26046: LD_INT 32
26048: ST_TO_ADDR
26049: GO 26204
26051: LD_INT 27
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26070
26059: POP
// bc_type := b_turret ; 28 :
26060: LD_ADDR_OWVAR 42
26064: PUSH
26065: LD_INT 33
26067: ST_TO_ADDR
26068: GO 26204
26070: LD_INT 28
26072: DOUBLE
26073: EQUAL
26074: IFTRUE 26078
26076: GO 26089
26078: POP
// bc_type := b_armoury ; 29 :
26079: LD_ADDR_OWVAR 42
26083: PUSH
26084: LD_INT 4
26086: ST_TO_ADDR
26087: GO 26204
26089: LD_INT 29
26091: DOUBLE
26092: EQUAL
26093: IFTRUE 26097
26095: GO 26108
26097: POP
// bc_type := b_barracks ; 30 :
26098: LD_ADDR_OWVAR 42
26102: PUSH
26103: LD_INT 5
26105: ST_TO_ADDR
26106: GO 26204
26108: LD_INT 30
26110: DOUBLE
26111: EQUAL
26112: IFTRUE 26116
26114: GO 26127
26116: POP
// bc_type := b_solar_power ; 31 :
26117: LD_ADDR_OWVAR 42
26121: PUSH
26122: LD_INT 27
26124: ST_TO_ADDR
26125: GO 26204
26127: LD_INT 31
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26146
26135: POP
// bc_type := b_oil_power ; 32 :
26136: LD_ADDR_OWVAR 42
26140: PUSH
26141: LD_INT 26
26143: ST_TO_ADDR
26144: GO 26204
26146: LD_INT 32
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26154
26152: GO 26165
26154: POP
// bc_type := b_siberite_power ; 33 :
26155: LD_ADDR_OWVAR 42
26159: PUSH
26160: LD_INT 28
26162: ST_TO_ADDR
26163: GO 26204
26165: LD_INT 33
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26184
26173: POP
// bc_type := b_oil_mine ; 34 :
26174: LD_ADDR_OWVAR 42
26178: PUSH
26179: LD_INT 29
26181: ST_TO_ADDR
26182: GO 26204
26184: LD_INT 34
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26203
26192: POP
// bc_type := b_siberite_mine ; end ;
26193: LD_ADDR_OWVAR 42
26197: PUSH
26198: LD_INT 30
26200: ST_TO_ADDR
26201: GO 26204
26203: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26204: LD_ADDR_VAR 0 8
26208: PUSH
26209: LD_VAR 0 5
26213: PPUSH
26214: LD_VAR 0 6
26218: PPUSH
26219: LD_VAR 0 3
26223: PPUSH
26224: CALL_OW 47
26228: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26229: LD_OWVAR 42
26233: PUSH
26234: LD_INT 32
26236: PUSH
26237: LD_INT 33
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: IN
26244: IFFALSE 26260
// PlaceWeaponTurret ( b , weapon ) ;
26246: LD_VAR 0 8
26250: PPUSH
26251: LD_VAR 0 4
26255: PPUSH
26256: CALL_OW 431
// end ;
26260: LD_VAR 0 7
26264: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26265: LD_INT 0
26267: PPUSH
26268: PPUSH
26269: PPUSH
26270: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26271: LD_ADDR_VAR 0 4
26275: PUSH
26276: LD_INT 22
26278: PUSH
26279: LD_OWVAR 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 30
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 69
26324: ST_TO_ADDR
// if not tmp then
26325: LD_VAR 0 4
26329: NOT
26330: IFFALSE 26334
// exit ;
26332: GO 26393
// for i in tmp do
26334: LD_ADDR_VAR 0 2
26338: PUSH
26339: LD_VAR 0 4
26343: PUSH
26344: FOR_IN
26345: IFFALSE 26391
// for j = 1 to 3 do
26347: LD_ADDR_VAR 0 3
26351: PUSH
26352: DOUBLE
26353: LD_INT 1
26355: DEC
26356: ST_TO_ADDR
26357: LD_INT 3
26359: PUSH
26360: FOR_TO
26361: IFFALSE 26387
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26363: LD_VAR 0 2
26367: PPUSH
26368: CALL_OW 274
26372: PPUSH
26373: LD_VAR 0 3
26377: PPUSH
26378: LD_INT 99999
26380: PPUSH
26381: CALL_OW 277
26385: GO 26360
26387: POP
26388: POP
26389: GO 26344
26391: POP
26392: POP
// end ;
26393: LD_VAR 0 1
26397: RET
// export function hHackSetLevel10 ; var i , j ; begin
26398: LD_INT 0
26400: PPUSH
26401: PPUSH
26402: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26403: LD_ADDR_VAR 0 2
26407: PUSH
26408: LD_INT 21
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PPUSH
26418: CALL_OW 69
26422: PUSH
26423: FOR_IN
26424: IFFALSE 26476
// if IsSelected ( i ) then
26426: LD_VAR 0 2
26430: PPUSH
26431: CALL_OW 306
26435: IFFALSE 26474
// begin for j := 1 to 4 do
26437: LD_ADDR_VAR 0 3
26441: PUSH
26442: DOUBLE
26443: LD_INT 1
26445: DEC
26446: ST_TO_ADDR
26447: LD_INT 4
26449: PUSH
26450: FOR_TO
26451: IFFALSE 26472
// SetSkill ( i , j , 10 ) ;
26453: LD_VAR 0 2
26457: PPUSH
26458: LD_VAR 0 3
26462: PPUSH
26463: LD_INT 10
26465: PPUSH
26466: CALL_OW 237
26470: GO 26450
26472: POP
26473: POP
// end ;
26474: GO 26423
26476: POP
26477: POP
// end ;
26478: LD_VAR 0 1
26482: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 22
26495: PUSH
26496: LD_OWVAR 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 21
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PPUSH
26519: CALL_OW 69
26523: PUSH
26524: FOR_IN
26525: IFFALSE 26566
// begin for j := 1 to 4 do
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: DOUBLE
26533: LD_INT 1
26535: DEC
26536: ST_TO_ADDR
26537: LD_INT 4
26539: PUSH
26540: FOR_TO
26541: IFFALSE 26562
// SetSkill ( i , j , 10 ) ;
26543: LD_VAR 0 2
26547: PPUSH
26548: LD_VAR 0 3
26552: PPUSH
26553: LD_INT 10
26555: PPUSH
26556: CALL_OW 237
26560: GO 26540
26562: POP
26563: POP
// end ;
26564: GO 26524
26566: POP
26567: POP
// end ;
26568: LD_VAR 0 1
26572: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26573: LD_INT 0
26575: PPUSH
// uc_side := your_side ;
26576: LD_ADDR_OWVAR 20
26580: PUSH
26581: LD_OWVAR 2
26585: ST_TO_ADDR
// uc_nation := nation ;
26586: LD_ADDR_OWVAR 21
26590: PUSH
26591: LD_VAR 0 1
26595: ST_TO_ADDR
// InitHc ;
26596: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26600: LD_INT 0
26602: PPUSH
26603: LD_VAR 0 2
26607: PPUSH
26608: LD_VAR 0 3
26612: PPUSH
26613: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26617: LD_VAR 0 4
26621: PPUSH
26622: LD_VAR 0 5
26626: PPUSH
26627: CALL_OW 428
26631: PUSH
26632: LD_INT 0
26634: EQUAL
26635: IFFALSE 26659
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26637: CALL_OW 44
26641: PPUSH
26642: LD_VAR 0 4
26646: PPUSH
26647: LD_VAR 0 5
26651: PPUSH
26652: LD_INT 1
26654: PPUSH
26655: CALL_OW 48
// end ;
26659: LD_VAR 0 6
26663: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26664: LD_INT 0
26666: PPUSH
26667: PPUSH
// uc_side := your_side ;
26668: LD_ADDR_OWVAR 20
26672: PUSH
26673: LD_OWVAR 2
26677: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26678: LD_VAR 0 1
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 3
26691: PUSH
26692: LD_INT 4
26694: PUSH
26695: LD_INT 5
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: IN
26705: IFFALSE 26717
// uc_nation := nation_american else
26707: LD_ADDR_OWVAR 21
26711: PUSH
26712: LD_INT 1
26714: ST_TO_ADDR
26715: GO 26760
// if chassis in [ 11 , 12 , 13 , 14 ] then
26717: LD_VAR 0 1
26721: PUSH
26722: LD_INT 11
26724: PUSH
26725: LD_INT 12
26727: PUSH
26728: LD_INT 13
26730: PUSH
26731: LD_INT 14
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: IN
26740: IFFALSE 26752
// uc_nation := nation_arabian else
26742: LD_ADDR_OWVAR 21
26746: PUSH
26747: LD_INT 2
26749: ST_TO_ADDR
26750: GO 26760
// uc_nation := nation_russian ;
26752: LD_ADDR_OWVAR 21
26756: PUSH
26757: LD_INT 3
26759: ST_TO_ADDR
// vc_chassis := chassis ;
26760: LD_ADDR_OWVAR 37
26764: PUSH
26765: LD_VAR 0 1
26769: ST_TO_ADDR
// vc_engine := engine ;
26770: LD_ADDR_OWVAR 39
26774: PUSH
26775: LD_VAR 0 2
26779: ST_TO_ADDR
// vc_control := control ;
26780: LD_ADDR_OWVAR 38
26784: PUSH
26785: LD_VAR 0 3
26789: ST_TO_ADDR
// vc_weapon := weapon ;
26790: LD_ADDR_OWVAR 40
26794: PUSH
26795: LD_VAR 0 4
26799: ST_TO_ADDR
// un := CreateVehicle ;
26800: LD_ADDR_VAR 0 8
26804: PUSH
26805: CALL_OW 45
26809: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26810: LD_VAR 0 8
26814: PPUSH
26815: LD_INT 0
26817: PPUSH
26818: LD_INT 5
26820: PPUSH
26821: CALL_OW 12
26825: PPUSH
26826: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26830: LD_VAR 0 8
26834: PPUSH
26835: LD_VAR 0 5
26839: PPUSH
26840: LD_VAR 0 6
26844: PPUSH
26845: LD_INT 1
26847: PPUSH
26848: CALL_OW 48
// end ;
26852: LD_VAR 0 7
26856: RET
// export hInvincible ; every 1 do
26857: GO 26859
26859: DISABLE
// hInvincible := [ ] ;
26860: LD_ADDR_EXP 90
26864: PUSH
26865: EMPTY
26866: ST_TO_ADDR
26867: END
// every 10 do var i ;
26868: GO 26870
26870: DISABLE
26871: LD_INT 0
26873: PPUSH
// begin enable ;
26874: ENABLE
// if not hInvincible then
26875: LD_EXP 90
26879: NOT
26880: IFFALSE 26884
// exit ;
26882: GO 26928
// for i in hInvincible do
26884: LD_ADDR_VAR 0 1
26888: PUSH
26889: LD_EXP 90
26893: PUSH
26894: FOR_IN
26895: IFFALSE 26926
// if GetLives ( i ) < 1000 then
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 256
26906: PUSH
26907: LD_INT 1000
26909: LESS
26910: IFFALSE 26924
// SetLives ( i , 1000 ) ;
26912: LD_VAR 0 1
26916: PPUSH
26917: LD_INT 1000
26919: PPUSH
26920: CALL_OW 234
26924: GO 26894
26926: POP
26927: POP
// end ;
26928: PPOPN 1
26930: END
// export function hHackInvincible ; var i ; begin
26931: LD_INT 0
26933: PPUSH
26934: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: LD_INT 21
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 21
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: PUSH
26973: FOR_IN
26974: IFFALSE 27035
// if IsSelected ( i ) then
26976: LD_VAR 0 2
26980: PPUSH
26981: CALL_OW 306
26985: IFFALSE 27033
// begin if i in hInvincible then
26987: LD_VAR 0 2
26991: PUSH
26992: LD_EXP 90
26996: IN
26997: IFFALSE 27017
// hInvincible := hInvincible diff i else
26999: LD_ADDR_EXP 90
27003: PUSH
27004: LD_EXP 90
27008: PUSH
27009: LD_VAR 0 2
27013: DIFF
27014: ST_TO_ADDR
27015: GO 27033
// hInvincible := hInvincible union i ;
27017: LD_ADDR_EXP 90
27021: PUSH
27022: LD_EXP 90
27026: PUSH
27027: LD_VAR 0 2
27031: UNION
27032: ST_TO_ADDR
// end ;
27033: GO 26973
27035: POP
27036: POP
// end ;
27037: LD_VAR 0 1
27041: RET
// export function hHackInvisible ; var i , j ; begin
27042: LD_INT 0
27044: PPUSH
27045: PPUSH
27046: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27047: LD_ADDR_VAR 0 2
27051: PUSH
27052: LD_INT 21
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PPUSH
27062: CALL_OW 69
27066: PUSH
27067: FOR_IN
27068: IFFALSE 27092
// if IsSelected ( i ) then
27070: LD_VAR 0 2
27074: PPUSH
27075: CALL_OW 306
27079: IFFALSE 27090
// ComForceInvisible ( i ) ;
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 496
27090: GO 27067
27092: POP
27093: POP
// end ;
27094: LD_VAR 0 1
27098: RET
// export function hHackChangeYourSide ; begin
27099: LD_INT 0
27101: PPUSH
// if your_side = 8 then
27102: LD_OWVAR 2
27106: PUSH
27107: LD_INT 8
27109: EQUAL
27110: IFFALSE 27122
// your_side := 0 else
27112: LD_ADDR_OWVAR 2
27116: PUSH
27117: LD_INT 0
27119: ST_TO_ADDR
27120: GO 27136
// your_side := your_side + 1 ;
27122: LD_ADDR_OWVAR 2
27126: PUSH
27127: LD_OWVAR 2
27131: PUSH
27132: LD_INT 1
27134: PLUS
27135: ST_TO_ADDR
// end ;
27136: LD_VAR 0 1
27140: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
27145: PPUSH
// for i in all_units do
27146: LD_ADDR_VAR 0 2
27150: PUSH
27151: LD_OWVAR 3
27155: PUSH
27156: FOR_IN
27157: IFFALSE 27235
// if IsSelected ( i ) then
27159: LD_VAR 0 2
27163: PPUSH
27164: CALL_OW 306
27168: IFFALSE 27233
// begin j := GetSide ( i ) ;
27170: LD_ADDR_VAR 0 3
27174: PUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: CALL_OW 255
27184: ST_TO_ADDR
// if j = 8 then
27185: LD_VAR 0 3
27189: PUSH
27190: LD_INT 8
27192: EQUAL
27193: IFFALSE 27205
// j := 0 else
27195: LD_ADDR_VAR 0 3
27199: PUSH
27200: LD_INT 0
27202: ST_TO_ADDR
27203: GO 27219
// j := j + 1 ;
27205: LD_ADDR_VAR 0 3
27209: PUSH
27210: LD_VAR 0 3
27214: PUSH
27215: LD_INT 1
27217: PLUS
27218: ST_TO_ADDR
// SetSide ( i , j ) ;
27219: LD_VAR 0 2
27223: PPUSH
27224: LD_VAR 0 3
27228: PPUSH
27229: CALL_OW 235
// end ;
27233: GO 27156
27235: POP
27236: POP
// end ;
27237: LD_VAR 0 1
27241: RET
// export function hHackFog ; begin
27242: LD_INT 0
27244: PPUSH
// FogOff ( true ) ;
27245: LD_INT 1
27247: PPUSH
27248: CALL_OW 344
// end ;
27252: LD_VAR 0 1
27256: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27257: LD_INT 0
27259: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27260: LD_VAR 0 1
27264: PPUSH
27265: LD_VAR 0 2
27269: PPUSH
27270: LD_VAR 0 3
27274: PPUSH
27275: LD_INT 1
27277: PPUSH
27278: LD_INT 1
27280: PPUSH
27281: CALL_OW 483
// CenterOnXY ( x , y ) ;
27285: LD_VAR 0 2
27289: PPUSH
27290: LD_VAR 0 3
27294: PPUSH
27295: CALL_OW 84
// end ;
27299: LD_VAR 0 4
27303: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27304: LD_INT 0
27306: PPUSH
27307: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27308: LD_VAR 0 1
27312: NOT
27313: PUSH
27314: LD_VAR 0 2
27318: PPUSH
27319: LD_VAR 0 3
27323: PPUSH
27324: CALL_OW 488
27328: NOT
27329: OR
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 266
27340: PUSH
27341: LD_INT 3
27343: NONEQUAL
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 247
27354: PUSH
27355: LD_INT 1
27357: EQUAL
27358: NOT
27359: AND
27360: OR
27361: IFFALSE 27365
// exit ;
27363: GO 27514
// if GetType ( factory ) = unit_human then
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 247
27374: PUSH
27375: LD_INT 1
27377: EQUAL
27378: IFFALSE 27395
// factory := IsInUnit ( factory ) ;
27380: LD_ADDR_VAR 0 1
27384: PUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 310
27394: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 266
27404: PUSH
27405: LD_INT 3
27407: NONEQUAL
27408: IFFALSE 27412
// exit ;
27410: GO 27514
// if HexInfo ( x , y ) = factory then
27412: LD_VAR 0 2
27416: PPUSH
27417: LD_VAR 0 3
27421: PPUSH
27422: CALL_OW 428
27426: PUSH
27427: LD_VAR 0 1
27431: EQUAL
27432: IFFALSE 27459
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27434: LD_ADDR_EXP 91
27438: PUSH
27439: LD_EXP 91
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_INT 0
27451: PPUSH
27452: CALL_OW 1
27456: ST_TO_ADDR
27457: GO 27510
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27459: LD_ADDR_EXP 91
27463: PUSH
27464: LD_EXP 91
27468: PPUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 255
27483: PUSH
27484: LD_VAR 0 1
27488: PUSH
27489: LD_VAR 0 2
27493: PUSH
27494: LD_VAR 0 3
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PPUSH
27505: CALL_OW 1
27509: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27510: CALL 27519 0 0
// end ;
27514: LD_VAR 0 4
27518: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27519: LD_INT 0
27521: PPUSH
27522: PPUSH
27523: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27524: LD_STRING resetFactoryWaypoint();
27526: PPUSH
27527: CALL_OW 559
// if factoryWaypoints then
27531: LD_EXP 91
27535: IFFALSE 27661
// begin list := PrepareArray ( factoryWaypoints ) ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_EXP 91
27546: PPUSH
27547: CALL 74097 0 1
27551: ST_TO_ADDR
// for i := 1 to list do
27552: LD_ADDR_VAR 0 2
27556: PUSH
27557: DOUBLE
27558: LD_INT 1
27560: DEC
27561: ST_TO_ADDR
27562: LD_VAR 0 3
27566: PUSH
27567: FOR_TO
27568: IFFALSE 27659
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27570: LD_STRING setFactoryWaypointXY(
27572: PUSH
27573: LD_VAR 0 3
27577: PUSH
27578: LD_VAR 0 2
27582: ARRAY
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: STR
27588: PUSH
27589: LD_STRING ,
27591: STR
27592: PUSH
27593: LD_VAR 0 3
27597: PUSH
27598: LD_VAR 0 2
27602: ARRAY
27603: PUSH
27604: LD_INT 2
27606: ARRAY
27607: STR
27608: PUSH
27609: LD_STRING ,
27611: STR
27612: PUSH
27613: LD_VAR 0 3
27617: PUSH
27618: LD_VAR 0 2
27622: ARRAY
27623: PUSH
27624: LD_INT 3
27626: ARRAY
27627: STR
27628: PUSH
27629: LD_STRING ,
27631: STR
27632: PUSH
27633: LD_VAR 0 3
27637: PUSH
27638: LD_VAR 0 2
27642: ARRAY
27643: PUSH
27644: LD_INT 4
27646: ARRAY
27647: STR
27648: PUSH
27649: LD_STRING )
27651: STR
27652: PPUSH
27653: CALL_OW 559
27657: GO 27567
27659: POP
27660: POP
// end ; end ;
27661: LD_VAR 0 1
27665: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27666: LD_INT 0
27668: PPUSH
// if HexInfo ( x , y ) = warehouse then
27669: LD_VAR 0 2
27673: PPUSH
27674: LD_VAR 0 3
27678: PPUSH
27679: CALL_OW 428
27683: PUSH
27684: LD_VAR 0 1
27688: EQUAL
27689: IFFALSE 27716
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27691: LD_ADDR_EXP 92
27695: PUSH
27696: LD_EXP 92
27700: PPUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: LD_INT 0
27708: PPUSH
27709: CALL_OW 1
27713: ST_TO_ADDR
27714: GO 27767
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27716: LD_ADDR_EXP 92
27720: PUSH
27721: LD_EXP 92
27725: PPUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: CALL_OW 255
27740: PUSH
27741: LD_VAR 0 1
27745: PUSH
27746: LD_VAR 0 2
27750: PUSH
27751: LD_VAR 0 3
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: PPUSH
27762: CALL_OW 1
27766: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27767: CALL 27776 0 0
// end ;
27771: LD_VAR 0 4
27775: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
27780: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27781: LD_STRING resetWarehouseGatheringPoints();
27783: PPUSH
27784: CALL_OW 559
// if warehouseGatheringPoints then
27788: LD_EXP 92
27792: IFFALSE 27918
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27794: LD_ADDR_VAR 0 3
27798: PUSH
27799: LD_EXP 92
27803: PPUSH
27804: CALL 74097 0 1
27808: ST_TO_ADDR
// for i := 1 to list do
27809: LD_ADDR_VAR 0 2
27813: PUSH
27814: DOUBLE
27815: LD_INT 1
27817: DEC
27818: ST_TO_ADDR
27819: LD_VAR 0 3
27823: PUSH
27824: FOR_TO
27825: IFFALSE 27916
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27827: LD_STRING setWarehouseGatheringPointXY(
27829: PUSH
27830: LD_VAR 0 3
27834: PUSH
27835: LD_VAR 0 2
27839: ARRAY
27840: PUSH
27841: LD_INT 1
27843: ARRAY
27844: STR
27845: PUSH
27846: LD_STRING ,
27848: STR
27849: PUSH
27850: LD_VAR 0 3
27854: PUSH
27855: LD_VAR 0 2
27859: ARRAY
27860: PUSH
27861: LD_INT 2
27863: ARRAY
27864: STR
27865: PUSH
27866: LD_STRING ,
27868: STR
27869: PUSH
27870: LD_VAR 0 3
27874: PUSH
27875: LD_VAR 0 2
27879: ARRAY
27880: PUSH
27881: LD_INT 3
27883: ARRAY
27884: STR
27885: PUSH
27886: LD_STRING ,
27888: STR
27889: PUSH
27890: LD_VAR 0 3
27894: PUSH
27895: LD_VAR 0 2
27899: ARRAY
27900: PUSH
27901: LD_INT 4
27903: ARRAY
27904: STR
27905: PUSH
27906: LD_STRING )
27908: STR
27909: PPUSH
27910: CALL_OW 559
27914: GO 27824
27916: POP
27917: POP
// end ; end ;
27918: LD_VAR 0 1
27922: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27923: LD_EXP 92
27927: IFFALSE 28612
27929: GO 27931
27931: DISABLE
27932: LD_INT 0
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
27939: PPUSH
27940: PPUSH
27941: PPUSH
27942: PPUSH
// begin enable ;
27943: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27944: LD_ADDR_VAR 0 3
27948: PUSH
27949: LD_EXP 92
27953: PPUSH
27954: CALL 74097 0 1
27958: ST_TO_ADDR
// if not list then
27959: LD_VAR 0 3
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 28612
// for i := 1 to list do
27968: LD_ADDR_VAR 0 1
27972: PUSH
27973: DOUBLE
27974: LD_INT 1
27976: DEC
27977: ST_TO_ADDR
27978: LD_VAR 0 3
27982: PUSH
27983: FOR_TO
27984: IFFALSE 28610
// begin depot := list [ i ] [ 2 ] ;
27986: LD_ADDR_VAR 0 8
27990: PUSH
27991: LD_VAR 0 3
27995: PUSH
27996: LD_VAR 0 1
28000: ARRAY
28001: PUSH
28002: LD_INT 2
28004: ARRAY
28005: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28006: LD_ADDR_VAR 0 5
28010: PUSH
28011: LD_VAR 0 3
28015: PUSH
28016: LD_VAR 0 1
28020: ARRAY
28021: PUSH
28022: LD_INT 1
28024: ARRAY
28025: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28026: LD_VAR 0 8
28030: PPUSH
28031: CALL_OW 301
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: LD_VAR 0 8
28045: PPUSH
28046: CALL_OW 255
28050: NONEQUAL
28051: OR
28052: IFFALSE 28081
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28054: LD_ADDR_EXP 92
28058: PUSH
28059: LD_EXP 92
28063: PPUSH
28064: LD_VAR 0 8
28068: PPUSH
28069: LD_INT 0
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// exit ;
28077: POP
28078: POP
28079: GO 28612
// end ; x := list [ i ] [ 3 ] ;
28081: LD_ADDR_VAR 0 6
28085: PUSH
28086: LD_VAR 0 3
28090: PUSH
28091: LD_VAR 0 1
28095: ARRAY
28096: PUSH
28097: LD_INT 3
28099: ARRAY
28100: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28101: LD_ADDR_VAR 0 7
28105: PUSH
28106: LD_VAR 0 3
28110: PUSH
28111: LD_VAR 0 1
28115: ARRAY
28116: PUSH
28117: LD_INT 4
28119: ARRAY
28120: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28121: LD_ADDR_VAR 0 9
28125: PUSH
28126: LD_VAR 0 6
28130: PPUSH
28131: LD_VAR 0 7
28135: PPUSH
28136: LD_INT 16
28138: PPUSH
28139: CALL 72685 0 3
28143: ST_TO_ADDR
// if not cratesNearbyPoint then
28144: LD_VAR 0 9
28148: NOT
28149: IFFALSE 28155
// exit ;
28151: POP
28152: POP
28153: GO 28612
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28155: LD_ADDR_VAR 0 4
28159: PUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 5
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 60
28177: PUSH
28178: EMPTY
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 91
28187: PUSH
28188: LD_VAR 0 8
28192: PUSH
28193: LD_INT 6
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: LD_INT 25
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 25
28216: PUSH
28217: LD_INT 16
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: PUSH
28240: LD_VAR 0 8
28244: PPUSH
28245: CALL_OW 313
28249: PPUSH
28250: LD_INT 3
28252: PUSH
28253: LD_INT 60
28255: PUSH
28256: EMPTY
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 25
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 25
28278: PUSH
28279: LD_INT 16
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 72
28299: UNION
28300: ST_TO_ADDR
// if tmp then
28301: LD_VAR 0 4
28305: IFFALSE 28385
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28307: LD_ADDR_VAR 0 4
28311: PUSH
28312: LD_VAR 0 4
28316: PPUSH
28317: LD_INT 3
28319: PPUSH
28320: CALL 70654 0 2
28324: ST_TO_ADDR
// for j in tmp do
28325: LD_ADDR_VAR 0 2
28329: PUSH
28330: LD_VAR 0 4
28334: PUSH
28335: FOR_IN
28336: IFFALSE 28379
// begin if IsInUnit ( j ) then
28338: LD_VAR 0 2
28342: PPUSH
28343: CALL_OW 310
28347: IFFALSE 28358
// ComExit ( j ) ;
28349: LD_VAR 0 2
28353: PPUSH
28354: CALL 70737 0 1
// AddComCollect ( j , x , y ) ;
28358: LD_VAR 0 2
28362: PPUSH
28363: LD_VAR 0 6
28367: PPUSH
28368: LD_VAR 0 7
28372: PPUSH
28373: CALL_OW 177
// end ;
28377: GO 28335
28379: POP
28380: POP
// exit ;
28381: POP
28382: POP
28383: GO 28612
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28385: LD_ADDR_VAR 0 4
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_VAR 0 5
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 91
28404: PUSH
28405: LD_VAR 0 8
28409: PUSH
28410: LD_INT 8
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 34
28423: PUSH
28424: LD_INT 12
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 34
28433: PUSH
28434: LD_INT 51
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 34
28443: PUSH
28444: LD_INT 32
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 34
28453: PUSH
28454: LD_INT 89
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: PPUSH
28473: CALL_OW 69
28477: ST_TO_ADDR
// if tmp then
28478: LD_VAR 0 4
28482: IFFALSE 28608
// begin for j in tmp do
28484: LD_ADDR_VAR 0 2
28488: PUSH
28489: LD_VAR 0 4
28493: PUSH
28494: FOR_IN
28495: IFFALSE 28606
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28497: LD_VAR 0 2
28501: PPUSH
28502: CALL_OW 262
28506: PUSH
28507: LD_INT 3
28509: EQUAL
28510: PUSH
28511: LD_VAR 0 2
28515: PPUSH
28516: CALL_OW 261
28520: PUSH
28521: LD_INT 20
28523: GREATER
28524: OR
28525: PUSH
28526: LD_VAR 0 2
28530: PPUSH
28531: CALL_OW 314
28535: NOT
28536: AND
28537: PUSH
28538: LD_VAR 0 2
28542: PPUSH
28543: CALL_OW 263
28547: PUSH
28548: LD_INT 1
28550: NONEQUAL
28551: PUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: CALL_OW 311
28561: OR
28562: AND
28563: IFFALSE 28604
// begin ComCollect ( j , x , y ) ;
28565: LD_VAR 0 2
28569: PPUSH
28570: LD_VAR 0 6
28574: PPUSH
28575: LD_VAR 0 7
28579: PPUSH
28580: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28584: LD_VAR 0 2
28588: PPUSH
28589: LD_VAR 0 8
28593: PPUSH
28594: CALL_OW 172
// exit ;
28598: POP
28599: POP
28600: POP
28601: POP
28602: GO 28612
// end ;
28604: GO 28494
28606: POP
28607: POP
// end ; end ;
28608: GO 27983
28610: POP
28611: POP
// end ; end_of_file
28612: PPOPN 9
28614: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28615: LD_INT 0
28617: PPUSH
28618: PPUSH
28619: PPUSH
28620: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 264
28630: PUSH
28631: LD_INT 91
28633: EQUAL
28634: IFFALSE 28706
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28636: LD_INT 68
28638: PPUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 255
28648: PPUSH
28649: CALL_OW 321
28653: PUSH
28654: LD_INT 2
28656: EQUAL
28657: IFFALSE 28669
// eff := 70 else
28659: LD_ADDR_VAR 0 4
28663: PUSH
28664: LD_INT 70
28666: ST_TO_ADDR
28667: GO 28677
// eff := 30 ;
28669: LD_ADDR_VAR 0 4
28673: PUSH
28674: LD_INT 30
28676: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 250
28686: PPUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL_OW 251
28696: PPUSH
28697: LD_VAR 0 4
28701: PPUSH
28702: CALL_OW 495
// end ; end ;
28706: LD_VAR 0 2
28710: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28711: LD_INT 0
28713: PPUSH
// end ;
28714: LD_VAR 0 4
28718: RET
// export function SOS_Command ( cmd ) ; begin
28719: LD_INT 0
28721: PPUSH
// end ;
28722: LD_VAR 0 2
28726: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28727: LD_INT 0
28729: PPUSH
// end ;
28730: LD_VAR 0 6
28734: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28735: LD_INT 0
28737: PPUSH
28738: PPUSH
// if not vehicle or not factory then
28739: LD_VAR 0 1
28743: NOT
28744: PUSH
28745: LD_VAR 0 2
28749: NOT
28750: OR
28751: IFFALSE 28755
// exit ;
28753: GO 28986
// if factoryWaypoints >= factory then
28755: LD_EXP 91
28759: PUSH
28760: LD_VAR 0 2
28764: GREATEREQUAL
28765: IFFALSE 28986
// if factoryWaypoints [ factory ] then
28767: LD_EXP 91
28771: PUSH
28772: LD_VAR 0 2
28776: ARRAY
28777: IFFALSE 28986
// begin if GetControl ( vehicle ) = control_manual then
28779: LD_VAR 0 1
28783: PPUSH
28784: CALL_OW 263
28788: PUSH
28789: LD_INT 1
28791: EQUAL
28792: IFFALSE 28873
// begin driver := IsDrivenBy ( vehicle ) ;
28794: LD_ADDR_VAR 0 4
28798: PUSH
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 311
28808: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28809: LD_VAR 0 4
28813: PPUSH
28814: LD_EXP 91
28818: PUSH
28819: LD_VAR 0 2
28823: ARRAY
28824: PUSH
28825: LD_INT 3
28827: ARRAY
28828: PPUSH
28829: LD_EXP 91
28833: PUSH
28834: LD_VAR 0 2
28838: ARRAY
28839: PUSH
28840: LD_INT 4
28842: ARRAY
28843: PPUSH
28844: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28848: LD_VAR 0 4
28852: PPUSH
28853: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28857: LD_VAR 0 4
28861: PPUSH
28862: LD_VAR 0 2
28866: PPUSH
28867: CALL_OW 180
// end else
28871: GO 28986
// if GetControl ( vehicle ) = control_remote then
28873: LD_VAR 0 1
28877: PPUSH
28878: CALL_OW 263
28882: PUSH
28883: LD_INT 2
28885: EQUAL
28886: IFFALSE 28947
// begin wait ( 0 0$2 ) ;
28888: LD_INT 70
28890: PPUSH
28891: CALL_OW 67
// if Connect ( vehicle ) then
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL 40978 0 1
28904: IFFALSE 28945
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28906: LD_VAR 0 1
28910: PPUSH
28911: LD_EXP 91
28915: PUSH
28916: LD_VAR 0 2
28920: ARRAY
28921: PUSH
28922: LD_INT 3
28924: ARRAY
28925: PPUSH
28926: LD_EXP 91
28930: PUSH
28931: LD_VAR 0 2
28935: ARRAY
28936: PUSH
28937: LD_INT 4
28939: ARRAY
28940: PPUSH
28941: CALL_OW 171
// end else
28945: GO 28986
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28947: LD_VAR 0 1
28951: PPUSH
28952: LD_EXP 91
28956: PUSH
28957: LD_VAR 0 2
28961: ARRAY
28962: PUSH
28963: LD_INT 3
28965: ARRAY
28966: PPUSH
28967: LD_EXP 91
28971: PUSH
28972: LD_VAR 0 2
28976: ARRAY
28977: PUSH
28978: LD_INT 4
28980: ARRAY
28981: PPUSH
28982: CALL_OW 171
// end ; end ;
28986: LD_VAR 0 3
28990: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28991: LD_INT 0
28993: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28994: LD_VAR 0 1
28998: PUSH
28999: LD_INT 250
29001: EQUAL
29002: PUSH
29003: LD_VAR 0 2
29007: PPUSH
29008: CALL_OW 264
29012: PUSH
29013: LD_INT 81
29015: EQUAL
29016: AND
29017: IFFALSE 29038
// MinerPlaceMine ( unit , x , y ) ;
29019: LD_VAR 0 2
29023: PPUSH
29024: LD_VAR 0 4
29028: PPUSH
29029: LD_VAR 0 5
29033: PPUSH
29034: CALL 31423 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29038: LD_VAR 0 1
29042: PUSH
29043: LD_INT 251
29045: EQUAL
29046: PUSH
29047: LD_VAR 0 2
29051: PPUSH
29052: CALL_OW 264
29056: PUSH
29057: LD_INT 81
29059: EQUAL
29060: AND
29061: IFFALSE 29082
// MinerDetonateMine ( unit , x , y ) ;
29063: LD_VAR 0 2
29067: PPUSH
29068: LD_VAR 0 4
29072: PPUSH
29073: LD_VAR 0 5
29077: PPUSH
29078: CALL 31698 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29082: LD_VAR 0 1
29086: PUSH
29087: LD_INT 252
29089: EQUAL
29090: PUSH
29091: LD_VAR 0 2
29095: PPUSH
29096: CALL_OW 264
29100: PUSH
29101: LD_INT 81
29103: EQUAL
29104: AND
29105: IFFALSE 29126
// MinerCreateMinefield ( unit , x , y ) ;
29107: LD_VAR 0 2
29111: PPUSH
29112: LD_VAR 0 4
29116: PPUSH
29117: LD_VAR 0 5
29121: PPUSH
29122: CALL 32115 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29126: LD_VAR 0 1
29130: PUSH
29131: LD_INT 253
29133: EQUAL
29134: PUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 257
29144: PUSH
29145: LD_INT 5
29147: EQUAL
29148: AND
29149: IFFALSE 29170
// ComBinocular ( unit , x , y ) ;
29151: LD_VAR 0 2
29155: PPUSH
29156: LD_VAR 0 4
29160: PPUSH
29161: LD_VAR 0 5
29165: PPUSH
29166: CALL 32484 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29170: LD_VAR 0 1
29174: PUSH
29175: LD_INT 254
29177: EQUAL
29178: PUSH
29179: LD_VAR 0 2
29183: PPUSH
29184: CALL_OW 264
29188: PUSH
29189: LD_INT 99
29191: EQUAL
29192: AND
29193: PUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: CALL_OW 263
29203: PUSH
29204: LD_INT 3
29206: EQUAL
29207: AND
29208: IFFALSE 29224
// HackDestroyVehicle ( unit , selectedUnit ) ;
29210: LD_VAR 0 2
29214: PPUSH
29215: LD_VAR 0 3
29219: PPUSH
29220: CALL 30787 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29224: LD_VAR 0 1
29228: PUSH
29229: LD_INT 255
29231: EQUAL
29232: PUSH
29233: LD_VAR 0 2
29237: PPUSH
29238: CALL_OW 264
29242: PUSH
29243: LD_INT 14
29245: PUSH
29246: LD_INT 53
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: IN
29253: AND
29254: PUSH
29255: LD_VAR 0 4
29259: PPUSH
29260: LD_VAR 0 5
29264: PPUSH
29265: CALL_OW 488
29269: AND
29270: IFFALSE 29294
// CutTreeXYR ( unit , x , y , 12 ) ;
29272: LD_VAR 0 2
29276: PPUSH
29277: LD_VAR 0 4
29281: PPUSH
29282: LD_VAR 0 5
29286: PPUSH
29287: LD_INT 12
29289: PPUSH
29290: CALL 29357 0 4
// if cmd = 256 then
29294: LD_VAR 0 1
29298: PUSH
29299: LD_INT 256
29301: EQUAL
29302: IFFALSE 29323
// SetFactoryWaypoint ( unit , x , y ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_VAR 0 4
29313: PPUSH
29314: LD_VAR 0 5
29318: PPUSH
29319: CALL 27304 0 3
// if cmd = 257 then
29323: LD_VAR 0 1
29327: PUSH
29328: LD_INT 257
29330: EQUAL
29331: IFFALSE 29352
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29333: LD_VAR 0 2
29337: PPUSH
29338: LD_VAR 0 4
29342: PPUSH
29343: LD_VAR 0 5
29347: PPUSH
29348: CALL 27666 0 3
// end ;
29352: LD_VAR 0 6
29356: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29357: LD_INT 0
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29368: LD_VAR 0 1
29372: NOT
29373: PUSH
29374: LD_VAR 0 2
29378: PPUSH
29379: LD_VAR 0 3
29383: PPUSH
29384: CALL_OW 488
29388: NOT
29389: OR
29390: PUSH
29391: LD_VAR 0 4
29395: NOT
29396: OR
29397: IFFALSE 29401
// exit ;
29399: GO 29741
// list := [ ] ;
29401: LD_ADDR_VAR 0 13
29405: PUSH
29406: EMPTY
29407: ST_TO_ADDR
// if x - r < 0 then
29408: LD_VAR 0 2
29412: PUSH
29413: LD_VAR 0 4
29417: MINUS
29418: PUSH
29419: LD_INT 0
29421: LESS
29422: IFFALSE 29434
// min_x := 0 else
29424: LD_ADDR_VAR 0 7
29428: PUSH
29429: LD_INT 0
29431: ST_TO_ADDR
29432: GO 29450
// min_x := x - r ;
29434: LD_ADDR_VAR 0 7
29438: PUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_VAR 0 4
29448: MINUS
29449: ST_TO_ADDR
// if y - r < 0 then
29450: LD_VAR 0 3
29454: PUSH
29455: LD_VAR 0 4
29459: MINUS
29460: PUSH
29461: LD_INT 0
29463: LESS
29464: IFFALSE 29476
// min_y := 0 else
29466: LD_ADDR_VAR 0 8
29470: PUSH
29471: LD_INT 0
29473: ST_TO_ADDR
29474: GO 29492
// min_y := y - r ;
29476: LD_ADDR_VAR 0 8
29480: PUSH
29481: LD_VAR 0 3
29485: PUSH
29486: LD_VAR 0 4
29490: MINUS
29491: ST_TO_ADDR
// max_x := x + r ;
29492: LD_ADDR_VAR 0 9
29496: PUSH
29497: LD_VAR 0 2
29501: PUSH
29502: LD_VAR 0 4
29506: PLUS
29507: ST_TO_ADDR
// max_y := y + r ;
29508: LD_ADDR_VAR 0 10
29512: PUSH
29513: LD_VAR 0 3
29517: PUSH
29518: LD_VAR 0 4
29522: PLUS
29523: ST_TO_ADDR
// for _x = min_x to max_x do
29524: LD_ADDR_VAR 0 11
29528: PUSH
29529: DOUBLE
29530: LD_VAR 0 7
29534: DEC
29535: ST_TO_ADDR
29536: LD_VAR 0 9
29540: PUSH
29541: FOR_TO
29542: IFFALSE 29659
// for _y = min_y to max_y do
29544: LD_ADDR_VAR 0 12
29548: PUSH
29549: DOUBLE
29550: LD_VAR 0 8
29554: DEC
29555: ST_TO_ADDR
29556: LD_VAR 0 10
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29655
// begin if not ValidHex ( _x , _y ) then
29564: LD_VAR 0 11
29568: PPUSH
29569: LD_VAR 0 12
29573: PPUSH
29574: CALL_OW 488
29578: NOT
29579: IFFALSE 29583
// continue ;
29581: GO 29561
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29583: LD_VAR 0 11
29587: PPUSH
29588: LD_VAR 0 12
29592: PPUSH
29593: CALL_OW 351
29597: PUSH
29598: LD_VAR 0 11
29602: PPUSH
29603: LD_VAR 0 12
29607: PPUSH
29608: CALL_OW 554
29612: AND
29613: IFFALSE 29653
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29615: LD_ADDR_VAR 0 13
29619: PUSH
29620: LD_VAR 0 13
29624: PPUSH
29625: LD_VAR 0 13
29629: PUSH
29630: LD_INT 1
29632: PLUS
29633: PPUSH
29634: LD_VAR 0 11
29638: PUSH
29639: LD_VAR 0 12
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 2
29652: ST_TO_ADDR
// end ;
29653: GO 29561
29655: POP
29656: POP
29657: GO 29541
29659: POP
29660: POP
// if not list then
29661: LD_VAR 0 13
29665: NOT
29666: IFFALSE 29670
// exit ;
29668: GO 29741
// for i in list do
29670: LD_ADDR_VAR 0 6
29674: PUSH
29675: LD_VAR 0 13
29679: PUSH
29680: FOR_IN
29681: IFFALSE 29739
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29683: LD_VAR 0 1
29687: PPUSH
29688: LD_STRING M
29690: PUSH
29691: LD_VAR 0 6
29695: PUSH
29696: LD_INT 1
29698: ARRAY
29699: PUSH
29700: LD_VAR 0 6
29704: PUSH
29705: LD_INT 2
29707: ARRAY
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: PPUSH
29733: CALL_OW 447
29737: GO 29680
29739: POP
29740: POP
// end ;
29741: LD_VAR 0 5
29745: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29746: LD_EXP 94
29750: NOT
29751: IFFALSE 29801
29753: GO 29755
29755: DISABLE
// begin initHack := true ;
29756: LD_ADDR_EXP 94
29760: PUSH
29761: LD_INT 1
29763: ST_TO_ADDR
// hackTanks := [ ] ;
29764: LD_ADDR_EXP 95
29768: PUSH
29769: EMPTY
29770: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29771: LD_ADDR_EXP 96
29775: PUSH
29776: EMPTY
29777: ST_TO_ADDR
// hackLimit := 3 ;
29778: LD_ADDR_EXP 97
29782: PUSH
29783: LD_INT 3
29785: ST_TO_ADDR
// hackDist := 12 ;
29786: LD_ADDR_EXP 98
29790: PUSH
29791: LD_INT 12
29793: ST_TO_ADDR
// hackCounter := [ ] ;
29794: LD_ADDR_EXP 99
29798: PUSH
29799: EMPTY
29800: ST_TO_ADDR
// end ;
29801: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29802: LD_EXP 94
29806: PUSH
29807: LD_INT 34
29809: PUSH
29810: LD_INT 99
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: AND
29822: IFFALSE 30075
29824: GO 29826
29826: DISABLE
29827: LD_INT 0
29829: PPUSH
29830: PPUSH
// begin enable ;
29831: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29832: LD_ADDR_VAR 0 1
29836: PUSH
29837: LD_INT 34
29839: PUSH
29840: LD_INT 99
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PPUSH
29847: CALL_OW 69
29851: PUSH
29852: FOR_IN
29853: IFFALSE 30073
// begin if not i in hackTanks then
29855: LD_VAR 0 1
29859: PUSH
29860: LD_EXP 95
29864: IN
29865: NOT
29866: IFFALSE 29949
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29868: LD_ADDR_EXP 95
29872: PUSH
29873: LD_EXP 95
29877: PPUSH
29878: LD_EXP 95
29882: PUSH
29883: LD_INT 1
29885: PLUS
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 1
29896: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29897: LD_ADDR_EXP 96
29901: PUSH
29902: LD_EXP 96
29906: PPUSH
29907: LD_EXP 96
29911: PUSH
29912: LD_INT 1
29914: PLUS
29915: PPUSH
29916: EMPTY
29917: PPUSH
29918: CALL_OW 1
29922: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29923: LD_ADDR_EXP 99
29927: PUSH
29928: LD_EXP 99
29932: PPUSH
29933: LD_EXP 99
29937: PUSH
29938: LD_INT 1
29940: PLUS
29941: PPUSH
29942: EMPTY
29943: PPUSH
29944: CALL_OW 1
29948: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29949: LD_VAR 0 1
29953: PPUSH
29954: CALL_OW 302
29958: NOT
29959: IFFALSE 29972
// begin HackUnlinkAll ( i ) ;
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL 30078 0 1
// continue ;
29970: GO 29852
// end ; HackCheckCapturedStatus ( i ) ;
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL 30521 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29981: LD_ADDR_VAR 0 2
29985: PUSH
29986: LD_INT 81
29988: PUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 255
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 33
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 91
30015: PUSH
30016: LD_VAR 0 1
30020: PUSH
30021: LD_EXP 98
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 50
30033: PUSH
30034: EMPTY
30035: LIST
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: ST_TO_ADDR
// if not tmp then
30048: LD_VAR 0 2
30052: NOT
30053: IFFALSE 30057
// continue ;
30055: GO 29852
// HackLink ( i , tmp ) ;
30057: LD_VAR 0 1
30061: PPUSH
30062: LD_VAR 0 2
30066: PPUSH
30067: CALL 30214 0 2
// end ;
30071: GO 29852
30073: POP
30074: POP
// end ;
30075: PPOPN 2
30077: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30078: LD_INT 0
30080: PPUSH
30081: PPUSH
30082: PPUSH
// if not hack in hackTanks then
30083: LD_VAR 0 1
30087: PUSH
30088: LD_EXP 95
30092: IN
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 30209
// index := GetElementIndex ( hackTanks , hack ) ;
30098: LD_ADDR_VAR 0 4
30102: PUSH
30103: LD_EXP 95
30107: PPUSH
30108: LD_VAR 0 1
30112: PPUSH
30113: CALL 37794 0 2
30117: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30118: LD_EXP 96
30122: PUSH
30123: LD_VAR 0 4
30127: ARRAY
30128: IFFALSE 30209
// begin for i in hackTanksCaptured [ index ] do
30130: LD_ADDR_VAR 0 3
30134: PUSH
30135: LD_EXP 96
30139: PUSH
30140: LD_VAR 0 4
30144: ARRAY
30145: PUSH
30146: FOR_IN
30147: IFFALSE 30173
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: PPUSH
30158: LD_VAR 0 3
30162: PUSH
30163: LD_INT 2
30165: ARRAY
30166: PPUSH
30167: CALL_OW 235
30171: GO 30146
30173: POP
30174: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30175: LD_ADDR_EXP 96
30179: PUSH
30180: LD_EXP 96
30184: PPUSH
30185: LD_VAR 0 4
30189: PPUSH
30190: EMPTY
30191: PPUSH
30192: CALL_OW 1
30196: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30197: LD_VAR 0 1
30201: PPUSH
30202: LD_INT 0
30204: PPUSH
30205: CALL_OW 505
// end ; end ;
30209: LD_VAR 0 2
30213: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30214: LD_INT 0
30216: PPUSH
30217: PPUSH
30218: PPUSH
// if not hack in hackTanks or not vehicles then
30219: LD_VAR 0 1
30223: PUSH
30224: LD_EXP 95
30228: IN
30229: NOT
30230: PUSH
30231: LD_VAR 0 2
30235: NOT
30236: OR
30237: IFFALSE 30241
// exit ;
30239: GO 30516
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30241: LD_ADDR_VAR 0 2
30245: PUSH
30246: LD_VAR 0 1
30250: PPUSH
30251: LD_VAR 0 2
30255: PPUSH
30256: LD_INT 1
30258: PPUSH
30259: LD_INT 1
30261: PPUSH
30262: CALL 38444 0 4
30266: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30267: LD_ADDR_VAR 0 5
30271: PUSH
30272: LD_EXP 95
30276: PPUSH
30277: LD_VAR 0 1
30281: PPUSH
30282: CALL 37794 0 2
30286: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30287: LD_EXP 96
30291: PUSH
30292: LD_VAR 0 5
30296: ARRAY
30297: PUSH
30298: LD_EXP 97
30302: LESS
30303: IFFALSE 30492
// begin for i := 1 to vehicles do
30305: LD_ADDR_VAR 0 4
30309: PUSH
30310: DOUBLE
30311: LD_INT 1
30313: DEC
30314: ST_TO_ADDR
30315: LD_VAR 0 2
30319: PUSH
30320: FOR_TO
30321: IFFALSE 30490
// begin if hackTanksCaptured [ index ] = hackLimit then
30323: LD_EXP 96
30327: PUSH
30328: LD_VAR 0 5
30332: ARRAY
30333: PUSH
30334: LD_EXP 97
30338: EQUAL
30339: IFFALSE 30343
// break ;
30341: GO 30490
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30343: LD_ADDR_EXP 99
30347: PUSH
30348: LD_EXP 99
30352: PPUSH
30353: LD_VAR 0 5
30357: PPUSH
30358: LD_EXP 99
30362: PUSH
30363: LD_VAR 0 5
30367: ARRAY
30368: PUSH
30369: LD_INT 1
30371: PLUS
30372: PPUSH
30373: CALL_OW 1
30377: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30378: LD_ADDR_EXP 96
30382: PUSH
30383: LD_EXP 96
30387: PPUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_EXP 96
30397: PUSH
30398: LD_VAR 0 5
30402: ARRAY
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PPUSH
30412: LD_VAR 0 2
30416: PUSH
30417: LD_VAR 0 4
30421: ARRAY
30422: PUSH
30423: LD_VAR 0 2
30427: PUSH
30428: LD_VAR 0 4
30432: ARRAY
30433: PPUSH
30434: CALL_OW 255
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL 38009 0 3
30447: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30448: LD_VAR 0 2
30452: PUSH
30453: LD_VAR 0 4
30457: ARRAY
30458: PPUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 255
30468: PPUSH
30469: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30473: LD_VAR 0 2
30477: PUSH
30478: LD_VAR 0 4
30482: ARRAY
30483: PPUSH
30484: CALL_OW 141
// end ;
30488: GO 30320
30490: POP
30491: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30492: LD_VAR 0 1
30496: PPUSH
30497: LD_EXP 96
30501: PUSH
30502: LD_VAR 0 5
30506: ARRAY
30507: PUSH
30508: LD_INT 0
30510: PLUS
30511: PPUSH
30512: CALL_OW 505
// end ;
30516: LD_VAR 0 3
30520: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
// if not hack in hackTanks then
30527: LD_VAR 0 1
30531: PUSH
30532: LD_EXP 95
30536: IN
30537: NOT
30538: IFFALSE 30542
// exit ;
30540: GO 30782
// index := GetElementIndex ( hackTanks , hack ) ;
30542: LD_ADDR_VAR 0 4
30546: PUSH
30547: LD_EXP 95
30551: PPUSH
30552: LD_VAR 0 1
30556: PPUSH
30557: CALL 37794 0 2
30561: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: DOUBLE
30568: LD_EXP 96
30572: PUSH
30573: LD_VAR 0 4
30577: ARRAY
30578: INC
30579: ST_TO_ADDR
30580: LD_INT 1
30582: PUSH
30583: FOR_DOWNTO
30584: IFFALSE 30756
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30586: LD_ADDR_VAR 0 5
30590: PUSH
30591: LD_EXP 96
30595: PUSH
30596: LD_VAR 0 4
30600: ARRAY
30601: PUSH
30602: LD_VAR 0 3
30606: ARRAY
30607: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30608: LD_VAR 0 5
30612: PUSH
30613: LD_INT 1
30615: ARRAY
30616: PPUSH
30617: CALL_OW 302
30621: NOT
30622: PUSH
30623: LD_VAR 0 5
30627: PUSH
30628: LD_INT 1
30630: ARRAY
30631: PPUSH
30632: CALL_OW 255
30636: PUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 255
30646: NONEQUAL
30647: OR
30648: IFFALSE 30754
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30650: LD_VAR 0 5
30654: PUSH
30655: LD_INT 1
30657: ARRAY
30658: PPUSH
30659: CALL_OW 305
30663: PUSH
30664: LD_VAR 0 5
30668: PUSH
30669: LD_INT 1
30671: ARRAY
30672: PPUSH
30673: CALL_OW 255
30677: PUSH
30678: LD_VAR 0 1
30682: PPUSH
30683: CALL_OW 255
30687: EQUAL
30688: AND
30689: IFFALSE 30713
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30691: LD_VAR 0 5
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_VAR 0 5
30704: PUSH
30705: LD_INT 2
30707: ARRAY
30708: PPUSH
30709: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30713: LD_ADDR_EXP 96
30717: PUSH
30718: LD_EXP 96
30722: PPUSH
30723: LD_VAR 0 4
30727: PPUSH
30728: LD_EXP 96
30732: PUSH
30733: LD_VAR 0 4
30737: ARRAY
30738: PPUSH
30739: LD_VAR 0 3
30743: PPUSH
30744: CALL_OW 3
30748: PPUSH
30749: CALL_OW 1
30753: ST_TO_ADDR
// end ; end ;
30754: GO 30583
30756: POP
30757: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30758: LD_VAR 0 1
30762: PPUSH
30763: LD_EXP 96
30767: PUSH
30768: LD_VAR 0 4
30772: ARRAY
30773: PUSH
30774: LD_INT 0
30776: PLUS
30777: PPUSH
30778: CALL_OW 505
// end ;
30782: LD_VAR 0 2
30786: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30787: LD_INT 0
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
// if not hack in hackTanks then
30793: LD_VAR 0 1
30797: PUSH
30798: LD_EXP 95
30802: IN
30803: NOT
30804: IFFALSE 30808
// exit ;
30806: GO 30893
// index := GetElementIndex ( hackTanks , hack ) ;
30808: LD_ADDR_VAR 0 5
30812: PUSH
30813: LD_EXP 95
30817: PPUSH
30818: LD_VAR 0 1
30822: PPUSH
30823: CALL 37794 0 2
30827: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30828: LD_ADDR_VAR 0 4
30832: PUSH
30833: DOUBLE
30834: LD_INT 1
30836: DEC
30837: ST_TO_ADDR
30838: LD_EXP 96
30842: PUSH
30843: LD_VAR 0 5
30847: ARRAY
30848: PUSH
30849: FOR_TO
30850: IFFALSE 30891
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30852: LD_EXP 96
30856: PUSH
30857: LD_VAR 0 5
30861: ARRAY
30862: PUSH
30863: LD_VAR 0 4
30867: ARRAY
30868: PUSH
30869: LD_INT 1
30871: ARRAY
30872: PUSH
30873: LD_VAR 0 2
30877: EQUAL
30878: IFFALSE 30889
// KillUnit ( vehicle ) ;
30880: LD_VAR 0 2
30884: PPUSH
30885: CALL_OW 66
30889: GO 30849
30891: POP
30892: POP
// end ;
30893: LD_VAR 0 3
30897: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30898: LD_EXP 100
30902: NOT
30903: IFFALSE 30938
30905: GO 30907
30907: DISABLE
// begin initMiner := true ;
30908: LD_ADDR_EXP 100
30912: PUSH
30913: LD_INT 1
30915: ST_TO_ADDR
// minersList := [ ] ;
30916: LD_ADDR_EXP 101
30920: PUSH
30921: EMPTY
30922: ST_TO_ADDR
// minerMinesList := [ ] ;
30923: LD_ADDR_EXP 102
30927: PUSH
30928: EMPTY
30929: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30930: LD_ADDR_EXP 103
30934: PUSH
30935: LD_INT 5
30937: ST_TO_ADDR
// end ;
30938: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30939: LD_EXP 100
30943: PUSH
30944: LD_INT 34
30946: PUSH
30947: LD_INT 81
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: AND
30959: IFFALSE 31420
30961: GO 30963
30963: DISABLE
30964: LD_INT 0
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
// begin enable ;
30970: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30971: LD_ADDR_VAR 0 1
30975: PUSH
30976: LD_INT 34
30978: PUSH
30979: LD_INT 81
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PPUSH
30986: CALL_OW 69
30990: PUSH
30991: FOR_IN
30992: IFFALSE 31064
// begin if not i in minersList then
30994: LD_VAR 0 1
30998: PUSH
30999: LD_EXP 101
31003: IN
31004: NOT
31005: IFFALSE 31062
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31007: LD_ADDR_EXP 101
31011: PUSH
31012: LD_EXP 101
31016: PPUSH
31017: LD_EXP 101
31021: PUSH
31022: LD_INT 1
31024: PLUS
31025: PPUSH
31026: LD_VAR 0 1
31030: PPUSH
31031: CALL_OW 1
31035: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31036: LD_ADDR_EXP 102
31040: PUSH
31041: LD_EXP 102
31045: PPUSH
31046: LD_EXP 102
31050: PUSH
31051: LD_INT 1
31053: PLUS
31054: PPUSH
31055: EMPTY
31056: PPUSH
31057: CALL_OW 1
31061: ST_TO_ADDR
// end end ;
31062: GO 30991
31064: POP
31065: POP
// for i := minerMinesList downto 1 do
31066: LD_ADDR_VAR 0 1
31070: PUSH
31071: DOUBLE
31072: LD_EXP 102
31076: INC
31077: ST_TO_ADDR
31078: LD_INT 1
31080: PUSH
31081: FOR_DOWNTO
31082: IFFALSE 31418
// begin if IsLive ( minersList [ i ] ) then
31084: LD_EXP 101
31088: PUSH
31089: LD_VAR 0 1
31093: ARRAY
31094: PPUSH
31095: CALL_OW 300
31099: IFFALSE 31127
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31101: LD_EXP 101
31105: PUSH
31106: LD_VAR 0 1
31110: ARRAY
31111: PPUSH
31112: LD_EXP 102
31116: PUSH
31117: LD_VAR 0 1
31121: ARRAY
31122: PPUSH
31123: CALL_OW 505
// if not minerMinesList [ i ] then
31127: LD_EXP 102
31131: PUSH
31132: LD_VAR 0 1
31136: ARRAY
31137: NOT
31138: IFFALSE 31142
// continue ;
31140: GO 31081
// for j := minerMinesList [ i ] downto 1 do
31142: LD_ADDR_VAR 0 2
31146: PUSH
31147: DOUBLE
31148: LD_EXP 102
31152: PUSH
31153: LD_VAR 0 1
31157: ARRAY
31158: INC
31159: ST_TO_ADDR
31160: LD_INT 1
31162: PUSH
31163: FOR_DOWNTO
31164: IFFALSE 31414
// begin side := GetSide ( minersList [ i ] ) ;
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: LD_EXP 101
31175: PUSH
31176: LD_VAR 0 1
31180: ARRAY
31181: PPUSH
31182: CALL_OW 255
31186: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: LD_EXP 102
31196: PUSH
31197: LD_VAR 0 1
31201: ARRAY
31202: PUSH
31203: LD_VAR 0 2
31207: ARRAY
31208: PUSH
31209: LD_INT 1
31211: ARRAY
31212: PPUSH
31213: LD_EXP 102
31217: PUSH
31218: LD_VAR 0 1
31222: ARRAY
31223: PUSH
31224: LD_VAR 0 2
31228: ARRAY
31229: PUSH
31230: LD_INT 2
31232: ARRAY
31233: PPUSH
31234: CALL_OW 428
31238: ST_TO_ADDR
// if not tmp then
31239: LD_VAR 0 4
31243: NOT
31244: IFFALSE 31248
// continue ;
31246: GO 31163
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31248: LD_VAR 0 4
31252: PUSH
31253: LD_INT 81
31255: PUSH
31256: LD_VAR 0 3
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PPUSH
31265: CALL_OW 69
31269: IN
31270: PUSH
31271: LD_EXP 102
31275: PUSH
31276: LD_VAR 0 1
31280: ARRAY
31281: PUSH
31282: LD_VAR 0 2
31286: ARRAY
31287: PUSH
31288: LD_INT 1
31290: ARRAY
31291: PPUSH
31292: LD_EXP 102
31296: PUSH
31297: LD_VAR 0 1
31301: ARRAY
31302: PUSH
31303: LD_VAR 0 2
31307: ARRAY
31308: PUSH
31309: LD_INT 2
31311: ARRAY
31312: PPUSH
31313: CALL_OW 458
31317: AND
31318: IFFALSE 31412
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31320: LD_EXP 102
31324: PUSH
31325: LD_VAR 0 1
31329: ARRAY
31330: PUSH
31331: LD_VAR 0 2
31335: ARRAY
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PPUSH
31341: LD_EXP 102
31345: PUSH
31346: LD_VAR 0 1
31350: ARRAY
31351: PUSH
31352: LD_VAR 0 2
31356: ARRAY
31357: PUSH
31358: LD_INT 2
31360: ARRAY
31361: PPUSH
31362: LD_VAR 0 3
31366: PPUSH
31367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31371: LD_ADDR_EXP 102
31375: PUSH
31376: LD_EXP 102
31380: PPUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: LD_EXP 102
31390: PUSH
31391: LD_VAR 0 1
31395: ARRAY
31396: PPUSH
31397: LD_VAR 0 2
31401: PPUSH
31402: CALL_OW 3
31406: PPUSH
31407: CALL_OW 1
31411: ST_TO_ADDR
// end ; end ;
31412: GO 31163
31414: POP
31415: POP
// end ;
31416: GO 31081
31418: POP
31419: POP
// end ;
31420: PPOPN 4
31422: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31423: LD_INT 0
31425: PPUSH
31426: PPUSH
// result := false ;
31427: LD_ADDR_VAR 0 4
31431: PUSH
31432: LD_INT 0
31434: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31435: LD_VAR 0 1
31439: PPUSH
31440: CALL_OW 264
31444: PUSH
31445: LD_INT 81
31447: EQUAL
31448: NOT
31449: IFFALSE 31453
// exit ;
31451: GO 31693
// index := GetElementIndex ( minersList , unit ) ;
31453: LD_ADDR_VAR 0 5
31457: PUSH
31458: LD_EXP 101
31462: PPUSH
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL 37794 0 2
31472: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31473: LD_EXP 102
31477: PUSH
31478: LD_VAR 0 5
31482: ARRAY
31483: PUSH
31484: LD_EXP 103
31488: GREATEREQUAL
31489: IFFALSE 31493
// exit ;
31491: GO 31693
// ComMoveXY ( unit , x , y ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31512: LD_INT 35
31514: PPUSH
31515: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL 69149 0 3
31538: NOT
31539: PUSH
31540: LD_VAR 0 1
31544: PPUSH
31545: CALL_OW 314
31549: AND
31550: IFFALSE 31554
// exit ;
31552: GO 31693
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31554: LD_VAR 0 2
31558: PPUSH
31559: LD_VAR 0 3
31563: PPUSH
31564: CALL_OW 428
31568: PUSH
31569: LD_VAR 0 1
31573: EQUAL
31574: PUSH
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 314
31584: NOT
31585: AND
31586: IFFALSE 31512
// PlaySoundXY ( x , y , PlantMine ) ;
31588: LD_VAR 0 2
31592: PPUSH
31593: LD_VAR 0 3
31597: PPUSH
31598: LD_STRING PlantMine
31600: PPUSH
31601: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 3
31614: PPUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 255
31624: PPUSH
31625: LD_INT 0
31627: PPUSH
31628: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31632: LD_ADDR_EXP 102
31636: PUSH
31637: LD_EXP 102
31641: PPUSH
31642: LD_VAR 0 5
31646: PUSH
31647: LD_EXP 102
31651: PUSH
31652: LD_VAR 0 5
31656: ARRAY
31657: PUSH
31658: LD_INT 1
31660: PLUS
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PPUSH
31666: LD_VAR 0 2
31670: PUSH
31671: LD_VAR 0 3
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PPUSH
31680: CALL 38009 0 3
31684: ST_TO_ADDR
// result := true ;
31685: LD_ADDR_VAR 0 4
31689: PUSH
31690: LD_INT 1
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 4
31697: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// if not unit in minersList then
31703: LD_VAR 0 1
31707: PUSH
31708: LD_EXP 101
31712: IN
31713: NOT
31714: IFFALSE 31718
// exit ;
31716: GO 32110
// index := GetElementIndex ( minersList , unit ) ;
31718: LD_ADDR_VAR 0 6
31722: PUSH
31723: LD_EXP 101
31727: PPUSH
31728: LD_VAR 0 1
31732: PPUSH
31733: CALL 37794 0 2
31737: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31738: LD_ADDR_VAR 0 5
31742: PUSH
31743: DOUBLE
31744: LD_EXP 102
31748: PUSH
31749: LD_VAR 0 6
31753: ARRAY
31754: INC
31755: ST_TO_ADDR
31756: LD_INT 1
31758: PUSH
31759: FOR_DOWNTO
31760: IFFALSE 31921
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31762: LD_EXP 102
31766: PUSH
31767: LD_VAR 0 6
31771: ARRAY
31772: PUSH
31773: LD_VAR 0 5
31777: ARRAY
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: PUSH
31783: LD_VAR 0 2
31787: EQUAL
31788: PUSH
31789: LD_EXP 102
31793: PUSH
31794: LD_VAR 0 6
31798: ARRAY
31799: PUSH
31800: LD_VAR 0 5
31804: ARRAY
31805: PUSH
31806: LD_INT 2
31808: ARRAY
31809: PUSH
31810: LD_VAR 0 3
31814: EQUAL
31815: AND
31816: IFFALSE 31919
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31818: LD_EXP 102
31822: PUSH
31823: LD_VAR 0 6
31827: ARRAY
31828: PUSH
31829: LD_VAR 0 5
31833: ARRAY
31834: PUSH
31835: LD_INT 1
31837: ARRAY
31838: PPUSH
31839: LD_EXP 102
31843: PUSH
31844: LD_VAR 0 6
31848: ARRAY
31849: PUSH
31850: LD_VAR 0 5
31854: ARRAY
31855: PUSH
31856: LD_INT 2
31858: ARRAY
31859: PPUSH
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 255
31869: PPUSH
31870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31874: LD_ADDR_EXP 102
31878: PUSH
31879: LD_EXP 102
31883: PPUSH
31884: LD_VAR 0 6
31888: PPUSH
31889: LD_EXP 102
31893: PUSH
31894: LD_VAR 0 6
31898: ARRAY
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: CALL_OW 3
31909: PPUSH
31910: CALL_OW 1
31914: ST_TO_ADDR
// exit ;
31915: POP
31916: POP
31917: GO 32110
// end ; end ;
31919: GO 31759
31921: POP
31922: POP
// for i := minerMinesList [ index ] downto 1 do
31923: LD_ADDR_VAR 0 5
31927: PUSH
31928: DOUBLE
31929: LD_EXP 102
31933: PUSH
31934: LD_VAR 0 6
31938: ARRAY
31939: INC
31940: ST_TO_ADDR
31941: LD_INT 1
31943: PUSH
31944: FOR_DOWNTO
31945: IFFALSE 32108
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31947: LD_EXP 102
31951: PUSH
31952: LD_VAR 0 6
31956: ARRAY
31957: PUSH
31958: LD_VAR 0 5
31962: ARRAY
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: LD_EXP 102
31972: PUSH
31973: LD_VAR 0 6
31977: ARRAY
31978: PUSH
31979: LD_VAR 0 5
31983: ARRAY
31984: PUSH
31985: LD_INT 2
31987: ARRAY
31988: PPUSH
31989: LD_VAR 0 2
31993: PPUSH
31994: LD_VAR 0 3
31998: PPUSH
31999: CALL_OW 298
32003: PUSH
32004: LD_INT 6
32006: LESS
32007: IFFALSE 32106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32009: LD_EXP 102
32013: PUSH
32014: LD_VAR 0 6
32018: ARRAY
32019: PUSH
32020: LD_VAR 0 5
32024: ARRAY
32025: PUSH
32026: LD_INT 1
32028: ARRAY
32029: PPUSH
32030: LD_EXP 102
32034: PUSH
32035: LD_VAR 0 6
32039: ARRAY
32040: PUSH
32041: LD_VAR 0 5
32045: ARRAY
32046: PUSH
32047: LD_INT 2
32049: ARRAY
32050: PPUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: CALL_OW 255
32060: PPUSH
32061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32065: LD_ADDR_EXP 102
32069: PUSH
32070: LD_EXP 102
32074: PPUSH
32075: LD_VAR 0 6
32079: PPUSH
32080: LD_EXP 102
32084: PUSH
32085: LD_VAR 0 6
32089: ARRAY
32090: PPUSH
32091: LD_VAR 0 5
32095: PPUSH
32096: CALL_OW 3
32100: PPUSH
32101: CALL_OW 1
32105: ST_TO_ADDR
// end ; end ;
32106: GO 31944
32108: POP
32109: POP
// end ;
32110: LD_VAR 0 4
32114: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32126: LD_VAR 0 1
32130: PPUSH
32131: CALL_OW 264
32135: PUSH
32136: LD_INT 81
32138: EQUAL
32139: NOT
32140: PUSH
32141: LD_VAR 0 1
32145: PUSH
32146: LD_EXP 101
32150: IN
32151: NOT
32152: OR
32153: IFFALSE 32157
// exit ;
32155: GO 32479
// index := GetElementIndex ( minersList , unit ) ;
32157: LD_ADDR_VAR 0 6
32161: PUSH
32162: LD_EXP 101
32166: PPUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL 37794 0 2
32176: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32177: LD_ADDR_VAR 0 8
32181: PUSH
32182: LD_EXP 103
32186: PUSH
32187: LD_EXP 102
32191: PUSH
32192: LD_VAR 0 6
32196: ARRAY
32197: MINUS
32198: ST_TO_ADDR
// if not minesFreeAmount then
32199: LD_VAR 0 8
32203: NOT
32204: IFFALSE 32208
// exit ;
32206: GO 32479
// tmp := [ ] ;
32208: LD_ADDR_VAR 0 7
32212: PUSH
32213: EMPTY
32214: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32215: LD_ADDR_VAR 0 5
32219: PUSH
32220: DOUBLE
32221: LD_INT 1
32223: DEC
32224: ST_TO_ADDR
32225: LD_VAR 0 8
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32426
// begin _d := rand ( 0 , 5 ) ;
32233: LD_ADDR_VAR 0 11
32237: PUSH
32238: LD_INT 0
32240: PPUSH
32241: LD_INT 5
32243: PPUSH
32244: CALL_OW 12
32248: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32249: LD_ADDR_VAR 0 12
32253: PUSH
32254: LD_INT 2
32256: PPUSH
32257: LD_INT 6
32259: PPUSH
32260: CALL_OW 12
32264: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32265: LD_ADDR_VAR 0 9
32269: PUSH
32270: LD_VAR 0 2
32274: PPUSH
32275: LD_VAR 0 11
32279: PPUSH
32280: LD_VAR 0 12
32284: PPUSH
32285: CALL_OW 272
32289: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32290: LD_ADDR_VAR 0 10
32294: PUSH
32295: LD_VAR 0 3
32299: PPUSH
32300: LD_VAR 0 11
32304: PPUSH
32305: LD_VAR 0 12
32309: PPUSH
32310: CALL_OW 273
32314: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32315: LD_VAR 0 9
32319: PPUSH
32320: LD_VAR 0 10
32324: PPUSH
32325: CALL_OW 488
32329: PUSH
32330: LD_VAR 0 9
32334: PUSH
32335: LD_VAR 0 10
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_VAR 0 7
32348: IN
32349: NOT
32350: AND
32351: PUSH
32352: LD_VAR 0 9
32356: PPUSH
32357: LD_VAR 0 10
32361: PPUSH
32362: CALL_OW 458
32366: NOT
32367: AND
32368: IFFALSE 32410
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32370: LD_ADDR_VAR 0 7
32374: PUSH
32375: LD_VAR 0 7
32379: PPUSH
32380: LD_VAR 0 7
32384: PUSH
32385: LD_INT 1
32387: PLUS
32388: PPUSH
32389: LD_VAR 0 9
32393: PUSH
32394: LD_VAR 0 10
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PPUSH
32403: CALL_OW 1
32407: ST_TO_ADDR
32408: GO 32424
// i := i - 1 ;
32410: LD_ADDR_VAR 0 5
32414: PUSH
32415: LD_VAR 0 5
32419: PUSH
32420: LD_INT 1
32422: MINUS
32423: ST_TO_ADDR
// end ;
32424: GO 32230
32426: POP
32427: POP
// for i in tmp do
32428: LD_ADDR_VAR 0 5
32432: PUSH
32433: LD_VAR 0 7
32437: PUSH
32438: FOR_IN
32439: IFFALSE 32477
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_VAR 0 5
32450: PUSH
32451: LD_INT 1
32453: ARRAY
32454: PPUSH
32455: LD_VAR 0 5
32459: PUSH
32460: LD_INT 2
32462: ARRAY
32463: PPUSH
32464: CALL 31423 0 3
32468: NOT
32469: IFFALSE 32475
// exit ;
32471: POP
32472: POP
32473: GO 32479
32475: GO 32438
32477: POP
32478: POP
// end ;
32479: LD_VAR 0 4
32483: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32484: LD_INT 0
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
// if not GetClass ( unit ) = class_sniper then
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 257
32502: PUSH
32503: LD_INT 5
32505: EQUAL
32506: NOT
32507: IFFALSE 32511
// exit ;
32509: GO 32899
// dist := 8 ;
32511: LD_ADDR_VAR 0 5
32515: PUSH
32516: LD_INT 8
32518: ST_TO_ADDR
// viewRange := 12 ;
32519: LD_ADDR_VAR 0 7
32523: PUSH
32524: LD_INT 12
32526: ST_TO_ADDR
// side := GetSide ( unit ) ;
32527: LD_ADDR_VAR 0 6
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL_OW 255
32541: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32542: LD_INT 61
32544: PPUSH
32545: LD_VAR 0 6
32549: PPUSH
32550: CALL_OW 321
32554: PUSH
32555: LD_INT 2
32557: EQUAL
32558: IFFALSE 32568
// viewRange := 16 ;
32560: LD_ADDR_VAR 0 7
32564: PUSH
32565: LD_INT 16
32567: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32568: LD_VAR 0 1
32572: PPUSH
32573: LD_VAR 0 2
32577: PPUSH
32578: LD_VAR 0 3
32582: PPUSH
32583: CALL_OW 297
32587: PUSH
32588: LD_VAR 0 5
32592: GREATER
32593: IFFALSE 32672
// begin ComMoveXY ( unit , x , y ) ;
32595: LD_VAR 0 1
32599: PPUSH
32600: LD_VAR 0 2
32604: PPUSH
32605: LD_VAR 0 3
32609: PPUSH
32610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32614: LD_INT 35
32616: PPUSH
32617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_VAR 0 3
32635: PPUSH
32636: CALL 69149 0 3
32640: NOT
32641: IFFALSE 32645
// exit ;
32643: GO 32899
// until GetDistUnitXY ( unit , x , y ) < dist ;
32645: LD_VAR 0 1
32649: PPUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: CALL_OW 297
32664: PUSH
32665: LD_VAR 0 5
32669: LESS
32670: IFFALSE 32614
// end ; ComTurnXY ( unit , x , y ) ;
32672: LD_VAR 0 1
32676: PPUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: LD_VAR 0 3
32686: PPUSH
32687: CALL_OW 118
// wait ( 5 ) ;
32691: LD_INT 5
32693: PPUSH
32694: CALL_OW 67
// _d := GetDir ( unit ) ;
32698: LD_ADDR_VAR 0 10
32702: PUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 254
32712: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32713: LD_ADDR_VAR 0 8
32717: PUSH
32718: LD_VAR 0 1
32722: PPUSH
32723: CALL_OW 250
32727: PPUSH
32728: LD_VAR 0 10
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL_OW 272
32742: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32743: LD_ADDR_VAR 0 9
32747: PUSH
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 251
32757: PPUSH
32758: LD_VAR 0 10
32762: PPUSH
32763: LD_VAR 0 5
32767: PPUSH
32768: CALL_OW 273
32772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32773: LD_VAR 0 8
32777: PPUSH
32778: LD_VAR 0 9
32782: PPUSH
32783: CALL_OW 488
32787: NOT
32788: IFFALSE 32792
// exit ;
32790: GO 32899
// ComAnimCustom ( unit , 1 ) ;
32792: LD_VAR 0 1
32796: PPUSH
32797: LD_INT 1
32799: PPUSH
32800: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32804: LD_VAR 0 8
32808: PPUSH
32809: LD_VAR 0 9
32813: PPUSH
32814: LD_VAR 0 6
32818: PPUSH
32819: LD_VAR 0 7
32823: PPUSH
32824: CALL_OW 330
// repeat wait ( 1 ) ;
32828: LD_INT 1
32830: PPUSH
32831: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 316
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: CALL_OW 314
32854: OR
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 302
32865: NOT
32866: OR
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 301
32877: OR
32878: IFFALSE 32828
// RemoveSeeing ( _x , _y , side ) ;
32880: LD_VAR 0 8
32884: PPUSH
32885: LD_VAR 0 9
32889: PPUSH
32890: LD_VAR 0 6
32894: PPUSH
32895: CALL_OW 331
// end ; end_of_file
32899: LD_VAR 0 4
32903: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32904: LD_INT 0
32906: PPUSH
32907: PPUSH
// if exist_mode then
32908: LD_VAR 0 2
32912: IFFALSE 32937
// unit := CreateCharacter ( prefix & ident ) else
32914: LD_ADDR_VAR 0 5
32918: PUSH
32919: LD_VAR 0 3
32923: PUSH
32924: LD_VAR 0 1
32928: STR
32929: PPUSH
32930: CALL_OW 34
32934: ST_TO_ADDR
32935: GO 32952
// unit := NewCharacter ( ident ) ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 25
32951: ST_TO_ADDR
// result := unit ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_VAR 0 5
32961: ST_TO_ADDR
// end ;
32962: LD_VAR 0 4
32966: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32967: LD_INT 0
32969: PPUSH
32970: PPUSH
// if not side or not nation then
32971: LD_VAR 0 1
32975: NOT
32976: PUSH
32977: LD_VAR 0 2
32981: NOT
32982: OR
32983: IFFALSE 32987
// exit ;
32985: GO 33755
// case nation of nation_american :
32987: LD_VAR 0 2
32991: PUSH
32992: LD_INT 1
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33214
33000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33001: LD_ADDR_VAR 0 4
33005: PUSH
33006: LD_INT 35
33008: PUSH
33009: LD_INT 45
33011: PUSH
33012: LD_INT 46
33014: PUSH
33015: LD_INT 47
33017: PUSH
33018: LD_INT 82
33020: PUSH
33021: LD_INT 83
33023: PUSH
33024: LD_INT 84
33026: PUSH
33027: LD_INT 85
33029: PUSH
33030: LD_INT 86
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 6
33041: PUSH
33042: LD_INT 15
33044: PUSH
33045: LD_INT 16
33047: PUSH
33048: LD_INT 7
33050: PUSH
33051: LD_INT 12
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: LD_INT 10
33059: PUSH
33060: LD_INT 14
33062: PUSH
33063: LD_INT 20
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 22
33071: PUSH
33072: LD_INT 25
33074: PUSH
33075: LD_INT 32
33077: PUSH
33078: LD_INT 27
33080: PUSH
33081: LD_INT 36
33083: PUSH
33084: LD_INT 69
33086: PUSH
33087: LD_INT 39
33089: PUSH
33090: LD_INT 34
33092: PUSH
33093: LD_INT 40
33095: PUSH
33096: LD_INT 48
33098: PUSH
33099: LD_INT 49
33101: PUSH
33102: LD_INT 50
33104: PUSH
33105: LD_INT 51
33107: PUSH
33108: LD_INT 52
33110: PUSH
33111: LD_INT 53
33113: PUSH
33114: LD_INT 54
33116: PUSH
33117: LD_INT 55
33119: PUSH
33120: LD_INT 56
33122: PUSH
33123: LD_INT 57
33125: PUSH
33126: LD_INT 58
33128: PUSH
33129: LD_INT 59
33131: PUSH
33132: LD_INT 60
33134: PUSH
33135: LD_INT 61
33137: PUSH
33138: LD_INT 62
33140: PUSH
33141: LD_INT 80
33143: PUSH
33144: LD_INT 82
33146: PUSH
33147: LD_INT 83
33149: PUSH
33150: LD_INT 84
33152: PUSH
33153: LD_INT 85
33155: PUSH
33156: LD_INT 86
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
33212: GO 33679
33214: LD_INT 2
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33448
33222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: LD_INT 35
33230: PUSH
33231: LD_INT 45
33233: PUSH
33234: LD_INT 46
33236: PUSH
33237: LD_INT 47
33239: PUSH
33240: LD_INT 82
33242: PUSH
33243: LD_INT 83
33245: PUSH
33246: LD_INT 84
33248: PUSH
33249: LD_INT 85
33251: PUSH
33252: LD_INT 87
33254: PUSH
33255: LD_INT 70
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 11
33263: PUSH
33264: LD_INT 3
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: LD_INT 5
33272: PUSH
33273: LD_INT 6
33275: PUSH
33276: LD_INT 15
33278: PUSH
33279: LD_INT 18
33281: PUSH
33282: LD_INT 7
33284: PUSH
33285: LD_INT 17
33287: PUSH
33288: LD_INT 8
33290: PUSH
33291: LD_INT 20
33293: PUSH
33294: LD_INT 21
33296: PUSH
33297: LD_INT 22
33299: PUSH
33300: LD_INT 72
33302: PUSH
33303: LD_INT 26
33305: PUSH
33306: LD_INT 69
33308: PUSH
33309: LD_INT 39
33311: PUSH
33312: LD_INT 40
33314: PUSH
33315: LD_INT 41
33317: PUSH
33318: LD_INT 42
33320: PUSH
33321: LD_INT 43
33323: PUSH
33324: LD_INT 48
33326: PUSH
33327: LD_INT 49
33329: PUSH
33330: LD_INT 50
33332: PUSH
33333: LD_INT 51
33335: PUSH
33336: LD_INT 52
33338: PUSH
33339: LD_INT 53
33341: PUSH
33342: LD_INT 54
33344: PUSH
33345: LD_INT 55
33347: PUSH
33348: LD_INT 56
33350: PUSH
33351: LD_INT 60
33353: PUSH
33354: LD_INT 61
33356: PUSH
33357: LD_INT 62
33359: PUSH
33360: LD_INT 66
33362: PUSH
33363: LD_INT 67
33365: PUSH
33366: LD_INT 68
33368: PUSH
33369: LD_INT 81
33371: PUSH
33372: LD_INT 82
33374: PUSH
33375: LD_INT 83
33377: PUSH
33378: LD_INT 84
33380: PUSH
33381: LD_INT 85
33383: PUSH
33384: LD_INT 87
33386: PUSH
33387: LD_INT 88
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
33446: GO 33679
33448: LD_INT 3
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33678
33456: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33457: LD_ADDR_VAR 0 4
33461: PUSH
33462: LD_INT 46
33464: PUSH
33465: LD_INT 47
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 82
33476: PUSH
33477: LD_INT 83
33479: PUSH
33480: LD_INT 84
33482: PUSH
33483: LD_INT 85
33485: PUSH
33486: LD_INT 86
33488: PUSH
33489: LD_INT 11
33491: PUSH
33492: LD_INT 9
33494: PUSH
33495: LD_INT 20
33497: PUSH
33498: LD_INT 19
33500: PUSH
33501: LD_INT 21
33503: PUSH
33504: LD_INT 24
33506: PUSH
33507: LD_INT 22
33509: PUSH
33510: LD_INT 25
33512: PUSH
33513: LD_INT 28
33515: PUSH
33516: LD_INT 29
33518: PUSH
33519: LD_INT 30
33521: PUSH
33522: LD_INT 31
33524: PUSH
33525: LD_INT 37
33527: PUSH
33528: LD_INT 38
33530: PUSH
33531: LD_INT 32
33533: PUSH
33534: LD_INT 27
33536: PUSH
33537: LD_INT 33
33539: PUSH
33540: LD_INT 69
33542: PUSH
33543: LD_INT 39
33545: PUSH
33546: LD_INT 34
33548: PUSH
33549: LD_INT 40
33551: PUSH
33552: LD_INT 71
33554: PUSH
33555: LD_INT 23
33557: PUSH
33558: LD_INT 44
33560: PUSH
33561: LD_INT 48
33563: PUSH
33564: LD_INT 49
33566: PUSH
33567: LD_INT 50
33569: PUSH
33570: LD_INT 51
33572: PUSH
33573: LD_INT 52
33575: PUSH
33576: LD_INT 53
33578: PUSH
33579: LD_INT 54
33581: PUSH
33582: LD_INT 55
33584: PUSH
33585: LD_INT 56
33587: PUSH
33588: LD_INT 57
33590: PUSH
33591: LD_INT 58
33593: PUSH
33594: LD_INT 59
33596: PUSH
33597: LD_INT 63
33599: PUSH
33600: LD_INT 64
33602: PUSH
33603: LD_INT 65
33605: PUSH
33606: LD_INT 82
33608: PUSH
33609: LD_INT 83
33611: PUSH
33612: LD_INT 84
33614: PUSH
33615: LD_INT 85
33617: PUSH
33618: LD_INT 86
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
33676: GO 33679
33678: POP
// if state > - 1 and state < 3 then
33679: LD_VAR 0 3
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: GREATER
33688: PUSH
33689: LD_VAR 0 3
33693: PUSH
33694: LD_INT 3
33696: LESS
33697: AND
33698: IFFALSE 33755
// for i in result do
33700: LD_ADDR_VAR 0 5
33704: PUSH
33705: LD_VAR 0 4
33709: PUSH
33710: FOR_IN
33711: IFFALSE 33753
// if GetTech ( i , side ) <> state then
33713: LD_VAR 0 5
33717: PPUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 321
33727: PUSH
33728: LD_VAR 0 3
33732: NONEQUAL
33733: IFFALSE 33751
// result := result diff i ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: LD_VAR 0 4
33744: PUSH
33745: LD_VAR 0 5
33749: DIFF
33750: ST_TO_ADDR
33751: GO 33710
33753: POP
33754: POP
// end ;
33755: LD_VAR 0 4
33759: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33760: LD_INT 0
33762: PPUSH
33763: PPUSH
33764: PPUSH
// result := true ;
33765: LD_ADDR_VAR 0 3
33769: PUSH
33770: LD_INT 1
33772: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33773: LD_ADDR_VAR 0 5
33777: PUSH
33778: LD_VAR 0 2
33782: PPUSH
33783: CALL_OW 480
33787: ST_TO_ADDR
// if not tmp then
33788: LD_VAR 0 5
33792: NOT
33793: IFFALSE 33797
// exit ;
33795: GO 33846
// for i in tmp do
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: LD_VAR 0 5
33806: PUSH
33807: FOR_IN
33808: IFFALSE 33844
// if GetTech ( i , side ) <> state_researched then
33810: LD_VAR 0 4
33814: PPUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 321
33824: PUSH
33825: LD_INT 2
33827: NONEQUAL
33828: IFFALSE 33842
// begin result := false ;
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 0
33837: ST_TO_ADDR
// exit ;
33838: POP
33839: POP
33840: GO 33846
// end ;
33842: GO 33807
33844: POP
33845: POP
// end ;
33846: LD_VAR 0 3
33850: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33851: LD_INT 0
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33866: LD_VAR 0 1
33870: NOT
33871: PUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 257
33881: PUSH
33882: LD_INT 9
33884: NONEQUAL
33885: OR
33886: IFFALSE 33890
// exit ;
33888: GO 34463
// side := GetSide ( unit ) ;
33890: LD_ADDR_VAR 0 9
33894: PUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 255
33904: ST_TO_ADDR
// tech_space := tech_spacanom ;
33905: LD_ADDR_VAR 0 12
33909: PUSH
33910: LD_INT 29
33912: ST_TO_ADDR
// tech_time := tech_taurad ;
33913: LD_ADDR_VAR 0 13
33917: PUSH
33918: LD_INT 28
33920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33921: LD_ADDR_VAR 0 11
33925: PUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 310
33935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33936: LD_VAR 0 11
33940: PPUSH
33941: CALL_OW 247
33945: PUSH
33946: LD_INT 2
33948: EQUAL
33949: IFFALSE 33953
// exit ;
33951: GO 34463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33953: LD_ADDR_VAR 0 8
33957: PUSH
33958: LD_INT 81
33960: PUSH
33961: LD_VAR 0 9
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: LD_INT 21
33975: PUSH
33976: LD_INT 3
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PPUSH
33991: CALL_OW 69
33995: ST_TO_ADDR
// if not tmp then
33996: LD_VAR 0 8
34000: NOT
34001: IFFALSE 34005
// exit ;
34003: GO 34463
// if in_unit then
34005: LD_VAR 0 11
34009: IFFALSE 34033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34011: LD_ADDR_VAR 0 10
34015: PUSH
34016: LD_VAR 0 8
34020: PPUSH
34021: LD_VAR 0 11
34025: PPUSH
34026: CALL_OW 74
34030: ST_TO_ADDR
34031: GO 34053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34033: LD_ADDR_VAR 0 10
34037: PUSH
34038: LD_VAR 0 8
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 74
34052: ST_TO_ADDR
// if not enemy then
34053: LD_VAR 0 10
34057: NOT
34058: IFFALSE 34062
// exit ;
34060: GO 34463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34062: LD_VAR 0 11
34066: PUSH
34067: LD_VAR 0 11
34071: PPUSH
34072: LD_VAR 0 10
34076: PPUSH
34077: CALL_OW 296
34081: PUSH
34082: LD_INT 13
34084: GREATER
34085: AND
34086: PUSH
34087: LD_VAR 0 1
34091: PPUSH
34092: LD_VAR 0 10
34096: PPUSH
34097: CALL_OW 296
34101: PUSH
34102: LD_INT 12
34104: GREATER
34105: OR
34106: IFFALSE 34110
// exit ;
34108: GO 34463
// missile := [ 1 ] ;
34110: LD_ADDR_VAR 0 14
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34121: LD_VAR 0 9
34125: PPUSH
34126: LD_VAR 0 12
34130: PPUSH
34131: CALL_OW 325
34135: IFFALSE 34164
// missile := Replace ( missile , missile + 1 , 2 ) ;
34137: LD_ADDR_VAR 0 14
34141: PUSH
34142: LD_VAR 0 14
34146: PPUSH
34147: LD_VAR 0 14
34151: PUSH
34152: LD_INT 1
34154: PLUS
34155: PPUSH
34156: LD_INT 2
34158: PPUSH
34159: CALL_OW 1
34163: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34164: LD_VAR 0 9
34168: PPUSH
34169: LD_VAR 0 13
34173: PPUSH
34174: CALL_OW 325
34178: PUSH
34179: LD_VAR 0 10
34183: PPUSH
34184: CALL_OW 255
34188: PPUSH
34189: LD_VAR 0 13
34193: PPUSH
34194: CALL_OW 325
34198: NOT
34199: AND
34200: IFFALSE 34229
// missile := Replace ( missile , missile + 1 , 3 ) ;
34202: LD_ADDR_VAR 0 14
34206: PUSH
34207: LD_VAR 0 14
34211: PPUSH
34212: LD_VAR 0 14
34216: PUSH
34217: LD_INT 1
34219: PLUS
34220: PPUSH
34221: LD_INT 3
34223: PPUSH
34224: CALL_OW 1
34228: ST_TO_ADDR
// if missile < 2 then
34229: LD_VAR 0 14
34233: PUSH
34234: LD_INT 2
34236: LESS
34237: IFFALSE 34241
// exit ;
34239: GO 34463
// x := GetX ( enemy ) ;
34241: LD_ADDR_VAR 0 4
34245: PUSH
34246: LD_VAR 0 10
34250: PPUSH
34251: CALL_OW 250
34255: ST_TO_ADDR
// y := GetY ( enemy ) ;
34256: LD_ADDR_VAR 0 5
34260: PUSH
34261: LD_VAR 0 10
34265: PPUSH
34266: CALL_OW 251
34270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34271: LD_ADDR_VAR 0 6
34275: PUSH
34276: LD_VAR 0 4
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PPUSH
34285: LD_INT 1
34287: PPUSH
34288: CALL_OW 12
34292: PLUS
34293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34294: LD_ADDR_VAR 0 7
34298: PUSH
34299: LD_VAR 0 5
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PPUSH
34308: LD_INT 1
34310: PPUSH
34311: CALL_OW 12
34315: PLUS
34316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34317: LD_VAR 0 6
34321: PPUSH
34322: LD_VAR 0 7
34326: PPUSH
34327: CALL_OW 488
34331: NOT
34332: IFFALSE 34354
// begin _x := x ;
34334: LD_ADDR_VAR 0 6
34338: PUSH
34339: LD_VAR 0 4
34343: ST_TO_ADDR
// _y := y ;
34344: LD_ADDR_VAR 0 7
34348: PUSH
34349: LD_VAR 0 5
34353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 1
34361: PPUSH
34362: LD_VAR 0 14
34366: PPUSH
34367: CALL_OW 12
34371: ST_TO_ADDR
// case i of 1 :
34372: LD_VAR 0 3
34376: PUSH
34377: LD_INT 1
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34402
34385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34386: LD_VAR 0 1
34390: PPUSH
34391: LD_VAR 0 10
34395: PPUSH
34396: CALL_OW 115
34400: GO 34463
34402: LD_INT 2
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34432
34410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 6
34420: PPUSH
34421: LD_VAR 0 7
34425: PPUSH
34426: CALL_OW 153
34430: GO 34463
34432: LD_INT 3
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34462
34440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34441: LD_VAR 0 1
34445: PPUSH
34446: LD_VAR 0 6
34450: PPUSH
34451: LD_VAR 0 7
34455: PPUSH
34456: CALL_OW 154
34460: GO 34463
34462: POP
// end ;
34463: LD_VAR 0 2
34467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
// if not unit or not building then
34476: LD_VAR 0 1
34480: NOT
34481: PUSH
34482: LD_VAR 0 2
34486: NOT
34487: OR
34488: IFFALSE 34492
// exit ;
34490: GO 34650
// x := GetX ( building ) ;
34492: LD_ADDR_VAR 0 5
34496: PUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: CALL_OW 250
34506: ST_TO_ADDR
// y := GetY ( building ) ;
34507: LD_ADDR_VAR 0 6
34511: PUSH
34512: LD_VAR 0 2
34516: PPUSH
34517: CALL_OW 251
34521: ST_TO_ADDR
// for i = 0 to 5 do
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: DOUBLE
34528: LD_INT 0
34530: DEC
34531: ST_TO_ADDR
34532: LD_INT 5
34534: PUSH
34535: FOR_TO
34536: IFFALSE 34648
// begin _x := ShiftX ( x , i , 3 ) ;
34538: LD_ADDR_VAR 0 7
34542: PUSH
34543: LD_VAR 0 5
34547: PPUSH
34548: LD_VAR 0 4
34552: PPUSH
34553: LD_INT 3
34555: PPUSH
34556: CALL_OW 272
34560: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34561: LD_ADDR_VAR 0 8
34565: PUSH
34566: LD_VAR 0 6
34570: PPUSH
34571: LD_VAR 0 4
34575: PPUSH
34576: LD_INT 3
34578: PPUSH
34579: CALL_OW 273
34583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34584: LD_VAR 0 7
34588: PPUSH
34589: LD_VAR 0 8
34593: PPUSH
34594: CALL_OW 488
34598: NOT
34599: IFFALSE 34603
// continue ;
34601: GO 34535
// if HexInfo ( _x , _y ) = 0 then
34603: LD_VAR 0 7
34607: PPUSH
34608: LD_VAR 0 8
34612: PPUSH
34613: CALL_OW 428
34617: PUSH
34618: LD_INT 0
34620: EQUAL
34621: IFFALSE 34646
// begin ComMoveXY ( unit , _x , _y ) ;
34623: LD_VAR 0 1
34627: PPUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: LD_VAR 0 8
34637: PPUSH
34638: CALL_OW 111
// exit ;
34642: POP
34643: POP
34644: GO 34650
// end ; end ;
34646: GO 34535
34648: POP
34649: POP
// end ;
34650: LD_VAR 0 3
34654: RET
// export function ScanBase ( side , base_area ) ; begin
34655: LD_INT 0
34657: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_INT 81
34670: PUSH
34671: LD_VAR 0 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PPUSH
34680: CALL_OW 70
34684: ST_TO_ADDR
// end ;
34685: LD_VAR 0 3
34689: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
// result := false ;
34696: LD_ADDR_VAR 0 2
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// side := GetSide ( unit ) ;
34704: LD_ADDR_VAR 0 3
34708: PUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 255
34718: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34719: LD_ADDR_VAR 0 4
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 248
34733: ST_TO_ADDR
// case nat of 1 :
34734: LD_VAR 0 4
34738: PUSH
34739: LD_INT 1
34741: DOUBLE
34742: EQUAL
34743: IFTRUE 34747
34745: GO 34758
34747: POP
// tech := tech_lassight ; 2 :
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: LD_INT 12
34755: ST_TO_ADDR
34756: GO 34797
34758: LD_INT 2
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34777
34766: POP
// tech := tech_mortar ; 3 :
34767: LD_ADDR_VAR 0 5
34771: PUSH
34772: LD_INT 41
34774: ST_TO_ADDR
34775: GO 34797
34777: LD_INT 3
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34785
34783: GO 34796
34785: POP
// tech := tech_bazooka ; end ;
34786: LD_ADDR_VAR 0 5
34790: PUSH
34791: LD_INT 44
34793: ST_TO_ADDR
34794: GO 34797
34796: POP
// if Researched ( side , tech ) then
34797: LD_VAR 0 3
34801: PPUSH
34802: LD_VAR 0 5
34806: PPUSH
34807: CALL_OW 325
34811: IFFALSE 34838
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: LD_INT 8
34823: PUSH
34824: LD_INT 9
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: PUSH
34832: LD_VAR 0 4
34836: ARRAY
34837: ST_TO_ADDR
// end ;
34838: LD_VAR 0 2
34842: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
34847: PPUSH
// if not mines then
34848: LD_VAR 0 2
34852: NOT
34853: IFFALSE 34857
// exit ;
34855: GO 35001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34857: LD_ADDR_VAR 0 5
34861: PUSH
34862: LD_INT 81
34864: PUSH
34865: LD_VAR 0 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 3
34876: PUSH
34877: LD_INT 21
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 69
34899: ST_TO_ADDR
// for i in mines do
34900: LD_ADDR_VAR 0 4
34904: PUSH
34905: LD_VAR 0 2
34909: PUSH
34910: FOR_IN
34911: IFFALSE 34999
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34913: LD_VAR 0 4
34917: PUSH
34918: LD_INT 1
34920: ARRAY
34921: PPUSH
34922: LD_VAR 0 4
34926: PUSH
34927: LD_INT 2
34929: ARRAY
34930: PPUSH
34931: CALL_OW 458
34935: NOT
34936: IFFALSE 34940
// continue ;
34938: GO 34910
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 1
34947: ARRAY
34948: PPUSH
34949: LD_VAR 0 4
34953: PUSH
34954: LD_INT 2
34956: ARRAY
34957: PPUSH
34958: CALL_OW 428
34962: PUSH
34963: LD_VAR 0 5
34967: IN
34968: IFFALSE 34997
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34970: LD_VAR 0 4
34974: PUSH
34975: LD_INT 1
34977: ARRAY
34978: PPUSH
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 2
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 456
// end ;
34997: GO 34910
34999: POP
35000: POP
// end ;
35001: LD_VAR 0 3
35005: RET
// export function Count ( array ) ; begin
35006: LD_INT 0
35008: PPUSH
// result := array + 0 ;
35009: LD_ADDR_VAR 0 2
35013: PUSH
35014: LD_VAR 0 1
35018: PUSH
35019: LD_INT 0
35021: PLUS
35022: ST_TO_ADDR
// end ;
35023: LD_VAR 0 2
35027: RET
// export function IsEmpty ( building ) ; begin
35028: LD_INT 0
35030: PPUSH
// if not building then
35031: LD_VAR 0 1
35035: NOT
35036: IFFALSE 35040
// exit ;
35038: GO 35083
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35040: LD_ADDR_VAR 0 2
35044: PUSH
35045: LD_VAR 0 1
35049: PUSH
35050: LD_INT 22
35052: PUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 255
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 58
35069: PUSH
35070: EMPTY
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PPUSH
35077: CALL_OW 69
35081: IN
35082: ST_TO_ADDR
// end ;
35083: LD_VAR 0 2
35087: RET
// export function IsNotFull ( building ) ; var places ; begin
35088: LD_INT 0
35090: PPUSH
35091: PPUSH
// if not building then
35092: LD_VAR 0 1
35096: NOT
35097: IFFALSE 35101
// exit ;
35099: GO 35272
// result := false ;
35101: LD_ADDR_VAR 0 2
35105: PUSH
35106: LD_INT 0
35108: ST_TO_ADDR
// places := 0 ;
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_INT 0
35116: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35117: LD_VAR 0 1
35121: PPUSH
35122: CALL_OW 266
35126: PUSH
35127: LD_INT 0
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35189
35133: LD_INT 1
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35189
35139: LD_INT 6
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35189
35145: LD_INT 7
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35189
35151: LD_INT 8
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35189
35157: LD_INT 4
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35189
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35189
35169: LD_INT 2
35171: DOUBLE
35172: EQUAL
35173: IFTRUE 35189
35175: LD_INT 3
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35189
35181: LD_INT 35
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35200
35189: POP
// places := 6 ; b_bunker , b_breastwork :
35190: LD_ADDR_VAR 0 3
35194: PUSH
35195: LD_INT 6
35197: ST_TO_ADDR
35198: GO 35245
35200: LD_INT 32
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35214
35206: LD_INT 31
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35225
35214: POP
// places := 1 ; b_control_tower :
35215: LD_ADDR_VAR 0 3
35219: PUSH
35220: LD_INT 1
35222: ST_TO_ADDR
35223: GO 35245
35225: LD_INT 36
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35244
35233: POP
// places := 3 ; end ;
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_INT 3
35241: ST_TO_ADDR
35242: GO 35245
35244: POP
// if places then
35245: LD_VAR 0 3
35249: IFFALSE 35272
// result := UnitsInside ( building ) < places ;
35251: LD_ADDR_VAR 0 2
35255: PUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: CALL_OW 313
35265: PUSH
35266: LD_VAR 0 3
35270: LESS
35271: ST_TO_ADDR
// end ;
35272: LD_VAR 0 2
35276: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35277: LD_INT 0
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
// tmp := [ ] ;
35283: LD_ADDR_VAR 0 3
35287: PUSH
35288: EMPTY
35289: ST_TO_ADDR
// list := [ ] ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: EMPTY
35296: ST_TO_ADDR
// for i = 16 to 25 do
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: DOUBLE
35303: LD_INT 16
35305: DEC
35306: ST_TO_ADDR
35307: LD_INT 25
35309: PUSH
35310: FOR_TO
35311: IFFALSE 35384
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_VAR 0 3
35322: PUSH
35323: LD_INT 22
35325: PUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 255
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 91
35342: PUSH
35343: LD_VAR 0 1
35347: PUSH
35348: LD_INT 6
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 30
35358: PUSH
35359: LD_VAR 0 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: PPUSH
35376: CALL_OW 69
35380: ADD
35381: ST_TO_ADDR
35382: GO 35310
35384: POP
35385: POP
// for i = 1 to tmp do
35386: LD_ADDR_VAR 0 4
35390: PUSH
35391: DOUBLE
35392: LD_INT 1
35394: DEC
35395: ST_TO_ADDR
35396: LD_VAR 0 3
35400: PUSH
35401: FOR_TO
35402: IFFALSE 35490
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35404: LD_ADDR_VAR 0 5
35408: PUSH
35409: LD_VAR 0 5
35413: PUSH
35414: LD_VAR 0 3
35418: PUSH
35419: LD_VAR 0 4
35423: ARRAY
35424: PPUSH
35425: CALL_OW 266
35429: PUSH
35430: LD_VAR 0 3
35434: PUSH
35435: LD_VAR 0 4
35439: ARRAY
35440: PPUSH
35441: CALL_OW 250
35445: PUSH
35446: LD_VAR 0 3
35450: PUSH
35451: LD_VAR 0 4
35455: ARRAY
35456: PPUSH
35457: CALL_OW 251
35461: PUSH
35462: LD_VAR 0 3
35466: PUSH
35467: LD_VAR 0 4
35471: ARRAY
35472: PPUSH
35473: CALL_OW 254
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: ADD
35487: ST_TO_ADDR
35488: GO 35401
35490: POP
35491: POP
// result := list ;
35492: LD_ADDR_VAR 0 2
35496: PUSH
35497: LD_VAR 0 5
35501: ST_TO_ADDR
// end ;
35502: LD_VAR 0 2
35506: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not factory then
35516: LD_VAR 0 1
35520: NOT
35521: IFFALSE 35525
// exit ;
35523: GO 36118
// if control = control_apeman then
35525: LD_VAR 0 4
35529: PUSH
35530: LD_INT 5
35532: EQUAL
35533: IFFALSE 35642
// begin tmp := UnitsInside ( factory ) ;
35535: LD_ADDR_VAR 0 8
35539: PUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 313
35549: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35550: LD_VAR 0 8
35554: PPUSH
35555: LD_INT 25
35557: PUSH
35558: LD_INT 12
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 72
35569: NOT
35570: IFFALSE 35580
// control := control_manual ;
35572: LD_ADDR_VAR 0 4
35576: PUSH
35577: LD_INT 1
35579: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35580: LD_ADDR_VAR 0 8
35584: PUSH
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL 35277 0 1
35594: ST_TO_ADDR
// if tmp then
35595: LD_VAR 0 8
35599: IFFALSE 35642
// begin for i in tmp do
35601: LD_ADDR_VAR 0 7
35605: PUSH
35606: LD_VAR 0 8
35610: PUSH
35611: FOR_IN
35612: IFFALSE 35640
// if i [ 1 ] = b_ext_radio then
35614: LD_VAR 0 7
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PUSH
35623: LD_INT 22
35625: EQUAL
35626: IFFALSE 35638
// begin control := control_remote ;
35628: LD_ADDR_VAR 0 4
35632: PUSH
35633: LD_INT 2
35635: ST_TO_ADDR
// break ;
35636: GO 35640
// end ;
35638: GO 35611
35640: POP
35641: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35642: LD_VAR 0 1
35646: PPUSH
35647: LD_VAR 0 2
35651: PPUSH
35652: LD_VAR 0 3
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: LD_VAR 0 5
35666: PPUSH
35667: CALL_OW 448
35671: IFFALSE 35706
// begin result := [ chassis , engine , control , weapon ] ;
35673: LD_ADDR_VAR 0 6
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 3
35687: PUSH
35688: LD_VAR 0 4
35692: PUSH
35693: LD_VAR 0 5
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// exit ;
35704: GO 36118
// end ; _chassis := AvailableChassisList ( factory ) ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 475
35720: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35721: LD_ADDR_VAR 0 11
35725: PUSH
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 476
35735: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35736: LD_ADDR_VAR 0 12
35740: PUSH
35741: LD_VAR 0 1
35745: PPUSH
35746: CALL_OW 477
35750: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35751: LD_ADDR_VAR 0 10
35755: PUSH
35756: LD_VAR 0 1
35760: PPUSH
35761: CALL_OW 478
35765: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35766: LD_VAR 0 9
35770: NOT
35771: PUSH
35772: LD_VAR 0 11
35776: NOT
35777: OR
35778: PUSH
35779: LD_VAR 0 12
35783: NOT
35784: OR
35785: PUSH
35786: LD_VAR 0 10
35790: NOT
35791: OR
35792: IFFALSE 35827
// begin result := [ chassis , engine , control , weapon ] ;
35794: LD_ADDR_VAR 0 6
35798: PUSH
35799: LD_VAR 0 2
35803: PUSH
35804: LD_VAR 0 3
35808: PUSH
35809: LD_VAR 0 4
35813: PUSH
35814: LD_VAR 0 5
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// exit ;
35825: GO 36118
// end ; if not chassis in _chassis then
35827: LD_VAR 0 2
35831: PUSH
35832: LD_VAR 0 9
35836: IN
35837: NOT
35838: IFFALSE 35864
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35840: LD_ADDR_VAR 0 2
35844: PUSH
35845: LD_VAR 0 9
35849: PUSH
35850: LD_INT 1
35852: PPUSH
35853: LD_VAR 0 9
35857: PPUSH
35858: CALL_OW 12
35862: ARRAY
35863: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35864: LD_VAR 0 2
35868: PPUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: CALL 36123 0 2
35878: NOT
35879: IFFALSE 35938
// repeat engine := _engine [ 1 ] ;
35881: LD_ADDR_VAR 0 3
35885: PUSH
35886: LD_VAR 0 11
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35895: LD_ADDR_VAR 0 11
35899: PUSH
35900: LD_VAR 0 11
35904: PPUSH
35905: LD_INT 1
35907: PPUSH
35908: CALL_OW 3
35912: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_VAR 0 3
35922: PPUSH
35923: CALL 36123 0 2
35927: PUSH
35928: LD_VAR 0 11
35932: PUSH
35933: EMPTY
35934: EQUAL
35935: OR
35936: IFFALSE 35881
// if not control in _control then
35938: LD_VAR 0 4
35942: PUSH
35943: LD_VAR 0 12
35947: IN
35948: NOT
35949: IFFALSE 35975
// control := _control [ rand ( 1 , _control ) ] ;
35951: LD_ADDR_VAR 0 4
35955: PUSH
35956: LD_VAR 0 12
35960: PUSH
35961: LD_INT 1
35963: PPUSH
35964: LD_VAR 0 12
35968: PPUSH
35969: CALL_OW 12
35973: ARRAY
35974: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35975: LD_VAR 0 2
35979: PPUSH
35980: LD_VAR 0 5
35984: PPUSH
35985: CALL 36343 0 2
35989: NOT
35990: IFFALSE 36049
// repeat weapon := _weapon [ 1 ] ;
35992: LD_ADDR_VAR 0 5
35996: PUSH
35997: LD_VAR 0 10
36001: PUSH
36002: LD_INT 1
36004: ARRAY
36005: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36006: LD_ADDR_VAR 0 10
36010: PUSH
36011: LD_VAR 0 10
36015: PPUSH
36016: LD_INT 1
36018: PPUSH
36019: CALL_OW 3
36023: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36024: LD_VAR 0 2
36028: PPUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: CALL 36343 0 2
36038: PUSH
36039: LD_VAR 0 10
36043: PUSH
36044: EMPTY
36045: EQUAL
36046: OR
36047: IFFALSE 35992
// result := [ ] ;
36049: LD_ADDR_VAR 0 6
36053: PUSH
36054: EMPTY
36055: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36056: LD_VAR 0 1
36060: PPUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: LD_VAR 0 4
36075: PPUSH
36076: LD_VAR 0 5
36080: PPUSH
36081: CALL_OW 448
36085: IFFALSE 36118
// result := [ chassis , engine , control , weapon ] ;
36087: LD_ADDR_VAR 0 6
36091: PUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_VAR 0 3
36101: PUSH
36102: LD_VAR 0 4
36106: PUSH
36107: LD_VAR 0 5
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// end ;
36118: LD_VAR 0 6
36122: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36123: LD_INT 0
36125: PPUSH
// if not chassis or not engine then
36126: LD_VAR 0 1
36130: NOT
36131: PUSH
36132: LD_VAR 0 2
36136: NOT
36137: OR
36138: IFFALSE 36142
// exit ;
36140: GO 36338
// case engine of engine_solar :
36142: LD_VAR 0 2
36146: PUSH
36147: LD_INT 2
36149: DOUBLE
36150: EQUAL
36151: IFTRUE 36155
36153: GO 36193
36155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36156: LD_ADDR_VAR 0 3
36160: PUSH
36161: LD_INT 11
36163: PUSH
36164: LD_INT 12
36166: PUSH
36167: LD_INT 13
36169: PUSH
36170: LD_INT 14
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: ST_TO_ADDR
36191: GO 36322
36193: LD_INT 1
36195: DOUBLE
36196: EQUAL
36197: IFTRUE 36201
36199: GO 36263
36201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 11
36209: PUSH
36210: LD_INT 12
36212: PUSH
36213: LD_INT 13
36215: PUSH
36216: LD_INT 14
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: LD_INT 4
36230: PUSH
36231: LD_INT 5
36233: PUSH
36234: LD_INT 21
36236: PUSH
36237: LD_INT 23
36239: PUSH
36240: LD_INT 22
36242: PUSH
36243: LD_INT 24
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: ST_TO_ADDR
36261: GO 36322
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36321
36271: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_INT 13
36279: PUSH
36280: LD_INT 14
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 3
36288: PUSH
36289: LD_INT 4
36291: PUSH
36292: LD_INT 5
36294: PUSH
36295: LD_INT 21
36297: PUSH
36298: LD_INT 22
36300: PUSH
36301: LD_INT 23
36303: PUSH
36304: LD_INT 24
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
36319: GO 36322
36321: POP
// result := ( chassis in result ) ;
36322: LD_ADDR_VAR 0 3
36326: PUSH
36327: LD_VAR 0 1
36331: PUSH
36332: LD_VAR 0 3
36336: IN
36337: ST_TO_ADDR
// end ;
36338: LD_VAR 0 3
36342: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36343: LD_INT 0
36345: PPUSH
// if not chassis or not weapon then
36346: LD_VAR 0 1
36350: NOT
36351: PUSH
36352: LD_VAR 0 2
36356: NOT
36357: OR
36358: IFFALSE 36362
// exit ;
36360: GO 37422
// case weapon of us_machine_gun :
36362: LD_VAR 0 2
36366: PUSH
36367: LD_INT 2
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36375
36373: GO 36405
36375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: LD_INT 4
36392: PUSH
36393: LD_INT 5
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: ST_TO_ADDR
36403: GO 37406
36405: LD_INT 3
36407: DOUBLE
36408: EQUAL
36409: IFTRUE 36413
36411: GO 36443
36413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: LD_INT 4
36430: PUSH
36431: LD_INT 5
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
36441: GO 37406
36443: LD_INT 11
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 36481
36451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 4
36468: PUSH
36469: LD_INT 5
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
36479: GO 37406
36481: LD_INT 4
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36515
36489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36490: LD_ADDR_VAR 0 3
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 3
36500: PUSH
36501: LD_INT 4
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
36513: GO 37406
36515: LD_INT 5
36517: DOUBLE
36518: EQUAL
36519: IFTRUE 36523
36521: GO 36549
36523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36524: LD_ADDR_VAR 0 3
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: LD_INT 4
36537: PUSH
36538: LD_INT 5
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
36547: GO 37406
36549: LD_INT 9
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36557
36555: GO 36583
36557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36558: LD_ADDR_VAR 0 3
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 3
36568: PUSH
36569: LD_INT 4
36571: PUSH
36572: LD_INT 5
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
36581: GO 37406
36583: LD_INT 7
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36617
36591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: LD_INT 4
36605: PUSH
36606: LD_INT 5
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
36615: GO 37406
36617: LD_INT 12
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36625
36623: GO 36651
36625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36626: LD_ADDR_VAR 0 3
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: LD_INT 3
36636: PUSH
36637: LD_INT 4
36639: PUSH
36640: LD_INT 5
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
36649: GO 37406
36651: LD_INT 13
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36685
36659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 3
36670: PUSH
36671: LD_INT 4
36673: PUSH
36674: LD_INT 5
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
36683: GO 37406
36685: LD_INT 14
36687: DOUBLE
36688: EQUAL
36689: IFTRUE 36693
36691: GO 36711
36693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36694: LD_ADDR_VAR 0 3
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 5
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: ST_TO_ADDR
36709: GO 37406
36711: LD_INT 6
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36737
36719: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: LD_INT 5
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: ST_TO_ADDR
36735: GO 37406
36737: LD_INT 10
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 36763
36745: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36746: LD_ADDR_VAR 0 3
36750: PUSH
36751: LD_INT 4
36753: PUSH
36754: LD_INT 5
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: ST_TO_ADDR
36761: GO 37406
36763: LD_INT 22
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36771
36769: GO 36797
36771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36772: LD_ADDR_VAR 0 3
36776: PUSH
36777: LD_INT 11
36779: PUSH
36780: LD_INT 12
36782: PUSH
36783: LD_INT 13
36785: PUSH
36786: LD_INT 14
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
36795: GO 37406
36797: LD_INT 23
36799: DOUBLE
36800: EQUAL
36801: IFTRUE 36805
36803: GO 36831
36805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36806: LD_ADDR_VAR 0 3
36810: PUSH
36811: LD_INT 11
36813: PUSH
36814: LD_INT 12
36816: PUSH
36817: LD_INT 13
36819: PUSH
36820: LD_INT 14
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
36829: GO 37406
36831: LD_INT 24
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 36865
36839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36840: LD_ADDR_VAR 0 3
36844: PUSH
36845: LD_INT 11
36847: PUSH
36848: LD_INT 12
36850: PUSH
36851: LD_INT 13
36853: PUSH
36854: LD_INT 14
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
36863: GO 37406
36865: LD_INT 30
36867: DOUBLE
36868: EQUAL
36869: IFTRUE 36873
36871: GO 36899
36873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36874: LD_ADDR_VAR 0 3
36878: PUSH
36879: LD_INT 11
36881: PUSH
36882: LD_INT 12
36884: PUSH
36885: LD_INT 13
36887: PUSH
36888: LD_INT 14
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
36897: GO 37406
36899: LD_INT 25
36901: DOUBLE
36902: EQUAL
36903: IFTRUE 36907
36905: GO 36925
36907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36908: LD_ADDR_VAR 0 3
36912: PUSH
36913: LD_INT 13
36915: PUSH
36916: LD_INT 14
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: ST_TO_ADDR
36923: GO 37406
36925: LD_INT 27
36927: DOUBLE
36928: EQUAL
36929: IFTRUE 36933
36931: GO 36951
36933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36934: LD_ADDR_VAR 0 3
36938: PUSH
36939: LD_INT 13
36941: PUSH
36942: LD_INT 14
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: ST_TO_ADDR
36949: GO 37406
36951: LD_INT 92
36953: DOUBLE
36954: EQUAL
36955: IFTRUE 36959
36957: GO 36985
36959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36960: LD_ADDR_VAR 0 3
36964: PUSH
36965: LD_INT 11
36967: PUSH
36968: LD_INT 12
36970: PUSH
36971: LD_INT 13
36973: PUSH
36974: LD_INT 14
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
36983: GO 37406
36985: LD_INT 28
36987: DOUBLE
36988: EQUAL
36989: IFTRUE 36993
36991: GO 37011
36993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36994: LD_ADDR_VAR 0 3
36998: PUSH
36999: LD_INT 13
37001: PUSH
37002: LD_INT 14
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: ST_TO_ADDR
37009: GO 37406
37011: LD_INT 29
37013: DOUBLE
37014: EQUAL
37015: IFTRUE 37019
37017: GO 37037
37019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37020: LD_ADDR_VAR 0 3
37024: PUSH
37025: LD_INT 13
37027: PUSH
37028: LD_INT 14
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: ST_TO_ADDR
37035: GO 37406
37037: LD_INT 31
37039: DOUBLE
37040: EQUAL
37041: IFTRUE 37045
37043: GO 37063
37045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 13
37053: PUSH
37054: LD_INT 14
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: ST_TO_ADDR
37061: GO 37406
37063: LD_INT 26
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37071
37069: GO 37089
37071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37072: LD_ADDR_VAR 0 3
37076: PUSH
37077: LD_INT 13
37079: PUSH
37080: LD_INT 14
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: ST_TO_ADDR
37087: GO 37406
37089: LD_INT 42
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37097
37095: GO 37123
37097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37098: LD_ADDR_VAR 0 3
37102: PUSH
37103: LD_INT 21
37105: PUSH
37106: LD_INT 22
37108: PUSH
37109: LD_INT 23
37111: PUSH
37112: LD_INT 24
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
37121: GO 37406
37123: LD_INT 43
37125: DOUBLE
37126: EQUAL
37127: IFTRUE 37131
37129: GO 37157
37131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37132: LD_ADDR_VAR 0 3
37136: PUSH
37137: LD_INT 21
37139: PUSH
37140: LD_INT 22
37142: PUSH
37143: LD_INT 23
37145: PUSH
37146: LD_INT 24
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: ST_TO_ADDR
37155: GO 37406
37157: LD_INT 44
37159: DOUBLE
37160: EQUAL
37161: IFTRUE 37165
37163: GO 37191
37165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37166: LD_ADDR_VAR 0 3
37170: PUSH
37171: LD_INT 21
37173: PUSH
37174: LD_INT 22
37176: PUSH
37177: LD_INT 23
37179: PUSH
37180: LD_INT 24
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
37189: GO 37406
37191: LD_INT 45
37193: DOUBLE
37194: EQUAL
37195: IFTRUE 37199
37197: GO 37225
37199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37200: LD_ADDR_VAR 0 3
37204: PUSH
37205: LD_INT 21
37207: PUSH
37208: LD_INT 22
37210: PUSH
37211: LD_INT 23
37213: PUSH
37214: LD_INT 24
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
37223: GO 37406
37225: LD_INT 49
37227: DOUBLE
37228: EQUAL
37229: IFTRUE 37233
37231: GO 37259
37233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37234: LD_ADDR_VAR 0 3
37238: PUSH
37239: LD_INT 21
37241: PUSH
37242: LD_INT 22
37244: PUSH
37245: LD_INT 23
37247: PUSH
37248: LD_INT 24
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
37257: GO 37406
37259: LD_INT 51
37261: DOUBLE
37262: EQUAL
37263: IFTRUE 37267
37265: GO 37293
37267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37268: LD_ADDR_VAR 0 3
37272: PUSH
37273: LD_INT 21
37275: PUSH
37276: LD_INT 22
37278: PUSH
37279: LD_INT 23
37281: PUSH
37282: LD_INT 24
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
37291: GO 37406
37293: LD_INT 52
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37327
37301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: LD_INT 21
37309: PUSH
37310: LD_INT 22
37312: PUSH
37313: LD_INT 23
37315: PUSH
37316: LD_INT 24
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
37325: GO 37406
37327: LD_INT 53
37329: DOUBLE
37330: EQUAL
37331: IFTRUE 37335
37333: GO 37353
37335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37336: LD_ADDR_VAR 0 3
37340: PUSH
37341: LD_INT 23
37343: PUSH
37344: LD_INT 24
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: ST_TO_ADDR
37351: GO 37406
37353: LD_INT 46
37355: DOUBLE
37356: EQUAL
37357: IFTRUE 37361
37359: GO 37379
37361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37362: LD_ADDR_VAR 0 3
37366: PUSH
37367: LD_INT 23
37369: PUSH
37370: LD_INT 24
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: ST_TO_ADDR
37377: GO 37406
37379: LD_INT 47
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37387
37385: GO 37405
37387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37388: LD_ADDR_VAR 0 3
37392: PUSH
37393: LD_INT 23
37395: PUSH
37396: LD_INT 24
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: ST_TO_ADDR
37403: GO 37406
37405: POP
// result := ( chassis in result ) ;
37406: LD_ADDR_VAR 0 3
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: LD_VAR 0 3
37420: IN
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 3
37426: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
// result := array ;
37436: LD_ADDR_VAR 0 5
37440: PUSH
37441: LD_VAR 0 1
37445: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37446: LD_VAR 0 1
37450: NOT
37451: PUSH
37452: LD_VAR 0 2
37456: NOT
37457: OR
37458: PUSH
37459: LD_VAR 0 3
37463: NOT
37464: OR
37465: PUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_VAR 0 1
37475: GREATER
37476: OR
37477: PUSH
37478: LD_VAR 0 3
37482: PUSH
37483: LD_VAR 0 1
37487: GREATER
37488: OR
37489: IFFALSE 37493
// exit ;
37491: GO 37789
// if direction then
37493: LD_VAR 0 4
37497: IFFALSE 37561
// begin d := 1 ;
37499: LD_ADDR_VAR 0 9
37503: PUSH
37504: LD_INT 1
37506: ST_TO_ADDR
// if i_from > i_to then
37507: LD_VAR 0 2
37511: PUSH
37512: LD_VAR 0 3
37516: GREATER
37517: IFFALSE 37543
// length := ( array - i_from ) + i_to else
37519: LD_ADDR_VAR 0 11
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: LD_VAR 0 2
37533: MINUS
37534: PUSH
37535: LD_VAR 0 3
37539: PLUS
37540: ST_TO_ADDR
37541: GO 37559
// length := i_to - i_from ;
37543: LD_ADDR_VAR 0 11
37547: PUSH
37548: LD_VAR 0 3
37552: PUSH
37553: LD_VAR 0 2
37557: MINUS
37558: ST_TO_ADDR
// end else
37559: GO 37622
// begin d := - 1 ;
37561: LD_ADDR_VAR 0 9
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: ST_TO_ADDR
// if i_from > i_to then
37570: LD_VAR 0 2
37574: PUSH
37575: LD_VAR 0 3
37579: GREATER
37580: IFFALSE 37600
// length := i_from - i_to else
37582: LD_ADDR_VAR 0 11
37586: PUSH
37587: LD_VAR 0 2
37591: PUSH
37592: LD_VAR 0 3
37596: MINUS
37597: ST_TO_ADDR
37598: GO 37622
// length := ( array - i_to ) + i_from ;
37600: LD_ADDR_VAR 0 11
37604: PUSH
37605: LD_VAR 0 1
37609: PUSH
37610: LD_VAR 0 3
37614: MINUS
37615: PUSH
37616: LD_VAR 0 2
37620: PLUS
37621: ST_TO_ADDR
// end ; if not length then
37622: LD_VAR 0 11
37626: NOT
37627: IFFALSE 37631
// exit ;
37629: GO 37789
// tmp := array ;
37631: LD_ADDR_VAR 0 10
37635: PUSH
37636: LD_VAR 0 1
37640: ST_TO_ADDR
// for i = 1 to length do
37641: LD_ADDR_VAR 0 6
37645: PUSH
37646: DOUBLE
37647: LD_INT 1
37649: DEC
37650: ST_TO_ADDR
37651: LD_VAR 0 11
37655: PUSH
37656: FOR_TO
37657: IFFALSE 37777
// begin for j = 1 to array do
37659: LD_ADDR_VAR 0 7
37663: PUSH
37664: DOUBLE
37665: LD_INT 1
37667: DEC
37668: ST_TO_ADDR
37669: LD_VAR 0 1
37673: PUSH
37674: FOR_TO
37675: IFFALSE 37763
// begin k := j + d ;
37677: LD_ADDR_VAR 0 8
37681: PUSH
37682: LD_VAR 0 7
37686: PUSH
37687: LD_VAR 0 9
37691: PLUS
37692: ST_TO_ADDR
// if k > array then
37693: LD_VAR 0 8
37697: PUSH
37698: LD_VAR 0 1
37702: GREATER
37703: IFFALSE 37713
// k := 1 ;
37705: LD_ADDR_VAR 0 8
37709: PUSH
37710: LD_INT 1
37712: ST_TO_ADDR
// if not k then
37713: LD_VAR 0 8
37717: NOT
37718: IFFALSE 37730
// k := array ;
37720: LD_ADDR_VAR 0 8
37724: PUSH
37725: LD_VAR 0 1
37729: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37730: LD_ADDR_VAR 0 10
37734: PUSH
37735: LD_VAR 0 10
37739: PPUSH
37740: LD_VAR 0 8
37744: PPUSH
37745: LD_VAR 0 1
37749: PUSH
37750: LD_VAR 0 7
37754: ARRAY
37755: PPUSH
37756: CALL_OW 1
37760: ST_TO_ADDR
// end ;
37761: GO 37674
37763: POP
37764: POP
// array := tmp ;
37765: LD_ADDR_VAR 0 1
37769: PUSH
37770: LD_VAR 0 10
37774: ST_TO_ADDR
// end ;
37775: GO 37656
37777: POP
37778: POP
// result := array ;
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_VAR 0 1
37788: ST_TO_ADDR
// end ;
37789: LD_VAR 0 5
37793: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37794: LD_INT 0
37796: PPUSH
37797: PPUSH
// result := 0 ;
37798: LD_ADDR_VAR 0 3
37802: PUSH
37803: LD_INT 0
37805: ST_TO_ADDR
// if not array or not value in array then
37806: LD_VAR 0 1
37810: NOT
37811: PUSH
37812: LD_VAR 0 2
37816: PUSH
37817: LD_VAR 0 1
37821: IN
37822: NOT
37823: OR
37824: IFFALSE 37828
// exit ;
37826: GO 37882
// for i = 1 to array do
37828: LD_ADDR_VAR 0 4
37832: PUSH
37833: DOUBLE
37834: LD_INT 1
37836: DEC
37837: ST_TO_ADDR
37838: LD_VAR 0 1
37842: PUSH
37843: FOR_TO
37844: IFFALSE 37880
// if value = array [ i ] then
37846: LD_VAR 0 2
37850: PUSH
37851: LD_VAR 0 1
37855: PUSH
37856: LD_VAR 0 4
37860: ARRAY
37861: EQUAL
37862: IFFALSE 37878
// begin result := i ;
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_VAR 0 4
37873: ST_TO_ADDR
// exit ;
37874: POP
37875: POP
37876: GO 37882
// end ;
37878: GO 37843
37880: POP
37881: POP
// end ;
37882: LD_VAR 0 3
37886: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37887: LD_INT 0
37889: PPUSH
// vc_chassis := chassis ;
37890: LD_ADDR_OWVAR 37
37894: PUSH
37895: LD_VAR 0 1
37899: ST_TO_ADDR
// vc_engine := engine ;
37900: LD_ADDR_OWVAR 39
37904: PUSH
37905: LD_VAR 0 2
37909: ST_TO_ADDR
// vc_control := control ;
37910: LD_ADDR_OWVAR 38
37914: PUSH
37915: LD_VAR 0 3
37919: ST_TO_ADDR
// vc_weapon := weapon ;
37920: LD_ADDR_OWVAR 40
37924: PUSH
37925: LD_VAR 0 4
37929: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37930: LD_ADDR_OWVAR 41
37934: PUSH
37935: LD_VAR 0 5
37939: ST_TO_ADDR
// end ;
37940: LD_VAR 0 6
37944: RET
// export function WantPlant ( unit ) ; var task ; begin
37945: LD_INT 0
37947: PPUSH
37948: PPUSH
// result := false ;
37949: LD_ADDR_VAR 0 2
37953: PUSH
37954: LD_INT 0
37956: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37957: LD_ADDR_VAR 0 3
37961: PUSH
37962: LD_VAR 0 1
37966: PPUSH
37967: CALL_OW 437
37971: ST_TO_ADDR
// if task then
37972: LD_VAR 0 3
37976: IFFALSE 38004
// if task [ 1 ] [ 1 ] = p then
37978: LD_VAR 0 3
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PUSH
37991: LD_STRING p
37993: EQUAL
37994: IFFALSE 38004
// result := true ;
37996: LD_ADDR_VAR 0 2
38000: PUSH
38001: LD_INT 1
38003: ST_TO_ADDR
// end ;
38004: LD_VAR 0 2
38008: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38009: LD_INT 0
38011: PPUSH
38012: PPUSH
38013: PPUSH
38014: PPUSH
// if pos < 1 then
38015: LD_VAR 0 2
38019: PUSH
38020: LD_INT 1
38022: LESS
38023: IFFALSE 38027
// exit ;
38025: GO 38330
// if pos = 1 then
38027: LD_VAR 0 2
38031: PUSH
38032: LD_INT 1
38034: EQUAL
38035: IFFALSE 38068
// result := Replace ( arr , pos [ 1 ] , value ) else
38037: LD_ADDR_VAR 0 4
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: LD_VAR 0 3
38060: PPUSH
38061: CALL_OW 1
38065: ST_TO_ADDR
38066: GO 38330
// begin tmp := arr ;
38068: LD_ADDR_VAR 0 6
38072: PUSH
38073: LD_VAR 0 1
38077: ST_TO_ADDR
// s_arr := [ tmp ] ;
38078: LD_ADDR_VAR 0 7
38082: PUSH
38083: LD_VAR 0 6
38087: PUSH
38088: EMPTY
38089: LIST
38090: ST_TO_ADDR
// for i = 1 to pos - 1 do
38091: LD_ADDR_VAR 0 5
38095: PUSH
38096: DOUBLE
38097: LD_INT 1
38099: DEC
38100: ST_TO_ADDR
38101: LD_VAR 0 2
38105: PUSH
38106: LD_INT 1
38108: MINUS
38109: PUSH
38110: FOR_TO
38111: IFFALSE 38156
// begin tmp := tmp [ pos [ i ] ] ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_VAR 0 6
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 5
38132: ARRAY
38133: ARRAY
38134: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38135: LD_ADDR_VAR 0 7
38139: PUSH
38140: LD_VAR 0 7
38144: PUSH
38145: LD_VAR 0 6
38149: PUSH
38150: EMPTY
38151: LIST
38152: ADD
38153: ST_TO_ADDR
// end ;
38154: GO 38110
38156: POP
38157: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38158: LD_ADDR_VAR 0 6
38162: PUSH
38163: LD_VAR 0 6
38167: PPUSH
38168: LD_VAR 0 2
38172: PUSH
38173: LD_VAR 0 2
38177: ARRAY
38178: PPUSH
38179: LD_VAR 0 3
38183: PPUSH
38184: CALL_OW 1
38188: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38189: LD_ADDR_VAR 0 7
38193: PUSH
38194: LD_VAR 0 7
38198: PPUSH
38199: LD_VAR 0 7
38203: PPUSH
38204: LD_VAR 0 6
38208: PPUSH
38209: CALL_OW 1
38213: ST_TO_ADDR
// for i = s_arr downto 2 do
38214: LD_ADDR_VAR 0 5
38218: PUSH
38219: DOUBLE
38220: LD_VAR 0 7
38224: INC
38225: ST_TO_ADDR
38226: LD_INT 2
38228: PUSH
38229: FOR_DOWNTO
38230: IFFALSE 38314
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38232: LD_ADDR_VAR 0 6
38236: PUSH
38237: LD_VAR 0 7
38241: PUSH
38242: LD_VAR 0 5
38246: PUSH
38247: LD_INT 1
38249: MINUS
38250: ARRAY
38251: PPUSH
38252: LD_VAR 0 2
38256: PUSH
38257: LD_VAR 0 5
38261: PUSH
38262: LD_INT 1
38264: MINUS
38265: ARRAY
38266: PPUSH
38267: LD_VAR 0 7
38271: PUSH
38272: LD_VAR 0 5
38276: ARRAY
38277: PPUSH
38278: CALL_OW 1
38282: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38283: LD_ADDR_VAR 0 7
38287: PUSH
38288: LD_VAR 0 7
38292: PPUSH
38293: LD_VAR 0 5
38297: PUSH
38298: LD_INT 1
38300: MINUS
38301: PPUSH
38302: LD_VAR 0 6
38306: PPUSH
38307: CALL_OW 1
38311: ST_TO_ADDR
// end ;
38312: GO 38229
38314: POP
38315: POP
// result := s_arr [ 1 ] ;
38316: LD_ADDR_VAR 0 4
38320: PUSH
38321: LD_VAR 0 7
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: ST_TO_ADDR
// end ; end ;
38330: LD_VAR 0 4
38334: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38335: LD_INT 0
38337: PPUSH
38338: PPUSH
// if not list then
38339: LD_VAR 0 1
38343: NOT
38344: IFFALSE 38348
// exit ;
38346: GO 38439
// i := list [ pos1 ] ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_VAR 0 1
38357: PUSH
38358: LD_VAR 0 2
38362: ARRAY
38363: ST_TO_ADDR
// if not i then
38364: LD_VAR 0 5
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38439
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38373: LD_ADDR_VAR 0 1
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: LD_VAR 0 1
38392: PUSH
38393: LD_VAR 0 3
38397: ARRAY
38398: PPUSH
38399: CALL_OW 1
38403: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38404: LD_ADDR_VAR 0 1
38408: PUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 3
38418: PPUSH
38419: LD_VAR 0 5
38423: PPUSH
38424: CALL_OW 1
38428: ST_TO_ADDR
// result := list ;
38429: LD_ADDR_VAR 0 4
38433: PUSH
38434: LD_VAR 0 1
38438: ST_TO_ADDR
// end ;
38439: LD_VAR 0 4
38443: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38444: LD_INT 0
38446: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38447: LD_ADDR_VAR 0 5
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 250
38461: PPUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 251
38471: PPUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_VAR 0 3
38481: PPUSH
38482: LD_VAR 0 4
38486: PPUSH
38487: CALL 38497 0 5
38491: ST_TO_ADDR
// end ;
38492: LD_VAR 0 5
38496: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
// if not list then
38503: LD_VAR 0 3
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38900
// result := [ ] ;
38512: LD_ADDR_VAR 0 6
38516: PUSH
38517: EMPTY
38518: ST_TO_ADDR
// for i in list do
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: LD_VAR 0 3
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38732
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38532: LD_ADDR_VAR 0 9
38536: PUSH
38537: LD_VAR 0 7
38541: PPUSH
38542: LD_VAR 0 1
38546: PPUSH
38547: LD_VAR 0 2
38551: PPUSH
38552: CALL_OW 297
38556: ST_TO_ADDR
// if not result then
38557: LD_VAR 0 6
38561: NOT
38562: IFFALSE 38588
// result := [ [ i , tmp ] ] else
38564: LD_ADDR_VAR 0 6
38568: PUSH
38569: LD_VAR 0 7
38573: PUSH
38574: LD_VAR 0 9
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: ST_TO_ADDR
38586: GO 38730
// begin if result [ result ] [ 2 ] < tmp then
38588: LD_VAR 0 6
38592: PUSH
38593: LD_VAR 0 6
38597: ARRAY
38598: PUSH
38599: LD_INT 2
38601: ARRAY
38602: PUSH
38603: LD_VAR 0 9
38607: LESS
38608: IFFALSE 38650
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38610: LD_ADDR_VAR 0 6
38614: PUSH
38615: LD_VAR 0 6
38619: PPUSH
38620: LD_VAR 0 6
38624: PUSH
38625: LD_INT 1
38627: PLUS
38628: PPUSH
38629: LD_VAR 0 7
38633: PUSH
38634: LD_VAR 0 9
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PPUSH
38643: CALL_OW 2
38647: ST_TO_ADDR
38648: GO 38730
// for j = 1 to result do
38650: LD_ADDR_VAR 0 8
38654: PUSH
38655: DOUBLE
38656: LD_INT 1
38658: DEC
38659: ST_TO_ADDR
38660: LD_VAR 0 6
38664: PUSH
38665: FOR_TO
38666: IFFALSE 38728
// begin if tmp < result [ j ] [ 2 ] then
38668: LD_VAR 0 9
38672: PUSH
38673: LD_VAR 0 6
38677: PUSH
38678: LD_VAR 0 8
38682: ARRAY
38683: PUSH
38684: LD_INT 2
38686: ARRAY
38687: LESS
38688: IFFALSE 38726
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38690: LD_ADDR_VAR 0 6
38694: PUSH
38695: LD_VAR 0 6
38699: PPUSH
38700: LD_VAR 0 8
38704: PPUSH
38705: LD_VAR 0 7
38709: PUSH
38710: LD_VAR 0 9
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PPUSH
38719: CALL_OW 2
38723: ST_TO_ADDR
// break ;
38724: GO 38728
// end ; end ;
38726: GO 38665
38728: POP
38729: POP
// end ; end ;
38730: GO 38529
38732: POP
38733: POP
// if result and not asc then
38734: LD_VAR 0 6
38738: PUSH
38739: LD_VAR 0 4
38743: NOT
38744: AND
38745: IFFALSE 38820
// begin tmp := result ;
38747: LD_ADDR_VAR 0 9
38751: PUSH
38752: LD_VAR 0 6
38756: ST_TO_ADDR
// for i = tmp downto 1 do
38757: LD_ADDR_VAR 0 7
38761: PUSH
38762: DOUBLE
38763: LD_VAR 0 9
38767: INC
38768: ST_TO_ADDR
38769: LD_INT 1
38771: PUSH
38772: FOR_DOWNTO
38773: IFFALSE 38818
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38775: LD_ADDR_VAR 0 6
38779: PUSH
38780: LD_VAR 0 6
38784: PPUSH
38785: LD_VAR 0 9
38789: PUSH
38790: LD_VAR 0 7
38794: MINUS
38795: PUSH
38796: LD_INT 1
38798: PLUS
38799: PPUSH
38800: LD_VAR 0 9
38804: PUSH
38805: LD_VAR 0 7
38809: ARRAY
38810: PPUSH
38811: CALL_OW 1
38815: ST_TO_ADDR
38816: GO 38772
38818: POP
38819: POP
// end ; tmp := [ ] ;
38820: LD_ADDR_VAR 0 9
38824: PUSH
38825: EMPTY
38826: ST_TO_ADDR
// if mode then
38827: LD_VAR 0 5
38831: IFFALSE 38900
// begin for i = 1 to result do
38833: LD_ADDR_VAR 0 7
38837: PUSH
38838: DOUBLE
38839: LD_INT 1
38841: DEC
38842: ST_TO_ADDR
38843: LD_VAR 0 6
38847: PUSH
38848: FOR_TO
38849: IFFALSE 38888
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38851: LD_ADDR_VAR 0 9
38855: PUSH
38856: LD_VAR 0 9
38860: PPUSH
38861: LD_VAR 0 7
38865: PPUSH
38866: LD_VAR 0 6
38870: PUSH
38871: LD_VAR 0 7
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: CALL_OW 1
38885: ST_TO_ADDR
38886: GO 38848
38888: POP
38889: POP
// result := tmp ;
38890: LD_ADDR_VAR 0 6
38894: PUSH
38895: LD_VAR 0 9
38899: ST_TO_ADDR
// end ; end ;
38900: LD_VAR 0 6
38904: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38905: LD_INT 0
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38913: LD_ADDR_VAR 0 5
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: ST_TO_ADDR
// if not x or not y then
38935: LD_VAR 0 2
38939: NOT
38940: PUSH
38941: LD_VAR 0 3
38945: NOT
38946: OR
38947: IFFALSE 38951
// exit ;
38949: GO 40601
// if not range then
38951: LD_VAR 0 4
38955: NOT
38956: IFFALSE 38966
// range := 10 ;
38958: LD_ADDR_VAR 0 4
38962: PUSH
38963: LD_INT 10
38965: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38966: LD_ADDR_VAR 0 8
38970: PUSH
38971: LD_INT 81
38973: PUSH
38974: LD_VAR 0 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 92
38985: PUSH
38986: LD_VAR 0 2
38990: PUSH
38991: LD_VAR 0 3
38995: PUSH
38996: LD_VAR 0 4
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 21
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: PPUSH
39029: CALL_OW 69
39033: ST_TO_ADDR
// if not tmp then
39034: LD_VAR 0 8
39038: NOT
39039: IFFALSE 39043
// exit ;
39041: GO 40601
// for i in tmp do
39043: LD_ADDR_VAR 0 6
39047: PUSH
39048: LD_VAR 0 8
39052: PUSH
39053: FOR_IN
39054: IFFALSE 40576
// begin points := [ 0 , 0 , 0 ] ;
39056: LD_ADDR_VAR 0 9
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// bpoints := 1 ;
39075: LD_ADDR_VAR 0 10
39079: PUSH
39080: LD_INT 1
39082: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39083: LD_VAR 0 6
39087: PPUSH
39088: CALL_OW 247
39092: PUSH
39093: LD_INT 1
39095: DOUBLE
39096: EQUAL
39097: IFTRUE 39101
39099: GO 39679
39101: POP
// begin if GetClass ( i ) = 1 then
39102: LD_VAR 0 6
39106: PPUSH
39107: CALL_OW 257
39111: PUSH
39112: LD_INT 1
39114: EQUAL
39115: IFFALSE 39136
// points := [ 10 , 5 , 3 ] ;
39117: LD_ADDR_VAR 0 9
39121: PUSH
39122: LD_INT 10
39124: PUSH
39125: LD_INT 5
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39136: LD_VAR 0 6
39140: PPUSH
39141: CALL_OW 257
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: LD_INT 4
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: IN
39160: IFFALSE 39181
// points := [ 3 , 2 , 1 ] ;
39162: LD_ADDR_VAR 0 9
39166: PUSH
39167: LD_INT 3
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39181: LD_VAR 0 6
39185: PPUSH
39186: CALL_OW 257
39190: PUSH
39191: LD_INT 5
39193: EQUAL
39194: IFFALSE 39215
// points := [ 130 , 5 , 2 ] ;
39196: LD_ADDR_VAR 0 9
39200: PUSH
39201: LD_INT 130
39203: PUSH
39204: LD_INT 5
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39215: LD_VAR 0 6
39219: PPUSH
39220: CALL_OW 257
39224: PUSH
39225: LD_INT 8
39227: EQUAL
39228: IFFALSE 39249
// points := [ 35 , 35 , 30 ] ;
39230: LD_ADDR_VAR 0 9
39234: PUSH
39235: LD_INT 35
39237: PUSH
39238: LD_INT 35
39240: PUSH
39241: LD_INT 30
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39249: LD_VAR 0 6
39253: PPUSH
39254: CALL_OW 257
39258: PUSH
39259: LD_INT 9
39261: EQUAL
39262: IFFALSE 39283
// points := [ 20 , 55 , 40 ] ;
39264: LD_ADDR_VAR 0 9
39268: PUSH
39269: LD_INT 20
39271: PUSH
39272: LD_INT 55
39274: PUSH
39275: LD_INT 40
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39283: LD_VAR 0 6
39287: PPUSH
39288: CALL_OW 257
39292: PUSH
39293: LD_INT 12
39295: PUSH
39296: LD_INT 16
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: IN
39303: IFFALSE 39324
// points := [ 5 , 3 , 2 ] ;
39305: LD_ADDR_VAR 0 9
39309: PUSH
39310: LD_INT 5
39312: PUSH
39313: LD_INT 3
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39324: LD_VAR 0 6
39328: PPUSH
39329: CALL_OW 257
39333: PUSH
39334: LD_INT 17
39336: EQUAL
39337: IFFALSE 39358
// points := [ 100 , 50 , 75 ] ;
39339: LD_ADDR_VAR 0 9
39343: PUSH
39344: LD_INT 100
39346: PUSH
39347: LD_INT 50
39349: PUSH
39350: LD_INT 75
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39358: LD_VAR 0 6
39362: PPUSH
39363: CALL_OW 257
39367: PUSH
39368: LD_INT 15
39370: EQUAL
39371: IFFALSE 39392
// points := [ 10 , 5 , 3 ] ;
39373: LD_ADDR_VAR 0 9
39377: PUSH
39378: LD_INT 10
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: LD_INT 3
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39392: LD_VAR 0 6
39396: PPUSH
39397: CALL_OW 257
39401: PUSH
39402: LD_INT 14
39404: EQUAL
39405: IFFALSE 39426
// points := [ 10 , 0 , 0 ] ;
39407: LD_ADDR_VAR 0 9
39411: PUSH
39412: LD_INT 10
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39426: LD_VAR 0 6
39430: PPUSH
39431: CALL_OW 257
39435: PUSH
39436: LD_INT 11
39438: EQUAL
39439: IFFALSE 39460
// points := [ 30 , 10 , 5 ] ;
39441: LD_ADDR_VAR 0 9
39445: PUSH
39446: LD_INT 30
39448: PUSH
39449: LD_INT 10
39451: PUSH
39452: LD_INT 5
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_INT 5
39467: PPUSH
39468: CALL_OW 321
39472: PUSH
39473: LD_INT 2
39475: EQUAL
39476: IFFALSE 39493
// bpoints := bpoints * 1.8 ;
39478: LD_ADDR_VAR 0 10
39482: PUSH
39483: LD_VAR 0 10
39487: PUSH
39488: LD_REAL  1.80000000000000E+0000
39491: MUL
39492: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39493: LD_VAR 0 6
39497: PPUSH
39498: CALL_OW 257
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: IN
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: LD_INT 51
39529: PPUSH
39530: CALL_OW 321
39534: PUSH
39535: LD_INT 2
39537: EQUAL
39538: AND
39539: IFFALSE 39556
// bpoints := bpoints * 1.2 ;
39541: LD_ADDR_VAR 0 10
39545: PUSH
39546: LD_VAR 0 10
39550: PUSH
39551: LD_REAL  1.20000000000000E+0000
39554: MUL
39555: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39556: LD_VAR 0 6
39560: PPUSH
39561: CALL_OW 257
39565: PUSH
39566: LD_INT 5
39568: PUSH
39569: LD_INT 7
39571: PUSH
39572: LD_INT 9
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: IN
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_INT 52
39588: PPUSH
39589: CALL_OW 321
39593: PUSH
39594: LD_INT 2
39596: EQUAL
39597: AND
39598: IFFALSE 39615
// bpoints := bpoints * 1.5 ;
39600: LD_ADDR_VAR 0 10
39604: PUSH
39605: LD_VAR 0 10
39609: PUSH
39610: LD_REAL  1.50000000000000E+0000
39613: MUL
39614: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39615: LD_VAR 0 1
39619: PPUSH
39620: LD_INT 66
39622: PPUSH
39623: CALL_OW 321
39627: PUSH
39628: LD_INT 2
39630: EQUAL
39631: IFFALSE 39648
// bpoints := bpoints * 1.1 ;
39633: LD_ADDR_VAR 0 10
39637: PUSH
39638: LD_VAR 0 10
39642: PUSH
39643: LD_REAL  1.10000000000000E+0000
39646: MUL
39647: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39648: LD_ADDR_VAR 0 10
39652: PUSH
39653: LD_VAR 0 10
39657: PUSH
39658: LD_VAR 0 6
39662: PPUSH
39663: LD_INT 1
39665: PPUSH
39666: CALL_OW 259
39670: PUSH
39671: LD_REAL  1.15000000000000E+0000
39674: MUL
39675: MUL
39676: ST_TO_ADDR
// end ; unit_vehicle :
39677: GO 40505
39679: LD_INT 2
39681: DOUBLE
39682: EQUAL
39683: IFTRUE 39687
39685: GO 40493
39687: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39688: LD_VAR 0 6
39692: PPUSH
39693: CALL_OW 264
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 42
39703: PUSH
39704: LD_INT 24
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: IN
39712: IFFALSE 39733
// points := [ 25 , 5 , 3 ] ;
39714: LD_ADDR_VAR 0 9
39718: PUSH
39719: LD_INT 25
39721: PUSH
39722: LD_INT 5
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39733: LD_VAR 0 6
39737: PPUSH
39738: CALL_OW 264
39742: PUSH
39743: LD_INT 4
39745: PUSH
39746: LD_INT 43
39748: PUSH
39749: LD_INT 25
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: IN
39757: IFFALSE 39778
// points := [ 40 , 15 , 5 ] ;
39759: LD_ADDR_VAR 0 9
39763: PUSH
39764: LD_INT 40
39766: PUSH
39767: LD_INT 15
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39778: LD_VAR 0 6
39782: PPUSH
39783: CALL_OW 264
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: LD_INT 23
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: IN
39798: IFFALSE 39819
// points := [ 7 , 25 , 8 ] ;
39800: LD_ADDR_VAR 0 9
39804: PUSH
39805: LD_INT 7
39807: PUSH
39808: LD_INT 25
39810: PUSH
39811: LD_INT 8
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39819: LD_VAR 0 6
39823: PPUSH
39824: CALL_OW 264
39828: PUSH
39829: LD_INT 5
39831: PUSH
39832: LD_INT 27
39834: PUSH
39835: LD_INT 44
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: IN
39843: IFFALSE 39864
// points := [ 14 , 50 , 16 ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: LD_INT 14
39852: PUSH
39853: LD_INT 50
39855: PUSH
39856: LD_INT 16
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39864: LD_VAR 0 6
39868: PPUSH
39869: CALL_OW 264
39873: PUSH
39874: LD_INT 6
39876: PUSH
39877: LD_INT 46
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: IN
39884: IFFALSE 39905
// points := [ 32 , 120 , 70 ] ;
39886: LD_ADDR_VAR 0 9
39890: PUSH
39891: LD_INT 32
39893: PUSH
39894: LD_INT 120
39896: PUSH
39897: LD_INT 70
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39905: LD_VAR 0 6
39909: PPUSH
39910: CALL_OW 264
39914: PUSH
39915: LD_INT 7
39917: PUSH
39918: LD_INT 28
39920: PUSH
39921: LD_INT 45
39923: PUSH
39924: LD_INT 92
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: IN
39933: IFFALSE 39954
// points := [ 35 , 20 , 45 ] ;
39935: LD_ADDR_VAR 0 9
39939: PUSH
39940: LD_INT 35
39942: PUSH
39943: LD_INT 20
39945: PUSH
39946: LD_INT 45
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39954: LD_VAR 0 6
39958: PPUSH
39959: CALL_OW 264
39963: PUSH
39964: LD_INT 47
39966: PUSH
39967: EMPTY
39968: LIST
39969: IN
39970: IFFALSE 39991
// points := [ 67 , 45 , 75 ] ;
39972: LD_ADDR_VAR 0 9
39976: PUSH
39977: LD_INT 67
39979: PUSH
39980: LD_INT 45
39982: PUSH
39983: LD_INT 75
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39991: LD_VAR 0 6
39995: PPUSH
39996: CALL_OW 264
40000: PUSH
40001: LD_INT 26
40003: PUSH
40004: EMPTY
40005: LIST
40006: IN
40007: IFFALSE 40028
// points := [ 120 , 30 , 80 ] ;
40009: LD_ADDR_VAR 0 9
40013: PUSH
40014: LD_INT 120
40016: PUSH
40017: LD_INT 30
40019: PUSH
40020: LD_INT 80
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40028: LD_VAR 0 6
40032: PPUSH
40033: CALL_OW 264
40037: PUSH
40038: LD_INT 22
40040: PUSH
40041: EMPTY
40042: LIST
40043: IN
40044: IFFALSE 40065
// points := [ 40 , 1 , 1 ] ;
40046: LD_ADDR_VAR 0 9
40050: PUSH
40051: LD_INT 40
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40065: LD_VAR 0 6
40069: PPUSH
40070: CALL_OW 264
40074: PUSH
40075: LD_INT 29
40077: PUSH
40078: EMPTY
40079: LIST
40080: IN
40081: IFFALSE 40102
// points := [ 70 , 200 , 400 ] ;
40083: LD_ADDR_VAR 0 9
40087: PUSH
40088: LD_INT 70
40090: PUSH
40091: LD_INT 200
40093: PUSH
40094: LD_INT 400
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40102: LD_VAR 0 6
40106: PPUSH
40107: CALL_OW 264
40111: PUSH
40112: LD_INT 14
40114: PUSH
40115: LD_INT 53
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: IN
40122: IFFALSE 40143
// points := [ 40 , 10 , 20 ] ;
40124: LD_ADDR_VAR 0 9
40128: PUSH
40129: LD_INT 40
40131: PUSH
40132: LD_INT 10
40134: PUSH
40135: LD_INT 20
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40143: LD_VAR 0 6
40147: PPUSH
40148: CALL_OW 264
40152: PUSH
40153: LD_INT 9
40155: PUSH
40156: EMPTY
40157: LIST
40158: IN
40159: IFFALSE 40180
// points := [ 5 , 70 , 20 ] ;
40161: LD_ADDR_VAR 0 9
40165: PUSH
40166: LD_INT 5
40168: PUSH
40169: LD_INT 70
40171: PUSH
40172: LD_INT 20
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40180: LD_VAR 0 6
40184: PPUSH
40185: CALL_OW 264
40189: PUSH
40190: LD_INT 10
40192: PUSH
40193: EMPTY
40194: LIST
40195: IN
40196: IFFALSE 40217
// points := [ 35 , 110 , 70 ] ;
40198: LD_ADDR_VAR 0 9
40202: PUSH
40203: LD_INT 35
40205: PUSH
40206: LD_INT 110
40208: PUSH
40209: LD_INT 70
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40217: LD_VAR 0 6
40221: PPUSH
40222: CALL_OW 265
40226: PUSH
40227: LD_INT 25
40229: EQUAL
40230: IFFALSE 40251
// points := [ 80 , 65 , 100 ] ;
40232: LD_ADDR_VAR 0 9
40236: PUSH
40237: LD_INT 80
40239: PUSH
40240: LD_INT 65
40242: PUSH
40243: LD_INT 100
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40251: LD_VAR 0 6
40255: PPUSH
40256: CALL_OW 263
40260: PUSH
40261: LD_INT 1
40263: EQUAL
40264: IFFALSE 40299
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40266: LD_ADDR_VAR 0 10
40270: PUSH
40271: LD_VAR 0 10
40275: PUSH
40276: LD_VAR 0 6
40280: PPUSH
40281: CALL_OW 311
40285: PPUSH
40286: LD_INT 3
40288: PPUSH
40289: CALL_OW 259
40293: PUSH
40294: LD_INT 4
40296: MUL
40297: MUL
40298: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40299: LD_VAR 0 6
40303: PPUSH
40304: CALL_OW 263
40308: PUSH
40309: LD_INT 2
40311: EQUAL
40312: IFFALSE 40363
// begin j := IsControledBy ( i ) ;
40314: LD_ADDR_VAR 0 7
40318: PUSH
40319: LD_VAR 0 6
40323: PPUSH
40324: CALL_OW 312
40328: ST_TO_ADDR
// if j then
40329: LD_VAR 0 7
40333: IFFALSE 40363
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40335: LD_ADDR_VAR 0 10
40339: PUSH
40340: LD_VAR 0 10
40344: PUSH
40345: LD_VAR 0 7
40349: PPUSH
40350: LD_INT 3
40352: PPUSH
40353: CALL_OW 259
40357: PUSH
40358: LD_INT 3
40360: MUL
40361: MUL
40362: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40363: LD_VAR 0 6
40367: PPUSH
40368: CALL_OW 264
40372: PUSH
40373: LD_INT 5
40375: PUSH
40376: LD_INT 6
40378: PUSH
40379: LD_INT 46
40381: PUSH
40382: LD_INT 44
40384: PUSH
40385: LD_INT 47
40387: PUSH
40388: LD_INT 45
40390: PUSH
40391: LD_INT 28
40393: PUSH
40394: LD_INT 7
40396: PUSH
40397: LD_INT 27
40399: PUSH
40400: LD_INT 29
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: IN
40415: PUSH
40416: LD_VAR 0 1
40420: PPUSH
40421: LD_INT 52
40423: PPUSH
40424: CALL_OW 321
40428: PUSH
40429: LD_INT 2
40431: EQUAL
40432: AND
40433: IFFALSE 40450
// bpoints := bpoints * 1.2 ;
40435: LD_ADDR_VAR 0 10
40439: PUSH
40440: LD_VAR 0 10
40444: PUSH
40445: LD_REAL  1.20000000000000E+0000
40448: MUL
40449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40450: LD_VAR 0 6
40454: PPUSH
40455: CALL_OW 264
40459: PUSH
40460: LD_INT 6
40462: PUSH
40463: LD_INT 46
40465: PUSH
40466: LD_INT 47
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: IN
40474: IFFALSE 40491
// bpoints := bpoints * 1.2 ;
40476: LD_ADDR_VAR 0 10
40480: PUSH
40481: LD_VAR 0 10
40485: PUSH
40486: LD_REAL  1.20000000000000E+0000
40489: MUL
40490: ST_TO_ADDR
// end ; unit_building :
40491: GO 40505
40493: LD_INT 3
40495: DOUBLE
40496: EQUAL
40497: IFTRUE 40501
40499: GO 40504
40501: POP
// ; end ;
40502: GO 40505
40504: POP
// for j = 1 to 3 do
40505: LD_ADDR_VAR 0 7
40509: PUSH
40510: DOUBLE
40511: LD_INT 1
40513: DEC
40514: ST_TO_ADDR
40515: LD_INT 3
40517: PUSH
40518: FOR_TO
40519: IFFALSE 40572
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40521: LD_ADDR_VAR 0 5
40525: PUSH
40526: LD_VAR 0 5
40530: PPUSH
40531: LD_VAR 0 7
40535: PPUSH
40536: LD_VAR 0 5
40540: PUSH
40541: LD_VAR 0 7
40545: ARRAY
40546: PUSH
40547: LD_VAR 0 9
40551: PUSH
40552: LD_VAR 0 7
40556: ARRAY
40557: PUSH
40558: LD_VAR 0 10
40562: MUL
40563: PLUS
40564: PPUSH
40565: CALL_OW 1
40569: ST_TO_ADDR
40570: GO 40518
40572: POP
40573: POP
// end ;
40574: GO 39053
40576: POP
40577: POP
// result := Replace ( result , 4 , tmp ) ;
40578: LD_ADDR_VAR 0 5
40582: PUSH
40583: LD_VAR 0 5
40587: PPUSH
40588: LD_INT 4
40590: PPUSH
40591: LD_VAR 0 8
40595: PPUSH
40596: CALL_OW 1
40600: ST_TO_ADDR
// end ;
40601: LD_VAR 0 5
40605: RET
// export function DangerAtRange ( unit , range ) ; begin
40606: LD_INT 0
40608: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 255
40623: PPUSH
40624: LD_VAR 0 1
40628: PPUSH
40629: CALL_OW 250
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 251
40643: PPUSH
40644: LD_VAR 0 2
40648: PPUSH
40649: CALL 38905 0 4
40653: ST_TO_ADDR
// end ;
40654: LD_VAR 0 3
40658: RET
// export function DangerInArea ( side , area ) ; begin
40659: LD_INT 0
40661: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_VAR 0 2
40671: PPUSH
40672: LD_INT 81
40674: PUSH
40675: LD_VAR 0 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PPUSH
40684: CALL_OW 70
40688: ST_TO_ADDR
// end ;
40689: LD_VAR 0 3
40693: RET
// export function IsExtension ( b ) ; begin
40694: LD_INT 0
40696: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40697: LD_ADDR_VAR 0 2
40701: PUSH
40702: LD_VAR 0 1
40706: PUSH
40707: LD_INT 23
40709: PUSH
40710: LD_INT 20
40712: PUSH
40713: LD_INT 22
40715: PUSH
40716: LD_INT 17
40718: PUSH
40719: LD_INT 24
40721: PUSH
40722: LD_INT 21
40724: PUSH
40725: LD_INT 19
40727: PUSH
40728: LD_INT 16
40730: PUSH
40731: LD_INT 25
40733: PUSH
40734: LD_INT 18
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: IN
40749: ST_TO_ADDR
// end ;
40750: LD_VAR 0 2
40754: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40755: LD_INT 0
40757: PPUSH
40758: PPUSH
40759: PPUSH
// result := [ ] ;
40760: LD_ADDR_VAR 0 4
40764: PUSH
40765: EMPTY
40766: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40767: LD_ADDR_VAR 0 5
40771: PUSH
40772: LD_VAR 0 2
40776: PPUSH
40777: LD_INT 21
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 70
40791: ST_TO_ADDR
// if not tmp then
40792: LD_VAR 0 5
40796: NOT
40797: IFFALSE 40801
// exit ;
40799: GO 40865
// if checkLink then
40801: LD_VAR 0 3
40805: IFFALSE 40855
// begin for i in tmp do
40807: LD_ADDR_VAR 0 6
40811: PUSH
40812: LD_VAR 0 5
40816: PUSH
40817: FOR_IN
40818: IFFALSE 40853
// if GetBase ( i ) <> base then
40820: LD_VAR 0 6
40824: PPUSH
40825: CALL_OW 274
40829: PUSH
40830: LD_VAR 0 1
40834: NONEQUAL
40835: IFFALSE 40851
// ComLinkToBase ( base , i ) ;
40837: LD_VAR 0 1
40841: PPUSH
40842: LD_VAR 0 6
40846: PPUSH
40847: CALL_OW 169
40851: GO 40817
40853: POP
40854: POP
// end ; result := tmp ;
40855: LD_ADDR_VAR 0 4
40859: PUSH
40860: LD_VAR 0 5
40864: ST_TO_ADDR
// end ;
40865: LD_VAR 0 4
40869: RET
// export function ComComplete ( units , b ) ; var i ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
// if not units then
40874: LD_VAR 0 1
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 40973
// for i in units do
40883: LD_ADDR_VAR 0 4
40887: PUSH
40888: LD_VAR 0 1
40892: PUSH
40893: FOR_IN
40894: IFFALSE 40971
// if BuildingStatus ( b ) = bs_build then
40896: LD_VAR 0 2
40900: PPUSH
40901: CALL_OW 461
40905: PUSH
40906: LD_INT 1
40908: EQUAL
40909: IFFALSE 40969
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40911: LD_VAR 0 4
40915: PPUSH
40916: LD_STRING h
40918: PUSH
40919: LD_VAR 0 2
40923: PPUSH
40924: CALL_OW 250
40928: PUSH
40929: LD_VAR 0 2
40933: PPUSH
40934: CALL_OW 251
40938: PUSH
40939: LD_VAR 0 2
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: PPUSH
40965: CALL_OW 446
40969: GO 40893
40971: POP
40972: POP
// end ;
40973: LD_VAR 0 3
40977: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40978: LD_INT 0
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40986: LD_VAR 0 1
40990: NOT
40991: PUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL_OW 263
41001: PUSH
41002: LD_INT 2
41004: NONEQUAL
41005: OR
41006: IFFALSE 41010
// exit ;
41008: GO 41326
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41010: LD_ADDR_VAR 0 6
41014: PUSH
41015: LD_INT 22
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 255
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 30
41037: PUSH
41038: LD_INT 36
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 34
41047: PUSH
41048: LD_INT 31
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PPUSH
41064: CALL_OW 69
41068: ST_TO_ADDR
// if not tmp then
41069: LD_VAR 0 6
41073: NOT
41074: IFFALSE 41078
// exit ;
41076: GO 41326
// result := [ ] ;
41078: LD_ADDR_VAR 0 2
41082: PUSH
41083: EMPTY
41084: ST_TO_ADDR
// for i in tmp do
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_VAR 0 6
41094: PUSH
41095: FOR_IN
41096: IFFALSE 41167
// begin t := UnitsInside ( i ) ;
41098: LD_ADDR_VAR 0 4
41102: PUSH
41103: LD_VAR 0 3
41107: PPUSH
41108: CALL_OW 313
41112: ST_TO_ADDR
// if t then
41113: LD_VAR 0 4
41117: IFFALSE 41165
// for j in t do
41119: LD_ADDR_VAR 0 7
41123: PUSH
41124: LD_VAR 0 4
41128: PUSH
41129: FOR_IN
41130: IFFALSE 41163
// result := Replace ( result , result + 1 , j ) ;
41132: LD_ADDR_VAR 0 2
41136: PUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: LD_VAR 0 2
41146: PUSH
41147: LD_INT 1
41149: PLUS
41150: PPUSH
41151: LD_VAR 0 7
41155: PPUSH
41156: CALL_OW 1
41160: ST_TO_ADDR
41161: GO 41129
41163: POP
41164: POP
// end ;
41165: GO 41095
41167: POP
41168: POP
// if not result then
41169: LD_VAR 0 2
41173: NOT
41174: IFFALSE 41178
// exit ;
41176: GO 41326
// mech := result [ 1 ] ;
41178: LD_ADDR_VAR 0 5
41182: PUSH
41183: LD_VAR 0 2
41187: PUSH
41188: LD_INT 1
41190: ARRAY
41191: ST_TO_ADDR
// if result > 1 then
41192: LD_VAR 0 2
41196: PUSH
41197: LD_INT 1
41199: GREATER
41200: IFFALSE 41312
// begin for i = 2 to result do
41202: LD_ADDR_VAR 0 3
41206: PUSH
41207: DOUBLE
41208: LD_INT 2
41210: DEC
41211: ST_TO_ADDR
41212: LD_VAR 0 2
41216: PUSH
41217: FOR_TO
41218: IFFALSE 41310
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_VAR 0 2
41229: PUSH
41230: LD_VAR 0 3
41234: ARRAY
41235: PPUSH
41236: LD_INT 3
41238: PPUSH
41239: CALL_OW 259
41243: PUSH
41244: LD_VAR 0 2
41248: PUSH
41249: LD_VAR 0 3
41253: ARRAY
41254: PPUSH
41255: CALL_OW 432
41259: MINUS
41260: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41261: LD_VAR 0 4
41265: PUSH
41266: LD_VAR 0 5
41270: PPUSH
41271: LD_INT 3
41273: PPUSH
41274: CALL_OW 259
41278: PUSH
41279: LD_VAR 0 5
41283: PPUSH
41284: CALL_OW 432
41288: MINUS
41289: GREATEREQUAL
41290: IFFALSE 41308
// mech := result [ i ] ;
41292: LD_ADDR_VAR 0 5
41296: PUSH
41297: LD_VAR 0 2
41301: PUSH
41302: LD_VAR 0 3
41306: ARRAY
41307: ST_TO_ADDR
// end ;
41308: GO 41217
41310: POP
41311: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41312: LD_VAR 0 1
41316: PPUSH
41317: LD_VAR 0 5
41321: PPUSH
41322: CALL_OW 135
// end ;
41326: LD_VAR 0 2
41330: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41331: LD_INT 0
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
// result := [ ] ;
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: EMPTY
41352: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 266
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: IN
41373: NOT
41374: IFFALSE 41378
// exit ;
41376: GO 43012
// if name then
41378: LD_VAR 0 3
41382: IFFALSE 41398
// SetBName ( base_dep , name ) ;
41384: LD_VAR 0 1
41388: PPUSH
41389: LD_VAR 0 3
41393: PPUSH
41394: CALL_OW 500
// base := GetBase ( base_dep ) ;
41398: LD_ADDR_VAR 0 15
41402: PUSH
41403: LD_VAR 0 1
41407: PPUSH
41408: CALL_OW 274
41412: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41413: LD_ADDR_VAR 0 16
41417: PUSH
41418: LD_VAR 0 1
41422: PPUSH
41423: CALL_OW 255
41427: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41428: LD_ADDR_VAR 0 17
41432: PUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 248
41442: ST_TO_ADDR
// if sources then
41443: LD_VAR 0 5
41447: IFFALSE 41494
// for i = 1 to 3 do
41449: LD_ADDR_VAR 0 8
41453: PUSH
41454: DOUBLE
41455: LD_INT 1
41457: DEC
41458: ST_TO_ADDR
41459: LD_INT 3
41461: PUSH
41462: FOR_TO
41463: IFFALSE 41492
// AddResourceType ( base , i , sources [ i ] ) ;
41465: LD_VAR 0 15
41469: PPUSH
41470: LD_VAR 0 8
41474: PPUSH
41475: LD_VAR 0 5
41479: PUSH
41480: LD_VAR 0 8
41484: ARRAY
41485: PPUSH
41486: CALL_OW 276
41490: GO 41462
41492: POP
41493: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41494: LD_ADDR_VAR 0 18
41498: PUSH
41499: LD_VAR 0 15
41503: PPUSH
41504: LD_VAR 0 2
41508: PPUSH
41509: LD_INT 1
41511: PPUSH
41512: CALL 40755 0 3
41516: ST_TO_ADDR
// InitHc ;
41517: CALL_OW 19
// InitUc ;
41521: CALL_OW 18
// uc_side := side ;
41525: LD_ADDR_OWVAR 20
41529: PUSH
41530: LD_VAR 0 16
41534: ST_TO_ADDR
// uc_nation := nation ;
41535: LD_ADDR_OWVAR 21
41539: PUSH
41540: LD_VAR 0 17
41544: ST_TO_ADDR
// if buildings then
41545: LD_VAR 0 18
41549: IFFALSE 42871
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41551: LD_ADDR_VAR 0 19
41555: PUSH
41556: LD_VAR 0 18
41560: PPUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 30
41566: PUSH
41567: LD_INT 29
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 30
41576: PUSH
41577: LD_INT 30
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: PPUSH
41589: CALL_OW 72
41593: ST_TO_ADDR
// if tmp then
41594: LD_VAR 0 19
41598: IFFALSE 41646
// for i in tmp do
41600: LD_ADDR_VAR 0 8
41604: PUSH
41605: LD_VAR 0 19
41609: PUSH
41610: FOR_IN
41611: IFFALSE 41644
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41613: LD_VAR 0 8
41617: PPUSH
41618: CALL_OW 250
41622: PPUSH
41623: LD_VAR 0 8
41627: PPUSH
41628: CALL_OW 251
41632: PPUSH
41633: LD_VAR 0 16
41637: PPUSH
41638: CALL_OW 441
41642: GO 41610
41644: POP
41645: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41646: LD_VAR 0 18
41650: PPUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 30
41656: PUSH
41657: LD_INT 32
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 30
41666: PUSH
41667: LD_INT 33
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: PPUSH
41679: CALL_OW 72
41683: IFFALSE 41771
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41685: LD_ADDR_VAR 0 8
41689: PUSH
41690: LD_VAR 0 18
41694: PPUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 30
41700: PUSH
41701: LD_INT 32
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 30
41710: PUSH
41711: LD_INT 33
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: PPUSH
41723: CALL_OW 72
41727: PUSH
41728: FOR_IN
41729: IFFALSE 41769
// begin if not GetBWeapon ( i ) then
41731: LD_VAR 0 8
41735: PPUSH
41736: CALL_OW 269
41740: NOT
41741: IFFALSE 41767
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41743: LD_VAR 0 8
41747: PPUSH
41748: LD_VAR 0 8
41752: PPUSH
41753: LD_VAR 0 2
41757: PPUSH
41758: CALL 43017 0 2
41762: PPUSH
41763: CALL_OW 431
// end ;
41767: GO 41728
41769: POP
41770: POP
// end ; for i = 1 to personel do
41771: LD_ADDR_VAR 0 8
41775: PUSH
41776: DOUBLE
41777: LD_INT 1
41779: DEC
41780: ST_TO_ADDR
41781: LD_VAR 0 6
41785: PUSH
41786: FOR_TO
41787: IFFALSE 42851
// begin if i > 4 then
41789: LD_VAR 0 8
41793: PUSH
41794: LD_INT 4
41796: GREATER
41797: IFFALSE 41801
// break ;
41799: GO 42851
// case i of 1 :
41801: LD_VAR 0 8
41805: PUSH
41806: LD_INT 1
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41814
41812: GO 41894
41814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41815: LD_ADDR_VAR 0 12
41819: PUSH
41820: LD_VAR 0 18
41824: PPUSH
41825: LD_INT 22
41827: PUSH
41828: LD_VAR 0 16
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 58
41839: PUSH
41840: EMPTY
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: LD_INT 30
41848: PUSH
41849: LD_INT 32
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 4
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 5
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: PPUSH
41887: CALL_OW 72
41891: ST_TO_ADDR
41892: GO 42116
41894: LD_INT 2
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41902
41900: GO 41964
41902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41903: LD_ADDR_VAR 0 12
41907: PUSH
41908: LD_VAR 0 18
41912: PPUSH
41913: LD_INT 22
41915: PUSH
41916: LD_VAR 0 16
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 30
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 30
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PPUSH
41957: CALL_OW 72
41961: ST_TO_ADDR
41962: GO 42116
41964: LD_INT 3
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 42034
41972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41973: LD_ADDR_VAR 0 12
41977: PUSH
41978: LD_VAR 0 18
41982: PPUSH
41983: LD_INT 22
41985: PUSH
41986: LD_VAR 0 16
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: LD_INT 2
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: LD_INT 3
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PPUSH
42027: CALL_OW 72
42031: ST_TO_ADDR
42032: GO 42116
42034: LD_INT 4
42036: DOUBLE
42037: EQUAL
42038: IFTRUE 42042
42040: GO 42115
42042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42043: LD_ADDR_VAR 0 12
42047: PUSH
42048: LD_VAR 0 18
42052: PPUSH
42053: LD_INT 22
42055: PUSH
42056: LD_VAR 0 16
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 30
42070: PUSH
42071: LD_INT 6
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 30
42080: PUSH
42081: LD_INT 7
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 30
42090: PUSH
42091: LD_INT 8
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PPUSH
42108: CALL_OW 72
42112: ST_TO_ADDR
42113: GO 42116
42115: POP
// if i = 1 then
42116: LD_VAR 0 8
42120: PUSH
42121: LD_INT 1
42123: EQUAL
42124: IFFALSE 42235
// begin tmp := [ ] ;
42126: LD_ADDR_VAR 0 19
42130: PUSH
42131: EMPTY
42132: ST_TO_ADDR
// for j in f do
42133: LD_ADDR_VAR 0 9
42137: PUSH
42138: LD_VAR 0 12
42142: PUSH
42143: FOR_IN
42144: IFFALSE 42217
// if GetBType ( j ) = b_bunker then
42146: LD_VAR 0 9
42150: PPUSH
42151: CALL_OW 266
42155: PUSH
42156: LD_INT 32
42158: EQUAL
42159: IFFALSE 42186
// tmp := Insert ( tmp , 1 , j ) else
42161: LD_ADDR_VAR 0 19
42165: PUSH
42166: LD_VAR 0 19
42170: PPUSH
42171: LD_INT 1
42173: PPUSH
42174: LD_VAR 0 9
42178: PPUSH
42179: CALL_OW 2
42183: ST_TO_ADDR
42184: GO 42215
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42186: LD_ADDR_VAR 0 19
42190: PUSH
42191: LD_VAR 0 19
42195: PPUSH
42196: LD_VAR 0 19
42200: PUSH
42201: LD_INT 1
42203: PLUS
42204: PPUSH
42205: LD_VAR 0 9
42209: PPUSH
42210: CALL_OW 2
42214: ST_TO_ADDR
42215: GO 42143
42217: POP
42218: POP
// if tmp then
42219: LD_VAR 0 19
42223: IFFALSE 42235
// f := tmp ;
42225: LD_ADDR_VAR 0 12
42229: PUSH
42230: LD_VAR 0 19
42234: ST_TO_ADDR
// end ; x := personel [ i ] ;
42235: LD_ADDR_VAR 0 13
42239: PUSH
42240: LD_VAR 0 6
42244: PUSH
42245: LD_VAR 0 8
42249: ARRAY
42250: ST_TO_ADDR
// if x = - 1 then
42251: LD_VAR 0 13
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: EQUAL
42260: IFFALSE 42469
// begin for j in f do
42262: LD_ADDR_VAR 0 9
42266: PUSH
42267: LD_VAR 0 12
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42465
// repeat InitHc ;
42275: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42279: LD_VAR 0 9
42283: PPUSH
42284: CALL_OW 266
42288: PUSH
42289: LD_INT 5
42291: EQUAL
42292: IFFALSE 42362
// begin if UnitsInside ( j ) < 3 then
42294: LD_VAR 0 9
42298: PPUSH
42299: CALL_OW 313
42303: PUSH
42304: LD_INT 3
42306: LESS
42307: IFFALSE 42343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42309: LD_INT 0
42311: PPUSH
42312: LD_INT 5
42314: PUSH
42315: LD_INT 8
42317: PUSH
42318: LD_INT 9
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: PUSH
42326: LD_VAR 0 17
42330: ARRAY
42331: PPUSH
42332: LD_VAR 0 4
42336: PPUSH
42337: CALL_OW 380
42341: GO 42360
// PrepareHuman ( false , i , skill ) ;
42343: LD_INT 0
42345: PPUSH
42346: LD_VAR 0 8
42350: PPUSH
42351: LD_VAR 0 4
42355: PPUSH
42356: CALL_OW 380
// end else
42360: GO 42379
// PrepareHuman ( false , i , skill ) ;
42362: LD_INT 0
42364: PPUSH
42365: LD_VAR 0 8
42369: PPUSH
42370: LD_VAR 0 4
42374: PPUSH
42375: CALL_OW 380
// un := CreateHuman ;
42379: LD_ADDR_VAR 0 14
42383: PUSH
42384: CALL_OW 44
42388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42389: LD_ADDR_VAR 0 7
42393: PUSH
42394: LD_VAR 0 7
42398: PPUSH
42399: LD_INT 1
42401: PPUSH
42402: LD_VAR 0 14
42406: PPUSH
42407: CALL_OW 2
42411: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42412: LD_VAR 0 14
42416: PPUSH
42417: LD_VAR 0 9
42421: PPUSH
42422: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42426: LD_VAR 0 9
42430: PPUSH
42431: CALL_OW 313
42435: PUSH
42436: LD_INT 6
42438: EQUAL
42439: PUSH
42440: LD_VAR 0 9
42444: PPUSH
42445: CALL_OW 266
42449: PUSH
42450: LD_INT 32
42452: PUSH
42453: LD_INT 31
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: IN
42460: OR
42461: IFFALSE 42275
42463: GO 42272
42465: POP
42466: POP
// end else
42467: GO 42849
// for j = 1 to x do
42469: LD_ADDR_VAR 0 9
42473: PUSH
42474: DOUBLE
42475: LD_INT 1
42477: DEC
42478: ST_TO_ADDR
42479: LD_VAR 0 13
42483: PUSH
42484: FOR_TO
42485: IFFALSE 42847
// begin InitHc ;
42487: CALL_OW 19
// if not f then
42491: LD_VAR 0 12
42495: NOT
42496: IFFALSE 42585
// begin PrepareHuman ( false , i , skill ) ;
42498: LD_INT 0
42500: PPUSH
42501: LD_VAR 0 8
42505: PPUSH
42506: LD_VAR 0 4
42510: PPUSH
42511: CALL_OW 380
// un := CreateHuman ;
42515: LD_ADDR_VAR 0 14
42519: PUSH
42520: CALL_OW 44
42524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42525: LD_ADDR_VAR 0 7
42529: PUSH
42530: LD_VAR 0 7
42534: PPUSH
42535: LD_INT 1
42537: PPUSH
42538: LD_VAR 0 14
42542: PPUSH
42543: CALL_OW 2
42547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42548: LD_VAR 0 14
42552: PPUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 250
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 251
42572: PPUSH
42573: LD_INT 10
42575: PPUSH
42576: LD_INT 0
42578: PPUSH
42579: CALL_OW 50
// continue ;
42583: GO 42484
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42585: LD_VAR 0 12
42589: PUSH
42590: LD_INT 1
42592: ARRAY
42593: PPUSH
42594: CALL_OW 313
42598: PUSH
42599: LD_VAR 0 12
42603: PUSH
42604: LD_INT 1
42606: ARRAY
42607: PPUSH
42608: CALL_OW 266
42612: PUSH
42613: LD_INT 32
42615: PUSH
42616: LD_INT 31
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: IN
42623: AND
42624: PUSH
42625: LD_VAR 0 12
42629: PUSH
42630: LD_INT 1
42632: ARRAY
42633: PPUSH
42634: CALL_OW 313
42638: PUSH
42639: LD_INT 6
42641: EQUAL
42642: OR
42643: IFFALSE 42663
// f := Delete ( f , 1 ) ;
42645: LD_ADDR_VAR 0 12
42649: PUSH
42650: LD_VAR 0 12
42654: PPUSH
42655: LD_INT 1
42657: PPUSH
42658: CALL_OW 3
42662: ST_TO_ADDR
// if not f then
42663: LD_VAR 0 12
42667: NOT
42668: IFFALSE 42686
// begin x := x + 2 ;
42670: LD_ADDR_VAR 0 13
42674: PUSH
42675: LD_VAR 0 13
42679: PUSH
42680: LD_INT 2
42682: PLUS
42683: ST_TO_ADDR
// continue ;
42684: GO 42484
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42686: LD_VAR 0 12
42690: PUSH
42691: LD_INT 1
42693: ARRAY
42694: PPUSH
42695: CALL_OW 266
42699: PUSH
42700: LD_INT 5
42702: EQUAL
42703: IFFALSE 42777
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42705: LD_VAR 0 12
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PPUSH
42714: CALL_OW 313
42718: PUSH
42719: LD_INT 3
42721: LESS
42722: IFFALSE 42758
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42724: LD_INT 0
42726: PPUSH
42727: LD_INT 5
42729: PUSH
42730: LD_INT 8
42732: PUSH
42733: LD_INT 9
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: PUSH
42741: LD_VAR 0 17
42745: ARRAY
42746: PPUSH
42747: LD_VAR 0 4
42751: PPUSH
42752: CALL_OW 380
42756: GO 42775
// PrepareHuman ( false , i , skill ) ;
42758: LD_INT 0
42760: PPUSH
42761: LD_VAR 0 8
42765: PPUSH
42766: LD_VAR 0 4
42770: PPUSH
42771: CALL_OW 380
// end else
42775: GO 42794
// PrepareHuman ( false , i , skill ) ;
42777: LD_INT 0
42779: PPUSH
42780: LD_VAR 0 8
42784: PPUSH
42785: LD_VAR 0 4
42789: PPUSH
42790: CALL_OW 380
// un := CreateHuman ;
42794: LD_ADDR_VAR 0 14
42798: PUSH
42799: CALL_OW 44
42803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42804: LD_ADDR_VAR 0 7
42808: PUSH
42809: LD_VAR 0 7
42813: PPUSH
42814: LD_INT 1
42816: PPUSH
42817: LD_VAR 0 14
42821: PPUSH
42822: CALL_OW 2
42826: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42827: LD_VAR 0 14
42831: PPUSH
42832: LD_VAR 0 12
42836: PUSH
42837: LD_INT 1
42839: ARRAY
42840: PPUSH
42841: CALL_OW 52
// end ;
42845: GO 42484
42847: POP
42848: POP
// end ;
42849: GO 41786
42851: POP
42852: POP
// result := result ^ buildings ;
42853: LD_ADDR_VAR 0 7
42857: PUSH
42858: LD_VAR 0 7
42862: PUSH
42863: LD_VAR 0 18
42867: ADD
42868: ST_TO_ADDR
// end else
42869: GO 43012
// begin for i = 1 to personel do
42871: LD_ADDR_VAR 0 8
42875: PUSH
42876: DOUBLE
42877: LD_INT 1
42879: DEC
42880: ST_TO_ADDR
42881: LD_VAR 0 6
42885: PUSH
42886: FOR_TO
42887: IFFALSE 43010
// begin if i > 4 then
42889: LD_VAR 0 8
42893: PUSH
42894: LD_INT 4
42896: GREATER
42897: IFFALSE 42901
// break ;
42899: GO 43010
// x := personel [ i ] ;
42901: LD_ADDR_VAR 0 13
42905: PUSH
42906: LD_VAR 0 6
42910: PUSH
42911: LD_VAR 0 8
42915: ARRAY
42916: ST_TO_ADDR
// if x = - 1 then
42917: LD_VAR 0 13
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: EQUAL
42926: IFFALSE 42930
// continue ;
42928: GO 42886
// PrepareHuman ( false , i , skill ) ;
42930: LD_INT 0
42932: PPUSH
42933: LD_VAR 0 8
42937: PPUSH
42938: LD_VAR 0 4
42942: PPUSH
42943: CALL_OW 380
// un := CreateHuman ;
42947: LD_ADDR_VAR 0 14
42951: PUSH
42952: CALL_OW 44
42956: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42957: LD_VAR 0 14
42961: PPUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: CALL_OW 250
42971: PPUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 251
42981: PPUSH
42982: LD_INT 10
42984: PPUSH
42985: LD_INT 0
42987: PPUSH
42988: CALL_OW 50
// result := result ^ un ;
42992: LD_ADDR_VAR 0 7
42996: PUSH
42997: LD_VAR 0 7
43001: PUSH
43002: LD_VAR 0 14
43006: ADD
43007: ST_TO_ADDR
// end ;
43008: GO 42886
43010: POP
43011: POP
// end ; end ;
43012: LD_VAR 0 7
43016: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43017: LD_INT 0
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
// result := false ;
43035: LD_ADDR_VAR 0 3
43039: PUSH
43040: LD_INT 0
43042: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43043: LD_VAR 0 1
43047: NOT
43048: PUSH
43049: LD_VAR 0 1
43053: PPUSH
43054: CALL_OW 266
43058: PUSH
43059: LD_INT 32
43061: PUSH
43062: LD_INT 33
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: IN
43069: NOT
43070: OR
43071: IFFALSE 43075
// exit ;
43073: GO 44184
// nat := GetNation ( tower ) ;
43075: LD_ADDR_VAR 0 12
43079: PUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: CALL_OW 248
43089: ST_TO_ADDR
// side := GetSide ( tower ) ;
43090: LD_ADDR_VAR 0 16
43094: PUSH
43095: LD_VAR 0 1
43099: PPUSH
43100: CALL_OW 255
43104: ST_TO_ADDR
// x := GetX ( tower ) ;
43105: LD_ADDR_VAR 0 10
43109: PUSH
43110: LD_VAR 0 1
43114: PPUSH
43115: CALL_OW 250
43119: ST_TO_ADDR
// y := GetY ( tower ) ;
43120: LD_ADDR_VAR 0 11
43124: PUSH
43125: LD_VAR 0 1
43129: PPUSH
43130: CALL_OW 251
43134: ST_TO_ADDR
// if not x or not y then
43135: LD_VAR 0 10
43139: NOT
43140: PUSH
43141: LD_VAR 0 11
43145: NOT
43146: OR
43147: IFFALSE 43151
// exit ;
43149: GO 44184
// weapon := 0 ;
43151: LD_ADDR_VAR 0 18
43155: PUSH
43156: LD_INT 0
43158: ST_TO_ADDR
// fac_list := [ ] ;
43159: LD_ADDR_VAR 0 17
43163: PUSH
43164: EMPTY
43165: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43166: LD_ADDR_VAR 0 6
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 274
43180: PPUSH
43181: LD_VAR 0 2
43185: PPUSH
43186: LD_INT 0
43188: PPUSH
43189: CALL 40755 0 3
43193: PPUSH
43194: LD_INT 30
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PPUSH
43204: CALL_OW 72
43208: ST_TO_ADDR
// if not factories then
43209: LD_VAR 0 6
43213: NOT
43214: IFFALSE 43218
// exit ;
43216: GO 44184
// for i in factories do
43218: LD_ADDR_VAR 0 8
43222: PUSH
43223: LD_VAR 0 6
43227: PUSH
43228: FOR_IN
43229: IFFALSE 43254
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43231: LD_ADDR_VAR 0 17
43235: PUSH
43236: LD_VAR 0 17
43240: PUSH
43241: LD_VAR 0 8
43245: PPUSH
43246: CALL_OW 478
43250: UNION
43251: ST_TO_ADDR
43252: GO 43228
43254: POP
43255: POP
// if not fac_list then
43256: LD_VAR 0 17
43260: NOT
43261: IFFALSE 43265
// exit ;
43263: GO 44184
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43265: LD_ADDR_VAR 0 5
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: LD_INT 9
43278: PUSH
43279: LD_INT 10
43281: PUSH
43282: LD_INT 6
43284: PUSH
43285: LD_INT 7
43287: PUSH
43288: LD_INT 11
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 27
43302: PUSH
43303: LD_INT 28
43305: PUSH
43306: LD_INT 26
43308: PUSH
43309: LD_INT 30
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 43
43320: PUSH
43321: LD_INT 44
43323: PUSH
43324: LD_INT 46
43326: PUSH
43327: LD_INT 45
43329: PUSH
43330: LD_INT 47
43332: PUSH
43333: LD_INT 49
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: PUSH
43349: LD_VAR 0 12
43353: ARRAY
43354: ST_TO_ADDR
// list := list isect fac_list ;
43355: LD_ADDR_VAR 0 5
43359: PUSH
43360: LD_VAR 0 5
43364: PUSH
43365: LD_VAR 0 17
43369: ISECT
43370: ST_TO_ADDR
// if not list then
43371: LD_VAR 0 5
43375: NOT
43376: IFFALSE 43380
// exit ;
43378: GO 44184
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43380: LD_VAR 0 12
43384: PUSH
43385: LD_INT 3
43387: EQUAL
43388: PUSH
43389: LD_INT 49
43391: PUSH
43392: LD_VAR 0 5
43396: IN
43397: AND
43398: PUSH
43399: LD_INT 31
43401: PPUSH
43402: LD_VAR 0 16
43406: PPUSH
43407: CALL_OW 321
43411: PUSH
43412: LD_INT 2
43414: EQUAL
43415: AND
43416: IFFALSE 43476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43418: LD_INT 22
43420: PUSH
43421: LD_VAR 0 16
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 35
43432: PUSH
43433: LD_INT 49
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 91
43442: PUSH
43443: LD_VAR 0 1
43447: PUSH
43448: LD_INT 10
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: PPUSH
43461: CALL_OW 69
43465: NOT
43466: IFFALSE 43476
// weapon := ru_time_lapser ;
43468: LD_ADDR_VAR 0 18
43472: PUSH
43473: LD_INT 49
43475: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43476: LD_VAR 0 12
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: IN
43491: PUSH
43492: LD_INT 11
43494: PUSH
43495: LD_VAR 0 5
43499: IN
43500: PUSH
43501: LD_INT 30
43503: PUSH
43504: LD_VAR 0 5
43508: IN
43509: OR
43510: AND
43511: PUSH
43512: LD_INT 6
43514: PPUSH
43515: LD_VAR 0 16
43519: PPUSH
43520: CALL_OW 321
43524: PUSH
43525: LD_INT 2
43527: EQUAL
43528: AND
43529: IFFALSE 43694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43531: LD_INT 22
43533: PUSH
43534: LD_VAR 0 16
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 35
43548: PUSH
43549: LD_INT 11
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 35
43558: PUSH
43559: LD_INT 30
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 91
43573: PUSH
43574: LD_VAR 0 1
43578: PUSH
43579: LD_INT 18
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: PPUSH
43592: CALL_OW 69
43596: NOT
43597: PUSH
43598: LD_INT 22
43600: PUSH
43601: LD_VAR 0 16
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 30
43615: PUSH
43616: LD_INT 32
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 30
43625: PUSH
43626: LD_INT 33
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 91
43640: PUSH
43641: LD_VAR 0 1
43645: PUSH
43646: LD_INT 12
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: PPUSH
43662: CALL_OW 69
43666: PUSH
43667: LD_INT 2
43669: GREATER
43670: AND
43671: IFFALSE 43694
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43673: LD_ADDR_VAR 0 18
43677: PUSH
43678: LD_INT 11
43680: PUSH
43681: LD_INT 30
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_VAR 0 12
43692: ARRAY
43693: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43694: LD_VAR 0 18
43698: NOT
43699: PUSH
43700: LD_INT 40
43702: PPUSH
43703: LD_VAR 0 16
43707: PPUSH
43708: CALL_OW 321
43712: PUSH
43713: LD_INT 2
43715: EQUAL
43716: AND
43717: PUSH
43718: LD_INT 7
43720: PUSH
43721: LD_VAR 0 5
43725: IN
43726: PUSH
43727: LD_INT 28
43729: PUSH
43730: LD_VAR 0 5
43734: IN
43735: OR
43736: PUSH
43737: LD_INT 45
43739: PUSH
43740: LD_VAR 0 5
43744: IN
43745: OR
43746: AND
43747: IFFALSE 44001
// begin hex := GetHexInfo ( x , y ) ;
43749: LD_ADDR_VAR 0 4
43753: PUSH
43754: LD_VAR 0 10
43758: PPUSH
43759: LD_VAR 0 11
43763: PPUSH
43764: CALL_OW 546
43768: ST_TO_ADDR
// if hex [ 1 ] then
43769: LD_VAR 0 4
43773: PUSH
43774: LD_INT 1
43776: ARRAY
43777: IFFALSE 43781
// exit ;
43779: GO 44184
// height := hex [ 2 ] ;
43781: LD_ADDR_VAR 0 15
43785: PUSH
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 2
43793: ARRAY
43794: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43795: LD_ADDR_VAR 0 14
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// for i in tmp do
43818: LD_ADDR_VAR 0 8
43822: PUSH
43823: LD_VAR 0 14
43827: PUSH
43828: FOR_IN
43829: IFFALSE 43999
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43831: LD_ADDR_VAR 0 9
43835: PUSH
43836: LD_VAR 0 10
43840: PPUSH
43841: LD_VAR 0 8
43845: PPUSH
43846: LD_INT 5
43848: PPUSH
43849: CALL_OW 272
43853: PUSH
43854: LD_VAR 0 11
43858: PPUSH
43859: LD_VAR 0 8
43863: PPUSH
43864: LD_INT 5
43866: PPUSH
43867: CALL_OW 273
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43876: LD_VAR 0 9
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: LD_VAR 0 9
43889: PUSH
43890: LD_INT 2
43892: ARRAY
43893: PPUSH
43894: CALL_OW 488
43898: IFFALSE 43997
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43900: LD_ADDR_VAR 0 4
43904: PUSH
43905: LD_VAR 0 9
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: PPUSH
43914: LD_VAR 0 9
43918: PUSH
43919: LD_INT 2
43921: ARRAY
43922: PPUSH
43923: CALL_OW 546
43927: ST_TO_ADDR
// if hex [ 1 ] then
43928: LD_VAR 0 4
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: IFFALSE 43940
// continue ;
43938: GO 43828
// h := hex [ 2 ] ;
43940: LD_ADDR_VAR 0 13
43944: PUSH
43945: LD_VAR 0 4
43949: PUSH
43950: LD_INT 2
43952: ARRAY
43953: ST_TO_ADDR
// if h + 7 < height then
43954: LD_VAR 0 13
43958: PUSH
43959: LD_INT 7
43961: PLUS
43962: PUSH
43963: LD_VAR 0 15
43967: LESS
43968: IFFALSE 43997
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43970: LD_ADDR_VAR 0 18
43974: PUSH
43975: LD_INT 7
43977: PUSH
43978: LD_INT 28
43980: PUSH
43981: LD_INT 45
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: PUSH
43989: LD_VAR 0 12
43993: ARRAY
43994: ST_TO_ADDR
// break ;
43995: GO 43999
// end ; end ; end ;
43997: GO 43828
43999: POP
44000: POP
// end ; if not weapon then
44001: LD_VAR 0 18
44005: NOT
44006: IFFALSE 44066
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44008: LD_ADDR_VAR 0 5
44012: PUSH
44013: LD_VAR 0 5
44017: PUSH
44018: LD_INT 11
44020: PUSH
44021: LD_INT 30
44023: PUSH
44024: LD_INT 49
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: DIFF
44032: ST_TO_ADDR
// if not list then
44033: LD_VAR 0 5
44037: NOT
44038: IFFALSE 44042
// exit ;
44040: GO 44184
// weapon := list [ rand ( 1 , list ) ] ;
44042: LD_ADDR_VAR 0 18
44046: PUSH
44047: LD_VAR 0 5
44051: PUSH
44052: LD_INT 1
44054: PPUSH
44055: LD_VAR 0 5
44059: PPUSH
44060: CALL_OW 12
44064: ARRAY
44065: ST_TO_ADDR
// end ; if weapon then
44066: LD_VAR 0 18
44070: IFFALSE 44184
// begin tmp := CostOfWeapon ( weapon ) ;
44072: LD_ADDR_VAR 0 14
44076: PUSH
44077: LD_VAR 0 18
44081: PPUSH
44082: CALL_OW 451
44086: ST_TO_ADDR
// j := GetBase ( tower ) ;
44087: LD_ADDR_VAR 0 9
44091: PUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: CALL_OW 274
44101: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44102: LD_VAR 0 9
44106: PPUSH
44107: LD_INT 1
44109: PPUSH
44110: CALL_OW 275
44114: PUSH
44115: LD_VAR 0 14
44119: PUSH
44120: LD_INT 1
44122: ARRAY
44123: GREATEREQUAL
44124: PUSH
44125: LD_VAR 0 9
44129: PPUSH
44130: LD_INT 2
44132: PPUSH
44133: CALL_OW 275
44137: PUSH
44138: LD_VAR 0 14
44142: PUSH
44143: LD_INT 2
44145: ARRAY
44146: GREATEREQUAL
44147: AND
44148: PUSH
44149: LD_VAR 0 9
44153: PPUSH
44154: LD_INT 3
44156: PPUSH
44157: CALL_OW 275
44161: PUSH
44162: LD_VAR 0 14
44166: PUSH
44167: LD_INT 3
44169: ARRAY
44170: GREATEREQUAL
44171: AND
44172: IFFALSE 44184
// result := weapon ;
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_VAR 0 18
44183: ST_TO_ADDR
// end ; end ;
44184: LD_VAR 0 3
44188: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44189: LD_INT 0
44191: PPUSH
44192: PPUSH
// result := true ;
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_INT 1
44200: ST_TO_ADDR
// if array1 = array2 then
44201: LD_VAR 0 1
44205: PUSH
44206: LD_VAR 0 2
44210: EQUAL
44211: IFFALSE 44271
// begin for i = 1 to array1 do
44213: LD_ADDR_VAR 0 4
44217: PUSH
44218: DOUBLE
44219: LD_INT 1
44221: DEC
44222: ST_TO_ADDR
44223: LD_VAR 0 1
44227: PUSH
44228: FOR_TO
44229: IFFALSE 44267
// if array1 [ i ] <> array2 [ i ] then
44231: LD_VAR 0 1
44235: PUSH
44236: LD_VAR 0 4
44240: ARRAY
44241: PUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 4
44251: ARRAY
44252: NONEQUAL
44253: IFFALSE 44265
// begin result := false ;
44255: LD_ADDR_VAR 0 3
44259: PUSH
44260: LD_INT 0
44262: ST_TO_ADDR
// break ;
44263: GO 44267
// end ;
44265: GO 44228
44267: POP
44268: POP
// end else
44269: GO 44279
// result := false ;
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 0
44278: ST_TO_ADDR
// end ;
44279: LD_VAR 0 3
44283: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44284: LD_INT 0
44286: PPUSH
44287: PPUSH
// if not array1 or not array2 then
44288: LD_VAR 0 1
44292: NOT
44293: PUSH
44294: LD_VAR 0 2
44298: NOT
44299: OR
44300: IFFALSE 44304
// exit ;
44302: GO 44368
// result := true ;
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_INT 1
44311: ST_TO_ADDR
// for i = 1 to array1 do
44312: LD_ADDR_VAR 0 4
44316: PUSH
44317: DOUBLE
44318: LD_INT 1
44320: DEC
44321: ST_TO_ADDR
44322: LD_VAR 0 1
44326: PUSH
44327: FOR_TO
44328: IFFALSE 44366
// if array1 [ i ] <> array2 [ i ] then
44330: LD_VAR 0 1
44334: PUSH
44335: LD_VAR 0 4
44339: ARRAY
44340: PUSH
44341: LD_VAR 0 2
44345: PUSH
44346: LD_VAR 0 4
44350: ARRAY
44351: NONEQUAL
44352: IFFALSE 44364
// begin result := false ;
44354: LD_ADDR_VAR 0 3
44358: PUSH
44359: LD_INT 0
44361: ST_TO_ADDR
// break ;
44362: GO 44366
// end ;
44364: GO 44327
44366: POP
44367: POP
// end ;
44368: LD_VAR 0 3
44372: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44373: LD_INT 0
44375: PPUSH
44376: PPUSH
44377: PPUSH
// pom := GetBase ( fac ) ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_VAR 0 1
44387: PPUSH
44388: CALL_OW 274
44392: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44393: LD_ADDR_VAR 0 4
44397: PUSH
44398: LD_VAR 0 2
44402: PUSH
44403: LD_INT 1
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_INT 2
44414: ARRAY
44415: PPUSH
44416: LD_VAR 0 2
44420: PUSH
44421: LD_INT 3
44423: ARRAY
44424: PPUSH
44425: LD_VAR 0 2
44429: PUSH
44430: LD_INT 4
44432: ARRAY
44433: PPUSH
44434: CALL_OW 449
44438: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44439: LD_ADDR_VAR 0 3
44443: PUSH
44444: LD_VAR 0 5
44448: PPUSH
44449: LD_INT 1
44451: PPUSH
44452: CALL_OW 275
44456: PUSH
44457: LD_VAR 0 4
44461: PUSH
44462: LD_INT 1
44464: ARRAY
44465: GREATEREQUAL
44466: PUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: LD_INT 2
44474: PPUSH
44475: CALL_OW 275
44479: PUSH
44480: LD_VAR 0 4
44484: PUSH
44485: LD_INT 2
44487: ARRAY
44488: GREATEREQUAL
44489: AND
44490: PUSH
44491: LD_VAR 0 5
44495: PPUSH
44496: LD_INT 3
44498: PPUSH
44499: CALL_OW 275
44503: PUSH
44504: LD_VAR 0 4
44508: PUSH
44509: LD_INT 3
44511: ARRAY
44512: GREATEREQUAL
44513: AND
44514: ST_TO_ADDR
// end ;
44515: LD_VAR 0 3
44519: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44520: LD_INT 0
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
// pom := GetBase ( building ) ;
44526: LD_ADDR_VAR 0 3
44530: PUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 274
44540: ST_TO_ADDR
// if not pom then
44541: LD_VAR 0 3
44545: NOT
44546: IFFALSE 44550
// exit ;
44548: GO 44720
// btype := GetBType ( building ) ;
44550: LD_ADDR_VAR 0 5
44554: PUSH
44555: LD_VAR 0 1
44559: PPUSH
44560: CALL_OW 266
44564: ST_TO_ADDR
// if btype = b_armoury then
44565: LD_VAR 0 5
44569: PUSH
44570: LD_INT 4
44572: EQUAL
44573: IFFALSE 44583
// btype := b_barracks ;
44575: LD_ADDR_VAR 0 5
44579: PUSH
44580: LD_INT 5
44582: ST_TO_ADDR
// if btype = b_depot then
44583: LD_VAR 0 5
44587: PUSH
44588: LD_INT 0
44590: EQUAL
44591: IFFALSE 44601
// btype := b_warehouse ;
44593: LD_ADDR_VAR 0 5
44597: PUSH
44598: LD_INT 1
44600: ST_TO_ADDR
// if btype = b_workshop then
44601: LD_VAR 0 5
44605: PUSH
44606: LD_INT 2
44608: EQUAL
44609: IFFALSE 44619
// btype := b_factory ;
44611: LD_ADDR_VAR 0 5
44615: PUSH
44616: LD_INT 3
44618: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44619: LD_ADDR_VAR 0 4
44623: PUSH
44624: LD_VAR 0 5
44628: PPUSH
44629: LD_VAR 0 1
44633: PPUSH
44634: CALL_OW 248
44638: PPUSH
44639: CALL_OW 450
44643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44644: LD_ADDR_VAR 0 2
44648: PUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_INT 1
44656: PPUSH
44657: CALL_OW 275
44661: PUSH
44662: LD_VAR 0 4
44666: PUSH
44667: LD_INT 1
44669: ARRAY
44670: GREATEREQUAL
44671: PUSH
44672: LD_VAR 0 3
44676: PPUSH
44677: LD_INT 2
44679: PPUSH
44680: CALL_OW 275
44684: PUSH
44685: LD_VAR 0 4
44689: PUSH
44690: LD_INT 2
44692: ARRAY
44693: GREATEREQUAL
44694: AND
44695: PUSH
44696: LD_VAR 0 3
44700: PPUSH
44701: LD_INT 3
44703: PPUSH
44704: CALL_OW 275
44708: PUSH
44709: LD_VAR 0 4
44713: PUSH
44714: LD_INT 3
44716: ARRAY
44717: GREATEREQUAL
44718: AND
44719: ST_TO_ADDR
// end ;
44720: LD_VAR 0 2
44724: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44725: LD_INT 0
44727: PPUSH
44728: PPUSH
44729: PPUSH
// pom := GetBase ( building ) ;
44730: LD_ADDR_VAR 0 4
44734: PUSH
44735: LD_VAR 0 1
44739: PPUSH
44740: CALL_OW 274
44744: ST_TO_ADDR
// if not pom then
44745: LD_VAR 0 4
44749: NOT
44750: IFFALSE 44754
// exit ;
44752: GO 44855
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44754: LD_ADDR_VAR 0 5
44758: PUSH
44759: LD_VAR 0 2
44763: PPUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: CALL_OW 248
44773: PPUSH
44774: CALL_OW 450
44778: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44779: LD_ADDR_VAR 0 3
44783: PUSH
44784: LD_VAR 0 4
44788: PPUSH
44789: LD_INT 1
44791: PPUSH
44792: CALL_OW 275
44796: PUSH
44797: LD_VAR 0 5
44801: PUSH
44802: LD_INT 1
44804: ARRAY
44805: GREATEREQUAL
44806: PUSH
44807: LD_VAR 0 4
44811: PPUSH
44812: LD_INT 2
44814: PPUSH
44815: CALL_OW 275
44819: PUSH
44820: LD_VAR 0 5
44824: PUSH
44825: LD_INT 2
44827: ARRAY
44828: GREATEREQUAL
44829: AND
44830: PUSH
44831: LD_VAR 0 4
44835: PPUSH
44836: LD_INT 3
44838: PPUSH
44839: CALL_OW 275
44843: PUSH
44844: LD_VAR 0 5
44848: PUSH
44849: LD_INT 3
44851: ARRAY
44852: GREATEREQUAL
44853: AND
44854: ST_TO_ADDR
// end ;
44855: LD_VAR 0 3
44859: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44860: LD_INT 0
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
// result := false ;
44873: LD_ADDR_VAR 0 8
44877: PUSH
44878: LD_INT 0
44880: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44881: LD_VAR 0 5
44885: NOT
44886: PUSH
44887: LD_VAR 0 1
44891: NOT
44892: OR
44893: PUSH
44894: LD_VAR 0 2
44898: NOT
44899: OR
44900: PUSH
44901: LD_VAR 0 3
44905: NOT
44906: OR
44907: IFFALSE 44911
// exit ;
44909: GO 45725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44911: LD_ADDR_VAR 0 14
44915: PUSH
44916: LD_VAR 0 1
44920: PPUSH
44921: LD_VAR 0 2
44925: PPUSH
44926: LD_VAR 0 3
44930: PPUSH
44931: LD_VAR 0 4
44935: PPUSH
44936: LD_VAR 0 5
44940: PUSH
44941: LD_INT 1
44943: ARRAY
44944: PPUSH
44945: CALL_OW 248
44949: PPUSH
44950: LD_INT 0
44952: PPUSH
44953: CALL 46958 0 6
44957: ST_TO_ADDR
// if not hexes then
44958: LD_VAR 0 14
44962: NOT
44963: IFFALSE 44967
// exit ;
44965: GO 45725
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44967: LD_ADDR_VAR 0 17
44971: PUSH
44972: LD_VAR 0 5
44976: PPUSH
44977: LD_INT 22
44979: PUSH
44980: LD_VAR 0 13
44984: PPUSH
44985: CALL_OW 255
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 30
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 30
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PPUSH
45026: CALL_OW 72
45030: ST_TO_ADDR
// for i = 1 to hexes do
45031: LD_ADDR_VAR 0 9
45035: PUSH
45036: DOUBLE
45037: LD_INT 1
45039: DEC
45040: ST_TO_ADDR
45041: LD_VAR 0 14
45045: PUSH
45046: FOR_TO
45047: IFFALSE 45723
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45049: LD_ADDR_VAR 0 13
45053: PUSH
45054: LD_VAR 0 14
45058: PUSH
45059: LD_VAR 0 9
45063: ARRAY
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: PPUSH
45069: LD_VAR 0 14
45073: PUSH
45074: LD_VAR 0 9
45078: ARRAY
45079: PUSH
45080: LD_INT 2
45082: ARRAY
45083: PPUSH
45084: CALL_OW 428
45088: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45089: LD_VAR 0 14
45093: PUSH
45094: LD_VAR 0 9
45098: ARRAY
45099: PUSH
45100: LD_INT 1
45102: ARRAY
45103: PPUSH
45104: LD_VAR 0 14
45108: PUSH
45109: LD_VAR 0 9
45113: ARRAY
45114: PUSH
45115: LD_INT 2
45117: ARRAY
45118: PPUSH
45119: CALL_OW 351
45123: PUSH
45124: LD_VAR 0 14
45128: PUSH
45129: LD_VAR 0 9
45133: ARRAY
45134: PUSH
45135: LD_INT 1
45137: ARRAY
45138: PPUSH
45139: LD_VAR 0 14
45143: PUSH
45144: LD_VAR 0 9
45148: ARRAY
45149: PUSH
45150: LD_INT 2
45152: ARRAY
45153: PPUSH
45154: CALL_OW 488
45158: NOT
45159: OR
45160: PUSH
45161: LD_VAR 0 13
45165: PPUSH
45166: CALL_OW 247
45170: PUSH
45171: LD_INT 3
45173: EQUAL
45174: OR
45175: IFFALSE 45181
// exit ;
45177: POP
45178: POP
45179: GO 45725
// if not tmp then
45181: LD_VAR 0 13
45185: NOT
45186: IFFALSE 45190
// continue ;
45188: GO 45046
// result := true ;
45190: LD_ADDR_VAR 0 8
45194: PUSH
45195: LD_INT 1
45197: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45198: LD_VAR 0 6
45202: PUSH
45203: LD_VAR 0 13
45207: PPUSH
45208: CALL_OW 247
45212: PUSH
45213: LD_INT 2
45215: EQUAL
45216: AND
45217: PUSH
45218: LD_VAR 0 13
45222: PPUSH
45223: CALL_OW 263
45227: PUSH
45228: LD_INT 1
45230: EQUAL
45231: AND
45232: IFFALSE 45396
// begin if IsDrivenBy ( tmp ) then
45234: LD_VAR 0 13
45238: PPUSH
45239: CALL_OW 311
45243: IFFALSE 45247
// continue ;
45245: GO 45046
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45247: LD_VAR 0 6
45251: PPUSH
45252: LD_INT 3
45254: PUSH
45255: LD_INT 60
45257: PUSH
45258: EMPTY
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: LD_INT 55
45270: PUSH
45271: EMPTY
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PPUSH
45282: CALL_OW 72
45286: IFFALSE 45394
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45288: LD_ADDR_VAR 0 18
45292: PUSH
45293: LD_VAR 0 6
45297: PPUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 60
45303: PUSH
45304: EMPTY
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: LD_INT 55
45316: PUSH
45317: EMPTY
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PPUSH
45328: CALL_OW 72
45332: PUSH
45333: LD_INT 1
45335: ARRAY
45336: ST_TO_ADDR
// if IsInUnit ( driver ) then
45337: LD_VAR 0 18
45341: PPUSH
45342: CALL_OW 310
45346: IFFALSE 45357
// ComExit ( driver ) ;
45348: LD_VAR 0 18
45352: PPUSH
45353: CALL 70737 0 1
// AddComEnterUnit ( driver , tmp ) ;
45357: LD_VAR 0 18
45361: PPUSH
45362: LD_VAR 0 13
45366: PPUSH
45367: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45371: LD_VAR 0 18
45375: PPUSH
45376: LD_VAR 0 7
45380: PPUSH
45381: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45385: LD_VAR 0 18
45389: PPUSH
45390: CALL_OW 181
// end ; continue ;
45394: GO 45046
// end ; if not cleaners or not tmp in cleaners then
45396: LD_VAR 0 6
45400: NOT
45401: PUSH
45402: LD_VAR 0 13
45406: PUSH
45407: LD_VAR 0 6
45411: IN
45412: NOT
45413: OR
45414: IFFALSE 45721
// begin if dep then
45416: LD_VAR 0 17
45420: IFFALSE 45556
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45422: LD_ADDR_VAR 0 16
45426: PUSH
45427: LD_VAR 0 17
45431: PUSH
45432: LD_INT 1
45434: ARRAY
45435: PPUSH
45436: CALL_OW 250
45440: PPUSH
45441: LD_VAR 0 17
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PPUSH
45450: CALL_OW 254
45454: PPUSH
45455: LD_INT 5
45457: PPUSH
45458: CALL_OW 272
45462: PUSH
45463: LD_VAR 0 17
45467: PUSH
45468: LD_INT 1
45470: ARRAY
45471: PPUSH
45472: CALL_OW 251
45476: PPUSH
45477: LD_VAR 0 17
45481: PUSH
45482: LD_INT 1
45484: ARRAY
45485: PPUSH
45486: CALL_OW 254
45490: PPUSH
45491: LD_INT 5
45493: PPUSH
45494: CALL_OW 273
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45503: LD_VAR 0 16
45507: PUSH
45508: LD_INT 1
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 16
45516: PUSH
45517: LD_INT 2
45519: ARRAY
45520: PPUSH
45521: CALL_OW 488
45525: IFFALSE 45556
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45527: LD_VAR 0 13
45531: PPUSH
45532: LD_VAR 0 16
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PPUSH
45541: LD_VAR 0 16
45545: PUSH
45546: LD_INT 2
45548: ARRAY
45549: PPUSH
45550: CALL_OW 111
// continue ;
45554: GO 45046
// end ; end ; r := GetDir ( tmp ) ;
45556: LD_ADDR_VAR 0 15
45560: PUSH
45561: LD_VAR 0 13
45565: PPUSH
45566: CALL_OW 254
45570: ST_TO_ADDR
// if r = 5 then
45571: LD_VAR 0 15
45575: PUSH
45576: LD_INT 5
45578: EQUAL
45579: IFFALSE 45589
// r := 0 ;
45581: LD_ADDR_VAR 0 15
45585: PUSH
45586: LD_INT 0
45588: ST_TO_ADDR
// for j = r to 5 do
45589: LD_ADDR_VAR 0 10
45593: PUSH
45594: DOUBLE
45595: LD_VAR 0 15
45599: DEC
45600: ST_TO_ADDR
45601: LD_INT 5
45603: PUSH
45604: FOR_TO
45605: IFFALSE 45719
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45607: LD_ADDR_VAR 0 11
45611: PUSH
45612: LD_VAR 0 13
45616: PPUSH
45617: CALL_OW 250
45621: PPUSH
45622: LD_VAR 0 10
45626: PPUSH
45627: LD_INT 2
45629: PPUSH
45630: CALL_OW 272
45634: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45635: LD_ADDR_VAR 0 12
45639: PUSH
45640: LD_VAR 0 13
45644: PPUSH
45645: CALL_OW 251
45649: PPUSH
45650: LD_VAR 0 10
45654: PPUSH
45655: LD_INT 2
45657: PPUSH
45658: CALL_OW 273
45662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45663: LD_VAR 0 11
45667: PPUSH
45668: LD_VAR 0 12
45672: PPUSH
45673: CALL_OW 488
45677: PUSH
45678: LD_VAR 0 11
45682: PPUSH
45683: LD_VAR 0 12
45687: PPUSH
45688: CALL_OW 428
45692: NOT
45693: AND
45694: IFFALSE 45717
// begin ComMoveXY ( tmp , _x , _y ) ;
45696: LD_VAR 0 13
45700: PPUSH
45701: LD_VAR 0 11
45705: PPUSH
45706: LD_VAR 0 12
45710: PPUSH
45711: CALL_OW 111
// break ;
45715: GO 45719
// end ; end ;
45717: GO 45604
45719: POP
45720: POP
// end ; end ;
45721: GO 45046
45723: POP
45724: POP
// end ;
45725: LD_VAR 0 8
45729: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45730: LD_INT 0
45732: PPUSH
// result := true ;
45733: LD_ADDR_VAR 0 3
45737: PUSH
45738: LD_INT 1
45740: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45741: LD_VAR 0 2
45745: PUSH
45746: LD_INT 24
45748: DOUBLE
45749: EQUAL
45750: IFTRUE 45760
45752: LD_INT 33
45754: DOUBLE
45755: EQUAL
45756: IFTRUE 45760
45758: GO 45785
45760: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_INT 32
45768: PPUSH
45769: LD_VAR 0 1
45773: PPUSH
45774: CALL_OW 321
45778: PUSH
45779: LD_INT 2
45781: EQUAL
45782: ST_TO_ADDR
45783: GO 46101
45785: LD_INT 20
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45793
45791: GO 45818
45793: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45794: LD_ADDR_VAR 0 3
45798: PUSH
45799: LD_INT 6
45801: PPUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: CALL_OW 321
45811: PUSH
45812: LD_INT 2
45814: EQUAL
45815: ST_TO_ADDR
45816: GO 46101
45818: LD_INT 22
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45832
45824: LD_INT 36
45826: DOUBLE
45827: EQUAL
45828: IFTRUE 45832
45830: GO 45857
45832: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45833: LD_ADDR_VAR 0 3
45837: PUSH
45838: LD_INT 15
45840: PPUSH
45841: LD_VAR 0 1
45845: PPUSH
45846: CALL_OW 321
45850: PUSH
45851: LD_INT 2
45853: EQUAL
45854: ST_TO_ADDR
45855: GO 46101
45857: LD_INT 30
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45865
45863: GO 45890
45865: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45866: LD_ADDR_VAR 0 3
45870: PUSH
45871: LD_INT 20
45873: PPUSH
45874: LD_VAR 0 1
45878: PPUSH
45879: CALL_OW 321
45883: PUSH
45884: LD_INT 2
45886: EQUAL
45887: ST_TO_ADDR
45888: GO 46101
45890: LD_INT 28
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45904
45896: LD_INT 21
45898: DOUBLE
45899: EQUAL
45900: IFTRUE 45904
45902: GO 45929
45904: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45905: LD_ADDR_VAR 0 3
45909: PUSH
45910: LD_INT 21
45912: PPUSH
45913: LD_VAR 0 1
45917: PPUSH
45918: CALL_OW 321
45922: PUSH
45923: LD_INT 2
45925: EQUAL
45926: ST_TO_ADDR
45927: GO 46101
45929: LD_INT 16
45931: DOUBLE
45932: EQUAL
45933: IFTRUE 45937
45935: GO 45962
45937: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45938: LD_ADDR_VAR 0 3
45942: PUSH
45943: LD_INT 84
45945: PPUSH
45946: LD_VAR 0 1
45950: PPUSH
45951: CALL_OW 321
45955: PUSH
45956: LD_INT 2
45958: EQUAL
45959: ST_TO_ADDR
45960: GO 46101
45962: LD_INT 19
45964: DOUBLE
45965: EQUAL
45966: IFTRUE 45976
45968: LD_INT 23
45970: DOUBLE
45971: EQUAL
45972: IFTRUE 45976
45974: GO 46001
45976: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45977: LD_ADDR_VAR 0 3
45981: PUSH
45982: LD_INT 83
45984: PPUSH
45985: LD_VAR 0 1
45989: PPUSH
45990: CALL_OW 321
45994: PUSH
45995: LD_INT 2
45997: EQUAL
45998: ST_TO_ADDR
45999: GO 46101
46001: LD_INT 17
46003: DOUBLE
46004: EQUAL
46005: IFTRUE 46009
46007: GO 46034
46009: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46010: LD_ADDR_VAR 0 3
46014: PUSH
46015: LD_INT 39
46017: PPUSH
46018: LD_VAR 0 1
46022: PPUSH
46023: CALL_OW 321
46027: PUSH
46028: LD_INT 2
46030: EQUAL
46031: ST_TO_ADDR
46032: GO 46101
46034: LD_INT 18
46036: DOUBLE
46037: EQUAL
46038: IFTRUE 46042
46040: GO 46067
46042: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: LD_INT 40
46050: PPUSH
46051: LD_VAR 0 1
46055: PPUSH
46056: CALL_OW 321
46060: PUSH
46061: LD_INT 2
46063: EQUAL
46064: ST_TO_ADDR
46065: GO 46101
46067: LD_INT 27
46069: DOUBLE
46070: EQUAL
46071: IFTRUE 46075
46073: GO 46100
46075: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46076: LD_ADDR_VAR 0 3
46080: PUSH
46081: LD_INT 35
46083: PPUSH
46084: LD_VAR 0 1
46088: PPUSH
46089: CALL_OW 321
46093: PUSH
46094: LD_INT 2
46096: EQUAL
46097: ST_TO_ADDR
46098: GO 46101
46100: POP
// end ;
46101: LD_VAR 0 3
46105: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46106: LD_INT 0
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
// result := false ;
46119: LD_ADDR_VAR 0 6
46123: PUSH
46124: LD_INT 0
46126: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46127: LD_VAR 0 1
46131: NOT
46132: PUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 266
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: IN
46153: NOT
46154: OR
46155: PUSH
46156: LD_VAR 0 2
46160: NOT
46161: OR
46162: PUSH
46163: LD_VAR 0 5
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 4
46182: PUSH
46183: LD_INT 5
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: IN
46194: NOT
46195: OR
46196: PUSH
46197: LD_VAR 0 3
46201: PPUSH
46202: LD_VAR 0 4
46206: PPUSH
46207: CALL_OW 488
46211: NOT
46212: OR
46213: IFFALSE 46217
// exit ;
46215: GO 46953
// side := GetSide ( depot ) ;
46217: LD_ADDR_VAR 0 9
46221: PUSH
46222: LD_VAR 0 1
46226: PPUSH
46227: CALL_OW 255
46231: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46232: LD_VAR 0 9
46236: PPUSH
46237: LD_VAR 0 2
46241: PPUSH
46242: CALL 45730 0 2
46246: NOT
46247: IFFALSE 46251
// exit ;
46249: GO 46953
// pom := GetBase ( depot ) ;
46251: LD_ADDR_VAR 0 10
46255: PUSH
46256: LD_VAR 0 1
46260: PPUSH
46261: CALL_OW 274
46265: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46266: LD_ADDR_VAR 0 11
46270: PUSH
46271: LD_VAR 0 2
46275: PPUSH
46276: LD_VAR 0 1
46280: PPUSH
46281: CALL_OW 248
46285: PPUSH
46286: CALL_OW 450
46290: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46291: LD_VAR 0 10
46295: PPUSH
46296: LD_INT 1
46298: PPUSH
46299: CALL_OW 275
46303: PUSH
46304: LD_VAR 0 11
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: GREATEREQUAL
46313: PUSH
46314: LD_VAR 0 10
46318: PPUSH
46319: LD_INT 2
46321: PPUSH
46322: CALL_OW 275
46326: PUSH
46327: LD_VAR 0 11
46331: PUSH
46332: LD_INT 2
46334: ARRAY
46335: GREATEREQUAL
46336: AND
46337: PUSH
46338: LD_VAR 0 10
46342: PPUSH
46343: LD_INT 3
46345: PPUSH
46346: CALL_OW 275
46350: PUSH
46351: LD_VAR 0 11
46355: PUSH
46356: LD_INT 3
46358: ARRAY
46359: GREATEREQUAL
46360: AND
46361: NOT
46362: IFFALSE 46366
// exit ;
46364: GO 46953
// if GetBType ( depot ) = b_depot then
46366: LD_VAR 0 1
46370: PPUSH
46371: CALL_OW 266
46375: PUSH
46376: LD_INT 0
46378: EQUAL
46379: IFFALSE 46391
// dist := 28 else
46381: LD_ADDR_VAR 0 14
46385: PUSH
46386: LD_INT 28
46388: ST_TO_ADDR
46389: GO 46399
// dist := 36 ;
46391: LD_ADDR_VAR 0 14
46395: PUSH
46396: LD_INT 36
46398: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46399: LD_VAR 0 1
46403: PPUSH
46404: LD_VAR 0 3
46408: PPUSH
46409: LD_VAR 0 4
46413: PPUSH
46414: CALL_OW 297
46418: PUSH
46419: LD_VAR 0 14
46423: GREATER
46424: IFFALSE 46428
// exit ;
46426: GO 46953
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46428: LD_ADDR_VAR 0 12
46432: PUSH
46433: LD_VAR 0 2
46437: PPUSH
46438: LD_VAR 0 3
46442: PPUSH
46443: LD_VAR 0 4
46447: PPUSH
46448: LD_VAR 0 5
46452: PPUSH
46453: LD_VAR 0 1
46457: PPUSH
46458: CALL_OW 248
46462: PPUSH
46463: LD_INT 0
46465: PPUSH
46466: CALL 46958 0 6
46470: ST_TO_ADDR
// if not hexes then
46471: LD_VAR 0 12
46475: NOT
46476: IFFALSE 46480
// exit ;
46478: GO 46953
// hex := GetHexInfo ( x , y ) ;
46480: LD_ADDR_VAR 0 15
46484: PUSH
46485: LD_VAR 0 3
46489: PPUSH
46490: LD_VAR 0 4
46494: PPUSH
46495: CALL_OW 546
46499: ST_TO_ADDR
// if hex [ 1 ] then
46500: LD_VAR 0 15
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: IFFALSE 46512
// exit ;
46510: GO 46953
// height := hex [ 2 ] ;
46512: LD_ADDR_VAR 0 13
46516: PUSH
46517: LD_VAR 0 15
46521: PUSH
46522: LD_INT 2
46524: ARRAY
46525: ST_TO_ADDR
// for i = 1 to hexes do
46526: LD_ADDR_VAR 0 7
46530: PUSH
46531: DOUBLE
46532: LD_INT 1
46534: DEC
46535: ST_TO_ADDR
46536: LD_VAR 0 12
46540: PUSH
46541: FOR_TO
46542: IFFALSE 46872
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46544: LD_VAR 0 12
46548: PUSH
46549: LD_VAR 0 7
46553: ARRAY
46554: PUSH
46555: LD_INT 1
46557: ARRAY
46558: PPUSH
46559: LD_VAR 0 12
46563: PUSH
46564: LD_VAR 0 7
46568: ARRAY
46569: PUSH
46570: LD_INT 2
46572: ARRAY
46573: PPUSH
46574: CALL_OW 488
46578: NOT
46579: PUSH
46580: LD_VAR 0 12
46584: PUSH
46585: LD_VAR 0 7
46589: ARRAY
46590: PUSH
46591: LD_INT 1
46593: ARRAY
46594: PPUSH
46595: LD_VAR 0 12
46599: PUSH
46600: LD_VAR 0 7
46604: ARRAY
46605: PUSH
46606: LD_INT 2
46608: ARRAY
46609: PPUSH
46610: CALL_OW 428
46614: PUSH
46615: LD_INT 0
46617: GREATER
46618: OR
46619: PUSH
46620: LD_VAR 0 12
46624: PUSH
46625: LD_VAR 0 7
46629: ARRAY
46630: PUSH
46631: LD_INT 1
46633: ARRAY
46634: PPUSH
46635: LD_VAR 0 12
46639: PUSH
46640: LD_VAR 0 7
46644: ARRAY
46645: PUSH
46646: LD_INT 2
46648: ARRAY
46649: PPUSH
46650: CALL_OW 351
46654: OR
46655: IFFALSE 46661
// exit ;
46657: POP
46658: POP
46659: GO 46953
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46661: LD_ADDR_VAR 0 8
46665: PUSH
46666: LD_VAR 0 12
46670: PUSH
46671: LD_VAR 0 7
46675: ARRAY
46676: PUSH
46677: LD_INT 1
46679: ARRAY
46680: PPUSH
46681: LD_VAR 0 12
46685: PUSH
46686: LD_VAR 0 7
46690: ARRAY
46691: PUSH
46692: LD_INT 2
46694: ARRAY
46695: PPUSH
46696: CALL_OW 546
46700: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46701: LD_VAR 0 8
46705: PUSH
46706: LD_INT 1
46708: ARRAY
46709: PUSH
46710: LD_VAR 0 8
46714: PUSH
46715: LD_INT 2
46717: ARRAY
46718: PUSH
46719: LD_VAR 0 13
46723: PUSH
46724: LD_INT 2
46726: PLUS
46727: GREATER
46728: OR
46729: PUSH
46730: LD_VAR 0 8
46734: PUSH
46735: LD_INT 2
46737: ARRAY
46738: PUSH
46739: LD_VAR 0 13
46743: PUSH
46744: LD_INT 2
46746: MINUS
46747: LESS
46748: OR
46749: PUSH
46750: LD_VAR 0 8
46754: PUSH
46755: LD_INT 3
46757: ARRAY
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 8
46764: PUSH
46765: LD_INT 9
46767: PUSH
46768: LD_INT 10
46770: PUSH
46771: LD_INT 11
46773: PUSH
46774: LD_INT 12
46776: PUSH
46777: LD_INT 13
46779: PUSH
46780: LD_INT 16
46782: PUSH
46783: LD_INT 17
46785: PUSH
46786: LD_INT 18
46788: PUSH
46789: LD_INT 19
46791: PUSH
46792: LD_INT 20
46794: PUSH
46795: LD_INT 21
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: IN
46813: NOT
46814: OR
46815: PUSH
46816: LD_VAR 0 8
46820: PUSH
46821: LD_INT 5
46823: ARRAY
46824: NOT
46825: OR
46826: PUSH
46827: LD_VAR 0 8
46831: PUSH
46832: LD_INT 6
46834: ARRAY
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 7
46844: PUSH
46845: LD_INT 9
46847: PUSH
46848: LD_INT 10
46850: PUSH
46851: LD_INT 11
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: IN
46862: NOT
46863: OR
46864: IFFALSE 46870
// exit ;
46866: POP
46867: POP
46868: GO 46953
// end ;
46870: GO 46541
46872: POP
46873: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46874: LD_VAR 0 9
46878: PPUSH
46879: LD_VAR 0 3
46883: PPUSH
46884: LD_VAR 0 4
46888: PPUSH
46889: LD_INT 20
46891: PPUSH
46892: CALL 38905 0 4
46896: PUSH
46897: LD_INT 4
46899: ARRAY
46900: IFFALSE 46904
// exit ;
46902: GO 46953
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46904: LD_VAR 0 2
46908: PUSH
46909: LD_INT 29
46911: PUSH
46912: LD_INT 30
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: IN
46919: PUSH
46920: LD_VAR 0 3
46924: PPUSH
46925: LD_VAR 0 4
46929: PPUSH
46930: LD_VAR 0 9
46934: PPUSH
46935: CALL_OW 440
46939: NOT
46940: AND
46941: IFFALSE 46945
// exit ;
46943: GO 46953
// result := true ;
46945: LD_ADDR_VAR 0 6
46949: PUSH
46950: LD_INT 1
46952: ST_TO_ADDR
// end ;
46953: LD_VAR 0 6
46957: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46958: LD_INT 0
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
// result = [ ] ;
47018: LD_ADDR_VAR 0 7
47022: PUSH
47023: EMPTY
47024: ST_TO_ADDR
// temp_list = [ ] ;
47025: LD_ADDR_VAR 0 9
47029: PUSH
47030: EMPTY
47031: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47032: LD_VAR 0 4
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 4
47051: PUSH
47052: LD_INT 5
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: IN
47063: NOT
47064: PUSH
47065: LD_VAR 0 1
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: IN
47080: PUSH
47081: LD_VAR 0 5
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: LIST
47099: IN
47100: NOT
47101: AND
47102: OR
47103: IFFALSE 47107
// exit ;
47105: GO 65498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47107: LD_VAR 0 1
47111: PUSH
47112: LD_INT 6
47114: PUSH
47115: LD_INT 7
47117: PUSH
47118: LD_INT 8
47120: PUSH
47121: LD_INT 13
47123: PUSH
47124: LD_INT 12
47126: PUSH
47127: LD_INT 15
47129: PUSH
47130: LD_INT 11
47132: PUSH
47133: LD_INT 14
47135: PUSH
47136: LD_INT 10
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: IN
47150: IFFALSE 47160
// btype = b_lab ;
47152: LD_ADDR_VAR 0 1
47156: PUSH
47157: LD_INT 6
47159: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47160: LD_VAR 0 6
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: IN
47179: NOT
47180: PUSH
47181: LD_VAR 0 1
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 6
47200: PUSH
47201: LD_INT 36
47203: PUSH
47204: LD_INT 4
47206: PUSH
47207: LD_INT 5
47209: PUSH
47210: LD_INT 31
47212: PUSH
47213: LD_INT 32
47215: PUSH
47216: LD_INT 33
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: IN
47232: NOT
47233: PUSH
47234: LD_VAR 0 6
47238: PUSH
47239: LD_INT 1
47241: EQUAL
47242: AND
47243: OR
47244: PUSH
47245: LD_VAR 0 1
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 3
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: IN
47260: NOT
47261: PUSH
47262: LD_VAR 0 6
47266: PUSH
47267: LD_INT 2
47269: EQUAL
47270: AND
47271: OR
47272: IFFALSE 47282
// mode = 0 ;
47274: LD_ADDR_VAR 0 6
47278: PUSH
47279: LD_INT 0
47281: ST_TO_ADDR
// case mode of 0 :
47282: LD_VAR 0 6
47286: PUSH
47287: LD_INT 0
47289: DOUBLE
47290: EQUAL
47291: IFTRUE 47295
47293: GO 58748
47295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47296: LD_ADDR_VAR 0 11
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47489: LD_ADDR_VAR 0 12
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47685: LD_ADDR_VAR 0 13
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47884: LD_ADDR_VAR 0 14
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48080: LD_ADDR_VAR 0 15
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48273: LD_ADDR_VAR 0 16
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48466: LD_ADDR_VAR 0 17
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48696: LD_ADDR_VAR 0 18
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48926: LD_ADDR_VAR 0 19
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49156: LD_ADDR_VAR 0 20
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49386: LD_ADDR_VAR 0 21
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49616: LD_ADDR_VAR 0 22
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49846: LD_ADDR_VAR 0 23
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50126: LD_ADDR_VAR 0 24
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50402: LD_ADDR_VAR 0 25
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50676: LD_ADDR_VAR 0 26
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50952: LD_ADDR_VAR 0 27
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: NEG
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51232: LD_ADDR_VAR 0 28
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51514: LD_ADDR_VAR 0 29
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51793: LD_ADDR_VAR 0 30
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52071: LD_ADDR_VAR 0 31
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52349: LD_ADDR_VAR 0 32
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52627: LD_ADDR_VAR 0 33
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52906: LD_ADDR_VAR 0 34
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53186: LD_ADDR_VAR 0 35
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53298: LD_ADDR_VAR 0 36
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53410: LD_ADDR_VAR 0 37
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53522: LD_ADDR_VAR 0 38
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53634: LD_ADDR_VAR 0 39
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53746: LD_ADDR_VAR 0 40
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53858: LD_ADDR_VAR 0 41
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: NEG
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54208: LD_ADDR_VAR 0 42
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 3
54517: NEG
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54558: LD_ADDR_VAR 0 43
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 3
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 3
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54906: LD_ADDR_VAR 0 44
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55256: LD_ADDR_VAR 0 45
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 3
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 3
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55606: LD_ADDR_VAR 0 46
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 3
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55954: LD_ADDR_VAR 0 47
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56105: LD_ADDR_VAR 0 48
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56252: LD_ADDR_VAR 0 49
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56396: LD_ADDR_VAR 0 50
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56540: LD_ADDR_VAR 0 51
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56687: LD_ADDR_VAR 0 52
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56838: LD_ADDR_VAR 0 53
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57068: LD_ADDR_VAR 0 54
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57298: LD_ADDR_VAR 0 55
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57528: LD_ADDR_VAR 0 56
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57758: LD_ADDR_VAR 0 57
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57988: LD_ADDR_VAR 0 58
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58218: LD_ADDR_VAR 0 59
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58306: LD_ADDR_VAR 0 60
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58394: LD_ADDR_VAR 0 61
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58482: LD_ADDR_VAR 0 62
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58570: LD_ADDR_VAR 0 63
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58658: LD_ADDR_VAR 0 64
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// end ; 1 :
58746: GO 64643
58748: LD_INT 1
58750: DOUBLE
58751: EQUAL
58752: IFTRUE 58756
58754: GO 61379
58756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58757: LD_ADDR_VAR 0 11
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58801: LD_ADDR_VAR 0 12
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58842: LD_ADDR_VAR 0 13
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58882: LD_ADDR_VAR 0 14
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58923: LD_ADDR_VAR 0 15
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58967: LD_ADDR_VAR 0 16
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: NEG
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59013: LD_ADDR_VAR 0 17
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59057: LD_ADDR_VAR 0 18
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59098: LD_ADDR_VAR 0 19
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59138: LD_ADDR_VAR 0 20
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 3
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59179: LD_ADDR_VAR 0 21
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59223: LD_ADDR_VAR 0 22
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59269: LD_ADDR_VAR 0 23
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 4
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59313: LD_ADDR_VAR 0 24
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 4
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59354: LD_ADDR_VAR 0 25
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59394: LD_ADDR_VAR 0 26
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 3
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 4
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59435: LD_ADDR_VAR 0 27
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59479: LD_ADDR_VAR 0 28
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 4
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59525: LD_ADDR_VAR 0 29
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 4
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 5
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 5
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 4
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 6
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 6
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 5
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59680: LD_ADDR_VAR 0 30
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 3
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 4
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 5
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 5
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 6
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 6
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59823: LD_ADDR_VAR 0 31
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 3
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 5
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 5
59900: PUSH
59901: LD_INT 5
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 4
59910: PUSH
59911: LD_INT 5
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 6
59920: PUSH
59921: LD_INT 5
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 6
59930: PUSH
59931: LD_INT 6
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 5
59940: PUSH
59941: LD_INT 6
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59962: LD_ADDR_VAR 0 32
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 3
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 3
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 4
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 4
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 5
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: LD_INT 5
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 4
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 6
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: LD_INT 6
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60105: LD_ADDR_VAR 0 33
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 4
60157: NEG
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 4
60168: NEG
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 5
60191: NEG
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 5
60202: NEG
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 6
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 6
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60260: LD_ADDR_VAR 0 34
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 4
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: NEG
60352: PUSH
60353: LD_INT 4
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 5
60363: NEG
60364: PUSH
60365: LD_INT 5
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 5
60375: NEG
60376: PUSH
60377: LD_INT 6
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 6
60387: NEG
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 6
60399: NEG
60400: PUSH
60401: LD_INT 6
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60423: LD_ADDR_VAR 0 41
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 2
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60467: LD_ADDR_VAR 0 42
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60508: LD_ADDR_VAR 0 43
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60548: LD_ADDR_VAR 0 44
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60589: LD_ADDR_VAR 0 45
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60633: LD_ADDR_VAR 0 46
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60679: LD_ADDR_VAR 0 47
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: LD_INT 3
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60712: LD_ADDR_VAR 0 48
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60743: LD_ADDR_VAR 0 49
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: LD_INT 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60772: LD_ADDR_VAR 0 50
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60801: LD_ADDR_VAR 0 51
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60832: LD_ADDR_VAR 0 52
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60865: LD_ADDR_VAR 0 53
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60909: LD_ADDR_VAR 0 54
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60950: LD_ADDR_VAR 0 55
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60990: LD_ADDR_VAR 0 56
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61031: LD_ADDR_VAR 0 57
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 3
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61075: LD_ADDR_VAR 0 58
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 3
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61121: LD_ADDR_VAR 0 59
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61165: LD_ADDR_VAR 0 60
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61206: LD_ADDR_VAR 0 61
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61246: LD_ADDR_VAR 0 62
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61287: LD_ADDR_VAR 0 63
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61331: LD_ADDR_VAR 0 64
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// end ; 2 :
61377: GO 64643
61379: LD_INT 2
61381: DOUBLE
61382: EQUAL
61383: IFTRUE 61387
61385: GO 64642
61387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61388: LD_ADDR_VAR 0 29
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 5
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 5
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 5
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 4
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 4
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 4
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 5
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 5
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 5
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 3
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 4
61785: NEG
61786: PUSH
61787: LD_INT 5
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: NEG
61798: PUSH
61799: LD_INT 4
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 4
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 5
61833: NEG
61834: PUSH
61835: LD_INT 4
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: LD_INT 5
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: LD_INT 5
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 5
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61926: LD_ADDR_VAR 0 30
61930: PUSH
61931: LD_INT 4
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: LD_INT 5
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 3
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 5
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: LD_INT 5
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 4
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 4
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 4
62116: NEG
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: NEG
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 5
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 5
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 5
62195: NEG
62196: PUSH
62197: LD_INT 2
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 3
62230: NEG
62231: PUSH
62232: LD_INT 4
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 3
62266: NEG
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 4
62278: NEG
62279: PUSH
62280: LD_INT 3
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: LD_INT 4
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: LD_INT 4
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 4
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 5
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 4
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 4
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 5
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: LD_INT 5
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62473: LD_ADDR_VAR 0 31
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 4
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 5
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: LD_INT 5
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: LD_INT 5
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 4
62629: NEG
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 4
62652: NEG
62653: PUSH
62654: LD_INT 2
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 4
62675: NEG
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 4
62687: NEG
62688: PUSH
62689: LD_INT 5
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: LD_INT 4
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 4
62723: NEG
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 5
62735: NEG
62736: PUSH
62737: LD_INT 4
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 5
62747: NEG
62748: PUSH
62749: LD_INT 5
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: LD_INT 5
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 5
62771: NEG
62772: PUSH
62773: LD_INT 3
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 3
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 4
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 2
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 4
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 2
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: LD_INT 4
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 4
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 4
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 5
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 5
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 5
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63023: LD_ADDR_VAR 0 32
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 4
63041: NEG
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 3
63053: NEG
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: NEG
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 4
63075: NEG
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 5
63086: NEG
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 5
63097: NEG
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 5
63109: NEG
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: LD_INT 4
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 3
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: NEG
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 3
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 4
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 4
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 1
63262: PUSH
63263: LD_INT 4
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 3
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: LD_INT 4
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: LD_INT 5
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: NEG
63331: PUSH
63332: LD_INT 5
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 4
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 4
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 4
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 4
63435: PUSH
63436: LD_INT 4
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 4
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 5
63455: PUSH
63456: LD_INT 4
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: LD_INT 5
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: LD_INT 5
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: LD_INT 4
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 5
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63570: LD_ADDR_VAR 0 33
63574: PUSH
63575: LD_INT 4
63577: NEG
63578: PUSH
63579: LD_INT 4
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: LD_INT 5
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 3
63601: NEG
63602: PUSH
63603: LD_INT 4
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: NEG
63614: PUSH
63615: LD_INT 3
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 4
63625: NEG
63626: PUSH
63627: LD_INT 3
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 5
63637: NEG
63638: PUSH
63639: LD_INT 4
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 5
63649: NEG
63650: PUSH
63651: LD_INT 5
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 5
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 5
63673: NEG
63674: PUSH
63675: LD_INT 3
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 3
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: LD_INT 4
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: LD_INT 3
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: NEG
63776: PUSH
63777: LD_INT 4
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 4
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 5
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 5
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: LD_INT 4
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 3
63920: PUSH
63921: LD_INT 4
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: LD_INT 2
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 4
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: LD_INT 4
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 3
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 4
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: LD_INT 5
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 5
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 4
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: LD_INT 5
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 2
64052: NEG
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64108: LD_ADDR_VAR 0 34
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 5
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 4
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 3
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: LD_INT 4
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 5
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: LD_INT 5
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 4
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 4
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 3
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 4
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 4
64310: PUSH
64311: LD_INT 4
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 4
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 5
64330: PUSH
64331: LD_INT 4
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 5
64340: PUSH
64341: LD_INT 5
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 4
64350: PUSH
64351: LD_INT 5
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 3
64360: PUSH
64361: LD_INT 4
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 5
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 5
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: LD_INT 4
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 4
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 4
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 2
64482: NEG
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 4
64493: NEG
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 4
64504: NEG
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: NEG
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 5
64549: NEG
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 5
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 5
64572: NEG
64573: PUSH
64574: LD_INT 2
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 3
64584: NEG
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: ST_TO_ADDR
// end ; end ;
64640: GO 64643
64642: POP
// case btype of b_depot , b_warehouse :
64643: LD_VAR 0 1
64647: PUSH
64648: LD_INT 0
64650: DOUBLE
64651: EQUAL
64652: IFTRUE 64662
64654: LD_INT 1
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64662
64660: GO 64863
64662: POP
// case nation of nation_american :
64663: LD_VAR 0 5
64667: PUSH
64668: LD_INT 1
64670: DOUBLE
64671: EQUAL
64672: IFTRUE 64676
64674: GO 64732
64676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64677: LD_ADDR_VAR 0 9
64681: PUSH
64682: LD_VAR 0 11
64686: PUSH
64687: LD_VAR 0 12
64691: PUSH
64692: LD_VAR 0 13
64696: PUSH
64697: LD_VAR 0 14
64701: PUSH
64702: LD_VAR 0 15
64706: PUSH
64707: LD_VAR 0 16
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: PUSH
64720: LD_VAR 0 4
64724: PUSH
64725: LD_INT 1
64727: PLUS
64728: ARRAY
64729: ST_TO_ADDR
64730: GO 64861
64732: LD_INT 2
64734: DOUBLE
64735: EQUAL
64736: IFTRUE 64740
64738: GO 64796
64740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64741: LD_ADDR_VAR 0 9
64745: PUSH
64746: LD_VAR 0 17
64750: PUSH
64751: LD_VAR 0 18
64755: PUSH
64756: LD_VAR 0 19
64760: PUSH
64761: LD_VAR 0 20
64765: PUSH
64766: LD_VAR 0 21
64770: PUSH
64771: LD_VAR 0 22
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: PUSH
64784: LD_VAR 0 4
64788: PUSH
64789: LD_INT 1
64791: PLUS
64792: ARRAY
64793: ST_TO_ADDR
64794: GO 64861
64796: LD_INT 3
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64804
64802: GO 64860
64804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64805: LD_ADDR_VAR 0 9
64809: PUSH
64810: LD_VAR 0 23
64814: PUSH
64815: LD_VAR 0 24
64819: PUSH
64820: LD_VAR 0 25
64824: PUSH
64825: LD_VAR 0 26
64829: PUSH
64830: LD_VAR 0 27
64834: PUSH
64835: LD_VAR 0 28
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: LD_VAR 0 4
64852: PUSH
64853: LD_INT 1
64855: PLUS
64856: ARRAY
64857: ST_TO_ADDR
64858: GO 64861
64860: POP
64861: GO 65416
64863: LD_INT 2
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64877
64869: LD_INT 3
64871: DOUBLE
64872: EQUAL
64873: IFTRUE 64877
64875: GO 64933
64877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64878: LD_ADDR_VAR 0 9
64882: PUSH
64883: LD_VAR 0 29
64887: PUSH
64888: LD_VAR 0 30
64892: PUSH
64893: LD_VAR 0 31
64897: PUSH
64898: LD_VAR 0 32
64902: PUSH
64903: LD_VAR 0 33
64907: PUSH
64908: LD_VAR 0 34
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: PUSH
64921: LD_VAR 0 4
64925: PUSH
64926: LD_INT 1
64928: PLUS
64929: ARRAY
64930: ST_TO_ADDR
64931: GO 65416
64933: LD_INT 16
64935: DOUBLE
64936: EQUAL
64937: IFTRUE 64995
64939: LD_INT 17
64941: DOUBLE
64942: EQUAL
64943: IFTRUE 64995
64945: LD_INT 18
64947: DOUBLE
64948: EQUAL
64949: IFTRUE 64995
64951: LD_INT 19
64953: DOUBLE
64954: EQUAL
64955: IFTRUE 64995
64957: LD_INT 22
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 64995
64963: LD_INT 20
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64995
64969: LD_INT 21
64971: DOUBLE
64972: EQUAL
64973: IFTRUE 64995
64975: LD_INT 23
64977: DOUBLE
64978: EQUAL
64979: IFTRUE 64995
64981: LD_INT 24
64983: DOUBLE
64984: EQUAL
64985: IFTRUE 64995
64987: LD_INT 25
64989: DOUBLE
64990: EQUAL
64991: IFTRUE 64995
64993: GO 65051
64995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64996: LD_ADDR_VAR 0 9
65000: PUSH
65001: LD_VAR 0 35
65005: PUSH
65006: LD_VAR 0 36
65010: PUSH
65011: LD_VAR 0 37
65015: PUSH
65016: LD_VAR 0 38
65020: PUSH
65021: LD_VAR 0 39
65025: PUSH
65026: LD_VAR 0 40
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: PUSH
65039: LD_VAR 0 4
65043: PUSH
65044: LD_INT 1
65046: PLUS
65047: ARRAY
65048: ST_TO_ADDR
65049: GO 65416
65051: LD_INT 6
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65107
65057: LD_INT 7
65059: DOUBLE
65060: EQUAL
65061: IFTRUE 65107
65063: LD_INT 8
65065: DOUBLE
65066: EQUAL
65067: IFTRUE 65107
65069: LD_INT 13
65071: DOUBLE
65072: EQUAL
65073: IFTRUE 65107
65075: LD_INT 12
65077: DOUBLE
65078: EQUAL
65079: IFTRUE 65107
65081: LD_INT 15
65083: DOUBLE
65084: EQUAL
65085: IFTRUE 65107
65087: LD_INT 11
65089: DOUBLE
65090: EQUAL
65091: IFTRUE 65107
65093: LD_INT 14
65095: DOUBLE
65096: EQUAL
65097: IFTRUE 65107
65099: LD_INT 10
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65107
65105: GO 65163
65107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65108: LD_ADDR_VAR 0 9
65112: PUSH
65113: LD_VAR 0 41
65117: PUSH
65118: LD_VAR 0 42
65122: PUSH
65123: LD_VAR 0 43
65127: PUSH
65128: LD_VAR 0 44
65132: PUSH
65133: LD_VAR 0 45
65137: PUSH
65138: LD_VAR 0 46
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: PUSH
65151: LD_VAR 0 4
65155: PUSH
65156: LD_INT 1
65158: PLUS
65159: ARRAY
65160: ST_TO_ADDR
65161: GO 65416
65163: LD_INT 36
65165: DOUBLE
65166: EQUAL
65167: IFTRUE 65171
65169: GO 65227
65171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65172: LD_ADDR_VAR 0 9
65176: PUSH
65177: LD_VAR 0 47
65181: PUSH
65182: LD_VAR 0 48
65186: PUSH
65187: LD_VAR 0 49
65191: PUSH
65192: LD_VAR 0 50
65196: PUSH
65197: LD_VAR 0 51
65201: PUSH
65202: LD_VAR 0 52
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: PUSH
65215: LD_VAR 0 4
65219: PUSH
65220: LD_INT 1
65222: PLUS
65223: ARRAY
65224: ST_TO_ADDR
65225: GO 65416
65227: LD_INT 4
65229: DOUBLE
65230: EQUAL
65231: IFTRUE 65253
65233: LD_INT 5
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65253
65239: LD_INT 34
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65253
65245: LD_INT 37
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65253
65251: GO 65309
65253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65254: LD_ADDR_VAR 0 9
65258: PUSH
65259: LD_VAR 0 53
65263: PUSH
65264: LD_VAR 0 54
65268: PUSH
65269: LD_VAR 0 55
65273: PUSH
65274: LD_VAR 0 56
65278: PUSH
65279: LD_VAR 0 57
65283: PUSH
65284: LD_VAR 0 58
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: LD_VAR 0 4
65301: PUSH
65302: LD_INT 1
65304: PLUS
65305: ARRAY
65306: ST_TO_ADDR
65307: GO 65416
65309: LD_INT 31
65311: DOUBLE
65312: EQUAL
65313: IFTRUE 65359
65315: LD_INT 32
65317: DOUBLE
65318: EQUAL
65319: IFTRUE 65359
65321: LD_INT 33
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65359
65327: LD_INT 27
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65359
65333: LD_INT 26
65335: DOUBLE
65336: EQUAL
65337: IFTRUE 65359
65339: LD_INT 28
65341: DOUBLE
65342: EQUAL
65343: IFTRUE 65359
65345: LD_INT 29
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65359
65351: LD_INT 30
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65359
65357: GO 65415
65359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65360: LD_ADDR_VAR 0 9
65364: PUSH
65365: LD_VAR 0 59
65369: PUSH
65370: LD_VAR 0 60
65374: PUSH
65375: LD_VAR 0 61
65379: PUSH
65380: LD_VAR 0 62
65384: PUSH
65385: LD_VAR 0 63
65389: PUSH
65390: LD_VAR 0 64
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: LD_VAR 0 4
65407: PUSH
65408: LD_INT 1
65410: PLUS
65411: ARRAY
65412: ST_TO_ADDR
65413: GO 65416
65415: POP
// temp_list2 = [ ] ;
65416: LD_ADDR_VAR 0 10
65420: PUSH
65421: EMPTY
65422: ST_TO_ADDR
// for i in temp_list do
65423: LD_ADDR_VAR 0 8
65427: PUSH
65428: LD_VAR 0 9
65432: PUSH
65433: FOR_IN
65434: IFFALSE 65486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65436: LD_ADDR_VAR 0 10
65440: PUSH
65441: LD_VAR 0 10
65445: PUSH
65446: LD_VAR 0 8
65450: PUSH
65451: LD_INT 1
65453: ARRAY
65454: PUSH
65455: LD_VAR 0 2
65459: PLUS
65460: PUSH
65461: LD_VAR 0 8
65465: PUSH
65466: LD_INT 2
65468: ARRAY
65469: PUSH
65470: LD_VAR 0 3
65474: PLUS
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: EMPTY
65481: LIST
65482: ADD
65483: ST_TO_ADDR
65484: GO 65433
65486: POP
65487: POP
// result = temp_list2 ;
65488: LD_ADDR_VAR 0 7
65492: PUSH
65493: LD_VAR 0 10
65497: ST_TO_ADDR
// end ;
65498: LD_VAR 0 7
65502: RET
// export function EnemyInRange ( unit , dist ) ; begin
65503: LD_INT 0
65505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65506: LD_ADDR_VAR 0 3
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL_OW 255
65520: PPUSH
65521: LD_VAR 0 1
65525: PPUSH
65526: CALL_OW 250
65530: PPUSH
65531: LD_VAR 0 1
65535: PPUSH
65536: CALL_OW 251
65540: PPUSH
65541: LD_VAR 0 2
65545: PPUSH
65546: CALL 38905 0 4
65550: PUSH
65551: LD_INT 4
65553: ARRAY
65554: ST_TO_ADDR
// end ;
65555: LD_VAR 0 3
65559: RET
// export function PlayerSeeMe ( unit ) ; begin
65560: LD_INT 0
65562: PPUSH
// result := See ( your_side , unit ) ;
65563: LD_ADDR_VAR 0 2
65567: PUSH
65568: LD_OWVAR 2
65572: PPUSH
65573: LD_VAR 0 1
65577: PPUSH
65578: CALL_OW 292
65582: ST_TO_ADDR
// end ;
65583: LD_VAR 0 2
65587: RET
// export function ReverseDir ( unit ) ; begin
65588: LD_INT 0
65590: PPUSH
// if not unit then
65591: LD_VAR 0 1
65595: NOT
65596: IFFALSE 65600
// exit ;
65598: GO 65623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65600: LD_ADDR_VAR 0 2
65604: PUSH
65605: LD_VAR 0 1
65609: PPUSH
65610: CALL_OW 254
65614: PUSH
65615: LD_INT 3
65617: PLUS
65618: PUSH
65619: LD_INT 6
65621: MOD
65622: ST_TO_ADDR
// end ;
65623: LD_VAR 0 2
65627: RET
// export function ReverseArray ( array ) ; var i ; begin
65628: LD_INT 0
65630: PPUSH
65631: PPUSH
// if not array then
65632: LD_VAR 0 1
65636: NOT
65637: IFFALSE 65641
// exit ;
65639: GO 65696
// result := [ ] ;
65641: LD_ADDR_VAR 0 2
65645: PUSH
65646: EMPTY
65647: ST_TO_ADDR
// for i := array downto 1 do
65648: LD_ADDR_VAR 0 3
65652: PUSH
65653: DOUBLE
65654: LD_VAR 0 1
65658: INC
65659: ST_TO_ADDR
65660: LD_INT 1
65662: PUSH
65663: FOR_DOWNTO
65664: IFFALSE 65694
// result := Join ( result , array [ i ] ) ;
65666: LD_ADDR_VAR 0 2
65670: PUSH
65671: LD_VAR 0 2
65675: PPUSH
65676: LD_VAR 0 1
65680: PUSH
65681: LD_VAR 0 3
65685: ARRAY
65686: PPUSH
65687: CALL 70339 0 2
65691: ST_TO_ADDR
65692: GO 65663
65694: POP
65695: POP
// end ;
65696: LD_VAR 0 2
65700: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65701: LD_INT 0
65703: PPUSH
65704: PPUSH
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
// if not unit or not hexes then
65709: LD_VAR 0 1
65713: NOT
65714: PUSH
65715: LD_VAR 0 2
65719: NOT
65720: OR
65721: IFFALSE 65725
// exit ;
65723: GO 65848
// dist := 9999 ;
65725: LD_ADDR_VAR 0 5
65729: PUSH
65730: LD_INT 9999
65732: ST_TO_ADDR
// for i = 1 to hexes do
65733: LD_ADDR_VAR 0 4
65737: PUSH
65738: DOUBLE
65739: LD_INT 1
65741: DEC
65742: ST_TO_ADDR
65743: LD_VAR 0 2
65747: PUSH
65748: FOR_TO
65749: IFFALSE 65836
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65751: LD_ADDR_VAR 0 6
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 2
65765: PUSH
65766: LD_VAR 0 4
65770: ARRAY
65771: PUSH
65772: LD_INT 1
65774: ARRAY
65775: PPUSH
65776: LD_VAR 0 2
65780: PUSH
65781: LD_VAR 0 4
65785: ARRAY
65786: PUSH
65787: LD_INT 2
65789: ARRAY
65790: PPUSH
65791: CALL_OW 297
65795: ST_TO_ADDR
// if tdist < dist then
65796: LD_VAR 0 6
65800: PUSH
65801: LD_VAR 0 5
65805: LESS
65806: IFFALSE 65834
// begin hex := hexes [ i ] ;
65808: LD_ADDR_VAR 0 8
65812: PUSH
65813: LD_VAR 0 2
65817: PUSH
65818: LD_VAR 0 4
65822: ARRAY
65823: ST_TO_ADDR
// dist := tdist ;
65824: LD_ADDR_VAR 0 5
65828: PUSH
65829: LD_VAR 0 6
65833: ST_TO_ADDR
// end ; end ;
65834: GO 65748
65836: POP
65837: POP
// result := hex ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_VAR 0 8
65847: ST_TO_ADDR
// end ;
65848: LD_VAR 0 3
65852: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65853: LD_INT 0
65855: PPUSH
65856: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65857: LD_VAR 0 1
65861: NOT
65862: PUSH
65863: LD_VAR 0 1
65867: PUSH
65868: LD_INT 21
65870: PUSH
65871: LD_INT 2
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 23
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PPUSH
65892: CALL_OW 69
65896: IN
65897: NOT
65898: OR
65899: IFFALSE 65903
// exit ;
65901: GO 65950
// for i = 1 to 3 do
65903: LD_ADDR_VAR 0 3
65907: PUSH
65908: DOUBLE
65909: LD_INT 1
65911: DEC
65912: ST_TO_ADDR
65913: LD_INT 3
65915: PUSH
65916: FOR_TO
65917: IFFALSE 65948
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65919: LD_VAR 0 1
65923: PPUSH
65924: CALL_OW 250
65928: PPUSH
65929: LD_VAR 0 1
65933: PPUSH
65934: CALL_OW 251
65938: PPUSH
65939: LD_INT 1
65941: PPUSH
65942: CALL_OW 453
65946: GO 65916
65948: POP
65949: POP
// end ;
65950: LD_VAR 0 2
65954: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65955: LD_INT 0
65957: PPUSH
65958: PPUSH
65959: PPUSH
65960: PPUSH
65961: PPUSH
65962: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65963: LD_VAR 0 1
65967: NOT
65968: PUSH
65969: LD_VAR 0 2
65973: NOT
65974: OR
65975: PUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: CALL_OW 314
65985: OR
65986: IFFALSE 65990
// exit ;
65988: GO 66457
// if GetLives ( i ) < 250 then
65990: LD_VAR 0 4
65994: PPUSH
65995: CALL_OW 256
65999: PUSH
66000: LD_INT 250
66002: LESS
66003: IFFALSE 66016
// begin ComAutodestruct ( i ) ;
66005: LD_VAR 0 4
66009: PPUSH
66010: CALL 65853 0 1
// exit ;
66014: GO 66457
// end ; x := GetX ( enemy_unit ) ;
66016: LD_ADDR_VAR 0 7
66020: PUSH
66021: LD_VAR 0 2
66025: PPUSH
66026: CALL_OW 250
66030: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66031: LD_ADDR_VAR 0 8
66035: PUSH
66036: LD_VAR 0 2
66040: PPUSH
66041: CALL_OW 251
66045: ST_TO_ADDR
// if not x or not y then
66046: LD_VAR 0 7
66050: NOT
66051: PUSH
66052: LD_VAR 0 8
66056: NOT
66057: OR
66058: IFFALSE 66062
// exit ;
66060: GO 66457
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66062: LD_ADDR_VAR 0 6
66066: PUSH
66067: LD_VAR 0 7
66071: PPUSH
66072: LD_INT 0
66074: PPUSH
66075: LD_INT 4
66077: PPUSH
66078: CALL_OW 272
66082: PUSH
66083: LD_VAR 0 8
66087: PPUSH
66088: LD_INT 0
66090: PPUSH
66091: LD_INT 4
66093: PPUSH
66094: CALL_OW 273
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_VAR 0 7
66107: PPUSH
66108: LD_INT 1
66110: PPUSH
66111: LD_INT 4
66113: PPUSH
66114: CALL_OW 272
66118: PUSH
66119: LD_VAR 0 8
66123: PPUSH
66124: LD_INT 1
66126: PPUSH
66127: LD_INT 4
66129: PPUSH
66130: CALL_OW 273
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_VAR 0 7
66143: PPUSH
66144: LD_INT 2
66146: PPUSH
66147: LD_INT 4
66149: PPUSH
66150: CALL_OW 272
66154: PUSH
66155: LD_VAR 0 8
66159: PPUSH
66160: LD_INT 2
66162: PPUSH
66163: LD_INT 4
66165: PPUSH
66166: CALL_OW 273
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_VAR 0 7
66179: PPUSH
66180: LD_INT 3
66182: PPUSH
66183: LD_INT 4
66185: PPUSH
66186: CALL_OW 272
66190: PUSH
66191: LD_VAR 0 8
66195: PPUSH
66196: LD_INT 3
66198: PPUSH
66199: LD_INT 4
66201: PPUSH
66202: CALL_OW 273
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_VAR 0 7
66215: PPUSH
66216: LD_INT 4
66218: PPUSH
66219: LD_INT 4
66221: PPUSH
66222: CALL_OW 272
66226: PUSH
66227: LD_VAR 0 8
66231: PPUSH
66232: LD_INT 4
66234: PPUSH
66235: LD_INT 4
66237: PPUSH
66238: CALL_OW 273
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_VAR 0 7
66251: PPUSH
66252: LD_INT 5
66254: PPUSH
66255: LD_INT 4
66257: PPUSH
66258: CALL_OW 272
66262: PUSH
66263: LD_VAR 0 8
66267: PPUSH
66268: LD_INT 5
66270: PPUSH
66271: LD_INT 4
66273: PPUSH
66274: CALL_OW 273
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: ST_TO_ADDR
// for i = tmp downto 1 do
66291: LD_ADDR_VAR 0 4
66295: PUSH
66296: DOUBLE
66297: LD_VAR 0 6
66301: INC
66302: ST_TO_ADDR
66303: LD_INT 1
66305: PUSH
66306: FOR_DOWNTO
66307: IFFALSE 66408
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66309: LD_VAR 0 6
66313: PUSH
66314: LD_VAR 0 4
66318: ARRAY
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: PPUSH
66324: LD_VAR 0 6
66328: PUSH
66329: LD_VAR 0 4
66333: ARRAY
66334: PUSH
66335: LD_INT 2
66337: ARRAY
66338: PPUSH
66339: CALL_OW 488
66343: NOT
66344: PUSH
66345: LD_VAR 0 6
66349: PUSH
66350: LD_VAR 0 4
66354: ARRAY
66355: PUSH
66356: LD_INT 1
66358: ARRAY
66359: PPUSH
66360: LD_VAR 0 6
66364: PUSH
66365: LD_VAR 0 4
66369: ARRAY
66370: PUSH
66371: LD_INT 2
66373: ARRAY
66374: PPUSH
66375: CALL_OW 428
66379: PUSH
66380: LD_INT 0
66382: NONEQUAL
66383: OR
66384: IFFALSE 66406
// tmp := Delete ( tmp , i ) ;
66386: LD_ADDR_VAR 0 6
66390: PUSH
66391: LD_VAR 0 6
66395: PPUSH
66396: LD_VAR 0 4
66400: PPUSH
66401: CALL_OW 3
66405: ST_TO_ADDR
66406: GO 66306
66408: POP
66409: POP
// j := GetClosestHex ( unit , tmp ) ;
66410: LD_ADDR_VAR 0 5
66414: PUSH
66415: LD_VAR 0 1
66419: PPUSH
66420: LD_VAR 0 6
66424: PPUSH
66425: CALL 65701 0 2
66429: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66430: LD_VAR 0 1
66434: PPUSH
66435: LD_VAR 0 5
66439: PUSH
66440: LD_INT 1
66442: ARRAY
66443: PPUSH
66444: LD_VAR 0 5
66448: PUSH
66449: LD_INT 2
66451: ARRAY
66452: PPUSH
66453: CALL_OW 111
// end ;
66457: LD_VAR 0 3
66461: RET
// export function PrepareApemanSoldier ( ) ; begin
66462: LD_INT 0
66464: PPUSH
// uc_nation := 0 ;
66465: LD_ADDR_OWVAR 21
66469: PUSH
66470: LD_INT 0
66472: ST_TO_ADDR
// hc_sex := sex_male ;
66473: LD_ADDR_OWVAR 27
66477: PUSH
66478: LD_INT 1
66480: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66481: LD_ADDR_OWVAR 28
66485: PUSH
66486: LD_INT 15
66488: ST_TO_ADDR
// hc_gallery :=  ;
66489: LD_ADDR_OWVAR 33
66493: PUSH
66494: LD_STRING 
66496: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66497: LD_ADDR_OWVAR 31
66501: PUSH
66502: LD_INT 0
66504: PPUSH
66505: LD_INT 3
66507: PPUSH
66508: CALL_OW 12
66512: PUSH
66513: LD_INT 0
66515: PPUSH
66516: LD_INT 3
66518: PPUSH
66519: CALL_OW 12
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: ST_TO_ADDR
// end ;
66536: LD_VAR 0 1
66540: RET
// export function PrepareApemanEngineer ( ) ; begin
66541: LD_INT 0
66543: PPUSH
// uc_nation := 0 ;
66544: LD_ADDR_OWVAR 21
66548: PUSH
66549: LD_INT 0
66551: ST_TO_ADDR
// hc_sex := sex_male ;
66552: LD_ADDR_OWVAR 27
66556: PUSH
66557: LD_INT 1
66559: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66560: LD_ADDR_OWVAR 28
66564: PUSH
66565: LD_INT 16
66567: ST_TO_ADDR
// hc_gallery :=  ;
66568: LD_ADDR_OWVAR 33
66572: PUSH
66573: LD_STRING 
66575: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66576: LD_ADDR_OWVAR 31
66580: PUSH
66581: LD_INT 0
66583: PPUSH
66584: LD_INT 3
66586: PPUSH
66587: CALL_OW 12
66591: PUSH
66592: LD_INT 0
66594: PPUSH
66595: LD_INT 3
66597: PPUSH
66598: CALL_OW 12
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: ST_TO_ADDR
// end ;
66615: LD_VAR 0 1
66619: RET
// export function PrepareApeman ( agressivity ) ; begin
66620: LD_INT 0
66622: PPUSH
// uc_side := 0 ;
66623: LD_ADDR_OWVAR 20
66627: PUSH
66628: LD_INT 0
66630: ST_TO_ADDR
// uc_nation := 0 ;
66631: LD_ADDR_OWVAR 21
66635: PUSH
66636: LD_INT 0
66638: ST_TO_ADDR
// hc_sex := sex_male ;
66639: LD_ADDR_OWVAR 27
66643: PUSH
66644: LD_INT 1
66646: ST_TO_ADDR
// hc_class := class_apeman ;
66647: LD_ADDR_OWVAR 28
66651: PUSH
66652: LD_INT 12
66654: ST_TO_ADDR
// hc_gallery :=  ;
66655: LD_ADDR_OWVAR 33
66659: PUSH
66660: LD_STRING 
66662: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66663: LD_ADDR_OWVAR 35
66667: PUSH
66668: LD_VAR 0 1
66672: NEG
66673: PPUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: CALL_OW 12
66683: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66684: LD_ADDR_OWVAR 31
66688: PUSH
66689: LD_INT 0
66691: PPUSH
66692: LD_INT 3
66694: PPUSH
66695: CALL_OW 12
66699: PUSH
66700: LD_INT 0
66702: PPUSH
66703: LD_INT 3
66705: PPUSH
66706: CALL_OW 12
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// end ;
66723: LD_VAR 0 2
66727: RET
// export function PrepareTiger ( agressivity ) ; begin
66728: LD_INT 0
66730: PPUSH
// uc_side := 0 ;
66731: LD_ADDR_OWVAR 20
66735: PUSH
66736: LD_INT 0
66738: ST_TO_ADDR
// uc_nation := 0 ;
66739: LD_ADDR_OWVAR 21
66743: PUSH
66744: LD_INT 0
66746: ST_TO_ADDR
// hc_class := class_tiger ;
66747: LD_ADDR_OWVAR 28
66751: PUSH
66752: LD_INT 14
66754: ST_TO_ADDR
// hc_gallery :=  ;
66755: LD_ADDR_OWVAR 33
66759: PUSH
66760: LD_STRING 
66762: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66763: LD_ADDR_OWVAR 35
66767: PUSH
66768: LD_VAR 0 1
66772: NEG
66773: PPUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 12
66783: ST_TO_ADDR
// end ;
66784: LD_VAR 0 2
66788: RET
// export function PrepareEnchidna ( ) ; begin
66789: LD_INT 0
66791: PPUSH
// uc_side := 0 ;
66792: LD_ADDR_OWVAR 20
66796: PUSH
66797: LD_INT 0
66799: ST_TO_ADDR
// uc_nation := 0 ;
66800: LD_ADDR_OWVAR 21
66804: PUSH
66805: LD_INT 0
66807: ST_TO_ADDR
// hc_class := class_baggie ;
66808: LD_ADDR_OWVAR 28
66812: PUSH
66813: LD_INT 13
66815: ST_TO_ADDR
// hc_gallery :=  ;
66816: LD_ADDR_OWVAR 33
66820: PUSH
66821: LD_STRING 
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 1
66828: RET
// export function PrepareFrog ( ) ; begin
66829: LD_INT 0
66831: PPUSH
// uc_side := 0 ;
66832: LD_ADDR_OWVAR 20
66836: PUSH
66837: LD_INT 0
66839: ST_TO_ADDR
// uc_nation := 0 ;
66840: LD_ADDR_OWVAR 21
66844: PUSH
66845: LD_INT 0
66847: ST_TO_ADDR
// hc_class := class_frog ;
66848: LD_ADDR_OWVAR 28
66852: PUSH
66853: LD_INT 19
66855: ST_TO_ADDR
// hc_gallery :=  ;
66856: LD_ADDR_OWVAR 33
66860: PUSH
66861: LD_STRING 
66863: ST_TO_ADDR
// end ;
66864: LD_VAR 0 1
66868: RET
// export function PrepareFish ( ) ; begin
66869: LD_INT 0
66871: PPUSH
// uc_side := 0 ;
66872: LD_ADDR_OWVAR 20
66876: PUSH
66877: LD_INT 0
66879: ST_TO_ADDR
// uc_nation := 0 ;
66880: LD_ADDR_OWVAR 21
66884: PUSH
66885: LD_INT 0
66887: ST_TO_ADDR
// hc_class := class_fish ;
66888: LD_ADDR_OWVAR 28
66892: PUSH
66893: LD_INT 20
66895: ST_TO_ADDR
// hc_gallery :=  ;
66896: LD_ADDR_OWVAR 33
66900: PUSH
66901: LD_STRING 
66903: ST_TO_ADDR
// end ;
66904: LD_VAR 0 1
66908: RET
// export function PrepareBird ( ) ; begin
66909: LD_INT 0
66911: PPUSH
// uc_side := 0 ;
66912: LD_ADDR_OWVAR 20
66916: PUSH
66917: LD_INT 0
66919: ST_TO_ADDR
// uc_nation := 0 ;
66920: LD_ADDR_OWVAR 21
66924: PUSH
66925: LD_INT 0
66927: ST_TO_ADDR
// hc_class := class_phororhacos ;
66928: LD_ADDR_OWVAR 28
66932: PUSH
66933: LD_INT 18
66935: ST_TO_ADDR
// hc_gallery :=  ;
66936: LD_ADDR_OWVAR 33
66940: PUSH
66941: LD_STRING 
66943: ST_TO_ADDR
// end ;
66944: LD_VAR 0 1
66948: RET
// export function PrepareHorse ( ) ; begin
66949: LD_INT 0
66951: PPUSH
// uc_side := 0 ;
66952: LD_ADDR_OWVAR 20
66956: PUSH
66957: LD_INT 0
66959: ST_TO_ADDR
// uc_nation := 0 ;
66960: LD_ADDR_OWVAR 21
66964: PUSH
66965: LD_INT 0
66967: ST_TO_ADDR
// hc_class := class_horse ;
66968: LD_ADDR_OWVAR 28
66972: PUSH
66973: LD_INT 21
66975: ST_TO_ADDR
// hc_gallery :=  ;
66976: LD_ADDR_OWVAR 33
66980: PUSH
66981: LD_STRING 
66983: ST_TO_ADDR
// end ;
66984: LD_VAR 0 1
66988: RET
// export function PrepareMastodont ( ) ; begin
66989: LD_INT 0
66991: PPUSH
// uc_side := 0 ;
66992: LD_ADDR_OWVAR 20
66996: PUSH
66997: LD_INT 0
66999: ST_TO_ADDR
// uc_nation := 0 ;
67000: LD_ADDR_OWVAR 21
67004: PUSH
67005: LD_INT 0
67007: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67008: LD_ADDR_OWVAR 37
67012: PUSH
67013: LD_INT 31
67015: ST_TO_ADDR
// vc_control := control_rider ;
67016: LD_ADDR_OWVAR 38
67020: PUSH
67021: LD_INT 4
67023: ST_TO_ADDR
// end ;
67024: LD_VAR 0 1
67028: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67029: LD_INT 0
67031: PPUSH
67032: PPUSH
67033: PPUSH
// uc_side = 0 ;
67034: LD_ADDR_OWVAR 20
67038: PUSH
67039: LD_INT 0
67041: ST_TO_ADDR
// uc_nation = 0 ;
67042: LD_ADDR_OWVAR 21
67046: PUSH
67047: LD_INT 0
67049: ST_TO_ADDR
// InitHc_All ( ) ;
67050: CALL_OW 584
// InitVc ;
67054: CALL_OW 20
// if mastodonts then
67058: LD_VAR 0 6
67062: IFFALSE 67129
// for i = 1 to mastodonts do
67064: LD_ADDR_VAR 0 11
67068: PUSH
67069: DOUBLE
67070: LD_INT 1
67072: DEC
67073: ST_TO_ADDR
67074: LD_VAR 0 6
67078: PUSH
67079: FOR_TO
67080: IFFALSE 67127
// begin vc_chassis := 31 ;
67082: LD_ADDR_OWVAR 37
67086: PUSH
67087: LD_INT 31
67089: ST_TO_ADDR
// vc_control := control_rider ;
67090: LD_ADDR_OWVAR 38
67094: PUSH
67095: LD_INT 4
67097: ST_TO_ADDR
// animal := CreateVehicle ;
67098: LD_ADDR_VAR 0 12
67102: PUSH
67103: CALL_OW 45
67107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67108: LD_VAR 0 12
67112: PPUSH
67113: LD_VAR 0 8
67117: PPUSH
67118: LD_INT 0
67120: PPUSH
67121: CALL 69257 0 3
// end ;
67125: GO 67079
67127: POP
67128: POP
// if horses then
67129: LD_VAR 0 5
67133: IFFALSE 67200
// for i = 1 to horses do
67135: LD_ADDR_VAR 0 11
67139: PUSH
67140: DOUBLE
67141: LD_INT 1
67143: DEC
67144: ST_TO_ADDR
67145: LD_VAR 0 5
67149: PUSH
67150: FOR_TO
67151: IFFALSE 67198
// begin hc_class := 21 ;
67153: LD_ADDR_OWVAR 28
67157: PUSH
67158: LD_INT 21
67160: ST_TO_ADDR
// hc_gallery :=  ;
67161: LD_ADDR_OWVAR 33
67165: PUSH
67166: LD_STRING 
67168: ST_TO_ADDR
// animal := CreateHuman ;
67169: LD_ADDR_VAR 0 12
67173: PUSH
67174: CALL_OW 44
67178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67179: LD_VAR 0 12
67183: PPUSH
67184: LD_VAR 0 8
67188: PPUSH
67189: LD_INT 0
67191: PPUSH
67192: CALL 69257 0 3
// end ;
67196: GO 67150
67198: POP
67199: POP
// if birds then
67200: LD_VAR 0 1
67204: IFFALSE 67271
// for i = 1 to birds do
67206: LD_ADDR_VAR 0 11
67210: PUSH
67211: DOUBLE
67212: LD_INT 1
67214: DEC
67215: ST_TO_ADDR
67216: LD_VAR 0 1
67220: PUSH
67221: FOR_TO
67222: IFFALSE 67269
// begin hc_class = 18 ;
67224: LD_ADDR_OWVAR 28
67228: PUSH
67229: LD_INT 18
67231: ST_TO_ADDR
// hc_gallery =  ;
67232: LD_ADDR_OWVAR 33
67236: PUSH
67237: LD_STRING 
67239: ST_TO_ADDR
// animal := CreateHuman ;
67240: LD_ADDR_VAR 0 12
67244: PUSH
67245: CALL_OW 44
67249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67250: LD_VAR 0 12
67254: PPUSH
67255: LD_VAR 0 8
67259: PPUSH
67260: LD_INT 0
67262: PPUSH
67263: CALL 69257 0 3
// end ;
67267: GO 67221
67269: POP
67270: POP
// if tigers then
67271: LD_VAR 0 2
67275: IFFALSE 67359
// for i = 1 to tigers do
67277: LD_ADDR_VAR 0 11
67281: PUSH
67282: DOUBLE
67283: LD_INT 1
67285: DEC
67286: ST_TO_ADDR
67287: LD_VAR 0 2
67291: PUSH
67292: FOR_TO
67293: IFFALSE 67357
// begin hc_class = class_tiger ;
67295: LD_ADDR_OWVAR 28
67299: PUSH
67300: LD_INT 14
67302: ST_TO_ADDR
// hc_gallery =  ;
67303: LD_ADDR_OWVAR 33
67307: PUSH
67308: LD_STRING 
67310: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67311: LD_ADDR_OWVAR 35
67315: PUSH
67316: LD_INT 7
67318: NEG
67319: PPUSH
67320: LD_INT 7
67322: PPUSH
67323: CALL_OW 12
67327: ST_TO_ADDR
// animal := CreateHuman ;
67328: LD_ADDR_VAR 0 12
67332: PUSH
67333: CALL_OW 44
67337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67338: LD_VAR 0 12
67342: PPUSH
67343: LD_VAR 0 8
67347: PPUSH
67348: LD_INT 0
67350: PPUSH
67351: CALL 69257 0 3
// end ;
67355: GO 67292
67357: POP
67358: POP
// if apemans then
67359: LD_VAR 0 3
67363: IFFALSE 67486
// for i = 1 to apemans do
67365: LD_ADDR_VAR 0 11
67369: PUSH
67370: DOUBLE
67371: LD_INT 1
67373: DEC
67374: ST_TO_ADDR
67375: LD_VAR 0 3
67379: PUSH
67380: FOR_TO
67381: IFFALSE 67484
// begin hc_class = class_apeman ;
67383: LD_ADDR_OWVAR 28
67387: PUSH
67388: LD_INT 12
67390: ST_TO_ADDR
// hc_gallery =  ;
67391: LD_ADDR_OWVAR 33
67395: PUSH
67396: LD_STRING 
67398: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67399: LD_ADDR_OWVAR 35
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PPUSH
67408: LD_INT 2
67410: PPUSH
67411: CALL_OW 12
67415: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67416: LD_ADDR_OWVAR 31
67420: PUSH
67421: LD_INT 1
67423: PPUSH
67424: LD_INT 3
67426: PPUSH
67427: CALL_OW 12
67431: PUSH
67432: LD_INT 1
67434: PPUSH
67435: LD_INT 3
67437: PPUSH
67438: CALL_OW 12
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// animal := CreateHuman ;
67455: LD_ADDR_VAR 0 12
67459: PUSH
67460: CALL_OW 44
67464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67465: LD_VAR 0 12
67469: PPUSH
67470: LD_VAR 0 8
67474: PPUSH
67475: LD_INT 0
67477: PPUSH
67478: CALL 69257 0 3
// end ;
67482: GO 67380
67484: POP
67485: POP
// if enchidnas then
67486: LD_VAR 0 4
67490: IFFALSE 67557
// for i = 1 to enchidnas do
67492: LD_ADDR_VAR 0 11
67496: PUSH
67497: DOUBLE
67498: LD_INT 1
67500: DEC
67501: ST_TO_ADDR
67502: LD_VAR 0 4
67506: PUSH
67507: FOR_TO
67508: IFFALSE 67555
// begin hc_class = 13 ;
67510: LD_ADDR_OWVAR 28
67514: PUSH
67515: LD_INT 13
67517: ST_TO_ADDR
// hc_gallery =  ;
67518: LD_ADDR_OWVAR 33
67522: PUSH
67523: LD_STRING 
67525: ST_TO_ADDR
// animal := CreateHuman ;
67526: LD_ADDR_VAR 0 12
67530: PUSH
67531: CALL_OW 44
67535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67536: LD_VAR 0 12
67540: PPUSH
67541: LD_VAR 0 8
67545: PPUSH
67546: LD_INT 0
67548: PPUSH
67549: CALL 69257 0 3
// end ;
67553: GO 67507
67555: POP
67556: POP
// if fishes then
67557: LD_VAR 0 7
67561: IFFALSE 67628
// for i = 1 to fishes do
67563: LD_ADDR_VAR 0 11
67567: PUSH
67568: DOUBLE
67569: LD_INT 1
67571: DEC
67572: ST_TO_ADDR
67573: LD_VAR 0 7
67577: PUSH
67578: FOR_TO
67579: IFFALSE 67626
// begin hc_class = 20 ;
67581: LD_ADDR_OWVAR 28
67585: PUSH
67586: LD_INT 20
67588: ST_TO_ADDR
// hc_gallery =  ;
67589: LD_ADDR_OWVAR 33
67593: PUSH
67594: LD_STRING 
67596: ST_TO_ADDR
// animal := CreateHuman ;
67597: LD_ADDR_VAR 0 12
67601: PUSH
67602: CALL_OW 44
67606: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67607: LD_VAR 0 12
67611: PPUSH
67612: LD_VAR 0 9
67616: PPUSH
67617: LD_INT 0
67619: PPUSH
67620: CALL 69257 0 3
// end ;
67624: GO 67578
67626: POP
67627: POP
// end ;
67628: LD_VAR 0 10
67632: RET
// export function WantHeal ( sci , unit ) ; begin
67633: LD_INT 0
67635: PPUSH
// if GetTaskList ( sci ) > 0 then
67636: LD_VAR 0 1
67640: PPUSH
67641: CALL_OW 437
67645: PUSH
67646: LD_INT 0
67648: GREATER
67649: IFFALSE 67719
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL_OW 437
67660: PUSH
67661: LD_INT 1
67663: ARRAY
67664: PUSH
67665: LD_INT 1
67667: ARRAY
67668: PUSH
67669: LD_STRING l
67671: EQUAL
67672: PUSH
67673: LD_VAR 0 1
67677: PPUSH
67678: CALL_OW 437
67682: PUSH
67683: LD_INT 1
67685: ARRAY
67686: PUSH
67687: LD_INT 4
67689: ARRAY
67690: PUSH
67691: LD_VAR 0 2
67695: EQUAL
67696: AND
67697: IFFALSE 67709
// result := true else
67699: LD_ADDR_VAR 0 3
67703: PUSH
67704: LD_INT 1
67706: ST_TO_ADDR
67707: GO 67717
// result := false ;
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: LD_INT 0
67716: ST_TO_ADDR
// end else
67717: GO 67727
// result := false ;
67719: LD_ADDR_VAR 0 3
67723: PUSH
67724: LD_INT 0
67726: ST_TO_ADDR
// end ;
67727: LD_VAR 0 3
67731: RET
// export function HealTarget ( sci ) ; begin
67732: LD_INT 0
67734: PPUSH
// if not sci then
67735: LD_VAR 0 1
67739: NOT
67740: IFFALSE 67744
// exit ;
67742: GO 67809
// result := 0 ;
67744: LD_ADDR_VAR 0 2
67748: PUSH
67749: LD_INT 0
67751: ST_TO_ADDR
// if GetTaskList ( sci ) then
67752: LD_VAR 0 1
67756: PPUSH
67757: CALL_OW 437
67761: IFFALSE 67809
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67763: LD_VAR 0 1
67767: PPUSH
67768: CALL_OW 437
67772: PUSH
67773: LD_INT 1
67775: ARRAY
67776: PUSH
67777: LD_INT 1
67779: ARRAY
67780: PUSH
67781: LD_STRING l
67783: EQUAL
67784: IFFALSE 67809
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67786: LD_ADDR_VAR 0 2
67790: PUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: CALL_OW 437
67800: PUSH
67801: LD_INT 1
67803: ARRAY
67804: PUSH
67805: LD_INT 4
67807: ARRAY
67808: ST_TO_ADDR
// end ;
67809: LD_VAR 0 2
67813: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67814: LD_INT 0
67816: PPUSH
67817: PPUSH
67818: PPUSH
67819: PPUSH
// if not base_units then
67820: LD_VAR 0 1
67824: NOT
67825: IFFALSE 67829
// exit ;
67827: GO 67916
// result := false ;
67829: LD_ADDR_VAR 0 2
67833: PUSH
67834: LD_INT 0
67836: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67837: LD_ADDR_VAR 0 5
67841: PUSH
67842: LD_VAR 0 1
67846: PPUSH
67847: LD_INT 21
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PPUSH
67857: CALL_OW 72
67861: ST_TO_ADDR
// if not tmp then
67862: LD_VAR 0 5
67866: NOT
67867: IFFALSE 67871
// exit ;
67869: GO 67916
// for i in tmp do
67871: LD_ADDR_VAR 0 3
67875: PUSH
67876: LD_VAR 0 5
67880: PUSH
67881: FOR_IN
67882: IFFALSE 67914
// begin result := EnemyInRange ( i , 22 ) ;
67884: LD_ADDR_VAR 0 2
67888: PUSH
67889: LD_VAR 0 3
67893: PPUSH
67894: LD_INT 22
67896: PPUSH
67897: CALL 65503 0 2
67901: ST_TO_ADDR
// if result then
67902: LD_VAR 0 2
67906: IFFALSE 67912
// exit ;
67908: POP
67909: POP
67910: GO 67916
// end ;
67912: GO 67881
67914: POP
67915: POP
// end ;
67916: LD_VAR 0 2
67920: RET
// export function FilterByTag ( units , tag ) ; begin
67921: LD_INT 0
67923: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67924: LD_ADDR_VAR 0 3
67928: PUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: LD_INT 120
67936: PUSH
67937: LD_VAR 0 2
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PPUSH
67946: CALL_OW 72
67950: ST_TO_ADDR
// end ;
67951: LD_VAR 0 3
67955: RET
// export function IsDriver ( un ) ; begin
67956: LD_INT 0
67958: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67959: LD_ADDR_VAR 0 2
67963: PUSH
67964: LD_VAR 0 1
67968: PUSH
67969: LD_INT 55
67971: PUSH
67972: EMPTY
67973: LIST
67974: PPUSH
67975: CALL_OW 69
67979: IN
67980: ST_TO_ADDR
// end ;
67981: LD_VAR 0 2
67985: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67986: LD_INT 0
67988: PPUSH
67989: PPUSH
// list := [ ] ;
67990: LD_ADDR_VAR 0 5
67994: PUSH
67995: EMPTY
67996: ST_TO_ADDR
// case d of 0 :
67997: LD_VAR 0 3
68001: PUSH
68002: LD_INT 0
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68010
68008: GO 68143
68010: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: LD_VAR 0 1
68020: PUSH
68021: LD_INT 4
68023: MINUS
68024: PUSH
68025: LD_VAR 0 2
68029: PUSH
68030: LD_INT 4
68032: MINUS
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: LD_VAR 0 1
68046: PUSH
68047: LD_INT 3
68049: MINUS
68050: PUSH
68051: LD_VAR 0 2
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: PUSH
68064: LD_VAR 0 1
68068: PUSH
68069: LD_INT 4
68071: PLUS
68072: PUSH
68073: LD_VAR 0 2
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: PUSH
68086: LD_VAR 0 1
68090: PUSH
68091: LD_INT 3
68093: PLUS
68094: PUSH
68095: LD_VAR 0 2
68099: PUSH
68100: LD_INT 3
68102: PLUS
68103: PUSH
68104: LD_INT 5
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: LD_VAR 0 1
68116: PUSH
68117: LD_VAR 0 2
68121: PUSH
68122: LD_INT 4
68124: PLUS
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// end ; 1 :
68141: GO 68841
68143: LD_INT 1
68145: DOUBLE
68146: EQUAL
68147: IFTRUE 68151
68149: GO 68284
68151: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68152: LD_ADDR_VAR 0 5
68156: PUSH
68157: LD_VAR 0 1
68161: PUSH
68162: LD_VAR 0 2
68166: PUSH
68167: LD_INT 4
68169: MINUS
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: PUSH
68179: LD_VAR 0 1
68183: PUSH
68184: LD_INT 3
68186: MINUS
68187: PUSH
68188: LD_VAR 0 2
68192: PUSH
68193: LD_INT 3
68195: MINUS
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: PUSH
68205: LD_VAR 0 1
68209: PUSH
68210: LD_INT 4
68212: MINUS
68213: PUSH
68214: LD_VAR 0 2
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: LIST
68226: PUSH
68227: LD_VAR 0 1
68231: PUSH
68232: LD_VAR 0 2
68236: PUSH
68237: LD_INT 3
68239: PLUS
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: PUSH
68249: LD_VAR 0 1
68253: PUSH
68254: LD_INT 4
68256: PLUS
68257: PUSH
68258: LD_VAR 0 2
68262: PUSH
68263: LD_INT 4
68265: PLUS
68266: PUSH
68267: LD_INT 5
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// end ; 2 :
68282: GO 68841
68284: LD_INT 2
68286: DOUBLE
68287: EQUAL
68288: IFTRUE 68292
68290: GO 68421
68292: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68293: LD_ADDR_VAR 0 5
68297: PUSH
68298: LD_VAR 0 1
68302: PUSH
68303: LD_VAR 0 2
68307: PUSH
68308: LD_INT 3
68310: MINUS
68311: PUSH
68312: LD_INT 3
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: PUSH
68320: LD_VAR 0 1
68324: PUSH
68325: LD_INT 4
68327: PLUS
68328: PUSH
68329: LD_VAR 0 2
68333: PUSH
68334: LD_INT 4
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: LIST
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: LD_VAR 0 2
68351: PUSH
68352: LD_INT 4
68354: PLUS
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: PUSH
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 3
68371: MINUS
68372: PUSH
68373: LD_VAR 0 2
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: PUSH
68386: LD_VAR 0 1
68390: PUSH
68391: LD_INT 4
68393: MINUS
68394: PUSH
68395: LD_VAR 0 2
68399: PUSH
68400: LD_INT 4
68402: MINUS
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: ST_TO_ADDR
// end ; 3 :
68419: GO 68841
68421: LD_INT 3
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68429
68427: GO 68562
68429: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68430: LD_ADDR_VAR 0 5
68434: PUSH
68435: LD_VAR 0 1
68439: PUSH
68440: LD_INT 3
68442: PLUS
68443: PUSH
68444: LD_VAR 0 2
68448: PUSH
68449: LD_INT 4
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: PUSH
68457: LD_VAR 0 1
68461: PUSH
68462: LD_INT 4
68464: PLUS
68465: PUSH
68466: LD_VAR 0 2
68470: PUSH
68471: LD_INT 4
68473: PLUS
68474: PUSH
68475: LD_INT 5
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: LIST
68482: PUSH
68483: LD_VAR 0 1
68487: PUSH
68488: LD_INT 4
68490: MINUS
68491: PUSH
68492: LD_VAR 0 2
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: LD_VAR 0 1
68509: PUSH
68510: LD_VAR 0 2
68514: PUSH
68515: LD_INT 4
68517: MINUS
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: LIST
68526: PUSH
68527: LD_VAR 0 1
68531: PUSH
68532: LD_INT 3
68534: MINUS
68535: PUSH
68536: LD_VAR 0 2
68540: PUSH
68541: LD_INT 3
68543: MINUS
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: LIST
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: ST_TO_ADDR
// end ; 4 :
68560: GO 68841
68562: LD_INT 4
68564: DOUBLE
68565: EQUAL
68566: IFTRUE 68570
68568: GO 68703
68570: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68571: LD_ADDR_VAR 0 5
68575: PUSH
68576: LD_VAR 0 1
68580: PUSH
68581: LD_VAR 0 2
68585: PUSH
68586: LD_INT 4
68588: PLUS
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: LIST
68597: PUSH
68598: LD_VAR 0 1
68602: PUSH
68603: LD_INT 3
68605: PLUS
68606: PUSH
68607: LD_VAR 0 2
68611: PUSH
68612: LD_INT 3
68614: PLUS
68615: PUSH
68616: LD_INT 5
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: LIST
68623: PUSH
68624: LD_VAR 0 1
68628: PUSH
68629: LD_INT 4
68631: PLUS
68632: PUSH
68633: LD_VAR 0 2
68637: PUSH
68638: LD_INT 4
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: LIST
68645: PUSH
68646: LD_VAR 0 1
68650: PUSH
68651: LD_VAR 0 2
68655: PUSH
68656: LD_INT 3
68658: MINUS
68659: PUSH
68660: LD_INT 3
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: LIST
68667: PUSH
68668: LD_VAR 0 1
68672: PUSH
68673: LD_INT 4
68675: MINUS
68676: PUSH
68677: LD_VAR 0 2
68681: PUSH
68682: LD_INT 4
68684: MINUS
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: LIST
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: ST_TO_ADDR
// end ; 5 :
68701: GO 68841
68703: LD_INT 5
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68711
68709: GO 68840
68711: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68712: LD_ADDR_VAR 0 5
68716: PUSH
68717: LD_VAR 0 1
68721: PUSH
68722: LD_INT 4
68724: MINUS
68725: PUSH
68726: LD_VAR 0 2
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: PUSH
68739: LD_VAR 0 1
68743: PUSH
68744: LD_VAR 0 2
68748: PUSH
68749: LD_INT 4
68751: MINUS
68752: PUSH
68753: LD_INT 3
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: PUSH
68761: LD_VAR 0 1
68765: PUSH
68766: LD_INT 4
68768: PLUS
68769: PUSH
68770: LD_VAR 0 2
68774: PUSH
68775: LD_INT 4
68777: PLUS
68778: PUSH
68779: LD_INT 5
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: PUSH
68787: LD_VAR 0 1
68791: PUSH
68792: LD_INT 3
68794: PLUS
68795: PUSH
68796: LD_VAR 0 2
68800: PUSH
68801: LD_INT 4
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: LIST
68808: PUSH
68809: LD_VAR 0 1
68813: PUSH
68814: LD_VAR 0 2
68818: PUSH
68819: LD_INT 3
68821: PLUS
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: ST_TO_ADDR
// end ; end ;
68838: GO 68841
68840: POP
// result := list ;
68841: LD_ADDR_VAR 0 4
68845: PUSH
68846: LD_VAR 0 5
68850: ST_TO_ADDR
// end ;
68851: LD_VAR 0 4
68855: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68856: LD_INT 0
68858: PPUSH
68859: PPUSH
68860: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68861: LD_VAR 0 1
68865: NOT
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: LD_INT 4
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: IN
68890: NOT
68891: OR
68892: IFFALSE 68896
// exit ;
68894: GO 68979
// tmp := [ ] ;
68896: LD_ADDR_VAR 0 5
68900: PUSH
68901: EMPTY
68902: ST_TO_ADDR
// for i in units do
68903: LD_ADDR_VAR 0 4
68907: PUSH
68908: LD_VAR 0 1
68912: PUSH
68913: FOR_IN
68914: IFFALSE 68948
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68916: LD_ADDR_VAR 0 5
68920: PUSH
68921: LD_VAR 0 5
68925: PPUSH
68926: LD_VAR 0 4
68930: PPUSH
68931: LD_VAR 0 2
68935: PPUSH
68936: CALL_OW 259
68940: PPUSH
68941: CALL 70339 0 2
68945: ST_TO_ADDR
68946: GO 68913
68948: POP
68949: POP
// if not tmp then
68950: LD_VAR 0 5
68954: NOT
68955: IFFALSE 68959
// exit ;
68957: GO 68979
// result := SortListByListDesc ( units , tmp ) ;
68959: LD_ADDR_VAR 0 3
68963: PUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: LD_VAR 0 5
68973: PPUSH
68974: CALL_OW 77
68978: ST_TO_ADDR
// end ;
68979: LD_VAR 0 3
68983: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68984: LD_INT 0
68986: PPUSH
68987: PPUSH
68988: PPUSH
// result := false ;
68989: LD_ADDR_VAR 0 3
68993: PUSH
68994: LD_INT 0
68996: ST_TO_ADDR
// if not building then
68997: LD_VAR 0 2
69001: NOT
69002: IFFALSE 69006
// exit ;
69004: GO 69144
// x := GetX ( building ) ;
69006: LD_ADDR_VAR 0 4
69010: PUSH
69011: LD_VAR 0 2
69015: PPUSH
69016: CALL_OW 250
69020: ST_TO_ADDR
// y := GetY ( building ) ;
69021: LD_ADDR_VAR 0 5
69025: PUSH
69026: LD_VAR 0 2
69030: PPUSH
69031: CALL_OW 251
69035: ST_TO_ADDR
// if not x or not y then
69036: LD_VAR 0 4
69040: NOT
69041: PUSH
69042: LD_VAR 0 5
69046: NOT
69047: OR
69048: IFFALSE 69052
// exit ;
69050: GO 69144
// if GetTaskList ( unit ) then
69052: LD_VAR 0 1
69056: PPUSH
69057: CALL_OW 437
69061: IFFALSE 69144
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69063: LD_STRING e
69065: PUSH
69066: LD_VAR 0 1
69070: PPUSH
69071: CALL_OW 437
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: EQUAL
69084: PUSH
69085: LD_VAR 0 4
69089: PUSH
69090: LD_VAR 0 1
69094: PPUSH
69095: CALL_OW 437
69099: PUSH
69100: LD_INT 1
69102: ARRAY
69103: PUSH
69104: LD_INT 2
69106: ARRAY
69107: EQUAL
69108: AND
69109: PUSH
69110: LD_VAR 0 5
69114: PUSH
69115: LD_VAR 0 1
69119: PPUSH
69120: CALL_OW 437
69124: PUSH
69125: LD_INT 1
69127: ARRAY
69128: PUSH
69129: LD_INT 3
69131: ARRAY
69132: EQUAL
69133: AND
69134: IFFALSE 69144
// result := true end ;
69136: LD_ADDR_VAR 0 3
69140: PUSH
69141: LD_INT 1
69143: ST_TO_ADDR
// end ;
69144: LD_VAR 0 3
69148: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69149: LD_INT 0
69151: PPUSH
// result := false ;
69152: LD_ADDR_VAR 0 4
69156: PUSH
69157: LD_INT 0
69159: ST_TO_ADDR
// if GetTaskList ( unit ) then
69160: LD_VAR 0 1
69164: PPUSH
69165: CALL_OW 437
69169: IFFALSE 69252
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69171: LD_STRING M
69173: PUSH
69174: LD_VAR 0 1
69178: PPUSH
69179: CALL_OW 437
69183: PUSH
69184: LD_INT 1
69186: ARRAY
69187: PUSH
69188: LD_INT 1
69190: ARRAY
69191: EQUAL
69192: PUSH
69193: LD_VAR 0 2
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 437
69207: PUSH
69208: LD_INT 1
69210: ARRAY
69211: PUSH
69212: LD_INT 2
69214: ARRAY
69215: EQUAL
69216: AND
69217: PUSH
69218: LD_VAR 0 3
69222: PUSH
69223: LD_VAR 0 1
69227: PPUSH
69228: CALL_OW 437
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: PUSH
69237: LD_INT 3
69239: ARRAY
69240: EQUAL
69241: AND
69242: IFFALSE 69252
// result := true ;
69244: LD_ADDR_VAR 0 4
69248: PUSH
69249: LD_INT 1
69251: ST_TO_ADDR
// end ; end ;
69252: LD_VAR 0 4
69256: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69257: LD_INT 0
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
// if not unit or not area then
69263: LD_VAR 0 1
69267: NOT
69268: PUSH
69269: LD_VAR 0 2
69273: NOT
69274: OR
69275: IFFALSE 69279
// exit ;
69277: GO 69442
// tmp := AreaToList ( area , i ) ;
69279: LD_ADDR_VAR 0 6
69283: PUSH
69284: LD_VAR 0 2
69288: PPUSH
69289: LD_VAR 0 5
69293: PPUSH
69294: CALL_OW 517
69298: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69299: LD_ADDR_VAR 0 5
69303: PUSH
69304: DOUBLE
69305: LD_INT 1
69307: DEC
69308: ST_TO_ADDR
69309: LD_VAR 0 6
69313: PUSH
69314: LD_INT 1
69316: ARRAY
69317: PUSH
69318: FOR_TO
69319: IFFALSE 69440
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69321: LD_ADDR_VAR 0 7
69325: PUSH
69326: LD_VAR 0 6
69330: PUSH
69331: LD_INT 1
69333: ARRAY
69334: PUSH
69335: LD_VAR 0 5
69339: ARRAY
69340: PUSH
69341: LD_VAR 0 6
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: PUSH
69350: LD_VAR 0 5
69354: ARRAY
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
69360: LD_INT 92
69362: PUSH
69363: LD_VAR 0 7
69367: PUSH
69368: LD_INT 1
69370: ARRAY
69371: PUSH
69372: LD_VAR 0 7
69376: PUSH
69377: LD_INT 2
69379: ARRAY
69380: PUSH
69381: LD_INT 3
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: PPUSH
69390: CALL_OW 69
69394: PUSH
69395: LD_INT 0
69397: EQUAL
69398: IFFALSE 69438
// begin PlaceUnitArea ( unit , area , mode ) ;
69400: LD_VAR 0 1
69404: PPUSH
69405: LD_VAR 0 2
69409: PPUSH
69410: LD_VAR 0 3
69414: PPUSH
69415: CALL_OW 49
// result := IsPlaced ( unit ) ;
69419: LD_ADDR_VAR 0 4
69423: PUSH
69424: LD_VAR 0 1
69428: PPUSH
69429: CALL_OW 305
69433: ST_TO_ADDR
// exit ;
69434: POP
69435: POP
69436: GO 69442
// end ; end ;
69438: GO 69318
69440: POP
69441: POP
// end ;
69442: LD_VAR 0 4
69446: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69447: LD_INT 0
69449: PPUSH
69450: PPUSH
69451: PPUSH
// if not side or side > 8 then
69452: LD_VAR 0 1
69456: NOT
69457: PUSH
69458: LD_VAR 0 1
69462: PUSH
69463: LD_INT 8
69465: GREATER
69466: OR
69467: IFFALSE 69471
// exit ;
69469: GO 69658
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69471: LD_ADDR_VAR 0 4
69475: PUSH
69476: LD_INT 22
69478: PUSH
69479: LD_VAR 0 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 21
69490: PUSH
69491: LD_INT 3
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PPUSH
69502: CALL_OW 69
69506: ST_TO_ADDR
// if not tmp then
69507: LD_VAR 0 4
69511: NOT
69512: IFFALSE 69516
// exit ;
69514: GO 69658
// enable_addtolog := true ;
69516: LD_ADDR_OWVAR 81
69520: PUSH
69521: LD_INT 1
69523: ST_TO_ADDR
// AddToLog ( [ ) ;
69524: LD_STRING [
69526: PPUSH
69527: CALL_OW 561
// for i in tmp do
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_VAR 0 4
69540: PUSH
69541: FOR_IN
69542: IFFALSE 69649
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69544: LD_STRING [
69546: PUSH
69547: LD_VAR 0 3
69551: PPUSH
69552: CALL_OW 266
69556: STR
69557: PUSH
69558: LD_STRING , 
69560: STR
69561: PUSH
69562: LD_VAR 0 3
69566: PPUSH
69567: CALL_OW 250
69571: STR
69572: PUSH
69573: LD_STRING , 
69575: STR
69576: PUSH
69577: LD_VAR 0 3
69581: PPUSH
69582: CALL_OW 251
69586: STR
69587: PUSH
69588: LD_STRING , 
69590: STR
69591: PUSH
69592: LD_VAR 0 3
69596: PPUSH
69597: CALL_OW 254
69601: STR
69602: PUSH
69603: LD_STRING , 
69605: STR
69606: PUSH
69607: LD_VAR 0 3
69611: PPUSH
69612: LD_INT 1
69614: PPUSH
69615: CALL_OW 268
69619: STR
69620: PUSH
69621: LD_STRING , 
69623: STR
69624: PUSH
69625: LD_VAR 0 3
69629: PPUSH
69630: LD_INT 2
69632: PPUSH
69633: CALL_OW 268
69637: STR
69638: PUSH
69639: LD_STRING ],
69641: STR
69642: PPUSH
69643: CALL_OW 561
// end ;
69647: GO 69541
69649: POP
69650: POP
// AddToLog ( ]; ) ;
69651: LD_STRING ];
69653: PPUSH
69654: CALL_OW 561
// end ;
69658: LD_VAR 0 2
69662: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69663: LD_INT 0
69665: PPUSH
69666: PPUSH
69667: PPUSH
69668: PPUSH
69669: PPUSH
// if not area or not rate or not max then
69670: LD_VAR 0 1
69674: NOT
69675: PUSH
69676: LD_VAR 0 2
69680: NOT
69681: OR
69682: PUSH
69683: LD_VAR 0 4
69687: NOT
69688: OR
69689: IFFALSE 69693
// exit ;
69691: GO 69882
// while 1 do
69693: LD_INT 1
69695: IFFALSE 69882
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69697: LD_ADDR_VAR 0 9
69701: PUSH
69702: LD_VAR 0 1
69706: PPUSH
69707: LD_INT 1
69709: PPUSH
69710: CALL_OW 287
69714: PUSH
69715: LD_INT 10
69717: MUL
69718: ST_TO_ADDR
// r := rate / 10 ;
69719: LD_ADDR_VAR 0 7
69723: PUSH
69724: LD_VAR 0 2
69728: PUSH
69729: LD_INT 10
69731: DIVREAL
69732: ST_TO_ADDR
// time := 1 1$00 ;
69733: LD_ADDR_VAR 0 8
69737: PUSH
69738: LD_INT 2100
69740: ST_TO_ADDR
// if amount < min then
69741: LD_VAR 0 9
69745: PUSH
69746: LD_VAR 0 3
69750: LESS
69751: IFFALSE 69769
// r := r * 2 else
69753: LD_ADDR_VAR 0 7
69757: PUSH
69758: LD_VAR 0 7
69762: PUSH
69763: LD_INT 2
69765: MUL
69766: ST_TO_ADDR
69767: GO 69795
// if amount > max then
69769: LD_VAR 0 9
69773: PUSH
69774: LD_VAR 0 4
69778: GREATER
69779: IFFALSE 69795
// r := r / 2 ;
69781: LD_ADDR_VAR 0 7
69785: PUSH
69786: LD_VAR 0 7
69790: PUSH
69791: LD_INT 2
69793: DIVREAL
69794: ST_TO_ADDR
// time := time / r ;
69795: LD_ADDR_VAR 0 8
69799: PUSH
69800: LD_VAR 0 8
69804: PUSH
69805: LD_VAR 0 7
69809: DIVREAL
69810: ST_TO_ADDR
// if time < 0 then
69811: LD_VAR 0 8
69815: PUSH
69816: LD_INT 0
69818: LESS
69819: IFFALSE 69836
// time := time * - 1 ;
69821: LD_ADDR_VAR 0 8
69825: PUSH
69826: LD_VAR 0 8
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: MUL
69835: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69836: LD_VAR 0 8
69840: PUSH
69841: LD_INT 35
69843: PPUSH
69844: LD_INT 875
69846: PPUSH
69847: CALL_OW 12
69851: PLUS
69852: PPUSH
69853: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69857: LD_INT 1
69859: PPUSH
69860: LD_INT 5
69862: PPUSH
69863: CALL_OW 12
69867: PPUSH
69868: LD_VAR 0 1
69872: PPUSH
69873: LD_INT 1
69875: PPUSH
69876: CALL_OW 55
// end ;
69880: GO 69693
// end ;
69882: LD_VAR 0 5
69886: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69887: LD_INT 0
69889: PPUSH
69890: PPUSH
69891: PPUSH
69892: PPUSH
69893: PPUSH
69894: PPUSH
69895: PPUSH
69896: PPUSH
// if not turrets or not factories then
69897: LD_VAR 0 1
69901: NOT
69902: PUSH
69903: LD_VAR 0 2
69907: NOT
69908: OR
69909: IFFALSE 69913
// exit ;
69911: GO 70220
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69913: LD_ADDR_VAR 0 10
69917: PUSH
69918: LD_INT 5
69920: PUSH
69921: LD_INT 6
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: LD_INT 4
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: LD_INT 5
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 24
69955: PUSH
69956: LD_INT 25
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 23
69965: PUSH
69966: LD_INT 27
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 42
69979: PUSH
69980: LD_INT 43
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 44
69989: PUSH
69990: LD_INT 46
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 45
69999: PUSH
70000: LD_INT 47
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: ST_TO_ADDR
// result := [ ] ;
70017: LD_ADDR_VAR 0 3
70021: PUSH
70022: EMPTY
70023: ST_TO_ADDR
// for i in turrets do
70024: LD_ADDR_VAR 0 4
70028: PUSH
70029: LD_VAR 0 1
70033: PUSH
70034: FOR_IN
70035: IFFALSE 70218
// begin nat := GetNation ( i ) ;
70037: LD_ADDR_VAR 0 7
70041: PUSH
70042: LD_VAR 0 4
70046: PPUSH
70047: CALL_OW 248
70051: ST_TO_ADDR
// weapon := 0 ;
70052: LD_ADDR_VAR 0 8
70056: PUSH
70057: LD_INT 0
70059: ST_TO_ADDR
// if not nat then
70060: LD_VAR 0 7
70064: NOT
70065: IFFALSE 70069
// continue ;
70067: GO 70034
// for j in list [ nat ] do
70069: LD_ADDR_VAR 0 5
70073: PUSH
70074: LD_VAR 0 10
70078: PUSH
70079: LD_VAR 0 7
70083: ARRAY
70084: PUSH
70085: FOR_IN
70086: IFFALSE 70127
// if GetBWeapon ( i ) = j [ 1 ] then
70088: LD_VAR 0 4
70092: PPUSH
70093: CALL_OW 269
70097: PUSH
70098: LD_VAR 0 5
70102: PUSH
70103: LD_INT 1
70105: ARRAY
70106: EQUAL
70107: IFFALSE 70125
// begin weapon := j [ 2 ] ;
70109: LD_ADDR_VAR 0 8
70113: PUSH
70114: LD_VAR 0 5
70118: PUSH
70119: LD_INT 2
70121: ARRAY
70122: ST_TO_ADDR
// break ;
70123: GO 70127
// end ;
70125: GO 70085
70127: POP
70128: POP
// if not weapon then
70129: LD_VAR 0 8
70133: NOT
70134: IFFALSE 70138
// continue ;
70136: GO 70034
// for k in factories do
70138: LD_ADDR_VAR 0 6
70142: PUSH
70143: LD_VAR 0 2
70147: PUSH
70148: FOR_IN
70149: IFFALSE 70214
// begin weapons := AvailableWeaponList ( k ) ;
70151: LD_ADDR_VAR 0 9
70155: PUSH
70156: LD_VAR 0 6
70160: PPUSH
70161: CALL_OW 478
70165: ST_TO_ADDR
// if not weapons then
70166: LD_VAR 0 9
70170: NOT
70171: IFFALSE 70175
// continue ;
70173: GO 70148
// if weapon in weapons then
70175: LD_VAR 0 8
70179: PUSH
70180: LD_VAR 0 9
70184: IN
70185: IFFALSE 70212
// begin result := [ i , weapon ] ;
70187: LD_ADDR_VAR 0 3
70191: PUSH
70192: LD_VAR 0 4
70196: PUSH
70197: LD_VAR 0 8
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: ST_TO_ADDR
// exit ;
70206: POP
70207: POP
70208: POP
70209: POP
70210: GO 70220
// end ; end ;
70212: GO 70148
70214: POP
70215: POP
// end ;
70216: GO 70034
70218: POP
70219: POP
// end ;
70220: LD_VAR 0 3
70224: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70225: LD_INT 0
70227: PPUSH
// if not side or side > 8 then
70228: LD_VAR 0 3
70232: NOT
70233: PUSH
70234: LD_VAR 0 3
70238: PUSH
70239: LD_INT 8
70241: GREATER
70242: OR
70243: IFFALSE 70247
// exit ;
70245: GO 70306
// if not range then
70247: LD_VAR 0 4
70251: NOT
70252: IFFALSE 70263
// range := - 12 ;
70254: LD_ADDR_VAR 0 4
70258: PUSH
70259: LD_INT 12
70261: NEG
70262: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70263: LD_VAR 0 1
70267: PPUSH
70268: LD_VAR 0 2
70272: PPUSH
70273: LD_VAR 0 3
70277: PPUSH
70278: LD_VAR 0 4
70282: PPUSH
70283: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70287: LD_VAR 0 1
70291: PPUSH
70292: LD_VAR 0 2
70296: PPUSH
70297: LD_VAR 0 3
70301: PPUSH
70302: CALL_OW 331
// end ;
70306: LD_VAR 0 5
70310: RET
// export function Video ( mode ) ; begin
70311: LD_INT 0
70313: PPUSH
// ingame_video = mode ;
70314: LD_ADDR_OWVAR 52
70318: PUSH
70319: LD_VAR 0 1
70323: ST_TO_ADDR
// interface_hidden = mode ;
70324: LD_ADDR_OWVAR 54
70328: PUSH
70329: LD_VAR 0 1
70333: ST_TO_ADDR
// end ;
70334: LD_VAR 0 2
70338: RET
// export function Join ( array , element ) ; begin
70339: LD_INT 0
70341: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70342: LD_ADDR_VAR 0 3
70346: PUSH
70347: LD_VAR 0 1
70351: PPUSH
70352: LD_VAR 0 1
70356: PUSH
70357: LD_INT 1
70359: PLUS
70360: PPUSH
70361: LD_VAR 0 2
70365: PPUSH
70366: CALL_OW 1
70370: ST_TO_ADDR
// end ;
70371: LD_VAR 0 3
70375: RET
// export function JoinUnion ( array , element ) ; begin
70376: LD_INT 0
70378: PPUSH
// result := array union element ;
70379: LD_ADDR_VAR 0 3
70383: PUSH
70384: LD_VAR 0 1
70388: PUSH
70389: LD_VAR 0 2
70393: UNION
70394: ST_TO_ADDR
// end ;
70395: LD_VAR 0 3
70399: RET
// export function GetBehemoths ( side ) ; begin
70400: LD_INT 0
70402: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70403: LD_ADDR_VAR 0 2
70407: PUSH
70408: LD_INT 22
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 31
70422: PUSH
70423: LD_INT 25
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PPUSH
70434: CALL_OW 69
70438: ST_TO_ADDR
// end ;
70439: LD_VAR 0 2
70443: RET
// export function Shuffle ( array ) ; var i , index ; begin
70444: LD_INT 0
70446: PPUSH
70447: PPUSH
70448: PPUSH
// result := [ ] ;
70449: LD_ADDR_VAR 0 2
70453: PUSH
70454: EMPTY
70455: ST_TO_ADDR
// if not array then
70456: LD_VAR 0 1
70460: NOT
70461: IFFALSE 70465
// exit ;
70463: GO 70564
// Randomize ;
70465: CALL_OW 10
// for i = array downto 1 do
70469: LD_ADDR_VAR 0 3
70473: PUSH
70474: DOUBLE
70475: LD_VAR 0 1
70479: INC
70480: ST_TO_ADDR
70481: LD_INT 1
70483: PUSH
70484: FOR_DOWNTO
70485: IFFALSE 70562
// begin index := rand ( 1 , array ) ;
70487: LD_ADDR_VAR 0 4
70491: PUSH
70492: LD_INT 1
70494: PPUSH
70495: LD_VAR 0 1
70499: PPUSH
70500: CALL_OW 12
70504: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70505: LD_ADDR_VAR 0 2
70509: PUSH
70510: LD_VAR 0 2
70514: PPUSH
70515: LD_VAR 0 2
70519: PUSH
70520: LD_INT 1
70522: PLUS
70523: PPUSH
70524: LD_VAR 0 1
70528: PUSH
70529: LD_VAR 0 4
70533: ARRAY
70534: PPUSH
70535: CALL_OW 2
70539: ST_TO_ADDR
// array := Delete ( array , index ) ;
70540: LD_ADDR_VAR 0 1
70544: PUSH
70545: LD_VAR 0 1
70549: PPUSH
70550: LD_VAR 0 4
70554: PPUSH
70555: CALL_OW 3
70559: ST_TO_ADDR
// end ;
70560: GO 70484
70562: POP
70563: POP
// end ;
70564: LD_VAR 0 2
70568: RET
// export function GetBaseMaterials ( base ) ; begin
70569: LD_INT 0
70571: PPUSH
// result := [ 0 , 0 , 0 ] ;
70572: LD_ADDR_VAR 0 2
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: LIST
70590: ST_TO_ADDR
// if not base then
70591: LD_VAR 0 1
70595: NOT
70596: IFFALSE 70600
// exit ;
70598: GO 70649
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70600: LD_ADDR_VAR 0 2
70604: PUSH
70605: LD_VAR 0 1
70609: PPUSH
70610: LD_INT 1
70612: PPUSH
70613: CALL_OW 275
70617: PUSH
70618: LD_VAR 0 1
70622: PPUSH
70623: LD_INT 2
70625: PPUSH
70626: CALL_OW 275
70630: PUSH
70631: LD_VAR 0 1
70635: PPUSH
70636: LD_INT 3
70638: PPUSH
70639: CALL_OW 275
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: LIST
70648: ST_TO_ADDR
// end ;
70649: LD_VAR 0 2
70653: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70654: LD_INT 0
70656: PPUSH
70657: PPUSH
// result := array ;
70658: LD_ADDR_VAR 0 3
70662: PUSH
70663: LD_VAR 0 1
70667: ST_TO_ADDR
// if size >= result then
70668: LD_VAR 0 2
70672: PUSH
70673: LD_VAR 0 3
70677: GREATEREQUAL
70678: IFFALSE 70682
// exit ;
70680: GO 70732
// if size then
70682: LD_VAR 0 2
70686: IFFALSE 70732
// for i := array downto size do
70688: LD_ADDR_VAR 0 4
70692: PUSH
70693: DOUBLE
70694: LD_VAR 0 1
70698: INC
70699: ST_TO_ADDR
70700: LD_VAR 0 2
70704: PUSH
70705: FOR_DOWNTO
70706: IFFALSE 70730
// result := Delete ( result , result ) ;
70708: LD_ADDR_VAR 0 3
70712: PUSH
70713: LD_VAR 0 3
70717: PPUSH
70718: LD_VAR 0 3
70722: PPUSH
70723: CALL_OW 3
70727: ST_TO_ADDR
70728: GO 70705
70730: POP
70731: POP
// end ;
70732: LD_VAR 0 3
70736: RET
// export function ComExit ( unit ) ; var tmp ; begin
70737: LD_INT 0
70739: PPUSH
70740: PPUSH
// if not IsInUnit ( unit ) then
70741: LD_VAR 0 1
70745: PPUSH
70746: CALL_OW 310
70750: NOT
70751: IFFALSE 70755
// exit ;
70753: GO 70815
// tmp := IsInUnit ( unit ) ;
70755: LD_ADDR_VAR 0 3
70759: PUSH
70760: LD_VAR 0 1
70764: PPUSH
70765: CALL_OW 310
70769: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70770: LD_VAR 0 3
70774: PPUSH
70775: CALL_OW 247
70779: PUSH
70780: LD_INT 2
70782: EQUAL
70783: IFFALSE 70796
// ComExitVehicle ( unit ) else
70785: LD_VAR 0 1
70789: PPUSH
70790: CALL_OW 121
70794: GO 70805
// ComExitBuilding ( unit ) ;
70796: LD_VAR 0 1
70800: PPUSH
70801: CALL_OW 122
// result := tmp ;
70805: LD_ADDR_VAR 0 2
70809: PUSH
70810: LD_VAR 0 3
70814: ST_TO_ADDR
// end ;
70815: LD_VAR 0 2
70819: RET
// export function ComExitAll ( units ) ; var i ; begin
70820: LD_INT 0
70822: PPUSH
70823: PPUSH
// if not units then
70824: LD_VAR 0 1
70828: NOT
70829: IFFALSE 70833
// exit ;
70831: GO 70859
// for i in units do
70833: LD_ADDR_VAR 0 3
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: FOR_IN
70844: IFFALSE 70857
// ComExit ( i ) ;
70846: LD_VAR 0 3
70850: PPUSH
70851: CALL 70737 0 1
70855: GO 70843
70857: POP
70858: POP
// end ;
70859: LD_VAR 0 2
70863: RET
// export function ResetHc ; begin
70864: LD_INT 0
70866: PPUSH
// InitHc ;
70867: CALL_OW 19
// hc_importance := 0 ;
70871: LD_ADDR_OWVAR 32
70875: PUSH
70876: LD_INT 0
70878: ST_TO_ADDR
// end ;
70879: LD_VAR 0 1
70883: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70884: LD_INT 0
70886: PPUSH
70887: PPUSH
70888: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70889: LD_ADDR_VAR 0 6
70893: PUSH
70894: LD_VAR 0 1
70898: PUSH
70899: LD_VAR 0 3
70903: PLUS
70904: PUSH
70905: LD_INT 2
70907: DIV
70908: ST_TO_ADDR
// if _x < 0 then
70909: LD_VAR 0 6
70913: PUSH
70914: LD_INT 0
70916: LESS
70917: IFFALSE 70934
// _x := _x * - 1 ;
70919: LD_ADDR_VAR 0 6
70923: PUSH
70924: LD_VAR 0 6
70928: PUSH
70929: LD_INT 1
70931: NEG
70932: MUL
70933: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70934: LD_ADDR_VAR 0 7
70938: PUSH
70939: LD_VAR 0 2
70943: PUSH
70944: LD_VAR 0 4
70948: PLUS
70949: PUSH
70950: LD_INT 2
70952: DIV
70953: ST_TO_ADDR
// if _y < 0 then
70954: LD_VAR 0 7
70958: PUSH
70959: LD_INT 0
70961: LESS
70962: IFFALSE 70979
// _y := _y * - 1 ;
70964: LD_ADDR_VAR 0 7
70968: PUSH
70969: LD_VAR 0 7
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: MUL
70978: ST_TO_ADDR
// result := [ _x , _y ] ;
70979: LD_ADDR_VAR 0 5
70983: PUSH
70984: LD_VAR 0 6
70988: PUSH
70989: LD_VAR 0 7
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: ST_TO_ADDR
// end ;
70998: LD_VAR 0 5
71002: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71003: LD_INT 0
71005: PPUSH
71006: PPUSH
71007: PPUSH
71008: PPUSH
// task := GetTaskList ( unit ) ;
71009: LD_ADDR_VAR 0 7
71013: PUSH
71014: LD_VAR 0 1
71018: PPUSH
71019: CALL_OW 437
71023: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71024: LD_VAR 0 7
71028: NOT
71029: PUSH
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 2
71039: PPUSH
71040: CALL_OW 308
71044: NOT
71045: AND
71046: IFFALSE 71050
// exit ;
71048: GO 71168
// if IsInArea ( unit , area ) then
71050: LD_VAR 0 1
71054: PPUSH
71055: LD_VAR 0 2
71059: PPUSH
71060: CALL_OW 308
71064: IFFALSE 71082
// begin ComMoveToArea ( unit , goAway ) ;
71066: LD_VAR 0 1
71070: PPUSH
71071: LD_VAR 0 3
71075: PPUSH
71076: CALL_OW 113
// exit ;
71080: GO 71168
// end ; if task [ 1 ] [ 1 ] <> M then
71082: LD_VAR 0 7
71086: PUSH
71087: LD_INT 1
71089: ARRAY
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PUSH
71095: LD_STRING M
71097: NONEQUAL
71098: IFFALSE 71102
// exit ;
71100: GO 71168
// x := task [ 1 ] [ 2 ] ;
71102: LD_ADDR_VAR 0 5
71106: PUSH
71107: LD_VAR 0 7
71111: PUSH
71112: LD_INT 1
71114: ARRAY
71115: PUSH
71116: LD_INT 2
71118: ARRAY
71119: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71120: LD_ADDR_VAR 0 6
71124: PUSH
71125: LD_VAR 0 7
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PUSH
71134: LD_INT 3
71136: ARRAY
71137: ST_TO_ADDR
// if InArea ( x , y , area ) then
71138: LD_VAR 0 5
71142: PPUSH
71143: LD_VAR 0 6
71147: PPUSH
71148: LD_VAR 0 2
71152: PPUSH
71153: CALL_OW 309
71157: IFFALSE 71168
// ComStop ( unit ) ;
71159: LD_VAR 0 1
71163: PPUSH
71164: CALL_OW 141
// end ;
71168: LD_VAR 0 4
71172: RET
// export function Abs ( value ) ; begin
71173: LD_INT 0
71175: PPUSH
// result := value ;
71176: LD_ADDR_VAR 0 2
71180: PUSH
71181: LD_VAR 0 1
71185: ST_TO_ADDR
// if value < 0 then
71186: LD_VAR 0 1
71190: PUSH
71191: LD_INT 0
71193: LESS
71194: IFFALSE 71211
// result := value * - 1 ;
71196: LD_ADDR_VAR 0 2
71200: PUSH
71201: LD_VAR 0 1
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: MUL
71210: ST_TO_ADDR
// end ;
71211: LD_VAR 0 2
71215: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71216: LD_INT 0
71218: PPUSH
71219: PPUSH
71220: PPUSH
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
// if not unit or not building then
71226: LD_VAR 0 1
71230: NOT
71231: PUSH
71232: LD_VAR 0 2
71236: NOT
71237: OR
71238: IFFALSE 71242
// exit ;
71240: GO 71468
// x := GetX ( building ) ;
71242: LD_ADDR_VAR 0 4
71246: PUSH
71247: LD_VAR 0 2
71251: PPUSH
71252: CALL_OW 250
71256: ST_TO_ADDR
// y := GetY ( building ) ;
71257: LD_ADDR_VAR 0 6
71261: PUSH
71262: LD_VAR 0 2
71266: PPUSH
71267: CALL_OW 251
71271: ST_TO_ADDR
// d := GetDir ( building ) ;
71272: LD_ADDR_VAR 0 8
71276: PUSH
71277: LD_VAR 0 2
71281: PPUSH
71282: CALL_OW 254
71286: ST_TO_ADDR
// r := 4 ;
71287: LD_ADDR_VAR 0 9
71291: PUSH
71292: LD_INT 4
71294: ST_TO_ADDR
// for i := 1 to 5 do
71295: LD_ADDR_VAR 0 10
71299: PUSH
71300: DOUBLE
71301: LD_INT 1
71303: DEC
71304: ST_TO_ADDR
71305: LD_INT 5
71307: PUSH
71308: FOR_TO
71309: IFFALSE 71466
// begin _x := ShiftX ( x , d , r + i ) ;
71311: LD_ADDR_VAR 0 5
71315: PUSH
71316: LD_VAR 0 4
71320: PPUSH
71321: LD_VAR 0 8
71325: PPUSH
71326: LD_VAR 0 9
71330: PUSH
71331: LD_VAR 0 10
71335: PLUS
71336: PPUSH
71337: CALL_OW 272
71341: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71342: LD_ADDR_VAR 0 7
71346: PUSH
71347: LD_VAR 0 6
71351: PPUSH
71352: LD_VAR 0 8
71356: PPUSH
71357: LD_VAR 0 9
71361: PUSH
71362: LD_VAR 0 10
71366: PLUS
71367: PPUSH
71368: CALL_OW 273
71372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71373: LD_VAR 0 5
71377: PPUSH
71378: LD_VAR 0 7
71382: PPUSH
71383: CALL_OW 488
71387: PUSH
71388: LD_VAR 0 5
71392: PPUSH
71393: LD_VAR 0 7
71397: PPUSH
71398: CALL_OW 428
71402: PPUSH
71403: CALL_OW 247
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: LD_INT 2
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: IN
71418: NOT
71419: AND
71420: IFFALSE 71464
// begin ComMoveXY ( unit , _x , _y ) ;
71422: LD_VAR 0 1
71426: PPUSH
71427: LD_VAR 0 5
71431: PPUSH
71432: LD_VAR 0 7
71436: PPUSH
71437: CALL_OW 111
// result := [ _x , _y ] ;
71441: LD_ADDR_VAR 0 3
71445: PUSH
71446: LD_VAR 0 5
71450: PUSH
71451: LD_VAR 0 7
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: ST_TO_ADDR
// exit ;
71460: POP
71461: POP
71462: GO 71468
// end ; end ;
71464: GO 71308
71466: POP
71467: POP
// end ;
71468: LD_VAR 0 3
71472: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71473: LD_INT 0
71475: PPUSH
71476: PPUSH
71477: PPUSH
// result := 0 ;
71478: LD_ADDR_VAR 0 3
71482: PUSH
71483: LD_INT 0
71485: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71486: LD_VAR 0 1
71490: PUSH
71491: LD_INT 0
71493: LESS
71494: PUSH
71495: LD_VAR 0 1
71499: PUSH
71500: LD_INT 8
71502: GREATER
71503: OR
71504: PUSH
71505: LD_VAR 0 2
71509: PUSH
71510: LD_INT 0
71512: LESS
71513: OR
71514: PUSH
71515: LD_VAR 0 2
71519: PUSH
71520: LD_INT 8
71522: GREATER
71523: OR
71524: IFFALSE 71528
// exit ;
71526: GO 71603
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71528: LD_ADDR_VAR 0 4
71532: PUSH
71533: LD_INT 22
71535: PUSH
71536: LD_VAR 0 2
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PPUSH
71545: CALL_OW 69
71549: PUSH
71550: FOR_IN
71551: IFFALSE 71601
// begin un := UnitShoot ( i ) ;
71553: LD_ADDR_VAR 0 5
71557: PUSH
71558: LD_VAR 0 4
71562: PPUSH
71563: CALL_OW 504
71567: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71568: LD_VAR 0 5
71572: PPUSH
71573: CALL_OW 255
71577: PUSH
71578: LD_VAR 0 1
71582: EQUAL
71583: IFFALSE 71599
// begin result := un ;
71585: LD_ADDR_VAR 0 3
71589: PUSH
71590: LD_VAR 0 5
71594: ST_TO_ADDR
// exit ;
71595: POP
71596: POP
71597: GO 71603
// end ; end ;
71599: GO 71550
71601: POP
71602: POP
// end ;
71603: LD_VAR 0 3
71607: RET
// export function GetCargoBay ( units ) ; begin
71608: LD_INT 0
71610: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71611: LD_ADDR_VAR 0 2
71615: PUSH
71616: LD_VAR 0 1
71620: PPUSH
71621: LD_INT 2
71623: PUSH
71624: LD_INT 34
71626: PUSH
71627: LD_INT 12
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 34
71636: PUSH
71637: LD_INT 51
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 34
71646: PUSH
71647: LD_INT 32
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 34
71656: PUSH
71657: LD_INT 89
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: PPUSH
71671: CALL_OW 72
71675: ST_TO_ADDR
// end ;
71676: LD_VAR 0 2
71680: RET
// export function Negate ( value ) ; begin
71681: LD_INT 0
71683: PPUSH
// result := not value ;
71684: LD_ADDR_VAR 0 2
71688: PUSH
71689: LD_VAR 0 1
71693: NOT
71694: ST_TO_ADDR
// end ;
71695: LD_VAR 0 2
71699: RET
// export function Inc ( value ) ; begin
71700: LD_INT 0
71702: PPUSH
// result := value + 1 ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: LD_VAR 0 1
71712: PUSH
71713: LD_INT 1
71715: PLUS
71716: ST_TO_ADDR
// end ;
71717: LD_VAR 0 2
71721: RET
// export function Dec ( value ) ; begin
71722: LD_INT 0
71724: PPUSH
// result := value - 1 ;
71725: LD_ADDR_VAR 0 2
71729: PUSH
71730: LD_VAR 0 1
71734: PUSH
71735: LD_INT 1
71737: MINUS
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 2
71743: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71744: LD_INT 0
71746: PPUSH
71747: PPUSH
71748: PPUSH
71749: PPUSH
71750: PPUSH
71751: PPUSH
71752: PPUSH
71753: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71754: LD_VAR 0 1
71758: PPUSH
71759: LD_VAR 0 2
71763: PPUSH
71764: CALL_OW 488
71768: NOT
71769: PUSH
71770: LD_VAR 0 3
71774: PPUSH
71775: LD_VAR 0 4
71779: PPUSH
71780: CALL_OW 488
71784: NOT
71785: OR
71786: IFFALSE 71799
// begin result := - 1 ;
71788: LD_ADDR_VAR 0 5
71792: PUSH
71793: LD_INT 1
71795: NEG
71796: ST_TO_ADDR
// exit ;
71797: GO 72034
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71799: LD_ADDR_VAR 0 12
71803: PUSH
71804: LD_VAR 0 1
71808: PPUSH
71809: LD_VAR 0 2
71813: PPUSH
71814: LD_VAR 0 3
71818: PPUSH
71819: LD_VAR 0 4
71823: PPUSH
71824: CALL 70884 0 4
71828: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71829: LD_ADDR_VAR 0 11
71833: PUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: LD_VAR 0 2
71843: PPUSH
71844: LD_VAR 0 12
71848: PUSH
71849: LD_INT 1
71851: ARRAY
71852: PPUSH
71853: LD_VAR 0 12
71857: PUSH
71858: LD_INT 2
71860: ARRAY
71861: PPUSH
71862: CALL_OW 298
71866: ST_TO_ADDR
// distance := 9999 ;
71867: LD_ADDR_VAR 0 10
71871: PUSH
71872: LD_INT 9999
71874: ST_TO_ADDR
// for i := 0 to 5 do
71875: LD_ADDR_VAR 0 6
71879: PUSH
71880: DOUBLE
71881: LD_INT 0
71883: DEC
71884: ST_TO_ADDR
71885: LD_INT 5
71887: PUSH
71888: FOR_TO
71889: IFFALSE 72032
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71891: LD_ADDR_VAR 0 7
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: LD_VAR 0 6
71905: PPUSH
71906: LD_VAR 0 11
71910: PPUSH
71911: CALL_OW 272
71915: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71916: LD_ADDR_VAR 0 8
71920: PUSH
71921: LD_VAR 0 2
71925: PPUSH
71926: LD_VAR 0 6
71930: PPUSH
71931: LD_VAR 0 11
71935: PPUSH
71936: CALL_OW 273
71940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71941: LD_VAR 0 7
71945: PPUSH
71946: LD_VAR 0 8
71950: PPUSH
71951: CALL_OW 488
71955: NOT
71956: IFFALSE 71960
// continue ;
71958: GO 71888
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71960: LD_ADDR_VAR 0 9
71964: PUSH
71965: LD_VAR 0 12
71969: PUSH
71970: LD_INT 1
71972: ARRAY
71973: PPUSH
71974: LD_VAR 0 12
71978: PUSH
71979: LD_INT 2
71981: ARRAY
71982: PPUSH
71983: LD_VAR 0 7
71987: PPUSH
71988: LD_VAR 0 8
71992: PPUSH
71993: CALL_OW 298
71997: ST_TO_ADDR
// if tmp < distance then
71998: LD_VAR 0 9
72002: PUSH
72003: LD_VAR 0 10
72007: LESS
72008: IFFALSE 72030
// begin result := i ;
72010: LD_ADDR_VAR 0 5
72014: PUSH
72015: LD_VAR 0 6
72019: ST_TO_ADDR
// distance := tmp ;
72020: LD_ADDR_VAR 0 10
72024: PUSH
72025: LD_VAR 0 9
72029: ST_TO_ADDR
// end ; end ;
72030: GO 71888
72032: POP
72033: POP
// end ;
72034: LD_VAR 0 5
72038: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72039: LD_INT 0
72041: PPUSH
72042: PPUSH
// if not driver or not IsInUnit ( driver ) then
72043: LD_VAR 0 1
72047: NOT
72048: PUSH
72049: LD_VAR 0 1
72053: PPUSH
72054: CALL_OW 310
72058: NOT
72059: OR
72060: IFFALSE 72064
// exit ;
72062: GO 72154
// vehicle := IsInUnit ( driver ) ;
72064: LD_ADDR_VAR 0 3
72068: PUSH
72069: LD_VAR 0 1
72073: PPUSH
72074: CALL_OW 310
72078: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72079: LD_VAR 0 1
72083: PPUSH
72084: LD_STRING \
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: PUSH
72114: LD_STRING E
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: LD_VAR 0 3
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PPUSH
72150: CALL_OW 446
// end ;
72154: LD_VAR 0 2
72158: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72159: LD_INT 0
72161: PPUSH
72162: PPUSH
// if not driver or not IsInUnit ( driver ) then
72163: LD_VAR 0 1
72167: NOT
72168: PUSH
72169: LD_VAR 0 1
72173: PPUSH
72174: CALL_OW 310
72178: NOT
72179: OR
72180: IFFALSE 72184
// exit ;
72182: GO 72274
// vehicle := IsInUnit ( driver ) ;
72184: LD_ADDR_VAR 0 3
72188: PUSH
72189: LD_VAR 0 1
72193: PPUSH
72194: CALL_OW 310
72198: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72199: LD_VAR 0 1
72203: PPUSH
72204: LD_STRING \
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: LD_INT 0
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: PUSH
72234: LD_STRING E
72236: PUSH
72237: LD_INT 0
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_VAR 0 3
72247: PUSH
72248: LD_INT 0
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PPUSH
72270: CALL_OW 447
// end ;
72274: LD_VAR 0 2
72278: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72279: LD_INT 0
72281: PPUSH
72282: PPUSH
72283: PPUSH
// tmp := [ ] ;
72284: LD_ADDR_VAR 0 5
72288: PUSH
72289: EMPTY
72290: ST_TO_ADDR
// for i in units do
72291: LD_ADDR_VAR 0 4
72295: PUSH
72296: LD_VAR 0 1
72300: PUSH
72301: FOR_IN
72302: IFFALSE 72340
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72304: LD_ADDR_VAR 0 5
72308: PUSH
72309: LD_VAR 0 5
72313: PPUSH
72314: LD_VAR 0 5
72318: PUSH
72319: LD_INT 1
72321: PLUS
72322: PPUSH
72323: LD_VAR 0 4
72327: PPUSH
72328: CALL_OW 256
72332: PPUSH
72333: CALL_OW 2
72337: ST_TO_ADDR
72338: GO 72301
72340: POP
72341: POP
// if not tmp then
72342: LD_VAR 0 5
72346: NOT
72347: IFFALSE 72351
// exit ;
72349: GO 72399
// if asc then
72351: LD_VAR 0 2
72355: IFFALSE 72379
// result := SortListByListAsc ( units , tmp ) else
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_VAR 0 1
72366: PPUSH
72367: LD_VAR 0 5
72371: PPUSH
72372: CALL_OW 76
72376: ST_TO_ADDR
72377: GO 72399
// result := SortListByListDesc ( units , tmp ) ;
72379: LD_ADDR_VAR 0 3
72383: PUSH
72384: LD_VAR 0 1
72388: PPUSH
72389: LD_VAR 0 5
72393: PPUSH
72394: CALL_OW 77
72398: ST_TO_ADDR
// end ;
72399: LD_VAR 0 3
72403: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72404: LD_INT 0
72406: PPUSH
72407: PPUSH
// task := GetTaskList ( mech ) ;
72408: LD_ADDR_VAR 0 4
72412: PUSH
72413: LD_VAR 0 1
72417: PPUSH
72418: CALL_OW 437
72422: ST_TO_ADDR
// if not task then
72423: LD_VAR 0 4
72427: NOT
72428: IFFALSE 72432
// exit ;
72430: GO 72474
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72432: LD_ADDR_VAR 0 3
72436: PUSH
72437: LD_VAR 0 4
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PUSH
72446: LD_INT 1
72448: ARRAY
72449: PUSH
72450: LD_STRING r
72452: EQUAL
72453: PUSH
72454: LD_VAR 0 4
72458: PUSH
72459: LD_INT 1
72461: ARRAY
72462: PUSH
72463: LD_INT 4
72465: ARRAY
72466: PUSH
72467: LD_VAR 0 2
72471: EQUAL
72472: AND
72473: ST_TO_ADDR
// end ;
72474: LD_VAR 0 3
72478: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72479: LD_INT 0
72481: PPUSH
// SetDir ( unit , d ) ;
72482: LD_VAR 0 1
72486: PPUSH
72487: LD_VAR 0 4
72491: PPUSH
72492: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72496: LD_VAR 0 1
72500: PPUSH
72501: LD_VAR 0 2
72505: PPUSH
72506: LD_VAR 0 3
72510: PPUSH
72511: LD_VAR 0 5
72515: PPUSH
72516: CALL_OW 48
// end ;
72520: LD_VAR 0 6
72524: RET
// export function ToNaturalNumber ( number ) ; begin
72525: LD_INT 0
72527: PPUSH
// result := number div 1 ;
72528: LD_ADDR_VAR 0 2
72532: PUSH
72533: LD_VAR 0 1
72537: PUSH
72538: LD_INT 1
72540: DIV
72541: ST_TO_ADDR
// if number < 0 then
72542: LD_VAR 0 1
72546: PUSH
72547: LD_INT 0
72549: LESS
72550: IFFALSE 72560
// result := 0 ;
72552: LD_ADDR_VAR 0 2
72556: PUSH
72557: LD_INT 0
72559: ST_TO_ADDR
// end ;
72560: LD_VAR 0 2
72564: RET
// export function SortByClass ( units , class ) ; var un ; begin
72565: LD_INT 0
72567: PPUSH
72568: PPUSH
// if not units or not class then
72569: LD_VAR 0 1
72573: NOT
72574: PUSH
72575: LD_VAR 0 2
72579: NOT
72580: OR
72581: IFFALSE 72585
// exit ;
72583: GO 72680
// result := [ ] ;
72585: LD_ADDR_VAR 0 3
72589: PUSH
72590: EMPTY
72591: ST_TO_ADDR
// for un in units do
72592: LD_ADDR_VAR 0 4
72596: PUSH
72597: LD_VAR 0 1
72601: PUSH
72602: FOR_IN
72603: IFFALSE 72678
// if GetClass ( un ) = class then
72605: LD_VAR 0 4
72609: PPUSH
72610: CALL_OW 257
72614: PUSH
72615: LD_VAR 0 2
72619: EQUAL
72620: IFFALSE 72647
// result := Insert ( result , 1 , un ) else
72622: LD_ADDR_VAR 0 3
72626: PUSH
72627: LD_VAR 0 3
72631: PPUSH
72632: LD_INT 1
72634: PPUSH
72635: LD_VAR 0 4
72639: PPUSH
72640: CALL_OW 2
72644: ST_TO_ADDR
72645: GO 72676
// result := Replace ( result , result + 1 , un ) ;
72647: LD_ADDR_VAR 0 3
72651: PUSH
72652: LD_VAR 0 3
72656: PPUSH
72657: LD_VAR 0 3
72661: PUSH
72662: LD_INT 1
72664: PLUS
72665: PPUSH
72666: LD_VAR 0 4
72670: PPUSH
72671: CALL_OW 1
72675: ST_TO_ADDR
72676: GO 72602
72678: POP
72679: POP
// end ;
72680: LD_VAR 0 3
72684: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72685: LD_INT 0
72687: PPUSH
72688: PPUSH
72689: PPUSH
72690: PPUSH
72691: PPUSH
72692: PPUSH
72693: PPUSH
// result := [ ] ;
72694: LD_ADDR_VAR 0 4
72698: PUSH
72699: EMPTY
72700: ST_TO_ADDR
// if x - r < 0 then
72701: LD_VAR 0 1
72705: PUSH
72706: LD_VAR 0 3
72710: MINUS
72711: PUSH
72712: LD_INT 0
72714: LESS
72715: IFFALSE 72727
// min_x := 0 else
72717: LD_ADDR_VAR 0 8
72721: PUSH
72722: LD_INT 0
72724: ST_TO_ADDR
72725: GO 72743
// min_x := x - r ;
72727: LD_ADDR_VAR 0 8
72731: PUSH
72732: LD_VAR 0 1
72736: PUSH
72737: LD_VAR 0 3
72741: MINUS
72742: ST_TO_ADDR
// if y - r < 0 then
72743: LD_VAR 0 2
72747: PUSH
72748: LD_VAR 0 3
72752: MINUS
72753: PUSH
72754: LD_INT 0
72756: LESS
72757: IFFALSE 72769
// min_y := 0 else
72759: LD_ADDR_VAR 0 7
72763: PUSH
72764: LD_INT 0
72766: ST_TO_ADDR
72767: GO 72785
// min_y := y - r ;
72769: LD_ADDR_VAR 0 7
72773: PUSH
72774: LD_VAR 0 2
72778: PUSH
72779: LD_VAR 0 3
72783: MINUS
72784: ST_TO_ADDR
// max_x := x + r ;
72785: LD_ADDR_VAR 0 9
72789: PUSH
72790: LD_VAR 0 1
72794: PUSH
72795: LD_VAR 0 3
72799: PLUS
72800: ST_TO_ADDR
// max_y := y + r ;
72801: LD_ADDR_VAR 0 10
72805: PUSH
72806: LD_VAR 0 2
72810: PUSH
72811: LD_VAR 0 3
72815: PLUS
72816: ST_TO_ADDR
// for _x = min_x to max_x do
72817: LD_ADDR_VAR 0 5
72821: PUSH
72822: DOUBLE
72823: LD_VAR 0 8
72827: DEC
72828: ST_TO_ADDR
72829: LD_VAR 0 9
72833: PUSH
72834: FOR_TO
72835: IFFALSE 72936
// for _y = min_y to max_y do
72837: LD_ADDR_VAR 0 6
72841: PUSH
72842: DOUBLE
72843: LD_VAR 0 7
72847: DEC
72848: ST_TO_ADDR
72849: LD_VAR 0 10
72853: PUSH
72854: FOR_TO
72855: IFFALSE 72932
// begin if not ValidHex ( _x , _y ) then
72857: LD_VAR 0 5
72861: PPUSH
72862: LD_VAR 0 6
72866: PPUSH
72867: CALL_OW 488
72871: NOT
72872: IFFALSE 72876
// continue ;
72874: GO 72854
// if GetResourceTypeXY ( _x , _y ) then
72876: LD_VAR 0 5
72880: PPUSH
72881: LD_VAR 0 6
72885: PPUSH
72886: CALL_OW 283
72890: IFFALSE 72930
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: LD_VAR 0 4
72901: PPUSH
72902: LD_VAR 0 4
72906: PUSH
72907: LD_INT 1
72909: PLUS
72910: PPUSH
72911: LD_VAR 0 5
72915: PUSH
72916: LD_VAR 0 6
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PPUSH
72925: CALL_OW 1
72929: ST_TO_ADDR
// end ;
72930: GO 72854
72932: POP
72933: POP
72934: GO 72834
72936: POP
72937: POP
// end ;
72938: LD_VAR 0 4
72942: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72943: LD_INT 0
72945: PPUSH
72946: PPUSH
72947: PPUSH
72948: PPUSH
72949: PPUSH
72950: PPUSH
72951: PPUSH
72952: PPUSH
// if not units then
72953: LD_VAR 0 1
72957: NOT
72958: IFFALSE 72962
// exit ;
72960: GO 73486
// result := UnitFilter ( units , [ f_ok ] ) ;
72962: LD_ADDR_VAR 0 3
72966: PUSH
72967: LD_VAR 0 1
72971: PPUSH
72972: LD_INT 50
72974: PUSH
72975: EMPTY
72976: LIST
72977: PPUSH
72978: CALL_OW 72
72982: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72983: LD_ADDR_VAR 0 8
72987: PUSH
72988: LD_VAR 0 1
72992: PUSH
72993: LD_INT 1
72995: ARRAY
72996: PPUSH
72997: CALL_OW 255
73001: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73002: LD_ADDR_VAR 0 10
73006: PUSH
73007: LD_INT 29
73009: PUSH
73010: LD_INT 91
73012: PUSH
73013: LD_INT 49
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: LIST
73020: ST_TO_ADDR
// if not result then
73021: LD_VAR 0 3
73025: NOT
73026: IFFALSE 73030
// exit ;
73028: GO 73486
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73030: LD_ADDR_VAR 0 5
73034: PUSH
73035: LD_INT 81
73037: PUSH
73038: LD_VAR 0 8
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PPUSH
73047: CALL_OW 69
73051: ST_TO_ADDR
// for i in result do
73052: LD_ADDR_VAR 0 4
73056: PUSH
73057: LD_VAR 0 3
73061: PUSH
73062: FOR_IN
73063: IFFALSE 73484
// begin tag := GetTag ( i ) + 1 ;
73065: LD_ADDR_VAR 0 9
73069: PUSH
73070: LD_VAR 0 4
73074: PPUSH
73075: CALL_OW 110
73079: PUSH
73080: LD_INT 1
73082: PLUS
73083: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73084: LD_ADDR_VAR 0 7
73088: PUSH
73089: LD_VAR 0 4
73093: PPUSH
73094: CALL_OW 250
73098: PPUSH
73099: LD_VAR 0 4
73103: PPUSH
73104: CALL_OW 251
73108: PPUSH
73109: LD_INT 6
73111: PPUSH
73112: CALL 72685 0 3
73116: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73117: LD_VAR 0 4
73121: PPUSH
73122: CALL_OW 247
73126: PUSH
73127: LD_INT 2
73129: EQUAL
73130: PUSH
73131: LD_VAR 0 7
73135: AND
73136: PUSH
73137: LD_VAR 0 4
73141: PPUSH
73142: CALL_OW 264
73146: PUSH
73147: LD_VAR 0 10
73151: IN
73152: NOT
73153: AND
73154: IFFALSE 73193
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73156: LD_VAR 0 4
73160: PPUSH
73161: LD_VAR 0 7
73165: PUSH
73166: LD_INT 1
73168: ARRAY
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: PPUSH
73174: LD_VAR 0 7
73178: PUSH
73179: LD_INT 1
73181: ARRAY
73182: PUSH
73183: LD_INT 2
73185: ARRAY
73186: PPUSH
73187: CALL_OW 116
73191: GO 73482
// if path > tag then
73193: LD_VAR 0 2
73197: PUSH
73198: LD_VAR 0 9
73202: GREATER
73203: IFFALSE 73411
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73205: LD_ADDR_VAR 0 6
73209: PUSH
73210: LD_VAR 0 5
73214: PPUSH
73215: LD_INT 91
73217: PUSH
73218: LD_VAR 0 4
73222: PUSH
73223: LD_INT 8
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: PPUSH
73231: CALL_OW 72
73235: ST_TO_ADDR
// if nearEnemy then
73236: LD_VAR 0 6
73240: IFFALSE 73309
// begin if GetWeapon ( i ) = ru_time_lapser then
73242: LD_VAR 0 4
73246: PPUSH
73247: CALL_OW 264
73251: PUSH
73252: LD_INT 49
73254: EQUAL
73255: IFFALSE 73283
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73257: LD_VAR 0 4
73261: PPUSH
73262: LD_VAR 0 6
73266: PPUSH
73267: LD_VAR 0 4
73271: PPUSH
73272: CALL_OW 74
73276: PPUSH
73277: CALL_OW 112
73281: GO 73307
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73283: LD_VAR 0 4
73287: PPUSH
73288: LD_VAR 0 6
73292: PPUSH
73293: LD_VAR 0 4
73297: PPUSH
73298: CALL_OW 74
73302: PPUSH
73303: CALL_OW 115
// end else
73307: GO 73409
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73309: LD_VAR 0 4
73313: PPUSH
73314: LD_VAR 0 2
73318: PUSH
73319: LD_VAR 0 9
73323: ARRAY
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PPUSH
73329: LD_VAR 0 2
73333: PUSH
73334: LD_VAR 0 9
73338: ARRAY
73339: PUSH
73340: LD_INT 2
73342: ARRAY
73343: PPUSH
73344: CALL_OW 297
73348: PUSH
73349: LD_INT 6
73351: GREATER
73352: IFFALSE 73395
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73354: LD_VAR 0 4
73358: PPUSH
73359: LD_VAR 0 2
73363: PUSH
73364: LD_VAR 0 9
73368: ARRAY
73369: PUSH
73370: LD_INT 1
73372: ARRAY
73373: PPUSH
73374: LD_VAR 0 2
73378: PUSH
73379: LD_VAR 0 9
73383: ARRAY
73384: PUSH
73385: LD_INT 2
73387: ARRAY
73388: PPUSH
73389: CALL_OW 114
73393: GO 73409
// SetTag ( i , tag ) ;
73395: LD_VAR 0 4
73399: PPUSH
73400: LD_VAR 0 9
73404: PPUSH
73405: CALL_OW 109
// end else
73409: GO 73482
// if enemy then
73411: LD_VAR 0 5
73415: IFFALSE 73482
// begin if GetWeapon ( i ) = ru_time_lapser then
73417: LD_VAR 0 4
73421: PPUSH
73422: CALL_OW 264
73426: PUSH
73427: LD_INT 49
73429: EQUAL
73430: IFFALSE 73458
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73432: LD_VAR 0 4
73436: PPUSH
73437: LD_VAR 0 5
73441: PPUSH
73442: LD_VAR 0 4
73446: PPUSH
73447: CALL_OW 74
73451: PPUSH
73452: CALL_OW 112
73456: GO 73482
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73458: LD_VAR 0 4
73462: PPUSH
73463: LD_VAR 0 5
73467: PPUSH
73468: LD_VAR 0 4
73472: PPUSH
73473: CALL_OW 74
73477: PPUSH
73478: CALL_OW 115
// end ; end ;
73482: GO 73062
73484: POP
73485: POP
// end ;
73486: LD_VAR 0 3
73490: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73491: LD_INT 0
73493: PPUSH
73494: PPUSH
73495: PPUSH
// if not unit or IsInUnit ( unit ) then
73496: LD_VAR 0 1
73500: NOT
73501: PUSH
73502: LD_VAR 0 1
73506: PPUSH
73507: CALL_OW 310
73511: OR
73512: IFFALSE 73516
// exit ;
73514: GO 73607
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73516: LD_ADDR_VAR 0 4
73520: PUSH
73521: LD_VAR 0 1
73525: PPUSH
73526: CALL_OW 250
73530: PPUSH
73531: LD_VAR 0 2
73535: PPUSH
73536: LD_INT 1
73538: PPUSH
73539: CALL_OW 272
73543: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73544: LD_ADDR_VAR 0 5
73548: PUSH
73549: LD_VAR 0 1
73553: PPUSH
73554: CALL_OW 251
73558: PPUSH
73559: LD_VAR 0 2
73563: PPUSH
73564: LD_INT 1
73566: PPUSH
73567: CALL_OW 273
73571: ST_TO_ADDR
// if ValidHex ( x , y ) then
73572: LD_VAR 0 4
73576: PPUSH
73577: LD_VAR 0 5
73581: PPUSH
73582: CALL_OW 488
73586: IFFALSE 73607
// ComTurnXY ( unit , x , y ) ;
73588: LD_VAR 0 1
73592: PPUSH
73593: LD_VAR 0 4
73597: PPUSH
73598: LD_VAR 0 5
73602: PPUSH
73603: CALL_OW 118
// end ;
73607: LD_VAR 0 3
73611: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73612: LD_INT 0
73614: PPUSH
73615: PPUSH
// result := false ;
73616: LD_ADDR_VAR 0 3
73620: PUSH
73621: LD_INT 0
73623: ST_TO_ADDR
// if not units then
73624: LD_VAR 0 2
73628: NOT
73629: IFFALSE 73633
// exit ;
73631: GO 73678
// for i in units do
73633: LD_ADDR_VAR 0 4
73637: PUSH
73638: LD_VAR 0 2
73642: PUSH
73643: FOR_IN
73644: IFFALSE 73676
// if See ( side , i ) then
73646: LD_VAR 0 1
73650: PPUSH
73651: LD_VAR 0 4
73655: PPUSH
73656: CALL_OW 292
73660: IFFALSE 73674
// begin result := true ;
73662: LD_ADDR_VAR 0 3
73666: PUSH
73667: LD_INT 1
73669: ST_TO_ADDR
// exit ;
73670: POP
73671: POP
73672: GO 73678
// end ;
73674: GO 73643
73676: POP
73677: POP
// end ;
73678: LD_VAR 0 3
73682: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73683: LD_INT 0
73685: PPUSH
73686: PPUSH
73687: PPUSH
73688: PPUSH
// if not unit or not points then
73689: LD_VAR 0 1
73693: NOT
73694: PUSH
73695: LD_VAR 0 2
73699: NOT
73700: OR
73701: IFFALSE 73705
// exit ;
73703: GO 73795
// dist := 99999 ;
73705: LD_ADDR_VAR 0 5
73709: PUSH
73710: LD_INT 99999
73712: ST_TO_ADDR
// for i in points do
73713: LD_ADDR_VAR 0 4
73717: PUSH
73718: LD_VAR 0 2
73722: PUSH
73723: FOR_IN
73724: IFFALSE 73793
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73726: LD_ADDR_VAR 0 6
73730: PUSH
73731: LD_VAR 0 1
73735: PPUSH
73736: LD_VAR 0 4
73740: PUSH
73741: LD_INT 1
73743: ARRAY
73744: PPUSH
73745: LD_VAR 0 4
73749: PUSH
73750: LD_INT 2
73752: ARRAY
73753: PPUSH
73754: CALL_OW 297
73758: ST_TO_ADDR
// if tmpDist < dist then
73759: LD_VAR 0 6
73763: PUSH
73764: LD_VAR 0 5
73768: LESS
73769: IFFALSE 73791
// begin result := i ;
73771: LD_ADDR_VAR 0 3
73775: PUSH
73776: LD_VAR 0 4
73780: ST_TO_ADDR
// dist := tmpDist ;
73781: LD_ADDR_VAR 0 5
73785: PUSH
73786: LD_VAR 0 6
73790: ST_TO_ADDR
// end ; end ;
73791: GO 73723
73793: POP
73794: POP
// end ;
73795: LD_VAR 0 3
73799: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73800: LD_INT 0
73802: PPUSH
// uc_side := side ;
73803: LD_ADDR_OWVAR 20
73807: PUSH
73808: LD_VAR 0 1
73812: ST_TO_ADDR
// uc_nation := 3 ;
73813: LD_ADDR_OWVAR 21
73817: PUSH
73818: LD_INT 3
73820: ST_TO_ADDR
// vc_chassis := 25 ;
73821: LD_ADDR_OWVAR 37
73825: PUSH
73826: LD_INT 25
73828: ST_TO_ADDR
// vc_engine := engine_siberite ;
73829: LD_ADDR_OWVAR 39
73833: PUSH
73834: LD_INT 3
73836: ST_TO_ADDR
// vc_control := control_computer ;
73837: LD_ADDR_OWVAR 38
73841: PUSH
73842: LD_INT 3
73844: ST_TO_ADDR
// vc_weapon := 59 ;
73845: LD_ADDR_OWVAR 40
73849: PUSH
73850: LD_INT 59
73852: ST_TO_ADDR
// result := CreateVehicle ;
73853: LD_ADDR_VAR 0 5
73857: PUSH
73858: CALL_OW 45
73862: ST_TO_ADDR
// SetDir ( result , d ) ;
73863: LD_VAR 0 5
73867: PPUSH
73868: LD_VAR 0 4
73872: PPUSH
73873: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73877: LD_VAR 0 5
73881: PPUSH
73882: LD_VAR 0 2
73886: PPUSH
73887: LD_VAR 0 3
73891: PPUSH
73892: LD_INT 0
73894: PPUSH
73895: CALL_OW 48
// end ;
73899: LD_VAR 0 5
73903: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73904: LD_INT 0
73906: PPUSH
73907: PPUSH
73908: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73909: LD_ADDR_VAR 0 2
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: LD_INT 0
73922: PUSH
73923: LD_INT 0
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73932: LD_VAR 0 1
73936: NOT
73937: PUSH
73938: LD_VAR 0 1
73942: PPUSH
73943: CALL_OW 264
73947: PUSH
73948: LD_INT 12
73950: PUSH
73951: LD_INT 51
73953: PUSH
73954: LD_INT 32
73956: PUSH
73957: LD_INT 89
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: IN
73966: NOT
73967: OR
73968: IFFALSE 73972
// exit ;
73970: GO 74070
// for i := 1 to 3 do
73972: LD_ADDR_VAR 0 3
73976: PUSH
73977: DOUBLE
73978: LD_INT 1
73980: DEC
73981: ST_TO_ADDR
73982: LD_INT 3
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74068
// begin tmp := GetCargo ( cargo , i ) ;
73988: LD_ADDR_VAR 0 4
73992: PUSH
73993: LD_VAR 0 1
73997: PPUSH
73998: LD_VAR 0 3
74002: PPUSH
74003: CALL_OW 289
74007: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74008: LD_ADDR_VAR 0 2
74012: PUSH
74013: LD_VAR 0 2
74017: PPUSH
74018: LD_VAR 0 3
74022: PPUSH
74023: LD_VAR 0 4
74027: PPUSH
74028: CALL_OW 1
74032: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74033: LD_ADDR_VAR 0 2
74037: PUSH
74038: LD_VAR 0 2
74042: PPUSH
74043: LD_INT 4
74045: PPUSH
74046: LD_VAR 0 2
74050: PUSH
74051: LD_INT 4
74053: ARRAY
74054: PUSH
74055: LD_VAR 0 4
74059: PLUS
74060: PPUSH
74061: CALL_OW 1
74065: ST_TO_ADDR
// end ;
74066: GO 73985
74068: POP
74069: POP
// end ;
74070: LD_VAR 0 2
74074: RET
// export function Length ( array ) ; begin
74075: LD_INT 0
74077: PPUSH
// result := array + 0 ;
74078: LD_ADDR_VAR 0 2
74082: PUSH
74083: LD_VAR 0 1
74087: PUSH
74088: LD_INT 0
74090: PLUS
74091: ST_TO_ADDR
// end ;
74092: LD_VAR 0 2
74096: RET
// export function PrepareArray ( array ) ; begin
74097: LD_INT 0
74099: PPUSH
// result := array diff 0 ;
74100: LD_ADDR_VAR 0 2
74104: PUSH
74105: LD_VAR 0 1
74109: PUSH
74110: LD_INT 0
74112: DIFF
74113: ST_TO_ADDR
// if not result [ 1 ] then
74114: LD_VAR 0 2
74118: PUSH
74119: LD_INT 1
74121: ARRAY
74122: NOT
74123: IFFALSE 74143
// result := Delete ( result , 1 ) ;
74125: LD_ADDR_VAR 0 2
74129: PUSH
74130: LD_VAR 0 2
74134: PPUSH
74135: LD_INT 1
74137: PPUSH
74138: CALL_OW 3
74142: ST_TO_ADDR
// end ;
74143: LD_VAR 0 2
74147: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74148: LD_INT 0
74150: PPUSH
74151: PPUSH
74152: PPUSH
74153: PPUSH
// sibRocketRange := 25 ;
74154: LD_ADDR_VAR 0 6
74158: PUSH
74159: LD_INT 25
74161: ST_TO_ADDR
// result := false ;
74162: LD_ADDR_VAR 0 4
74166: PUSH
74167: LD_INT 0
74169: ST_TO_ADDR
// for i := 0 to 5 do
74170: LD_ADDR_VAR 0 5
74174: PUSH
74175: DOUBLE
74176: LD_INT 0
74178: DEC
74179: ST_TO_ADDR
74180: LD_INT 5
74182: PUSH
74183: FOR_TO
74184: IFFALSE 74251
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74186: LD_VAR 0 1
74190: PPUSH
74191: LD_VAR 0 5
74195: PPUSH
74196: LD_VAR 0 6
74200: PPUSH
74201: CALL_OW 272
74205: PPUSH
74206: LD_VAR 0 2
74210: PPUSH
74211: LD_VAR 0 5
74215: PPUSH
74216: LD_VAR 0 6
74220: PPUSH
74221: CALL_OW 273
74225: PPUSH
74226: LD_VAR 0 3
74230: PPUSH
74231: CALL_OW 309
74235: IFFALSE 74249
// begin result := true ;
74237: LD_ADDR_VAR 0 4
74241: PUSH
74242: LD_INT 1
74244: ST_TO_ADDR
// exit ;
74245: POP
74246: POP
74247: GO 74253
// end ;
74249: GO 74183
74251: POP
74252: POP
// end ;
74253: LD_VAR 0 4
74257: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74258: LD_INT 0
74260: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74261: LD_VAR 0 1
74265: PPUSH
74266: LD_VAR 0 2
74270: PPUSH
74271: LD_INT 0
74273: PPUSH
74274: LD_INT 0
74276: PPUSH
74277: LD_INT 1
74279: PPUSH
74280: LD_INT 0
74282: PPUSH
74283: CALL_OW 587
// end ;
74287: LD_VAR 0 3
74291: RET
// export function CenterOnNow ( unit ) ; begin
74292: LD_INT 0
74294: PPUSH
// result := IsInUnit ( unit ) ;
74295: LD_ADDR_VAR 0 2
74299: PUSH
74300: LD_VAR 0 1
74304: PPUSH
74305: CALL_OW 310
74309: ST_TO_ADDR
// if not result then
74310: LD_VAR 0 2
74314: NOT
74315: IFFALSE 74327
// result := unit ;
74317: LD_ADDR_VAR 0 2
74321: PUSH
74322: LD_VAR 0 1
74326: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74327: LD_VAR 0 1
74331: PPUSH
74332: CALL_OW 87
// end ; end_of_file
74336: LD_VAR 0 2
74340: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 200
74348: DOUBLE
74349: GREATEREQUAL
74350: IFFALSE 74358
74352: LD_INT 299
74354: DOUBLE
74355: LESSEQUAL
74356: IFTRUE 74360
74358: GO 74392
74360: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74361: LD_VAR 0 1
74365: PPUSH
74366: LD_VAR 0 2
74370: PPUSH
74371: LD_VAR 0 3
74375: PPUSH
74376: LD_VAR 0 4
74380: PPUSH
74381: LD_VAR 0 5
74385: PPUSH
74386: CALL 28991 0 5
74390: GO 74469
74392: LD_INT 300
74394: DOUBLE
74395: GREATEREQUAL
74396: IFFALSE 74404
74398: LD_INT 399
74400: DOUBLE
74401: LESSEQUAL
74402: IFTRUE 74406
74404: GO 74468
74406: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74407: LD_VAR 0 1
74411: PPUSH
74412: LD_VAR 0 2
74416: PPUSH
74417: LD_VAR 0 3
74421: PPUSH
74422: LD_VAR 0 4
74426: PPUSH
74427: LD_VAR 0 5
74431: PPUSH
74432: LD_VAR 0 6
74436: PPUSH
74437: LD_VAR 0 7
74441: PPUSH
74442: LD_VAR 0 8
74446: PPUSH
74447: LD_VAR 0 9
74451: PPUSH
74452: LD_VAR 0 10
74456: PPUSH
74457: LD_VAR 0 11
74461: PPUSH
74462: CALL 25324 0 11
74466: GO 74469
74468: POP
// end ;
74469: PPOPN 11
74471: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74472: LD_VAR 0 1
74476: PPUSH
74477: LD_VAR 0 2
74481: PPUSH
74482: LD_VAR 0 3
74486: PPUSH
74487: LD_VAR 0 4
74491: PPUSH
74492: LD_VAR 0 5
74496: PPUSH
74497: CALL 28727 0 5
// end ; end_of_file
74501: PPOPN 5
74503: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74504: LD_VAR 0 1
74508: PPUSH
74509: LD_VAR 0 2
74513: PPUSH
74514: LD_VAR 0 3
74518: PPUSH
74519: LD_VAR 0 4
74523: PPUSH
74524: LD_VAR 0 5
74528: PPUSH
74529: LD_VAR 0 6
74533: PPUSH
74534: CALL 12976 0 6
// end ;
74538: PPOPN 6
74540: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74541: LD_INT 0
74543: PPUSH
// begin if not units then
74544: LD_VAR 0 1
74548: NOT
74549: IFFALSE 74553
// exit ;
74551: GO 74553
// end ;
74553: PPOPN 7
74555: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74556: CALL 12880 0 0
// end ;
74560: PPOPN 1
74562: END
