// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11619 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 30675 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 30675 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7246
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7184
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// end else
7182: GO 7246
// begin aviradzeQuestDone := true ;
7184: LD_ADDR_EXP 8
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// attackDeltaAllowed := true ;
7192: LD_ADDR_EXP 14
7196: PUSH
7197: LD_INT 1
7199: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7200: LD_STRING ODelta2
7202: PPUSH
7203: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 5
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: PUSH
7227: FOR_IN
7228: IFFALSE 7244
// SetSide ( i , 2 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: CALL_OW 235
7242: GO 7227
7244: POP
7245: POP
// end ; end ;
7246: PPOPN 2
7248: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7249: LD_EXP 10
7253: PUSH
7254: LD_EXP 8
7258: NOT
7259: AND
7260: IFFALSE 7277
7262: GO 7264
7264: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7265: LD_EXP 20
7269: PPUSH
7270: LD_STRING DDelta-Alarm-1
7272: PPUSH
7273: CALL_OW 94
7277: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7278: LD_EXP 7
7282: NOT
7283: PUSH
7284: LD_EXP 22
7288: PPUSH
7289: LD_EXP 23
7293: PPUSH
7294: CALL_OW 74
7298: PPUSH
7299: LD_EXP 23
7303: PPUSH
7304: CALL_OW 296
7308: PUSH
7309: LD_INT 8
7311: LESS
7312: AND
7313: PUSH
7314: LD_INT 2
7316: PPUSH
7317: LD_EXP 22
7321: PPUSH
7322: LD_EXP 23
7326: PPUSH
7327: CALL_OW 74
7331: PPUSH
7332: CALL_OW 292
7336: AND
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 21
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: PUSH
7367: LD_INT 1
7369: GREATER
7370: AND
7371: PUSH
7372: LD_EXP 4
7376: NOT
7377: AND
7378: IFFALSE 7422
7380: GO 7382
7382: DISABLE
// begin sciSpotted := true ;
7383: LD_ADDR_EXP 7
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7391: LD_EXP 22
7395: PPUSH
7396: LD_EXP 23
7400: PPUSH
7401: CALL_OW 74
7405: PPUSH
7406: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7410: LD_EXP 23
7414: PPUSH
7415: LD_STRING DH-1-sci
7417: PPUSH
7418: CALL_OW 88
// end ;
7422: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7423: LD_EXP 4
7427: PUSH
7428: LD_EXP 7
7432: NOT
7433: AND
7434: PUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_EXP 22
7442: PPUSH
7443: LD_EXP 23
7447: PPUSH
7448: CALL_OW 74
7452: PPUSH
7453: CALL_OW 292
7457: AND
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 21
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: PUSH
7488: LD_INT 1
7490: GREATER
7491: AND
7492: PUSH
7493: LD_EXP 4
7497: AND
7498: PUSH
7499: LD_EXP 8
7503: NOT
7504: AND
7505: IFFALSE 7646
7507: GO 7509
7509: DISABLE
7510: LD_INT 0
7512: PPUSH
// begin sciSpotted := true ;
7513: LD_ADDR_EXP 7
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_EXP 22
7530: PPUSH
7531: LD_EXP 23
7535: PPUSH
7536: CALL_OW 74
7540: ST_TO_ADDR
// DialogueOn ;
7541: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 250
7554: PPUSH
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 251
7564: PPUSH
7565: LD_INT 2
7567: PPUSH
7568: LD_INT 3
7570: NEG
7571: PPUSH
7572: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7585: LD_EXP 23
7589: PPUSH
7590: LD_STRING DH-1-sci-a
7592: PPUSH
7593: CALL_OW 88
// if Mike then
7597: LD_EXP 25
7601: IFFALSE 7615
// Say ( Mike , DM-1-sci-a ) ;
7603: LD_EXP 25
7607: PPUSH
7608: LD_STRING DM-1-sci-a
7610: PPUSH
7611: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 250
7624: PPUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 251
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 331
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7649: LD_EXP 10
7653: PUSH
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 256
7663: PUSH
7664: LD_INT 1000
7666: LESS
7667: PUSH
7668: LD_INT 3
7670: PPUSH
7671: CALL_OW 256
7675: PUSH
7676: LD_INT 999
7678: LESS
7679: OR
7680: AND
7681: IFFALSE 7937
7683: GO 7685
7685: DISABLE
7686: LD_INT 0
7688: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7689: LD_ADDR_VAR 0 1
7693: PUSH
7694: LD_INT 22
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 58
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7730: LD_VAR 0 1
7734: PUSH
7735: LD_EXP 19
7739: PPUSH
7740: CALL_OW 302
7744: AND
7745: IFFALSE 7787
// begin if IsInUnit ( Gladstone ) then
7747: LD_EXP 19
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7767
// ComExitBuilding ( Gladstone ) ;
7758: LD_EXP 19
7762: PPUSH
7763: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7767: LD_EXP 19
7771: PPUSH
7772: LD_VAR 0 1
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: CALL_OW 180
// end else
7785: GO 7807
// if IsInUnit ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 310
7796: IFFALSE 7807
// ComExitBuilding ( Gladstone ) ;
7798: LD_EXP 19
7802: PPUSH
7803: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7807: LD_EXP 19
7811: PPUSH
7812: LD_INT 27
7814: PPUSH
7815: LD_INT 51
7817: PPUSH
7818: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7822: LD_EXP 19
7826: PPUSH
7827: LD_STRING D8-Glad-2
7829: PPUSH
7830: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_INT 27
7848: PPUSH
7849: LD_INT 51
7851: PPUSH
7852: CALL_OW 307
7856: PUSH
7857: LD_EXP 19
7861: PPUSH
7862: CALL_OW 310
7866: PPUSH
7867: LD_INT 27
7869: PPUSH
7870: LD_INT 51
7872: PPUSH
7873: CALL_OW 307
7877: OR
7878: PUSH
7879: LD_EXP 19
7883: PPUSH
7884: CALL_OW 301
7888: OR
7889: IFFALSE 7834
// if IsDead ( Gladstone ) then
7891: LD_EXP 19
7895: PPUSH
7896: CALL_OW 301
7900: IFFALSE 7904
// exit ;
7902: GO 7937
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7904: LD_INT 27
7906: PPUSH
7907: LD_INT 51
7909: PPUSH
7910: CALL_OW 428
7914: PPUSH
7915: CALL_OW 64
// gladstoneEscaped := true ;
7919: LD_ADDR_EXP 12
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7927: LD_INT 1
7929: PPUSH
7930: LD_STRING 02_GladstoneEscaped
7932: PPUSH
7933: CALL_OW 39
// end ;
7937: PPOPN 1
7939: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7940: LD_EXP 4
7944: PUSH
7945: LD_EXP 9
7949: PUSH
7950: LD_INT 3
7952: GREATEREQUAL
7953: PUSH
7954: LD_EXP 22
7958: NOT
7959: OR
7960: AND
7961: PUSH
7962: LD_EXP 8
7966: NOT
7967: AND
7968: IFFALSE 8011
7970: GO 7972
7972: DISABLE
// begin aviradzeQuestDone := true ;
7973: LD_ADDR_EXP 8
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7981: LD_EXP 23
7985: PPUSH
7986: LD_STRING DH-1-quest-done
7988: PPUSH
7989: CALL_OW 88
// if Givi then
7993: LD_EXP 24
7997: IFFALSE 8011
// Say ( Givi , DG-1-quest-done ) ;
7999: LD_EXP 24
8003: PPUSH
8004: LD_STRING DG-1-quest-done
8006: PPUSH
8007: CALL_OW 88
// end ;
8011: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8012: LD_INT 11
8014: PPUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 70
8029: PUSH
8030: LD_INT 1
8032: GREATER
8033: PUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 255
8041: PUSH
8042: LD_INT 2
8044: EQUAL
8045: AND
8046: PUSH
8047: LD_EXP 25
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: PUSH
8058: LD_EXP 23
8062: PPUSH
8063: CALL_OW 302
8067: AND
8068: IFFALSE 8213
8070: GO 8072
8072: DISABLE
// begin DialogueOn ;
8073: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8077: LD_INT 47
8079: PPUSH
8080: LD_INT 19
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: LD_INT 6
8088: NEG
8089: PPUSH
8090: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8094: LD_INT 47
8096: PPUSH
8097: LD_INT 19
8099: PPUSH
8100: LD_INT 2
8102: PPUSH
8103: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8107: LD_INT 34
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 6
8118: NEG
8119: PPUSH
8120: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8124: LD_INT 34
8126: PPUSH
8127: LD_INT 32
8129: PPUSH
8130: LD_INT 2
8132: PPUSH
8133: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8137: LD_EXP 25
8141: PPUSH
8142: LD_STRING DM-Prem-1
8144: PPUSH
8145: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8149: LD_EXP 23
8153: PPUSH
8154: LD_STRING DH-Prem-2
8156: PPUSH
8157: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8161: LD_EXP 23
8165: PPUSH
8166: LD_STRING DH-Prem-3
8168: PPUSH
8169: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8173: LD_EXP 25
8177: PPUSH
8178: LD_STRING DM-Prem-4
8180: PPUSH
8181: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8185: LD_EXP 25
8189: PPUSH
8190: LD_STRING DM-Prem-5
8192: PPUSH
8193: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8197: LD_EXP 24
8201: PPUSH
8202: LD_STRING DG-Prem-6
8204: PPUSH
8205: CALL_OW 88
// DialogueOff ;
8209: CALL_OW 7
// end ;
8213: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8214: LD_INT 5
8216: PPUSH
8217: LD_EXP 23
8221: PPUSH
8222: CALL_OW 292
8226: PUSH
8227: LD_EXP 23
8231: PPUSH
8232: LD_EXP 27
8236: PPUSH
8237: CALL_OW 296
8241: PUSH
8242: LD_INT 6
8244: LESS
8245: AND
8246: PUSH
8247: LD_EXP 8
8251: AND
8252: PUSH
8253: LD_EXP 14
8257: NOT
8258: AND
8259: IFFALSE 8397
8261: GO 8263
8263: DISABLE
8264: LD_INT 0
8266: PPUSH
// begin attackDeltaAllowed := true ;
8267: LD_ADDR_EXP 14
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// InGameOn ;
8275: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8279: LD_EXP 23
8283: PPUSH
8284: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8288: LD_INT 10
8290: PPUSH
8291: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8295: LD_EXP 27
8299: PPUSH
8300: LD_EXP 23
8304: PPUSH
8305: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8309: LD_EXP 23
8313: PPUSH
8314: LD_EXP 27
8318: PPUSH
8319: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8323: LD_EXP 23
8327: PPUSH
8328: LD_STRING DH-1-return
8330: PPUSH
8331: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8335: LD_EXP 27
8339: PPUSH
8340: LD_STRING DA-1-return
8342: PPUSH
8343: CALL_OW 88
// InGameOff ;
8347: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8351: LD_STRING ODelta
8353: PPUSH
8354: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8358: LD_ADDR_VAR 0 1
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 5
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8395
// SetSide ( i , 2 ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 235
8393: GO 8378
8395: POP
8396: POP
// end ;
8397: PPOPN 1
8399: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8400: LD_EXP 10
8404: PUSH
8405: LD_EXP 14
8409: NOT
8410: AND
8411: IFFALSE 8424
8413: GO 8415
8415: DISABLE
// spottedBeforeRadio := true ;
8416: LD_ADDR_EXP 6
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
8424: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8425: LD_EXP 14
8429: PUSH
8430: LD_EXP 30
8434: PPUSH
8435: CALL_OW 302
8439: AND
8440: PUSH
8441: LD_INT 1
8443: PPUSH
8444: CALL_OW 255
8448: PUSH
8449: LD_INT 1
8451: EQUAL
8452: AND
8453: PUSH
8454: LD_EXP 20
8458: PPUSH
8459: CALL_OW 302
8463: AND
8464: PUSH
8465: LD_EXP 10
8469: NOT
8470: AND
8471: IFFALSE 9699
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
8480: PPUSH
// begin trap := 0 ;
8481: LD_ADDR_EXP 17
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8489: LD_INT 420
8491: PPUSH
8492: CALL_OW 67
// DialogueOn ;
8496: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8500: LD_EXP 30
8504: PPUSH
8505: LD_STRING DMar-1-radio
8507: PPUSH
8508: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8512: LD_EXP 23
8516: PPUSH
8517: LD_STRING DH-1-radio
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8524: LD_EXP 30
8528: PPUSH
8529: LD_STRING DMar-2-radio
8531: PPUSH
8532: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8536: LD_EXP 23
8540: PPUSH
8541: LD_STRING DH-2-radio
8543: PPUSH
8544: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8548: LD_EXP 26
8552: PPUSH
8553: CALL_OW 302
8557: PUSH
8558: LD_EXP 29
8562: PPUSH
8563: CALL_OW 302
8567: OR
8568: IFFALSE 9699
// begin case Query ( Q1Trap ) of 1 :
8570: LD_STRING Q1Trap
8572: PPUSH
8573: CALL_OW 97
8577: PUSH
8578: LD_INT 1
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8792
8586: POP
// begin if IsOk ( Kamil ) then
8587: LD_EXP 26
8591: PPUSH
8592: CALL_OW 302
8596: IFFALSE 8675
// begin Say ( Kamil , DKam-2-radio ) ;
8598: LD_EXP 26
8602: PPUSH
8603: LD_STRING DKam-2-radio
8605: PPUSH
8606: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8610: LD_EXP 26
8614: PPUSH
8615: LD_STRING DKam-3-radio
8617: PPUSH
8618: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8622: LD_EXP 20
8626: PPUSH
8627: LD_STRING DDelta-3-radio
8629: PPUSH
8630: CALL_OW 94
// dwait ( 0 0$01 ) ;
8634: LD_INT 35
8636: PPUSH
8637: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8641: LD_EXP 23
8645: PPUSH
8646: LD_STRING DH-3-radio
8648: PPUSH
8649: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8653: LD_EXP 26
8657: PPUSH
8658: LD_STRING DKam-4-radio
8660: PPUSH
8661: CALL_OW 88
// trap := 1 ;
8665: LD_ADDR_EXP 17
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// end else
8673: GO 8786
// begin Say ( Sophia , DS-1-radio ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_STRING DS-1-radio
8682: PPUSH
8683: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8687: LD_EXP 29
8691: PPUSH
8692: LD_STRING DS-2-radio
8694: PPUSH
8695: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8699: LD_EXP 20
8703: PPUSH
8704: LD_STRING DDelta-2-radio-s
8706: PPUSH
8707: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8711: LD_EXP 29
8715: PPUSH
8716: LD_STRING DS-3-radio
8718: PPUSH
8719: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8723: LD_EXP 20
8727: PPUSH
8728: LD_STRING DDelta-3-radio-s
8730: PPUSH
8731: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8735: LD_EXP 29
8739: PPUSH
8740: LD_STRING DS-4-radio-s
8742: PPUSH
8743: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8747: LD_EXP 20
8751: PPUSH
8752: LD_STRING DDelta-4-radio-s
8754: PPUSH
8755: CALL_OW 94
// dwait ( 0 0$01 ) ;
8759: LD_INT 35
8761: PPUSH
8762: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8766: LD_EXP 23
8770: PPUSH
8771: LD_STRING DH-1-trap
8773: PPUSH
8774: CALL_OW 88
// trap := 0 ;
8778: LD_ADDR_EXP 17
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ; DialogueOff ;
8786: CALL_OW 7
// end ; 2 :
8790: GO 8810
8792: LD_INT 2
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8809
8800: POP
// begin DialogueOff ;
8801: CALL_OW 7
// exit ;
8805: GO 9699
// end ; end ;
8807: GO 8810
8809: POP
// if trap = 1 then
8810: LD_EXP 17
8814: PUSH
8815: LD_INT 1
8817: EQUAL
8818: IFFALSE 9270
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8820: LD_INT 64
8822: PPUSH
8823: LD_INT 32
8825: PPUSH
8826: LD_INT 2
8828: PPUSH
8829: LD_INT 8
8831: PPUSH
8832: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8836: LD_INT 64
8838: PPUSH
8839: LD_INT 32
8841: PPUSH
8842: CALL_OW 84
// tmp := [ ] ;
8846: LD_ADDR_VAR 0 3
8850: PUSH
8851: EMPTY
8852: ST_TO_ADDR
// k := 3 ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 3
8860: ST_TO_ADDR
// if usForces < 3 then
8861: LD_EXP 21
8865: PUSH
8866: LD_INT 3
8868: LESS
8869: IFFALSE 8881
// k := usForces ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_EXP 21
8880: ST_TO_ADDR
// for i := 1 to k do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_VAR 0 2
8895: PUSH
8896: FOR_TO
8897: IFFALSE 8952
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_VAR 0 3
8908: PPUSH
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 1
8916: PLUS
8917: PPUSH
8918: LD_EXP 21
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8932: LD_ADDR_EXP 21
8936: PUSH
8937: LD_EXP 21
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 3
8949: ST_TO_ADDR
// end ;
8950: GO 8896
8952: POP
8953: POP
// usPatrol := tmp ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: LD_VAR 0 3
8963: ST_TO_ADDR
// for i in tmp do
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_VAR 0 3
8973: PUSH
8974: FOR_IN
8975: IFFALSE 9105
// begin if IsInUnit ( i ) then
8977: LD_VAR 0 1
8981: PPUSH
8982: CALL_OW 310
8986: IFFALSE 8997
// ComExitBuilding ( i ) ;
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_INT 63
9004: PPUSH
9005: LD_INT 31
9007: PPUSH
9008: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_INT 70
9019: PPUSH
9020: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 103
9031: PPUSH
9032: LD_INT 43
9034: PPUSH
9035: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9039: LD_VAR 0 1
9043: PPUSH
9044: LD_INT 105
9046: PPUSH
9047: CALL_OW 202
// if Difficulty > 1 then
9051: LD_OWVAR 67
9055: PUSH
9056: LD_INT 1
9058: GREATER
9059: IFFALSE 9076
// AddComAgressiveMove ( i , 114 , 69 ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_INT 114
9068: PPUSH
9069: LD_INT 69
9071: PPUSH
9072: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 105
9083: PPUSH
9084: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 20
9098: PPUSH
9099: CALL_OW 174
// end ;
9103: GO 8974
9105: POP
9106: POP
// wait ( 0 0$8 ) ;
9107: LD_INT 280
9109: PPUSH
9110: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9114: LD_INT 64
9116: PPUSH
9117: LD_INT 32
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9127: LD_INT 35
9129: PPUSH
9130: CALL_OW 67
// for i in tmp do
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9176
// if IsDead ( i ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 301
9156: IFFALSE 9174
// tmp := tmp diff i ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 3
9167: PUSH
9168: LD_VAR 0 1
9172: DIFF
9173: ST_TO_ADDR
9174: GO 9144
9176: POP
9177: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9178: LD_VAR 0 3
9182: NOT
9183: PUSH
9184: LD_VAR 0 3
9188: PPUSH
9189: LD_INT 95
9191: PUSH
9192: LD_INT 7
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 3
9201: PUSH
9202: LD_INT 60
9204: PUSH
9205: EMPTY
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 72
9220: PUSH
9221: LD_VAR 0 3
9225: EQUAL
9226: OR
9227: IFFALSE 9127
// if tmp then
9229: LD_VAR 0 3
9233: IFFALSE 9260
// begin usPatrol := [ ] ;
9235: LD_ADDR_EXP 16
9239: PUSH
9240: EMPTY
9241: ST_TO_ADDR
// usForces := usForces union tmp ;
9242: LD_ADDR_EXP 21
9246: PUSH
9247: LD_EXP 21
9251: PUSH
9252: LD_VAR 0 3
9256: UNION
9257: ST_TO_ADDR
// end else
9258: GO 9268
// trickyMove := true ;
9260: LD_ADDR_EXP 15
9264: PUSH
9265: LD_INT 1
9267: ST_TO_ADDR
// end else
9268: GO 9699
// begin tmp := [ ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// k := 4 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 4
9284: ST_TO_ADDR
// if usForces < 4 then
9285: LD_EXP 21
9289: PUSH
9290: LD_INT 4
9292: LESS
9293: IFFALSE 9305
// k := usForces ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_EXP 21
9304: ST_TO_ADDR
// for i := 1 to k do
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9376
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_VAR 0 3
9337: PUSH
9338: LD_INT 1
9340: PLUS
9341: PPUSH
9342: LD_EXP 21
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: CALL_OW 1
9355: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9356: LD_ADDR_EXP 21
9360: PUSH
9361: LD_EXP 21
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 3
9373: ST_TO_ADDR
// end ;
9374: GO 9320
9376: POP
9377: POP
// if Lynch then
9378: LD_EXP 20
9382: IFFALSE 9400
// tmp := tmp ^ Lynch ;
9384: LD_ADDR_VAR 0 3
9388: PUSH
9389: LD_VAR 0 3
9393: PUSH
9394: LD_EXP 20
9398: ADD
9399: ST_TO_ADDR
// usPatrol := tmp ;
9400: LD_ADDR_EXP 16
9404: PUSH
9405: LD_VAR 0 3
9409: ST_TO_ADDR
// for i in tmp do
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_VAR 0 3
9419: PUSH
9420: FOR_IN
9421: IFFALSE 9514
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9443
// ComExitBuilding ( i ) ;
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9443: LD_VAR 0 1
9447: PPUSH
9448: LD_INT 69
9450: PPUSH
9451: LD_INT 15
9453: PPUSH
9454: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_INT 700
9465: PPUSH
9466: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9470: LD_VAR 0 1
9474: PPUSH
9475: LD_INT 55
9477: PPUSH
9478: LD_INT 43
9480: PPUSH
9481: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 700
9492: PPUSH
9493: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 42
9504: PPUSH
9505: LD_INT 20
9507: PPUSH
9508: CALL_OW 174
// end ;
9512: GO 9420
9514: POP
9515: POP
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// for i in tmp do
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 3
9532: PUSH
9533: FOR_IN
9534: IFFALSE 9565
// if IsDead ( i ) then
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL_OW 301
9545: IFFALSE 9563
// tmp := tmp diff i ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_VAR 0 3
9556: PUSH
9557: LD_VAR 0 1
9561: DIFF
9562: ST_TO_ADDR
9563: GO 9533
9565: POP
9566: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9567: LD_VAR 0 3
9571: NOT
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 95
9580: PUSH
9581: LD_INT 7
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 60
9593: PUSH
9594: EMPTY
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PUSH
9610: LD_VAR 0 3
9614: EQUAL
9615: OR
9616: IFFALSE 9516
// if not tmp then
9618: LD_VAR 0 3
9622: NOT
9623: IFFALSE 9635
// trickyMove := true else
9625: LD_ADDR_EXP 15
9629: PUSH
9630: LD_INT 1
9632: ST_TO_ADDR
9633: GO 9642
// usPatrol := [ ] ;
9635: LD_ADDR_EXP 16
9639: PUSH
9640: EMPTY
9641: ST_TO_ADDR
// if tmp diff Lynch then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_EXP 20
9651: DIFF
9652: IFFALSE 9676
// usForces := usForces union ( tmp diff Lynch ) ;
9654: LD_ADDR_EXP 21
9658: PUSH
9659: LD_EXP 21
9663: PUSH
9664: LD_VAR 0 3
9668: PUSH
9669: LD_EXP 20
9673: DIFF
9674: UNION
9675: ST_TO_ADDR
// if IsOk ( Lynch ) then
9676: LD_EXP 20
9680: PPUSH
9681: CALL_OW 302
9685: IFFALSE 9699
// ComEnterUnit ( Lynch , Delta ) ;
9687: LD_EXP 20
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 120
// end ; end ; end ;
9699: PPOPN 3
9701: END
// every 0 0$1 trigger trickyMove do
9702: LD_EXP 15
9706: IFFALSE 9718
9708: GO 9710
9710: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9711: LD_STRING ACH_TRAP
9713: PPUSH
9714: CALL_OW 543
9718: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9719: LD_INT 22
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: IFFALSE 9770
9760: GO 9762
9762: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9763: LD_STRING ACH_SCRAP
9765: PPUSH
9766: CALL_OW 543
9770: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9771: LD_EXP 16
9775: PPUSH
9776: LD_INT 101
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: PUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_EXP 23
9798: PPUSH
9799: CALL_OW 292
9803: AND
9804: IFFALSE 9937
9806: GO 9808
9808: DISABLE
// begin if not trap then
9809: LD_EXP 17
9813: NOT
9814: IFFALSE 9842
// begin Say ( Heike , DH-2-trap ) ;
9816: LD_EXP 23
9820: PPUSH
9821: LD_STRING DH-2-trap
9823: PPUSH
9824: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DM-2-trap
9835: PPUSH
9836: CALL_OW 88
// end else
9840: GO 9854
// begin Say ( Heike , DH-1-trap-a ) ;
9842: LD_EXP 23
9846: PPUSH
9847: LD_STRING DH-1-trap-a
9849: PPUSH
9850: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// until trickyMove ;
9861: LD_EXP 15
9865: IFFALSE 9854
// Say ( Heike , DH-3-trap ) ;
9867: LD_EXP 23
9871: PPUSH
9872: LD_STRING DH-3-trap
9874: PPUSH
9875: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9879: LD_EXP 24
9883: PPUSH
9884: CALL_OW 302
9888: PUSH
9889: LD_EXP 28
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 9937
// begin Say ( Givi , DG-3-trap ) ;
9901: LD_EXP 24
9905: PPUSH
9906: LD_STRING DG-3-trap
9908: PPUSH
9909: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9913: LD_EXP 28
9917: PPUSH
9918: LD_STRING DK-3-trap
9920: PPUSH
9921: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9925: LD_EXP 24
9929: PPUSH
9930: LD_STRING DG-4-trap
9932: PPUSH
9933: CALL_OW 88
// end ; end ;
9937: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 255
9945: PUSH
9946: LD_INT 2
9948: EQUAL
9949: PUSH
9950: LD_EXP 14
9954: AND
9955: IFFALSE 10114
9957: GO 9959
9959: DISABLE
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
// begin if not IsOk ( Kaia ) then
9964: LD_EXP 28
9968: PPUSH
9969: CALL_OW 302
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10114
// if tick < 5 5$00 then
9978: LD_OWVAR 1
9982: PUSH
9983: LD_INT 10500
9985: LESS
9986: IFFALSE 9995
// SetAchievement ( ACH_DELTA ) ;
9988: LD_STRING ACH_DELTA
9990: PPUSH
9991: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9995: LD_EXP 28
9999: PPUSH
10000: LD_STRING DK-1-capture
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10007: LD_EXP 23
10011: PPUSH
10012: LD_STRING DH-1-capture
10014: PPUSH
10015: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 25
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10114
// for i in tmp do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10112
// begin if IsInUnit ( i ) then
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL_OW 310
10084: IFFALSE 10095
// ComExitBuilding ( i ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 38
10102: PPUSH
10103: LD_INT 23
10105: PPUSH
10106: CALL_OW 174
// end ;
10110: GO 10072
10112: POP
10113: POP
// end ;
10114: PPOPN 2
10116: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10117: LD_INT 3
10119: PPUSH
10120: CALL_OW 255
10124: PUSH
10125: LD_INT 2
10127: EQUAL
10128: PUSH
10129: LD_EXP 14
10133: AND
10134: IFFALSE 10166
10136: GO 10138
10138: DISABLE
// begin DialogueOn ;
10139: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10143: LD_EXP 27
10147: PPUSH
10148: LD_STRING DA-1-capture
10150: PPUSH
10151: CALL_OW 88
// DialogueOff ;
10155: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10159: LD_STRING OTame
10161: PPUSH
10162: CALL_OW 337
// end ;
10166: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 321
10177: PUSH
10178: LD_INT 2
10180: EQUAL
10181: PUSH
10182: LD_EXP 14
10186: AND
10187: IFFALSE 10338
10189: GO 10191
10191: DISABLE
// begin DialogueOn ;
10192: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10196: LD_EXP 27
10200: PPUSH
10201: LD_STRING DA-1-ape
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10208: LD_EXP 23
10212: PPUSH
10213: LD_STRING DH-1-ape
10215: PPUSH
10216: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10220: LD_EXP 27
10224: PPUSH
10225: LD_STRING DA-2-ape
10227: PPUSH
10228: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_STRING DA-3-ape
10239: PPUSH
10240: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10244: LD_EXP 23
10248: PPUSH
10249: LD_STRING DH-3-ape
10251: PPUSH
10252: CALL_OW 88
// DialogueOff ;
10256: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10260: LD_INT 22
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 12
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: LD_INT 0
10291: EQUAL
10292: IFFALSE 10304
// SpawnApeman ( forest , 2 ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10304: LD_INT 35
10306: PPUSH
10307: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10311: LD_INT 25
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: IFFALSE 10304
// YouLost ( Ape ) ;
10331: LD_STRING Ape
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10339: LD_EXP 18
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_OWVAR 67
10366: ARRAY
10367: GREATEREQUAL
10368: IFFALSE 10412
10370: GO 10372
10372: DISABLE
// begin DialogueOn ;
10373: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10377: LD_EXP 27
10381: PPUSH
10382: LD_STRING DA-1-failure
10384: PPUSH
10385: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10389: LD_EXP 27
10393: PPUSH
10394: LD_STRING DA-2-failure
10396: PPUSH
10397: CALL_OW 88
// YouLost ( Failure ) ;
10401: LD_STRING Failure
10403: PPUSH
10404: CALL_OW 104
// DialogueOff ;
10408: CALL_OW 7
// end ;
10412: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10413: LD_EXP 28
10417: PPUSH
10418: CALL_OW 256
10422: PUSH
10423: LD_INT 3
10425: LESS
10426: IFFALSE 10559
10428: GO 10430
10430: DISABLE
// begin DialogueOn ;
10431: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10435: LD_EXP 28
10439: PPUSH
10440: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10444: LD_EXP 28
10448: PPUSH
10449: LD_STRING DK-Kaiaout-1
10451: PPUSH
10452: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10456: LD_EXP 23
10460: PPUSH
10461: LD_STRING DH-Kaiaout-2
10463: PPUSH
10464: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10468: LD_EXP 24
10472: PPUSH
10473: LD_STRING DG-Kaiaout-3
10475: PPUSH
10476: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10480: LD_EXP 23
10484: PPUSH
10485: LD_STRING DH-Kaiaout-4
10487: PPUSH
10488: CALL_OW 88
// if Givi then
10492: LD_EXP 24
10496: IFFALSE 10546
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10498: LD_EXP 24
10502: PPUSH
10503: LD_STRING DG-Kaiaout-5
10505: PPUSH
10506: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10510: LD_EXP 23
10514: PPUSH
10515: LD_STRING DH-Kaiaout-6
10517: PPUSH
10518: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10522: LD_EXP 24
10526: PPUSH
10527: LD_STRING DG-Kaiaout-7
10529: PPUSH
10530: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10534: LD_EXP 23
10538: PPUSH
10539: LD_STRING DH-Kaiaout-8
10541: PPUSH
10542: CALL_OW 88
// end ; DialogueOff ;
10546: CALL_OW 7
// KillUnit ( Kaia ) ;
10550: LD_EXP 28
10554: PPUSH
10555: CALL_OW 66
// end ;
10559: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10560: LD_INT 22
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 23
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: PUSH
10589: LD_EXP 27
10593: PPUSH
10594: CALL_OW 302
10598: AND
10599: PUSH
10600: LD_EXP 27
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: IFFALSE 11559
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10622: LD_INT 22
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 34
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: IFFALSE 10763
// begin Query ( QEnemyInSight ) ;
10670: LD_STRING QEnemyInSight
10672: PPUSH
10673: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10677: LD_INT 35
10679: PPUSH
10680: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10684: LD_INT 22
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: NOT
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: AND
10761: IFFALSE 10677
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 69
10796: ST_TO_ADDR
// InGameOn ;
10797: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_EXP 27
10819: PPUSH
10820: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10824: LD_EXP 27
10828: PPUSH
10829: LD_VAR 0 1
10833: PPUSH
10834: CALL_OW 119
// wait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10845: LD_EXP 27
10849: PPUSH
10850: LD_STRING DA-1-tame-a
10852: PPUSH
10853: CALL_OW 88
// if IsOk ( Mike ) then
10857: LD_EXP 25
10861: PPUSH
10862: CALL_OW 302
10866: IFFALSE 10904
// begin Say ( Mike , DM-1-tame-a ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DM-1-tame-a
10875: PPUSH
10876: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10880: LD_EXP 29
10884: PPUSH
10885: LD_STRING DS-1-tame-a
10887: PPUSH
10888: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10892: LD_EXP 25
10896: PPUSH
10897: LD_STRING DM-2-tame-a
10899: PPUSH
10900: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10904: LD_INT 105
10906: PPUSH
10907: CALL_OW 67
// PrepareFarmer ;
10911: CALL 12238 0 0
// CenterOnUnits ( Farmer ) ;
10915: LD_EXP 31
10919: PPUSH
10920: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10924: LD_EXP 31
10928: PPUSH
10929: LD_INT 105
10931: PPUSH
10932: LD_INT 59
10934: PPUSH
10935: CALL_OW 111
// AddComHold ( Farmer ) ;
10939: LD_EXP 31
10943: PPUSH
10944: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10948: LD_EXP 31
10952: PPUSH
10953: LD_STRING DF-1-end
10955: PPUSH
10956: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10960: LD_EXP 27
10964: PPUSH
10965: LD_STRING DA-1-end
10967: PPUSH
10968: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10972: LD_EXP 31
10976: PPUSH
10977: LD_STRING DF-2-end
10979: PPUSH
10980: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10984: LD_EXP 27
10988: PPUSH
10989: LD_STRING DA-2-end
10991: PPUSH
10992: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10996: LD_EXP 31
11000: PPUSH
11001: LD_STRING DF-3-end
11003: PPUSH
11004: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11008: LD_EXP 23
11012: PPUSH
11013: LD_STRING DH-3-end
11015: PPUSH
11016: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11020: LD_EXP 31
11024: PPUSH
11025: LD_STRING DF-4-end
11027: PPUSH
11028: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11032: LD_OWVAR 1
11036: PUSH
11037: LD_INT 52500
11039: PUSH
11040: LD_INT 47250
11042: PUSH
11043: LD_INT 42000
11045: PUSH
11046: LD_INT 31500
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: ARRAY
11060: LESSEQUAL
11061: IFFALSE 11075
// AddMedal ( med1 , 1 ) else
11063: LD_STRING med1
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 101
11073: GO 11086
// AddMedal ( med1 , - 1 ) ;
11075: LD_STRING med1
11077: PPUSH
11078: LD_INT 1
11080: NEG
11081: PPUSH
11082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11086: LD_INT 22
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: LD_INT 0
11117: EQUAL
11118: PUSH
11119: LD_EXP 12
11123: NOT
11124: AND
11125: IFFALSE 11139
// AddMedal ( med2 , 1 ) else
11127: LD_STRING med2
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 101
11137: GO 11150
// AddMedal ( med2 , - 1 ) ;
11139: LD_STRING med2
11141: PPUSH
11142: LD_INT 1
11144: NEG
11145: PPUSH
11146: CALL_OW 101
// if trickyMove then
11150: LD_EXP 15
11154: IFFALSE 11168
// AddMedal ( med3 , 1 ) else
11156: LD_STRING med3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 101
11166: GO 11198
// if spottedBeforeRadio then
11168: LD_EXP 6
11172: IFFALSE 11187
// AddMedal ( med3 , - 2 ) else
11174: LD_STRING med3
11176: PPUSH
11177: LD_INT 2
11179: NEG
11180: PPUSH
11181: CALL_OW 101
11185: GO 11198
// AddMedal ( med3 , - 1 ) ;
11187: LD_STRING med3
11189: PPUSH
11190: LD_INT 1
11192: NEG
11193: PPUSH
11194: CALL_OW 101
// GiveMedals ( MAIN ) ;
11198: LD_STRING MAIN
11200: PPUSH
11201: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_STRING 02_ape
11212: PPUSH
11213: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11271: LD_EXP 23
11275: PPUSH
11276: LD_STRING 02_Heike
11278: PPUSH
11279: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11283: LD_EXP 27
11287: PPUSH
11288: LD_STRING 02_Aviradze
11290: PPUSH
11291: CALL_OW 38
// if Givi then
11295: LD_EXP 24
11299: IFFALSE 11313
// SaveCharacters ( Givi , 02_Givi ) ;
11301: LD_EXP 24
11305: PPUSH
11306: LD_STRING 02_Givi
11308: PPUSH
11309: CALL_OW 38
// if Mike then
11313: LD_EXP 25
11317: IFFALSE 11331
// SaveCharacters ( Mike , 02_Mike ) ;
11319: LD_EXP 25
11323: PPUSH
11324: LD_STRING 02_Mike
11326: PPUSH
11327: CALL_OW 38
// if Kamil then
11331: LD_EXP 26
11335: IFFALSE 11349
// SaveCharacters ( Kamil , 02_Kamil ) ;
11337: LD_EXP 26
11341: PPUSH
11342: LD_STRING 02_Kamil
11344: PPUSH
11345: CALL_OW 38
// if Kaia then
11349: LD_EXP 28
11353: IFFALSE 11367
// SaveCharacters ( Kaia , 02_Kaia ) ;
11355: LD_EXP 28
11359: PPUSH
11360: LD_STRING 02_Kaia
11362: PPUSH
11363: CALL_OW 38
// if Sophia then
11367: LD_EXP 29
11371: IFFALSE 11385
// SaveCharacters ( Sophia , 02_Sophia ) ;
11373: LD_EXP 29
11377: PPUSH
11378: LD_STRING 02_Sophia
11380: PPUSH
11381: CALL_OW 38
// if Markov then
11385: LD_EXP 30
11389: IFFALSE 11403
// SaveCharacters ( Markov , 02_Markov ) ;
11391: LD_EXP 30
11395: PPUSH
11396: LD_STRING 02_Markov
11398: PPUSH
11399: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11403: LD_VAR 0 1
11407: PUSH
11408: LD_EXP 23
11412: PUSH
11413: LD_EXP 27
11417: PUSH
11418: LD_EXP 24
11422: PUSH
11423: LD_EXP 25
11427: PUSH
11428: LD_EXP 26
11432: PUSH
11433: LD_EXP 29
11437: PUSH
11438: LD_EXP 28
11442: PUSH
11443: LD_EXP 30
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: DIFF
11458: IFFALSE 11523
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 27
11474: PUSH
11475: LD_EXP 24
11479: PUSH
11480: LD_EXP 25
11484: PUSH
11485: LD_EXP 26
11489: PUSH
11490: LD_EXP 29
11494: PUSH
11495: LD_EXP 28
11499: PUSH
11500: LD_EXP 30
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: DIFF
11515: PPUSH
11516: LD_STRING 02_others
11518: PPUSH
11519: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11523: LD_STRING enableBioCharacter(BIO_KRAY)
11525: PPUSH
11526: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11530: LD_STRING enableBioCharacter(BIO_AVIR)
11532: PPUSH
11533: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11537: LD_STRING enableBioCharacter(BIO_SOPH)
11539: PPUSH
11540: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11544: LD_STRING enableBioCharacter(BIO_KAMI)
11546: PPUSH
11547: CALL_OW 559
// YouWin ;
11551: CALL_OW 103
// InGameOff ;
11555: CALL_OW 9
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11562: LD_OWVAR 1
11566: PUSH
11567: LD_EXP 13
11571: GREATER
11572: PUSH
11573: LD_EXP 4
11577: AND
11578: IFFALSE 11618
11580: GO 11582
11582: DISABLE
// begin InGameOn ;
11583: CALL_OW 8
// PrepareFarmer ;
11587: CALL 12238 0 0
// CenterNowOnUnits ( Farmer ) ;
11591: LD_EXP 31
11595: PPUSH
11596: CALL_OW 87
// wait ( 0 0$2 ) ;
11600: LD_INT 70
11602: PPUSH
11603: CALL_OW 67
// YouLost ( Farmer ) ;
11607: LD_STRING Farmer
11609: PPUSH
11610: CALL_OW 104
// InGameOff ;
11614: CALL_OW 9
// end ; end_of_file
11618: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
11623: PPUSH
// uc_side := 2 ;
11624: LD_ADDR_OWVAR 20
11628: PUSH
11629: LD_INT 2
11631: ST_TO_ADDR
// uc_nation := 2 ;
11632: LD_ADDR_OWVAR 21
11636: PUSH
11637: LD_INT 2
11639: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11640: LD_ADDR_EXP 23
11644: PUSH
11645: LD_STRING Heike
11647: PPUSH
11648: LD_EXP 1
11652: NOT
11653: PPUSH
11654: LD_EXP 2
11658: PPUSH
11659: CALL 30675 0 3
11663: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11664: LD_EXP 23
11668: PPUSH
11669: LD_INT 83
11671: PPUSH
11672: LD_INT 72
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11682: LD_ADDR_EXP 24
11686: PUSH
11687: LD_STRING Givi
11689: PPUSH
11690: LD_EXP 1
11694: NOT
11695: PPUSH
11696: LD_EXP 2
11700: PPUSH
11701: CALL 30675 0 3
11705: ST_TO_ADDR
// if Givi then
11706: LD_EXP 24
11710: IFFALSE 11730
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11712: LD_EXP 24
11716: PPUSH
11717: LD_INT 87
11719: PPUSH
11720: LD_INT 76
11722: PPUSH
11723: LD_INT 0
11725: PPUSH
11726: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11730: LD_ADDR_EXP 25
11734: PUSH
11735: LD_STRING Mike
11737: PPUSH
11738: LD_EXP 1
11742: NOT
11743: PPUSH
11744: LD_EXP 2
11748: PPUSH
11749: CALL 30675 0 3
11753: ST_TO_ADDR
// if Mike then
11754: LD_EXP 25
11758: IFFALSE 11778
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11760: LD_EXP 25
11764: PPUSH
11765: LD_INT 84
11767: PPUSH
11768: LD_INT 76
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11778: LD_ADDR_EXP 26
11782: PUSH
11783: LD_STRING Kamil
11785: PPUSH
11786: LD_EXP 1
11790: NOT
11791: PPUSH
11792: LD_EXP 2
11796: PPUSH
11797: CALL 30675 0 3
11801: ST_TO_ADDR
// if Kamil then
11802: LD_EXP 26
11806: IFFALSE 11826
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11808: LD_EXP 26
11812: PPUSH
11813: LD_INT 85
11815: PPUSH
11816: LD_INT 78
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 48
// uc_side := 5 ;
11826: LD_ADDR_OWVAR 20
11830: PUSH
11831: LD_INT 5
11833: ST_TO_ADDR
// uc_nation := 2 ;
11834: LD_ADDR_OWVAR 21
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11842: LD_ADDR_EXP 27
11846: PUSH
11847: LD_STRING Aviradze
11849: PPUSH
11850: LD_INT 0
11852: PPUSH
11853: LD_STRING 
11855: PPUSH
11856: CALL 30675 0 3
11860: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11861: LD_EXP 27
11865: PPUSH
11866: LD_INT 106
11868: PPUSH
11869: LD_INT 38
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11879: LD_EXP 27
11883: PPUSH
11884: LD_INT 103
11886: PPUSH
11887: LD_INT 38
11889: PPUSH
11890: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11894: LD_ADDR_EXP 28
11898: PUSH
11899: LD_STRING Kaia
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: LD_STRING 
11907: PPUSH
11908: CALL 30675 0 3
11912: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11913: LD_EXP 28
11917: PPUSH
11918: LD_INT 100
11920: PPUSH
11921: LD_INT 34
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_INT 100
11938: PPUSH
11939: LD_INT 39
11941: PPUSH
11942: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11946: LD_ADDR_EXP 29
11950: PUSH
11951: LD_STRING Sophia
11953: PPUSH
11954: LD_INT 0
11956: PPUSH
11957: LD_STRING 
11959: PPUSH
11960: CALL 30675 0 3
11964: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11965: LD_EXP 29
11969: PPUSH
11970: LD_INT 109
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11983: LD_EXP 29
11987: PPUSH
11988: LD_INT 100
11990: PPUSH
11991: LD_INT 39
11993: PPUSH
11994: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11998: LD_ADDR_EXP 30
12002: PUSH
12003: LD_STRING Markov
12005: PPUSH
12006: LD_INT 0
12008: PPUSH
12009: LD_STRING 
12011: PPUSH
12012: CALL 30675 0 3
12016: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12017: LD_INT 5
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 21
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 42
12034: PPUSH
12035: LD_INT 90
12037: PUSH
12038: LD_INT 70
12040: PUSH
12041: LD_INT 60
12043: PUSH
12044: LD_INT 50
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_OWVAR 67
12057: ARRAY
12058: PPUSH
12059: CALL 241 0 7
// veh := CreateVehicle ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 4
12080: PPUSH
12081: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 109
12092: PPUSH
12093: LD_INT 38
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12103: LD_EXP 30
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12117: LD_EXP 28
12121: PPUSH
12122: LD_EXP 27
12126: PPUSH
12127: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12131: LD_EXP 27
12135: PPUSH
12136: LD_EXP 28
12140: PPUSH
12141: CALL_OW 119
// if not Givi or not Mike then
12145: LD_EXP 24
12149: NOT
12150: PUSH
12151: LD_EXP 25
12155: NOT
12156: OR
12157: IFFALSE 12233
// begin uc_nation := 2 ;
12159: LD_ADDR_OWVAR 21
12163: PUSH
12164: LD_INT 2
12166: ST_TO_ADDR
// uc_side := 5 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 5
12174: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12175: LD_INT 1
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 380
// un := CreateHuman ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: CALL_OW 44
12197: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 112
12205: PPUSH
12206: LD_INT 40
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12219: LD_VAR 0 2
12223: PPUSH
12224: LD_EXP 27
12228: PPUSH
12229: CALL_OW 119
// end ; end ;
12233: LD_VAR 0 1
12237: RET
// export function PrepareFarmer ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// uc_side := 5 ;
12242: LD_ADDR_OWVAR 20
12246: PUSH
12247: LD_INT 5
12249: ST_TO_ADDR
// uc_nation := 2 ;
12250: LD_ADDR_OWVAR 21
12254: PUSH
12255: LD_INT 2
12257: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12258: LD_ADDR_EXP 31
12262: PUSH
12263: LD_STRING Farmer
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: LD_STRING 
12271: PPUSH
12272: CALL 30675 0 3
12276: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12277: LD_EXP 31
12281: PPUSH
12282: LD_INT 106
12284: PPUSH
12285: LD_INT 62
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 48
// for i := 1 to 5 do
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_INT 5
12307: PUSH
12308: FOR_TO
12309: IFFALSE 12347
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12324: CALL_OW 44
12328: PPUSH
12329: LD_INT 105
12331: PPUSH
12332: LD_INT 64
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// end ;
12345: GO 12308
12347: POP
12348: POP
// end ; end_of_file
12349: LD_VAR 0 1
12353: RET
// every 2 2$20 + 0 0$10 do
12354: GO 12356
12356: DISABLE
// begin enable ;
12357: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12358: LD_INT 1
12360: PPUSH
12361: LD_INT 5
12363: PPUSH
12364: CALL_OW 12
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 55
// if tick > 6 6$00 then
12379: LD_OWVAR 1
12383: PUSH
12384: LD_INT 12600
12386: GREATER
12387: IFFALSE 12390
// disable ;
12389: DISABLE
// end ; end_of_file
12390: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12391: LD_VAR 0 1
12395: PUSH
12396: LD_EXP 23
12400: EQUAL
12401: IFFALSE 12410
// YouLost ( Heike ) ;
12403: LD_STRING Heike
12405: PPUSH
12406: CALL_OW 104
// if un = Aviradze then
12410: LD_VAR 0 1
12414: PUSH
12415: LD_EXP 27
12419: EQUAL
12420: IFFALSE 12429
// YouLost ( Aviradze ) ;
12422: LD_STRING Aviradze
12424: PPUSH
12425: CALL_OW 104
// if un = usLab then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 3
12436: EQUAL
12437: IFFALSE 12446
// YouLost ( Lab ) ;
12439: LD_STRING Lab
12441: PPUSH
12442: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 21
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: PUSH
12491: LD_EXP 23
12495: PUSH
12496: LD_EXP 27
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: DIFF
12505: IN
12506: PUSH
12507: LD_EXP 4
12511: AND
12512: IFFALSE 12528
// lostCounter := lostCounter + 1 ;
12514: LD_ADDR_EXP 18
12518: PUSH
12519: LD_EXP 18
12523: PUSH
12524: LD_INT 1
12526: PLUS
12527: ST_TO_ADDR
// end ;
12528: PPOPN 1
12530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12531: LD_INT 23
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: LD_INT 0
12562: EQUAL
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PUSH
12593: LD_INT 0
12595: EQUAL
12596: AND
12597: IFFALSE 12609
12599: GO 12601
12601: DISABLE
// YouLost ( Eng ) ;
12602: LD_STRING Eng
12604: PPUSH
12605: CALL_OW 104
12609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12610: LD_VAR 0 1
12614: PUSH
12615: LD_EXP 22
12619: IN
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_INT 2
12628: EQUAL
12629: AND
12630: IFFALSE 12662
// begin usSci := usSci diff un ;
12632: LD_ADDR_EXP 22
12636: PUSH
12637: LD_EXP 22
12641: PUSH
12642: LD_VAR 0 1
12646: DIFF
12647: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12648: LD_ADDR_EXP 9
12652: PUSH
12653: LD_EXP 9
12657: PUSH
12658: LD_INT 1
12660: PLUS
12661: ST_TO_ADDR
// end ; end ;
12662: PPOPN 3
12664: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: EQUAL
12673: PUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 5
12681: EQUAL
12682: AND
12683: IFFALSE 12692
// YouLost ( FriendlyFire ) ;
12685: LD_STRING FriendlyFire
12687: PPUSH
12688: CALL_OW 104
// end ; end_of_file
12692: PPOPN 2
12694: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12695: LD_INT 0
12697: PPUSH
// ar_miner := 81 ;
12698: LD_ADDR_EXP 39
12702: PUSH
12703: LD_INT 81
12705: ST_TO_ADDR
// ar_crane := 88 ;
12706: LD_ADDR_EXP 38
12710: PUSH
12711: LD_INT 88
12713: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12714: LD_ADDR_EXP 33
12718: PUSH
12719: LD_INT 89
12721: ST_TO_ADDR
// us_hack := 99 ;
12722: LD_ADDR_EXP 34
12726: PUSH
12727: LD_INT 99
12729: ST_TO_ADDR
// us_artillery := 97 ;
12730: LD_ADDR_EXP 35
12734: PUSH
12735: LD_INT 97
12737: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12738: LD_ADDR_EXP 36
12742: PUSH
12743: LD_INT 91
12745: ST_TO_ADDR
// ar_mortar := 92 ;
12746: LD_ADDR_EXP 37
12750: PUSH
12751: LD_INT 92
12753: ST_TO_ADDR
// ru_radar := 98 ;
12754: LD_ADDR_EXP 32
12758: PUSH
12759: LD_INT 98
12761: ST_TO_ADDR
// tech_Artillery := 80 ;
12762: LD_ADDR_EXP 40
12766: PUSH
12767: LD_INT 80
12769: ST_TO_ADDR
// tech_RadMat := 81 ;
12770: LD_ADDR_EXP 41
12774: PUSH
12775: LD_INT 81
12777: ST_TO_ADDR
// tech_BasicTools := 82 ;
12778: LD_ADDR_EXP 42
12782: PUSH
12783: LD_INT 82
12785: ST_TO_ADDR
// tech_Cargo := 83 ;
12786: LD_ADDR_EXP 43
12790: PUSH
12791: LD_INT 83
12793: ST_TO_ADDR
// tech_Track := 84 ;
12794: LD_ADDR_EXP 44
12798: PUSH
12799: LD_INT 84
12801: ST_TO_ADDR
// tech_Crane := 85 ;
12802: LD_ADDR_EXP 45
12806: PUSH
12807: LD_INT 85
12809: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12810: LD_ADDR_EXP 46
12814: PUSH
12815: LD_INT 86
12817: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12818: LD_ADDR_EXP 47
12822: PUSH
12823: LD_INT 87
12825: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12826: LD_ADDR_EXP 48
12830: PUSH
12831: LD_INT 88
12833: ST_TO_ADDR
// class_mastodont := 31 ;
12834: LD_ADDR_EXP 49
12838: PUSH
12839: LD_INT 31
12841: ST_TO_ADDR
// class_horse := 21 ;
12842: LD_ADDR_EXP 50
12846: PUSH
12847: LD_INT 21
12849: ST_TO_ADDR
// end ;
12850: LD_VAR 0 1
12854: RET
// every 1 do
12855: GO 12857
12857: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12858: CALL 12695 0 0
12862: END
// every 0 0$1 do
12863: GO 12865
12865: DISABLE
// begin enable ;
12866: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12867: LD_STRING updateTimer(
12869: PUSH
12870: LD_OWVAR 1
12874: STR
12875: PUSH
12876: LD_STRING );
12878: STR
12879: PPUSH
12880: CALL_OW 559
// end ;
12884: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12885: LD_INT 0
12887: PPUSH
// if p2 = 100 then
12888: LD_VAR 0 2
12892: PUSH
12893: LD_INT 100
12895: EQUAL
12896: IFFALSE 13899
// begin if not StreamModeActive then
12898: LD_EXP 51
12902: NOT
12903: IFFALSE 12913
// StreamModeActive := true ;
12905: LD_ADDR_EXP 51
12909: PUSH
12910: LD_INT 1
12912: ST_TO_ADDR
// if p3 = 0 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_INT 0
12920: EQUAL
12921: IFFALSE 12927
// InitStreamMode ;
12923: CALL 14059 0 0
// if p3 = 1 then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 1
12934: EQUAL
12935: IFFALSE 12945
// sRocket := true ;
12937: LD_ADDR_EXP 56
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// if p3 = 2 then
12945: LD_VAR 0 3
12949: PUSH
12950: LD_INT 2
12952: EQUAL
12953: IFFALSE 12963
// sSpeed := true ;
12955: LD_ADDR_EXP 55
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if p3 = 3 then
12963: LD_VAR 0 3
12967: PUSH
12968: LD_INT 3
12970: EQUAL
12971: IFFALSE 12981
// sEngine := true ;
12973: LD_ADDR_EXP 57
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
// if p3 = 4 then
12981: LD_VAR 0 3
12985: PUSH
12986: LD_INT 4
12988: EQUAL
12989: IFFALSE 12999
// sSpec := true ;
12991: LD_ADDR_EXP 54
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 5 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 5
13006: EQUAL
13007: IFFALSE 13017
// sLevel := true ;
13009: LD_ADDR_EXP 58
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if p3 = 6 then
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 6
13024: EQUAL
13025: IFFALSE 13035
// sArmoury := true ;
13027: LD_ADDR_EXP 59
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if p3 = 7 then
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 7
13042: EQUAL
13043: IFFALSE 13053
// sRadar := true ;
13045: LD_ADDR_EXP 60
13049: PUSH
13050: LD_INT 1
13052: ST_TO_ADDR
// if p3 = 8 then
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 8
13060: EQUAL
13061: IFFALSE 13071
// sBunker := true ;
13063: LD_ADDR_EXP 61
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if p3 = 9 then
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 9
13078: EQUAL
13079: IFFALSE 13089
// sHack := true ;
13081: LD_ADDR_EXP 62
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if p3 = 10 then
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 10
13096: EQUAL
13097: IFFALSE 13107
// sFire := true ;
13099: LD_ADDR_EXP 63
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// if p3 = 11 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 11
13114: EQUAL
13115: IFFALSE 13125
// sRefresh := true ;
13117: LD_ADDR_EXP 64
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// if p3 = 12 then
13125: LD_VAR 0 3
13129: PUSH
13130: LD_INT 12
13132: EQUAL
13133: IFFALSE 13143
// sExp := true ;
13135: LD_ADDR_EXP 65
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// if p3 = 13 then
13143: LD_VAR 0 3
13147: PUSH
13148: LD_INT 13
13150: EQUAL
13151: IFFALSE 13161
// sDepot := true ;
13153: LD_ADDR_EXP 66
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// if p3 = 14 then
13161: LD_VAR 0 3
13165: PUSH
13166: LD_INT 14
13168: EQUAL
13169: IFFALSE 13179
// sFlag := true ;
13171: LD_ADDR_EXP 67
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// if p3 = 15 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 15
13186: EQUAL
13187: IFFALSE 13197
// sKamikadze := true ;
13189: LD_ADDR_EXP 75
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// if p3 = 16 then
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 16
13204: EQUAL
13205: IFFALSE 13215
// sTroll := true ;
13207: LD_ADDR_EXP 76
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// if p3 = 17 then
13215: LD_VAR 0 3
13219: PUSH
13220: LD_INT 17
13222: EQUAL
13223: IFFALSE 13233
// sSlow := true ;
13225: LD_ADDR_EXP 77
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// if p3 = 18 then
13233: LD_VAR 0 3
13237: PUSH
13238: LD_INT 18
13240: EQUAL
13241: IFFALSE 13251
// sLack := true ;
13243: LD_ADDR_EXP 78
13247: PUSH
13248: LD_INT 1
13250: ST_TO_ADDR
// if p3 = 19 then
13251: LD_VAR 0 3
13255: PUSH
13256: LD_INT 19
13258: EQUAL
13259: IFFALSE 13269
// sTank := true ;
13261: LD_ADDR_EXP 80
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// if p3 = 20 then
13269: LD_VAR 0 3
13273: PUSH
13274: LD_INT 20
13276: EQUAL
13277: IFFALSE 13287
// sRemote := true ;
13279: LD_ADDR_EXP 81
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// if p3 = 21 then
13287: LD_VAR 0 3
13291: PUSH
13292: LD_INT 21
13294: EQUAL
13295: IFFALSE 13305
// sPowell := true ;
13297: LD_ADDR_EXP 82
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// if p3 = 22 then
13305: LD_VAR 0 3
13309: PUSH
13310: LD_INT 22
13312: EQUAL
13313: IFFALSE 13323
// sTeleport := true ;
13315: LD_ADDR_EXP 85
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// if p3 = 23 then
13323: LD_VAR 0 3
13327: PUSH
13328: LD_INT 23
13330: EQUAL
13331: IFFALSE 13341
// sOilTower := true ;
13333: LD_ADDR_EXP 87
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// if p3 = 24 then
13341: LD_VAR 0 3
13345: PUSH
13346: LD_INT 24
13348: EQUAL
13349: IFFALSE 13359
// sShovel := true ;
13351: LD_ADDR_EXP 88
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// if p3 = 25 then
13359: LD_VAR 0 3
13363: PUSH
13364: LD_INT 25
13366: EQUAL
13367: IFFALSE 13377
// sSheik := true ;
13369: LD_ADDR_EXP 89
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// if p3 = 26 then
13377: LD_VAR 0 3
13381: PUSH
13382: LD_INT 26
13384: EQUAL
13385: IFFALSE 13395
// sEarthquake := true ;
13387: LD_ADDR_EXP 91
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// if p3 = 27 then
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 27
13402: EQUAL
13403: IFFALSE 13413
// sAI := true ;
13405: LD_ADDR_EXP 92
13409: PUSH
13410: LD_INT 1
13412: ST_TO_ADDR
// if p3 = 28 then
13413: LD_VAR 0 3
13417: PUSH
13418: LD_INT 28
13420: EQUAL
13421: IFFALSE 13431
// sCargo := true ;
13423: LD_ADDR_EXP 95
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
// if p3 = 29 then
13431: LD_VAR 0 3
13435: PUSH
13436: LD_INT 29
13438: EQUAL
13439: IFFALSE 13449
// sDLaser := true ;
13441: LD_ADDR_EXP 96
13445: PUSH
13446: LD_INT 1
13448: ST_TO_ADDR
// if p3 = 30 then
13449: LD_VAR 0 3
13453: PUSH
13454: LD_INT 30
13456: EQUAL
13457: IFFALSE 13467
// sExchange := true ;
13459: LD_ADDR_EXP 97
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// if p3 = 31 then
13467: LD_VAR 0 3
13471: PUSH
13472: LD_INT 31
13474: EQUAL
13475: IFFALSE 13485
// sFac := true ;
13477: LD_ADDR_EXP 98
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// if p3 = 32 then
13485: LD_VAR 0 3
13489: PUSH
13490: LD_INT 32
13492: EQUAL
13493: IFFALSE 13503
// sPower := true ;
13495: LD_ADDR_EXP 99
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// if p3 = 33 then
13503: LD_VAR 0 3
13507: PUSH
13508: LD_INT 33
13510: EQUAL
13511: IFFALSE 13521
// sRandom := true ;
13513: LD_ADDR_EXP 100
13517: PUSH
13518: LD_INT 1
13520: ST_TO_ADDR
// if p3 = 34 then
13521: LD_VAR 0 3
13525: PUSH
13526: LD_INT 34
13528: EQUAL
13529: IFFALSE 13539
// sShield := true ;
13531: LD_ADDR_EXP 101
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// if p3 = 35 then
13539: LD_VAR 0 3
13543: PUSH
13544: LD_INT 35
13546: EQUAL
13547: IFFALSE 13557
// sTime := true ;
13549: LD_ADDR_EXP 102
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// if p3 = 36 then
13557: LD_VAR 0 3
13561: PUSH
13562: LD_INT 36
13564: EQUAL
13565: IFFALSE 13575
// sTools := true ;
13567: LD_ADDR_EXP 103
13571: PUSH
13572: LD_INT 1
13574: ST_TO_ADDR
// if p3 = 101 then
13575: LD_VAR 0 3
13579: PUSH
13580: LD_INT 101
13582: EQUAL
13583: IFFALSE 13593
// sSold := true ;
13585: LD_ADDR_EXP 68
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
// if p3 = 102 then
13593: LD_VAR 0 3
13597: PUSH
13598: LD_INT 102
13600: EQUAL
13601: IFFALSE 13611
// sDiff := true ;
13603: LD_ADDR_EXP 69
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// if p3 = 103 then
13611: LD_VAR 0 3
13615: PUSH
13616: LD_INT 103
13618: EQUAL
13619: IFFALSE 13629
// sFog := true ;
13621: LD_ADDR_EXP 72
13625: PUSH
13626: LD_INT 1
13628: ST_TO_ADDR
// if p3 = 104 then
13629: LD_VAR 0 3
13633: PUSH
13634: LD_INT 104
13636: EQUAL
13637: IFFALSE 13647
// sReset := true ;
13639: LD_ADDR_EXP 73
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// if p3 = 105 then
13647: LD_VAR 0 3
13651: PUSH
13652: LD_INT 105
13654: EQUAL
13655: IFFALSE 13665
// sSun := true ;
13657: LD_ADDR_EXP 74
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// if p3 = 106 then
13665: LD_VAR 0 3
13669: PUSH
13670: LD_INT 106
13672: EQUAL
13673: IFFALSE 13683
// sTiger := true ;
13675: LD_ADDR_EXP 70
13679: PUSH
13680: LD_INT 1
13682: ST_TO_ADDR
// if p3 = 107 then
13683: LD_VAR 0 3
13687: PUSH
13688: LD_INT 107
13690: EQUAL
13691: IFFALSE 13701
// sBomb := true ;
13693: LD_ADDR_EXP 71
13697: PUSH
13698: LD_INT 1
13700: ST_TO_ADDR
// if p3 = 108 then
13701: LD_VAR 0 3
13705: PUSH
13706: LD_INT 108
13708: EQUAL
13709: IFFALSE 13719
// sWound := true ;
13711: LD_ADDR_EXP 79
13715: PUSH
13716: LD_INT 1
13718: ST_TO_ADDR
// if p3 = 109 then
13719: LD_VAR 0 3
13723: PUSH
13724: LD_INT 109
13726: EQUAL
13727: IFFALSE 13737
// sBetray := true ;
13729: LD_ADDR_EXP 83
13733: PUSH
13734: LD_INT 1
13736: ST_TO_ADDR
// if p3 = 110 then
13737: LD_VAR 0 3
13741: PUSH
13742: LD_INT 110
13744: EQUAL
13745: IFFALSE 13755
// sContamin := true ;
13747: LD_ADDR_EXP 84
13751: PUSH
13752: LD_INT 1
13754: ST_TO_ADDR
// if p3 = 111 then
13755: LD_VAR 0 3
13759: PUSH
13760: LD_INT 111
13762: EQUAL
13763: IFFALSE 13773
// sOil := true ;
13765: LD_ADDR_EXP 86
13769: PUSH
13770: LD_INT 1
13772: ST_TO_ADDR
// if p3 = 112 then
13773: LD_VAR 0 3
13777: PUSH
13778: LD_INT 112
13780: EQUAL
13781: IFFALSE 13791
// sStu := true ;
13783: LD_ADDR_EXP 90
13787: PUSH
13788: LD_INT 1
13790: ST_TO_ADDR
// if p3 = 113 then
13791: LD_VAR 0 3
13795: PUSH
13796: LD_INT 113
13798: EQUAL
13799: IFFALSE 13809
// sBazooka := true ;
13801: LD_ADDR_EXP 93
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// if p3 = 114 then
13809: LD_VAR 0 3
13813: PUSH
13814: LD_INT 114
13816: EQUAL
13817: IFFALSE 13827
// sMortar := true ;
13819: LD_ADDR_EXP 94
13823: PUSH
13824: LD_INT 1
13826: ST_TO_ADDR
// if p3 = 115 then
13827: LD_VAR 0 3
13831: PUSH
13832: LD_INT 115
13834: EQUAL
13835: IFFALSE 13845
// sRanger := true ;
13837: LD_ADDR_EXP 104
13841: PUSH
13842: LD_INT 1
13844: ST_TO_ADDR
// if p3 = 116 then
13845: LD_VAR 0 3
13849: PUSH
13850: LD_INT 116
13852: EQUAL
13853: IFFALSE 13863
// sComputer := true ;
13855: LD_ADDR_EXP 105
13859: PUSH
13860: LD_INT 1
13862: ST_TO_ADDR
// if p3 = 117 then
13863: LD_VAR 0 3
13867: PUSH
13868: LD_INT 117
13870: EQUAL
13871: IFFALSE 13881
// s30 := true ;
13873: LD_ADDR_EXP 106
13877: PUSH
13878: LD_INT 1
13880: ST_TO_ADDR
// if p3 = 118 then
13881: LD_VAR 0 3
13885: PUSH
13886: LD_INT 118
13888: EQUAL
13889: IFFALSE 13899
// s60 := true ;
13891: LD_ADDR_EXP 107
13895: PUSH
13896: LD_INT 1
13898: ST_TO_ADDR
// end ; if p2 = 101 then
13899: LD_VAR 0 2
13903: PUSH
13904: LD_INT 101
13906: EQUAL
13907: IFFALSE 14035
// begin case p3 of 1 :
13909: LD_VAR 0 3
13913: PUSH
13914: LD_INT 1
13916: DOUBLE
13917: EQUAL
13918: IFTRUE 13922
13920: GO 13929
13922: POP
// hHackUnlimitedResources ; 2 :
13923: CALL 25631 0 0
13927: GO 14035
13929: LD_INT 2
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 13944
13937: POP
// hHackSetLevel10 ; 3 :
13938: CALL 25764 0 0
13942: GO 14035
13944: LD_INT 3
13946: DOUBLE
13947: EQUAL
13948: IFTRUE 13952
13950: GO 13959
13952: POP
// hHackSetLevel10YourUnits ; 4 :
13953: CALL 25849 0 0
13957: GO 14035
13959: LD_INT 4
13961: DOUBLE
13962: EQUAL
13963: IFTRUE 13967
13965: GO 13974
13967: POP
// hHackInvincible ; 5 :
13968: CALL 26297 0 0
13972: GO 14035
13974: LD_INT 5
13976: DOUBLE
13977: EQUAL
13978: IFTRUE 13982
13980: GO 13989
13982: POP
// hHackInvisible ; 6 :
13983: CALL 26408 0 0
13987: GO 14035
13989: LD_INT 6
13991: DOUBLE
13992: EQUAL
13993: IFTRUE 13997
13995: GO 14004
13997: POP
// hHackChangeYourSide ; 7 :
13998: CALL 26465 0 0
14002: GO 14035
14004: LD_INT 7
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14019
14012: POP
// hHackChangeUnitSide ; 8 :
14013: CALL 26507 0 0
14017: GO 14035
14019: LD_INT 8
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14034
14027: POP
// hHackFog ; end ;
14028: CALL 26608 0 0
14032: GO 14035
14034: POP
// end ; end ;
14035: LD_VAR 0 7
14039: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14040: GO 14042
14042: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14043: LD_STRING initStreamRollete();
14045: PPUSH
14046: CALL_OW 559
// InitStreamMode ;
14050: CALL 14059 0 0
// DefineStreamItems ( ) ;
14054: CALL 14523 0 0
// end ;
14058: END
// function InitStreamMode ; begin
14059: LD_INT 0
14061: PPUSH
// streamModeActive := false ;
14062: LD_ADDR_EXP 51
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// normalCounter := 36 ;
14070: LD_ADDR_EXP 52
14074: PUSH
14075: LD_INT 36
14077: ST_TO_ADDR
// hardcoreCounter := 16 ;
14078: LD_ADDR_EXP 53
14082: PUSH
14083: LD_INT 16
14085: ST_TO_ADDR
// sRocket := false ;
14086: LD_ADDR_EXP 56
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// sSpeed := false ;
14094: LD_ADDR_EXP 55
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// sEngine := false ;
14102: LD_ADDR_EXP 57
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// sSpec := false ;
14110: LD_ADDR_EXP 54
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// sLevel := false ;
14118: LD_ADDR_EXP 58
14122: PUSH
14123: LD_INT 0
14125: ST_TO_ADDR
// sArmoury := false ;
14126: LD_ADDR_EXP 59
14130: PUSH
14131: LD_INT 0
14133: ST_TO_ADDR
// sRadar := false ;
14134: LD_ADDR_EXP 60
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// sBunker := false ;
14142: LD_ADDR_EXP 61
14146: PUSH
14147: LD_INT 0
14149: ST_TO_ADDR
// sHack := false ;
14150: LD_ADDR_EXP 62
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// sFire := false ;
14158: LD_ADDR_EXP 63
14162: PUSH
14163: LD_INT 0
14165: ST_TO_ADDR
// sRefresh := false ;
14166: LD_ADDR_EXP 64
14170: PUSH
14171: LD_INT 0
14173: ST_TO_ADDR
// sExp := false ;
14174: LD_ADDR_EXP 65
14178: PUSH
14179: LD_INT 0
14181: ST_TO_ADDR
// sDepot := false ;
14182: LD_ADDR_EXP 66
14186: PUSH
14187: LD_INT 0
14189: ST_TO_ADDR
// sFlag := false ;
14190: LD_ADDR_EXP 67
14194: PUSH
14195: LD_INT 0
14197: ST_TO_ADDR
// sKamikadze := false ;
14198: LD_ADDR_EXP 75
14202: PUSH
14203: LD_INT 0
14205: ST_TO_ADDR
// sTroll := false ;
14206: LD_ADDR_EXP 76
14210: PUSH
14211: LD_INT 0
14213: ST_TO_ADDR
// sSlow := false ;
14214: LD_ADDR_EXP 77
14218: PUSH
14219: LD_INT 0
14221: ST_TO_ADDR
// sLack := false ;
14222: LD_ADDR_EXP 78
14226: PUSH
14227: LD_INT 0
14229: ST_TO_ADDR
// sTank := false ;
14230: LD_ADDR_EXP 80
14234: PUSH
14235: LD_INT 0
14237: ST_TO_ADDR
// sRemote := false ;
14238: LD_ADDR_EXP 81
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// sPowell := false ;
14246: LD_ADDR_EXP 82
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// sTeleport := false ;
14254: LD_ADDR_EXP 85
14258: PUSH
14259: LD_INT 0
14261: ST_TO_ADDR
// sOilTower := false ;
14262: LD_ADDR_EXP 87
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// sShovel := false ;
14270: LD_ADDR_EXP 88
14274: PUSH
14275: LD_INT 0
14277: ST_TO_ADDR
// sSheik := false ;
14278: LD_ADDR_EXP 89
14282: PUSH
14283: LD_INT 0
14285: ST_TO_ADDR
// sEarthquake := false ;
14286: LD_ADDR_EXP 91
14290: PUSH
14291: LD_INT 0
14293: ST_TO_ADDR
// sAI := false ;
14294: LD_ADDR_EXP 92
14298: PUSH
14299: LD_INT 0
14301: ST_TO_ADDR
// sCargo := false ;
14302: LD_ADDR_EXP 95
14306: PUSH
14307: LD_INT 0
14309: ST_TO_ADDR
// sDLaser := false ;
14310: LD_ADDR_EXP 96
14314: PUSH
14315: LD_INT 0
14317: ST_TO_ADDR
// sExchange := false ;
14318: LD_ADDR_EXP 97
14322: PUSH
14323: LD_INT 0
14325: ST_TO_ADDR
// sFac := false ;
14326: LD_ADDR_EXP 98
14330: PUSH
14331: LD_INT 0
14333: ST_TO_ADDR
// sPower := false ;
14334: LD_ADDR_EXP 99
14338: PUSH
14339: LD_INT 0
14341: ST_TO_ADDR
// sRandom := false ;
14342: LD_ADDR_EXP 100
14346: PUSH
14347: LD_INT 0
14349: ST_TO_ADDR
// sShield := false ;
14350: LD_ADDR_EXP 101
14354: PUSH
14355: LD_INT 0
14357: ST_TO_ADDR
// sTime := false ;
14358: LD_ADDR_EXP 102
14362: PUSH
14363: LD_INT 0
14365: ST_TO_ADDR
// sTools := false ;
14366: LD_ADDR_EXP 103
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// sSold := false ;
14374: LD_ADDR_EXP 68
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// sDiff := false ;
14382: LD_ADDR_EXP 69
14386: PUSH
14387: LD_INT 0
14389: ST_TO_ADDR
// sFog := false ;
14390: LD_ADDR_EXP 72
14394: PUSH
14395: LD_INT 0
14397: ST_TO_ADDR
// sReset := false ;
14398: LD_ADDR_EXP 73
14402: PUSH
14403: LD_INT 0
14405: ST_TO_ADDR
// sSun := false ;
14406: LD_ADDR_EXP 74
14410: PUSH
14411: LD_INT 0
14413: ST_TO_ADDR
// sTiger := false ;
14414: LD_ADDR_EXP 70
14418: PUSH
14419: LD_INT 0
14421: ST_TO_ADDR
// sBomb := false ;
14422: LD_ADDR_EXP 71
14426: PUSH
14427: LD_INT 0
14429: ST_TO_ADDR
// sWound := false ;
14430: LD_ADDR_EXP 79
14434: PUSH
14435: LD_INT 0
14437: ST_TO_ADDR
// sBetray := false ;
14438: LD_ADDR_EXP 83
14442: PUSH
14443: LD_INT 0
14445: ST_TO_ADDR
// sContamin := false ;
14446: LD_ADDR_EXP 84
14450: PUSH
14451: LD_INT 0
14453: ST_TO_ADDR
// sOil := false ;
14454: LD_ADDR_EXP 86
14458: PUSH
14459: LD_INT 0
14461: ST_TO_ADDR
// sStu := false ;
14462: LD_ADDR_EXP 90
14466: PUSH
14467: LD_INT 0
14469: ST_TO_ADDR
// sBazooka := false ;
14470: LD_ADDR_EXP 93
14474: PUSH
14475: LD_INT 0
14477: ST_TO_ADDR
// sMortar := false ;
14478: LD_ADDR_EXP 94
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
// sRanger := false ;
14486: LD_ADDR_EXP 104
14490: PUSH
14491: LD_INT 0
14493: ST_TO_ADDR
// sComputer := false ;
14494: LD_ADDR_EXP 105
14498: PUSH
14499: LD_INT 0
14501: ST_TO_ADDR
// s30 := false ;
14502: LD_ADDR_EXP 106
14506: PUSH
14507: LD_INT 0
14509: ST_TO_ADDR
// s60 := false ;
14510: LD_ADDR_EXP 107
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
// end ;
14518: LD_VAR 0 1
14522: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
14528: PPUSH
14529: PPUSH
// result := [ ] ;
14530: LD_ADDR_VAR 0 1
14534: PUSH
14535: EMPTY
14536: ST_TO_ADDR
// if campaign_id = 1 then
14537: LD_OWVAR 69
14541: PUSH
14542: LD_INT 1
14544: EQUAL
14545: IFFALSE 17711
// begin case mission_number of 1 :
14547: LD_OWVAR 70
14551: PUSH
14552: LD_INT 1
14554: DOUBLE
14555: EQUAL
14556: IFTRUE 14560
14558: GO 14636
14560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 4
14571: PUSH
14572: LD_INT 11
14574: PUSH
14575: LD_INT 12
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 16
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_INT 23
14589: PUSH
14590: LD_INT 26
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 101
14606: PUSH
14607: LD_INT 102
14609: PUSH
14610: LD_INT 106
14612: PUSH
14613: LD_INT 116
14615: PUSH
14616: LD_INT 117
14618: PUSH
14619: LD_INT 118
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: ST_TO_ADDR
14634: GO 17709
14636: LD_INT 2
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14728
14644: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14645: LD_ADDR_VAR 0 1
14649: PUSH
14650: LD_INT 2
14652: PUSH
14653: LD_INT 4
14655: PUSH
14656: LD_INT 11
14658: PUSH
14659: LD_INT 12
14661: PUSH
14662: LD_INT 15
14664: PUSH
14665: LD_INT 16
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_INT 23
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 101
14690: PUSH
14691: LD_INT 102
14693: PUSH
14694: LD_INT 105
14696: PUSH
14697: LD_INT 106
14699: PUSH
14700: LD_INT 108
14702: PUSH
14703: LD_INT 116
14705: PUSH
14706: LD_INT 117
14708: PUSH
14709: LD_INT 118
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: ST_TO_ADDR
14726: GO 17709
14728: LD_INT 3
14730: DOUBLE
14731: EQUAL
14732: IFTRUE 14736
14734: GO 14824
14736: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 4
14747: PUSH
14748: LD_INT 5
14750: PUSH
14751: LD_INT 11
14753: PUSH
14754: LD_INT 12
14756: PUSH
14757: LD_INT 15
14759: PUSH
14760: LD_INT 16
14762: PUSH
14763: LD_INT 22
14765: PUSH
14766: LD_INT 26
14768: PUSH
14769: LD_INT 36
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 101
14786: PUSH
14787: LD_INT 102
14789: PUSH
14790: LD_INT 105
14792: PUSH
14793: LD_INT 106
14795: PUSH
14796: LD_INT 108
14798: PUSH
14799: LD_INT 116
14801: PUSH
14802: LD_INT 117
14804: PUSH
14805: LD_INT 118
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: ST_TO_ADDR
14822: GO 17709
14824: LD_INT 4
14826: DOUBLE
14827: EQUAL
14828: IFTRUE 14832
14830: GO 14928
14832: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: LD_INT 4
14843: PUSH
14844: LD_INT 5
14846: PUSH
14847: LD_INT 8
14849: PUSH
14850: LD_INT 11
14852: PUSH
14853: LD_INT 12
14855: PUSH
14856: LD_INT 15
14858: PUSH
14859: LD_INT 16
14861: PUSH
14862: LD_INT 22
14864: PUSH
14865: LD_INT 23
14867: PUSH
14868: LD_INT 26
14870: PUSH
14871: LD_INT 36
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 101
14890: PUSH
14891: LD_INT 102
14893: PUSH
14894: LD_INT 105
14896: PUSH
14897: LD_INT 106
14899: PUSH
14900: LD_INT 108
14902: PUSH
14903: LD_INT 116
14905: PUSH
14906: LD_INT 117
14908: PUSH
14909: LD_INT 118
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: ST_TO_ADDR
14926: GO 17709
14928: LD_INT 5
14930: DOUBLE
14931: EQUAL
14932: IFTRUE 14936
14934: GO 15048
14936: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: LD_INT 2
14944: PUSH
14945: LD_INT 4
14947: PUSH
14948: LD_INT 5
14950: PUSH
14951: LD_INT 6
14953: PUSH
14954: LD_INT 8
14956: PUSH
14957: LD_INT 11
14959: PUSH
14960: LD_INT 12
14962: PUSH
14963: LD_INT 15
14965: PUSH
14966: LD_INT 16
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_INT 23
14974: PUSH
14975: LD_INT 25
14977: PUSH
14978: LD_INT 26
14980: PUSH
14981: LD_INT 36
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 101
15002: PUSH
15003: LD_INT 102
15005: PUSH
15006: LD_INT 105
15008: PUSH
15009: LD_INT 106
15011: PUSH
15012: LD_INT 108
15014: PUSH
15015: LD_INT 109
15017: PUSH
15018: LD_INT 112
15020: PUSH
15021: LD_INT 116
15023: PUSH
15024: LD_INT 117
15026: PUSH
15027: LD_INT 118
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: ST_TO_ADDR
15046: GO 17709
15048: LD_INT 6
15050: DOUBLE
15051: EQUAL
15052: IFTRUE 15056
15054: GO 15188
15056: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15057: LD_ADDR_VAR 0 1
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: LD_INT 4
15067: PUSH
15068: LD_INT 5
15070: PUSH
15071: LD_INT 6
15073: PUSH
15074: LD_INT 8
15076: PUSH
15077: LD_INT 11
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: LD_INT 15
15085: PUSH
15086: LD_INT 16
15088: PUSH
15089: LD_INT 20
15091: PUSH
15092: LD_INT 21
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 23
15100: PUSH
15101: LD_INT 25
15103: PUSH
15104: LD_INT 26
15106: PUSH
15107: LD_INT 30
15109: PUSH
15110: LD_INT 31
15112: PUSH
15113: LD_INT 32
15115: PUSH
15116: LD_INT 36
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 101
15142: PUSH
15143: LD_INT 102
15145: PUSH
15146: LD_INT 105
15148: PUSH
15149: LD_INT 106
15151: PUSH
15152: LD_INT 108
15154: PUSH
15155: LD_INT 109
15157: PUSH
15158: LD_INT 112
15160: PUSH
15161: LD_INT 116
15163: PUSH
15164: LD_INT 117
15166: PUSH
15167: LD_INT 118
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: ST_TO_ADDR
15186: GO 17709
15188: LD_INT 7
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15308
15196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15197: LD_ADDR_VAR 0 1
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: LD_INT 4
15207: PUSH
15208: LD_INT 5
15210: PUSH
15211: LD_INT 7
15213: PUSH
15214: LD_INT 11
15216: PUSH
15217: LD_INT 12
15219: PUSH
15220: LD_INT 15
15222: PUSH
15223: LD_INT 16
15225: PUSH
15226: LD_INT 20
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_INT 23
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 101
15262: PUSH
15263: LD_INT 102
15265: PUSH
15266: LD_INT 103
15268: PUSH
15269: LD_INT 105
15271: PUSH
15272: LD_INT 106
15274: PUSH
15275: LD_INT 108
15277: PUSH
15278: LD_INT 112
15280: PUSH
15281: LD_INT 116
15283: PUSH
15284: LD_INT 117
15286: PUSH
15287: LD_INT 118
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: ST_TO_ADDR
15306: GO 17709
15308: LD_INT 8
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15456
15316: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: LD_INT 5
15330: PUSH
15331: LD_INT 6
15333: PUSH
15334: LD_INT 7
15336: PUSH
15337: LD_INT 8
15339: PUSH
15340: LD_INT 11
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: LD_INT 15
15348: PUSH
15349: LD_INT 16
15351: PUSH
15352: LD_INT 20
15354: PUSH
15355: LD_INT 21
15357: PUSH
15358: LD_INT 22
15360: PUSH
15361: LD_INT 23
15363: PUSH
15364: LD_INT 25
15366: PUSH
15367: LD_INT 26
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: LD_INT 31
15375: PUSH
15376: LD_INT 32
15378: PUSH
15379: LD_INT 36
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 101
15406: PUSH
15407: LD_INT 102
15409: PUSH
15410: LD_INT 103
15412: PUSH
15413: LD_INT 105
15415: PUSH
15416: LD_INT 106
15418: PUSH
15419: LD_INT 108
15421: PUSH
15422: LD_INT 109
15424: PUSH
15425: LD_INT 112
15427: PUSH
15428: LD_INT 116
15430: PUSH
15431: LD_INT 117
15433: PUSH
15434: LD_INT 118
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: ST_TO_ADDR
15454: GO 17709
15456: LD_INT 9
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15612
15464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15465: LD_ADDR_VAR 0 1
15469: PUSH
15470: LD_INT 2
15472: PUSH
15473: LD_INT 4
15475: PUSH
15476: LD_INT 5
15478: PUSH
15479: LD_INT 6
15481: PUSH
15482: LD_INT 7
15484: PUSH
15485: LD_INT 8
15487: PUSH
15488: LD_INT 11
15490: PUSH
15491: LD_INT 12
15493: PUSH
15494: LD_INT 15
15496: PUSH
15497: LD_INT 16
15499: PUSH
15500: LD_INT 20
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_INT 23
15511: PUSH
15512: LD_INT 25
15514: PUSH
15515: LD_INT 26
15517: PUSH
15518: LD_INT 28
15520: PUSH
15521: LD_INT 30
15523: PUSH
15524: LD_INT 31
15526: PUSH
15527: LD_INT 32
15529: PUSH
15530: LD_INT 36
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 101
15558: PUSH
15559: LD_INT 102
15561: PUSH
15562: LD_INT 103
15564: PUSH
15565: LD_INT 105
15567: PUSH
15568: LD_INT 106
15570: PUSH
15571: LD_INT 108
15573: PUSH
15574: LD_INT 109
15576: PUSH
15577: LD_INT 112
15579: PUSH
15580: LD_INT 114
15582: PUSH
15583: LD_INT 116
15585: PUSH
15586: LD_INT 117
15588: PUSH
15589: LD_INT 118
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: ST_TO_ADDR
15610: GO 17709
15612: LD_INT 10
15614: DOUBLE
15615: EQUAL
15616: IFTRUE 15620
15618: GO 15816
15620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 4
15631: PUSH
15632: LD_INT 5
15634: PUSH
15635: LD_INT 6
15637: PUSH
15638: LD_INT 7
15640: PUSH
15641: LD_INT 8
15643: PUSH
15644: LD_INT 9
15646: PUSH
15647: LD_INT 10
15649: PUSH
15650: LD_INT 11
15652: PUSH
15653: LD_INT 12
15655: PUSH
15656: LD_INT 13
15658: PUSH
15659: LD_INT 14
15661: PUSH
15662: LD_INT 15
15664: PUSH
15665: LD_INT 16
15667: PUSH
15668: LD_INT 17
15670: PUSH
15671: LD_INT 18
15673: PUSH
15674: LD_INT 19
15676: PUSH
15677: LD_INT 20
15679: PUSH
15680: LD_INT 21
15682: PUSH
15683: LD_INT 22
15685: PUSH
15686: LD_INT 23
15688: PUSH
15689: LD_INT 24
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 26
15697: PUSH
15698: LD_INT 28
15700: PUSH
15701: LD_INT 30
15703: PUSH
15704: LD_INT 31
15706: PUSH
15707: LD_INT 32
15709: PUSH
15710: LD_INT 36
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 101
15746: PUSH
15747: LD_INT 102
15749: PUSH
15750: LD_INT 103
15752: PUSH
15753: LD_INT 104
15755: PUSH
15756: LD_INT 105
15758: PUSH
15759: LD_INT 106
15761: PUSH
15762: LD_INT 107
15764: PUSH
15765: LD_INT 108
15767: PUSH
15768: LD_INT 109
15770: PUSH
15771: LD_INT 110
15773: PUSH
15774: LD_INT 111
15776: PUSH
15777: LD_INT 112
15779: PUSH
15780: LD_INT 114
15782: PUSH
15783: LD_INT 116
15785: PUSH
15786: LD_INT 117
15788: PUSH
15789: LD_INT 118
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: ST_TO_ADDR
15814: GO 17709
15816: LD_INT 11
15818: DOUBLE
15819: EQUAL
15820: IFTRUE 15824
15822: GO 16028
15824: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_INT 2
15832: PUSH
15833: LD_INT 3
15835: PUSH
15836: LD_INT 4
15838: PUSH
15839: LD_INT 5
15841: PUSH
15842: LD_INT 6
15844: PUSH
15845: LD_INT 7
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: LD_INT 9
15853: PUSH
15854: LD_INT 10
15856: PUSH
15857: LD_INT 11
15859: PUSH
15860: LD_INT 12
15862: PUSH
15863: LD_INT 13
15865: PUSH
15866: LD_INT 14
15868: PUSH
15869: LD_INT 15
15871: PUSH
15872: LD_INT 16
15874: PUSH
15875: LD_INT 17
15877: PUSH
15878: LD_INT 18
15880: PUSH
15881: LD_INT 19
15883: PUSH
15884: LD_INT 20
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 22
15892: PUSH
15893: LD_INT 23
15895: PUSH
15896: LD_INT 24
15898: PUSH
15899: LD_INT 25
15901: PUSH
15902: LD_INT 26
15904: PUSH
15905: LD_INT 28
15907: PUSH
15908: LD_INT 30
15910: PUSH
15911: LD_INT 31
15913: PUSH
15914: LD_INT 32
15916: PUSH
15917: LD_INT 34
15919: PUSH
15920: LD_INT 36
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 101
15958: PUSH
15959: LD_INT 102
15961: PUSH
15962: LD_INT 103
15964: PUSH
15965: LD_INT 104
15967: PUSH
15968: LD_INT 105
15970: PUSH
15971: LD_INT 106
15973: PUSH
15974: LD_INT 107
15976: PUSH
15977: LD_INT 108
15979: PUSH
15980: LD_INT 109
15982: PUSH
15983: LD_INT 110
15985: PUSH
15986: LD_INT 111
15988: PUSH
15989: LD_INT 112
15991: PUSH
15992: LD_INT 114
15994: PUSH
15995: LD_INT 116
15997: PUSH
15998: LD_INT 117
16000: PUSH
16001: LD_INT 118
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: ST_TO_ADDR
16026: GO 17709
16028: LD_INT 12
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16256
16036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16037: LD_ADDR_VAR 0 1
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: LD_INT 4
16053: PUSH
16054: LD_INT 5
16056: PUSH
16057: LD_INT 6
16059: PUSH
16060: LD_INT 7
16062: PUSH
16063: LD_INT 8
16065: PUSH
16066: LD_INT 9
16068: PUSH
16069: LD_INT 10
16071: PUSH
16072: LD_INT 11
16074: PUSH
16075: LD_INT 12
16077: PUSH
16078: LD_INT 13
16080: PUSH
16081: LD_INT 14
16083: PUSH
16084: LD_INT 15
16086: PUSH
16087: LD_INT 16
16089: PUSH
16090: LD_INT 17
16092: PUSH
16093: LD_INT 18
16095: PUSH
16096: LD_INT 19
16098: PUSH
16099: LD_INT 20
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_INT 23
16110: PUSH
16111: LD_INT 24
16113: PUSH
16114: LD_INT 25
16116: PUSH
16117: LD_INT 26
16119: PUSH
16120: LD_INT 27
16122: PUSH
16123: LD_INT 28
16125: PUSH
16126: LD_INT 30
16128: PUSH
16129: LD_INT 31
16131: PUSH
16132: LD_INT 32
16134: PUSH
16135: LD_INT 33
16137: PUSH
16138: LD_INT 34
16140: PUSH
16141: LD_INT 36
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 101
16182: PUSH
16183: LD_INT 102
16185: PUSH
16186: LD_INT 103
16188: PUSH
16189: LD_INT 104
16191: PUSH
16192: LD_INT 105
16194: PUSH
16195: LD_INT 106
16197: PUSH
16198: LD_INT 107
16200: PUSH
16201: LD_INT 108
16203: PUSH
16204: LD_INT 109
16206: PUSH
16207: LD_INT 110
16209: PUSH
16210: LD_INT 111
16212: PUSH
16213: LD_INT 112
16215: PUSH
16216: LD_INT 113
16218: PUSH
16219: LD_INT 114
16221: PUSH
16222: LD_INT 116
16224: PUSH
16225: LD_INT 117
16227: PUSH
16228: LD_INT 118
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: ST_TO_ADDR
16254: GO 17709
16256: LD_INT 13
16258: DOUBLE
16259: EQUAL
16260: IFTRUE 16264
16262: GO 16472
16264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: LD_INT 3
16278: PUSH
16279: LD_INT 4
16281: PUSH
16282: LD_INT 5
16284: PUSH
16285: LD_INT 8
16287: PUSH
16288: LD_INT 9
16290: PUSH
16291: LD_INT 10
16293: PUSH
16294: LD_INT 11
16296: PUSH
16297: LD_INT 12
16299: PUSH
16300: LD_INT 14
16302: PUSH
16303: LD_INT 15
16305: PUSH
16306: LD_INT 16
16308: PUSH
16309: LD_INT 17
16311: PUSH
16312: LD_INT 18
16314: PUSH
16315: LD_INT 19
16317: PUSH
16318: LD_INT 20
16320: PUSH
16321: LD_INT 21
16323: PUSH
16324: LD_INT 22
16326: PUSH
16327: LD_INT 23
16329: PUSH
16330: LD_INT 24
16332: PUSH
16333: LD_INT 25
16335: PUSH
16336: LD_INT 26
16338: PUSH
16339: LD_INT 27
16341: PUSH
16342: LD_INT 28
16344: PUSH
16345: LD_INT 30
16347: PUSH
16348: LD_INT 31
16350: PUSH
16351: LD_INT 32
16353: PUSH
16354: LD_INT 33
16356: PUSH
16357: LD_INT 34
16359: PUSH
16360: LD_INT 36
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 101
16398: PUSH
16399: LD_INT 102
16401: PUSH
16402: LD_INT 103
16404: PUSH
16405: LD_INT 104
16407: PUSH
16408: LD_INT 105
16410: PUSH
16411: LD_INT 106
16413: PUSH
16414: LD_INT 107
16416: PUSH
16417: LD_INT 108
16419: PUSH
16420: LD_INT 109
16422: PUSH
16423: LD_INT 110
16425: PUSH
16426: LD_INT 111
16428: PUSH
16429: LD_INT 112
16431: PUSH
16432: LD_INT 113
16434: PUSH
16435: LD_INT 114
16437: PUSH
16438: LD_INT 116
16440: PUSH
16441: LD_INT 117
16443: PUSH
16444: LD_INT 118
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: ST_TO_ADDR
16470: GO 17709
16472: LD_INT 14
16474: DOUBLE
16475: EQUAL
16476: IFTRUE 16480
16478: GO 16704
16480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16481: LD_ADDR_VAR 0 1
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 3
16494: PUSH
16495: LD_INT 4
16497: PUSH
16498: LD_INT 5
16500: PUSH
16501: LD_INT 6
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: LD_INT 8
16509: PUSH
16510: LD_INT 9
16512: PUSH
16513: LD_INT 10
16515: PUSH
16516: LD_INT 11
16518: PUSH
16519: LD_INT 12
16521: PUSH
16522: LD_INT 13
16524: PUSH
16525: LD_INT 14
16527: PUSH
16528: LD_INT 15
16530: PUSH
16531: LD_INT 16
16533: PUSH
16534: LD_INT 17
16536: PUSH
16537: LD_INT 18
16539: PUSH
16540: LD_INT 19
16542: PUSH
16543: LD_INT 20
16545: PUSH
16546: LD_INT 21
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 23
16554: PUSH
16555: LD_INT 24
16557: PUSH
16558: LD_INT 25
16560: PUSH
16561: LD_INT 26
16563: PUSH
16564: LD_INT 27
16566: PUSH
16567: LD_INT 28
16569: PUSH
16570: LD_INT 29
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 31
16578: PUSH
16579: LD_INT 32
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 34
16587: PUSH
16588: LD_INT 36
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 101
16630: PUSH
16631: LD_INT 102
16633: PUSH
16634: LD_INT 103
16636: PUSH
16637: LD_INT 104
16639: PUSH
16640: LD_INT 105
16642: PUSH
16643: LD_INT 106
16645: PUSH
16646: LD_INT 107
16648: PUSH
16649: LD_INT 108
16651: PUSH
16652: LD_INT 109
16654: PUSH
16655: LD_INT 110
16657: PUSH
16658: LD_INT 111
16660: PUSH
16661: LD_INT 112
16663: PUSH
16664: LD_INT 113
16666: PUSH
16667: LD_INT 114
16669: PUSH
16670: LD_INT 116
16672: PUSH
16673: LD_INT 117
16675: PUSH
16676: LD_INT 118
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: ST_TO_ADDR
16702: GO 17709
16704: LD_INT 15
16706: DOUBLE
16707: EQUAL
16708: IFTRUE 16712
16710: GO 16936
16712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16713: LD_ADDR_VAR 0 1
16717: PUSH
16718: LD_INT 1
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 3
16726: PUSH
16727: LD_INT 4
16729: PUSH
16730: LD_INT 5
16732: PUSH
16733: LD_INT 6
16735: PUSH
16736: LD_INT 7
16738: PUSH
16739: LD_INT 8
16741: PUSH
16742: LD_INT 9
16744: PUSH
16745: LD_INT 10
16747: PUSH
16748: LD_INT 11
16750: PUSH
16751: LD_INT 12
16753: PUSH
16754: LD_INT 13
16756: PUSH
16757: LD_INT 14
16759: PUSH
16760: LD_INT 15
16762: PUSH
16763: LD_INT 16
16765: PUSH
16766: LD_INT 17
16768: PUSH
16769: LD_INT 18
16771: PUSH
16772: LD_INT 19
16774: PUSH
16775: LD_INT 20
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 22
16783: PUSH
16784: LD_INT 23
16786: PUSH
16787: LD_INT 24
16789: PUSH
16790: LD_INT 25
16792: PUSH
16793: LD_INT 26
16795: PUSH
16796: LD_INT 27
16798: PUSH
16799: LD_INT 28
16801: PUSH
16802: LD_INT 29
16804: PUSH
16805: LD_INT 30
16807: PUSH
16808: LD_INT 31
16810: PUSH
16811: LD_INT 32
16813: PUSH
16814: LD_INT 33
16816: PUSH
16817: LD_INT 34
16819: PUSH
16820: LD_INT 36
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 101
16862: PUSH
16863: LD_INT 102
16865: PUSH
16866: LD_INT 103
16868: PUSH
16869: LD_INT 104
16871: PUSH
16872: LD_INT 105
16874: PUSH
16875: LD_INT 106
16877: PUSH
16878: LD_INT 107
16880: PUSH
16881: LD_INT 108
16883: PUSH
16884: LD_INT 109
16886: PUSH
16887: LD_INT 110
16889: PUSH
16890: LD_INT 111
16892: PUSH
16893: LD_INT 112
16895: PUSH
16896: LD_INT 113
16898: PUSH
16899: LD_INT 114
16901: PUSH
16902: LD_INT 116
16904: PUSH
16905: LD_INT 117
16907: PUSH
16908: LD_INT 118
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: ST_TO_ADDR
16934: GO 17709
16936: LD_INT 16
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 17080
16944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16945: LD_ADDR_VAR 0 1
16949: PUSH
16950: LD_INT 2
16952: PUSH
16953: LD_INT 4
16955: PUSH
16956: LD_INT 5
16958: PUSH
16959: LD_INT 7
16961: PUSH
16962: LD_INT 11
16964: PUSH
16965: LD_INT 12
16967: PUSH
16968: LD_INT 15
16970: PUSH
16971: LD_INT 16
16973: PUSH
16974: LD_INT 20
16976: PUSH
16977: LD_INT 21
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_INT 23
16985: PUSH
16986: LD_INT 25
16988: PUSH
16989: LD_INT 26
16991: PUSH
16992: LD_INT 30
16994: PUSH
16995: LD_INT 31
16997: PUSH
16998: LD_INT 32
17000: PUSH
17001: LD_INT 33
17003: PUSH
17004: LD_INT 34
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 101
17030: PUSH
17031: LD_INT 102
17033: PUSH
17034: LD_INT 103
17036: PUSH
17037: LD_INT 106
17039: PUSH
17040: LD_INT 108
17042: PUSH
17043: LD_INT 112
17045: PUSH
17046: LD_INT 113
17048: PUSH
17049: LD_INT 114
17051: PUSH
17052: LD_INT 116
17054: PUSH
17055: LD_INT 117
17057: PUSH
17058: LD_INT 118
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: ST_TO_ADDR
17078: GO 17709
17080: LD_INT 17
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17312
17088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17089: LD_ADDR_VAR 0 1
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 3
17102: PUSH
17103: LD_INT 4
17105: PUSH
17106: LD_INT 5
17108: PUSH
17109: LD_INT 6
17111: PUSH
17112: LD_INT 7
17114: PUSH
17115: LD_INT 8
17117: PUSH
17118: LD_INT 9
17120: PUSH
17121: LD_INT 10
17123: PUSH
17124: LD_INT 11
17126: PUSH
17127: LD_INT 12
17129: PUSH
17130: LD_INT 13
17132: PUSH
17133: LD_INT 14
17135: PUSH
17136: LD_INT 15
17138: PUSH
17139: LD_INT 16
17141: PUSH
17142: LD_INT 17
17144: PUSH
17145: LD_INT 18
17147: PUSH
17148: LD_INT 19
17150: PUSH
17151: LD_INT 20
17153: PUSH
17154: LD_INT 21
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 23
17162: PUSH
17163: LD_INT 24
17165: PUSH
17166: LD_INT 25
17168: PUSH
17169: LD_INT 26
17171: PUSH
17172: LD_INT 27
17174: PUSH
17175: LD_INT 28
17177: PUSH
17178: LD_INT 29
17180: PUSH
17181: LD_INT 30
17183: PUSH
17184: LD_INT 31
17186: PUSH
17187: LD_INT 32
17189: PUSH
17190: LD_INT 33
17192: PUSH
17193: LD_INT 34
17195: PUSH
17196: LD_INT 36
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 101
17238: PUSH
17239: LD_INT 102
17241: PUSH
17242: LD_INT 103
17244: PUSH
17245: LD_INT 104
17247: PUSH
17248: LD_INT 105
17250: PUSH
17251: LD_INT 106
17253: PUSH
17254: LD_INT 107
17256: PUSH
17257: LD_INT 108
17259: PUSH
17260: LD_INT 109
17262: PUSH
17263: LD_INT 110
17265: PUSH
17266: LD_INT 111
17268: PUSH
17269: LD_INT 112
17271: PUSH
17272: LD_INT 113
17274: PUSH
17275: LD_INT 114
17277: PUSH
17278: LD_INT 116
17280: PUSH
17281: LD_INT 117
17283: PUSH
17284: LD_INT 118
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: ST_TO_ADDR
17310: GO 17709
17312: LD_INT 18
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17468
17320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17321: LD_ADDR_VAR 0 1
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: LD_INT 4
17331: PUSH
17332: LD_INT 5
17334: PUSH
17335: LD_INT 7
17337: PUSH
17338: LD_INT 11
17340: PUSH
17341: LD_INT 12
17343: PUSH
17344: LD_INT 15
17346: PUSH
17347: LD_INT 16
17349: PUSH
17350: LD_INT 20
17352: PUSH
17353: LD_INT 21
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_INT 23
17361: PUSH
17362: LD_INT 25
17364: PUSH
17365: LD_INT 26
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 31
17373: PUSH
17374: LD_INT 32
17376: PUSH
17377: LD_INT 33
17379: PUSH
17380: LD_INT 34
17382: PUSH
17383: LD_INT 35
17385: PUSH
17386: LD_INT 36
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 101
17414: PUSH
17415: LD_INT 102
17417: PUSH
17418: LD_INT 103
17420: PUSH
17421: LD_INT 106
17423: PUSH
17424: LD_INT 108
17426: PUSH
17427: LD_INT 112
17429: PUSH
17430: LD_INT 113
17432: PUSH
17433: LD_INT 114
17435: PUSH
17436: LD_INT 115
17438: PUSH
17439: LD_INT 116
17441: PUSH
17442: LD_INT 117
17444: PUSH
17445: LD_INT 118
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: ST_TO_ADDR
17466: GO 17709
17468: LD_INT 19
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17708
17476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17477: LD_ADDR_VAR 0 1
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 3
17490: PUSH
17491: LD_INT 4
17493: PUSH
17494: LD_INT 5
17496: PUSH
17497: LD_INT 6
17499: PUSH
17500: LD_INT 7
17502: PUSH
17503: LD_INT 8
17505: PUSH
17506: LD_INT 9
17508: PUSH
17509: LD_INT 10
17511: PUSH
17512: LD_INT 11
17514: PUSH
17515: LD_INT 12
17517: PUSH
17518: LD_INT 13
17520: PUSH
17521: LD_INT 14
17523: PUSH
17524: LD_INT 15
17526: PUSH
17527: LD_INT 16
17529: PUSH
17530: LD_INT 17
17532: PUSH
17533: LD_INT 18
17535: PUSH
17536: LD_INT 19
17538: PUSH
17539: LD_INT 20
17541: PUSH
17542: LD_INT 21
17544: PUSH
17545: LD_INT 22
17547: PUSH
17548: LD_INT 23
17550: PUSH
17551: LD_INT 24
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: LD_INT 27
17562: PUSH
17563: LD_INT 28
17565: PUSH
17566: LD_INT 29
17568: PUSH
17569: LD_INT 30
17571: PUSH
17572: LD_INT 31
17574: PUSH
17575: LD_INT 32
17577: PUSH
17578: LD_INT 33
17580: PUSH
17581: LD_INT 34
17583: PUSH
17584: LD_INT 35
17586: PUSH
17587: LD_INT 36
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 101
17630: PUSH
17631: LD_INT 102
17633: PUSH
17634: LD_INT 103
17636: PUSH
17637: LD_INT 104
17639: PUSH
17640: LD_INT 105
17642: PUSH
17643: LD_INT 106
17645: PUSH
17646: LD_INT 107
17648: PUSH
17649: LD_INT 108
17651: PUSH
17652: LD_INT 109
17654: PUSH
17655: LD_INT 110
17657: PUSH
17658: LD_INT 111
17660: PUSH
17661: LD_INT 112
17663: PUSH
17664: LD_INT 113
17666: PUSH
17667: LD_INT 114
17669: PUSH
17670: LD_INT 115
17672: PUSH
17673: LD_INT 116
17675: PUSH
17676: LD_INT 117
17678: PUSH
17679: LD_INT 118
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
17706: GO 17709
17708: POP
// end else
17709: GO 17940
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17711: LD_ADDR_VAR 0 1
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 3
17724: PUSH
17725: LD_INT 4
17727: PUSH
17728: LD_INT 5
17730: PUSH
17731: LD_INT 6
17733: PUSH
17734: LD_INT 7
17736: PUSH
17737: LD_INT 8
17739: PUSH
17740: LD_INT 9
17742: PUSH
17743: LD_INT 10
17745: PUSH
17746: LD_INT 11
17748: PUSH
17749: LD_INT 12
17751: PUSH
17752: LD_INT 13
17754: PUSH
17755: LD_INT 14
17757: PUSH
17758: LD_INT 15
17760: PUSH
17761: LD_INT 16
17763: PUSH
17764: LD_INT 17
17766: PUSH
17767: LD_INT 18
17769: PUSH
17770: LD_INT 19
17772: PUSH
17773: LD_INT 20
17775: PUSH
17776: LD_INT 21
17778: PUSH
17779: LD_INT 22
17781: PUSH
17782: LD_INT 23
17784: PUSH
17785: LD_INT 24
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 26
17793: PUSH
17794: LD_INT 27
17796: PUSH
17797: LD_INT 28
17799: PUSH
17800: LD_INT 29
17802: PUSH
17803: LD_INT 30
17805: PUSH
17806: LD_INT 31
17808: PUSH
17809: LD_INT 32
17811: PUSH
17812: LD_INT 33
17814: PUSH
17815: LD_INT 34
17817: PUSH
17818: LD_INT 35
17820: PUSH
17821: LD_INT 36
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 101
17864: PUSH
17865: LD_INT 102
17867: PUSH
17868: LD_INT 103
17870: PUSH
17871: LD_INT 104
17873: PUSH
17874: LD_INT 105
17876: PUSH
17877: LD_INT 106
17879: PUSH
17880: LD_INT 107
17882: PUSH
17883: LD_INT 108
17885: PUSH
17886: LD_INT 109
17888: PUSH
17889: LD_INT 110
17891: PUSH
17892: LD_INT 111
17894: PUSH
17895: LD_INT 112
17897: PUSH
17898: LD_INT 113
17900: PUSH
17901: LD_INT 114
17903: PUSH
17904: LD_INT 115
17906: PUSH
17907: LD_INT 116
17909: PUSH
17910: LD_INT 117
17912: PUSH
17913: LD_INT 118
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: ST_TO_ADDR
// if result then
17940: LD_VAR 0 1
17944: IFFALSE 18233
// begin normal :=  ;
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: LD_STRING 
17953: ST_TO_ADDR
// hardcore :=  ;
17954: LD_ADDR_VAR 0 4
17958: PUSH
17959: LD_STRING 
17961: ST_TO_ADDR
// for i = 1 to normalCounter do
17962: LD_ADDR_VAR 0 5
17966: PUSH
17967: DOUBLE
17968: LD_INT 1
17970: DEC
17971: ST_TO_ADDR
17972: LD_EXP 52
17976: PUSH
17977: FOR_TO
17978: IFFALSE 18079
// begin tmp := 0 ;
17980: LD_ADDR_VAR 0 2
17984: PUSH
17985: LD_STRING 0
17987: ST_TO_ADDR
// if result [ 1 ] then
17988: LD_VAR 0 1
17992: PUSH
17993: LD_INT 1
17995: ARRAY
17996: IFFALSE 18061
// if result [ 1 ] [ 1 ] = i then
17998: LD_VAR 0 1
18002: PUSH
18003: LD_INT 1
18005: ARRAY
18006: PUSH
18007: LD_INT 1
18009: ARRAY
18010: PUSH
18011: LD_VAR 0 5
18015: EQUAL
18016: IFFALSE 18061
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18018: LD_ADDR_VAR 0 1
18022: PUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: LD_VAR 0 1
18035: PUSH
18036: LD_INT 1
18038: ARRAY
18039: PPUSH
18040: LD_INT 1
18042: PPUSH
18043: CALL_OW 3
18047: PPUSH
18048: CALL_OW 1
18052: ST_TO_ADDR
// tmp := 1 ;
18053: LD_ADDR_VAR 0 2
18057: PUSH
18058: LD_STRING 1
18060: ST_TO_ADDR
// end ; normal := normal & tmp ;
18061: LD_ADDR_VAR 0 3
18065: PUSH
18066: LD_VAR 0 3
18070: PUSH
18071: LD_VAR 0 2
18075: STR
18076: ST_TO_ADDR
// end ;
18077: GO 17977
18079: POP
18080: POP
// for i = 1 to hardcoreCounter do
18081: LD_ADDR_VAR 0 5
18085: PUSH
18086: DOUBLE
18087: LD_INT 1
18089: DEC
18090: ST_TO_ADDR
18091: LD_EXP 53
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18202
// begin tmp := 0 ;
18099: LD_ADDR_VAR 0 2
18103: PUSH
18104: LD_STRING 0
18106: ST_TO_ADDR
// if result [ 2 ] then
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 2
18114: ARRAY
18115: IFFALSE 18184
// if result [ 2 ] [ 1 ] = 100 + i then
18117: LD_VAR 0 1
18121: PUSH
18122: LD_INT 2
18124: ARRAY
18125: PUSH
18126: LD_INT 1
18128: ARRAY
18129: PUSH
18130: LD_INT 100
18132: PUSH
18133: LD_VAR 0 5
18137: PLUS
18138: EQUAL
18139: IFFALSE 18184
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18141: LD_ADDR_VAR 0 1
18145: PUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 2
18153: PPUSH
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 2
18161: ARRAY
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 3
18170: PPUSH
18171: CALL_OW 1
18175: ST_TO_ADDR
// tmp := 1 ;
18176: LD_ADDR_VAR 0 2
18180: PUSH
18181: LD_STRING 1
18183: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18184: LD_ADDR_VAR 0 4
18188: PUSH
18189: LD_VAR 0 4
18193: PUSH
18194: LD_VAR 0 2
18198: STR
18199: ST_TO_ADDR
// end ;
18200: GO 18096
18202: POP
18203: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18204: LD_STRING getStreamItemsFromMission("
18206: PUSH
18207: LD_VAR 0 3
18211: STR
18212: PUSH
18213: LD_STRING ","
18215: STR
18216: PUSH
18217: LD_VAR 0 4
18221: STR
18222: PUSH
18223: LD_STRING ")
18225: STR
18226: PPUSH
18227: CALL_OW 559
// end else
18231: GO 18240
// ToLua ( getStreamItemsFromMission("","") ) ;
18233: LD_STRING getStreamItemsFromMission("","")
18235: PPUSH
18236: CALL_OW 559
// end ;
18240: LD_VAR 0 1
18244: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18245: LD_EXP 51
18249: PUSH
18250: LD_EXP 56
18254: AND
18255: IFFALSE 18379
18257: GO 18259
18259: DISABLE
18260: LD_INT 0
18262: PPUSH
18263: PPUSH
// begin enable ;
18264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: LD_INT 22
18272: PUSH
18273: LD_OWVAR 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: LD_INT 34
18287: PUSH
18288: LD_INT 7
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 34
18297: PUSH
18298: LD_INT 45
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 34
18307: PUSH
18308: LD_INT 28
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 34
18317: PUSH
18318: LD_INT 47
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PPUSH
18336: CALL_OW 69
18340: ST_TO_ADDR
// if not tmp then
18341: LD_VAR 0 2
18345: NOT
18346: IFFALSE 18350
// exit ;
18348: GO 18379
// for i in tmp do
18350: LD_ADDR_VAR 0 1
18354: PUSH
18355: LD_VAR 0 2
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18377
// begin SetLives ( i , 0 ) ;
18363: LD_VAR 0 1
18367: PPUSH
18368: LD_INT 0
18370: PPUSH
18371: CALL_OW 234
// end ;
18375: GO 18360
18377: POP
18378: POP
// end ;
18379: PPOPN 2
18381: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18382: LD_EXP 51
18386: PUSH
18387: LD_EXP 57
18391: AND
18392: IFFALSE 18476
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
// begin enable ;
18401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18402: LD_ADDR_VAR 0 2
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_OWVAR 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 32
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: ST_TO_ADDR
// if not tmp then
18438: LD_VAR 0 2
18442: NOT
18443: IFFALSE 18447
// exit ;
18445: GO 18476
// for i in tmp do
18447: LD_ADDR_VAR 0 1
18451: PUSH
18452: LD_VAR 0 2
18456: PUSH
18457: FOR_IN
18458: IFFALSE 18474
// begin SetLives ( i , 0 ) ;
18460: LD_VAR 0 1
18464: PPUSH
18465: LD_INT 0
18467: PPUSH
18468: CALL_OW 234
// end ;
18472: GO 18457
18474: POP
18475: POP
// end ;
18476: PPOPN 2
18478: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18479: LD_EXP 51
18483: PUSH
18484: LD_EXP 54
18488: AND
18489: IFFALSE 18582
18491: GO 18493
18493: DISABLE
18494: LD_INT 0
18496: PPUSH
// begin enable ;
18497: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 25
18520: PUSH
18521: LD_INT 5
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 25
18530: PUSH
18531: LD_INT 9
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 25
18540: PUSH
18541: LD_INT 8
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PPUSH
18558: CALL_OW 69
18562: PUSH
18563: FOR_IN
18564: IFFALSE 18580
// begin SetClass ( i , 1 ) ;
18566: LD_VAR 0 1
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 336
// end ;
18578: GO 18563
18580: POP
18581: POP
// end ;
18582: PPOPN 1
18584: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18585: LD_EXP 51
18589: PUSH
18590: LD_EXP 55
18594: AND
18595: PUSH
18596: LD_OWVAR 65
18600: PUSH
18601: LD_INT 7
18603: LESS
18604: AND
18605: IFFALSE 18619
18607: GO 18609
18609: DISABLE
// begin enable ;
18610: ENABLE
// game_speed := 7 ;
18611: LD_ADDR_OWVAR 65
18615: PUSH
18616: LD_INT 7
18618: ST_TO_ADDR
// end ;
18619: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18620: LD_EXP 51
18624: PUSH
18625: LD_EXP 58
18629: AND
18630: IFFALSE 18832
18632: GO 18634
18634: DISABLE
18635: LD_INT 0
18637: PPUSH
18638: PPUSH
18639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18640: LD_ADDR_VAR 0 3
18644: PUSH
18645: LD_INT 81
18647: PUSH
18648: LD_OWVAR 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 3
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18832
// if tmp > 5 then
18685: LD_VAR 0 3
18689: PUSH
18690: LD_INT 5
18692: GREATER
18693: IFFALSE 18705
// k := 5 else
18695: LD_ADDR_VAR 0 2
18699: PUSH
18700: LD_INT 5
18702: ST_TO_ADDR
18703: GO 18715
// k := tmp ;
18705: LD_ADDR_VAR 0 2
18709: PUSH
18710: LD_VAR 0 3
18714: ST_TO_ADDR
// for i := 1 to k do
18715: LD_ADDR_VAR 0 1
18719: PUSH
18720: DOUBLE
18721: LD_INT 1
18723: DEC
18724: ST_TO_ADDR
18725: LD_VAR 0 2
18729: PUSH
18730: FOR_TO
18731: IFFALSE 18830
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18733: LD_VAR 0 3
18737: PUSH
18738: LD_VAR 0 1
18742: ARRAY
18743: PPUSH
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 4
18751: MOD
18752: PUSH
18753: LD_INT 1
18755: PLUS
18756: PPUSH
18757: CALL_OW 259
18761: PUSH
18762: LD_INT 10
18764: LESS
18765: IFFALSE 18828
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18767: LD_VAR 0 3
18771: PUSH
18772: LD_VAR 0 1
18776: ARRAY
18777: PPUSH
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 4
18785: MOD
18786: PUSH
18787: LD_INT 1
18789: PLUS
18790: PPUSH
18791: LD_VAR 0 3
18795: PUSH
18796: LD_VAR 0 1
18800: ARRAY
18801: PPUSH
18802: LD_VAR 0 1
18806: PUSH
18807: LD_INT 4
18809: MOD
18810: PUSH
18811: LD_INT 1
18813: PLUS
18814: PPUSH
18815: CALL_OW 259
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: PPUSH
18824: CALL_OW 237
18828: GO 18730
18830: POP
18831: POP
// end ;
18832: PPOPN 3
18834: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18835: LD_EXP 51
18839: PUSH
18840: LD_EXP 59
18844: AND
18845: IFFALSE 18865
18847: GO 18849
18849: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18850: LD_INT 4
18852: PPUSH
18853: LD_OWVAR 2
18857: PPUSH
18858: LD_INT 0
18860: PPUSH
18861: CALL_OW 324
18865: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18866: LD_EXP 51
18870: PUSH
18871: LD_EXP 88
18875: AND
18876: IFFALSE 18896
18878: GO 18880
18880: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18881: LD_INT 19
18883: PPUSH
18884: LD_OWVAR 2
18888: PPUSH
18889: LD_INT 0
18891: PPUSH
18892: CALL_OW 324
18896: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18897: LD_EXP 51
18901: PUSH
18902: LD_EXP 60
18906: AND
18907: IFFALSE 19009
18909: GO 18911
18911: DISABLE
18912: LD_INT 0
18914: PPUSH
18915: PPUSH
// begin enable ;
18916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18917: LD_ADDR_VAR 0 2
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_OWVAR 2
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: LD_INT 34
18939: PUSH
18940: LD_INT 11
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 34
18949: PUSH
18950: LD_INT 30
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: ST_TO_ADDR
// if not tmp then
18971: LD_VAR 0 2
18975: NOT
18976: IFFALSE 18980
// exit ;
18978: GO 19009
// for i in tmp do
18980: LD_ADDR_VAR 0 1
18984: PUSH
18985: LD_VAR 0 2
18989: PUSH
18990: FOR_IN
18991: IFFALSE 19007
// begin SetLives ( i , 0 ) ;
18993: LD_VAR 0 1
18997: PPUSH
18998: LD_INT 0
19000: PPUSH
19001: CALL_OW 234
// end ;
19005: GO 18990
19007: POP
19008: POP
// end ;
19009: PPOPN 2
19011: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19012: LD_EXP 51
19016: PUSH
19017: LD_EXP 61
19021: AND
19022: IFFALSE 19042
19024: GO 19026
19026: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19027: LD_INT 32
19029: PPUSH
19030: LD_OWVAR 2
19034: PPUSH
19035: LD_INT 0
19037: PPUSH
19038: CALL_OW 324
19042: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19043: LD_EXP 51
19047: PUSH
19048: LD_EXP 62
19052: AND
19053: IFFALSE 19234
19055: GO 19057
19057: DISABLE
19058: LD_INT 0
19060: PPUSH
19061: PPUSH
19062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19063: LD_ADDR_VAR 0 2
19067: PUSH
19068: LD_INT 22
19070: PUSH
19071: LD_OWVAR 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 33
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PPUSH
19094: CALL_OW 69
19098: ST_TO_ADDR
// if not tmp then
19099: LD_VAR 0 2
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19234
// side := 0 ;
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: LD_INT 0
19115: ST_TO_ADDR
// for i := 1 to 8 do
19116: LD_ADDR_VAR 0 1
19120: PUSH
19121: DOUBLE
19122: LD_INT 1
19124: DEC
19125: ST_TO_ADDR
19126: LD_INT 8
19128: PUSH
19129: FOR_TO
19130: IFFALSE 19178
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19132: LD_OWVAR 2
19136: PUSH
19137: LD_VAR 0 1
19141: NONEQUAL
19142: PUSH
19143: LD_OWVAR 2
19147: PPUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 81
19157: PUSH
19158: LD_INT 2
19160: EQUAL
19161: AND
19162: IFFALSE 19176
// begin side := i ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_VAR 0 1
19173: ST_TO_ADDR
// break ;
19174: GO 19178
// end ;
19176: GO 19129
19178: POP
19179: POP
// if not side then
19180: LD_VAR 0 3
19184: NOT
19185: IFFALSE 19189
// exit ;
19187: GO 19234
// for i := 1 to tmp do
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: DOUBLE
19195: LD_INT 1
19197: DEC
19198: ST_TO_ADDR
19199: LD_VAR 0 2
19203: PUSH
19204: FOR_TO
19205: IFFALSE 19232
// if Prob ( 60 ) then
19207: LD_INT 60
19209: PPUSH
19210: CALL_OW 13
19214: IFFALSE 19230
// SetSide ( i , side ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 3
19225: PPUSH
19226: CALL_OW 235
19230: GO 19204
19232: POP
19233: POP
// end ;
19234: PPOPN 3
19236: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19237: LD_EXP 51
19241: PUSH
19242: LD_EXP 64
19246: AND
19247: IFFALSE 19366
19249: GO 19251
19251: DISABLE
19252: LD_INT 0
19254: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19255: LD_ADDR_VAR 0 1
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_OWVAR 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 3
19284: PUSH
19285: LD_INT 23
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19364
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19312: LD_VAR 0 1
19316: PPUSH
19317: CALL_OW 257
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 3
19330: PUSH
19331: LD_INT 4
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: IN
19340: IFFALSE 19362
// SetClass ( un , rand ( 1 , 4 ) ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: LD_INT 4
19352: PPUSH
19353: CALL_OW 12
19357: PPUSH
19358: CALL_OW 336
19362: GO 19309
19364: POP
19365: POP
// end ;
19366: PPOPN 1
19368: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19369: LD_EXP 51
19373: PUSH
19374: LD_EXP 63
19378: AND
19379: IFFALSE 19458
19381: GO 19383
19383: DISABLE
19384: LD_INT 0
19386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19387: LD_ADDR_VAR 0 1
19391: PUSH
19392: LD_INT 22
19394: PUSH
19395: LD_OWVAR 2
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 21
19406: PUSH
19407: LD_INT 3
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PPUSH
19418: CALL_OW 69
19422: ST_TO_ADDR
// if not tmp then
19423: LD_VAR 0 1
19427: NOT
19428: IFFALSE 19432
// exit ;
19430: GO 19458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 1
19439: PPUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: CALL_OW 12
19449: ARRAY
19450: PPUSH
19451: LD_INT 100
19453: PPUSH
19454: CALL_OW 234
// end ;
19458: PPOPN 1
19460: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19461: LD_EXP 51
19465: PUSH
19466: LD_EXP 65
19470: AND
19471: IFFALSE 19569
19473: GO 19475
19475: DISABLE
19476: LD_INT 0
19478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19479: LD_ADDR_VAR 0 1
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_OWVAR 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 21
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PPUSH
19510: CALL_OW 69
19514: ST_TO_ADDR
// if not tmp then
19515: LD_VAR 0 1
19519: NOT
19520: IFFALSE 19524
// exit ;
19522: GO 19569
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 1
19531: PPUSH
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 12
19541: ARRAY
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: LD_INT 4
19548: PPUSH
19549: CALL_OW 12
19553: PPUSH
19554: LD_INT 3000
19556: PPUSH
19557: LD_INT 9000
19559: PPUSH
19560: CALL_OW 12
19564: PPUSH
19565: CALL_OW 492
// end ;
19569: PPOPN 1
19571: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19572: LD_EXP 51
19576: PUSH
19577: LD_EXP 66
19581: AND
19582: IFFALSE 19602
19584: GO 19586
19586: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19587: LD_INT 1
19589: PPUSH
19590: LD_OWVAR 2
19594: PPUSH
19595: LD_INT 0
19597: PPUSH
19598: CALL_OW 324
19602: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19603: LD_EXP 51
19607: PUSH
19608: LD_EXP 67
19612: AND
19613: IFFALSE 19696
19615: GO 19617
19617: DISABLE
19618: LD_INT 0
19620: PPUSH
19621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19622: LD_ADDR_VAR 0 2
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_OWVAR 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 3
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 69
19657: ST_TO_ADDR
// if not tmp then
19658: LD_VAR 0 2
19662: NOT
19663: IFFALSE 19667
// exit ;
19665: GO 19696
// for i in tmp do
19667: LD_ADDR_VAR 0 1
19671: PUSH
19672: LD_VAR 0 2
19676: PUSH
19677: FOR_IN
19678: IFFALSE 19694
// SetBLevel ( i , 10 ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: LD_INT 10
19687: PPUSH
19688: CALL_OW 241
19692: GO 19677
19694: POP
19695: POP
// end ;
19696: PPOPN 2
19698: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19699: LD_EXP 51
19703: PUSH
19704: LD_EXP 68
19708: AND
19709: IFFALSE 19820
19711: GO 19713
19713: DISABLE
19714: LD_INT 0
19716: PPUSH
19717: PPUSH
19718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_OWVAR 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 25
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 69
19754: ST_TO_ADDR
// if not tmp then
19755: LD_VAR 0 3
19759: NOT
19760: IFFALSE 19764
// exit ;
19762: GO 19820
// un := tmp [ rand ( 1 , tmp ) ] ;
19764: LD_ADDR_VAR 0 2
19768: PUSH
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: CALL_OW 12
19786: ARRAY
19787: ST_TO_ADDR
// if Crawls ( un ) then
19788: LD_VAR 0 2
19792: PPUSH
19793: CALL_OW 318
19797: IFFALSE 19808
// ComWalk ( un ) ;
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19808: LD_VAR 0 2
19812: PPUSH
19813: LD_INT 5
19815: PPUSH
19816: CALL_OW 336
// end ;
19820: PPOPN 3
19822: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19823: LD_EXP 51
19827: PUSH
19828: LD_EXP 69
19832: AND
19833: PUSH
19834: LD_OWVAR 67
19838: PUSH
19839: LD_INT 4
19841: LESS
19842: AND
19843: IFFALSE 19862
19845: GO 19847
19847: DISABLE
// begin Difficulty := Difficulty + 1 ;
19848: LD_ADDR_OWVAR 67
19852: PUSH
19853: LD_OWVAR 67
19857: PUSH
19858: LD_INT 1
19860: PLUS
19861: ST_TO_ADDR
// end ;
19862: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19863: LD_EXP 51
19867: PUSH
19868: LD_EXP 70
19872: AND
19873: IFFALSE 19976
19875: GO 19877
19877: DISABLE
19878: LD_INT 0
19880: PPUSH
// begin for i := 1 to 5 do
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: DOUBLE
19887: LD_INT 1
19889: DEC
19890: ST_TO_ADDR
19891: LD_INT 5
19893: PUSH
19894: FOR_TO
19895: IFFALSE 19974
// begin uc_nation := nation_nature ;
19897: LD_ADDR_OWVAR 21
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// uc_side := 0 ;
19905: LD_ADDR_OWVAR 20
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19913: LD_ADDR_OWVAR 29
19917: PUSH
19918: LD_INT 12
19920: PUSH
19921: LD_INT 12
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: ST_TO_ADDR
// hc_agressivity := 20 ;
19928: LD_ADDR_OWVAR 35
19932: PUSH
19933: LD_INT 20
19935: ST_TO_ADDR
// hc_class := class_tiger ;
19936: LD_ADDR_OWVAR 28
19940: PUSH
19941: LD_INT 14
19943: ST_TO_ADDR
// hc_gallery :=  ;
19944: LD_ADDR_OWVAR 33
19948: PUSH
19949: LD_STRING 
19951: ST_TO_ADDR
// hc_name :=  ;
19952: LD_ADDR_OWVAR 26
19956: PUSH
19957: LD_STRING 
19959: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19960: CALL_OW 44
19964: PPUSH
19965: LD_INT 0
19967: PPUSH
19968: CALL_OW 51
// end ;
19972: GO 19894
19974: POP
19975: POP
// end ;
19976: PPOPN 1
19978: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19979: LD_EXP 51
19983: PUSH
19984: LD_EXP 71
19988: AND
19989: IFFALSE 19998
19991: GO 19993
19993: DISABLE
// StreamSibBomb ;
19994: CALL 19999 0 0
19998: END
// export function StreamSibBomb ; var i , x , y ; begin
19999: LD_INT 0
20001: PPUSH
20002: PPUSH
20003: PPUSH
20004: PPUSH
// result := false ;
20005: LD_ADDR_VAR 0 1
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// for i := 1 to 16 do
20013: LD_ADDR_VAR 0 2
20017: PUSH
20018: DOUBLE
20019: LD_INT 1
20021: DEC
20022: ST_TO_ADDR
20023: LD_INT 16
20025: PUSH
20026: FOR_TO
20027: IFFALSE 20226
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_INT 10
20036: PUSH
20037: LD_INT 20
20039: PUSH
20040: LD_INT 30
20042: PUSH
20043: LD_INT 40
20045: PUSH
20046: LD_INT 50
20048: PUSH
20049: LD_INT 60
20051: PUSH
20052: LD_INT 70
20054: PUSH
20055: LD_INT 80
20057: PUSH
20058: LD_INT 90
20060: PUSH
20061: LD_INT 100
20063: PUSH
20064: LD_INT 110
20066: PUSH
20067: LD_INT 120
20069: PUSH
20070: LD_INT 130
20072: PUSH
20073: LD_INT 140
20075: PUSH
20076: LD_INT 150
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: PPUSH
20099: LD_INT 15
20101: PPUSH
20102: CALL_OW 12
20106: ARRAY
20107: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20108: LD_ADDR_VAR 0 4
20112: PUSH
20113: LD_INT 10
20115: PUSH
20116: LD_INT 20
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 40
20124: PUSH
20125: LD_INT 50
20127: PUSH
20128: LD_INT 60
20130: PUSH
20131: LD_INT 70
20133: PUSH
20134: LD_INT 80
20136: PUSH
20137: LD_INT 90
20139: PUSH
20140: LD_INT 100
20142: PUSH
20143: LD_INT 110
20145: PUSH
20146: LD_INT 120
20148: PUSH
20149: LD_INT 130
20151: PUSH
20152: LD_INT 140
20154: PUSH
20155: LD_INT 150
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: PPUSH
20178: LD_INT 15
20180: PPUSH
20181: CALL_OW 12
20185: ARRAY
20186: ST_TO_ADDR
// if ValidHex ( x , y ) then
20187: LD_VAR 0 3
20191: PPUSH
20192: LD_VAR 0 4
20196: PPUSH
20197: CALL_OW 488
20201: IFFALSE 20224
// begin result := [ x , y ] ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_VAR 0 3
20212: PUSH
20213: LD_VAR 0 4
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// break ;
20222: GO 20226
// end ; end ;
20224: GO 20026
20226: POP
20227: POP
// if result then
20228: LD_VAR 0 1
20232: IFFALSE 20292
// begin ToLua ( playSibBomb() ) ;
20234: LD_STRING playSibBomb()
20236: PPUSH
20237: CALL_OW 559
// wait ( 0 0$14 ) ;
20241: LD_INT 490
20243: PPUSH
20244: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20248: LD_VAR 0 1
20252: PUSH
20253: LD_INT 1
20255: ARRAY
20256: PPUSH
20257: LD_VAR 0 1
20261: PUSH
20262: LD_INT 2
20264: ARRAY
20265: PPUSH
20266: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20270: LD_VAR 0 1
20274: PUSH
20275: LD_INT 1
20277: ARRAY
20278: PPUSH
20279: LD_VAR 0 1
20283: PUSH
20284: LD_INT 2
20286: ARRAY
20287: PPUSH
20288: CALL_OW 429
// end ; end ;
20292: LD_VAR 0 1
20296: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20297: LD_EXP 51
20301: PUSH
20302: LD_EXP 73
20306: AND
20307: IFFALSE 20319
20309: GO 20311
20311: DISABLE
// YouLost (  ) ;
20312: LD_STRING 
20314: PPUSH
20315: CALL_OW 104
20319: END
// every 0 0$1 trigger StreamModeActive and sFog do
20320: LD_EXP 51
20324: PUSH
20325: LD_EXP 72
20329: AND
20330: IFFALSE 20344
20332: GO 20334
20334: DISABLE
// FogOff ( your_side ) ;
20335: LD_OWVAR 2
20339: PPUSH
20340: CALL_OW 344
20344: END
// every 0 0$1 trigger StreamModeActive and sSun do
20345: LD_EXP 51
20349: PUSH
20350: LD_EXP 74
20354: AND
20355: IFFALSE 20383
20357: GO 20359
20359: DISABLE
// begin solar_recharge_percent := 0 ;
20360: LD_ADDR_OWVAR 79
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20368: LD_INT 10500
20370: PPUSH
20371: CALL_OW 67
// solar_recharge_percent := 100 ;
20375: LD_ADDR_OWVAR 79
20379: PUSH
20380: LD_INT 100
20382: ST_TO_ADDR
// end ;
20383: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20384: LD_EXP 51
20388: PUSH
20389: LD_EXP 75
20393: AND
20394: IFFALSE 20633
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
// begin tmp := [ ] ;
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: EMPTY
20410: ST_TO_ADDR
// for i := 1 to 6 do
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: DOUBLE
20417: LD_INT 1
20419: DEC
20420: ST_TO_ADDR
20421: LD_INT 6
20423: PUSH
20424: FOR_TO
20425: IFFALSE 20530
// begin uc_nation := nation_nature ;
20427: LD_ADDR_OWVAR 21
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// uc_side := 0 ;
20435: LD_ADDR_OWVAR 20
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20443: LD_ADDR_OWVAR 29
20447: PUSH
20448: LD_INT 12
20450: PUSH
20451: LD_INT 12
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
// hc_agressivity := 20 ;
20458: LD_ADDR_OWVAR 35
20462: PUSH
20463: LD_INT 20
20465: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20466: LD_ADDR_OWVAR 28
20470: PUSH
20471: LD_INT 17
20473: ST_TO_ADDR
// hc_gallery :=  ;
20474: LD_ADDR_OWVAR 33
20478: PUSH
20479: LD_STRING 
20481: ST_TO_ADDR
// hc_name :=  ;
20482: LD_ADDR_OWVAR 26
20486: PUSH
20487: LD_STRING 
20489: ST_TO_ADDR
// un := CreateHuman ;
20490: LD_ADDR_VAR 0 2
20494: PUSH
20495: CALL_OW 44
20499: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: CALL_OW 51
// tmp := tmp ^ un ;
20512: LD_ADDR_VAR 0 3
20516: PUSH
20517: LD_VAR 0 3
20521: PUSH
20522: LD_VAR 0 2
20526: ADD
20527: ST_TO_ADDR
// end ;
20528: GO 20424
20530: POP
20531: POP
// repeat wait ( 0 0$1 ) ;
20532: LD_INT 35
20534: PPUSH
20535: CALL_OW 67
// for un in tmp do
20539: LD_ADDR_VAR 0 2
20543: PUSH
20544: LD_VAR 0 3
20548: PUSH
20549: FOR_IN
20550: IFFALSE 20624
// begin if IsDead ( un ) then
20552: LD_VAR 0 2
20556: PPUSH
20557: CALL_OW 301
20561: IFFALSE 20581
// begin tmp := tmp diff un ;
20563: LD_ADDR_VAR 0 3
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: LD_VAR 0 2
20577: DIFF
20578: ST_TO_ADDR
// continue ;
20579: GO 20549
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20581: LD_VAR 0 2
20585: PPUSH
20586: LD_INT 3
20588: PUSH
20589: LD_INT 22
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 74
20617: PPUSH
20618: CALL_OW 115
// end ;
20622: GO 20549
20624: POP
20625: POP
// until not tmp ;
20626: LD_VAR 0 3
20630: NOT
20631: IFFALSE 20532
// end ;
20633: PPOPN 3
20635: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20636: LD_EXP 51
20640: PUSH
20641: LD_EXP 76
20645: AND
20646: IFFALSE 20700
20648: GO 20650
20650: DISABLE
// begin ToLua ( displayTroll(); ) ;
20651: LD_STRING displayTroll();
20653: PPUSH
20654: CALL_OW 559
// wait ( 3 3$00 ) ;
20658: LD_INT 6300
20660: PPUSH
20661: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20665: LD_STRING hideTroll();
20667: PPUSH
20668: CALL_OW 559
// wait ( 1 1$00 ) ;
20672: LD_INT 2100
20674: PPUSH
20675: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20679: LD_STRING displayTroll();
20681: PPUSH
20682: CALL_OW 559
// wait ( 1 1$00 ) ;
20686: LD_INT 2100
20688: PPUSH
20689: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20693: LD_STRING hideTroll();
20695: PPUSH
20696: CALL_OW 559
// end ;
20700: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20701: LD_EXP 51
20705: PUSH
20706: LD_EXP 77
20710: AND
20711: IFFALSE 20774
20713: GO 20715
20715: DISABLE
20716: LD_INT 0
20718: PPUSH
// begin p := 0 ;
20719: LD_ADDR_VAR 0 1
20723: PUSH
20724: LD_INT 0
20726: ST_TO_ADDR
// repeat game_speed := 1 ;
20727: LD_ADDR_OWVAR 65
20731: PUSH
20732: LD_INT 1
20734: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20735: LD_INT 35
20737: PPUSH
20738: CALL_OW 67
// p := p + 1 ;
20742: LD_ADDR_VAR 0 1
20746: PUSH
20747: LD_VAR 0 1
20751: PUSH
20752: LD_INT 1
20754: PLUS
20755: ST_TO_ADDR
// until p >= 60 ;
20756: LD_VAR 0 1
20760: PUSH
20761: LD_INT 60
20763: GREATEREQUAL
20764: IFFALSE 20727
// game_speed := 4 ;
20766: LD_ADDR_OWVAR 65
20770: PUSH
20771: LD_INT 4
20773: ST_TO_ADDR
// end ;
20774: PPOPN 1
20776: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20777: LD_EXP 51
20781: PUSH
20782: LD_EXP 78
20786: AND
20787: IFFALSE 20933
20789: GO 20791
20791: DISABLE
20792: LD_INT 0
20794: PPUSH
20795: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20796: LD_ADDR_VAR 0 1
20800: PUSH
20801: LD_INT 22
20803: PUSH
20804: LD_OWVAR 2
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: LD_INT 30
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PPUSH
20845: CALL_OW 69
20849: ST_TO_ADDR
// if not depot then
20850: LD_VAR 0 1
20854: NOT
20855: IFFALSE 20859
// exit ;
20857: GO 20933
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: LD_VAR 0 1
20868: PUSH
20869: LD_INT 1
20871: PPUSH
20872: LD_VAR 0 1
20876: PPUSH
20877: CALL_OW 12
20881: ARRAY
20882: PPUSH
20883: CALL_OW 274
20887: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20888: LD_VAR 0 2
20892: PPUSH
20893: LD_INT 1
20895: PPUSH
20896: LD_INT 0
20898: PPUSH
20899: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20903: LD_VAR 0 2
20907: PPUSH
20908: LD_INT 2
20910: PPUSH
20911: LD_INT 0
20913: PPUSH
20914: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20918: LD_VAR 0 2
20922: PPUSH
20923: LD_INT 3
20925: PPUSH
20926: LD_INT 0
20928: PPUSH
20929: CALL_OW 277
// end ;
20933: PPOPN 2
20935: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20936: LD_EXP 51
20940: PUSH
20941: LD_EXP 79
20945: AND
20946: IFFALSE 21043
20948: GO 20950
20950: DISABLE
20951: LD_INT 0
20953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: LD_INT 22
20961: PUSH
20962: LD_OWVAR 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 21
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: LD_INT 23
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 1
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21017: LD_VAR 0 1
21021: PUSH
21022: LD_INT 1
21024: PPUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 12
21034: ARRAY
21035: PPUSH
21036: LD_INT 200
21038: PPUSH
21039: CALL_OW 234
// end ;
21043: PPOPN 1
21045: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21046: LD_EXP 51
21050: PUSH
21051: LD_EXP 80
21055: AND
21056: IFFALSE 21135
21058: GO 21060
21060: DISABLE
21061: LD_INT 0
21063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21064: LD_ADDR_VAR 0 1
21068: PUSH
21069: LD_INT 22
21071: PUSH
21072: LD_OWVAR 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: ST_TO_ADDR
// if not tmp then
21100: LD_VAR 0 1
21104: NOT
21105: IFFALSE 21109
// exit ;
21107: GO 21135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21109: LD_VAR 0 1
21113: PUSH
21114: LD_INT 1
21116: PPUSH
21117: LD_VAR 0 1
21121: PPUSH
21122: CALL_OW 12
21126: ARRAY
21127: PPUSH
21128: LD_INT 60
21130: PPUSH
21131: CALL_OW 234
// end ;
21135: PPOPN 1
21137: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21138: LD_EXP 51
21142: PUSH
21143: LD_EXP 81
21147: AND
21148: IFFALSE 21247
21150: GO 21152
21152: DISABLE
21153: LD_INT 0
21155: PPUSH
21156: PPUSH
// begin enable ;
21157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21158: LD_ADDR_VAR 0 1
21162: PUSH
21163: LD_INT 22
21165: PUSH
21166: LD_OWVAR 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 61
21177: PUSH
21178: EMPTY
21179: LIST
21180: PUSH
21181: LD_INT 33
21183: PUSH
21184: LD_INT 2
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: PPUSH
21196: CALL_OW 69
21200: ST_TO_ADDR
// if not tmp then
21201: LD_VAR 0 1
21205: NOT
21206: IFFALSE 21210
// exit ;
21208: GO 21247
// for i in tmp do
21210: LD_ADDR_VAR 0 2
21214: PUSH
21215: LD_VAR 0 1
21219: PUSH
21220: FOR_IN
21221: IFFALSE 21245
// if IsControledBy ( i ) then
21223: LD_VAR 0 2
21227: PPUSH
21228: CALL_OW 312
21232: IFFALSE 21243
// ComUnlink ( i ) ;
21234: LD_VAR 0 2
21238: PPUSH
21239: CALL_OW 136
21243: GO 21220
21245: POP
21246: POP
// end ;
21247: PPOPN 2
21249: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21250: LD_EXP 51
21254: PUSH
21255: LD_EXP 82
21259: AND
21260: IFFALSE 21400
21262: GO 21264
21264: DISABLE
21265: LD_INT 0
21267: PPUSH
21268: PPUSH
// begin ToLua ( displayPowell(); ) ;
21269: LD_STRING displayPowell();
21271: PPUSH
21272: CALL_OW 559
// uc_side := 0 ;
21276: LD_ADDR_OWVAR 20
21280: PUSH
21281: LD_INT 0
21283: ST_TO_ADDR
// uc_nation := 2 ;
21284: LD_ADDR_OWVAR 21
21288: PUSH
21289: LD_INT 2
21291: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21292: LD_ADDR_OWVAR 37
21296: PUSH
21297: LD_INT 14
21299: ST_TO_ADDR
// vc_engine := engine_siberite ;
21300: LD_ADDR_OWVAR 39
21304: PUSH
21305: LD_INT 3
21307: ST_TO_ADDR
// vc_control := control_apeman ;
21308: LD_ADDR_OWVAR 38
21312: PUSH
21313: LD_INT 5
21315: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21316: LD_ADDR_OWVAR 40
21320: PUSH
21321: LD_INT 29
21323: ST_TO_ADDR
// un := CreateVehicle ;
21324: LD_ADDR_VAR 0 2
21328: PUSH
21329: CALL_OW 45
21333: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21334: LD_VAR 0 2
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21346: LD_INT 35
21348: PPUSH
21349: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21353: LD_VAR 0 2
21357: PPUSH
21358: LD_INT 22
21360: PUSH
21361: LD_OWVAR 2
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PPUSH
21370: CALL_OW 69
21374: PPUSH
21375: LD_VAR 0 2
21379: PPUSH
21380: CALL_OW 74
21384: PPUSH
21385: CALL_OW 115
// until IsDead ( un ) ;
21389: LD_VAR 0 2
21393: PPUSH
21394: CALL_OW 301
21398: IFFALSE 21346
// end ;
21400: PPOPN 2
21402: END
// every 0 0$1 trigger StreamModeActive and sStu do
21403: LD_EXP 51
21407: PUSH
21408: LD_EXP 90
21412: AND
21413: IFFALSE 21429
21415: GO 21417
21417: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21418: LD_STRING displayStucuk();
21420: PPUSH
21421: CALL_OW 559
// ResetFog ;
21425: CALL_OW 335
// end ;
21429: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21430: LD_EXP 51
21434: PUSH
21435: LD_EXP 83
21439: AND
21440: IFFALSE 21581
21442: GO 21444
21444: DISABLE
21445: LD_INT 0
21447: PPUSH
21448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21449: LD_ADDR_VAR 0 2
21453: PUSH
21454: LD_INT 22
21456: PUSH
21457: LD_OWVAR 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 21
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: ST_TO_ADDR
// if not tmp then
21485: LD_VAR 0 2
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21581
// un := tmp [ rand ( 1 , tmp ) ] ;
21494: LD_ADDR_VAR 0 1
21498: PUSH
21499: LD_VAR 0 2
21503: PUSH
21504: LD_INT 1
21506: PPUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: CALL_OW 12
21516: ARRAY
21517: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21518: LD_VAR 0 1
21522: PPUSH
21523: LD_INT 0
21525: PPUSH
21526: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21530: LD_VAR 0 1
21534: PPUSH
21535: LD_OWVAR 3
21539: PUSH
21540: LD_VAR 0 1
21544: DIFF
21545: PPUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: CALL_OW 74
21555: PPUSH
21556: CALL_OW 115
// wait ( 0 0$20 ) ;
21560: LD_INT 700
21562: PPUSH
21563: CALL_OW 67
// SetSide ( un , your_side ) ;
21567: LD_VAR 0 1
21571: PPUSH
21572: LD_OWVAR 2
21576: PPUSH
21577: CALL_OW 235
// end ;
21581: PPOPN 2
21583: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21584: LD_EXP 51
21588: PUSH
21589: LD_EXP 84
21593: AND
21594: IFFALSE 21700
21596: GO 21598
21598: DISABLE
21599: LD_INT 0
21601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21602: LD_ADDR_VAR 0 1
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 30
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 30
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PPUSH
21651: CALL_OW 69
21655: ST_TO_ADDR
// if not depot then
21656: LD_VAR 0 1
21660: NOT
21661: IFFALSE 21665
// exit ;
21663: GO 21700
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21665: LD_VAR 0 1
21669: PUSH
21670: LD_INT 1
21672: ARRAY
21673: PPUSH
21674: CALL_OW 250
21678: PPUSH
21679: LD_VAR 0 1
21683: PUSH
21684: LD_INT 1
21686: ARRAY
21687: PPUSH
21688: CALL_OW 251
21692: PPUSH
21693: LD_INT 70
21695: PPUSH
21696: CALL_OW 495
// end ;
21700: PPOPN 1
21702: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21703: LD_EXP 51
21707: PUSH
21708: LD_EXP 85
21712: AND
21713: IFFALSE 21924
21715: GO 21717
21717: DISABLE
21718: LD_INT 0
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
21724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21725: LD_ADDR_VAR 0 5
21729: PUSH
21730: LD_INT 22
21732: PUSH
21733: LD_OWVAR 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 69
21760: ST_TO_ADDR
// if not tmp then
21761: LD_VAR 0 5
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 21924
// for i in tmp do
21770: LD_ADDR_VAR 0 1
21774: PUSH
21775: LD_VAR 0 5
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21922
// begin d := rand ( 0 , 5 ) ;
21783: LD_ADDR_VAR 0 4
21787: PUSH
21788: LD_INT 0
21790: PPUSH
21791: LD_INT 5
21793: PPUSH
21794: CALL_OW 12
21798: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21799: LD_ADDR_VAR 0 2
21803: PUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 250
21813: PPUSH
21814: LD_VAR 0 4
21818: PPUSH
21819: LD_INT 3
21821: PPUSH
21822: LD_INT 12
21824: PPUSH
21825: CALL_OW 12
21829: PPUSH
21830: CALL_OW 272
21834: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 251
21849: PPUSH
21850: LD_VAR 0 4
21854: PPUSH
21855: LD_INT 3
21857: PPUSH
21858: LD_INT 12
21860: PPUSH
21861: CALL_OW 12
21865: PPUSH
21866: CALL_OW 273
21870: ST_TO_ADDR
// if ValidHex ( x , y ) then
21871: LD_VAR 0 2
21875: PPUSH
21876: LD_VAR 0 3
21880: PPUSH
21881: CALL_OW 488
21885: IFFALSE 21920
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 3
21901: PPUSH
21902: LD_INT 3
21904: PPUSH
21905: LD_INT 6
21907: PPUSH
21908: CALL_OW 12
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL_OW 483
// end ;
21920: GO 21780
21922: POP
21923: POP
// end ;
21924: PPOPN 5
21926: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21927: LD_EXP 51
21931: PUSH
21932: LD_EXP 86
21936: AND
21937: IFFALSE 22031
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21946: LD_ADDR_VAR 0 2
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_OWVAR 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 32
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: PPUSH
21988: CALL_OW 69
21992: ST_TO_ADDR
// if not tmp then
21993: LD_VAR 0 2
21997: NOT
21998: IFFALSE 22002
// exit ;
22000: GO 22031
// for i in tmp do
22002: LD_ADDR_VAR 0 1
22006: PUSH
22007: LD_VAR 0 2
22011: PUSH
22012: FOR_IN
22013: IFFALSE 22029
// SetFuel ( i , 0 ) ;
22015: LD_VAR 0 1
22019: PPUSH
22020: LD_INT 0
22022: PPUSH
22023: CALL_OW 240
22027: GO 22012
22029: POP
22030: POP
// end ;
22031: PPOPN 2
22033: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22034: LD_EXP 51
22038: PUSH
22039: LD_EXP 87
22043: AND
22044: IFFALSE 22110
22046: GO 22048
22048: DISABLE
22049: LD_INT 0
22051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22052: LD_ADDR_VAR 0 1
22056: PUSH
22057: LD_INT 22
22059: PUSH
22060: LD_OWVAR 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 29
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PPUSH
22083: CALL_OW 69
22087: ST_TO_ADDR
// if not tmp then
22088: LD_VAR 0 1
22092: NOT
22093: IFFALSE 22097
// exit ;
22095: GO 22110
// DestroyUnit ( tmp [ 1 ] ) ;
22097: LD_VAR 0 1
22101: PUSH
22102: LD_INT 1
22104: ARRAY
22105: PPUSH
22106: CALL_OW 65
// end ;
22110: PPOPN 1
22112: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22113: LD_EXP 51
22117: PUSH
22118: LD_EXP 89
22122: AND
22123: IFFALSE 22252
22125: GO 22127
22127: DISABLE
22128: LD_INT 0
22130: PPUSH
// begin uc_side := 0 ;
22131: LD_ADDR_OWVAR 20
22135: PUSH
22136: LD_INT 0
22138: ST_TO_ADDR
// uc_nation := nation_arabian ;
22139: LD_ADDR_OWVAR 21
22143: PUSH
22144: LD_INT 2
22146: ST_TO_ADDR
// hc_gallery :=  ;
22147: LD_ADDR_OWVAR 33
22151: PUSH
22152: LD_STRING 
22154: ST_TO_ADDR
// hc_name :=  ;
22155: LD_ADDR_OWVAR 26
22159: PUSH
22160: LD_STRING 
22162: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22163: LD_INT 1
22165: PPUSH
22166: LD_INT 11
22168: PPUSH
22169: LD_INT 10
22171: PPUSH
22172: CALL_OW 380
// un := CreateHuman ;
22176: LD_ADDR_VAR 0 1
22180: PUSH
22181: CALL_OW 44
22185: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22186: LD_VAR 0 1
22190: PPUSH
22191: LD_INT 1
22193: PPUSH
22194: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22198: LD_INT 35
22200: PPUSH
22201: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22205: LD_VAR 0 1
22209: PPUSH
22210: LD_INT 22
22212: PUSH
22213: LD_OWVAR 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PPUSH
22222: CALL_OW 69
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 74
22236: PPUSH
22237: CALL_OW 115
// until IsDead ( un ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL_OW 301
22250: IFFALSE 22198
// end ;
22252: PPOPN 1
22254: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22255: LD_EXP 51
22259: PUSH
22260: LD_EXP 91
22264: AND
22265: IFFALSE 22277
22267: GO 22269
22269: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22270: LD_STRING earthquake(getX(game), 0, 32)
22272: PPUSH
22273: CALL_OW 559
22277: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22278: LD_EXP 51
22282: PUSH
22283: LD_EXP 92
22287: AND
22288: IFFALSE 22379
22290: GO 22292
22292: DISABLE
22293: LD_INT 0
22295: PPUSH
// begin enable ;
22296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22297: LD_ADDR_VAR 0 1
22301: PUSH
22302: LD_INT 22
22304: PUSH
22305: LD_OWVAR 2
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 21
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 33
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: ST_TO_ADDR
// if not tmp then
22344: LD_VAR 0 1
22348: NOT
22349: IFFALSE 22353
// exit ;
22351: GO 22379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22353: LD_VAR 0 1
22357: PUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 12
22370: ARRAY
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 234
// end ;
22379: PPOPN 1
22381: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22382: LD_EXP 51
22386: PUSH
22387: LD_EXP 93
22391: AND
22392: IFFALSE 22533
22394: GO 22396
22396: DISABLE
22397: LD_INT 0
22399: PPUSH
22400: PPUSH
22401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_OWVAR 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 25
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PPUSH
22433: CALL_OW 69
22437: ST_TO_ADDR
// if not tmp then
22438: LD_VAR 0 3
22442: NOT
22443: IFFALSE 22447
// exit ;
22445: GO 22533
// un := tmp [ rand ( 1 , tmp ) ] ;
22447: LD_ADDR_VAR 0 2
22451: PUSH
22452: LD_VAR 0 3
22456: PUSH
22457: LD_INT 1
22459: PPUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 12
22469: ARRAY
22470: ST_TO_ADDR
// if Crawls ( un ) then
22471: LD_VAR 0 2
22475: PPUSH
22476: CALL_OW 318
22480: IFFALSE 22491
// ComWalk ( un ) ;
22482: LD_VAR 0 2
22486: PPUSH
22487: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22491: LD_VAR 0 2
22495: PPUSH
22496: LD_INT 9
22498: PPUSH
22499: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22503: LD_INT 28
22505: PPUSH
22506: LD_OWVAR 2
22510: PPUSH
22511: LD_INT 2
22513: PPUSH
22514: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22518: LD_INT 29
22520: PPUSH
22521: LD_OWVAR 2
22525: PPUSH
22526: LD_INT 2
22528: PPUSH
22529: CALL_OW 322
// end ;
22533: PPOPN 3
22535: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22536: LD_EXP 51
22540: PUSH
22541: LD_EXP 94
22545: AND
22546: IFFALSE 22657
22548: GO 22550
22550: DISABLE
22551: LD_INT 0
22553: PPUSH
22554: PPUSH
22555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 22
22563: PUSH
22564: LD_OWVAR 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 25
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PPUSH
22587: CALL_OW 69
22591: ST_TO_ADDR
// if not tmp then
22592: LD_VAR 0 3
22596: NOT
22597: IFFALSE 22601
// exit ;
22599: GO 22657
// un := tmp [ rand ( 1 , tmp ) ] ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 1
22613: PPUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: CALL_OW 12
22623: ARRAY
22624: ST_TO_ADDR
// if Crawls ( un ) then
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 318
22634: IFFALSE 22645
// ComWalk ( un ) ;
22636: LD_VAR 0 2
22640: PPUSH
22641: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22645: LD_VAR 0 2
22649: PPUSH
22650: LD_INT 8
22652: PPUSH
22653: CALL_OW 336
// end ;
22657: PPOPN 3
22659: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22660: LD_EXP 51
22664: PUSH
22665: LD_EXP 95
22669: AND
22670: IFFALSE 22814
22672: GO 22674
22674: DISABLE
22675: LD_INT 0
22677: PPUSH
22678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22679: LD_ADDR_VAR 0 2
22683: PUSH
22684: LD_INT 22
22686: PUSH
22687: LD_OWVAR 2
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 21
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 34
22711: PUSH
22712: LD_INT 12
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 34
22721: PUSH
22722: LD_INT 51
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 34
22731: PUSH
22732: LD_INT 32
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 69
22754: ST_TO_ADDR
// if not tmp then
22755: LD_VAR 0 2
22759: NOT
22760: IFFALSE 22764
// exit ;
22762: GO 22814
// for i in tmp do
22764: LD_ADDR_VAR 0 1
22768: PUSH
22769: LD_VAR 0 2
22773: PUSH
22774: FOR_IN
22775: IFFALSE 22812
// if GetCargo ( i , mat_artifact ) = 0 then
22777: LD_VAR 0 1
22781: PPUSH
22782: LD_INT 4
22784: PPUSH
22785: CALL_OW 289
22789: PUSH
22790: LD_INT 0
22792: EQUAL
22793: IFFALSE 22810
// SetCargo ( i , mat_siberit , 100 ) ;
22795: LD_VAR 0 1
22799: PPUSH
22800: LD_INT 3
22802: PPUSH
22803: LD_INT 100
22805: PPUSH
22806: CALL_OW 290
22810: GO 22774
22812: POP
22813: POP
// end ;
22814: PPOPN 2
22816: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22817: LD_EXP 51
22821: PUSH
22822: LD_EXP 96
22826: AND
22827: IFFALSE 23010
22829: GO 22831
22831: DISABLE
22832: LD_INT 0
22834: PPUSH
22835: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22836: LD_ADDR_VAR 0 2
22840: PUSH
22841: LD_INT 22
22843: PUSH
22844: LD_OWVAR 2
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if not tmp then
22858: LD_VAR 0 2
22862: NOT
22863: IFFALSE 22867
// exit ;
22865: GO 23010
// for i := 1 to 2 do
22867: LD_ADDR_VAR 0 1
22871: PUSH
22872: DOUBLE
22873: LD_INT 1
22875: DEC
22876: ST_TO_ADDR
22877: LD_INT 2
22879: PUSH
22880: FOR_TO
22881: IFFALSE 23008
// begin uc_side := your_side ;
22883: LD_ADDR_OWVAR 20
22887: PUSH
22888: LD_OWVAR 2
22892: ST_TO_ADDR
// uc_nation := nation_american ;
22893: LD_ADDR_OWVAR 21
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// vc_chassis := us_morphling ;
22901: LD_ADDR_OWVAR 37
22905: PUSH
22906: LD_INT 5
22908: ST_TO_ADDR
// vc_engine := engine_siberite ;
22909: LD_ADDR_OWVAR 39
22913: PUSH
22914: LD_INT 3
22916: ST_TO_ADDR
// vc_control := control_computer ;
22917: LD_ADDR_OWVAR 38
22921: PUSH
22922: LD_INT 3
22924: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22925: LD_ADDR_OWVAR 40
22929: PUSH
22930: LD_INT 10
22932: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22933: LD_VAR 0 2
22937: PUSH
22938: LD_INT 1
22940: ARRAY
22941: PPUSH
22942: CALL_OW 310
22946: NOT
22947: IFFALSE 22994
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22949: CALL_OW 45
22953: PPUSH
22954: LD_VAR 0 2
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PPUSH
22963: CALL_OW 250
22967: PPUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_INT 1
22975: ARRAY
22976: PPUSH
22977: CALL_OW 251
22981: PPUSH
22982: LD_INT 12
22984: PPUSH
22985: LD_INT 1
22987: PPUSH
22988: CALL_OW 50
22992: GO 23006
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22994: CALL_OW 45
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: CALL_OW 51
// end ;
23006: GO 22880
23008: POP
23009: POP
// end ;
23010: PPOPN 2
23012: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23013: LD_EXP 51
23017: PUSH
23018: LD_EXP 97
23022: AND
23023: IFFALSE 23245
23025: GO 23027
23027: DISABLE
23028: LD_INT 0
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
23034: PPUSH
23035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23036: LD_ADDR_VAR 0 6
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_OWVAR 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 21
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 23
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: PPUSH
23085: CALL_OW 69
23089: ST_TO_ADDR
// if not tmp then
23090: LD_VAR 0 6
23094: NOT
23095: IFFALSE 23099
// exit ;
23097: GO 23245
// s1 := rand ( 1 , 4 ) ;
23099: LD_ADDR_VAR 0 2
23103: PUSH
23104: LD_INT 1
23106: PPUSH
23107: LD_INT 4
23109: PPUSH
23110: CALL_OW 12
23114: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23115: LD_ADDR_VAR 0 4
23119: PUSH
23120: LD_VAR 0 6
23124: PUSH
23125: LD_INT 1
23127: ARRAY
23128: PPUSH
23129: LD_VAR 0 2
23133: PPUSH
23134: CALL_OW 259
23138: ST_TO_ADDR
// if s1 = 1 then
23139: LD_VAR 0 2
23143: PUSH
23144: LD_INT 1
23146: EQUAL
23147: IFFALSE 23167
// s2 := rand ( 2 , 4 ) else
23149: LD_ADDR_VAR 0 3
23153: PUSH
23154: LD_INT 2
23156: PPUSH
23157: LD_INT 4
23159: PPUSH
23160: CALL_OW 12
23164: ST_TO_ADDR
23165: GO 23175
// s2 := 1 ;
23167: LD_ADDR_VAR 0 3
23171: PUSH
23172: LD_INT 1
23174: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23175: LD_ADDR_VAR 0 5
23179: PUSH
23180: LD_VAR 0 6
23184: PUSH
23185: LD_INT 1
23187: ARRAY
23188: PPUSH
23189: LD_VAR 0 3
23193: PPUSH
23194: CALL_OW 259
23198: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23199: LD_VAR 0 6
23203: PUSH
23204: LD_INT 1
23206: ARRAY
23207: PPUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_VAR 0 5
23217: PPUSH
23218: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23222: LD_VAR 0 6
23226: PUSH
23227: LD_INT 1
23229: ARRAY
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_VAR 0 4
23240: PPUSH
23241: CALL_OW 237
// end ;
23245: PPOPN 6
23247: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23248: LD_EXP 51
23252: PUSH
23253: LD_EXP 98
23257: AND
23258: IFFALSE 23337
23260: GO 23262
23262: DISABLE
23263: LD_INT 0
23265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23266: LD_ADDR_VAR 0 1
23270: PUSH
23271: LD_INT 22
23273: PUSH
23274: LD_OWVAR 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 30
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 1
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23311: LD_VAR 0 1
23315: PUSH
23316: LD_INT 1
23318: PPUSH
23319: LD_VAR 0 1
23323: PPUSH
23324: CALL_OW 12
23328: ARRAY
23329: PPUSH
23330: LD_INT 1
23332: PPUSH
23333: CALL_OW 234
// end ;
23337: PPOPN 1
23339: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23340: LD_EXP 51
23344: PUSH
23345: LD_EXP 99
23349: AND
23350: IFFALSE 23462
23352: GO 23354
23354: DISABLE
23355: LD_INT 0
23357: PPUSH
23358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23359: LD_ADDR_VAR 0 2
23363: PUSH
23364: LD_INT 22
23366: PUSH
23367: LD_OWVAR 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 30
23381: PUSH
23382: LD_INT 27
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 30
23391: PUSH
23392: LD_INT 26
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 30
23401: PUSH
23402: LD_INT 28
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PPUSH
23419: CALL_OW 69
23423: ST_TO_ADDR
// if not tmp then
23424: LD_VAR 0 2
23428: NOT
23429: IFFALSE 23433
// exit ;
23431: GO 23462
// for i in tmp do
23433: LD_ADDR_VAR 0 1
23437: PUSH
23438: LD_VAR 0 2
23442: PUSH
23443: FOR_IN
23444: IFFALSE 23460
// SetLives ( i , 1 ) ;
23446: LD_VAR 0 1
23450: PPUSH
23451: LD_INT 1
23453: PPUSH
23454: CALL_OW 234
23458: GO 23443
23460: POP
23461: POP
// end ;
23462: PPOPN 2
23464: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23465: LD_EXP 51
23469: PUSH
23470: LD_EXP 100
23474: AND
23475: IFFALSE 23762
23477: GO 23479
23479: DISABLE
23480: LD_INT 0
23482: PPUSH
23483: PPUSH
23484: PPUSH
// begin i := rand ( 1 , 7 ) ;
23485: LD_ADDR_VAR 0 1
23489: PUSH
23490: LD_INT 1
23492: PPUSH
23493: LD_INT 7
23495: PPUSH
23496: CALL_OW 12
23500: ST_TO_ADDR
// case i of 1 :
23501: LD_VAR 0 1
23505: PUSH
23506: LD_INT 1
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23524
23514: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23515: LD_STRING earthquake(getX(game), 0, 32)
23517: PPUSH
23518: CALL_OW 559
23522: GO 23762
23524: LD_INT 2
23526: DOUBLE
23527: EQUAL
23528: IFTRUE 23532
23530: GO 23546
23532: POP
// begin ToLua ( displayStucuk(); ) ;
23533: LD_STRING displayStucuk();
23535: PPUSH
23536: CALL_OW 559
// ResetFog ;
23540: CALL_OW 335
// end ; 3 :
23544: GO 23762
23546: LD_INT 3
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 23658
23554: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23555: LD_ADDR_VAR 0 2
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_OWVAR 2
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 25
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 69
23590: ST_TO_ADDR
// if not tmp then
23591: LD_VAR 0 2
23595: NOT
23596: IFFALSE 23600
// exit ;
23598: GO 23762
// un := tmp [ rand ( 1 , tmp ) ] ;
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: LD_VAR 0 2
23609: PUSH
23610: LD_INT 1
23612: PPUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: CALL_OW 12
23622: ARRAY
23623: ST_TO_ADDR
// if Crawls ( un ) then
23624: LD_VAR 0 3
23628: PPUSH
23629: CALL_OW 318
23633: IFFALSE 23644
// ComWalk ( un ) ;
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23644: LD_VAR 0 3
23648: PPUSH
23649: LD_INT 8
23651: PPUSH
23652: CALL_OW 336
// end ; 4 :
23656: GO 23762
23658: LD_INT 4
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23740
23666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_INT 22
23674: PUSH
23675: LD_OWVAR 2
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 30
23686: PUSH
23687: LD_INT 29
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 69
23702: ST_TO_ADDR
// if not tmp then
23703: LD_VAR 0 2
23707: NOT
23708: IFFALSE 23712
// exit ;
23710: GO 23762
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23712: LD_VAR 0 2
23716: PUSH
23717: LD_INT 1
23719: ARRAY
23720: PPUSH
23721: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23725: LD_VAR 0 2
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: PPUSH
23734: CALL_OW 65
// end ; 5 .. 7 :
23738: GO 23762
23740: LD_INT 5
23742: DOUBLE
23743: GREATEREQUAL
23744: IFFALSE 23752
23746: LD_INT 7
23748: DOUBLE
23749: LESSEQUAL
23750: IFTRUE 23754
23752: GO 23761
23754: POP
// StreamSibBomb ; end ;
23755: CALL 19999 0 0
23759: GO 23762
23761: POP
// end ;
23762: PPOPN 3
23764: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23765: LD_EXP 51
23769: PUSH
23770: LD_EXP 101
23774: AND
23775: IFFALSE 23931
23777: GO 23779
23779: DISABLE
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
23784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23785: LD_ADDR_VAR 0 2
23789: PUSH
23790: LD_INT 81
23792: PUSH
23793: LD_OWVAR 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 21
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: ST_TO_ADDR
// if not tmp then
23839: LD_VAR 0 2
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23931
// p := 0 ;
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: LD_INT 0
23855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23856: LD_INT 35
23858: PPUSH
23859: CALL_OW 67
// p := p + 1 ;
23863: LD_ADDR_VAR 0 3
23867: PUSH
23868: LD_VAR 0 3
23872: PUSH
23873: LD_INT 1
23875: PLUS
23876: ST_TO_ADDR
// for i in tmp do
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_VAR 0 2
23886: PUSH
23887: FOR_IN
23888: IFFALSE 23919
// if GetLives ( i ) < 1000 then
23890: LD_VAR 0 1
23894: PPUSH
23895: CALL_OW 256
23899: PUSH
23900: LD_INT 1000
23902: LESS
23903: IFFALSE 23917
// SetLives ( i , 1000 ) ;
23905: LD_VAR 0 1
23909: PPUSH
23910: LD_INT 1000
23912: PPUSH
23913: CALL_OW 234
23917: GO 23887
23919: POP
23920: POP
// until p > 20 ;
23921: LD_VAR 0 3
23925: PUSH
23926: LD_INT 20
23928: GREATER
23929: IFFALSE 23856
// end ;
23931: PPOPN 3
23933: END
// every 0 0$1 trigger StreamModeActive and sTime do
23934: LD_EXP 51
23938: PUSH
23939: LD_EXP 102
23943: AND
23944: IFFALSE 23979
23946: GO 23948
23948: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23949: LD_INT 28
23951: PPUSH
23952: LD_OWVAR 2
23956: PPUSH
23957: LD_INT 2
23959: PPUSH
23960: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23964: LD_INT 30
23966: PPUSH
23967: LD_OWVAR 2
23971: PPUSH
23972: LD_INT 2
23974: PPUSH
23975: CALL_OW 322
// end ;
23979: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23980: LD_EXP 51
23984: PUSH
23985: LD_EXP 103
23989: AND
23990: IFFALSE 24111
23992: GO 23994
23994: DISABLE
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_OWVAR 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: LD_INT 23
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// if not tmp then
24053: LD_VAR 0 2
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24111
// for i in tmp do
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_VAR 0 2
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24109
// begin if Crawls ( i ) then
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 318
24084: IFFALSE 24095
// ComWalk ( i ) ;
24086: LD_VAR 0 1
24090: PPUSH
24091: CALL_OW 138
// SetClass ( i , 2 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 2
24102: PPUSH
24103: CALL_OW 336
// end ;
24107: GO 24072
24109: POP
24110: POP
// end ;
24111: PPOPN 2
24113: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24114: LD_EXP 51
24118: PUSH
24119: LD_EXP 104
24123: AND
24124: IFFALSE 24412
24126: GO 24128
24128: DISABLE
24129: LD_INT 0
24131: PPUSH
24132: PPUSH
24133: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24134: LD_OWVAR 2
24138: PPUSH
24139: LD_INT 9
24141: PPUSH
24142: LD_INT 1
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24152: LD_INT 9
24154: PPUSH
24155: LD_OWVAR 2
24159: PPUSH
24160: CALL_OW 343
// uc_side := 9 ;
24164: LD_ADDR_OWVAR 20
24168: PUSH
24169: LD_INT 9
24171: ST_TO_ADDR
// uc_nation := 2 ;
24172: LD_ADDR_OWVAR 21
24176: PUSH
24177: LD_INT 2
24179: ST_TO_ADDR
// hc_name := Dark Warrior ;
24180: LD_ADDR_OWVAR 26
24184: PUSH
24185: LD_STRING Dark Warrior
24187: ST_TO_ADDR
// hc_gallery :=  ;
24188: LD_ADDR_OWVAR 33
24192: PUSH
24193: LD_STRING 
24195: ST_TO_ADDR
// hc_noskilllimit := true ;
24196: LD_ADDR_OWVAR 76
24200: PUSH
24201: LD_INT 1
24203: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24204: LD_ADDR_OWVAR 31
24208: PUSH
24209: LD_INT 30
24211: PUSH
24212: LD_INT 30
24214: PUSH
24215: LD_INT 30
24217: PUSH
24218: LD_INT 30
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// un := CreateHuman ;
24227: LD_ADDR_VAR 0 3
24231: PUSH
24232: CALL_OW 44
24236: ST_TO_ADDR
// hc_noskilllimit := false ;
24237: LD_ADDR_OWVAR 76
24241: PUSH
24242: LD_INT 0
24244: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24245: LD_VAR 0 3
24249: PPUSH
24250: LD_INT 1
24252: PPUSH
24253: CALL_OW 51
// ToLua ( playRanger() ) ;
24257: LD_STRING playRanger()
24259: PPUSH
24260: CALL_OW 559
// p := 0 ;
24264: LD_ADDR_VAR 0 2
24268: PUSH
24269: LD_INT 0
24271: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24272: LD_INT 35
24274: PPUSH
24275: CALL_OW 67
// p := p + 1 ;
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_VAR 0 2
24288: PUSH
24289: LD_INT 1
24291: PLUS
24292: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24293: LD_VAR 0 3
24297: PPUSH
24298: CALL_OW 256
24302: PUSH
24303: LD_INT 1000
24305: LESS
24306: IFFALSE 24320
// SetLives ( un , 1000 ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_INT 1000
24315: PPUSH
24316: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24320: LD_VAR 0 3
24324: PPUSH
24325: LD_INT 81
24327: PUSH
24328: LD_OWVAR 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 91
24339: PUSH
24340: LD_VAR 0 3
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 69
24361: PPUSH
24362: LD_VAR 0 3
24366: PPUSH
24367: CALL_OW 74
24371: PPUSH
24372: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24376: LD_VAR 0 2
24380: PUSH
24381: LD_INT 80
24383: GREATER
24384: PUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: CALL_OW 301
24394: OR
24395: IFFALSE 24272
// if un then
24397: LD_VAR 0 3
24401: IFFALSE 24412
// RemoveUnit ( un ) ;
24403: LD_VAR 0 3
24407: PPUSH
24408: CALL_OW 64
// end ;
24412: PPOPN 3
24414: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24415: LD_EXP 105
24419: IFFALSE 24535
24421: GO 24423
24423: DISABLE
24424: LD_INT 0
24426: PPUSH
24427: PPUSH
24428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_INT 81
24436: PUSH
24437: LD_OWVAR 2
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 21
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PPUSH
24460: CALL_OW 69
24464: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24465: LD_STRING playComputer()
24467: PPUSH
24468: CALL_OW 559
// if not tmp then
24472: LD_VAR 0 2
24476: NOT
24477: IFFALSE 24481
// exit ;
24479: GO 24535
// for i in tmp do
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: LD_VAR 0 2
24490: PUSH
24491: FOR_IN
24492: IFFALSE 24533
// for j := 1 to 4 do
24494: LD_ADDR_VAR 0 3
24498: PUSH
24499: DOUBLE
24500: LD_INT 1
24502: DEC
24503: ST_TO_ADDR
24504: LD_INT 4
24506: PUSH
24507: FOR_TO
24508: IFFALSE 24529
// SetSkill ( i , j , 10 ) ;
24510: LD_VAR 0 1
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: LD_INT 10
24522: PPUSH
24523: CALL_OW 237
24527: GO 24507
24529: POP
24530: POP
24531: GO 24491
24533: POP
24534: POP
// end ;
24535: PPOPN 3
24537: END
// every 0 0$1 trigger s30 do var i , tmp ;
24538: LD_EXP 106
24542: IFFALSE 24611
24544: GO 24546
24546: DISABLE
24547: LD_INT 0
24549: PPUSH
24550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24551: LD_ADDR_VAR 0 2
24555: PUSH
24556: LD_INT 22
24558: PUSH
24559: LD_OWVAR 2
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PPUSH
24568: CALL_OW 69
24572: ST_TO_ADDR
// if not tmp then
24573: LD_VAR 0 2
24577: NOT
24578: IFFALSE 24582
// exit ;
24580: GO 24611
// for i in tmp do
24582: LD_ADDR_VAR 0 1
24586: PUSH
24587: LD_VAR 0 2
24591: PUSH
24592: FOR_IN
24593: IFFALSE 24609
// SetLives ( i , 300 ) ;
24595: LD_VAR 0 1
24599: PPUSH
24600: LD_INT 300
24602: PPUSH
24603: CALL_OW 234
24607: GO 24592
24609: POP
24610: POP
// end ;
24611: PPOPN 2
24613: END
// every 0 0$1 trigger s60 do var i , tmp ;
24614: LD_EXP 107
24618: IFFALSE 24687
24620: GO 24622
24622: DISABLE
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24627: LD_ADDR_VAR 0 2
24631: PUSH
24632: LD_INT 22
24634: PUSH
24635: LD_OWVAR 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 2
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24687
// for i in tmp do
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 2
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24685
// SetLives ( i , 600 ) ;
24671: LD_VAR 0 1
24675: PPUSH
24676: LD_INT 600
24678: PPUSH
24679: CALL_OW 234
24683: GO 24668
24685: POP
24686: POP
// end ;
24687: PPOPN 2
24689: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24690: LD_INT 0
24692: PPUSH
// case cmd of 301 :
24693: LD_VAR 0 1
24697: PUSH
24698: LD_INT 301
24700: DOUBLE
24701: EQUAL
24702: IFTRUE 24706
24704: GO 24738
24706: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24707: LD_VAR 0 6
24711: PPUSH
24712: LD_VAR 0 7
24716: PPUSH
24717: LD_VAR 0 8
24721: PPUSH
24722: LD_VAR 0 4
24726: PPUSH
24727: LD_VAR 0 5
24731: PPUSH
24732: CALL 25939 0 5
24736: GO 24859
24738: LD_INT 302
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24746
24744: GO 24783
24746: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24747: LD_VAR 0 6
24751: PPUSH
24752: LD_VAR 0 7
24756: PPUSH
24757: LD_VAR 0 8
24761: PPUSH
24762: LD_VAR 0 9
24766: PPUSH
24767: LD_VAR 0 4
24771: PPUSH
24772: LD_VAR 0 5
24776: PPUSH
24777: CALL 26030 0 6
24781: GO 24859
24783: LD_INT 303
24785: DOUBLE
24786: EQUAL
24787: IFTRUE 24791
24789: GO 24828
24791: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24792: LD_VAR 0 6
24796: PPUSH
24797: LD_VAR 0 7
24801: PPUSH
24802: LD_VAR 0 8
24806: PPUSH
24807: LD_VAR 0 9
24811: PPUSH
24812: LD_VAR 0 4
24816: PPUSH
24817: LD_VAR 0 5
24821: PPUSH
24822: CALL 24864 0 6
24826: GO 24859
24828: LD_INT 304
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24858
24836: POP
// hHackTeleport ( unit , x , y ) ; end ;
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 4
24846: PPUSH
24847: LD_VAR 0 5
24851: PPUSH
24852: CALL 26623 0 3
24856: GO 24859
24858: POP
// end ;
24859: LD_VAR 0 12
24863: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24868: LD_VAR 0 1
24872: PUSH
24873: LD_INT 1
24875: LESS
24876: PUSH
24877: LD_VAR 0 1
24881: PUSH
24882: LD_INT 3
24884: GREATER
24885: OR
24886: PUSH
24887: LD_VAR 0 5
24891: PPUSH
24892: LD_VAR 0 6
24896: PPUSH
24897: CALL_OW 428
24901: OR
24902: IFFALSE 24906
// exit ;
24904: GO 25626
// uc_side := your_side ;
24906: LD_ADDR_OWVAR 20
24910: PUSH
24911: LD_OWVAR 2
24915: ST_TO_ADDR
// uc_nation := nation ;
24916: LD_ADDR_OWVAR 21
24920: PUSH
24921: LD_VAR 0 1
24925: ST_TO_ADDR
// bc_level = 1 ;
24926: LD_ADDR_OWVAR 43
24930: PUSH
24931: LD_INT 1
24933: ST_TO_ADDR
// case btype of 1 :
24934: LD_VAR 0 2
24938: PUSH
24939: LD_INT 1
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24958
24947: POP
// bc_type := b_depot ; 2 :
24948: LD_ADDR_OWVAR 42
24952: PUSH
24953: LD_INT 0
24955: ST_TO_ADDR
24956: GO 25570
24958: LD_INT 2
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24977
24966: POP
// bc_type := b_warehouse ; 3 :
24967: LD_ADDR_OWVAR 42
24971: PUSH
24972: LD_INT 1
24974: ST_TO_ADDR
24975: GO 25570
24977: LD_INT 3
24979: DOUBLE
24980: EQUAL
24981: IFTRUE 24985
24983: GO 24996
24985: POP
// bc_type := b_lab ; 4 .. 9 :
24986: LD_ADDR_OWVAR 42
24990: PUSH
24991: LD_INT 6
24993: ST_TO_ADDR
24994: GO 25570
24996: LD_INT 4
24998: DOUBLE
24999: GREATEREQUAL
25000: IFFALSE 25008
25002: LD_INT 9
25004: DOUBLE
25005: LESSEQUAL
25006: IFTRUE 25010
25008: GO 25062
25010: POP
// begin bc_type := b_lab_half ;
25011: LD_ADDR_OWVAR 42
25015: PUSH
25016: LD_INT 7
25018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25019: LD_ADDR_OWVAR 44
25023: PUSH
25024: LD_INT 10
25026: PUSH
25027: LD_INT 11
25029: PUSH
25030: LD_INT 12
25032: PUSH
25033: LD_INT 15
25035: PUSH
25036: LD_INT 14
25038: PUSH
25039: LD_INT 13
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: LD_VAR 0 2
25054: PUSH
25055: LD_INT 3
25057: MINUS
25058: ARRAY
25059: ST_TO_ADDR
// end ; 10 .. 13 :
25060: GO 25570
25062: LD_INT 10
25064: DOUBLE
25065: GREATEREQUAL
25066: IFFALSE 25074
25068: LD_INT 13
25070: DOUBLE
25071: LESSEQUAL
25072: IFTRUE 25076
25074: GO 25153
25076: POP
// begin bc_type := b_lab_full ;
25077: LD_ADDR_OWVAR 42
25081: PUSH
25082: LD_INT 8
25084: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25085: LD_ADDR_OWVAR 44
25089: PUSH
25090: LD_INT 10
25092: PUSH
25093: LD_INT 12
25095: PUSH
25096: LD_INT 14
25098: PUSH
25099: LD_INT 13
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_VAR 0 2
25112: PUSH
25113: LD_INT 9
25115: MINUS
25116: ARRAY
25117: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25118: LD_ADDR_OWVAR 45
25122: PUSH
25123: LD_INT 11
25125: PUSH
25126: LD_INT 15
25128: PUSH
25129: LD_INT 12
25131: PUSH
25132: LD_INT 15
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: LD_VAR 0 2
25145: PUSH
25146: LD_INT 9
25148: MINUS
25149: ARRAY
25150: ST_TO_ADDR
// end ; 14 :
25151: GO 25570
25153: LD_INT 14
25155: DOUBLE
25156: EQUAL
25157: IFTRUE 25161
25159: GO 25172
25161: POP
// bc_type := b_workshop ; 15 :
25162: LD_ADDR_OWVAR 42
25166: PUSH
25167: LD_INT 2
25169: ST_TO_ADDR
25170: GO 25570
25172: LD_INT 15
25174: DOUBLE
25175: EQUAL
25176: IFTRUE 25180
25178: GO 25191
25180: POP
// bc_type := b_factory ; 16 :
25181: LD_ADDR_OWVAR 42
25185: PUSH
25186: LD_INT 3
25188: ST_TO_ADDR
25189: GO 25570
25191: LD_INT 16
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25210
25199: POP
// bc_type := b_ext_gun ; 17 :
25200: LD_ADDR_OWVAR 42
25204: PUSH
25205: LD_INT 17
25207: ST_TO_ADDR
25208: GO 25570
25210: LD_INT 17
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25246
25218: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25219: LD_ADDR_OWVAR 42
25223: PUSH
25224: LD_INT 19
25226: PUSH
25227: LD_INT 23
25229: PUSH
25230: LD_INT 19
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: LIST
25237: PUSH
25238: LD_VAR 0 1
25242: ARRAY
25243: ST_TO_ADDR
25244: GO 25570
25246: LD_INT 18
25248: DOUBLE
25249: EQUAL
25250: IFTRUE 25254
25252: GO 25265
25254: POP
// bc_type := b_ext_radar ; 19 :
25255: LD_ADDR_OWVAR 42
25259: PUSH
25260: LD_INT 20
25262: ST_TO_ADDR
25263: GO 25570
25265: LD_INT 19
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25284
25273: POP
// bc_type := b_ext_radio ; 20 :
25274: LD_ADDR_OWVAR 42
25278: PUSH
25279: LD_INT 22
25281: ST_TO_ADDR
25282: GO 25570
25284: LD_INT 20
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25303
25292: POP
// bc_type := b_ext_siberium ; 21 :
25293: LD_ADDR_OWVAR 42
25297: PUSH
25298: LD_INT 21
25300: ST_TO_ADDR
25301: GO 25570
25303: LD_INT 21
25305: DOUBLE
25306: EQUAL
25307: IFTRUE 25311
25309: GO 25322
25311: POP
// bc_type := b_ext_computer ; 22 :
25312: LD_ADDR_OWVAR 42
25316: PUSH
25317: LD_INT 24
25319: ST_TO_ADDR
25320: GO 25570
25322: LD_INT 22
25324: DOUBLE
25325: EQUAL
25326: IFTRUE 25330
25328: GO 25341
25330: POP
// bc_type := b_ext_track ; 23 :
25331: LD_ADDR_OWVAR 42
25335: PUSH
25336: LD_INT 16
25338: ST_TO_ADDR
25339: GO 25570
25341: LD_INT 23
25343: DOUBLE
25344: EQUAL
25345: IFTRUE 25349
25347: GO 25360
25349: POP
// bc_type := b_ext_laser ; 24 :
25350: LD_ADDR_OWVAR 42
25354: PUSH
25355: LD_INT 25
25357: ST_TO_ADDR
25358: GO 25570
25360: LD_INT 24
25362: DOUBLE
25363: EQUAL
25364: IFTRUE 25368
25366: GO 25379
25368: POP
// bc_type := b_control_tower ; 25 :
25369: LD_ADDR_OWVAR 42
25373: PUSH
25374: LD_INT 36
25376: ST_TO_ADDR
25377: GO 25570
25379: LD_INT 25
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25398
25387: POP
// bc_type := b_breastwork ; 26 :
25388: LD_ADDR_OWVAR 42
25392: PUSH
25393: LD_INT 31
25395: ST_TO_ADDR
25396: GO 25570
25398: LD_INT 26
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25417
25406: POP
// bc_type := b_bunker ; 27 :
25407: LD_ADDR_OWVAR 42
25411: PUSH
25412: LD_INT 32
25414: ST_TO_ADDR
25415: GO 25570
25417: LD_INT 27
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25436
25425: POP
// bc_type := b_turret ; 28 :
25426: LD_ADDR_OWVAR 42
25430: PUSH
25431: LD_INT 33
25433: ST_TO_ADDR
25434: GO 25570
25436: LD_INT 28
25438: DOUBLE
25439: EQUAL
25440: IFTRUE 25444
25442: GO 25455
25444: POP
// bc_type := b_armoury ; 29 :
25445: LD_ADDR_OWVAR 42
25449: PUSH
25450: LD_INT 4
25452: ST_TO_ADDR
25453: GO 25570
25455: LD_INT 29
25457: DOUBLE
25458: EQUAL
25459: IFTRUE 25463
25461: GO 25474
25463: POP
// bc_type := b_barracks ; 30 :
25464: LD_ADDR_OWVAR 42
25468: PUSH
25469: LD_INT 5
25471: ST_TO_ADDR
25472: GO 25570
25474: LD_INT 30
25476: DOUBLE
25477: EQUAL
25478: IFTRUE 25482
25480: GO 25493
25482: POP
// bc_type := b_solar_power ; 31 :
25483: LD_ADDR_OWVAR 42
25487: PUSH
25488: LD_INT 27
25490: ST_TO_ADDR
25491: GO 25570
25493: LD_INT 31
25495: DOUBLE
25496: EQUAL
25497: IFTRUE 25501
25499: GO 25512
25501: POP
// bc_type := b_oil_power ; 32 :
25502: LD_ADDR_OWVAR 42
25506: PUSH
25507: LD_INT 26
25509: ST_TO_ADDR
25510: GO 25570
25512: LD_INT 32
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25531
25520: POP
// bc_type := b_siberite_power ; 33 :
25521: LD_ADDR_OWVAR 42
25525: PUSH
25526: LD_INT 28
25528: ST_TO_ADDR
25529: GO 25570
25531: LD_INT 33
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25550
25539: POP
// bc_type := b_oil_mine ; 34 :
25540: LD_ADDR_OWVAR 42
25544: PUSH
25545: LD_INT 29
25547: ST_TO_ADDR
25548: GO 25570
25550: LD_INT 34
25552: DOUBLE
25553: EQUAL
25554: IFTRUE 25558
25556: GO 25569
25558: POP
// bc_type := b_siberite_mine ; end ;
25559: LD_ADDR_OWVAR 42
25563: PUSH
25564: LD_INT 30
25566: ST_TO_ADDR
25567: GO 25570
25569: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25570: LD_ADDR_VAR 0 8
25574: PUSH
25575: LD_VAR 0 5
25579: PPUSH
25580: LD_VAR 0 6
25584: PPUSH
25585: LD_VAR 0 3
25589: PPUSH
25590: CALL_OW 47
25594: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25595: LD_OWVAR 42
25599: PUSH
25600: LD_INT 32
25602: PUSH
25603: LD_INT 33
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: IN
25610: IFFALSE 25626
// PlaceWeaponTurret ( b , weapon ) ;
25612: LD_VAR 0 8
25616: PPUSH
25617: LD_VAR 0 4
25621: PPUSH
25622: CALL_OW 431
// end ;
25626: LD_VAR 0 7
25630: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25631: LD_INT 0
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25637: LD_ADDR_VAR 0 4
25641: PUSH
25642: LD_INT 22
25644: PUSH
25645: LD_OWVAR 2
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 2
25656: PUSH
25657: LD_INT 30
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 30
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: ST_TO_ADDR
// if not tmp then
25691: LD_VAR 0 4
25695: NOT
25696: IFFALSE 25700
// exit ;
25698: GO 25759
// for i in tmp do
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_VAR 0 4
25709: PUSH
25710: FOR_IN
25711: IFFALSE 25757
// for j = 1 to 3 do
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: DOUBLE
25719: LD_INT 1
25721: DEC
25722: ST_TO_ADDR
25723: LD_INT 3
25725: PUSH
25726: FOR_TO
25727: IFFALSE 25753
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 274
25738: PPUSH
25739: LD_VAR 0 3
25743: PPUSH
25744: LD_INT 99999
25746: PPUSH
25747: CALL_OW 277
25751: GO 25726
25753: POP
25754: POP
25755: GO 25710
25757: POP
25758: POP
// end ;
25759: LD_VAR 0 1
25763: RET
// export function hHackSetLevel10 ; var i , j ; begin
25764: LD_INT 0
25766: PPUSH
25767: PPUSH
25768: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25769: LD_ADDR_VAR 0 2
25773: PUSH
25774: LD_INT 21
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PPUSH
25784: CALL_OW 69
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25842
// if IsSelected ( i ) then
25792: LD_VAR 0 2
25796: PPUSH
25797: CALL_OW 306
25801: IFFALSE 25840
// begin for j := 1 to 4 do
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: DOUBLE
25809: LD_INT 1
25811: DEC
25812: ST_TO_ADDR
25813: LD_INT 4
25815: PUSH
25816: FOR_TO
25817: IFFALSE 25838
// SetSkill ( i , j , 10 ) ;
25819: LD_VAR 0 2
25823: PPUSH
25824: LD_VAR 0 3
25828: PPUSH
25829: LD_INT 10
25831: PPUSH
25832: CALL_OW 237
25836: GO 25816
25838: POP
25839: POP
// end ;
25840: GO 25789
25842: POP
25843: POP
// end ;
25844: LD_VAR 0 1
25848: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25849: LD_INT 0
25851: PPUSH
25852: PPUSH
25853: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25854: LD_ADDR_VAR 0 2
25858: PUSH
25859: LD_INT 22
25861: PUSH
25862: LD_OWVAR 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 21
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PPUSH
25885: CALL_OW 69
25889: PUSH
25890: FOR_IN
25891: IFFALSE 25932
// begin for j := 1 to 4 do
25893: LD_ADDR_VAR 0 3
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_INT 4
25905: PUSH
25906: FOR_TO
25907: IFFALSE 25928
// SetSkill ( i , j , 10 ) ;
25909: LD_VAR 0 2
25913: PPUSH
25914: LD_VAR 0 3
25918: PPUSH
25919: LD_INT 10
25921: PPUSH
25922: CALL_OW 237
25926: GO 25906
25928: POP
25929: POP
// end ;
25930: GO 25890
25932: POP
25933: POP
// end ;
25934: LD_VAR 0 1
25938: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25939: LD_INT 0
25941: PPUSH
// uc_side := your_side ;
25942: LD_ADDR_OWVAR 20
25946: PUSH
25947: LD_OWVAR 2
25951: ST_TO_ADDR
// uc_nation := nation ;
25952: LD_ADDR_OWVAR 21
25956: PUSH
25957: LD_VAR 0 1
25961: ST_TO_ADDR
// InitHc ;
25962: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25966: LD_INT 0
25968: PPUSH
25969: LD_VAR 0 2
25973: PPUSH
25974: LD_VAR 0 3
25978: PPUSH
25979: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25983: LD_VAR 0 4
25987: PPUSH
25988: LD_VAR 0 5
25992: PPUSH
25993: CALL_OW 428
25997: PUSH
25998: LD_INT 0
26000: EQUAL
26001: IFFALSE 26025
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26003: CALL_OW 44
26007: PPUSH
26008: LD_VAR 0 4
26012: PPUSH
26013: LD_VAR 0 5
26017: PPUSH
26018: LD_INT 1
26020: PPUSH
26021: CALL_OW 48
// end ;
26025: LD_VAR 0 6
26029: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// uc_side := your_side ;
26034: LD_ADDR_OWVAR 20
26038: PUSH
26039: LD_OWVAR 2
26043: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26044: LD_VAR 0 1
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: IN
26071: IFFALSE 26083
// uc_nation := nation_american else
26073: LD_ADDR_OWVAR 21
26077: PUSH
26078: LD_INT 1
26080: ST_TO_ADDR
26081: GO 26126
// if chassis in [ 11 , 12 , 13 , 14 ] then
26083: LD_VAR 0 1
26087: PUSH
26088: LD_INT 11
26090: PUSH
26091: LD_INT 12
26093: PUSH
26094: LD_INT 13
26096: PUSH
26097: LD_INT 14
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: IN
26106: IFFALSE 26118
// uc_nation := nation_arabian else
26108: LD_ADDR_OWVAR 21
26112: PUSH
26113: LD_INT 2
26115: ST_TO_ADDR
26116: GO 26126
// uc_nation := nation_russian ;
26118: LD_ADDR_OWVAR 21
26122: PUSH
26123: LD_INT 3
26125: ST_TO_ADDR
// vc_chassis := chassis ;
26126: LD_ADDR_OWVAR 37
26130: PUSH
26131: LD_VAR 0 1
26135: ST_TO_ADDR
// vc_engine := engine ;
26136: LD_ADDR_OWVAR 39
26140: PUSH
26141: LD_VAR 0 2
26145: ST_TO_ADDR
// vc_control := control ;
26146: LD_ADDR_OWVAR 38
26150: PUSH
26151: LD_VAR 0 3
26155: ST_TO_ADDR
// vc_weapon := weapon ;
26156: LD_ADDR_OWVAR 40
26160: PUSH
26161: LD_VAR 0 4
26165: ST_TO_ADDR
// un := CreateVehicle ;
26166: LD_ADDR_VAR 0 8
26170: PUSH
26171: CALL_OW 45
26175: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26176: LD_VAR 0 8
26180: PPUSH
26181: LD_INT 0
26183: PPUSH
26184: LD_INT 5
26186: PPUSH
26187: CALL_OW 12
26191: PPUSH
26192: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26196: LD_VAR 0 8
26200: PPUSH
26201: LD_VAR 0 5
26205: PPUSH
26206: LD_VAR 0 6
26210: PPUSH
26211: LD_INT 1
26213: PPUSH
26214: CALL_OW 48
// end ;
26218: LD_VAR 0 7
26222: RET
// export hInvincible ; every 1 do
26223: GO 26225
26225: DISABLE
// hInvincible := [ ] ;
26226: LD_ADDR_EXP 108
26230: PUSH
26231: EMPTY
26232: ST_TO_ADDR
26233: END
// every 10 do var i ;
26234: GO 26236
26236: DISABLE
26237: LD_INT 0
26239: PPUSH
// begin enable ;
26240: ENABLE
// if not hInvincible then
26241: LD_EXP 108
26245: NOT
26246: IFFALSE 26250
// exit ;
26248: GO 26294
// for i in hInvincible do
26250: LD_ADDR_VAR 0 1
26254: PUSH
26255: LD_EXP 108
26259: PUSH
26260: FOR_IN
26261: IFFALSE 26292
// if GetLives ( i ) < 1000 then
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 256
26272: PUSH
26273: LD_INT 1000
26275: LESS
26276: IFFALSE 26290
// SetLives ( i , 1000 ) ;
26278: LD_VAR 0 1
26282: PPUSH
26283: LD_INT 1000
26285: PPUSH
26286: CALL_OW 234
26290: GO 26260
26292: POP
26293: POP
// end ;
26294: PPOPN 1
26296: END
// export function hHackInvincible ; var i ; begin
26297: LD_INT 0
26299: PPUSH
26300: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26301: LD_ADDR_VAR 0 2
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 21
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 21
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: PPUSH
26334: CALL_OW 69
26338: PUSH
26339: FOR_IN
26340: IFFALSE 26401
// if IsSelected ( i ) then
26342: LD_VAR 0 2
26346: PPUSH
26347: CALL_OW 306
26351: IFFALSE 26399
// begin if i in hInvincible then
26353: LD_VAR 0 2
26357: PUSH
26358: LD_EXP 108
26362: IN
26363: IFFALSE 26383
// hInvincible := hInvincible diff i else
26365: LD_ADDR_EXP 108
26369: PUSH
26370: LD_EXP 108
26374: PUSH
26375: LD_VAR 0 2
26379: DIFF
26380: ST_TO_ADDR
26381: GO 26399
// hInvincible := hInvincible union i ;
26383: LD_ADDR_EXP 108
26387: PUSH
26388: LD_EXP 108
26392: PUSH
26393: LD_VAR 0 2
26397: UNION
26398: ST_TO_ADDR
// end ;
26399: GO 26339
26401: POP
26402: POP
// end ;
26403: LD_VAR 0 1
26407: RET
// export function hHackInvisible ; var i , j ; begin
26408: LD_INT 0
26410: PPUSH
26411: PPUSH
26412: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26413: LD_ADDR_VAR 0 2
26417: PUSH
26418: LD_INT 21
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PPUSH
26428: CALL_OW 69
26432: PUSH
26433: FOR_IN
26434: IFFALSE 26458
// if IsSelected ( i ) then
26436: LD_VAR 0 2
26440: PPUSH
26441: CALL_OW 306
26445: IFFALSE 26456
// ComForceInvisible ( i ) ;
26447: LD_VAR 0 2
26451: PPUSH
26452: CALL_OW 496
26456: GO 26433
26458: POP
26459: POP
// end ;
26460: LD_VAR 0 1
26464: RET
// export function hHackChangeYourSide ; begin
26465: LD_INT 0
26467: PPUSH
// if your_side = 8 then
26468: LD_OWVAR 2
26472: PUSH
26473: LD_INT 8
26475: EQUAL
26476: IFFALSE 26488
// your_side := 0 else
26478: LD_ADDR_OWVAR 2
26482: PUSH
26483: LD_INT 0
26485: ST_TO_ADDR
26486: GO 26502
// your_side := your_side + 1 ;
26488: LD_ADDR_OWVAR 2
26492: PUSH
26493: LD_OWVAR 2
26497: PUSH
26498: LD_INT 1
26500: PLUS
26501: ST_TO_ADDR
// end ;
26502: LD_VAR 0 1
26506: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
26511: PPUSH
// for i in all_units do
26512: LD_ADDR_VAR 0 2
26516: PUSH
26517: LD_OWVAR 3
26521: PUSH
26522: FOR_IN
26523: IFFALSE 26601
// if IsSelected ( i ) then
26525: LD_VAR 0 2
26529: PPUSH
26530: CALL_OW 306
26534: IFFALSE 26599
// begin j := GetSide ( i ) ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_VAR 0 2
26545: PPUSH
26546: CALL_OW 255
26550: ST_TO_ADDR
// if j = 8 then
26551: LD_VAR 0 3
26555: PUSH
26556: LD_INT 8
26558: EQUAL
26559: IFFALSE 26571
// j := 0 else
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_INT 0
26568: ST_TO_ADDR
26569: GO 26585
// j := j + 1 ;
26571: LD_ADDR_VAR 0 3
26575: PUSH
26576: LD_VAR 0 3
26580: PUSH
26581: LD_INT 1
26583: PLUS
26584: ST_TO_ADDR
// SetSide ( i , j ) ;
26585: LD_VAR 0 2
26589: PPUSH
26590: LD_VAR 0 3
26594: PPUSH
26595: CALL_OW 235
// end ;
26599: GO 26522
26601: POP
26602: POP
// end ;
26603: LD_VAR 0 1
26607: RET
// export function hHackFog ; begin
26608: LD_INT 0
26610: PPUSH
// FogOff ( true ) ;
26611: LD_INT 1
26613: PPUSH
26614: CALL_OW 344
// end ;
26618: LD_VAR 0 1
26622: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26623: LD_INT 0
26625: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26626: LD_VAR 0 1
26630: PPUSH
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 3
26640: PPUSH
26641: LD_INT 1
26643: PPUSH
26644: LD_INT 1
26646: PPUSH
26647: CALL_OW 483
// CenterOnXY ( x , y ) ;
26651: LD_VAR 0 2
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: CALL_OW 84
// end ; end_of_file
26665: LD_VAR 0 4
26669: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL_OW 264
26685: PUSH
26686: LD_EXP 36
26690: EQUAL
26691: IFFALSE 26763
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26693: LD_INT 68
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 255
26705: PPUSH
26706: CALL_OW 321
26710: PUSH
26711: LD_INT 2
26713: EQUAL
26714: IFFALSE 26726
// eff := 70 else
26716: LD_ADDR_VAR 0 4
26720: PUSH
26721: LD_INT 70
26723: ST_TO_ADDR
26724: GO 26734
// eff := 30 ;
26726: LD_ADDR_VAR 0 4
26730: PUSH
26731: LD_INT 30
26733: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 250
26743: PPUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: CALL_OW 251
26753: PPUSH
26754: LD_VAR 0 4
26758: PPUSH
26759: CALL_OW 495
// end ; end ;
26763: LD_VAR 0 2
26767: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26768: LD_INT 0
26770: PPUSH
// end ;
26771: LD_VAR 0 4
26775: RET
// export function SOS_Command ( cmd ) ; begin
26776: LD_INT 0
26778: PPUSH
// end ;
26779: LD_VAR 0 2
26783: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26784: LD_INT 0
26786: PPUSH
// end ;
26787: LD_VAR 0 6
26791: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26792: LD_INT 0
26794: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26795: LD_VAR 0 1
26799: PUSH
26800: LD_INT 250
26802: EQUAL
26803: PUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: CALL_OW 264
26813: PUSH
26814: LD_EXP 39
26818: EQUAL
26819: AND
26820: IFFALSE 26841
// MinerPlaceMine ( unit , x , y ) ;
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 4
26831: PPUSH
26832: LD_VAR 0 5
26836: PPUSH
26837: CALL 29190 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26841: LD_VAR 0 1
26845: PUSH
26846: LD_INT 251
26848: EQUAL
26849: PUSH
26850: LD_VAR 0 2
26854: PPUSH
26855: CALL_OW 264
26859: PUSH
26860: LD_EXP 39
26864: EQUAL
26865: AND
26866: IFFALSE 26887
// MinerDetonateMine ( unit , x , y ) ;
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_VAR 0 4
26877: PPUSH
26878: LD_VAR 0 5
26882: PPUSH
26883: CALL 29467 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26887: LD_VAR 0 1
26891: PUSH
26892: LD_INT 252
26894: EQUAL
26895: PUSH
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 264
26905: PUSH
26906: LD_EXP 39
26910: EQUAL
26911: AND
26912: IFFALSE 26933
// MinerCreateMinefield ( unit , x , y ) ;
26914: LD_VAR 0 2
26918: PPUSH
26919: LD_VAR 0 4
26923: PPUSH
26924: LD_VAR 0 5
26928: PPUSH
26929: CALL 29884 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26933: LD_VAR 0 1
26937: PUSH
26938: LD_INT 253
26940: EQUAL
26941: PUSH
26942: LD_VAR 0 2
26946: PPUSH
26947: CALL_OW 257
26951: PUSH
26952: LD_INT 5
26954: EQUAL
26955: AND
26956: IFFALSE 26977
// ComBinocular ( unit , x , y ) ;
26958: LD_VAR 0 2
26962: PPUSH
26963: LD_VAR 0 4
26967: PPUSH
26968: LD_VAR 0 5
26972: PPUSH
26973: CALL 30255 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26977: LD_VAR 0 1
26981: PUSH
26982: LD_INT 254
26984: EQUAL
26985: PUSH
26986: LD_VAR 0 2
26990: PPUSH
26991: CALL_OW 264
26995: PUSH
26996: LD_EXP 34
27000: EQUAL
27001: AND
27002: PUSH
27003: LD_VAR 0 3
27007: PPUSH
27008: CALL_OW 263
27012: PUSH
27013: LD_INT 3
27015: EQUAL
27016: AND
27017: IFFALSE 27033
// HackDestroyVehicle ( unit , selectedUnit ) ;
27019: LD_VAR 0 2
27023: PPUSH
27024: LD_VAR 0 3
27028: PPUSH
27029: CALL 28550 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 255
27040: EQUAL
27041: PUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: CALL_OW 264
27051: PUSH
27052: LD_INT 14
27054: PUSH
27055: LD_INT 53
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: IN
27062: AND
27063: PUSH
27064: LD_VAR 0 4
27068: PPUSH
27069: LD_VAR 0 5
27073: PPUSH
27074: CALL_OW 488
27078: AND
27079: IFFALSE 27103
// CutTreeXYR ( unit , x , y , 12 ) ;
27081: LD_VAR 0 2
27085: PPUSH
27086: LD_VAR 0 4
27090: PPUSH
27091: LD_VAR 0 5
27095: PPUSH
27096: LD_INT 12
27098: PPUSH
27099: CALL 27116 0 4
// end ;
27103: LD_VAR 0 6
27107: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
27108: LD_INT 0
27110: PPUSH
// end ;
27111: LD_VAR 0 4
27115: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
27120: PPUSH
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
27126: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27127: LD_VAR 0 1
27131: NOT
27132: PUSH
27133: LD_VAR 0 2
27137: PPUSH
27138: LD_VAR 0 3
27142: PPUSH
27143: CALL_OW 488
27147: NOT
27148: OR
27149: PUSH
27150: LD_VAR 0 4
27154: NOT
27155: OR
27156: IFFALSE 27160
// exit ;
27158: GO 27500
// list := [ ] ;
27160: LD_ADDR_VAR 0 13
27164: PUSH
27165: EMPTY
27166: ST_TO_ADDR
// if x - r < 0 then
27167: LD_VAR 0 2
27171: PUSH
27172: LD_VAR 0 4
27176: MINUS
27177: PUSH
27178: LD_INT 0
27180: LESS
27181: IFFALSE 27193
// min_x := 0 else
27183: LD_ADDR_VAR 0 7
27187: PUSH
27188: LD_INT 0
27190: ST_TO_ADDR
27191: GO 27209
// min_x := x - r ;
27193: LD_ADDR_VAR 0 7
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: LD_VAR 0 4
27207: MINUS
27208: ST_TO_ADDR
// if y - r < 0 then
27209: LD_VAR 0 3
27213: PUSH
27214: LD_VAR 0 4
27218: MINUS
27219: PUSH
27220: LD_INT 0
27222: LESS
27223: IFFALSE 27235
// min_y := 0 else
27225: LD_ADDR_VAR 0 8
27229: PUSH
27230: LD_INT 0
27232: ST_TO_ADDR
27233: GO 27251
// min_y := y - r ;
27235: LD_ADDR_VAR 0 8
27239: PUSH
27240: LD_VAR 0 3
27244: PUSH
27245: LD_VAR 0 4
27249: MINUS
27250: ST_TO_ADDR
// max_x := x + r ;
27251: LD_ADDR_VAR 0 9
27255: PUSH
27256: LD_VAR 0 2
27260: PUSH
27261: LD_VAR 0 4
27265: PLUS
27266: ST_TO_ADDR
// max_y := y + r ;
27267: LD_ADDR_VAR 0 10
27271: PUSH
27272: LD_VAR 0 3
27276: PUSH
27277: LD_VAR 0 4
27281: PLUS
27282: ST_TO_ADDR
// for _x = min_x to max_x do
27283: LD_ADDR_VAR 0 11
27287: PUSH
27288: DOUBLE
27289: LD_VAR 0 7
27293: DEC
27294: ST_TO_ADDR
27295: LD_VAR 0 9
27299: PUSH
27300: FOR_TO
27301: IFFALSE 27418
// for _y = min_y to max_y do
27303: LD_ADDR_VAR 0 12
27307: PUSH
27308: DOUBLE
27309: LD_VAR 0 8
27313: DEC
27314: ST_TO_ADDR
27315: LD_VAR 0 10
27319: PUSH
27320: FOR_TO
27321: IFFALSE 27414
// begin if not ValidHex ( _x , _y ) then
27323: LD_VAR 0 11
27327: PPUSH
27328: LD_VAR 0 12
27332: PPUSH
27333: CALL_OW 488
27337: NOT
27338: IFFALSE 27342
// continue ;
27340: GO 27320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27342: LD_VAR 0 11
27346: PPUSH
27347: LD_VAR 0 12
27351: PPUSH
27352: CALL_OW 351
27356: PUSH
27357: LD_VAR 0 11
27361: PPUSH
27362: LD_VAR 0 12
27366: PPUSH
27367: CALL_OW 554
27371: AND
27372: IFFALSE 27412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27374: LD_ADDR_VAR 0 13
27378: PUSH
27379: LD_VAR 0 13
27383: PPUSH
27384: LD_VAR 0 13
27388: PUSH
27389: LD_INT 1
27391: PLUS
27392: PPUSH
27393: LD_VAR 0 11
27397: PUSH
27398: LD_VAR 0 12
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL_OW 2
27411: ST_TO_ADDR
// end ;
27412: GO 27320
27414: POP
27415: POP
27416: GO 27300
27418: POP
27419: POP
// if not list then
27420: LD_VAR 0 13
27424: NOT
27425: IFFALSE 27429
// exit ;
27427: GO 27500
// for i in list do
27429: LD_ADDR_VAR 0 6
27433: PUSH
27434: LD_VAR 0 13
27438: PUSH
27439: FOR_IN
27440: IFFALSE 27498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27442: LD_VAR 0 1
27446: PPUSH
27447: LD_STRING M
27449: PUSH
27450: LD_VAR 0 6
27454: PUSH
27455: LD_INT 1
27457: ARRAY
27458: PUSH
27459: LD_VAR 0 6
27463: PUSH
27464: LD_INT 2
27466: ARRAY
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: PPUSH
27492: CALL_OW 447
27496: GO 27439
27498: POP
27499: POP
// end ;
27500: LD_VAR 0 5
27504: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27505: LD_EXP 111
27509: NOT
27510: IFFALSE 27560
27512: GO 27514
27514: DISABLE
// begin initHack := true ;
27515: LD_ADDR_EXP 111
27519: PUSH
27520: LD_INT 1
27522: ST_TO_ADDR
// hackTanks := [ ] ;
27523: LD_ADDR_EXP 112
27527: PUSH
27528: EMPTY
27529: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27530: LD_ADDR_EXP 113
27534: PUSH
27535: EMPTY
27536: ST_TO_ADDR
// hackLimit := 3 ;
27537: LD_ADDR_EXP 114
27541: PUSH
27542: LD_INT 3
27544: ST_TO_ADDR
// hackDist := 12 ;
27545: LD_ADDR_EXP 115
27549: PUSH
27550: LD_INT 12
27552: ST_TO_ADDR
// hackCounter := [ ] ;
27553: LD_ADDR_EXP 116
27557: PUSH
27558: EMPTY
27559: ST_TO_ADDR
// end ;
27560: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27561: LD_EXP 111
27565: PUSH
27566: LD_INT 34
27568: PUSH
27569: LD_EXP 34
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PPUSH
27578: CALL_OW 69
27582: AND
27583: IFFALSE 27838
27585: GO 27587
27587: DISABLE
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
// begin enable ;
27592: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27593: LD_ADDR_VAR 0 1
27597: PUSH
27598: LD_INT 34
27600: PUSH
27601: LD_EXP 34
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: CALL_OW 69
27614: PUSH
27615: FOR_IN
27616: IFFALSE 27836
// begin if not i in hackTanks then
27618: LD_VAR 0 1
27622: PUSH
27623: LD_EXP 112
27627: IN
27628: NOT
27629: IFFALSE 27712
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27631: LD_ADDR_EXP 112
27635: PUSH
27636: LD_EXP 112
27640: PPUSH
27641: LD_EXP 112
27645: PUSH
27646: LD_INT 1
27648: PLUS
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 1
27659: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27660: LD_ADDR_EXP 113
27664: PUSH
27665: LD_EXP 113
27669: PPUSH
27670: LD_EXP 113
27674: PUSH
27675: LD_INT 1
27677: PLUS
27678: PPUSH
27679: EMPTY
27680: PPUSH
27681: CALL_OW 1
27685: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27686: LD_ADDR_EXP 116
27690: PUSH
27691: LD_EXP 116
27695: PPUSH
27696: LD_EXP 116
27700: PUSH
27701: LD_INT 1
27703: PLUS
27704: PPUSH
27705: EMPTY
27706: PPUSH
27707: CALL_OW 1
27711: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 302
27721: NOT
27722: IFFALSE 27735
// begin HackUnlinkAll ( i ) ;
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL 27841 0 1
// continue ;
27733: GO 27615
// end ; HackCheckCapturedStatus ( i ) ;
27735: LD_VAR 0 1
27739: PPUSH
27740: CALL 28284 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27744: LD_ADDR_VAR 0 2
27748: PUSH
27749: LD_INT 81
27751: PUSH
27752: LD_VAR 0 1
27756: PPUSH
27757: CALL_OW 255
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 33
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 91
27778: PUSH
27779: LD_VAR 0 1
27783: PUSH
27784: LD_EXP 115
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 50
27796: PUSH
27797: EMPTY
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: PPUSH
27806: CALL_OW 69
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 2
27815: NOT
27816: IFFALSE 27820
// continue ;
27818: GO 27615
// HackLink ( i , tmp ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: LD_VAR 0 2
27829: PPUSH
27830: CALL 27977 0 2
// end ;
27834: GO 27615
27836: POP
27837: POP
// end ;
27838: PPOPN 2
27840: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27841: LD_INT 0
27843: PPUSH
27844: PPUSH
27845: PPUSH
// if not hack in hackTanks then
27846: LD_VAR 0 1
27850: PUSH
27851: LD_EXP 112
27855: IN
27856: NOT
27857: IFFALSE 27861
// exit ;
27859: GO 27972
// index := GetElementIndex ( hackTanks , hack ) ;
27861: LD_ADDR_VAR 0 4
27865: PUSH
27866: LD_EXP 112
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL 35446 0 2
27880: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27881: LD_EXP 113
27885: PUSH
27886: LD_VAR 0 4
27890: ARRAY
27891: IFFALSE 27972
// begin for i in hackTanksCaptured [ index ] do
27893: LD_ADDR_VAR 0 3
27897: PUSH
27898: LD_EXP 113
27902: PUSH
27903: LD_VAR 0 4
27907: ARRAY
27908: PUSH
27909: FOR_IN
27910: IFFALSE 27936
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27912: LD_VAR 0 3
27916: PUSH
27917: LD_INT 1
27919: ARRAY
27920: PPUSH
27921: LD_VAR 0 3
27925: PUSH
27926: LD_INT 2
27928: ARRAY
27929: PPUSH
27930: CALL_OW 235
27934: GO 27909
27936: POP
27937: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27938: LD_ADDR_EXP 113
27942: PUSH
27943: LD_EXP 113
27947: PPUSH
27948: LD_VAR 0 4
27952: PPUSH
27953: EMPTY
27954: PPUSH
27955: CALL_OW 1
27959: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_INT 0
27967: PPUSH
27968: CALL_OW 505
// end ; end ;
27972: LD_VAR 0 2
27976: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27977: LD_INT 0
27979: PPUSH
27980: PPUSH
27981: PPUSH
// if not hack in hackTanks or not vehicles then
27982: LD_VAR 0 1
27986: PUSH
27987: LD_EXP 112
27991: IN
27992: NOT
27993: PUSH
27994: LD_VAR 0 2
27998: NOT
27999: OR
28000: IFFALSE 28004
// exit ;
28002: GO 28279
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: LD_VAR 0 1
28013: PPUSH
28014: LD_VAR 0 2
28018: PPUSH
28019: LD_INT 1
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: CALL 36096 0 4
28029: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28030: LD_ADDR_VAR 0 5
28034: PUSH
28035: LD_EXP 112
28039: PPUSH
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL 35446 0 2
28049: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28050: LD_EXP 113
28054: PUSH
28055: LD_VAR 0 5
28059: ARRAY
28060: PUSH
28061: LD_EXP 114
28065: LESS
28066: IFFALSE 28255
// begin for i := 1 to vehicles do
28068: LD_ADDR_VAR 0 4
28072: PUSH
28073: DOUBLE
28074: LD_INT 1
28076: DEC
28077: ST_TO_ADDR
28078: LD_VAR 0 2
28082: PUSH
28083: FOR_TO
28084: IFFALSE 28253
// begin if hackTanksCaptured [ index ] = hackLimit then
28086: LD_EXP 113
28090: PUSH
28091: LD_VAR 0 5
28095: ARRAY
28096: PUSH
28097: LD_EXP 114
28101: EQUAL
28102: IFFALSE 28106
// break ;
28104: GO 28253
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28106: LD_ADDR_EXP 116
28110: PUSH
28111: LD_EXP 116
28115: PPUSH
28116: LD_VAR 0 5
28120: PPUSH
28121: LD_EXP 116
28125: PUSH
28126: LD_VAR 0 5
28130: ARRAY
28131: PUSH
28132: LD_INT 1
28134: PLUS
28135: PPUSH
28136: CALL_OW 1
28140: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28141: LD_ADDR_EXP 113
28145: PUSH
28146: LD_EXP 113
28150: PPUSH
28151: LD_VAR 0 5
28155: PUSH
28156: LD_EXP 113
28160: PUSH
28161: LD_VAR 0 5
28165: ARRAY
28166: PUSH
28167: LD_INT 1
28169: PLUS
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: LD_VAR 0 2
28179: PUSH
28180: LD_VAR 0 4
28184: ARRAY
28185: PUSH
28186: LD_VAR 0 2
28190: PUSH
28191: LD_VAR 0 4
28195: ARRAY
28196: PPUSH
28197: CALL_OW 255
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PPUSH
28206: CALL 35661 0 3
28210: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28211: LD_VAR 0 2
28215: PUSH
28216: LD_VAR 0 4
28220: ARRAY
28221: PPUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 255
28231: PPUSH
28232: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28236: LD_VAR 0 2
28240: PUSH
28241: LD_VAR 0 4
28245: ARRAY
28246: PPUSH
28247: CALL_OW 141
// end ;
28251: GO 28083
28253: POP
28254: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28255: LD_VAR 0 1
28259: PPUSH
28260: LD_EXP 113
28264: PUSH
28265: LD_VAR 0 5
28269: ARRAY
28270: PUSH
28271: LD_INT 0
28273: PLUS
28274: PPUSH
28275: CALL_OW 505
// end ;
28279: LD_VAR 0 3
28283: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28284: LD_INT 0
28286: PPUSH
28287: PPUSH
28288: PPUSH
28289: PPUSH
// if not hack in hackTanks then
28290: LD_VAR 0 1
28294: PUSH
28295: LD_EXP 112
28299: IN
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28545
// index := GetElementIndex ( hackTanks , hack ) ;
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_EXP 112
28314: PPUSH
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL 35446 0 2
28324: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: DOUBLE
28331: LD_EXP 113
28335: PUSH
28336: LD_VAR 0 4
28340: ARRAY
28341: INC
28342: ST_TO_ADDR
28343: LD_INT 1
28345: PUSH
28346: FOR_DOWNTO
28347: IFFALSE 28519
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28349: LD_ADDR_VAR 0 5
28353: PUSH
28354: LD_EXP 113
28358: PUSH
28359: LD_VAR 0 4
28363: ARRAY
28364: PUSH
28365: LD_VAR 0 3
28369: ARRAY
28370: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28371: LD_VAR 0 5
28375: PUSH
28376: LD_INT 1
28378: ARRAY
28379: PPUSH
28380: CALL_OW 302
28384: NOT
28385: PUSH
28386: LD_VAR 0 5
28390: PUSH
28391: LD_INT 1
28393: ARRAY
28394: PPUSH
28395: CALL_OW 255
28399: PUSH
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL_OW 255
28409: NONEQUAL
28410: OR
28411: IFFALSE 28517
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28413: LD_VAR 0 5
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PPUSH
28422: CALL_OW 305
28426: PUSH
28427: LD_VAR 0 5
28431: PUSH
28432: LD_INT 1
28434: ARRAY
28435: PPUSH
28436: CALL_OW 255
28440: PUSH
28441: LD_VAR 0 1
28445: PPUSH
28446: CALL_OW 255
28450: EQUAL
28451: AND
28452: IFFALSE 28476
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28454: LD_VAR 0 5
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: PPUSH
28463: LD_VAR 0 5
28467: PUSH
28468: LD_INT 2
28470: ARRAY
28471: PPUSH
28472: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28476: LD_ADDR_EXP 113
28480: PUSH
28481: LD_EXP 113
28485: PPUSH
28486: LD_VAR 0 4
28490: PPUSH
28491: LD_EXP 113
28495: PUSH
28496: LD_VAR 0 4
28500: ARRAY
28501: PPUSH
28502: LD_VAR 0 3
28506: PPUSH
28507: CALL_OW 3
28511: PPUSH
28512: CALL_OW 1
28516: ST_TO_ADDR
// end ; end ;
28517: GO 28346
28519: POP
28520: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28521: LD_VAR 0 1
28525: PPUSH
28526: LD_EXP 113
28530: PUSH
28531: LD_VAR 0 4
28535: ARRAY
28536: PUSH
28537: LD_INT 0
28539: PLUS
28540: PPUSH
28541: CALL_OW 505
// end ;
28545: LD_VAR 0 2
28549: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28550: LD_INT 0
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
// if not hack in hackTanks then
28556: LD_VAR 0 1
28560: PUSH
28561: LD_EXP 112
28565: IN
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28656
// index := GetElementIndex ( hackTanks , hack ) ;
28571: LD_ADDR_VAR 0 5
28575: PUSH
28576: LD_EXP 112
28580: PPUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL 35446 0 2
28590: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28591: LD_ADDR_VAR 0 4
28595: PUSH
28596: DOUBLE
28597: LD_INT 1
28599: DEC
28600: ST_TO_ADDR
28601: LD_EXP 113
28605: PUSH
28606: LD_VAR 0 5
28610: ARRAY
28611: PUSH
28612: FOR_TO
28613: IFFALSE 28654
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28615: LD_EXP 113
28619: PUSH
28620: LD_VAR 0 5
28624: ARRAY
28625: PUSH
28626: LD_VAR 0 4
28630: ARRAY
28631: PUSH
28632: LD_INT 1
28634: ARRAY
28635: PUSH
28636: LD_VAR 0 2
28640: EQUAL
28641: IFFALSE 28652
// KillUnit ( vehicle ) ;
28643: LD_VAR 0 2
28647: PPUSH
28648: CALL_OW 66
28652: GO 28612
28654: POP
28655: POP
// end ;
28656: LD_VAR 0 3
28660: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28661: LD_EXP 117
28665: NOT
28666: IFFALSE 28701
28668: GO 28670
28670: DISABLE
// begin initMiner := true ;
28671: LD_ADDR_EXP 117
28675: PUSH
28676: LD_INT 1
28678: ST_TO_ADDR
// minersList := [ ] ;
28679: LD_ADDR_EXP 118
28683: PUSH
28684: EMPTY
28685: ST_TO_ADDR
// minerMinesList := [ ] ;
28686: LD_ADDR_EXP 119
28690: PUSH
28691: EMPTY
28692: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28693: LD_ADDR_EXP 120
28697: PUSH
28698: LD_INT 5
28700: ST_TO_ADDR
// end ;
28701: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28702: LD_EXP 117
28706: PUSH
28707: LD_INT 34
28709: PUSH
28710: LD_EXP 39
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: CALL_OW 69
28723: AND
28724: IFFALSE 29187
28726: GO 28728
28728: DISABLE
28729: LD_INT 0
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
// begin enable ;
28735: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28736: LD_ADDR_VAR 0 1
28740: PUSH
28741: LD_INT 34
28743: PUSH
28744: LD_EXP 39
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PPUSH
28753: CALL_OW 69
28757: PUSH
28758: FOR_IN
28759: IFFALSE 28831
// begin if not i in minersList then
28761: LD_VAR 0 1
28765: PUSH
28766: LD_EXP 118
28770: IN
28771: NOT
28772: IFFALSE 28829
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28774: LD_ADDR_EXP 118
28778: PUSH
28779: LD_EXP 118
28783: PPUSH
28784: LD_EXP 118
28788: PUSH
28789: LD_INT 1
28791: PLUS
28792: PPUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 1
28802: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28803: LD_ADDR_EXP 119
28807: PUSH
28808: LD_EXP 119
28812: PPUSH
28813: LD_EXP 119
28817: PUSH
28818: LD_INT 1
28820: PLUS
28821: PPUSH
28822: EMPTY
28823: PPUSH
28824: CALL_OW 1
28828: ST_TO_ADDR
// end end ;
28829: GO 28758
28831: POP
28832: POP
// for i := minerMinesList downto 1 do
28833: LD_ADDR_VAR 0 1
28837: PUSH
28838: DOUBLE
28839: LD_EXP 119
28843: INC
28844: ST_TO_ADDR
28845: LD_INT 1
28847: PUSH
28848: FOR_DOWNTO
28849: IFFALSE 29185
// begin if IsLive ( minersList [ i ] ) then
28851: LD_EXP 118
28855: PUSH
28856: LD_VAR 0 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 300
28866: IFFALSE 28894
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28868: LD_EXP 118
28872: PUSH
28873: LD_VAR 0 1
28877: ARRAY
28878: PPUSH
28879: LD_EXP 119
28883: PUSH
28884: LD_VAR 0 1
28888: ARRAY
28889: PPUSH
28890: CALL_OW 505
// if not minerMinesList [ i ] then
28894: LD_EXP 119
28898: PUSH
28899: LD_VAR 0 1
28903: ARRAY
28904: NOT
28905: IFFALSE 28909
// continue ;
28907: GO 28848
// for j := minerMinesList [ i ] downto 1 do
28909: LD_ADDR_VAR 0 2
28913: PUSH
28914: DOUBLE
28915: LD_EXP 119
28919: PUSH
28920: LD_VAR 0 1
28924: ARRAY
28925: INC
28926: ST_TO_ADDR
28927: LD_INT 1
28929: PUSH
28930: FOR_DOWNTO
28931: IFFALSE 29181
// begin side := GetSide ( minersList [ i ] ) ;
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_EXP 118
28942: PUSH
28943: LD_VAR 0 1
28947: ARRAY
28948: PPUSH
28949: CALL_OW 255
28953: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28954: LD_ADDR_VAR 0 4
28958: PUSH
28959: LD_EXP 119
28963: PUSH
28964: LD_VAR 0 1
28968: ARRAY
28969: PUSH
28970: LD_VAR 0 2
28974: ARRAY
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: LD_EXP 119
28984: PUSH
28985: LD_VAR 0 1
28989: ARRAY
28990: PUSH
28991: LD_VAR 0 2
28995: ARRAY
28996: PUSH
28997: LD_INT 2
28999: ARRAY
29000: PPUSH
29001: CALL_OW 428
29005: ST_TO_ADDR
// if not tmp then
29006: LD_VAR 0 4
29010: NOT
29011: IFFALSE 29015
// continue ;
29013: GO 28930
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29015: LD_VAR 0 4
29019: PUSH
29020: LD_INT 81
29022: PUSH
29023: LD_VAR 0 3
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: IN
29037: PUSH
29038: LD_EXP 119
29042: PUSH
29043: LD_VAR 0 1
29047: ARRAY
29048: PUSH
29049: LD_VAR 0 2
29053: ARRAY
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: LD_EXP 119
29063: PUSH
29064: LD_VAR 0 1
29068: ARRAY
29069: PUSH
29070: LD_VAR 0 2
29074: ARRAY
29075: PUSH
29076: LD_INT 2
29078: ARRAY
29079: PPUSH
29080: CALL_OW 458
29084: AND
29085: IFFALSE 29179
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29087: LD_EXP 119
29091: PUSH
29092: LD_VAR 0 1
29096: ARRAY
29097: PUSH
29098: LD_VAR 0 2
29102: ARRAY
29103: PUSH
29104: LD_INT 1
29106: ARRAY
29107: PPUSH
29108: LD_EXP 119
29112: PUSH
29113: LD_VAR 0 1
29117: ARRAY
29118: PUSH
29119: LD_VAR 0 2
29123: ARRAY
29124: PUSH
29125: LD_INT 2
29127: ARRAY
29128: PPUSH
29129: LD_VAR 0 3
29133: PPUSH
29134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29138: LD_ADDR_EXP 119
29142: PUSH
29143: LD_EXP 119
29147: PPUSH
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_EXP 119
29157: PUSH
29158: LD_VAR 0 1
29162: ARRAY
29163: PPUSH
29164: LD_VAR 0 2
29168: PPUSH
29169: CALL_OW 3
29173: PPUSH
29174: CALL_OW 1
29178: ST_TO_ADDR
// end ; end ;
29179: GO 28930
29181: POP
29182: POP
// end ;
29183: GO 28848
29185: POP
29186: POP
// end ;
29187: PPOPN 4
29189: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29190: LD_INT 0
29192: PPUSH
29193: PPUSH
// result := false ;
29194: LD_ADDR_VAR 0 4
29198: PUSH
29199: LD_INT 0
29201: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 264
29211: PUSH
29212: LD_EXP 39
29216: EQUAL
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29462
// index := GetElementIndex ( minersList , unit ) ;
29222: LD_ADDR_VAR 0 5
29226: PUSH
29227: LD_EXP 118
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL 35446 0 2
29241: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29242: LD_EXP 119
29246: PUSH
29247: LD_VAR 0 5
29251: ARRAY
29252: PUSH
29253: LD_EXP 120
29257: GREATEREQUAL
29258: IFFALSE 29262
// exit ;
29260: GO 29462
// ComMoveXY ( unit , x , y ) ;
29262: LD_VAR 0 1
29266: PPUSH
29267: LD_VAR 0 2
29271: PPUSH
29272: LD_VAR 0 3
29276: PPUSH
29277: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29281: LD_INT 35
29283: PPUSH
29284: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29288: LD_VAR 0 1
29292: PPUSH
29293: LD_VAR 0 2
29297: PPUSH
29298: LD_VAR 0 3
29302: PPUSH
29303: CALL 66218 0 3
29307: NOT
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 314
29318: AND
29319: IFFALSE 29323
// exit ;
29321: GO 29462
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29323: LD_VAR 0 2
29327: PPUSH
29328: LD_VAR 0 3
29332: PPUSH
29333: CALL_OW 428
29337: PUSH
29338: LD_VAR 0 1
29342: EQUAL
29343: PUSH
29344: LD_VAR 0 1
29348: PPUSH
29349: CALL_OW 314
29353: NOT
29354: AND
29355: IFFALSE 29281
// PlaySoundXY ( x , y , PlantMine ) ;
29357: LD_VAR 0 2
29361: PPUSH
29362: LD_VAR 0 3
29366: PPUSH
29367: LD_STRING PlantMine
29369: PPUSH
29370: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29374: LD_VAR 0 2
29378: PPUSH
29379: LD_VAR 0 3
29383: PPUSH
29384: LD_VAR 0 1
29388: PPUSH
29389: CALL_OW 255
29393: PPUSH
29394: LD_INT 0
29396: PPUSH
29397: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29401: LD_ADDR_EXP 119
29405: PUSH
29406: LD_EXP 119
29410: PPUSH
29411: LD_VAR 0 5
29415: PUSH
29416: LD_EXP 119
29420: PUSH
29421: LD_VAR 0 5
29425: ARRAY
29426: PUSH
29427: LD_INT 1
29429: PLUS
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: LD_VAR 0 2
29439: PUSH
29440: LD_VAR 0 3
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PPUSH
29449: CALL 35661 0 3
29453: ST_TO_ADDR
// result := true ;
29454: LD_ADDR_VAR 0 4
29458: PUSH
29459: LD_INT 1
29461: ST_TO_ADDR
// end ;
29462: LD_VAR 0 4
29466: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29467: LD_INT 0
29469: PPUSH
29470: PPUSH
29471: PPUSH
// if not unit in minersList then
29472: LD_VAR 0 1
29476: PUSH
29477: LD_EXP 118
29481: IN
29482: NOT
29483: IFFALSE 29487
// exit ;
29485: GO 29879
// index := GetElementIndex ( minersList , unit ) ;
29487: LD_ADDR_VAR 0 6
29491: PUSH
29492: LD_EXP 118
29496: PPUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL 35446 0 2
29506: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29507: LD_ADDR_VAR 0 5
29511: PUSH
29512: DOUBLE
29513: LD_EXP 119
29517: PUSH
29518: LD_VAR 0 6
29522: ARRAY
29523: INC
29524: ST_TO_ADDR
29525: LD_INT 1
29527: PUSH
29528: FOR_DOWNTO
29529: IFFALSE 29690
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29531: LD_EXP 119
29535: PUSH
29536: LD_VAR 0 6
29540: ARRAY
29541: PUSH
29542: LD_VAR 0 5
29546: ARRAY
29547: PUSH
29548: LD_INT 1
29550: ARRAY
29551: PUSH
29552: LD_VAR 0 2
29556: EQUAL
29557: PUSH
29558: LD_EXP 119
29562: PUSH
29563: LD_VAR 0 6
29567: ARRAY
29568: PUSH
29569: LD_VAR 0 5
29573: ARRAY
29574: PUSH
29575: LD_INT 2
29577: ARRAY
29578: PUSH
29579: LD_VAR 0 3
29583: EQUAL
29584: AND
29585: IFFALSE 29688
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29587: LD_EXP 119
29591: PUSH
29592: LD_VAR 0 6
29596: ARRAY
29597: PUSH
29598: LD_VAR 0 5
29602: ARRAY
29603: PUSH
29604: LD_INT 1
29606: ARRAY
29607: PPUSH
29608: LD_EXP 119
29612: PUSH
29613: LD_VAR 0 6
29617: ARRAY
29618: PUSH
29619: LD_VAR 0 5
29623: ARRAY
29624: PUSH
29625: LD_INT 2
29627: ARRAY
29628: PPUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: CALL_OW 255
29638: PPUSH
29639: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29643: LD_ADDR_EXP 119
29647: PUSH
29648: LD_EXP 119
29652: PPUSH
29653: LD_VAR 0 6
29657: PPUSH
29658: LD_EXP 119
29662: PUSH
29663: LD_VAR 0 6
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 5
29673: PPUSH
29674: CALL_OW 3
29678: PPUSH
29679: CALL_OW 1
29683: ST_TO_ADDR
// exit ;
29684: POP
29685: POP
29686: GO 29879
// end ; end ;
29688: GO 29528
29690: POP
29691: POP
// for i := minerMinesList [ index ] downto 1 do
29692: LD_ADDR_VAR 0 5
29696: PUSH
29697: DOUBLE
29698: LD_EXP 119
29702: PUSH
29703: LD_VAR 0 6
29707: ARRAY
29708: INC
29709: ST_TO_ADDR
29710: LD_INT 1
29712: PUSH
29713: FOR_DOWNTO
29714: IFFALSE 29877
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29716: LD_EXP 119
29720: PUSH
29721: LD_VAR 0 6
29725: ARRAY
29726: PUSH
29727: LD_VAR 0 5
29731: ARRAY
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PPUSH
29737: LD_EXP 119
29741: PUSH
29742: LD_VAR 0 6
29746: ARRAY
29747: PUSH
29748: LD_VAR 0 5
29752: ARRAY
29753: PUSH
29754: LD_INT 2
29756: ARRAY
29757: PPUSH
29758: LD_VAR 0 2
29762: PPUSH
29763: LD_VAR 0 3
29767: PPUSH
29768: CALL_OW 298
29772: PUSH
29773: LD_INT 6
29775: LESS
29776: IFFALSE 29875
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29778: LD_EXP 119
29782: PUSH
29783: LD_VAR 0 6
29787: ARRAY
29788: PUSH
29789: LD_VAR 0 5
29793: ARRAY
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: LD_EXP 119
29803: PUSH
29804: LD_VAR 0 6
29808: ARRAY
29809: PUSH
29810: LD_VAR 0 5
29814: ARRAY
29815: PUSH
29816: LD_INT 2
29818: ARRAY
29819: PPUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 255
29829: PPUSH
29830: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29834: LD_ADDR_EXP 119
29838: PUSH
29839: LD_EXP 119
29843: PPUSH
29844: LD_VAR 0 6
29848: PPUSH
29849: LD_EXP 119
29853: PUSH
29854: LD_VAR 0 6
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 5
29864: PPUSH
29865: CALL_OW 3
29869: PPUSH
29870: CALL_OW 1
29874: ST_TO_ADDR
// end ; end ;
29875: GO 29713
29877: POP
29878: POP
// end ;
29879: LD_VAR 0 4
29883: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29884: LD_INT 0
29886: PPUSH
29887: PPUSH
29888: PPUSH
29889: PPUSH
29890: PPUSH
29891: PPUSH
29892: PPUSH
29893: PPUSH
29894: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29895: LD_VAR 0 1
29899: PPUSH
29900: CALL_OW 264
29904: PUSH
29905: LD_EXP 39
29909: EQUAL
29910: NOT
29911: PUSH
29912: LD_VAR 0 1
29916: PUSH
29917: LD_EXP 118
29921: IN
29922: NOT
29923: OR
29924: IFFALSE 29928
// exit ;
29926: GO 30250
// index := GetElementIndex ( minersList , unit ) ;
29928: LD_ADDR_VAR 0 6
29932: PUSH
29933: LD_EXP 118
29937: PPUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL 35446 0 2
29947: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29948: LD_ADDR_VAR 0 8
29952: PUSH
29953: LD_EXP 120
29957: PUSH
29958: LD_EXP 119
29962: PUSH
29963: LD_VAR 0 6
29967: ARRAY
29968: MINUS
29969: ST_TO_ADDR
// if not minesFreeAmount then
29970: LD_VAR 0 8
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30250
// tmp := [ ] ;
29979: LD_ADDR_VAR 0 7
29983: PUSH
29984: EMPTY
29985: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29986: LD_ADDR_VAR 0 5
29990: PUSH
29991: DOUBLE
29992: LD_INT 1
29994: DEC
29995: ST_TO_ADDR
29996: LD_VAR 0 8
30000: PUSH
30001: FOR_TO
30002: IFFALSE 30197
// begin _d := rand ( 0 , 5 ) ;
30004: LD_ADDR_VAR 0 11
30008: PUSH
30009: LD_INT 0
30011: PPUSH
30012: LD_INT 5
30014: PPUSH
30015: CALL_OW 12
30019: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30020: LD_ADDR_VAR 0 12
30024: PUSH
30025: LD_INT 2
30027: PPUSH
30028: LD_INT 6
30030: PPUSH
30031: CALL_OW 12
30035: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30036: LD_ADDR_VAR 0 9
30040: PUSH
30041: LD_VAR 0 2
30045: PPUSH
30046: LD_VAR 0 11
30050: PPUSH
30051: LD_VAR 0 12
30055: PPUSH
30056: CALL_OW 272
30060: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30061: LD_ADDR_VAR 0 10
30065: PUSH
30066: LD_VAR 0 3
30070: PPUSH
30071: LD_VAR 0 11
30075: PPUSH
30076: LD_VAR 0 12
30080: PPUSH
30081: CALL_OW 273
30085: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30086: LD_VAR 0 9
30090: PPUSH
30091: LD_VAR 0 10
30095: PPUSH
30096: CALL_OW 488
30100: PUSH
30101: LD_VAR 0 9
30105: PUSH
30106: LD_VAR 0 10
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_VAR 0 7
30119: IN
30120: NOT
30121: AND
30122: PUSH
30123: LD_VAR 0 9
30127: PPUSH
30128: LD_VAR 0 10
30132: PPUSH
30133: CALL_OW 458
30137: NOT
30138: AND
30139: IFFALSE 30181
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30141: LD_ADDR_VAR 0 7
30145: PUSH
30146: LD_VAR 0 7
30150: PPUSH
30151: LD_VAR 0 7
30155: PUSH
30156: LD_INT 1
30158: PLUS
30159: PPUSH
30160: LD_VAR 0 9
30164: PUSH
30165: LD_VAR 0 10
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 1
30178: ST_TO_ADDR
30179: GO 30195
// i := i - 1 ;
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: LD_VAR 0 5
30190: PUSH
30191: LD_INT 1
30193: MINUS
30194: ST_TO_ADDR
// end ;
30195: GO 30001
30197: POP
30198: POP
// for i in tmp do
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 7
30208: PUSH
30209: FOR_IN
30210: IFFALSE 30248
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30212: LD_VAR 0 1
30216: PPUSH
30217: LD_VAR 0 5
30221: PUSH
30222: LD_INT 1
30224: ARRAY
30225: PPUSH
30226: LD_VAR 0 5
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: PPUSH
30235: CALL 29190 0 3
30239: NOT
30240: IFFALSE 30246
// exit ;
30242: POP
30243: POP
30244: GO 30250
30246: GO 30209
30248: POP
30249: POP
// end ;
30250: LD_VAR 0 4
30254: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30255: LD_INT 0
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
// if not GetClass ( unit ) = class_sniper then
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL_OW 257
30273: PUSH
30274: LD_INT 5
30276: EQUAL
30277: NOT
30278: IFFALSE 30282
// exit ;
30280: GO 30670
// dist := 8 ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_INT 8
30289: ST_TO_ADDR
// viewRange := 12 ;
30290: LD_ADDR_VAR 0 7
30294: PUSH
30295: LD_INT 12
30297: ST_TO_ADDR
// side := GetSide ( unit ) ;
30298: LD_ADDR_VAR 0 6
30302: PUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 255
30312: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30313: LD_INT 61
30315: PPUSH
30316: LD_VAR 0 6
30320: PPUSH
30321: CALL_OW 321
30325: PUSH
30326: LD_INT 2
30328: EQUAL
30329: IFFALSE 30339
// viewRange := 16 ;
30331: LD_ADDR_VAR 0 7
30335: PUSH
30336: LD_INT 16
30338: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30339: LD_VAR 0 1
30343: PPUSH
30344: LD_VAR 0 2
30348: PPUSH
30349: LD_VAR 0 3
30353: PPUSH
30354: CALL_OW 297
30358: PUSH
30359: LD_VAR 0 5
30363: GREATER
30364: IFFALSE 30443
// begin ComMoveXY ( unit , x , y ) ;
30366: LD_VAR 0 1
30370: PPUSH
30371: LD_VAR 0 2
30375: PPUSH
30376: LD_VAR 0 3
30380: PPUSH
30381: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30385: LD_INT 35
30387: PPUSH
30388: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30392: LD_VAR 0 1
30396: PPUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: LD_VAR 0 3
30406: PPUSH
30407: CALL 66218 0 3
30411: NOT
30412: IFFALSE 30416
// exit ;
30414: GO 30670
// until GetDistUnitXY ( unit , x , y ) < dist ;
30416: LD_VAR 0 1
30420: PPUSH
30421: LD_VAR 0 2
30425: PPUSH
30426: LD_VAR 0 3
30430: PPUSH
30431: CALL_OW 297
30435: PUSH
30436: LD_VAR 0 5
30440: LESS
30441: IFFALSE 30385
// end ; ComTurnXY ( unit , x , y ) ;
30443: LD_VAR 0 1
30447: PPUSH
30448: LD_VAR 0 2
30452: PPUSH
30453: LD_VAR 0 3
30457: PPUSH
30458: CALL_OW 118
// wait ( 5 ) ;
30462: LD_INT 5
30464: PPUSH
30465: CALL_OW 67
// _d := GetDir ( unit ) ;
30469: LD_ADDR_VAR 0 10
30473: PUSH
30474: LD_VAR 0 1
30478: PPUSH
30479: CALL_OW 254
30483: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30484: LD_ADDR_VAR 0 8
30488: PUSH
30489: LD_VAR 0 1
30493: PPUSH
30494: CALL_OW 250
30498: PPUSH
30499: LD_VAR 0 10
30503: PPUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: CALL_OW 272
30513: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30514: LD_ADDR_VAR 0 9
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 251
30528: PPUSH
30529: LD_VAR 0 10
30533: PPUSH
30534: LD_VAR 0 5
30538: PPUSH
30539: CALL_OW 273
30543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30544: LD_VAR 0 8
30548: PPUSH
30549: LD_VAR 0 9
30553: PPUSH
30554: CALL_OW 488
30558: NOT
30559: IFFALSE 30563
// exit ;
30561: GO 30670
// ComAnimCustom ( unit , 1 ) ;
30563: LD_VAR 0 1
30567: PPUSH
30568: LD_INT 1
30570: PPUSH
30571: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30575: LD_VAR 0 8
30579: PPUSH
30580: LD_VAR 0 9
30584: PPUSH
30585: LD_VAR 0 6
30589: PPUSH
30590: LD_VAR 0 7
30594: PPUSH
30595: CALL_OW 330
// repeat wait ( 1 ) ;
30599: LD_INT 1
30601: PPUSH
30602: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30606: LD_VAR 0 1
30610: PPUSH
30611: CALL_OW 316
30615: PUSH
30616: LD_VAR 0 1
30620: PPUSH
30621: CALL_OW 314
30625: OR
30626: PUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL_OW 302
30636: NOT
30637: OR
30638: PUSH
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 301
30648: OR
30649: IFFALSE 30599
// RemoveSeeing ( _x , _y , side ) ;
30651: LD_VAR 0 8
30655: PPUSH
30656: LD_VAR 0 9
30660: PPUSH
30661: LD_VAR 0 6
30665: PPUSH
30666: CALL_OW 331
// end ; end_of_file
30670: LD_VAR 0 4
30674: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30675: LD_INT 0
30677: PPUSH
30678: PPUSH
// if exist_mode then
30679: LD_VAR 0 2
30683: IFFALSE 30708
// unit := CreateCharacter ( prefix & ident ) else
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 3
30694: PUSH
30695: LD_VAR 0 1
30699: STR
30700: PPUSH
30701: CALL_OW 34
30705: ST_TO_ADDR
30706: GO 30723
// unit := NewCharacter ( ident ) ;
30708: LD_ADDR_VAR 0 5
30712: PUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 25
30722: ST_TO_ADDR
// result := unit ;
30723: LD_ADDR_VAR 0 4
30727: PUSH
30728: LD_VAR 0 5
30732: ST_TO_ADDR
// end ;
30733: LD_VAR 0 4
30737: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30738: LD_INT 0
30740: PPUSH
30741: PPUSH
// if not side or not nation then
30742: LD_VAR 0 1
30746: NOT
30747: PUSH
30748: LD_VAR 0 2
30752: NOT
30753: OR
30754: IFFALSE 30758
// exit ;
30756: GO 31526
// case nation of nation_american :
30758: LD_VAR 0 2
30762: PUSH
30763: LD_INT 1
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30985
30771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30772: LD_ADDR_VAR 0 4
30776: PUSH
30777: LD_INT 35
30779: PUSH
30780: LD_INT 45
30782: PUSH
30783: LD_INT 46
30785: PUSH
30786: LD_INT 47
30788: PUSH
30789: LD_INT 82
30791: PUSH
30792: LD_INT 83
30794: PUSH
30795: LD_INT 84
30797: PUSH
30798: LD_INT 85
30800: PUSH
30801: LD_INT 86
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: LD_INT 6
30812: PUSH
30813: LD_INT 15
30815: PUSH
30816: LD_INT 16
30818: PUSH
30819: LD_INT 7
30821: PUSH
30822: LD_INT 12
30824: PUSH
30825: LD_INT 13
30827: PUSH
30828: LD_INT 10
30830: PUSH
30831: LD_INT 14
30833: PUSH
30834: LD_INT 20
30836: PUSH
30837: LD_INT 21
30839: PUSH
30840: LD_INT 22
30842: PUSH
30843: LD_INT 25
30845: PUSH
30846: LD_INT 32
30848: PUSH
30849: LD_INT 27
30851: PUSH
30852: LD_INT 36
30854: PUSH
30855: LD_INT 69
30857: PUSH
30858: LD_INT 39
30860: PUSH
30861: LD_INT 34
30863: PUSH
30864: LD_INT 40
30866: PUSH
30867: LD_INT 48
30869: PUSH
30870: LD_INT 49
30872: PUSH
30873: LD_INT 50
30875: PUSH
30876: LD_INT 51
30878: PUSH
30879: LD_INT 52
30881: PUSH
30882: LD_INT 53
30884: PUSH
30885: LD_INT 54
30887: PUSH
30888: LD_INT 55
30890: PUSH
30891: LD_INT 56
30893: PUSH
30894: LD_INT 57
30896: PUSH
30897: LD_INT 58
30899: PUSH
30900: LD_INT 59
30902: PUSH
30903: LD_INT 60
30905: PUSH
30906: LD_INT 61
30908: PUSH
30909: LD_INT 62
30911: PUSH
30912: LD_INT 80
30914: PUSH
30915: LD_INT 82
30917: PUSH
30918: LD_INT 83
30920: PUSH
30921: LD_INT 84
30923: PUSH
30924: LD_INT 85
30926: PUSH
30927: LD_INT 86
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
30983: GO 31450
30985: LD_INT 2
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31219
30993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30994: LD_ADDR_VAR 0 4
30998: PUSH
30999: LD_INT 35
31001: PUSH
31002: LD_INT 45
31004: PUSH
31005: LD_INT 46
31007: PUSH
31008: LD_INT 47
31010: PUSH
31011: LD_INT 82
31013: PUSH
31014: LD_INT 83
31016: PUSH
31017: LD_INT 84
31019: PUSH
31020: LD_INT 85
31022: PUSH
31023: LD_INT 87
31025: PUSH
31026: LD_INT 70
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 11
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: LD_INT 4
31040: PUSH
31041: LD_INT 5
31043: PUSH
31044: LD_INT 6
31046: PUSH
31047: LD_INT 15
31049: PUSH
31050: LD_INT 18
31052: PUSH
31053: LD_INT 7
31055: PUSH
31056: LD_INT 17
31058: PUSH
31059: LD_INT 8
31061: PUSH
31062: LD_INT 20
31064: PUSH
31065: LD_INT 21
31067: PUSH
31068: LD_INT 22
31070: PUSH
31071: LD_INT 72
31073: PUSH
31074: LD_INT 26
31076: PUSH
31077: LD_INT 69
31079: PUSH
31080: LD_INT 39
31082: PUSH
31083: LD_INT 40
31085: PUSH
31086: LD_INT 41
31088: PUSH
31089: LD_INT 42
31091: PUSH
31092: LD_INT 43
31094: PUSH
31095: LD_INT 48
31097: PUSH
31098: LD_INT 49
31100: PUSH
31101: LD_INT 50
31103: PUSH
31104: LD_INT 51
31106: PUSH
31107: LD_INT 52
31109: PUSH
31110: LD_INT 53
31112: PUSH
31113: LD_INT 54
31115: PUSH
31116: LD_INT 55
31118: PUSH
31119: LD_INT 56
31121: PUSH
31122: LD_INT 60
31124: PUSH
31125: LD_INT 61
31127: PUSH
31128: LD_INT 62
31130: PUSH
31131: LD_INT 66
31133: PUSH
31134: LD_INT 67
31136: PUSH
31137: LD_INT 68
31139: PUSH
31140: LD_INT 81
31142: PUSH
31143: LD_INT 82
31145: PUSH
31146: LD_INT 83
31148: PUSH
31149: LD_INT 84
31151: PUSH
31152: LD_INT 85
31154: PUSH
31155: LD_INT 87
31157: PUSH
31158: LD_INT 88
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
31217: GO 31450
31219: LD_INT 3
31221: DOUBLE
31222: EQUAL
31223: IFTRUE 31227
31225: GO 31449
31227: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31228: LD_ADDR_VAR 0 4
31232: PUSH
31233: LD_INT 46
31235: PUSH
31236: LD_INT 47
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 82
31247: PUSH
31248: LD_INT 83
31250: PUSH
31251: LD_INT 84
31253: PUSH
31254: LD_INT 85
31256: PUSH
31257: LD_INT 86
31259: PUSH
31260: LD_INT 11
31262: PUSH
31263: LD_INT 9
31265: PUSH
31266: LD_INT 20
31268: PUSH
31269: LD_INT 19
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 24
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_INT 25
31283: PUSH
31284: LD_INT 28
31286: PUSH
31287: LD_INT 29
31289: PUSH
31290: LD_INT 30
31292: PUSH
31293: LD_INT 31
31295: PUSH
31296: LD_INT 37
31298: PUSH
31299: LD_INT 38
31301: PUSH
31302: LD_INT 32
31304: PUSH
31305: LD_INT 27
31307: PUSH
31308: LD_INT 33
31310: PUSH
31311: LD_INT 69
31313: PUSH
31314: LD_INT 39
31316: PUSH
31317: LD_INT 34
31319: PUSH
31320: LD_INT 40
31322: PUSH
31323: LD_INT 71
31325: PUSH
31326: LD_INT 23
31328: PUSH
31329: LD_INT 44
31331: PUSH
31332: LD_INT 48
31334: PUSH
31335: LD_INT 49
31337: PUSH
31338: LD_INT 50
31340: PUSH
31341: LD_INT 51
31343: PUSH
31344: LD_INT 52
31346: PUSH
31347: LD_INT 53
31349: PUSH
31350: LD_INT 54
31352: PUSH
31353: LD_INT 55
31355: PUSH
31356: LD_INT 56
31358: PUSH
31359: LD_INT 57
31361: PUSH
31362: LD_INT 58
31364: PUSH
31365: LD_INT 59
31367: PUSH
31368: LD_INT 63
31370: PUSH
31371: LD_INT 64
31373: PUSH
31374: LD_INT 65
31376: PUSH
31377: LD_INT 82
31379: PUSH
31380: LD_INT 83
31382: PUSH
31383: LD_INT 84
31385: PUSH
31386: LD_INT 85
31388: PUSH
31389: LD_INT 86
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: ST_TO_ADDR
31447: GO 31450
31449: POP
// if state > - 1 and state < 3 then
31450: LD_VAR 0 3
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: GREATER
31459: PUSH
31460: LD_VAR 0 3
31464: PUSH
31465: LD_INT 3
31467: LESS
31468: AND
31469: IFFALSE 31526
// for i in result do
31471: LD_ADDR_VAR 0 5
31475: PUSH
31476: LD_VAR 0 4
31480: PUSH
31481: FOR_IN
31482: IFFALSE 31524
// if GetTech ( i , side ) <> state then
31484: LD_VAR 0 5
31488: PPUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 321
31498: PUSH
31499: LD_VAR 0 3
31503: NONEQUAL
31504: IFFALSE 31522
// result := result diff i ;
31506: LD_ADDR_VAR 0 4
31510: PUSH
31511: LD_VAR 0 4
31515: PUSH
31516: LD_VAR 0 5
31520: DIFF
31521: ST_TO_ADDR
31522: GO 31481
31524: POP
31525: POP
// end ;
31526: LD_VAR 0 4
31530: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31531: LD_INT 0
31533: PPUSH
31534: PPUSH
31535: PPUSH
// result := true ;
31536: LD_ADDR_VAR 0 3
31540: PUSH
31541: LD_INT 1
31543: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31544: LD_ADDR_VAR 0 5
31548: PUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: CALL_OW 480
31558: ST_TO_ADDR
// if not tmp then
31559: LD_VAR 0 5
31563: NOT
31564: IFFALSE 31568
// exit ;
31566: GO 31617
// for i in tmp do
31568: LD_ADDR_VAR 0 4
31572: PUSH
31573: LD_VAR 0 5
31577: PUSH
31578: FOR_IN
31579: IFFALSE 31615
// if GetTech ( i , side ) <> state_researched then
31581: LD_VAR 0 4
31585: PPUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 321
31595: PUSH
31596: LD_INT 2
31598: NONEQUAL
31599: IFFALSE 31613
// begin result := false ;
31601: LD_ADDR_VAR 0 3
31605: PUSH
31606: LD_INT 0
31608: ST_TO_ADDR
// exit ;
31609: POP
31610: POP
31611: GO 31617
// end ;
31613: GO 31578
31615: POP
31616: POP
// end ;
31617: LD_VAR 0 3
31621: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31622: LD_INT 0
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31637: LD_VAR 0 1
31641: NOT
31642: PUSH
31643: LD_VAR 0 1
31647: PPUSH
31648: CALL_OW 257
31652: PUSH
31653: LD_INT 9
31655: NONEQUAL
31656: OR
31657: IFFALSE 31661
// exit ;
31659: GO 32234
// side := GetSide ( unit ) ;
31661: LD_ADDR_VAR 0 9
31665: PUSH
31666: LD_VAR 0 1
31670: PPUSH
31671: CALL_OW 255
31675: ST_TO_ADDR
// tech_space := tech_spacanom ;
31676: LD_ADDR_VAR 0 12
31680: PUSH
31681: LD_INT 29
31683: ST_TO_ADDR
// tech_time := tech_taurad ;
31684: LD_ADDR_VAR 0 13
31688: PUSH
31689: LD_INT 28
31691: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31692: LD_ADDR_VAR 0 11
31696: PUSH
31697: LD_VAR 0 1
31701: PPUSH
31702: CALL_OW 310
31706: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31707: LD_VAR 0 11
31711: PPUSH
31712: CALL_OW 247
31716: PUSH
31717: LD_INT 2
31719: EQUAL
31720: IFFALSE 31724
// exit ;
31722: GO 32234
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_INT 81
31731: PUSH
31732: LD_VAR 0 9
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 21
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PPUSH
31762: CALL_OW 69
31766: ST_TO_ADDR
// if not tmp then
31767: LD_VAR 0 8
31771: NOT
31772: IFFALSE 31776
// exit ;
31774: GO 32234
// if in_unit then
31776: LD_VAR 0 11
31780: IFFALSE 31804
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31782: LD_ADDR_VAR 0 10
31786: PUSH
31787: LD_VAR 0 8
31791: PPUSH
31792: LD_VAR 0 11
31796: PPUSH
31797: CALL_OW 74
31801: ST_TO_ADDR
31802: GO 31824
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31804: LD_ADDR_VAR 0 10
31808: PUSH
31809: LD_VAR 0 8
31813: PPUSH
31814: LD_VAR 0 1
31818: PPUSH
31819: CALL_OW 74
31823: ST_TO_ADDR
// if not enemy then
31824: LD_VAR 0 10
31828: NOT
31829: IFFALSE 31833
// exit ;
31831: GO 32234
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31833: LD_VAR 0 11
31837: PUSH
31838: LD_VAR 0 11
31842: PPUSH
31843: LD_VAR 0 10
31847: PPUSH
31848: CALL_OW 296
31852: PUSH
31853: LD_INT 13
31855: GREATER
31856: AND
31857: PUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: LD_VAR 0 10
31867: PPUSH
31868: CALL_OW 296
31872: PUSH
31873: LD_INT 12
31875: GREATER
31876: OR
31877: IFFALSE 31881
// exit ;
31879: GO 32234
// missile := [ 1 ] ;
31881: LD_ADDR_VAR 0 14
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31892: LD_VAR 0 9
31896: PPUSH
31897: LD_VAR 0 12
31901: PPUSH
31902: CALL_OW 325
31906: IFFALSE 31935
// missile := Insert ( missile , missile + 1 , 2 ) ;
31908: LD_ADDR_VAR 0 14
31912: PUSH
31913: LD_VAR 0 14
31917: PPUSH
31918: LD_VAR 0 14
31922: PUSH
31923: LD_INT 1
31925: PLUS
31926: PPUSH
31927: LD_INT 2
31929: PPUSH
31930: CALL_OW 2
31934: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31935: LD_VAR 0 9
31939: PPUSH
31940: LD_VAR 0 13
31944: PPUSH
31945: CALL_OW 325
31949: PUSH
31950: LD_VAR 0 10
31954: PPUSH
31955: CALL_OW 255
31959: PPUSH
31960: LD_VAR 0 13
31964: PPUSH
31965: CALL_OW 325
31969: NOT
31970: AND
31971: IFFALSE 32000
// missile := Insert ( missile , missile + 1 , 3 ) ;
31973: LD_ADDR_VAR 0 14
31977: PUSH
31978: LD_VAR 0 14
31982: PPUSH
31983: LD_VAR 0 14
31987: PUSH
31988: LD_INT 1
31990: PLUS
31991: PPUSH
31992: LD_INT 3
31994: PPUSH
31995: CALL_OW 2
31999: ST_TO_ADDR
// if missile < 2 then
32000: LD_VAR 0 14
32004: PUSH
32005: LD_INT 2
32007: LESS
32008: IFFALSE 32012
// exit ;
32010: GO 32234
// x := GetX ( enemy ) ;
32012: LD_ADDR_VAR 0 4
32016: PUSH
32017: LD_VAR 0 10
32021: PPUSH
32022: CALL_OW 250
32026: ST_TO_ADDR
// y := GetY ( enemy ) ;
32027: LD_ADDR_VAR 0 5
32031: PUSH
32032: LD_VAR 0 10
32036: PPUSH
32037: CALL_OW 251
32041: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32042: LD_ADDR_VAR 0 6
32046: PUSH
32047: LD_VAR 0 4
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PPUSH
32056: LD_INT 1
32058: PPUSH
32059: CALL_OW 12
32063: PLUS
32064: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32065: LD_ADDR_VAR 0 7
32069: PUSH
32070: LD_VAR 0 5
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PPUSH
32079: LD_INT 1
32081: PPUSH
32082: CALL_OW 12
32086: PLUS
32087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32088: LD_VAR 0 6
32092: PPUSH
32093: LD_VAR 0 7
32097: PPUSH
32098: CALL_OW 488
32102: NOT
32103: IFFALSE 32125
// begin _x := x ;
32105: LD_ADDR_VAR 0 6
32109: PUSH
32110: LD_VAR 0 4
32114: ST_TO_ADDR
// _y := y ;
32115: LD_ADDR_VAR 0 7
32119: PUSH
32120: LD_VAR 0 5
32124: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32125: LD_ADDR_VAR 0 3
32129: PUSH
32130: LD_INT 1
32132: PPUSH
32133: LD_VAR 0 14
32137: PPUSH
32138: CALL_OW 12
32142: ST_TO_ADDR
// case i of 1 :
32143: LD_VAR 0 3
32147: PUSH
32148: LD_INT 1
32150: DOUBLE
32151: EQUAL
32152: IFTRUE 32156
32154: GO 32173
32156: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32157: LD_VAR 0 1
32161: PPUSH
32162: LD_VAR 0 10
32166: PPUSH
32167: CALL_OW 115
32171: GO 32234
32173: LD_INT 2
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32203
32181: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32182: LD_VAR 0 1
32186: PPUSH
32187: LD_VAR 0 6
32191: PPUSH
32192: LD_VAR 0 7
32196: PPUSH
32197: CALL_OW 153
32201: GO 32234
32203: LD_INT 3
32205: DOUBLE
32206: EQUAL
32207: IFTRUE 32211
32209: GO 32233
32211: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32212: LD_VAR 0 1
32216: PPUSH
32217: LD_VAR 0 6
32221: PPUSH
32222: LD_VAR 0 7
32226: PPUSH
32227: CALL_OW 154
32231: GO 32234
32233: POP
// end ;
32234: LD_VAR 0 2
32238: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
// if not unit or not building then
32247: LD_VAR 0 1
32251: NOT
32252: PUSH
32253: LD_VAR 0 2
32257: NOT
32258: OR
32259: IFFALSE 32263
// exit ;
32261: GO 32421
// x := GetX ( building ) ;
32263: LD_ADDR_VAR 0 5
32267: PUSH
32268: LD_VAR 0 2
32272: PPUSH
32273: CALL_OW 250
32277: ST_TO_ADDR
// y := GetY ( building ) ;
32278: LD_ADDR_VAR 0 6
32282: PUSH
32283: LD_VAR 0 2
32287: PPUSH
32288: CALL_OW 251
32292: ST_TO_ADDR
// for i = 0 to 5 do
32293: LD_ADDR_VAR 0 4
32297: PUSH
32298: DOUBLE
32299: LD_INT 0
32301: DEC
32302: ST_TO_ADDR
32303: LD_INT 5
32305: PUSH
32306: FOR_TO
32307: IFFALSE 32419
// begin _x := ShiftX ( x , i , 3 ) ;
32309: LD_ADDR_VAR 0 7
32313: PUSH
32314: LD_VAR 0 5
32318: PPUSH
32319: LD_VAR 0 4
32323: PPUSH
32324: LD_INT 3
32326: PPUSH
32327: CALL_OW 272
32331: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32332: LD_ADDR_VAR 0 8
32336: PUSH
32337: LD_VAR 0 6
32341: PPUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: LD_INT 3
32349: PPUSH
32350: CALL_OW 273
32354: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32355: LD_VAR 0 7
32359: PPUSH
32360: LD_VAR 0 8
32364: PPUSH
32365: CALL_OW 488
32369: NOT
32370: IFFALSE 32374
// continue ;
32372: GO 32306
// if HexInfo ( _x , _y ) = 0 then
32374: LD_VAR 0 7
32378: PPUSH
32379: LD_VAR 0 8
32383: PPUSH
32384: CALL_OW 428
32388: PUSH
32389: LD_INT 0
32391: EQUAL
32392: IFFALSE 32417
// begin ComMoveXY ( unit , _x , _y ) ;
32394: LD_VAR 0 1
32398: PPUSH
32399: LD_VAR 0 7
32403: PPUSH
32404: LD_VAR 0 8
32408: PPUSH
32409: CALL_OW 111
// exit ;
32413: POP
32414: POP
32415: GO 32421
// end ; end ;
32417: GO 32306
32419: POP
32420: POP
// end ;
32421: LD_VAR 0 3
32425: RET
// export function ScanBase ( side , base_area ) ; begin
32426: LD_INT 0
32428: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32429: LD_ADDR_VAR 0 3
32433: PUSH
32434: LD_VAR 0 2
32438: PPUSH
32439: LD_INT 81
32441: PUSH
32442: LD_VAR 0 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 70
32455: ST_TO_ADDR
// end ;
32456: LD_VAR 0 3
32460: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
// result := false ;
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_INT 0
32474: ST_TO_ADDR
// side := GetSide ( unit ) ;
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 255
32489: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32490: LD_ADDR_VAR 0 4
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 248
32504: ST_TO_ADDR
// case nat of 1 :
32505: LD_VAR 0 4
32509: PUSH
32510: LD_INT 1
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32529
32518: POP
// tech := tech_lassight ; 2 :
32519: LD_ADDR_VAR 0 5
32523: PUSH
32524: LD_INT 12
32526: ST_TO_ADDR
32527: GO 32568
32529: LD_INT 2
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// tech := tech_mortar ; 3 :
32538: LD_ADDR_VAR 0 5
32542: PUSH
32543: LD_INT 41
32545: ST_TO_ADDR
32546: GO 32568
32548: LD_INT 3
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// tech := tech_bazooka ; end ;
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_INT 44
32564: ST_TO_ADDR
32565: GO 32568
32567: POP
// if Researched ( side , tech ) then
32568: LD_VAR 0 3
32572: PPUSH
32573: LD_VAR 0 5
32577: PPUSH
32578: CALL_OW 325
32582: IFFALSE 32609
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_INT 5
32591: PUSH
32592: LD_INT 8
32594: PUSH
32595: LD_INT 9
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: LD_VAR 0 4
32607: ARRAY
32608: ST_TO_ADDR
// end ;
32609: LD_VAR 0 2
32613: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32614: LD_INT 0
32616: PPUSH
32617: PPUSH
32618: PPUSH
// if not mines then
32619: LD_VAR 0 2
32623: NOT
32624: IFFALSE 32628
// exit ;
32626: GO 32772
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_INT 81
32635: PUSH
32636: LD_VAR 0 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 21
32650: PUSH
32651: LD_INT 3
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PPUSH
32666: CALL_OW 69
32670: ST_TO_ADDR
// for i in mines do
32671: LD_ADDR_VAR 0 4
32675: PUSH
32676: LD_VAR 0 2
32680: PUSH
32681: FOR_IN
32682: IFFALSE 32770
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32684: LD_VAR 0 4
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PPUSH
32693: LD_VAR 0 4
32697: PUSH
32698: LD_INT 2
32700: ARRAY
32701: PPUSH
32702: CALL_OW 458
32706: NOT
32707: IFFALSE 32711
// continue ;
32709: GO 32681
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32711: LD_VAR 0 4
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: PPUSH
32720: LD_VAR 0 4
32724: PUSH
32725: LD_INT 2
32727: ARRAY
32728: PPUSH
32729: CALL_OW 428
32733: PUSH
32734: LD_VAR 0 5
32738: IN
32739: IFFALSE 32768
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32741: LD_VAR 0 4
32745: PUSH
32746: LD_INT 1
32748: ARRAY
32749: PPUSH
32750: LD_VAR 0 4
32754: PUSH
32755: LD_INT 2
32757: ARRAY
32758: PPUSH
32759: LD_VAR 0 1
32763: PPUSH
32764: CALL_OW 456
// end ;
32768: GO 32681
32770: POP
32771: POP
// end ;
32772: LD_VAR 0 3
32776: RET
// export function Count ( array ) ; var i ; begin
32777: LD_INT 0
32779: PPUSH
32780: PPUSH
// result := 0 ;
32781: LD_ADDR_VAR 0 2
32785: PUSH
32786: LD_INT 0
32788: ST_TO_ADDR
// for i in array do
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_VAR 0 1
32798: PUSH
32799: FOR_IN
32800: IFFALSE 32824
// if i then
32802: LD_VAR 0 3
32806: IFFALSE 32822
// result := result + 1 ;
32808: LD_ADDR_VAR 0 2
32812: PUSH
32813: LD_VAR 0 2
32817: PUSH
32818: LD_INT 1
32820: PLUS
32821: ST_TO_ADDR
32822: GO 32799
32824: POP
32825: POP
// end ;
32826: LD_VAR 0 2
32830: RET
// export function IsEmpty ( building ) ; begin
32831: LD_INT 0
32833: PPUSH
// if not building then
32834: LD_VAR 0 1
32838: NOT
32839: IFFALSE 32843
// exit ;
32841: GO 32886
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32843: LD_ADDR_VAR 0 2
32847: PUSH
32848: LD_VAR 0 1
32852: PUSH
32853: LD_INT 22
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 255
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 58
32872: PUSH
32873: EMPTY
32874: LIST
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PPUSH
32880: CALL_OW 69
32884: IN
32885: ST_TO_ADDR
// end ;
32886: LD_VAR 0 2
32890: RET
// export function IsNotFull ( building ) ; begin
32891: LD_INT 0
32893: PPUSH
// if not building then
32894: LD_VAR 0 1
32898: NOT
32899: IFFALSE 32903
// exit ;
32901: GO 32922
// result := UnitsInside ( building ) < 6 ;
32903: LD_ADDR_VAR 0 2
32907: PUSH
32908: LD_VAR 0 1
32912: PPUSH
32913: CALL_OW 313
32917: PUSH
32918: LD_INT 6
32920: LESS
32921: ST_TO_ADDR
// end ;
32922: LD_VAR 0 2
32926: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32927: LD_INT 0
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
// tmp := [ ] ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: EMPTY
32939: ST_TO_ADDR
// list := [ ] ;
32940: LD_ADDR_VAR 0 5
32944: PUSH
32945: EMPTY
32946: ST_TO_ADDR
// for i = 16 to 25 do
32947: LD_ADDR_VAR 0 4
32951: PUSH
32952: DOUBLE
32953: LD_INT 16
32955: DEC
32956: ST_TO_ADDR
32957: LD_INT 25
32959: PUSH
32960: FOR_TO
32961: IFFALSE 33034
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_VAR 0 3
32972: PUSH
32973: LD_INT 22
32975: PUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL_OW 255
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 91
32992: PUSH
32993: LD_VAR 0 1
32997: PUSH
32998: LD_INT 6
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 30
33008: PUSH
33009: LD_VAR 0 4
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: PPUSH
33026: CALL_OW 69
33030: ADD
33031: ST_TO_ADDR
33032: GO 32960
33034: POP
33035: POP
// for i = 1 to tmp do
33036: LD_ADDR_VAR 0 4
33040: PUSH
33041: DOUBLE
33042: LD_INT 1
33044: DEC
33045: ST_TO_ADDR
33046: LD_VAR 0 3
33050: PUSH
33051: FOR_TO
33052: IFFALSE 33140
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33054: LD_ADDR_VAR 0 5
33058: PUSH
33059: LD_VAR 0 5
33063: PUSH
33064: LD_VAR 0 3
33068: PUSH
33069: LD_VAR 0 4
33073: ARRAY
33074: PPUSH
33075: CALL_OW 266
33079: PUSH
33080: LD_VAR 0 3
33084: PUSH
33085: LD_VAR 0 4
33089: ARRAY
33090: PPUSH
33091: CALL_OW 250
33095: PUSH
33096: LD_VAR 0 3
33100: PUSH
33101: LD_VAR 0 4
33105: ARRAY
33106: PPUSH
33107: CALL_OW 251
33111: PUSH
33112: LD_VAR 0 3
33116: PUSH
33117: LD_VAR 0 4
33121: ARRAY
33122: PPUSH
33123: CALL_OW 254
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: ADD
33137: ST_TO_ADDR
33138: GO 33051
33140: POP
33141: POP
// result := list ;
33142: LD_ADDR_VAR 0 2
33146: PUSH
33147: LD_VAR 0 5
33151: ST_TO_ADDR
// end ;
33152: LD_VAR 0 2
33156: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33157: LD_INT 0
33159: PPUSH
33160: PPUSH
33161: PPUSH
33162: PPUSH
33163: PPUSH
33164: PPUSH
33165: PPUSH
// if not factory then
33166: LD_VAR 0 1
33170: NOT
33171: IFFALSE 33175
// exit ;
33173: GO 33768
// if control = control_apeman then
33175: LD_VAR 0 4
33179: PUSH
33180: LD_INT 5
33182: EQUAL
33183: IFFALSE 33292
// begin tmp := UnitsInside ( factory ) ;
33185: LD_ADDR_VAR 0 8
33189: PUSH
33190: LD_VAR 0 1
33194: PPUSH
33195: CALL_OW 313
33199: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33200: LD_VAR 0 8
33204: PPUSH
33205: LD_INT 25
33207: PUSH
33208: LD_INT 12
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PPUSH
33215: CALL_OW 72
33219: NOT
33220: IFFALSE 33230
// control := control_manual ;
33222: LD_ADDR_VAR 0 4
33226: PUSH
33227: LD_INT 1
33229: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33230: LD_ADDR_VAR 0 8
33234: PUSH
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL 32927 0 1
33244: ST_TO_ADDR
// if tmp then
33245: LD_VAR 0 8
33249: IFFALSE 33292
// begin for i in tmp do
33251: LD_ADDR_VAR 0 7
33255: PUSH
33256: LD_VAR 0 8
33260: PUSH
33261: FOR_IN
33262: IFFALSE 33290
// if i [ 1 ] = b_ext_radio then
33264: LD_VAR 0 7
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PUSH
33273: LD_INT 22
33275: EQUAL
33276: IFFALSE 33288
// begin control := control_remote ;
33278: LD_ADDR_VAR 0 4
33282: PUSH
33283: LD_INT 2
33285: ST_TO_ADDR
// break ;
33286: GO 33290
// end ;
33288: GO 33261
33290: POP
33291: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33292: LD_VAR 0 1
33296: PPUSH
33297: LD_VAR 0 2
33301: PPUSH
33302: LD_VAR 0 3
33306: PPUSH
33307: LD_VAR 0 4
33311: PPUSH
33312: LD_VAR 0 5
33316: PPUSH
33317: CALL_OW 448
33321: IFFALSE 33356
// begin result := [ chassis , engine , control , weapon ] ;
33323: LD_ADDR_VAR 0 6
33327: PUSH
33328: LD_VAR 0 2
33332: PUSH
33333: LD_VAR 0 3
33337: PUSH
33338: LD_VAR 0 4
33342: PUSH
33343: LD_VAR 0 5
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: ST_TO_ADDR
// exit ;
33354: GO 33768
// end ; _chassis := AvailableChassisList ( factory ) ;
33356: LD_ADDR_VAR 0 9
33360: PUSH
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL_OW 475
33370: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33371: LD_ADDR_VAR 0 11
33375: PUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: CALL_OW 476
33385: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33386: LD_ADDR_VAR 0 12
33390: PUSH
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 477
33400: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33401: LD_ADDR_VAR 0 10
33405: PUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 478
33415: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33416: LD_VAR 0 9
33420: NOT
33421: PUSH
33422: LD_VAR 0 11
33426: NOT
33427: OR
33428: PUSH
33429: LD_VAR 0 12
33433: NOT
33434: OR
33435: PUSH
33436: LD_VAR 0 10
33440: NOT
33441: OR
33442: IFFALSE 33477
// begin result := [ chassis , engine , control , weapon ] ;
33444: LD_ADDR_VAR 0 6
33448: PUSH
33449: LD_VAR 0 2
33453: PUSH
33454: LD_VAR 0 3
33458: PUSH
33459: LD_VAR 0 4
33463: PUSH
33464: LD_VAR 0 5
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// exit ;
33475: GO 33768
// end ; if not chassis in _chassis then
33477: LD_VAR 0 2
33481: PUSH
33482: LD_VAR 0 9
33486: IN
33487: NOT
33488: IFFALSE 33514
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33490: LD_ADDR_VAR 0 2
33494: PUSH
33495: LD_VAR 0 9
33499: PUSH
33500: LD_INT 1
33502: PPUSH
33503: LD_VAR 0 9
33507: PPUSH
33508: CALL_OW 12
33512: ARRAY
33513: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33514: LD_VAR 0 2
33518: PPUSH
33519: LD_VAR 0 3
33523: PPUSH
33524: CALL 33773 0 2
33528: NOT
33529: IFFALSE 33588
// repeat engine := _engine [ 1 ] ;
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_VAR 0 11
33540: PUSH
33541: LD_INT 1
33543: ARRAY
33544: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33545: LD_ADDR_VAR 0 11
33549: PUSH
33550: LD_VAR 0 11
33554: PPUSH
33555: LD_INT 1
33557: PPUSH
33558: CALL_OW 3
33562: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: CALL 33773 0 2
33577: PUSH
33578: LD_VAR 0 11
33582: PUSH
33583: EMPTY
33584: EQUAL
33585: OR
33586: IFFALSE 33531
// if not control in _control then
33588: LD_VAR 0 4
33592: PUSH
33593: LD_VAR 0 12
33597: IN
33598: NOT
33599: IFFALSE 33625
// control := _control [ rand ( 1 , _control ) ] ;
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: LD_VAR 0 12
33610: PUSH
33611: LD_INT 1
33613: PPUSH
33614: LD_VAR 0 12
33618: PPUSH
33619: CALL_OW 12
33623: ARRAY
33624: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33625: LD_VAR 0 2
33629: PPUSH
33630: LD_VAR 0 5
33634: PPUSH
33635: CALL 33993 0 2
33639: NOT
33640: IFFALSE 33699
// repeat weapon := _weapon [ 1 ] ;
33642: LD_ADDR_VAR 0 5
33646: PUSH
33647: LD_VAR 0 10
33651: PUSH
33652: LD_INT 1
33654: ARRAY
33655: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33656: LD_ADDR_VAR 0 10
33660: PUSH
33661: LD_VAR 0 10
33665: PPUSH
33666: LD_INT 1
33668: PPUSH
33669: CALL_OW 3
33673: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33674: LD_VAR 0 2
33678: PPUSH
33679: LD_VAR 0 5
33683: PPUSH
33684: CALL 33993 0 2
33688: PUSH
33689: LD_VAR 0 10
33693: PUSH
33694: EMPTY
33695: EQUAL
33696: OR
33697: IFFALSE 33642
// result := [ ] ;
33699: LD_ADDR_VAR 0 6
33703: PUSH
33704: EMPTY
33705: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33706: LD_VAR 0 1
33710: PPUSH
33711: LD_VAR 0 2
33715: PPUSH
33716: LD_VAR 0 3
33720: PPUSH
33721: LD_VAR 0 4
33725: PPUSH
33726: LD_VAR 0 5
33730: PPUSH
33731: CALL_OW 448
33735: IFFALSE 33768
// result := [ chassis , engine , control , weapon ] ;
33737: LD_ADDR_VAR 0 6
33741: PUSH
33742: LD_VAR 0 2
33746: PUSH
33747: LD_VAR 0 3
33751: PUSH
33752: LD_VAR 0 4
33756: PUSH
33757: LD_VAR 0 5
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: ST_TO_ADDR
// end ;
33768: LD_VAR 0 6
33772: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33773: LD_INT 0
33775: PPUSH
// if not chassis or not engine then
33776: LD_VAR 0 1
33780: NOT
33781: PUSH
33782: LD_VAR 0 2
33786: NOT
33787: OR
33788: IFFALSE 33792
// exit ;
33790: GO 33988
// case engine of engine_solar :
33792: LD_VAR 0 2
33796: PUSH
33797: LD_INT 2
33799: DOUBLE
33800: EQUAL
33801: IFTRUE 33805
33803: GO 33843
33805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_INT 11
33813: PUSH
33814: LD_INT 12
33816: PUSH
33817: LD_INT 13
33819: PUSH
33820: LD_INT 14
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: ST_TO_ADDR
33841: GO 33972
33843: LD_INT 1
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33851
33849: GO 33913
33851: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33852: LD_ADDR_VAR 0 3
33856: PUSH
33857: LD_INT 11
33859: PUSH
33860: LD_INT 12
33862: PUSH
33863: LD_INT 13
33865: PUSH
33866: LD_INT 14
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 3
33877: PUSH
33878: LD_INT 4
33880: PUSH
33881: LD_INT 5
33883: PUSH
33884: LD_INT 21
33886: PUSH
33887: LD_INT 23
33889: PUSH
33890: LD_INT 22
33892: PUSH
33893: LD_INT 24
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
33911: GO 33972
33913: LD_INT 3
33915: DOUBLE
33916: EQUAL
33917: IFTRUE 33921
33919: GO 33971
33921: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33922: LD_ADDR_VAR 0 3
33926: PUSH
33927: LD_INT 13
33929: PUSH
33930: LD_INT 14
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: LD_INT 4
33941: PUSH
33942: LD_INT 5
33944: PUSH
33945: LD_INT 21
33947: PUSH
33948: LD_INT 22
33950: PUSH
33951: LD_INT 23
33953: PUSH
33954: LD_INT 24
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: ST_TO_ADDR
33969: GO 33972
33971: POP
// result := ( chassis in result ) ;
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_VAR 0 1
33981: PUSH
33982: LD_VAR 0 3
33986: IN
33987: ST_TO_ADDR
// end ;
33988: LD_VAR 0 3
33992: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33993: LD_INT 0
33995: PPUSH
// if not chassis or not weapon then
33996: LD_VAR 0 1
34000: NOT
34001: PUSH
34002: LD_VAR 0 2
34006: NOT
34007: OR
34008: IFFALSE 34012
// exit ;
34010: GO 35074
// case weapon of us_machine_gun :
34012: LD_VAR 0 2
34016: PUSH
34017: LD_INT 2
34019: DOUBLE
34020: EQUAL
34021: IFTRUE 34025
34023: GO 34055
34025: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34026: LD_ADDR_VAR 0 3
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
34053: GO 35058
34055: LD_INT 3
34057: DOUBLE
34058: EQUAL
34059: IFTRUE 34063
34061: GO 34093
34063: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: LD_INT 4
34080: PUSH
34081: LD_INT 5
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
34091: GO 35058
34093: LD_INT 11
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34131
34101: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 4
34118: PUSH
34119: LD_INT 5
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: ST_TO_ADDR
34129: GO 35058
34131: LD_INT 4
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34165
34139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34140: LD_ADDR_VAR 0 3
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 3
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: LD_INT 5
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
34163: GO 35058
34165: LD_INT 5
34167: DOUBLE
34168: EQUAL
34169: IFTRUE 34173
34171: GO 34199
34173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34174: LD_ADDR_VAR 0 3
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 4
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: ST_TO_ADDR
34197: GO 35058
34199: LD_INT 9
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34207
34205: GO 34233
34207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34208: LD_ADDR_VAR 0 3
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: LD_INT 4
34221: PUSH
34222: LD_INT 5
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
34231: GO 35058
34233: LD_INT 7
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34241
34239: GO 34267
34241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
34265: GO 35058
34267: LD_INT 12
34269: DOUBLE
34270: EQUAL
34271: IFTRUE 34275
34273: GO 34301
34275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34276: LD_ADDR_VAR 0 3
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: LD_INT 4
34289: PUSH
34290: LD_INT 5
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
34299: GO 35058
34301: LD_INT 13
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34335
34309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: LD_INT 3
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: LD_INT 5
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: ST_TO_ADDR
34333: GO 35058
34335: LD_INT 14
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34361
34343: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 4
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: ST_TO_ADDR
34359: GO 35058
34361: LD_INT 6
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34387
34369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: LD_INT 4
34377: PUSH
34378: LD_INT 5
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: ST_TO_ADDR
34385: GO 35058
34387: LD_INT 10
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34413
34395: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34396: LD_ADDR_VAR 0 3
34400: PUSH
34401: LD_INT 4
34403: PUSH
34404: LD_INT 5
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: ST_TO_ADDR
34411: GO 35058
34413: LD_INT 22
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34421
34419: GO 34447
34421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34422: LD_ADDR_VAR 0 3
34426: PUSH
34427: LD_INT 11
34429: PUSH
34430: LD_INT 12
34432: PUSH
34433: LD_INT 13
34435: PUSH
34436: LD_INT 14
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: ST_TO_ADDR
34445: GO 35058
34447: LD_INT 23
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34455
34453: GO 34481
34455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34456: LD_ADDR_VAR 0 3
34460: PUSH
34461: LD_INT 11
34463: PUSH
34464: LD_INT 12
34466: PUSH
34467: LD_INT 13
34469: PUSH
34470: LD_INT 14
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
34479: GO 35058
34481: LD_INT 24
34483: DOUBLE
34484: EQUAL
34485: IFTRUE 34489
34487: GO 34515
34489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34490: LD_ADDR_VAR 0 3
34494: PUSH
34495: LD_INT 11
34497: PUSH
34498: LD_INT 12
34500: PUSH
34501: LD_INT 13
34503: PUSH
34504: LD_INT 14
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
34513: GO 35058
34515: LD_INT 30
34517: DOUBLE
34518: EQUAL
34519: IFTRUE 34523
34521: GO 34549
34523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34524: LD_ADDR_VAR 0 3
34528: PUSH
34529: LD_INT 11
34531: PUSH
34532: LD_INT 12
34534: PUSH
34535: LD_INT 13
34537: PUSH
34538: LD_INT 14
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
34547: GO 35058
34549: LD_INT 25
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 34575
34557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34558: LD_ADDR_VAR 0 3
34562: PUSH
34563: LD_INT 13
34565: PUSH
34566: LD_INT 14
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: ST_TO_ADDR
34573: GO 35058
34575: LD_INT 27
34577: DOUBLE
34578: EQUAL
34579: IFTRUE 34583
34581: GO 34601
34583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_INT 13
34591: PUSH
34592: LD_INT 14
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: ST_TO_ADDR
34599: GO 35058
34601: LD_EXP 37
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34611
34609: GO 34637
34611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_INT 11
34619: PUSH
34620: LD_INT 12
34622: PUSH
34623: LD_INT 13
34625: PUSH
34626: LD_INT 14
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
34635: GO 35058
34637: LD_INT 28
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34645
34643: GO 34663
34645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34646: LD_ADDR_VAR 0 3
34650: PUSH
34651: LD_INT 13
34653: PUSH
34654: LD_INT 14
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: ST_TO_ADDR
34661: GO 35058
34663: LD_INT 29
34665: DOUBLE
34666: EQUAL
34667: IFTRUE 34671
34669: GO 34689
34671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_INT 13
34679: PUSH
34680: LD_INT 14
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: ST_TO_ADDR
34687: GO 35058
34689: LD_INT 31
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34715
34697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_INT 13
34705: PUSH
34706: LD_INT 14
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: ST_TO_ADDR
34713: GO 35058
34715: LD_INT 26
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34741
34723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_INT 13
34731: PUSH
34732: LD_INT 14
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: ST_TO_ADDR
34739: GO 35058
34741: LD_INT 42
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34749
34747: GO 34775
34749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34750: LD_ADDR_VAR 0 3
34754: PUSH
34755: LD_INT 21
34757: PUSH
34758: LD_INT 22
34760: PUSH
34761: LD_INT 23
34763: PUSH
34764: LD_INT 24
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: ST_TO_ADDR
34773: GO 35058
34775: LD_INT 43
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34809
34783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34784: LD_ADDR_VAR 0 3
34788: PUSH
34789: LD_INT 21
34791: PUSH
34792: LD_INT 22
34794: PUSH
34795: LD_INT 23
34797: PUSH
34798: LD_INT 24
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
34807: GO 35058
34809: LD_INT 44
34811: DOUBLE
34812: EQUAL
34813: IFTRUE 34817
34815: GO 34843
34817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34818: LD_ADDR_VAR 0 3
34822: PUSH
34823: LD_INT 21
34825: PUSH
34826: LD_INT 22
34828: PUSH
34829: LD_INT 23
34831: PUSH
34832: LD_INT 24
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: ST_TO_ADDR
34841: GO 35058
34843: LD_INT 45
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34877
34851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34852: LD_ADDR_VAR 0 3
34856: PUSH
34857: LD_INT 21
34859: PUSH
34860: LD_INT 22
34862: PUSH
34863: LD_INT 23
34865: PUSH
34866: LD_INT 24
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: ST_TO_ADDR
34875: GO 35058
34877: LD_INT 49
34879: DOUBLE
34880: EQUAL
34881: IFTRUE 34885
34883: GO 34911
34885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34886: LD_ADDR_VAR 0 3
34890: PUSH
34891: LD_INT 21
34893: PUSH
34894: LD_INT 22
34896: PUSH
34897: LD_INT 23
34899: PUSH
34900: LD_INT 24
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
34909: GO 35058
34911: LD_INT 51
34913: DOUBLE
34914: EQUAL
34915: IFTRUE 34919
34917: GO 34945
34919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34920: LD_ADDR_VAR 0 3
34924: PUSH
34925: LD_INT 21
34927: PUSH
34928: LD_INT 22
34930: PUSH
34931: LD_INT 23
34933: PUSH
34934: LD_INT 24
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
34943: GO 35058
34945: LD_INT 52
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34953
34951: GO 34979
34953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_INT 21
34961: PUSH
34962: LD_INT 22
34964: PUSH
34965: LD_INT 23
34967: PUSH
34968: LD_INT 24
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: ST_TO_ADDR
34977: GO 35058
34979: LD_INT 53
34981: DOUBLE
34982: EQUAL
34983: IFTRUE 34987
34985: GO 35005
34987: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: LD_INT 23
34995: PUSH
34996: LD_INT 24
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: ST_TO_ADDR
35003: GO 35058
35005: LD_INT 46
35007: DOUBLE
35008: EQUAL
35009: IFTRUE 35013
35011: GO 35031
35013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35014: LD_ADDR_VAR 0 3
35018: PUSH
35019: LD_INT 23
35021: PUSH
35022: LD_INT 24
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: ST_TO_ADDR
35029: GO 35058
35031: LD_INT 47
35033: DOUBLE
35034: EQUAL
35035: IFTRUE 35039
35037: GO 35057
35039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35040: LD_ADDR_VAR 0 3
35044: PUSH
35045: LD_INT 23
35047: PUSH
35048: LD_INT 24
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: ST_TO_ADDR
35055: GO 35058
35057: POP
// result := ( chassis in result ) ;
35058: LD_ADDR_VAR 0 3
35062: PUSH
35063: LD_VAR 0 1
35067: PUSH
35068: LD_VAR 0 3
35072: IN
35073: ST_TO_ADDR
// end ;
35074: LD_VAR 0 3
35078: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35079: LD_INT 0
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// result := array ;
35088: LD_ADDR_VAR 0 5
35092: PUSH
35093: LD_VAR 0 1
35097: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35098: LD_VAR 0 1
35102: NOT
35103: PUSH
35104: LD_VAR 0 2
35108: NOT
35109: OR
35110: PUSH
35111: LD_VAR 0 3
35115: NOT
35116: OR
35117: PUSH
35118: LD_VAR 0 2
35122: PUSH
35123: LD_VAR 0 1
35127: GREATER
35128: OR
35129: PUSH
35130: LD_VAR 0 3
35134: PUSH
35135: LD_VAR 0 1
35139: GREATER
35140: OR
35141: IFFALSE 35145
// exit ;
35143: GO 35441
// if direction then
35145: LD_VAR 0 4
35149: IFFALSE 35213
// begin d := 1 ;
35151: LD_ADDR_VAR 0 9
35155: PUSH
35156: LD_INT 1
35158: ST_TO_ADDR
// if i_from > i_to then
35159: LD_VAR 0 2
35163: PUSH
35164: LD_VAR 0 3
35168: GREATER
35169: IFFALSE 35195
// length := ( array - i_from ) + i_to else
35171: LD_ADDR_VAR 0 11
35175: PUSH
35176: LD_VAR 0 1
35180: PUSH
35181: LD_VAR 0 2
35185: MINUS
35186: PUSH
35187: LD_VAR 0 3
35191: PLUS
35192: ST_TO_ADDR
35193: GO 35211
// length := i_to - i_from ;
35195: LD_ADDR_VAR 0 11
35199: PUSH
35200: LD_VAR 0 3
35204: PUSH
35205: LD_VAR 0 2
35209: MINUS
35210: ST_TO_ADDR
// end else
35211: GO 35274
// begin d := - 1 ;
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: ST_TO_ADDR
// if i_from > i_to then
35222: LD_VAR 0 2
35226: PUSH
35227: LD_VAR 0 3
35231: GREATER
35232: IFFALSE 35252
// length := i_from - i_to else
35234: LD_ADDR_VAR 0 11
35238: PUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 3
35248: MINUS
35249: ST_TO_ADDR
35250: GO 35274
// length := ( array - i_to ) + i_from ;
35252: LD_ADDR_VAR 0 11
35256: PUSH
35257: LD_VAR 0 1
35261: PUSH
35262: LD_VAR 0 3
35266: MINUS
35267: PUSH
35268: LD_VAR 0 2
35272: PLUS
35273: ST_TO_ADDR
// end ; if not length then
35274: LD_VAR 0 11
35278: NOT
35279: IFFALSE 35283
// exit ;
35281: GO 35441
// tmp := array ;
35283: LD_ADDR_VAR 0 10
35287: PUSH
35288: LD_VAR 0 1
35292: ST_TO_ADDR
// for i = 1 to length do
35293: LD_ADDR_VAR 0 6
35297: PUSH
35298: DOUBLE
35299: LD_INT 1
35301: DEC
35302: ST_TO_ADDR
35303: LD_VAR 0 11
35307: PUSH
35308: FOR_TO
35309: IFFALSE 35429
// begin for j = 1 to array do
35311: LD_ADDR_VAR 0 7
35315: PUSH
35316: DOUBLE
35317: LD_INT 1
35319: DEC
35320: ST_TO_ADDR
35321: LD_VAR 0 1
35325: PUSH
35326: FOR_TO
35327: IFFALSE 35415
// begin k := j + d ;
35329: LD_ADDR_VAR 0 8
35333: PUSH
35334: LD_VAR 0 7
35338: PUSH
35339: LD_VAR 0 9
35343: PLUS
35344: ST_TO_ADDR
// if k > array then
35345: LD_VAR 0 8
35349: PUSH
35350: LD_VAR 0 1
35354: GREATER
35355: IFFALSE 35365
// k := 1 ;
35357: LD_ADDR_VAR 0 8
35361: PUSH
35362: LD_INT 1
35364: ST_TO_ADDR
// if not k then
35365: LD_VAR 0 8
35369: NOT
35370: IFFALSE 35382
// k := array ;
35372: LD_ADDR_VAR 0 8
35376: PUSH
35377: LD_VAR 0 1
35381: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35382: LD_ADDR_VAR 0 10
35386: PUSH
35387: LD_VAR 0 10
35391: PPUSH
35392: LD_VAR 0 8
35396: PPUSH
35397: LD_VAR 0 1
35401: PUSH
35402: LD_VAR 0 7
35406: ARRAY
35407: PPUSH
35408: CALL_OW 1
35412: ST_TO_ADDR
// end ;
35413: GO 35326
35415: POP
35416: POP
// array := tmp ;
35417: LD_ADDR_VAR 0 1
35421: PUSH
35422: LD_VAR 0 10
35426: ST_TO_ADDR
// end ;
35427: GO 35308
35429: POP
35430: POP
// result := array ;
35431: LD_ADDR_VAR 0 5
35435: PUSH
35436: LD_VAR 0 1
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 5
35445: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35446: LD_INT 0
35448: PPUSH
35449: PPUSH
// result := 0 ;
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// if not array or not value in array then
35458: LD_VAR 0 1
35462: NOT
35463: PUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_VAR 0 1
35473: IN
35474: NOT
35475: OR
35476: IFFALSE 35480
// exit ;
35478: GO 35534
// for i = 1 to array do
35480: LD_ADDR_VAR 0 4
35484: PUSH
35485: DOUBLE
35486: LD_INT 1
35488: DEC
35489: ST_TO_ADDR
35490: LD_VAR 0 1
35494: PUSH
35495: FOR_TO
35496: IFFALSE 35532
// if value = array [ i ] then
35498: LD_VAR 0 2
35502: PUSH
35503: LD_VAR 0 1
35507: PUSH
35508: LD_VAR 0 4
35512: ARRAY
35513: EQUAL
35514: IFFALSE 35530
// begin result := i ;
35516: LD_ADDR_VAR 0 3
35520: PUSH
35521: LD_VAR 0 4
35525: ST_TO_ADDR
// exit ;
35526: POP
35527: POP
35528: GO 35534
// end ;
35530: GO 35495
35532: POP
35533: POP
// end ;
35534: LD_VAR 0 3
35538: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35539: LD_INT 0
35541: PPUSH
// vc_chassis := chassis ;
35542: LD_ADDR_OWVAR 37
35546: PUSH
35547: LD_VAR 0 1
35551: ST_TO_ADDR
// vc_engine := engine ;
35552: LD_ADDR_OWVAR 39
35556: PUSH
35557: LD_VAR 0 2
35561: ST_TO_ADDR
// vc_control := control ;
35562: LD_ADDR_OWVAR 38
35566: PUSH
35567: LD_VAR 0 3
35571: ST_TO_ADDR
// vc_weapon := weapon ;
35572: LD_ADDR_OWVAR 40
35576: PUSH
35577: LD_VAR 0 4
35581: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35582: LD_ADDR_OWVAR 41
35586: PUSH
35587: LD_VAR 0 5
35591: ST_TO_ADDR
// end ;
35592: LD_VAR 0 6
35596: RET
// export function WantPlant ( unit ) ; var task ; begin
35597: LD_INT 0
35599: PPUSH
35600: PPUSH
// result := false ;
35601: LD_ADDR_VAR 0 2
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 437
35623: ST_TO_ADDR
// if task then
35624: LD_VAR 0 3
35628: IFFALSE 35656
// if task [ 1 ] [ 1 ] = p then
35630: LD_VAR 0 3
35634: PUSH
35635: LD_INT 1
35637: ARRAY
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PUSH
35643: LD_STRING p
35645: EQUAL
35646: IFFALSE 35656
// result := true ;
35648: LD_ADDR_VAR 0 2
35652: PUSH
35653: LD_INT 1
35655: ST_TO_ADDR
// end ;
35656: LD_VAR 0 2
35660: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35661: LD_INT 0
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
// if pos < 1 then
35667: LD_VAR 0 2
35671: PUSH
35672: LD_INT 1
35674: LESS
35675: IFFALSE 35679
// exit ;
35677: GO 35982
// if pos = 1 then
35679: LD_VAR 0 2
35683: PUSH
35684: LD_INT 1
35686: EQUAL
35687: IFFALSE 35720
// result := Replace ( arr , pos [ 1 ] , value ) else
35689: LD_ADDR_VAR 0 4
35693: PUSH
35694: LD_VAR 0 1
35698: PPUSH
35699: LD_VAR 0 2
35703: PUSH
35704: LD_INT 1
35706: ARRAY
35707: PPUSH
35708: LD_VAR 0 3
35712: PPUSH
35713: CALL_OW 1
35717: ST_TO_ADDR
35718: GO 35982
// begin tmp := arr ;
35720: LD_ADDR_VAR 0 6
35724: PUSH
35725: LD_VAR 0 1
35729: ST_TO_ADDR
// s_arr := [ tmp ] ;
35730: LD_ADDR_VAR 0 7
35734: PUSH
35735: LD_VAR 0 6
35739: PUSH
35740: EMPTY
35741: LIST
35742: ST_TO_ADDR
// for i = 1 to pos - 1 do
35743: LD_ADDR_VAR 0 5
35747: PUSH
35748: DOUBLE
35749: LD_INT 1
35751: DEC
35752: ST_TO_ADDR
35753: LD_VAR 0 2
35757: PUSH
35758: LD_INT 1
35760: MINUS
35761: PUSH
35762: FOR_TO
35763: IFFALSE 35808
// begin tmp := tmp [ pos [ i ] ] ;
35765: LD_ADDR_VAR 0 6
35769: PUSH
35770: LD_VAR 0 6
35774: PUSH
35775: LD_VAR 0 2
35779: PUSH
35780: LD_VAR 0 5
35784: ARRAY
35785: ARRAY
35786: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35787: LD_ADDR_VAR 0 7
35791: PUSH
35792: LD_VAR 0 7
35796: PUSH
35797: LD_VAR 0 6
35801: PUSH
35802: EMPTY
35803: LIST
35804: ADD
35805: ST_TO_ADDR
// end ;
35806: GO 35762
35808: POP
35809: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35810: LD_ADDR_VAR 0 6
35814: PUSH
35815: LD_VAR 0 6
35819: PPUSH
35820: LD_VAR 0 2
35824: PUSH
35825: LD_VAR 0 2
35829: ARRAY
35830: PPUSH
35831: LD_VAR 0 3
35835: PPUSH
35836: CALL_OW 1
35840: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35841: LD_ADDR_VAR 0 7
35845: PUSH
35846: LD_VAR 0 7
35850: PPUSH
35851: LD_VAR 0 7
35855: PPUSH
35856: LD_VAR 0 6
35860: PPUSH
35861: CALL_OW 1
35865: ST_TO_ADDR
// for i = s_arr downto 2 do
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: DOUBLE
35872: LD_VAR 0 7
35876: INC
35877: ST_TO_ADDR
35878: LD_INT 2
35880: PUSH
35881: FOR_DOWNTO
35882: IFFALSE 35966
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35884: LD_ADDR_VAR 0 6
35888: PUSH
35889: LD_VAR 0 7
35893: PUSH
35894: LD_VAR 0 5
35898: PUSH
35899: LD_INT 1
35901: MINUS
35902: ARRAY
35903: PPUSH
35904: LD_VAR 0 2
35908: PUSH
35909: LD_VAR 0 5
35913: PUSH
35914: LD_INT 1
35916: MINUS
35917: ARRAY
35918: PPUSH
35919: LD_VAR 0 7
35923: PUSH
35924: LD_VAR 0 5
35928: ARRAY
35929: PPUSH
35930: CALL_OW 1
35934: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35935: LD_ADDR_VAR 0 7
35939: PUSH
35940: LD_VAR 0 7
35944: PPUSH
35945: LD_VAR 0 5
35949: PUSH
35950: LD_INT 1
35952: MINUS
35953: PPUSH
35954: LD_VAR 0 6
35958: PPUSH
35959: CALL_OW 1
35963: ST_TO_ADDR
// end ;
35964: GO 35881
35966: POP
35967: POP
// result := s_arr [ 1 ] ;
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_VAR 0 7
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: ST_TO_ADDR
// end ; end ;
35982: LD_VAR 0 4
35986: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35987: LD_INT 0
35989: PPUSH
35990: PPUSH
// if not list then
35991: LD_VAR 0 1
35995: NOT
35996: IFFALSE 36000
// exit ;
35998: GO 36091
// i := list [ pos1 ] ;
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: LD_VAR 0 1
36009: PUSH
36010: LD_VAR 0 2
36014: ARRAY
36015: ST_TO_ADDR
// if not i then
36016: LD_VAR 0 5
36020: NOT
36021: IFFALSE 36025
// exit ;
36023: GO 36091
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36025: LD_ADDR_VAR 0 1
36029: PUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: LD_VAR 0 1
36044: PUSH
36045: LD_VAR 0 3
36049: ARRAY
36050: PPUSH
36051: CALL_OW 1
36055: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36056: LD_ADDR_VAR 0 1
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: LD_VAR 0 5
36075: PPUSH
36076: CALL_OW 1
36080: ST_TO_ADDR
// result := list ;
36081: LD_ADDR_VAR 0 4
36085: PUSH
36086: LD_VAR 0 1
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 4
36095: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36096: LD_INT 0
36098: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36099: LD_ADDR_VAR 0 5
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 250
36113: PPUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 251
36123: PPUSH
36124: LD_VAR 0 2
36128: PPUSH
36129: LD_VAR 0 3
36133: PPUSH
36134: LD_VAR 0 4
36138: PPUSH
36139: CALL 36149 0 5
36143: ST_TO_ADDR
// end ;
36144: LD_VAR 0 5
36148: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36149: LD_INT 0
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
// if not list then
36155: LD_VAR 0 3
36159: NOT
36160: IFFALSE 36164
// exit ;
36162: GO 36552
// result := [ ] ;
36164: LD_ADDR_VAR 0 6
36168: PUSH
36169: EMPTY
36170: ST_TO_ADDR
// for i in list do
36171: LD_ADDR_VAR 0 7
36175: PUSH
36176: LD_VAR 0 3
36180: PUSH
36181: FOR_IN
36182: IFFALSE 36384
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_VAR 0 7
36193: PPUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_VAR 0 2
36203: PPUSH
36204: CALL_OW 297
36208: ST_TO_ADDR
// if not result then
36209: LD_VAR 0 6
36213: NOT
36214: IFFALSE 36240
// result := [ [ i , tmp ] ] else
36216: LD_ADDR_VAR 0 6
36220: PUSH
36221: LD_VAR 0 7
36225: PUSH
36226: LD_VAR 0 9
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: EMPTY
36236: LIST
36237: ST_TO_ADDR
36238: GO 36382
// begin if result [ result ] [ 2 ] < tmp then
36240: LD_VAR 0 6
36244: PUSH
36245: LD_VAR 0 6
36249: ARRAY
36250: PUSH
36251: LD_INT 2
36253: ARRAY
36254: PUSH
36255: LD_VAR 0 9
36259: LESS
36260: IFFALSE 36302
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36262: LD_ADDR_VAR 0 6
36266: PUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: LD_VAR 0 6
36276: PUSH
36277: LD_INT 1
36279: PLUS
36280: PPUSH
36281: LD_VAR 0 7
36285: PUSH
36286: LD_VAR 0 9
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PPUSH
36295: CALL_OW 2
36299: ST_TO_ADDR
36300: GO 36382
// for j = 1 to result do
36302: LD_ADDR_VAR 0 8
36306: PUSH
36307: DOUBLE
36308: LD_INT 1
36310: DEC
36311: ST_TO_ADDR
36312: LD_VAR 0 6
36316: PUSH
36317: FOR_TO
36318: IFFALSE 36380
// begin if tmp < result [ j ] [ 2 ] then
36320: LD_VAR 0 9
36324: PUSH
36325: LD_VAR 0 6
36329: PUSH
36330: LD_VAR 0 8
36334: ARRAY
36335: PUSH
36336: LD_INT 2
36338: ARRAY
36339: LESS
36340: IFFALSE 36378
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36342: LD_ADDR_VAR 0 6
36346: PUSH
36347: LD_VAR 0 6
36351: PPUSH
36352: LD_VAR 0 8
36356: PPUSH
36357: LD_VAR 0 7
36361: PUSH
36362: LD_VAR 0 9
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PPUSH
36371: CALL_OW 2
36375: ST_TO_ADDR
// break ;
36376: GO 36380
// end ; end ;
36378: GO 36317
36380: POP
36381: POP
// end ; end ;
36382: GO 36181
36384: POP
36385: POP
// if result and not asc then
36386: LD_VAR 0 6
36390: PUSH
36391: LD_VAR 0 4
36395: NOT
36396: AND
36397: IFFALSE 36472
// begin tmp := result ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_VAR 0 6
36408: ST_TO_ADDR
// for i = tmp downto 1 do
36409: LD_ADDR_VAR 0 7
36413: PUSH
36414: DOUBLE
36415: LD_VAR 0 9
36419: INC
36420: ST_TO_ADDR
36421: LD_INT 1
36423: PUSH
36424: FOR_DOWNTO
36425: IFFALSE 36470
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36427: LD_ADDR_VAR 0 6
36431: PUSH
36432: LD_VAR 0 6
36436: PPUSH
36437: LD_VAR 0 9
36441: PUSH
36442: LD_VAR 0 7
36446: MINUS
36447: PUSH
36448: LD_INT 1
36450: PLUS
36451: PPUSH
36452: LD_VAR 0 9
36456: PUSH
36457: LD_VAR 0 7
36461: ARRAY
36462: PPUSH
36463: CALL_OW 1
36467: ST_TO_ADDR
36468: GO 36424
36470: POP
36471: POP
// end ; tmp := [ ] ;
36472: LD_ADDR_VAR 0 9
36476: PUSH
36477: EMPTY
36478: ST_TO_ADDR
// if mode then
36479: LD_VAR 0 5
36483: IFFALSE 36552
// begin for i = 1 to result do
36485: LD_ADDR_VAR 0 7
36489: PUSH
36490: DOUBLE
36491: LD_INT 1
36493: DEC
36494: ST_TO_ADDR
36495: LD_VAR 0 6
36499: PUSH
36500: FOR_TO
36501: IFFALSE 36540
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36503: LD_ADDR_VAR 0 9
36507: PUSH
36508: LD_VAR 0 9
36512: PPUSH
36513: LD_VAR 0 7
36517: PPUSH
36518: LD_VAR 0 6
36522: PUSH
36523: LD_VAR 0 7
36527: ARRAY
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: PPUSH
36533: CALL_OW 1
36537: ST_TO_ADDR
36538: GO 36500
36540: POP
36541: POP
// result := tmp ;
36542: LD_ADDR_VAR 0 6
36546: PUSH
36547: LD_VAR 0 9
36551: ST_TO_ADDR
// end ; end ;
36552: LD_VAR 0 6
36556: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36557: LD_INT 0
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// if not x or not y then
36587: LD_VAR 0 2
36591: NOT
36592: PUSH
36593: LD_VAR 0 3
36597: NOT
36598: OR
36599: IFFALSE 36603
// exit ;
36601: GO 38255
// if not range then
36603: LD_VAR 0 4
36607: NOT
36608: IFFALSE 36618
// range := 10 ;
36610: LD_ADDR_VAR 0 4
36614: PUSH
36615: LD_INT 10
36617: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36618: LD_ADDR_VAR 0 8
36622: PUSH
36623: LD_INT 81
36625: PUSH
36626: LD_VAR 0 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 92
36637: PUSH
36638: LD_VAR 0 2
36642: PUSH
36643: LD_VAR 0 3
36647: PUSH
36648: LD_VAR 0 4
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 21
36664: PUSH
36665: LD_INT 3
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PPUSH
36681: CALL_OW 69
36685: ST_TO_ADDR
// if not tmp then
36686: LD_VAR 0 8
36690: NOT
36691: IFFALSE 36695
// exit ;
36693: GO 38255
// for i in tmp do
36695: LD_ADDR_VAR 0 6
36699: PUSH
36700: LD_VAR 0 8
36704: PUSH
36705: FOR_IN
36706: IFFALSE 38230
// begin points := [ 0 , 0 , 0 ] ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// bpoints := 1 ;
36727: LD_ADDR_VAR 0 10
36731: PUSH
36732: LD_INT 1
36734: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 247
36744: PUSH
36745: LD_INT 1
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36753
36751: GO 37331
36753: POP
// begin if GetClass ( i ) = 1 then
36754: LD_VAR 0 6
36758: PPUSH
36759: CALL_OW 257
36763: PUSH
36764: LD_INT 1
36766: EQUAL
36767: IFFALSE 36788
// points := [ 10 , 5 , 3 ] ;
36769: LD_ADDR_VAR 0 9
36773: PUSH
36774: LD_INT 10
36776: PUSH
36777: LD_INT 5
36779: PUSH
36780: LD_INT 3
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36788: LD_VAR 0 6
36792: PPUSH
36793: CALL_OW 257
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 3
36803: PUSH
36804: LD_INT 4
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: IN
36812: IFFALSE 36833
// points := [ 3 , 2 , 1 ] ;
36814: LD_ADDR_VAR 0 9
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36833: LD_VAR 0 6
36837: PPUSH
36838: CALL_OW 257
36842: PUSH
36843: LD_INT 5
36845: EQUAL
36846: IFFALSE 36867
// points := [ 130 , 5 , 2 ] ;
36848: LD_ADDR_VAR 0 9
36852: PUSH
36853: LD_INT 130
36855: PUSH
36856: LD_INT 5
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36867: LD_VAR 0 6
36871: PPUSH
36872: CALL_OW 257
36876: PUSH
36877: LD_INT 8
36879: EQUAL
36880: IFFALSE 36901
// points := [ 35 , 35 , 30 ] ;
36882: LD_ADDR_VAR 0 9
36886: PUSH
36887: LD_INT 35
36889: PUSH
36890: LD_INT 35
36892: PUSH
36893: LD_INT 30
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36901: LD_VAR 0 6
36905: PPUSH
36906: CALL_OW 257
36910: PUSH
36911: LD_INT 9
36913: EQUAL
36914: IFFALSE 36935
// points := [ 20 , 55 , 40 ] ;
36916: LD_ADDR_VAR 0 9
36920: PUSH
36921: LD_INT 20
36923: PUSH
36924: LD_INT 55
36926: PUSH
36927: LD_INT 40
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36935: LD_VAR 0 6
36939: PPUSH
36940: CALL_OW 257
36944: PUSH
36945: LD_INT 12
36947: PUSH
36948: LD_INT 16
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: IN
36955: IFFALSE 36976
// points := [ 5 , 3 , 2 ] ;
36957: LD_ADDR_VAR 0 9
36961: PUSH
36962: LD_INT 5
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36976: LD_VAR 0 6
36980: PPUSH
36981: CALL_OW 257
36985: PUSH
36986: LD_INT 17
36988: EQUAL
36989: IFFALSE 37010
// points := [ 100 , 50 , 75 ] ;
36991: LD_ADDR_VAR 0 9
36995: PUSH
36996: LD_INT 100
36998: PUSH
36999: LD_INT 50
37001: PUSH
37002: LD_INT 75
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37010: LD_VAR 0 6
37014: PPUSH
37015: CALL_OW 257
37019: PUSH
37020: LD_INT 15
37022: EQUAL
37023: IFFALSE 37044
// points := [ 10 , 5 , 3 ] ;
37025: LD_ADDR_VAR 0 9
37029: PUSH
37030: LD_INT 10
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37044: LD_VAR 0 6
37048: PPUSH
37049: CALL_OW 257
37053: PUSH
37054: LD_INT 14
37056: EQUAL
37057: IFFALSE 37078
// points := [ 10 , 0 , 0 ] ;
37059: LD_ADDR_VAR 0 9
37063: PUSH
37064: LD_INT 10
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37078: LD_VAR 0 6
37082: PPUSH
37083: CALL_OW 257
37087: PUSH
37088: LD_INT 11
37090: EQUAL
37091: IFFALSE 37112
// points := [ 30 , 10 , 5 ] ;
37093: LD_ADDR_VAR 0 9
37097: PUSH
37098: LD_INT 30
37100: PUSH
37101: LD_INT 10
37103: PUSH
37104: LD_INT 5
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37112: LD_VAR 0 1
37116: PPUSH
37117: LD_INT 5
37119: PPUSH
37120: CALL_OW 321
37124: PUSH
37125: LD_INT 2
37127: EQUAL
37128: IFFALSE 37145
// bpoints := bpoints * 1.8 ;
37130: LD_ADDR_VAR 0 10
37134: PUSH
37135: LD_VAR 0 10
37139: PUSH
37140: LD_REAL  1.80000000000000E+0000
37143: MUL
37144: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37145: LD_VAR 0 6
37149: PPUSH
37150: CALL_OW 257
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: IN
37173: PUSH
37174: LD_VAR 0 1
37178: PPUSH
37179: LD_INT 51
37181: PPUSH
37182: CALL_OW 321
37186: PUSH
37187: LD_INT 2
37189: EQUAL
37190: AND
37191: IFFALSE 37208
// bpoints := bpoints * 1.2 ;
37193: LD_ADDR_VAR 0 10
37197: PUSH
37198: LD_VAR 0 10
37202: PUSH
37203: LD_REAL  1.20000000000000E+0000
37206: MUL
37207: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 257
37217: PUSH
37218: LD_INT 5
37220: PUSH
37221: LD_INT 7
37223: PUSH
37224: LD_INT 9
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: IN
37232: PUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: LD_INT 52
37240: PPUSH
37241: CALL_OW 321
37245: PUSH
37246: LD_INT 2
37248: EQUAL
37249: AND
37250: IFFALSE 37267
// bpoints := bpoints * 1.5 ;
37252: LD_ADDR_VAR 0 10
37256: PUSH
37257: LD_VAR 0 10
37261: PUSH
37262: LD_REAL  1.50000000000000E+0000
37265: MUL
37266: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37267: LD_VAR 0 1
37271: PPUSH
37272: LD_INT 66
37274: PPUSH
37275: CALL_OW 321
37279: PUSH
37280: LD_INT 2
37282: EQUAL
37283: IFFALSE 37300
// bpoints := bpoints * 1.1 ;
37285: LD_ADDR_VAR 0 10
37289: PUSH
37290: LD_VAR 0 10
37294: PUSH
37295: LD_REAL  1.10000000000000E+0000
37298: MUL
37299: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37300: LD_ADDR_VAR 0 10
37304: PUSH
37305: LD_VAR 0 10
37309: PUSH
37310: LD_VAR 0 6
37314: PPUSH
37315: LD_INT 1
37317: PPUSH
37318: CALL_OW 259
37322: PUSH
37323: LD_REAL  1.15000000000000E+0000
37326: MUL
37327: MUL
37328: ST_TO_ADDR
// end ; unit_vehicle :
37329: GO 38159
37331: LD_INT 2
37333: DOUBLE
37334: EQUAL
37335: IFTRUE 37339
37337: GO 38147
37339: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 264
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 42
37355: PUSH
37356: LD_INT 24
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: IN
37364: IFFALSE 37385
// points := [ 25 , 5 , 3 ] ;
37366: LD_ADDR_VAR 0 9
37370: PUSH
37371: LD_INT 25
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: LIST
37384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37385: LD_VAR 0 6
37389: PPUSH
37390: CALL_OW 264
37394: PUSH
37395: LD_INT 4
37397: PUSH
37398: LD_INT 43
37400: PUSH
37401: LD_INT 25
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: IN
37409: IFFALSE 37430
// points := [ 40 , 15 , 5 ] ;
37411: LD_ADDR_VAR 0 9
37415: PUSH
37416: LD_INT 40
37418: PUSH
37419: LD_INT 15
37421: PUSH
37422: LD_INT 5
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37430: LD_VAR 0 6
37434: PPUSH
37435: CALL_OW 264
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 23
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: IN
37450: IFFALSE 37471
// points := [ 7 , 25 , 8 ] ;
37452: LD_ADDR_VAR 0 9
37456: PUSH
37457: LD_INT 7
37459: PUSH
37460: LD_INT 25
37462: PUSH
37463: LD_INT 8
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37471: LD_VAR 0 6
37475: PPUSH
37476: CALL_OW 264
37480: PUSH
37481: LD_INT 5
37483: PUSH
37484: LD_INT 27
37486: PUSH
37487: LD_INT 44
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: IN
37495: IFFALSE 37516
// points := [ 14 , 50 , 16 ] ;
37497: LD_ADDR_VAR 0 9
37501: PUSH
37502: LD_INT 14
37504: PUSH
37505: LD_INT 50
37507: PUSH
37508: LD_INT 16
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37516: LD_VAR 0 6
37520: PPUSH
37521: CALL_OW 264
37525: PUSH
37526: LD_INT 6
37528: PUSH
37529: LD_INT 46
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: IN
37536: IFFALSE 37557
// points := [ 32 , 120 , 70 ] ;
37538: LD_ADDR_VAR 0 9
37542: PUSH
37543: LD_INT 32
37545: PUSH
37546: LD_INT 120
37548: PUSH
37549: LD_INT 70
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37557: LD_VAR 0 6
37561: PPUSH
37562: CALL_OW 264
37566: PUSH
37567: LD_INT 7
37569: PUSH
37570: LD_INT 28
37572: PUSH
37573: LD_INT 45
37575: PUSH
37576: LD_EXP 37
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: IN
37587: IFFALSE 37608
// points := [ 35 , 20 , 45 ] ;
37589: LD_ADDR_VAR 0 9
37593: PUSH
37594: LD_INT 35
37596: PUSH
37597: LD_INT 20
37599: PUSH
37600: LD_INT 45
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: LIST
37607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37608: LD_VAR 0 6
37612: PPUSH
37613: CALL_OW 264
37617: PUSH
37618: LD_INT 47
37620: PUSH
37621: EMPTY
37622: LIST
37623: IN
37624: IFFALSE 37645
// points := [ 67 , 45 , 75 ] ;
37626: LD_ADDR_VAR 0 9
37630: PUSH
37631: LD_INT 67
37633: PUSH
37634: LD_INT 45
37636: PUSH
37637: LD_INT 75
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37645: LD_VAR 0 6
37649: PPUSH
37650: CALL_OW 264
37654: PUSH
37655: LD_INT 26
37657: PUSH
37658: EMPTY
37659: LIST
37660: IN
37661: IFFALSE 37682
// points := [ 120 , 30 , 80 ] ;
37663: LD_ADDR_VAR 0 9
37667: PUSH
37668: LD_INT 120
37670: PUSH
37671: LD_INT 30
37673: PUSH
37674: LD_INT 80
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37682: LD_VAR 0 6
37686: PPUSH
37687: CALL_OW 264
37691: PUSH
37692: LD_INT 22
37694: PUSH
37695: EMPTY
37696: LIST
37697: IN
37698: IFFALSE 37719
// points := [ 40 , 1 , 1 ] ;
37700: LD_ADDR_VAR 0 9
37704: PUSH
37705: LD_INT 40
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37719: LD_VAR 0 6
37723: PPUSH
37724: CALL_OW 264
37728: PUSH
37729: LD_INT 29
37731: PUSH
37732: EMPTY
37733: LIST
37734: IN
37735: IFFALSE 37756
// points := [ 70 , 200 , 400 ] ;
37737: LD_ADDR_VAR 0 9
37741: PUSH
37742: LD_INT 70
37744: PUSH
37745: LD_INT 200
37747: PUSH
37748: LD_INT 400
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 264
37765: PUSH
37766: LD_INT 14
37768: PUSH
37769: LD_INT 53
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: IN
37776: IFFALSE 37797
// points := [ 40 , 10 , 20 ] ;
37778: LD_ADDR_VAR 0 9
37782: PUSH
37783: LD_INT 40
37785: PUSH
37786: LD_INT 10
37788: PUSH
37789: LD_INT 20
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37797: LD_VAR 0 6
37801: PPUSH
37802: CALL_OW 264
37806: PUSH
37807: LD_INT 9
37809: PUSH
37810: EMPTY
37811: LIST
37812: IN
37813: IFFALSE 37834
// points := [ 5 , 70 , 20 ] ;
37815: LD_ADDR_VAR 0 9
37819: PUSH
37820: LD_INT 5
37822: PUSH
37823: LD_INT 70
37825: PUSH
37826: LD_INT 20
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37834: LD_VAR 0 6
37838: PPUSH
37839: CALL_OW 264
37843: PUSH
37844: LD_INT 10
37846: PUSH
37847: EMPTY
37848: LIST
37849: IN
37850: IFFALSE 37871
// points := [ 35 , 110 , 70 ] ;
37852: LD_ADDR_VAR 0 9
37856: PUSH
37857: LD_INT 35
37859: PUSH
37860: LD_INT 110
37862: PUSH
37863: LD_INT 70
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37871: LD_VAR 0 6
37875: PPUSH
37876: CALL_OW 265
37880: PUSH
37881: LD_INT 25
37883: EQUAL
37884: IFFALSE 37905
// points := [ 80 , 65 , 100 ] ;
37886: LD_ADDR_VAR 0 9
37890: PUSH
37891: LD_INT 80
37893: PUSH
37894: LD_INT 65
37896: PUSH
37897: LD_INT 100
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37905: LD_VAR 0 6
37909: PPUSH
37910: CALL_OW 263
37914: PUSH
37915: LD_INT 1
37917: EQUAL
37918: IFFALSE 37953
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37920: LD_ADDR_VAR 0 10
37924: PUSH
37925: LD_VAR 0 10
37929: PUSH
37930: LD_VAR 0 6
37934: PPUSH
37935: CALL_OW 311
37939: PPUSH
37940: LD_INT 3
37942: PPUSH
37943: CALL_OW 259
37947: PUSH
37948: LD_INT 4
37950: MUL
37951: MUL
37952: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37953: LD_VAR 0 6
37957: PPUSH
37958: CALL_OW 263
37962: PUSH
37963: LD_INT 2
37965: EQUAL
37966: IFFALSE 38017
// begin j := IsControledBy ( i ) ;
37968: LD_ADDR_VAR 0 7
37972: PUSH
37973: LD_VAR 0 6
37977: PPUSH
37978: CALL_OW 312
37982: ST_TO_ADDR
// if j then
37983: LD_VAR 0 7
37987: IFFALSE 38017
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37989: LD_ADDR_VAR 0 10
37993: PUSH
37994: LD_VAR 0 10
37998: PUSH
37999: LD_VAR 0 7
38003: PPUSH
38004: LD_INT 3
38006: PPUSH
38007: CALL_OW 259
38011: PUSH
38012: LD_INT 3
38014: MUL
38015: MUL
38016: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38017: LD_VAR 0 6
38021: PPUSH
38022: CALL_OW 264
38026: PUSH
38027: LD_INT 5
38029: PUSH
38030: LD_INT 6
38032: PUSH
38033: LD_INT 46
38035: PUSH
38036: LD_INT 44
38038: PUSH
38039: LD_INT 47
38041: PUSH
38042: LD_INT 45
38044: PUSH
38045: LD_INT 28
38047: PUSH
38048: LD_INT 7
38050: PUSH
38051: LD_INT 27
38053: PUSH
38054: LD_INT 29
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: IN
38069: PUSH
38070: LD_VAR 0 1
38074: PPUSH
38075: LD_INT 52
38077: PPUSH
38078: CALL_OW 321
38082: PUSH
38083: LD_INT 2
38085: EQUAL
38086: AND
38087: IFFALSE 38104
// bpoints := bpoints * 1.2 ;
38089: LD_ADDR_VAR 0 10
38093: PUSH
38094: LD_VAR 0 10
38098: PUSH
38099: LD_REAL  1.20000000000000E+0000
38102: MUL
38103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38104: LD_VAR 0 6
38108: PPUSH
38109: CALL_OW 264
38113: PUSH
38114: LD_INT 6
38116: PUSH
38117: LD_INT 46
38119: PUSH
38120: LD_INT 47
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: IN
38128: IFFALSE 38145
// bpoints := bpoints * 1.2 ;
38130: LD_ADDR_VAR 0 10
38134: PUSH
38135: LD_VAR 0 10
38139: PUSH
38140: LD_REAL  1.20000000000000E+0000
38143: MUL
38144: ST_TO_ADDR
// end ; unit_building :
38145: GO 38159
38147: LD_INT 3
38149: DOUBLE
38150: EQUAL
38151: IFTRUE 38155
38153: GO 38158
38155: POP
// ; end ;
38156: GO 38159
38158: POP
// for j = 1 to 3 do
38159: LD_ADDR_VAR 0 7
38163: PUSH
38164: DOUBLE
38165: LD_INT 1
38167: DEC
38168: ST_TO_ADDR
38169: LD_INT 3
38171: PUSH
38172: FOR_TO
38173: IFFALSE 38226
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_VAR 0 5
38184: PPUSH
38185: LD_VAR 0 7
38189: PPUSH
38190: LD_VAR 0 5
38194: PUSH
38195: LD_VAR 0 7
38199: ARRAY
38200: PUSH
38201: LD_VAR 0 9
38205: PUSH
38206: LD_VAR 0 7
38210: ARRAY
38211: PUSH
38212: LD_VAR 0 10
38216: MUL
38217: PLUS
38218: PPUSH
38219: CALL_OW 1
38223: ST_TO_ADDR
38224: GO 38172
38226: POP
38227: POP
// end ;
38228: GO 36705
38230: POP
38231: POP
// result := Replace ( result , 4 , tmp ) ;
38232: LD_ADDR_VAR 0 5
38236: PUSH
38237: LD_VAR 0 5
38241: PPUSH
38242: LD_INT 4
38244: PPUSH
38245: LD_VAR 0 8
38249: PPUSH
38250: CALL_OW 1
38254: ST_TO_ADDR
// end ;
38255: LD_VAR 0 5
38259: RET
// export function DangerAtRange ( unit , range ) ; begin
38260: LD_INT 0
38262: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: PPUSH
38278: LD_VAR 0 1
38282: PPUSH
38283: CALL_OW 250
38287: PPUSH
38288: LD_VAR 0 1
38292: PPUSH
38293: CALL_OW 251
38297: PPUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: CALL 36557 0 4
38307: ST_TO_ADDR
// end ;
38308: LD_VAR 0 3
38312: RET
// export function DangerInArea ( side , area ) ; begin
38313: LD_INT 0
38315: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: LD_VAR 0 2
38325: PPUSH
38326: LD_INT 81
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PPUSH
38338: CALL_OW 70
38342: ST_TO_ADDR
// end ;
38343: LD_VAR 0 3
38347: RET
// export function IsExtension ( b ) ; begin
38348: LD_INT 0
38350: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38351: LD_ADDR_VAR 0 2
38355: PUSH
38356: LD_VAR 0 1
38360: PUSH
38361: LD_INT 23
38363: PUSH
38364: LD_INT 20
38366: PUSH
38367: LD_INT 22
38369: PUSH
38370: LD_INT 17
38372: PUSH
38373: LD_INT 24
38375: PUSH
38376: LD_INT 21
38378: PUSH
38379: LD_INT 19
38381: PUSH
38382: LD_INT 16
38384: PUSH
38385: LD_INT 25
38387: PUSH
38388: LD_INT 18
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: IN
38403: ST_TO_ADDR
// end ;
38404: LD_VAR 0 2
38408: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38409: LD_INT 0
38411: PPUSH
38412: PPUSH
38413: PPUSH
// result := [ ] ;
38414: LD_ADDR_VAR 0 4
38418: PUSH
38419: EMPTY
38420: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 2
38430: PPUSH
38431: LD_INT 21
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PPUSH
38441: CALL_OW 70
38445: ST_TO_ADDR
// if not tmp then
38446: LD_VAR 0 5
38450: NOT
38451: IFFALSE 38455
// exit ;
38453: GO 38519
// if checkLink then
38455: LD_VAR 0 3
38459: IFFALSE 38509
// begin for i in tmp do
38461: LD_ADDR_VAR 0 6
38465: PUSH
38466: LD_VAR 0 5
38470: PUSH
38471: FOR_IN
38472: IFFALSE 38507
// if GetBase ( i ) <> base then
38474: LD_VAR 0 6
38478: PPUSH
38479: CALL_OW 274
38483: PUSH
38484: LD_VAR 0 1
38488: NONEQUAL
38489: IFFALSE 38505
// ComLinkToBase ( base , i ) ;
38491: LD_VAR 0 1
38495: PPUSH
38496: LD_VAR 0 6
38500: PPUSH
38501: CALL_OW 169
38505: GO 38471
38507: POP
38508: POP
// end ; result := tmp ;
38509: LD_ADDR_VAR 0 4
38513: PUSH
38514: LD_VAR 0 5
38518: ST_TO_ADDR
// end ;
38519: LD_VAR 0 4
38523: RET
// export function ComComplete ( units , b ) ; var i ; begin
38524: LD_INT 0
38526: PPUSH
38527: PPUSH
// if not units then
38528: LD_VAR 0 1
38532: NOT
38533: IFFALSE 38537
// exit ;
38535: GO 38627
// for i in units do
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: FOR_IN
38548: IFFALSE 38625
// if BuildingStatus ( b ) = bs_build then
38550: LD_VAR 0 2
38554: PPUSH
38555: CALL_OW 461
38559: PUSH
38560: LD_INT 1
38562: EQUAL
38563: IFFALSE 38623
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38565: LD_VAR 0 4
38569: PPUSH
38570: LD_STRING h
38572: PUSH
38573: LD_VAR 0 2
38577: PPUSH
38578: CALL_OW 250
38582: PUSH
38583: LD_VAR 0 2
38587: PPUSH
38588: CALL_OW 251
38592: PUSH
38593: LD_VAR 0 2
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: PPUSH
38619: CALL_OW 446
38623: GO 38547
38625: POP
38626: POP
// end ;
38627: LD_VAR 0 3
38631: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38640: LD_VAR 0 1
38644: NOT
38645: PUSH
38646: LD_VAR 0 1
38650: PPUSH
38651: CALL_OW 263
38655: PUSH
38656: LD_INT 2
38658: NONEQUAL
38659: OR
38660: IFFALSE 38664
// exit ;
38662: GO 38980
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38664: LD_ADDR_VAR 0 6
38668: PUSH
38669: LD_INT 22
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 255
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: PUSH
38689: LD_INT 30
38691: PUSH
38692: LD_INT 36
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 34
38701: PUSH
38702: LD_INT 31
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PPUSH
38718: CALL_OW 69
38722: ST_TO_ADDR
// if not tmp then
38723: LD_VAR 0 6
38727: NOT
38728: IFFALSE 38732
// exit ;
38730: GO 38980
// result := [ ] ;
38732: LD_ADDR_VAR 0 2
38736: PUSH
38737: EMPTY
38738: ST_TO_ADDR
// for i in tmp do
38739: LD_ADDR_VAR 0 3
38743: PUSH
38744: LD_VAR 0 6
38748: PUSH
38749: FOR_IN
38750: IFFALSE 38821
// begin t := UnitsInside ( i ) ;
38752: LD_ADDR_VAR 0 4
38756: PUSH
38757: LD_VAR 0 3
38761: PPUSH
38762: CALL_OW 313
38766: ST_TO_ADDR
// if t then
38767: LD_VAR 0 4
38771: IFFALSE 38819
// for j in t do
38773: LD_ADDR_VAR 0 7
38777: PUSH
38778: LD_VAR 0 4
38782: PUSH
38783: FOR_IN
38784: IFFALSE 38817
// result := Replace ( result , result + 1 , j ) ;
38786: LD_ADDR_VAR 0 2
38790: PUSH
38791: LD_VAR 0 2
38795: PPUSH
38796: LD_VAR 0 2
38800: PUSH
38801: LD_INT 1
38803: PLUS
38804: PPUSH
38805: LD_VAR 0 7
38809: PPUSH
38810: CALL_OW 1
38814: ST_TO_ADDR
38815: GO 38783
38817: POP
38818: POP
// end ;
38819: GO 38749
38821: POP
38822: POP
// if not result then
38823: LD_VAR 0 2
38827: NOT
38828: IFFALSE 38832
// exit ;
38830: GO 38980
// mech := result [ 1 ] ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: ST_TO_ADDR
// if result > 1 then
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 1
38853: GREATER
38854: IFFALSE 38966
// begin for i = 2 to result do
38856: LD_ADDR_VAR 0 3
38860: PUSH
38861: DOUBLE
38862: LD_INT 2
38864: DEC
38865: ST_TO_ADDR
38866: LD_VAR 0 2
38870: PUSH
38871: FOR_TO
38872: IFFALSE 38964
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38874: LD_ADDR_VAR 0 4
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_VAR 0 3
38888: ARRAY
38889: PPUSH
38890: LD_INT 3
38892: PPUSH
38893: CALL_OW 259
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_VAR 0 3
38907: ARRAY
38908: PPUSH
38909: CALL_OW 432
38913: MINUS
38914: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38915: LD_VAR 0 4
38919: PUSH
38920: LD_VAR 0 5
38924: PPUSH
38925: LD_INT 3
38927: PPUSH
38928: CALL_OW 259
38932: PUSH
38933: LD_VAR 0 5
38937: PPUSH
38938: CALL_OW 432
38942: MINUS
38943: GREATEREQUAL
38944: IFFALSE 38962
// mech := result [ i ] ;
38946: LD_ADDR_VAR 0 5
38950: PUSH
38951: LD_VAR 0 2
38955: PUSH
38956: LD_VAR 0 3
38960: ARRAY
38961: ST_TO_ADDR
// end ;
38962: GO 38871
38964: POP
38965: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38966: LD_VAR 0 1
38970: PPUSH
38971: LD_VAR 0 5
38975: PPUSH
38976: CALL_OW 135
// end ;
38980: LD_VAR 0 2
38984: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38985: LD_INT 0
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
// result := [ ] ;
39000: LD_ADDR_VAR 0 7
39004: PUSH
39005: EMPTY
39006: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 266
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: IN
39027: NOT
39028: IFFALSE 39032
// exit ;
39030: GO 40666
// if name then
39032: LD_VAR 0 3
39036: IFFALSE 39052
// SetBName ( base_dep , name ) ;
39038: LD_VAR 0 1
39042: PPUSH
39043: LD_VAR 0 3
39047: PPUSH
39048: CALL_OW 500
// base := GetBase ( base_dep ) ;
39052: LD_ADDR_VAR 0 15
39056: PUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 274
39066: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39067: LD_ADDR_VAR 0 16
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 255
39081: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39082: LD_ADDR_VAR 0 17
39086: PUSH
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 248
39096: ST_TO_ADDR
// if sources then
39097: LD_VAR 0 5
39101: IFFALSE 39148
// for i = 1 to 3 do
39103: LD_ADDR_VAR 0 8
39107: PUSH
39108: DOUBLE
39109: LD_INT 1
39111: DEC
39112: ST_TO_ADDR
39113: LD_INT 3
39115: PUSH
39116: FOR_TO
39117: IFFALSE 39146
// AddResourceType ( base , i , sources [ i ] ) ;
39119: LD_VAR 0 15
39123: PPUSH
39124: LD_VAR 0 8
39128: PPUSH
39129: LD_VAR 0 5
39133: PUSH
39134: LD_VAR 0 8
39138: ARRAY
39139: PPUSH
39140: CALL_OW 276
39144: GO 39116
39146: POP
39147: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39148: LD_ADDR_VAR 0 18
39152: PUSH
39153: LD_VAR 0 15
39157: PPUSH
39158: LD_VAR 0 2
39162: PPUSH
39163: LD_INT 1
39165: PPUSH
39166: CALL 38409 0 3
39170: ST_TO_ADDR
// InitHc ;
39171: CALL_OW 19
// InitUc ;
39175: CALL_OW 18
// uc_side := side ;
39179: LD_ADDR_OWVAR 20
39183: PUSH
39184: LD_VAR 0 16
39188: ST_TO_ADDR
// uc_nation := nation ;
39189: LD_ADDR_OWVAR 21
39193: PUSH
39194: LD_VAR 0 17
39198: ST_TO_ADDR
// if buildings then
39199: LD_VAR 0 18
39203: IFFALSE 40525
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39205: LD_ADDR_VAR 0 19
39209: PUSH
39210: LD_VAR 0 18
39214: PPUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 30
39220: PUSH
39221: LD_INT 29
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 30
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: PPUSH
39243: CALL_OW 72
39247: ST_TO_ADDR
// if tmp then
39248: LD_VAR 0 19
39252: IFFALSE 39300
// for i in tmp do
39254: LD_ADDR_VAR 0 8
39258: PUSH
39259: LD_VAR 0 19
39263: PUSH
39264: FOR_IN
39265: IFFALSE 39298
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39267: LD_VAR 0 8
39271: PPUSH
39272: CALL_OW 250
39276: PPUSH
39277: LD_VAR 0 8
39281: PPUSH
39282: CALL_OW 251
39286: PPUSH
39287: LD_VAR 0 16
39291: PPUSH
39292: CALL_OW 441
39296: GO 39264
39298: POP
39299: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39300: LD_VAR 0 18
39304: PPUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 30
39310: PUSH
39311: LD_INT 32
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 30
39320: PUSH
39321: LD_INT 33
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: PPUSH
39333: CALL_OW 72
39337: IFFALSE 39425
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39339: LD_ADDR_VAR 0 8
39343: PUSH
39344: LD_VAR 0 18
39348: PPUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 30
39354: PUSH
39355: LD_INT 32
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 30
39364: PUSH
39365: LD_INT 33
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: PPUSH
39377: CALL_OW 72
39381: PUSH
39382: FOR_IN
39383: IFFALSE 39423
// begin if not GetBWeapon ( i ) then
39385: LD_VAR 0 8
39389: PPUSH
39390: CALL_OW 269
39394: NOT
39395: IFFALSE 39421
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39397: LD_VAR 0 8
39401: PPUSH
39402: LD_VAR 0 8
39406: PPUSH
39407: LD_VAR 0 2
39411: PPUSH
39412: CALL 40671 0 2
39416: PPUSH
39417: CALL_OW 431
// end ;
39421: GO 39382
39423: POP
39424: POP
// end ; for i = 1 to personel do
39425: LD_ADDR_VAR 0 8
39429: PUSH
39430: DOUBLE
39431: LD_INT 1
39433: DEC
39434: ST_TO_ADDR
39435: LD_VAR 0 6
39439: PUSH
39440: FOR_TO
39441: IFFALSE 40505
// begin if i > 4 then
39443: LD_VAR 0 8
39447: PUSH
39448: LD_INT 4
39450: GREATER
39451: IFFALSE 39455
// break ;
39453: GO 40505
// case i of 1 :
39455: LD_VAR 0 8
39459: PUSH
39460: LD_INT 1
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39548
39468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39469: LD_ADDR_VAR 0 12
39473: PUSH
39474: LD_VAR 0 18
39478: PPUSH
39479: LD_INT 22
39481: PUSH
39482: LD_VAR 0 16
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 58
39493: PUSH
39494: EMPTY
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 30
39502: PUSH
39503: LD_INT 32
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 5
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: PPUSH
39541: CALL_OW 72
39545: ST_TO_ADDR
39546: GO 39770
39548: LD_INT 2
39550: DOUBLE
39551: EQUAL
39552: IFTRUE 39556
39554: GO 39618
39556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39557: LD_ADDR_VAR 0 12
39561: PUSH
39562: LD_VAR 0 18
39566: PPUSH
39567: LD_INT 22
39569: PUSH
39570: LD_VAR 0 16
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 30
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 30
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PPUSH
39611: CALL_OW 72
39615: ST_TO_ADDR
39616: GO 39770
39618: LD_INT 3
39620: DOUBLE
39621: EQUAL
39622: IFTRUE 39626
39624: GO 39688
39626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39627: LD_ADDR_VAR 0 12
39631: PUSH
39632: LD_VAR 0 18
39636: PPUSH
39637: LD_INT 22
39639: PUSH
39640: LD_VAR 0 16
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 30
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 30
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PPUSH
39681: CALL_OW 72
39685: ST_TO_ADDR
39686: GO 39770
39688: LD_INT 4
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39769
39696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39697: LD_ADDR_VAR 0 12
39701: PUSH
39702: LD_VAR 0 18
39706: PPUSH
39707: LD_INT 22
39709: PUSH
39710: LD_VAR 0 16
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 30
39724: PUSH
39725: LD_INT 6
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 30
39734: PUSH
39735: LD_INT 7
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 30
39744: PUSH
39745: LD_INT 8
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PPUSH
39762: CALL_OW 72
39766: ST_TO_ADDR
39767: GO 39770
39769: POP
// if i = 1 then
39770: LD_VAR 0 8
39774: PUSH
39775: LD_INT 1
39777: EQUAL
39778: IFFALSE 39889
// begin tmp := [ ] ;
39780: LD_ADDR_VAR 0 19
39784: PUSH
39785: EMPTY
39786: ST_TO_ADDR
// for j in f do
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_VAR 0 12
39796: PUSH
39797: FOR_IN
39798: IFFALSE 39871
// if GetBType ( j ) = b_bunker then
39800: LD_VAR 0 9
39804: PPUSH
39805: CALL_OW 266
39809: PUSH
39810: LD_INT 32
39812: EQUAL
39813: IFFALSE 39840
// tmp := Insert ( tmp , 1 , j ) else
39815: LD_ADDR_VAR 0 19
39819: PUSH
39820: LD_VAR 0 19
39824: PPUSH
39825: LD_INT 1
39827: PPUSH
39828: LD_VAR 0 9
39832: PPUSH
39833: CALL_OW 2
39837: ST_TO_ADDR
39838: GO 39869
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39840: LD_ADDR_VAR 0 19
39844: PUSH
39845: LD_VAR 0 19
39849: PPUSH
39850: LD_VAR 0 19
39854: PUSH
39855: LD_INT 1
39857: PLUS
39858: PPUSH
39859: LD_VAR 0 9
39863: PPUSH
39864: CALL_OW 2
39868: ST_TO_ADDR
39869: GO 39797
39871: POP
39872: POP
// if tmp then
39873: LD_VAR 0 19
39877: IFFALSE 39889
// f := tmp ;
39879: LD_ADDR_VAR 0 12
39883: PUSH
39884: LD_VAR 0 19
39888: ST_TO_ADDR
// end ; x := personel [ i ] ;
39889: LD_ADDR_VAR 0 13
39893: PUSH
39894: LD_VAR 0 6
39898: PUSH
39899: LD_VAR 0 8
39903: ARRAY
39904: ST_TO_ADDR
// if x = - 1 then
39905: LD_VAR 0 13
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: EQUAL
39914: IFFALSE 40123
// begin for j in f do
39916: LD_ADDR_VAR 0 9
39920: PUSH
39921: LD_VAR 0 12
39925: PUSH
39926: FOR_IN
39927: IFFALSE 40119
// repeat InitHc ;
39929: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39933: LD_VAR 0 9
39937: PPUSH
39938: CALL_OW 266
39942: PUSH
39943: LD_INT 5
39945: EQUAL
39946: IFFALSE 40016
// begin if UnitsInside ( j ) < 3 then
39948: LD_VAR 0 9
39952: PPUSH
39953: CALL_OW 313
39957: PUSH
39958: LD_INT 3
39960: LESS
39961: IFFALSE 39997
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39963: LD_INT 0
39965: PPUSH
39966: LD_INT 5
39968: PUSH
39969: LD_INT 8
39971: PUSH
39972: LD_INT 9
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: PUSH
39980: LD_VAR 0 17
39984: ARRAY
39985: PPUSH
39986: LD_VAR 0 4
39990: PPUSH
39991: CALL_OW 380
39995: GO 40014
// PrepareHuman ( false , i , skill ) ;
39997: LD_INT 0
39999: PPUSH
40000: LD_VAR 0 8
40004: PPUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: CALL_OW 380
// end else
40014: GO 40033
// PrepareHuman ( false , i , skill ) ;
40016: LD_INT 0
40018: PPUSH
40019: LD_VAR 0 8
40023: PPUSH
40024: LD_VAR 0 4
40028: PPUSH
40029: CALL_OW 380
// un := CreateHuman ;
40033: LD_ADDR_VAR 0 14
40037: PUSH
40038: CALL_OW 44
40042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40043: LD_ADDR_VAR 0 7
40047: PUSH
40048: LD_VAR 0 7
40052: PPUSH
40053: LD_INT 1
40055: PPUSH
40056: LD_VAR 0 14
40060: PPUSH
40061: CALL_OW 2
40065: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40066: LD_VAR 0 14
40070: PPUSH
40071: LD_VAR 0 9
40075: PPUSH
40076: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40080: LD_VAR 0 9
40084: PPUSH
40085: CALL_OW 313
40089: PUSH
40090: LD_INT 6
40092: EQUAL
40093: PUSH
40094: LD_VAR 0 9
40098: PPUSH
40099: CALL_OW 266
40103: PUSH
40104: LD_INT 32
40106: PUSH
40107: LD_INT 31
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: IN
40114: OR
40115: IFFALSE 39929
40117: GO 39926
40119: POP
40120: POP
// end else
40121: GO 40503
// for j = 1 to x do
40123: LD_ADDR_VAR 0 9
40127: PUSH
40128: DOUBLE
40129: LD_INT 1
40131: DEC
40132: ST_TO_ADDR
40133: LD_VAR 0 13
40137: PUSH
40138: FOR_TO
40139: IFFALSE 40501
// begin InitHc ;
40141: CALL_OW 19
// if not f then
40145: LD_VAR 0 12
40149: NOT
40150: IFFALSE 40239
// begin PrepareHuman ( false , i , skill ) ;
40152: LD_INT 0
40154: PPUSH
40155: LD_VAR 0 8
40159: PPUSH
40160: LD_VAR 0 4
40164: PPUSH
40165: CALL_OW 380
// un := CreateHuman ;
40169: LD_ADDR_VAR 0 14
40173: PUSH
40174: CALL_OW 44
40178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 7
40188: PPUSH
40189: LD_INT 1
40191: PPUSH
40192: LD_VAR 0 14
40196: PPUSH
40197: CALL_OW 2
40201: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40202: LD_VAR 0 14
40206: PPUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 250
40216: PPUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 251
40226: PPUSH
40227: LD_INT 10
40229: PPUSH
40230: LD_INT 0
40232: PPUSH
40233: CALL_OW 50
// continue ;
40237: GO 40138
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40239: LD_VAR 0 12
40243: PUSH
40244: LD_INT 1
40246: ARRAY
40247: PPUSH
40248: CALL_OW 313
40252: PUSH
40253: LD_VAR 0 12
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: CALL_OW 266
40266: PUSH
40267: LD_INT 32
40269: PUSH
40270: LD_INT 31
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: IN
40277: AND
40278: PUSH
40279: LD_VAR 0 12
40283: PUSH
40284: LD_INT 1
40286: ARRAY
40287: PPUSH
40288: CALL_OW 313
40292: PUSH
40293: LD_INT 6
40295: EQUAL
40296: OR
40297: IFFALSE 40317
// f := Delete ( f , 1 ) ;
40299: LD_ADDR_VAR 0 12
40303: PUSH
40304: LD_VAR 0 12
40308: PPUSH
40309: LD_INT 1
40311: PPUSH
40312: CALL_OW 3
40316: ST_TO_ADDR
// if not f then
40317: LD_VAR 0 12
40321: NOT
40322: IFFALSE 40340
// begin x := x + 2 ;
40324: LD_ADDR_VAR 0 13
40328: PUSH
40329: LD_VAR 0 13
40333: PUSH
40334: LD_INT 2
40336: PLUS
40337: ST_TO_ADDR
// continue ;
40338: GO 40138
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40340: LD_VAR 0 12
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: PPUSH
40349: CALL_OW 266
40353: PUSH
40354: LD_INT 5
40356: EQUAL
40357: IFFALSE 40431
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40359: LD_VAR 0 12
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PPUSH
40368: CALL_OW 313
40372: PUSH
40373: LD_INT 3
40375: LESS
40376: IFFALSE 40412
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40378: LD_INT 0
40380: PPUSH
40381: LD_INT 5
40383: PUSH
40384: LD_INT 8
40386: PUSH
40387: LD_INT 9
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: PUSH
40395: LD_VAR 0 17
40399: ARRAY
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 380
40410: GO 40429
// PrepareHuman ( false , i , skill ) ;
40412: LD_INT 0
40414: PPUSH
40415: LD_VAR 0 8
40419: PPUSH
40420: LD_VAR 0 4
40424: PPUSH
40425: CALL_OW 380
// end else
40429: GO 40448
// PrepareHuman ( false , i , skill ) ;
40431: LD_INT 0
40433: PPUSH
40434: LD_VAR 0 8
40438: PPUSH
40439: LD_VAR 0 4
40443: PPUSH
40444: CALL_OW 380
// un := CreateHuman ;
40448: LD_ADDR_VAR 0 14
40452: PUSH
40453: CALL_OW 44
40457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40458: LD_ADDR_VAR 0 7
40462: PUSH
40463: LD_VAR 0 7
40467: PPUSH
40468: LD_INT 1
40470: PPUSH
40471: LD_VAR 0 14
40475: PPUSH
40476: CALL_OW 2
40480: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40481: LD_VAR 0 14
40485: PPUSH
40486: LD_VAR 0 12
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: PPUSH
40495: CALL_OW 52
// end ;
40499: GO 40138
40501: POP
40502: POP
// end ;
40503: GO 39440
40505: POP
40506: POP
// result := result ^ buildings ;
40507: LD_ADDR_VAR 0 7
40511: PUSH
40512: LD_VAR 0 7
40516: PUSH
40517: LD_VAR 0 18
40521: ADD
40522: ST_TO_ADDR
// end else
40523: GO 40666
// begin for i = 1 to personel do
40525: LD_ADDR_VAR 0 8
40529: PUSH
40530: DOUBLE
40531: LD_INT 1
40533: DEC
40534: ST_TO_ADDR
40535: LD_VAR 0 6
40539: PUSH
40540: FOR_TO
40541: IFFALSE 40664
// begin if i > 4 then
40543: LD_VAR 0 8
40547: PUSH
40548: LD_INT 4
40550: GREATER
40551: IFFALSE 40555
// break ;
40553: GO 40664
// x := personel [ i ] ;
40555: LD_ADDR_VAR 0 13
40559: PUSH
40560: LD_VAR 0 6
40564: PUSH
40565: LD_VAR 0 8
40569: ARRAY
40570: ST_TO_ADDR
// if x = - 1 then
40571: LD_VAR 0 13
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: EQUAL
40580: IFFALSE 40584
// continue ;
40582: GO 40540
// PrepareHuman ( false , i , skill ) ;
40584: LD_INT 0
40586: PPUSH
40587: LD_VAR 0 8
40591: PPUSH
40592: LD_VAR 0 4
40596: PPUSH
40597: CALL_OW 380
// un := CreateHuman ;
40601: LD_ADDR_VAR 0 14
40605: PUSH
40606: CALL_OW 44
40610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40611: LD_VAR 0 14
40615: PPUSH
40616: LD_VAR 0 1
40620: PPUSH
40621: CALL_OW 250
40625: PPUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 251
40635: PPUSH
40636: LD_INT 10
40638: PPUSH
40639: LD_INT 0
40641: PPUSH
40642: CALL_OW 50
// result := result ^ un ;
40646: LD_ADDR_VAR 0 7
40650: PUSH
40651: LD_VAR 0 7
40655: PUSH
40656: LD_VAR 0 14
40660: ADD
40661: ST_TO_ADDR
// end ;
40662: GO 40540
40664: POP
40665: POP
// end ; end ;
40666: LD_VAR 0 7
40670: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40671: LD_INT 0
40673: PPUSH
40674: PPUSH
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// result := false ;
40689: LD_ADDR_VAR 0 3
40693: PUSH
40694: LD_INT 0
40696: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40697: LD_VAR 0 1
40701: NOT
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 266
40712: PUSH
40713: LD_INT 32
40715: PUSH
40716: LD_INT 33
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: IN
40723: NOT
40724: OR
40725: IFFALSE 40729
// exit ;
40727: GO 41838
// nat := GetNation ( tower ) ;
40729: LD_ADDR_VAR 0 12
40733: PUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 248
40743: ST_TO_ADDR
// side := GetSide ( tower ) ;
40744: LD_ADDR_VAR 0 16
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 255
40758: ST_TO_ADDR
// x := GetX ( tower ) ;
40759: LD_ADDR_VAR 0 10
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 250
40773: ST_TO_ADDR
// y := GetY ( tower ) ;
40774: LD_ADDR_VAR 0 11
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 251
40788: ST_TO_ADDR
// if not x or not y then
40789: LD_VAR 0 10
40793: NOT
40794: PUSH
40795: LD_VAR 0 11
40799: NOT
40800: OR
40801: IFFALSE 40805
// exit ;
40803: GO 41838
// weapon := 0 ;
40805: LD_ADDR_VAR 0 18
40809: PUSH
40810: LD_INT 0
40812: ST_TO_ADDR
// fac_list := [ ] ;
40813: LD_ADDR_VAR 0 17
40817: PUSH
40818: EMPTY
40819: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40820: LD_ADDR_VAR 0 6
40824: PUSH
40825: LD_VAR 0 1
40829: PPUSH
40830: CALL_OW 274
40834: PPUSH
40835: LD_VAR 0 2
40839: PPUSH
40840: LD_INT 0
40842: PPUSH
40843: CALL 38409 0 3
40847: PPUSH
40848: LD_INT 30
40850: PUSH
40851: LD_INT 3
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 72
40862: ST_TO_ADDR
// if not factories then
40863: LD_VAR 0 6
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 41838
// for i in factories do
40872: LD_ADDR_VAR 0 8
40876: PUSH
40877: LD_VAR 0 6
40881: PUSH
40882: FOR_IN
40883: IFFALSE 40908
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40885: LD_ADDR_VAR 0 17
40889: PUSH
40890: LD_VAR 0 17
40894: PUSH
40895: LD_VAR 0 8
40899: PPUSH
40900: CALL_OW 478
40904: UNION
40905: ST_TO_ADDR
40906: GO 40882
40908: POP
40909: POP
// if not fac_list then
40910: LD_VAR 0 17
40914: NOT
40915: IFFALSE 40919
// exit ;
40917: GO 41838
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40919: LD_ADDR_VAR 0 5
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: LD_INT 5
40929: PUSH
40930: LD_INT 9
40932: PUSH
40933: LD_INT 10
40935: PUSH
40936: LD_INT 6
40938: PUSH
40939: LD_INT 7
40941: PUSH
40942: LD_INT 11
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 27
40956: PUSH
40957: LD_INT 28
40959: PUSH
40960: LD_INT 26
40962: PUSH
40963: LD_INT 30
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 43
40974: PUSH
40975: LD_INT 44
40977: PUSH
40978: LD_INT 46
40980: PUSH
40981: LD_INT 45
40983: PUSH
40984: LD_INT 47
40986: PUSH
40987: LD_INT 49
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: PUSH
41003: LD_VAR 0 12
41007: ARRAY
41008: ST_TO_ADDR
// list := list isect fac_list ;
41009: LD_ADDR_VAR 0 5
41013: PUSH
41014: LD_VAR 0 5
41018: PUSH
41019: LD_VAR 0 17
41023: ISECT
41024: ST_TO_ADDR
// if not list then
41025: LD_VAR 0 5
41029: NOT
41030: IFFALSE 41034
// exit ;
41032: GO 41838
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41034: LD_VAR 0 12
41038: PUSH
41039: LD_INT 3
41041: EQUAL
41042: PUSH
41043: LD_INT 49
41045: PUSH
41046: LD_VAR 0 5
41050: IN
41051: AND
41052: PUSH
41053: LD_INT 31
41055: PPUSH
41056: LD_VAR 0 16
41060: PPUSH
41061: CALL_OW 321
41065: PUSH
41066: LD_INT 2
41068: EQUAL
41069: AND
41070: IFFALSE 41130
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41072: LD_INT 22
41074: PUSH
41075: LD_VAR 0 16
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 35
41086: PUSH
41087: LD_INT 49
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 91
41096: PUSH
41097: LD_VAR 0 1
41101: PUSH
41102: LD_INT 10
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: PPUSH
41115: CALL_OW 69
41119: NOT
41120: IFFALSE 41130
// weapon := ru_time_lapser ;
41122: LD_ADDR_VAR 0 18
41126: PUSH
41127: LD_INT 49
41129: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41130: LD_VAR 0 12
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: IN
41145: PUSH
41146: LD_INT 11
41148: PUSH
41149: LD_VAR 0 5
41153: IN
41154: PUSH
41155: LD_INT 30
41157: PUSH
41158: LD_VAR 0 5
41162: IN
41163: OR
41164: AND
41165: PUSH
41166: LD_INT 6
41168: PPUSH
41169: LD_VAR 0 16
41173: PPUSH
41174: CALL_OW 321
41178: PUSH
41179: LD_INT 2
41181: EQUAL
41182: AND
41183: IFFALSE 41348
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41185: LD_INT 22
41187: PUSH
41188: LD_VAR 0 16
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 35
41202: PUSH
41203: LD_INT 11
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 35
41212: PUSH
41213: LD_INT 30
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 91
41227: PUSH
41228: LD_VAR 0 1
41232: PUSH
41233: LD_INT 18
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: PPUSH
41246: CALL_OW 69
41250: NOT
41251: PUSH
41252: LD_INT 22
41254: PUSH
41255: LD_VAR 0 16
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 30
41269: PUSH
41270: LD_INT 32
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 30
41279: PUSH
41280: LD_INT 33
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 91
41294: PUSH
41295: LD_VAR 0 1
41299: PUSH
41300: LD_INT 12
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: PPUSH
41316: CALL_OW 69
41320: PUSH
41321: LD_INT 2
41323: GREATER
41324: AND
41325: IFFALSE 41348
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41327: LD_ADDR_VAR 0 18
41331: PUSH
41332: LD_INT 11
41334: PUSH
41335: LD_INT 30
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_VAR 0 12
41346: ARRAY
41347: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41348: LD_VAR 0 18
41352: NOT
41353: PUSH
41354: LD_INT 40
41356: PPUSH
41357: LD_VAR 0 16
41361: PPUSH
41362: CALL_OW 321
41366: PUSH
41367: LD_INT 2
41369: EQUAL
41370: AND
41371: PUSH
41372: LD_INT 7
41374: PUSH
41375: LD_VAR 0 5
41379: IN
41380: PUSH
41381: LD_INT 28
41383: PUSH
41384: LD_VAR 0 5
41388: IN
41389: OR
41390: PUSH
41391: LD_INT 45
41393: PUSH
41394: LD_VAR 0 5
41398: IN
41399: OR
41400: AND
41401: IFFALSE 41655
// begin hex := GetHexInfo ( x , y ) ;
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: LD_VAR 0 10
41412: PPUSH
41413: LD_VAR 0 11
41417: PPUSH
41418: CALL_OW 546
41422: ST_TO_ADDR
// if hex [ 1 ] then
41423: LD_VAR 0 4
41427: PUSH
41428: LD_INT 1
41430: ARRAY
41431: IFFALSE 41435
// exit ;
41433: GO 41838
// height := hex [ 2 ] ;
41435: LD_ADDR_VAR 0 15
41439: PUSH
41440: LD_VAR 0 4
41444: PUSH
41445: LD_INT 2
41447: ARRAY
41448: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41449: LD_ADDR_VAR 0 14
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 3
41462: PUSH
41463: LD_INT 5
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// for i in tmp do
41472: LD_ADDR_VAR 0 8
41476: PUSH
41477: LD_VAR 0 14
41481: PUSH
41482: FOR_IN
41483: IFFALSE 41653
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41485: LD_ADDR_VAR 0 9
41489: PUSH
41490: LD_VAR 0 10
41494: PPUSH
41495: LD_VAR 0 8
41499: PPUSH
41500: LD_INT 5
41502: PPUSH
41503: CALL_OW 272
41507: PUSH
41508: LD_VAR 0 11
41512: PPUSH
41513: LD_VAR 0 8
41517: PPUSH
41518: LD_INT 5
41520: PPUSH
41521: CALL_OW 273
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41530: LD_VAR 0 9
41534: PUSH
41535: LD_INT 1
41537: ARRAY
41538: PPUSH
41539: LD_VAR 0 9
41543: PUSH
41544: LD_INT 2
41546: ARRAY
41547: PPUSH
41548: CALL_OW 488
41552: IFFALSE 41651
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41554: LD_ADDR_VAR 0 4
41558: PUSH
41559: LD_VAR 0 9
41563: PUSH
41564: LD_INT 1
41566: ARRAY
41567: PPUSH
41568: LD_VAR 0 9
41572: PUSH
41573: LD_INT 2
41575: ARRAY
41576: PPUSH
41577: CALL_OW 546
41581: ST_TO_ADDR
// if hex [ 1 ] then
41582: LD_VAR 0 4
41586: PUSH
41587: LD_INT 1
41589: ARRAY
41590: IFFALSE 41594
// continue ;
41592: GO 41482
// h := hex [ 2 ] ;
41594: LD_ADDR_VAR 0 13
41598: PUSH
41599: LD_VAR 0 4
41603: PUSH
41604: LD_INT 2
41606: ARRAY
41607: ST_TO_ADDR
// if h + 7 < height then
41608: LD_VAR 0 13
41612: PUSH
41613: LD_INT 7
41615: PLUS
41616: PUSH
41617: LD_VAR 0 15
41621: LESS
41622: IFFALSE 41651
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41624: LD_ADDR_VAR 0 18
41628: PUSH
41629: LD_INT 7
41631: PUSH
41632: LD_INT 28
41634: PUSH
41635: LD_INT 45
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: LIST
41642: PUSH
41643: LD_VAR 0 12
41647: ARRAY
41648: ST_TO_ADDR
// break ;
41649: GO 41653
// end ; end ; end ;
41651: GO 41482
41653: POP
41654: POP
// end ; if not weapon then
41655: LD_VAR 0 18
41659: NOT
41660: IFFALSE 41720
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41662: LD_ADDR_VAR 0 5
41666: PUSH
41667: LD_VAR 0 5
41671: PUSH
41672: LD_INT 11
41674: PUSH
41675: LD_INT 30
41677: PUSH
41678: LD_INT 49
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: DIFF
41686: ST_TO_ADDR
// if not list then
41687: LD_VAR 0 5
41691: NOT
41692: IFFALSE 41696
// exit ;
41694: GO 41838
// weapon := list [ rand ( 1 , list ) ] ;
41696: LD_ADDR_VAR 0 18
41700: PUSH
41701: LD_VAR 0 5
41705: PUSH
41706: LD_INT 1
41708: PPUSH
41709: LD_VAR 0 5
41713: PPUSH
41714: CALL_OW 12
41718: ARRAY
41719: ST_TO_ADDR
// end ; if weapon then
41720: LD_VAR 0 18
41724: IFFALSE 41838
// begin tmp := CostOfWeapon ( weapon ) ;
41726: LD_ADDR_VAR 0 14
41730: PUSH
41731: LD_VAR 0 18
41735: PPUSH
41736: CALL_OW 451
41740: ST_TO_ADDR
// j := GetBase ( tower ) ;
41741: LD_ADDR_VAR 0 9
41745: PUSH
41746: LD_VAR 0 1
41750: PPUSH
41751: CALL_OW 274
41755: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41756: LD_VAR 0 9
41760: PPUSH
41761: LD_INT 1
41763: PPUSH
41764: CALL_OW 275
41768: PUSH
41769: LD_VAR 0 14
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: GREATEREQUAL
41778: PUSH
41779: LD_VAR 0 9
41783: PPUSH
41784: LD_INT 2
41786: PPUSH
41787: CALL_OW 275
41791: PUSH
41792: LD_VAR 0 14
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: GREATEREQUAL
41801: AND
41802: PUSH
41803: LD_VAR 0 9
41807: PPUSH
41808: LD_INT 3
41810: PPUSH
41811: CALL_OW 275
41815: PUSH
41816: LD_VAR 0 14
41820: PUSH
41821: LD_INT 3
41823: ARRAY
41824: GREATEREQUAL
41825: AND
41826: IFFALSE 41838
// result := weapon ;
41828: LD_ADDR_VAR 0 3
41832: PUSH
41833: LD_VAR 0 18
41837: ST_TO_ADDR
// end ; end ;
41838: LD_VAR 0 3
41842: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
// result := true ;
41847: LD_ADDR_VAR 0 3
41851: PUSH
41852: LD_INT 1
41854: ST_TO_ADDR
// if array1 = array2 then
41855: LD_VAR 0 1
41859: PUSH
41860: LD_VAR 0 2
41864: EQUAL
41865: IFFALSE 41925
// begin for i = 1 to array1 do
41867: LD_ADDR_VAR 0 4
41871: PUSH
41872: DOUBLE
41873: LD_INT 1
41875: DEC
41876: ST_TO_ADDR
41877: LD_VAR 0 1
41881: PUSH
41882: FOR_TO
41883: IFFALSE 41921
// if array1 [ i ] <> array2 [ i ] then
41885: LD_VAR 0 1
41889: PUSH
41890: LD_VAR 0 4
41894: ARRAY
41895: PUSH
41896: LD_VAR 0 2
41900: PUSH
41901: LD_VAR 0 4
41905: ARRAY
41906: NONEQUAL
41907: IFFALSE 41919
// begin result := false ;
41909: LD_ADDR_VAR 0 3
41913: PUSH
41914: LD_INT 0
41916: ST_TO_ADDR
// break ;
41917: GO 41921
// end ;
41919: GO 41882
41921: POP
41922: POP
// end else
41923: GO 41933
// result := false ;
41925: LD_ADDR_VAR 0 3
41929: PUSH
41930: LD_INT 0
41932: ST_TO_ADDR
// end ;
41933: LD_VAR 0 3
41937: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41938: LD_INT 0
41940: PPUSH
41941: PPUSH
// if not array1 or not array2 then
41942: LD_VAR 0 1
41946: NOT
41947: PUSH
41948: LD_VAR 0 2
41952: NOT
41953: OR
41954: IFFALSE 41958
// exit ;
41956: GO 42022
// result := true ;
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_INT 1
41965: ST_TO_ADDR
// for i = 1 to array1 do
41966: LD_ADDR_VAR 0 4
41970: PUSH
41971: DOUBLE
41972: LD_INT 1
41974: DEC
41975: ST_TO_ADDR
41976: LD_VAR 0 1
41980: PUSH
41981: FOR_TO
41982: IFFALSE 42020
// if array1 [ i ] <> array2 [ i ] then
41984: LD_VAR 0 1
41988: PUSH
41989: LD_VAR 0 4
41993: ARRAY
41994: PUSH
41995: LD_VAR 0 2
41999: PUSH
42000: LD_VAR 0 4
42004: ARRAY
42005: NONEQUAL
42006: IFFALSE 42018
// begin result := false ;
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_INT 0
42015: ST_TO_ADDR
// break ;
42016: GO 42020
// end ;
42018: GO 41981
42020: POP
42021: POP
// end ;
42022: LD_VAR 0 3
42026: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42027: LD_INT 0
42029: PPUSH
42030: PPUSH
42031: PPUSH
// pom := GetBase ( fac ) ;
42032: LD_ADDR_VAR 0 5
42036: PUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 274
42046: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42047: LD_ADDR_VAR 0 4
42051: PUSH
42052: LD_VAR 0 2
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PPUSH
42061: LD_VAR 0 2
42065: PUSH
42066: LD_INT 2
42068: ARRAY
42069: PPUSH
42070: LD_VAR 0 2
42074: PUSH
42075: LD_INT 3
42077: ARRAY
42078: PPUSH
42079: LD_VAR 0 2
42083: PUSH
42084: LD_INT 4
42086: ARRAY
42087: PPUSH
42088: CALL_OW 449
42092: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: LD_INT 1
42105: PPUSH
42106: CALL_OW 275
42110: PUSH
42111: LD_VAR 0 4
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: GREATEREQUAL
42120: PUSH
42121: LD_VAR 0 5
42125: PPUSH
42126: LD_INT 2
42128: PPUSH
42129: CALL_OW 275
42133: PUSH
42134: LD_VAR 0 4
42138: PUSH
42139: LD_INT 2
42141: ARRAY
42142: GREATEREQUAL
42143: AND
42144: PUSH
42145: LD_VAR 0 5
42149: PPUSH
42150: LD_INT 3
42152: PPUSH
42153: CALL_OW 275
42157: PUSH
42158: LD_VAR 0 4
42162: PUSH
42163: LD_INT 3
42165: ARRAY
42166: GREATEREQUAL
42167: AND
42168: ST_TO_ADDR
// end ;
42169: LD_VAR 0 3
42173: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42174: LD_INT 0
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
// pom := GetBase ( building ) ;
42180: LD_ADDR_VAR 0 3
42184: PUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 274
42194: ST_TO_ADDR
// if not pom then
42195: LD_VAR 0 3
42199: NOT
42200: IFFALSE 42204
// exit ;
42202: GO 42374
// btype := GetBType ( building ) ;
42204: LD_ADDR_VAR 0 5
42208: PUSH
42209: LD_VAR 0 1
42213: PPUSH
42214: CALL_OW 266
42218: ST_TO_ADDR
// if btype = b_armoury then
42219: LD_VAR 0 5
42223: PUSH
42224: LD_INT 4
42226: EQUAL
42227: IFFALSE 42237
// btype := b_barracks ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_INT 5
42236: ST_TO_ADDR
// if btype = b_depot then
42237: LD_VAR 0 5
42241: PUSH
42242: LD_INT 0
42244: EQUAL
42245: IFFALSE 42255
// btype := b_warehouse ;
42247: LD_ADDR_VAR 0 5
42251: PUSH
42252: LD_INT 1
42254: ST_TO_ADDR
// if btype = b_workshop then
42255: LD_VAR 0 5
42259: PUSH
42260: LD_INT 2
42262: EQUAL
42263: IFFALSE 42273
// btype := b_factory ;
42265: LD_ADDR_VAR 0 5
42269: PUSH
42270: LD_INT 3
42272: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42273: LD_ADDR_VAR 0 4
42277: PUSH
42278: LD_VAR 0 5
42282: PPUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: CALL_OW 248
42292: PPUSH
42293: CALL_OW 450
42297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42298: LD_ADDR_VAR 0 2
42302: PUSH
42303: LD_VAR 0 3
42307: PPUSH
42308: LD_INT 1
42310: PPUSH
42311: CALL_OW 275
42315: PUSH
42316: LD_VAR 0 4
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: GREATEREQUAL
42325: PUSH
42326: LD_VAR 0 3
42330: PPUSH
42331: LD_INT 2
42333: PPUSH
42334: CALL_OW 275
42338: PUSH
42339: LD_VAR 0 4
42343: PUSH
42344: LD_INT 2
42346: ARRAY
42347: GREATEREQUAL
42348: AND
42349: PUSH
42350: LD_VAR 0 3
42354: PPUSH
42355: LD_INT 3
42357: PPUSH
42358: CALL_OW 275
42362: PUSH
42363: LD_VAR 0 4
42367: PUSH
42368: LD_INT 3
42370: ARRAY
42371: GREATEREQUAL
42372: AND
42373: ST_TO_ADDR
// end ;
42374: LD_VAR 0 2
42378: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42379: LD_INT 0
42381: PPUSH
42382: PPUSH
42383: PPUSH
// pom := GetBase ( building ) ;
42384: LD_ADDR_VAR 0 4
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 274
42398: ST_TO_ADDR
// if not pom then
42399: LD_VAR 0 4
42403: NOT
42404: IFFALSE 42408
// exit ;
42406: GO 42509
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42408: LD_ADDR_VAR 0 5
42412: PUSH
42413: LD_VAR 0 2
42417: PPUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 248
42427: PPUSH
42428: CALL_OW 450
42432: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_VAR 0 4
42442: PPUSH
42443: LD_INT 1
42445: PPUSH
42446: CALL_OW 275
42450: PUSH
42451: LD_VAR 0 5
42455: PUSH
42456: LD_INT 1
42458: ARRAY
42459: GREATEREQUAL
42460: PUSH
42461: LD_VAR 0 4
42465: PPUSH
42466: LD_INT 2
42468: PPUSH
42469: CALL_OW 275
42473: PUSH
42474: LD_VAR 0 5
42478: PUSH
42479: LD_INT 2
42481: ARRAY
42482: GREATEREQUAL
42483: AND
42484: PUSH
42485: LD_VAR 0 4
42489: PPUSH
42490: LD_INT 3
42492: PPUSH
42493: CALL_OW 275
42497: PUSH
42498: LD_VAR 0 5
42502: PUSH
42503: LD_INT 3
42505: ARRAY
42506: GREATEREQUAL
42507: AND
42508: ST_TO_ADDR
// end ;
42509: LD_VAR 0 3
42513: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42514: LD_INT 0
42516: PPUSH
42517: PPUSH
42518: PPUSH
42519: PPUSH
42520: PPUSH
42521: PPUSH
42522: PPUSH
42523: PPUSH
42524: PPUSH
42525: PPUSH
42526: PPUSH
// result := false ;
42527: LD_ADDR_VAR 0 8
42531: PUSH
42532: LD_INT 0
42534: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42535: LD_VAR 0 5
42539: NOT
42540: PUSH
42541: LD_VAR 0 1
42545: NOT
42546: OR
42547: PUSH
42548: LD_VAR 0 2
42552: NOT
42553: OR
42554: PUSH
42555: LD_VAR 0 3
42559: NOT
42560: OR
42561: IFFALSE 42565
// exit ;
42563: GO 43379
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42565: LD_ADDR_VAR 0 14
42569: PUSH
42570: LD_VAR 0 1
42574: PPUSH
42575: LD_VAR 0 2
42579: PPUSH
42580: LD_VAR 0 3
42584: PPUSH
42585: LD_VAR 0 4
42589: PPUSH
42590: LD_VAR 0 5
42594: PUSH
42595: LD_INT 1
42597: ARRAY
42598: PPUSH
42599: CALL_OW 248
42603: PPUSH
42604: LD_INT 0
42606: PPUSH
42607: CALL 44616 0 6
42611: ST_TO_ADDR
// if not hexes then
42612: LD_VAR 0 14
42616: NOT
42617: IFFALSE 42621
// exit ;
42619: GO 43379
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42621: LD_ADDR_VAR 0 17
42625: PUSH
42626: LD_VAR 0 5
42630: PPUSH
42631: LD_INT 22
42633: PUSH
42634: LD_VAR 0 13
42638: PPUSH
42639: CALL_OW 255
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 30
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 30
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PPUSH
42680: CALL_OW 72
42684: ST_TO_ADDR
// for i = 1 to hexes do
42685: LD_ADDR_VAR 0 9
42689: PUSH
42690: DOUBLE
42691: LD_INT 1
42693: DEC
42694: ST_TO_ADDR
42695: LD_VAR 0 14
42699: PUSH
42700: FOR_TO
42701: IFFALSE 43377
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42703: LD_ADDR_VAR 0 13
42707: PUSH
42708: LD_VAR 0 14
42712: PUSH
42713: LD_VAR 0 9
42717: ARRAY
42718: PUSH
42719: LD_INT 1
42721: ARRAY
42722: PPUSH
42723: LD_VAR 0 14
42727: PUSH
42728: LD_VAR 0 9
42732: ARRAY
42733: PUSH
42734: LD_INT 2
42736: ARRAY
42737: PPUSH
42738: CALL_OW 428
42742: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42743: LD_VAR 0 14
42747: PUSH
42748: LD_VAR 0 9
42752: ARRAY
42753: PUSH
42754: LD_INT 1
42756: ARRAY
42757: PPUSH
42758: LD_VAR 0 14
42762: PUSH
42763: LD_VAR 0 9
42767: ARRAY
42768: PUSH
42769: LD_INT 2
42771: ARRAY
42772: PPUSH
42773: CALL_OW 351
42777: PUSH
42778: LD_VAR 0 14
42782: PUSH
42783: LD_VAR 0 9
42787: ARRAY
42788: PUSH
42789: LD_INT 1
42791: ARRAY
42792: PPUSH
42793: LD_VAR 0 14
42797: PUSH
42798: LD_VAR 0 9
42802: ARRAY
42803: PUSH
42804: LD_INT 2
42806: ARRAY
42807: PPUSH
42808: CALL_OW 488
42812: NOT
42813: OR
42814: PUSH
42815: LD_VAR 0 13
42819: PPUSH
42820: CALL_OW 247
42824: PUSH
42825: LD_INT 3
42827: EQUAL
42828: OR
42829: IFFALSE 42835
// exit ;
42831: POP
42832: POP
42833: GO 43379
// if not tmp then
42835: LD_VAR 0 13
42839: NOT
42840: IFFALSE 42844
// continue ;
42842: GO 42700
// result := true ;
42844: LD_ADDR_VAR 0 8
42848: PUSH
42849: LD_INT 1
42851: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42852: LD_VAR 0 6
42856: PUSH
42857: LD_VAR 0 13
42861: PPUSH
42862: CALL_OW 247
42866: PUSH
42867: LD_INT 2
42869: EQUAL
42870: AND
42871: PUSH
42872: LD_VAR 0 13
42876: PPUSH
42877: CALL_OW 263
42881: PUSH
42882: LD_INT 1
42884: EQUAL
42885: AND
42886: IFFALSE 43050
// begin if IsDrivenBy ( tmp ) then
42888: LD_VAR 0 13
42892: PPUSH
42893: CALL_OW 311
42897: IFFALSE 42901
// continue ;
42899: GO 42700
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42901: LD_VAR 0 6
42905: PPUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 60
42911: PUSH
42912: EMPTY
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: LD_INT 55
42924: PUSH
42925: EMPTY
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PPUSH
42936: CALL_OW 72
42940: IFFALSE 43048
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42942: LD_ADDR_VAR 0 18
42946: PUSH
42947: LD_VAR 0 6
42951: PPUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 60
42957: PUSH
42958: EMPTY
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 55
42970: PUSH
42971: EMPTY
42972: LIST
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PPUSH
42982: CALL_OW 72
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: ST_TO_ADDR
// if IsInUnit ( driver ) then
42991: LD_VAR 0 18
42995: PPUSH
42996: CALL_OW 310
43000: IFFALSE 43011
// ComExit ( driver ) ;
43002: LD_VAR 0 18
43006: PPUSH
43007: CALL 67800 0 1
// AddComEnterUnit ( driver , tmp ) ;
43011: LD_VAR 0 18
43015: PPUSH
43016: LD_VAR 0 13
43020: PPUSH
43021: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43025: LD_VAR 0 18
43029: PPUSH
43030: LD_VAR 0 7
43034: PPUSH
43035: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43039: LD_VAR 0 18
43043: PPUSH
43044: CALL_OW 181
// end ; continue ;
43048: GO 42700
// end ; if not cleaners or not tmp in cleaners then
43050: LD_VAR 0 6
43054: NOT
43055: PUSH
43056: LD_VAR 0 13
43060: PUSH
43061: LD_VAR 0 6
43065: IN
43066: NOT
43067: OR
43068: IFFALSE 43375
// begin if dep then
43070: LD_VAR 0 17
43074: IFFALSE 43210
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43076: LD_ADDR_VAR 0 16
43080: PUSH
43081: LD_VAR 0 17
43085: PUSH
43086: LD_INT 1
43088: ARRAY
43089: PPUSH
43090: CALL_OW 250
43094: PPUSH
43095: LD_VAR 0 17
43099: PUSH
43100: LD_INT 1
43102: ARRAY
43103: PPUSH
43104: CALL_OW 254
43108: PPUSH
43109: LD_INT 5
43111: PPUSH
43112: CALL_OW 272
43116: PUSH
43117: LD_VAR 0 17
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: PPUSH
43126: CALL_OW 251
43130: PPUSH
43131: LD_VAR 0 17
43135: PUSH
43136: LD_INT 1
43138: ARRAY
43139: PPUSH
43140: CALL_OW 254
43144: PPUSH
43145: LD_INT 5
43147: PPUSH
43148: CALL_OW 273
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43157: LD_VAR 0 16
43161: PUSH
43162: LD_INT 1
43164: ARRAY
43165: PPUSH
43166: LD_VAR 0 16
43170: PUSH
43171: LD_INT 2
43173: ARRAY
43174: PPUSH
43175: CALL_OW 488
43179: IFFALSE 43210
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43181: LD_VAR 0 13
43185: PPUSH
43186: LD_VAR 0 16
43190: PUSH
43191: LD_INT 1
43193: ARRAY
43194: PPUSH
43195: LD_VAR 0 16
43199: PUSH
43200: LD_INT 2
43202: ARRAY
43203: PPUSH
43204: CALL_OW 111
// continue ;
43208: GO 42700
// end ; end ; r := GetDir ( tmp ) ;
43210: LD_ADDR_VAR 0 15
43214: PUSH
43215: LD_VAR 0 13
43219: PPUSH
43220: CALL_OW 254
43224: ST_TO_ADDR
// if r = 5 then
43225: LD_VAR 0 15
43229: PUSH
43230: LD_INT 5
43232: EQUAL
43233: IFFALSE 43243
// r := 0 ;
43235: LD_ADDR_VAR 0 15
43239: PUSH
43240: LD_INT 0
43242: ST_TO_ADDR
// for j = r to 5 do
43243: LD_ADDR_VAR 0 10
43247: PUSH
43248: DOUBLE
43249: LD_VAR 0 15
43253: DEC
43254: ST_TO_ADDR
43255: LD_INT 5
43257: PUSH
43258: FOR_TO
43259: IFFALSE 43373
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43261: LD_ADDR_VAR 0 11
43265: PUSH
43266: LD_VAR 0 13
43270: PPUSH
43271: CALL_OW 250
43275: PPUSH
43276: LD_VAR 0 10
43280: PPUSH
43281: LD_INT 2
43283: PPUSH
43284: CALL_OW 272
43288: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43289: LD_ADDR_VAR 0 12
43293: PUSH
43294: LD_VAR 0 13
43298: PPUSH
43299: CALL_OW 251
43303: PPUSH
43304: LD_VAR 0 10
43308: PPUSH
43309: LD_INT 2
43311: PPUSH
43312: CALL_OW 273
43316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43317: LD_VAR 0 11
43321: PPUSH
43322: LD_VAR 0 12
43326: PPUSH
43327: CALL_OW 488
43331: PUSH
43332: LD_VAR 0 11
43336: PPUSH
43337: LD_VAR 0 12
43341: PPUSH
43342: CALL_OW 428
43346: NOT
43347: AND
43348: IFFALSE 43371
// begin ComMoveXY ( tmp , _x , _y ) ;
43350: LD_VAR 0 13
43354: PPUSH
43355: LD_VAR 0 11
43359: PPUSH
43360: LD_VAR 0 12
43364: PPUSH
43365: CALL_OW 111
// break ;
43369: GO 43373
// end ; end ;
43371: GO 43258
43373: POP
43374: POP
// end ; end ;
43375: GO 42700
43377: POP
43378: POP
// end ;
43379: LD_VAR 0 8
43383: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43384: LD_INT 0
43386: PPUSH
// result := true ;
43387: LD_ADDR_VAR 0 3
43391: PUSH
43392: LD_INT 1
43394: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43395: LD_VAR 0 2
43399: PUSH
43400: LD_INT 24
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43414
43406: LD_INT 33
43408: DOUBLE
43409: EQUAL
43410: IFTRUE 43414
43412: GO 43439
43414: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_INT 32
43422: PPUSH
43423: LD_VAR 0 1
43427: PPUSH
43428: CALL_OW 321
43432: PUSH
43433: LD_INT 2
43435: EQUAL
43436: ST_TO_ADDR
43437: GO 43759
43439: LD_INT 20
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43447
43445: GO 43472
43447: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_INT 6
43455: PPUSH
43456: LD_VAR 0 1
43460: PPUSH
43461: CALL_OW 321
43465: PUSH
43466: LD_INT 2
43468: EQUAL
43469: ST_TO_ADDR
43470: GO 43759
43472: LD_INT 22
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43486
43478: LD_INT 36
43480: DOUBLE
43481: EQUAL
43482: IFTRUE 43486
43484: GO 43511
43486: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_INT 15
43494: PPUSH
43495: LD_VAR 0 1
43499: PPUSH
43500: CALL_OW 321
43504: PUSH
43505: LD_INT 2
43507: EQUAL
43508: ST_TO_ADDR
43509: GO 43759
43511: LD_INT 30
43513: DOUBLE
43514: EQUAL
43515: IFTRUE 43519
43517: GO 43544
43519: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43520: LD_ADDR_VAR 0 3
43524: PUSH
43525: LD_INT 20
43527: PPUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 321
43537: PUSH
43538: LD_INT 2
43540: EQUAL
43541: ST_TO_ADDR
43542: GO 43759
43544: LD_INT 28
43546: DOUBLE
43547: EQUAL
43548: IFTRUE 43558
43550: LD_INT 21
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43583
43558: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 21
43566: PPUSH
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 321
43576: PUSH
43577: LD_INT 2
43579: EQUAL
43580: ST_TO_ADDR
43581: GO 43759
43583: LD_INT 16
43585: DOUBLE
43586: EQUAL
43587: IFTRUE 43591
43589: GO 43618
43591: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43592: LD_ADDR_VAR 0 3
43596: PUSH
43597: LD_EXP 44
43601: PPUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: CALL_OW 321
43611: PUSH
43612: LD_INT 2
43614: EQUAL
43615: ST_TO_ADDR
43616: GO 43759
43618: LD_INT 19
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43632
43624: LD_INT 23
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43632
43630: GO 43659
43632: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_EXP 43
43642: PPUSH
43643: LD_VAR 0 1
43647: PPUSH
43648: CALL_OW 321
43652: PUSH
43653: LD_INT 2
43655: EQUAL
43656: ST_TO_ADDR
43657: GO 43759
43659: LD_INT 17
43661: DOUBLE
43662: EQUAL
43663: IFTRUE 43667
43665: GO 43692
43667: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: LD_INT 39
43675: PPUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: CALL_OW 321
43685: PUSH
43686: LD_INT 2
43688: EQUAL
43689: ST_TO_ADDR
43690: GO 43759
43692: LD_INT 18
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43700
43698: GO 43725
43700: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 40
43708: PPUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 321
43718: PUSH
43719: LD_INT 2
43721: EQUAL
43722: ST_TO_ADDR
43723: GO 43759
43725: LD_INT 27
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43733
43731: GO 43758
43733: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43734: LD_ADDR_VAR 0 3
43738: PUSH
43739: LD_INT 35
43741: PPUSH
43742: LD_VAR 0 1
43746: PPUSH
43747: CALL_OW 321
43751: PUSH
43752: LD_INT 2
43754: EQUAL
43755: ST_TO_ADDR
43756: GO 43759
43758: POP
// end ;
43759: LD_VAR 0 3
43763: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43764: LD_INT 0
43766: PPUSH
43767: PPUSH
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
// result := false ;
43777: LD_ADDR_VAR 0 6
43781: PUSH
43782: LD_INT 0
43784: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43785: LD_VAR 0 1
43789: NOT
43790: PUSH
43791: LD_VAR 0 1
43795: PPUSH
43796: CALL_OW 266
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: IN
43811: NOT
43812: OR
43813: PUSH
43814: LD_VAR 0 2
43818: NOT
43819: OR
43820: PUSH
43821: LD_VAR 0 5
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 4
43840: PUSH
43841: LD_INT 5
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: IN
43852: NOT
43853: OR
43854: PUSH
43855: LD_VAR 0 3
43859: PPUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 488
43869: NOT
43870: OR
43871: IFFALSE 43875
// exit ;
43873: GO 44611
// side := GetSide ( depot ) ;
43875: LD_ADDR_VAR 0 9
43879: PUSH
43880: LD_VAR 0 1
43884: PPUSH
43885: CALL_OW 255
43889: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43890: LD_VAR 0 9
43894: PPUSH
43895: LD_VAR 0 2
43899: PPUSH
43900: CALL 43384 0 2
43904: NOT
43905: IFFALSE 43909
// exit ;
43907: GO 44611
// pom := GetBase ( depot ) ;
43909: LD_ADDR_VAR 0 10
43913: PUSH
43914: LD_VAR 0 1
43918: PPUSH
43919: CALL_OW 274
43923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43924: LD_ADDR_VAR 0 11
43928: PUSH
43929: LD_VAR 0 2
43933: PPUSH
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 248
43943: PPUSH
43944: CALL_OW 450
43948: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43949: LD_VAR 0 10
43953: PPUSH
43954: LD_INT 1
43956: PPUSH
43957: CALL_OW 275
43961: PUSH
43962: LD_VAR 0 11
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: GREATEREQUAL
43971: PUSH
43972: LD_VAR 0 10
43976: PPUSH
43977: LD_INT 2
43979: PPUSH
43980: CALL_OW 275
43984: PUSH
43985: LD_VAR 0 11
43989: PUSH
43990: LD_INT 2
43992: ARRAY
43993: GREATEREQUAL
43994: AND
43995: PUSH
43996: LD_VAR 0 10
44000: PPUSH
44001: LD_INT 3
44003: PPUSH
44004: CALL_OW 275
44008: PUSH
44009: LD_VAR 0 11
44013: PUSH
44014: LD_INT 3
44016: ARRAY
44017: GREATEREQUAL
44018: AND
44019: NOT
44020: IFFALSE 44024
// exit ;
44022: GO 44611
// if GetBType ( depot ) = b_depot then
44024: LD_VAR 0 1
44028: PPUSH
44029: CALL_OW 266
44033: PUSH
44034: LD_INT 0
44036: EQUAL
44037: IFFALSE 44049
// dist := 28 else
44039: LD_ADDR_VAR 0 14
44043: PUSH
44044: LD_INT 28
44046: ST_TO_ADDR
44047: GO 44057
// dist := 36 ;
44049: LD_ADDR_VAR 0 14
44053: PUSH
44054: LD_INT 36
44056: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44057: LD_VAR 0 1
44061: PPUSH
44062: LD_VAR 0 3
44066: PPUSH
44067: LD_VAR 0 4
44071: PPUSH
44072: CALL_OW 297
44076: PUSH
44077: LD_VAR 0 14
44081: GREATER
44082: IFFALSE 44086
// exit ;
44084: GO 44611
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44086: LD_ADDR_VAR 0 12
44090: PUSH
44091: LD_VAR 0 2
44095: PPUSH
44096: LD_VAR 0 3
44100: PPUSH
44101: LD_VAR 0 4
44105: PPUSH
44106: LD_VAR 0 5
44110: PPUSH
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 248
44120: PPUSH
44121: LD_INT 0
44123: PPUSH
44124: CALL 44616 0 6
44128: ST_TO_ADDR
// if not hexes then
44129: LD_VAR 0 12
44133: NOT
44134: IFFALSE 44138
// exit ;
44136: GO 44611
// hex := GetHexInfo ( x , y ) ;
44138: LD_ADDR_VAR 0 15
44142: PUSH
44143: LD_VAR 0 3
44147: PPUSH
44148: LD_VAR 0 4
44152: PPUSH
44153: CALL_OW 546
44157: ST_TO_ADDR
// if hex [ 1 ] then
44158: LD_VAR 0 15
44162: PUSH
44163: LD_INT 1
44165: ARRAY
44166: IFFALSE 44170
// exit ;
44168: GO 44611
// height := hex [ 2 ] ;
44170: LD_ADDR_VAR 0 13
44174: PUSH
44175: LD_VAR 0 15
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: ST_TO_ADDR
// for i = 1 to hexes do
44184: LD_ADDR_VAR 0 7
44188: PUSH
44189: DOUBLE
44190: LD_INT 1
44192: DEC
44193: ST_TO_ADDR
44194: LD_VAR 0 12
44198: PUSH
44199: FOR_TO
44200: IFFALSE 44530
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44202: LD_VAR 0 12
44206: PUSH
44207: LD_VAR 0 7
44211: ARRAY
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PPUSH
44217: LD_VAR 0 12
44221: PUSH
44222: LD_VAR 0 7
44226: ARRAY
44227: PUSH
44228: LD_INT 2
44230: ARRAY
44231: PPUSH
44232: CALL_OW 488
44236: NOT
44237: PUSH
44238: LD_VAR 0 12
44242: PUSH
44243: LD_VAR 0 7
44247: ARRAY
44248: PUSH
44249: LD_INT 1
44251: ARRAY
44252: PPUSH
44253: LD_VAR 0 12
44257: PUSH
44258: LD_VAR 0 7
44262: ARRAY
44263: PUSH
44264: LD_INT 2
44266: ARRAY
44267: PPUSH
44268: CALL_OW 428
44272: PUSH
44273: LD_INT 0
44275: GREATER
44276: OR
44277: PUSH
44278: LD_VAR 0 12
44282: PUSH
44283: LD_VAR 0 7
44287: ARRAY
44288: PUSH
44289: LD_INT 1
44291: ARRAY
44292: PPUSH
44293: LD_VAR 0 12
44297: PUSH
44298: LD_VAR 0 7
44302: ARRAY
44303: PUSH
44304: LD_INT 2
44306: ARRAY
44307: PPUSH
44308: CALL_OW 351
44312: OR
44313: IFFALSE 44319
// exit ;
44315: POP
44316: POP
44317: GO 44611
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44319: LD_ADDR_VAR 0 8
44323: PUSH
44324: LD_VAR 0 12
44328: PUSH
44329: LD_VAR 0 7
44333: ARRAY
44334: PUSH
44335: LD_INT 1
44337: ARRAY
44338: PPUSH
44339: LD_VAR 0 12
44343: PUSH
44344: LD_VAR 0 7
44348: ARRAY
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: PPUSH
44354: CALL_OW 546
44358: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44359: LD_VAR 0 8
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PUSH
44368: LD_VAR 0 8
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PUSH
44377: LD_VAR 0 13
44381: PUSH
44382: LD_INT 2
44384: PLUS
44385: GREATER
44386: OR
44387: PUSH
44388: LD_VAR 0 8
44392: PUSH
44393: LD_INT 2
44395: ARRAY
44396: PUSH
44397: LD_VAR 0 13
44401: PUSH
44402: LD_INT 2
44404: MINUS
44405: LESS
44406: OR
44407: PUSH
44408: LD_VAR 0 8
44412: PUSH
44413: LD_INT 3
44415: ARRAY
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 8
44422: PUSH
44423: LD_INT 9
44425: PUSH
44426: LD_INT 10
44428: PUSH
44429: LD_INT 11
44431: PUSH
44432: LD_INT 12
44434: PUSH
44435: LD_INT 13
44437: PUSH
44438: LD_INT 16
44440: PUSH
44441: LD_INT 17
44443: PUSH
44444: LD_INT 18
44446: PUSH
44447: LD_INT 19
44449: PUSH
44450: LD_INT 20
44452: PUSH
44453: LD_INT 21
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: IN
44471: NOT
44472: OR
44473: PUSH
44474: LD_VAR 0 8
44478: PUSH
44479: LD_INT 5
44481: ARRAY
44482: NOT
44483: OR
44484: PUSH
44485: LD_VAR 0 8
44489: PUSH
44490: LD_INT 6
44492: ARRAY
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 7
44502: PUSH
44503: LD_INT 9
44505: PUSH
44506: LD_INT 10
44508: PUSH
44509: LD_INT 11
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: IN
44520: NOT
44521: OR
44522: IFFALSE 44528
// exit ;
44524: POP
44525: POP
44526: GO 44611
// end ;
44528: GO 44199
44530: POP
44531: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44532: LD_VAR 0 9
44536: PPUSH
44537: LD_VAR 0 3
44541: PPUSH
44542: LD_VAR 0 4
44546: PPUSH
44547: LD_INT 20
44549: PPUSH
44550: CALL 36557 0 4
44554: PUSH
44555: LD_INT 4
44557: ARRAY
44558: IFFALSE 44562
// exit ;
44560: GO 44611
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44562: LD_VAR 0 2
44566: PUSH
44567: LD_INT 29
44569: PUSH
44570: LD_INT 30
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: IN
44577: PUSH
44578: LD_VAR 0 3
44582: PPUSH
44583: LD_VAR 0 4
44587: PPUSH
44588: LD_VAR 0 9
44592: PPUSH
44593: CALL_OW 440
44597: NOT
44598: AND
44599: IFFALSE 44603
// exit ;
44601: GO 44611
// result := true ;
44603: LD_ADDR_VAR 0 6
44607: PUSH
44608: LD_INT 1
44610: ST_TO_ADDR
// end ;
44611: LD_VAR 0 6
44615: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44616: LD_INT 0
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
// result = [ ] ;
44676: LD_ADDR_VAR 0 7
44680: PUSH
44681: EMPTY
44682: ST_TO_ADDR
// temp_list = [ ] ;
44683: LD_ADDR_VAR 0 9
44687: PUSH
44688: EMPTY
44689: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44690: LD_VAR 0 4
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: LD_INT 4
44709: PUSH
44710: LD_INT 5
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: IN
44721: NOT
44722: PUSH
44723: LD_VAR 0 1
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: IN
44738: PUSH
44739: LD_VAR 0 5
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: IN
44758: NOT
44759: AND
44760: OR
44761: IFFALSE 44765
// exit ;
44763: GO 63156
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44765: LD_VAR 0 1
44769: PUSH
44770: LD_INT 6
44772: PUSH
44773: LD_INT 7
44775: PUSH
44776: LD_INT 8
44778: PUSH
44779: LD_INT 13
44781: PUSH
44782: LD_INT 12
44784: PUSH
44785: LD_INT 15
44787: PUSH
44788: LD_INT 11
44790: PUSH
44791: LD_INT 14
44793: PUSH
44794: LD_INT 10
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: IN
44808: IFFALSE 44818
// btype = b_lab ;
44810: LD_ADDR_VAR 0 1
44814: PUSH
44815: LD_INT 6
44817: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44818: LD_VAR 0 6
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: IN
44837: NOT
44838: PUSH
44839: LD_VAR 0 1
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 6
44858: PUSH
44859: LD_INT 36
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: LD_INT 5
44867: PUSH
44868: LD_INT 31
44870: PUSH
44871: LD_INT 32
44873: PUSH
44874: LD_INT 33
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: IN
44890: NOT
44891: PUSH
44892: LD_VAR 0 6
44896: PUSH
44897: LD_INT 1
44899: EQUAL
44900: AND
44901: OR
44902: PUSH
44903: LD_VAR 0 1
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: IN
44918: NOT
44919: PUSH
44920: LD_VAR 0 6
44924: PUSH
44925: LD_INT 2
44927: EQUAL
44928: AND
44929: OR
44930: IFFALSE 44940
// mode = 0 ;
44932: LD_ADDR_VAR 0 6
44936: PUSH
44937: LD_INT 0
44939: ST_TO_ADDR
// case mode of 0 :
44940: LD_VAR 0 6
44944: PUSH
44945: LD_INT 0
44947: DOUBLE
44948: EQUAL
44949: IFTRUE 44953
44951: GO 56406
44953: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44954: LD_ADDR_VAR 0 11
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45147: LD_ADDR_VAR 0 12
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45343: LD_ADDR_VAR 0 13
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 3
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: NEG
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45542: LD_ADDR_VAR 0 14
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45738: LD_ADDR_VAR 0 15
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45931: LD_ADDR_VAR 0 16
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46124: LD_ADDR_VAR 0 17
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46354: LD_ADDR_VAR 0 18
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46584: LD_ADDR_VAR 0 19
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46814: LD_ADDR_VAR 0 20
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47044: LD_ADDR_VAR 0 21
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47274: LD_ADDR_VAR 0 22
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47504: LD_ADDR_VAR 0 23
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47784: LD_ADDR_VAR 0 24
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48060: LD_ADDR_VAR 0 25
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48334: LD_ADDR_VAR 0 26
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48610: LD_ADDR_VAR 0 27
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48890: LD_ADDR_VAR 0 28
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49172: LD_ADDR_VAR 0 29
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 3
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49451: LD_ADDR_VAR 0 30
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49729: LD_ADDR_VAR 0 31
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50007: LD_ADDR_VAR 0 32
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50285: LD_ADDR_VAR 0 33
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50564: LD_ADDR_VAR 0 34
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50844: LD_ADDR_VAR 0 35
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50956: LD_ADDR_VAR 0 36
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51068: LD_ADDR_VAR 0 37
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51180: LD_ADDR_VAR 0 38
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51292: LD_ADDR_VAR 0 39
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51404: LD_ADDR_VAR 0 40
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51516: LD_ADDR_VAR 0 41
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 3
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51866: LD_ADDR_VAR 0 42
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52216: LD_ADDR_VAR 0 43
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 3
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52564: LD_ADDR_VAR 0 44
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: NEG
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52914: LD_ADDR_VAR 0 45
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53264: LD_ADDR_VAR 0 46
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53612: LD_ADDR_VAR 0 47
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53763: LD_ADDR_VAR 0 48
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53910: LD_ADDR_VAR 0 49
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54054: LD_ADDR_VAR 0 50
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54198: LD_ADDR_VAR 0 51
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54345: LD_ADDR_VAR 0 52
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54496: LD_ADDR_VAR 0 53
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54726: LD_ADDR_VAR 0 54
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54956: LD_ADDR_VAR 0 55
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55186: LD_ADDR_VAR 0 56
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 2
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55416: LD_ADDR_VAR 0 57
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55646: LD_ADDR_VAR 0 58
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55876: LD_ADDR_VAR 0 59
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55964: LD_ADDR_VAR 0 60
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56052: LD_ADDR_VAR 0 61
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56140: LD_ADDR_VAR 0 62
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56228: LD_ADDR_VAR 0 63
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56316: LD_ADDR_VAR 0 64
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// end ; 1 :
56404: GO 62301
56406: LD_INT 1
56408: DOUBLE
56409: EQUAL
56410: IFTRUE 56414
56412: GO 59037
56414: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56415: LD_ADDR_VAR 0 11
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56459: LD_ADDR_VAR 0 12
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56500: LD_ADDR_VAR 0 13
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56540: LD_ADDR_VAR 0 14
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56581: LD_ADDR_VAR 0 15
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56625: LD_ADDR_VAR 0 16
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56671: LD_ADDR_VAR 0 17
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56715: LD_ADDR_VAR 0 18
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56756: LD_ADDR_VAR 0 19
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56796: LD_ADDR_VAR 0 20
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56837: LD_ADDR_VAR 0 21
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56881: LD_ADDR_VAR 0 22
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56927: LD_ADDR_VAR 0 23
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 4
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56971: LD_ADDR_VAR 0 24
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57012: LD_ADDR_VAR 0 25
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 4
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57052: LD_ADDR_VAR 0 26
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 4
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57093: LD_ADDR_VAR 0 27
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57137: LD_ADDR_VAR 0 28
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57183: LD_ADDR_VAR 0 29
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 3
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 3
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 4
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 5
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 5
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 6
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 6
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 5
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57338: LD_ADDR_VAR 0 30
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 4
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 4
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 5
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 6
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 6
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57481: LD_ADDR_VAR 0 31
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: LD_INT 4
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 5
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: LD_INT 5
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: PUSH
57569: LD_INT 5
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 6
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 6
57588: PUSH
57589: LD_INT 6
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 5
57598: PUSH
57599: LD_INT 6
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57620: LD_ADDR_VAR 0 32
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 3
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 5
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 6
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 6
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57763: LD_ADDR_VAR 0 33
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 5
57849: NEG
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 5
57860: NEG
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 5
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 6
57883: NEG
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 6
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57918: LD_ADDR_VAR 0 34
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 4
57973: NEG
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 4
57985: NEG
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 4
57997: NEG
57998: PUSH
57999: LD_INT 5
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 5
58009: NEG
58010: PUSH
58011: LD_INT 4
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 5
58021: NEG
58022: PUSH
58023: LD_INT 5
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 5
58033: NEG
58034: PUSH
58035: LD_INT 6
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 6
58045: NEG
58046: PUSH
58047: LD_INT 5
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 6
58057: NEG
58058: PUSH
58059: LD_INT 6
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58081: LD_ADDR_VAR 0 41
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58125: LD_ADDR_VAR 0 42
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58166: LD_ADDR_VAR 0 43
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: LIST
58205: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58206: LD_ADDR_VAR 0 44
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58247: LD_ADDR_VAR 0 45
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58291: LD_ADDR_VAR 0 46
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58337: LD_ADDR_VAR 0 47
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58370: LD_ADDR_VAR 0 48
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58401: LD_ADDR_VAR 0 49
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58430: LD_ADDR_VAR 0 50
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 3
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58459: LD_ADDR_VAR 0 51
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58490: LD_ADDR_VAR 0 52
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58523: LD_ADDR_VAR 0 53
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58567: LD_ADDR_VAR 0 54
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58608: LD_ADDR_VAR 0 55
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 3
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58648: LD_ADDR_VAR 0 56
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58689: LD_ADDR_VAR 0 57
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58733: LD_ADDR_VAR 0 58
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58779: LD_ADDR_VAR 0 59
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58823: LD_ADDR_VAR 0 60
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58864: LD_ADDR_VAR 0 61
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58904: LD_ADDR_VAR 0 62
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58945: LD_ADDR_VAR 0 63
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58989: LD_ADDR_VAR 0 64
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// end ; 2 :
59035: GO 62301
59037: LD_INT 2
59039: DOUBLE
59040: EQUAL
59041: IFTRUE 59045
59043: GO 62300
59045: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59046: LD_ADDR_VAR 0 29
59050: PUSH
59051: LD_INT 4
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 5
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 5
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 5
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 4
59176: PUSH
59177: LD_INT 4
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 5
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 4
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: LD_INT 5
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 3
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: NEG
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 4
59431: NEG
59432: PUSH
59433: LD_INT 4
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: LD_INT 5
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: LD_INT 4
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: NEG
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 5
59491: NEG
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: NEG
59504: PUSH
59505: LD_INT 5
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 5
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 5
59527: NEG
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59584: LD_ADDR_VAR 0 30
59588: PUSH
59589: LD_INT 4
59591: PUSH
59592: LD_INT 4
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 5
59621: PUSH
59622: LD_INT 5
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 4
59631: PUSH
59632: LD_INT 5
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: LD_INT 4
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 5
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 4
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 4
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 4
59785: NEG
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 5
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 5
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: NEG
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: NEG
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: LD_INT 4
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 4
59972: NEG
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 5
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 3
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 5
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 5
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60131: LD_ADDR_VAR 0 31
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 4
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 5
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 5
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 5
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 3
60231: NEG
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 3
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 4
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 4
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: LD_INT 4
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 4
60345: NEG
60346: PUSH
60347: LD_INT 5
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 4
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: NEG
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 5
60393: NEG
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 5
60405: NEG
60406: PUSH
60407: LD_INT 5
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 5
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 4
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: LD_INT 3
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 2
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 4
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 5
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 5
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 5
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60681: LD_ADDR_VAR 0 32
60685: PUSH
60686: LD_INT 4
60688: NEG
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 4
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 3
60711: NEG
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 4
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 5
60755: NEG
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 5
60767: NEG
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 3
60779: NEG
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 4
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 4
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: NEG
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: LD_INT 5
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 4
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: LD_INT 3
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 5
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: LD_INT 5
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 4
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 4
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 5
61113: PUSH
61114: LD_INT 4
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: PUSH
61124: LD_INT 5
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 4
61133: PUSH
61134: LD_INT 5
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 5
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 5
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61228: LD_ADDR_VAR 0 33
61232: PUSH
61233: LD_INT 4
61235: NEG
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 4
61247: NEG
61248: PUSH
61249: LD_INT 5
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 3
61259: NEG
61260: PUSH
61261: LD_INT 4
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: LD_INT 3
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 5
61295: NEG
61296: PUSH
61297: LD_INT 4
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 5
61307: NEG
61308: PUSH
61309: LD_INT 5
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 5
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 5
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 4
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 3
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 3
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 4
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 5
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 5
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: PUSH
61569: LD_INT 4
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 5
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 5
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 5
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61766: LD_ADDR_VAR 0 34
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 5
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 4
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 5
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: LD_INT 5
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 4
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 4
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 4
62008: PUSH
62009: LD_INT 5
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 4
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 5
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 5
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 4
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 4
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 4
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 3
62174: NEG
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 4
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 5
62207: NEG
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 5
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 5
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: ST_TO_ADDR
// end ; end ;
62298: GO 62301
62300: POP
// case btype of b_depot , b_warehouse :
62301: LD_VAR 0 1
62305: PUSH
62306: LD_INT 0
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62320
62312: LD_INT 1
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62320
62318: GO 62521
62320: POP
// case nation of nation_american :
62321: LD_VAR 0 5
62325: PUSH
62326: LD_INT 1
62328: DOUBLE
62329: EQUAL
62330: IFTRUE 62334
62332: GO 62390
62334: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62335: LD_ADDR_VAR 0 9
62339: PUSH
62340: LD_VAR 0 11
62344: PUSH
62345: LD_VAR 0 12
62349: PUSH
62350: LD_VAR 0 13
62354: PUSH
62355: LD_VAR 0 14
62359: PUSH
62360: LD_VAR 0 15
62364: PUSH
62365: LD_VAR 0 16
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: PUSH
62378: LD_VAR 0 4
62382: PUSH
62383: LD_INT 1
62385: PLUS
62386: ARRAY
62387: ST_TO_ADDR
62388: GO 62519
62390: LD_INT 2
62392: DOUBLE
62393: EQUAL
62394: IFTRUE 62398
62396: GO 62454
62398: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62399: LD_ADDR_VAR 0 9
62403: PUSH
62404: LD_VAR 0 17
62408: PUSH
62409: LD_VAR 0 18
62413: PUSH
62414: LD_VAR 0 19
62418: PUSH
62419: LD_VAR 0 20
62423: PUSH
62424: LD_VAR 0 21
62428: PUSH
62429: LD_VAR 0 22
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: PUSH
62442: LD_VAR 0 4
62446: PUSH
62447: LD_INT 1
62449: PLUS
62450: ARRAY
62451: ST_TO_ADDR
62452: GO 62519
62454: LD_INT 3
62456: DOUBLE
62457: EQUAL
62458: IFTRUE 62462
62460: GO 62518
62462: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62463: LD_ADDR_VAR 0 9
62467: PUSH
62468: LD_VAR 0 23
62472: PUSH
62473: LD_VAR 0 24
62477: PUSH
62478: LD_VAR 0 25
62482: PUSH
62483: LD_VAR 0 26
62487: PUSH
62488: LD_VAR 0 27
62492: PUSH
62493: LD_VAR 0 28
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: PUSH
62506: LD_VAR 0 4
62510: PUSH
62511: LD_INT 1
62513: PLUS
62514: ARRAY
62515: ST_TO_ADDR
62516: GO 62519
62518: POP
62519: GO 63074
62521: LD_INT 2
62523: DOUBLE
62524: EQUAL
62525: IFTRUE 62535
62527: LD_INT 3
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62535
62533: GO 62591
62535: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62536: LD_ADDR_VAR 0 9
62540: PUSH
62541: LD_VAR 0 29
62545: PUSH
62546: LD_VAR 0 30
62550: PUSH
62551: LD_VAR 0 31
62555: PUSH
62556: LD_VAR 0 32
62560: PUSH
62561: LD_VAR 0 33
62565: PUSH
62566: LD_VAR 0 34
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: LD_VAR 0 4
62583: PUSH
62584: LD_INT 1
62586: PLUS
62587: ARRAY
62588: ST_TO_ADDR
62589: GO 63074
62591: LD_INT 16
62593: DOUBLE
62594: EQUAL
62595: IFTRUE 62653
62597: LD_INT 17
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62653
62603: LD_INT 18
62605: DOUBLE
62606: EQUAL
62607: IFTRUE 62653
62609: LD_INT 19
62611: DOUBLE
62612: EQUAL
62613: IFTRUE 62653
62615: LD_INT 22
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62653
62621: LD_INT 20
62623: DOUBLE
62624: EQUAL
62625: IFTRUE 62653
62627: LD_INT 21
62629: DOUBLE
62630: EQUAL
62631: IFTRUE 62653
62633: LD_INT 23
62635: DOUBLE
62636: EQUAL
62637: IFTRUE 62653
62639: LD_INT 24
62641: DOUBLE
62642: EQUAL
62643: IFTRUE 62653
62645: LD_INT 25
62647: DOUBLE
62648: EQUAL
62649: IFTRUE 62653
62651: GO 62709
62653: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62654: LD_ADDR_VAR 0 9
62658: PUSH
62659: LD_VAR 0 35
62663: PUSH
62664: LD_VAR 0 36
62668: PUSH
62669: LD_VAR 0 37
62673: PUSH
62674: LD_VAR 0 38
62678: PUSH
62679: LD_VAR 0 39
62683: PUSH
62684: LD_VAR 0 40
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: LD_VAR 0 4
62701: PUSH
62702: LD_INT 1
62704: PLUS
62705: ARRAY
62706: ST_TO_ADDR
62707: GO 63074
62709: LD_INT 6
62711: DOUBLE
62712: EQUAL
62713: IFTRUE 62765
62715: LD_INT 7
62717: DOUBLE
62718: EQUAL
62719: IFTRUE 62765
62721: LD_INT 8
62723: DOUBLE
62724: EQUAL
62725: IFTRUE 62765
62727: LD_INT 13
62729: DOUBLE
62730: EQUAL
62731: IFTRUE 62765
62733: LD_INT 12
62735: DOUBLE
62736: EQUAL
62737: IFTRUE 62765
62739: LD_INT 15
62741: DOUBLE
62742: EQUAL
62743: IFTRUE 62765
62745: LD_INT 11
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62765
62751: LD_INT 14
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62765
62757: LD_INT 10
62759: DOUBLE
62760: EQUAL
62761: IFTRUE 62765
62763: GO 62821
62765: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62766: LD_ADDR_VAR 0 9
62770: PUSH
62771: LD_VAR 0 41
62775: PUSH
62776: LD_VAR 0 42
62780: PUSH
62781: LD_VAR 0 43
62785: PUSH
62786: LD_VAR 0 44
62790: PUSH
62791: LD_VAR 0 45
62795: PUSH
62796: LD_VAR 0 46
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: PUSH
62809: LD_VAR 0 4
62813: PUSH
62814: LD_INT 1
62816: PLUS
62817: ARRAY
62818: ST_TO_ADDR
62819: GO 63074
62821: LD_INT 36
62823: DOUBLE
62824: EQUAL
62825: IFTRUE 62829
62827: GO 62885
62829: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62830: LD_ADDR_VAR 0 9
62834: PUSH
62835: LD_VAR 0 47
62839: PUSH
62840: LD_VAR 0 48
62844: PUSH
62845: LD_VAR 0 49
62849: PUSH
62850: LD_VAR 0 50
62854: PUSH
62855: LD_VAR 0 51
62859: PUSH
62860: LD_VAR 0 52
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: LD_VAR 0 4
62877: PUSH
62878: LD_INT 1
62880: PLUS
62881: ARRAY
62882: ST_TO_ADDR
62883: GO 63074
62885: LD_INT 4
62887: DOUBLE
62888: EQUAL
62889: IFTRUE 62911
62891: LD_INT 5
62893: DOUBLE
62894: EQUAL
62895: IFTRUE 62911
62897: LD_INT 34
62899: DOUBLE
62900: EQUAL
62901: IFTRUE 62911
62903: LD_INT 37
62905: DOUBLE
62906: EQUAL
62907: IFTRUE 62911
62909: GO 62967
62911: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62912: LD_ADDR_VAR 0 9
62916: PUSH
62917: LD_VAR 0 53
62921: PUSH
62922: LD_VAR 0 54
62926: PUSH
62927: LD_VAR 0 55
62931: PUSH
62932: LD_VAR 0 56
62936: PUSH
62937: LD_VAR 0 57
62941: PUSH
62942: LD_VAR 0 58
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 4
62959: PUSH
62960: LD_INT 1
62962: PLUS
62963: ARRAY
62964: ST_TO_ADDR
62965: GO 63074
62967: LD_INT 31
62969: DOUBLE
62970: EQUAL
62971: IFTRUE 63017
62973: LD_INT 32
62975: DOUBLE
62976: EQUAL
62977: IFTRUE 63017
62979: LD_INT 33
62981: DOUBLE
62982: EQUAL
62983: IFTRUE 63017
62985: LD_INT 27
62987: DOUBLE
62988: EQUAL
62989: IFTRUE 63017
62991: LD_INT 26
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 63017
62997: LD_INT 28
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63017
63003: LD_INT 29
63005: DOUBLE
63006: EQUAL
63007: IFTRUE 63017
63009: LD_INT 30
63011: DOUBLE
63012: EQUAL
63013: IFTRUE 63017
63015: GO 63073
63017: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63018: LD_ADDR_VAR 0 9
63022: PUSH
63023: LD_VAR 0 59
63027: PUSH
63028: LD_VAR 0 60
63032: PUSH
63033: LD_VAR 0 61
63037: PUSH
63038: LD_VAR 0 62
63042: PUSH
63043: LD_VAR 0 63
63047: PUSH
63048: LD_VAR 0 64
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: PUSH
63061: LD_VAR 0 4
63065: PUSH
63066: LD_INT 1
63068: PLUS
63069: ARRAY
63070: ST_TO_ADDR
63071: GO 63074
63073: POP
// temp_list2 = [ ] ;
63074: LD_ADDR_VAR 0 10
63078: PUSH
63079: EMPTY
63080: ST_TO_ADDR
// for i in temp_list do
63081: LD_ADDR_VAR 0 8
63085: PUSH
63086: LD_VAR 0 9
63090: PUSH
63091: FOR_IN
63092: IFFALSE 63144
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63094: LD_ADDR_VAR 0 10
63098: PUSH
63099: LD_VAR 0 10
63103: PUSH
63104: LD_VAR 0 8
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: PUSH
63113: LD_VAR 0 2
63117: PLUS
63118: PUSH
63119: LD_VAR 0 8
63123: PUSH
63124: LD_INT 2
63126: ARRAY
63127: PUSH
63128: LD_VAR 0 3
63132: PLUS
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: EMPTY
63139: LIST
63140: ADD
63141: ST_TO_ADDR
63142: GO 63091
63144: POP
63145: POP
// result = temp_list2 ;
63146: LD_ADDR_VAR 0 7
63150: PUSH
63151: LD_VAR 0 10
63155: ST_TO_ADDR
// end ;
63156: LD_VAR 0 7
63160: RET
// export function EnemyInRange ( unit , dist ) ; begin
63161: LD_INT 0
63163: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63164: LD_ADDR_VAR 0 3
63168: PUSH
63169: LD_VAR 0 1
63173: PPUSH
63174: CALL_OW 255
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: CALL_OW 250
63188: PPUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL_OW 251
63198: PPUSH
63199: LD_VAR 0 2
63203: PPUSH
63204: CALL 36557 0 4
63208: PUSH
63209: LD_INT 4
63211: ARRAY
63212: ST_TO_ADDR
// end ;
63213: LD_VAR 0 3
63217: RET
// export function PlayerSeeMe ( unit ) ; begin
63218: LD_INT 0
63220: PPUSH
// result := See ( your_side , unit ) ;
63221: LD_ADDR_VAR 0 2
63225: PUSH
63226: LD_OWVAR 2
63230: PPUSH
63231: LD_VAR 0 1
63235: PPUSH
63236: CALL_OW 292
63240: ST_TO_ADDR
// end ;
63241: LD_VAR 0 2
63245: RET
// export function ReverseDir ( unit ) ; begin
63246: LD_INT 0
63248: PPUSH
// if not unit then
63249: LD_VAR 0 1
63253: NOT
63254: IFFALSE 63258
// exit ;
63256: GO 63281
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63258: LD_ADDR_VAR 0 2
63262: PUSH
63263: LD_VAR 0 1
63267: PPUSH
63268: CALL_OW 254
63272: PUSH
63273: LD_INT 3
63275: PLUS
63276: PUSH
63277: LD_INT 6
63279: MOD
63280: ST_TO_ADDR
// end ;
63281: LD_VAR 0 2
63285: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63286: LD_INT 0
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
63292: PPUSH
// if not hexes then
63293: LD_VAR 0 2
63297: NOT
63298: IFFALSE 63302
// exit ;
63300: GO 63450
// dist := 9999 ;
63302: LD_ADDR_VAR 0 5
63306: PUSH
63307: LD_INT 9999
63309: ST_TO_ADDR
// for i = 1 to hexes do
63310: LD_ADDR_VAR 0 4
63314: PUSH
63315: DOUBLE
63316: LD_INT 1
63318: DEC
63319: ST_TO_ADDR
63320: LD_VAR 0 2
63324: PUSH
63325: FOR_TO
63326: IFFALSE 63438
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63328: LD_VAR 0 1
63332: PPUSH
63333: LD_VAR 0 2
63337: PUSH
63338: LD_VAR 0 4
63342: ARRAY
63343: PUSH
63344: LD_INT 1
63346: ARRAY
63347: PPUSH
63348: LD_VAR 0 2
63352: PUSH
63353: LD_VAR 0 4
63357: ARRAY
63358: PUSH
63359: LD_INT 2
63361: ARRAY
63362: PPUSH
63363: CALL_OW 297
63367: PUSH
63368: LD_VAR 0 5
63372: LESS
63373: IFFALSE 63436
// begin hex := hexes [ i ] ;
63375: LD_ADDR_VAR 0 7
63379: PUSH
63380: LD_VAR 0 2
63384: PUSH
63385: LD_VAR 0 4
63389: ARRAY
63390: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63391: LD_ADDR_VAR 0 5
63395: PUSH
63396: LD_VAR 0 1
63400: PPUSH
63401: LD_VAR 0 2
63405: PUSH
63406: LD_VAR 0 4
63410: ARRAY
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PPUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_VAR 0 4
63425: ARRAY
63426: PUSH
63427: LD_INT 2
63429: ARRAY
63430: PPUSH
63431: CALL_OW 297
63435: ST_TO_ADDR
// end ; end ;
63436: GO 63325
63438: POP
63439: POP
// result := hex ;
63440: LD_ADDR_VAR 0 3
63444: PUSH
63445: LD_VAR 0 7
63449: ST_TO_ADDR
// end ;
63450: LD_VAR 0 3
63454: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63455: LD_INT 0
63457: PPUSH
63458: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63459: LD_VAR 0 1
63463: NOT
63464: PUSH
63465: LD_VAR 0 1
63469: PUSH
63470: LD_INT 21
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 23
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PPUSH
63494: CALL_OW 69
63498: IN
63499: NOT
63500: OR
63501: IFFALSE 63505
// exit ;
63503: GO 63552
// for i = 1 to 3 do
63505: LD_ADDR_VAR 0 3
63509: PUSH
63510: DOUBLE
63511: LD_INT 1
63513: DEC
63514: ST_TO_ADDR
63515: LD_INT 3
63517: PUSH
63518: FOR_TO
63519: IFFALSE 63550
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63521: LD_VAR 0 1
63525: PPUSH
63526: CALL_OW 250
63530: PPUSH
63531: LD_VAR 0 1
63535: PPUSH
63536: CALL_OW 251
63540: PPUSH
63541: LD_INT 1
63543: PPUSH
63544: CALL_OW 453
63548: GO 63518
63550: POP
63551: POP
// end ;
63552: LD_VAR 0 2
63556: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63557: LD_INT 0
63559: PPUSH
63560: PPUSH
63561: PPUSH
63562: PPUSH
63563: PPUSH
63564: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63565: LD_VAR 0 1
63569: NOT
63570: PUSH
63571: LD_VAR 0 2
63575: NOT
63576: OR
63577: PUSH
63578: LD_VAR 0 1
63582: PPUSH
63583: CALL_OW 314
63587: OR
63588: IFFALSE 63592
// exit ;
63590: GO 64033
// x := GetX ( enemy_unit ) ;
63592: LD_ADDR_VAR 0 7
63596: PUSH
63597: LD_VAR 0 2
63601: PPUSH
63602: CALL_OW 250
63606: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63607: LD_ADDR_VAR 0 8
63611: PUSH
63612: LD_VAR 0 2
63616: PPUSH
63617: CALL_OW 251
63621: ST_TO_ADDR
// if not x or not y then
63622: LD_VAR 0 7
63626: NOT
63627: PUSH
63628: LD_VAR 0 8
63632: NOT
63633: OR
63634: IFFALSE 63638
// exit ;
63636: GO 64033
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63638: LD_ADDR_VAR 0 6
63642: PUSH
63643: LD_VAR 0 7
63647: PPUSH
63648: LD_INT 0
63650: PPUSH
63651: LD_INT 4
63653: PPUSH
63654: CALL_OW 272
63658: PUSH
63659: LD_VAR 0 8
63663: PPUSH
63664: LD_INT 0
63666: PPUSH
63667: LD_INT 4
63669: PPUSH
63670: CALL_OW 273
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 7
63683: PPUSH
63684: LD_INT 1
63686: PPUSH
63687: LD_INT 4
63689: PPUSH
63690: CALL_OW 272
63694: PUSH
63695: LD_VAR 0 8
63699: PPUSH
63700: LD_INT 1
63702: PPUSH
63703: LD_INT 4
63705: PPUSH
63706: CALL_OW 273
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_VAR 0 7
63719: PPUSH
63720: LD_INT 2
63722: PPUSH
63723: LD_INT 4
63725: PPUSH
63726: CALL_OW 272
63730: PUSH
63731: LD_VAR 0 8
63735: PPUSH
63736: LD_INT 2
63738: PPUSH
63739: LD_INT 4
63741: PPUSH
63742: CALL_OW 273
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_VAR 0 7
63755: PPUSH
63756: LD_INT 3
63758: PPUSH
63759: LD_INT 4
63761: PPUSH
63762: CALL_OW 272
63766: PUSH
63767: LD_VAR 0 8
63771: PPUSH
63772: LD_INT 3
63774: PPUSH
63775: LD_INT 4
63777: PPUSH
63778: CALL_OW 273
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_VAR 0 7
63791: PPUSH
63792: LD_INT 4
63794: PPUSH
63795: LD_INT 4
63797: PPUSH
63798: CALL_OW 272
63802: PUSH
63803: LD_VAR 0 8
63807: PPUSH
63808: LD_INT 4
63810: PPUSH
63811: LD_INT 4
63813: PPUSH
63814: CALL_OW 273
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_VAR 0 7
63827: PPUSH
63828: LD_INT 5
63830: PPUSH
63831: LD_INT 4
63833: PPUSH
63834: CALL_OW 272
63838: PUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 5
63846: PPUSH
63847: LD_INT 4
63849: PPUSH
63850: CALL_OW 273
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: ST_TO_ADDR
// for i = tmp downto 1 do
63867: LD_ADDR_VAR 0 4
63871: PUSH
63872: DOUBLE
63873: LD_VAR 0 6
63877: INC
63878: ST_TO_ADDR
63879: LD_INT 1
63881: PUSH
63882: FOR_DOWNTO
63883: IFFALSE 63984
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63885: LD_VAR 0 6
63889: PUSH
63890: LD_VAR 0 4
63894: ARRAY
63895: PUSH
63896: LD_INT 1
63898: ARRAY
63899: PPUSH
63900: LD_VAR 0 6
63904: PUSH
63905: LD_VAR 0 4
63909: ARRAY
63910: PUSH
63911: LD_INT 2
63913: ARRAY
63914: PPUSH
63915: CALL_OW 488
63919: NOT
63920: PUSH
63921: LD_VAR 0 6
63925: PUSH
63926: LD_VAR 0 4
63930: ARRAY
63931: PUSH
63932: LD_INT 1
63934: ARRAY
63935: PPUSH
63936: LD_VAR 0 6
63940: PUSH
63941: LD_VAR 0 4
63945: ARRAY
63946: PUSH
63947: LD_INT 2
63949: ARRAY
63950: PPUSH
63951: CALL_OW 428
63955: PUSH
63956: LD_INT 0
63958: NONEQUAL
63959: OR
63960: IFFALSE 63982
// tmp := Delete ( tmp , i ) ;
63962: LD_ADDR_VAR 0 6
63966: PUSH
63967: LD_VAR 0 6
63971: PPUSH
63972: LD_VAR 0 4
63976: PPUSH
63977: CALL_OW 3
63981: ST_TO_ADDR
63982: GO 63882
63984: POP
63985: POP
// j := GetClosestHex ( unit , tmp ) ;
63986: LD_ADDR_VAR 0 5
63990: PUSH
63991: LD_VAR 0 1
63995: PPUSH
63996: LD_VAR 0 6
64000: PPUSH
64001: CALL 63286 0 2
64005: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64006: LD_VAR 0 1
64010: PPUSH
64011: LD_VAR 0 5
64015: PUSH
64016: LD_INT 1
64018: ARRAY
64019: PPUSH
64020: LD_VAR 0 5
64024: PUSH
64025: LD_INT 2
64027: ARRAY
64028: PPUSH
64029: CALL_OW 111
// end ;
64033: LD_VAR 0 3
64037: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64038: LD_INT 0
64040: PPUSH
64041: PPUSH
64042: PPUSH
// uc_side = 0 ;
64043: LD_ADDR_OWVAR 20
64047: PUSH
64048: LD_INT 0
64050: ST_TO_ADDR
// uc_nation = 0 ;
64051: LD_ADDR_OWVAR 21
64055: PUSH
64056: LD_INT 0
64058: ST_TO_ADDR
// InitHc_All ( ) ;
64059: CALL_OW 584
// InitVc ;
64063: CALL_OW 20
// if mastodonts then
64067: LD_VAR 0 6
64071: IFFALSE 64138
// for i = 1 to mastodonts do
64073: LD_ADDR_VAR 0 11
64077: PUSH
64078: DOUBLE
64079: LD_INT 1
64081: DEC
64082: ST_TO_ADDR
64083: LD_VAR 0 6
64087: PUSH
64088: FOR_TO
64089: IFFALSE 64136
// begin vc_chassis := 31 ;
64091: LD_ADDR_OWVAR 37
64095: PUSH
64096: LD_INT 31
64098: ST_TO_ADDR
// vc_control := control_rider ;
64099: LD_ADDR_OWVAR 38
64103: PUSH
64104: LD_INT 4
64106: ST_TO_ADDR
// animal := CreateVehicle ;
64107: LD_ADDR_VAR 0 12
64111: PUSH
64112: CALL_OW 45
64116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64117: LD_VAR 0 12
64121: PPUSH
64122: LD_VAR 0 8
64126: PPUSH
64127: LD_INT 0
64129: PPUSH
64130: CALL 66326 0 3
// end ;
64134: GO 64088
64136: POP
64137: POP
// if horses then
64138: LD_VAR 0 5
64142: IFFALSE 64209
// for i = 1 to horses do
64144: LD_ADDR_VAR 0 11
64148: PUSH
64149: DOUBLE
64150: LD_INT 1
64152: DEC
64153: ST_TO_ADDR
64154: LD_VAR 0 5
64158: PUSH
64159: FOR_TO
64160: IFFALSE 64207
// begin hc_class := 21 ;
64162: LD_ADDR_OWVAR 28
64166: PUSH
64167: LD_INT 21
64169: ST_TO_ADDR
// hc_gallery :=  ;
64170: LD_ADDR_OWVAR 33
64174: PUSH
64175: LD_STRING 
64177: ST_TO_ADDR
// animal := CreateHuman ;
64178: LD_ADDR_VAR 0 12
64182: PUSH
64183: CALL_OW 44
64187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64188: LD_VAR 0 12
64192: PPUSH
64193: LD_VAR 0 8
64197: PPUSH
64198: LD_INT 0
64200: PPUSH
64201: CALL 66326 0 3
// end ;
64205: GO 64159
64207: POP
64208: POP
// if birds then
64209: LD_VAR 0 1
64213: IFFALSE 64280
// for i = 1 to birds do
64215: LD_ADDR_VAR 0 11
64219: PUSH
64220: DOUBLE
64221: LD_INT 1
64223: DEC
64224: ST_TO_ADDR
64225: LD_VAR 0 1
64229: PUSH
64230: FOR_TO
64231: IFFALSE 64278
// begin hc_class = 18 ;
64233: LD_ADDR_OWVAR 28
64237: PUSH
64238: LD_INT 18
64240: ST_TO_ADDR
// hc_gallery =  ;
64241: LD_ADDR_OWVAR 33
64245: PUSH
64246: LD_STRING 
64248: ST_TO_ADDR
// animal := CreateHuman ;
64249: LD_ADDR_VAR 0 12
64253: PUSH
64254: CALL_OW 44
64258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64259: LD_VAR 0 12
64263: PPUSH
64264: LD_VAR 0 8
64268: PPUSH
64269: LD_INT 0
64271: PPUSH
64272: CALL 66326 0 3
// end ;
64276: GO 64230
64278: POP
64279: POP
// if tigers then
64280: LD_VAR 0 2
64284: IFFALSE 64368
// for i = 1 to tigers do
64286: LD_ADDR_VAR 0 11
64290: PUSH
64291: DOUBLE
64292: LD_INT 1
64294: DEC
64295: ST_TO_ADDR
64296: LD_VAR 0 2
64300: PUSH
64301: FOR_TO
64302: IFFALSE 64366
// begin hc_class = class_tiger ;
64304: LD_ADDR_OWVAR 28
64308: PUSH
64309: LD_INT 14
64311: ST_TO_ADDR
// hc_gallery =  ;
64312: LD_ADDR_OWVAR 33
64316: PUSH
64317: LD_STRING 
64319: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64320: LD_ADDR_OWVAR 35
64324: PUSH
64325: LD_INT 7
64327: NEG
64328: PPUSH
64329: LD_INT 7
64331: PPUSH
64332: CALL_OW 12
64336: ST_TO_ADDR
// animal := CreateHuman ;
64337: LD_ADDR_VAR 0 12
64341: PUSH
64342: CALL_OW 44
64346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64347: LD_VAR 0 12
64351: PPUSH
64352: LD_VAR 0 8
64356: PPUSH
64357: LD_INT 0
64359: PPUSH
64360: CALL 66326 0 3
// end ;
64364: GO 64301
64366: POP
64367: POP
// if apemans then
64368: LD_VAR 0 3
64372: IFFALSE 64495
// for i = 1 to apemans do
64374: LD_ADDR_VAR 0 11
64378: PUSH
64379: DOUBLE
64380: LD_INT 1
64382: DEC
64383: ST_TO_ADDR
64384: LD_VAR 0 3
64388: PUSH
64389: FOR_TO
64390: IFFALSE 64493
// begin hc_class = class_apeman ;
64392: LD_ADDR_OWVAR 28
64396: PUSH
64397: LD_INT 12
64399: ST_TO_ADDR
// hc_gallery =  ;
64400: LD_ADDR_OWVAR 33
64404: PUSH
64405: LD_STRING 
64407: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64408: LD_ADDR_OWVAR 35
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PPUSH
64417: LD_INT 2
64419: PPUSH
64420: CALL_OW 12
64424: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64425: LD_ADDR_OWVAR 31
64429: PUSH
64430: LD_INT 1
64432: PPUSH
64433: LD_INT 3
64435: PPUSH
64436: CALL_OW 12
64440: PUSH
64441: LD_INT 1
64443: PPUSH
64444: LD_INT 3
64446: PPUSH
64447: CALL_OW 12
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: ST_TO_ADDR
// animal := CreateHuman ;
64464: LD_ADDR_VAR 0 12
64468: PUSH
64469: CALL_OW 44
64473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64474: LD_VAR 0 12
64478: PPUSH
64479: LD_VAR 0 8
64483: PPUSH
64484: LD_INT 0
64486: PPUSH
64487: CALL 66326 0 3
// end ;
64491: GO 64389
64493: POP
64494: POP
// if enchidnas then
64495: LD_VAR 0 4
64499: IFFALSE 64566
// for i = 1 to enchidnas do
64501: LD_ADDR_VAR 0 11
64505: PUSH
64506: DOUBLE
64507: LD_INT 1
64509: DEC
64510: ST_TO_ADDR
64511: LD_VAR 0 4
64515: PUSH
64516: FOR_TO
64517: IFFALSE 64564
// begin hc_class = 13 ;
64519: LD_ADDR_OWVAR 28
64523: PUSH
64524: LD_INT 13
64526: ST_TO_ADDR
// hc_gallery =  ;
64527: LD_ADDR_OWVAR 33
64531: PUSH
64532: LD_STRING 
64534: ST_TO_ADDR
// animal := CreateHuman ;
64535: LD_ADDR_VAR 0 12
64539: PUSH
64540: CALL_OW 44
64544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64545: LD_VAR 0 12
64549: PPUSH
64550: LD_VAR 0 8
64554: PPUSH
64555: LD_INT 0
64557: PPUSH
64558: CALL 66326 0 3
// end ;
64562: GO 64516
64564: POP
64565: POP
// if fishes then
64566: LD_VAR 0 7
64570: IFFALSE 64637
// for i = 1 to fishes do
64572: LD_ADDR_VAR 0 11
64576: PUSH
64577: DOUBLE
64578: LD_INT 1
64580: DEC
64581: ST_TO_ADDR
64582: LD_VAR 0 7
64586: PUSH
64587: FOR_TO
64588: IFFALSE 64635
// begin hc_class = 20 ;
64590: LD_ADDR_OWVAR 28
64594: PUSH
64595: LD_INT 20
64597: ST_TO_ADDR
// hc_gallery =  ;
64598: LD_ADDR_OWVAR 33
64602: PUSH
64603: LD_STRING 
64605: ST_TO_ADDR
// animal := CreateHuman ;
64606: LD_ADDR_VAR 0 12
64610: PUSH
64611: CALL_OW 44
64615: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64616: LD_VAR 0 12
64620: PPUSH
64621: LD_VAR 0 9
64625: PPUSH
64626: LD_INT 0
64628: PPUSH
64629: CALL 66326 0 3
// end ;
64633: GO 64587
64635: POP
64636: POP
// end ;
64637: LD_VAR 0 10
64641: RET
// export function WantHeal ( sci , unit ) ; begin
64642: LD_INT 0
64644: PPUSH
// if GetTaskList ( sci ) > 0 then
64645: LD_VAR 0 1
64649: PPUSH
64650: CALL_OW 437
64654: PUSH
64655: LD_INT 0
64657: GREATER
64658: IFFALSE 64728
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 437
64669: PUSH
64670: LD_INT 1
64672: ARRAY
64673: PUSH
64674: LD_INT 1
64676: ARRAY
64677: PUSH
64678: LD_STRING l
64680: EQUAL
64681: PUSH
64682: LD_VAR 0 1
64686: PPUSH
64687: CALL_OW 437
64691: PUSH
64692: LD_INT 1
64694: ARRAY
64695: PUSH
64696: LD_INT 4
64698: ARRAY
64699: PUSH
64700: LD_VAR 0 2
64704: EQUAL
64705: AND
64706: IFFALSE 64718
// result := true else
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: LD_INT 1
64715: ST_TO_ADDR
64716: GO 64726
// result := false ;
64718: LD_ADDR_VAR 0 3
64722: PUSH
64723: LD_INT 0
64725: ST_TO_ADDR
// end else
64726: GO 64736
// result := false ;
64728: LD_ADDR_VAR 0 3
64732: PUSH
64733: LD_INT 0
64735: ST_TO_ADDR
// end ;
64736: LD_VAR 0 3
64740: RET
// export function HealTarget ( sci ) ; begin
64741: LD_INT 0
64743: PPUSH
// if not sci then
64744: LD_VAR 0 1
64748: NOT
64749: IFFALSE 64753
// exit ;
64751: GO 64818
// result := 0 ;
64753: LD_ADDR_VAR 0 2
64757: PUSH
64758: LD_INT 0
64760: ST_TO_ADDR
// if GetTaskList ( sci ) then
64761: LD_VAR 0 1
64765: PPUSH
64766: CALL_OW 437
64770: IFFALSE 64818
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64772: LD_VAR 0 1
64776: PPUSH
64777: CALL_OW 437
64781: PUSH
64782: LD_INT 1
64784: ARRAY
64785: PUSH
64786: LD_INT 1
64788: ARRAY
64789: PUSH
64790: LD_STRING l
64792: EQUAL
64793: IFFALSE 64818
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64795: LD_ADDR_VAR 0 2
64799: PUSH
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 437
64809: PUSH
64810: LD_INT 1
64812: ARRAY
64813: PUSH
64814: LD_INT 4
64816: ARRAY
64817: ST_TO_ADDR
// end ;
64818: LD_VAR 0 2
64822: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64823: LD_INT 0
64825: PPUSH
64826: PPUSH
64827: PPUSH
64828: PPUSH
// if not base_units then
64829: LD_VAR 0 1
64833: NOT
64834: IFFALSE 64838
// exit ;
64836: GO 64925
// result := false ;
64838: LD_ADDR_VAR 0 2
64842: PUSH
64843: LD_INT 0
64845: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64846: LD_ADDR_VAR 0 5
64850: PUSH
64851: LD_VAR 0 1
64855: PPUSH
64856: LD_INT 21
64858: PUSH
64859: LD_INT 3
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PPUSH
64866: CALL_OW 72
64870: ST_TO_ADDR
// if not tmp then
64871: LD_VAR 0 5
64875: NOT
64876: IFFALSE 64880
// exit ;
64878: GO 64925
// for i in tmp do
64880: LD_ADDR_VAR 0 3
64884: PUSH
64885: LD_VAR 0 5
64889: PUSH
64890: FOR_IN
64891: IFFALSE 64923
// begin result := EnemyInRange ( i , 22 ) ;
64893: LD_ADDR_VAR 0 2
64897: PUSH
64898: LD_VAR 0 3
64902: PPUSH
64903: LD_INT 22
64905: PPUSH
64906: CALL 63161 0 2
64910: ST_TO_ADDR
// if result then
64911: LD_VAR 0 2
64915: IFFALSE 64921
// exit ;
64917: POP
64918: POP
64919: GO 64925
// end ;
64921: GO 64890
64923: POP
64924: POP
// end ;
64925: LD_VAR 0 2
64929: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64930: LD_INT 0
64932: PPUSH
64933: PPUSH
// if not units then
64934: LD_VAR 0 1
64938: NOT
64939: IFFALSE 64943
// exit ;
64941: GO 65013
// result := [ ] ;
64943: LD_ADDR_VAR 0 3
64947: PUSH
64948: EMPTY
64949: ST_TO_ADDR
// for i in units do
64950: LD_ADDR_VAR 0 4
64954: PUSH
64955: LD_VAR 0 1
64959: PUSH
64960: FOR_IN
64961: IFFALSE 65011
// if GetTag ( i ) = tag then
64963: LD_VAR 0 4
64967: PPUSH
64968: CALL_OW 110
64972: PUSH
64973: LD_VAR 0 2
64977: EQUAL
64978: IFFALSE 65009
// result := Replace ( result , result + 1 , i ) ;
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_VAR 0 3
64989: PPUSH
64990: LD_VAR 0 3
64994: PUSH
64995: LD_INT 1
64997: PLUS
64998: PPUSH
64999: LD_VAR 0 4
65003: PPUSH
65004: CALL_OW 1
65008: ST_TO_ADDR
65009: GO 64960
65011: POP
65012: POP
// end ;
65013: LD_VAR 0 3
65017: RET
// export function IsDriver ( un ) ; begin
65018: LD_INT 0
65020: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65021: LD_ADDR_VAR 0 2
65025: PUSH
65026: LD_VAR 0 1
65030: PUSH
65031: LD_INT 55
65033: PUSH
65034: EMPTY
65035: LIST
65036: PPUSH
65037: CALL_OW 69
65041: IN
65042: ST_TO_ADDR
// end ;
65043: LD_VAR 0 2
65047: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65048: LD_INT 0
65050: PPUSH
65051: PPUSH
// list := [ ] ;
65052: LD_ADDR_VAR 0 5
65056: PUSH
65057: EMPTY
65058: ST_TO_ADDR
// case d of 0 :
65059: LD_VAR 0 3
65063: PUSH
65064: LD_INT 0
65066: DOUBLE
65067: EQUAL
65068: IFTRUE 65072
65070: GO 65205
65072: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65073: LD_ADDR_VAR 0 5
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_INT 4
65085: MINUS
65086: PUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 4
65094: MINUS
65095: PUSH
65096: LD_INT 2
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 3
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_INT 4
65133: PLUS
65134: PUSH
65135: LD_VAR 0 2
65139: PUSH
65140: LD_INT 4
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 3
65155: PLUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 3
65164: PLUS
65165: PUSH
65166: LD_INT 5
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_VAR 0 2
65183: PUSH
65184: LD_INT 4
65186: PLUS
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: ST_TO_ADDR
// end ; 1 :
65203: GO 65903
65205: LD_INT 1
65207: DOUBLE
65208: EQUAL
65209: IFTRUE 65213
65211: GO 65346
65213: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65214: LD_ADDR_VAR 0 5
65218: PUSH
65219: LD_VAR 0 1
65223: PUSH
65224: LD_VAR 0 2
65228: PUSH
65229: LD_INT 4
65231: MINUS
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: PUSH
65241: LD_VAR 0 1
65245: PUSH
65246: LD_INT 3
65248: MINUS
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 3
65257: MINUS
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_INT 4
65274: MINUS
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_VAR 0 2
65298: PUSH
65299: LD_INT 3
65301: PLUS
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_INT 4
65318: PLUS
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: LD_INT 4
65327: PLUS
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: ST_TO_ADDR
// end ; 2 :
65344: GO 65903
65346: LD_INT 2
65348: DOUBLE
65349: EQUAL
65350: IFTRUE 65354
65352: GO 65483
65354: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65355: LD_ADDR_VAR 0 5
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_VAR 0 2
65369: PUSH
65370: LD_INT 3
65372: MINUS
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_INT 4
65389: PLUS
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_VAR 0 2
65413: PUSH
65414: LD_INT 4
65416: PLUS
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: PUSH
65426: LD_VAR 0 1
65430: PUSH
65431: LD_INT 3
65433: MINUS
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: PUSH
65448: LD_VAR 0 1
65452: PUSH
65453: LD_INT 4
65455: MINUS
65456: PUSH
65457: LD_VAR 0 2
65461: PUSH
65462: LD_INT 4
65464: MINUS
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// end ; 3 :
65481: GO 65903
65483: LD_INT 3
65485: DOUBLE
65486: EQUAL
65487: IFTRUE 65491
65489: GO 65624
65491: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65492: LD_ADDR_VAR 0 5
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_INT 3
65504: PLUS
65505: PUSH
65506: LD_VAR 0 2
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: LD_INT 4
65526: PLUS
65527: PUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_INT 4
65535: PLUS
65536: PUSH
65537: LD_INT 5
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 4
65552: MINUS
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 1
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: LD_INT 4
65579: MINUS
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: PUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_INT 3
65596: MINUS
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 3
65605: MINUS
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: ST_TO_ADDR
// end ; 4 :
65622: GO 65903
65624: LD_INT 4
65626: DOUBLE
65627: EQUAL
65628: IFTRUE 65632
65630: GO 65765
65632: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65633: LD_ADDR_VAR 0 5
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: LD_VAR 0 2
65647: PUSH
65648: LD_INT 4
65650: PLUS
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 3
65667: PLUS
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 3
65676: PLUS
65677: PUSH
65678: LD_INT 5
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 4
65693: PLUS
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 4
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_INT 3
65720: MINUS
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 4
65737: MINUS
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: LD_INT 4
65746: MINUS
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// end ; 5 :
65763: GO 65903
65765: LD_INT 5
65767: DOUBLE
65768: EQUAL
65769: IFTRUE 65773
65771: GO 65902
65773: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_INT 4
65786: MINUS
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_VAR 0 2
65810: PUSH
65811: LD_INT 4
65813: MINUS
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: LD_INT 4
65830: PLUS
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_INT 4
65839: PLUS
65840: PUSH
65841: LD_INT 5
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 3
65856: PLUS
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_VAR 0 2
65880: PUSH
65881: LD_INT 3
65883: PLUS
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// end ; end ;
65900: GO 65903
65902: POP
// result := list ;
65903: LD_ADDR_VAR 0 4
65907: PUSH
65908: LD_VAR 0 5
65912: ST_TO_ADDR
// end ;
65913: LD_VAR 0 4
65917: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65918: LD_INT 0
65920: PPUSH
65921: PPUSH
65922: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65923: LD_VAR 0 1
65927: NOT
65928: PUSH
65929: LD_VAR 0 2
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 3
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: IN
65952: NOT
65953: OR
65954: IFFALSE 65958
// exit ;
65956: GO 66050
// tmp := [ ] ;
65958: LD_ADDR_VAR 0 5
65962: PUSH
65963: EMPTY
65964: ST_TO_ADDR
// for i in units do
65965: LD_ADDR_VAR 0 4
65969: PUSH
65970: LD_VAR 0 1
65974: PUSH
65975: FOR_IN
65976: IFFALSE 66019
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65978: LD_ADDR_VAR 0 5
65982: PUSH
65983: LD_VAR 0 5
65987: PPUSH
65988: LD_VAR 0 5
65992: PUSH
65993: LD_INT 1
65995: PLUS
65996: PPUSH
65997: LD_VAR 0 4
66001: PPUSH
66002: LD_VAR 0 2
66006: PPUSH
66007: CALL_OW 259
66011: PPUSH
66012: CALL_OW 2
66016: ST_TO_ADDR
66017: GO 65975
66019: POP
66020: POP
// if not tmp then
66021: LD_VAR 0 5
66025: NOT
66026: IFFALSE 66030
// exit ;
66028: GO 66050
// result := SortListByListDesc ( units , tmp ) ;
66030: LD_ADDR_VAR 0 3
66034: PUSH
66035: LD_VAR 0 1
66039: PPUSH
66040: LD_VAR 0 5
66044: PPUSH
66045: CALL_OW 77
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 3
66054: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
66059: PPUSH
// result := false ;
66060: LD_ADDR_VAR 0 3
66064: PUSH
66065: LD_INT 0
66067: ST_TO_ADDR
// x := GetX ( building ) ;
66068: LD_ADDR_VAR 0 4
66072: PUSH
66073: LD_VAR 0 2
66077: PPUSH
66078: CALL_OW 250
66082: ST_TO_ADDR
// y := GetY ( building ) ;
66083: LD_ADDR_VAR 0 5
66087: PUSH
66088: LD_VAR 0 2
66092: PPUSH
66093: CALL_OW 251
66097: ST_TO_ADDR
// if not building or not x or not y then
66098: LD_VAR 0 2
66102: NOT
66103: PUSH
66104: LD_VAR 0 4
66108: NOT
66109: OR
66110: PUSH
66111: LD_VAR 0 5
66115: NOT
66116: OR
66117: IFFALSE 66121
// exit ;
66119: GO 66213
// if GetTaskList ( unit ) then
66121: LD_VAR 0 1
66125: PPUSH
66126: CALL_OW 437
66130: IFFALSE 66213
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66132: LD_STRING e
66134: PUSH
66135: LD_VAR 0 1
66139: PPUSH
66140: CALL_OW 437
66144: PUSH
66145: LD_INT 1
66147: ARRAY
66148: PUSH
66149: LD_INT 1
66151: ARRAY
66152: EQUAL
66153: PUSH
66154: LD_VAR 0 4
66158: PUSH
66159: LD_VAR 0 1
66163: PPUSH
66164: CALL_OW 437
66168: PUSH
66169: LD_INT 1
66171: ARRAY
66172: PUSH
66173: LD_INT 2
66175: ARRAY
66176: EQUAL
66177: AND
66178: PUSH
66179: LD_VAR 0 5
66183: PUSH
66184: LD_VAR 0 1
66188: PPUSH
66189: CALL_OW 437
66193: PUSH
66194: LD_INT 1
66196: ARRAY
66197: PUSH
66198: LD_INT 3
66200: ARRAY
66201: EQUAL
66202: AND
66203: IFFALSE 66213
// result := true end ;
66205: LD_ADDR_VAR 0 3
66209: PUSH
66210: LD_INT 1
66212: ST_TO_ADDR
// end ;
66213: LD_VAR 0 3
66217: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66218: LD_INT 0
66220: PPUSH
// result := false ;
66221: LD_ADDR_VAR 0 4
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
// if GetTaskList ( unit ) then
66229: LD_VAR 0 1
66233: PPUSH
66234: CALL_OW 437
66238: IFFALSE 66321
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66240: LD_STRING M
66242: PUSH
66243: LD_VAR 0 1
66247: PPUSH
66248: CALL_OW 437
66252: PUSH
66253: LD_INT 1
66255: ARRAY
66256: PUSH
66257: LD_INT 1
66259: ARRAY
66260: EQUAL
66261: PUSH
66262: LD_VAR 0 2
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 437
66276: PUSH
66277: LD_INT 1
66279: ARRAY
66280: PUSH
66281: LD_INT 2
66283: ARRAY
66284: EQUAL
66285: AND
66286: PUSH
66287: LD_VAR 0 3
66291: PUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL_OW 437
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PUSH
66306: LD_INT 3
66308: ARRAY
66309: EQUAL
66310: AND
66311: IFFALSE 66321
// result := true ;
66313: LD_ADDR_VAR 0 4
66317: PUSH
66318: LD_INT 1
66320: ST_TO_ADDR
// end ; end ;
66321: LD_VAR 0 4
66325: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66326: LD_INT 0
66328: PPUSH
66329: PPUSH
66330: PPUSH
66331: PPUSH
// if not unit or not area then
66332: LD_VAR 0 1
66336: NOT
66337: PUSH
66338: LD_VAR 0 2
66342: NOT
66343: OR
66344: IFFALSE 66348
// exit ;
66346: GO 66512
// tmp := AreaToList ( area , i ) ;
66348: LD_ADDR_VAR 0 6
66352: PUSH
66353: LD_VAR 0 2
66357: PPUSH
66358: LD_VAR 0 5
66362: PPUSH
66363: CALL_OW 517
66367: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66368: LD_ADDR_VAR 0 5
66372: PUSH
66373: DOUBLE
66374: LD_INT 1
66376: DEC
66377: ST_TO_ADDR
66378: LD_VAR 0 6
66382: PUSH
66383: LD_INT 1
66385: ARRAY
66386: PUSH
66387: FOR_TO
66388: IFFALSE 66510
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66390: LD_ADDR_VAR 0 7
66394: PUSH
66395: LD_VAR 0 6
66399: PUSH
66400: LD_INT 1
66402: ARRAY
66403: PUSH
66404: LD_VAR 0 5
66408: ARRAY
66409: PUSH
66410: LD_VAR 0 6
66414: PUSH
66415: LD_INT 2
66417: ARRAY
66418: PUSH
66419: LD_VAR 0 5
66423: ARRAY
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66429: LD_VAR 0 7
66433: PUSH
66434: LD_INT 1
66436: ARRAY
66437: PPUSH
66438: LD_VAR 0 7
66442: PUSH
66443: LD_INT 2
66445: ARRAY
66446: PPUSH
66447: CALL_OW 428
66451: PUSH
66452: LD_INT 0
66454: EQUAL
66455: IFFALSE 66508
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66457: LD_VAR 0 1
66461: PPUSH
66462: LD_VAR 0 7
66466: PUSH
66467: LD_INT 1
66469: ARRAY
66470: PPUSH
66471: LD_VAR 0 7
66475: PUSH
66476: LD_INT 2
66478: ARRAY
66479: PPUSH
66480: LD_VAR 0 3
66484: PPUSH
66485: CALL_OW 48
// result := IsPlaced ( unit ) ;
66489: LD_ADDR_VAR 0 4
66493: PUSH
66494: LD_VAR 0 1
66498: PPUSH
66499: CALL_OW 305
66503: ST_TO_ADDR
// exit ;
66504: POP
66505: POP
66506: GO 66512
// end ; end ;
66508: GO 66387
66510: POP
66511: POP
// end ;
66512: LD_VAR 0 4
66516: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
66521: PPUSH
// if not side or side > 8 then
66522: LD_VAR 0 1
66526: NOT
66527: PUSH
66528: LD_VAR 0 1
66532: PUSH
66533: LD_INT 8
66535: GREATER
66536: OR
66537: IFFALSE 66541
// exit ;
66539: GO 66728
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66541: LD_ADDR_VAR 0 4
66545: PUSH
66546: LD_INT 22
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 21
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PPUSH
66572: CALL_OW 69
66576: ST_TO_ADDR
// if not tmp then
66577: LD_VAR 0 4
66581: NOT
66582: IFFALSE 66586
// exit ;
66584: GO 66728
// enable_addtolog := true ;
66586: LD_ADDR_OWVAR 81
66590: PUSH
66591: LD_INT 1
66593: ST_TO_ADDR
// AddToLog ( [ ) ;
66594: LD_STRING [
66596: PPUSH
66597: CALL_OW 561
// for i in tmp do
66601: LD_ADDR_VAR 0 3
66605: PUSH
66606: LD_VAR 0 4
66610: PUSH
66611: FOR_IN
66612: IFFALSE 66719
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66614: LD_STRING [
66616: PUSH
66617: LD_VAR 0 3
66621: PPUSH
66622: CALL_OW 266
66626: STR
66627: PUSH
66628: LD_STRING , 
66630: STR
66631: PUSH
66632: LD_VAR 0 3
66636: PPUSH
66637: CALL_OW 250
66641: STR
66642: PUSH
66643: LD_STRING , 
66645: STR
66646: PUSH
66647: LD_VAR 0 3
66651: PPUSH
66652: CALL_OW 251
66656: STR
66657: PUSH
66658: LD_STRING , 
66660: STR
66661: PUSH
66662: LD_VAR 0 3
66666: PPUSH
66667: CALL_OW 254
66671: STR
66672: PUSH
66673: LD_STRING , 
66675: STR
66676: PUSH
66677: LD_VAR 0 3
66681: PPUSH
66682: LD_INT 1
66684: PPUSH
66685: CALL_OW 268
66689: STR
66690: PUSH
66691: LD_STRING , 
66693: STR
66694: PUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: LD_INT 2
66702: PPUSH
66703: CALL_OW 268
66707: STR
66708: PUSH
66709: LD_STRING ],
66711: STR
66712: PPUSH
66713: CALL_OW 561
// end ;
66717: GO 66611
66719: POP
66720: POP
// AddToLog ( ]; ) ;
66721: LD_STRING ];
66723: PPUSH
66724: CALL_OW 561
// end ;
66728: LD_VAR 0 2
66732: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
66737: PPUSH
66738: PPUSH
66739: PPUSH
// if not area or not rate or not max then
66740: LD_VAR 0 1
66744: NOT
66745: PUSH
66746: LD_VAR 0 2
66750: NOT
66751: OR
66752: PUSH
66753: LD_VAR 0 4
66757: NOT
66758: OR
66759: IFFALSE 66763
// exit ;
66761: GO 66955
// while 1 do
66763: LD_INT 1
66765: IFFALSE 66955
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66767: LD_ADDR_VAR 0 9
66771: PUSH
66772: LD_VAR 0 1
66776: PPUSH
66777: LD_INT 1
66779: PPUSH
66780: CALL_OW 287
66784: PUSH
66785: LD_INT 10
66787: MUL
66788: ST_TO_ADDR
// r := rate / 10 ;
66789: LD_ADDR_VAR 0 7
66793: PUSH
66794: LD_VAR 0 2
66798: PUSH
66799: LD_INT 10
66801: DIVREAL
66802: ST_TO_ADDR
// time := 1 1$00 ;
66803: LD_ADDR_VAR 0 8
66807: PUSH
66808: LD_INT 2100
66810: ST_TO_ADDR
// if amount < min then
66811: LD_VAR 0 9
66815: PUSH
66816: LD_VAR 0 3
66820: LESS
66821: IFFALSE 66839
// r := r * 2 else
66823: LD_ADDR_VAR 0 7
66827: PUSH
66828: LD_VAR 0 7
66832: PUSH
66833: LD_INT 2
66835: MUL
66836: ST_TO_ADDR
66837: GO 66865
// if amount > max then
66839: LD_VAR 0 9
66843: PUSH
66844: LD_VAR 0 4
66848: GREATER
66849: IFFALSE 66865
// r := r / 2 ;
66851: LD_ADDR_VAR 0 7
66855: PUSH
66856: LD_VAR 0 7
66860: PUSH
66861: LD_INT 2
66863: DIVREAL
66864: ST_TO_ADDR
// time := time / r ;
66865: LD_ADDR_VAR 0 8
66869: PUSH
66870: LD_VAR 0 8
66874: PUSH
66875: LD_VAR 0 7
66879: DIVREAL
66880: ST_TO_ADDR
// if time < 0 then
66881: LD_VAR 0 8
66885: PUSH
66886: LD_INT 0
66888: LESS
66889: IFFALSE 66906
// time := time * - 1 ;
66891: LD_ADDR_VAR 0 8
66895: PUSH
66896: LD_VAR 0 8
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: MUL
66905: ST_TO_ADDR
// wait ( time ) ;
66906: LD_VAR 0 8
66910: PPUSH
66911: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66915: LD_INT 35
66917: PPUSH
66918: LD_INT 875
66920: PPUSH
66921: CALL_OW 12
66925: PPUSH
66926: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66930: LD_INT 1
66932: PPUSH
66933: LD_INT 5
66935: PPUSH
66936: CALL_OW 12
66940: PPUSH
66941: LD_VAR 0 1
66945: PPUSH
66946: LD_INT 1
66948: PPUSH
66949: CALL_OW 55
// end ;
66953: GO 66763
// end ;
66955: LD_VAR 0 5
66959: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
66966: PPUSH
66967: PPUSH
66968: PPUSH
66969: PPUSH
// if not turrets or not factories then
66970: LD_VAR 0 1
66974: NOT
66975: PUSH
66976: LD_VAR 0 2
66980: NOT
66981: OR
66982: IFFALSE 66986
// exit ;
66984: GO 67293
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66986: LD_ADDR_VAR 0 10
66990: PUSH
66991: LD_INT 5
66993: PUSH
66994: LD_INT 6
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: PUSH
67004: LD_INT 4
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: LD_INT 5
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 24
67028: PUSH
67029: LD_INT 25
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 23
67038: PUSH
67039: LD_INT 27
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 42
67052: PUSH
67053: LD_INT 43
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 44
67062: PUSH
67063: LD_INT 46
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 45
67072: PUSH
67073: LD_INT 47
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// result := [ ] ;
67090: LD_ADDR_VAR 0 3
67094: PUSH
67095: EMPTY
67096: ST_TO_ADDR
// for i in turrets do
67097: LD_ADDR_VAR 0 4
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: FOR_IN
67108: IFFALSE 67291
// begin nat := GetNation ( i ) ;
67110: LD_ADDR_VAR 0 7
67114: PUSH
67115: LD_VAR 0 4
67119: PPUSH
67120: CALL_OW 248
67124: ST_TO_ADDR
// weapon := 0 ;
67125: LD_ADDR_VAR 0 8
67129: PUSH
67130: LD_INT 0
67132: ST_TO_ADDR
// if not nat then
67133: LD_VAR 0 7
67137: NOT
67138: IFFALSE 67142
// continue ;
67140: GO 67107
// for j in list [ nat ] do
67142: LD_ADDR_VAR 0 5
67146: PUSH
67147: LD_VAR 0 10
67151: PUSH
67152: LD_VAR 0 7
67156: ARRAY
67157: PUSH
67158: FOR_IN
67159: IFFALSE 67200
// if GetBWeapon ( i ) = j [ 1 ] then
67161: LD_VAR 0 4
67165: PPUSH
67166: CALL_OW 269
67170: PUSH
67171: LD_VAR 0 5
67175: PUSH
67176: LD_INT 1
67178: ARRAY
67179: EQUAL
67180: IFFALSE 67198
// begin weapon := j [ 2 ] ;
67182: LD_ADDR_VAR 0 8
67186: PUSH
67187: LD_VAR 0 5
67191: PUSH
67192: LD_INT 2
67194: ARRAY
67195: ST_TO_ADDR
// break ;
67196: GO 67200
// end ;
67198: GO 67158
67200: POP
67201: POP
// if not weapon then
67202: LD_VAR 0 8
67206: NOT
67207: IFFALSE 67211
// continue ;
67209: GO 67107
// for k in factories do
67211: LD_ADDR_VAR 0 6
67215: PUSH
67216: LD_VAR 0 2
67220: PUSH
67221: FOR_IN
67222: IFFALSE 67287
// begin weapons := AvailableWeaponList ( k ) ;
67224: LD_ADDR_VAR 0 9
67228: PUSH
67229: LD_VAR 0 6
67233: PPUSH
67234: CALL_OW 478
67238: ST_TO_ADDR
// if not weapons then
67239: LD_VAR 0 9
67243: NOT
67244: IFFALSE 67248
// continue ;
67246: GO 67221
// if weapon in weapons then
67248: LD_VAR 0 8
67252: PUSH
67253: LD_VAR 0 9
67257: IN
67258: IFFALSE 67285
// begin result := [ i , weapon ] ;
67260: LD_ADDR_VAR 0 3
67264: PUSH
67265: LD_VAR 0 4
67269: PUSH
67270: LD_VAR 0 8
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// exit ;
67279: POP
67280: POP
67281: POP
67282: POP
67283: GO 67293
// end ; end ;
67285: GO 67221
67287: POP
67288: POP
// end ;
67289: GO 67107
67291: POP
67292: POP
// end ;
67293: LD_VAR 0 3
67297: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67298: LD_INT 0
67300: PPUSH
// if not side or side > 8 then
67301: LD_VAR 0 3
67305: NOT
67306: PUSH
67307: LD_VAR 0 3
67311: PUSH
67312: LD_INT 8
67314: GREATER
67315: OR
67316: IFFALSE 67320
// exit ;
67318: GO 67379
// if not range then
67320: LD_VAR 0 4
67324: NOT
67325: IFFALSE 67336
// range := - 12 ;
67327: LD_ADDR_VAR 0 4
67331: PUSH
67332: LD_INT 12
67334: NEG
67335: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67336: LD_VAR 0 1
67340: PPUSH
67341: LD_VAR 0 2
67345: PPUSH
67346: LD_VAR 0 3
67350: PPUSH
67351: LD_VAR 0 4
67355: PPUSH
67356: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67360: LD_VAR 0 1
67364: PPUSH
67365: LD_VAR 0 2
67369: PPUSH
67370: LD_VAR 0 3
67374: PPUSH
67375: CALL_OW 331
// end ;
67379: LD_VAR 0 5
67383: RET
// export function Video ( mode ) ; begin
67384: LD_INT 0
67386: PPUSH
// ingame_video = mode ;
67387: LD_ADDR_OWVAR 52
67391: PUSH
67392: LD_VAR 0 1
67396: ST_TO_ADDR
// interface_hidden = mode ;
67397: LD_ADDR_OWVAR 54
67401: PUSH
67402: LD_VAR 0 1
67406: ST_TO_ADDR
// end ;
67407: LD_VAR 0 2
67411: RET
// export function Join ( array , element ) ; begin
67412: LD_INT 0
67414: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: LD_VAR 0 1
67429: PUSH
67430: LD_INT 1
67432: PLUS
67433: PPUSH
67434: LD_VAR 0 2
67438: PPUSH
67439: CALL_OW 1
67443: ST_TO_ADDR
// end ;
67444: LD_VAR 0 3
67448: RET
// export function JoinUnion ( array , element ) ; begin
67449: LD_INT 0
67451: PPUSH
// result := array union element ;
67452: LD_ADDR_VAR 0 3
67456: PUSH
67457: LD_VAR 0 1
67461: PUSH
67462: LD_VAR 0 2
67466: UNION
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 3
67472: RET
// export function GetBehemoths ( side ) ; begin
67473: LD_INT 0
67475: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67476: LD_ADDR_VAR 0 2
67480: PUSH
67481: LD_INT 22
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 31
67495: PUSH
67496: LD_INT 25
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PPUSH
67507: CALL_OW 69
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 2
67516: RET
// export function Shuffle ( array ) ; var i , index ; begin
67517: LD_INT 0
67519: PPUSH
67520: PPUSH
67521: PPUSH
// result := [ ] ;
67522: LD_ADDR_VAR 0 2
67526: PUSH
67527: EMPTY
67528: ST_TO_ADDR
// if not array then
67529: LD_VAR 0 1
67533: NOT
67534: IFFALSE 67538
// exit ;
67536: GO 67637
// Randomize ;
67538: CALL_OW 10
// for i = array downto 1 do
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: DOUBLE
67548: LD_VAR 0 1
67552: INC
67553: ST_TO_ADDR
67554: LD_INT 1
67556: PUSH
67557: FOR_DOWNTO
67558: IFFALSE 67635
// begin index := rand ( 1 , array ) ;
67560: LD_ADDR_VAR 0 4
67564: PUSH
67565: LD_INT 1
67567: PPUSH
67568: LD_VAR 0 1
67572: PPUSH
67573: CALL_OW 12
67577: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67578: LD_ADDR_VAR 0 2
67582: PUSH
67583: LD_VAR 0 2
67587: PPUSH
67588: LD_VAR 0 2
67592: PUSH
67593: LD_INT 1
67595: PLUS
67596: PPUSH
67597: LD_VAR 0 1
67601: PUSH
67602: LD_VAR 0 4
67606: ARRAY
67607: PPUSH
67608: CALL_OW 2
67612: ST_TO_ADDR
// array := Delete ( array , index ) ;
67613: LD_ADDR_VAR 0 1
67617: PUSH
67618: LD_VAR 0 1
67622: PPUSH
67623: LD_VAR 0 4
67627: PPUSH
67628: CALL_OW 3
67632: ST_TO_ADDR
// end ;
67633: GO 67557
67635: POP
67636: POP
// end ;
67637: LD_VAR 0 2
67641: RET
// export function GetBaseMaterials ( base ) ; begin
67642: LD_INT 0
67644: PPUSH
// result := [ 0 , 0 , 0 ] ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: ST_TO_ADDR
// if not base then
67664: LD_VAR 0 1
67668: NOT
67669: IFFALSE 67673
// exit ;
67671: GO 67722
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67673: LD_ADDR_VAR 0 2
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_INT 1
67685: PPUSH
67686: CALL_OW 275
67690: PUSH
67691: LD_VAR 0 1
67695: PPUSH
67696: LD_INT 2
67698: PPUSH
67699: CALL_OW 275
67703: PUSH
67704: LD_VAR 0 1
67708: PPUSH
67709: LD_INT 3
67711: PPUSH
67712: CALL_OW 275
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: ST_TO_ADDR
// end ;
67722: LD_VAR 0 2
67726: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67727: LD_INT 0
67729: PPUSH
67730: PPUSH
// result := array ;
67731: LD_ADDR_VAR 0 3
67735: PUSH
67736: LD_VAR 0 1
67740: ST_TO_ADDR
// if size > 0 then
67741: LD_VAR 0 2
67745: PUSH
67746: LD_INT 0
67748: GREATER
67749: IFFALSE 67795
// for i := array downto size do
67751: LD_ADDR_VAR 0 4
67755: PUSH
67756: DOUBLE
67757: LD_VAR 0 1
67761: INC
67762: ST_TO_ADDR
67763: LD_VAR 0 2
67767: PUSH
67768: FOR_DOWNTO
67769: IFFALSE 67793
// result := Delete ( result , result ) ;
67771: LD_ADDR_VAR 0 3
67775: PUSH
67776: LD_VAR 0 3
67780: PPUSH
67781: LD_VAR 0 3
67785: PPUSH
67786: CALL_OW 3
67790: ST_TO_ADDR
67791: GO 67768
67793: POP
67794: POP
// end ;
67795: LD_VAR 0 3
67799: RET
// export function ComExit ( unit ) ; var tmp ; begin
67800: LD_INT 0
67802: PPUSH
67803: PPUSH
// if not IsInUnit ( unit ) then
67804: LD_VAR 0 1
67808: PPUSH
67809: CALL_OW 310
67813: NOT
67814: IFFALSE 67818
// exit ;
67816: GO 67878
// tmp := IsInUnit ( unit ) ;
67818: LD_ADDR_VAR 0 3
67822: PUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: CALL_OW 310
67832: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67833: LD_VAR 0 3
67837: PPUSH
67838: CALL_OW 247
67842: PUSH
67843: LD_INT 2
67845: EQUAL
67846: IFFALSE 67859
// ComExitVehicle ( unit ) else
67848: LD_VAR 0 1
67852: PPUSH
67853: CALL_OW 121
67857: GO 67868
// ComExitBuilding ( unit ) ;
67859: LD_VAR 0 1
67863: PPUSH
67864: CALL_OW 122
// result := tmp ;
67868: LD_ADDR_VAR 0 2
67872: PUSH
67873: LD_VAR 0 3
67877: ST_TO_ADDR
// end ;
67878: LD_VAR 0 2
67882: RET
// export function ComExitAll ( units ) ; var i ; begin
67883: LD_INT 0
67885: PPUSH
67886: PPUSH
// if not units then
67887: LD_VAR 0 1
67891: NOT
67892: IFFALSE 67896
// exit ;
67894: GO 67922
// for i in units do
67896: LD_ADDR_VAR 0 3
67900: PUSH
67901: LD_VAR 0 1
67905: PUSH
67906: FOR_IN
67907: IFFALSE 67920
// ComExit ( i ) ;
67909: LD_VAR 0 3
67913: PPUSH
67914: CALL 67800 0 1
67918: GO 67906
67920: POP
67921: POP
// end ;
67922: LD_VAR 0 2
67926: RET
// export function ResetHc ; begin
67927: LD_INT 0
67929: PPUSH
// InitHc ;
67930: CALL_OW 19
// hc_importance := 0 ;
67934: LD_ADDR_OWVAR 32
67938: PUSH
67939: LD_INT 0
67941: ST_TO_ADDR
// end ;
67942: LD_VAR 0 1
67946: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67947: LD_INT 0
67949: PPUSH
67950: PPUSH
67951: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67952: LD_ADDR_VAR 0 6
67956: PUSH
67957: LD_VAR 0 1
67961: PUSH
67962: LD_VAR 0 3
67966: PLUS
67967: PUSH
67968: LD_INT 2
67970: DIV
67971: ST_TO_ADDR
// if _x < 0 then
67972: LD_VAR 0 6
67976: PUSH
67977: LD_INT 0
67979: LESS
67980: IFFALSE 67997
// _x := _x * - 1 ;
67982: LD_ADDR_VAR 0 6
67986: PUSH
67987: LD_VAR 0 6
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: MUL
67996: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67997: LD_ADDR_VAR 0 7
68001: PUSH
68002: LD_VAR 0 2
68006: PUSH
68007: LD_VAR 0 4
68011: PLUS
68012: PUSH
68013: LD_INT 2
68015: DIV
68016: ST_TO_ADDR
// if _y < 0 then
68017: LD_VAR 0 7
68021: PUSH
68022: LD_INT 0
68024: LESS
68025: IFFALSE 68042
// _y := _y * - 1 ;
68027: LD_ADDR_VAR 0 7
68031: PUSH
68032: LD_VAR 0 7
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: MUL
68041: ST_TO_ADDR
// result := [ _x , _y ] ;
68042: LD_ADDR_VAR 0 5
68046: PUSH
68047: LD_VAR 0 6
68051: PUSH
68052: LD_VAR 0 7
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: ST_TO_ADDR
// end ;
68061: LD_VAR 0 5
68065: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68066: LD_INT 0
68068: PPUSH
68069: PPUSH
68070: PPUSH
68071: PPUSH
// task := GetTaskList ( unit ) ;
68072: LD_ADDR_VAR 0 7
68076: PUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: CALL_OW 437
68086: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68087: LD_VAR 0 7
68091: NOT
68092: PUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: LD_VAR 0 2
68102: PPUSH
68103: CALL_OW 308
68107: NOT
68108: AND
68109: IFFALSE 68113
// exit ;
68111: GO 68231
// if IsInArea ( unit , area ) then
68113: LD_VAR 0 1
68117: PPUSH
68118: LD_VAR 0 2
68122: PPUSH
68123: CALL_OW 308
68127: IFFALSE 68145
// begin ComMoveToArea ( unit , goAway ) ;
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_VAR 0 3
68138: PPUSH
68139: CALL_OW 113
// exit ;
68143: GO 68231
// end ; if task [ 1 ] [ 1 ] <> M then
68145: LD_VAR 0 7
68149: PUSH
68150: LD_INT 1
68152: ARRAY
68153: PUSH
68154: LD_INT 1
68156: ARRAY
68157: PUSH
68158: LD_STRING M
68160: NONEQUAL
68161: IFFALSE 68165
// exit ;
68163: GO 68231
// x := task [ 1 ] [ 2 ] ;
68165: LD_ADDR_VAR 0 5
68169: PUSH
68170: LD_VAR 0 7
68174: PUSH
68175: LD_INT 1
68177: ARRAY
68178: PUSH
68179: LD_INT 2
68181: ARRAY
68182: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68183: LD_ADDR_VAR 0 6
68187: PUSH
68188: LD_VAR 0 7
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: PUSH
68197: LD_INT 3
68199: ARRAY
68200: ST_TO_ADDR
// if InArea ( x , y , area ) then
68201: LD_VAR 0 5
68205: PPUSH
68206: LD_VAR 0 6
68210: PPUSH
68211: LD_VAR 0 2
68215: PPUSH
68216: CALL_OW 309
68220: IFFALSE 68231
// ComStop ( unit ) ;
68222: LD_VAR 0 1
68226: PPUSH
68227: CALL_OW 141
// end ;
68231: LD_VAR 0 4
68235: RET
// export function Abs ( value ) ; begin
68236: LD_INT 0
68238: PPUSH
// result := value ;
68239: LD_ADDR_VAR 0 2
68243: PUSH
68244: LD_VAR 0 1
68248: ST_TO_ADDR
// if value < 0 then
68249: LD_VAR 0 1
68253: PUSH
68254: LD_INT 0
68256: LESS
68257: IFFALSE 68274
// result := value * - 1 ;
68259: LD_ADDR_VAR 0 2
68263: PUSH
68264: LD_VAR 0 1
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: MUL
68273: ST_TO_ADDR
// end ;
68274: LD_VAR 0 2
68278: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68279: LD_INT 0
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
68286: PPUSH
68287: PPUSH
68288: PPUSH
// if not unit or not building then
68289: LD_VAR 0 1
68293: NOT
68294: PUSH
68295: LD_VAR 0 2
68299: NOT
68300: OR
68301: IFFALSE 68305
// exit ;
68303: GO 68531
// x := GetX ( building ) ;
68305: LD_ADDR_VAR 0 4
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: CALL_OW 250
68319: ST_TO_ADDR
// y := GetY ( building ) ;
68320: LD_ADDR_VAR 0 6
68324: PUSH
68325: LD_VAR 0 2
68329: PPUSH
68330: CALL_OW 251
68334: ST_TO_ADDR
// d := GetDir ( building ) ;
68335: LD_ADDR_VAR 0 8
68339: PUSH
68340: LD_VAR 0 2
68344: PPUSH
68345: CALL_OW 254
68349: ST_TO_ADDR
// r := 4 ;
68350: LD_ADDR_VAR 0 9
68354: PUSH
68355: LD_INT 4
68357: ST_TO_ADDR
// for i := 1 to 5 do
68358: LD_ADDR_VAR 0 10
68362: PUSH
68363: DOUBLE
68364: LD_INT 1
68366: DEC
68367: ST_TO_ADDR
68368: LD_INT 5
68370: PUSH
68371: FOR_TO
68372: IFFALSE 68529
// begin _x := ShiftX ( x , d , r + i ) ;
68374: LD_ADDR_VAR 0 5
68378: PUSH
68379: LD_VAR 0 4
68383: PPUSH
68384: LD_VAR 0 8
68388: PPUSH
68389: LD_VAR 0 9
68393: PUSH
68394: LD_VAR 0 10
68398: PLUS
68399: PPUSH
68400: CALL_OW 272
68404: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68405: LD_ADDR_VAR 0 7
68409: PUSH
68410: LD_VAR 0 6
68414: PPUSH
68415: LD_VAR 0 8
68419: PPUSH
68420: LD_VAR 0 9
68424: PUSH
68425: LD_VAR 0 10
68429: PLUS
68430: PPUSH
68431: CALL_OW 273
68435: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68436: LD_VAR 0 5
68440: PPUSH
68441: LD_VAR 0 7
68445: PPUSH
68446: CALL_OW 488
68450: PUSH
68451: LD_VAR 0 5
68455: PPUSH
68456: LD_VAR 0 7
68460: PPUSH
68461: CALL_OW 428
68465: PPUSH
68466: CALL_OW 247
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: IN
68481: NOT
68482: AND
68483: IFFALSE 68527
// begin ComMoveXY ( unit , _x , _y ) ;
68485: LD_VAR 0 1
68489: PPUSH
68490: LD_VAR 0 5
68494: PPUSH
68495: LD_VAR 0 7
68499: PPUSH
68500: CALL_OW 111
// result := [ _x , _y ] ;
68504: LD_ADDR_VAR 0 3
68508: PUSH
68509: LD_VAR 0 5
68513: PUSH
68514: LD_VAR 0 7
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: ST_TO_ADDR
// exit ;
68523: POP
68524: POP
68525: GO 68531
// end ; end ;
68527: GO 68371
68529: POP
68530: POP
// end ;
68531: LD_VAR 0 3
68535: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
68540: PPUSH
// result := 0 ;
68541: LD_ADDR_VAR 0 3
68545: PUSH
68546: LD_INT 0
68548: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68549: LD_VAR 0 1
68553: PUSH
68554: LD_INT 0
68556: LESS
68557: PUSH
68558: LD_VAR 0 1
68562: PUSH
68563: LD_INT 8
68565: GREATER
68566: OR
68567: PUSH
68568: LD_VAR 0 2
68572: PUSH
68573: LD_INT 0
68575: LESS
68576: OR
68577: PUSH
68578: LD_VAR 0 2
68582: PUSH
68583: LD_INT 8
68585: GREATER
68586: OR
68587: IFFALSE 68591
// exit ;
68589: GO 68666
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68591: LD_ADDR_VAR 0 4
68595: PUSH
68596: LD_INT 22
68598: PUSH
68599: LD_VAR 0 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PPUSH
68608: CALL_OW 69
68612: PUSH
68613: FOR_IN
68614: IFFALSE 68664
// begin un := UnitShoot ( i ) ;
68616: LD_ADDR_VAR 0 5
68620: PUSH
68621: LD_VAR 0 4
68625: PPUSH
68626: CALL_OW 504
68630: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68631: LD_VAR 0 5
68635: PPUSH
68636: CALL_OW 255
68640: PUSH
68641: LD_VAR 0 1
68645: EQUAL
68646: IFFALSE 68662
// begin result := un ;
68648: LD_ADDR_VAR 0 3
68652: PUSH
68653: LD_VAR 0 5
68657: ST_TO_ADDR
// exit ;
68658: POP
68659: POP
68660: GO 68666
// end ; end ;
68662: GO 68613
68664: POP
68665: POP
// end ;
68666: LD_VAR 0 3
68670: RET
// export function GetCargoBay ( units ) ; begin
68671: LD_INT 0
68673: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68674: LD_ADDR_VAR 0 2
68678: PUSH
68679: LD_VAR 0 1
68683: PPUSH
68684: LD_INT 2
68686: PUSH
68687: LD_INT 34
68689: PUSH
68690: LD_INT 12
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 34
68699: PUSH
68700: LD_INT 51
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 34
68709: PUSH
68710: LD_INT 32
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 34
68719: PUSH
68720: LD_EXP 33
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: PPUSH
68736: CALL_OW 72
68740: ST_TO_ADDR
// end ;
68741: LD_VAR 0 2
68745: RET
// export function Negate ( value ) ; begin
68746: LD_INT 0
68748: PPUSH
// result := not value ;
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: LD_VAR 0 1
68758: NOT
68759: ST_TO_ADDR
// end ;
68760: LD_VAR 0 2
68764: RET
// export function Inc ( value ) ; begin
68765: LD_INT 0
68767: PPUSH
// result := value + 1 ;
68768: LD_ADDR_VAR 0 2
68772: PUSH
68773: LD_VAR 0 1
68777: PUSH
68778: LD_INT 1
68780: PLUS
68781: ST_TO_ADDR
// end ;
68782: LD_VAR 0 2
68786: RET
// export function Dec ( value ) ; begin
68787: LD_INT 0
68789: PPUSH
// result := value - 1 ;
68790: LD_ADDR_VAR 0 2
68794: PUSH
68795: LD_VAR 0 1
68799: PUSH
68800: LD_INT 1
68802: MINUS
68803: ST_TO_ADDR
// end ;
68804: LD_VAR 0 2
68808: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68809: LD_INT 0
68811: PPUSH
68812: PPUSH
68813: PPUSH
68814: PPUSH
68815: PPUSH
68816: PPUSH
68817: PPUSH
68818: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68819: LD_VAR 0 1
68823: PPUSH
68824: LD_VAR 0 2
68828: PPUSH
68829: CALL_OW 488
68833: NOT
68834: PUSH
68835: LD_VAR 0 3
68839: PPUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: CALL_OW 488
68849: NOT
68850: OR
68851: IFFALSE 68864
// begin result := - 1 ;
68853: LD_ADDR_VAR 0 5
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: ST_TO_ADDR
// exit ;
68862: GO 69099
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68864: LD_ADDR_VAR 0 12
68868: PUSH
68869: LD_VAR 0 1
68873: PPUSH
68874: LD_VAR 0 2
68878: PPUSH
68879: LD_VAR 0 3
68883: PPUSH
68884: LD_VAR 0 4
68888: PPUSH
68889: CALL 67947 0 4
68893: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68894: LD_ADDR_VAR 0 11
68898: PUSH
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_VAR 0 2
68908: PPUSH
68909: LD_VAR 0 12
68913: PUSH
68914: LD_INT 1
68916: ARRAY
68917: PPUSH
68918: LD_VAR 0 12
68922: PUSH
68923: LD_INT 2
68925: ARRAY
68926: PPUSH
68927: CALL_OW 298
68931: ST_TO_ADDR
// distance := 9999 ;
68932: LD_ADDR_VAR 0 10
68936: PUSH
68937: LD_INT 9999
68939: ST_TO_ADDR
// for i := 0 to 5 do
68940: LD_ADDR_VAR 0 6
68944: PUSH
68945: DOUBLE
68946: LD_INT 0
68948: DEC
68949: ST_TO_ADDR
68950: LD_INT 5
68952: PUSH
68953: FOR_TO
68954: IFFALSE 69097
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68956: LD_ADDR_VAR 0 7
68960: PUSH
68961: LD_VAR 0 1
68965: PPUSH
68966: LD_VAR 0 6
68970: PPUSH
68971: LD_VAR 0 11
68975: PPUSH
68976: CALL_OW 272
68980: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68981: LD_ADDR_VAR 0 8
68985: PUSH
68986: LD_VAR 0 2
68990: PPUSH
68991: LD_VAR 0 6
68995: PPUSH
68996: LD_VAR 0 11
69000: PPUSH
69001: CALL_OW 273
69005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69006: LD_VAR 0 7
69010: PPUSH
69011: LD_VAR 0 8
69015: PPUSH
69016: CALL_OW 488
69020: NOT
69021: IFFALSE 69025
// continue ;
69023: GO 68953
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69025: LD_ADDR_VAR 0 9
69029: PUSH
69030: LD_VAR 0 12
69034: PUSH
69035: LD_INT 1
69037: ARRAY
69038: PPUSH
69039: LD_VAR 0 12
69043: PUSH
69044: LD_INT 2
69046: ARRAY
69047: PPUSH
69048: LD_VAR 0 7
69052: PPUSH
69053: LD_VAR 0 8
69057: PPUSH
69058: CALL_OW 298
69062: ST_TO_ADDR
// if tmp < distance then
69063: LD_VAR 0 9
69067: PUSH
69068: LD_VAR 0 10
69072: LESS
69073: IFFALSE 69095
// begin result := i ;
69075: LD_ADDR_VAR 0 5
69079: PUSH
69080: LD_VAR 0 6
69084: ST_TO_ADDR
// distance := tmp ;
69085: LD_ADDR_VAR 0 10
69089: PUSH
69090: LD_VAR 0 9
69094: ST_TO_ADDR
// end ; end ;
69095: GO 68953
69097: POP
69098: POP
// end ;
69099: LD_VAR 0 5
69103: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69104: LD_INT 0
69106: PPUSH
69107: PPUSH
// if not driver or not IsInUnit ( driver ) then
69108: LD_VAR 0 1
69112: NOT
69113: PUSH
69114: LD_VAR 0 1
69118: PPUSH
69119: CALL_OW 310
69123: NOT
69124: OR
69125: IFFALSE 69129
// exit ;
69127: GO 69219
// vehicle := IsInUnit ( driver ) ;
69129: LD_ADDR_VAR 0 3
69133: PUSH
69134: LD_VAR 0 1
69138: PPUSH
69139: CALL_OW 310
69143: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69144: LD_VAR 0 1
69148: PPUSH
69149: LD_STRING \
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: LD_INT 0
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: PUSH
69179: LD_STRING E
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: LD_VAR 0 3
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PPUSH
69215: CALL_OW 446
// end ;
69219: LD_VAR 0 2
69223: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69224: LD_INT 0
69226: PPUSH
69227: PPUSH
// if not driver or not IsInUnit ( driver ) then
69228: LD_VAR 0 1
69232: NOT
69233: PUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 310
69243: NOT
69244: OR
69245: IFFALSE 69249
// exit ;
69247: GO 69339
// vehicle := IsInUnit ( driver ) ;
69249: LD_ADDR_VAR 0 3
69253: PUSH
69254: LD_VAR 0 1
69258: PPUSH
69259: CALL_OW 310
69263: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69264: LD_VAR 0 1
69268: PPUSH
69269: LD_STRING \
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: PUSH
69299: LD_STRING E
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: LD_VAR 0 3
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: LD_INT 0
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PPUSH
69335: CALL_OW 447
// end ;
69339: LD_VAR 0 2
69343: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
// tmp := [ ] ;
69349: LD_ADDR_VAR 0 5
69353: PUSH
69354: EMPTY
69355: ST_TO_ADDR
// for i in units do
69356: LD_ADDR_VAR 0 4
69360: PUSH
69361: LD_VAR 0 1
69365: PUSH
69366: FOR_IN
69367: IFFALSE 69405
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69369: LD_ADDR_VAR 0 5
69373: PUSH
69374: LD_VAR 0 5
69378: PPUSH
69379: LD_VAR 0 5
69383: PUSH
69384: LD_INT 1
69386: PLUS
69387: PPUSH
69388: LD_VAR 0 4
69392: PPUSH
69393: CALL_OW 256
69397: PPUSH
69398: CALL_OW 2
69402: ST_TO_ADDR
69403: GO 69366
69405: POP
69406: POP
// if not tmp then
69407: LD_VAR 0 5
69411: NOT
69412: IFFALSE 69416
// exit ;
69414: GO 69464
// if asc then
69416: LD_VAR 0 2
69420: IFFALSE 69444
// result := SortListByListAsc ( units , tmp ) else
69422: LD_ADDR_VAR 0 3
69426: PUSH
69427: LD_VAR 0 1
69431: PPUSH
69432: LD_VAR 0 5
69436: PPUSH
69437: CALL_OW 76
69441: ST_TO_ADDR
69442: GO 69464
// result := SortListByListDesc ( units , tmp ) ;
69444: LD_ADDR_VAR 0 3
69448: PUSH
69449: LD_VAR 0 1
69453: PPUSH
69454: LD_VAR 0 5
69458: PPUSH
69459: CALL_OW 77
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 3
69468: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69469: LD_INT 0
69471: PPUSH
69472: PPUSH
// task := GetTaskList ( mech ) ;
69473: LD_ADDR_VAR 0 4
69477: PUSH
69478: LD_VAR 0 1
69482: PPUSH
69483: CALL_OW 437
69487: ST_TO_ADDR
// if not task then
69488: LD_VAR 0 4
69492: NOT
69493: IFFALSE 69497
// exit ;
69495: GO 69539
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69497: LD_ADDR_VAR 0 3
69501: PUSH
69502: LD_VAR 0 4
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PUSH
69511: LD_INT 1
69513: ARRAY
69514: PUSH
69515: LD_STRING r
69517: EQUAL
69518: PUSH
69519: LD_VAR 0 4
69523: PUSH
69524: LD_INT 1
69526: ARRAY
69527: PUSH
69528: LD_INT 4
69530: ARRAY
69531: PUSH
69532: LD_VAR 0 2
69536: EQUAL
69537: AND
69538: ST_TO_ADDR
// end ;
69539: LD_VAR 0 3
69543: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69544: LD_INT 0
69546: PPUSH
// SetDir ( unit , d ) ;
69547: LD_VAR 0 1
69551: PPUSH
69552: LD_VAR 0 4
69556: PPUSH
69557: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69561: LD_VAR 0 1
69565: PPUSH
69566: LD_VAR 0 2
69570: PPUSH
69571: LD_VAR 0 3
69575: PPUSH
69576: LD_VAR 0 5
69580: PPUSH
69581: CALL_OW 48
// end ;
69585: LD_VAR 0 6
69589: RET
// export function ToNaturalNumber ( number ) ; begin
69590: LD_INT 0
69592: PPUSH
// result := number div 1 ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 1
69605: DIV
69606: ST_TO_ADDR
// if number < 0 then
69607: LD_VAR 0 1
69611: PUSH
69612: LD_INT 0
69614: LESS
69615: IFFALSE 69625
// result := 0 ;
69617: LD_ADDR_VAR 0 2
69621: PUSH
69622: LD_INT 0
69624: ST_TO_ADDR
// end ;
69625: LD_VAR 0 2
69629: RET
// export function SortByClass ( units , class ) ; var un ; begin
69630: LD_INT 0
69632: PPUSH
69633: PPUSH
// if not units or not class then
69634: LD_VAR 0 1
69638: NOT
69639: PUSH
69640: LD_VAR 0 2
69644: NOT
69645: OR
69646: IFFALSE 69650
// exit ;
69648: GO 69745
// result := [ ] ;
69650: LD_ADDR_VAR 0 3
69654: PUSH
69655: EMPTY
69656: ST_TO_ADDR
// for un in units do
69657: LD_ADDR_VAR 0 4
69661: PUSH
69662: LD_VAR 0 1
69666: PUSH
69667: FOR_IN
69668: IFFALSE 69743
// if GetClass ( un ) = class then
69670: LD_VAR 0 4
69674: PPUSH
69675: CALL_OW 257
69679: PUSH
69680: LD_VAR 0 2
69684: EQUAL
69685: IFFALSE 69712
// result := Insert ( result , 1 , un ) else
69687: LD_ADDR_VAR 0 3
69691: PUSH
69692: LD_VAR 0 3
69696: PPUSH
69697: LD_INT 1
69699: PPUSH
69700: LD_VAR 0 4
69704: PPUSH
69705: CALL_OW 2
69709: ST_TO_ADDR
69710: GO 69741
// result := Replace ( result , result + 1 , un ) ;
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 3
69721: PPUSH
69722: LD_VAR 0 3
69726: PUSH
69727: LD_INT 1
69729: PLUS
69730: PPUSH
69731: LD_VAR 0 4
69735: PPUSH
69736: CALL_OW 1
69740: ST_TO_ADDR
69741: GO 69667
69743: POP
69744: POP
// end ;
69745: LD_VAR 0 3
69749: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69750: LD_INT 0
69752: PPUSH
69753: PPUSH
69754: PPUSH
69755: PPUSH
69756: PPUSH
69757: PPUSH
69758: PPUSH
// result := [ ] ;
69759: LD_ADDR_VAR 0 4
69763: PUSH
69764: EMPTY
69765: ST_TO_ADDR
// if x - r < 0 then
69766: LD_VAR 0 1
69770: PUSH
69771: LD_VAR 0 3
69775: MINUS
69776: PUSH
69777: LD_INT 0
69779: LESS
69780: IFFALSE 69792
// min_x := 0 else
69782: LD_ADDR_VAR 0 8
69786: PUSH
69787: LD_INT 0
69789: ST_TO_ADDR
69790: GO 69808
// min_x := x - r ;
69792: LD_ADDR_VAR 0 8
69796: PUSH
69797: LD_VAR 0 1
69801: PUSH
69802: LD_VAR 0 3
69806: MINUS
69807: ST_TO_ADDR
// if y - r < 0 then
69808: LD_VAR 0 2
69812: PUSH
69813: LD_VAR 0 3
69817: MINUS
69818: PUSH
69819: LD_INT 0
69821: LESS
69822: IFFALSE 69834
// min_y := 0 else
69824: LD_ADDR_VAR 0 7
69828: PUSH
69829: LD_INT 0
69831: ST_TO_ADDR
69832: GO 69850
// min_y := y - r ;
69834: LD_ADDR_VAR 0 7
69838: PUSH
69839: LD_VAR 0 2
69843: PUSH
69844: LD_VAR 0 3
69848: MINUS
69849: ST_TO_ADDR
// max_x := x + r ;
69850: LD_ADDR_VAR 0 9
69854: PUSH
69855: LD_VAR 0 1
69859: PUSH
69860: LD_VAR 0 3
69864: PLUS
69865: ST_TO_ADDR
// max_y := y + r ;
69866: LD_ADDR_VAR 0 10
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_VAR 0 3
69880: PLUS
69881: ST_TO_ADDR
// for _x = min_x to max_x do
69882: LD_ADDR_VAR 0 5
69886: PUSH
69887: DOUBLE
69888: LD_VAR 0 8
69892: DEC
69893: ST_TO_ADDR
69894: LD_VAR 0 9
69898: PUSH
69899: FOR_TO
69900: IFFALSE 70001
// for _y = min_y to max_y do
69902: LD_ADDR_VAR 0 6
69906: PUSH
69907: DOUBLE
69908: LD_VAR 0 7
69912: DEC
69913: ST_TO_ADDR
69914: LD_VAR 0 10
69918: PUSH
69919: FOR_TO
69920: IFFALSE 69997
// begin if not ValidHex ( _x , _y ) then
69922: LD_VAR 0 5
69926: PPUSH
69927: LD_VAR 0 6
69931: PPUSH
69932: CALL_OW 488
69936: NOT
69937: IFFALSE 69941
// continue ;
69939: GO 69919
// if GetResourceTypeXY ( _x , _y ) then
69941: LD_VAR 0 5
69945: PPUSH
69946: LD_VAR 0 6
69950: PPUSH
69951: CALL_OW 283
69955: IFFALSE 69995
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69957: LD_ADDR_VAR 0 4
69961: PUSH
69962: LD_VAR 0 4
69966: PPUSH
69967: LD_VAR 0 4
69971: PUSH
69972: LD_INT 1
69974: PLUS
69975: PPUSH
69976: LD_VAR 0 5
69980: PUSH
69981: LD_VAR 0 6
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PPUSH
69990: CALL_OW 1
69994: ST_TO_ADDR
// end ;
69995: GO 69919
69997: POP
69998: POP
69999: GO 69899
70001: POP
70002: POP
// end ;
70003: LD_VAR 0 4
70007: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70008: LD_INT 0
70010: PPUSH
70011: PPUSH
70012: PPUSH
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
70017: PPUSH
// if not units then
70018: LD_VAR 0 1
70022: NOT
70023: IFFALSE 70027
// exit ;
70025: GO 70452
// result := UnitFilter ( units , [ f_ok ] ) ;
70027: LD_ADDR_VAR 0 3
70031: PUSH
70032: LD_VAR 0 1
70036: PPUSH
70037: LD_INT 50
70039: PUSH
70040: EMPTY
70041: LIST
70042: PPUSH
70043: CALL_OW 72
70047: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70048: LD_ADDR_VAR 0 8
70052: PUSH
70053: LD_VAR 0 1
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: PPUSH
70062: CALL_OW 255
70066: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
70067: LD_ADDR_VAR 0 10
70071: PUSH
70072: LD_INT 29
70074: PUSH
70075: LD_EXP 36
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: ST_TO_ADDR
// if not result then
70084: LD_VAR 0 3
70088: NOT
70089: IFFALSE 70093
// exit ;
70091: GO 70452
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70093: LD_ADDR_VAR 0 5
70097: PUSH
70098: LD_INT 81
70100: PUSH
70101: LD_VAR 0 8
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PPUSH
70110: CALL_OW 69
70114: ST_TO_ADDR
// for i in result do
70115: LD_ADDR_VAR 0 4
70119: PUSH
70120: LD_VAR 0 3
70124: PUSH
70125: FOR_IN
70126: IFFALSE 70450
// begin tag := GetTag ( i ) + 1 ;
70128: LD_ADDR_VAR 0 9
70132: PUSH
70133: LD_VAR 0 4
70137: PPUSH
70138: CALL_OW 110
70142: PUSH
70143: LD_INT 1
70145: PLUS
70146: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70147: LD_ADDR_VAR 0 7
70151: PUSH
70152: LD_VAR 0 4
70156: PPUSH
70157: CALL_OW 250
70161: PPUSH
70162: LD_VAR 0 4
70166: PPUSH
70167: CALL_OW 251
70171: PPUSH
70172: LD_INT 6
70174: PPUSH
70175: CALL 69750 0 3
70179: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70180: LD_VAR 0 7
70184: PUSH
70185: LD_VAR 0 4
70189: PPUSH
70190: CALL_OW 264
70194: PUSH
70195: LD_VAR 0 10
70199: IN
70200: NOT
70201: AND
70202: IFFALSE 70241
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70204: LD_VAR 0 4
70208: PPUSH
70209: LD_VAR 0 7
70213: PUSH
70214: LD_INT 1
70216: ARRAY
70217: PUSH
70218: LD_INT 1
70220: ARRAY
70221: PPUSH
70222: LD_VAR 0 7
70226: PUSH
70227: LD_INT 1
70229: ARRAY
70230: PUSH
70231: LD_INT 2
70233: ARRAY
70234: PPUSH
70235: CALL_OW 116
70239: GO 70448
// if path > tag then
70241: LD_VAR 0 2
70245: PUSH
70246: LD_VAR 0 9
70250: GREATER
70251: IFFALSE 70418
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70253: LD_ADDR_VAR 0 6
70257: PUSH
70258: LD_VAR 0 5
70262: PPUSH
70263: LD_INT 91
70265: PUSH
70266: LD_VAR 0 4
70270: PUSH
70271: LD_INT 12
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: LIST
70278: PPUSH
70279: CALL_OW 72
70283: ST_TO_ADDR
// if nearEnemy then
70284: LD_VAR 0 6
70288: IFFALSE 70316
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70290: LD_VAR 0 4
70294: PPUSH
70295: LD_VAR 0 6
70299: PPUSH
70300: LD_VAR 0 4
70304: PPUSH
70305: CALL_OW 74
70309: PPUSH
70310: CALL_OW 115
70314: GO 70416
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70316: LD_VAR 0 4
70320: PPUSH
70321: LD_VAR 0 2
70325: PUSH
70326: LD_VAR 0 9
70330: ARRAY
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PPUSH
70336: LD_VAR 0 2
70340: PUSH
70341: LD_VAR 0 9
70345: ARRAY
70346: PUSH
70347: LD_INT 2
70349: ARRAY
70350: PPUSH
70351: CALL_OW 297
70355: PUSH
70356: LD_INT 6
70358: GREATER
70359: IFFALSE 70402
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70361: LD_VAR 0 4
70365: PPUSH
70366: LD_VAR 0 2
70370: PUSH
70371: LD_VAR 0 9
70375: ARRAY
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PPUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_VAR 0 9
70390: ARRAY
70391: PUSH
70392: LD_INT 2
70394: ARRAY
70395: PPUSH
70396: CALL_OW 114
70400: GO 70416
// SetTag ( i , tag ) ;
70402: LD_VAR 0 4
70406: PPUSH
70407: LD_VAR 0 9
70411: PPUSH
70412: CALL_OW 109
// end else
70416: GO 70448
// if enemy then
70418: LD_VAR 0 5
70422: IFFALSE 70448
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70424: LD_VAR 0 4
70428: PPUSH
70429: LD_VAR 0 5
70433: PPUSH
70434: LD_VAR 0 4
70438: PPUSH
70439: CALL_OW 74
70443: PPUSH
70444: CALL_OW 115
// end ;
70448: GO 70125
70450: POP
70451: POP
// end ;
70452: LD_VAR 0 3
70456: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70457: LD_INT 0
70459: PPUSH
70460: PPUSH
70461: PPUSH
// if not unit or IsInUnit ( unit ) then
70462: LD_VAR 0 1
70466: NOT
70467: PUSH
70468: LD_VAR 0 1
70472: PPUSH
70473: CALL_OW 310
70477: OR
70478: IFFALSE 70482
// exit ;
70480: GO 70573
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70482: LD_ADDR_VAR 0 4
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 250
70496: PPUSH
70497: LD_VAR 0 2
70501: PPUSH
70502: LD_INT 1
70504: PPUSH
70505: CALL_OW 272
70509: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70510: LD_ADDR_VAR 0 5
70514: PUSH
70515: LD_VAR 0 1
70519: PPUSH
70520: CALL_OW 251
70524: PPUSH
70525: LD_VAR 0 2
70529: PPUSH
70530: LD_INT 1
70532: PPUSH
70533: CALL_OW 273
70537: ST_TO_ADDR
// if ValidHex ( x , y ) then
70538: LD_VAR 0 4
70542: PPUSH
70543: LD_VAR 0 5
70547: PPUSH
70548: CALL_OW 488
70552: IFFALSE 70573
// ComTurnXY ( unit , x , y ) ;
70554: LD_VAR 0 1
70558: PPUSH
70559: LD_VAR 0 4
70563: PPUSH
70564: LD_VAR 0 5
70568: PPUSH
70569: CALL_OW 118
// end ;
70573: LD_VAR 0 3
70577: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70578: LD_INT 0
70580: PPUSH
70581: PPUSH
// result := false ;
70582: LD_ADDR_VAR 0 3
70586: PUSH
70587: LD_INT 0
70589: ST_TO_ADDR
// if not units then
70590: LD_VAR 0 2
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70644
// for i in units do
70599: LD_ADDR_VAR 0 4
70603: PUSH
70604: LD_VAR 0 2
70608: PUSH
70609: FOR_IN
70610: IFFALSE 70642
// if See ( side , i ) then
70612: LD_VAR 0 1
70616: PPUSH
70617: LD_VAR 0 4
70621: PPUSH
70622: CALL_OW 292
70626: IFFALSE 70640
// begin result := true ;
70628: LD_ADDR_VAR 0 3
70632: PUSH
70633: LD_INT 1
70635: ST_TO_ADDR
// exit ;
70636: POP
70637: POP
70638: GO 70644
// end ;
70640: GO 70609
70642: POP
70643: POP
// end ;
70644: LD_VAR 0 3
70648: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70649: LD_INT 0
70651: PPUSH
70652: PPUSH
70653: PPUSH
70654: PPUSH
// if not unit or not points then
70655: LD_VAR 0 1
70659: NOT
70660: PUSH
70661: LD_VAR 0 2
70665: NOT
70666: OR
70667: IFFALSE 70671
// exit ;
70669: GO 70761
// dist := 99999 ;
70671: LD_ADDR_VAR 0 5
70675: PUSH
70676: LD_INT 99999
70678: ST_TO_ADDR
// for i in points do
70679: LD_ADDR_VAR 0 4
70683: PUSH
70684: LD_VAR 0 2
70688: PUSH
70689: FOR_IN
70690: IFFALSE 70759
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70692: LD_ADDR_VAR 0 6
70696: PUSH
70697: LD_VAR 0 1
70701: PPUSH
70702: LD_VAR 0 4
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PPUSH
70711: LD_VAR 0 4
70715: PUSH
70716: LD_INT 2
70718: ARRAY
70719: PPUSH
70720: CALL_OW 297
70724: ST_TO_ADDR
// if tmpDist < dist then
70725: LD_VAR 0 6
70729: PUSH
70730: LD_VAR 0 5
70734: LESS
70735: IFFALSE 70757
// begin result := i ;
70737: LD_ADDR_VAR 0 3
70741: PUSH
70742: LD_VAR 0 4
70746: ST_TO_ADDR
// dist := tmpDist ;
70747: LD_ADDR_VAR 0 5
70751: PUSH
70752: LD_VAR 0 6
70756: ST_TO_ADDR
// end ; end ;
70757: GO 70689
70759: POP
70760: POP
// end ; end_of_file
70761: LD_VAR 0 3
70765: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70766: LD_VAR 0 1
70770: PUSH
70771: LD_INT 200
70773: DOUBLE
70774: GREATEREQUAL
70775: IFFALSE 70783
70777: LD_INT 299
70779: DOUBLE
70780: LESSEQUAL
70781: IFTRUE 70785
70783: GO 70817
70785: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70786: LD_VAR 0 1
70790: PPUSH
70791: LD_VAR 0 2
70795: PPUSH
70796: LD_VAR 0 3
70800: PPUSH
70801: LD_VAR 0 4
70805: PPUSH
70806: LD_VAR 0 5
70810: PPUSH
70811: CALL 26792 0 5
70815: GO 70894
70817: LD_INT 300
70819: DOUBLE
70820: GREATEREQUAL
70821: IFFALSE 70829
70823: LD_INT 399
70825: DOUBLE
70826: LESSEQUAL
70827: IFTRUE 70831
70829: GO 70893
70831: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70832: LD_VAR 0 1
70836: PPUSH
70837: LD_VAR 0 2
70841: PPUSH
70842: LD_VAR 0 3
70846: PPUSH
70847: LD_VAR 0 4
70851: PPUSH
70852: LD_VAR 0 5
70856: PPUSH
70857: LD_VAR 0 6
70861: PPUSH
70862: LD_VAR 0 7
70866: PPUSH
70867: LD_VAR 0 8
70871: PPUSH
70872: LD_VAR 0 9
70876: PPUSH
70877: LD_VAR 0 10
70881: PPUSH
70882: LD_VAR 0 11
70886: PPUSH
70887: CALL 24690 0 11
70891: GO 70894
70893: POP
// end ;
70894: PPOPN 11
70896: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70897: LD_VAR 0 1
70901: PPUSH
70902: LD_VAR 0 2
70906: PPUSH
70907: LD_VAR 0 3
70911: PPUSH
70912: LD_VAR 0 4
70916: PPUSH
70917: LD_VAR 0 5
70921: PPUSH
70922: CALL 26784 0 5
// end ; end_of_file
70926: PPOPN 5
70928: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70929: LD_VAR 0 1
70933: PPUSH
70934: LD_VAR 0 2
70938: PPUSH
70939: LD_VAR 0 3
70943: PPUSH
70944: LD_VAR 0 4
70948: PPUSH
70949: LD_VAR 0 5
70953: PPUSH
70954: LD_VAR 0 6
70958: PPUSH
70959: CALL 12885 0 6
// end ;
70963: PPOPN 6
70965: END
