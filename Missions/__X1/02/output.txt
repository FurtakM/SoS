// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11745 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32912 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32912 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74152 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_EXP 8
8103: NOT
8104: AND
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 255
8113: PUSH
8114: LD_INT 2
8116: NONEQUAL
8117: AND
8118: PUSH
8119: LD_EXP 25
8123: PPUSH
8124: CALL_OW 302
8128: AND
8129: PUSH
8130: LD_EXP 23
8134: PPUSH
8135: CALL_OW 302
8139: AND
8140: IFFALSE 8285
8142: GO 8144
8144: DISABLE
// begin DialogueOn ;
8145: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8149: LD_INT 47
8151: PPUSH
8152: LD_INT 19
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: LD_INT 6
8160: NEG
8161: PPUSH
8162: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8166: LD_INT 47
8168: PPUSH
8169: LD_INT 19
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8179: LD_INT 34
8181: PPUSH
8182: LD_INT 32
8184: PPUSH
8185: LD_INT 2
8187: PPUSH
8188: LD_INT 6
8190: NEG
8191: PPUSH
8192: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8196: LD_INT 34
8198: PPUSH
8199: LD_INT 32
8201: PPUSH
8202: LD_INT 2
8204: PPUSH
8205: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8209: LD_EXP 25
8213: PPUSH
8214: LD_STRING DM-Prem-1
8216: PPUSH
8217: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8221: LD_EXP 23
8225: PPUSH
8226: LD_STRING DH-Prem-2
8228: PPUSH
8229: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8233: LD_EXP 23
8237: PPUSH
8238: LD_STRING DH-Prem-3
8240: PPUSH
8241: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8245: LD_EXP 25
8249: PPUSH
8250: LD_STRING DM-Prem-4
8252: PPUSH
8253: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8257: LD_EXP 25
8261: PPUSH
8262: LD_STRING DM-Prem-5
8264: PPUSH
8265: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8269: LD_EXP 24
8273: PPUSH
8274: LD_STRING DG-Prem-6
8276: PPUSH
8277: CALL_OW 88
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8286: LD_INT 5
8288: PPUSH
8289: LD_EXP 23
8293: PPUSH
8294: CALL_OW 292
8298: PUSH
8299: LD_EXP 23
8303: PPUSH
8304: LD_EXP 27
8308: PPUSH
8309: CALL_OW 296
8313: PUSH
8314: LD_INT 6
8316: LESS
8317: AND
8318: PUSH
8319: LD_EXP 8
8323: AND
8324: PUSH
8325: LD_EXP 14
8329: NOT
8330: AND
8331: IFFALSE 8469
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
// begin attackDeltaAllowed := true ;
8339: LD_ADDR_EXP 14
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// InGameOn ;
8347: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8351: LD_EXP 23
8355: PPUSH
8356: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8367: LD_EXP 27
8371: PPUSH
8372: LD_EXP 23
8376: PPUSH
8377: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8381: LD_EXP 23
8385: PPUSH
8386: LD_EXP 27
8390: PPUSH
8391: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8395: LD_EXP 23
8399: PPUSH
8400: LD_STRING DH-1-return
8402: PPUSH
8403: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8407: LD_EXP 27
8411: PPUSH
8412: LD_STRING DA-1-return
8414: PPUSH
8415: CALL_OW 88
// InGameOff ;
8419: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8423: LD_STRING ODelta
8425: PPUSH
8426: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8467
// SetSide ( i , 2 ) ;
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 235
8465: GO 8450
8467: POP
8468: POP
// end ;
8469: PPOPN 1
8471: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 14
8481: NOT
8482: AND
8483: IFFALSE 8496
8485: GO 8487
8487: DISABLE
// spottedBeforeRadio := true ;
8488: LD_ADDR_EXP 6
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
8496: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8497: LD_EXP 14
8501: PUSH
8502: LD_EXP 30
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: PUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 255
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: AND
8525: PUSH
8526: LD_EXP 20
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: PUSH
8537: LD_EXP 10
8541: NOT
8542: AND
8543: IFFALSE 9771
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin trap := 0 ;
8553: LD_ADDR_EXP 17
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8561: LD_INT 420
8563: PPUSH
8564: CALL_OW 67
// DialogueOn ;
8568: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8572: LD_EXP 30
8576: PPUSH
8577: LD_STRING DMar-1-radio
8579: PPUSH
8580: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8584: LD_EXP 23
8588: PPUSH
8589: LD_STRING DH-1-radio
8591: PPUSH
8592: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8596: LD_EXP 30
8600: PPUSH
8601: LD_STRING DMar-2-radio
8603: PPUSH
8604: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8608: LD_EXP 23
8612: PPUSH
8613: LD_STRING DH-2-radio
8615: PPUSH
8616: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8620: LD_EXP 26
8624: PPUSH
8625: CALL_OW 302
8629: PUSH
8630: LD_EXP 29
8634: PPUSH
8635: CALL_OW 302
8639: OR
8640: IFFALSE 9771
// begin case Query ( Q1Trap ) of 1 :
8642: LD_STRING Q1Trap
8644: PPUSH
8645: CALL_OW 97
8649: PUSH
8650: LD_INT 1
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8864
8658: POP
// begin if IsOk ( Kamil ) then
8659: LD_EXP 26
8663: PPUSH
8664: CALL_OW 302
8668: IFFALSE 8747
// begin Say ( Kamil , DKam-2-radio ) ;
8670: LD_EXP 26
8674: PPUSH
8675: LD_STRING DKam-2-radio
8677: PPUSH
8678: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8682: LD_EXP 26
8686: PPUSH
8687: LD_STRING DKam-3-radio
8689: PPUSH
8690: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8694: LD_EXP 20
8698: PPUSH
8699: LD_STRING DDelta-3-radio
8701: PPUSH
8702: CALL 74152 0 2
// dwait ( 0 0$01 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8713: LD_EXP 23
8717: PPUSH
8718: LD_STRING DH-3-radio
8720: PPUSH
8721: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8725: LD_EXP 26
8729: PPUSH
8730: LD_STRING DKam-4-radio
8732: PPUSH
8733: CALL_OW 88
// trap := 1 ;
8737: LD_ADDR_EXP 17
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end else
8745: GO 8858
// begin Say ( Sophia , DS-1-radio ) ;
8747: LD_EXP 29
8751: PPUSH
8752: LD_STRING DS-1-radio
8754: PPUSH
8755: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8759: LD_EXP 29
8763: PPUSH
8764: LD_STRING DS-2-radio
8766: PPUSH
8767: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8771: LD_EXP 20
8775: PPUSH
8776: LD_STRING DDelta-2-radio-s
8778: PPUSH
8779: CALL 74152 0 2
// Say ( Sophia , DS-3-radio ) ;
8783: LD_EXP 29
8787: PPUSH
8788: LD_STRING DS-3-radio
8790: PPUSH
8791: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8795: LD_EXP 20
8799: PPUSH
8800: LD_STRING DDelta-3-radio-s
8802: PPUSH
8803: CALL 74152 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8807: LD_EXP 29
8811: PPUSH
8812: LD_STRING DS-4-radio-s
8814: PPUSH
8815: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8819: LD_EXP 20
8823: PPUSH
8824: LD_STRING DDelta-4-radio-s
8826: PPUSH
8827: CALL 74152 0 2
// dwait ( 0 0$01 ) ;
8831: LD_INT 35
8833: PPUSH
8834: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8838: LD_EXP 23
8842: PPUSH
8843: LD_STRING DH-1-trap
8845: PPUSH
8846: CALL_OW 88
// trap := 0 ;
8850: LD_ADDR_EXP 17
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// end ; DialogueOff ;
8858: CALL_OW 7
// end ; 2 :
8862: GO 8882
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8881
8872: POP
// begin DialogueOff ;
8873: CALL_OW 7
// exit ;
8877: GO 9771
// end ; end ;
8879: GO 8882
8881: POP
// if trap = 1 then
8882: LD_EXP 17
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9342
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8892: LD_INT 64
8894: PPUSH
8895: LD_INT 32
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: PPUSH
8904: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8908: LD_INT 64
8910: PPUSH
8911: LD_INT 32
8913: PPUSH
8914: CALL_OW 84
// tmp := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// k := 3 ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 3
8932: ST_TO_ADDR
// if usForces < 3 then
8933: LD_EXP 21
8937: PUSH
8938: LD_INT 3
8940: LESS
8941: IFFALSE 8953
// k := usForces ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 21
8952: ST_TO_ADDR
// for i := 1 to k do
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 2
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9024
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 1
8988: PLUS
8989: PPUSH
8990: LD_EXP 21
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9004: LD_ADDR_EXP 21
9008: PUSH
9009: LD_EXP 21
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 3
9021: ST_TO_ADDR
// end ;
9022: GO 8968
9024: POP
9025: POP
// usPatrol := tmp ;
9026: LD_ADDR_EXP 16
9030: PUSH
9031: LD_VAR 0 3
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9177
// begin if IsInUnit ( i ) then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 310
9058: IFFALSE 9069
// ComExitBuilding ( i ) ;
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: LD_INT 31
9079: PPUSH
9080: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9084: LD_VAR 0 1
9088: PPUSH
9089: LD_INT 70
9091: PPUSH
9092: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_INT 103
9103: PPUSH
9104: LD_INT 43
9106: PPUSH
9107: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_INT 105
9118: PPUSH
9119: CALL_OW 202
// if Difficulty > 1 then
9123: LD_OWVAR 67
9127: PUSH
9128: LD_INT 1
9130: GREATER
9131: IFFALSE 9148
// AddComAgressiveMove ( i , 114 , 69 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 114
9140: PPUSH
9141: LD_INT 69
9143: PPUSH
9144: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 42
9167: PPUSH
9168: LD_INT 20
9170: PPUSH
9171: CALL_OW 174
// end ;
9175: GO 9046
9177: POP
9178: POP
// wait ( 0 0$8 ) ;
9179: LD_INT 280
9181: PPUSH
9182: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9186: LD_INT 64
9188: PPUSH
9189: LD_INT 32
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// for i in tmp do
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_VAR 0 3
9215: PUSH
9216: FOR_IN
9217: IFFALSE 9248
// if IsDead ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 301
9228: IFFALSE 9246
// tmp := tmp diff i ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_VAR 0 3
9239: PUSH
9240: LD_VAR 0 1
9244: DIFF
9245: ST_TO_ADDR
9246: GO 9216
9248: POP
9249: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9250: LD_VAR 0 3
9254: NOT
9255: PUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 95
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 60
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: PUSH
9293: LD_VAR 0 3
9297: EQUAL
9298: OR
9299: IFFALSE 9199
// if tmp then
9301: LD_VAR 0 3
9305: IFFALSE 9332
// begin usPatrol := [ ] ;
9307: LD_ADDR_EXP 16
9311: PUSH
9312: EMPTY
9313: ST_TO_ADDR
// usForces := usForces union tmp ;
9314: LD_ADDR_EXP 21
9318: PUSH
9319: LD_EXP 21
9323: PUSH
9324: LD_VAR 0 3
9328: UNION
9329: ST_TO_ADDR
// end else
9330: GO 9340
// trickyMove := true ;
9332: LD_ADDR_EXP 15
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end else
9340: GO 9771
// begin tmp := [ ] ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// k := 4 ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// if usForces < 4 then
9357: LD_EXP 21
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: IFFALSE 9377
// k := usForces ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_EXP 21
9376: ST_TO_ADDR
// for i := 1 to k do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_VAR 0 2
9391: PUSH
9392: FOR_TO
9393: IFFALSE 9448
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: LD_EXP 21
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 1
9427: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9428: LD_ADDR_EXP 21
9432: PUSH
9433: LD_EXP 21
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 3
9445: ST_TO_ADDR
// end ;
9446: GO 9392
9448: POP
9449: POP
// if Lynch then
9450: LD_EXP 20
9454: IFFALSE 9472
// tmp := tmp ^ Lynch ;
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: LD_VAR 0 3
9465: PUSH
9466: LD_EXP 20
9470: ADD
9471: ST_TO_ADDR
// usPatrol := tmp ;
9472: LD_ADDR_EXP 16
9476: PUSH
9477: LD_VAR 0 3
9481: ST_TO_ADDR
// for i in tmp do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 3
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9586
// begin if IsInUnit ( i ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 310
9504: IFFALSE 9515
// ComExitBuilding ( i ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 69
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 700
9537: PPUSH
9538: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 55
9549: PPUSH
9550: LD_INT 43
9552: PPUSH
9553: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: LD_INT 700
9564: PPUSH
9565: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_INT 42
9576: PPUSH
9577: LD_INT 20
9579: PPUSH
9580: CALL_OW 174
// end ;
9584: GO 9492
9586: POP
9587: POP
// repeat wait ( 0 0$1 ) ;
9588: LD_INT 35
9590: PPUSH
9591: CALL_OW 67
// for i in tmp do
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 3
9604: PUSH
9605: FOR_IN
9606: IFFALSE 9637
// if IsDead ( i ) then
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 301
9617: IFFALSE 9635
// tmp := tmp diff i ;
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: LD_VAR 0 1
9633: DIFF
9634: ST_TO_ADDR
9635: GO 9605
9637: POP
9638: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9639: LD_VAR 0 3
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 95
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 60
9665: PUSH
9666: EMPTY
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_VAR 0 3
9686: EQUAL
9687: OR
9688: IFFALSE 9588
// if not tmp then
9690: LD_VAR 0 3
9694: NOT
9695: IFFALSE 9707
// trickyMove := true else
9697: LD_ADDR_EXP 15
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
9705: GO 9714
// usPatrol := [ ] ;
9707: LD_ADDR_EXP 16
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// if tmp diff Lynch then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_EXP 20
9723: DIFF
9724: IFFALSE 9748
// usForces := usForces union ( tmp diff Lynch ) ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_EXP 20
9745: DIFF
9746: UNION
9747: ST_TO_ADDR
// if IsOk ( Lynch ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: IFFALSE 9771
// ComEnterUnit ( Lynch , Delta ) ;
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 120
// end ; end ; end ;
9771: PPOPN 3
9773: END
// every 0 0$1 trigger trickyMove do
9774: LD_EXP 15
9778: IFFALSE 9790
9780: GO 9782
9782: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9783: LD_STRING ACH_TRAP
9785: PPUSH
9786: CALL_OW 543
9790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9791: LD_INT 22
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9835: LD_STRING ACH_SCRAP
9837: PPUSH
9838: CALL_OW 543
9842: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9843: LD_EXP 16
9847: PPUSH
9848: LD_INT 101
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 23
9870: PPUSH
9871: CALL_OW 292
9875: AND
9876: IFFALSE 10009
9878: GO 9880
9880: DISABLE
// begin if not trap then
9881: LD_EXP 17
9885: NOT
9886: IFFALSE 9914
// begin Say ( Heike , DH-2-trap ) ;
9888: LD_EXP 23
9892: PPUSH
9893: LD_STRING DH-2-trap
9895: PPUSH
9896: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9900: LD_EXP 25
9904: PPUSH
9905: LD_STRING DM-2-trap
9907: PPUSH
9908: CALL_OW 88
// end else
9912: GO 9926
// begin Say ( Heike , DH-1-trap-a ) ;
9914: LD_EXP 23
9918: PPUSH
9919: LD_STRING DH-1-trap-a
9921: PPUSH
9922: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// until trickyMove ;
9933: LD_EXP 15
9937: IFFALSE 9926
// Say ( Heike , DH-3-trap ) ;
9939: LD_EXP 23
9943: PPUSH
9944: LD_STRING DH-3-trap
9946: PPUSH
9947: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9951: LD_EXP 24
9955: PPUSH
9956: CALL_OW 302
9960: PUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 302
9970: AND
9971: IFFALSE 10009
// begin Say ( Givi , DG-3-trap ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DG-3-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9985: LD_EXP 28
9989: PPUSH
9990: LD_STRING DK-3-trap
9992: PPUSH
9993: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9997: LD_EXP 24
10001: PPUSH
10002: LD_STRING DG-4-trap
10004: PPUSH
10005: CALL_OW 88
// end ; end ;
10009: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 255
10017: PUSH
10018: LD_INT 2
10020: EQUAL
10021: PUSH
10022: LD_EXP 14
10026: AND
10027: IFFALSE 10186
10029: GO 10031
10031: DISABLE
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// begin if not IsOk ( Kaia ) then
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 302
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10186
// if tick < 5 5$00 then
10050: LD_OWVAR 1
10054: PUSH
10055: LD_INT 10500
10057: LESS
10058: IFFALSE 10067
// SetAchievement ( ACH_DELTA ) ;
10060: LD_STRING ACH_DELTA
10062: PPUSH
10063: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10067: LD_EXP 28
10071: PPUSH
10072: LD_STRING DK-1-capture
10074: PPUSH
10075: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10079: LD_EXP 23
10083: PPUSH
10084: LD_STRING DH-1-capture
10086: PPUSH
10087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10186
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10184
// begin if IsInUnit ( i ) then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: IFFALSE 10167
// ComExitBuilding ( i ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10167: LD_VAR 0 1
10171: PPUSH
10172: LD_INT 38
10174: PPUSH
10175: LD_INT 23
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10144
10184: POP
10185: POP
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10189: LD_INT 3
10191: PPUSH
10192: CALL_OW 255
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: PUSH
10201: LD_EXP 14
10205: AND
10206: IFFALSE 10251
10208: GO 10210
10210: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10211: LD_INT 1
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 322
// DialogueOn ;
10224: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10228: LD_EXP 27
10232: PPUSH
10233: LD_STRING DA-1-capture
10235: PPUSH
10236: CALL_OW 88
// DialogueOff ;
10240: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10244: LD_STRING OTame
10246: PPUSH
10247: CALL_OW 337
// end ;
10251: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10252: LD_INT 1
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: CALL_OW 321
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: PUSH
10267: LD_EXP 14
10271: AND
10272: IFFALSE 10423
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10281: LD_EXP 27
10285: PPUSH
10286: LD_STRING DA-1-ape
10288: PPUSH
10289: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10293: LD_EXP 23
10297: PPUSH
10298: LD_STRING DH-1-ape
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10305: LD_EXP 27
10309: PPUSH
10310: LD_STRING DA-2-ape
10312: PPUSH
10313: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10317: LD_EXP 27
10321: PPUSH
10322: LD_STRING DA-3-ape
10324: PPUSH
10325: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10329: LD_EXP 23
10333: PPUSH
10334: LD_STRING DH-3-ape
10336: PPUSH
10337: CALL_OW 88
// DialogueOff ;
10341: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10345: LD_INT 22
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 25
10357: PUSH
10358: LD_INT 12
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 69
10373: PUSH
10374: LD_INT 0
10376: EQUAL
10377: IFFALSE 10389
// SpawnApeman ( forest , 2 ) ;
10379: LD_INT 1
10381: PPUSH
10382: LD_INT 2
10384: PPUSH
10385: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10389: LD_INT 35
10391: PPUSH
10392: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10396: LD_INT 25
10398: PUSH
10399: LD_INT 12
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PPUSH
10406: CALL_OW 69
10410: PUSH
10411: LD_INT 0
10413: EQUAL
10414: IFFALSE 10389
// YouLost ( Ape ) ;
10416: LD_STRING Ape
10418: PPUSH
10419: CALL_OW 104
// end ;
10423: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10424: LD_EXP 18
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 2
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: LD_OWVAR 67
10451: ARRAY
10452: GREATEREQUAL
10453: IFFALSE 10497
10455: GO 10457
10457: DISABLE
// begin DialogueOn ;
10458: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10462: LD_EXP 27
10466: PPUSH
10467: LD_STRING DA-1-failure
10469: PPUSH
10470: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10474: LD_EXP 27
10478: PPUSH
10479: LD_STRING DA-2-failure
10481: PPUSH
10482: CALL_OW 88
// YouLost ( Failure ) ;
10486: LD_STRING Failure
10488: PPUSH
10489: CALL_OW 104
// DialogueOff ;
10493: CALL_OW 7
// end ;
10497: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10498: LD_EXP 28
10502: PPUSH
10503: CALL_OW 256
10507: PUSH
10508: LD_INT 3
10510: LESS
10511: IFFALSE 10644
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10520: LD_EXP 28
10524: PPUSH
10525: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10529: LD_EXP 28
10533: PPUSH
10534: LD_STRING DK-Kaiaout-1
10536: PPUSH
10537: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10541: LD_EXP 23
10545: PPUSH
10546: LD_STRING DH-Kaiaout-2
10548: PPUSH
10549: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10553: LD_EXP 24
10557: PPUSH
10558: LD_STRING DG-Kaiaout-3
10560: PPUSH
10561: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10565: LD_EXP 23
10569: PPUSH
10570: LD_STRING DH-Kaiaout-4
10572: PPUSH
10573: CALL_OW 88
// if Givi then
10577: LD_EXP 24
10581: IFFALSE 10631
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10583: LD_EXP 24
10587: PPUSH
10588: LD_STRING DG-Kaiaout-5
10590: PPUSH
10591: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10595: LD_EXP 23
10599: PPUSH
10600: LD_STRING DH-Kaiaout-6
10602: PPUSH
10603: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10607: LD_EXP 24
10611: PPUSH
10612: LD_STRING DG-Kaiaout-7
10614: PPUSH
10615: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10619: LD_EXP 23
10623: PPUSH
10624: LD_STRING DH-Kaiaout-8
10626: PPUSH
10627: CALL_OW 88
// end ; DialogueOff ;
10631: CALL_OW 7
// KillUnit ( Kaia ) ;
10635: LD_EXP 28
10639: PPUSH
10640: CALL_OW 66
// end ;
10644: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10645: LD_INT 22
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 23
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_EXP 27
10678: PPUSH
10679: CALL_OW 302
10683: AND
10684: PUSH
10685: LD_EXP 27
10689: PPUSH
10690: CALL_OW 255
10694: PUSH
10695: LD_INT 2
10697: EQUAL
10698: AND
10699: IFFALSE 11685
10701: GO 10703
10703: DISABLE
10704: LD_INT 0
10706: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10707: LD_INT 22
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 34
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: IFFALSE 10848
// begin Query ( QEnemyInSight ) ;
10755: LD_STRING QEnemyInSight
10757: PPUSH
10758: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10762: LD_INT 35
10764: PPUSH
10765: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10769: LD_INT 22
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 34
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: NOT
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 23
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: AND
10846: IFFALSE 10762
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 0
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: ST_TO_ADDR
// InGameOn ;
10882: CALL_OW 8
// if tick <= 10 10$00 then
10886: LD_OWVAR 1
10890: PUSH
10891: LD_INT 21000
10893: LESSEQUAL
10894: IFFALSE 10903
// SetAchievement ( ACH_HSPEED_2 ) ;
10896: LD_STRING ACH_HSPEED_2
10898: PPUSH
10899: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10912: LD_VAR 0 1
10916: PPUSH
10917: LD_EXP 27
10921: PPUSH
10922: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10926: LD_EXP 27
10930: PPUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 119
// wait ( 0 0$1 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10947: LD_EXP 27
10951: PPUSH
10952: LD_STRING DA-1-tame-a
10954: PPUSH
10955: CALL_OW 88
// if IsOk ( Mike ) then
10959: LD_EXP 25
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11006
// begin Say ( Mike , DM-1-tame-a ) ;
10970: LD_EXP 25
10974: PPUSH
10975: LD_STRING DM-1-tame-a
10977: PPUSH
10978: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10982: LD_EXP 29
10986: PPUSH
10987: LD_STRING DS-1-tame-a
10989: PPUSH
10990: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10994: LD_EXP 25
10998: PPUSH
10999: LD_STRING DM-2-tame-a
11001: PPUSH
11002: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// PrepareFarmer ;
11013: CALL 12364 0 0
// CenterOnUnits ( Farmer ) ;
11017: LD_EXP 31
11021: PPUSH
11022: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11026: LD_EXP 31
11030: PPUSH
11031: LD_INT 105
11033: PPUSH
11034: LD_INT 59
11036: PPUSH
11037: CALL_OW 111
// AddComHold ( Farmer ) ;
11041: LD_EXP 31
11045: PPUSH
11046: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11050: LD_EXP 31
11054: PPUSH
11055: LD_STRING DF-1-end
11057: PPUSH
11058: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11062: LD_EXP 27
11066: PPUSH
11067: LD_STRING DA-1-end
11069: PPUSH
11070: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11074: LD_EXP 31
11078: PPUSH
11079: LD_STRING DF-2-end
11081: PPUSH
11082: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11086: LD_EXP 27
11090: PPUSH
11091: LD_STRING DA-2-end
11093: PPUSH
11094: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11098: LD_EXP 31
11102: PPUSH
11103: LD_STRING DF-3-end
11105: PPUSH
11106: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11110: LD_EXP 23
11114: PPUSH
11115: LD_STRING DH-3-end
11117: PPUSH
11118: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11122: LD_EXP 31
11126: PPUSH
11127: LD_STRING DF-4-end
11129: PPUSH
11130: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11134: LD_OWVAR 1
11138: PUSH
11139: LD_INT 52500
11141: PUSH
11142: LD_INT 47250
11144: PUSH
11145: LD_INT 42000
11147: PUSH
11148: LD_INT 31500
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PUSH
11157: LD_OWVAR 67
11161: ARRAY
11162: LESSEQUAL
11163: IFFALSE 11177
// AddMedal ( med1 , 1 ) else
11165: LD_STRING med1
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 101
11175: GO 11188
// AddMedal ( med1 , - 1 ) ;
11177: LD_STRING med1
11179: PPUSH
11180: LD_INT 1
11182: NEG
11183: PPUSH
11184: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11188: LD_INT 22
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 4
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 69
11216: PUSH
11217: LD_INT 0
11219: EQUAL
11220: PUSH
11221: LD_EXP 12
11225: NOT
11226: AND
11227: IFFALSE 11241
// AddMedal ( med2 , 1 ) else
11229: LD_STRING med2
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: CALL_OW 101
11239: GO 11252
// AddMedal ( med2 , - 1 ) ;
11241: LD_STRING med2
11243: PPUSH
11244: LD_INT 1
11246: NEG
11247: PPUSH
11248: CALL_OW 101
// if trickyMove then
11252: LD_EXP 15
11256: IFFALSE 11270
// AddMedal ( med3 , 1 ) else
11258: LD_STRING med3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 101
11268: GO 11300
// if spottedBeforeRadio then
11270: LD_EXP 6
11274: IFFALSE 11289
// AddMedal ( med3 , - 2 ) else
11276: LD_STRING med3
11278: PPUSH
11279: LD_INT 2
11281: NEG
11282: PPUSH
11283: CALL_OW 101
11287: GO 11300
// AddMedal ( med3 , - 1 ) ;
11289: LD_STRING med3
11291: PPUSH
11292: LD_INT 1
11294: NEG
11295: PPUSH
11296: CALL_OW 101
// GiveMedals ( MAIN ) ;
11300: LD_STRING MAIN
11302: PPUSH
11303: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11307: LD_INT 22
11309: PUSH
11310: LD_INT 2
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 69
11335: PPUSH
11336: LD_STRING 02_ape
11338: PPUSH
11339: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 23
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 69
11387: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11397: LD_EXP 23
11401: PPUSH
11402: LD_STRING 02_Heike
11404: PPUSH
11405: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11409: LD_EXP 27
11413: PPUSH
11414: LD_STRING 02_Aviradze
11416: PPUSH
11417: CALL_OW 38
// if Givi then
11421: LD_EXP 24
11425: IFFALSE 11439
// SaveCharacters ( Givi , 02_Givi ) ;
11427: LD_EXP 24
11431: PPUSH
11432: LD_STRING 02_Givi
11434: PPUSH
11435: CALL_OW 38
// if Mike then
11439: LD_EXP 25
11443: IFFALSE 11457
// SaveCharacters ( Mike , 02_Mike ) ;
11445: LD_EXP 25
11449: PPUSH
11450: LD_STRING 02_Mike
11452: PPUSH
11453: CALL_OW 38
// if Kamil then
11457: LD_EXP 26
11461: IFFALSE 11475
// SaveCharacters ( Kamil , 02_Kamil ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING 02_Kamil
11470: PPUSH
11471: CALL_OW 38
// if Kaia then
11475: LD_EXP 28
11479: IFFALSE 11493
// SaveCharacters ( Kaia , 02_Kaia ) ;
11481: LD_EXP 28
11485: PPUSH
11486: LD_STRING 02_Kaia
11488: PPUSH
11489: CALL_OW 38
// if Sophia then
11493: LD_EXP 29
11497: IFFALSE 11511
// SaveCharacters ( Sophia , 02_Sophia ) ;
11499: LD_EXP 29
11503: PPUSH
11504: LD_STRING 02_Sophia
11506: PPUSH
11507: CALL_OW 38
// if Markov then
11511: LD_EXP 30
11515: IFFALSE 11529
// SaveCharacters ( Markov , 02_Markov ) ;
11517: LD_EXP 30
11521: PPUSH
11522: LD_STRING 02_Markov
11524: PPUSH
11525: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11529: LD_VAR 0 1
11533: PUSH
11534: LD_EXP 23
11538: PUSH
11539: LD_EXP 27
11543: PUSH
11544: LD_EXP 24
11548: PUSH
11549: LD_EXP 25
11553: PUSH
11554: LD_EXP 26
11558: PUSH
11559: LD_EXP 29
11563: PUSH
11564: LD_EXP 28
11568: PUSH
11569: LD_EXP 30
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: DIFF
11584: IFFALSE 11649
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11586: LD_VAR 0 1
11590: PUSH
11591: LD_EXP 23
11595: PUSH
11596: LD_EXP 27
11600: PUSH
11601: LD_EXP 24
11605: PUSH
11606: LD_EXP 25
11610: PUSH
11611: LD_EXP 26
11615: PUSH
11616: LD_EXP 29
11620: PUSH
11621: LD_EXP 28
11625: PUSH
11626: LD_EXP 30
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: DIFF
11641: PPUSH
11642: LD_STRING 02_others
11644: PPUSH
11645: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11649: LD_STRING enableBioCharacter(BIO_KRAY)
11651: PPUSH
11652: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11656: LD_STRING enableBioCharacter(BIO_AVIR)
11658: PPUSH
11659: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11663: LD_STRING enableBioCharacter(BIO_SOPH)
11665: PPUSH
11666: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11670: LD_STRING enableBioCharacter(BIO_KAMI)
11672: PPUSH
11673: CALL_OW 559
// YouWin ;
11677: CALL_OW 103
// InGameOff ;
11681: CALL_OW 9
// end ;
11685: PPOPN 1
11687: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11688: LD_OWVAR 1
11692: PUSH
11693: LD_EXP 13
11697: GREATER
11698: PUSH
11699: LD_EXP 4
11703: AND
11704: IFFALSE 11744
11706: GO 11708
11708: DISABLE
// begin InGameOn ;
11709: CALL_OW 8
// PrepareFarmer ;
11713: CALL 12364 0 0
// CenterNowOnUnits ( Farmer ) ;
11717: LD_EXP 31
11721: PPUSH
11722: CALL_OW 87
// wait ( 0 0$2 ) ;
11726: LD_INT 70
11728: PPUSH
11729: CALL_OW 67
// YouLost ( Farmer ) ;
11733: LD_STRING Farmer
11735: PPUSH
11736: CALL_OW 104
// InGameOff ;
11740: CALL_OW 9
// end ; end_of_file
11744: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// uc_side := 2 ;
11750: LD_ADDR_OWVAR 20
11754: PUSH
11755: LD_INT 2
11757: ST_TO_ADDR
// uc_nation := 2 ;
11758: LD_ADDR_OWVAR 21
11762: PUSH
11763: LD_INT 2
11765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11766: LD_ADDR_EXP 23
11770: PUSH
11771: LD_STRING Heike
11773: PPUSH
11774: LD_EXP 1
11778: NOT
11779: PPUSH
11780: LD_EXP 2
11784: PPUSH
11785: CALL 32912 0 3
11789: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11790: LD_EXP 23
11794: PPUSH
11795: LD_INT 83
11797: PPUSH
11798: LD_INT 72
11800: PPUSH
11801: LD_INT 0
11803: PPUSH
11804: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_STRING Givi
11815: PPUSH
11816: LD_EXP 1
11820: NOT
11821: PPUSH
11822: LD_EXP 2
11826: PPUSH
11827: CALL 32912 0 3
11831: ST_TO_ADDR
// if Givi then
11832: LD_EXP 24
11836: IFFALSE 11856
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11838: LD_EXP 24
11842: PPUSH
11843: LD_INT 87
11845: PPUSH
11846: LD_INT 76
11848: PPUSH
11849: LD_INT 0
11851: PPUSH
11852: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11856: LD_ADDR_EXP 25
11860: PUSH
11861: LD_STRING Mike
11863: PPUSH
11864: LD_EXP 1
11868: NOT
11869: PPUSH
11870: LD_EXP 2
11874: PPUSH
11875: CALL 32912 0 3
11879: ST_TO_ADDR
// if Mike then
11880: LD_EXP 25
11884: IFFALSE 11904
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11886: LD_EXP 25
11890: PPUSH
11891: LD_INT 84
11893: PPUSH
11894: LD_INT 76
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11904: LD_ADDR_EXP 26
11908: PUSH
11909: LD_STRING Kamil
11911: PPUSH
11912: LD_EXP 1
11916: NOT
11917: PPUSH
11918: LD_EXP 2
11922: PPUSH
11923: CALL 32912 0 3
11927: ST_TO_ADDR
// if Kamil then
11928: LD_EXP 26
11932: IFFALSE 11952
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11934: LD_EXP 26
11938: PPUSH
11939: LD_INT 85
11941: PPUSH
11942: LD_INT 78
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: CALL_OW 48
// uc_side := 5 ;
11952: LD_ADDR_OWVAR 20
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
// uc_nation := 2 ;
11960: LD_ADDR_OWVAR 21
11964: PUSH
11965: LD_INT 2
11967: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11968: LD_ADDR_EXP 27
11972: PUSH
11973: LD_STRING Aviradze
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: LD_STRING 
11981: PPUSH
11982: CALL 32912 0 3
11986: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11987: LD_EXP 27
11991: PPUSH
11992: LD_INT 106
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12005: LD_EXP 27
12009: PPUSH
12010: LD_INT 103
12012: PPUSH
12013: LD_INT 38
12015: PPUSH
12016: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12020: LD_ADDR_EXP 28
12024: PUSH
12025: LD_STRING Kaia
12027: PPUSH
12028: LD_INT 0
12030: PPUSH
12031: LD_STRING 
12033: PPUSH
12034: CALL 32912 0 3
12038: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12039: LD_EXP 28
12043: PPUSH
12044: LD_INT 100
12046: PPUSH
12047: LD_INT 34
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12057: LD_EXP 28
12061: PPUSH
12062: LD_INT 100
12064: PPUSH
12065: LD_INT 39
12067: PPUSH
12068: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12072: LD_ADDR_EXP 29
12076: PUSH
12077: LD_STRING Sophia
12079: PPUSH
12080: LD_INT 0
12082: PPUSH
12083: LD_STRING 
12085: PPUSH
12086: CALL 32912 0 3
12090: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12091: LD_EXP 29
12095: PPUSH
12096: LD_INT 109
12098: PPUSH
12099: LD_INT 50
12101: PPUSH
12102: LD_INT 0
12104: PPUSH
12105: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12109: LD_EXP 29
12113: PPUSH
12114: LD_INT 100
12116: PPUSH
12117: LD_INT 39
12119: PPUSH
12120: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12124: LD_ADDR_EXP 30
12128: PUSH
12129: LD_STRING Markov
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: LD_STRING 
12137: PPUSH
12138: CALL 32912 0 3
12142: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12143: LD_INT 5
12145: PPUSH
12146: LD_INT 3
12148: PPUSH
12149: LD_INT 21
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 42
12160: PPUSH
12161: LD_INT 90
12163: PUSH
12164: LD_INT 70
12166: PUSH
12167: LD_INT 60
12169: PUSH
12170: LD_INT 50
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_OWVAR 67
12183: ARRAY
12184: PPUSH
12185: CALL 241 0 7
// veh := CreateVehicle ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: CALL_OW 45
12198: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 4
12206: PPUSH
12207: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 109
12218: PPUSH
12219: LD_INT 38
12221: PPUSH
12222: LD_INT 0
12224: PPUSH
12225: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12229: LD_EXP 30
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12243: LD_EXP 28
12247: PPUSH
12248: LD_EXP 27
12252: PPUSH
12253: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12257: LD_EXP 27
12261: PPUSH
12262: LD_EXP 28
12266: PPUSH
12267: CALL_OW 119
// if not Givi or not Mike then
12271: LD_EXP 24
12275: NOT
12276: PUSH
12277: LD_EXP 25
12281: NOT
12282: OR
12283: IFFALSE 12359
// begin uc_nation := 2 ;
12285: LD_ADDR_OWVAR 21
12289: PUSH
12290: LD_INT 2
12292: ST_TO_ADDR
// uc_side := 5 ;
12293: LD_ADDR_OWVAR 20
12297: PUSH
12298: LD_INT 5
12300: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 380
// un := CreateHuman ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: CALL_OW 44
12323: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12324: LD_VAR 0 2
12328: PPUSH
12329: LD_INT 112
12331: PPUSH
12332: LD_INT 40
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12345: LD_VAR 0 2
12349: PPUSH
12350: LD_EXP 27
12354: PPUSH
12355: CALL_OW 119
// end ; end ;
12359: LD_VAR 0 1
12363: RET
// export function PrepareFarmer ; var i ; begin
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
// uc_side := 5 ;
12368: LD_ADDR_OWVAR 20
12372: PUSH
12373: LD_INT 5
12375: ST_TO_ADDR
// uc_nation := 2 ;
12376: LD_ADDR_OWVAR 21
12380: PUSH
12381: LD_INT 2
12383: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12384: LD_ADDR_EXP 31
12388: PUSH
12389: LD_STRING Farmer
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: LD_STRING 
12397: PPUSH
12398: CALL 32912 0 3
12402: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12403: LD_EXP 31
12407: PPUSH
12408: LD_INT 106
12410: PPUSH
12411: LD_INT 62
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 48
// for i := 1 to 5 do
12421: LD_ADDR_VAR 0 2
12425: PUSH
12426: DOUBLE
12427: LD_INT 1
12429: DEC
12430: ST_TO_ADDR
12431: LD_INT 5
12433: PUSH
12434: FOR_TO
12435: IFFALSE 12473
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12437: LD_INT 1
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12450: CALL_OW 44
12454: PPUSH
12455: LD_INT 105
12457: PPUSH
12458: LD_INT 64
12460: PPUSH
12461: LD_INT 3
12463: PPUSH
12464: LD_INT 0
12466: PPUSH
12467: CALL_OW 50
// end ;
12471: GO 12434
12473: POP
12474: POP
// end ; end_of_file
12475: LD_VAR 0 1
12479: RET
// every 2 2$20 + 0 0$10 do
12480: GO 12482
12482: DISABLE
// begin enable ;
12483: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12484: LD_INT 1
12486: PPUSH
12487: LD_INT 5
12489: PPUSH
12490: CALL_OW 12
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 55
// if tick > 6 6$00 then
12505: LD_OWVAR 1
12509: PUSH
12510: LD_INT 12600
12512: GREATER
12513: IFFALSE 12516
// disable ;
12515: DISABLE
// end ; end_of_file
12516: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12517: LD_VAR 0 1
12521: PUSH
12522: LD_EXP 23
12526: EQUAL
12527: IFFALSE 12536
// YouLost ( Heike ) ;
12529: LD_STRING Heike
12531: PPUSH
12532: CALL_OW 104
// if un = Aviradze then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 27
12545: EQUAL
12546: IFFALSE 12555
// YouLost ( Aviradze ) ;
12548: LD_STRING Aviradze
12550: PPUSH
12551: CALL_OW 104
// if un = usLab then
12555: LD_VAR 0 1
12559: PUSH
12560: LD_INT 3
12562: EQUAL
12563: IFFALSE 12572
// YouLost ( Lab ) ;
12565: LD_STRING Lab
12567: PPUSH
12568: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12572: LD_VAR 0 1
12576: PUSH
12577: LD_INT 22
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 23
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: PUSH
12617: LD_EXP 23
12621: PUSH
12622: LD_EXP 27
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: DIFF
12631: IN
12632: PUSH
12633: LD_EXP 4
12637: AND
12638: IFFALSE 12654
// lostCounter := lostCounter + 1 ;
12640: LD_ADDR_EXP 18
12644: PUSH
12645: LD_EXP 18
12649: PUSH
12650: LD_INT 1
12652: PLUS
12653: ST_TO_ADDR
// end ;
12654: PPOPN 1
12656: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12657: LD_INT 23
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_INT 0
12688: EQUAL
12689: PUSH
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: AND
12723: IFFALSE 12735
12725: GO 12727
12727: DISABLE
// YouLost ( Eng ) ;
12728: LD_STRING Eng
12730: PPUSH
12731: CALL_OW 104
12735: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 22
12745: IN
12746: PUSH
12747: LD_VAR 0 2
12751: PUSH
12752: LD_INT 2
12754: EQUAL
12755: AND
12756: IFFALSE 12788
// begin usSci := usSci diff un ;
12758: LD_ADDR_EXP 22
12762: PUSH
12763: LD_EXP 22
12767: PUSH
12768: LD_VAR 0 1
12772: DIFF
12773: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12774: LD_ADDR_EXP 9
12778: PUSH
12779: LD_EXP 9
12783: PUSH
12784: LD_INT 1
12786: PLUS
12787: ST_TO_ADDR
// end ; end ;
12788: PPOPN 3
12790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12791: LD_VAR 0 1
12795: PUSH
12796: LD_INT 2
12798: EQUAL
12799: PUSH
12800: LD_VAR 0 2
12804: PUSH
12805: LD_INT 5
12807: EQUAL
12808: AND
12809: IFFALSE 12818
// YouLost ( FriendlyFire ) ;
12811: LD_STRING FriendlyFire
12813: PPUSH
12814: CALL_OW 104
// end ; end_of_file end_of_file
12818: PPOPN 2
12820: END
// export globalGameSaveCounter ; every 0 0$1 do
12821: GO 12823
12823: DISABLE
// begin enable ;
12824: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12825: LD_STRING updateTimer(
12827: PUSH
12828: LD_OWVAR 1
12832: STR
12833: PUSH
12834: LD_STRING );
12836: STR
12837: PPUSH
12838: CALL_OW 559
// end ;
12842: END
// every 0 0$1 do
12843: GO 12845
12845: DISABLE
// begin globalGameSaveCounter := 0 ;
12846: LD_ADDR_EXP 32
12850: PUSH
12851: LD_INT 0
12853: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12854: LD_STRING setGameSaveCounter(0)
12856: PPUSH
12857: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12861: LD_STRING initStreamRollete();
12863: PPUSH
12864: CALL_OW 559
// InitStreamMode ;
12868: CALL 14194 0 0
// DefineStreamItems ( false ) ;
12872: LD_INT 0
12874: PPUSH
12875: CALL 14658 0 1
// end ;
12879: END
// export function SOS_MapStart ( ) ; begin
12880: LD_INT 0
12882: PPUSH
// if streamModeActive then
12883: LD_EXP 33
12887: IFFALSE 12896
// DefineStreamItems ( true ) ;
12889: LD_INT 1
12891: PPUSH
12892: CALL 14658 0 1
// UpdateLuaVariables ( ) ;
12896: CALL 12913 0 0
// UpdateFactoryWaypoints ( ) ;
12900: CALL 27527 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12904: CALL 27784 0 0
// end ;
12908: LD_VAR 0 1
12912: RET
// function UpdateLuaVariables ( ) ; begin
12913: LD_INT 0
12915: PPUSH
// if globalGameSaveCounter then
12916: LD_EXP 32
12920: IFFALSE 12954
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12922: LD_ADDR_EXP 32
12926: PUSH
12927: LD_EXP 32
12931: PPUSH
12932: CALL 71594 0 1
12936: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12937: LD_STRING setGameSaveCounter(
12939: PUSH
12940: LD_EXP 32
12944: STR
12945: PUSH
12946: LD_STRING )
12948: STR
12949: PPUSH
12950: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12954: LD_STRING setGameDifficulty(
12956: PUSH
12957: LD_OWVAR 67
12961: STR
12962: PUSH
12963: LD_STRING )
12965: STR
12966: PPUSH
12967: CALL_OW 559
// end ;
12971: LD_VAR 0 1
12975: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12976: LD_INT 0
12978: PPUSH
// if p2 = stream_mode then
12979: LD_VAR 0 2
12983: PUSH
12984: LD_INT 100
12986: EQUAL
12987: IFFALSE 13990
// begin if not StreamModeActive then
12989: LD_EXP 33
12993: NOT
12994: IFFALSE 13004
// StreamModeActive := true ;
12996: LD_ADDR_EXP 33
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 0 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 0
13011: EQUAL
13012: IFFALSE 13018
// InitStreamMode ;
13014: CALL 14194 0 0
// if p3 = 1 then
13018: LD_VAR 0 3
13022: PUSH
13023: LD_INT 1
13025: EQUAL
13026: IFFALSE 13036
// sRocket := true ;
13028: LD_ADDR_EXP 38
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// if p3 = 2 then
13036: LD_VAR 0 3
13040: PUSH
13041: LD_INT 2
13043: EQUAL
13044: IFFALSE 13054
// sSpeed := true ;
13046: LD_ADDR_EXP 37
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if p3 = 3 then
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 3
13061: EQUAL
13062: IFFALSE 13072
// sEngine := true ;
13064: LD_ADDR_EXP 39
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// if p3 = 4 then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 4
13079: EQUAL
13080: IFFALSE 13090
// sSpec := true ;
13082: LD_ADDR_EXP 36
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// if p3 = 5 then
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 5
13097: EQUAL
13098: IFFALSE 13108
// sLevel := true ;
13100: LD_ADDR_EXP 40
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// if p3 = 6 then
13108: LD_VAR 0 3
13112: PUSH
13113: LD_INT 6
13115: EQUAL
13116: IFFALSE 13126
// sArmoury := true ;
13118: LD_ADDR_EXP 41
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// if p3 = 7 then
13126: LD_VAR 0 3
13130: PUSH
13131: LD_INT 7
13133: EQUAL
13134: IFFALSE 13144
// sRadar := true ;
13136: LD_ADDR_EXP 42
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// if p3 = 8 then
13144: LD_VAR 0 3
13148: PUSH
13149: LD_INT 8
13151: EQUAL
13152: IFFALSE 13162
// sBunker := true ;
13154: LD_ADDR_EXP 43
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// if p3 = 9 then
13162: LD_VAR 0 3
13166: PUSH
13167: LD_INT 9
13169: EQUAL
13170: IFFALSE 13180
// sHack := true ;
13172: LD_ADDR_EXP 44
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// if p3 = 10 then
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 10
13187: EQUAL
13188: IFFALSE 13198
// sFire := true ;
13190: LD_ADDR_EXP 45
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 11 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 11
13205: EQUAL
13206: IFFALSE 13216
// sRefresh := true ;
13208: LD_ADDR_EXP 46
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// if p3 = 12 then
13216: LD_VAR 0 3
13220: PUSH
13221: LD_INT 12
13223: EQUAL
13224: IFFALSE 13234
// sExp := true ;
13226: LD_ADDR_EXP 47
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// if p3 = 13 then
13234: LD_VAR 0 3
13238: PUSH
13239: LD_INT 13
13241: EQUAL
13242: IFFALSE 13252
// sDepot := true ;
13244: LD_ADDR_EXP 48
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if p3 = 14 then
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 14
13259: EQUAL
13260: IFFALSE 13270
// sFlag := true ;
13262: LD_ADDR_EXP 49
13266: PUSH
13267: LD_INT 1
13269: ST_TO_ADDR
// if p3 = 15 then
13270: LD_VAR 0 3
13274: PUSH
13275: LD_INT 15
13277: EQUAL
13278: IFFALSE 13288
// sKamikadze := true ;
13280: LD_ADDR_EXP 57
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if p3 = 16 then
13288: LD_VAR 0 3
13292: PUSH
13293: LD_INT 16
13295: EQUAL
13296: IFFALSE 13306
// sTroll := true ;
13298: LD_ADDR_EXP 58
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// if p3 = 17 then
13306: LD_VAR 0 3
13310: PUSH
13311: LD_INT 17
13313: EQUAL
13314: IFFALSE 13324
// sSlow := true ;
13316: LD_ADDR_EXP 59
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// if p3 = 18 then
13324: LD_VAR 0 3
13328: PUSH
13329: LD_INT 18
13331: EQUAL
13332: IFFALSE 13342
// sLack := true ;
13334: LD_ADDR_EXP 60
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// if p3 = 19 then
13342: LD_VAR 0 3
13346: PUSH
13347: LD_INT 19
13349: EQUAL
13350: IFFALSE 13360
// sTank := true ;
13352: LD_ADDR_EXP 62
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// if p3 = 20 then
13360: LD_VAR 0 3
13364: PUSH
13365: LD_INT 20
13367: EQUAL
13368: IFFALSE 13378
// sRemote := true ;
13370: LD_ADDR_EXP 63
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// if p3 = 21 then
13378: LD_VAR 0 3
13382: PUSH
13383: LD_INT 21
13385: EQUAL
13386: IFFALSE 13396
// sPowell := true ;
13388: LD_ADDR_EXP 64
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// if p3 = 22 then
13396: LD_VAR 0 3
13400: PUSH
13401: LD_INT 22
13403: EQUAL
13404: IFFALSE 13414
// sTeleport := true ;
13406: LD_ADDR_EXP 67
13410: PUSH
13411: LD_INT 1
13413: ST_TO_ADDR
// if p3 = 23 then
13414: LD_VAR 0 3
13418: PUSH
13419: LD_INT 23
13421: EQUAL
13422: IFFALSE 13432
// sOilTower := true ;
13424: LD_ADDR_EXP 69
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
// if p3 = 24 then
13432: LD_VAR 0 3
13436: PUSH
13437: LD_INT 24
13439: EQUAL
13440: IFFALSE 13450
// sShovel := true ;
13442: LD_ADDR_EXP 70
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
// if p3 = 25 then
13450: LD_VAR 0 3
13454: PUSH
13455: LD_INT 25
13457: EQUAL
13458: IFFALSE 13468
// sSheik := true ;
13460: LD_ADDR_EXP 71
13464: PUSH
13465: LD_INT 1
13467: ST_TO_ADDR
// if p3 = 26 then
13468: LD_VAR 0 3
13472: PUSH
13473: LD_INT 26
13475: EQUAL
13476: IFFALSE 13486
// sEarthquake := true ;
13478: LD_ADDR_EXP 73
13482: PUSH
13483: LD_INT 1
13485: ST_TO_ADDR
// if p3 = 27 then
13486: LD_VAR 0 3
13490: PUSH
13491: LD_INT 27
13493: EQUAL
13494: IFFALSE 13504
// sAI := true ;
13496: LD_ADDR_EXP 74
13500: PUSH
13501: LD_INT 1
13503: ST_TO_ADDR
// if p3 = 28 then
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 28
13511: EQUAL
13512: IFFALSE 13522
// sCargo := true ;
13514: LD_ADDR_EXP 77
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// if p3 = 29 then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_INT 29
13529: EQUAL
13530: IFFALSE 13540
// sDLaser := true ;
13532: LD_ADDR_EXP 78
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// if p3 = 30 then
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 30
13547: EQUAL
13548: IFFALSE 13558
// sExchange := true ;
13550: LD_ADDR_EXP 79
13554: PUSH
13555: LD_INT 1
13557: ST_TO_ADDR
// if p3 = 31 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 31
13565: EQUAL
13566: IFFALSE 13576
// sFac := true ;
13568: LD_ADDR_EXP 80
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// if p3 = 32 then
13576: LD_VAR 0 3
13580: PUSH
13581: LD_INT 32
13583: EQUAL
13584: IFFALSE 13594
// sPower := true ;
13586: LD_ADDR_EXP 81
13590: PUSH
13591: LD_INT 1
13593: ST_TO_ADDR
// if p3 = 33 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 33
13601: EQUAL
13602: IFFALSE 13612
// sRandom := true ;
13604: LD_ADDR_EXP 82
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// if p3 = 34 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 34
13619: EQUAL
13620: IFFALSE 13630
// sShield := true ;
13622: LD_ADDR_EXP 83
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 35 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 35
13637: EQUAL
13638: IFFALSE 13648
// sTime := true ;
13640: LD_ADDR_EXP 84
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 36 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 36
13655: EQUAL
13656: IFFALSE 13666
// sTools := true ;
13658: LD_ADDR_EXP 85
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 101 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 101
13673: EQUAL
13674: IFFALSE 13684
// sSold := true ;
13676: LD_ADDR_EXP 50
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 102 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 102
13691: EQUAL
13692: IFFALSE 13702
// sDiff := true ;
13694: LD_ADDR_EXP 51
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 103 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 103
13709: EQUAL
13710: IFFALSE 13720
// sFog := true ;
13712: LD_ADDR_EXP 54
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 104 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 104
13727: EQUAL
13728: IFFALSE 13738
// sReset := true ;
13730: LD_ADDR_EXP 55
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 105 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 105
13745: EQUAL
13746: IFFALSE 13756
// sSun := true ;
13748: LD_ADDR_EXP 56
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 106 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 106
13763: EQUAL
13764: IFFALSE 13774
// sTiger := true ;
13766: LD_ADDR_EXP 52
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 107 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 107
13781: EQUAL
13782: IFFALSE 13792
// sBomb := true ;
13784: LD_ADDR_EXP 53
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 108 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 108
13799: EQUAL
13800: IFFALSE 13810
// sWound := true ;
13802: LD_ADDR_EXP 61
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 109 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 109
13817: EQUAL
13818: IFFALSE 13828
// sBetray := true ;
13820: LD_ADDR_EXP 65
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 110 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 110
13835: EQUAL
13836: IFFALSE 13846
// sContamin := true ;
13838: LD_ADDR_EXP 66
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 111 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 111
13853: EQUAL
13854: IFFALSE 13864
// sOil := true ;
13856: LD_ADDR_EXP 68
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 112 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 112
13871: EQUAL
13872: IFFALSE 13882
// sStu := true ;
13874: LD_ADDR_EXP 72
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 113 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 113
13889: EQUAL
13890: IFFALSE 13900
// sBazooka := true ;
13892: LD_ADDR_EXP 75
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 114 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 114
13907: EQUAL
13908: IFFALSE 13918
// sMortar := true ;
13910: LD_ADDR_EXP 76
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 115 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 115
13925: EQUAL
13926: IFFALSE 13936
// sRanger := true ;
13928: LD_ADDR_EXP 86
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 116 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 116
13943: EQUAL
13944: IFFALSE 13954
// sComputer := true ;
13946: LD_ADDR_EXP 87
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 117 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 117
13961: EQUAL
13962: IFFALSE 13972
// s30 := true ;
13964: LD_ADDR_EXP 88
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 118 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 118
13979: EQUAL
13980: IFFALSE 13990
// s60 := true ;
13982: LD_ADDR_EXP 89
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// end ; if p2 = hack_mode then
13990: LD_VAR 0 2
13994: PUSH
13995: LD_INT 101
13997: EQUAL
13998: IFFALSE 14126
// begin case p3 of 1 :
14000: LD_VAR 0 3
14004: PUSH
14005: LD_INT 1
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14020
14013: POP
// hHackUnlimitedResources ; 2 :
14014: CALL 26273 0 0
14018: GO 14126
14020: LD_INT 2
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14035
14028: POP
// hHackSetLevel10 ; 3 :
14029: CALL 26406 0 0
14033: GO 14126
14035: LD_INT 3
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14050
14043: POP
// hHackSetLevel10YourUnits ; 4 :
14044: CALL 26491 0 0
14048: GO 14126
14050: LD_INT 4
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14065
14058: POP
// hHackInvincible ; 5 :
14059: CALL 26939 0 0
14063: GO 14126
14065: LD_INT 5
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14080
14073: POP
// hHackInvisible ; 6 :
14074: CALL 27050 0 0
14078: GO 14126
14080: LD_INT 6
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14095
14088: POP
// hHackChangeYourSide ; 7 :
14089: CALL 27107 0 0
14093: GO 14126
14095: LD_INT 7
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14110
14103: POP
// hHackChangeUnitSide ; 8 :
14104: CALL 27149 0 0
14108: GO 14126
14110: LD_INT 8
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14125
14118: POP
// hHackFog ; end ;
14119: CALL 27250 0 0
14123: GO 14126
14125: POP
// end ; if p2 = game_save_mode then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_INT 102
14133: EQUAL
14134: IFFALSE 14189
// begin if p3 = 1 then
14136: LD_VAR 0 3
14140: PUSH
14141: LD_INT 1
14143: EQUAL
14144: IFFALSE 14156
// globalGameSaveCounter := p4 ;
14146: LD_ADDR_EXP 32
14150: PUSH
14151: LD_VAR 0 4
14155: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14156: LD_VAR 0 3
14160: PUSH
14161: LD_INT 2
14163: EQUAL
14164: PUSH
14165: LD_EXP 32
14169: AND
14170: IFFALSE 14189
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14172: LD_STRING setGameSaveCounter(
14174: PUSH
14175: LD_EXP 32
14179: STR
14180: PUSH
14181: LD_STRING )
14183: STR
14184: PPUSH
14185: CALL_OW 559
// end ; end ;
14189: LD_VAR 0 7
14193: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14194: LD_INT 0
14196: PPUSH
// streamModeActive := false ;
14197: LD_ADDR_EXP 33
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// normalCounter := 36 ;
14205: LD_ADDR_EXP 34
14209: PUSH
14210: LD_INT 36
14212: ST_TO_ADDR
// hardcoreCounter := 18 ;
14213: LD_ADDR_EXP 35
14217: PUSH
14218: LD_INT 18
14220: ST_TO_ADDR
// sRocket := false ;
14221: LD_ADDR_EXP 38
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sSpeed := false ;
14229: LD_ADDR_EXP 37
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sEngine := false ;
14237: LD_ADDR_EXP 39
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sSpec := false ;
14245: LD_ADDR_EXP 36
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sLevel := false ;
14253: LD_ADDR_EXP 40
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sArmoury := false ;
14261: LD_ADDR_EXP 41
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sRadar := false ;
14269: LD_ADDR_EXP 42
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sBunker := false ;
14277: LD_ADDR_EXP 43
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sHack := false ;
14285: LD_ADDR_EXP 44
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sFire := false ;
14293: LD_ADDR_EXP 45
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sRefresh := false ;
14301: LD_ADDR_EXP 46
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sExp := false ;
14309: LD_ADDR_EXP 47
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sDepot := false ;
14317: LD_ADDR_EXP 48
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sFlag := false ;
14325: LD_ADDR_EXP 49
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sKamikadze := false ;
14333: LD_ADDR_EXP 57
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sTroll := false ;
14341: LD_ADDR_EXP 58
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sSlow := false ;
14349: LD_ADDR_EXP 59
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sLack := false ;
14357: LD_ADDR_EXP 60
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sTank := false ;
14365: LD_ADDR_EXP 62
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sRemote := false ;
14373: LD_ADDR_EXP 63
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sPowell := false ;
14381: LD_ADDR_EXP 64
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sTeleport := false ;
14389: LD_ADDR_EXP 67
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sOilTower := false ;
14397: LD_ADDR_EXP 69
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sShovel := false ;
14405: LD_ADDR_EXP 70
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sSheik := false ;
14413: LD_ADDR_EXP 71
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sEarthquake := false ;
14421: LD_ADDR_EXP 73
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sAI := false ;
14429: LD_ADDR_EXP 74
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sCargo := false ;
14437: LD_ADDR_EXP 77
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sDLaser := false ;
14445: LD_ADDR_EXP 78
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sExchange := false ;
14453: LD_ADDR_EXP 79
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sFac := false ;
14461: LD_ADDR_EXP 80
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sPower := false ;
14469: LD_ADDR_EXP 81
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sRandom := false ;
14477: LD_ADDR_EXP 82
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sShield := false ;
14485: LD_ADDR_EXP 83
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sTime := false ;
14493: LD_ADDR_EXP 84
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sTools := false ;
14501: LD_ADDR_EXP 85
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sSold := false ;
14509: LD_ADDR_EXP 50
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sDiff := false ;
14517: LD_ADDR_EXP 51
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sFog := false ;
14525: LD_ADDR_EXP 54
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sReset := false ;
14533: LD_ADDR_EXP 55
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sSun := false ;
14541: LD_ADDR_EXP 56
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sTiger := false ;
14549: LD_ADDR_EXP 52
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sBomb := false ;
14557: LD_ADDR_EXP 53
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sWound := false ;
14565: LD_ADDR_EXP 61
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sBetray := false ;
14573: LD_ADDR_EXP 65
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// sContamin := false ;
14581: LD_ADDR_EXP 66
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// sOil := false ;
14589: LD_ADDR_EXP 68
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// sStu := false ;
14597: LD_ADDR_EXP 72
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// sBazooka := false ;
14605: LD_ADDR_EXP 75
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// sMortar := false ;
14613: LD_ADDR_EXP 76
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// sRanger := false ;
14621: LD_ADDR_EXP 86
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// sComputer := false ;
14629: LD_ADDR_EXP 87
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// s30 := false ;
14637: LD_ADDR_EXP 88
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// s60 := false ;
14645: LD_ADDR_EXP 89
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 1
14657: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// result := [ ] ;
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// if campaign_id = 1 then
14674: LD_OWVAR 69
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: IFFALSE 17848
// begin case mission_number of 1 :
14684: LD_OWVAR 70
14688: PUSH
14689: LD_INT 1
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14773
14697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 15
14717: PUSH
14718: LD_INT 16
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 26
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 102
14746: PUSH
14747: LD_INT 106
14749: PUSH
14750: LD_INT 116
14752: PUSH
14753: LD_INT 117
14755: PUSH
14756: LD_INT 118
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: ST_TO_ADDR
14771: GO 17846
14773: LD_INT 2
14775: DOUBLE
14776: EQUAL
14777: IFTRUE 14781
14779: GO 14865
14781: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 11
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 15
14801: PUSH
14802: LD_INT 16
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 23
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 101
14827: PUSH
14828: LD_INT 102
14830: PUSH
14831: LD_INT 105
14833: PUSH
14834: LD_INT 106
14836: PUSH
14837: LD_INT 108
14839: PUSH
14840: LD_INT 116
14842: PUSH
14843: LD_INT 117
14845: PUSH
14846: LD_INT 118
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
14863: GO 17846
14865: LD_INT 3
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14961
14873: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: LD_INT 11
14890: PUSH
14891: LD_INT 12
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_INT 26
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 101
14923: PUSH
14924: LD_INT 102
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 116
14938: PUSH
14939: LD_INT 117
14941: PUSH
14942: LD_INT 118
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: ST_TO_ADDR
14959: GO 17846
14961: LD_INT 4
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15065
14969: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 4
14980: PUSH
14981: LD_INT 5
14983: PUSH
14984: LD_INT 8
14986: PUSH
14987: LD_INT 11
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: LD_INT 15
14995: PUSH
14996: LD_INT 16
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 26
15007: PUSH
15008: LD_INT 36
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 105
15033: PUSH
15034: LD_INT 106
15036: PUSH
15037: LD_INT 108
15039: PUSH
15040: LD_INT 116
15042: PUSH
15043: LD_INT 117
15045: PUSH
15046: LD_INT 118
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: ST_TO_ADDR
15063: GO 17846
15065: LD_INT 5
15067: DOUBLE
15068: EQUAL
15069: IFTRUE 15073
15071: GO 15185
15073: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: LD_INT 6
15090: PUSH
15091: LD_INT 8
15093: PUSH
15094: LD_INT 11
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: LD_INT 15
15102: PUSH
15103: LD_INT 16
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 25
15114: PUSH
15115: LD_INT 26
15117: PUSH
15118: LD_INT 36
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 101
15139: PUSH
15140: LD_INT 102
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 108
15151: PUSH
15152: LD_INT 109
15154: PUSH
15155: LD_INT 112
15157: PUSH
15158: LD_INT 116
15160: PUSH
15161: LD_INT 117
15163: PUSH
15164: LD_INT 118
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: ST_TO_ADDR
15183: GO 17846
15185: LD_INT 6
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15325
15193: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: LD_INT 4
15204: PUSH
15205: LD_INT 5
15207: PUSH
15208: LD_INT 6
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 11
15216: PUSH
15217: LD_INT 12
15219: PUSH
15220: LD_INT 15
15222: PUSH
15223: LD_INT 16
15225: PUSH
15226: LD_INT 20
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_INT 23
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: LD_INT 30
15246: PUSH
15247: LD_INT 31
15249: PUSH
15250: LD_INT 32
15252: PUSH
15253: LD_INT 36
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 101
15279: PUSH
15280: LD_INT 102
15282: PUSH
15283: LD_INT 105
15285: PUSH
15286: LD_INT 106
15288: PUSH
15289: LD_INT 108
15291: PUSH
15292: LD_INT 109
15294: PUSH
15295: LD_INT 112
15297: PUSH
15298: LD_INT 116
15300: PUSH
15301: LD_INT 117
15303: PUSH
15304: LD_INT 118
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: ST_TO_ADDR
15323: GO 17846
15325: LD_INT 7
15327: DOUBLE
15328: EQUAL
15329: IFTRUE 15333
15331: GO 15445
15333: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15334: LD_ADDR_VAR 0 2
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: LD_INT 4
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 11
15353: PUSH
15354: LD_INT 12
15356: PUSH
15357: LD_INT 15
15359: PUSH
15360: LD_INT 16
15362: PUSH
15363: LD_INT 20
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 23
15374: PUSH
15375: LD_INT 25
15377: PUSH
15378: LD_INT 26
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 101
15399: PUSH
15400: LD_INT 102
15402: PUSH
15403: LD_INT 103
15405: PUSH
15406: LD_INT 105
15408: PUSH
15409: LD_INT 106
15411: PUSH
15412: LD_INT 108
15414: PUSH
15415: LD_INT 112
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: ST_TO_ADDR
15443: GO 17846
15445: LD_INT 8
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15593
15453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 11
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 15
15485: PUSH
15486: LD_INT 16
15488: PUSH
15489: LD_INT 20
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 22
15497: PUSH
15498: LD_INT 23
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 31
15512: PUSH
15513: LD_INT 32
15515: PUSH
15516: LD_INT 36
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 101
15543: PUSH
15544: LD_INT 102
15546: PUSH
15547: LD_INT 103
15549: PUSH
15550: LD_INT 105
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 109
15561: PUSH
15562: LD_INT 112
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 17846
15593: LD_INT 9
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15749
15601: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: LD_INT 7
15621: PUSH
15622: LD_INT 8
15624: PUSH
15625: LD_INT 11
15627: PUSH
15628: LD_INT 12
15630: PUSH
15631: LD_INT 15
15633: PUSH
15634: LD_INT 16
15636: PUSH
15637: LD_INT 20
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_INT 23
15648: PUSH
15649: LD_INT 25
15651: PUSH
15652: LD_INT 26
15654: PUSH
15655: LD_INT 28
15657: PUSH
15658: LD_INT 30
15660: PUSH
15661: LD_INT 31
15663: PUSH
15664: LD_INT 32
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 101
15695: PUSH
15696: LD_INT 102
15698: PUSH
15699: LD_INT 103
15701: PUSH
15702: LD_INT 105
15704: PUSH
15705: LD_INT 106
15707: PUSH
15708: LD_INT 108
15710: PUSH
15711: LD_INT 109
15713: PUSH
15714: LD_INT 112
15716: PUSH
15717: LD_INT 114
15719: PUSH
15720: LD_INT 116
15722: PUSH
15723: LD_INT 117
15725: PUSH
15726: LD_INT 118
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
15747: GO 17846
15749: LD_INT 10
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15953
15757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15758: LD_ADDR_VAR 0 2
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: LD_INT 6
15774: PUSH
15775: LD_INT 7
15777: PUSH
15778: LD_INT 8
15780: PUSH
15781: LD_INT 9
15783: PUSH
15784: LD_INT 10
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 13
15795: PUSH
15796: LD_INT 14
15798: PUSH
15799: LD_INT 15
15801: PUSH
15802: LD_INT 16
15804: PUSH
15805: LD_INT 17
15807: PUSH
15808: LD_INT 18
15810: PUSH
15811: LD_INT 19
15813: PUSH
15814: LD_INT 20
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 23
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 25
15831: PUSH
15832: LD_INT 26
15834: PUSH
15835: LD_INT 28
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 36
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 114
15919: PUSH
15920: LD_INT 116
15922: PUSH
15923: LD_INT 117
15925: PUSH
15926: LD_INT 118
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: ST_TO_ADDR
15951: GO 17846
15953: LD_INT 11
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16165
15961: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 3
15972: PUSH
15973: LD_INT 4
15975: PUSH
15976: LD_INT 5
15978: PUSH
15979: LD_INT 6
15981: PUSH
15982: LD_INT 7
15984: PUSH
15985: LD_INT 8
15987: PUSH
15988: LD_INT 9
15990: PUSH
15991: LD_INT 10
15993: PUSH
15994: LD_INT 11
15996: PUSH
15997: LD_INT 12
15999: PUSH
16000: LD_INT 13
16002: PUSH
16003: LD_INT 14
16005: PUSH
16006: LD_INT 15
16008: PUSH
16009: LD_INT 16
16011: PUSH
16012: LD_INT 17
16014: PUSH
16015: LD_INT 18
16017: PUSH
16018: LD_INT 19
16020: PUSH
16021: LD_INT 20
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_INT 23
16032: PUSH
16033: LD_INT 24
16035: PUSH
16036: LD_INT 25
16038: PUSH
16039: LD_INT 26
16041: PUSH
16042: LD_INT 28
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 31
16050: PUSH
16051: LD_INT 32
16053: PUSH
16054: LD_INT 34
16056: PUSH
16057: LD_INT 36
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 101
16095: PUSH
16096: LD_INT 102
16098: PUSH
16099: LD_INT 103
16101: PUSH
16102: LD_INT 104
16104: PUSH
16105: LD_INT 105
16107: PUSH
16108: LD_INT 106
16110: PUSH
16111: LD_INT 107
16113: PUSH
16114: LD_INT 108
16116: PUSH
16117: LD_INT 109
16119: PUSH
16120: LD_INT 110
16122: PUSH
16123: LD_INT 111
16125: PUSH
16126: LD_INT 112
16128: PUSH
16129: LD_INT 114
16131: PUSH
16132: LD_INT 116
16134: PUSH
16135: LD_INT 117
16137: PUSH
16138: LD_INT 118
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 17846
16165: LD_INT 12
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16393
16173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16174: LD_ADDR_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 4
16190: PUSH
16191: LD_INT 5
16193: PUSH
16194: LD_INT 6
16196: PUSH
16197: LD_INT 7
16199: PUSH
16200: LD_INT 8
16202: PUSH
16203: LD_INT 9
16205: PUSH
16206: LD_INT 10
16208: PUSH
16209: LD_INT 11
16211: PUSH
16212: LD_INT 12
16214: PUSH
16215: LD_INT 13
16217: PUSH
16218: LD_INT 14
16220: PUSH
16221: LD_INT 15
16223: PUSH
16224: LD_INT 16
16226: PUSH
16227: LD_INT 17
16229: PUSH
16230: LD_INT 18
16232: PUSH
16233: LD_INT 19
16235: PUSH
16236: LD_INT 20
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 23
16247: PUSH
16248: LD_INT 24
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 26
16256: PUSH
16257: LD_INT 27
16259: PUSH
16260: LD_INT 28
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 31
16268: PUSH
16269: LD_INT 32
16271: PUSH
16272: LD_INT 33
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 36
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 104
16328: PUSH
16329: LD_INT 105
16331: PUSH
16332: LD_INT 106
16334: PUSH
16335: LD_INT 107
16337: PUSH
16338: LD_INT 108
16340: PUSH
16341: LD_INT 109
16343: PUSH
16344: LD_INT 110
16346: PUSH
16347: LD_INT 111
16349: PUSH
16350: LD_INT 112
16352: PUSH
16353: LD_INT 113
16355: PUSH
16356: LD_INT 114
16358: PUSH
16359: LD_INT 116
16361: PUSH
16362: LD_INT 117
16364: PUSH
16365: LD_INT 118
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
16391: GO 17846
16393: LD_INT 13
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 16609
16401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 3
16415: PUSH
16416: LD_INT 4
16418: PUSH
16419: LD_INT 5
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 9
16427: PUSH
16428: LD_INT 10
16430: PUSH
16431: LD_INT 11
16433: PUSH
16434: LD_INT 12
16436: PUSH
16437: LD_INT 14
16439: PUSH
16440: LD_INT 15
16442: PUSH
16443: LD_INT 16
16445: PUSH
16446: LD_INT 17
16448: PUSH
16449: LD_INT 18
16451: PUSH
16452: LD_INT 19
16454: PUSH
16455: LD_INT 20
16457: PUSH
16458: LD_INT 21
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_INT 23
16466: PUSH
16467: LD_INT 24
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 26
16475: PUSH
16476: LD_INT 27
16478: PUSH
16479: LD_INT 28
16481: PUSH
16482: LD_INT 30
16484: PUSH
16485: LD_INT 31
16487: PUSH
16488: LD_INT 32
16490: PUSH
16491: LD_INT 33
16493: PUSH
16494: LD_INT 34
16496: PUSH
16497: LD_INT 36
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 101
16535: PUSH
16536: LD_INT 102
16538: PUSH
16539: LD_INT 103
16541: PUSH
16542: LD_INT 104
16544: PUSH
16545: LD_INT 105
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: LD_INT 107
16553: PUSH
16554: LD_INT 108
16556: PUSH
16557: LD_INT 109
16559: PUSH
16560: LD_INT 110
16562: PUSH
16563: LD_INT 111
16565: PUSH
16566: LD_INT 112
16568: PUSH
16569: LD_INT 113
16571: PUSH
16572: LD_INT 114
16574: PUSH
16575: LD_INT 116
16577: PUSH
16578: LD_INT 117
16580: PUSH
16581: LD_INT 118
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: ST_TO_ADDR
16607: GO 17846
16609: LD_INT 14
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16841
16617: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: LD_INT 4
16634: PUSH
16635: LD_INT 5
16637: PUSH
16638: LD_INT 6
16640: PUSH
16641: LD_INT 7
16643: PUSH
16644: LD_INT 8
16646: PUSH
16647: LD_INT 9
16649: PUSH
16650: LD_INT 10
16652: PUSH
16653: LD_INT 11
16655: PUSH
16656: LD_INT 12
16658: PUSH
16659: LD_INT 13
16661: PUSH
16662: LD_INT 14
16664: PUSH
16665: LD_INT 15
16667: PUSH
16668: LD_INT 16
16670: PUSH
16671: LD_INT 17
16673: PUSH
16674: LD_INT 18
16676: PUSH
16677: LD_INT 19
16679: PUSH
16680: LD_INT 20
16682: PUSH
16683: LD_INT 21
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_INT 23
16691: PUSH
16692: LD_INT 24
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 26
16700: PUSH
16701: LD_INT 27
16703: PUSH
16704: LD_INT 28
16706: PUSH
16707: LD_INT 29
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 31
16715: PUSH
16716: LD_INT 32
16718: PUSH
16719: LD_INT 33
16721: PUSH
16722: LD_INT 34
16724: PUSH
16725: LD_INT 36
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 104
16776: PUSH
16777: LD_INT 105
16779: PUSH
16780: LD_INT 106
16782: PUSH
16783: LD_INT 107
16785: PUSH
16786: LD_INT 108
16788: PUSH
16789: LD_INT 109
16791: PUSH
16792: LD_INT 110
16794: PUSH
16795: LD_INT 111
16797: PUSH
16798: LD_INT 112
16800: PUSH
16801: LD_INT 113
16803: PUSH
16804: LD_INT 114
16806: PUSH
16807: LD_INT 116
16809: PUSH
16810: LD_INT 117
16812: PUSH
16813: LD_INT 118
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
16839: GO 17846
16841: LD_INT 15
16843: DOUBLE
16844: EQUAL
16845: IFTRUE 16849
16847: GO 17073
16849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: LD_INT 6
16872: PUSH
16873: LD_INT 7
16875: PUSH
16876: LD_INT 8
16878: PUSH
16879: LD_INT 9
16881: PUSH
16882: LD_INT 10
16884: PUSH
16885: LD_INT 11
16887: PUSH
16888: LD_INT 12
16890: PUSH
16891: LD_INT 13
16893: PUSH
16894: LD_INT 14
16896: PUSH
16897: LD_INT 15
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 17
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: LD_INT 19
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 23
16923: PUSH
16924: LD_INT 24
16926: PUSH
16927: LD_INT 25
16929: PUSH
16930: LD_INT 26
16932: PUSH
16933: LD_INT 27
16935: PUSH
16936: LD_INT 28
16938: PUSH
16939: LD_INT 29
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 31
16947: PUSH
16948: LD_INT 32
16950: PUSH
16951: LD_INT 33
16953: PUSH
16954: LD_INT 34
16956: PUSH
16957: LD_INT 36
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 101
16999: PUSH
17000: LD_INT 102
17002: PUSH
17003: LD_INT 103
17005: PUSH
17006: LD_INT 104
17008: PUSH
17009: LD_INT 105
17011: PUSH
17012: LD_INT 106
17014: PUSH
17015: LD_INT 107
17017: PUSH
17018: LD_INT 108
17020: PUSH
17021: LD_INT 109
17023: PUSH
17024: LD_INT 110
17026: PUSH
17027: LD_INT 111
17029: PUSH
17030: LD_INT 112
17032: PUSH
17033: LD_INT 113
17035: PUSH
17036: LD_INT 114
17038: PUSH
17039: LD_INT 116
17041: PUSH
17042: LD_INT 117
17044: PUSH
17045: LD_INT 118
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: ST_TO_ADDR
17071: GO 17846
17073: LD_INT 16
17075: DOUBLE
17076: EQUAL
17077: IFTRUE 17081
17079: GO 17217
17081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: LD_INT 5
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: LD_INT 11
17101: PUSH
17102: LD_INT 12
17104: PUSH
17105: LD_INT 15
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 25
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 30
17131: PUSH
17132: LD_INT 31
17134: PUSH
17135: LD_INT 32
17137: PUSH
17138: LD_INT 33
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 101
17167: PUSH
17168: LD_INT 102
17170: PUSH
17171: LD_INT 103
17173: PUSH
17174: LD_INT 106
17176: PUSH
17177: LD_INT 108
17179: PUSH
17180: LD_INT 112
17182: PUSH
17183: LD_INT 113
17185: PUSH
17186: LD_INT 114
17188: PUSH
17189: LD_INT 116
17191: PUSH
17192: LD_INT 117
17194: PUSH
17195: LD_INT 118
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
17215: GO 17846
17217: LD_INT 17
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17449
17225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17226: LD_ADDR_VAR 0 2
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: LD_INT 5
17245: PUSH
17246: LD_INT 6
17248: PUSH
17249: LD_INT 7
17251: PUSH
17252: LD_INT 8
17254: PUSH
17255: LD_INT 9
17257: PUSH
17258: LD_INT 10
17260: PUSH
17261: LD_INT 11
17263: PUSH
17264: LD_INT 12
17266: PUSH
17267: LD_INT 13
17269: PUSH
17270: LD_INT 14
17272: PUSH
17273: LD_INT 15
17275: PUSH
17276: LD_INT 16
17278: PUSH
17279: LD_INT 17
17281: PUSH
17282: LD_INT 18
17284: PUSH
17285: LD_INT 19
17287: PUSH
17288: LD_INT 20
17290: PUSH
17291: LD_INT 21
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_INT 23
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 25
17305: PUSH
17306: LD_INT 26
17308: PUSH
17309: LD_INT 27
17311: PUSH
17312: LD_INT 28
17314: PUSH
17315: LD_INT 29
17317: PUSH
17318: LD_INT 30
17320: PUSH
17321: LD_INT 31
17323: PUSH
17324: LD_INT 32
17326: PUSH
17327: LD_INT 33
17329: PUSH
17330: LD_INT 34
17332: PUSH
17333: LD_INT 36
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 101
17375: PUSH
17376: LD_INT 102
17378: PUSH
17379: LD_INT 103
17381: PUSH
17382: LD_INT 104
17384: PUSH
17385: LD_INT 105
17387: PUSH
17388: LD_INT 106
17390: PUSH
17391: LD_INT 107
17393: PUSH
17394: LD_INT 108
17396: PUSH
17397: LD_INT 109
17399: PUSH
17400: LD_INT 110
17402: PUSH
17403: LD_INT 111
17405: PUSH
17406: LD_INT 112
17408: PUSH
17409: LD_INT 113
17411: PUSH
17412: LD_INT 114
17414: PUSH
17415: LD_INT 116
17417: PUSH
17418: LD_INT 117
17420: PUSH
17421: LD_INT 118
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: ST_TO_ADDR
17447: GO 17846
17449: LD_INT 18
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17605
17457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 4
17468: PUSH
17469: LD_INT 5
17471: PUSH
17472: LD_INT 7
17474: PUSH
17475: LD_INT 11
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 15
17483: PUSH
17484: LD_INT 16
17486: PUSH
17487: LD_INT 20
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 22
17495: PUSH
17496: LD_INT 23
17498: PUSH
17499: LD_INT 25
17501: PUSH
17502: LD_INT 26
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 32
17513: PUSH
17514: LD_INT 33
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 35
17522: PUSH
17523: LD_INT 36
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 101
17551: PUSH
17552: LD_INT 102
17554: PUSH
17555: LD_INT 103
17557: PUSH
17558: LD_INT 106
17560: PUSH
17561: LD_INT 108
17563: PUSH
17564: LD_INT 112
17566: PUSH
17567: LD_INT 113
17569: PUSH
17570: LD_INT 114
17572: PUSH
17573: LD_INT 115
17575: PUSH
17576: LD_INT 116
17578: PUSH
17579: LD_INT 117
17581: PUSH
17582: LD_INT 118
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: ST_TO_ADDR
17603: GO 17846
17605: LD_INT 19
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17845
17613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: LD_INT 4
17630: PUSH
17631: LD_INT 5
17633: PUSH
17634: LD_INT 6
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: LD_INT 8
17642: PUSH
17643: LD_INT 9
17645: PUSH
17646: LD_INT 10
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 13
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: LD_INT 15
17663: PUSH
17664: LD_INT 16
17666: PUSH
17667: LD_INT 17
17669: PUSH
17670: LD_INT 18
17672: PUSH
17673: LD_INT 19
17675: PUSH
17676: LD_INT 20
17678: PUSH
17679: LD_INT 21
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: LD_INT 24
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 26
17696: PUSH
17697: LD_INT 27
17699: PUSH
17700: LD_INT 28
17702: PUSH
17703: LD_INT 29
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 31
17711: PUSH
17712: LD_INT 32
17714: PUSH
17715: LD_INT 33
17717: PUSH
17718: LD_INT 34
17720: PUSH
17721: LD_INT 35
17723: PUSH
17724: LD_INT 36
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 101
17767: PUSH
17768: LD_INT 102
17770: PUSH
17771: LD_INT 103
17773: PUSH
17774: LD_INT 104
17776: PUSH
17777: LD_INT 105
17779: PUSH
17780: LD_INT 106
17782: PUSH
17783: LD_INT 107
17785: PUSH
17786: LD_INT 108
17788: PUSH
17789: LD_INT 109
17791: PUSH
17792: LD_INT 110
17794: PUSH
17795: LD_INT 111
17797: PUSH
17798: LD_INT 112
17800: PUSH
17801: LD_INT 113
17803: PUSH
17804: LD_INT 114
17806: PUSH
17807: LD_INT 115
17809: PUSH
17810: LD_INT 116
17812: PUSH
17813: LD_INT 117
17815: PUSH
17816: LD_INT 118
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: ST_TO_ADDR
17843: GO 17846
17845: POP
// end else
17846: GO 18077
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17848: LD_ADDR_VAR 0 2
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 5
17867: PUSH
17868: LD_INT 6
17870: PUSH
17871: LD_INT 7
17873: PUSH
17874: LD_INT 8
17876: PUSH
17877: LD_INT 9
17879: PUSH
17880: LD_INT 10
17882: PUSH
17883: LD_INT 11
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: LD_INT 13
17891: PUSH
17892: LD_INT 14
17894: PUSH
17895: LD_INT 15
17897: PUSH
17898: LD_INT 16
17900: PUSH
17901: LD_INT 17
17903: PUSH
17904: LD_INT 18
17906: PUSH
17907: LD_INT 19
17909: PUSH
17910: LD_INT 20
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 24
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 26
17930: PUSH
17931: LD_INT 27
17933: PUSH
17934: LD_INT 28
17936: PUSH
17937: LD_INT 29
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 33
17951: PUSH
17952: LD_INT 34
17954: PUSH
17955: LD_INT 35
17957: PUSH
17958: LD_INT 36
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 101
18001: PUSH
18002: LD_INT 102
18004: PUSH
18005: LD_INT 103
18007: PUSH
18008: LD_INT 104
18010: PUSH
18011: LD_INT 105
18013: PUSH
18014: LD_INT 106
18016: PUSH
18017: LD_INT 107
18019: PUSH
18020: LD_INT 108
18022: PUSH
18023: LD_INT 109
18025: PUSH
18026: LD_INT 110
18028: PUSH
18029: LD_INT 111
18031: PUSH
18032: LD_INT 112
18034: PUSH
18035: LD_INT 113
18037: PUSH
18038: LD_INT 114
18040: PUSH
18041: LD_INT 115
18043: PUSH
18044: LD_INT 116
18046: PUSH
18047: LD_INT 117
18049: PUSH
18050: LD_INT 118
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: ST_TO_ADDR
// if result then
18077: LD_VAR 0 2
18081: IFFALSE 18867
// begin normal :=  ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_STRING 
18090: ST_TO_ADDR
// hardcore :=  ;
18091: LD_ADDR_VAR 0 6
18095: PUSH
18096: LD_STRING 
18098: ST_TO_ADDR
// active :=  ;
18099: LD_ADDR_VAR 0 7
18103: PUSH
18104: LD_STRING 
18106: ST_TO_ADDR
// for i = 1 to normalCounter do
18107: LD_ADDR_VAR 0 8
18111: PUSH
18112: DOUBLE
18113: LD_INT 1
18115: DEC
18116: ST_TO_ADDR
18117: LD_EXP 34
18121: PUSH
18122: FOR_TO
18123: IFFALSE 18224
// begin tmp := 0 ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_STRING 0
18132: ST_TO_ADDR
// if result [ 1 ] then
18133: LD_VAR 0 2
18137: PUSH
18138: LD_INT 1
18140: ARRAY
18141: IFFALSE 18206
// if result [ 1 ] [ 1 ] = i then
18143: LD_VAR 0 2
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PUSH
18156: LD_VAR 0 8
18160: EQUAL
18161: IFFALSE 18206
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18163: LD_ADDR_VAR 0 2
18167: PUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_VAR 0 2
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 3
18192: PPUSH
18193: CALL_OW 1
18197: ST_TO_ADDR
// tmp := 1 ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_STRING 1
18205: ST_TO_ADDR
// end ; normal := normal & tmp ;
18206: LD_ADDR_VAR 0 5
18210: PUSH
18211: LD_VAR 0 5
18215: PUSH
18216: LD_VAR 0 3
18220: STR
18221: ST_TO_ADDR
// end ;
18222: GO 18122
18224: POP
18225: POP
// for i = 1 to hardcoreCounter do
18226: LD_ADDR_VAR 0 8
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_EXP 35
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18347
// begin tmp := 0 ;
18244: LD_ADDR_VAR 0 3
18248: PUSH
18249: LD_STRING 0
18251: ST_TO_ADDR
// if result [ 2 ] then
18252: LD_VAR 0 2
18256: PUSH
18257: LD_INT 2
18259: ARRAY
18260: IFFALSE 18329
// if result [ 2 ] [ 1 ] = 100 + i then
18262: LD_VAR 0 2
18266: PUSH
18267: LD_INT 2
18269: ARRAY
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PUSH
18275: LD_INT 100
18277: PUSH
18278: LD_VAR 0 8
18282: PLUS
18283: EQUAL
18284: IFFALSE 18329
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18286: LD_ADDR_VAR 0 2
18290: PUSH
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_INT 2
18298: PPUSH
18299: LD_VAR 0 2
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 3
18315: PPUSH
18316: CALL_OW 1
18320: ST_TO_ADDR
// tmp := 1 ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_STRING 1
18328: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_VAR 0 6
18338: PUSH
18339: LD_VAR 0 3
18343: STR
18344: ST_TO_ADDR
// end ;
18345: GO 18241
18347: POP
18348: POP
// if isGameLoad then
18349: LD_VAR 0 1
18353: IFFALSE 18828
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_EXP 38
18364: PUSH
18365: LD_EXP 37
18369: PUSH
18370: LD_EXP 39
18374: PUSH
18375: LD_EXP 36
18379: PUSH
18380: LD_EXP 40
18384: PUSH
18385: LD_EXP 41
18389: PUSH
18390: LD_EXP 42
18394: PUSH
18395: LD_EXP 43
18399: PUSH
18400: LD_EXP 44
18404: PUSH
18405: LD_EXP 45
18409: PUSH
18410: LD_EXP 46
18414: PUSH
18415: LD_EXP 47
18419: PUSH
18420: LD_EXP 48
18424: PUSH
18425: LD_EXP 49
18429: PUSH
18430: LD_EXP 57
18434: PUSH
18435: LD_EXP 58
18439: PUSH
18440: LD_EXP 59
18444: PUSH
18445: LD_EXP 60
18449: PUSH
18450: LD_EXP 62
18454: PUSH
18455: LD_EXP 63
18459: PUSH
18460: LD_EXP 64
18464: PUSH
18465: LD_EXP 67
18469: PUSH
18470: LD_EXP 69
18474: PUSH
18475: LD_EXP 70
18479: PUSH
18480: LD_EXP 71
18484: PUSH
18485: LD_EXP 73
18489: PUSH
18490: LD_EXP 74
18494: PUSH
18495: LD_EXP 77
18499: PUSH
18500: LD_EXP 78
18504: PUSH
18505: LD_EXP 79
18509: PUSH
18510: LD_EXP 80
18514: PUSH
18515: LD_EXP 81
18519: PUSH
18520: LD_EXP 82
18524: PUSH
18525: LD_EXP 83
18529: PUSH
18530: LD_EXP 84
18534: PUSH
18535: LD_EXP 85
18539: PUSH
18540: LD_EXP 50
18544: PUSH
18545: LD_EXP 51
18549: PUSH
18550: LD_EXP 54
18554: PUSH
18555: LD_EXP 55
18559: PUSH
18560: LD_EXP 56
18564: PUSH
18565: LD_EXP 52
18569: PUSH
18570: LD_EXP 53
18574: PUSH
18575: LD_EXP 61
18579: PUSH
18580: LD_EXP 65
18584: PUSH
18585: LD_EXP 66
18589: PUSH
18590: LD_EXP 68
18594: PUSH
18595: LD_EXP 72
18599: PUSH
18600: LD_EXP 75
18604: PUSH
18605: LD_EXP 76
18609: PUSH
18610: LD_EXP 86
18614: PUSH
18615: LD_EXP 87
18619: PUSH
18620: LD_EXP 88
18624: PUSH
18625: LD_EXP 89
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: ST_TO_ADDR
// tmp :=  ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_STRING 
18693: ST_TO_ADDR
// for i = 1 to normalCounter do
18694: LD_ADDR_VAR 0 8
18698: PUSH
18699: DOUBLE
18700: LD_INT 1
18702: DEC
18703: ST_TO_ADDR
18704: LD_EXP 34
18708: PUSH
18709: FOR_TO
18710: IFFALSE 18746
// begin if flags [ i ] then
18712: LD_VAR 0 4
18716: PUSH
18717: LD_VAR 0 8
18721: ARRAY
18722: IFFALSE 18744
// tmp := tmp & i & ; ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 8
18738: STR
18739: PUSH
18740: LD_STRING ;
18742: STR
18743: ST_TO_ADDR
// end ;
18744: GO 18709
18746: POP
18747: POP
// for i = 1 to hardcoreCounter do
18748: LD_ADDR_VAR 0 8
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 35
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// begin if flags [ normalCounter + i ] then
18766: LD_VAR 0 4
18770: PUSH
18771: LD_EXP 34
18775: PUSH
18776: LD_VAR 0 8
18780: PLUS
18781: ARRAY
18782: IFFALSE 18808
// tmp := tmp & ( 100 + i ) & ; ;
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 100
18796: PUSH
18797: LD_VAR 0 8
18801: PLUS
18802: STR
18803: PUSH
18804: LD_STRING ;
18806: STR
18807: ST_TO_ADDR
// end ;
18808: GO 18763
18810: POP
18811: POP
// if tmp then
18812: LD_VAR 0 3
18816: IFFALSE 18828
// active := tmp ;
18818: LD_ADDR_VAR 0 7
18822: PUSH
18823: LD_VAR 0 3
18827: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18828: LD_STRING getStreamItemsFromMission("
18830: PUSH
18831: LD_VAR 0 5
18835: STR
18836: PUSH
18837: LD_STRING ","
18839: STR
18840: PUSH
18841: LD_VAR 0 6
18845: STR
18846: PUSH
18847: LD_STRING ","
18849: STR
18850: PUSH
18851: LD_VAR 0 7
18855: STR
18856: PUSH
18857: LD_STRING ")
18859: STR
18860: PPUSH
18861: CALL_OW 559
// end else
18865: GO 18874
// ToLua ( getStreamItemsFromMission("","","") ) ;
18867: LD_STRING getStreamItemsFromMission("","","")
18869: PPUSH
18870: CALL_OW 559
// end ;
18874: LD_VAR 0 2
18878: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18879: LD_EXP 33
18883: PUSH
18884: LD_EXP 38
18888: AND
18889: IFFALSE 19013
18891: GO 18893
18893: DISABLE
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
// begin enable ;
18898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 7
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: LD_INT 45
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 34
18941: PUSH
18942: LD_INT 28
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 34
18951: PUSH
18952: LD_INT 47
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19013
// for i in tmp do
18984: LD_ADDR_VAR 0 1
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19011
// begin SetLives ( i , 0 ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_INT 0
19004: PPUSH
19005: CALL_OW 234
// end ;
19009: GO 18994
19011: POP
19012: POP
// end ;
19013: PPOPN 2
19015: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19016: LD_EXP 33
19020: PUSH
19021: LD_EXP 39
19025: AND
19026: IFFALSE 19110
19028: GO 19030
19030: DISABLE
19031: LD_INT 0
19033: PPUSH
19034: PPUSH
// begin enable ;
19035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_OWVAR 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 32
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: ST_TO_ADDR
// if not tmp then
19072: LD_VAR 0 2
19076: NOT
19077: IFFALSE 19081
// exit ;
19079: GO 19110
// for i in tmp do
19081: LD_ADDR_VAR 0 1
19085: PUSH
19086: LD_VAR 0 2
19090: PUSH
19091: FOR_IN
19092: IFFALSE 19108
// begin SetLives ( i , 0 ) ;
19094: LD_VAR 0 1
19098: PPUSH
19099: LD_INT 0
19101: PPUSH
19102: CALL_OW 234
// end ;
19106: GO 19091
19108: POP
19109: POP
// end ;
19110: PPOPN 2
19112: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19113: LD_EXP 33
19117: PUSH
19118: LD_EXP 36
19122: AND
19123: IFFALSE 19216
19125: GO 19127
19127: DISABLE
19128: LD_INT 0
19130: PPUSH
// begin enable ;
19131: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19132: LD_ADDR_VAR 0 1
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_OWVAR 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 5
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 9
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: PUSH
19197: FOR_IN
19198: IFFALSE 19214
// begin SetClass ( i , 1 ) ;
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 336
// end ;
19212: GO 19197
19214: POP
19215: POP
// end ;
19216: PPOPN 1
19218: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19219: LD_EXP 33
19223: PUSH
19224: LD_EXP 37
19228: AND
19229: PUSH
19230: LD_OWVAR 65
19234: PUSH
19235: LD_INT 7
19237: LESS
19238: AND
19239: IFFALSE 19253
19241: GO 19243
19243: DISABLE
// begin enable ;
19244: ENABLE
// game_speed := 7 ;
19245: LD_ADDR_OWVAR 65
19249: PUSH
19250: LD_INT 7
19252: ST_TO_ADDR
// end ;
19253: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19254: LD_EXP 33
19258: PUSH
19259: LD_EXP 40
19263: AND
19264: IFFALSE 19466
19266: GO 19268
19268: DISABLE
19269: LD_INT 0
19271: PPUSH
19272: PPUSH
19273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_INT 81
19281: PUSH
19282: LD_OWVAR 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 3
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19466
// if tmp > 5 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 5
19326: GREATER
19327: IFFALSE 19339
// k := 5 else
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 5
19336: ST_TO_ADDR
19337: GO 19349
// k := tmp ;
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_VAR 0 3
19348: ST_TO_ADDR
// for i := 1 to k do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: DOUBLE
19355: LD_INT 1
19357: DEC
19358: ST_TO_ADDR
19359: LD_VAR 0 2
19363: PUSH
19364: FOR_TO
19365: IFFALSE 19464
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19367: LD_VAR 0 3
19371: PUSH
19372: LD_VAR 0 1
19376: ARRAY
19377: PPUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_INT 4
19385: MOD
19386: PUSH
19387: LD_INT 1
19389: PLUS
19390: PPUSH
19391: CALL_OW 259
19395: PUSH
19396: LD_INT 10
19398: LESS
19399: IFFALSE 19462
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ARRAY
19411: PPUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 4
19419: MOD
19420: PUSH
19421: LD_INT 1
19423: PLUS
19424: PPUSH
19425: LD_VAR 0 3
19429: PUSH
19430: LD_VAR 0 1
19434: ARRAY
19435: PPUSH
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 4
19443: MOD
19444: PUSH
19445: LD_INT 1
19447: PLUS
19448: PPUSH
19449: CALL_OW 259
19453: PUSH
19454: LD_INT 1
19456: PLUS
19457: PPUSH
19458: CALL_OW 237
19462: GO 19364
19464: POP
19465: POP
// end ;
19466: PPOPN 3
19468: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19469: LD_EXP 33
19473: PUSH
19474: LD_EXP 41
19478: AND
19479: IFFALSE 19499
19481: GO 19483
19483: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19484: LD_INT 4
19486: PPUSH
19487: LD_OWVAR 2
19491: PPUSH
19492: LD_INT 0
19494: PPUSH
19495: CALL_OW 324
19499: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19500: LD_EXP 33
19504: PUSH
19505: LD_EXP 70
19509: AND
19510: IFFALSE 19530
19512: GO 19514
19514: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19515: LD_INT 19
19517: PPUSH
19518: LD_OWVAR 2
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: CALL_OW 324
19530: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19531: LD_EXP 33
19535: PUSH
19536: LD_EXP 42
19540: AND
19541: IFFALSE 19643
19543: GO 19545
19545: DISABLE
19546: LD_INT 0
19548: PPUSH
19549: PPUSH
// begin enable ;
19550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 11
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 69
19604: ST_TO_ADDR
// if not tmp then
19605: LD_VAR 0 2
19609: NOT
19610: IFFALSE 19614
// exit ;
19612: GO 19643
// for i in tmp do
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: LD_VAR 0 2
19623: PUSH
19624: FOR_IN
19625: IFFALSE 19641
// begin SetLives ( i , 0 ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: LD_INT 0
19634: PPUSH
19635: CALL_OW 234
// end ;
19639: GO 19624
19641: POP
19642: POP
// end ;
19643: PPOPN 2
19645: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19646: LD_EXP 33
19650: PUSH
19651: LD_EXP 43
19655: AND
19656: IFFALSE 19676
19658: GO 19660
19660: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19661: LD_INT 32
19663: PPUSH
19664: LD_OWVAR 2
19668: PPUSH
19669: LD_INT 0
19671: PPUSH
19672: CALL_OW 324
19676: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19677: LD_EXP 33
19681: PUSH
19682: LD_EXP 44
19686: AND
19687: IFFALSE 19868
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
19696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_INT 22
19704: PUSH
19705: LD_OWVAR 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 33
19716: PUSH
19717: LD_INT 3
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: ST_TO_ADDR
// if not tmp then
19733: LD_VAR 0 2
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19868
// side := 0 ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// for i := 1 to 8 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 8
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19812
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19766: LD_OWVAR 2
19770: PUSH
19771: LD_VAR 0 1
19775: NONEQUAL
19776: PUSH
19777: LD_OWVAR 2
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 81
19791: PUSH
19792: LD_INT 2
19794: EQUAL
19795: AND
19796: IFFALSE 19810
// begin side := i ;
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_VAR 0 1
19807: ST_TO_ADDR
// break ;
19808: GO 19812
// end ;
19810: GO 19763
19812: POP
19813: POP
// if not side then
19814: LD_VAR 0 3
19818: NOT
19819: IFFALSE 19823
// exit ;
19821: GO 19868
// for i := 1 to tmp do
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: DOUBLE
19829: LD_INT 1
19831: DEC
19832: ST_TO_ADDR
19833: LD_VAR 0 2
19837: PUSH
19838: FOR_TO
19839: IFFALSE 19866
// if Prob ( 60 ) then
19841: LD_INT 60
19843: PPUSH
19844: CALL_OW 13
19848: IFFALSE 19864
// SetSide ( i , side ) ;
19850: LD_VAR 0 1
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
19864: GO 19838
19866: POP
19867: POP
// end ;
19868: PPOPN 3
19870: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19871: LD_EXP 33
19875: PUSH
19876: LD_EXP 46
19880: AND
19881: IFFALSE 20000
19883: GO 19885
19885: DISABLE
19886: LD_INT 0
19888: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19889: LD_ADDR_VAR 0 1
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_OWVAR 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 21
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: LD_INT 23
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19998
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19946: LD_VAR 0 1
19950: PPUSH
19951: CALL_OW 257
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 3
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19996
// SetClass ( un , rand ( 1 , 4 ) ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: LD_INT 1
19983: PPUSH
19984: LD_INT 4
19986: PPUSH
19987: CALL_OW 12
19991: PPUSH
19992: CALL_OW 336
19996: GO 19943
19998: POP
19999: POP
// end ;
20000: PPOPN 1
20002: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20003: LD_EXP 33
20007: PUSH
20008: LD_EXP 45
20012: AND
20013: IFFALSE 20092
20015: GO 20017
20017: DISABLE
20018: LD_INT 0
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 21
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: ST_TO_ADDR
// if not tmp then
20057: LD_VAR 0 1
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20066: LD_VAR 0 1
20070: PUSH
20071: LD_INT 1
20073: PPUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 12
20083: ARRAY
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 234
// end ;
20092: PPOPN 1
20094: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20095: LD_EXP 33
20099: PUSH
20100: LD_EXP 47
20104: AND
20105: IFFALSE 20203
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20113: LD_ADDR_VAR 0 1
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 21
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 1
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20203
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: PPUSH
20177: LD_INT 1
20179: PPUSH
20180: LD_INT 4
20182: PPUSH
20183: CALL_OW 12
20187: PPUSH
20188: LD_INT 3000
20190: PPUSH
20191: LD_INT 9000
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: CALL_OW 492
// end ;
20203: PPOPN 1
20205: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20206: LD_EXP 33
20210: PUSH
20211: LD_EXP 48
20215: AND
20216: IFFALSE 20236
20218: GO 20220
20220: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20221: LD_INT 1
20223: PPUSH
20224: LD_OWVAR 2
20228: PPUSH
20229: LD_INT 0
20231: PPUSH
20232: CALL_OW 324
20236: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20237: LD_EXP 33
20241: PUSH
20242: LD_EXP 49
20246: AND
20247: IFFALSE 20330
20249: GO 20251
20251: DISABLE
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20256: LD_ADDR_VAR 0 2
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_OWVAR 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PPUSH
20287: CALL_OW 69
20291: ST_TO_ADDR
// if not tmp then
20292: LD_VAR 0 2
20296: NOT
20297: IFFALSE 20301
// exit ;
20299: GO 20330
// for i in tmp do
20301: LD_ADDR_VAR 0 1
20305: PUSH
20306: LD_VAR 0 2
20310: PUSH
20311: FOR_IN
20312: IFFALSE 20328
// SetBLevel ( i , 10 ) ;
20314: LD_VAR 0 1
20318: PPUSH
20319: LD_INT 10
20321: PPUSH
20322: CALL_OW 241
20326: GO 20311
20328: POP
20329: POP
// end ;
20330: PPOPN 2
20332: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20333: LD_EXP 33
20337: PUSH
20338: LD_EXP 50
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 5
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20457: LD_EXP 33
20461: PUSH
20462: LD_EXP 51
20466: AND
20467: PUSH
20468: LD_OWVAR 67
20472: PUSH
20473: LD_INT 4
20475: LESS
20476: AND
20477: IFFALSE 20496
20479: GO 20481
20481: DISABLE
// begin Difficulty := Difficulty + 1 ;
20482: LD_ADDR_OWVAR 67
20486: PUSH
20487: LD_OWVAR 67
20491: PUSH
20492: LD_INT 1
20494: PLUS
20495: ST_TO_ADDR
// end ;
20496: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20497: LD_EXP 33
20501: PUSH
20502: LD_EXP 52
20506: AND
20507: IFFALSE 20610
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
// begin for i := 1 to 5 do
20515: LD_ADDR_VAR 0 1
20519: PUSH
20520: DOUBLE
20521: LD_INT 1
20523: DEC
20524: ST_TO_ADDR
20525: LD_INT 5
20527: PUSH
20528: FOR_TO
20529: IFFALSE 20608
// begin uc_nation := nation_nature ;
20531: LD_ADDR_OWVAR 21
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// uc_side := 0 ;
20539: LD_ADDR_OWVAR 20
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20547: LD_ADDR_OWVAR 29
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// hc_agressivity := 20 ;
20562: LD_ADDR_OWVAR 35
20566: PUSH
20567: LD_INT 20
20569: ST_TO_ADDR
// hc_class := class_tiger ;
20570: LD_ADDR_OWVAR 28
20574: PUSH
20575: LD_INT 14
20577: ST_TO_ADDR
// hc_gallery :=  ;
20578: LD_ADDR_OWVAR 33
20582: PUSH
20583: LD_STRING 
20585: ST_TO_ADDR
// hc_name :=  ;
20586: LD_ADDR_OWVAR 26
20590: PUSH
20591: LD_STRING 
20593: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20594: CALL_OW 44
20598: PPUSH
20599: LD_INT 0
20601: PPUSH
20602: CALL_OW 51
// end ;
20606: GO 20528
20608: POP
20609: POP
// end ;
20610: PPOPN 1
20612: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20613: LD_EXP 33
20617: PUSH
20618: LD_EXP 53
20622: AND
20623: IFFALSE 20632
20625: GO 20627
20627: DISABLE
// StreamSibBomb ;
20628: CALL 20633 0 0
20632: END
// export function StreamSibBomb ; var i , x , y ; begin
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
20638: PPUSH
// result := false ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 0
20646: ST_TO_ADDR
// for i := 1 to 16 do
20647: LD_ADDR_VAR 0 2
20651: PUSH
20652: DOUBLE
20653: LD_INT 1
20655: DEC
20656: ST_TO_ADDR
20657: LD_INT 16
20659: PUSH
20660: FOR_TO
20661: IFFALSE 20860
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_INT 10
20670: PUSH
20671: LD_INT 20
20673: PUSH
20674: LD_INT 30
20676: PUSH
20677: LD_INT 40
20679: PUSH
20680: LD_INT 50
20682: PUSH
20683: LD_INT 60
20685: PUSH
20686: LD_INT 70
20688: PUSH
20689: LD_INT 80
20691: PUSH
20692: LD_INT 90
20694: PUSH
20695: LD_INT 100
20697: PUSH
20698: LD_INT 110
20700: PUSH
20701: LD_INT 120
20703: PUSH
20704: LD_INT 130
20706: PUSH
20707: LD_INT 140
20709: PUSH
20710: LD_INT 150
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PPUSH
20733: LD_INT 15
20735: PPUSH
20736: CALL_OW 12
20740: ARRAY
20741: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20742: LD_ADDR_VAR 0 4
20746: PUSH
20747: LD_INT 10
20749: PUSH
20750: LD_INT 20
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 40
20758: PUSH
20759: LD_INT 50
20761: PUSH
20762: LD_INT 60
20764: PUSH
20765: LD_INT 70
20767: PUSH
20768: LD_INT 80
20770: PUSH
20771: LD_INT 90
20773: PUSH
20774: LD_INT 100
20776: PUSH
20777: LD_INT 110
20779: PUSH
20780: LD_INT 120
20782: PUSH
20783: LD_INT 130
20785: PUSH
20786: LD_INT 140
20788: PUSH
20789: LD_INT 150
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: PPUSH
20812: LD_INT 15
20814: PPUSH
20815: CALL_OW 12
20819: ARRAY
20820: ST_TO_ADDR
// if ValidHex ( x , y ) then
20821: LD_VAR 0 3
20825: PPUSH
20826: LD_VAR 0 4
20830: PPUSH
20831: CALL_OW 488
20835: IFFALSE 20858
// begin result := [ x , y ] ;
20837: LD_ADDR_VAR 0 1
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_VAR 0 4
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: ST_TO_ADDR
// break ;
20856: GO 20860
// end ; end ;
20858: GO 20660
20860: POP
20861: POP
// if result then
20862: LD_VAR 0 1
20866: IFFALSE 20926
// begin ToLua ( playSibBomb() ) ;
20868: LD_STRING playSibBomb()
20870: PPUSH
20871: CALL_OW 559
// wait ( 0 0$14 ) ;
20875: LD_INT 490
20877: PPUSH
20878: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20882: LD_VAR 0 1
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_VAR 0 1
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: PPUSH
20900: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20904: LD_VAR 0 1
20908: PUSH
20909: LD_INT 1
20911: ARRAY
20912: PPUSH
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 2
20920: ARRAY
20921: PPUSH
20922: CALL_OW 429
// end ; end ;
20926: LD_VAR 0 1
20930: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20931: LD_EXP 33
20935: PUSH
20936: LD_EXP 55
20940: AND
20941: IFFALSE 20953
20943: GO 20945
20945: DISABLE
// YouLost (  ) ;
20946: LD_STRING 
20948: PPUSH
20949: CALL_OW 104
20953: END
// every 0 0$1 trigger StreamModeActive and sFog do
20954: LD_EXP 33
20958: PUSH
20959: LD_EXP 54
20963: AND
20964: IFFALSE 20978
20966: GO 20968
20968: DISABLE
// FogOff ( your_side ) ;
20969: LD_OWVAR 2
20973: PPUSH
20974: CALL_OW 344
20978: END
// every 0 0$1 trigger StreamModeActive and sSun do
20979: LD_EXP 33
20983: PUSH
20984: LD_EXP 56
20988: AND
20989: IFFALSE 21017
20991: GO 20993
20993: DISABLE
// begin solar_recharge_percent := 0 ;
20994: LD_ADDR_OWVAR 79
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21002: LD_INT 10500
21004: PPUSH
21005: CALL_OW 67
// solar_recharge_percent := 100 ;
21009: LD_ADDR_OWVAR 79
21013: PUSH
21014: LD_INT 100
21016: ST_TO_ADDR
// end ;
21017: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21018: LD_EXP 33
21022: PUSH
21023: LD_EXP 57
21027: AND
21028: IFFALSE 21267
21030: GO 21032
21032: DISABLE
21033: LD_INT 0
21035: PPUSH
21036: PPUSH
21037: PPUSH
// begin tmp := [ ] ;
21038: LD_ADDR_VAR 0 3
21042: PUSH
21043: EMPTY
21044: ST_TO_ADDR
// for i := 1 to 6 do
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: DOUBLE
21051: LD_INT 1
21053: DEC
21054: ST_TO_ADDR
21055: LD_INT 6
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21164
// begin uc_nation := nation_nature ;
21061: LD_ADDR_OWVAR 21
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// uc_side := 0 ;
21069: LD_ADDR_OWVAR 20
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21077: LD_ADDR_OWVAR 29
21081: PUSH
21082: LD_INT 12
21084: PUSH
21085: LD_INT 12
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: ST_TO_ADDR
// hc_agressivity := 20 ;
21092: LD_ADDR_OWVAR 35
21096: PUSH
21097: LD_INT 20
21099: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21100: LD_ADDR_OWVAR 28
21104: PUSH
21105: LD_INT 17
21107: ST_TO_ADDR
// hc_gallery :=  ;
21108: LD_ADDR_OWVAR 33
21112: PUSH
21113: LD_STRING 
21115: ST_TO_ADDR
// hc_name :=  ;
21116: LD_ADDR_OWVAR 26
21120: PUSH
21121: LD_STRING 
21123: ST_TO_ADDR
// un := CreateHuman ;
21124: LD_ADDR_VAR 0 2
21128: PUSH
21129: CALL_OW 44
21133: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 51
// tmp := tmp ^ un ;
21146: LD_ADDR_VAR 0 3
21150: PUSH
21151: LD_VAR 0 3
21155: PUSH
21156: LD_VAR 0 2
21160: ADD
21161: ST_TO_ADDR
// end ;
21162: GO 21058
21164: POP
21165: POP
// repeat wait ( 0 0$1 ) ;
21166: LD_INT 35
21168: PPUSH
21169: CALL_OW 67
// for un in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21258
// begin if IsDead ( un ) then
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 301
21195: IFFALSE 21215
// begin tmp := tmp diff un ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 2
21211: DIFF
21212: ST_TO_ADDR
// continue ;
21213: GO 21183
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_INT 3
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 74
21251: PPUSH
21252: CALL_OW 115
// end ;
21256: GO 21183
21258: POP
21259: POP
// until not tmp ;
21260: LD_VAR 0 3
21264: NOT
21265: IFFALSE 21166
// end ;
21267: PPOPN 3
21269: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21270: LD_EXP 33
21274: PUSH
21275: LD_EXP 58
21279: AND
21280: IFFALSE 21334
21282: GO 21284
21284: DISABLE
// begin ToLua ( displayTroll(); ) ;
21285: LD_STRING displayTroll();
21287: PPUSH
21288: CALL_OW 559
// wait ( 3 3$00 ) ;
21292: LD_INT 6300
21294: PPUSH
21295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21299: LD_STRING hideTroll();
21301: PPUSH
21302: CALL_OW 559
// wait ( 1 1$00 ) ;
21306: LD_INT 2100
21308: PPUSH
21309: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21313: LD_STRING displayTroll();
21315: PPUSH
21316: CALL_OW 559
// wait ( 1 1$00 ) ;
21320: LD_INT 2100
21322: PPUSH
21323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21327: LD_STRING hideTroll();
21329: PPUSH
21330: CALL_OW 559
// end ;
21334: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21335: LD_EXP 33
21339: PUSH
21340: LD_EXP 59
21344: AND
21345: IFFALSE 21408
21347: GO 21349
21349: DISABLE
21350: LD_INT 0
21352: PPUSH
// begin p := 0 ;
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// repeat game_speed := 1 ;
21361: LD_ADDR_OWVAR 65
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21369: LD_INT 35
21371: PPUSH
21372: CALL_OW 67
// p := p + 1 ;
21376: LD_ADDR_VAR 0 1
21380: PUSH
21381: LD_VAR 0 1
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
// until p >= 60 ;
21390: LD_VAR 0 1
21394: PUSH
21395: LD_INT 60
21397: GREATEREQUAL
21398: IFFALSE 21361
// game_speed := 4 ;
21400: LD_ADDR_OWVAR 65
21404: PUSH
21405: LD_INT 4
21407: ST_TO_ADDR
// end ;
21408: PPOPN 1
21410: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21411: LD_EXP 33
21415: PUSH
21416: LD_EXP 60
21420: AND
21421: IFFALSE 21567
21423: GO 21425
21425: DISABLE
21426: LD_INT 0
21428: PPUSH
21429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21430: LD_ADDR_VAR 0 1
21434: PUSH
21435: LD_INT 22
21437: PUSH
21438: LD_OWVAR 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 30
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PPUSH
21479: CALL_OW 69
21483: ST_TO_ADDR
// if not depot then
21484: LD_VAR 0 1
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21567
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_VAR 0 1
21502: PUSH
21503: LD_INT 1
21505: PPUSH
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 12
21515: ARRAY
21516: PPUSH
21517: CALL_OW 274
21521: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_INT 2
21544: PPUSH
21545: LD_INT 0
21547: PPUSH
21548: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 0
21562: PPUSH
21563: CALL_OW 277
// end ;
21567: PPOPN 2
21569: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21570: LD_EXP 33
21574: PUSH
21575: LD_EXP 61
21579: AND
21580: IFFALSE 21677
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21588: LD_ADDR_VAR 0 1
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_OWVAR 2
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 21
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: ST_TO_ADDR
// if not tmp then
21642: LD_VAR 0 1
21646: NOT
21647: IFFALSE 21651
// exit ;
21649: GO 21677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21651: LD_VAR 0 1
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 12
21668: ARRAY
21669: PPUSH
21670: LD_INT 200
21672: PPUSH
21673: CALL_OW 234
// end ;
21677: PPOPN 1
21679: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21680: LD_EXP 33
21684: PUSH
21685: LD_EXP 62
21689: AND
21690: IFFALSE 21769
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_OWVAR 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: ST_TO_ADDR
// if not tmp then
21734: LD_VAR 0 1
21738: NOT
21739: IFFALSE 21743
// exit ;
21741: GO 21769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21743: LD_VAR 0 1
21747: PUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 12
21760: ARRAY
21761: PPUSH
21762: LD_INT 60
21764: PPUSH
21765: CALL_OW 234
// end ;
21769: PPOPN 1
21771: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21772: LD_EXP 33
21776: PUSH
21777: LD_EXP 63
21781: AND
21782: IFFALSE 21881
21784: GO 21786
21786: DISABLE
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
// begin enable ;
21791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 61
21811: PUSH
21812: EMPTY
21813: LIST
21814: PUSH
21815: LD_INT 33
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: ST_TO_ADDR
// if not tmp then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 21881
// for i in tmp do
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_VAR 0 1
21853: PUSH
21854: FOR_IN
21855: IFFALSE 21879
// if IsControledBy ( i ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 312
21866: IFFALSE 21877
// ComUnlink ( i ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 136
21877: GO 21854
21879: POP
21880: POP
// end ;
21881: PPOPN 2
21883: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21884: LD_EXP 33
21888: PUSH
21889: LD_EXP 64
21893: AND
21894: IFFALSE 22034
21896: GO 21898
21898: DISABLE
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
// begin ToLua ( displayPowell(); ) ;
21903: LD_STRING displayPowell();
21905: PPUSH
21906: CALL_OW 559
// uc_side := 0 ;
21910: LD_ADDR_OWVAR 20
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// uc_nation := 2 ;
21918: LD_ADDR_OWVAR 21
21922: PUSH
21923: LD_INT 2
21925: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21926: LD_ADDR_OWVAR 37
21930: PUSH
21931: LD_INT 14
21933: ST_TO_ADDR
// vc_engine := engine_siberite ;
21934: LD_ADDR_OWVAR 39
21938: PUSH
21939: LD_INT 3
21941: ST_TO_ADDR
// vc_control := control_apeman ;
21942: LD_ADDR_OWVAR 38
21946: PUSH
21947: LD_INT 5
21949: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21950: LD_ADDR_OWVAR 40
21954: PUSH
21955: LD_INT 29
21957: ST_TO_ADDR
// un := CreateVehicle ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: CALL_OW 45
21967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21980: LD_INT 35
21982: PPUSH
21983: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_INT 22
21994: PUSH
21995: LD_OWVAR 2
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 69
22008: PPUSH
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 74
22018: PPUSH
22019: CALL_OW 115
// until IsDead ( un ) ;
22023: LD_VAR 0 2
22027: PPUSH
22028: CALL_OW 301
22032: IFFALSE 21980
// end ;
22034: PPOPN 2
22036: END
// every 0 0$1 trigger StreamModeActive and sStu do
22037: LD_EXP 33
22041: PUSH
22042: LD_EXP 72
22046: AND
22047: IFFALSE 22063
22049: GO 22051
22051: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22052: LD_STRING displayStucuk();
22054: PPUSH
22055: CALL_OW 559
// ResetFog ;
22059: CALL_OW 335
// end ;
22063: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22064: LD_EXP 33
22068: PUSH
22069: LD_EXP 65
22073: AND
22074: IFFALSE 22215
22076: GO 22078
22078: DISABLE
22079: LD_INT 0
22081: PPUSH
22082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: LD_OWVAR 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: ST_TO_ADDR
// if not tmp then
22119: LD_VAR 0 2
22123: NOT
22124: IFFALSE 22128
// exit ;
22126: GO 22215
// un := tmp [ rand ( 1 , tmp ) ] ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 2
22137: PUSH
22138: LD_INT 1
22140: PPUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: CALL_OW 12
22150: ARRAY
22151: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_INT 0
22159: PPUSH
22160: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22164: LD_VAR 0 1
22168: PPUSH
22169: LD_OWVAR 3
22173: PUSH
22174: LD_VAR 0 1
22178: DIFF
22179: PPUSH
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL_OW 74
22189: PPUSH
22190: CALL_OW 115
// wait ( 0 0$20 ) ;
22194: LD_INT 700
22196: PPUSH
22197: CALL_OW 67
// SetSide ( un , your_side ) ;
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_OWVAR 2
22210: PPUSH
22211: CALL_OW 235
// end ;
22215: PPOPN 2
22217: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22218: LD_EXP 33
22222: PUSH
22223: LD_EXP 66
22227: AND
22228: IFFALSE 22334
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: ST_TO_ADDR
// if not depot then
22290: LD_VAR 0 1
22294: NOT
22295: IFFALSE 22299
// exit ;
22297: GO 22334
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22299: LD_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: CALL_OW 250
22312: PPUSH
22313: LD_VAR 0 1
22317: PUSH
22318: LD_INT 1
22320: ARRAY
22321: PPUSH
22322: CALL_OW 251
22326: PPUSH
22327: LD_INT 70
22329: PPUSH
22330: CALL_OW 495
// end ;
22334: PPOPN 1
22336: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22337: LD_EXP 33
22341: PUSH
22342: LD_EXP 67
22346: AND
22347: IFFALSE 22558
22349: GO 22351
22351: DISABLE
22352: LD_INT 0
22354: PPUSH
22355: PPUSH
22356: PPUSH
22357: PPUSH
22358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22359: LD_ADDR_VAR 0 5
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_OWVAR 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 21
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: ST_TO_ADDR
// if not tmp then
22395: LD_VAR 0 5
22399: NOT
22400: IFFALSE 22404
// exit ;
22402: GO 22558
// for i in tmp do
22404: LD_ADDR_VAR 0 1
22408: PUSH
22409: LD_VAR 0 5
22413: PUSH
22414: FOR_IN
22415: IFFALSE 22556
// begin d := rand ( 0 , 5 ) ;
22417: LD_ADDR_VAR 0 4
22421: PUSH
22422: LD_INT 0
22424: PPUSH
22425: LD_INT 5
22427: PPUSH
22428: CALL_OW 12
22432: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PPUSH
22448: LD_VAR 0 4
22452: PPUSH
22453: LD_INT 3
22455: PPUSH
22456: LD_INT 12
22458: PPUSH
22459: CALL_OW 12
22463: PPUSH
22464: CALL_OW 272
22468: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 251
22483: PPUSH
22484: LD_VAR 0 4
22488: PPUSH
22489: LD_INT 3
22491: PPUSH
22492: LD_INT 12
22494: PPUSH
22495: CALL_OW 12
22499: PPUSH
22500: CALL_OW 273
22504: ST_TO_ADDR
// if ValidHex ( x , y ) then
22505: LD_VAR 0 2
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: CALL_OW 488
22519: IFFALSE 22554
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: LD_VAR 0 3
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: CALL_OW 12
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 483
// end ;
22554: GO 22414
22556: POP
22557: POP
// end ;
22558: PPOPN 5
22560: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22561: LD_EXP 33
22565: PUSH
22566: LD_EXP 68
22570: AND
22571: IFFALSE 22665
22573: GO 22575
22575: DISABLE
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: ST_TO_ADDR
// if not tmp then
22627: LD_VAR 0 2
22631: NOT
22632: IFFALSE 22636
// exit ;
22634: GO 22665
// for i in tmp do
22636: LD_ADDR_VAR 0 1
22640: PUSH
22641: LD_VAR 0 2
22645: PUSH
22646: FOR_IN
22647: IFFALSE 22663
// SetFuel ( i , 0 ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 0
22656: PPUSH
22657: CALL_OW 240
22661: GO 22646
22663: POP
22664: POP
// end ;
22665: PPOPN 2
22667: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22668: LD_EXP 33
22672: PUSH
22673: LD_EXP 69
22677: AND
22678: IFFALSE 22744
22680: GO 22682
22682: DISABLE
22683: LD_INT 0
22685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22686: LD_ADDR_VAR 0 1
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_OWVAR 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 29
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: ST_TO_ADDR
// if not tmp then
22722: LD_VAR 0 1
22726: NOT
22727: IFFALSE 22731
// exit ;
22729: GO 22744
// DestroyUnit ( tmp [ 1 ] ) ;
22731: LD_VAR 0 1
22735: PUSH
22736: LD_INT 1
22738: ARRAY
22739: PPUSH
22740: CALL_OW 65
// end ;
22744: PPOPN 1
22746: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22747: LD_EXP 33
22751: PUSH
22752: LD_EXP 71
22756: AND
22757: IFFALSE 22886
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
// begin uc_side := 0 ;
22765: LD_ADDR_OWVAR 20
22769: PUSH
22770: LD_INT 0
22772: ST_TO_ADDR
// uc_nation := nation_arabian ;
22773: LD_ADDR_OWVAR 21
22777: PUSH
22778: LD_INT 2
22780: ST_TO_ADDR
// hc_gallery :=  ;
22781: LD_ADDR_OWVAR 33
22785: PUSH
22786: LD_STRING 
22788: ST_TO_ADDR
// hc_name :=  ;
22789: LD_ADDR_OWVAR 26
22793: PUSH
22794: LD_STRING 
22796: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22797: LD_INT 1
22799: PPUSH
22800: LD_INT 11
22802: PPUSH
22803: LD_INT 10
22805: PPUSH
22806: CALL_OW 380
// un := CreateHuman ;
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: CALL_OW 44
22819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_INT 1
22827: PPUSH
22828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22832: LD_INT 35
22834: PPUSH
22835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: PPUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 74
22870: PPUSH
22871: CALL_OW 115
// until IsDead ( un ) ;
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 301
22884: IFFALSE 22832
// end ;
22886: PPOPN 1
22888: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22889: LD_EXP 33
22893: PUSH
22894: LD_EXP 73
22898: AND
22899: IFFALSE 22911
22901: GO 22903
22903: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22904: LD_STRING earthquake(getX(game), 0, 32)
22906: PPUSH
22907: CALL_OW 559
22911: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22912: LD_EXP 33
22916: PUSH
22917: LD_EXP 74
22921: AND
22922: IFFALSE 23013
22924: GO 22926
22926: DISABLE
22927: LD_INT 0
22929: PPUSH
// begin enable ;
22930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22931: LD_ADDR_VAR 0 1
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_OWVAR 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 33
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: ST_TO_ADDR
// if not tmp then
22978: LD_VAR 0 1
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22987: LD_VAR 0 1
22991: PUSH
22992: LD_INT 1
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 12
23004: ARRAY
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 234
// end ;
23013: PPOPN 1
23015: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23016: LD_EXP 33
23020: PUSH
23021: LD_EXP 75
23025: AND
23026: IFFALSE 23167
23028: GO 23030
23030: DISABLE
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_OWVAR 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 25
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 3
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23167
// un := tmp [ rand ( 1 , tmp ) ] ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_VAR 0 3
23090: PUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: CALL_OW 12
23103: ARRAY
23104: ST_TO_ADDR
// if Crawls ( un ) then
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 318
23114: IFFALSE 23125
// ComWalk ( un ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_INT 9
23132: PPUSH
23133: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23137: LD_INT 28
23139: PPUSH
23140: LD_OWVAR 2
23144: PPUSH
23145: LD_INT 2
23147: PPUSH
23148: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23152: LD_INT 29
23154: PPUSH
23155: LD_OWVAR 2
23159: PPUSH
23160: LD_INT 2
23162: PPUSH
23163: CALL_OW 322
// end ;
23167: PPOPN 3
23169: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23170: LD_EXP 33
23174: PUSH
23175: LD_EXP 76
23179: AND
23180: IFFALSE 23291
23182: GO 23184
23184: DISABLE
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
23189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_OWVAR 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 25
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if not tmp then
23226: LD_VAR 0 3
23230: NOT
23231: IFFALSE 23235
// exit ;
23233: GO 23291
// un := tmp [ rand ( 1 , tmp ) ] ;
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_VAR 0 3
23244: PUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: CALL_OW 12
23257: ARRAY
23258: ST_TO_ADDR
// if Crawls ( un ) then
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL_OW 318
23268: IFFALSE 23279
// ComWalk ( un ) ;
23270: LD_VAR 0 2
23274: PPUSH
23275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_INT 8
23286: PPUSH
23287: CALL_OW 336
// end ;
23291: PPOPN 3
23293: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23294: LD_EXP 33
23298: PUSH
23299: LD_EXP 77
23303: AND
23304: IFFALSE 23448
23306: GO 23308
23308: DISABLE
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_OWVAR 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 34
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: LD_INT 51
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 34
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 69
23388: ST_TO_ADDR
// if not tmp then
23389: LD_VAR 0 2
23393: NOT
23394: IFFALSE 23398
// exit ;
23396: GO 23448
// for i in tmp do
23398: LD_ADDR_VAR 0 1
23402: PUSH
23403: LD_VAR 0 2
23407: PUSH
23408: FOR_IN
23409: IFFALSE 23446
// if GetCargo ( i , mat_artifact ) = 0 then
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 4
23418: PPUSH
23419: CALL_OW 289
23423: PUSH
23424: LD_INT 0
23426: EQUAL
23427: IFFALSE 23444
// SetCargo ( i , mat_siberit , 100 ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 100
23439: PPUSH
23440: CALL_OW 290
23444: GO 23408
23446: POP
23447: POP
// end ;
23448: PPOPN 2
23450: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23451: LD_EXP 33
23455: PUSH
23456: LD_EXP 78
23460: AND
23461: IFFALSE 23644
23463: GO 23465
23465: DISABLE
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_INT 22
23477: PUSH
23478: LD_OWVAR 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: ST_TO_ADDR
// if not tmp then
23492: LD_VAR 0 2
23496: NOT
23497: IFFALSE 23501
// exit ;
23499: GO 23644
// for i := 1 to 2 do
23501: LD_ADDR_VAR 0 1
23505: PUSH
23506: DOUBLE
23507: LD_INT 1
23509: DEC
23510: ST_TO_ADDR
23511: LD_INT 2
23513: PUSH
23514: FOR_TO
23515: IFFALSE 23642
// begin uc_side := your_side ;
23517: LD_ADDR_OWVAR 20
23521: PUSH
23522: LD_OWVAR 2
23526: ST_TO_ADDR
// uc_nation := nation_american ;
23527: LD_ADDR_OWVAR 21
23531: PUSH
23532: LD_INT 1
23534: ST_TO_ADDR
// vc_chassis := us_morphling ;
23535: LD_ADDR_OWVAR 37
23539: PUSH
23540: LD_INT 5
23542: ST_TO_ADDR
// vc_engine := engine_siberite ;
23543: LD_ADDR_OWVAR 39
23547: PUSH
23548: LD_INT 3
23550: ST_TO_ADDR
// vc_control := control_computer ;
23551: LD_ADDR_OWVAR 38
23555: PUSH
23556: LD_INT 3
23558: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23559: LD_ADDR_OWVAR 40
23563: PUSH
23564: LD_INT 10
23566: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23567: LD_VAR 0 2
23571: PUSH
23572: LD_INT 1
23574: ARRAY
23575: PPUSH
23576: CALL_OW 310
23580: NOT
23581: IFFALSE 23628
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23583: CALL_OW 45
23587: PPUSH
23588: LD_VAR 0 2
23592: PUSH
23593: LD_INT 1
23595: ARRAY
23596: PPUSH
23597: CALL_OW 250
23601: PPUSH
23602: LD_VAR 0 2
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PPUSH
23611: CALL_OW 251
23615: PPUSH
23616: LD_INT 12
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 50
23626: GO 23640
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23628: CALL_OW 45
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 51
// end ;
23640: GO 23514
23642: POP
23643: POP
// end ;
23644: PPOPN 2
23646: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23647: LD_EXP 33
23651: PUSH
23652: LD_EXP 79
23656: AND
23657: IFFALSE 23879
23659: GO 23661
23661: DISABLE
23662: LD_INT 0
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23670: LD_ADDR_VAR 0 6
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_OWVAR 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: LD_INT 23
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 69
23723: ST_TO_ADDR
// if not tmp then
23724: LD_VAR 0 6
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23879
// s1 := rand ( 1 , 4 ) ;
23733: LD_ADDR_VAR 0 2
23737: PUSH
23738: LD_INT 1
23740: PPUSH
23741: LD_INT 4
23743: PPUSH
23744: CALL_OW 12
23748: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23749: LD_ADDR_VAR 0 4
23753: PUSH
23754: LD_VAR 0 6
23758: PUSH
23759: LD_INT 1
23761: ARRAY
23762: PPUSH
23763: LD_VAR 0 2
23767: PPUSH
23768: CALL_OW 259
23772: ST_TO_ADDR
// if s1 = 1 then
23773: LD_VAR 0 2
23777: PUSH
23778: LD_INT 1
23780: EQUAL
23781: IFFALSE 23801
// s2 := rand ( 2 , 4 ) else
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_INT 2
23790: PPUSH
23791: LD_INT 4
23793: PPUSH
23794: CALL_OW 12
23798: ST_TO_ADDR
23799: GO 23809
// s2 := 1 ;
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 1
23808: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 6
23818: PUSH
23819: LD_INT 1
23821: ARRAY
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: CALL_OW 259
23832: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23833: LD_VAR 0 6
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: PPUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: LD_VAR 0 5
23851: PPUSH
23852: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23856: LD_VAR 0 6
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: CALL_OW 237
// end ;
23879: PPOPN 6
23881: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23882: LD_EXP 33
23886: PUSH
23887: LD_EXP 80
23891: AND
23892: IFFALSE 23971
23894: GO 23896
23896: DISABLE
23897: LD_INT 0
23899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23900: LD_ADDR_VAR 0 1
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_OWVAR 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 69
23935: ST_TO_ADDR
// if not tmp then
23936: LD_VAR 0 1
23940: NOT
23941: IFFALSE 23945
// exit ;
23943: GO 23971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23945: LD_VAR 0 1
23949: PUSH
23950: LD_INT 1
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 12
23962: ARRAY
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 234
// end ;
23971: PPOPN 1
23973: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23974: LD_EXP 33
23978: PUSH
23979: LD_EXP 81
23983: AND
23984: IFFALSE 24096
23986: GO 23988
23988: DISABLE
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23993: LD_ADDR_VAR 0 2
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_OWVAR 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 27
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 26
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 28
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: ST_TO_ADDR
// if not tmp then
24058: LD_VAR 0 2
24062: NOT
24063: IFFALSE 24067
// exit ;
24065: GO 24096
// for i in tmp do
24067: LD_ADDR_VAR 0 1
24071: PUSH
24072: LD_VAR 0 2
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24094
// SetLives ( i , 1 ) ;
24080: LD_VAR 0 1
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 234
24092: GO 24077
24094: POP
24095: POP
// end ;
24096: PPOPN 2
24098: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24099: LD_EXP 33
24103: PUSH
24104: LD_EXP 82
24108: AND
24109: IFFALSE 24396
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
24118: PPUSH
// begin i := rand ( 1 , 7 ) ;
24119: LD_ADDR_VAR 0 1
24123: PUSH
24124: LD_INT 1
24126: PPUSH
24127: LD_INT 7
24129: PPUSH
24130: CALL_OW 12
24134: ST_TO_ADDR
// case i of 1 :
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24158
24148: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24149: LD_STRING earthquake(getX(game), 0, 32)
24151: PPUSH
24152: CALL_OW 559
24156: GO 24396
24158: LD_INT 2
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24180
24166: POP
// begin ToLua ( displayStucuk(); ) ;
24167: LD_STRING displayStucuk();
24169: PPUSH
24170: CALL_OW 559
// ResetFog ;
24174: CALL_OW 335
// end ; 3 :
24178: GO 24396
24180: LD_INT 3
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24292
24188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 25
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24396
// un := tmp [ rand ( 1 , tmp ) ] ;
24234: LD_ADDR_VAR 0 3
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_INT 1
24246: PPUSH
24247: LD_VAR 0 2
24251: PPUSH
24252: CALL_OW 12
24256: ARRAY
24257: ST_TO_ADDR
// if Crawls ( un ) then
24258: LD_VAR 0 3
24262: PPUSH
24263: CALL_OW 318
24267: IFFALSE 24278
// ComWalk ( un ) ;
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24278: LD_VAR 0 3
24282: PPUSH
24283: LD_INT 8
24285: PPUSH
24286: CALL_OW 336
// end ; 4 :
24290: GO 24396
24292: LD_INT 4
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24374
24300: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24301: LD_ADDR_VAR 0 2
24305: PUSH
24306: LD_INT 22
24308: PUSH
24309: LD_OWVAR 2
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: LD_INT 29
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PPUSH
24332: CALL_OW 69
24336: ST_TO_ADDR
// if not tmp then
24337: LD_VAR 0 2
24341: NOT
24342: IFFALSE 24346
// exit ;
24344: GO 24396
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: PPUSH
24355: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24359: LD_VAR 0 2
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: CALL_OW 65
// end ; 5 .. 7 :
24372: GO 24396
24374: LD_INT 5
24376: DOUBLE
24377: GREATEREQUAL
24378: IFFALSE 24386
24380: LD_INT 7
24382: DOUBLE
24383: LESSEQUAL
24384: IFTRUE 24388
24386: GO 24395
24388: POP
// StreamSibBomb ; end ;
24389: CALL 20633 0 0
24393: GO 24396
24395: POP
// end ;
24396: PPOPN 3
24398: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24399: LD_EXP 33
24403: PUSH
24404: LD_EXP 83
24408: AND
24409: IFFALSE 24565
24411: GO 24413
24413: DISABLE
24414: LD_INT 0
24416: PPUSH
24417: PPUSH
24418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24419: LD_ADDR_VAR 0 2
24423: PUSH
24424: LD_INT 81
24426: PUSH
24427: LD_OWVAR 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 21
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24565
// p := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24490: LD_INT 35
24492: PPUSH
24493: CALL_OW 67
// p := p + 1 ;
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_INT 1
24509: PLUS
24510: ST_TO_ADDR
// for i in tmp do
24511: LD_ADDR_VAR 0 1
24515: PUSH
24516: LD_VAR 0 2
24520: PUSH
24521: FOR_IN
24522: IFFALSE 24553
// if GetLives ( i ) < 1000 then
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 256
24533: PUSH
24534: LD_INT 1000
24536: LESS
24537: IFFALSE 24551
// SetLives ( i , 1000 ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_INT 1000
24546: PPUSH
24547: CALL_OW 234
24551: GO 24521
24553: POP
24554: POP
// until p > 20 ;
24555: LD_VAR 0 3
24559: PUSH
24560: LD_INT 20
24562: GREATER
24563: IFFALSE 24490
// end ;
24565: PPOPN 3
24567: END
// every 0 0$1 trigger StreamModeActive and sTime do
24568: LD_EXP 33
24572: PUSH
24573: LD_EXP 84
24577: AND
24578: IFFALSE 24613
24580: GO 24582
24582: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24583: LD_INT 28
24585: PPUSH
24586: LD_OWVAR 2
24590: PPUSH
24591: LD_INT 2
24593: PPUSH
24594: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24598: LD_INT 30
24600: PPUSH
24601: LD_OWVAR 2
24605: PPUSH
24606: LD_INT 2
24608: PPUSH
24609: CALL_OW 322
// end ;
24613: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24614: LD_EXP 33
24618: PUSH
24619: LD_EXP 85
24623: AND
24624: IFFALSE 24745
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_OWVAR 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: ST_TO_ADDR
// if not tmp then
24687: LD_VAR 0 2
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 24745
// for i in tmp do
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24743
// begin if Crawls ( i ) then
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 318
24718: IFFALSE 24729
// ComWalk ( i ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 138
// SetClass ( i , 2 ) ;
24729: LD_VAR 0 1
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL_OW 336
// end ;
24741: GO 24706
24743: POP
24744: POP
// end ;
24745: PPOPN 2
24747: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24748: LD_EXP 33
24752: PUSH
24753: LD_EXP 86
24757: AND
24758: IFFALSE 25046
24760: GO 24762
24762: DISABLE
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24768: LD_OWVAR 2
24772: PPUSH
24773: LD_INT 9
24775: PPUSH
24776: LD_INT 1
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24786: LD_INT 9
24788: PPUSH
24789: LD_OWVAR 2
24793: PPUSH
24794: CALL_OW 343
// uc_side := 9 ;
24798: LD_ADDR_OWVAR 20
24802: PUSH
24803: LD_INT 9
24805: ST_TO_ADDR
// uc_nation := 2 ;
24806: LD_ADDR_OWVAR 21
24810: PUSH
24811: LD_INT 2
24813: ST_TO_ADDR
// hc_name := Dark Warrior ;
24814: LD_ADDR_OWVAR 26
24818: PUSH
24819: LD_STRING Dark Warrior
24821: ST_TO_ADDR
// hc_gallery :=  ;
24822: LD_ADDR_OWVAR 33
24826: PUSH
24827: LD_STRING 
24829: ST_TO_ADDR
// hc_noskilllimit := true ;
24830: LD_ADDR_OWVAR 76
24834: PUSH
24835: LD_INT 1
24837: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24838: LD_ADDR_OWVAR 31
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 30
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
// un := CreateHuman ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: CALL_OW 44
24870: ST_TO_ADDR
// hc_noskilllimit := false ;
24871: LD_ADDR_OWVAR 76
24875: PUSH
24876: LD_INT 0
24878: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24879: LD_VAR 0 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: CALL_OW 51
// ToLua ( playRanger() ) ;
24891: LD_STRING playRanger()
24893: PPUSH
24894: CALL_OW 559
// p := 0 ;
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 0
24905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24906: LD_INT 35
24908: PPUSH
24909: CALL_OW 67
// p := p + 1 ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_VAR 0 2
24922: PUSH
24923: LD_INT 1
24925: PLUS
24926: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24927: LD_VAR 0 3
24931: PPUSH
24932: CALL_OW 256
24936: PUSH
24937: LD_INT 1000
24939: LESS
24940: IFFALSE 24954
// SetLives ( un , 1000 ) ;
24942: LD_VAR 0 3
24946: PPUSH
24947: LD_INT 1000
24949: PPUSH
24950: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24954: LD_VAR 0 3
24958: PPUSH
24959: LD_INT 81
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 91
24973: PUSH
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL_OW 74
25005: PPUSH
25006: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25010: LD_VAR 0 2
25014: PUSH
25015: LD_INT 80
25017: GREATER
25018: PUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 301
25028: OR
25029: IFFALSE 24906
// if un then
25031: LD_VAR 0 3
25035: IFFALSE 25046
// RemoveUnit ( un ) ;
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 64
// end ;
25046: PPOPN 3
25048: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25049: LD_EXP 87
25053: IFFALSE 25169
25055: GO 25057
25057: DISABLE
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25063: LD_ADDR_VAR 0 2
25067: PUSH
25068: LD_INT 81
25070: PUSH
25071: LD_OWVAR 2
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 21
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PPUSH
25094: CALL_OW 69
25098: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25099: LD_STRING playComputer()
25101: PPUSH
25102: CALL_OW 559
// if not tmp then
25106: LD_VAR 0 2
25110: NOT
25111: IFFALSE 25115
// exit ;
25113: GO 25169
// for i in tmp do
25115: LD_ADDR_VAR 0 1
25119: PUSH
25120: LD_VAR 0 2
25124: PUSH
25125: FOR_IN
25126: IFFALSE 25167
// for j := 1 to 4 do
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_INT 4
25140: PUSH
25141: FOR_TO
25142: IFFALSE 25163
// SetSkill ( i , j , 10 ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_INT 10
25156: PPUSH
25157: CALL_OW 237
25161: GO 25141
25163: POP
25164: POP
25165: GO 25125
25167: POP
25168: POP
// end ;
25169: PPOPN 3
25171: END
// every 0 0$1 trigger s30 do var i , tmp ;
25172: LD_EXP 88
25176: IFFALSE 25245
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
25184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25185: LD_ADDR_VAR 0 2
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_OWVAR 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 2
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25245
// for i in tmp do
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: FOR_IN
25227: IFFALSE 25243
// SetLives ( i , 300 ) ;
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_INT 300
25236: PPUSH
25237: CALL_OW 234
25241: GO 25226
25243: POP
25244: POP
// end ;
25245: PPOPN 2
25247: END
// every 0 0$1 trigger s60 do var i , tmp ;
25248: LD_EXP 89
25252: IFFALSE 25321
25254: GO 25256
25256: DISABLE
25257: LD_INT 0
25259: PPUSH
25260: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: LD_INT 22
25268: PUSH
25269: LD_OWVAR 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 69
25282: ST_TO_ADDR
// if not tmp then
25283: LD_VAR 0 2
25287: NOT
25288: IFFALSE 25292
// exit ;
25290: GO 25321
// for i in tmp do
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_VAR 0 2
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25319
// SetLives ( i , 600 ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 600
25312: PPUSH
25313: CALL_OW 234
25317: GO 25302
25319: POP
25320: POP
// end ;
25321: PPOPN 2
25323: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25324: LD_INT 0
25326: PPUSH
// case cmd of 301 :
25327: LD_VAR 0 1
25331: PUSH
25332: LD_INT 301
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25372
25340: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25341: LD_VAR 0 6
25345: PPUSH
25346: LD_VAR 0 7
25350: PPUSH
25351: LD_VAR 0 8
25355: PPUSH
25356: LD_VAR 0 4
25360: PPUSH
25361: LD_VAR 0 5
25365: PPUSH
25366: CALL 26581 0 5
25370: GO 25493
25372: LD_INT 302
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25417
25380: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25381: LD_VAR 0 6
25385: PPUSH
25386: LD_VAR 0 7
25390: PPUSH
25391: LD_VAR 0 8
25395: PPUSH
25396: LD_VAR 0 9
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: LD_VAR 0 5
25410: PPUSH
25411: CALL 26672 0 6
25415: GO 25493
25417: LD_INT 303
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25462
25425: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25426: LD_VAR 0 6
25430: PPUSH
25431: LD_VAR 0 7
25435: PPUSH
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_VAR 0 9
25445: PPUSH
25446: LD_VAR 0 4
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: CALL 25498 0 6
25460: GO 25493
25462: LD_INT 304
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25492
25470: POP
// hHackTeleport ( unit , x , y ) ; end ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_VAR 0 5
25485: PPUSH
25486: CALL 27265 0 3
25490: GO 25493
25492: POP
// end ;
25493: LD_VAR 0 12
25497: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25498: LD_INT 0
25500: PPUSH
25501: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25502: LD_VAR 0 1
25506: PUSH
25507: LD_INT 1
25509: LESS
25510: PUSH
25511: LD_VAR 0 1
25515: PUSH
25516: LD_INT 3
25518: GREATER
25519: OR
25520: PUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: LD_VAR 0 6
25530: PPUSH
25531: CALL_OW 428
25535: OR
25536: IFFALSE 25540
// exit ;
25538: GO 26268
// uc_side := your_side ;
25540: LD_ADDR_OWVAR 20
25544: PUSH
25545: LD_OWVAR 2
25549: ST_TO_ADDR
// uc_nation := nation ;
25550: LD_ADDR_OWVAR 21
25554: PUSH
25555: LD_VAR 0 1
25559: ST_TO_ADDR
// bc_level = 1 ;
25560: LD_ADDR_OWVAR 43
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// case btype of 1 :
25568: LD_VAR 0 2
25572: PUSH
25573: LD_INT 1
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25592
25581: POP
// bc_type := b_depot ; 2 :
25582: LD_ADDR_OWVAR 42
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
25590: GO 26212
25592: LD_INT 2
25594: DOUBLE
25595: EQUAL
25596: IFTRUE 25600
25598: GO 25611
25600: POP
// bc_type := b_warehouse ; 3 :
25601: LD_ADDR_OWVAR 42
25605: PUSH
25606: LD_INT 1
25608: ST_TO_ADDR
25609: GO 26212
25611: LD_INT 3
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25630
25619: POP
// bc_type := b_lab ; 4 .. 9 :
25620: LD_ADDR_OWVAR 42
25624: PUSH
25625: LD_INT 6
25627: ST_TO_ADDR
25628: GO 26212
25630: LD_INT 4
25632: DOUBLE
25633: GREATEREQUAL
25634: IFFALSE 25642
25636: LD_INT 9
25638: DOUBLE
25639: LESSEQUAL
25640: IFTRUE 25644
25642: GO 25704
25644: POP
// begin bc_type := b_lab_half ;
25645: LD_ADDR_OWVAR 42
25649: PUSH
25650: LD_INT 7
25652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25653: LD_ADDR_OWVAR 44
25657: PUSH
25658: LD_INT 10
25660: PUSH
25661: LD_INT 11
25663: PUSH
25664: LD_INT 12
25666: PUSH
25667: LD_INT 15
25669: PUSH
25670: LD_INT 14
25672: PUSH
25673: LD_INT 13
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: PUSH
25684: LD_VAR 0 2
25688: PUSH
25689: LD_INT 3
25691: MINUS
25692: ARRAY
25693: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25694: LD_ADDR_OWVAR 45
25698: PUSH
25699: LD_INT 9
25701: ST_TO_ADDR
// end ; 10 .. 13 :
25702: GO 26212
25704: LD_INT 10
25706: DOUBLE
25707: GREATEREQUAL
25708: IFFALSE 25716
25710: LD_INT 13
25712: DOUBLE
25713: LESSEQUAL
25714: IFTRUE 25718
25716: GO 25795
25718: POP
// begin bc_type := b_lab_full ;
25719: LD_ADDR_OWVAR 42
25723: PUSH
25724: LD_INT 8
25726: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25727: LD_ADDR_OWVAR 44
25731: PUSH
25732: LD_INT 10
25734: PUSH
25735: LD_INT 12
25737: PUSH
25738: LD_INT 14
25740: PUSH
25741: LD_INT 13
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: PUSH
25750: LD_VAR 0 2
25754: PUSH
25755: LD_INT 9
25757: MINUS
25758: ARRAY
25759: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25760: LD_ADDR_OWVAR 45
25764: PUSH
25765: LD_INT 11
25767: PUSH
25768: LD_INT 15
25770: PUSH
25771: LD_INT 12
25773: PUSH
25774: LD_INT 15
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: PUSH
25783: LD_VAR 0 2
25787: PUSH
25788: LD_INT 9
25790: MINUS
25791: ARRAY
25792: ST_TO_ADDR
// end ; 14 :
25793: GO 26212
25795: LD_INT 14
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25814
25803: POP
// bc_type := b_workshop ; 15 :
25804: LD_ADDR_OWVAR 42
25808: PUSH
25809: LD_INT 2
25811: ST_TO_ADDR
25812: GO 26212
25814: LD_INT 15
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25822
25820: GO 25833
25822: POP
// bc_type := b_factory ; 16 :
25823: LD_ADDR_OWVAR 42
25827: PUSH
25828: LD_INT 3
25830: ST_TO_ADDR
25831: GO 26212
25833: LD_INT 16
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25852
25841: POP
// bc_type := b_ext_gun ; 17 :
25842: LD_ADDR_OWVAR 42
25846: PUSH
25847: LD_INT 17
25849: ST_TO_ADDR
25850: GO 26212
25852: LD_INT 17
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 25888
25860: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25861: LD_ADDR_OWVAR 42
25865: PUSH
25866: LD_INT 19
25868: PUSH
25869: LD_INT 23
25871: PUSH
25872: LD_INT 19
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: PUSH
25880: LD_VAR 0 1
25884: ARRAY
25885: ST_TO_ADDR
25886: GO 26212
25888: LD_INT 18
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25907
25896: POP
// bc_type := b_ext_radar ; 19 :
25897: LD_ADDR_OWVAR 42
25901: PUSH
25902: LD_INT 20
25904: ST_TO_ADDR
25905: GO 26212
25907: LD_INT 19
25909: DOUBLE
25910: EQUAL
25911: IFTRUE 25915
25913: GO 25926
25915: POP
// bc_type := b_ext_radio ; 20 :
25916: LD_ADDR_OWVAR 42
25920: PUSH
25921: LD_INT 22
25923: ST_TO_ADDR
25924: GO 26212
25926: LD_INT 20
25928: DOUBLE
25929: EQUAL
25930: IFTRUE 25934
25932: GO 25945
25934: POP
// bc_type := b_ext_siberium ; 21 :
25935: LD_ADDR_OWVAR 42
25939: PUSH
25940: LD_INT 21
25942: ST_TO_ADDR
25943: GO 26212
25945: LD_INT 21
25947: DOUBLE
25948: EQUAL
25949: IFTRUE 25953
25951: GO 25964
25953: POP
// bc_type := b_ext_computer ; 22 :
25954: LD_ADDR_OWVAR 42
25958: PUSH
25959: LD_INT 24
25961: ST_TO_ADDR
25962: GO 26212
25964: LD_INT 22
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 25983
25972: POP
// bc_type := b_ext_track ; 23 :
25973: LD_ADDR_OWVAR 42
25977: PUSH
25978: LD_INT 16
25980: ST_TO_ADDR
25981: GO 26212
25983: LD_INT 23
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26002
25991: POP
// bc_type := b_ext_laser ; 24 :
25992: LD_ADDR_OWVAR 42
25996: PUSH
25997: LD_INT 25
25999: ST_TO_ADDR
26000: GO 26212
26002: LD_INT 24
26004: DOUBLE
26005: EQUAL
26006: IFTRUE 26010
26008: GO 26021
26010: POP
// bc_type := b_control_tower ; 25 :
26011: LD_ADDR_OWVAR 42
26015: PUSH
26016: LD_INT 36
26018: ST_TO_ADDR
26019: GO 26212
26021: LD_INT 25
26023: DOUBLE
26024: EQUAL
26025: IFTRUE 26029
26027: GO 26040
26029: POP
// bc_type := b_breastwork ; 26 :
26030: LD_ADDR_OWVAR 42
26034: PUSH
26035: LD_INT 31
26037: ST_TO_ADDR
26038: GO 26212
26040: LD_INT 26
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26059
26048: POP
// bc_type := b_bunker ; 27 :
26049: LD_ADDR_OWVAR 42
26053: PUSH
26054: LD_INT 32
26056: ST_TO_ADDR
26057: GO 26212
26059: LD_INT 27
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26078
26067: POP
// bc_type := b_turret ; 28 :
26068: LD_ADDR_OWVAR 42
26072: PUSH
26073: LD_INT 33
26075: ST_TO_ADDR
26076: GO 26212
26078: LD_INT 28
26080: DOUBLE
26081: EQUAL
26082: IFTRUE 26086
26084: GO 26097
26086: POP
// bc_type := b_armoury ; 29 :
26087: LD_ADDR_OWVAR 42
26091: PUSH
26092: LD_INT 4
26094: ST_TO_ADDR
26095: GO 26212
26097: LD_INT 29
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26116
26105: POP
// bc_type := b_barracks ; 30 :
26106: LD_ADDR_OWVAR 42
26110: PUSH
26111: LD_INT 5
26113: ST_TO_ADDR
26114: GO 26212
26116: LD_INT 30
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26135
26124: POP
// bc_type := b_solar_power ; 31 :
26125: LD_ADDR_OWVAR 42
26129: PUSH
26130: LD_INT 27
26132: ST_TO_ADDR
26133: GO 26212
26135: LD_INT 31
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26154
26143: POP
// bc_type := b_oil_power ; 32 :
26144: LD_ADDR_OWVAR 42
26148: PUSH
26149: LD_INT 26
26151: ST_TO_ADDR
26152: GO 26212
26154: LD_INT 32
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26173
26162: POP
// bc_type := b_siberite_power ; 33 :
26163: LD_ADDR_OWVAR 42
26167: PUSH
26168: LD_INT 28
26170: ST_TO_ADDR
26171: GO 26212
26173: LD_INT 33
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26192
26181: POP
// bc_type := b_oil_mine ; 34 :
26182: LD_ADDR_OWVAR 42
26186: PUSH
26187: LD_INT 29
26189: ST_TO_ADDR
26190: GO 26212
26192: LD_INT 34
26194: DOUBLE
26195: EQUAL
26196: IFTRUE 26200
26198: GO 26211
26200: POP
// bc_type := b_siberite_mine ; end ;
26201: LD_ADDR_OWVAR 42
26205: PUSH
26206: LD_INT 30
26208: ST_TO_ADDR
26209: GO 26212
26211: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26212: LD_ADDR_VAR 0 8
26216: PUSH
26217: LD_VAR 0 5
26221: PPUSH
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_VAR 0 3
26231: PPUSH
26232: CALL_OW 47
26236: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26237: LD_OWVAR 42
26241: PUSH
26242: LD_INT 32
26244: PUSH
26245: LD_INT 33
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26268
// PlaceWeaponTurret ( b , weapon ) ;
26254: LD_VAR 0 8
26258: PPUSH
26259: LD_VAR 0 4
26263: PPUSH
26264: CALL_OW 431
// end ;
26268: LD_VAR 0 7
26272: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26279: LD_ADDR_VAR 0 4
26283: PUSH
26284: LD_INT 22
26286: PUSH
26287: LD_OWVAR 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 30
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 30
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PPUSH
26328: CALL_OW 69
26332: ST_TO_ADDR
// if not tmp then
26333: LD_VAR 0 4
26337: NOT
26338: IFFALSE 26342
// exit ;
26340: GO 26401
// for i in tmp do
26342: LD_ADDR_VAR 0 2
26346: PUSH
26347: LD_VAR 0 4
26351: PUSH
26352: FOR_IN
26353: IFFALSE 26399
// for j = 1 to 3 do
26355: LD_ADDR_VAR 0 3
26359: PUSH
26360: DOUBLE
26361: LD_INT 1
26363: DEC
26364: ST_TO_ADDR
26365: LD_INT 3
26367: PUSH
26368: FOR_TO
26369: IFFALSE 26395
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26371: LD_VAR 0 2
26375: PPUSH
26376: CALL_OW 274
26380: PPUSH
26381: LD_VAR 0 3
26385: PPUSH
26386: LD_INT 99999
26388: PPUSH
26389: CALL_OW 277
26393: GO 26368
26395: POP
26396: POP
26397: GO 26352
26399: POP
26400: POP
// end ;
26401: LD_VAR 0 1
26405: RET
// export function hHackSetLevel10 ; var i , j ; begin
26406: LD_INT 0
26408: PPUSH
26409: PPUSH
26410: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26411: LD_ADDR_VAR 0 2
26415: PUSH
26416: LD_INT 21
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26484
// if IsSelected ( i ) then
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 306
26443: IFFALSE 26482
// begin for j := 1 to 4 do
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_INT 4
26457: PUSH
26458: FOR_TO
26459: IFFALSE 26480
// SetSkill ( i , j , 10 ) ;
26461: LD_VAR 0 2
26465: PPUSH
26466: LD_VAR 0 3
26470: PPUSH
26471: LD_INT 10
26473: PPUSH
26474: CALL_OW 237
26478: GO 26458
26480: POP
26481: POP
// end ;
26482: GO 26431
26484: POP
26485: POP
// end ;
26486: LD_VAR 0 1
26490: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
26495: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_INT 22
26503: PUSH
26504: LD_OWVAR 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 21
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PPUSH
26527: CALL_OW 69
26531: PUSH
26532: FOR_IN
26533: IFFALSE 26574
// begin for j := 1 to 4 do
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: DOUBLE
26541: LD_INT 1
26543: DEC
26544: ST_TO_ADDR
26545: LD_INT 4
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26570
// SetSkill ( i , j , 10 ) ;
26551: LD_VAR 0 2
26555: PPUSH
26556: LD_VAR 0 3
26560: PPUSH
26561: LD_INT 10
26563: PPUSH
26564: CALL_OW 237
26568: GO 26548
26570: POP
26571: POP
// end ;
26572: GO 26532
26574: POP
26575: POP
// end ;
26576: LD_VAR 0 1
26580: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26581: LD_INT 0
26583: PPUSH
// uc_side := your_side ;
26584: LD_ADDR_OWVAR 20
26588: PUSH
26589: LD_OWVAR 2
26593: ST_TO_ADDR
// uc_nation := nation ;
26594: LD_ADDR_OWVAR 21
26598: PUSH
26599: LD_VAR 0 1
26603: ST_TO_ADDR
// InitHc ;
26604: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26608: LD_INT 0
26610: PPUSH
26611: LD_VAR 0 2
26615: PPUSH
26616: LD_VAR 0 3
26620: PPUSH
26621: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26625: LD_VAR 0 4
26629: PPUSH
26630: LD_VAR 0 5
26634: PPUSH
26635: CALL_OW 428
26639: PUSH
26640: LD_INT 0
26642: EQUAL
26643: IFFALSE 26667
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26645: CALL_OW 44
26649: PPUSH
26650: LD_VAR 0 4
26654: PPUSH
26655: LD_VAR 0 5
26659: PPUSH
26660: LD_INT 1
26662: PPUSH
26663: CALL_OW 48
// end ;
26667: LD_VAR 0 6
26671: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26672: LD_INT 0
26674: PPUSH
26675: PPUSH
// uc_side := your_side ;
26676: LD_ADDR_OWVAR 20
26680: PUSH
26681: LD_OWVAR 2
26685: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26686: LD_VAR 0 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 5
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: IN
26713: IFFALSE 26725
// uc_nation := nation_american else
26715: LD_ADDR_OWVAR 21
26719: PUSH
26720: LD_INT 1
26722: ST_TO_ADDR
26723: GO 26768
// if chassis in [ 11 , 12 , 13 , 14 ] then
26725: LD_VAR 0 1
26729: PUSH
26730: LD_INT 11
26732: PUSH
26733: LD_INT 12
26735: PUSH
26736: LD_INT 13
26738: PUSH
26739: LD_INT 14
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: IN
26748: IFFALSE 26760
// uc_nation := nation_arabian else
26750: LD_ADDR_OWVAR 21
26754: PUSH
26755: LD_INT 2
26757: ST_TO_ADDR
26758: GO 26768
// uc_nation := nation_russian ;
26760: LD_ADDR_OWVAR 21
26764: PUSH
26765: LD_INT 3
26767: ST_TO_ADDR
// vc_chassis := chassis ;
26768: LD_ADDR_OWVAR 37
26772: PUSH
26773: LD_VAR 0 1
26777: ST_TO_ADDR
// vc_engine := engine ;
26778: LD_ADDR_OWVAR 39
26782: PUSH
26783: LD_VAR 0 2
26787: ST_TO_ADDR
// vc_control := control ;
26788: LD_ADDR_OWVAR 38
26792: PUSH
26793: LD_VAR 0 3
26797: ST_TO_ADDR
// vc_weapon := weapon ;
26798: LD_ADDR_OWVAR 40
26802: PUSH
26803: LD_VAR 0 4
26807: ST_TO_ADDR
// un := CreateVehicle ;
26808: LD_ADDR_VAR 0 8
26812: PUSH
26813: CALL_OW 45
26817: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26818: LD_VAR 0 8
26822: PPUSH
26823: LD_INT 0
26825: PPUSH
26826: LD_INT 5
26828: PPUSH
26829: CALL_OW 12
26833: PPUSH
26834: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26838: LD_VAR 0 8
26842: PPUSH
26843: LD_VAR 0 5
26847: PPUSH
26848: LD_VAR 0 6
26852: PPUSH
26853: LD_INT 1
26855: PPUSH
26856: CALL_OW 48
// end ;
26860: LD_VAR 0 7
26864: RET
// export hInvincible ; every 1 do
26865: GO 26867
26867: DISABLE
// hInvincible := [ ] ;
26868: LD_ADDR_EXP 90
26872: PUSH
26873: EMPTY
26874: ST_TO_ADDR
26875: END
// every 10 do var i ;
26876: GO 26878
26878: DISABLE
26879: LD_INT 0
26881: PPUSH
// begin enable ;
26882: ENABLE
// if not hInvincible then
26883: LD_EXP 90
26887: NOT
26888: IFFALSE 26892
// exit ;
26890: GO 26936
// for i in hInvincible do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_EXP 90
26901: PUSH
26902: FOR_IN
26903: IFFALSE 26934
// if GetLives ( i ) < 1000 then
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 256
26914: PUSH
26915: LD_INT 1000
26917: LESS
26918: IFFALSE 26932
// SetLives ( i , 1000 ) ;
26920: LD_VAR 0 1
26924: PPUSH
26925: LD_INT 1000
26927: PPUSH
26928: CALL_OW 234
26932: GO 26902
26934: POP
26935: POP
// end ;
26936: PPOPN 1
26938: END
// export function hHackInvincible ; var i ; begin
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26943: LD_ADDR_VAR 0 2
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: LD_INT 21
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 21
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: PPUSH
26976: CALL_OW 69
26980: PUSH
26981: FOR_IN
26982: IFFALSE 27043
// if IsSelected ( i ) then
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL_OW 306
26993: IFFALSE 27041
// begin if i in hInvincible then
26995: LD_VAR 0 2
26999: PUSH
27000: LD_EXP 90
27004: IN
27005: IFFALSE 27025
// hInvincible := hInvincible diff i else
27007: LD_ADDR_EXP 90
27011: PUSH
27012: LD_EXP 90
27016: PUSH
27017: LD_VAR 0 2
27021: DIFF
27022: ST_TO_ADDR
27023: GO 27041
// hInvincible := hInvincible union i ;
27025: LD_ADDR_EXP 90
27029: PUSH
27030: LD_EXP 90
27034: PUSH
27035: LD_VAR 0 2
27039: UNION
27040: ST_TO_ADDR
// end ;
27041: GO 26981
27043: POP
27044: POP
// end ;
27045: LD_VAR 0 1
27049: RET
// export function hHackInvisible ; var i , j ; begin
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
27054: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27055: LD_ADDR_VAR 0 2
27059: PUSH
27060: LD_INT 21
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL_OW 69
27074: PUSH
27075: FOR_IN
27076: IFFALSE 27100
// if IsSelected ( i ) then
27078: LD_VAR 0 2
27082: PPUSH
27083: CALL_OW 306
27087: IFFALSE 27098
// ComForceInvisible ( i ) ;
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 496
27098: GO 27075
27100: POP
27101: POP
// end ;
27102: LD_VAR 0 1
27106: RET
// export function hHackChangeYourSide ; begin
27107: LD_INT 0
27109: PPUSH
// if your_side = 8 then
27110: LD_OWVAR 2
27114: PUSH
27115: LD_INT 8
27117: EQUAL
27118: IFFALSE 27130
// your_side := 0 else
27120: LD_ADDR_OWVAR 2
27124: PUSH
27125: LD_INT 0
27127: ST_TO_ADDR
27128: GO 27144
// your_side := your_side + 1 ;
27130: LD_ADDR_OWVAR 2
27134: PUSH
27135: LD_OWVAR 2
27139: PUSH
27140: LD_INT 1
27142: PLUS
27143: ST_TO_ADDR
// end ;
27144: LD_VAR 0 1
27148: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27149: LD_INT 0
27151: PPUSH
27152: PPUSH
27153: PPUSH
// for i in all_units do
27154: LD_ADDR_VAR 0 2
27158: PUSH
27159: LD_OWVAR 3
27163: PUSH
27164: FOR_IN
27165: IFFALSE 27243
// if IsSelected ( i ) then
27167: LD_VAR 0 2
27171: PPUSH
27172: CALL_OW 306
27176: IFFALSE 27241
// begin j := GetSide ( i ) ;
27178: LD_ADDR_VAR 0 3
27182: PUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 255
27192: ST_TO_ADDR
// if j = 8 then
27193: LD_VAR 0 3
27197: PUSH
27198: LD_INT 8
27200: EQUAL
27201: IFFALSE 27213
// j := 0 else
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_INT 0
27210: ST_TO_ADDR
27211: GO 27227
// j := j + 1 ;
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_VAR 0 3
27222: PUSH
27223: LD_INT 1
27225: PLUS
27226: ST_TO_ADDR
// SetSide ( i , j ) ;
27227: LD_VAR 0 2
27231: PPUSH
27232: LD_VAR 0 3
27236: PPUSH
27237: CALL_OW 235
// end ;
27241: GO 27164
27243: POP
27244: POP
// end ;
27245: LD_VAR 0 1
27249: RET
// export function hHackFog ; begin
27250: LD_INT 0
27252: PPUSH
// FogOff ( true ) ;
27253: LD_INT 1
27255: PPUSH
27256: CALL_OW 344
// end ;
27260: LD_VAR 0 1
27264: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27265: LD_INT 0
27267: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27268: LD_VAR 0 1
27272: PPUSH
27273: LD_VAR 0 2
27277: PPUSH
27278: LD_VAR 0 3
27282: PPUSH
27283: LD_INT 1
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: CALL_OW 483
// CenterOnXY ( x , y ) ;
27293: LD_VAR 0 2
27297: PPUSH
27298: LD_VAR 0 3
27302: PPUSH
27303: CALL_OW 84
// end ;
27307: LD_VAR 0 4
27311: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27312: LD_INT 0
27314: PPUSH
27315: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27316: LD_VAR 0 1
27320: NOT
27321: PUSH
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_VAR 0 3
27331: PPUSH
27332: CALL_OW 488
27336: NOT
27337: OR
27338: PUSH
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 266
27348: PUSH
27349: LD_INT 3
27351: NONEQUAL
27352: PUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 247
27362: PUSH
27363: LD_INT 1
27365: EQUAL
27366: NOT
27367: AND
27368: OR
27369: IFFALSE 27373
// exit ;
27371: GO 27522
// if GetType ( factory ) = unit_human then
27373: LD_VAR 0 1
27377: PPUSH
27378: CALL_OW 247
27382: PUSH
27383: LD_INT 1
27385: EQUAL
27386: IFFALSE 27403
// factory := IsInUnit ( factory ) ;
27388: LD_ADDR_VAR 0 1
27392: PUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: CALL_OW 310
27402: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27403: LD_VAR 0 1
27407: PPUSH
27408: CALL_OW 266
27412: PUSH
27413: LD_INT 3
27415: NONEQUAL
27416: IFFALSE 27420
// exit ;
27418: GO 27522
// if HexInfo ( x , y ) = factory then
27420: LD_VAR 0 2
27424: PPUSH
27425: LD_VAR 0 3
27429: PPUSH
27430: CALL_OW 428
27434: PUSH
27435: LD_VAR 0 1
27439: EQUAL
27440: IFFALSE 27467
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27442: LD_ADDR_EXP 91
27446: PUSH
27447: LD_EXP 91
27451: PPUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_INT 0
27459: PPUSH
27460: CALL_OW 1
27464: ST_TO_ADDR
27465: GO 27518
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27467: LD_ADDR_EXP 91
27471: PUSH
27472: LD_EXP 91
27476: PPUSH
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 255
27491: PUSH
27492: LD_VAR 0 1
27496: PUSH
27497: LD_VAR 0 2
27501: PUSH
27502: LD_VAR 0 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27518: CALL 27527 0 0
// end ;
27522: LD_VAR 0 4
27526: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27527: LD_INT 0
27529: PPUSH
27530: PPUSH
27531: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27532: LD_STRING resetFactoryWaypoint();
27534: PPUSH
27535: CALL_OW 559
// if factoryWaypoints then
27539: LD_EXP 91
27543: IFFALSE 27669
// begin list := PrepareArray ( factoryWaypoints ) ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_EXP 91
27554: PPUSH
27555: CALL 73991 0 1
27559: ST_TO_ADDR
// for i := 1 to list do
27560: LD_ADDR_VAR 0 2
27564: PUSH
27565: DOUBLE
27566: LD_INT 1
27568: DEC
27569: ST_TO_ADDR
27570: LD_VAR 0 3
27574: PUSH
27575: FOR_TO
27576: IFFALSE 27667
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27578: LD_STRING setFactoryWaypointXY(
27580: PUSH
27581: LD_VAR 0 3
27585: PUSH
27586: LD_VAR 0 2
27590: ARRAY
27591: PUSH
27592: LD_INT 1
27594: ARRAY
27595: STR
27596: PUSH
27597: LD_STRING ,
27599: STR
27600: PUSH
27601: LD_VAR 0 3
27605: PUSH
27606: LD_VAR 0 2
27610: ARRAY
27611: PUSH
27612: LD_INT 2
27614: ARRAY
27615: STR
27616: PUSH
27617: LD_STRING ,
27619: STR
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: LD_VAR 0 2
27630: ARRAY
27631: PUSH
27632: LD_INT 3
27634: ARRAY
27635: STR
27636: PUSH
27637: LD_STRING ,
27639: STR
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: LD_VAR 0 2
27650: ARRAY
27651: PUSH
27652: LD_INT 4
27654: ARRAY
27655: STR
27656: PUSH
27657: LD_STRING )
27659: STR
27660: PPUSH
27661: CALL_OW 559
27665: GO 27575
27667: POP
27668: POP
// end ; end ;
27669: LD_VAR 0 1
27673: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27674: LD_INT 0
27676: PPUSH
// if HexInfo ( x , y ) = warehouse then
27677: LD_VAR 0 2
27681: PPUSH
27682: LD_VAR 0 3
27686: PPUSH
27687: CALL_OW 428
27691: PUSH
27692: LD_VAR 0 1
27696: EQUAL
27697: IFFALSE 27724
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27699: LD_ADDR_EXP 92
27703: PUSH
27704: LD_EXP 92
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_INT 0
27716: PPUSH
27717: CALL_OW 1
27721: ST_TO_ADDR
27722: GO 27775
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27724: LD_ADDR_EXP 92
27728: PUSH
27729: LD_EXP 92
27733: PPUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 255
27748: PUSH
27749: LD_VAR 0 1
27753: PUSH
27754: LD_VAR 0 2
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: PPUSH
27770: CALL_OW 1
27774: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27775: CALL 27784 0 0
// end ;
27779: LD_VAR 0 4
27783: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27784: LD_INT 0
27786: PPUSH
27787: PPUSH
27788: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27789: LD_STRING resetWarehouseGatheringPoints();
27791: PPUSH
27792: CALL_OW 559
// if warehouseGatheringPoints then
27796: LD_EXP 92
27800: IFFALSE 27926
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_EXP 92
27811: PPUSH
27812: CALL 73991 0 1
27816: ST_TO_ADDR
// for i := 1 to list do
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: DOUBLE
27823: LD_INT 1
27825: DEC
27826: ST_TO_ADDR
27827: LD_VAR 0 3
27831: PUSH
27832: FOR_TO
27833: IFFALSE 27924
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27835: LD_STRING setWarehouseGatheringPointXY(
27837: PUSH
27838: LD_VAR 0 3
27842: PUSH
27843: LD_VAR 0 2
27847: ARRAY
27848: PUSH
27849: LD_INT 1
27851: ARRAY
27852: STR
27853: PUSH
27854: LD_STRING ,
27856: STR
27857: PUSH
27858: LD_VAR 0 3
27862: PUSH
27863: LD_VAR 0 2
27867: ARRAY
27868: PUSH
27869: LD_INT 2
27871: ARRAY
27872: STR
27873: PUSH
27874: LD_STRING ,
27876: STR
27877: PUSH
27878: LD_VAR 0 3
27882: PUSH
27883: LD_VAR 0 2
27887: ARRAY
27888: PUSH
27889: LD_INT 3
27891: ARRAY
27892: STR
27893: PUSH
27894: LD_STRING ,
27896: STR
27897: PUSH
27898: LD_VAR 0 3
27902: PUSH
27903: LD_VAR 0 2
27907: ARRAY
27908: PUSH
27909: LD_INT 4
27911: ARRAY
27912: STR
27913: PUSH
27914: LD_STRING )
27916: STR
27917: PPUSH
27918: CALL_OW 559
27922: GO 27832
27924: POP
27925: POP
// end ; end ;
27926: LD_VAR 0 1
27930: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27931: LD_EXP 92
27935: IFFALSE 28620
27937: GO 27939
27939: DISABLE
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
// begin enable ;
27951: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_EXP 92
27961: PPUSH
27962: CALL 73991 0 1
27966: ST_TO_ADDR
// if not list then
27967: LD_VAR 0 3
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28620
// for i := 1 to list do
27976: LD_ADDR_VAR 0 1
27980: PUSH
27981: DOUBLE
27982: LD_INT 1
27984: DEC
27985: ST_TO_ADDR
27986: LD_VAR 0 3
27990: PUSH
27991: FOR_TO
27992: IFFALSE 28618
// begin depot := list [ i ] [ 2 ] ;
27994: LD_ADDR_VAR 0 8
27998: PUSH
27999: LD_VAR 0 3
28003: PUSH
28004: LD_VAR 0 1
28008: ARRAY
28009: PUSH
28010: LD_INT 2
28012: ARRAY
28013: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 3
28023: PUSH
28024: LD_VAR 0 1
28028: ARRAY
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28034: LD_VAR 0 8
28038: PPUSH
28039: CALL_OW 301
28043: PUSH
28044: LD_VAR 0 5
28048: PUSH
28049: LD_VAR 0 8
28053: PPUSH
28054: CALL_OW 255
28058: NONEQUAL
28059: OR
28060: IFFALSE 28089
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28062: LD_ADDR_EXP 92
28066: PUSH
28067: LD_EXP 92
28071: PPUSH
28072: LD_VAR 0 8
28076: PPUSH
28077: LD_INT 0
28079: PPUSH
28080: CALL_OW 1
28084: ST_TO_ADDR
// exit ;
28085: POP
28086: POP
28087: GO 28620
// end ; x := list [ i ] [ 3 ] ;
28089: LD_ADDR_VAR 0 6
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 1
28103: ARRAY
28104: PUSH
28105: LD_INT 3
28107: ARRAY
28108: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28109: LD_ADDR_VAR 0 7
28113: PUSH
28114: LD_VAR 0 3
28118: PUSH
28119: LD_VAR 0 1
28123: ARRAY
28124: PUSH
28125: LD_INT 4
28127: ARRAY
28128: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28129: LD_ADDR_VAR 0 9
28133: PUSH
28134: LD_VAR 0 6
28138: PPUSH
28139: LD_VAR 0 7
28143: PPUSH
28144: LD_INT 16
28146: PPUSH
28147: CALL 72579 0 3
28151: ST_TO_ADDR
// if not cratesNearbyPoint then
28152: LD_VAR 0 9
28156: NOT
28157: IFFALSE 28163
// exit ;
28159: POP
28160: POP
28161: GO 28620
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28163: LD_ADDR_VAR 0 4
28167: PUSH
28168: LD_INT 22
28170: PUSH
28171: LD_VAR 0 5
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 60
28185: PUSH
28186: EMPTY
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 91
28195: PUSH
28196: LD_VAR 0 8
28200: PUSH
28201: LD_INT 6
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 25
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 25
28224: PUSH
28225: LD_INT 16
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: PUSH
28248: LD_VAR 0 8
28252: PPUSH
28253: CALL_OW 313
28257: PPUSH
28258: LD_INT 3
28260: PUSH
28261: LD_INT 60
28263: PUSH
28264: EMPTY
28265: LIST
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 25
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 25
28286: PUSH
28287: LD_INT 16
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 72
28307: UNION
28308: ST_TO_ADDR
// if tmp then
28309: LD_VAR 0 4
28313: IFFALSE 28393
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_VAR 0 4
28324: PPUSH
28325: LD_INT 3
28327: PPUSH
28328: CALL 70548 0 2
28332: ST_TO_ADDR
// for j in tmp do
28333: LD_ADDR_VAR 0 2
28337: PUSH
28338: LD_VAR 0 4
28342: PUSH
28343: FOR_IN
28344: IFFALSE 28387
// begin if IsInUnit ( j ) then
28346: LD_VAR 0 2
28350: PPUSH
28351: CALL_OW 310
28355: IFFALSE 28366
// ComExit ( j ) ;
28357: LD_VAR 0 2
28361: PPUSH
28362: CALL 70631 0 1
// AddComCollect ( j , x , y ) ;
28366: LD_VAR 0 2
28370: PPUSH
28371: LD_VAR 0 6
28375: PPUSH
28376: LD_VAR 0 7
28380: PPUSH
28381: CALL_OW 177
// end ;
28385: GO 28343
28387: POP
28388: POP
// exit ;
28389: POP
28390: POP
28391: GO 28620
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28393: LD_ADDR_VAR 0 4
28397: PUSH
28398: LD_INT 22
28400: PUSH
28401: LD_VAR 0 5
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 91
28412: PUSH
28413: LD_VAR 0 8
28417: PUSH
28418: LD_INT 8
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: LD_INT 34
28431: PUSH
28432: LD_INT 12
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 34
28441: PUSH
28442: LD_INT 51
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 34
28451: PUSH
28452: LD_INT 32
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 34
28461: PUSH
28462: LD_INT 89
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if tmp then
28486: LD_VAR 0 4
28490: IFFALSE 28616
// begin for j in tmp do
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_VAR 0 4
28501: PUSH
28502: FOR_IN
28503: IFFALSE 28614
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28505: LD_VAR 0 2
28509: PPUSH
28510: CALL_OW 262
28514: PUSH
28515: LD_INT 3
28517: EQUAL
28518: PUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 261
28528: PUSH
28529: LD_INT 20
28531: GREATER
28532: OR
28533: PUSH
28534: LD_VAR 0 2
28538: PPUSH
28539: CALL_OW 314
28543: NOT
28544: AND
28545: PUSH
28546: LD_VAR 0 2
28550: PPUSH
28551: CALL_OW 263
28555: PUSH
28556: LD_INT 1
28558: NONEQUAL
28559: PUSH
28560: LD_VAR 0 2
28564: PPUSH
28565: CALL_OW 311
28569: OR
28570: AND
28571: IFFALSE 28612
// begin ComCollect ( j , x , y ) ;
28573: LD_VAR 0 2
28577: PPUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: LD_VAR 0 7
28587: PPUSH
28588: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 8
28601: PPUSH
28602: CALL_OW 172
// exit ;
28606: POP
28607: POP
28608: POP
28609: POP
28610: GO 28620
// end ;
28612: GO 28502
28614: POP
28615: POP
// end ; end ;
28616: GO 27991
28618: POP
28619: POP
// end ; end_of_file
28620: PPOPN 9
28622: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
28627: PPUSH
28628: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 264
28638: PUSH
28639: LD_INT 91
28641: EQUAL
28642: IFFALSE 28714
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28644: LD_INT 68
28646: PPUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 255
28656: PPUSH
28657: CALL_OW 321
28661: PUSH
28662: LD_INT 2
28664: EQUAL
28665: IFFALSE 28677
// eff := 70 else
28667: LD_ADDR_VAR 0 4
28671: PUSH
28672: LD_INT 70
28674: ST_TO_ADDR
28675: GO 28685
// eff := 30 ;
28677: LD_ADDR_VAR 0 4
28681: PUSH
28682: LD_INT 30
28684: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 250
28694: PPUSH
28695: LD_VAR 0 1
28699: PPUSH
28700: CALL_OW 251
28704: PPUSH
28705: LD_VAR 0 4
28709: PPUSH
28710: CALL_OW 495
// end ; end ;
28714: LD_VAR 0 2
28718: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28719: LD_INT 0
28721: PPUSH
// end ;
28722: LD_VAR 0 4
28726: RET
// export function SOS_Command ( cmd ) ; begin
28727: LD_INT 0
28729: PPUSH
// end ;
28730: LD_VAR 0 2
28734: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28735: LD_INT 0
28737: PPUSH
// end ;
28738: LD_VAR 0 6
28742: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
// if not vehicle or not factory then
28747: LD_VAR 0 1
28751: NOT
28752: PUSH
28753: LD_VAR 0 2
28757: NOT
28758: OR
28759: IFFALSE 28763
// exit ;
28761: GO 28994
// if factoryWaypoints >= factory then
28763: LD_EXP 91
28767: PUSH
28768: LD_VAR 0 2
28772: GREATEREQUAL
28773: IFFALSE 28994
// if factoryWaypoints [ factory ] then
28775: LD_EXP 91
28779: PUSH
28780: LD_VAR 0 2
28784: ARRAY
28785: IFFALSE 28994
// begin if GetControl ( vehicle ) = control_manual then
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 263
28796: PUSH
28797: LD_INT 1
28799: EQUAL
28800: IFFALSE 28881
// begin driver := IsDrivenBy ( vehicle ) ;
28802: LD_ADDR_VAR 0 4
28806: PUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 311
28816: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28817: LD_VAR 0 4
28821: PPUSH
28822: LD_EXP 91
28826: PUSH
28827: LD_VAR 0 2
28831: ARRAY
28832: PUSH
28833: LD_INT 3
28835: ARRAY
28836: PPUSH
28837: LD_EXP 91
28841: PUSH
28842: LD_VAR 0 2
28846: ARRAY
28847: PUSH
28848: LD_INT 4
28850: ARRAY
28851: PPUSH
28852: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28856: LD_VAR 0 4
28860: PPUSH
28861: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28865: LD_VAR 0 4
28869: PPUSH
28870: LD_VAR 0 2
28874: PPUSH
28875: CALL_OW 180
// end else
28879: GO 28994
// if GetControl ( vehicle ) = control_remote then
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 263
28890: PUSH
28891: LD_INT 2
28893: EQUAL
28894: IFFALSE 28955
// begin wait ( 0 0$2 ) ;
28896: LD_INT 70
28898: PPUSH
28899: CALL_OW 67
// if Connect ( vehicle ) then
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL 40852 0 1
28912: IFFALSE 28953
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28914: LD_VAR 0 1
28918: PPUSH
28919: LD_EXP 91
28923: PUSH
28924: LD_VAR 0 2
28928: ARRAY
28929: PUSH
28930: LD_INT 3
28932: ARRAY
28933: PPUSH
28934: LD_EXP 91
28938: PUSH
28939: LD_VAR 0 2
28943: ARRAY
28944: PUSH
28945: LD_INT 4
28947: ARRAY
28948: PPUSH
28949: CALL_OW 171
// end else
28953: GO 28994
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_EXP 91
28964: PUSH
28965: LD_VAR 0 2
28969: ARRAY
28970: PUSH
28971: LD_INT 3
28973: ARRAY
28974: PPUSH
28975: LD_EXP 91
28979: PUSH
28980: LD_VAR 0 2
28984: ARRAY
28985: PUSH
28986: LD_INT 4
28988: ARRAY
28989: PPUSH
28990: CALL_OW 171
// end ; end ;
28994: LD_VAR 0 3
28998: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28999: LD_INT 0
29001: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29002: LD_VAR 0 1
29006: PUSH
29007: LD_INT 250
29009: EQUAL
29010: PUSH
29011: LD_VAR 0 2
29015: PPUSH
29016: CALL_OW 264
29020: PUSH
29021: LD_INT 81
29023: EQUAL
29024: AND
29025: IFFALSE 29046
// MinerPlaceMine ( unit , x , y ) ;
29027: LD_VAR 0 2
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: LD_VAR 0 5
29041: PPUSH
29042: CALL 31431 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29046: LD_VAR 0 1
29050: PUSH
29051: LD_INT 251
29053: EQUAL
29054: PUSH
29055: LD_VAR 0 2
29059: PPUSH
29060: CALL_OW 264
29064: PUSH
29065: LD_INT 81
29067: EQUAL
29068: AND
29069: IFFALSE 29090
// MinerDetonateMine ( unit , x , y ) ;
29071: LD_VAR 0 2
29075: PPUSH
29076: LD_VAR 0 4
29080: PPUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: CALL 31706 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29090: LD_VAR 0 1
29094: PUSH
29095: LD_INT 252
29097: EQUAL
29098: PUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL_OW 264
29108: PUSH
29109: LD_INT 81
29111: EQUAL
29112: AND
29113: IFFALSE 29134
// MinerCreateMinefield ( unit , x , y ) ;
29115: LD_VAR 0 2
29119: PPUSH
29120: LD_VAR 0 4
29124: PPUSH
29125: LD_VAR 0 5
29129: PPUSH
29130: CALL 32123 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29134: LD_VAR 0 1
29138: PUSH
29139: LD_INT 253
29141: EQUAL
29142: PUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 257
29152: PUSH
29153: LD_INT 5
29155: EQUAL
29156: AND
29157: IFFALSE 29178
// ComBinocular ( unit , x , y ) ;
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: LD_VAR 0 5
29173: PPUSH
29174: CALL 32492 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29178: LD_VAR 0 1
29182: PUSH
29183: LD_INT 254
29185: EQUAL
29186: PUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 264
29196: PUSH
29197: LD_INT 99
29199: EQUAL
29200: AND
29201: PUSH
29202: LD_VAR 0 3
29206: PPUSH
29207: CALL_OW 263
29211: PUSH
29212: LD_INT 3
29214: EQUAL
29215: AND
29216: IFFALSE 29232
// HackDestroyVehicle ( unit , selectedUnit ) ;
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL 30795 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29232: LD_VAR 0 1
29236: PUSH
29237: LD_INT 255
29239: EQUAL
29240: PUSH
29241: LD_VAR 0 2
29245: PPUSH
29246: CALL_OW 264
29250: PUSH
29251: LD_INT 14
29253: PUSH
29254: LD_INT 53
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: IN
29261: AND
29262: PUSH
29263: LD_VAR 0 4
29267: PPUSH
29268: LD_VAR 0 5
29272: PPUSH
29273: CALL_OW 488
29277: AND
29278: IFFALSE 29302
// CutTreeXYR ( unit , x , y , 12 ) ;
29280: LD_VAR 0 2
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: LD_VAR 0 5
29294: PPUSH
29295: LD_INT 12
29297: PPUSH
29298: CALL 29365 0 4
// if cmd = 256 then
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 256
29309: EQUAL
29310: IFFALSE 29331
// SetFactoryWaypoint ( unit , x , y ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_VAR 0 4
29321: PPUSH
29322: LD_VAR 0 5
29326: PPUSH
29327: CALL 27312 0 3
// if cmd = 257 then
29331: LD_VAR 0 1
29335: PUSH
29336: LD_INT 257
29338: EQUAL
29339: IFFALSE 29360
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: LD_VAR 0 4
29350: PPUSH
29351: LD_VAR 0 5
29355: PPUSH
29356: CALL 27674 0 3
// end ;
29360: LD_VAR 0 6
29364: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29365: LD_INT 0
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29376: LD_VAR 0 1
29380: NOT
29381: PUSH
29382: LD_VAR 0 2
29386: PPUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 488
29396: NOT
29397: OR
29398: PUSH
29399: LD_VAR 0 4
29403: NOT
29404: OR
29405: IFFALSE 29409
// exit ;
29407: GO 29749
// list := [ ] ;
29409: LD_ADDR_VAR 0 13
29413: PUSH
29414: EMPTY
29415: ST_TO_ADDR
// if x - r < 0 then
29416: LD_VAR 0 2
29420: PUSH
29421: LD_VAR 0 4
29425: MINUS
29426: PUSH
29427: LD_INT 0
29429: LESS
29430: IFFALSE 29442
// min_x := 0 else
29432: LD_ADDR_VAR 0 7
29436: PUSH
29437: LD_INT 0
29439: ST_TO_ADDR
29440: GO 29458
// min_x := x - r ;
29442: LD_ADDR_VAR 0 7
29446: PUSH
29447: LD_VAR 0 2
29451: PUSH
29452: LD_VAR 0 4
29456: MINUS
29457: ST_TO_ADDR
// if y - r < 0 then
29458: LD_VAR 0 3
29462: PUSH
29463: LD_VAR 0 4
29467: MINUS
29468: PUSH
29469: LD_INT 0
29471: LESS
29472: IFFALSE 29484
// min_y := 0 else
29474: LD_ADDR_VAR 0 8
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
29482: GO 29500
// min_y := y - r ;
29484: LD_ADDR_VAR 0 8
29488: PUSH
29489: LD_VAR 0 3
29493: PUSH
29494: LD_VAR 0 4
29498: MINUS
29499: ST_TO_ADDR
// max_x := x + r ;
29500: LD_ADDR_VAR 0 9
29504: PUSH
29505: LD_VAR 0 2
29509: PUSH
29510: LD_VAR 0 4
29514: PLUS
29515: ST_TO_ADDR
// max_y := y + r ;
29516: LD_ADDR_VAR 0 10
29520: PUSH
29521: LD_VAR 0 3
29525: PUSH
29526: LD_VAR 0 4
29530: PLUS
29531: ST_TO_ADDR
// for _x = min_x to max_x do
29532: LD_ADDR_VAR 0 11
29536: PUSH
29537: DOUBLE
29538: LD_VAR 0 7
29542: DEC
29543: ST_TO_ADDR
29544: LD_VAR 0 9
29548: PUSH
29549: FOR_TO
29550: IFFALSE 29667
// for _y = min_y to max_y do
29552: LD_ADDR_VAR 0 12
29556: PUSH
29557: DOUBLE
29558: LD_VAR 0 8
29562: DEC
29563: ST_TO_ADDR
29564: LD_VAR 0 10
29568: PUSH
29569: FOR_TO
29570: IFFALSE 29663
// begin if not ValidHex ( _x , _y ) then
29572: LD_VAR 0 11
29576: PPUSH
29577: LD_VAR 0 12
29581: PPUSH
29582: CALL_OW 488
29586: NOT
29587: IFFALSE 29591
// continue ;
29589: GO 29569
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29591: LD_VAR 0 11
29595: PPUSH
29596: LD_VAR 0 12
29600: PPUSH
29601: CALL_OW 351
29605: PUSH
29606: LD_VAR 0 11
29610: PPUSH
29611: LD_VAR 0 12
29615: PPUSH
29616: CALL_OW 554
29620: AND
29621: IFFALSE 29661
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29623: LD_ADDR_VAR 0 13
29627: PUSH
29628: LD_VAR 0 13
29632: PPUSH
29633: LD_VAR 0 13
29637: PUSH
29638: LD_INT 1
29640: PLUS
29641: PPUSH
29642: LD_VAR 0 11
29646: PUSH
29647: LD_VAR 0 12
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PPUSH
29656: CALL_OW 2
29660: ST_TO_ADDR
// end ;
29661: GO 29569
29663: POP
29664: POP
29665: GO 29549
29667: POP
29668: POP
// if not list then
29669: LD_VAR 0 13
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29749
// for i in list do
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_VAR 0 13
29687: PUSH
29688: FOR_IN
29689: IFFALSE 29747
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29691: LD_VAR 0 1
29695: PPUSH
29696: LD_STRING M
29698: PUSH
29699: LD_VAR 0 6
29703: PUSH
29704: LD_INT 1
29706: ARRAY
29707: PUSH
29708: LD_VAR 0 6
29712: PUSH
29713: LD_INT 2
29715: ARRAY
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: PPUSH
29741: CALL_OW 447
29745: GO 29688
29747: POP
29748: POP
// end ;
29749: LD_VAR 0 5
29753: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29754: LD_EXP 94
29758: NOT
29759: IFFALSE 29809
29761: GO 29763
29763: DISABLE
// begin initHack := true ;
29764: LD_ADDR_EXP 94
29768: PUSH
29769: LD_INT 1
29771: ST_TO_ADDR
// hackTanks := [ ] ;
29772: LD_ADDR_EXP 95
29776: PUSH
29777: EMPTY
29778: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29779: LD_ADDR_EXP 96
29783: PUSH
29784: EMPTY
29785: ST_TO_ADDR
// hackLimit := 3 ;
29786: LD_ADDR_EXP 97
29790: PUSH
29791: LD_INT 3
29793: ST_TO_ADDR
// hackDist := 12 ;
29794: LD_ADDR_EXP 98
29798: PUSH
29799: LD_INT 12
29801: ST_TO_ADDR
// hackCounter := [ ] ;
29802: LD_ADDR_EXP 99
29806: PUSH
29807: EMPTY
29808: ST_TO_ADDR
// end ;
29809: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29810: LD_EXP 94
29814: PUSH
29815: LD_INT 34
29817: PUSH
29818: LD_INT 99
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PPUSH
29825: CALL_OW 69
29829: AND
29830: IFFALSE 30083
29832: GO 29834
29834: DISABLE
29835: LD_INT 0
29837: PPUSH
29838: PPUSH
// begin enable ;
29839: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29840: LD_ADDR_VAR 0 1
29844: PUSH
29845: LD_INT 34
29847: PUSH
29848: LD_INT 99
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: PUSH
29860: FOR_IN
29861: IFFALSE 30081
// begin if not i in hackTanks then
29863: LD_VAR 0 1
29867: PUSH
29868: LD_EXP 95
29872: IN
29873: NOT
29874: IFFALSE 29957
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29876: LD_ADDR_EXP 95
29880: PUSH
29881: LD_EXP 95
29885: PPUSH
29886: LD_EXP 95
29890: PUSH
29891: LD_INT 1
29893: PLUS
29894: PPUSH
29895: LD_VAR 0 1
29899: PPUSH
29900: CALL_OW 1
29904: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29905: LD_ADDR_EXP 96
29909: PUSH
29910: LD_EXP 96
29914: PPUSH
29915: LD_EXP 96
29919: PUSH
29920: LD_INT 1
29922: PLUS
29923: PPUSH
29924: EMPTY
29925: PPUSH
29926: CALL_OW 1
29930: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29931: LD_ADDR_EXP 99
29935: PUSH
29936: LD_EXP 99
29940: PPUSH
29941: LD_EXP 99
29945: PUSH
29946: LD_INT 1
29948: PLUS
29949: PPUSH
29950: EMPTY
29951: PPUSH
29952: CALL_OW 1
29956: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 302
29966: NOT
29967: IFFALSE 29980
// begin HackUnlinkAll ( i ) ;
29969: LD_VAR 0 1
29973: PPUSH
29974: CALL 30086 0 1
// continue ;
29978: GO 29860
// end ; HackCheckCapturedStatus ( i ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: CALL 30529 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29989: LD_ADDR_VAR 0 2
29993: PUSH
29994: LD_INT 81
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 255
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 33
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 91
30023: PUSH
30024: LD_VAR 0 1
30028: PUSH
30029: LD_EXP 98
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 50
30041: PUSH
30042: EMPTY
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 69
30055: ST_TO_ADDR
// if not tmp then
30056: LD_VAR 0 2
30060: NOT
30061: IFFALSE 30065
// continue ;
30063: GO 29860
// HackLink ( i , tmp ) ;
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 2
30074: PPUSH
30075: CALL 30222 0 2
// end ;
30079: GO 29860
30081: POP
30082: POP
// end ;
30083: PPOPN 2
30085: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30086: LD_INT 0
30088: PPUSH
30089: PPUSH
30090: PPUSH
// if not hack in hackTanks then
30091: LD_VAR 0 1
30095: PUSH
30096: LD_EXP 95
30100: IN
30101: NOT
30102: IFFALSE 30106
// exit ;
30104: GO 30217
// index := GetElementIndex ( hackTanks , hack ) ;
30106: LD_ADDR_VAR 0 4
30110: PUSH
30111: LD_EXP 95
30115: PPUSH
30116: LD_VAR 0 1
30120: PPUSH
30121: CALL 37659 0 2
30125: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30126: LD_EXP 96
30130: PUSH
30131: LD_VAR 0 4
30135: ARRAY
30136: IFFALSE 30217
// begin for i in hackTanksCaptured [ index ] do
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: LD_EXP 96
30147: PUSH
30148: LD_VAR 0 4
30152: ARRAY
30153: PUSH
30154: FOR_IN
30155: IFFALSE 30181
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30157: LD_VAR 0 3
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 3
30170: PUSH
30171: LD_INT 2
30173: ARRAY
30174: PPUSH
30175: CALL_OW 235
30179: GO 30154
30181: POP
30182: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30183: LD_ADDR_EXP 96
30187: PUSH
30188: LD_EXP 96
30192: PPUSH
30193: LD_VAR 0 4
30197: PPUSH
30198: EMPTY
30199: PPUSH
30200: CALL_OW 1
30204: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_INT 0
30212: PPUSH
30213: CALL_OW 505
// end ; end ;
30217: LD_VAR 0 2
30221: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30222: LD_INT 0
30224: PPUSH
30225: PPUSH
30226: PPUSH
// if not hack in hackTanks or not vehicles then
30227: LD_VAR 0 1
30231: PUSH
30232: LD_EXP 95
30236: IN
30237: NOT
30238: PUSH
30239: LD_VAR 0 2
30243: NOT
30244: OR
30245: IFFALSE 30249
// exit ;
30247: GO 30524
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30249: LD_ADDR_VAR 0 2
30253: PUSH
30254: LD_VAR 0 1
30258: PPUSH
30259: LD_VAR 0 2
30263: PPUSH
30264: LD_INT 1
30266: PPUSH
30267: LD_INT 1
30269: PPUSH
30270: CALL 38309 0 4
30274: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30275: LD_ADDR_VAR 0 5
30279: PUSH
30280: LD_EXP 95
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL 37659 0 2
30294: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30295: LD_EXP 96
30299: PUSH
30300: LD_VAR 0 5
30304: ARRAY
30305: PUSH
30306: LD_EXP 97
30310: LESS
30311: IFFALSE 30500
// begin for i := 1 to vehicles do
30313: LD_ADDR_VAR 0 4
30317: PUSH
30318: DOUBLE
30319: LD_INT 1
30321: DEC
30322: ST_TO_ADDR
30323: LD_VAR 0 2
30327: PUSH
30328: FOR_TO
30329: IFFALSE 30498
// begin if hackTanksCaptured [ index ] = hackLimit then
30331: LD_EXP 96
30335: PUSH
30336: LD_VAR 0 5
30340: ARRAY
30341: PUSH
30342: LD_EXP 97
30346: EQUAL
30347: IFFALSE 30351
// break ;
30349: GO 30498
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30351: LD_ADDR_EXP 99
30355: PUSH
30356: LD_EXP 99
30360: PPUSH
30361: LD_VAR 0 5
30365: PPUSH
30366: LD_EXP 99
30370: PUSH
30371: LD_VAR 0 5
30375: ARRAY
30376: PUSH
30377: LD_INT 1
30379: PLUS
30380: PPUSH
30381: CALL_OW 1
30385: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30386: LD_ADDR_EXP 96
30390: PUSH
30391: LD_EXP 96
30395: PPUSH
30396: LD_VAR 0 5
30400: PUSH
30401: LD_EXP 96
30405: PUSH
30406: LD_VAR 0 5
30410: ARRAY
30411: PUSH
30412: LD_INT 1
30414: PLUS
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: LD_VAR 0 2
30424: PUSH
30425: LD_VAR 0 4
30429: ARRAY
30430: PUSH
30431: LD_VAR 0 2
30435: PUSH
30436: LD_VAR 0 4
30440: ARRAY
30441: PPUSH
30442: CALL_OW 255
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PPUSH
30451: CALL 37874 0 3
30455: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30456: LD_VAR 0 2
30460: PUSH
30461: LD_VAR 0 4
30465: ARRAY
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 255
30476: PPUSH
30477: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30481: LD_VAR 0 2
30485: PUSH
30486: LD_VAR 0 4
30490: ARRAY
30491: PPUSH
30492: CALL_OW 141
// end ;
30496: GO 30328
30498: POP
30499: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30500: LD_VAR 0 1
30504: PPUSH
30505: LD_EXP 96
30509: PUSH
30510: LD_VAR 0 5
30514: ARRAY
30515: PUSH
30516: LD_INT 0
30518: PLUS
30519: PPUSH
30520: CALL_OW 505
// end ;
30524: LD_VAR 0 3
30528: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30529: LD_INT 0
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
// if not hack in hackTanks then
30535: LD_VAR 0 1
30539: PUSH
30540: LD_EXP 95
30544: IN
30545: NOT
30546: IFFALSE 30550
// exit ;
30548: GO 30790
// index := GetElementIndex ( hackTanks , hack ) ;
30550: LD_ADDR_VAR 0 4
30554: PUSH
30555: LD_EXP 95
30559: PPUSH
30560: LD_VAR 0 1
30564: PPUSH
30565: CALL 37659 0 2
30569: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30570: LD_ADDR_VAR 0 3
30574: PUSH
30575: DOUBLE
30576: LD_EXP 96
30580: PUSH
30581: LD_VAR 0 4
30585: ARRAY
30586: INC
30587: ST_TO_ADDR
30588: LD_INT 1
30590: PUSH
30591: FOR_DOWNTO
30592: IFFALSE 30764
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30594: LD_ADDR_VAR 0 5
30598: PUSH
30599: LD_EXP 96
30603: PUSH
30604: LD_VAR 0 4
30608: ARRAY
30609: PUSH
30610: LD_VAR 0 3
30614: ARRAY
30615: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30616: LD_VAR 0 5
30620: PUSH
30621: LD_INT 1
30623: ARRAY
30624: PPUSH
30625: CALL_OW 302
30629: NOT
30630: PUSH
30631: LD_VAR 0 5
30635: PUSH
30636: LD_INT 1
30638: ARRAY
30639: PPUSH
30640: CALL_OW 255
30644: PUSH
30645: LD_VAR 0 1
30649: PPUSH
30650: CALL_OW 255
30654: NONEQUAL
30655: OR
30656: IFFALSE 30762
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30658: LD_VAR 0 5
30662: PUSH
30663: LD_INT 1
30665: ARRAY
30666: PPUSH
30667: CALL_OW 305
30671: PUSH
30672: LD_VAR 0 5
30676: PUSH
30677: LD_INT 1
30679: ARRAY
30680: PPUSH
30681: CALL_OW 255
30685: PUSH
30686: LD_VAR 0 1
30690: PPUSH
30691: CALL_OW 255
30695: EQUAL
30696: AND
30697: IFFALSE 30721
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 1
30706: ARRAY
30707: PPUSH
30708: LD_VAR 0 5
30712: PUSH
30713: LD_INT 2
30715: ARRAY
30716: PPUSH
30717: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30721: LD_ADDR_EXP 96
30725: PUSH
30726: LD_EXP 96
30730: PPUSH
30731: LD_VAR 0 4
30735: PPUSH
30736: LD_EXP 96
30740: PUSH
30741: LD_VAR 0 4
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: CALL_OW 3
30756: PPUSH
30757: CALL_OW 1
30761: ST_TO_ADDR
// end ; end ;
30762: GO 30591
30764: POP
30765: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30766: LD_VAR 0 1
30770: PPUSH
30771: LD_EXP 96
30775: PUSH
30776: LD_VAR 0 4
30780: ARRAY
30781: PUSH
30782: LD_INT 0
30784: PLUS
30785: PPUSH
30786: CALL_OW 505
// end ;
30790: LD_VAR 0 2
30794: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
// if not hack in hackTanks then
30801: LD_VAR 0 1
30805: PUSH
30806: LD_EXP 95
30810: IN
30811: NOT
30812: IFFALSE 30816
// exit ;
30814: GO 30901
// index := GetElementIndex ( hackTanks , hack ) ;
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: LD_EXP 95
30825: PPUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL 37659 0 2
30835: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30836: LD_ADDR_VAR 0 4
30840: PUSH
30841: DOUBLE
30842: LD_INT 1
30844: DEC
30845: ST_TO_ADDR
30846: LD_EXP 96
30850: PUSH
30851: LD_VAR 0 5
30855: ARRAY
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30899
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30860: LD_EXP 96
30864: PUSH
30865: LD_VAR 0 5
30869: ARRAY
30870: PUSH
30871: LD_VAR 0 4
30875: ARRAY
30876: PUSH
30877: LD_INT 1
30879: ARRAY
30880: PUSH
30881: LD_VAR 0 2
30885: EQUAL
30886: IFFALSE 30897
// KillUnit ( vehicle ) ;
30888: LD_VAR 0 2
30892: PPUSH
30893: CALL_OW 66
30897: GO 30857
30899: POP
30900: POP
// end ;
30901: LD_VAR 0 3
30905: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30906: LD_EXP 100
30910: NOT
30911: IFFALSE 30946
30913: GO 30915
30915: DISABLE
// begin initMiner := true ;
30916: LD_ADDR_EXP 100
30920: PUSH
30921: LD_INT 1
30923: ST_TO_ADDR
// minersList := [ ] ;
30924: LD_ADDR_EXP 101
30928: PUSH
30929: EMPTY
30930: ST_TO_ADDR
// minerMinesList := [ ] ;
30931: LD_ADDR_EXP 102
30935: PUSH
30936: EMPTY
30937: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30938: LD_ADDR_EXP 103
30942: PUSH
30943: LD_INT 5
30945: ST_TO_ADDR
// end ;
30946: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30947: LD_EXP 100
30951: PUSH
30952: LD_INT 34
30954: PUSH
30955: LD_INT 81
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: AND
30967: IFFALSE 31428
30969: GO 30971
30971: DISABLE
30972: LD_INT 0
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
// begin enable ;
30978: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30979: LD_ADDR_VAR 0 1
30983: PUSH
30984: LD_INT 34
30986: PUSH
30987: LD_INT 81
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PPUSH
30994: CALL_OW 69
30998: PUSH
30999: FOR_IN
31000: IFFALSE 31072
// begin if not i in minersList then
31002: LD_VAR 0 1
31006: PUSH
31007: LD_EXP 101
31011: IN
31012: NOT
31013: IFFALSE 31070
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31015: LD_ADDR_EXP 101
31019: PUSH
31020: LD_EXP 101
31024: PPUSH
31025: LD_EXP 101
31029: PUSH
31030: LD_INT 1
31032: PLUS
31033: PPUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: CALL_OW 1
31043: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31044: LD_ADDR_EXP 102
31048: PUSH
31049: LD_EXP 102
31053: PPUSH
31054: LD_EXP 102
31058: PUSH
31059: LD_INT 1
31061: PLUS
31062: PPUSH
31063: EMPTY
31064: PPUSH
31065: CALL_OW 1
31069: ST_TO_ADDR
// end end ;
31070: GO 30999
31072: POP
31073: POP
// for i := minerMinesList downto 1 do
31074: LD_ADDR_VAR 0 1
31078: PUSH
31079: DOUBLE
31080: LD_EXP 102
31084: INC
31085: ST_TO_ADDR
31086: LD_INT 1
31088: PUSH
31089: FOR_DOWNTO
31090: IFFALSE 31426
// begin if IsLive ( minersList [ i ] ) then
31092: LD_EXP 101
31096: PUSH
31097: LD_VAR 0 1
31101: ARRAY
31102: PPUSH
31103: CALL_OW 300
31107: IFFALSE 31135
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31109: LD_EXP 101
31113: PUSH
31114: LD_VAR 0 1
31118: ARRAY
31119: PPUSH
31120: LD_EXP 102
31124: PUSH
31125: LD_VAR 0 1
31129: ARRAY
31130: PPUSH
31131: CALL_OW 505
// if not minerMinesList [ i ] then
31135: LD_EXP 102
31139: PUSH
31140: LD_VAR 0 1
31144: ARRAY
31145: NOT
31146: IFFALSE 31150
// continue ;
31148: GO 31089
// for j := minerMinesList [ i ] downto 1 do
31150: LD_ADDR_VAR 0 2
31154: PUSH
31155: DOUBLE
31156: LD_EXP 102
31160: PUSH
31161: LD_VAR 0 1
31165: ARRAY
31166: INC
31167: ST_TO_ADDR
31168: LD_INT 1
31170: PUSH
31171: FOR_DOWNTO
31172: IFFALSE 31422
// begin side := GetSide ( minersList [ i ] ) ;
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_EXP 101
31183: PUSH
31184: LD_VAR 0 1
31188: ARRAY
31189: PPUSH
31190: CALL_OW 255
31194: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31195: LD_ADDR_VAR 0 4
31199: PUSH
31200: LD_EXP 102
31204: PUSH
31205: LD_VAR 0 1
31209: ARRAY
31210: PUSH
31211: LD_VAR 0 2
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_EXP 102
31225: PUSH
31226: LD_VAR 0 1
31230: ARRAY
31231: PUSH
31232: LD_VAR 0 2
31236: ARRAY
31237: PUSH
31238: LD_INT 2
31240: ARRAY
31241: PPUSH
31242: CALL_OW 428
31246: ST_TO_ADDR
// if not tmp then
31247: LD_VAR 0 4
31251: NOT
31252: IFFALSE 31256
// continue ;
31254: GO 31171
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31256: LD_VAR 0 4
31260: PUSH
31261: LD_INT 81
31263: PUSH
31264: LD_VAR 0 3
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: IN
31278: PUSH
31279: LD_EXP 102
31283: PUSH
31284: LD_VAR 0 1
31288: ARRAY
31289: PUSH
31290: LD_VAR 0 2
31294: ARRAY
31295: PUSH
31296: LD_INT 1
31298: ARRAY
31299: PPUSH
31300: LD_EXP 102
31304: PUSH
31305: LD_VAR 0 1
31309: ARRAY
31310: PUSH
31311: LD_VAR 0 2
31315: ARRAY
31316: PUSH
31317: LD_INT 2
31319: ARRAY
31320: PPUSH
31321: CALL_OW 458
31325: AND
31326: IFFALSE 31420
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31328: LD_EXP 102
31332: PUSH
31333: LD_VAR 0 1
31337: ARRAY
31338: PUSH
31339: LD_VAR 0 2
31343: ARRAY
31344: PUSH
31345: LD_INT 1
31347: ARRAY
31348: PPUSH
31349: LD_EXP 102
31353: PUSH
31354: LD_VAR 0 1
31358: ARRAY
31359: PUSH
31360: LD_VAR 0 2
31364: ARRAY
31365: PUSH
31366: LD_INT 2
31368: ARRAY
31369: PPUSH
31370: LD_VAR 0 3
31374: PPUSH
31375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31379: LD_ADDR_EXP 102
31383: PUSH
31384: LD_EXP 102
31388: PPUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_EXP 102
31398: PUSH
31399: LD_VAR 0 1
31403: ARRAY
31404: PPUSH
31405: LD_VAR 0 2
31409: PPUSH
31410: CALL_OW 3
31414: PPUSH
31415: CALL_OW 1
31419: ST_TO_ADDR
// end ; end ;
31420: GO 31171
31422: POP
31423: POP
// end ;
31424: GO 31089
31426: POP
31427: POP
// end ;
31428: PPOPN 4
31430: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
// result := false ;
31435: LD_ADDR_VAR 0 4
31439: PUSH
31440: LD_INT 0
31442: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 264
31452: PUSH
31453: LD_INT 81
31455: EQUAL
31456: NOT
31457: IFFALSE 31461
// exit ;
31459: GO 31701
// index := GetElementIndex ( minersList , unit ) ;
31461: LD_ADDR_VAR 0 5
31465: PUSH
31466: LD_EXP 101
31470: PPUSH
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL 37659 0 2
31480: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31481: LD_EXP 102
31485: PUSH
31486: LD_VAR 0 5
31490: ARRAY
31491: PUSH
31492: LD_EXP 103
31496: GREATEREQUAL
31497: IFFALSE 31501
// exit ;
31499: GO 31701
// ComMoveXY ( unit , x , y ) ;
31501: LD_VAR 0 1
31505: PPUSH
31506: LD_VAR 0 2
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31520: LD_INT 35
31522: PPUSH
31523: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31527: LD_VAR 0 1
31531: PPUSH
31532: LD_VAR 0 2
31536: PPUSH
31537: LD_VAR 0 3
31541: PPUSH
31542: CALL 69043 0 3
31546: NOT
31547: PUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: CALL_OW 314
31557: AND
31558: IFFALSE 31562
// exit ;
31560: GO 31701
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_VAR 0 3
31571: PPUSH
31572: CALL_OW 428
31576: PUSH
31577: LD_VAR 0 1
31581: EQUAL
31582: PUSH
31583: LD_VAR 0 1
31587: PPUSH
31588: CALL_OW 314
31592: NOT
31593: AND
31594: IFFALSE 31520
// PlaySoundXY ( x , y , PlantMine ) ;
31596: LD_VAR 0 2
31600: PPUSH
31601: LD_VAR 0 3
31605: PPUSH
31606: LD_STRING PlantMine
31608: PPUSH
31609: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31613: LD_VAR 0 2
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: LD_VAR 0 1
31627: PPUSH
31628: CALL_OW 255
31632: PPUSH
31633: LD_INT 0
31635: PPUSH
31636: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31640: LD_ADDR_EXP 102
31644: PUSH
31645: LD_EXP 102
31649: PPUSH
31650: LD_VAR 0 5
31654: PUSH
31655: LD_EXP 102
31659: PUSH
31660: LD_VAR 0 5
31664: ARRAY
31665: PUSH
31666: LD_INT 1
31668: PLUS
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PPUSH
31674: LD_VAR 0 2
31678: PUSH
31679: LD_VAR 0 3
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PPUSH
31688: CALL 37874 0 3
31692: ST_TO_ADDR
// result := true ;
31693: LD_ADDR_VAR 0 4
31697: PUSH
31698: LD_INT 1
31700: ST_TO_ADDR
// end ;
31701: LD_VAR 0 4
31705: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31706: LD_INT 0
31708: PPUSH
31709: PPUSH
31710: PPUSH
// if not unit in minersList then
31711: LD_VAR 0 1
31715: PUSH
31716: LD_EXP 101
31720: IN
31721: NOT
31722: IFFALSE 31726
// exit ;
31724: GO 32118
// index := GetElementIndex ( minersList , unit ) ;
31726: LD_ADDR_VAR 0 6
31730: PUSH
31731: LD_EXP 101
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL 37659 0 2
31745: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31746: LD_ADDR_VAR 0 5
31750: PUSH
31751: DOUBLE
31752: LD_EXP 102
31756: PUSH
31757: LD_VAR 0 6
31761: ARRAY
31762: INC
31763: ST_TO_ADDR
31764: LD_INT 1
31766: PUSH
31767: FOR_DOWNTO
31768: IFFALSE 31929
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31770: LD_EXP 102
31774: PUSH
31775: LD_VAR 0 6
31779: ARRAY
31780: PUSH
31781: LD_VAR 0 5
31785: ARRAY
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: PUSH
31791: LD_VAR 0 2
31795: EQUAL
31796: PUSH
31797: LD_EXP 102
31801: PUSH
31802: LD_VAR 0 6
31806: ARRAY
31807: PUSH
31808: LD_VAR 0 5
31812: ARRAY
31813: PUSH
31814: LD_INT 2
31816: ARRAY
31817: PUSH
31818: LD_VAR 0 3
31822: EQUAL
31823: AND
31824: IFFALSE 31927
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31826: LD_EXP 102
31830: PUSH
31831: LD_VAR 0 6
31835: ARRAY
31836: PUSH
31837: LD_VAR 0 5
31841: ARRAY
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PPUSH
31847: LD_EXP 102
31851: PUSH
31852: LD_VAR 0 6
31856: ARRAY
31857: PUSH
31858: LD_VAR 0 5
31862: ARRAY
31863: PUSH
31864: LD_INT 2
31866: ARRAY
31867: PPUSH
31868: LD_VAR 0 1
31872: PPUSH
31873: CALL_OW 255
31877: PPUSH
31878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31882: LD_ADDR_EXP 102
31886: PUSH
31887: LD_EXP 102
31891: PPUSH
31892: LD_VAR 0 6
31896: PPUSH
31897: LD_EXP 102
31901: PUSH
31902: LD_VAR 0 6
31906: ARRAY
31907: PPUSH
31908: LD_VAR 0 5
31912: PPUSH
31913: CALL_OW 3
31917: PPUSH
31918: CALL_OW 1
31922: ST_TO_ADDR
// exit ;
31923: POP
31924: POP
31925: GO 32118
// end ; end ;
31927: GO 31767
31929: POP
31930: POP
// for i := minerMinesList [ index ] downto 1 do
31931: LD_ADDR_VAR 0 5
31935: PUSH
31936: DOUBLE
31937: LD_EXP 102
31941: PUSH
31942: LD_VAR 0 6
31946: ARRAY
31947: INC
31948: ST_TO_ADDR
31949: LD_INT 1
31951: PUSH
31952: FOR_DOWNTO
31953: IFFALSE 32116
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31955: LD_EXP 102
31959: PUSH
31960: LD_VAR 0 6
31964: ARRAY
31965: PUSH
31966: LD_VAR 0 5
31970: ARRAY
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: PPUSH
31976: LD_EXP 102
31980: PUSH
31981: LD_VAR 0 6
31985: ARRAY
31986: PUSH
31987: LD_VAR 0 5
31991: ARRAY
31992: PUSH
31993: LD_INT 2
31995: ARRAY
31996: PPUSH
31997: LD_VAR 0 2
32001: PPUSH
32002: LD_VAR 0 3
32006: PPUSH
32007: CALL_OW 298
32011: PUSH
32012: LD_INT 6
32014: LESS
32015: IFFALSE 32114
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32017: LD_EXP 102
32021: PUSH
32022: LD_VAR 0 6
32026: ARRAY
32027: PUSH
32028: LD_VAR 0 5
32032: ARRAY
32033: PUSH
32034: LD_INT 1
32036: ARRAY
32037: PPUSH
32038: LD_EXP 102
32042: PUSH
32043: LD_VAR 0 6
32047: ARRAY
32048: PUSH
32049: LD_VAR 0 5
32053: ARRAY
32054: PUSH
32055: LD_INT 2
32057: ARRAY
32058: PPUSH
32059: LD_VAR 0 1
32063: PPUSH
32064: CALL_OW 255
32068: PPUSH
32069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32073: LD_ADDR_EXP 102
32077: PUSH
32078: LD_EXP 102
32082: PPUSH
32083: LD_VAR 0 6
32087: PPUSH
32088: LD_EXP 102
32092: PUSH
32093: LD_VAR 0 6
32097: ARRAY
32098: PPUSH
32099: LD_VAR 0 5
32103: PPUSH
32104: CALL_OW 3
32108: PPUSH
32109: CALL_OW 1
32113: ST_TO_ADDR
// end ; end ;
32114: GO 31952
32116: POP
32117: POP
// end ;
32118: LD_VAR 0 4
32122: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL_OW 264
32143: PUSH
32144: LD_INT 81
32146: EQUAL
32147: NOT
32148: PUSH
32149: LD_VAR 0 1
32153: PUSH
32154: LD_EXP 101
32158: IN
32159: NOT
32160: OR
32161: IFFALSE 32165
// exit ;
32163: GO 32487
// index := GetElementIndex ( minersList , unit ) ;
32165: LD_ADDR_VAR 0 6
32169: PUSH
32170: LD_EXP 101
32174: PPUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL 37659 0 2
32184: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32185: LD_ADDR_VAR 0 8
32189: PUSH
32190: LD_EXP 103
32194: PUSH
32195: LD_EXP 102
32199: PUSH
32200: LD_VAR 0 6
32204: ARRAY
32205: MINUS
32206: ST_TO_ADDR
// if not minesFreeAmount then
32207: LD_VAR 0 8
32211: NOT
32212: IFFALSE 32216
// exit ;
32214: GO 32487
// tmp := [ ] ;
32216: LD_ADDR_VAR 0 7
32220: PUSH
32221: EMPTY
32222: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: DOUBLE
32229: LD_INT 1
32231: DEC
32232: ST_TO_ADDR
32233: LD_VAR 0 8
32237: PUSH
32238: FOR_TO
32239: IFFALSE 32434
// begin _d := rand ( 0 , 5 ) ;
32241: LD_ADDR_VAR 0 11
32245: PUSH
32246: LD_INT 0
32248: PPUSH
32249: LD_INT 5
32251: PPUSH
32252: CALL_OW 12
32256: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32257: LD_ADDR_VAR 0 12
32261: PUSH
32262: LD_INT 2
32264: PPUSH
32265: LD_INT 6
32267: PPUSH
32268: CALL_OW 12
32272: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32273: LD_ADDR_VAR 0 9
32277: PUSH
32278: LD_VAR 0 2
32282: PPUSH
32283: LD_VAR 0 11
32287: PPUSH
32288: LD_VAR 0 12
32292: PPUSH
32293: CALL_OW 272
32297: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32298: LD_ADDR_VAR 0 10
32302: PUSH
32303: LD_VAR 0 3
32307: PPUSH
32308: LD_VAR 0 11
32312: PPUSH
32313: LD_VAR 0 12
32317: PPUSH
32318: CALL_OW 273
32322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32323: LD_VAR 0 9
32327: PPUSH
32328: LD_VAR 0 10
32332: PPUSH
32333: CALL_OW 488
32337: PUSH
32338: LD_VAR 0 9
32342: PUSH
32343: LD_VAR 0 10
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_VAR 0 7
32356: IN
32357: NOT
32358: AND
32359: PUSH
32360: LD_VAR 0 9
32364: PPUSH
32365: LD_VAR 0 10
32369: PPUSH
32370: CALL_OW 458
32374: NOT
32375: AND
32376: IFFALSE 32418
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32378: LD_ADDR_VAR 0 7
32382: PUSH
32383: LD_VAR 0 7
32387: PPUSH
32388: LD_VAR 0 7
32392: PUSH
32393: LD_INT 1
32395: PLUS
32396: PPUSH
32397: LD_VAR 0 9
32401: PUSH
32402: LD_VAR 0 10
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 1
32415: ST_TO_ADDR
32416: GO 32432
// i := i - 1 ;
32418: LD_ADDR_VAR 0 5
32422: PUSH
32423: LD_VAR 0 5
32427: PUSH
32428: LD_INT 1
32430: MINUS
32431: ST_TO_ADDR
// end ;
32432: GO 32238
32434: POP
32435: POP
// for i in tmp do
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: LD_VAR 0 7
32445: PUSH
32446: FOR_IN
32447: IFFALSE 32485
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32449: LD_VAR 0 1
32453: PPUSH
32454: LD_VAR 0 5
32458: PUSH
32459: LD_INT 1
32461: ARRAY
32462: PPUSH
32463: LD_VAR 0 5
32467: PUSH
32468: LD_INT 2
32470: ARRAY
32471: PPUSH
32472: CALL 31431 0 3
32476: NOT
32477: IFFALSE 32483
// exit ;
32479: POP
32480: POP
32481: GO 32487
32483: GO 32446
32485: POP
32486: POP
// end ;
32487: LD_VAR 0 4
32491: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32492: LD_INT 0
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
// if not GetClass ( unit ) = class_sniper then
32501: LD_VAR 0 1
32505: PPUSH
32506: CALL_OW 257
32510: PUSH
32511: LD_INT 5
32513: EQUAL
32514: NOT
32515: IFFALSE 32519
// exit ;
32517: GO 32907
// dist := 8 ;
32519: LD_ADDR_VAR 0 5
32523: PUSH
32524: LD_INT 8
32526: ST_TO_ADDR
// viewRange := 12 ;
32527: LD_ADDR_VAR 0 7
32531: PUSH
32532: LD_INT 12
32534: ST_TO_ADDR
// side := GetSide ( unit ) ;
32535: LD_ADDR_VAR 0 6
32539: PUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: CALL_OW 255
32549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32550: LD_INT 61
32552: PPUSH
32553: LD_VAR 0 6
32557: PPUSH
32558: CALL_OW 321
32562: PUSH
32563: LD_INT 2
32565: EQUAL
32566: IFFALSE 32576
// viewRange := 16 ;
32568: LD_ADDR_VAR 0 7
32572: PUSH
32573: LD_INT 16
32575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32576: LD_VAR 0 1
32580: PPUSH
32581: LD_VAR 0 2
32585: PPUSH
32586: LD_VAR 0 3
32590: PPUSH
32591: CALL_OW 297
32595: PUSH
32596: LD_VAR 0 5
32600: GREATER
32601: IFFALSE 32680
// begin ComMoveXY ( unit , x , y ) ;
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_VAR 0 3
32617: PPUSH
32618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32622: LD_INT 35
32624: PPUSH
32625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32629: LD_VAR 0 1
32633: PPUSH
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL 69043 0 3
32648: NOT
32649: IFFALSE 32653
// exit ;
32651: GO 32907
// until GetDistUnitXY ( unit , x , y ) < dist ;
32653: LD_VAR 0 1
32657: PPUSH
32658: LD_VAR 0 2
32662: PPUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 297
32672: PUSH
32673: LD_VAR 0 5
32677: LESS
32678: IFFALSE 32622
// end ; ComTurnXY ( unit , x , y ) ;
32680: LD_VAR 0 1
32684: PPUSH
32685: LD_VAR 0 2
32689: PPUSH
32690: LD_VAR 0 3
32694: PPUSH
32695: CALL_OW 118
// wait ( 5 ) ;
32699: LD_INT 5
32701: PPUSH
32702: CALL_OW 67
// _d := GetDir ( unit ) ;
32706: LD_ADDR_VAR 0 10
32710: PUSH
32711: LD_VAR 0 1
32715: PPUSH
32716: CALL_OW 254
32720: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32721: LD_ADDR_VAR 0 8
32725: PUSH
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 250
32735: PPUSH
32736: LD_VAR 0 10
32740: PPUSH
32741: LD_VAR 0 5
32745: PPUSH
32746: CALL_OW 272
32750: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32751: LD_ADDR_VAR 0 9
32755: PUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 251
32765: PPUSH
32766: LD_VAR 0 10
32770: PPUSH
32771: LD_VAR 0 5
32775: PPUSH
32776: CALL_OW 273
32780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32781: LD_VAR 0 8
32785: PPUSH
32786: LD_VAR 0 9
32790: PPUSH
32791: CALL_OW 488
32795: NOT
32796: IFFALSE 32800
// exit ;
32798: GO 32907
// ComAnimCustom ( unit , 1 ) ;
32800: LD_VAR 0 1
32804: PPUSH
32805: LD_INT 1
32807: PPUSH
32808: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32812: LD_VAR 0 8
32816: PPUSH
32817: LD_VAR 0 9
32821: PPUSH
32822: LD_VAR 0 6
32826: PPUSH
32827: LD_VAR 0 7
32831: PPUSH
32832: CALL_OW 330
// repeat wait ( 1 ) ;
32836: LD_INT 1
32838: PPUSH
32839: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 316
32852: PUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 314
32862: OR
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 302
32873: NOT
32874: OR
32875: PUSH
32876: LD_VAR 0 1
32880: PPUSH
32881: CALL_OW 301
32885: OR
32886: IFFALSE 32836
// RemoveSeeing ( _x , _y , side ) ;
32888: LD_VAR 0 8
32892: PPUSH
32893: LD_VAR 0 9
32897: PPUSH
32898: LD_VAR 0 6
32902: PPUSH
32903: CALL_OW 331
// end ; end_of_file
32907: LD_VAR 0 4
32911: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32912: LD_INT 0
32914: PPUSH
32915: PPUSH
// if exist_mode then
32916: LD_VAR 0 2
32920: IFFALSE 32945
// unit := CreateCharacter ( prefix & ident ) else
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: LD_VAR 0 3
32931: PUSH
32932: LD_VAR 0 1
32936: STR
32937: PPUSH
32938: CALL_OW 34
32942: ST_TO_ADDR
32943: GO 32960
// unit := NewCharacter ( ident ) ;
32945: LD_ADDR_VAR 0 5
32949: PUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 25
32959: ST_TO_ADDR
// result := unit ;
32960: LD_ADDR_VAR 0 4
32964: PUSH
32965: LD_VAR 0 5
32969: ST_TO_ADDR
// end ;
32970: LD_VAR 0 4
32974: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
// if not side or not nation then
32979: LD_VAR 0 1
32983: NOT
32984: PUSH
32985: LD_VAR 0 2
32989: NOT
32990: OR
32991: IFFALSE 32995
// exit ;
32993: GO 33763
// case nation of nation_american :
32995: LD_VAR 0 2
32999: PUSH
33000: LD_INT 1
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33222
33008: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33009: LD_ADDR_VAR 0 4
33013: PUSH
33014: LD_INT 35
33016: PUSH
33017: LD_INT 45
33019: PUSH
33020: LD_INT 46
33022: PUSH
33023: LD_INT 47
33025: PUSH
33026: LD_INT 82
33028: PUSH
33029: LD_INT 83
33031: PUSH
33032: LD_INT 84
33034: PUSH
33035: LD_INT 85
33037: PUSH
33038: LD_INT 86
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 6
33049: PUSH
33050: LD_INT 15
33052: PUSH
33053: LD_INT 16
33055: PUSH
33056: LD_INT 7
33058: PUSH
33059: LD_INT 12
33061: PUSH
33062: LD_INT 13
33064: PUSH
33065: LD_INT 10
33067: PUSH
33068: LD_INT 14
33070: PUSH
33071: LD_INT 20
33073: PUSH
33074: LD_INT 21
33076: PUSH
33077: LD_INT 22
33079: PUSH
33080: LD_INT 25
33082: PUSH
33083: LD_INT 32
33085: PUSH
33086: LD_INT 27
33088: PUSH
33089: LD_INT 36
33091: PUSH
33092: LD_INT 69
33094: PUSH
33095: LD_INT 39
33097: PUSH
33098: LD_INT 34
33100: PUSH
33101: LD_INT 40
33103: PUSH
33104: LD_INT 48
33106: PUSH
33107: LD_INT 49
33109: PUSH
33110: LD_INT 50
33112: PUSH
33113: LD_INT 51
33115: PUSH
33116: LD_INT 52
33118: PUSH
33119: LD_INT 53
33121: PUSH
33122: LD_INT 54
33124: PUSH
33125: LD_INT 55
33127: PUSH
33128: LD_INT 56
33130: PUSH
33131: LD_INT 57
33133: PUSH
33134: LD_INT 58
33136: PUSH
33137: LD_INT 59
33139: PUSH
33140: LD_INT 60
33142: PUSH
33143: LD_INT 61
33145: PUSH
33146: LD_INT 62
33148: PUSH
33149: LD_INT 80
33151: PUSH
33152: LD_INT 82
33154: PUSH
33155: LD_INT 83
33157: PUSH
33158: LD_INT 84
33160: PUSH
33161: LD_INT 85
33163: PUSH
33164: LD_INT 86
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
33220: GO 33687
33222: LD_INT 2
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33456
33230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33231: LD_ADDR_VAR 0 4
33235: PUSH
33236: LD_INT 35
33238: PUSH
33239: LD_INT 45
33241: PUSH
33242: LD_INT 46
33244: PUSH
33245: LD_INT 47
33247: PUSH
33248: LD_INT 82
33250: PUSH
33251: LD_INT 83
33253: PUSH
33254: LD_INT 84
33256: PUSH
33257: LD_INT 85
33259: PUSH
33260: LD_INT 87
33262: PUSH
33263: LD_INT 70
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: LD_INT 4
33277: PUSH
33278: LD_INT 5
33280: PUSH
33281: LD_INT 6
33283: PUSH
33284: LD_INT 15
33286: PUSH
33287: LD_INT 18
33289: PUSH
33290: LD_INT 7
33292: PUSH
33293: LD_INT 17
33295: PUSH
33296: LD_INT 8
33298: PUSH
33299: LD_INT 20
33301: PUSH
33302: LD_INT 21
33304: PUSH
33305: LD_INT 22
33307: PUSH
33308: LD_INT 72
33310: PUSH
33311: LD_INT 26
33313: PUSH
33314: LD_INT 69
33316: PUSH
33317: LD_INT 39
33319: PUSH
33320: LD_INT 40
33322: PUSH
33323: LD_INT 41
33325: PUSH
33326: LD_INT 42
33328: PUSH
33329: LD_INT 43
33331: PUSH
33332: LD_INT 48
33334: PUSH
33335: LD_INT 49
33337: PUSH
33338: LD_INT 50
33340: PUSH
33341: LD_INT 51
33343: PUSH
33344: LD_INT 52
33346: PUSH
33347: LD_INT 53
33349: PUSH
33350: LD_INT 54
33352: PUSH
33353: LD_INT 55
33355: PUSH
33356: LD_INT 56
33358: PUSH
33359: LD_INT 60
33361: PUSH
33362: LD_INT 61
33364: PUSH
33365: LD_INT 62
33367: PUSH
33368: LD_INT 66
33370: PUSH
33371: LD_INT 67
33373: PUSH
33374: LD_INT 68
33376: PUSH
33377: LD_INT 81
33379: PUSH
33380: LD_INT 82
33382: PUSH
33383: LD_INT 83
33385: PUSH
33386: LD_INT 84
33388: PUSH
33389: LD_INT 85
33391: PUSH
33392: LD_INT 87
33394: PUSH
33395: LD_INT 88
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: ST_TO_ADDR
33454: GO 33687
33456: LD_INT 3
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33686
33464: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33465: LD_ADDR_VAR 0 4
33469: PUSH
33470: LD_INT 46
33472: PUSH
33473: LD_INT 47
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 82
33484: PUSH
33485: LD_INT 83
33487: PUSH
33488: LD_INT 84
33490: PUSH
33491: LD_INT 85
33493: PUSH
33494: LD_INT 86
33496: PUSH
33497: LD_INT 11
33499: PUSH
33500: LD_INT 9
33502: PUSH
33503: LD_INT 20
33505: PUSH
33506: LD_INT 19
33508: PUSH
33509: LD_INT 21
33511: PUSH
33512: LD_INT 24
33514: PUSH
33515: LD_INT 22
33517: PUSH
33518: LD_INT 25
33520: PUSH
33521: LD_INT 28
33523: PUSH
33524: LD_INT 29
33526: PUSH
33527: LD_INT 30
33529: PUSH
33530: LD_INT 31
33532: PUSH
33533: LD_INT 37
33535: PUSH
33536: LD_INT 38
33538: PUSH
33539: LD_INT 32
33541: PUSH
33542: LD_INT 27
33544: PUSH
33545: LD_INT 33
33547: PUSH
33548: LD_INT 69
33550: PUSH
33551: LD_INT 39
33553: PUSH
33554: LD_INT 34
33556: PUSH
33557: LD_INT 40
33559: PUSH
33560: LD_INT 71
33562: PUSH
33563: LD_INT 23
33565: PUSH
33566: LD_INT 44
33568: PUSH
33569: LD_INT 48
33571: PUSH
33572: LD_INT 49
33574: PUSH
33575: LD_INT 50
33577: PUSH
33578: LD_INT 51
33580: PUSH
33581: LD_INT 52
33583: PUSH
33584: LD_INT 53
33586: PUSH
33587: LD_INT 54
33589: PUSH
33590: LD_INT 55
33592: PUSH
33593: LD_INT 56
33595: PUSH
33596: LD_INT 57
33598: PUSH
33599: LD_INT 58
33601: PUSH
33602: LD_INT 59
33604: PUSH
33605: LD_INT 63
33607: PUSH
33608: LD_INT 64
33610: PUSH
33611: LD_INT 65
33613: PUSH
33614: LD_INT 82
33616: PUSH
33617: LD_INT 83
33619: PUSH
33620: LD_INT 84
33622: PUSH
33623: LD_INT 85
33625: PUSH
33626: LD_INT 86
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
33684: GO 33687
33686: POP
// if state > - 1 and state < 3 then
33687: LD_VAR 0 3
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: GREATER
33696: PUSH
33697: LD_VAR 0 3
33701: PUSH
33702: LD_INT 3
33704: LESS
33705: AND
33706: IFFALSE 33763
// for i in result do
33708: LD_ADDR_VAR 0 5
33712: PUSH
33713: LD_VAR 0 4
33717: PUSH
33718: FOR_IN
33719: IFFALSE 33761
// if GetTech ( i , side ) <> state then
33721: LD_VAR 0 5
33725: PPUSH
33726: LD_VAR 0 1
33730: PPUSH
33731: CALL_OW 321
33735: PUSH
33736: LD_VAR 0 3
33740: NONEQUAL
33741: IFFALSE 33759
// result := result diff i ;
33743: LD_ADDR_VAR 0 4
33747: PUSH
33748: LD_VAR 0 4
33752: PUSH
33753: LD_VAR 0 5
33757: DIFF
33758: ST_TO_ADDR
33759: GO 33718
33761: POP
33762: POP
// end ;
33763: LD_VAR 0 4
33767: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
33772: PPUSH
// result := true ;
33773: LD_ADDR_VAR 0 3
33777: PUSH
33778: LD_INT 1
33780: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33781: LD_ADDR_VAR 0 5
33785: PUSH
33786: LD_VAR 0 2
33790: PPUSH
33791: CALL_OW 480
33795: ST_TO_ADDR
// if not tmp then
33796: LD_VAR 0 5
33800: NOT
33801: IFFALSE 33805
// exit ;
33803: GO 33854
// for i in tmp do
33805: LD_ADDR_VAR 0 4
33809: PUSH
33810: LD_VAR 0 5
33814: PUSH
33815: FOR_IN
33816: IFFALSE 33852
// if GetTech ( i , side ) <> state_researched then
33818: LD_VAR 0 4
33822: PPUSH
33823: LD_VAR 0 1
33827: PPUSH
33828: CALL_OW 321
33832: PUSH
33833: LD_INT 2
33835: NONEQUAL
33836: IFFALSE 33850
// begin result := false ;
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 0
33845: ST_TO_ADDR
// exit ;
33846: POP
33847: POP
33848: GO 33854
// end ;
33850: GO 33815
33852: POP
33853: POP
// end ;
33854: LD_VAR 0 3
33858: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33859: LD_INT 0
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33874: LD_VAR 0 1
33878: NOT
33879: PUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL_OW 257
33889: PUSH
33890: LD_INT 9
33892: NONEQUAL
33893: OR
33894: IFFALSE 33898
// exit ;
33896: GO 34471
// side := GetSide ( unit ) ;
33898: LD_ADDR_VAR 0 9
33902: PUSH
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 255
33912: ST_TO_ADDR
// tech_space := tech_spacanom ;
33913: LD_ADDR_VAR 0 12
33917: PUSH
33918: LD_INT 29
33920: ST_TO_ADDR
// tech_time := tech_taurad ;
33921: LD_ADDR_VAR 0 13
33925: PUSH
33926: LD_INT 28
33928: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33929: LD_ADDR_VAR 0 11
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 310
33943: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33944: LD_VAR 0 11
33948: PPUSH
33949: CALL_OW 247
33953: PUSH
33954: LD_INT 2
33956: EQUAL
33957: IFFALSE 33961
// exit ;
33959: GO 34471
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33961: LD_ADDR_VAR 0 8
33965: PUSH
33966: LD_INT 81
33968: PUSH
33969: LD_VAR 0 9
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: PUSH
33981: LD_INT 21
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PPUSH
33999: CALL_OW 69
34003: ST_TO_ADDR
// if not tmp then
34004: LD_VAR 0 8
34008: NOT
34009: IFFALSE 34013
// exit ;
34011: GO 34471
// if in_unit then
34013: LD_VAR 0 11
34017: IFFALSE 34041
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34019: LD_ADDR_VAR 0 10
34023: PUSH
34024: LD_VAR 0 8
34028: PPUSH
34029: LD_VAR 0 11
34033: PPUSH
34034: CALL_OW 74
34038: ST_TO_ADDR
34039: GO 34061
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34041: LD_ADDR_VAR 0 10
34045: PUSH
34046: LD_VAR 0 8
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 74
34060: ST_TO_ADDR
// if not enemy then
34061: LD_VAR 0 10
34065: NOT
34066: IFFALSE 34070
// exit ;
34068: GO 34471
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34070: LD_VAR 0 11
34074: PUSH
34075: LD_VAR 0 11
34079: PPUSH
34080: LD_VAR 0 10
34084: PPUSH
34085: CALL_OW 296
34089: PUSH
34090: LD_INT 13
34092: GREATER
34093: AND
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: LD_VAR 0 10
34104: PPUSH
34105: CALL_OW 296
34109: PUSH
34110: LD_INT 12
34112: GREATER
34113: OR
34114: IFFALSE 34118
// exit ;
34116: GO 34471
// missile := [ 1 ] ;
34118: LD_ADDR_VAR 0 14
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34129: LD_VAR 0 9
34133: PPUSH
34134: LD_VAR 0 12
34138: PPUSH
34139: CALL_OW 325
34143: IFFALSE 34172
// missile := Replace ( missile , missile + 1 , 2 ) ;
34145: LD_ADDR_VAR 0 14
34149: PUSH
34150: LD_VAR 0 14
34154: PPUSH
34155: LD_VAR 0 14
34159: PUSH
34160: LD_INT 1
34162: PLUS
34163: PPUSH
34164: LD_INT 2
34166: PPUSH
34167: CALL_OW 1
34171: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34172: LD_VAR 0 9
34176: PPUSH
34177: LD_VAR 0 13
34181: PPUSH
34182: CALL_OW 325
34186: PUSH
34187: LD_VAR 0 10
34191: PPUSH
34192: CALL_OW 255
34196: PPUSH
34197: LD_VAR 0 13
34201: PPUSH
34202: CALL_OW 325
34206: NOT
34207: AND
34208: IFFALSE 34237
// missile := Replace ( missile , missile + 1 , 3 ) ;
34210: LD_ADDR_VAR 0 14
34214: PUSH
34215: LD_VAR 0 14
34219: PPUSH
34220: LD_VAR 0 14
34224: PUSH
34225: LD_INT 1
34227: PLUS
34228: PPUSH
34229: LD_INT 3
34231: PPUSH
34232: CALL_OW 1
34236: ST_TO_ADDR
// if missile < 2 then
34237: LD_VAR 0 14
34241: PUSH
34242: LD_INT 2
34244: LESS
34245: IFFALSE 34249
// exit ;
34247: GO 34471
// x := GetX ( enemy ) ;
34249: LD_ADDR_VAR 0 4
34253: PUSH
34254: LD_VAR 0 10
34258: PPUSH
34259: CALL_OW 250
34263: ST_TO_ADDR
// y := GetY ( enemy ) ;
34264: LD_ADDR_VAR 0 5
34268: PUSH
34269: LD_VAR 0 10
34273: PPUSH
34274: CALL_OW 251
34278: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: LD_VAR 0 4
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PPUSH
34293: LD_INT 1
34295: PPUSH
34296: CALL_OW 12
34300: PLUS
34301: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34302: LD_ADDR_VAR 0 7
34306: PUSH
34307: LD_VAR 0 5
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PPUSH
34316: LD_INT 1
34318: PPUSH
34319: CALL_OW 12
34323: PLUS
34324: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34325: LD_VAR 0 6
34329: PPUSH
34330: LD_VAR 0 7
34334: PPUSH
34335: CALL_OW 488
34339: NOT
34340: IFFALSE 34362
// begin _x := x ;
34342: LD_ADDR_VAR 0 6
34346: PUSH
34347: LD_VAR 0 4
34351: ST_TO_ADDR
// _y := y ;
34352: LD_ADDR_VAR 0 7
34356: PUSH
34357: LD_VAR 0 5
34361: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: LD_INT 1
34369: PPUSH
34370: LD_VAR 0 14
34374: PPUSH
34375: CALL_OW 12
34379: ST_TO_ADDR
// case i of 1 :
34380: LD_VAR 0 3
34384: PUSH
34385: LD_INT 1
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34393
34391: GO 34410
34393: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34394: LD_VAR 0 1
34398: PPUSH
34399: LD_VAR 0 10
34403: PPUSH
34404: CALL_OW 115
34408: GO 34471
34410: LD_INT 2
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34440
34418: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34419: LD_VAR 0 1
34423: PPUSH
34424: LD_VAR 0 6
34428: PPUSH
34429: LD_VAR 0 7
34433: PPUSH
34434: CALL_OW 153
34438: GO 34471
34440: LD_INT 3
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34448
34446: GO 34470
34448: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34449: LD_VAR 0 1
34453: PPUSH
34454: LD_VAR 0 6
34458: PPUSH
34459: LD_VAR 0 7
34463: PPUSH
34464: CALL_OW 154
34468: GO 34471
34470: POP
// end ;
34471: LD_VAR 0 2
34475: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34476: LD_INT 0
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
// if not unit or not building then
34484: LD_VAR 0 1
34488: NOT
34489: PUSH
34490: LD_VAR 0 2
34494: NOT
34495: OR
34496: IFFALSE 34500
// exit ;
34498: GO 34658
// x := GetX ( building ) ;
34500: LD_ADDR_VAR 0 5
34504: PUSH
34505: LD_VAR 0 2
34509: PPUSH
34510: CALL_OW 250
34514: ST_TO_ADDR
// y := GetY ( building ) ;
34515: LD_ADDR_VAR 0 6
34519: PUSH
34520: LD_VAR 0 2
34524: PPUSH
34525: CALL_OW 251
34529: ST_TO_ADDR
// for i = 0 to 5 do
34530: LD_ADDR_VAR 0 4
34534: PUSH
34535: DOUBLE
34536: LD_INT 0
34538: DEC
34539: ST_TO_ADDR
34540: LD_INT 5
34542: PUSH
34543: FOR_TO
34544: IFFALSE 34656
// begin _x := ShiftX ( x , i , 3 ) ;
34546: LD_ADDR_VAR 0 7
34550: PUSH
34551: LD_VAR 0 5
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: LD_INT 3
34563: PPUSH
34564: CALL_OW 272
34568: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34569: LD_ADDR_VAR 0 8
34573: PUSH
34574: LD_VAR 0 6
34578: PPUSH
34579: LD_VAR 0 4
34583: PPUSH
34584: LD_INT 3
34586: PPUSH
34587: CALL_OW 273
34591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34592: LD_VAR 0 7
34596: PPUSH
34597: LD_VAR 0 8
34601: PPUSH
34602: CALL_OW 488
34606: NOT
34607: IFFALSE 34611
// continue ;
34609: GO 34543
// if HexInfo ( _x , _y ) = 0 then
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_VAR 0 8
34620: PPUSH
34621: CALL_OW 428
34625: PUSH
34626: LD_INT 0
34628: EQUAL
34629: IFFALSE 34654
// begin ComMoveXY ( unit , _x , _y ) ;
34631: LD_VAR 0 1
34635: PPUSH
34636: LD_VAR 0 7
34640: PPUSH
34641: LD_VAR 0 8
34645: PPUSH
34646: CALL_OW 111
// exit ;
34650: POP
34651: POP
34652: GO 34658
// end ; end ;
34654: GO 34543
34656: POP
34657: POP
// end ;
34658: LD_VAR 0 3
34662: RET
// export function ScanBase ( side , base_area ) ; begin
34663: LD_INT 0
34665: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_VAR 0 2
34675: PPUSH
34676: LD_INT 81
34678: PUSH
34679: LD_VAR 0 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 70
34692: ST_TO_ADDR
// end ;
34693: LD_VAR 0 3
34697: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
// result := false ;
34704: LD_ADDR_VAR 0 2
34708: PUSH
34709: LD_INT 0
34711: ST_TO_ADDR
// side := GetSide ( unit ) ;
34712: LD_ADDR_VAR 0 3
34716: PUSH
34717: LD_VAR 0 1
34721: PPUSH
34722: CALL_OW 255
34726: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34727: LD_ADDR_VAR 0 4
34731: PUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 248
34741: ST_TO_ADDR
// case nat of 1 :
34742: LD_VAR 0 4
34746: PUSH
34747: LD_INT 1
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34766
34755: POP
// tech := tech_lassight ; 2 :
34756: LD_ADDR_VAR 0 5
34760: PUSH
34761: LD_INT 12
34763: ST_TO_ADDR
34764: GO 34805
34766: LD_INT 2
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34785
34774: POP
// tech := tech_mortar ; 3 :
34775: LD_ADDR_VAR 0 5
34779: PUSH
34780: LD_INT 41
34782: ST_TO_ADDR
34783: GO 34805
34785: LD_INT 3
34787: DOUBLE
34788: EQUAL
34789: IFTRUE 34793
34791: GO 34804
34793: POP
// tech := tech_bazooka ; end ;
34794: LD_ADDR_VAR 0 5
34798: PUSH
34799: LD_INT 44
34801: ST_TO_ADDR
34802: GO 34805
34804: POP
// if Researched ( side , tech ) then
34805: LD_VAR 0 3
34809: PPUSH
34810: LD_VAR 0 5
34814: PPUSH
34815: CALL_OW 325
34819: IFFALSE 34846
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34821: LD_ADDR_VAR 0 2
34825: PUSH
34826: LD_INT 5
34828: PUSH
34829: LD_INT 8
34831: PUSH
34832: LD_INT 9
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 4
34844: ARRAY
34845: ST_TO_ADDR
// end ;
34846: LD_VAR 0 2
34850: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34851: LD_INT 0
34853: PPUSH
34854: PPUSH
34855: PPUSH
// if not mines then
34856: LD_VAR 0 2
34860: NOT
34861: IFFALSE 34865
// exit ;
34863: GO 35009
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_INT 81
34872: PUSH
34873: LD_VAR 0 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: LD_INT 21
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PPUSH
34903: CALL_OW 69
34907: ST_TO_ADDR
// for i in mines do
34908: LD_ADDR_VAR 0 4
34912: PUSH
34913: LD_VAR 0 2
34917: PUSH
34918: FOR_IN
34919: IFFALSE 35007
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34921: LD_VAR 0 4
34925: PUSH
34926: LD_INT 1
34928: ARRAY
34929: PPUSH
34930: LD_VAR 0 4
34934: PUSH
34935: LD_INT 2
34937: ARRAY
34938: PPUSH
34939: CALL_OW 458
34943: NOT
34944: IFFALSE 34948
// continue ;
34946: GO 34918
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34948: LD_VAR 0 4
34952: PUSH
34953: LD_INT 1
34955: ARRAY
34956: PPUSH
34957: LD_VAR 0 4
34961: PUSH
34962: LD_INT 2
34964: ARRAY
34965: PPUSH
34966: CALL_OW 428
34970: PUSH
34971: LD_VAR 0 5
34975: IN
34976: IFFALSE 35005
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34978: LD_VAR 0 4
34982: PUSH
34983: LD_INT 1
34985: ARRAY
34986: PPUSH
34987: LD_VAR 0 4
34991: PUSH
34992: LD_INT 2
34994: ARRAY
34995: PPUSH
34996: LD_VAR 0 1
35000: PPUSH
35001: CALL_OW 456
// end ;
35005: GO 34918
35007: POP
35008: POP
// end ;
35009: LD_VAR 0 3
35013: RET
// export function Count ( array ) ; begin
35014: LD_INT 0
35016: PPUSH
// result := array + 0 ;
35017: LD_ADDR_VAR 0 2
35021: PUSH
35022: LD_VAR 0 1
35026: PUSH
35027: LD_INT 0
35029: PLUS
35030: ST_TO_ADDR
// end ;
35031: LD_VAR 0 2
35035: RET
// export function IsEmpty ( building ) ; begin
35036: LD_INT 0
35038: PPUSH
// if not building then
35039: LD_VAR 0 1
35043: NOT
35044: IFFALSE 35048
// exit ;
35046: GO 35091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35048: LD_ADDR_VAR 0 2
35052: PUSH
35053: LD_VAR 0 1
35057: PUSH
35058: LD_INT 22
35060: PUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 255
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 58
35077: PUSH
35078: EMPTY
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PPUSH
35085: CALL_OW 69
35089: IN
35090: ST_TO_ADDR
// end ;
35091: LD_VAR 0 2
35095: RET
// export function IsNotFull ( building ) ; var places ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
// if not building then
35100: LD_VAR 0 1
35104: NOT
35105: IFFALSE 35109
// exit ;
35107: GO 35137
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35109: LD_ADDR_VAR 0 2
35113: PUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: LD_INT 3
35121: PUSH
35122: LD_INT 62
35124: PUSH
35125: EMPTY
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 72
35136: ST_TO_ADDR
// end ;
35137: LD_VAR 0 2
35141: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35142: LD_INT 0
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
// tmp := [ ] ;
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: EMPTY
35154: ST_TO_ADDR
// list := [ ] ;
35155: LD_ADDR_VAR 0 5
35159: PUSH
35160: EMPTY
35161: ST_TO_ADDR
// for i = 16 to 25 do
35162: LD_ADDR_VAR 0 4
35166: PUSH
35167: DOUBLE
35168: LD_INT 16
35170: DEC
35171: ST_TO_ADDR
35172: LD_INT 25
35174: PUSH
35175: FOR_TO
35176: IFFALSE 35249
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35178: LD_ADDR_VAR 0 3
35182: PUSH
35183: LD_VAR 0 3
35187: PUSH
35188: LD_INT 22
35190: PUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 255
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 91
35207: PUSH
35208: LD_VAR 0 1
35212: PUSH
35213: LD_INT 6
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 30
35223: PUSH
35224: LD_VAR 0 4
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: PUSH
35238: EMPTY
35239: LIST
35240: PPUSH
35241: CALL_OW 69
35245: ADD
35246: ST_TO_ADDR
35247: GO 35175
35249: POP
35250: POP
// for i = 1 to tmp do
35251: LD_ADDR_VAR 0 4
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_VAR 0 3
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35355
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35269: LD_ADDR_VAR 0 5
35273: PUSH
35274: LD_VAR 0 5
35278: PUSH
35279: LD_VAR 0 3
35283: PUSH
35284: LD_VAR 0 4
35288: ARRAY
35289: PPUSH
35290: CALL_OW 266
35294: PUSH
35295: LD_VAR 0 3
35299: PUSH
35300: LD_VAR 0 4
35304: ARRAY
35305: PPUSH
35306: CALL_OW 250
35310: PUSH
35311: LD_VAR 0 3
35315: PUSH
35316: LD_VAR 0 4
35320: ARRAY
35321: PPUSH
35322: CALL_OW 251
35326: PUSH
35327: LD_VAR 0 3
35331: PUSH
35332: LD_VAR 0 4
35336: ARRAY
35337: PPUSH
35338: CALL_OW 254
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: ADD
35352: ST_TO_ADDR
35353: GO 35266
35355: POP
35356: POP
// result := list ;
35357: LD_ADDR_VAR 0 2
35361: PUSH
35362: LD_VAR 0 5
35366: ST_TO_ADDR
// end ;
35367: LD_VAR 0 2
35371: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35372: LD_INT 0
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
// if not factory then
35381: LD_VAR 0 1
35385: NOT
35386: IFFALSE 35390
// exit ;
35388: GO 35983
// if control = control_apeman then
35390: LD_VAR 0 4
35394: PUSH
35395: LD_INT 5
35397: EQUAL
35398: IFFALSE 35507
// begin tmp := UnitsInside ( factory ) ;
35400: LD_ADDR_VAR 0 8
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 313
35414: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35415: LD_VAR 0 8
35419: PPUSH
35420: LD_INT 25
35422: PUSH
35423: LD_INT 12
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PPUSH
35430: CALL_OW 72
35434: NOT
35435: IFFALSE 35445
// control := control_manual ;
35437: LD_ADDR_VAR 0 4
35441: PUSH
35442: LD_INT 1
35444: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35445: LD_ADDR_VAR 0 8
35449: PUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL 35142 0 1
35459: ST_TO_ADDR
// if tmp then
35460: LD_VAR 0 8
35464: IFFALSE 35507
// begin for i in tmp do
35466: LD_ADDR_VAR 0 7
35470: PUSH
35471: LD_VAR 0 8
35475: PUSH
35476: FOR_IN
35477: IFFALSE 35505
// if i [ 1 ] = b_ext_radio then
35479: LD_VAR 0 7
35483: PUSH
35484: LD_INT 1
35486: ARRAY
35487: PUSH
35488: LD_INT 22
35490: EQUAL
35491: IFFALSE 35503
// begin control := control_remote ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_INT 2
35500: ST_TO_ADDR
// break ;
35501: GO 35505
// end ;
35503: GO 35476
35505: POP
35506: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35507: LD_VAR 0 1
35511: PPUSH
35512: LD_VAR 0 2
35516: PPUSH
35517: LD_VAR 0 3
35521: PPUSH
35522: LD_VAR 0 4
35526: PPUSH
35527: LD_VAR 0 5
35531: PPUSH
35532: CALL_OW 448
35536: IFFALSE 35571
// begin result := [ chassis , engine , control , weapon ] ;
35538: LD_ADDR_VAR 0 6
35542: PUSH
35543: LD_VAR 0 2
35547: PUSH
35548: LD_VAR 0 3
35552: PUSH
35553: LD_VAR 0 4
35557: PUSH
35558: LD_VAR 0 5
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// exit ;
35569: GO 35983
// end ; _chassis := AvailableChassisList ( factory ) ;
35571: LD_ADDR_VAR 0 9
35575: PUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: CALL_OW 475
35585: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35586: LD_ADDR_VAR 0 11
35590: PUSH
35591: LD_VAR 0 1
35595: PPUSH
35596: CALL_OW 476
35600: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35601: LD_ADDR_VAR 0 12
35605: PUSH
35606: LD_VAR 0 1
35610: PPUSH
35611: CALL_OW 477
35615: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35616: LD_ADDR_VAR 0 10
35620: PUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 478
35630: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35631: LD_VAR 0 9
35635: NOT
35636: PUSH
35637: LD_VAR 0 11
35641: NOT
35642: OR
35643: PUSH
35644: LD_VAR 0 12
35648: NOT
35649: OR
35650: PUSH
35651: LD_VAR 0 10
35655: NOT
35656: OR
35657: IFFALSE 35692
// begin result := [ chassis , engine , control , weapon ] ;
35659: LD_ADDR_VAR 0 6
35663: PUSH
35664: LD_VAR 0 2
35668: PUSH
35669: LD_VAR 0 3
35673: PUSH
35674: LD_VAR 0 4
35678: PUSH
35679: LD_VAR 0 5
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// exit ;
35690: GO 35983
// end ; if not chassis in _chassis then
35692: LD_VAR 0 2
35696: PUSH
35697: LD_VAR 0 9
35701: IN
35702: NOT
35703: IFFALSE 35729
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35705: LD_ADDR_VAR 0 2
35709: PUSH
35710: LD_VAR 0 9
35714: PUSH
35715: LD_INT 1
35717: PPUSH
35718: LD_VAR 0 9
35722: PPUSH
35723: CALL_OW 12
35727: ARRAY
35728: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35729: LD_VAR 0 2
35733: PPUSH
35734: LD_VAR 0 3
35738: PPUSH
35739: CALL 35988 0 2
35743: NOT
35744: IFFALSE 35803
// repeat engine := _engine [ 1 ] ;
35746: LD_ADDR_VAR 0 3
35750: PUSH
35751: LD_VAR 0 11
35755: PUSH
35756: LD_INT 1
35758: ARRAY
35759: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35760: LD_ADDR_VAR 0 11
35764: PUSH
35765: LD_VAR 0 11
35769: PPUSH
35770: LD_INT 1
35772: PPUSH
35773: CALL_OW 3
35777: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35778: LD_VAR 0 2
35782: PPUSH
35783: LD_VAR 0 3
35787: PPUSH
35788: CALL 35988 0 2
35792: PUSH
35793: LD_VAR 0 11
35797: PUSH
35798: EMPTY
35799: EQUAL
35800: OR
35801: IFFALSE 35746
// if not control in _control then
35803: LD_VAR 0 4
35807: PUSH
35808: LD_VAR 0 12
35812: IN
35813: NOT
35814: IFFALSE 35840
// control := _control [ rand ( 1 , _control ) ] ;
35816: LD_ADDR_VAR 0 4
35820: PUSH
35821: LD_VAR 0 12
35825: PUSH
35826: LD_INT 1
35828: PPUSH
35829: LD_VAR 0 12
35833: PPUSH
35834: CALL_OW 12
35838: ARRAY
35839: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 5
35849: PPUSH
35850: CALL 36208 0 2
35854: NOT
35855: IFFALSE 35914
// repeat weapon := _weapon [ 1 ] ;
35857: LD_ADDR_VAR 0 5
35861: PUSH
35862: LD_VAR 0 10
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35871: LD_ADDR_VAR 0 10
35875: PUSH
35876: LD_VAR 0 10
35880: PPUSH
35881: LD_INT 1
35883: PPUSH
35884: CALL_OW 3
35888: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35889: LD_VAR 0 2
35893: PPUSH
35894: LD_VAR 0 5
35898: PPUSH
35899: CALL 36208 0 2
35903: PUSH
35904: LD_VAR 0 10
35908: PUSH
35909: EMPTY
35910: EQUAL
35911: OR
35912: IFFALSE 35857
// result := [ ] ;
35914: LD_ADDR_VAR 0 6
35918: PUSH
35919: EMPTY
35920: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35921: LD_VAR 0 1
35925: PPUSH
35926: LD_VAR 0 2
35930: PPUSH
35931: LD_VAR 0 3
35935: PPUSH
35936: LD_VAR 0 4
35940: PPUSH
35941: LD_VAR 0 5
35945: PPUSH
35946: CALL_OW 448
35950: IFFALSE 35983
// result := [ chassis , engine , control , weapon ] ;
35952: LD_ADDR_VAR 0 6
35956: PUSH
35957: LD_VAR 0 2
35961: PUSH
35962: LD_VAR 0 3
35966: PUSH
35967: LD_VAR 0 4
35971: PUSH
35972: LD_VAR 0 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// end ;
35983: LD_VAR 0 6
35987: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35988: LD_INT 0
35990: PPUSH
// if not chassis or not engine then
35991: LD_VAR 0 1
35995: NOT
35996: PUSH
35997: LD_VAR 0 2
36001: NOT
36002: OR
36003: IFFALSE 36007
// exit ;
36005: GO 36203
// case engine of engine_solar :
36007: LD_VAR 0 2
36011: PUSH
36012: LD_INT 2
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36058
36020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_INT 11
36028: PUSH
36029: LD_INT 12
36031: PUSH
36032: LD_INT 13
36034: PUSH
36035: LD_INT 14
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
36056: GO 36187
36058: LD_INT 1
36060: DOUBLE
36061: EQUAL
36062: IFTRUE 36066
36064: GO 36128
36066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_INT 11
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: LD_INT 13
36080: PUSH
36081: LD_INT 14
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: LD_INT 4
36095: PUSH
36096: LD_INT 5
36098: PUSH
36099: LD_INT 21
36101: PUSH
36102: LD_INT 23
36104: PUSH
36105: LD_INT 22
36107: PUSH
36108: LD_INT 24
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
36126: GO 36187
36128: LD_INT 3
36130: DOUBLE
36131: EQUAL
36132: IFTRUE 36136
36134: GO 36186
36136: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_INT 13
36144: PUSH
36145: LD_INT 14
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: LD_INT 5
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 22
36165: PUSH
36166: LD_INT 23
36168: PUSH
36169: LD_INT 24
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
36184: GO 36187
36186: POP
// result := ( chassis in result ) ;
36187: LD_ADDR_VAR 0 3
36191: PUSH
36192: LD_VAR 0 1
36196: PUSH
36197: LD_VAR 0 3
36201: IN
36202: ST_TO_ADDR
// end ;
36203: LD_VAR 0 3
36207: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36208: LD_INT 0
36210: PPUSH
// if not chassis or not weapon then
36211: LD_VAR 0 1
36215: NOT
36216: PUSH
36217: LD_VAR 0 2
36221: NOT
36222: OR
36223: IFFALSE 36227
// exit ;
36225: GO 37287
// case weapon of us_machine_gun :
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 2
36234: DOUBLE
36235: EQUAL
36236: IFTRUE 36240
36238: GO 36270
36240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: LD_INT 3
36254: PUSH
36255: LD_INT 4
36257: PUSH
36258: LD_INT 5
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
36268: GO 37271
36270: LD_INT 3
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36308
36278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 4
36295: PUSH
36296: LD_INT 5
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
36306: GO 37271
36308: LD_INT 11
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36316
36314: GO 36346
36316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36317: LD_ADDR_VAR 0 3
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 3
36330: PUSH
36331: LD_INT 4
36333: PUSH
36334: LD_INT 5
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
36344: GO 37271
36346: LD_INT 4
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36380
36354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36355: LD_ADDR_VAR 0 3
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: LD_INT 5
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
36378: GO 37271
36380: LD_INT 5
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36414
36388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: LD_INT 4
36402: PUSH
36403: LD_INT 5
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: ST_TO_ADDR
36412: GO 37271
36414: LD_INT 9
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36422
36420: GO 36448
36422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36423: LD_ADDR_VAR 0 3
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 4
36436: PUSH
36437: LD_INT 5
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
36446: GO 37271
36448: LD_INT 7
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36482
36456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36457: LD_ADDR_VAR 0 3
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 4
36470: PUSH
36471: LD_INT 5
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
36480: GO 37271
36482: LD_INT 12
36484: DOUBLE
36485: EQUAL
36486: IFTRUE 36490
36488: GO 36516
36490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36491: LD_ADDR_VAR 0 3
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: LD_INT 4
36504: PUSH
36505: LD_INT 5
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
36514: GO 37271
36516: LD_INT 13
36518: DOUBLE
36519: EQUAL
36520: IFTRUE 36524
36522: GO 36550
36524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36525: LD_ADDR_VAR 0 3
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: LD_INT 4
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: ST_TO_ADDR
36548: GO 37271
36550: LD_INT 14
36552: DOUBLE
36553: EQUAL
36554: IFTRUE 36558
36556: GO 36576
36558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36559: LD_ADDR_VAR 0 3
36563: PUSH
36564: LD_INT 4
36566: PUSH
36567: LD_INT 5
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: ST_TO_ADDR
36574: GO 37271
36576: LD_INT 6
36578: DOUBLE
36579: EQUAL
36580: IFTRUE 36584
36582: GO 36602
36584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36585: LD_ADDR_VAR 0 3
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: LD_INT 5
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: ST_TO_ADDR
36600: GO 37271
36602: LD_INT 10
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36628
36610: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36611: LD_ADDR_VAR 0 3
36615: PUSH
36616: LD_INT 4
36618: PUSH
36619: LD_INT 5
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: ST_TO_ADDR
36626: GO 37271
36628: LD_INT 22
36630: DOUBLE
36631: EQUAL
36632: IFTRUE 36636
36634: GO 36662
36636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36637: LD_ADDR_VAR 0 3
36641: PUSH
36642: LD_INT 11
36644: PUSH
36645: LD_INT 12
36647: PUSH
36648: LD_INT 13
36650: PUSH
36651: LD_INT 14
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: ST_TO_ADDR
36660: GO 37271
36662: LD_INT 23
36664: DOUBLE
36665: EQUAL
36666: IFTRUE 36670
36668: GO 36696
36670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36671: LD_ADDR_VAR 0 3
36675: PUSH
36676: LD_INT 11
36678: PUSH
36679: LD_INT 12
36681: PUSH
36682: LD_INT 13
36684: PUSH
36685: LD_INT 14
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
36694: GO 37271
36696: LD_INT 24
36698: DOUBLE
36699: EQUAL
36700: IFTRUE 36704
36702: GO 36730
36704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36705: LD_ADDR_VAR 0 3
36709: PUSH
36710: LD_INT 11
36712: PUSH
36713: LD_INT 12
36715: PUSH
36716: LD_INT 13
36718: PUSH
36719: LD_INT 14
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 37271
36730: LD_INT 30
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36764
36738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_INT 11
36746: PUSH
36747: LD_INT 12
36749: PUSH
36750: LD_INT 13
36752: PUSH
36753: LD_INT 14
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
36762: GO 37271
36764: LD_INT 25
36766: DOUBLE
36767: EQUAL
36768: IFTRUE 36772
36770: GO 36790
36772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 13
36780: PUSH
36781: LD_INT 14
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: ST_TO_ADDR
36788: GO 37271
36790: LD_INT 27
36792: DOUBLE
36793: EQUAL
36794: IFTRUE 36798
36796: GO 36816
36798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36799: LD_ADDR_VAR 0 3
36803: PUSH
36804: LD_INT 13
36806: PUSH
36807: LD_INT 14
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: ST_TO_ADDR
36814: GO 37271
36816: LD_INT 92
36818: DOUBLE
36819: EQUAL
36820: IFTRUE 36824
36822: GO 36850
36824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36825: LD_ADDR_VAR 0 3
36829: PUSH
36830: LD_INT 11
36832: PUSH
36833: LD_INT 12
36835: PUSH
36836: LD_INT 13
36838: PUSH
36839: LD_INT 14
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: ST_TO_ADDR
36848: GO 37271
36850: LD_INT 28
36852: DOUBLE
36853: EQUAL
36854: IFTRUE 36858
36856: GO 36876
36858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_INT 13
36866: PUSH
36867: LD_INT 14
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: ST_TO_ADDR
36874: GO 37271
36876: LD_INT 29
36878: DOUBLE
36879: EQUAL
36880: IFTRUE 36884
36882: GO 36902
36884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36885: LD_ADDR_VAR 0 3
36889: PUSH
36890: LD_INT 13
36892: PUSH
36893: LD_INT 14
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: ST_TO_ADDR
36900: GO 37271
36902: LD_INT 31
36904: DOUBLE
36905: EQUAL
36906: IFTRUE 36910
36908: GO 36928
36910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36911: LD_ADDR_VAR 0 3
36915: PUSH
36916: LD_INT 13
36918: PUSH
36919: LD_INT 14
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: ST_TO_ADDR
36926: GO 37271
36928: LD_INT 26
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 36954
36936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36937: LD_ADDR_VAR 0 3
36941: PUSH
36942: LD_INT 13
36944: PUSH
36945: LD_INT 14
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: ST_TO_ADDR
36952: GO 37271
36954: LD_INT 42
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36962
36960: GO 36988
36962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 21
36970: PUSH
36971: LD_INT 22
36973: PUSH
36974: LD_INT 23
36976: PUSH
36977: LD_INT 24
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
36986: GO 37271
36988: LD_INT 43
36990: DOUBLE
36991: EQUAL
36992: IFTRUE 36996
36994: GO 37022
36996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_INT 21
37004: PUSH
37005: LD_INT 22
37007: PUSH
37008: LD_INT 23
37010: PUSH
37011: LD_INT 24
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
37020: GO 37271
37022: LD_INT 44
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37030
37028: GO 37056
37030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 21
37038: PUSH
37039: LD_INT 22
37041: PUSH
37042: LD_INT 23
37044: PUSH
37045: LD_INT 24
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
37054: GO 37271
37056: LD_INT 45
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37090
37064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 21
37072: PUSH
37073: LD_INT 22
37075: PUSH
37076: LD_INT 23
37078: PUSH
37079: LD_INT 24
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
37088: GO 37271
37090: LD_INT 49
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37124
37098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 21
37106: PUSH
37107: LD_INT 22
37109: PUSH
37110: LD_INT 23
37112: PUSH
37113: LD_INT 24
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
37122: GO 37271
37124: LD_INT 51
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37158
37132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37133: LD_ADDR_VAR 0 3
37137: PUSH
37138: LD_INT 21
37140: PUSH
37141: LD_INT 22
37143: PUSH
37144: LD_INT 23
37146: PUSH
37147: LD_INT 24
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
37156: GO 37271
37158: LD_INT 52
37160: DOUBLE
37161: EQUAL
37162: IFTRUE 37166
37164: GO 37192
37166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37167: LD_ADDR_VAR 0 3
37171: PUSH
37172: LD_INT 21
37174: PUSH
37175: LD_INT 22
37177: PUSH
37178: LD_INT 23
37180: PUSH
37181: LD_INT 24
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
37190: GO 37271
37192: LD_INT 53
37194: DOUBLE
37195: EQUAL
37196: IFTRUE 37200
37198: GO 37218
37200: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37201: LD_ADDR_VAR 0 3
37205: PUSH
37206: LD_INT 23
37208: PUSH
37209: LD_INT 24
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: ST_TO_ADDR
37216: GO 37271
37218: LD_INT 46
37220: DOUBLE
37221: EQUAL
37222: IFTRUE 37226
37224: GO 37244
37226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37227: LD_ADDR_VAR 0 3
37231: PUSH
37232: LD_INT 23
37234: PUSH
37235: LD_INT 24
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: ST_TO_ADDR
37242: GO 37271
37244: LD_INT 47
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37252
37250: GO 37270
37252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37253: LD_ADDR_VAR 0 3
37257: PUSH
37258: LD_INT 23
37260: PUSH
37261: LD_INT 24
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: ST_TO_ADDR
37268: GO 37271
37270: POP
// result := ( chassis in result ) ;
37271: LD_ADDR_VAR 0 3
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: LD_VAR 0 3
37285: IN
37286: ST_TO_ADDR
// end ;
37287: LD_VAR 0 3
37291: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
// result := array ;
37301: LD_ADDR_VAR 0 5
37305: PUSH
37306: LD_VAR 0 1
37310: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37311: LD_VAR 0 1
37315: NOT
37316: PUSH
37317: LD_VAR 0 2
37321: NOT
37322: OR
37323: PUSH
37324: LD_VAR 0 3
37328: NOT
37329: OR
37330: PUSH
37331: LD_VAR 0 2
37335: PUSH
37336: LD_VAR 0 1
37340: GREATER
37341: OR
37342: PUSH
37343: LD_VAR 0 3
37347: PUSH
37348: LD_VAR 0 1
37352: GREATER
37353: OR
37354: IFFALSE 37358
// exit ;
37356: GO 37654
// if direction then
37358: LD_VAR 0 4
37362: IFFALSE 37426
// begin d := 1 ;
37364: LD_ADDR_VAR 0 9
37368: PUSH
37369: LD_INT 1
37371: ST_TO_ADDR
// if i_from > i_to then
37372: LD_VAR 0 2
37376: PUSH
37377: LD_VAR 0 3
37381: GREATER
37382: IFFALSE 37408
// length := ( array - i_from ) + i_to else
37384: LD_ADDR_VAR 0 11
37388: PUSH
37389: LD_VAR 0 1
37393: PUSH
37394: LD_VAR 0 2
37398: MINUS
37399: PUSH
37400: LD_VAR 0 3
37404: PLUS
37405: ST_TO_ADDR
37406: GO 37424
// length := i_to - i_from ;
37408: LD_ADDR_VAR 0 11
37412: PUSH
37413: LD_VAR 0 3
37417: PUSH
37418: LD_VAR 0 2
37422: MINUS
37423: ST_TO_ADDR
// end else
37424: GO 37487
// begin d := - 1 ;
37426: LD_ADDR_VAR 0 9
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: ST_TO_ADDR
// if i_from > i_to then
37435: LD_VAR 0 2
37439: PUSH
37440: LD_VAR 0 3
37444: GREATER
37445: IFFALSE 37465
// length := i_from - i_to else
37447: LD_ADDR_VAR 0 11
37451: PUSH
37452: LD_VAR 0 2
37456: PUSH
37457: LD_VAR 0 3
37461: MINUS
37462: ST_TO_ADDR
37463: GO 37487
// length := ( array - i_to ) + i_from ;
37465: LD_ADDR_VAR 0 11
37469: PUSH
37470: LD_VAR 0 1
37474: PUSH
37475: LD_VAR 0 3
37479: MINUS
37480: PUSH
37481: LD_VAR 0 2
37485: PLUS
37486: ST_TO_ADDR
// end ; if not length then
37487: LD_VAR 0 11
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37654
// tmp := array ;
37496: LD_ADDR_VAR 0 10
37500: PUSH
37501: LD_VAR 0 1
37505: ST_TO_ADDR
// for i = 1 to length do
37506: LD_ADDR_VAR 0 6
37510: PUSH
37511: DOUBLE
37512: LD_INT 1
37514: DEC
37515: ST_TO_ADDR
37516: LD_VAR 0 11
37520: PUSH
37521: FOR_TO
37522: IFFALSE 37642
// begin for j = 1 to array do
37524: LD_ADDR_VAR 0 7
37528: PUSH
37529: DOUBLE
37530: LD_INT 1
37532: DEC
37533: ST_TO_ADDR
37534: LD_VAR 0 1
37538: PUSH
37539: FOR_TO
37540: IFFALSE 37628
// begin k := j + d ;
37542: LD_ADDR_VAR 0 8
37546: PUSH
37547: LD_VAR 0 7
37551: PUSH
37552: LD_VAR 0 9
37556: PLUS
37557: ST_TO_ADDR
// if k > array then
37558: LD_VAR 0 8
37562: PUSH
37563: LD_VAR 0 1
37567: GREATER
37568: IFFALSE 37578
// k := 1 ;
37570: LD_ADDR_VAR 0 8
37574: PUSH
37575: LD_INT 1
37577: ST_TO_ADDR
// if not k then
37578: LD_VAR 0 8
37582: NOT
37583: IFFALSE 37595
// k := array ;
37585: LD_ADDR_VAR 0 8
37589: PUSH
37590: LD_VAR 0 1
37594: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37595: LD_ADDR_VAR 0 10
37599: PUSH
37600: LD_VAR 0 10
37604: PPUSH
37605: LD_VAR 0 8
37609: PPUSH
37610: LD_VAR 0 1
37614: PUSH
37615: LD_VAR 0 7
37619: ARRAY
37620: PPUSH
37621: CALL_OW 1
37625: ST_TO_ADDR
// end ;
37626: GO 37539
37628: POP
37629: POP
// array := tmp ;
37630: LD_ADDR_VAR 0 1
37634: PUSH
37635: LD_VAR 0 10
37639: ST_TO_ADDR
// end ;
37640: GO 37521
37642: POP
37643: POP
// result := array ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 1
37653: ST_TO_ADDR
// end ;
37654: LD_VAR 0 5
37658: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37659: LD_INT 0
37661: PPUSH
37662: PPUSH
// result := 0 ;
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_INT 0
37670: ST_TO_ADDR
// if not array or not value in array then
37671: LD_VAR 0 1
37675: NOT
37676: PUSH
37677: LD_VAR 0 2
37681: PUSH
37682: LD_VAR 0 1
37686: IN
37687: NOT
37688: OR
37689: IFFALSE 37693
// exit ;
37691: GO 37747
// for i = 1 to array do
37693: LD_ADDR_VAR 0 4
37697: PUSH
37698: DOUBLE
37699: LD_INT 1
37701: DEC
37702: ST_TO_ADDR
37703: LD_VAR 0 1
37707: PUSH
37708: FOR_TO
37709: IFFALSE 37745
// if value = array [ i ] then
37711: LD_VAR 0 2
37715: PUSH
37716: LD_VAR 0 1
37720: PUSH
37721: LD_VAR 0 4
37725: ARRAY
37726: EQUAL
37727: IFFALSE 37743
// begin result := i ;
37729: LD_ADDR_VAR 0 3
37733: PUSH
37734: LD_VAR 0 4
37738: ST_TO_ADDR
// exit ;
37739: POP
37740: POP
37741: GO 37747
// end ;
37743: GO 37708
37745: POP
37746: POP
// end ;
37747: LD_VAR 0 3
37751: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37752: LD_INT 0
37754: PPUSH
// vc_chassis := chassis ;
37755: LD_ADDR_OWVAR 37
37759: PUSH
37760: LD_VAR 0 1
37764: ST_TO_ADDR
// vc_engine := engine ;
37765: LD_ADDR_OWVAR 39
37769: PUSH
37770: LD_VAR 0 2
37774: ST_TO_ADDR
// vc_control := control ;
37775: LD_ADDR_OWVAR 38
37779: PUSH
37780: LD_VAR 0 3
37784: ST_TO_ADDR
// vc_weapon := weapon ;
37785: LD_ADDR_OWVAR 40
37789: PUSH
37790: LD_VAR 0 4
37794: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37795: LD_ADDR_OWVAR 41
37799: PUSH
37800: LD_VAR 0 5
37804: ST_TO_ADDR
// end ;
37805: LD_VAR 0 6
37809: RET
// export function WantPlant ( unit ) ; var task ; begin
37810: LD_INT 0
37812: PPUSH
37813: PPUSH
// result := false ;
37814: LD_ADDR_VAR 0 2
37818: PUSH
37819: LD_INT 0
37821: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 437
37836: ST_TO_ADDR
// if task then
37837: LD_VAR 0 3
37841: IFFALSE 37869
// if task [ 1 ] [ 1 ] = p then
37843: LD_VAR 0 3
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: PUSH
37856: LD_STRING p
37858: EQUAL
37859: IFFALSE 37869
// result := true ;
37861: LD_ADDR_VAR 0 2
37865: PUSH
37866: LD_INT 1
37868: ST_TO_ADDR
// end ;
37869: LD_VAR 0 2
37873: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37874: LD_INT 0
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
// if pos < 1 then
37880: LD_VAR 0 2
37884: PUSH
37885: LD_INT 1
37887: LESS
37888: IFFALSE 37892
// exit ;
37890: GO 38195
// if pos = 1 then
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 1
37899: EQUAL
37900: IFFALSE 37933
// result := Replace ( arr , pos [ 1 ] , value ) else
37902: LD_ADDR_VAR 0 4
37906: PUSH
37907: LD_VAR 0 1
37911: PPUSH
37912: LD_VAR 0 2
37916: PUSH
37917: LD_INT 1
37919: ARRAY
37920: PPUSH
37921: LD_VAR 0 3
37925: PPUSH
37926: CALL_OW 1
37930: ST_TO_ADDR
37931: GO 38195
// begin tmp := arr ;
37933: LD_ADDR_VAR 0 6
37937: PUSH
37938: LD_VAR 0 1
37942: ST_TO_ADDR
// s_arr := [ tmp ] ;
37943: LD_ADDR_VAR 0 7
37947: PUSH
37948: LD_VAR 0 6
37952: PUSH
37953: EMPTY
37954: LIST
37955: ST_TO_ADDR
// for i = 1 to pos - 1 do
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: DOUBLE
37962: LD_INT 1
37964: DEC
37965: ST_TO_ADDR
37966: LD_VAR 0 2
37970: PUSH
37971: LD_INT 1
37973: MINUS
37974: PUSH
37975: FOR_TO
37976: IFFALSE 38021
// begin tmp := tmp [ pos [ i ] ] ;
37978: LD_ADDR_VAR 0 6
37982: PUSH
37983: LD_VAR 0 6
37987: PUSH
37988: LD_VAR 0 2
37992: PUSH
37993: LD_VAR 0 5
37997: ARRAY
37998: ARRAY
37999: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38000: LD_ADDR_VAR 0 7
38004: PUSH
38005: LD_VAR 0 7
38009: PUSH
38010: LD_VAR 0 6
38014: PUSH
38015: EMPTY
38016: LIST
38017: ADD
38018: ST_TO_ADDR
// end ;
38019: GO 37975
38021: POP
38022: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38023: LD_ADDR_VAR 0 6
38027: PUSH
38028: LD_VAR 0 6
38032: PPUSH
38033: LD_VAR 0 2
38037: PUSH
38038: LD_VAR 0 2
38042: ARRAY
38043: PPUSH
38044: LD_VAR 0 3
38048: PPUSH
38049: CALL_OW 1
38053: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38054: LD_ADDR_VAR 0 7
38058: PUSH
38059: LD_VAR 0 7
38063: PPUSH
38064: LD_VAR 0 7
38068: PPUSH
38069: LD_VAR 0 6
38073: PPUSH
38074: CALL_OW 1
38078: ST_TO_ADDR
// for i = s_arr downto 2 do
38079: LD_ADDR_VAR 0 5
38083: PUSH
38084: DOUBLE
38085: LD_VAR 0 7
38089: INC
38090: ST_TO_ADDR
38091: LD_INT 2
38093: PUSH
38094: FOR_DOWNTO
38095: IFFALSE 38179
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38097: LD_ADDR_VAR 0 6
38101: PUSH
38102: LD_VAR 0 7
38106: PUSH
38107: LD_VAR 0 5
38111: PUSH
38112: LD_INT 1
38114: MINUS
38115: ARRAY
38116: PPUSH
38117: LD_VAR 0 2
38121: PUSH
38122: LD_VAR 0 5
38126: PUSH
38127: LD_INT 1
38129: MINUS
38130: ARRAY
38131: PPUSH
38132: LD_VAR 0 7
38136: PUSH
38137: LD_VAR 0 5
38141: ARRAY
38142: PPUSH
38143: CALL_OW 1
38147: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38148: LD_ADDR_VAR 0 7
38152: PUSH
38153: LD_VAR 0 7
38157: PPUSH
38158: LD_VAR 0 5
38162: PUSH
38163: LD_INT 1
38165: MINUS
38166: PPUSH
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 1
38176: ST_TO_ADDR
// end ;
38177: GO 38094
38179: POP
38180: POP
// result := s_arr [ 1 ] ;
38181: LD_ADDR_VAR 0 4
38185: PUSH
38186: LD_VAR 0 7
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: ST_TO_ADDR
// end ; end ;
38195: LD_VAR 0 4
38199: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38200: LD_INT 0
38202: PPUSH
38203: PPUSH
// if not list then
38204: LD_VAR 0 1
38208: NOT
38209: IFFALSE 38213
// exit ;
38211: GO 38304
// i := list [ pos1 ] ;
38213: LD_ADDR_VAR 0 5
38217: PUSH
38218: LD_VAR 0 1
38222: PUSH
38223: LD_VAR 0 2
38227: ARRAY
38228: ST_TO_ADDR
// if not i then
38229: LD_VAR 0 5
38233: NOT
38234: IFFALSE 38238
// exit ;
38236: GO 38304
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38238: LD_ADDR_VAR 0 1
38242: PUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: LD_VAR 0 1
38257: PUSH
38258: LD_VAR 0 3
38262: ARRAY
38263: PPUSH
38264: CALL_OW 1
38268: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38269: LD_ADDR_VAR 0 1
38273: PUSH
38274: LD_VAR 0 1
38278: PPUSH
38279: LD_VAR 0 3
38283: PPUSH
38284: LD_VAR 0 5
38288: PPUSH
38289: CALL_OW 1
38293: ST_TO_ADDR
// result := list ;
38294: LD_ADDR_VAR 0 4
38298: PUSH
38299: LD_VAR 0 1
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 4
38308: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38309: LD_INT 0
38311: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: CALL_OW 250
38326: PPUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL_OW 251
38336: PPUSH
38337: LD_VAR 0 2
38341: PPUSH
38342: LD_VAR 0 3
38346: PPUSH
38347: LD_VAR 0 4
38351: PPUSH
38352: CALL 38362 0 5
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 5
38361: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38362: LD_INT 0
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
// if not list then
38368: LD_VAR 0 3
38372: NOT
38373: IFFALSE 38377
// exit ;
38375: GO 38765
// result := [ ] ;
38377: LD_ADDR_VAR 0 6
38381: PUSH
38382: EMPTY
38383: ST_TO_ADDR
// for i in list do
38384: LD_ADDR_VAR 0 7
38388: PUSH
38389: LD_VAR 0 3
38393: PUSH
38394: FOR_IN
38395: IFFALSE 38597
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38397: LD_ADDR_VAR 0 9
38401: PUSH
38402: LD_VAR 0 7
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: LD_VAR 0 2
38416: PPUSH
38417: CALL_OW 297
38421: ST_TO_ADDR
// if not result then
38422: LD_VAR 0 6
38426: NOT
38427: IFFALSE 38453
// result := [ [ i , tmp ] ] else
38429: LD_ADDR_VAR 0 6
38433: PUSH
38434: LD_VAR 0 7
38438: PUSH
38439: LD_VAR 0 9
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: EMPTY
38449: LIST
38450: ST_TO_ADDR
38451: GO 38595
// begin if result [ result ] [ 2 ] < tmp then
38453: LD_VAR 0 6
38457: PUSH
38458: LD_VAR 0 6
38462: ARRAY
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: PUSH
38468: LD_VAR 0 9
38472: LESS
38473: IFFALSE 38515
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38475: LD_ADDR_VAR 0 6
38479: PUSH
38480: LD_VAR 0 6
38484: PPUSH
38485: LD_VAR 0 6
38489: PUSH
38490: LD_INT 1
38492: PLUS
38493: PPUSH
38494: LD_VAR 0 7
38498: PUSH
38499: LD_VAR 0 9
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PPUSH
38508: CALL_OW 2
38512: ST_TO_ADDR
38513: GO 38595
// for j = 1 to result do
38515: LD_ADDR_VAR 0 8
38519: PUSH
38520: DOUBLE
38521: LD_INT 1
38523: DEC
38524: ST_TO_ADDR
38525: LD_VAR 0 6
38529: PUSH
38530: FOR_TO
38531: IFFALSE 38593
// begin if tmp < result [ j ] [ 2 ] then
38533: LD_VAR 0 9
38537: PUSH
38538: LD_VAR 0 6
38542: PUSH
38543: LD_VAR 0 8
38547: ARRAY
38548: PUSH
38549: LD_INT 2
38551: ARRAY
38552: LESS
38553: IFFALSE 38591
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38555: LD_ADDR_VAR 0 6
38559: PUSH
38560: LD_VAR 0 6
38564: PPUSH
38565: LD_VAR 0 8
38569: PPUSH
38570: LD_VAR 0 7
38574: PUSH
38575: LD_VAR 0 9
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PPUSH
38584: CALL_OW 2
38588: ST_TO_ADDR
// break ;
38589: GO 38593
// end ; end ;
38591: GO 38530
38593: POP
38594: POP
// end ; end ;
38595: GO 38394
38597: POP
38598: POP
// if result and not asc then
38599: LD_VAR 0 6
38603: PUSH
38604: LD_VAR 0 4
38608: NOT
38609: AND
38610: IFFALSE 38685
// begin tmp := result ;
38612: LD_ADDR_VAR 0 9
38616: PUSH
38617: LD_VAR 0 6
38621: ST_TO_ADDR
// for i = tmp downto 1 do
38622: LD_ADDR_VAR 0 7
38626: PUSH
38627: DOUBLE
38628: LD_VAR 0 9
38632: INC
38633: ST_TO_ADDR
38634: LD_INT 1
38636: PUSH
38637: FOR_DOWNTO
38638: IFFALSE 38683
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38640: LD_ADDR_VAR 0 6
38644: PUSH
38645: LD_VAR 0 6
38649: PPUSH
38650: LD_VAR 0 9
38654: PUSH
38655: LD_VAR 0 7
38659: MINUS
38660: PUSH
38661: LD_INT 1
38663: PLUS
38664: PPUSH
38665: LD_VAR 0 9
38669: PUSH
38670: LD_VAR 0 7
38674: ARRAY
38675: PPUSH
38676: CALL_OW 1
38680: ST_TO_ADDR
38681: GO 38637
38683: POP
38684: POP
// end ; tmp := [ ] ;
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: EMPTY
38691: ST_TO_ADDR
// if mode then
38692: LD_VAR 0 5
38696: IFFALSE 38765
// begin for i = 1 to result do
38698: LD_ADDR_VAR 0 7
38702: PUSH
38703: DOUBLE
38704: LD_INT 1
38706: DEC
38707: ST_TO_ADDR
38708: LD_VAR 0 6
38712: PUSH
38713: FOR_TO
38714: IFFALSE 38753
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38716: LD_ADDR_VAR 0 9
38720: PUSH
38721: LD_VAR 0 9
38725: PPUSH
38726: LD_VAR 0 7
38730: PPUSH
38731: LD_VAR 0 6
38735: PUSH
38736: LD_VAR 0 7
38740: ARRAY
38741: PUSH
38742: LD_INT 1
38744: ARRAY
38745: PPUSH
38746: CALL_OW 1
38750: ST_TO_ADDR
38751: GO 38713
38753: POP
38754: POP
// result := tmp ;
38755: LD_ADDR_VAR 0 6
38759: PUSH
38760: LD_VAR 0 9
38764: ST_TO_ADDR
// end ; end ;
38765: LD_VAR 0 6
38769: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38778: LD_ADDR_VAR 0 5
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// if not x or not y then
38800: LD_VAR 0 2
38804: NOT
38805: PUSH
38806: LD_VAR 0 3
38810: NOT
38811: OR
38812: IFFALSE 38816
// exit ;
38814: GO 40466
// if not range then
38816: LD_VAR 0 4
38820: NOT
38821: IFFALSE 38831
// range := 10 ;
38823: LD_ADDR_VAR 0 4
38827: PUSH
38828: LD_INT 10
38830: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38831: LD_ADDR_VAR 0 8
38835: PUSH
38836: LD_INT 81
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 92
38850: PUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_VAR 0 3
38860: PUSH
38861: LD_VAR 0 4
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 21
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: PPUSH
38894: CALL_OW 69
38898: ST_TO_ADDR
// if not tmp then
38899: LD_VAR 0 8
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 40466
// for i in tmp do
38908: LD_ADDR_VAR 0 6
38912: PUSH
38913: LD_VAR 0 8
38917: PUSH
38918: FOR_IN
38919: IFFALSE 40441
// begin points := [ 0 , 0 , 0 ] ;
38921: LD_ADDR_VAR 0 9
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: ST_TO_ADDR
// bpoints := 1 ;
38940: LD_ADDR_VAR 0 10
38944: PUSH
38945: LD_INT 1
38947: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38948: LD_VAR 0 6
38952: PPUSH
38953: CALL_OW 247
38957: PUSH
38958: LD_INT 1
38960: DOUBLE
38961: EQUAL
38962: IFTRUE 38966
38964: GO 39544
38966: POP
// begin if GetClass ( i ) = 1 then
38967: LD_VAR 0 6
38971: PPUSH
38972: CALL_OW 257
38976: PUSH
38977: LD_INT 1
38979: EQUAL
38980: IFFALSE 39001
// points := [ 10 , 5 , 3 ] ;
38982: LD_ADDR_VAR 0 9
38986: PUSH
38987: LD_INT 10
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39001: LD_VAR 0 6
39005: PPUSH
39006: CALL_OW 257
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 4
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: IN
39025: IFFALSE 39046
// points := [ 3 , 2 , 1 ] ;
39027: LD_ADDR_VAR 0 9
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39046: LD_VAR 0 6
39050: PPUSH
39051: CALL_OW 257
39055: PUSH
39056: LD_INT 5
39058: EQUAL
39059: IFFALSE 39080
// points := [ 130 , 5 , 2 ] ;
39061: LD_ADDR_VAR 0 9
39065: PUSH
39066: LD_INT 130
39068: PUSH
39069: LD_INT 5
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39080: LD_VAR 0 6
39084: PPUSH
39085: CALL_OW 257
39089: PUSH
39090: LD_INT 8
39092: EQUAL
39093: IFFALSE 39114
// points := [ 35 , 35 , 30 ] ;
39095: LD_ADDR_VAR 0 9
39099: PUSH
39100: LD_INT 35
39102: PUSH
39103: LD_INT 35
39105: PUSH
39106: LD_INT 30
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39114: LD_VAR 0 6
39118: PPUSH
39119: CALL_OW 257
39123: PUSH
39124: LD_INT 9
39126: EQUAL
39127: IFFALSE 39148
// points := [ 20 , 55 , 40 ] ;
39129: LD_ADDR_VAR 0 9
39133: PUSH
39134: LD_INT 20
39136: PUSH
39137: LD_INT 55
39139: PUSH
39140: LD_INT 40
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39148: LD_VAR 0 6
39152: PPUSH
39153: CALL_OW 257
39157: PUSH
39158: LD_INT 12
39160: PUSH
39161: LD_INT 16
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: IN
39168: IFFALSE 39189
// points := [ 5 , 3 , 2 ] ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_INT 5
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39189: LD_VAR 0 6
39193: PPUSH
39194: CALL_OW 257
39198: PUSH
39199: LD_INT 17
39201: EQUAL
39202: IFFALSE 39223
// points := [ 100 , 50 , 75 ] ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: LD_INT 100
39211: PUSH
39212: LD_INT 50
39214: PUSH
39215: LD_INT 75
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39223: LD_VAR 0 6
39227: PPUSH
39228: CALL_OW 257
39232: PUSH
39233: LD_INT 15
39235: EQUAL
39236: IFFALSE 39257
// points := [ 10 , 5 , 3 ] ;
39238: LD_ADDR_VAR 0 9
39242: PUSH
39243: LD_INT 10
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39257: LD_VAR 0 6
39261: PPUSH
39262: CALL_OW 257
39266: PUSH
39267: LD_INT 14
39269: EQUAL
39270: IFFALSE 39291
// points := [ 10 , 0 , 0 ] ;
39272: LD_ADDR_VAR 0 9
39276: PUSH
39277: LD_INT 10
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39291: LD_VAR 0 6
39295: PPUSH
39296: CALL_OW 257
39300: PUSH
39301: LD_INT 11
39303: EQUAL
39304: IFFALSE 39325
// points := [ 30 , 10 , 5 ] ;
39306: LD_ADDR_VAR 0 9
39310: PUSH
39311: LD_INT 30
39313: PUSH
39314: LD_INT 10
39316: PUSH
39317: LD_INT 5
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39325: LD_VAR 0 1
39329: PPUSH
39330: LD_INT 5
39332: PPUSH
39333: CALL_OW 321
39337: PUSH
39338: LD_INT 2
39340: EQUAL
39341: IFFALSE 39358
// bpoints := bpoints * 1.8 ;
39343: LD_ADDR_VAR 0 10
39347: PUSH
39348: LD_VAR 0 10
39352: PUSH
39353: LD_REAL  1.80000000000000E+0000
39356: MUL
39357: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39358: LD_VAR 0 6
39362: PPUSH
39363: CALL_OW 257
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: LD_INT 4
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: IN
39386: PUSH
39387: LD_VAR 0 1
39391: PPUSH
39392: LD_INT 51
39394: PPUSH
39395: CALL_OW 321
39399: PUSH
39400: LD_INT 2
39402: EQUAL
39403: AND
39404: IFFALSE 39421
// bpoints := bpoints * 1.2 ;
39406: LD_ADDR_VAR 0 10
39410: PUSH
39411: LD_VAR 0 10
39415: PUSH
39416: LD_REAL  1.20000000000000E+0000
39419: MUL
39420: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39421: LD_VAR 0 6
39425: PPUSH
39426: CALL_OW 257
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: LD_INT 7
39436: PUSH
39437: LD_INT 9
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: IN
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: LD_INT 52
39453: PPUSH
39454: CALL_OW 321
39458: PUSH
39459: LD_INT 2
39461: EQUAL
39462: AND
39463: IFFALSE 39480
// bpoints := bpoints * 1.5 ;
39465: LD_ADDR_VAR 0 10
39469: PUSH
39470: LD_VAR 0 10
39474: PUSH
39475: LD_REAL  1.50000000000000E+0000
39478: MUL
39479: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39480: LD_VAR 0 1
39484: PPUSH
39485: LD_INT 66
39487: PPUSH
39488: CALL_OW 321
39492: PUSH
39493: LD_INT 2
39495: EQUAL
39496: IFFALSE 39513
// bpoints := bpoints * 1.1 ;
39498: LD_ADDR_VAR 0 10
39502: PUSH
39503: LD_VAR 0 10
39507: PUSH
39508: LD_REAL  1.10000000000000E+0000
39511: MUL
39512: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39513: LD_ADDR_VAR 0 10
39517: PUSH
39518: LD_VAR 0 10
39522: PUSH
39523: LD_VAR 0 6
39527: PPUSH
39528: LD_INT 1
39530: PPUSH
39531: CALL_OW 259
39535: PUSH
39536: LD_REAL  1.15000000000000E+0000
39539: MUL
39540: MUL
39541: ST_TO_ADDR
// end ; unit_vehicle :
39542: GO 40370
39544: LD_INT 2
39546: DOUBLE
39547: EQUAL
39548: IFTRUE 39552
39550: GO 40358
39552: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39553: LD_VAR 0 6
39557: PPUSH
39558: CALL_OW 264
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 42
39568: PUSH
39569: LD_INT 24
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: IN
39577: IFFALSE 39598
// points := [ 25 , 5 , 3 ] ;
39579: LD_ADDR_VAR 0 9
39583: PUSH
39584: LD_INT 25
39586: PUSH
39587: LD_INT 5
39589: PUSH
39590: LD_INT 3
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39598: LD_VAR 0 6
39602: PPUSH
39603: CALL_OW 264
39607: PUSH
39608: LD_INT 4
39610: PUSH
39611: LD_INT 43
39613: PUSH
39614: LD_INT 25
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: IN
39622: IFFALSE 39643
// points := [ 40 , 15 , 5 ] ;
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_INT 40
39631: PUSH
39632: LD_INT 15
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39643: LD_VAR 0 6
39647: PPUSH
39648: CALL_OW 264
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 23
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: IN
39663: IFFALSE 39684
// points := [ 7 , 25 , 8 ] ;
39665: LD_ADDR_VAR 0 9
39669: PUSH
39670: LD_INT 7
39672: PUSH
39673: LD_INT 25
39675: PUSH
39676: LD_INT 8
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39684: LD_VAR 0 6
39688: PPUSH
39689: CALL_OW 264
39693: PUSH
39694: LD_INT 5
39696: PUSH
39697: LD_INT 27
39699: PUSH
39700: LD_INT 44
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: LIST
39707: IN
39708: IFFALSE 39729
// points := [ 14 , 50 , 16 ] ;
39710: LD_ADDR_VAR 0 9
39714: PUSH
39715: LD_INT 14
39717: PUSH
39718: LD_INT 50
39720: PUSH
39721: LD_INT 16
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39729: LD_VAR 0 6
39733: PPUSH
39734: CALL_OW 264
39738: PUSH
39739: LD_INT 6
39741: PUSH
39742: LD_INT 46
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: IN
39749: IFFALSE 39770
// points := [ 32 , 120 , 70 ] ;
39751: LD_ADDR_VAR 0 9
39755: PUSH
39756: LD_INT 32
39758: PUSH
39759: LD_INT 120
39761: PUSH
39762: LD_INT 70
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39770: LD_VAR 0 6
39774: PPUSH
39775: CALL_OW 264
39779: PUSH
39780: LD_INT 7
39782: PUSH
39783: LD_INT 28
39785: PUSH
39786: LD_INT 45
39788: PUSH
39789: LD_INT 92
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: IN
39798: IFFALSE 39819
// points := [ 35 , 20 , 45 ] ;
39800: LD_ADDR_VAR 0 9
39804: PUSH
39805: LD_INT 35
39807: PUSH
39808: LD_INT 20
39810: PUSH
39811: LD_INT 45
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39819: LD_VAR 0 6
39823: PPUSH
39824: CALL_OW 264
39828: PUSH
39829: LD_INT 47
39831: PUSH
39832: EMPTY
39833: LIST
39834: IN
39835: IFFALSE 39856
// points := [ 67 , 45 , 75 ] ;
39837: LD_ADDR_VAR 0 9
39841: PUSH
39842: LD_INT 67
39844: PUSH
39845: LD_INT 45
39847: PUSH
39848: LD_INT 75
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39856: LD_VAR 0 6
39860: PPUSH
39861: CALL_OW 264
39865: PUSH
39866: LD_INT 26
39868: PUSH
39869: EMPTY
39870: LIST
39871: IN
39872: IFFALSE 39893
// points := [ 120 , 30 , 80 ] ;
39874: LD_ADDR_VAR 0 9
39878: PUSH
39879: LD_INT 120
39881: PUSH
39882: LD_INT 30
39884: PUSH
39885: LD_INT 80
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39893: LD_VAR 0 6
39897: PPUSH
39898: CALL_OW 264
39902: PUSH
39903: LD_INT 22
39905: PUSH
39906: EMPTY
39907: LIST
39908: IN
39909: IFFALSE 39930
// points := [ 40 , 1 , 1 ] ;
39911: LD_ADDR_VAR 0 9
39915: PUSH
39916: LD_INT 40
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39930: LD_VAR 0 6
39934: PPUSH
39935: CALL_OW 264
39939: PUSH
39940: LD_INT 29
39942: PUSH
39943: EMPTY
39944: LIST
39945: IN
39946: IFFALSE 39967
// points := [ 70 , 200 , 400 ] ;
39948: LD_ADDR_VAR 0 9
39952: PUSH
39953: LD_INT 70
39955: PUSH
39956: LD_INT 200
39958: PUSH
39959: LD_INT 400
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39967: LD_VAR 0 6
39971: PPUSH
39972: CALL_OW 264
39976: PUSH
39977: LD_INT 14
39979: PUSH
39980: LD_INT 53
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: IFFALSE 40008
// points := [ 40 , 10 , 20 ] ;
39989: LD_ADDR_VAR 0 9
39993: PUSH
39994: LD_INT 40
39996: PUSH
39997: LD_INT 10
39999: PUSH
40000: LD_INT 20
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40008: LD_VAR 0 6
40012: PPUSH
40013: CALL_OW 264
40017: PUSH
40018: LD_INT 9
40020: PUSH
40021: EMPTY
40022: LIST
40023: IN
40024: IFFALSE 40045
// points := [ 5 , 70 , 20 ] ;
40026: LD_ADDR_VAR 0 9
40030: PUSH
40031: LD_INT 5
40033: PUSH
40034: LD_INT 70
40036: PUSH
40037: LD_INT 20
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40045: LD_VAR 0 6
40049: PPUSH
40050: CALL_OW 264
40054: PUSH
40055: LD_INT 10
40057: PUSH
40058: EMPTY
40059: LIST
40060: IN
40061: IFFALSE 40082
// points := [ 35 , 110 , 70 ] ;
40063: LD_ADDR_VAR 0 9
40067: PUSH
40068: LD_INT 35
40070: PUSH
40071: LD_INT 110
40073: PUSH
40074: LD_INT 70
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40082: LD_VAR 0 6
40086: PPUSH
40087: CALL_OW 265
40091: PUSH
40092: LD_INT 25
40094: EQUAL
40095: IFFALSE 40116
// points := [ 80 , 65 , 100 ] ;
40097: LD_ADDR_VAR 0 9
40101: PUSH
40102: LD_INT 80
40104: PUSH
40105: LD_INT 65
40107: PUSH
40108: LD_INT 100
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40116: LD_VAR 0 6
40120: PPUSH
40121: CALL_OW 263
40125: PUSH
40126: LD_INT 1
40128: EQUAL
40129: IFFALSE 40164
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40131: LD_ADDR_VAR 0 10
40135: PUSH
40136: LD_VAR 0 10
40140: PUSH
40141: LD_VAR 0 6
40145: PPUSH
40146: CALL_OW 311
40150: PPUSH
40151: LD_INT 3
40153: PPUSH
40154: CALL_OW 259
40158: PUSH
40159: LD_INT 4
40161: MUL
40162: MUL
40163: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40164: LD_VAR 0 6
40168: PPUSH
40169: CALL_OW 263
40173: PUSH
40174: LD_INT 2
40176: EQUAL
40177: IFFALSE 40228
// begin j := IsControledBy ( i ) ;
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 6
40188: PPUSH
40189: CALL_OW 312
40193: ST_TO_ADDR
// if j then
40194: LD_VAR 0 7
40198: IFFALSE 40228
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40200: LD_ADDR_VAR 0 10
40204: PUSH
40205: LD_VAR 0 10
40209: PUSH
40210: LD_VAR 0 7
40214: PPUSH
40215: LD_INT 3
40217: PPUSH
40218: CALL_OW 259
40222: PUSH
40223: LD_INT 3
40225: MUL
40226: MUL
40227: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40228: LD_VAR 0 6
40232: PPUSH
40233: CALL_OW 264
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: LD_INT 6
40243: PUSH
40244: LD_INT 46
40246: PUSH
40247: LD_INT 44
40249: PUSH
40250: LD_INT 47
40252: PUSH
40253: LD_INT 45
40255: PUSH
40256: LD_INT 28
40258: PUSH
40259: LD_INT 7
40261: PUSH
40262: LD_INT 27
40264: PUSH
40265: LD_INT 29
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: IN
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: LD_INT 52
40288: PPUSH
40289: CALL_OW 321
40293: PUSH
40294: LD_INT 2
40296: EQUAL
40297: AND
40298: IFFALSE 40315
// bpoints := bpoints * 1.2 ;
40300: LD_ADDR_VAR 0 10
40304: PUSH
40305: LD_VAR 0 10
40309: PUSH
40310: LD_REAL  1.20000000000000E+0000
40313: MUL
40314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40315: LD_VAR 0 6
40319: PPUSH
40320: CALL_OW 264
40324: PUSH
40325: LD_INT 6
40327: PUSH
40328: LD_INT 46
40330: PUSH
40331: LD_INT 47
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: IN
40339: IFFALSE 40356
// bpoints := bpoints * 1.2 ;
40341: LD_ADDR_VAR 0 10
40345: PUSH
40346: LD_VAR 0 10
40350: PUSH
40351: LD_REAL  1.20000000000000E+0000
40354: MUL
40355: ST_TO_ADDR
// end ; unit_building :
40356: GO 40370
40358: LD_INT 3
40360: DOUBLE
40361: EQUAL
40362: IFTRUE 40366
40364: GO 40369
40366: POP
// ; end ;
40367: GO 40370
40369: POP
// for j = 1 to 3 do
40370: LD_ADDR_VAR 0 7
40374: PUSH
40375: DOUBLE
40376: LD_INT 1
40378: DEC
40379: ST_TO_ADDR
40380: LD_INT 3
40382: PUSH
40383: FOR_TO
40384: IFFALSE 40437
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40386: LD_ADDR_VAR 0 5
40390: PUSH
40391: LD_VAR 0 5
40395: PPUSH
40396: LD_VAR 0 7
40400: PPUSH
40401: LD_VAR 0 5
40405: PUSH
40406: LD_VAR 0 7
40410: ARRAY
40411: PUSH
40412: LD_VAR 0 9
40416: PUSH
40417: LD_VAR 0 7
40421: ARRAY
40422: PUSH
40423: LD_VAR 0 10
40427: MUL
40428: PLUS
40429: PPUSH
40430: CALL_OW 1
40434: ST_TO_ADDR
40435: GO 40383
40437: POP
40438: POP
// end ;
40439: GO 38918
40441: POP
40442: POP
// result := Replace ( result , 4 , tmp ) ;
40443: LD_ADDR_VAR 0 5
40447: PUSH
40448: LD_VAR 0 5
40452: PPUSH
40453: LD_INT 4
40455: PPUSH
40456: LD_VAR 0 8
40460: PPUSH
40461: CALL_OW 1
40465: ST_TO_ADDR
// end ;
40466: LD_VAR 0 5
40470: RET
// export function DangerAtRange ( unit , range ) ; begin
40471: LD_INT 0
40473: PPUSH
// if not unit then
40474: LD_VAR 0 1
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40528
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: CALL_OW 255
40497: PPUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 250
40507: PPUSH
40508: LD_VAR 0 1
40512: PPUSH
40513: CALL_OW 251
40517: PPUSH
40518: LD_VAR 0 2
40522: PPUSH
40523: CALL 38770 0 4
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 3
40532: RET
// export function DangerInArea ( side , area ) ; begin
40533: LD_INT 0
40535: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40536: LD_ADDR_VAR 0 3
40540: PUSH
40541: LD_VAR 0 2
40545: PPUSH
40546: LD_INT 81
40548: PUSH
40549: LD_VAR 0 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PPUSH
40558: CALL_OW 70
40562: ST_TO_ADDR
// end ;
40563: LD_VAR 0 3
40567: RET
// export function IsExtension ( b ) ; begin
40568: LD_INT 0
40570: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40571: LD_ADDR_VAR 0 2
40575: PUSH
40576: LD_VAR 0 1
40580: PUSH
40581: LD_INT 23
40583: PUSH
40584: LD_INT 20
40586: PUSH
40587: LD_INT 22
40589: PUSH
40590: LD_INT 17
40592: PUSH
40593: LD_INT 24
40595: PUSH
40596: LD_INT 21
40598: PUSH
40599: LD_INT 19
40601: PUSH
40602: LD_INT 16
40604: PUSH
40605: LD_INT 25
40607: PUSH
40608: LD_INT 18
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: IN
40623: ST_TO_ADDR
// end ;
40624: LD_VAR 0 2
40628: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40629: LD_INT 0
40631: PPUSH
40632: PPUSH
40633: PPUSH
// result := [ ] ;
40634: LD_ADDR_VAR 0 4
40638: PUSH
40639: EMPTY
40640: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40641: LD_ADDR_VAR 0 5
40645: PUSH
40646: LD_VAR 0 2
40650: PPUSH
40651: LD_INT 21
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PPUSH
40661: CALL_OW 70
40665: ST_TO_ADDR
// if not tmp then
40666: LD_VAR 0 5
40670: NOT
40671: IFFALSE 40675
// exit ;
40673: GO 40739
// if checkLink then
40675: LD_VAR 0 3
40679: IFFALSE 40729
// begin for i in tmp do
40681: LD_ADDR_VAR 0 6
40685: PUSH
40686: LD_VAR 0 5
40690: PUSH
40691: FOR_IN
40692: IFFALSE 40727
// if GetBase ( i ) <> base then
40694: LD_VAR 0 6
40698: PPUSH
40699: CALL_OW 274
40703: PUSH
40704: LD_VAR 0 1
40708: NONEQUAL
40709: IFFALSE 40725
// ComLinkToBase ( base , i ) ;
40711: LD_VAR 0 1
40715: PPUSH
40716: LD_VAR 0 6
40720: PPUSH
40721: CALL_OW 169
40725: GO 40691
40727: POP
40728: POP
// end ; result := tmp ;
40729: LD_ADDR_VAR 0 4
40733: PUSH
40734: LD_VAR 0 5
40738: ST_TO_ADDR
// end ;
40739: LD_VAR 0 4
40743: RET
// export function ComComplete ( units , b ) ; var i ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
// if not units then
40748: LD_VAR 0 1
40752: NOT
40753: IFFALSE 40757
// exit ;
40755: GO 40847
// for i in units do
40757: LD_ADDR_VAR 0 4
40761: PUSH
40762: LD_VAR 0 1
40766: PUSH
40767: FOR_IN
40768: IFFALSE 40845
// if BuildingStatus ( b ) = bs_build then
40770: LD_VAR 0 2
40774: PPUSH
40775: CALL_OW 461
40779: PUSH
40780: LD_INT 1
40782: EQUAL
40783: IFFALSE 40843
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_STRING h
40792: PUSH
40793: LD_VAR 0 2
40797: PPUSH
40798: CALL_OW 250
40802: PUSH
40803: LD_VAR 0 2
40807: PPUSH
40808: CALL_OW 251
40812: PUSH
40813: LD_VAR 0 2
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: PPUSH
40839: CALL_OW 446
40843: GO 40767
40845: POP
40846: POP
// end ;
40847: LD_VAR 0 3
40851: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40852: LD_INT 0
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40860: LD_VAR 0 1
40864: NOT
40865: PUSH
40866: LD_VAR 0 1
40870: PPUSH
40871: CALL_OW 263
40875: PUSH
40876: LD_INT 2
40878: NONEQUAL
40879: OR
40880: IFFALSE 40884
// exit ;
40882: GO 41200
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40884: LD_ADDR_VAR 0 6
40888: PUSH
40889: LD_INT 22
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 255
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 30
40911: PUSH
40912: LD_INT 36
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 34
40921: PUSH
40922: LD_INT 31
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PPUSH
40938: CALL_OW 69
40942: ST_TO_ADDR
// if not tmp then
40943: LD_VAR 0 6
40947: NOT
40948: IFFALSE 40952
// exit ;
40950: GO 41200
// result := [ ] ;
40952: LD_ADDR_VAR 0 2
40956: PUSH
40957: EMPTY
40958: ST_TO_ADDR
// for i in tmp do
40959: LD_ADDR_VAR 0 3
40963: PUSH
40964: LD_VAR 0 6
40968: PUSH
40969: FOR_IN
40970: IFFALSE 41041
// begin t := UnitsInside ( i ) ;
40972: LD_ADDR_VAR 0 4
40976: PUSH
40977: LD_VAR 0 3
40981: PPUSH
40982: CALL_OW 313
40986: ST_TO_ADDR
// if t then
40987: LD_VAR 0 4
40991: IFFALSE 41039
// for j in t do
40993: LD_ADDR_VAR 0 7
40997: PUSH
40998: LD_VAR 0 4
41002: PUSH
41003: FOR_IN
41004: IFFALSE 41037
// result := Replace ( result , result + 1 , j ) ;
41006: LD_ADDR_VAR 0 2
41010: PUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_VAR 0 2
41020: PUSH
41021: LD_INT 1
41023: PLUS
41024: PPUSH
41025: LD_VAR 0 7
41029: PPUSH
41030: CALL_OW 1
41034: ST_TO_ADDR
41035: GO 41003
41037: POP
41038: POP
// end ;
41039: GO 40969
41041: POP
41042: POP
// if not result then
41043: LD_VAR 0 2
41047: NOT
41048: IFFALSE 41052
// exit ;
41050: GO 41200
// mech := result [ 1 ] ;
41052: LD_ADDR_VAR 0 5
41056: PUSH
41057: LD_VAR 0 2
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: ST_TO_ADDR
// if result > 1 then
41066: LD_VAR 0 2
41070: PUSH
41071: LD_INT 1
41073: GREATER
41074: IFFALSE 41186
// begin for i = 2 to result do
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: DOUBLE
41082: LD_INT 2
41084: DEC
41085: ST_TO_ADDR
41086: LD_VAR 0 2
41090: PUSH
41091: FOR_TO
41092: IFFALSE 41184
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: LD_VAR 0 2
41103: PUSH
41104: LD_VAR 0 3
41108: ARRAY
41109: PPUSH
41110: LD_INT 3
41112: PPUSH
41113: CALL_OW 259
41117: PUSH
41118: LD_VAR 0 2
41122: PUSH
41123: LD_VAR 0 3
41127: ARRAY
41128: PPUSH
41129: CALL_OW 432
41133: MINUS
41134: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41135: LD_VAR 0 4
41139: PUSH
41140: LD_VAR 0 5
41144: PPUSH
41145: LD_INT 3
41147: PPUSH
41148: CALL_OW 259
41152: PUSH
41153: LD_VAR 0 5
41157: PPUSH
41158: CALL_OW 432
41162: MINUS
41163: GREATEREQUAL
41164: IFFALSE 41182
// mech := result [ i ] ;
41166: LD_ADDR_VAR 0 5
41170: PUSH
41171: LD_VAR 0 2
41175: PUSH
41176: LD_VAR 0 3
41180: ARRAY
41181: ST_TO_ADDR
// end ;
41182: GO 41091
41184: POP
41185: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41186: LD_VAR 0 1
41190: PPUSH
41191: LD_VAR 0 5
41195: PPUSH
41196: CALL_OW 135
// end ;
41200: LD_VAR 0 2
41204: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41205: LD_INT 0
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
// result := [ ] ;
41220: LD_ADDR_VAR 0 7
41224: PUSH
41225: EMPTY
41226: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 266
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: IN
41247: NOT
41248: IFFALSE 41252
// exit ;
41250: GO 42886
// if name then
41252: LD_VAR 0 3
41256: IFFALSE 41272
// SetBName ( base_dep , name ) ;
41258: LD_VAR 0 1
41262: PPUSH
41263: LD_VAR 0 3
41267: PPUSH
41268: CALL_OW 500
// base := GetBase ( base_dep ) ;
41272: LD_ADDR_VAR 0 15
41276: PUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL_OW 274
41286: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41287: LD_ADDR_VAR 0 16
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 255
41301: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41302: LD_ADDR_VAR 0 17
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 248
41316: ST_TO_ADDR
// if sources then
41317: LD_VAR 0 5
41321: IFFALSE 41368
// for i = 1 to 3 do
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: DOUBLE
41329: LD_INT 1
41331: DEC
41332: ST_TO_ADDR
41333: LD_INT 3
41335: PUSH
41336: FOR_TO
41337: IFFALSE 41366
// AddResourceType ( base , i , sources [ i ] ) ;
41339: LD_VAR 0 15
41343: PPUSH
41344: LD_VAR 0 8
41348: PPUSH
41349: LD_VAR 0 5
41353: PUSH
41354: LD_VAR 0 8
41358: ARRAY
41359: PPUSH
41360: CALL_OW 276
41364: GO 41336
41366: POP
41367: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41368: LD_ADDR_VAR 0 18
41372: PUSH
41373: LD_VAR 0 15
41377: PPUSH
41378: LD_VAR 0 2
41382: PPUSH
41383: LD_INT 1
41385: PPUSH
41386: CALL 40629 0 3
41390: ST_TO_ADDR
// InitHc ;
41391: CALL_OW 19
// InitUc ;
41395: CALL_OW 18
// uc_side := side ;
41399: LD_ADDR_OWVAR 20
41403: PUSH
41404: LD_VAR 0 16
41408: ST_TO_ADDR
// uc_nation := nation ;
41409: LD_ADDR_OWVAR 21
41413: PUSH
41414: LD_VAR 0 17
41418: ST_TO_ADDR
// if buildings then
41419: LD_VAR 0 18
41423: IFFALSE 42745
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41425: LD_ADDR_VAR 0 19
41429: PUSH
41430: LD_VAR 0 18
41434: PPUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 30
41440: PUSH
41441: LD_INT 29
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 30
41450: PUSH
41451: LD_INT 30
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: PPUSH
41463: CALL_OW 72
41467: ST_TO_ADDR
// if tmp then
41468: LD_VAR 0 19
41472: IFFALSE 41520
// for i in tmp do
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_VAR 0 19
41483: PUSH
41484: FOR_IN
41485: IFFALSE 41518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41487: LD_VAR 0 8
41491: PPUSH
41492: CALL_OW 250
41496: PPUSH
41497: LD_VAR 0 8
41501: PPUSH
41502: CALL_OW 251
41506: PPUSH
41507: LD_VAR 0 16
41511: PPUSH
41512: CALL_OW 441
41516: GO 41484
41518: POP
41519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41520: LD_VAR 0 18
41524: PPUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 30
41530: PUSH
41531: LD_INT 32
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 30
41540: PUSH
41541: LD_INT 33
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: PPUSH
41553: CALL_OW 72
41557: IFFALSE 41645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41559: LD_ADDR_VAR 0 8
41563: PUSH
41564: LD_VAR 0 18
41568: PPUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 30
41574: PUSH
41575: LD_INT 32
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 30
41584: PUSH
41585: LD_INT 33
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: PPUSH
41597: CALL_OW 72
41601: PUSH
41602: FOR_IN
41603: IFFALSE 41643
// begin if not GetBWeapon ( i ) then
41605: LD_VAR 0 8
41609: PPUSH
41610: CALL_OW 269
41614: NOT
41615: IFFALSE 41641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41617: LD_VAR 0 8
41621: PPUSH
41622: LD_VAR 0 8
41626: PPUSH
41627: LD_VAR 0 2
41631: PPUSH
41632: CALL 42891 0 2
41636: PPUSH
41637: CALL_OW 431
// end ;
41641: GO 41602
41643: POP
41644: POP
// end ; for i = 1 to personel do
41645: LD_ADDR_VAR 0 8
41649: PUSH
41650: DOUBLE
41651: LD_INT 1
41653: DEC
41654: ST_TO_ADDR
41655: LD_VAR 0 6
41659: PUSH
41660: FOR_TO
41661: IFFALSE 42725
// begin if i > 4 then
41663: LD_VAR 0 8
41667: PUSH
41668: LD_INT 4
41670: GREATER
41671: IFFALSE 41675
// break ;
41673: GO 42725
// case i of 1 :
41675: LD_VAR 0 8
41679: PUSH
41680: LD_INT 1
41682: DOUBLE
41683: EQUAL
41684: IFTRUE 41688
41686: GO 41768
41688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41689: LD_ADDR_VAR 0 12
41693: PUSH
41694: LD_VAR 0 18
41698: PPUSH
41699: LD_INT 22
41701: PUSH
41702: LD_VAR 0 16
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 58
41713: PUSH
41714: EMPTY
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 30
41722: PUSH
41723: LD_INT 32
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 30
41732: PUSH
41733: LD_INT 4
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 30
41742: PUSH
41743: LD_INT 5
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: PPUSH
41761: CALL_OW 72
41765: ST_TO_ADDR
41766: GO 41990
41768: LD_INT 2
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 41838
41776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41777: LD_ADDR_VAR 0 12
41781: PUSH
41782: LD_VAR 0 18
41786: PPUSH
41787: LD_INT 22
41789: PUSH
41790: LD_VAR 0 16
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 30
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 30
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PPUSH
41831: CALL_OW 72
41835: ST_TO_ADDR
41836: GO 41990
41838: LD_INT 3
41840: DOUBLE
41841: EQUAL
41842: IFTRUE 41846
41844: GO 41908
41846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41847: LD_ADDR_VAR 0 12
41851: PUSH
41852: LD_VAR 0 18
41856: PPUSH
41857: LD_INT 22
41859: PUSH
41860: LD_VAR 0 16
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 30
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 30
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PPUSH
41901: CALL_OW 72
41905: ST_TO_ADDR
41906: GO 41990
41908: LD_INT 4
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 41989
41916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41917: LD_ADDR_VAR 0 12
41921: PUSH
41922: LD_VAR 0 18
41926: PPUSH
41927: LD_INT 22
41929: PUSH
41930: LD_VAR 0 16
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 30
41944: PUSH
41945: LD_INT 6
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 30
41954: PUSH
41955: LD_INT 7
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 30
41964: PUSH
41965: LD_INT 8
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PPUSH
41982: CALL_OW 72
41986: ST_TO_ADDR
41987: GO 41990
41989: POP
// if i = 1 then
41990: LD_VAR 0 8
41994: PUSH
41995: LD_INT 1
41997: EQUAL
41998: IFFALSE 42109
// begin tmp := [ ] ;
42000: LD_ADDR_VAR 0 19
42004: PUSH
42005: EMPTY
42006: ST_TO_ADDR
// for j in f do
42007: LD_ADDR_VAR 0 9
42011: PUSH
42012: LD_VAR 0 12
42016: PUSH
42017: FOR_IN
42018: IFFALSE 42091
// if GetBType ( j ) = b_bunker then
42020: LD_VAR 0 9
42024: PPUSH
42025: CALL_OW 266
42029: PUSH
42030: LD_INT 32
42032: EQUAL
42033: IFFALSE 42060
// tmp := Insert ( tmp , 1 , j ) else
42035: LD_ADDR_VAR 0 19
42039: PUSH
42040: LD_VAR 0 19
42044: PPUSH
42045: LD_INT 1
42047: PPUSH
42048: LD_VAR 0 9
42052: PPUSH
42053: CALL_OW 2
42057: ST_TO_ADDR
42058: GO 42089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42060: LD_ADDR_VAR 0 19
42064: PUSH
42065: LD_VAR 0 19
42069: PPUSH
42070: LD_VAR 0 19
42074: PUSH
42075: LD_INT 1
42077: PLUS
42078: PPUSH
42079: LD_VAR 0 9
42083: PPUSH
42084: CALL_OW 2
42088: ST_TO_ADDR
42089: GO 42017
42091: POP
42092: POP
// if tmp then
42093: LD_VAR 0 19
42097: IFFALSE 42109
// f := tmp ;
42099: LD_ADDR_VAR 0 12
42103: PUSH
42104: LD_VAR 0 19
42108: ST_TO_ADDR
// end ; x := personel [ i ] ;
42109: LD_ADDR_VAR 0 13
42113: PUSH
42114: LD_VAR 0 6
42118: PUSH
42119: LD_VAR 0 8
42123: ARRAY
42124: ST_TO_ADDR
// if x = - 1 then
42125: LD_VAR 0 13
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: EQUAL
42134: IFFALSE 42343
// begin for j in f do
42136: LD_ADDR_VAR 0 9
42140: PUSH
42141: LD_VAR 0 12
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42339
// repeat InitHc ;
42149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42153: LD_VAR 0 9
42157: PPUSH
42158: CALL_OW 266
42162: PUSH
42163: LD_INT 5
42165: EQUAL
42166: IFFALSE 42236
// begin if UnitsInside ( j ) < 3 then
42168: LD_VAR 0 9
42172: PPUSH
42173: CALL_OW 313
42177: PUSH
42178: LD_INT 3
42180: LESS
42181: IFFALSE 42217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42183: LD_INT 0
42185: PPUSH
42186: LD_INT 5
42188: PUSH
42189: LD_INT 8
42191: PUSH
42192: LD_INT 9
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: PUSH
42200: LD_VAR 0 17
42204: ARRAY
42205: PPUSH
42206: LD_VAR 0 4
42210: PPUSH
42211: CALL_OW 380
42215: GO 42234
// PrepareHuman ( false , i , skill ) ;
42217: LD_INT 0
42219: PPUSH
42220: LD_VAR 0 8
42224: PPUSH
42225: LD_VAR 0 4
42229: PPUSH
42230: CALL_OW 380
// end else
42234: GO 42253
// PrepareHuman ( false , i , skill ) ;
42236: LD_INT 0
42238: PPUSH
42239: LD_VAR 0 8
42243: PPUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: CALL_OW 380
// un := CreateHuman ;
42253: LD_ADDR_VAR 0 14
42257: PUSH
42258: CALL_OW 44
42262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42263: LD_ADDR_VAR 0 7
42267: PUSH
42268: LD_VAR 0 7
42272: PPUSH
42273: LD_INT 1
42275: PPUSH
42276: LD_VAR 0 14
42280: PPUSH
42281: CALL_OW 2
42285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42286: LD_VAR 0 14
42290: PPUSH
42291: LD_VAR 0 9
42295: PPUSH
42296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42300: LD_VAR 0 9
42304: PPUSH
42305: CALL_OW 313
42309: PUSH
42310: LD_INT 6
42312: EQUAL
42313: PUSH
42314: LD_VAR 0 9
42318: PPUSH
42319: CALL_OW 266
42323: PUSH
42324: LD_INT 32
42326: PUSH
42327: LD_INT 31
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: IN
42334: OR
42335: IFFALSE 42149
42337: GO 42146
42339: POP
42340: POP
// end else
42341: GO 42723
// for j = 1 to x do
42343: LD_ADDR_VAR 0 9
42347: PUSH
42348: DOUBLE
42349: LD_INT 1
42351: DEC
42352: ST_TO_ADDR
42353: LD_VAR 0 13
42357: PUSH
42358: FOR_TO
42359: IFFALSE 42721
// begin InitHc ;
42361: CALL_OW 19
// if not f then
42365: LD_VAR 0 12
42369: NOT
42370: IFFALSE 42459
// begin PrepareHuman ( false , i , skill ) ;
42372: LD_INT 0
42374: PPUSH
42375: LD_VAR 0 8
42379: PPUSH
42380: LD_VAR 0 4
42384: PPUSH
42385: CALL_OW 380
// un := CreateHuman ;
42389: LD_ADDR_VAR 0 14
42393: PUSH
42394: CALL_OW 44
42398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42399: LD_ADDR_VAR 0 7
42403: PUSH
42404: LD_VAR 0 7
42408: PPUSH
42409: LD_INT 1
42411: PPUSH
42412: LD_VAR 0 14
42416: PPUSH
42417: CALL_OW 2
42421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42422: LD_VAR 0 14
42426: PPUSH
42427: LD_VAR 0 1
42431: PPUSH
42432: CALL_OW 250
42436: PPUSH
42437: LD_VAR 0 1
42441: PPUSH
42442: CALL_OW 251
42446: PPUSH
42447: LD_INT 10
42449: PPUSH
42450: LD_INT 0
42452: PPUSH
42453: CALL_OW 50
// continue ;
42457: GO 42358
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42459: LD_VAR 0 12
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: CALL_OW 313
42472: PUSH
42473: LD_VAR 0 12
42477: PUSH
42478: LD_INT 1
42480: ARRAY
42481: PPUSH
42482: CALL_OW 266
42486: PUSH
42487: LD_INT 32
42489: PUSH
42490: LD_INT 31
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: IN
42497: AND
42498: PUSH
42499: LD_VAR 0 12
42503: PUSH
42504: LD_INT 1
42506: ARRAY
42507: PPUSH
42508: CALL_OW 313
42512: PUSH
42513: LD_INT 6
42515: EQUAL
42516: OR
42517: IFFALSE 42537
// f := Delete ( f , 1 ) ;
42519: LD_ADDR_VAR 0 12
42523: PUSH
42524: LD_VAR 0 12
42528: PPUSH
42529: LD_INT 1
42531: PPUSH
42532: CALL_OW 3
42536: ST_TO_ADDR
// if not f then
42537: LD_VAR 0 12
42541: NOT
42542: IFFALSE 42560
// begin x := x + 2 ;
42544: LD_ADDR_VAR 0 13
42548: PUSH
42549: LD_VAR 0 13
42553: PUSH
42554: LD_INT 2
42556: PLUS
42557: ST_TO_ADDR
// continue ;
42558: GO 42358
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42560: LD_VAR 0 12
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: CALL_OW 266
42573: PUSH
42574: LD_INT 5
42576: EQUAL
42577: IFFALSE 42651
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42579: LD_VAR 0 12
42583: PUSH
42584: LD_INT 1
42586: ARRAY
42587: PPUSH
42588: CALL_OW 313
42592: PUSH
42593: LD_INT 3
42595: LESS
42596: IFFALSE 42632
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42598: LD_INT 0
42600: PPUSH
42601: LD_INT 5
42603: PUSH
42604: LD_INT 8
42606: PUSH
42607: LD_INT 9
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: LIST
42614: PUSH
42615: LD_VAR 0 17
42619: ARRAY
42620: PPUSH
42621: LD_VAR 0 4
42625: PPUSH
42626: CALL_OW 380
42630: GO 42649
// PrepareHuman ( false , i , skill ) ;
42632: LD_INT 0
42634: PPUSH
42635: LD_VAR 0 8
42639: PPUSH
42640: LD_VAR 0 4
42644: PPUSH
42645: CALL_OW 380
// end else
42649: GO 42668
// PrepareHuman ( false , i , skill ) ;
42651: LD_INT 0
42653: PPUSH
42654: LD_VAR 0 8
42658: PPUSH
42659: LD_VAR 0 4
42663: PPUSH
42664: CALL_OW 380
// un := CreateHuman ;
42668: LD_ADDR_VAR 0 14
42672: PUSH
42673: CALL_OW 44
42677: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42678: LD_ADDR_VAR 0 7
42682: PUSH
42683: LD_VAR 0 7
42687: PPUSH
42688: LD_INT 1
42690: PPUSH
42691: LD_VAR 0 14
42695: PPUSH
42696: CALL_OW 2
42700: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42701: LD_VAR 0 14
42705: PPUSH
42706: LD_VAR 0 12
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: PPUSH
42715: CALL_OW 52
// end ;
42719: GO 42358
42721: POP
42722: POP
// end ;
42723: GO 41660
42725: POP
42726: POP
// result := result ^ buildings ;
42727: LD_ADDR_VAR 0 7
42731: PUSH
42732: LD_VAR 0 7
42736: PUSH
42737: LD_VAR 0 18
42741: ADD
42742: ST_TO_ADDR
// end else
42743: GO 42886
// begin for i = 1 to personel do
42745: LD_ADDR_VAR 0 8
42749: PUSH
42750: DOUBLE
42751: LD_INT 1
42753: DEC
42754: ST_TO_ADDR
42755: LD_VAR 0 6
42759: PUSH
42760: FOR_TO
42761: IFFALSE 42884
// begin if i > 4 then
42763: LD_VAR 0 8
42767: PUSH
42768: LD_INT 4
42770: GREATER
42771: IFFALSE 42775
// break ;
42773: GO 42884
// x := personel [ i ] ;
42775: LD_ADDR_VAR 0 13
42779: PUSH
42780: LD_VAR 0 6
42784: PUSH
42785: LD_VAR 0 8
42789: ARRAY
42790: ST_TO_ADDR
// if x = - 1 then
42791: LD_VAR 0 13
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: EQUAL
42800: IFFALSE 42804
// continue ;
42802: GO 42760
// PrepareHuman ( false , i , skill ) ;
42804: LD_INT 0
42806: PPUSH
42807: LD_VAR 0 8
42811: PPUSH
42812: LD_VAR 0 4
42816: PPUSH
42817: CALL_OW 380
// un := CreateHuman ;
42821: LD_ADDR_VAR 0 14
42825: PUSH
42826: CALL_OW 44
42830: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42831: LD_VAR 0 14
42835: PPUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 250
42845: PPUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: CALL_OW 251
42855: PPUSH
42856: LD_INT 10
42858: PPUSH
42859: LD_INT 0
42861: PPUSH
42862: CALL_OW 50
// result := result ^ un ;
42866: LD_ADDR_VAR 0 7
42870: PUSH
42871: LD_VAR 0 7
42875: PUSH
42876: LD_VAR 0 14
42880: ADD
42881: ST_TO_ADDR
// end ;
42882: GO 42760
42884: POP
42885: POP
// end ; end ;
42886: LD_VAR 0 7
42890: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
// result := false ;
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 0
42916: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42917: LD_VAR 0 1
42921: NOT
42922: PUSH
42923: LD_VAR 0 1
42927: PPUSH
42928: CALL_OW 266
42932: PUSH
42933: LD_INT 32
42935: PUSH
42936: LD_INT 33
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: IN
42943: NOT
42944: OR
42945: IFFALSE 42949
// exit ;
42947: GO 44058
// nat := GetNation ( tower ) ;
42949: LD_ADDR_VAR 0 12
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 248
42963: ST_TO_ADDR
// side := GetSide ( tower ) ;
42964: LD_ADDR_VAR 0 16
42968: PUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 255
42978: ST_TO_ADDR
// x := GetX ( tower ) ;
42979: LD_ADDR_VAR 0 10
42983: PUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: CALL_OW 250
42993: ST_TO_ADDR
// y := GetY ( tower ) ;
42994: LD_ADDR_VAR 0 11
42998: PUSH
42999: LD_VAR 0 1
43003: PPUSH
43004: CALL_OW 251
43008: ST_TO_ADDR
// if not x or not y then
43009: LD_VAR 0 10
43013: NOT
43014: PUSH
43015: LD_VAR 0 11
43019: NOT
43020: OR
43021: IFFALSE 43025
// exit ;
43023: GO 44058
// weapon := 0 ;
43025: LD_ADDR_VAR 0 18
43029: PUSH
43030: LD_INT 0
43032: ST_TO_ADDR
// fac_list := [ ] ;
43033: LD_ADDR_VAR 0 17
43037: PUSH
43038: EMPTY
43039: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43040: LD_ADDR_VAR 0 6
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 274
43054: PPUSH
43055: LD_VAR 0 2
43059: PPUSH
43060: LD_INT 0
43062: PPUSH
43063: CALL 40629 0 3
43067: PPUSH
43068: LD_INT 30
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PPUSH
43078: CALL_OW 72
43082: ST_TO_ADDR
// if not factories then
43083: LD_VAR 0 6
43087: NOT
43088: IFFALSE 43092
// exit ;
43090: GO 44058
// for i in factories do
43092: LD_ADDR_VAR 0 8
43096: PUSH
43097: LD_VAR 0 6
43101: PUSH
43102: FOR_IN
43103: IFFALSE 43128
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43105: LD_ADDR_VAR 0 17
43109: PUSH
43110: LD_VAR 0 17
43114: PUSH
43115: LD_VAR 0 8
43119: PPUSH
43120: CALL_OW 478
43124: UNION
43125: ST_TO_ADDR
43126: GO 43102
43128: POP
43129: POP
// if not fac_list then
43130: LD_VAR 0 17
43134: NOT
43135: IFFALSE 43139
// exit ;
43137: GO 44058
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43139: LD_ADDR_VAR 0 5
43143: PUSH
43144: LD_INT 4
43146: PUSH
43147: LD_INT 5
43149: PUSH
43150: LD_INT 9
43152: PUSH
43153: LD_INT 10
43155: PUSH
43156: LD_INT 6
43158: PUSH
43159: LD_INT 7
43161: PUSH
43162: LD_INT 11
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 27
43176: PUSH
43177: LD_INT 28
43179: PUSH
43180: LD_INT 26
43182: PUSH
43183: LD_INT 30
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 43
43194: PUSH
43195: LD_INT 44
43197: PUSH
43198: LD_INT 46
43200: PUSH
43201: LD_INT 45
43203: PUSH
43204: LD_INT 47
43206: PUSH
43207: LD_INT 49
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: PUSH
43223: LD_VAR 0 12
43227: ARRAY
43228: ST_TO_ADDR
// list := list isect fac_list ;
43229: LD_ADDR_VAR 0 5
43233: PUSH
43234: LD_VAR 0 5
43238: PUSH
43239: LD_VAR 0 17
43243: ISECT
43244: ST_TO_ADDR
// if not list then
43245: LD_VAR 0 5
43249: NOT
43250: IFFALSE 43254
// exit ;
43252: GO 44058
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43254: LD_VAR 0 12
43258: PUSH
43259: LD_INT 3
43261: EQUAL
43262: PUSH
43263: LD_INT 49
43265: PUSH
43266: LD_VAR 0 5
43270: IN
43271: AND
43272: PUSH
43273: LD_INT 31
43275: PPUSH
43276: LD_VAR 0 16
43280: PPUSH
43281: CALL_OW 321
43285: PUSH
43286: LD_INT 2
43288: EQUAL
43289: AND
43290: IFFALSE 43350
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43292: LD_INT 22
43294: PUSH
43295: LD_VAR 0 16
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 35
43306: PUSH
43307: LD_INT 49
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 91
43316: PUSH
43317: LD_VAR 0 1
43321: PUSH
43322: LD_INT 10
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: PPUSH
43335: CALL_OW 69
43339: NOT
43340: IFFALSE 43350
// weapon := ru_time_lapser ;
43342: LD_ADDR_VAR 0 18
43346: PUSH
43347: LD_INT 49
43349: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43350: LD_VAR 0 12
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: IN
43365: PUSH
43366: LD_INT 11
43368: PUSH
43369: LD_VAR 0 5
43373: IN
43374: PUSH
43375: LD_INT 30
43377: PUSH
43378: LD_VAR 0 5
43382: IN
43383: OR
43384: AND
43385: PUSH
43386: LD_INT 6
43388: PPUSH
43389: LD_VAR 0 16
43393: PPUSH
43394: CALL_OW 321
43398: PUSH
43399: LD_INT 2
43401: EQUAL
43402: AND
43403: IFFALSE 43568
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43405: LD_INT 22
43407: PUSH
43408: LD_VAR 0 16
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 35
43422: PUSH
43423: LD_INT 11
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 35
43432: PUSH
43433: LD_INT 30
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 91
43447: PUSH
43448: LD_VAR 0 1
43452: PUSH
43453: LD_INT 18
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: PPUSH
43466: CALL_OW 69
43470: NOT
43471: PUSH
43472: LD_INT 22
43474: PUSH
43475: LD_VAR 0 16
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 30
43489: PUSH
43490: LD_INT 32
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 30
43499: PUSH
43500: LD_INT 33
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 91
43514: PUSH
43515: LD_VAR 0 1
43519: PUSH
43520: LD_INT 12
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: PPUSH
43536: CALL_OW 69
43540: PUSH
43541: LD_INT 2
43543: GREATER
43544: AND
43545: IFFALSE 43568
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43547: LD_ADDR_VAR 0 18
43551: PUSH
43552: LD_INT 11
43554: PUSH
43555: LD_INT 30
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_VAR 0 12
43566: ARRAY
43567: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43568: LD_VAR 0 18
43572: NOT
43573: PUSH
43574: LD_INT 40
43576: PPUSH
43577: LD_VAR 0 16
43581: PPUSH
43582: CALL_OW 321
43586: PUSH
43587: LD_INT 2
43589: EQUAL
43590: AND
43591: PUSH
43592: LD_INT 7
43594: PUSH
43595: LD_VAR 0 5
43599: IN
43600: PUSH
43601: LD_INT 28
43603: PUSH
43604: LD_VAR 0 5
43608: IN
43609: OR
43610: PUSH
43611: LD_INT 45
43613: PUSH
43614: LD_VAR 0 5
43618: IN
43619: OR
43620: AND
43621: IFFALSE 43875
// begin hex := GetHexInfo ( x , y ) ;
43623: LD_ADDR_VAR 0 4
43627: PUSH
43628: LD_VAR 0 10
43632: PPUSH
43633: LD_VAR 0 11
43637: PPUSH
43638: CALL_OW 546
43642: ST_TO_ADDR
// if hex [ 1 ] then
43643: LD_VAR 0 4
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: IFFALSE 43655
// exit ;
43653: GO 44058
// height := hex [ 2 ] ;
43655: LD_ADDR_VAR 0 15
43659: PUSH
43660: LD_VAR 0 4
43664: PUSH
43665: LD_INT 2
43667: ARRAY
43668: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43669: LD_ADDR_VAR 0 14
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 3
43682: PUSH
43683: LD_INT 5
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// for i in tmp do
43692: LD_ADDR_VAR 0 8
43696: PUSH
43697: LD_VAR 0 14
43701: PUSH
43702: FOR_IN
43703: IFFALSE 43873
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43705: LD_ADDR_VAR 0 9
43709: PUSH
43710: LD_VAR 0 10
43714: PPUSH
43715: LD_VAR 0 8
43719: PPUSH
43720: LD_INT 5
43722: PPUSH
43723: CALL_OW 272
43727: PUSH
43728: LD_VAR 0 11
43732: PPUSH
43733: LD_VAR 0 8
43737: PPUSH
43738: LD_INT 5
43740: PPUSH
43741: CALL_OW 273
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43750: LD_VAR 0 9
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: PPUSH
43759: LD_VAR 0 9
43763: PUSH
43764: LD_INT 2
43766: ARRAY
43767: PPUSH
43768: CALL_OW 488
43772: IFFALSE 43871
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43774: LD_ADDR_VAR 0 4
43778: PUSH
43779: LD_VAR 0 9
43783: PUSH
43784: LD_INT 1
43786: ARRAY
43787: PPUSH
43788: LD_VAR 0 9
43792: PUSH
43793: LD_INT 2
43795: ARRAY
43796: PPUSH
43797: CALL_OW 546
43801: ST_TO_ADDR
// if hex [ 1 ] then
43802: LD_VAR 0 4
43806: PUSH
43807: LD_INT 1
43809: ARRAY
43810: IFFALSE 43814
// continue ;
43812: GO 43702
// h := hex [ 2 ] ;
43814: LD_ADDR_VAR 0 13
43818: PUSH
43819: LD_VAR 0 4
43823: PUSH
43824: LD_INT 2
43826: ARRAY
43827: ST_TO_ADDR
// if h + 7 < height then
43828: LD_VAR 0 13
43832: PUSH
43833: LD_INT 7
43835: PLUS
43836: PUSH
43837: LD_VAR 0 15
43841: LESS
43842: IFFALSE 43871
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43844: LD_ADDR_VAR 0 18
43848: PUSH
43849: LD_INT 7
43851: PUSH
43852: LD_INT 28
43854: PUSH
43855: LD_INT 45
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: PUSH
43863: LD_VAR 0 12
43867: ARRAY
43868: ST_TO_ADDR
// break ;
43869: GO 43873
// end ; end ; end ;
43871: GO 43702
43873: POP
43874: POP
// end ; if not weapon then
43875: LD_VAR 0 18
43879: NOT
43880: IFFALSE 43940
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43882: LD_ADDR_VAR 0 5
43886: PUSH
43887: LD_VAR 0 5
43891: PUSH
43892: LD_INT 11
43894: PUSH
43895: LD_INT 30
43897: PUSH
43898: LD_INT 49
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: DIFF
43906: ST_TO_ADDR
// if not list then
43907: LD_VAR 0 5
43911: NOT
43912: IFFALSE 43916
// exit ;
43914: GO 44058
// weapon := list [ rand ( 1 , list ) ] ;
43916: LD_ADDR_VAR 0 18
43920: PUSH
43921: LD_VAR 0 5
43925: PUSH
43926: LD_INT 1
43928: PPUSH
43929: LD_VAR 0 5
43933: PPUSH
43934: CALL_OW 12
43938: ARRAY
43939: ST_TO_ADDR
// end ; if weapon then
43940: LD_VAR 0 18
43944: IFFALSE 44058
// begin tmp := CostOfWeapon ( weapon ) ;
43946: LD_ADDR_VAR 0 14
43950: PUSH
43951: LD_VAR 0 18
43955: PPUSH
43956: CALL_OW 451
43960: ST_TO_ADDR
// j := GetBase ( tower ) ;
43961: LD_ADDR_VAR 0 9
43965: PUSH
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 274
43975: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43976: LD_VAR 0 9
43980: PPUSH
43981: LD_INT 1
43983: PPUSH
43984: CALL_OW 275
43988: PUSH
43989: LD_VAR 0 14
43993: PUSH
43994: LD_INT 1
43996: ARRAY
43997: GREATEREQUAL
43998: PUSH
43999: LD_VAR 0 9
44003: PPUSH
44004: LD_INT 2
44006: PPUSH
44007: CALL_OW 275
44011: PUSH
44012: LD_VAR 0 14
44016: PUSH
44017: LD_INT 2
44019: ARRAY
44020: GREATEREQUAL
44021: AND
44022: PUSH
44023: LD_VAR 0 9
44027: PPUSH
44028: LD_INT 3
44030: PPUSH
44031: CALL_OW 275
44035: PUSH
44036: LD_VAR 0 14
44040: PUSH
44041: LD_INT 3
44043: ARRAY
44044: GREATEREQUAL
44045: AND
44046: IFFALSE 44058
// result := weapon ;
44048: LD_ADDR_VAR 0 3
44052: PUSH
44053: LD_VAR 0 18
44057: ST_TO_ADDR
// end ; end ;
44058: LD_VAR 0 3
44062: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44063: LD_INT 0
44065: PPUSH
44066: PPUSH
// result := true ;
44067: LD_ADDR_VAR 0 3
44071: PUSH
44072: LD_INT 1
44074: ST_TO_ADDR
// if array1 = array2 then
44075: LD_VAR 0 1
44079: PUSH
44080: LD_VAR 0 2
44084: EQUAL
44085: IFFALSE 44145
// begin for i = 1 to array1 do
44087: LD_ADDR_VAR 0 4
44091: PUSH
44092: DOUBLE
44093: LD_INT 1
44095: DEC
44096: ST_TO_ADDR
44097: LD_VAR 0 1
44101: PUSH
44102: FOR_TO
44103: IFFALSE 44141
// if array1 [ i ] <> array2 [ i ] then
44105: LD_VAR 0 1
44109: PUSH
44110: LD_VAR 0 4
44114: ARRAY
44115: PUSH
44116: LD_VAR 0 2
44120: PUSH
44121: LD_VAR 0 4
44125: ARRAY
44126: NONEQUAL
44127: IFFALSE 44139
// begin result := false ;
44129: LD_ADDR_VAR 0 3
44133: PUSH
44134: LD_INT 0
44136: ST_TO_ADDR
// break ;
44137: GO 44141
// end ;
44139: GO 44102
44141: POP
44142: POP
// end else
44143: GO 44153
// result := false ;
44145: LD_ADDR_VAR 0 3
44149: PUSH
44150: LD_INT 0
44152: ST_TO_ADDR
// end ;
44153: LD_VAR 0 3
44157: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44158: LD_INT 0
44160: PPUSH
44161: PPUSH
// if not array1 or not array2 then
44162: LD_VAR 0 1
44166: NOT
44167: PUSH
44168: LD_VAR 0 2
44172: NOT
44173: OR
44174: IFFALSE 44178
// exit ;
44176: GO 44242
// result := true ;
44178: LD_ADDR_VAR 0 3
44182: PUSH
44183: LD_INT 1
44185: ST_TO_ADDR
// for i = 1 to array1 do
44186: LD_ADDR_VAR 0 4
44190: PUSH
44191: DOUBLE
44192: LD_INT 1
44194: DEC
44195: ST_TO_ADDR
44196: LD_VAR 0 1
44200: PUSH
44201: FOR_TO
44202: IFFALSE 44240
// if array1 [ i ] <> array2 [ i ] then
44204: LD_VAR 0 1
44208: PUSH
44209: LD_VAR 0 4
44213: ARRAY
44214: PUSH
44215: LD_VAR 0 2
44219: PUSH
44220: LD_VAR 0 4
44224: ARRAY
44225: NONEQUAL
44226: IFFALSE 44238
// begin result := false ;
44228: LD_ADDR_VAR 0 3
44232: PUSH
44233: LD_INT 0
44235: ST_TO_ADDR
// break ;
44236: GO 44240
// end ;
44238: GO 44201
44240: POP
44241: POP
// end ;
44242: LD_VAR 0 3
44246: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44247: LD_INT 0
44249: PPUSH
44250: PPUSH
44251: PPUSH
// pom := GetBase ( fac ) ;
44252: LD_ADDR_VAR 0 5
44256: PUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 274
44266: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44267: LD_ADDR_VAR 0 4
44271: PUSH
44272: LD_VAR 0 2
44276: PUSH
44277: LD_INT 1
44279: ARRAY
44280: PPUSH
44281: LD_VAR 0 2
44285: PUSH
44286: LD_INT 2
44288: ARRAY
44289: PPUSH
44290: LD_VAR 0 2
44294: PUSH
44295: LD_INT 3
44297: ARRAY
44298: PPUSH
44299: LD_VAR 0 2
44303: PUSH
44304: LD_INT 4
44306: ARRAY
44307: PPUSH
44308: CALL_OW 449
44312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44313: LD_ADDR_VAR 0 3
44317: PUSH
44318: LD_VAR 0 5
44322: PPUSH
44323: LD_INT 1
44325: PPUSH
44326: CALL_OW 275
44330: PUSH
44331: LD_VAR 0 4
44335: PUSH
44336: LD_INT 1
44338: ARRAY
44339: GREATEREQUAL
44340: PUSH
44341: LD_VAR 0 5
44345: PPUSH
44346: LD_INT 2
44348: PPUSH
44349: CALL_OW 275
44353: PUSH
44354: LD_VAR 0 4
44358: PUSH
44359: LD_INT 2
44361: ARRAY
44362: GREATEREQUAL
44363: AND
44364: PUSH
44365: LD_VAR 0 5
44369: PPUSH
44370: LD_INT 3
44372: PPUSH
44373: CALL_OW 275
44377: PUSH
44378: LD_VAR 0 4
44382: PUSH
44383: LD_INT 3
44385: ARRAY
44386: GREATEREQUAL
44387: AND
44388: ST_TO_ADDR
// end ;
44389: LD_VAR 0 3
44393: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44394: LD_INT 0
44396: PPUSH
44397: PPUSH
44398: PPUSH
44399: PPUSH
// pom := GetBase ( building ) ;
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_VAR 0 1
44409: PPUSH
44410: CALL_OW 274
44414: ST_TO_ADDR
// if not pom then
44415: LD_VAR 0 3
44419: NOT
44420: IFFALSE 44424
// exit ;
44422: GO 44594
// btype := GetBType ( building ) ;
44424: LD_ADDR_VAR 0 5
44428: PUSH
44429: LD_VAR 0 1
44433: PPUSH
44434: CALL_OW 266
44438: ST_TO_ADDR
// if btype = b_armoury then
44439: LD_VAR 0 5
44443: PUSH
44444: LD_INT 4
44446: EQUAL
44447: IFFALSE 44457
// btype := b_barracks ;
44449: LD_ADDR_VAR 0 5
44453: PUSH
44454: LD_INT 5
44456: ST_TO_ADDR
// if btype = b_depot then
44457: LD_VAR 0 5
44461: PUSH
44462: LD_INT 0
44464: EQUAL
44465: IFFALSE 44475
// btype := b_warehouse ;
44467: LD_ADDR_VAR 0 5
44471: PUSH
44472: LD_INT 1
44474: ST_TO_ADDR
// if btype = b_workshop then
44475: LD_VAR 0 5
44479: PUSH
44480: LD_INT 2
44482: EQUAL
44483: IFFALSE 44493
// btype := b_factory ;
44485: LD_ADDR_VAR 0 5
44489: PUSH
44490: LD_INT 3
44492: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44493: LD_ADDR_VAR 0 4
44497: PUSH
44498: LD_VAR 0 5
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 248
44512: PPUSH
44513: CALL_OW 450
44517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44518: LD_ADDR_VAR 0 2
44522: PUSH
44523: LD_VAR 0 3
44527: PPUSH
44528: LD_INT 1
44530: PPUSH
44531: CALL_OW 275
44535: PUSH
44536: LD_VAR 0 4
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: GREATEREQUAL
44545: PUSH
44546: LD_VAR 0 3
44550: PPUSH
44551: LD_INT 2
44553: PPUSH
44554: CALL_OW 275
44558: PUSH
44559: LD_VAR 0 4
44563: PUSH
44564: LD_INT 2
44566: ARRAY
44567: GREATEREQUAL
44568: AND
44569: PUSH
44570: LD_VAR 0 3
44574: PPUSH
44575: LD_INT 3
44577: PPUSH
44578: CALL_OW 275
44582: PUSH
44583: LD_VAR 0 4
44587: PUSH
44588: LD_INT 3
44590: ARRAY
44591: GREATEREQUAL
44592: AND
44593: ST_TO_ADDR
// end ;
44594: LD_VAR 0 2
44598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44599: LD_INT 0
44601: PPUSH
44602: PPUSH
44603: PPUSH
// pom := GetBase ( building ) ;
44604: LD_ADDR_VAR 0 4
44608: PUSH
44609: LD_VAR 0 1
44613: PPUSH
44614: CALL_OW 274
44618: ST_TO_ADDR
// if not pom then
44619: LD_VAR 0 4
44623: NOT
44624: IFFALSE 44628
// exit ;
44626: GO 44729
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44628: LD_ADDR_VAR 0 5
44632: PUSH
44633: LD_VAR 0 2
44637: PPUSH
44638: LD_VAR 0 1
44642: PPUSH
44643: CALL_OW 248
44647: PPUSH
44648: CALL_OW 450
44652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_VAR 0 4
44662: PPUSH
44663: LD_INT 1
44665: PPUSH
44666: CALL_OW 275
44670: PUSH
44671: LD_VAR 0 5
44675: PUSH
44676: LD_INT 1
44678: ARRAY
44679: GREATEREQUAL
44680: PUSH
44681: LD_VAR 0 4
44685: PPUSH
44686: LD_INT 2
44688: PPUSH
44689: CALL_OW 275
44693: PUSH
44694: LD_VAR 0 5
44698: PUSH
44699: LD_INT 2
44701: ARRAY
44702: GREATEREQUAL
44703: AND
44704: PUSH
44705: LD_VAR 0 4
44709: PPUSH
44710: LD_INT 3
44712: PPUSH
44713: CALL_OW 275
44717: PUSH
44718: LD_VAR 0 5
44722: PUSH
44723: LD_INT 3
44725: ARRAY
44726: GREATEREQUAL
44727: AND
44728: ST_TO_ADDR
// end ;
44729: LD_VAR 0 3
44733: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44734: LD_INT 0
44736: PPUSH
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
// result := false ;
44747: LD_ADDR_VAR 0 8
44751: PUSH
44752: LD_INT 0
44754: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44755: LD_VAR 0 5
44759: NOT
44760: PUSH
44761: LD_VAR 0 1
44765: NOT
44766: OR
44767: PUSH
44768: LD_VAR 0 2
44772: NOT
44773: OR
44774: PUSH
44775: LD_VAR 0 3
44779: NOT
44780: OR
44781: IFFALSE 44785
// exit ;
44783: GO 45599
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44785: LD_ADDR_VAR 0 14
44789: PUSH
44790: LD_VAR 0 1
44794: PPUSH
44795: LD_VAR 0 2
44799: PPUSH
44800: LD_VAR 0 3
44804: PPUSH
44805: LD_VAR 0 4
44809: PPUSH
44810: LD_VAR 0 5
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PPUSH
44819: CALL_OW 248
44823: PPUSH
44824: LD_INT 0
44826: PPUSH
44827: CALL 46852 0 6
44831: ST_TO_ADDR
// if not hexes then
44832: LD_VAR 0 14
44836: NOT
44837: IFFALSE 44841
// exit ;
44839: GO 45599
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44841: LD_ADDR_VAR 0 17
44845: PUSH
44846: LD_VAR 0 5
44850: PPUSH
44851: LD_INT 22
44853: PUSH
44854: LD_VAR 0 13
44858: PPUSH
44859: CALL_OW 255
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 30
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 30
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PPUSH
44900: CALL_OW 72
44904: ST_TO_ADDR
// for i = 1 to hexes do
44905: LD_ADDR_VAR 0 9
44909: PUSH
44910: DOUBLE
44911: LD_INT 1
44913: DEC
44914: ST_TO_ADDR
44915: LD_VAR 0 14
44919: PUSH
44920: FOR_TO
44921: IFFALSE 45597
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44923: LD_ADDR_VAR 0 13
44927: PUSH
44928: LD_VAR 0 14
44932: PUSH
44933: LD_VAR 0 9
44937: ARRAY
44938: PUSH
44939: LD_INT 1
44941: ARRAY
44942: PPUSH
44943: LD_VAR 0 14
44947: PUSH
44948: LD_VAR 0 9
44952: ARRAY
44953: PUSH
44954: LD_INT 2
44956: ARRAY
44957: PPUSH
44958: CALL_OW 428
44962: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44963: LD_VAR 0 14
44967: PUSH
44968: LD_VAR 0 9
44972: ARRAY
44973: PUSH
44974: LD_INT 1
44976: ARRAY
44977: PPUSH
44978: LD_VAR 0 14
44982: PUSH
44983: LD_VAR 0 9
44987: ARRAY
44988: PUSH
44989: LD_INT 2
44991: ARRAY
44992: PPUSH
44993: CALL_OW 351
44997: PUSH
44998: LD_VAR 0 14
45002: PUSH
45003: LD_VAR 0 9
45007: ARRAY
45008: PUSH
45009: LD_INT 1
45011: ARRAY
45012: PPUSH
45013: LD_VAR 0 14
45017: PUSH
45018: LD_VAR 0 9
45022: ARRAY
45023: PUSH
45024: LD_INT 2
45026: ARRAY
45027: PPUSH
45028: CALL_OW 488
45032: NOT
45033: OR
45034: PUSH
45035: LD_VAR 0 13
45039: PPUSH
45040: CALL_OW 247
45044: PUSH
45045: LD_INT 3
45047: EQUAL
45048: OR
45049: IFFALSE 45055
// exit ;
45051: POP
45052: POP
45053: GO 45599
// if not tmp then
45055: LD_VAR 0 13
45059: NOT
45060: IFFALSE 45064
// continue ;
45062: GO 44920
// result := true ;
45064: LD_ADDR_VAR 0 8
45068: PUSH
45069: LD_INT 1
45071: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45072: LD_VAR 0 6
45076: PUSH
45077: LD_VAR 0 13
45081: PPUSH
45082: CALL_OW 247
45086: PUSH
45087: LD_INT 2
45089: EQUAL
45090: AND
45091: PUSH
45092: LD_VAR 0 13
45096: PPUSH
45097: CALL_OW 263
45101: PUSH
45102: LD_INT 1
45104: EQUAL
45105: AND
45106: IFFALSE 45270
// begin if IsDrivenBy ( tmp ) then
45108: LD_VAR 0 13
45112: PPUSH
45113: CALL_OW 311
45117: IFFALSE 45121
// continue ;
45119: GO 44920
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45121: LD_VAR 0 6
45125: PPUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 60
45131: PUSH
45132: EMPTY
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: LD_INT 55
45144: PUSH
45145: EMPTY
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PPUSH
45156: CALL_OW 72
45160: IFFALSE 45268
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45162: LD_ADDR_VAR 0 18
45166: PUSH
45167: LD_VAR 0 6
45171: PPUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 60
45177: PUSH
45178: EMPTY
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: LD_INT 55
45190: PUSH
45191: EMPTY
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PPUSH
45202: CALL_OW 72
45206: PUSH
45207: LD_INT 1
45209: ARRAY
45210: ST_TO_ADDR
// if IsInUnit ( driver ) then
45211: LD_VAR 0 18
45215: PPUSH
45216: CALL_OW 310
45220: IFFALSE 45231
// ComExit ( driver ) ;
45222: LD_VAR 0 18
45226: PPUSH
45227: CALL 70631 0 1
// AddComEnterUnit ( driver , tmp ) ;
45231: LD_VAR 0 18
45235: PPUSH
45236: LD_VAR 0 13
45240: PPUSH
45241: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45245: LD_VAR 0 18
45249: PPUSH
45250: LD_VAR 0 7
45254: PPUSH
45255: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45259: LD_VAR 0 18
45263: PPUSH
45264: CALL_OW 181
// end ; continue ;
45268: GO 44920
// end ; if not cleaners or not tmp in cleaners then
45270: LD_VAR 0 6
45274: NOT
45275: PUSH
45276: LD_VAR 0 13
45280: PUSH
45281: LD_VAR 0 6
45285: IN
45286: NOT
45287: OR
45288: IFFALSE 45595
// begin if dep then
45290: LD_VAR 0 17
45294: IFFALSE 45430
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45296: LD_ADDR_VAR 0 16
45300: PUSH
45301: LD_VAR 0 17
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: CALL_OW 250
45314: PPUSH
45315: LD_VAR 0 17
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: PPUSH
45324: CALL_OW 254
45328: PPUSH
45329: LD_INT 5
45331: PPUSH
45332: CALL_OW 272
45336: PUSH
45337: LD_VAR 0 17
45341: PUSH
45342: LD_INT 1
45344: ARRAY
45345: PPUSH
45346: CALL_OW 251
45350: PPUSH
45351: LD_VAR 0 17
45355: PUSH
45356: LD_INT 1
45358: ARRAY
45359: PPUSH
45360: CALL_OW 254
45364: PPUSH
45365: LD_INT 5
45367: PPUSH
45368: CALL_OW 273
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45377: LD_VAR 0 16
45381: PUSH
45382: LD_INT 1
45384: ARRAY
45385: PPUSH
45386: LD_VAR 0 16
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: CALL_OW 488
45399: IFFALSE 45430
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45401: LD_VAR 0 13
45405: PPUSH
45406: LD_VAR 0 16
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: PPUSH
45415: LD_VAR 0 16
45419: PUSH
45420: LD_INT 2
45422: ARRAY
45423: PPUSH
45424: CALL_OW 111
// continue ;
45428: GO 44920
// end ; end ; r := GetDir ( tmp ) ;
45430: LD_ADDR_VAR 0 15
45434: PUSH
45435: LD_VAR 0 13
45439: PPUSH
45440: CALL_OW 254
45444: ST_TO_ADDR
// if r = 5 then
45445: LD_VAR 0 15
45449: PUSH
45450: LD_INT 5
45452: EQUAL
45453: IFFALSE 45463
// r := 0 ;
45455: LD_ADDR_VAR 0 15
45459: PUSH
45460: LD_INT 0
45462: ST_TO_ADDR
// for j = r to 5 do
45463: LD_ADDR_VAR 0 10
45467: PUSH
45468: DOUBLE
45469: LD_VAR 0 15
45473: DEC
45474: ST_TO_ADDR
45475: LD_INT 5
45477: PUSH
45478: FOR_TO
45479: IFFALSE 45593
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45481: LD_ADDR_VAR 0 11
45485: PUSH
45486: LD_VAR 0 13
45490: PPUSH
45491: CALL_OW 250
45495: PPUSH
45496: LD_VAR 0 10
45500: PPUSH
45501: LD_INT 2
45503: PPUSH
45504: CALL_OW 272
45508: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45509: LD_ADDR_VAR 0 12
45513: PUSH
45514: LD_VAR 0 13
45518: PPUSH
45519: CALL_OW 251
45523: PPUSH
45524: LD_VAR 0 10
45528: PPUSH
45529: LD_INT 2
45531: PPUSH
45532: CALL_OW 273
45536: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45537: LD_VAR 0 11
45541: PPUSH
45542: LD_VAR 0 12
45546: PPUSH
45547: CALL_OW 488
45551: PUSH
45552: LD_VAR 0 11
45556: PPUSH
45557: LD_VAR 0 12
45561: PPUSH
45562: CALL_OW 428
45566: NOT
45567: AND
45568: IFFALSE 45591
// begin ComMoveXY ( tmp , _x , _y ) ;
45570: LD_VAR 0 13
45574: PPUSH
45575: LD_VAR 0 11
45579: PPUSH
45580: LD_VAR 0 12
45584: PPUSH
45585: CALL_OW 111
// break ;
45589: GO 45593
// end ; end ;
45591: GO 45478
45593: POP
45594: POP
// end ; end ;
45595: GO 44920
45597: POP
45598: POP
// end ;
45599: LD_VAR 0 8
45603: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45604: LD_INT 0
45606: PPUSH
// result := true ;
45607: LD_ADDR_VAR 0 3
45611: PUSH
45612: LD_INT 1
45614: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45615: LD_VAR 0 2
45619: PUSH
45620: LD_INT 24
45622: DOUBLE
45623: EQUAL
45624: IFTRUE 45634
45626: LD_INT 33
45628: DOUBLE
45629: EQUAL
45630: IFTRUE 45634
45632: GO 45659
45634: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45635: LD_ADDR_VAR 0 3
45639: PUSH
45640: LD_INT 32
45642: PPUSH
45643: LD_VAR 0 1
45647: PPUSH
45648: CALL_OW 321
45652: PUSH
45653: LD_INT 2
45655: EQUAL
45656: ST_TO_ADDR
45657: GO 45975
45659: LD_INT 20
45661: DOUBLE
45662: EQUAL
45663: IFTRUE 45667
45665: GO 45692
45667: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45668: LD_ADDR_VAR 0 3
45672: PUSH
45673: LD_INT 6
45675: PPUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 321
45685: PUSH
45686: LD_INT 2
45688: EQUAL
45689: ST_TO_ADDR
45690: GO 45975
45692: LD_INT 22
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45706
45698: LD_INT 36
45700: DOUBLE
45701: EQUAL
45702: IFTRUE 45706
45704: GO 45731
45706: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45707: LD_ADDR_VAR 0 3
45711: PUSH
45712: LD_INT 15
45714: PPUSH
45715: LD_VAR 0 1
45719: PPUSH
45720: CALL_OW 321
45724: PUSH
45725: LD_INT 2
45727: EQUAL
45728: ST_TO_ADDR
45729: GO 45975
45731: LD_INT 30
45733: DOUBLE
45734: EQUAL
45735: IFTRUE 45739
45737: GO 45764
45739: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_INT 20
45747: PPUSH
45748: LD_VAR 0 1
45752: PPUSH
45753: CALL_OW 321
45757: PUSH
45758: LD_INT 2
45760: EQUAL
45761: ST_TO_ADDR
45762: GO 45975
45764: LD_INT 28
45766: DOUBLE
45767: EQUAL
45768: IFTRUE 45778
45770: LD_INT 21
45772: DOUBLE
45773: EQUAL
45774: IFTRUE 45778
45776: GO 45803
45778: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_INT 21
45786: PPUSH
45787: LD_VAR 0 1
45791: PPUSH
45792: CALL_OW 321
45796: PUSH
45797: LD_INT 2
45799: EQUAL
45800: ST_TO_ADDR
45801: GO 45975
45803: LD_INT 16
45805: DOUBLE
45806: EQUAL
45807: IFTRUE 45811
45809: GO 45836
45811: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_INT 84
45819: PPUSH
45820: LD_VAR 0 1
45824: PPUSH
45825: CALL_OW 321
45829: PUSH
45830: LD_INT 2
45832: EQUAL
45833: ST_TO_ADDR
45834: GO 45975
45836: LD_INT 19
45838: DOUBLE
45839: EQUAL
45840: IFTRUE 45850
45842: LD_INT 23
45844: DOUBLE
45845: EQUAL
45846: IFTRUE 45850
45848: GO 45875
45850: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45851: LD_ADDR_VAR 0 3
45855: PUSH
45856: LD_INT 83
45858: PPUSH
45859: LD_VAR 0 1
45863: PPUSH
45864: CALL_OW 321
45868: PUSH
45869: LD_INT 2
45871: EQUAL
45872: ST_TO_ADDR
45873: GO 45975
45875: LD_INT 17
45877: DOUBLE
45878: EQUAL
45879: IFTRUE 45883
45881: GO 45908
45883: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45884: LD_ADDR_VAR 0 3
45888: PUSH
45889: LD_INT 39
45891: PPUSH
45892: LD_VAR 0 1
45896: PPUSH
45897: CALL_OW 321
45901: PUSH
45902: LD_INT 2
45904: EQUAL
45905: ST_TO_ADDR
45906: GO 45975
45908: LD_INT 18
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45916
45914: GO 45941
45916: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45917: LD_ADDR_VAR 0 3
45921: PUSH
45922: LD_INT 40
45924: PPUSH
45925: LD_VAR 0 1
45929: PPUSH
45930: CALL_OW 321
45934: PUSH
45935: LD_INT 2
45937: EQUAL
45938: ST_TO_ADDR
45939: GO 45975
45941: LD_INT 27
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45949
45947: GO 45974
45949: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45950: LD_ADDR_VAR 0 3
45954: PUSH
45955: LD_INT 35
45957: PPUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 321
45967: PUSH
45968: LD_INT 2
45970: EQUAL
45971: ST_TO_ADDR
45972: GO 45975
45974: POP
// end ;
45975: LD_VAR 0 3
45979: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45980: LD_INT 0
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
// result := false ;
45993: LD_ADDR_VAR 0 6
45997: PUSH
45998: LD_INT 0
46000: ST_TO_ADDR
// if btype = b_depot then
46001: LD_VAR 0 2
46005: PUSH
46006: LD_INT 0
46008: EQUAL
46009: IFFALSE 46021
// begin result := true ;
46011: LD_ADDR_VAR 0 6
46015: PUSH
46016: LD_INT 1
46018: ST_TO_ADDR
// exit ;
46019: GO 46847
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46021: LD_VAR 0 1
46025: NOT
46026: PUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 266
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: IN
46047: NOT
46048: OR
46049: PUSH
46050: LD_VAR 0 2
46054: NOT
46055: OR
46056: PUSH
46057: LD_VAR 0 5
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: LD_INT 4
46076: PUSH
46077: LD_INT 5
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: IN
46088: NOT
46089: OR
46090: PUSH
46091: LD_VAR 0 3
46095: PPUSH
46096: LD_VAR 0 4
46100: PPUSH
46101: CALL_OW 488
46105: NOT
46106: OR
46107: IFFALSE 46111
// exit ;
46109: GO 46847
// side := GetSide ( depot ) ;
46111: LD_ADDR_VAR 0 9
46115: PUSH
46116: LD_VAR 0 1
46120: PPUSH
46121: CALL_OW 255
46125: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46126: LD_VAR 0 9
46130: PPUSH
46131: LD_VAR 0 2
46135: PPUSH
46136: CALL 45604 0 2
46140: NOT
46141: IFFALSE 46145
// exit ;
46143: GO 46847
// pom := GetBase ( depot ) ;
46145: LD_ADDR_VAR 0 10
46149: PUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: CALL_OW 274
46159: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46160: LD_ADDR_VAR 0 11
46164: PUSH
46165: LD_VAR 0 2
46169: PPUSH
46170: LD_VAR 0 1
46174: PPUSH
46175: CALL_OW 248
46179: PPUSH
46180: CALL_OW 450
46184: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46185: LD_VAR 0 10
46189: PPUSH
46190: LD_INT 1
46192: PPUSH
46193: CALL_OW 275
46197: PUSH
46198: LD_VAR 0 11
46202: PUSH
46203: LD_INT 1
46205: ARRAY
46206: GREATEREQUAL
46207: PUSH
46208: LD_VAR 0 10
46212: PPUSH
46213: LD_INT 2
46215: PPUSH
46216: CALL_OW 275
46220: PUSH
46221: LD_VAR 0 11
46225: PUSH
46226: LD_INT 2
46228: ARRAY
46229: GREATEREQUAL
46230: AND
46231: PUSH
46232: LD_VAR 0 10
46236: PPUSH
46237: LD_INT 3
46239: PPUSH
46240: CALL_OW 275
46244: PUSH
46245: LD_VAR 0 11
46249: PUSH
46250: LD_INT 3
46252: ARRAY
46253: GREATEREQUAL
46254: AND
46255: NOT
46256: IFFALSE 46260
// exit ;
46258: GO 46847
// if GetBType ( depot ) = b_depot then
46260: LD_VAR 0 1
46264: PPUSH
46265: CALL_OW 266
46269: PUSH
46270: LD_INT 0
46272: EQUAL
46273: IFFALSE 46285
// dist := 28 else
46275: LD_ADDR_VAR 0 14
46279: PUSH
46280: LD_INT 28
46282: ST_TO_ADDR
46283: GO 46293
// dist := 36 ;
46285: LD_ADDR_VAR 0 14
46289: PUSH
46290: LD_INT 36
46292: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46293: LD_VAR 0 1
46297: PPUSH
46298: LD_VAR 0 3
46302: PPUSH
46303: LD_VAR 0 4
46307: PPUSH
46308: CALL_OW 297
46312: PUSH
46313: LD_VAR 0 14
46317: GREATER
46318: IFFALSE 46322
// exit ;
46320: GO 46847
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46322: LD_ADDR_VAR 0 12
46326: PUSH
46327: LD_VAR 0 2
46331: PPUSH
46332: LD_VAR 0 3
46336: PPUSH
46337: LD_VAR 0 4
46341: PPUSH
46342: LD_VAR 0 5
46346: PPUSH
46347: LD_VAR 0 1
46351: PPUSH
46352: CALL_OW 248
46356: PPUSH
46357: LD_INT 0
46359: PPUSH
46360: CALL 46852 0 6
46364: ST_TO_ADDR
// if not hexes then
46365: LD_VAR 0 12
46369: NOT
46370: IFFALSE 46374
// exit ;
46372: GO 46847
// hex := GetHexInfo ( x , y ) ;
46374: LD_ADDR_VAR 0 15
46378: PUSH
46379: LD_VAR 0 3
46383: PPUSH
46384: LD_VAR 0 4
46388: PPUSH
46389: CALL_OW 546
46393: ST_TO_ADDR
// if hex [ 1 ] then
46394: LD_VAR 0 15
46398: PUSH
46399: LD_INT 1
46401: ARRAY
46402: IFFALSE 46406
// exit ;
46404: GO 46847
// height := hex [ 2 ] ;
46406: LD_ADDR_VAR 0 13
46410: PUSH
46411: LD_VAR 0 15
46415: PUSH
46416: LD_INT 2
46418: ARRAY
46419: ST_TO_ADDR
// for i = 1 to hexes do
46420: LD_ADDR_VAR 0 7
46424: PUSH
46425: DOUBLE
46426: LD_INT 1
46428: DEC
46429: ST_TO_ADDR
46430: LD_VAR 0 12
46434: PUSH
46435: FOR_TO
46436: IFFALSE 46766
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46438: LD_VAR 0 12
46442: PUSH
46443: LD_VAR 0 7
46447: ARRAY
46448: PUSH
46449: LD_INT 1
46451: ARRAY
46452: PPUSH
46453: LD_VAR 0 12
46457: PUSH
46458: LD_VAR 0 7
46462: ARRAY
46463: PUSH
46464: LD_INT 2
46466: ARRAY
46467: PPUSH
46468: CALL_OW 488
46472: NOT
46473: PUSH
46474: LD_VAR 0 12
46478: PUSH
46479: LD_VAR 0 7
46483: ARRAY
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: LD_VAR 0 12
46493: PUSH
46494: LD_VAR 0 7
46498: ARRAY
46499: PUSH
46500: LD_INT 2
46502: ARRAY
46503: PPUSH
46504: CALL_OW 428
46508: PUSH
46509: LD_INT 0
46511: GREATER
46512: OR
46513: PUSH
46514: LD_VAR 0 12
46518: PUSH
46519: LD_VAR 0 7
46523: ARRAY
46524: PUSH
46525: LD_INT 1
46527: ARRAY
46528: PPUSH
46529: LD_VAR 0 12
46533: PUSH
46534: LD_VAR 0 7
46538: ARRAY
46539: PUSH
46540: LD_INT 2
46542: ARRAY
46543: PPUSH
46544: CALL_OW 351
46548: OR
46549: IFFALSE 46555
// exit ;
46551: POP
46552: POP
46553: GO 46847
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46555: LD_ADDR_VAR 0 8
46559: PUSH
46560: LD_VAR 0 12
46564: PUSH
46565: LD_VAR 0 7
46569: ARRAY
46570: PUSH
46571: LD_INT 1
46573: ARRAY
46574: PPUSH
46575: LD_VAR 0 12
46579: PUSH
46580: LD_VAR 0 7
46584: ARRAY
46585: PUSH
46586: LD_INT 2
46588: ARRAY
46589: PPUSH
46590: CALL_OW 546
46594: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46595: LD_VAR 0 8
46599: PUSH
46600: LD_INT 1
46602: ARRAY
46603: PUSH
46604: LD_VAR 0 8
46608: PUSH
46609: LD_INT 2
46611: ARRAY
46612: PUSH
46613: LD_VAR 0 13
46617: PUSH
46618: LD_INT 2
46620: PLUS
46621: GREATER
46622: OR
46623: PUSH
46624: LD_VAR 0 8
46628: PUSH
46629: LD_INT 2
46631: ARRAY
46632: PUSH
46633: LD_VAR 0 13
46637: PUSH
46638: LD_INT 2
46640: MINUS
46641: LESS
46642: OR
46643: PUSH
46644: LD_VAR 0 8
46648: PUSH
46649: LD_INT 3
46651: ARRAY
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 8
46658: PUSH
46659: LD_INT 9
46661: PUSH
46662: LD_INT 10
46664: PUSH
46665: LD_INT 11
46667: PUSH
46668: LD_INT 12
46670: PUSH
46671: LD_INT 13
46673: PUSH
46674: LD_INT 16
46676: PUSH
46677: LD_INT 17
46679: PUSH
46680: LD_INT 18
46682: PUSH
46683: LD_INT 19
46685: PUSH
46686: LD_INT 20
46688: PUSH
46689: LD_INT 21
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: IN
46707: NOT
46708: OR
46709: PUSH
46710: LD_VAR 0 8
46714: PUSH
46715: LD_INT 5
46717: ARRAY
46718: NOT
46719: OR
46720: PUSH
46721: LD_VAR 0 8
46725: PUSH
46726: LD_INT 6
46728: ARRAY
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 7
46738: PUSH
46739: LD_INT 9
46741: PUSH
46742: LD_INT 10
46744: PUSH
46745: LD_INT 11
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: IN
46756: NOT
46757: OR
46758: IFFALSE 46764
// exit ;
46760: POP
46761: POP
46762: GO 46847
// end ;
46764: GO 46435
46766: POP
46767: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46768: LD_VAR 0 9
46772: PPUSH
46773: LD_VAR 0 3
46777: PPUSH
46778: LD_VAR 0 4
46782: PPUSH
46783: LD_INT 20
46785: PPUSH
46786: CALL 38770 0 4
46790: PUSH
46791: LD_INT 4
46793: ARRAY
46794: IFFALSE 46798
// exit ;
46796: GO 46847
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46798: LD_VAR 0 2
46802: PUSH
46803: LD_INT 29
46805: PUSH
46806: LD_INT 30
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: IN
46813: PUSH
46814: LD_VAR 0 3
46818: PPUSH
46819: LD_VAR 0 4
46823: PPUSH
46824: LD_VAR 0 9
46828: PPUSH
46829: CALL_OW 440
46833: NOT
46834: AND
46835: IFFALSE 46839
// exit ;
46837: GO 46847
// result := true ;
46839: LD_ADDR_VAR 0 6
46843: PUSH
46844: LD_INT 1
46846: ST_TO_ADDR
// end ;
46847: LD_VAR 0 6
46851: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46852: LD_INT 0
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
46860: PPUSH
46861: PPUSH
46862: PPUSH
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
46873: PPUSH
46874: PPUSH
46875: PPUSH
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
46880: PPUSH
46881: PPUSH
46882: PPUSH
46883: PPUSH
46884: PPUSH
46885: PPUSH
46886: PPUSH
46887: PPUSH
46888: PPUSH
46889: PPUSH
46890: PPUSH
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
46902: PPUSH
46903: PPUSH
46904: PPUSH
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
// result = [ ] ;
46912: LD_ADDR_VAR 0 7
46916: PUSH
46917: EMPTY
46918: ST_TO_ADDR
// temp_list = [ ] ;
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: EMPTY
46925: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46926: LD_VAR 0 4
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 4
46945: PUSH
46946: LD_INT 5
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: IN
46957: NOT
46958: PUSH
46959: LD_VAR 0 1
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: IN
46974: PUSH
46975: LD_VAR 0 5
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: IN
46994: NOT
46995: AND
46996: OR
46997: IFFALSE 47001
// exit ;
46999: GO 65392
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47001: LD_VAR 0 1
47005: PUSH
47006: LD_INT 6
47008: PUSH
47009: LD_INT 7
47011: PUSH
47012: LD_INT 8
47014: PUSH
47015: LD_INT 13
47017: PUSH
47018: LD_INT 12
47020: PUSH
47021: LD_INT 15
47023: PUSH
47024: LD_INT 11
47026: PUSH
47027: LD_INT 14
47029: PUSH
47030: LD_INT 10
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: IN
47044: IFFALSE 47054
// btype = b_lab ;
47046: LD_ADDR_VAR 0 1
47050: PUSH
47051: LD_INT 6
47053: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47054: LD_VAR 0 6
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: IN
47073: NOT
47074: PUSH
47075: LD_VAR 0 1
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: LD_INT 6
47094: PUSH
47095: LD_INT 36
47097: PUSH
47098: LD_INT 4
47100: PUSH
47101: LD_INT 5
47103: PUSH
47104: LD_INT 31
47106: PUSH
47107: LD_INT 32
47109: PUSH
47110: LD_INT 33
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: IN
47126: NOT
47127: PUSH
47128: LD_VAR 0 6
47132: PUSH
47133: LD_INT 1
47135: EQUAL
47136: AND
47137: OR
47138: PUSH
47139: LD_VAR 0 1
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: IN
47154: NOT
47155: PUSH
47156: LD_VAR 0 6
47160: PUSH
47161: LD_INT 2
47163: EQUAL
47164: AND
47165: OR
47166: IFFALSE 47176
// mode = 0 ;
47168: LD_ADDR_VAR 0 6
47172: PUSH
47173: LD_INT 0
47175: ST_TO_ADDR
// case mode of 0 :
47176: LD_VAR 0 6
47180: PUSH
47181: LD_INT 0
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 58642
47189: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47190: LD_ADDR_VAR 0 11
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47383: LD_ADDR_VAR 0 12
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47579: LD_ADDR_VAR 0 13
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47778: LD_ADDR_VAR 0 14
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 3
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47974: LD_ADDR_VAR 0 15
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48167: LD_ADDR_VAR 0 16
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48360: LD_ADDR_VAR 0 17
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48590: LD_ADDR_VAR 0 18
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48820: LD_ADDR_VAR 0 19
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49050: LD_ADDR_VAR 0 20
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49280: LD_ADDR_VAR 0 21
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49510: LD_ADDR_VAR 0 22
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49740: LD_ADDR_VAR 0 23
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 3
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50020: LD_ADDR_VAR 0 24
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50296: LD_ADDR_VAR 0 25
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 3
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50570: LD_ADDR_VAR 0 26
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50846: LD_ADDR_VAR 0 27
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51126: LD_ADDR_VAR 0 28
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51408: LD_ADDR_VAR 0 29
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51687: LD_ADDR_VAR 0 30
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51965: LD_ADDR_VAR 0 31
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: LD_INT 3
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52243: LD_ADDR_VAR 0 32
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52521: LD_ADDR_VAR 0 33
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52800: LD_ADDR_VAR 0 34
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53080: LD_ADDR_VAR 0 35
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53192: LD_ADDR_VAR 0 36
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53304: LD_ADDR_VAR 0 37
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53416: LD_ADDR_VAR 0 38
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53528: LD_ADDR_VAR 0 39
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53640: LD_ADDR_VAR 0 40
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53752: LD_ADDR_VAR 0 41
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: NEG
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54102: LD_ADDR_VAR 0 42
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54452: LD_ADDR_VAR 0 43
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54800: LD_ADDR_VAR 0 44
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 3
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55150: LD_ADDR_VAR 0 45
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 3
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55500: LD_ADDR_VAR 0 46
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55848: LD_ADDR_VAR 0 47
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55999: LD_ADDR_VAR 0 48
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56146: LD_ADDR_VAR 0 49
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56290: LD_ADDR_VAR 0 50
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56434: LD_ADDR_VAR 0 51
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56581: LD_ADDR_VAR 0 52
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56732: LD_ADDR_VAR 0 53
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56962: LD_ADDR_VAR 0 54
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 2
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57192: LD_ADDR_VAR 0 55
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57422: LD_ADDR_VAR 0 56
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57652: LD_ADDR_VAR 0 57
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57882: LD_ADDR_VAR 0 58
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58112: LD_ADDR_VAR 0 59
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58200: LD_ADDR_VAR 0 60
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58288: LD_ADDR_VAR 0 61
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: LD_INT 1
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58376: LD_ADDR_VAR 0 62
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58464: LD_ADDR_VAR 0 63
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58552: LD_ADDR_VAR 0 64
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// end ; 1 :
58640: GO 64537
58642: LD_INT 1
58644: DOUBLE
58645: EQUAL
58646: IFTRUE 58650
58648: GO 61273
58650: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58651: LD_ADDR_VAR 0 11
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58695: LD_ADDR_VAR 0 12
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58736: LD_ADDR_VAR 0 13
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58776: LD_ADDR_VAR 0 14
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58817: LD_ADDR_VAR 0 15
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58861: LD_ADDR_VAR 0 16
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58907: LD_ADDR_VAR 0 17
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 3
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58951: LD_ADDR_VAR 0 18
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58992: LD_ADDR_VAR 0 19
58996: PUSH
58997: LD_INT 3
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59032: LD_ADDR_VAR 0 20
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 0
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59073: LD_ADDR_VAR 0 21
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59117: LD_ADDR_VAR 0 22
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59163: LD_ADDR_VAR 0 23
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 4
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59207: LD_ADDR_VAR 0 24
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59248: LD_ADDR_VAR 0 25
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 4
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59288: LD_ADDR_VAR 0 26
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 4
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59329: LD_ADDR_VAR 0 27
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59373: LD_ADDR_VAR 0 28
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 4
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 4
59404: NEG
59405: PUSH
59406: LD_INT 3
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59419: LD_ADDR_VAR 0 29
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 5
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 4
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 6
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 6
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 5
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59574: LD_ADDR_VAR 0 30
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 4
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 5
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 5
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 6
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 6
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59717: LD_ADDR_VAR 0 31
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 3
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 4
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 5
59784: PUSH
59785: LD_INT 4
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 5
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 6
59814: PUSH
59815: LD_INT 5
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 6
59824: PUSH
59825: LD_INT 6
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: PUSH
59835: LD_INT 6
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59856: LD_ADDR_VAR 0 32
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 4
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 5
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 4
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 6
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: LD_INT 6
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 5
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59999: LD_ADDR_VAR 0 33
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 4
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 5
60085: NEG
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 5
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 6
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 6
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60154: LD_ADDR_VAR 0 34
60158: PUSH
60159: LD_INT 2
60161: NEG
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 4
60209: NEG
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: LD_INT 5
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 4
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 5
60257: NEG
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: NEG
60270: PUSH
60271: LD_INT 6
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 6
60281: NEG
60282: PUSH
60283: LD_INT 5
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 6
60293: NEG
60294: PUSH
60295: LD_INT 6
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60317: LD_ADDR_VAR 0 41
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60361: LD_ADDR_VAR 0 42
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60402: LD_ADDR_VAR 0 43
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60442: LD_ADDR_VAR 0 44
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60483: LD_ADDR_VAR 0 45
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60527: LD_ADDR_VAR 0 46
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60573: LD_ADDR_VAR 0 47
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60606: LD_ADDR_VAR 0 48
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60637: LD_ADDR_VAR 0 49
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60666: LD_ADDR_VAR 0 50
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60695: LD_ADDR_VAR 0 51
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60726: LD_ADDR_VAR 0 52
60730: PUSH
60731: LD_INT 3
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60759: LD_ADDR_VAR 0 53
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60803: LD_ADDR_VAR 0 54
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60844: LD_ADDR_VAR 0 55
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: PUSH
60862: LD_INT 3
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60884: LD_ADDR_VAR 0 56
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 2
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60925: LD_ADDR_VAR 0 57
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: NEG
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60969: LD_ADDR_VAR 0 58
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61015: LD_ADDR_VAR 0 59
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61059: LD_ADDR_VAR 0 60
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61100: LD_ADDR_VAR 0 61
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61140: LD_ADDR_VAR 0 62
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61181: LD_ADDR_VAR 0 63
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61225: LD_ADDR_VAR 0 64
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// end ; 2 :
61271: GO 64537
61273: LD_INT 2
61275: DOUBLE
61276: EQUAL
61277: IFTRUE 61281
61279: GO 64536
61281: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61282: LD_ADDR_VAR 0 29
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 5
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 4
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 3
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 5
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 5
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 4
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 5
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 4
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: NEG
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 4
61667: NEG
61668: PUSH
61669: LD_INT 4
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 4
61679: NEG
61680: PUSH
61681: LD_INT 5
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: LD_INT 4
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 5
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 5
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: NEG
61752: PUSH
61753: LD_INT 5
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 3
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61820: LD_ADDR_VAR 0 30
61824: PUSH
61825: LD_INT 4
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 4
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 5
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 5
61857: PUSH
61858: LD_INT 5
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 4
61867: PUSH
61868: LD_INT 5
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 5
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 5
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 4
62010: NEG
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 4
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 5
62066: NEG
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 5
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 5
62089: NEG
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 3
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 3
62112: NEG
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: LD_INT 4
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: NEG
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 4
62172: NEG
62173: PUSH
62174: LD_INT 3
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 4
62184: NEG
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 4
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 4
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 4
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 5
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 4
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 3
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 4
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: LD_INT 5
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 5
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62367: LD_ADDR_VAR 0 31
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 5
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 5
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 5
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: NEG
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 3
62512: NEG
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 4
62523: NEG
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 4
62569: NEG
62570: PUSH
62571: LD_INT 4
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 4
62581: NEG
62582: PUSH
62583: LD_INT 5
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 4
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: LD_INT 3
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 4
62617: NEG
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 5
62629: NEG
62630: PUSH
62631: LD_INT 4
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 5
62641: NEG
62642: PUSH
62643: LD_INT 5
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: LD_INT 5
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 5
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: LD_INT 4
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 4
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 2
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 4
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 4
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 4
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 5
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 5
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 5
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62917: LD_ADDR_VAR 0 32
62921: PUSH
62922: LD_INT 4
62924: NEG
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 3
62958: NEG
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 5
62980: NEG
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 5
63003: NEG
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 3
63026: NEG
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: LD_INT 4
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: LD_INT 3
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 4
63086: NEG
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 4
63098: NEG
63099: PUSH
63100: LD_INT 4
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 4
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 4
63122: NEG
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 4
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 5
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 4
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 3
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 4
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 5
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 5
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 4
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 4
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 5
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 5
63359: PUSH
63360: LD_INT 5
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 4
63369: PUSH
63370: LD_INT 5
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 3
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63464: LD_ADDR_VAR 0 33
63468: PUSH
63469: LD_INT 4
63471: NEG
63472: PUSH
63473: LD_INT 4
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 4
63483: NEG
63484: PUSH
63485: LD_INT 5
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: LD_INT 4
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: NEG
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 4
63519: NEG
63520: PUSH
63521: LD_INT 3
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 5
63531: NEG
63532: PUSH
63533: LD_INT 4
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 5
63543: NEG
63544: PUSH
63545: LD_INT 5
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: LD_INT 5
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 5
63567: NEG
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 4
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 4
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: LD_INT 4
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 4
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 4
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 5
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 5
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 4
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 5
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: LD_INT 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 4
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 4
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 4
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 4
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: LD_INT 4
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 5
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 5
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: LD_INT 4
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: LD_INT 5
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64002: LD_ADDR_VAR 0 34
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 4
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 4
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: LD_INT 3
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 5
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 3
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: LD_INT 5
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 4
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: LD_INT 4
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 5
64224: PUSH
64225: LD_INT 4
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 5
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: LD_INT 5
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 4
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 5
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 5
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 4
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 4
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 5
64443: NEG
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 5
64454: NEG
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 5
64466: NEG
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// end ; end ;
64534: GO 64537
64536: POP
// case btype of b_depot , b_warehouse :
64537: LD_VAR 0 1
64541: PUSH
64542: LD_INT 0
64544: DOUBLE
64545: EQUAL
64546: IFTRUE 64556
64548: LD_INT 1
64550: DOUBLE
64551: EQUAL
64552: IFTRUE 64556
64554: GO 64757
64556: POP
// case nation of nation_american :
64557: LD_VAR 0 5
64561: PUSH
64562: LD_INT 1
64564: DOUBLE
64565: EQUAL
64566: IFTRUE 64570
64568: GO 64626
64570: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64571: LD_ADDR_VAR 0 9
64575: PUSH
64576: LD_VAR 0 11
64580: PUSH
64581: LD_VAR 0 12
64585: PUSH
64586: LD_VAR 0 13
64590: PUSH
64591: LD_VAR 0 14
64595: PUSH
64596: LD_VAR 0 15
64600: PUSH
64601: LD_VAR 0 16
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 4
64618: PUSH
64619: LD_INT 1
64621: PLUS
64622: ARRAY
64623: ST_TO_ADDR
64624: GO 64755
64626: LD_INT 2
64628: DOUBLE
64629: EQUAL
64630: IFTRUE 64634
64632: GO 64690
64634: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64635: LD_ADDR_VAR 0 9
64639: PUSH
64640: LD_VAR 0 17
64644: PUSH
64645: LD_VAR 0 18
64649: PUSH
64650: LD_VAR 0 19
64654: PUSH
64655: LD_VAR 0 20
64659: PUSH
64660: LD_VAR 0 21
64664: PUSH
64665: LD_VAR 0 22
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: PUSH
64678: LD_VAR 0 4
64682: PUSH
64683: LD_INT 1
64685: PLUS
64686: ARRAY
64687: ST_TO_ADDR
64688: GO 64755
64690: LD_INT 3
64692: DOUBLE
64693: EQUAL
64694: IFTRUE 64698
64696: GO 64754
64698: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64699: LD_ADDR_VAR 0 9
64703: PUSH
64704: LD_VAR 0 23
64708: PUSH
64709: LD_VAR 0 24
64713: PUSH
64714: LD_VAR 0 25
64718: PUSH
64719: LD_VAR 0 26
64723: PUSH
64724: LD_VAR 0 27
64728: PUSH
64729: LD_VAR 0 28
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: PUSH
64742: LD_VAR 0 4
64746: PUSH
64747: LD_INT 1
64749: PLUS
64750: ARRAY
64751: ST_TO_ADDR
64752: GO 64755
64754: POP
64755: GO 65310
64757: LD_INT 2
64759: DOUBLE
64760: EQUAL
64761: IFTRUE 64771
64763: LD_INT 3
64765: DOUBLE
64766: EQUAL
64767: IFTRUE 64771
64769: GO 64827
64771: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64772: LD_ADDR_VAR 0 9
64776: PUSH
64777: LD_VAR 0 29
64781: PUSH
64782: LD_VAR 0 30
64786: PUSH
64787: LD_VAR 0 31
64791: PUSH
64792: LD_VAR 0 32
64796: PUSH
64797: LD_VAR 0 33
64801: PUSH
64802: LD_VAR 0 34
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: PUSH
64815: LD_VAR 0 4
64819: PUSH
64820: LD_INT 1
64822: PLUS
64823: ARRAY
64824: ST_TO_ADDR
64825: GO 65310
64827: LD_INT 16
64829: DOUBLE
64830: EQUAL
64831: IFTRUE 64889
64833: LD_INT 17
64835: DOUBLE
64836: EQUAL
64837: IFTRUE 64889
64839: LD_INT 18
64841: DOUBLE
64842: EQUAL
64843: IFTRUE 64889
64845: LD_INT 19
64847: DOUBLE
64848: EQUAL
64849: IFTRUE 64889
64851: LD_INT 22
64853: DOUBLE
64854: EQUAL
64855: IFTRUE 64889
64857: LD_INT 20
64859: DOUBLE
64860: EQUAL
64861: IFTRUE 64889
64863: LD_INT 21
64865: DOUBLE
64866: EQUAL
64867: IFTRUE 64889
64869: LD_INT 23
64871: DOUBLE
64872: EQUAL
64873: IFTRUE 64889
64875: LD_INT 24
64877: DOUBLE
64878: EQUAL
64879: IFTRUE 64889
64881: LD_INT 25
64883: DOUBLE
64884: EQUAL
64885: IFTRUE 64889
64887: GO 64945
64889: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64890: LD_ADDR_VAR 0 9
64894: PUSH
64895: LD_VAR 0 35
64899: PUSH
64900: LD_VAR 0 36
64904: PUSH
64905: LD_VAR 0 37
64909: PUSH
64910: LD_VAR 0 38
64914: PUSH
64915: LD_VAR 0 39
64919: PUSH
64920: LD_VAR 0 40
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: PUSH
64933: LD_VAR 0 4
64937: PUSH
64938: LD_INT 1
64940: PLUS
64941: ARRAY
64942: ST_TO_ADDR
64943: GO 65310
64945: LD_INT 6
64947: DOUBLE
64948: EQUAL
64949: IFTRUE 65001
64951: LD_INT 7
64953: DOUBLE
64954: EQUAL
64955: IFTRUE 65001
64957: LD_INT 8
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 65001
64963: LD_INT 13
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 65001
64969: LD_INT 12
64971: DOUBLE
64972: EQUAL
64973: IFTRUE 65001
64975: LD_INT 15
64977: DOUBLE
64978: EQUAL
64979: IFTRUE 65001
64981: LD_INT 11
64983: DOUBLE
64984: EQUAL
64985: IFTRUE 65001
64987: LD_INT 14
64989: DOUBLE
64990: EQUAL
64991: IFTRUE 65001
64993: LD_INT 10
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65001
64999: GO 65057
65001: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65002: LD_ADDR_VAR 0 9
65006: PUSH
65007: LD_VAR 0 41
65011: PUSH
65012: LD_VAR 0 42
65016: PUSH
65017: LD_VAR 0 43
65021: PUSH
65022: LD_VAR 0 44
65026: PUSH
65027: LD_VAR 0 45
65031: PUSH
65032: LD_VAR 0 46
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: PUSH
65045: LD_VAR 0 4
65049: PUSH
65050: LD_INT 1
65052: PLUS
65053: ARRAY
65054: ST_TO_ADDR
65055: GO 65310
65057: LD_INT 36
65059: DOUBLE
65060: EQUAL
65061: IFTRUE 65065
65063: GO 65121
65065: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65066: LD_ADDR_VAR 0 9
65070: PUSH
65071: LD_VAR 0 47
65075: PUSH
65076: LD_VAR 0 48
65080: PUSH
65081: LD_VAR 0 49
65085: PUSH
65086: LD_VAR 0 50
65090: PUSH
65091: LD_VAR 0 51
65095: PUSH
65096: LD_VAR 0 52
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 4
65113: PUSH
65114: LD_INT 1
65116: PLUS
65117: ARRAY
65118: ST_TO_ADDR
65119: GO 65310
65121: LD_INT 4
65123: DOUBLE
65124: EQUAL
65125: IFTRUE 65147
65127: LD_INT 5
65129: DOUBLE
65130: EQUAL
65131: IFTRUE 65147
65133: LD_INT 34
65135: DOUBLE
65136: EQUAL
65137: IFTRUE 65147
65139: LD_INT 37
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65147
65145: GO 65203
65147: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65148: LD_ADDR_VAR 0 9
65152: PUSH
65153: LD_VAR 0 53
65157: PUSH
65158: LD_VAR 0 54
65162: PUSH
65163: LD_VAR 0 55
65167: PUSH
65168: LD_VAR 0 56
65172: PUSH
65173: LD_VAR 0 57
65177: PUSH
65178: LD_VAR 0 58
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: PUSH
65191: LD_VAR 0 4
65195: PUSH
65196: LD_INT 1
65198: PLUS
65199: ARRAY
65200: ST_TO_ADDR
65201: GO 65310
65203: LD_INT 31
65205: DOUBLE
65206: EQUAL
65207: IFTRUE 65253
65209: LD_INT 32
65211: DOUBLE
65212: EQUAL
65213: IFTRUE 65253
65215: LD_INT 33
65217: DOUBLE
65218: EQUAL
65219: IFTRUE 65253
65221: LD_INT 27
65223: DOUBLE
65224: EQUAL
65225: IFTRUE 65253
65227: LD_INT 26
65229: DOUBLE
65230: EQUAL
65231: IFTRUE 65253
65233: LD_INT 28
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65253
65239: LD_INT 29
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65253
65245: LD_INT 30
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65253
65251: GO 65309
65253: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65254: LD_ADDR_VAR 0 9
65258: PUSH
65259: LD_VAR 0 59
65263: PUSH
65264: LD_VAR 0 60
65268: PUSH
65269: LD_VAR 0 61
65273: PUSH
65274: LD_VAR 0 62
65278: PUSH
65279: LD_VAR 0 63
65283: PUSH
65284: LD_VAR 0 64
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: LD_VAR 0 4
65301: PUSH
65302: LD_INT 1
65304: PLUS
65305: ARRAY
65306: ST_TO_ADDR
65307: GO 65310
65309: POP
// temp_list2 = [ ] ;
65310: LD_ADDR_VAR 0 10
65314: PUSH
65315: EMPTY
65316: ST_TO_ADDR
// for i in temp_list do
65317: LD_ADDR_VAR 0 8
65321: PUSH
65322: LD_VAR 0 9
65326: PUSH
65327: FOR_IN
65328: IFFALSE 65380
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65330: LD_ADDR_VAR 0 10
65334: PUSH
65335: LD_VAR 0 10
65339: PUSH
65340: LD_VAR 0 8
65344: PUSH
65345: LD_INT 1
65347: ARRAY
65348: PUSH
65349: LD_VAR 0 2
65353: PLUS
65354: PUSH
65355: LD_VAR 0 8
65359: PUSH
65360: LD_INT 2
65362: ARRAY
65363: PUSH
65364: LD_VAR 0 3
65368: PLUS
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: ADD
65377: ST_TO_ADDR
65378: GO 65327
65380: POP
65381: POP
// result = temp_list2 ;
65382: LD_ADDR_VAR 0 7
65386: PUSH
65387: LD_VAR 0 10
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 7
65396: RET
// export function EnemyInRange ( unit , dist ) ; begin
65397: LD_INT 0
65399: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65400: LD_ADDR_VAR 0 3
65404: PUSH
65405: LD_VAR 0 1
65409: PPUSH
65410: CALL_OW 255
65414: PPUSH
65415: LD_VAR 0 1
65419: PPUSH
65420: CALL_OW 250
65424: PPUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: CALL_OW 251
65434: PPUSH
65435: LD_VAR 0 2
65439: PPUSH
65440: CALL 38770 0 4
65444: PUSH
65445: LD_INT 4
65447: ARRAY
65448: ST_TO_ADDR
// end ;
65449: LD_VAR 0 3
65453: RET
// export function PlayerSeeMe ( unit ) ; begin
65454: LD_INT 0
65456: PPUSH
// result := See ( your_side , unit ) ;
65457: LD_ADDR_VAR 0 2
65461: PUSH
65462: LD_OWVAR 2
65466: PPUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: CALL_OW 292
65476: ST_TO_ADDR
// end ;
65477: LD_VAR 0 2
65481: RET
// export function ReverseDir ( unit ) ; begin
65482: LD_INT 0
65484: PPUSH
// if not unit then
65485: LD_VAR 0 1
65489: NOT
65490: IFFALSE 65494
// exit ;
65492: GO 65517
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65494: LD_ADDR_VAR 0 2
65498: PUSH
65499: LD_VAR 0 1
65503: PPUSH
65504: CALL_OW 254
65508: PUSH
65509: LD_INT 3
65511: PLUS
65512: PUSH
65513: LD_INT 6
65515: MOD
65516: ST_TO_ADDR
// end ;
65517: LD_VAR 0 2
65521: RET
// export function ReverseArray ( array ) ; var i ; begin
65522: LD_INT 0
65524: PPUSH
65525: PPUSH
// if not array then
65526: LD_VAR 0 1
65530: NOT
65531: IFFALSE 65535
// exit ;
65533: GO 65590
// result := [ ] ;
65535: LD_ADDR_VAR 0 2
65539: PUSH
65540: EMPTY
65541: ST_TO_ADDR
// for i := array downto 1 do
65542: LD_ADDR_VAR 0 3
65546: PUSH
65547: DOUBLE
65548: LD_VAR 0 1
65552: INC
65553: ST_TO_ADDR
65554: LD_INT 1
65556: PUSH
65557: FOR_DOWNTO
65558: IFFALSE 65588
// result := Join ( result , array [ i ] ) ;
65560: LD_ADDR_VAR 0 2
65564: PUSH
65565: LD_VAR 0 2
65569: PPUSH
65570: LD_VAR 0 1
65574: PUSH
65575: LD_VAR 0 3
65579: ARRAY
65580: PPUSH
65581: CALL 70233 0 2
65585: ST_TO_ADDR
65586: GO 65557
65588: POP
65589: POP
// end ;
65590: LD_VAR 0 2
65594: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65595: LD_INT 0
65597: PPUSH
65598: PPUSH
65599: PPUSH
65600: PPUSH
65601: PPUSH
65602: PPUSH
// if not unit or not hexes then
65603: LD_VAR 0 1
65607: NOT
65608: PUSH
65609: LD_VAR 0 2
65613: NOT
65614: OR
65615: IFFALSE 65619
// exit ;
65617: GO 65742
// dist := 9999 ;
65619: LD_ADDR_VAR 0 5
65623: PUSH
65624: LD_INT 9999
65626: ST_TO_ADDR
// for i = 1 to hexes do
65627: LD_ADDR_VAR 0 4
65631: PUSH
65632: DOUBLE
65633: LD_INT 1
65635: DEC
65636: ST_TO_ADDR
65637: LD_VAR 0 2
65641: PUSH
65642: FOR_TO
65643: IFFALSE 65730
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65645: LD_ADDR_VAR 0 6
65649: PUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: LD_VAR 0 2
65659: PUSH
65660: LD_VAR 0 4
65664: ARRAY
65665: PUSH
65666: LD_INT 1
65668: ARRAY
65669: PPUSH
65670: LD_VAR 0 2
65674: PUSH
65675: LD_VAR 0 4
65679: ARRAY
65680: PUSH
65681: LD_INT 2
65683: ARRAY
65684: PPUSH
65685: CALL_OW 297
65689: ST_TO_ADDR
// if tdist < dist then
65690: LD_VAR 0 6
65694: PUSH
65695: LD_VAR 0 5
65699: LESS
65700: IFFALSE 65728
// begin hex := hexes [ i ] ;
65702: LD_ADDR_VAR 0 8
65706: PUSH
65707: LD_VAR 0 2
65711: PUSH
65712: LD_VAR 0 4
65716: ARRAY
65717: ST_TO_ADDR
// dist := tdist ;
65718: LD_ADDR_VAR 0 5
65722: PUSH
65723: LD_VAR 0 6
65727: ST_TO_ADDR
// end ; end ;
65728: GO 65642
65730: POP
65731: POP
// result := hex ;
65732: LD_ADDR_VAR 0 3
65736: PUSH
65737: LD_VAR 0 8
65741: ST_TO_ADDR
// end ;
65742: LD_VAR 0 3
65746: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65747: LD_INT 0
65749: PPUSH
65750: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65751: LD_VAR 0 1
65755: NOT
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 21
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 23
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PPUSH
65786: CALL_OW 69
65790: IN
65791: NOT
65792: OR
65793: IFFALSE 65797
// exit ;
65795: GO 65844
// for i = 1 to 3 do
65797: LD_ADDR_VAR 0 3
65801: PUSH
65802: DOUBLE
65803: LD_INT 1
65805: DEC
65806: ST_TO_ADDR
65807: LD_INT 3
65809: PUSH
65810: FOR_TO
65811: IFFALSE 65842
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 250
65822: PPUSH
65823: LD_VAR 0 1
65827: PPUSH
65828: CALL_OW 251
65832: PPUSH
65833: LD_INT 1
65835: PPUSH
65836: CALL_OW 453
65840: GO 65810
65842: POP
65843: POP
// end ;
65844: LD_VAR 0 2
65848: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65849: LD_INT 0
65851: PPUSH
65852: PPUSH
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65857: LD_VAR 0 1
65861: NOT
65862: PUSH
65863: LD_VAR 0 2
65867: NOT
65868: OR
65869: PUSH
65870: LD_VAR 0 1
65874: PPUSH
65875: CALL_OW 314
65879: OR
65880: IFFALSE 65884
// exit ;
65882: GO 66351
// if GetLives ( i ) < 250 then
65884: LD_VAR 0 4
65888: PPUSH
65889: CALL_OW 256
65893: PUSH
65894: LD_INT 250
65896: LESS
65897: IFFALSE 65910
// begin ComAutodestruct ( i ) ;
65899: LD_VAR 0 4
65903: PPUSH
65904: CALL 65747 0 1
// exit ;
65908: GO 66351
// end ; x := GetX ( enemy_unit ) ;
65910: LD_ADDR_VAR 0 7
65914: PUSH
65915: LD_VAR 0 2
65919: PPUSH
65920: CALL_OW 250
65924: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65925: LD_ADDR_VAR 0 8
65929: PUSH
65930: LD_VAR 0 2
65934: PPUSH
65935: CALL_OW 251
65939: ST_TO_ADDR
// if not x or not y then
65940: LD_VAR 0 7
65944: NOT
65945: PUSH
65946: LD_VAR 0 8
65950: NOT
65951: OR
65952: IFFALSE 65956
// exit ;
65954: GO 66351
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65956: LD_ADDR_VAR 0 6
65960: PUSH
65961: LD_VAR 0 7
65965: PPUSH
65966: LD_INT 0
65968: PPUSH
65969: LD_INT 4
65971: PPUSH
65972: CALL_OW 272
65976: PUSH
65977: LD_VAR 0 8
65981: PPUSH
65982: LD_INT 0
65984: PPUSH
65985: LD_INT 4
65987: PPUSH
65988: CALL_OW 273
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_VAR 0 7
66001: PPUSH
66002: LD_INT 1
66004: PPUSH
66005: LD_INT 4
66007: PPUSH
66008: CALL_OW 272
66012: PUSH
66013: LD_VAR 0 8
66017: PPUSH
66018: LD_INT 1
66020: PPUSH
66021: LD_INT 4
66023: PPUSH
66024: CALL_OW 273
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_VAR 0 7
66037: PPUSH
66038: LD_INT 2
66040: PPUSH
66041: LD_INT 4
66043: PPUSH
66044: CALL_OW 272
66048: PUSH
66049: LD_VAR 0 8
66053: PPUSH
66054: LD_INT 2
66056: PPUSH
66057: LD_INT 4
66059: PPUSH
66060: CALL_OW 273
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_VAR 0 7
66073: PPUSH
66074: LD_INT 3
66076: PPUSH
66077: LD_INT 4
66079: PPUSH
66080: CALL_OW 272
66084: PUSH
66085: LD_VAR 0 8
66089: PPUSH
66090: LD_INT 3
66092: PPUSH
66093: LD_INT 4
66095: PPUSH
66096: CALL_OW 273
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_VAR 0 7
66109: PPUSH
66110: LD_INT 4
66112: PPUSH
66113: LD_INT 4
66115: PPUSH
66116: CALL_OW 272
66120: PUSH
66121: LD_VAR 0 8
66125: PPUSH
66126: LD_INT 4
66128: PPUSH
66129: LD_INT 4
66131: PPUSH
66132: CALL_OW 273
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 7
66145: PPUSH
66146: LD_INT 5
66148: PPUSH
66149: LD_INT 4
66151: PPUSH
66152: CALL_OW 272
66156: PUSH
66157: LD_VAR 0 8
66161: PPUSH
66162: LD_INT 5
66164: PPUSH
66165: LD_INT 4
66167: PPUSH
66168: CALL_OW 273
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: ST_TO_ADDR
// for i = tmp downto 1 do
66185: LD_ADDR_VAR 0 4
66189: PUSH
66190: DOUBLE
66191: LD_VAR 0 6
66195: INC
66196: ST_TO_ADDR
66197: LD_INT 1
66199: PUSH
66200: FOR_DOWNTO
66201: IFFALSE 66302
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66203: LD_VAR 0 6
66207: PUSH
66208: LD_VAR 0 4
66212: ARRAY
66213: PUSH
66214: LD_INT 1
66216: ARRAY
66217: PPUSH
66218: LD_VAR 0 6
66222: PUSH
66223: LD_VAR 0 4
66227: ARRAY
66228: PUSH
66229: LD_INT 2
66231: ARRAY
66232: PPUSH
66233: CALL_OW 488
66237: NOT
66238: PUSH
66239: LD_VAR 0 6
66243: PUSH
66244: LD_VAR 0 4
66248: ARRAY
66249: PUSH
66250: LD_INT 1
66252: ARRAY
66253: PPUSH
66254: LD_VAR 0 6
66258: PUSH
66259: LD_VAR 0 4
66263: ARRAY
66264: PUSH
66265: LD_INT 2
66267: ARRAY
66268: PPUSH
66269: CALL_OW 428
66273: PUSH
66274: LD_INT 0
66276: NONEQUAL
66277: OR
66278: IFFALSE 66300
// tmp := Delete ( tmp , i ) ;
66280: LD_ADDR_VAR 0 6
66284: PUSH
66285: LD_VAR 0 6
66289: PPUSH
66290: LD_VAR 0 4
66294: PPUSH
66295: CALL_OW 3
66299: ST_TO_ADDR
66300: GO 66200
66302: POP
66303: POP
// j := GetClosestHex ( unit , tmp ) ;
66304: LD_ADDR_VAR 0 5
66308: PUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 6
66318: PPUSH
66319: CALL 65595 0 2
66323: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66324: LD_VAR 0 1
66328: PPUSH
66329: LD_VAR 0 5
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: PPUSH
66338: LD_VAR 0 5
66342: PUSH
66343: LD_INT 2
66345: ARRAY
66346: PPUSH
66347: CALL_OW 111
// end ;
66351: LD_VAR 0 3
66355: RET
// export function PrepareApemanSoldier ( ) ; begin
66356: LD_INT 0
66358: PPUSH
// uc_nation := 0 ;
66359: LD_ADDR_OWVAR 21
66363: PUSH
66364: LD_INT 0
66366: ST_TO_ADDR
// hc_sex := sex_male ;
66367: LD_ADDR_OWVAR 27
66371: PUSH
66372: LD_INT 1
66374: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66375: LD_ADDR_OWVAR 28
66379: PUSH
66380: LD_INT 15
66382: ST_TO_ADDR
// hc_gallery :=  ;
66383: LD_ADDR_OWVAR 33
66387: PUSH
66388: LD_STRING 
66390: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66391: LD_ADDR_OWVAR 31
66395: PUSH
66396: LD_INT 0
66398: PPUSH
66399: LD_INT 3
66401: PPUSH
66402: CALL_OW 12
66406: PUSH
66407: LD_INT 0
66409: PPUSH
66410: LD_INT 3
66412: PPUSH
66413: CALL_OW 12
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: ST_TO_ADDR
// end ;
66430: LD_VAR 0 1
66434: RET
// export function PrepareApemanEngineer ( ) ; begin
66435: LD_INT 0
66437: PPUSH
// uc_nation := 0 ;
66438: LD_ADDR_OWVAR 21
66442: PUSH
66443: LD_INT 0
66445: ST_TO_ADDR
// hc_sex := sex_male ;
66446: LD_ADDR_OWVAR 27
66450: PUSH
66451: LD_INT 1
66453: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66454: LD_ADDR_OWVAR 28
66458: PUSH
66459: LD_INT 16
66461: ST_TO_ADDR
// hc_gallery :=  ;
66462: LD_ADDR_OWVAR 33
66466: PUSH
66467: LD_STRING 
66469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66470: LD_ADDR_OWVAR 31
66474: PUSH
66475: LD_INT 0
66477: PPUSH
66478: LD_INT 3
66480: PPUSH
66481: CALL_OW 12
66485: PUSH
66486: LD_INT 0
66488: PPUSH
66489: LD_INT 3
66491: PPUSH
66492: CALL_OW 12
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// end ;
66509: LD_VAR 0 1
66513: RET
// export function PrepareApeman ( agressivity ) ; begin
66514: LD_INT 0
66516: PPUSH
// uc_side := 0 ;
66517: LD_ADDR_OWVAR 20
66521: PUSH
66522: LD_INT 0
66524: ST_TO_ADDR
// uc_nation := 0 ;
66525: LD_ADDR_OWVAR 21
66529: PUSH
66530: LD_INT 0
66532: ST_TO_ADDR
// hc_sex := sex_male ;
66533: LD_ADDR_OWVAR 27
66537: PUSH
66538: LD_INT 1
66540: ST_TO_ADDR
// hc_class := class_apeman ;
66541: LD_ADDR_OWVAR 28
66545: PUSH
66546: LD_INT 12
66548: ST_TO_ADDR
// hc_gallery :=  ;
66549: LD_ADDR_OWVAR 33
66553: PUSH
66554: LD_STRING 
66556: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66557: LD_ADDR_OWVAR 35
66561: PUSH
66562: LD_VAR 0 1
66566: NEG
66567: PPUSH
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 12
66577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66578: LD_ADDR_OWVAR 31
66582: PUSH
66583: LD_INT 0
66585: PPUSH
66586: LD_INT 3
66588: PPUSH
66589: CALL_OW 12
66593: PUSH
66594: LD_INT 0
66596: PPUSH
66597: LD_INT 3
66599: PPUSH
66600: CALL_OW 12
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: ST_TO_ADDR
// end ;
66617: LD_VAR 0 2
66621: RET
// export function PrepareTiger ( agressivity ) ; begin
66622: LD_INT 0
66624: PPUSH
// uc_side := 0 ;
66625: LD_ADDR_OWVAR 20
66629: PUSH
66630: LD_INT 0
66632: ST_TO_ADDR
// uc_nation := 0 ;
66633: LD_ADDR_OWVAR 21
66637: PUSH
66638: LD_INT 0
66640: ST_TO_ADDR
// hc_class := class_tiger ;
66641: LD_ADDR_OWVAR 28
66645: PUSH
66646: LD_INT 14
66648: ST_TO_ADDR
// hc_gallery :=  ;
66649: LD_ADDR_OWVAR 33
66653: PUSH
66654: LD_STRING 
66656: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66657: LD_ADDR_OWVAR 35
66661: PUSH
66662: LD_VAR 0 1
66666: NEG
66667: PPUSH
66668: LD_VAR 0 1
66672: PPUSH
66673: CALL_OW 12
66677: ST_TO_ADDR
// end ;
66678: LD_VAR 0 2
66682: RET
// export function PrepareEnchidna ( ) ; begin
66683: LD_INT 0
66685: PPUSH
// uc_side := 0 ;
66686: LD_ADDR_OWVAR 20
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
// uc_nation := 0 ;
66694: LD_ADDR_OWVAR 21
66698: PUSH
66699: LD_INT 0
66701: ST_TO_ADDR
// hc_class := class_baggie ;
66702: LD_ADDR_OWVAR 28
66706: PUSH
66707: LD_INT 13
66709: ST_TO_ADDR
// hc_gallery :=  ;
66710: LD_ADDR_OWVAR 33
66714: PUSH
66715: LD_STRING 
66717: ST_TO_ADDR
// end ;
66718: LD_VAR 0 1
66722: RET
// export function PrepareFrog ( ) ; begin
66723: LD_INT 0
66725: PPUSH
// uc_side := 0 ;
66726: LD_ADDR_OWVAR 20
66730: PUSH
66731: LD_INT 0
66733: ST_TO_ADDR
// uc_nation := 0 ;
66734: LD_ADDR_OWVAR 21
66738: PUSH
66739: LD_INT 0
66741: ST_TO_ADDR
// hc_class := class_frog ;
66742: LD_ADDR_OWVAR 28
66746: PUSH
66747: LD_INT 19
66749: ST_TO_ADDR
// hc_gallery :=  ;
66750: LD_ADDR_OWVAR 33
66754: PUSH
66755: LD_STRING 
66757: ST_TO_ADDR
// end ;
66758: LD_VAR 0 1
66762: RET
// export function PrepareFish ( ) ; begin
66763: LD_INT 0
66765: PPUSH
// uc_side := 0 ;
66766: LD_ADDR_OWVAR 20
66770: PUSH
66771: LD_INT 0
66773: ST_TO_ADDR
// uc_nation := 0 ;
66774: LD_ADDR_OWVAR 21
66778: PUSH
66779: LD_INT 0
66781: ST_TO_ADDR
// hc_class := class_fish ;
66782: LD_ADDR_OWVAR 28
66786: PUSH
66787: LD_INT 20
66789: ST_TO_ADDR
// hc_gallery :=  ;
66790: LD_ADDR_OWVAR 33
66794: PUSH
66795: LD_STRING 
66797: ST_TO_ADDR
// end ;
66798: LD_VAR 0 1
66802: RET
// export function PrepareBird ( ) ; begin
66803: LD_INT 0
66805: PPUSH
// uc_side := 0 ;
66806: LD_ADDR_OWVAR 20
66810: PUSH
66811: LD_INT 0
66813: ST_TO_ADDR
// uc_nation := 0 ;
66814: LD_ADDR_OWVAR 21
66818: PUSH
66819: LD_INT 0
66821: ST_TO_ADDR
// hc_class := class_phororhacos ;
66822: LD_ADDR_OWVAR 28
66826: PUSH
66827: LD_INT 18
66829: ST_TO_ADDR
// hc_gallery :=  ;
66830: LD_ADDR_OWVAR 33
66834: PUSH
66835: LD_STRING 
66837: ST_TO_ADDR
// end ;
66838: LD_VAR 0 1
66842: RET
// export function PrepareHorse ( ) ; begin
66843: LD_INT 0
66845: PPUSH
// uc_side := 0 ;
66846: LD_ADDR_OWVAR 20
66850: PUSH
66851: LD_INT 0
66853: ST_TO_ADDR
// uc_nation := 0 ;
66854: LD_ADDR_OWVAR 21
66858: PUSH
66859: LD_INT 0
66861: ST_TO_ADDR
// hc_class := class_horse ;
66862: LD_ADDR_OWVAR 28
66866: PUSH
66867: LD_INT 21
66869: ST_TO_ADDR
// hc_gallery :=  ;
66870: LD_ADDR_OWVAR 33
66874: PUSH
66875: LD_STRING 
66877: ST_TO_ADDR
// end ;
66878: LD_VAR 0 1
66882: RET
// export function PrepareMastodont ( ) ; begin
66883: LD_INT 0
66885: PPUSH
// uc_side := 0 ;
66886: LD_ADDR_OWVAR 20
66890: PUSH
66891: LD_INT 0
66893: ST_TO_ADDR
// uc_nation := 0 ;
66894: LD_ADDR_OWVAR 21
66898: PUSH
66899: LD_INT 0
66901: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66902: LD_ADDR_OWVAR 37
66906: PUSH
66907: LD_INT 31
66909: ST_TO_ADDR
// vc_control := control_rider ;
66910: LD_ADDR_OWVAR 38
66914: PUSH
66915: LD_INT 4
66917: ST_TO_ADDR
// end ;
66918: LD_VAR 0 1
66922: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66923: LD_INT 0
66925: PPUSH
66926: PPUSH
66927: PPUSH
// uc_side = 0 ;
66928: LD_ADDR_OWVAR 20
66932: PUSH
66933: LD_INT 0
66935: ST_TO_ADDR
// uc_nation = 0 ;
66936: LD_ADDR_OWVAR 21
66940: PUSH
66941: LD_INT 0
66943: ST_TO_ADDR
// InitHc_All ( ) ;
66944: CALL_OW 584
// InitVc ;
66948: CALL_OW 20
// if mastodonts then
66952: LD_VAR 0 6
66956: IFFALSE 67023
// for i = 1 to mastodonts do
66958: LD_ADDR_VAR 0 11
66962: PUSH
66963: DOUBLE
66964: LD_INT 1
66966: DEC
66967: ST_TO_ADDR
66968: LD_VAR 0 6
66972: PUSH
66973: FOR_TO
66974: IFFALSE 67021
// begin vc_chassis := 31 ;
66976: LD_ADDR_OWVAR 37
66980: PUSH
66981: LD_INT 31
66983: ST_TO_ADDR
// vc_control := control_rider ;
66984: LD_ADDR_OWVAR 38
66988: PUSH
66989: LD_INT 4
66991: ST_TO_ADDR
// animal := CreateVehicle ;
66992: LD_ADDR_VAR 0 12
66996: PUSH
66997: CALL_OW 45
67001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67002: LD_VAR 0 12
67006: PPUSH
67007: LD_VAR 0 8
67011: PPUSH
67012: LD_INT 0
67014: PPUSH
67015: CALL 69151 0 3
// end ;
67019: GO 66973
67021: POP
67022: POP
// if horses then
67023: LD_VAR 0 5
67027: IFFALSE 67094
// for i = 1 to horses do
67029: LD_ADDR_VAR 0 11
67033: PUSH
67034: DOUBLE
67035: LD_INT 1
67037: DEC
67038: ST_TO_ADDR
67039: LD_VAR 0 5
67043: PUSH
67044: FOR_TO
67045: IFFALSE 67092
// begin hc_class := 21 ;
67047: LD_ADDR_OWVAR 28
67051: PUSH
67052: LD_INT 21
67054: ST_TO_ADDR
// hc_gallery :=  ;
67055: LD_ADDR_OWVAR 33
67059: PUSH
67060: LD_STRING 
67062: ST_TO_ADDR
// animal := CreateHuman ;
67063: LD_ADDR_VAR 0 12
67067: PUSH
67068: CALL_OW 44
67072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67073: LD_VAR 0 12
67077: PPUSH
67078: LD_VAR 0 8
67082: PPUSH
67083: LD_INT 0
67085: PPUSH
67086: CALL 69151 0 3
// end ;
67090: GO 67044
67092: POP
67093: POP
// if birds then
67094: LD_VAR 0 1
67098: IFFALSE 67165
// for i = 1 to birds do
67100: LD_ADDR_VAR 0 11
67104: PUSH
67105: DOUBLE
67106: LD_INT 1
67108: DEC
67109: ST_TO_ADDR
67110: LD_VAR 0 1
67114: PUSH
67115: FOR_TO
67116: IFFALSE 67163
// begin hc_class := 18 ;
67118: LD_ADDR_OWVAR 28
67122: PUSH
67123: LD_INT 18
67125: ST_TO_ADDR
// hc_gallery =  ;
67126: LD_ADDR_OWVAR 33
67130: PUSH
67131: LD_STRING 
67133: ST_TO_ADDR
// animal := CreateHuman ;
67134: LD_ADDR_VAR 0 12
67138: PUSH
67139: CALL_OW 44
67143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67144: LD_VAR 0 12
67148: PPUSH
67149: LD_VAR 0 8
67153: PPUSH
67154: LD_INT 0
67156: PPUSH
67157: CALL 69151 0 3
// end ;
67161: GO 67115
67163: POP
67164: POP
// if tigers then
67165: LD_VAR 0 2
67169: IFFALSE 67253
// for i = 1 to tigers do
67171: LD_ADDR_VAR 0 11
67175: PUSH
67176: DOUBLE
67177: LD_INT 1
67179: DEC
67180: ST_TO_ADDR
67181: LD_VAR 0 2
67185: PUSH
67186: FOR_TO
67187: IFFALSE 67251
// begin hc_class = class_tiger ;
67189: LD_ADDR_OWVAR 28
67193: PUSH
67194: LD_INT 14
67196: ST_TO_ADDR
// hc_gallery =  ;
67197: LD_ADDR_OWVAR 33
67201: PUSH
67202: LD_STRING 
67204: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67205: LD_ADDR_OWVAR 35
67209: PUSH
67210: LD_INT 7
67212: NEG
67213: PPUSH
67214: LD_INT 7
67216: PPUSH
67217: CALL_OW 12
67221: ST_TO_ADDR
// animal := CreateHuman ;
67222: LD_ADDR_VAR 0 12
67226: PUSH
67227: CALL_OW 44
67231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67232: LD_VAR 0 12
67236: PPUSH
67237: LD_VAR 0 8
67241: PPUSH
67242: LD_INT 0
67244: PPUSH
67245: CALL 69151 0 3
// end ;
67249: GO 67186
67251: POP
67252: POP
// if apemans then
67253: LD_VAR 0 3
67257: IFFALSE 67380
// for i = 1 to apemans do
67259: LD_ADDR_VAR 0 11
67263: PUSH
67264: DOUBLE
67265: LD_INT 1
67267: DEC
67268: ST_TO_ADDR
67269: LD_VAR 0 3
67273: PUSH
67274: FOR_TO
67275: IFFALSE 67378
// begin hc_class = class_apeman ;
67277: LD_ADDR_OWVAR 28
67281: PUSH
67282: LD_INT 12
67284: ST_TO_ADDR
// hc_gallery =  ;
67285: LD_ADDR_OWVAR 33
67289: PUSH
67290: LD_STRING 
67292: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67293: LD_ADDR_OWVAR 35
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PPUSH
67302: LD_INT 2
67304: PPUSH
67305: CALL_OW 12
67309: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67310: LD_ADDR_OWVAR 31
67314: PUSH
67315: LD_INT 1
67317: PPUSH
67318: LD_INT 3
67320: PPUSH
67321: CALL_OW 12
67325: PUSH
67326: LD_INT 1
67328: PPUSH
67329: LD_INT 3
67331: PPUSH
67332: CALL_OW 12
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// animal := CreateHuman ;
67349: LD_ADDR_VAR 0 12
67353: PUSH
67354: CALL_OW 44
67358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67359: LD_VAR 0 12
67363: PPUSH
67364: LD_VAR 0 8
67368: PPUSH
67369: LD_INT 0
67371: PPUSH
67372: CALL 69151 0 3
// end ;
67376: GO 67274
67378: POP
67379: POP
// if enchidnas then
67380: LD_VAR 0 4
67384: IFFALSE 67451
// for i = 1 to enchidnas do
67386: LD_ADDR_VAR 0 11
67390: PUSH
67391: DOUBLE
67392: LD_INT 1
67394: DEC
67395: ST_TO_ADDR
67396: LD_VAR 0 4
67400: PUSH
67401: FOR_TO
67402: IFFALSE 67449
// begin hc_class = 13 ;
67404: LD_ADDR_OWVAR 28
67408: PUSH
67409: LD_INT 13
67411: ST_TO_ADDR
// hc_gallery =  ;
67412: LD_ADDR_OWVAR 33
67416: PUSH
67417: LD_STRING 
67419: ST_TO_ADDR
// animal := CreateHuman ;
67420: LD_ADDR_VAR 0 12
67424: PUSH
67425: CALL_OW 44
67429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67430: LD_VAR 0 12
67434: PPUSH
67435: LD_VAR 0 8
67439: PPUSH
67440: LD_INT 0
67442: PPUSH
67443: CALL 69151 0 3
// end ;
67447: GO 67401
67449: POP
67450: POP
// if fishes then
67451: LD_VAR 0 7
67455: IFFALSE 67522
// for i = 1 to fishes do
67457: LD_ADDR_VAR 0 11
67461: PUSH
67462: DOUBLE
67463: LD_INT 1
67465: DEC
67466: ST_TO_ADDR
67467: LD_VAR 0 7
67471: PUSH
67472: FOR_TO
67473: IFFALSE 67520
// begin hc_class = 20 ;
67475: LD_ADDR_OWVAR 28
67479: PUSH
67480: LD_INT 20
67482: ST_TO_ADDR
// hc_gallery =  ;
67483: LD_ADDR_OWVAR 33
67487: PUSH
67488: LD_STRING 
67490: ST_TO_ADDR
// animal := CreateHuman ;
67491: LD_ADDR_VAR 0 12
67495: PUSH
67496: CALL_OW 44
67500: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67501: LD_VAR 0 12
67505: PPUSH
67506: LD_VAR 0 9
67510: PPUSH
67511: LD_INT 0
67513: PPUSH
67514: CALL 69151 0 3
// end ;
67518: GO 67472
67520: POP
67521: POP
// end ;
67522: LD_VAR 0 10
67526: RET
// export function WantHeal ( sci , unit ) ; begin
67527: LD_INT 0
67529: PPUSH
// if GetTaskList ( sci ) > 0 then
67530: LD_VAR 0 1
67534: PPUSH
67535: CALL_OW 437
67539: PUSH
67540: LD_INT 0
67542: GREATER
67543: IFFALSE 67613
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67545: LD_VAR 0 1
67549: PPUSH
67550: CALL_OW 437
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PUSH
67559: LD_INT 1
67561: ARRAY
67562: PUSH
67563: LD_STRING l
67565: EQUAL
67566: PUSH
67567: LD_VAR 0 1
67571: PPUSH
67572: CALL_OW 437
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: PUSH
67581: LD_INT 4
67583: ARRAY
67584: PUSH
67585: LD_VAR 0 2
67589: EQUAL
67590: AND
67591: IFFALSE 67603
// result := true else
67593: LD_ADDR_VAR 0 3
67597: PUSH
67598: LD_INT 1
67600: ST_TO_ADDR
67601: GO 67611
// result := false ;
67603: LD_ADDR_VAR 0 3
67607: PUSH
67608: LD_INT 0
67610: ST_TO_ADDR
// end else
67611: GO 67621
// result := false ;
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_INT 0
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 3
67625: RET
// export function HealTarget ( sci ) ; begin
67626: LD_INT 0
67628: PPUSH
// if not sci then
67629: LD_VAR 0 1
67633: NOT
67634: IFFALSE 67638
// exit ;
67636: GO 67703
// result := 0 ;
67638: LD_ADDR_VAR 0 2
67642: PUSH
67643: LD_INT 0
67645: ST_TO_ADDR
// if GetTaskList ( sci ) then
67646: LD_VAR 0 1
67650: PPUSH
67651: CALL_OW 437
67655: IFFALSE 67703
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67657: LD_VAR 0 1
67661: PPUSH
67662: CALL_OW 437
67666: PUSH
67667: LD_INT 1
67669: ARRAY
67670: PUSH
67671: LD_INT 1
67673: ARRAY
67674: PUSH
67675: LD_STRING l
67677: EQUAL
67678: IFFALSE 67703
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67680: LD_ADDR_VAR 0 2
67684: PUSH
67685: LD_VAR 0 1
67689: PPUSH
67690: CALL_OW 437
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PUSH
67699: LD_INT 4
67701: ARRAY
67702: ST_TO_ADDR
// end ;
67703: LD_VAR 0 2
67707: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67708: LD_INT 0
67710: PPUSH
67711: PPUSH
67712: PPUSH
67713: PPUSH
// if not base_units then
67714: LD_VAR 0 1
67718: NOT
67719: IFFALSE 67723
// exit ;
67721: GO 67810
// result := false ;
67723: LD_ADDR_VAR 0 2
67727: PUSH
67728: LD_INT 0
67730: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67731: LD_ADDR_VAR 0 5
67735: PUSH
67736: LD_VAR 0 1
67740: PPUSH
67741: LD_INT 21
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PPUSH
67751: CALL_OW 72
67755: ST_TO_ADDR
// if not tmp then
67756: LD_VAR 0 5
67760: NOT
67761: IFFALSE 67765
// exit ;
67763: GO 67810
// for i in tmp do
67765: LD_ADDR_VAR 0 3
67769: PUSH
67770: LD_VAR 0 5
67774: PUSH
67775: FOR_IN
67776: IFFALSE 67808
// begin result := EnemyInRange ( i , 22 ) ;
67778: LD_ADDR_VAR 0 2
67782: PUSH
67783: LD_VAR 0 3
67787: PPUSH
67788: LD_INT 22
67790: PPUSH
67791: CALL 65397 0 2
67795: ST_TO_ADDR
// if result then
67796: LD_VAR 0 2
67800: IFFALSE 67806
// exit ;
67802: POP
67803: POP
67804: GO 67810
// end ;
67806: GO 67775
67808: POP
67809: POP
// end ;
67810: LD_VAR 0 2
67814: RET
// export function FilterByTag ( units , tag ) ; begin
67815: LD_INT 0
67817: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67818: LD_ADDR_VAR 0 3
67822: PUSH
67823: LD_VAR 0 1
67827: PPUSH
67828: LD_INT 120
67830: PUSH
67831: LD_VAR 0 2
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PPUSH
67840: CALL_OW 72
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 3
67849: RET
// export function IsDriver ( un ) ; begin
67850: LD_INT 0
67852: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67853: LD_ADDR_VAR 0 2
67857: PUSH
67858: LD_VAR 0 1
67862: PUSH
67863: LD_INT 55
67865: PUSH
67866: EMPTY
67867: LIST
67868: PPUSH
67869: CALL_OW 69
67873: IN
67874: ST_TO_ADDR
// end ;
67875: LD_VAR 0 2
67879: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67880: LD_INT 0
67882: PPUSH
67883: PPUSH
// list := [ ] ;
67884: LD_ADDR_VAR 0 5
67888: PUSH
67889: EMPTY
67890: ST_TO_ADDR
// case d of 0 :
67891: LD_VAR 0 3
67895: PUSH
67896: LD_INT 0
67898: DOUBLE
67899: EQUAL
67900: IFTRUE 67904
67902: GO 68037
67904: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67905: LD_ADDR_VAR 0 5
67909: PUSH
67910: LD_VAR 0 1
67914: PUSH
67915: LD_INT 4
67917: MINUS
67918: PUSH
67919: LD_VAR 0 2
67923: PUSH
67924: LD_INT 4
67926: MINUS
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: LIST
67935: PUSH
67936: LD_VAR 0 1
67940: PUSH
67941: LD_INT 3
67943: MINUS
67944: PUSH
67945: LD_VAR 0 2
67949: PUSH
67950: LD_INT 1
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: PUSH
67958: LD_VAR 0 1
67962: PUSH
67963: LD_INT 4
67965: PLUS
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 4
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: PUSH
67980: LD_VAR 0 1
67984: PUSH
67985: LD_INT 3
67987: PLUS
67988: PUSH
67989: LD_VAR 0 2
67993: PUSH
67994: LD_INT 3
67996: PLUS
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: PUSH
68006: LD_VAR 0 1
68010: PUSH
68011: LD_VAR 0 2
68015: PUSH
68016: LD_INT 4
68018: PLUS
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: ST_TO_ADDR
// end ; 1 :
68035: GO 68735
68037: LD_INT 1
68039: DOUBLE
68040: EQUAL
68041: IFTRUE 68045
68043: GO 68178
68045: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68046: LD_ADDR_VAR 0 5
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_VAR 0 2
68060: PUSH
68061: LD_INT 4
68063: MINUS
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: PUSH
68073: LD_VAR 0 1
68077: PUSH
68078: LD_INT 3
68080: MINUS
68081: PUSH
68082: LD_VAR 0 2
68086: PUSH
68087: LD_INT 3
68089: MINUS
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: PUSH
68099: LD_VAR 0 1
68103: PUSH
68104: LD_INT 4
68106: MINUS
68107: PUSH
68108: LD_VAR 0 2
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: PUSH
68121: LD_VAR 0 1
68125: PUSH
68126: LD_VAR 0 2
68130: PUSH
68131: LD_INT 3
68133: PLUS
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: LIST
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: LD_INT 4
68150: PLUS
68151: PUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_INT 4
68159: PLUS
68160: PUSH
68161: LD_INT 5
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: ST_TO_ADDR
// end ; 2 :
68176: GO 68735
68178: LD_INT 2
68180: DOUBLE
68181: EQUAL
68182: IFTRUE 68186
68184: GO 68315
68186: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68187: LD_ADDR_VAR 0 5
68191: PUSH
68192: LD_VAR 0 1
68196: PUSH
68197: LD_VAR 0 2
68201: PUSH
68202: LD_INT 3
68204: MINUS
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: LIST
68213: PUSH
68214: LD_VAR 0 1
68218: PUSH
68219: LD_INT 4
68221: PLUS
68222: PUSH
68223: LD_VAR 0 2
68227: PUSH
68228: LD_INT 4
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: PUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_VAR 0 2
68245: PUSH
68246: LD_INT 4
68248: PLUS
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: LIST
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 3
68265: MINUS
68266: PUSH
68267: LD_VAR 0 2
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: PUSH
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 4
68287: MINUS
68288: PUSH
68289: LD_VAR 0 2
68293: PUSH
68294: LD_INT 4
68296: MINUS
68297: PUSH
68298: LD_INT 2
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: ST_TO_ADDR
// end ; 3 :
68313: GO 68735
68315: LD_INT 3
68317: DOUBLE
68318: EQUAL
68319: IFTRUE 68323
68321: GO 68456
68323: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68324: LD_ADDR_VAR 0 5
68328: PUSH
68329: LD_VAR 0 1
68333: PUSH
68334: LD_INT 3
68336: PLUS
68337: PUSH
68338: LD_VAR 0 2
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: PUSH
68351: LD_VAR 0 1
68355: PUSH
68356: LD_INT 4
68358: PLUS
68359: PUSH
68360: LD_VAR 0 2
68364: PUSH
68365: LD_INT 4
68367: PLUS
68368: PUSH
68369: LD_INT 5
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: PUSH
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 4
68384: MINUS
68385: PUSH
68386: LD_VAR 0 2
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: PUSH
68399: LD_VAR 0 1
68403: PUSH
68404: LD_VAR 0 2
68408: PUSH
68409: LD_INT 4
68411: MINUS
68412: PUSH
68413: LD_INT 3
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: PUSH
68421: LD_VAR 0 1
68425: PUSH
68426: LD_INT 3
68428: MINUS
68429: PUSH
68430: LD_VAR 0 2
68434: PUSH
68435: LD_INT 3
68437: MINUS
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: ST_TO_ADDR
// end ; 4 :
68454: GO 68735
68456: LD_INT 4
68458: DOUBLE
68459: EQUAL
68460: IFTRUE 68464
68462: GO 68597
68464: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68465: LD_ADDR_VAR 0 5
68469: PUSH
68470: LD_VAR 0 1
68474: PUSH
68475: LD_VAR 0 2
68479: PUSH
68480: LD_INT 4
68482: PLUS
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: PUSH
68492: LD_VAR 0 1
68496: PUSH
68497: LD_INT 3
68499: PLUS
68500: PUSH
68501: LD_VAR 0 2
68505: PUSH
68506: LD_INT 3
68508: PLUS
68509: PUSH
68510: LD_INT 5
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: LIST
68517: PUSH
68518: LD_VAR 0 1
68522: PUSH
68523: LD_INT 4
68525: PLUS
68526: PUSH
68527: LD_VAR 0 2
68531: PUSH
68532: LD_INT 4
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: LIST
68539: PUSH
68540: LD_VAR 0 1
68544: PUSH
68545: LD_VAR 0 2
68549: PUSH
68550: LD_INT 3
68552: MINUS
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: PUSH
68562: LD_VAR 0 1
68566: PUSH
68567: LD_INT 4
68569: MINUS
68570: PUSH
68571: LD_VAR 0 2
68575: PUSH
68576: LD_INT 4
68578: MINUS
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: LIST
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: ST_TO_ADDR
// end ; 5 :
68595: GO 68735
68597: LD_INT 5
68599: DOUBLE
68600: EQUAL
68601: IFTRUE 68605
68603: GO 68734
68605: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68606: LD_ADDR_VAR 0 5
68610: PUSH
68611: LD_VAR 0 1
68615: PUSH
68616: LD_INT 4
68618: MINUS
68619: PUSH
68620: LD_VAR 0 2
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: PUSH
68633: LD_VAR 0 1
68637: PUSH
68638: LD_VAR 0 2
68642: PUSH
68643: LD_INT 4
68645: MINUS
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: PUSH
68655: LD_VAR 0 1
68659: PUSH
68660: LD_INT 4
68662: PLUS
68663: PUSH
68664: LD_VAR 0 2
68668: PUSH
68669: LD_INT 4
68671: PLUS
68672: PUSH
68673: LD_INT 5
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: LIST
68680: PUSH
68681: LD_VAR 0 1
68685: PUSH
68686: LD_INT 3
68688: PLUS
68689: PUSH
68690: LD_VAR 0 2
68694: PUSH
68695: LD_INT 4
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: LIST
68702: PUSH
68703: LD_VAR 0 1
68707: PUSH
68708: LD_VAR 0 2
68712: PUSH
68713: LD_INT 3
68715: PLUS
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: ST_TO_ADDR
// end ; end ;
68732: GO 68735
68734: POP
// result := list ;
68735: LD_ADDR_VAR 0 4
68739: PUSH
68740: LD_VAR 0 5
68744: ST_TO_ADDR
// end ;
68745: LD_VAR 0 4
68749: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68750: LD_INT 0
68752: PPUSH
68753: PPUSH
68754: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68755: LD_VAR 0 1
68759: NOT
68760: PUSH
68761: LD_VAR 0 2
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: LD_INT 4
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: IN
68784: NOT
68785: OR
68786: IFFALSE 68790
// exit ;
68788: GO 68873
// tmp := [ ] ;
68790: LD_ADDR_VAR 0 5
68794: PUSH
68795: EMPTY
68796: ST_TO_ADDR
// for i in units do
68797: LD_ADDR_VAR 0 4
68801: PUSH
68802: LD_VAR 0 1
68806: PUSH
68807: FOR_IN
68808: IFFALSE 68842
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68810: LD_ADDR_VAR 0 5
68814: PUSH
68815: LD_VAR 0 5
68819: PPUSH
68820: LD_VAR 0 4
68824: PPUSH
68825: LD_VAR 0 2
68829: PPUSH
68830: CALL_OW 259
68834: PPUSH
68835: CALL 70233 0 2
68839: ST_TO_ADDR
68840: GO 68807
68842: POP
68843: POP
// if not tmp then
68844: LD_VAR 0 5
68848: NOT
68849: IFFALSE 68853
// exit ;
68851: GO 68873
// result := SortListByListDesc ( units , tmp ) ;
68853: LD_ADDR_VAR 0 3
68857: PUSH
68858: LD_VAR 0 1
68862: PPUSH
68863: LD_VAR 0 5
68867: PPUSH
68868: CALL_OW 77
68872: ST_TO_ADDR
// end ;
68873: LD_VAR 0 3
68877: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68878: LD_INT 0
68880: PPUSH
68881: PPUSH
68882: PPUSH
// result := false ;
68883: LD_ADDR_VAR 0 3
68887: PUSH
68888: LD_INT 0
68890: ST_TO_ADDR
// if not building then
68891: LD_VAR 0 2
68895: NOT
68896: IFFALSE 68900
// exit ;
68898: GO 69038
// x := GetX ( building ) ;
68900: LD_ADDR_VAR 0 4
68904: PUSH
68905: LD_VAR 0 2
68909: PPUSH
68910: CALL_OW 250
68914: ST_TO_ADDR
// y := GetY ( building ) ;
68915: LD_ADDR_VAR 0 5
68919: PUSH
68920: LD_VAR 0 2
68924: PPUSH
68925: CALL_OW 251
68929: ST_TO_ADDR
// if not x or not y then
68930: LD_VAR 0 4
68934: NOT
68935: PUSH
68936: LD_VAR 0 5
68940: NOT
68941: OR
68942: IFFALSE 68946
// exit ;
68944: GO 69038
// if GetTaskList ( unit ) then
68946: LD_VAR 0 1
68950: PPUSH
68951: CALL_OW 437
68955: IFFALSE 69038
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68957: LD_STRING e
68959: PUSH
68960: LD_VAR 0 1
68964: PPUSH
68965: CALL_OW 437
68969: PUSH
68970: LD_INT 1
68972: ARRAY
68973: PUSH
68974: LD_INT 1
68976: ARRAY
68977: EQUAL
68978: PUSH
68979: LD_VAR 0 4
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: CALL_OW 437
68993: PUSH
68994: LD_INT 1
68996: ARRAY
68997: PUSH
68998: LD_INT 2
69000: ARRAY
69001: EQUAL
69002: AND
69003: PUSH
69004: LD_VAR 0 5
69008: PUSH
69009: LD_VAR 0 1
69013: PPUSH
69014: CALL_OW 437
69018: PUSH
69019: LD_INT 1
69021: ARRAY
69022: PUSH
69023: LD_INT 3
69025: ARRAY
69026: EQUAL
69027: AND
69028: IFFALSE 69038
// result := true end ;
69030: LD_ADDR_VAR 0 3
69034: PUSH
69035: LD_INT 1
69037: ST_TO_ADDR
// end ;
69038: LD_VAR 0 3
69042: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69043: LD_INT 0
69045: PPUSH
// result := false ;
69046: LD_ADDR_VAR 0 4
69050: PUSH
69051: LD_INT 0
69053: ST_TO_ADDR
// if GetTaskList ( unit ) then
69054: LD_VAR 0 1
69058: PPUSH
69059: CALL_OW 437
69063: IFFALSE 69146
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69065: LD_STRING M
69067: PUSH
69068: LD_VAR 0 1
69072: PPUSH
69073: CALL_OW 437
69077: PUSH
69078: LD_INT 1
69080: ARRAY
69081: PUSH
69082: LD_INT 1
69084: ARRAY
69085: EQUAL
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: CALL_OW 437
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PUSH
69106: LD_INT 2
69108: ARRAY
69109: EQUAL
69110: AND
69111: PUSH
69112: LD_VAR 0 3
69116: PUSH
69117: LD_VAR 0 1
69121: PPUSH
69122: CALL_OW 437
69126: PUSH
69127: LD_INT 1
69129: ARRAY
69130: PUSH
69131: LD_INT 3
69133: ARRAY
69134: EQUAL
69135: AND
69136: IFFALSE 69146
// result := true ;
69138: LD_ADDR_VAR 0 4
69142: PUSH
69143: LD_INT 1
69145: ST_TO_ADDR
// end ; end ;
69146: LD_VAR 0 4
69150: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69151: LD_INT 0
69153: PPUSH
69154: PPUSH
69155: PPUSH
69156: PPUSH
// if not unit or not area then
69157: LD_VAR 0 1
69161: NOT
69162: PUSH
69163: LD_VAR 0 2
69167: NOT
69168: OR
69169: IFFALSE 69173
// exit ;
69171: GO 69336
// tmp := AreaToList ( area , i ) ;
69173: LD_ADDR_VAR 0 6
69177: PUSH
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_VAR 0 5
69187: PPUSH
69188: CALL_OW 517
69192: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69193: LD_ADDR_VAR 0 5
69197: PUSH
69198: DOUBLE
69199: LD_INT 1
69201: DEC
69202: ST_TO_ADDR
69203: LD_VAR 0 6
69207: PUSH
69208: LD_INT 1
69210: ARRAY
69211: PUSH
69212: FOR_TO
69213: IFFALSE 69334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69215: LD_ADDR_VAR 0 7
69219: PUSH
69220: LD_VAR 0 6
69224: PUSH
69225: LD_INT 1
69227: ARRAY
69228: PUSH
69229: LD_VAR 0 5
69233: ARRAY
69234: PUSH
69235: LD_VAR 0 6
69239: PUSH
69240: LD_INT 2
69242: ARRAY
69243: PUSH
69244: LD_VAR 0 5
69248: ARRAY
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
69254: LD_INT 92
69256: PUSH
69257: LD_VAR 0 7
69261: PUSH
69262: LD_INT 1
69264: ARRAY
69265: PUSH
69266: LD_VAR 0 7
69270: PUSH
69271: LD_INT 2
69273: ARRAY
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: PPUSH
69284: CALL_OW 69
69288: PUSH
69289: LD_INT 0
69291: EQUAL
69292: IFFALSE 69332
// begin PlaceUnitArea ( unit , area , mode ) ;
69294: LD_VAR 0 1
69298: PPUSH
69299: LD_VAR 0 2
69303: PPUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: CALL_OW 49
// result := IsPlaced ( unit ) ;
69313: LD_ADDR_VAR 0 4
69317: PUSH
69318: LD_VAR 0 1
69322: PPUSH
69323: CALL_OW 305
69327: ST_TO_ADDR
// exit ;
69328: POP
69329: POP
69330: GO 69336
// end ; end ;
69332: GO 69212
69334: POP
69335: POP
// end ;
69336: LD_VAR 0 4
69340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69341: LD_INT 0
69343: PPUSH
69344: PPUSH
69345: PPUSH
// if not side or side > 8 then
69346: LD_VAR 0 1
69350: NOT
69351: PUSH
69352: LD_VAR 0 1
69356: PUSH
69357: LD_INT 8
69359: GREATER
69360: OR
69361: IFFALSE 69365
// exit ;
69363: GO 69552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69365: LD_ADDR_VAR 0 4
69369: PUSH
69370: LD_INT 22
69372: PUSH
69373: LD_VAR 0 1
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 21
69384: PUSH
69385: LD_INT 3
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PPUSH
69396: CALL_OW 69
69400: ST_TO_ADDR
// if not tmp then
69401: LD_VAR 0 4
69405: NOT
69406: IFFALSE 69410
// exit ;
69408: GO 69552
// enable_addtolog := true ;
69410: LD_ADDR_OWVAR 81
69414: PUSH
69415: LD_INT 1
69417: ST_TO_ADDR
// AddToLog ( [ ) ;
69418: LD_STRING [
69420: PPUSH
69421: CALL_OW 561
// for i in tmp do
69425: LD_ADDR_VAR 0 3
69429: PUSH
69430: LD_VAR 0 4
69434: PUSH
69435: FOR_IN
69436: IFFALSE 69543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69438: LD_STRING [
69440: PUSH
69441: LD_VAR 0 3
69445: PPUSH
69446: CALL_OW 266
69450: STR
69451: PUSH
69452: LD_STRING , 
69454: STR
69455: PUSH
69456: LD_VAR 0 3
69460: PPUSH
69461: CALL_OW 250
69465: STR
69466: PUSH
69467: LD_STRING , 
69469: STR
69470: PUSH
69471: LD_VAR 0 3
69475: PPUSH
69476: CALL_OW 251
69480: STR
69481: PUSH
69482: LD_STRING , 
69484: STR
69485: PUSH
69486: LD_VAR 0 3
69490: PPUSH
69491: CALL_OW 254
69495: STR
69496: PUSH
69497: LD_STRING , 
69499: STR
69500: PUSH
69501: LD_VAR 0 3
69505: PPUSH
69506: LD_INT 1
69508: PPUSH
69509: CALL_OW 268
69513: STR
69514: PUSH
69515: LD_STRING , 
69517: STR
69518: PUSH
69519: LD_VAR 0 3
69523: PPUSH
69524: LD_INT 2
69526: PPUSH
69527: CALL_OW 268
69531: STR
69532: PUSH
69533: LD_STRING ],
69535: STR
69536: PPUSH
69537: CALL_OW 561
// end ;
69541: GO 69435
69543: POP
69544: POP
// AddToLog ( ]; ) ;
69545: LD_STRING ];
69547: PPUSH
69548: CALL_OW 561
// end ;
69552: LD_VAR 0 2
69556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
69562: PPUSH
69563: PPUSH
// if not area or not rate or not max then
69564: LD_VAR 0 1
69568: NOT
69569: PUSH
69570: LD_VAR 0 2
69574: NOT
69575: OR
69576: PUSH
69577: LD_VAR 0 4
69581: NOT
69582: OR
69583: IFFALSE 69587
// exit ;
69585: GO 69776
// while 1 do
69587: LD_INT 1
69589: IFFALSE 69776
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69591: LD_ADDR_VAR 0 9
69595: PUSH
69596: LD_VAR 0 1
69600: PPUSH
69601: LD_INT 1
69603: PPUSH
69604: CALL_OW 287
69608: PUSH
69609: LD_INT 10
69611: MUL
69612: ST_TO_ADDR
// r := rate / 10 ;
69613: LD_ADDR_VAR 0 7
69617: PUSH
69618: LD_VAR 0 2
69622: PUSH
69623: LD_INT 10
69625: DIVREAL
69626: ST_TO_ADDR
// time := 1 1$00 ;
69627: LD_ADDR_VAR 0 8
69631: PUSH
69632: LD_INT 2100
69634: ST_TO_ADDR
// if amount < min then
69635: LD_VAR 0 9
69639: PUSH
69640: LD_VAR 0 3
69644: LESS
69645: IFFALSE 69663
// r := r * 2 else
69647: LD_ADDR_VAR 0 7
69651: PUSH
69652: LD_VAR 0 7
69656: PUSH
69657: LD_INT 2
69659: MUL
69660: ST_TO_ADDR
69661: GO 69689
// if amount > max then
69663: LD_VAR 0 9
69667: PUSH
69668: LD_VAR 0 4
69672: GREATER
69673: IFFALSE 69689
// r := r / 2 ;
69675: LD_ADDR_VAR 0 7
69679: PUSH
69680: LD_VAR 0 7
69684: PUSH
69685: LD_INT 2
69687: DIVREAL
69688: ST_TO_ADDR
// time := time / r ;
69689: LD_ADDR_VAR 0 8
69693: PUSH
69694: LD_VAR 0 8
69698: PUSH
69699: LD_VAR 0 7
69703: DIVREAL
69704: ST_TO_ADDR
// if time < 0 then
69705: LD_VAR 0 8
69709: PUSH
69710: LD_INT 0
69712: LESS
69713: IFFALSE 69730
// time := time * - 1 ;
69715: LD_ADDR_VAR 0 8
69719: PUSH
69720: LD_VAR 0 8
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: MUL
69729: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69730: LD_VAR 0 8
69734: PUSH
69735: LD_INT 35
69737: PPUSH
69738: LD_INT 875
69740: PPUSH
69741: CALL_OW 12
69745: PLUS
69746: PPUSH
69747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69751: LD_INT 1
69753: PPUSH
69754: LD_INT 5
69756: PPUSH
69757: CALL_OW 12
69761: PPUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: LD_INT 1
69769: PPUSH
69770: CALL_OW 55
// end ;
69774: GO 69587
// end ;
69776: LD_VAR 0 5
69780: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69781: LD_INT 0
69783: PPUSH
69784: PPUSH
69785: PPUSH
69786: PPUSH
69787: PPUSH
69788: PPUSH
69789: PPUSH
69790: PPUSH
// if not turrets or not factories then
69791: LD_VAR 0 1
69795: NOT
69796: PUSH
69797: LD_VAR 0 2
69801: NOT
69802: OR
69803: IFFALSE 69807
// exit ;
69805: GO 70114
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69807: LD_ADDR_VAR 0 10
69811: PUSH
69812: LD_INT 5
69814: PUSH
69815: LD_INT 6
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: LD_INT 4
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: LD_INT 5
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 24
69849: PUSH
69850: LD_INT 25
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 23
69859: PUSH
69860: LD_INT 27
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 42
69873: PUSH
69874: LD_INT 43
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 44
69883: PUSH
69884: LD_INT 46
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 45
69893: PUSH
69894: LD_INT 47
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: ST_TO_ADDR
// result := [ ] ;
69911: LD_ADDR_VAR 0 3
69915: PUSH
69916: EMPTY
69917: ST_TO_ADDR
// for i in turrets do
69918: LD_ADDR_VAR 0 4
69922: PUSH
69923: LD_VAR 0 1
69927: PUSH
69928: FOR_IN
69929: IFFALSE 70112
// begin nat := GetNation ( i ) ;
69931: LD_ADDR_VAR 0 7
69935: PUSH
69936: LD_VAR 0 4
69940: PPUSH
69941: CALL_OW 248
69945: ST_TO_ADDR
// weapon := 0 ;
69946: LD_ADDR_VAR 0 8
69950: PUSH
69951: LD_INT 0
69953: ST_TO_ADDR
// if not nat then
69954: LD_VAR 0 7
69958: NOT
69959: IFFALSE 69963
// continue ;
69961: GO 69928
// for j in list [ nat ] do
69963: LD_ADDR_VAR 0 5
69967: PUSH
69968: LD_VAR 0 10
69972: PUSH
69973: LD_VAR 0 7
69977: ARRAY
69978: PUSH
69979: FOR_IN
69980: IFFALSE 70021
// if GetBWeapon ( i ) = j [ 1 ] then
69982: LD_VAR 0 4
69986: PPUSH
69987: CALL_OW 269
69991: PUSH
69992: LD_VAR 0 5
69996: PUSH
69997: LD_INT 1
69999: ARRAY
70000: EQUAL
70001: IFFALSE 70019
// begin weapon := j [ 2 ] ;
70003: LD_ADDR_VAR 0 8
70007: PUSH
70008: LD_VAR 0 5
70012: PUSH
70013: LD_INT 2
70015: ARRAY
70016: ST_TO_ADDR
// break ;
70017: GO 70021
// end ;
70019: GO 69979
70021: POP
70022: POP
// if not weapon then
70023: LD_VAR 0 8
70027: NOT
70028: IFFALSE 70032
// continue ;
70030: GO 69928
// for k in factories do
70032: LD_ADDR_VAR 0 6
70036: PUSH
70037: LD_VAR 0 2
70041: PUSH
70042: FOR_IN
70043: IFFALSE 70108
// begin weapons := AvailableWeaponList ( k ) ;
70045: LD_ADDR_VAR 0 9
70049: PUSH
70050: LD_VAR 0 6
70054: PPUSH
70055: CALL_OW 478
70059: ST_TO_ADDR
// if not weapons then
70060: LD_VAR 0 9
70064: NOT
70065: IFFALSE 70069
// continue ;
70067: GO 70042
// if weapon in weapons then
70069: LD_VAR 0 8
70073: PUSH
70074: LD_VAR 0 9
70078: IN
70079: IFFALSE 70106
// begin result := [ i , weapon ] ;
70081: LD_ADDR_VAR 0 3
70085: PUSH
70086: LD_VAR 0 4
70090: PUSH
70091: LD_VAR 0 8
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: ST_TO_ADDR
// exit ;
70100: POP
70101: POP
70102: POP
70103: POP
70104: GO 70114
// end ; end ;
70106: GO 70042
70108: POP
70109: POP
// end ;
70110: GO 69928
70112: POP
70113: POP
// end ;
70114: LD_VAR 0 3
70118: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70119: LD_INT 0
70121: PPUSH
// if not side or side > 8 then
70122: LD_VAR 0 3
70126: NOT
70127: PUSH
70128: LD_VAR 0 3
70132: PUSH
70133: LD_INT 8
70135: GREATER
70136: OR
70137: IFFALSE 70141
// exit ;
70139: GO 70200
// if not range then
70141: LD_VAR 0 4
70145: NOT
70146: IFFALSE 70157
// range := - 12 ;
70148: LD_ADDR_VAR 0 4
70152: PUSH
70153: LD_INT 12
70155: NEG
70156: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70157: LD_VAR 0 1
70161: PPUSH
70162: LD_VAR 0 2
70166: PPUSH
70167: LD_VAR 0 3
70171: PPUSH
70172: LD_VAR 0 4
70176: PPUSH
70177: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 2
70190: PPUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: CALL_OW 331
// end ;
70200: LD_VAR 0 5
70204: RET
// export function Video ( mode ) ; begin
70205: LD_INT 0
70207: PPUSH
// ingame_video = mode ;
70208: LD_ADDR_OWVAR 52
70212: PUSH
70213: LD_VAR 0 1
70217: ST_TO_ADDR
// interface_hidden = mode ;
70218: LD_ADDR_OWVAR 54
70222: PUSH
70223: LD_VAR 0 1
70227: ST_TO_ADDR
// end ;
70228: LD_VAR 0 2
70232: RET
// export function Join ( array , element ) ; begin
70233: LD_INT 0
70235: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70236: LD_ADDR_VAR 0 3
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: LD_VAR 0 1
70250: PUSH
70251: LD_INT 1
70253: PLUS
70254: PPUSH
70255: LD_VAR 0 2
70259: PPUSH
70260: CALL_OW 1
70264: ST_TO_ADDR
// end ;
70265: LD_VAR 0 3
70269: RET
// export function JoinUnion ( array , element ) ; begin
70270: LD_INT 0
70272: PPUSH
// result := array union element ;
70273: LD_ADDR_VAR 0 3
70277: PUSH
70278: LD_VAR 0 1
70282: PUSH
70283: LD_VAR 0 2
70287: UNION
70288: ST_TO_ADDR
// end ;
70289: LD_VAR 0 3
70293: RET
// export function GetBehemoths ( side ) ; begin
70294: LD_INT 0
70296: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70297: LD_ADDR_VAR 0 2
70301: PUSH
70302: LD_INT 22
70304: PUSH
70305: LD_VAR 0 1
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 31
70316: PUSH
70317: LD_INT 25
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PPUSH
70328: CALL_OW 69
70332: ST_TO_ADDR
// end ;
70333: LD_VAR 0 2
70337: RET
// export function Shuffle ( array ) ; var i , index ; begin
70338: LD_INT 0
70340: PPUSH
70341: PPUSH
70342: PPUSH
// result := [ ] ;
70343: LD_ADDR_VAR 0 2
70347: PUSH
70348: EMPTY
70349: ST_TO_ADDR
// if not array then
70350: LD_VAR 0 1
70354: NOT
70355: IFFALSE 70359
// exit ;
70357: GO 70458
// Randomize ;
70359: CALL_OW 10
// for i = array downto 1 do
70363: LD_ADDR_VAR 0 3
70367: PUSH
70368: DOUBLE
70369: LD_VAR 0 1
70373: INC
70374: ST_TO_ADDR
70375: LD_INT 1
70377: PUSH
70378: FOR_DOWNTO
70379: IFFALSE 70456
// begin index := rand ( 1 , array ) ;
70381: LD_ADDR_VAR 0 4
70385: PUSH
70386: LD_INT 1
70388: PPUSH
70389: LD_VAR 0 1
70393: PPUSH
70394: CALL_OW 12
70398: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70399: LD_ADDR_VAR 0 2
70403: PUSH
70404: LD_VAR 0 2
70408: PPUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_INT 1
70416: PLUS
70417: PPUSH
70418: LD_VAR 0 1
70422: PUSH
70423: LD_VAR 0 4
70427: ARRAY
70428: PPUSH
70429: CALL_OW 2
70433: ST_TO_ADDR
// array := Delete ( array , index ) ;
70434: LD_ADDR_VAR 0 1
70438: PUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_VAR 0 4
70448: PPUSH
70449: CALL_OW 3
70453: ST_TO_ADDR
// end ;
70454: GO 70378
70456: POP
70457: POP
// end ;
70458: LD_VAR 0 2
70462: RET
// export function GetBaseMaterials ( base ) ; begin
70463: LD_INT 0
70465: PPUSH
// result := [ 0 , 0 , 0 ] ;
70466: LD_ADDR_VAR 0 2
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: LIST
70484: ST_TO_ADDR
// if not base then
70485: LD_VAR 0 1
70489: NOT
70490: IFFALSE 70494
// exit ;
70492: GO 70543
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70494: LD_ADDR_VAR 0 2
70498: PUSH
70499: LD_VAR 0 1
70503: PPUSH
70504: LD_INT 1
70506: PPUSH
70507: CALL_OW 275
70511: PUSH
70512: LD_VAR 0 1
70516: PPUSH
70517: LD_INT 2
70519: PPUSH
70520: CALL_OW 275
70524: PUSH
70525: LD_VAR 0 1
70529: PPUSH
70530: LD_INT 3
70532: PPUSH
70533: CALL_OW 275
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: ST_TO_ADDR
// end ;
70543: LD_VAR 0 2
70547: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70548: LD_INT 0
70550: PPUSH
70551: PPUSH
// result := array ;
70552: LD_ADDR_VAR 0 3
70556: PUSH
70557: LD_VAR 0 1
70561: ST_TO_ADDR
// if size >= result then
70562: LD_VAR 0 2
70566: PUSH
70567: LD_VAR 0 3
70571: GREATEREQUAL
70572: IFFALSE 70576
// exit ;
70574: GO 70626
// if size then
70576: LD_VAR 0 2
70580: IFFALSE 70626
// for i := array downto size do
70582: LD_ADDR_VAR 0 4
70586: PUSH
70587: DOUBLE
70588: LD_VAR 0 1
70592: INC
70593: ST_TO_ADDR
70594: LD_VAR 0 2
70598: PUSH
70599: FOR_DOWNTO
70600: IFFALSE 70624
// result := Delete ( result , result ) ;
70602: LD_ADDR_VAR 0 3
70606: PUSH
70607: LD_VAR 0 3
70611: PPUSH
70612: LD_VAR 0 3
70616: PPUSH
70617: CALL_OW 3
70621: ST_TO_ADDR
70622: GO 70599
70624: POP
70625: POP
// end ;
70626: LD_VAR 0 3
70630: RET
// export function ComExit ( unit ) ; var tmp ; begin
70631: LD_INT 0
70633: PPUSH
70634: PPUSH
// if not IsInUnit ( unit ) then
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 310
70644: NOT
70645: IFFALSE 70649
// exit ;
70647: GO 70709
// tmp := IsInUnit ( unit ) ;
70649: LD_ADDR_VAR 0 3
70653: PUSH
70654: LD_VAR 0 1
70658: PPUSH
70659: CALL_OW 310
70663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70664: LD_VAR 0 3
70668: PPUSH
70669: CALL_OW 247
70673: PUSH
70674: LD_INT 2
70676: EQUAL
70677: IFFALSE 70690
// ComExitVehicle ( unit ) else
70679: LD_VAR 0 1
70683: PPUSH
70684: CALL_OW 121
70688: GO 70699
// ComExitBuilding ( unit ) ;
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 122
// result := tmp ;
70699: LD_ADDR_VAR 0 2
70703: PUSH
70704: LD_VAR 0 3
70708: ST_TO_ADDR
// end ;
70709: LD_VAR 0 2
70713: RET
// export function ComExitAll ( units ) ; var i ; begin
70714: LD_INT 0
70716: PPUSH
70717: PPUSH
// if not units then
70718: LD_VAR 0 1
70722: NOT
70723: IFFALSE 70727
// exit ;
70725: GO 70753
// for i in units do
70727: LD_ADDR_VAR 0 3
70731: PUSH
70732: LD_VAR 0 1
70736: PUSH
70737: FOR_IN
70738: IFFALSE 70751
// ComExit ( i ) ;
70740: LD_VAR 0 3
70744: PPUSH
70745: CALL 70631 0 1
70749: GO 70737
70751: POP
70752: POP
// end ;
70753: LD_VAR 0 2
70757: RET
// export function ResetHc ; begin
70758: LD_INT 0
70760: PPUSH
// InitHc ;
70761: CALL_OW 19
// hc_importance := 0 ;
70765: LD_ADDR_OWVAR 32
70769: PUSH
70770: LD_INT 0
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 1
70777: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
70782: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70783: LD_ADDR_VAR 0 6
70787: PUSH
70788: LD_VAR 0 1
70792: PUSH
70793: LD_VAR 0 3
70797: PLUS
70798: PUSH
70799: LD_INT 2
70801: DIV
70802: ST_TO_ADDR
// if _x < 0 then
70803: LD_VAR 0 6
70807: PUSH
70808: LD_INT 0
70810: LESS
70811: IFFALSE 70828
// _x := _x * - 1 ;
70813: LD_ADDR_VAR 0 6
70817: PUSH
70818: LD_VAR 0 6
70822: PUSH
70823: LD_INT 1
70825: NEG
70826: MUL
70827: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70828: LD_ADDR_VAR 0 7
70832: PUSH
70833: LD_VAR 0 2
70837: PUSH
70838: LD_VAR 0 4
70842: PLUS
70843: PUSH
70844: LD_INT 2
70846: DIV
70847: ST_TO_ADDR
// if _y < 0 then
70848: LD_VAR 0 7
70852: PUSH
70853: LD_INT 0
70855: LESS
70856: IFFALSE 70873
// _y := _y * - 1 ;
70858: LD_ADDR_VAR 0 7
70862: PUSH
70863: LD_VAR 0 7
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: MUL
70872: ST_TO_ADDR
// result := [ _x , _y ] ;
70873: LD_ADDR_VAR 0 5
70877: PUSH
70878: LD_VAR 0 6
70882: PUSH
70883: LD_VAR 0 7
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: ST_TO_ADDR
// end ;
70892: LD_VAR 0 5
70896: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70897: LD_INT 0
70899: PPUSH
70900: PPUSH
70901: PPUSH
70902: PPUSH
// task := GetTaskList ( unit ) ;
70903: LD_ADDR_VAR 0 7
70907: PUSH
70908: LD_VAR 0 1
70912: PPUSH
70913: CALL_OW 437
70917: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70918: LD_VAR 0 7
70922: NOT
70923: PUSH
70924: LD_VAR 0 1
70928: PPUSH
70929: LD_VAR 0 2
70933: PPUSH
70934: CALL_OW 308
70938: NOT
70939: AND
70940: IFFALSE 70944
// exit ;
70942: GO 71062
// if IsInArea ( unit , area ) then
70944: LD_VAR 0 1
70948: PPUSH
70949: LD_VAR 0 2
70953: PPUSH
70954: CALL_OW 308
70958: IFFALSE 70976
// begin ComMoveToArea ( unit , goAway ) ;
70960: LD_VAR 0 1
70964: PPUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: CALL_OW 113
// exit ;
70974: GO 71062
// end ; if task [ 1 ] [ 1 ] <> M then
70976: LD_VAR 0 7
70980: PUSH
70981: LD_INT 1
70983: ARRAY
70984: PUSH
70985: LD_INT 1
70987: ARRAY
70988: PUSH
70989: LD_STRING M
70991: NONEQUAL
70992: IFFALSE 70996
// exit ;
70994: GO 71062
// x := task [ 1 ] [ 2 ] ;
70996: LD_ADDR_VAR 0 5
71000: PUSH
71001: LD_VAR 0 7
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: PUSH
71010: LD_INT 2
71012: ARRAY
71013: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71014: LD_ADDR_VAR 0 6
71018: PUSH
71019: LD_VAR 0 7
71023: PUSH
71024: LD_INT 1
71026: ARRAY
71027: PUSH
71028: LD_INT 3
71030: ARRAY
71031: ST_TO_ADDR
// if InArea ( x , y , area ) then
71032: LD_VAR 0 5
71036: PPUSH
71037: LD_VAR 0 6
71041: PPUSH
71042: LD_VAR 0 2
71046: PPUSH
71047: CALL_OW 309
71051: IFFALSE 71062
// ComStop ( unit ) ;
71053: LD_VAR 0 1
71057: PPUSH
71058: CALL_OW 141
// end ;
71062: LD_VAR 0 4
71066: RET
// export function Abs ( value ) ; begin
71067: LD_INT 0
71069: PPUSH
// result := value ;
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: LD_VAR 0 1
71079: ST_TO_ADDR
// if value < 0 then
71080: LD_VAR 0 1
71084: PUSH
71085: LD_INT 0
71087: LESS
71088: IFFALSE 71105
// result := value * - 1 ;
71090: LD_ADDR_VAR 0 2
71094: PUSH
71095: LD_VAR 0 1
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: MUL
71104: ST_TO_ADDR
// end ;
71105: LD_VAR 0 2
71109: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71110: LD_INT 0
71112: PPUSH
71113: PPUSH
71114: PPUSH
71115: PPUSH
71116: PPUSH
71117: PPUSH
71118: PPUSH
71119: PPUSH
// if not unit or not building then
71120: LD_VAR 0 1
71124: NOT
71125: PUSH
71126: LD_VAR 0 2
71130: NOT
71131: OR
71132: IFFALSE 71136
// exit ;
71134: GO 71362
// x := GetX ( building ) ;
71136: LD_ADDR_VAR 0 4
71140: PUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: CALL_OW 250
71150: ST_TO_ADDR
// y := GetY ( building ) ;
71151: LD_ADDR_VAR 0 6
71155: PUSH
71156: LD_VAR 0 2
71160: PPUSH
71161: CALL_OW 251
71165: ST_TO_ADDR
// d := GetDir ( building ) ;
71166: LD_ADDR_VAR 0 8
71170: PUSH
71171: LD_VAR 0 2
71175: PPUSH
71176: CALL_OW 254
71180: ST_TO_ADDR
// r := 4 ;
71181: LD_ADDR_VAR 0 9
71185: PUSH
71186: LD_INT 4
71188: ST_TO_ADDR
// for i := 1 to 5 do
71189: LD_ADDR_VAR 0 10
71193: PUSH
71194: DOUBLE
71195: LD_INT 1
71197: DEC
71198: ST_TO_ADDR
71199: LD_INT 5
71201: PUSH
71202: FOR_TO
71203: IFFALSE 71360
// begin _x := ShiftX ( x , d , r + i ) ;
71205: LD_ADDR_VAR 0 5
71209: PUSH
71210: LD_VAR 0 4
71214: PPUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: LD_VAR 0 9
71224: PUSH
71225: LD_VAR 0 10
71229: PLUS
71230: PPUSH
71231: CALL_OW 272
71235: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71236: LD_ADDR_VAR 0 7
71240: PUSH
71241: LD_VAR 0 6
71245: PPUSH
71246: LD_VAR 0 8
71250: PPUSH
71251: LD_VAR 0 9
71255: PUSH
71256: LD_VAR 0 10
71260: PLUS
71261: PPUSH
71262: CALL_OW 273
71266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71267: LD_VAR 0 5
71271: PPUSH
71272: LD_VAR 0 7
71276: PPUSH
71277: CALL_OW 488
71281: PUSH
71282: LD_VAR 0 5
71286: PPUSH
71287: LD_VAR 0 7
71291: PPUSH
71292: CALL_OW 428
71296: PPUSH
71297: CALL_OW 247
71301: PUSH
71302: LD_INT 3
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: IN
71312: NOT
71313: AND
71314: IFFALSE 71358
// begin ComMoveXY ( unit , _x , _y ) ;
71316: LD_VAR 0 1
71320: PPUSH
71321: LD_VAR 0 5
71325: PPUSH
71326: LD_VAR 0 7
71330: PPUSH
71331: CALL_OW 111
// result := [ _x , _y ] ;
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: LD_VAR 0 5
71344: PUSH
71345: LD_VAR 0 7
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: ST_TO_ADDR
// exit ;
71354: POP
71355: POP
71356: GO 71362
// end ; end ;
71358: GO 71202
71360: POP
71361: POP
// end ;
71362: LD_VAR 0 3
71366: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71367: LD_INT 0
71369: PPUSH
71370: PPUSH
71371: PPUSH
// result := 0 ;
71372: LD_ADDR_VAR 0 3
71376: PUSH
71377: LD_INT 0
71379: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71380: LD_VAR 0 1
71384: PUSH
71385: LD_INT 0
71387: LESS
71388: PUSH
71389: LD_VAR 0 1
71393: PUSH
71394: LD_INT 8
71396: GREATER
71397: OR
71398: PUSH
71399: LD_VAR 0 2
71403: PUSH
71404: LD_INT 0
71406: LESS
71407: OR
71408: PUSH
71409: LD_VAR 0 2
71413: PUSH
71414: LD_INT 8
71416: GREATER
71417: OR
71418: IFFALSE 71422
// exit ;
71420: GO 71497
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71422: LD_ADDR_VAR 0 4
71426: PUSH
71427: LD_INT 22
71429: PUSH
71430: LD_VAR 0 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PPUSH
71439: CALL_OW 69
71443: PUSH
71444: FOR_IN
71445: IFFALSE 71495
// begin un := UnitShoot ( i ) ;
71447: LD_ADDR_VAR 0 5
71451: PUSH
71452: LD_VAR 0 4
71456: PPUSH
71457: CALL_OW 504
71461: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71462: LD_VAR 0 5
71466: PPUSH
71467: CALL_OW 255
71471: PUSH
71472: LD_VAR 0 1
71476: EQUAL
71477: IFFALSE 71493
// begin result := un ;
71479: LD_ADDR_VAR 0 3
71483: PUSH
71484: LD_VAR 0 5
71488: ST_TO_ADDR
// exit ;
71489: POP
71490: POP
71491: GO 71497
// end ; end ;
71493: GO 71444
71495: POP
71496: POP
// end ;
71497: LD_VAR 0 3
71501: RET
// export function GetCargoBay ( units ) ; begin
71502: LD_INT 0
71504: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71505: LD_ADDR_VAR 0 2
71509: PUSH
71510: LD_VAR 0 1
71514: PPUSH
71515: LD_INT 2
71517: PUSH
71518: LD_INT 34
71520: PUSH
71521: LD_INT 12
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 34
71530: PUSH
71531: LD_INT 51
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 34
71540: PUSH
71541: LD_INT 32
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 34
71550: PUSH
71551: LD_INT 89
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: PPUSH
71565: CALL_OW 72
71569: ST_TO_ADDR
// end ;
71570: LD_VAR 0 2
71574: RET
// export function Negate ( value ) ; begin
71575: LD_INT 0
71577: PPUSH
// result := not value ;
71578: LD_ADDR_VAR 0 2
71582: PUSH
71583: LD_VAR 0 1
71587: NOT
71588: ST_TO_ADDR
// end ;
71589: LD_VAR 0 2
71593: RET
// export function Inc ( value ) ; begin
71594: LD_INT 0
71596: PPUSH
// result := value + 1 ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: LD_VAR 0 1
71606: PUSH
71607: LD_INT 1
71609: PLUS
71610: ST_TO_ADDR
// end ;
71611: LD_VAR 0 2
71615: RET
// export function Dec ( value ) ; begin
71616: LD_INT 0
71618: PPUSH
// result := value - 1 ;
71619: LD_ADDR_VAR 0 2
71623: PUSH
71624: LD_VAR 0 1
71628: PUSH
71629: LD_INT 1
71631: MINUS
71632: ST_TO_ADDR
// end ;
71633: LD_VAR 0 2
71637: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
71643: PPUSH
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71648: LD_VAR 0 1
71652: PPUSH
71653: LD_VAR 0 2
71657: PPUSH
71658: CALL_OW 488
71662: NOT
71663: PUSH
71664: LD_VAR 0 3
71668: PPUSH
71669: LD_VAR 0 4
71673: PPUSH
71674: CALL_OW 488
71678: NOT
71679: OR
71680: IFFALSE 71693
// begin result := - 1 ;
71682: LD_ADDR_VAR 0 5
71686: PUSH
71687: LD_INT 1
71689: NEG
71690: ST_TO_ADDR
// exit ;
71691: GO 71928
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71693: LD_ADDR_VAR 0 12
71697: PUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: LD_VAR 0 2
71707: PPUSH
71708: LD_VAR 0 3
71712: PPUSH
71713: LD_VAR 0 4
71717: PPUSH
71718: CALL 70778 0 4
71722: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71723: LD_ADDR_VAR 0 11
71727: PUSH
71728: LD_VAR 0 1
71732: PPUSH
71733: LD_VAR 0 2
71737: PPUSH
71738: LD_VAR 0 12
71742: PUSH
71743: LD_INT 1
71745: ARRAY
71746: PPUSH
71747: LD_VAR 0 12
71751: PUSH
71752: LD_INT 2
71754: ARRAY
71755: PPUSH
71756: CALL_OW 298
71760: ST_TO_ADDR
// distance := 9999 ;
71761: LD_ADDR_VAR 0 10
71765: PUSH
71766: LD_INT 9999
71768: ST_TO_ADDR
// for i := 0 to 5 do
71769: LD_ADDR_VAR 0 6
71773: PUSH
71774: DOUBLE
71775: LD_INT 0
71777: DEC
71778: ST_TO_ADDR
71779: LD_INT 5
71781: PUSH
71782: FOR_TO
71783: IFFALSE 71926
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71785: LD_ADDR_VAR 0 7
71789: PUSH
71790: LD_VAR 0 1
71794: PPUSH
71795: LD_VAR 0 6
71799: PPUSH
71800: LD_VAR 0 11
71804: PPUSH
71805: CALL_OW 272
71809: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71810: LD_ADDR_VAR 0 8
71814: PUSH
71815: LD_VAR 0 2
71819: PPUSH
71820: LD_VAR 0 6
71824: PPUSH
71825: LD_VAR 0 11
71829: PPUSH
71830: CALL_OW 273
71834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71835: LD_VAR 0 7
71839: PPUSH
71840: LD_VAR 0 8
71844: PPUSH
71845: CALL_OW 488
71849: NOT
71850: IFFALSE 71854
// continue ;
71852: GO 71782
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71854: LD_ADDR_VAR 0 9
71858: PUSH
71859: LD_VAR 0 12
71863: PUSH
71864: LD_INT 1
71866: ARRAY
71867: PPUSH
71868: LD_VAR 0 12
71872: PUSH
71873: LD_INT 2
71875: ARRAY
71876: PPUSH
71877: LD_VAR 0 7
71881: PPUSH
71882: LD_VAR 0 8
71886: PPUSH
71887: CALL_OW 298
71891: ST_TO_ADDR
// if tmp < distance then
71892: LD_VAR 0 9
71896: PUSH
71897: LD_VAR 0 10
71901: LESS
71902: IFFALSE 71924
// begin result := i ;
71904: LD_ADDR_VAR 0 5
71908: PUSH
71909: LD_VAR 0 6
71913: ST_TO_ADDR
// distance := tmp ;
71914: LD_ADDR_VAR 0 10
71918: PUSH
71919: LD_VAR 0 9
71923: ST_TO_ADDR
// end ; end ;
71924: GO 71782
71926: POP
71927: POP
// end ;
71928: LD_VAR 0 5
71932: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71933: LD_INT 0
71935: PPUSH
71936: PPUSH
// if not driver or not IsInUnit ( driver ) then
71937: LD_VAR 0 1
71941: NOT
71942: PUSH
71943: LD_VAR 0 1
71947: PPUSH
71948: CALL_OW 310
71952: NOT
71953: OR
71954: IFFALSE 71958
// exit ;
71956: GO 72048
// vehicle := IsInUnit ( driver ) ;
71958: LD_ADDR_VAR 0 3
71962: PUSH
71963: LD_VAR 0 1
71967: PPUSH
71968: CALL_OW 310
71972: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71973: LD_VAR 0 1
71977: PPUSH
71978: LD_STRING \
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: LD_INT 0
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: LD_INT 0
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: PUSH
72008: LD_STRING E
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: LD_VAR 0 3
72021: PUSH
72022: LD_INT 0
72024: PUSH
72025: LD_INT 0
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PPUSH
72044: CALL_OW 446
// end ;
72048: LD_VAR 0 2
72052: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72053: LD_INT 0
72055: PPUSH
72056: PPUSH
// if not driver or not IsInUnit ( driver ) then
72057: LD_VAR 0 1
72061: NOT
72062: PUSH
72063: LD_VAR 0 1
72067: PPUSH
72068: CALL_OW 310
72072: NOT
72073: OR
72074: IFFALSE 72078
// exit ;
72076: GO 72168
// vehicle := IsInUnit ( driver ) ;
72078: LD_ADDR_VAR 0 3
72082: PUSH
72083: LD_VAR 0 1
72087: PPUSH
72088: CALL_OW 310
72092: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72093: LD_VAR 0 1
72097: PPUSH
72098: LD_STRING \
72100: PUSH
72101: LD_INT 0
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: LD_INT 0
72109: PUSH
72110: LD_INT 0
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: PUSH
72128: LD_STRING E
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: LD_VAR 0 3
72141: PUSH
72142: LD_INT 0
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: LD_INT 0
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PPUSH
72164: CALL_OW 447
// end ;
72168: LD_VAR 0 2
72172: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72173: LD_INT 0
72175: PPUSH
72176: PPUSH
72177: PPUSH
// tmp := [ ] ;
72178: LD_ADDR_VAR 0 5
72182: PUSH
72183: EMPTY
72184: ST_TO_ADDR
// for i in units do
72185: LD_ADDR_VAR 0 4
72189: PUSH
72190: LD_VAR 0 1
72194: PUSH
72195: FOR_IN
72196: IFFALSE 72234
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72198: LD_ADDR_VAR 0 5
72202: PUSH
72203: LD_VAR 0 5
72207: PPUSH
72208: LD_VAR 0 5
72212: PUSH
72213: LD_INT 1
72215: PLUS
72216: PPUSH
72217: LD_VAR 0 4
72221: PPUSH
72222: CALL_OW 256
72226: PPUSH
72227: CALL_OW 2
72231: ST_TO_ADDR
72232: GO 72195
72234: POP
72235: POP
// if not tmp then
72236: LD_VAR 0 5
72240: NOT
72241: IFFALSE 72245
// exit ;
72243: GO 72293
// if asc then
72245: LD_VAR 0 2
72249: IFFALSE 72273
// result := SortListByListAsc ( units , tmp ) else
72251: LD_ADDR_VAR 0 3
72255: PUSH
72256: LD_VAR 0 1
72260: PPUSH
72261: LD_VAR 0 5
72265: PPUSH
72266: CALL_OW 76
72270: ST_TO_ADDR
72271: GO 72293
// result := SortListByListDesc ( units , tmp ) ;
72273: LD_ADDR_VAR 0 3
72277: PUSH
72278: LD_VAR 0 1
72282: PPUSH
72283: LD_VAR 0 5
72287: PPUSH
72288: CALL_OW 77
72292: ST_TO_ADDR
// end ;
72293: LD_VAR 0 3
72297: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72298: LD_INT 0
72300: PPUSH
72301: PPUSH
// task := GetTaskList ( mech ) ;
72302: LD_ADDR_VAR 0 4
72306: PUSH
72307: LD_VAR 0 1
72311: PPUSH
72312: CALL_OW 437
72316: ST_TO_ADDR
// if not task then
72317: LD_VAR 0 4
72321: NOT
72322: IFFALSE 72326
// exit ;
72324: GO 72368
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72326: LD_ADDR_VAR 0 3
72330: PUSH
72331: LD_VAR 0 4
72335: PUSH
72336: LD_INT 1
72338: ARRAY
72339: PUSH
72340: LD_INT 1
72342: ARRAY
72343: PUSH
72344: LD_STRING r
72346: EQUAL
72347: PUSH
72348: LD_VAR 0 4
72352: PUSH
72353: LD_INT 1
72355: ARRAY
72356: PUSH
72357: LD_INT 4
72359: ARRAY
72360: PUSH
72361: LD_VAR 0 2
72365: EQUAL
72366: AND
72367: ST_TO_ADDR
// end ;
72368: LD_VAR 0 3
72372: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72373: LD_INT 0
72375: PPUSH
// SetDir ( unit , d ) ;
72376: LD_VAR 0 1
72380: PPUSH
72381: LD_VAR 0 4
72385: PPUSH
72386: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_VAR 0 2
72399: PPUSH
72400: LD_VAR 0 3
72404: PPUSH
72405: LD_VAR 0 5
72409: PPUSH
72410: CALL_OW 48
// end ;
72414: LD_VAR 0 6
72418: RET
// export function ToNaturalNumber ( number ) ; begin
72419: LD_INT 0
72421: PPUSH
// result := number div 1 ;
72422: LD_ADDR_VAR 0 2
72426: PUSH
72427: LD_VAR 0 1
72431: PUSH
72432: LD_INT 1
72434: DIV
72435: ST_TO_ADDR
// if number < 0 then
72436: LD_VAR 0 1
72440: PUSH
72441: LD_INT 0
72443: LESS
72444: IFFALSE 72454
// result := 0 ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_INT 0
72453: ST_TO_ADDR
// end ;
72454: LD_VAR 0 2
72458: RET
// export function SortByClass ( units , class ) ; var un ; begin
72459: LD_INT 0
72461: PPUSH
72462: PPUSH
// if not units or not class then
72463: LD_VAR 0 1
72467: NOT
72468: PUSH
72469: LD_VAR 0 2
72473: NOT
72474: OR
72475: IFFALSE 72479
// exit ;
72477: GO 72574
// result := [ ] ;
72479: LD_ADDR_VAR 0 3
72483: PUSH
72484: EMPTY
72485: ST_TO_ADDR
// for un in units do
72486: LD_ADDR_VAR 0 4
72490: PUSH
72491: LD_VAR 0 1
72495: PUSH
72496: FOR_IN
72497: IFFALSE 72572
// if GetClass ( un ) = class then
72499: LD_VAR 0 4
72503: PPUSH
72504: CALL_OW 257
72508: PUSH
72509: LD_VAR 0 2
72513: EQUAL
72514: IFFALSE 72541
// result := Insert ( result , 1 , un ) else
72516: LD_ADDR_VAR 0 3
72520: PUSH
72521: LD_VAR 0 3
72525: PPUSH
72526: LD_INT 1
72528: PPUSH
72529: LD_VAR 0 4
72533: PPUSH
72534: CALL_OW 2
72538: ST_TO_ADDR
72539: GO 72570
// result := Replace ( result , result + 1 , un ) ;
72541: LD_ADDR_VAR 0 3
72545: PUSH
72546: LD_VAR 0 3
72550: PPUSH
72551: LD_VAR 0 3
72555: PUSH
72556: LD_INT 1
72558: PLUS
72559: PPUSH
72560: LD_VAR 0 4
72564: PPUSH
72565: CALL_OW 1
72569: ST_TO_ADDR
72570: GO 72496
72572: POP
72573: POP
// end ;
72574: LD_VAR 0 3
72578: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72579: LD_INT 0
72581: PPUSH
72582: PPUSH
72583: PPUSH
72584: PPUSH
72585: PPUSH
72586: PPUSH
72587: PPUSH
// result := [ ] ;
72588: LD_ADDR_VAR 0 4
72592: PUSH
72593: EMPTY
72594: ST_TO_ADDR
// if x - r < 0 then
72595: LD_VAR 0 1
72599: PUSH
72600: LD_VAR 0 3
72604: MINUS
72605: PUSH
72606: LD_INT 0
72608: LESS
72609: IFFALSE 72621
// min_x := 0 else
72611: LD_ADDR_VAR 0 8
72615: PUSH
72616: LD_INT 0
72618: ST_TO_ADDR
72619: GO 72637
// min_x := x - r ;
72621: LD_ADDR_VAR 0 8
72625: PUSH
72626: LD_VAR 0 1
72630: PUSH
72631: LD_VAR 0 3
72635: MINUS
72636: ST_TO_ADDR
// if y - r < 0 then
72637: LD_VAR 0 2
72641: PUSH
72642: LD_VAR 0 3
72646: MINUS
72647: PUSH
72648: LD_INT 0
72650: LESS
72651: IFFALSE 72663
// min_y := 0 else
72653: LD_ADDR_VAR 0 7
72657: PUSH
72658: LD_INT 0
72660: ST_TO_ADDR
72661: GO 72679
// min_y := y - r ;
72663: LD_ADDR_VAR 0 7
72667: PUSH
72668: LD_VAR 0 2
72672: PUSH
72673: LD_VAR 0 3
72677: MINUS
72678: ST_TO_ADDR
// max_x := x + r ;
72679: LD_ADDR_VAR 0 9
72683: PUSH
72684: LD_VAR 0 1
72688: PUSH
72689: LD_VAR 0 3
72693: PLUS
72694: ST_TO_ADDR
// max_y := y + r ;
72695: LD_ADDR_VAR 0 10
72699: PUSH
72700: LD_VAR 0 2
72704: PUSH
72705: LD_VAR 0 3
72709: PLUS
72710: ST_TO_ADDR
// for _x = min_x to max_x do
72711: LD_ADDR_VAR 0 5
72715: PUSH
72716: DOUBLE
72717: LD_VAR 0 8
72721: DEC
72722: ST_TO_ADDR
72723: LD_VAR 0 9
72727: PUSH
72728: FOR_TO
72729: IFFALSE 72830
// for _y = min_y to max_y do
72731: LD_ADDR_VAR 0 6
72735: PUSH
72736: DOUBLE
72737: LD_VAR 0 7
72741: DEC
72742: ST_TO_ADDR
72743: LD_VAR 0 10
72747: PUSH
72748: FOR_TO
72749: IFFALSE 72826
// begin if not ValidHex ( _x , _y ) then
72751: LD_VAR 0 5
72755: PPUSH
72756: LD_VAR 0 6
72760: PPUSH
72761: CALL_OW 488
72765: NOT
72766: IFFALSE 72770
// continue ;
72768: GO 72748
// if GetResourceTypeXY ( _x , _y ) then
72770: LD_VAR 0 5
72774: PPUSH
72775: LD_VAR 0 6
72779: PPUSH
72780: CALL_OW 283
72784: IFFALSE 72824
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72786: LD_ADDR_VAR 0 4
72790: PUSH
72791: LD_VAR 0 4
72795: PPUSH
72796: LD_VAR 0 4
72800: PUSH
72801: LD_INT 1
72803: PLUS
72804: PPUSH
72805: LD_VAR 0 5
72809: PUSH
72810: LD_VAR 0 6
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PPUSH
72819: CALL_OW 1
72823: ST_TO_ADDR
// end ;
72824: GO 72748
72826: POP
72827: POP
72828: GO 72728
72830: POP
72831: POP
// end ;
72832: LD_VAR 0 4
72836: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72837: LD_INT 0
72839: PPUSH
72840: PPUSH
72841: PPUSH
72842: PPUSH
72843: PPUSH
72844: PPUSH
72845: PPUSH
72846: PPUSH
// if not units then
72847: LD_VAR 0 1
72851: NOT
72852: IFFALSE 72856
// exit ;
72854: GO 73380
// result := UnitFilter ( units , [ f_ok ] ) ;
72856: LD_ADDR_VAR 0 3
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: LD_INT 50
72868: PUSH
72869: EMPTY
72870: LIST
72871: PPUSH
72872: CALL_OW 72
72876: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72877: LD_ADDR_VAR 0 8
72881: PUSH
72882: LD_VAR 0 1
72886: PUSH
72887: LD_INT 1
72889: ARRAY
72890: PPUSH
72891: CALL_OW 255
72895: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72896: LD_ADDR_VAR 0 10
72900: PUSH
72901: LD_INT 29
72903: PUSH
72904: LD_INT 91
72906: PUSH
72907: LD_INT 49
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: LIST
72914: ST_TO_ADDR
// if not result then
72915: LD_VAR 0 3
72919: NOT
72920: IFFALSE 72924
// exit ;
72922: GO 73380
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72924: LD_ADDR_VAR 0 5
72928: PUSH
72929: LD_INT 81
72931: PUSH
72932: LD_VAR 0 8
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PPUSH
72941: CALL_OW 69
72945: ST_TO_ADDR
// for i in result do
72946: LD_ADDR_VAR 0 4
72950: PUSH
72951: LD_VAR 0 3
72955: PUSH
72956: FOR_IN
72957: IFFALSE 73378
// begin tag := GetTag ( i ) + 1 ;
72959: LD_ADDR_VAR 0 9
72963: PUSH
72964: LD_VAR 0 4
72968: PPUSH
72969: CALL_OW 110
72973: PUSH
72974: LD_INT 1
72976: PLUS
72977: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72978: LD_ADDR_VAR 0 7
72982: PUSH
72983: LD_VAR 0 4
72987: PPUSH
72988: CALL_OW 250
72992: PPUSH
72993: LD_VAR 0 4
72997: PPUSH
72998: CALL_OW 251
73002: PPUSH
73003: LD_INT 6
73005: PPUSH
73006: CALL 72579 0 3
73010: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73011: LD_VAR 0 4
73015: PPUSH
73016: CALL_OW 247
73020: PUSH
73021: LD_INT 2
73023: EQUAL
73024: PUSH
73025: LD_VAR 0 7
73029: AND
73030: PUSH
73031: LD_VAR 0 4
73035: PPUSH
73036: CALL_OW 264
73040: PUSH
73041: LD_VAR 0 10
73045: IN
73046: NOT
73047: AND
73048: IFFALSE 73087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73050: LD_VAR 0 4
73054: PPUSH
73055: LD_VAR 0 7
73059: PUSH
73060: LD_INT 1
73062: ARRAY
73063: PUSH
73064: LD_INT 1
73066: ARRAY
73067: PPUSH
73068: LD_VAR 0 7
73072: PUSH
73073: LD_INT 1
73075: ARRAY
73076: PUSH
73077: LD_INT 2
73079: ARRAY
73080: PPUSH
73081: CALL_OW 116
73085: GO 73376
// if path > tag then
73087: LD_VAR 0 2
73091: PUSH
73092: LD_VAR 0 9
73096: GREATER
73097: IFFALSE 73305
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73099: LD_ADDR_VAR 0 6
73103: PUSH
73104: LD_VAR 0 5
73108: PPUSH
73109: LD_INT 91
73111: PUSH
73112: LD_VAR 0 4
73116: PUSH
73117: LD_INT 8
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: LIST
73124: PPUSH
73125: CALL_OW 72
73129: ST_TO_ADDR
// if nearEnemy then
73130: LD_VAR 0 6
73134: IFFALSE 73203
// begin if GetWeapon ( i ) = ru_time_lapser then
73136: LD_VAR 0 4
73140: PPUSH
73141: CALL_OW 264
73145: PUSH
73146: LD_INT 49
73148: EQUAL
73149: IFFALSE 73177
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73151: LD_VAR 0 4
73155: PPUSH
73156: LD_VAR 0 6
73160: PPUSH
73161: LD_VAR 0 4
73165: PPUSH
73166: CALL_OW 74
73170: PPUSH
73171: CALL_OW 112
73175: GO 73201
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73177: LD_VAR 0 4
73181: PPUSH
73182: LD_VAR 0 6
73186: PPUSH
73187: LD_VAR 0 4
73191: PPUSH
73192: CALL_OW 74
73196: PPUSH
73197: CALL 74305 0 2
// end else
73201: GO 73303
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73203: LD_VAR 0 4
73207: PPUSH
73208: LD_VAR 0 2
73212: PUSH
73213: LD_VAR 0 9
73217: ARRAY
73218: PUSH
73219: LD_INT 1
73221: ARRAY
73222: PPUSH
73223: LD_VAR 0 2
73227: PUSH
73228: LD_VAR 0 9
73232: ARRAY
73233: PUSH
73234: LD_INT 2
73236: ARRAY
73237: PPUSH
73238: CALL_OW 297
73242: PUSH
73243: LD_INT 6
73245: GREATER
73246: IFFALSE 73289
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73248: LD_VAR 0 4
73252: PPUSH
73253: LD_VAR 0 2
73257: PUSH
73258: LD_VAR 0 9
73262: ARRAY
73263: PUSH
73264: LD_INT 1
73266: ARRAY
73267: PPUSH
73268: LD_VAR 0 2
73272: PUSH
73273: LD_VAR 0 9
73277: ARRAY
73278: PUSH
73279: LD_INT 2
73281: ARRAY
73282: PPUSH
73283: CALL_OW 114
73287: GO 73303
// SetTag ( i , tag ) ;
73289: LD_VAR 0 4
73293: PPUSH
73294: LD_VAR 0 9
73298: PPUSH
73299: CALL_OW 109
// end else
73303: GO 73376
// if enemy then
73305: LD_VAR 0 5
73309: IFFALSE 73376
// begin if GetWeapon ( i ) = ru_time_lapser then
73311: LD_VAR 0 4
73315: PPUSH
73316: CALL_OW 264
73320: PUSH
73321: LD_INT 49
73323: EQUAL
73324: IFFALSE 73352
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73326: LD_VAR 0 4
73330: PPUSH
73331: LD_VAR 0 5
73335: PPUSH
73336: LD_VAR 0 4
73340: PPUSH
73341: CALL_OW 74
73345: PPUSH
73346: CALL_OW 112
73350: GO 73376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73352: LD_VAR 0 4
73356: PPUSH
73357: LD_VAR 0 5
73361: PPUSH
73362: LD_VAR 0 4
73366: PPUSH
73367: CALL_OW 74
73371: PPUSH
73372: CALL 74305 0 2
// end ; end ;
73376: GO 72956
73378: POP
73379: POP
// end ;
73380: LD_VAR 0 3
73384: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73385: LD_INT 0
73387: PPUSH
73388: PPUSH
73389: PPUSH
// if not unit or IsInUnit ( unit ) then
73390: LD_VAR 0 1
73394: NOT
73395: PUSH
73396: LD_VAR 0 1
73400: PPUSH
73401: CALL_OW 310
73405: OR
73406: IFFALSE 73410
// exit ;
73408: GO 73501
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73410: LD_ADDR_VAR 0 4
73414: PUSH
73415: LD_VAR 0 1
73419: PPUSH
73420: CALL_OW 250
73424: PPUSH
73425: LD_VAR 0 2
73429: PPUSH
73430: LD_INT 1
73432: PPUSH
73433: CALL_OW 272
73437: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73438: LD_ADDR_VAR 0 5
73442: PUSH
73443: LD_VAR 0 1
73447: PPUSH
73448: CALL_OW 251
73452: PPUSH
73453: LD_VAR 0 2
73457: PPUSH
73458: LD_INT 1
73460: PPUSH
73461: CALL_OW 273
73465: ST_TO_ADDR
// if ValidHex ( x , y ) then
73466: LD_VAR 0 4
73470: PPUSH
73471: LD_VAR 0 5
73475: PPUSH
73476: CALL_OW 488
73480: IFFALSE 73501
// ComTurnXY ( unit , x , y ) ;
73482: LD_VAR 0 1
73486: PPUSH
73487: LD_VAR 0 4
73491: PPUSH
73492: LD_VAR 0 5
73496: PPUSH
73497: CALL_OW 118
// end ;
73501: LD_VAR 0 3
73505: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73506: LD_INT 0
73508: PPUSH
73509: PPUSH
// result := false ;
73510: LD_ADDR_VAR 0 3
73514: PUSH
73515: LD_INT 0
73517: ST_TO_ADDR
// if not units then
73518: LD_VAR 0 2
73522: NOT
73523: IFFALSE 73527
// exit ;
73525: GO 73572
// for i in units do
73527: LD_ADDR_VAR 0 4
73531: PUSH
73532: LD_VAR 0 2
73536: PUSH
73537: FOR_IN
73538: IFFALSE 73570
// if See ( side , i ) then
73540: LD_VAR 0 1
73544: PPUSH
73545: LD_VAR 0 4
73549: PPUSH
73550: CALL_OW 292
73554: IFFALSE 73568
// begin result := true ;
73556: LD_ADDR_VAR 0 3
73560: PUSH
73561: LD_INT 1
73563: ST_TO_ADDR
// exit ;
73564: POP
73565: POP
73566: GO 73572
// end ;
73568: GO 73537
73570: POP
73571: POP
// end ;
73572: LD_VAR 0 3
73576: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73577: LD_INT 0
73579: PPUSH
73580: PPUSH
73581: PPUSH
73582: PPUSH
// if not unit or not points then
73583: LD_VAR 0 1
73587: NOT
73588: PUSH
73589: LD_VAR 0 2
73593: NOT
73594: OR
73595: IFFALSE 73599
// exit ;
73597: GO 73689
// dist := 99999 ;
73599: LD_ADDR_VAR 0 5
73603: PUSH
73604: LD_INT 99999
73606: ST_TO_ADDR
// for i in points do
73607: LD_ADDR_VAR 0 4
73611: PUSH
73612: LD_VAR 0 2
73616: PUSH
73617: FOR_IN
73618: IFFALSE 73687
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73620: LD_ADDR_VAR 0 6
73624: PUSH
73625: LD_VAR 0 1
73629: PPUSH
73630: LD_VAR 0 4
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: PPUSH
73639: LD_VAR 0 4
73643: PUSH
73644: LD_INT 2
73646: ARRAY
73647: PPUSH
73648: CALL_OW 297
73652: ST_TO_ADDR
// if tmpDist < dist then
73653: LD_VAR 0 6
73657: PUSH
73658: LD_VAR 0 5
73662: LESS
73663: IFFALSE 73685
// begin result := i ;
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_VAR 0 4
73674: ST_TO_ADDR
// dist := tmpDist ;
73675: LD_ADDR_VAR 0 5
73679: PUSH
73680: LD_VAR 0 6
73684: ST_TO_ADDR
// end ; end ;
73685: GO 73617
73687: POP
73688: POP
// end ;
73689: LD_VAR 0 3
73693: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73694: LD_INT 0
73696: PPUSH
// uc_side := side ;
73697: LD_ADDR_OWVAR 20
73701: PUSH
73702: LD_VAR 0 1
73706: ST_TO_ADDR
// uc_nation := 3 ;
73707: LD_ADDR_OWVAR 21
73711: PUSH
73712: LD_INT 3
73714: ST_TO_ADDR
// vc_chassis := 25 ;
73715: LD_ADDR_OWVAR 37
73719: PUSH
73720: LD_INT 25
73722: ST_TO_ADDR
// vc_engine := engine_siberite ;
73723: LD_ADDR_OWVAR 39
73727: PUSH
73728: LD_INT 3
73730: ST_TO_ADDR
// vc_control := control_computer ;
73731: LD_ADDR_OWVAR 38
73735: PUSH
73736: LD_INT 3
73738: ST_TO_ADDR
// vc_weapon := 59 ;
73739: LD_ADDR_OWVAR 40
73743: PUSH
73744: LD_INT 59
73746: ST_TO_ADDR
// result := CreateVehicle ;
73747: LD_ADDR_VAR 0 5
73751: PUSH
73752: CALL_OW 45
73756: ST_TO_ADDR
// SetDir ( result , d ) ;
73757: LD_VAR 0 5
73761: PPUSH
73762: LD_VAR 0 4
73766: PPUSH
73767: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73771: LD_VAR 0 5
73775: PPUSH
73776: LD_VAR 0 2
73780: PPUSH
73781: LD_VAR 0 3
73785: PPUSH
73786: LD_INT 0
73788: PPUSH
73789: CALL_OW 48
// end ;
73793: LD_VAR 0 5
73797: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73798: LD_INT 0
73800: PPUSH
73801: PPUSH
73802: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73803: LD_ADDR_VAR 0 2
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: LD_INT 0
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73826: LD_VAR 0 1
73830: NOT
73831: PUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: CALL_OW 264
73841: PUSH
73842: LD_INT 12
73844: PUSH
73845: LD_INT 51
73847: PUSH
73848: LD_INT 32
73850: PUSH
73851: LD_INT 89
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: IN
73860: NOT
73861: OR
73862: IFFALSE 73866
// exit ;
73864: GO 73964
// for i := 1 to 3 do
73866: LD_ADDR_VAR 0 3
73870: PUSH
73871: DOUBLE
73872: LD_INT 1
73874: DEC
73875: ST_TO_ADDR
73876: LD_INT 3
73878: PUSH
73879: FOR_TO
73880: IFFALSE 73962
// begin tmp := GetCargo ( cargo , i ) ;
73882: LD_ADDR_VAR 0 4
73886: PUSH
73887: LD_VAR 0 1
73891: PPUSH
73892: LD_VAR 0 3
73896: PPUSH
73897: CALL_OW 289
73901: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73902: LD_ADDR_VAR 0 2
73906: PUSH
73907: LD_VAR 0 2
73911: PPUSH
73912: LD_VAR 0 3
73916: PPUSH
73917: LD_VAR 0 4
73921: PPUSH
73922: CALL_OW 1
73926: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73927: LD_ADDR_VAR 0 2
73931: PUSH
73932: LD_VAR 0 2
73936: PPUSH
73937: LD_INT 4
73939: PPUSH
73940: LD_VAR 0 2
73944: PUSH
73945: LD_INT 4
73947: ARRAY
73948: PUSH
73949: LD_VAR 0 4
73953: PLUS
73954: PPUSH
73955: CALL_OW 1
73959: ST_TO_ADDR
// end ;
73960: GO 73879
73962: POP
73963: POP
// end ;
73964: LD_VAR 0 2
73968: RET
// export function Length ( array ) ; begin
73969: LD_INT 0
73971: PPUSH
// result := array + 0 ;
73972: LD_ADDR_VAR 0 2
73976: PUSH
73977: LD_VAR 0 1
73981: PUSH
73982: LD_INT 0
73984: PLUS
73985: ST_TO_ADDR
// end ;
73986: LD_VAR 0 2
73990: RET
// export function PrepareArray ( array ) ; begin
73991: LD_INT 0
73993: PPUSH
// result := array diff 0 ;
73994: LD_ADDR_VAR 0 2
73998: PUSH
73999: LD_VAR 0 1
74003: PUSH
74004: LD_INT 0
74006: DIFF
74007: ST_TO_ADDR
// if not result [ 1 ] then
74008: LD_VAR 0 2
74012: PUSH
74013: LD_INT 1
74015: ARRAY
74016: NOT
74017: IFFALSE 74037
// result := Delete ( result , 1 ) ;
74019: LD_ADDR_VAR 0 2
74023: PUSH
74024: LD_VAR 0 2
74028: PPUSH
74029: LD_INT 1
74031: PPUSH
74032: CALL_OW 3
74036: ST_TO_ADDR
// end ;
74037: LD_VAR 0 2
74041: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74042: LD_INT 0
74044: PPUSH
74045: PPUSH
74046: PPUSH
74047: PPUSH
// sibRocketRange := 25 ;
74048: LD_ADDR_VAR 0 6
74052: PUSH
74053: LD_INT 25
74055: ST_TO_ADDR
// result := false ;
74056: LD_ADDR_VAR 0 4
74060: PUSH
74061: LD_INT 0
74063: ST_TO_ADDR
// for i := 0 to 5 do
74064: LD_ADDR_VAR 0 5
74068: PUSH
74069: DOUBLE
74070: LD_INT 0
74072: DEC
74073: ST_TO_ADDR
74074: LD_INT 5
74076: PUSH
74077: FOR_TO
74078: IFFALSE 74145
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74080: LD_VAR 0 1
74084: PPUSH
74085: LD_VAR 0 5
74089: PPUSH
74090: LD_VAR 0 6
74094: PPUSH
74095: CALL_OW 272
74099: PPUSH
74100: LD_VAR 0 2
74104: PPUSH
74105: LD_VAR 0 5
74109: PPUSH
74110: LD_VAR 0 6
74114: PPUSH
74115: CALL_OW 273
74119: PPUSH
74120: LD_VAR 0 3
74124: PPUSH
74125: CALL_OW 309
74129: IFFALSE 74143
// begin result := true ;
74131: LD_ADDR_VAR 0 4
74135: PUSH
74136: LD_INT 1
74138: ST_TO_ADDR
// exit ;
74139: POP
74140: POP
74141: GO 74147
// end ;
74143: GO 74077
74145: POP
74146: POP
// end ;
74147: LD_VAR 0 4
74151: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74152: LD_INT 0
74154: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74155: LD_VAR 0 1
74159: PPUSH
74160: LD_VAR 0 2
74164: PPUSH
74165: LD_INT 0
74167: PPUSH
74168: LD_INT 0
74170: PPUSH
74171: LD_INT 1
74173: PPUSH
74174: LD_INT 0
74176: PPUSH
74177: CALL_OW 587
// end ;
74181: LD_VAR 0 3
74185: RET
// export function CenterOnNow ( unit ) ; begin
74186: LD_INT 0
74188: PPUSH
// result := IsInUnit ( unit ) ;
74189: LD_ADDR_VAR 0 2
74193: PUSH
74194: LD_VAR 0 1
74198: PPUSH
74199: CALL_OW 310
74203: ST_TO_ADDR
// if not result then
74204: LD_VAR 0 2
74208: NOT
74209: IFFALSE 74221
// result := unit ;
74211: LD_ADDR_VAR 0 2
74215: PUSH
74216: LD_VAR 0 1
74220: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74221: LD_VAR 0 1
74225: PPUSH
74226: CALL_OW 87
// end ;
74230: LD_VAR 0 2
74234: RET
// export function ComMoveHex ( unit , hex ) ; begin
74235: LD_INT 0
74237: PPUSH
// if not hex then
74238: LD_VAR 0 2
74242: NOT
74243: IFFALSE 74247
// exit ;
74245: GO 74300
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74247: LD_VAR 0 2
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: PPUSH
74256: LD_VAR 0 2
74260: PUSH
74261: LD_INT 2
74263: ARRAY
74264: PPUSH
74265: CALL_OW 428
74269: IFFALSE 74273
// exit ;
74271: GO 74300
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74273: LD_VAR 0 1
74277: PPUSH
74278: LD_VAR 0 2
74282: PUSH
74283: LD_INT 1
74285: ARRAY
74286: PPUSH
74287: LD_VAR 0 2
74291: PUSH
74292: LD_INT 2
74294: ARRAY
74295: PPUSH
74296: CALL_OW 111
// end ;
74300: LD_VAR 0 3
74304: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74305: LD_INT 0
74307: PPUSH
74308: PPUSH
74309: PPUSH
// if not unit or not enemy then
74310: LD_VAR 0 1
74314: NOT
74315: PUSH
74316: LD_VAR 0 2
74320: NOT
74321: OR
74322: IFFALSE 74326
// exit ;
74324: GO 74450
// x := GetX ( enemy ) ;
74326: LD_ADDR_VAR 0 4
74330: PUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: CALL_OW 250
74340: ST_TO_ADDR
// y := GetY ( enemy ) ;
74341: LD_ADDR_VAR 0 5
74345: PUSH
74346: LD_VAR 0 2
74350: PPUSH
74351: CALL_OW 251
74355: ST_TO_ADDR
// if ValidHex ( x , y ) then
74356: LD_VAR 0 4
74360: PPUSH
74361: LD_VAR 0 5
74365: PPUSH
74366: CALL_OW 488
74370: IFFALSE 74450
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
74372: LD_VAR 0 2
74376: PPUSH
74377: CALL_OW 247
74381: PUSH
74382: LD_INT 3
74384: PUSH
74385: LD_INT 2
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: IN
74392: PUSH
74393: LD_VAR 0 1
74397: PPUSH
74398: CALL_OW 255
74402: PPUSH
74403: LD_VAR 0 2
74407: PPUSH
74408: CALL_OW 292
74412: AND
74413: IFFALSE 74431
// ComAttackUnit ( unit , enemy ) else
74415: LD_VAR 0 1
74419: PPUSH
74420: LD_VAR 0 2
74424: PPUSH
74425: CALL_OW 115
74429: GO 74450
// ComAgressiveMove ( unit , x , y ) ;
74431: LD_VAR 0 1
74435: PPUSH
74436: LD_VAR 0 4
74440: PPUSH
74441: LD_VAR 0 5
74445: PPUSH
74446: CALL_OW 114
// end ; end_of_file
74450: LD_VAR 0 3
74454: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74455: LD_VAR 0 1
74459: PUSH
74460: LD_INT 200
74462: DOUBLE
74463: GREATEREQUAL
74464: IFFALSE 74472
74466: LD_INT 299
74468: DOUBLE
74469: LESSEQUAL
74470: IFTRUE 74474
74472: GO 74506
74474: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74475: LD_VAR 0 1
74479: PPUSH
74480: LD_VAR 0 2
74484: PPUSH
74485: LD_VAR 0 3
74489: PPUSH
74490: LD_VAR 0 4
74494: PPUSH
74495: LD_VAR 0 5
74499: PPUSH
74500: CALL 28999 0 5
74504: GO 74583
74506: LD_INT 300
74508: DOUBLE
74509: GREATEREQUAL
74510: IFFALSE 74518
74512: LD_INT 399
74514: DOUBLE
74515: LESSEQUAL
74516: IFTRUE 74520
74518: GO 74582
74520: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74521: LD_VAR 0 1
74525: PPUSH
74526: LD_VAR 0 2
74530: PPUSH
74531: LD_VAR 0 3
74535: PPUSH
74536: LD_VAR 0 4
74540: PPUSH
74541: LD_VAR 0 5
74545: PPUSH
74546: LD_VAR 0 6
74550: PPUSH
74551: LD_VAR 0 7
74555: PPUSH
74556: LD_VAR 0 8
74560: PPUSH
74561: LD_VAR 0 9
74565: PPUSH
74566: LD_VAR 0 10
74570: PPUSH
74571: LD_VAR 0 11
74575: PPUSH
74576: CALL 25324 0 11
74580: GO 74583
74582: POP
// end ;
74583: PPOPN 11
74585: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74586: LD_VAR 0 1
74590: PPUSH
74591: LD_VAR 0 2
74595: PPUSH
74596: LD_VAR 0 3
74600: PPUSH
74601: LD_VAR 0 4
74605: PPUSH
74606: LD_VAR 0 5
74610: PPUSH
74611: CALL 28735 0 5
// end ; end_of_file
74615: PPOPN 5
74617: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74618: LD_VAR 0 1
74622: PPUSH
74623: LD_VAR 0 2
74627: PPUSH
74628: LD_VAR 0 3
74632: PPUSH
74633: LD_VAR 0 4
74637: PPUSH
74638: LD_VAR 0 5
74642: PPUSH
74643: LD_VAR 0 6
74647: PPUSH
74648: CALL 12976 0 6
// end ;
74652: PPOPN 6
74654: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74655: LD_INT 0
74657: PPUSH
// begin if not units then
74658: LD_VAR 0 1
74662: NOT
74663: IFFALSE 74667
// exit ;
74665: GO 74667
// end ;
74667: PPOPN 7
74669: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74670: CALL 12880 0 0
// end ;
74674: PPOPN 1
74676: END
