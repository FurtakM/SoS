// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11106 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4640 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 25153 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 25153 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_OWVAR 67
1225: PLUS
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1306
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1230: LD_INT 0
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: LD_OWVAR 67
1254: ARRAY
1255: PPUSH
1256: CALL_OW 380
// un := CreateHuman ;
1260: LD_ADDR_VAR 0 3
1264: PUSH
1265: CALL_OW 44
1269: ST_TO_ADDR
// usForces := usForces ^ un ;
1270: LD_ADDR_EXP 21
1274: PUSH
1275: LD_EXP 21
1279: PUSH
1280: LD_VAR 0 3
1284: ADD
1285: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_VAR 0 6
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: CALL_OW 52
// end ;
1304: GO 1227
1306: POP
1307: POP
// if Difficulty > 1 then
1308: LD_OWVAR 67
1312: PUSH
1313: LD_INT 1
1315: GREATER
1316: IFFALSE 1409
// begin for i := 1 to 3 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 3
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1407
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1334: LD_INT 0
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: LD_OWVAR 67
1358: ARRAY
1359: PPUSH
1360: CALL_OW 380
// un := CreateHuman ;
1364: LD_ADDR_VAR 0 3
1368: PUSH
1369: CALL_OW 44
1373: ST_TO_ADDR
// usForces := usForces ^ un ;
1374: LD_ADDR_EXP 21
1378: PUSH
1379: LD_EXP 21
1383: PUSH
1384: LD_VAR 0 3
1388: ADD
1389: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1390: LD_VAR 0 3
1394: PPUSH
1395: LD_INT 9
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 49
// end ;
1405: GO 1331
1407: POP
1408: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1409: LD_INT 1
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 2
1420: PPUSH
1421: LD_INT 1
1423: PPUSH
1424: LD_INT 2
1426: PPUSH
1427: LD_INT 100
1429: PPUSH
1430: CALL 237 0 7
// veh := CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 2
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 43
1463: PPUSH
1464: LD_INT 24
1466: PPUSH
1467: LD_INT 0
1469: PPUSH
1470: CALL_OW 48
// end ;
1474: LD_VAR 0 1
1478: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1479: LD_INT 0
1481: PPUSH
1482: PPUSH
1483: PPUSH
1484: PPUSH
1485: PPUSH
1486: PPUSH
// if not usSci then
1487: LD_EXP 22
1491: NOT
1492: IFFALSE 1496
// exit ;
1494: GO 1670
// xy := AreaToList ( tameArea , 0 ) ;
1496: LD_ADDR_VAR 0 6
1500: PUSH
1501: LD_INT 5
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 517
1511: ST_TO_ADDR
// for i in usSci do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: LD_EXP 22
1521: PUSH
1522: FOR_IN
1523: IFFALSE 1668
// begin k := rand ( 1 , xy [ 1 ] ) ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_VAR 0 6
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PPUSH
1542: CALL_OW 12
1546: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1547: LD_VAR 0 2
1551: PPUSH
1552: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_VAR 0 6
1565: PUSH
1566: LD_INT 1
1568: ARRAY
1569: PUSH
1570: LD_VAR 0 4
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PUSH
1585: LD_VAR 0 4
1589: ARRAY
1590: PPUSH
1591: CALL_OW 171
// for j := 1 to 2 do
1595: LD_ADDR_VAR 0 3
1599: PUSH
1600: DOUBLE
1601: LD_INT 1
1603: DEC
1604: ST_TO_ADDR
1605: LD_INT 2
1607: PUSH
1608: FOR_TO
1609: IFFALSE 1664
// begin tmp := Delete ( xy [ j ] , k ) ;
1611: LD_ADDR_VAR 0 5
1615: PUSH
1616: LD_VAR 0 6
1620: PUSH
1621: LD_VAR 0 3
1625: ARRAY
1626: PPUSH
1627: LD_VAR 0 4
1631: PPUSH
1632: CALL_OW 3
1636: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_VAR 0 6
1646: PPUSH
1647: LD_VAR 0 3
1651: PPUSH
1652: LD_VAR 0 5
1656: PPUSH
1657: CALL_OW 1
1661: ST_TO_ADDR
// end ;
1662: GO 1608
1664: POP
1665: POP
// end ;
1666: GO 1522
1668: POP
1669: POP
// end ;
1670: LD_VAR 0 1
1674: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1675: LD_EXP 4
1679: PUSH
1680: LD_EXP 22
1684: AND
1685: PUSH
1686: LD_EXP 10
1690: NOT
1691: AND
1692: PUSH
1693: LD_INT 22
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 12
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 69
1721: AND
1722: IFFALSE 2214
1724: GO 1726
1726: DISABLE
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
1731: PPUSH
1732: PPUSH
1733: PPUSH
// begin enable ;
1734: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1735: LD_EXP 22
1739: PPUSH
1740: LD_INT 2
1742: PUSH
1743: LD_INT 60
1745: PUSH
1746: EMPTY
1747: LIST
1748: PUSH
1749: LD_INT 54
1751: PUSH
1752: EMPTY
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: PPUSH
1760: CALL_OW 72
1764: IFFALSE 1768
// exit ;
1766: GO 2214
// for i in usSci do
1768: LD_ADDR_VAR 0 1
1772: PUSH
1773: LD_EXP 22
1777: PUSH
1778: FOR_IN
1779: IFFALSE 2212
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1781: LD_VAR 0 1
1785: PPUSH
1786: CALL_OW 314
1790: NOT
1791: PUSH
1792: LD_VAR 0 1
1796: PPUSH
1797: CALL_OW 256
1801: PUSH
1802: LD_INT 1000
1804: EQUAL
1805: AND
1806: IFFALSE 2013
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1808: LD_ADDR_VAR 0 5
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 25
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PPUSH
1837: CALL_OW 69
1841: PPUSH
1842: LD_VAR 0 1
1846: PPUSH
1847: CALL_OW 74
1851: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1852: LD_VAR 0 1
1856: PPUSH
1857: LD_VAR 0 5
1861: PPUSH
1862: CALL_OW 296
1866: PUSH
1867: LD_INT 10
1869: LESS
1870: IFFALSE 1903
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1872: LD_VAR 0 1
1876: PPUSH
1877: LD_VAR 0 5
1881: PPUSH
1882: CALL_OW 250
1886: PPUSH
1887: LD_VAR 0 5
1891: PPUSH
1892: CALL_OW 251
1896: PPUSH
1897: CALL_OW 131
1901: GO 2013
// begin d := rand ( 0 , 5 ) ;
1903: LD_ADDR_VAR 0 4
1907: PUSH
1908: LD_INT 0
1910: PPUSH
1911: LD_INT 5
1913: PPUSH
1914: CALL_OW 12
1918: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1919: LD_ADDR_VAR 0 2
1923: PUSH
1924: LD_VAR 0 1
1928: PPUSH
1929: CALL_OW 250
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: LD_INT 3
1941: PPUSH
1942: CALL_OW 272
1946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: LD_VAR 0 1
1956: PPUSH
1957: CALL_OW 251
1961: PPUSH
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 3
1969: PPUSH
1970: CALL_OW 273
1974: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: CALL_OW 488
1989: NOT
1990: IFFALSE 1994
// continue ;
1992: GO 1778
// ComMoveXY ( i , x , y ) ;
1994: LD_VAR 0 1
1998: PPUSH
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_VAR 0 3
2008: PPUSH
2009: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2013: LD_VAR 0 1
2017: PPUSH
2018: CALL_OW 256
2022: PUSH
2023: LD_INT 900
2025: LESS
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: LD_INT 37
2034: PPUSH
2035: LD_INT 23
2037: PPUSH
2038: CALL_OW 297
2042: PUSH
2043: LD_INT 10
2045: GREATER
2046: AND
2047: IFFALSE 2123
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2049: LD_EXP 19
2053: PPUSH
2054: CALL_OW 302
2058: PUSH
2059: LD_EXP 19
2063: PPUSH
2064: CALL_OW 310
2068: AND
2069: IFFALSE 2080
// ComExitBuilding ( Gladstone ) ;
2071: LD_EXP 19
2075: PPUSH
2076: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2080: LD_EXP 19
2084: PPUSH
2085: LD_VAR 0 1
2089: PPUSH
2090: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 3
2101: PPUSH
2102: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2106: LD_VAR 0 1
2110: PPUSH
2111: LD_INT 37
2113: PPUSH
2114: LD_INT 23
2116: PPUSH
2117: CALL_OW 111
// end else
2121: GO 2210
// if GetLives ( i ) = 1000 then
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 256
2132: PUSH
2133: LD_INT 1000
2135: EQUAL
2136: IFFALSE 2210
// begin if SideShoot ( i ) = 2 then
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 503
2147: PUSH
2148: LD_INT 2
2150: EQUAL
2151: IFFALSE 2198
// begin if not usAlert then
2153: LD_EXP 10
2157: NOT
2158: IFFALSE 2168
// usAlert := true ;
2160: LD_ADDR_EXP 10
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2168: LD_VAR 0 1
2172: PPUSH
2173: LD_INT 3
2175: PPUSH
2176: CALL_OW 180
// usSci := usSci diff i ;
2180: LD_ADDR_EXP 22
2184: PUSH
2185: LD_EXP 22
2189: PUSH
2190: LD_VAR 0 1
2194: DIFF
2195: ST_TO_ADDR
// end else
2196: GO 2210
// ComMoveToArea ( i , tameArea ) ;
2198: LD_VAR 0 1
2202: PPUSH
2203: LD_INT 5
2205: PPUSH
2206: CALL_OW 113
// end ; end ;
2210: GO 1778
2212: POP
2213: POP
// end ;
2214: PPOPN 5
2216: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2217: LD_EXP 10
2221: NOT
2222: PUSH
2223: LD_INT 22
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 21
2235: PUSH
2236: LD_INT 3
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: LD_INT 57
2248: PUSH
2249: EMPTY
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 24
2261: PUSH
2262: LD_INT 999
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PUSH
2284: LD_INT 7
2286: PPUSH
2287: LD_INT 22
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 70
2301: OR
2302: AND
2303: IFFALSE 2316
2305: GO 2307
2307: DISABLE
// usAlert := true ;
2308: LD_ADDR_EXP 10
2312: PUSH
2313: LD_INT 1
2315: ST_TO_ADDR
2316: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2317: LD_EXP 10
2321: IFFALSE 2668
2323: GO 2325
2325: DISABLE
2326: LD_INT 0
2328: PPUSH
2329: PPUSH
2330: PPUSH
// begin usActiveDefend := true ;
2331: LD_ADDR_EXP 11
2335: PUSH
2336: LD_INT 1
2338: ST_TO_ADDR
// if not usForces then
2339: LD_EXP 21
2343: NOT
2344: IFFALSE 2348
// exit ;
2346: GO 2668
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2348: LD_ADDR_VAR 0 3
2352: PUSH
2353: LD_INT 22
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 30
2365: PUSH
2366: LD_INT 4
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PPUSH
2411: CALL_OW 69
2415: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2416: LD_EXP 20
2420: PPUSH
2421: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2425: LD_EXP 20
2429: PPUSH
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 1
2437: ARRAY
2438: PPUSH
2439: CALL_OW 180
// if IsOk ( Gladstone ) then
2443: LD_EXP 19
2447: PPUSH
2448: CALL_OW 302
2452: IFFALSE 2493
// begin ComExitBuilding ( Gladstone ) ;
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2463: LD_EXP 19
2467: PPUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 1
2475: ARRAY
2476: PPUSH
2477: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2481: LD_EXP 19
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2493: LD_EXP 21
2497: PUSH
2498: LD_INT 1
2500: ARRAY
2501: PPUSH
2502: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2506: LD_EXP 21
2510: PUSH
2511: LD_INT 1
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 2
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2528: LD_EXP 21
2532: PUSH
2533: LD_INT 2
2535: ARRAY
2536: PPUSH
2537: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2541: LD_EXP 21
2545: PUSH
2546: LD_INT 2
2548: ARRAY
2549: PPUSH
2550: LD_INT 22
2552: PUSH
2553: LD_INT 1
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 32
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: CALL_OW 180
// if b > 1 and usForces > 2 then
2587: LD_VAR 0 2
2591: PUSH
2592: LD_INT 1
2594: GREATER
2595: PUSH
2596: LD_EXP 21
2600: PUSH
2601: LD_INT 2
2603: GREATER
2604: AND
2605: IFFALSE 2668
// begin repeat wait ( 0 0$1 ) ;
2607: LD_INT 35
2609: PPUSH
2610: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 2
2621: ARRAY
2622: PPUSH
2623: CALL_OW 461
2627: PUSH
2628: LD_INT 1
2630: NONEQUAL
2631: IFFALSE 2607
// ComExitBuilding ( usForces [ 3 ] ) ;
2633: LD_EXP 21
2637: PUSH
2638: LD_INT 3
2640: ARRAY
2641: PPUSH
2642: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2646: LD_EXP 21
2650: PUSH
2651: LD_INT 3
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 2
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: CALL_OW 180
// end ; end ;
2668: PPOPN 3
2670: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2671: LD_INT 3
2673: PPUSH
2674: CALL_OW 256
2678: PUSH
2679: LD_INT 999
2681: LESS
2682: PUSH
2683: LD_EXP 10
2687: AND
2688: PUSH
2689: LD_EXP 21
2693: AND
2694: IFFALSE 2865
2696: GO 2698
2698: DISABLE
2699: LD_INT 0
2701: PPUSH
// begin for i in usForces do
2702: LD_ADDR_VAR 0 1
2706: PUSH
2707: LD_EXP 21
2711: PUSH
2712: FOR_IN
2713: IFFALSE 2752
// begin if IsInUnit ( i ) then
2715: LD_VAR 0 1
2719: PPUSH
2720: CALL_OW 310
2724: IFFALSE 2735
// ComExitBuilding ( i ) ;
2726: LD_VAR 0 1
2730: PPUSH
2731: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2735: LD_VAR 0 1
2739: PPUSH
2740: LD_INT 31
2742: PPUSH
2743: LD_INT 8
2745: PPUSH
2746: CALL_OW 174
// end ;
2750: GO 2712
2752: POP
2753: POP
// wait ( 0 0$8 ) ;
2754: LD_INT 280
2756: PPUSH
2757: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2761: LD_INT 22
2763: PUSH
2764: LD_INT 2
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 91
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: LD_INT 14
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: IFFALSE 2843
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2795: LD_EXP 21
2799: PPUSH
2800: LD_INT 22
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 91
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: LD_INT 14
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: LD_INT 1
2835: ARRAY
2836: PPUSH
2837: CALL_OW 115
2841: GO 2865
// begin wait ( 0 0$20 ) ;
2843: LD_INT 700
2845: PPUSH
2846: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2850: LD_EXP 21
2854: PPUSH
2855: LD_INT 39
2857: PPUSH
2858: LD_INT 19
2860: PPUSH
2861: CALL_OW 171
// end ; end ;
2865: PPOPN 1
2867: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2868: LD_EXP 23
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: CALL_OW 296
2880: PUSH
2881: LD_INT 10
2883: LESS
2884: PUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 256
2892: PUSH
2893: LD_INT 999
2895: LESS
2896: OR
2897: PUSH
2898: LD_INT 22
2900: PUSH
2901: LD_INT 1
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 25
2910: PUSH
2911: LD_INT 2
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PPUSH
2922: CALL_OW 69
2926: AND
2927: IFFALSE 3041
2929: GO 2931
2931: DISABLE
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2936: LD_ADDR_VAR 0 1
2940: PUSH
2941: LD_INT 22
2943: PUSH
2944: LD_INT 1
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 25
2953: PUSH
2954: LD_INT 2
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PPUSH
2965: CALL_OW 69
2969: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2970: LD_ADDR_VAR 0 2
2974: PUSH
2975: LD_INT 22
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 21
2987: PUSH
2988: LD_INT 2
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 58
2997: PUSH
2998: EMPTY
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: ST_TO_ADDR
// if not tmp then
3011: LD_VAR 0 1
3015: NOT
3016: IFFALSE 3020
// exit ;
3018: GO 3041
// ComExitBuilding ( tmp ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3029: LD_VAR 0 1
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: CALL_OW 227
// end ;
3041: PPOPN 2
3043: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3044: LD_EXP 10
3048: PUSH
3049: LD_INT 7
3051: PPUSH
3052: LD_INT 22
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 21
3064: PUSH
3065: LD_INT 1
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 3
3074: PUSH
3075: LD_INT 24
3077: PUSH
3078: LD_INT 600
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: EMPTY
3090: LIST
3091: LIST
3092: LIST
3093: PPUSH
3094: CALL_OW 70
3098: AND
3099: IFFALSE 3227
3101: GO 3103
3103: DISABLE
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
// begin enable ;
3108: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_INT 7
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 21
3129: PUSH
3130: LD_INT 1
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 24
3142: PUSH
3143: LD_INT 600
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 70
3163: ST_TO_ADDR
// if not tmp then
3164: LD_VAR 0 2
3168: NOT
3169: IFFALSE 3173
// exit ;
3171: GO 3227
// for i in tmp do
3173: LD_ADDR_VAR 0 1
3177: PUSH
3178: LD_VAR 0 2
3182: PUSH
3183: FOR_IN
3184: IFFALSE 3225
// if IsInUnit ( i ) then
3186: LD_VAR 0 1
3190: PPUSH
3191: CALL_OW 310
3195: IFFALSE 3208
// ComExitBuilding ( i ) else
3197: LD_VAR 0 1
3201: PPUSH
3202: CALL_OW 122
3206: GO 3223
// ComMoveXY ( i , 48 , 74 ) ;
3208: LD_VAR 0 1
3212: PPUSH
3213: LD_INT 48
3215: PPUSH
3216: LD_INT 74
3218: PPUSH
3219: CALL_OW 111
3223: GO 3183
3225: POP
3226: POP
// end ;
3227: PPOPN 2
3229: END
// every 6 6$00 do var i , un , tmp ;
3230: GO 3232
3232: DISABLE
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
3237: PPUSH
// begin tmp := [ ] ;
3238: LD_ADDR_VAR 0 3
3242: PUSH
3243: EMPTY
3244: ST_TO_ADDR
// uc_side := 1 ;
3245: LD_ADDR_OWVAR 20
3249: PUSH
3250: LD_INT 1
3252: ST_TO_ADDR
// uc_nation := 1 ;
3253: LD_ADDR_OWVAR 21
3257: PUSH
3258: LD_INT 1
3260: ST_TO_ADDR
// case Difficulty of 1 :
3261: LD_OWVAR 67
3265: PUSH
3266: LD_INT 1
3268: DOUBLE
3269: EQUAL
3270: IFTRUE 3274
3272: GO 3377
3274: POP
// begin wait ( 1 1$00 ) ;
3275: LD_INT 2100
3277: PPUSH
3278: CALL_OW 67
// for i := 1 to 2 do
3282: LD_ADDR_VAR 0 1
3286: PUSH
3287: DOUBLE
3288: LD_INT 1
3290: DEC
3291: ST_TO_ADDR
3292: LD_INT 2
3294: PUSH
3295: FOR_TO
3296: IFFALSE 3373
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3298: LD_INT 0
3300: PPUSH
3301: LD_INT 1
3303: PUSH
3304: LD_INT 4
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_VAR 0 1
3315: PUSH
3316: LD_INT 2
3318: MOD
3319: PUSH
3320: LD_INT 1
3322: PLUS
3323: ARRAY
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: CALL_OW 380
// un := CreateHuman ;
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_VAR 0 3
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: LD_VAR 0 2
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
// end ;
3371: GO 3295
3373: POP
3374: POP
// end ; 2 :
3375: GO 3771
3377: LD_INT 2
3379: DOUBLE
3380: EQUAL
3381: IFTRUE 3385
3383: GO 3519
3385: POP
// begin wait ( 0 0$30 ) ;
3386: LD_INT 1050
3388: PPUSH
3389: CALL_OW 67
// for i := 1 to 2 do
3393: LD_ADDR_VAR 0 1
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_INT 2
3405: PUSH
3406: FOR_TO
3407: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 2 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 3
3441: PPUSH
3442: LD_VAR 0 3
3446: PUSH
3447: LD_INT 1
3449: PLUS
3450: PPUSH
3451: LD_VAR 0 2
3455: PPUSH
3456: CALL_OW 1
3460: ST_TO_ADDR
// end ;
3461: GO 3406
3463: POP
3464: POP
// PrepareHuman ( false , 4 , 2 ) ;
3465: LD_INT 0
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 380
// un := CreateHuman ;
3478: LD_ADDR_VAR 0 2
3482: PUSH
3483: CALL_OW 44
3487: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3488: LD_ADDR_VAR 0 3
3492: PUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 1
3505: PLUS
3506: PPUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL_OW 1
3516: ST_TO_ADDR
// end ; 3 :
3517: GO 3771
3519: LD_INT 3
3521: DOUBLE
3522: EQUAL
3523: IFTRUE 3527
3525: GO 3770
3527: POP
// begin for i := 1 to 2 do
3528: LD_ADDR_VAR 0 1
3532: PUSH
3533: DOUBLE
3534: LD_INT 1
3536: DEC
3537: ST_TO_ADDR
3538: LD_INT 2
3540: PUSH
3541: FOR_TO
3542: IFFALSE 3598
// begin PrepareHuman ( false , 1 , 2 ) ;
3544: LD_INT 0
3546: PPUSH
3547: LD_INT 1
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 380
// un := CreateHuman ;
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: CALL_OW 44
3566: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_VAR 0 3
3581: PUSH
3582: LD_INT 1
3584: PLUS
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: CALL_OW 1
3595: ST_TO_ADDR
// end ;
3596: GO 3541
3598: POP
3599: POP
// PrepareHuman ( false , 4 , 2 ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3623: LD_ADDR_VAR 0 3
3627: PUSH
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_VAR 0 3
3637: PUSH
3638: LD_INT 1
3640: PLUS
3641: PPUSH
3642: LD_VAR 0 2
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 1
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 2
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 2
3669: PPUSH
3670: LD_INT 90
3672: PPUSH
3673: CALL 237 0 7
// un := CreateVehicle ;
3677: LD_ADDR_VAR 0 2
3681: PUSH
3682: CALL_OW 45
3686: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: LD_VAR 0 3
3696: PPUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: PLUS
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: CALL_OW 1
3715: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3716: LD_INT 0
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: LD_INT 2
3724: PPUSH
3725: CALL_OW 380
// un := CreateHuman ;
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: CALL_OW 44
3738: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: PLUS
3757: PPUSH
3758: LD_VAR 0 2
3762: PPUSH
3763: CALL_OW 1
3767: ST_TO_ADDR
// end ; end ;
3768: GO 3771
3770: POP
// for i := 1 to tmp do
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: DOUBLE
3777: LD_INT 1
3779: DEC
3780: ST_TO_ADDR
3781: LD_VAR 0 3
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3952
// begin SetDir ( tmp [ i ] , 1 ) ;
3789: LD_VAR 0 3
3793: PUSH
3794: LD_VAR 0 1
3798: ARRAY
3799: PPUSH
3800: LD_INT 1
3802: PPUSH
3803: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3807: LD_VAR 0 3
3811: PUSH
3812: LD_VAR 0 1
3816: ARRAY
3817: PPUSH
3818: CALL_OW 247
3822: PUSH
3823: LD_INT 1
3825: EQUAL
3826: IFFALSE 3854
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3828: LD_VAR 0 3
3832: PUSH
3833: LD_VAR 0 1
3837: ARRAY
3838: PPUSH
3839: LD_INT 28
3841: PPUSH
3842: LD_INT 52
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
3852: GO 3922
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 1
3863: ARRAY
3864: PPUSH
3865: LD_INT 28
3867: PPUSH
3868: LD_INT 52
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 48
// i := i + 1 ;
3878: LD_ADDR_VAR 0 1
3882: PUSH
3883: LD_VAR 0 1
3887: PUSH
3888: LD_INT 1
3890: PLUS
3891: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3892: LD_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: ARRAY
3902: PPUSH
3903: LD_VAR 0 3
3907: PUSH
3908: LD_VAR 0 1
3912: PUSH
3913: LD_INT 1
3915: MINUS
3916: ARRAY
3917: PPUSH
3918: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3922: LD_VAR 0 3
3926: PUSH
3927: LD_VAR 0 1
3931: ARRAY
3932: PPUSH
3933: LD_INT 43
3935: PPUSH
3936: LD_INT 56
3938: PPUSH
3939: CALL_OW 111
// wait ( 0 0$2 ) ;
3943: LD_INT 70
3945: PPUSH
3946: CALL_OW 67
// end ;
3950: GO 3786
3952: POP
3953: POP
// wait ( 0 0$2 ) ;
3954: LD_INT 70
3956: PPUSH
3957: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3961: LD_INT 7
3963: PPUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 70
3978: NOT
3979: IFFALSE 4177
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 35
3988: PPUSH
3989: LD_INT 24
3991: PPUSH
3992: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
3996: LD_ADDR_EXP 21
4000: PUSH
4001: LD_EXP 21
4005: PUSH
4006: LD_VAR 0 3
4010: PPUSH
4011: LD_INT 25
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 72
4025: UNION
4026: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4027: LD_INT 22
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_INT 30
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 69
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PPUSH
4060: CALL_OW 313
4064: PUSH
4065: LD_INT 6
4067: LESS
4068: IFFALSE 4127
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 25
4077: PUSH
4078: LD_INT 1
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 72
4089: PPUSH
4090: LD_INT 22
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: LD_INT 30
4102: PUSH
4103: LD_INT 4
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PPUSH
4114: CALL_OW 69
4118: PUSH
4119: LD_INT 1
4121: ARRAY
4122: PPUSH
4123: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 72
4146: IFFALSE 4175
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4148: LD_VAR 0 3
4152: PPUSH
4153: LD_INT 25
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PPUSH
4163: CALL_OW 72
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: CALL_OW 180
// end else
4175: GO 4452
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4177: LD_ADDR_VAR 0 3
4181: PUSH
4182: LD_VAR 0 3
4186: PUSH
4187: LD_INT 6
4189: PPUSH
4190: LD_INT 22
4192: PUSH
4193: LD_INT 1
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: UNION
4205: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4206: LD_VAR 0 3
4210: PPUSH
4211: LD_INT 45
4213: PPUSH
4214: LD_INT 54
4216: PPUSH
4217: CALL_OW 111
// wait ( 0 0$3 ) ;
4221: LD_INT 105
4223: PPUSH
4224: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4228: LD_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PPUSH
4248: CALL_OW 72
4252: DIFF
4253: PPUSH
4254: LD_INT 35
4256: PPUSH
4257: LD_INT 24
4259: PPUSH
4260: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: PPUSH
4284: LD_INT 42
4286: PPUSH
4287: LD_INT 49
4289: PPUSH
4290: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4294: LD_INT 35
4296: PPUSH
4297: CALL_OW 67
// for i in tmp do
4301: LD_ADDR_VAR 0 1
4305: PUSH
4306: LD_VAR 0 3
4310: PUSH
4311: FOR_IN
4312: IFFALSE 4443
// if IsDead ( i ) then
4314: LD_VAR 0 1
4318: PPUSH
4319: CALL_OW 301
4323: IFFALSE 4343
// tmp := tmp diff i else
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: LD_VAR 0 3
4334: PUSH
4335: LD_VAR 0 1
4339: DIFF
4340: ST_TO_ADDR
4341: GO 4441
// if GetClass ( i ) = 1 then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 257
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: IFFALSE 4441
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4358: LD_VAR 0 1
4362: PPUSH
4363: CALL_OW 256
4367: PUSH
4368: LD_INT 600
4370: LESS
4371: PUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 42
4379: PPUSH
4380: LD_INT 49
4382: PPUSH
4383: CALL_OW 297
4387: PUSH
4388: LD_INT 6
4390: GREATER
4391: AND
4392: IFFALSE 4411
// ComMoveXY ( i , 42 , 49 ) else
4394: LD_VAR 0 1
4398: PPUSH
4399: LD_INT 42
4401: PPUSH
4402: LD_INT 49
4404: PPUSH
4405: CALL_OW 111
4409: GO 4441
// if GetLives ( i ) = 1000 then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 256
4420: PUSH
4421: LD_INT 1000
4423: EQUAL
4424: IFFALSE 4441
// ComAgressiveMove ( i , 36 , 25 ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_INT 36
4433: PPUSH
4434: LD_INT 25
4436: PPUSH
4437: CALL_OW 114
// end ;
4441: GO 4311
4443: POP
4444: POP
// until not tmp ;
4445: LD_VAR 0 3
4449: NOT
4450: IFFALSE 4294
// end ; end ;
4452: PPOPN 3
4454: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4455: LD_INT 7
4457: PPUSH
4458: LD_INT 22
4460: PUSH
4461: LD_INT 2
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 70
4472: PUSH
4473: LD_EXP 14
4477: NOT
4478: AND
4479: IFFALSE 4637
4481: GO 4483
4483: DISABLE
4484: LD_INT 0
4486: PPUSH
4487: PPUSH
4488: PPUSH
// begin for i := 1 to 2 do
4489: LD_ADDR_VAR 0 1
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 2
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4635
// begin wait ( 0 0$3 ) ;
4505: LD_INT 105
4507: PPUSH
4508: CALL_OW 67
// uc_side := 1 ;
4512: LD_ADDR_OWVAR 20
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// uc_nation := 1 ;
4520: LD_ADDR_OWVAR 21
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4528: LD_INT 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: LD_INT 90
4548: PPUSH
4549: CALL 237 0 7
// veh := CreateVehicle ;
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: CALL_OW 45
4562: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_INT 29
4570: PPUSH
4571: LD_INT 52
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4581: LD_INT 0
4583: PPUSH
4584: LD_INT 3
4586: PPUSH
4587: LD_INT 3
4589: PPUSH
4590: CALL_OW 380
// un := CreateHuman ;
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: CALL_OW 44
4603: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4604: LD_VAR 0 2
4608: PPUSH
4609: LD_VAR 0 3
4613: PPUSH
4614: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4618: LD_VAR 0 3
4622: PPUSH
4623: LD_INT 36
4625: PPUSH
4626: LD_INT 25
4628: PPUSH
4629: CALL_OW 114
// end ;
4633: GO 4502
4635: POP
4636: POP
// end ; end_of_file
4637: PPOPN 3
4639: END
// export function Action ; var i , tmp ; begin
4640: LD_INT 0
4642: PPUSH
4643: PPUSH
4644: PPUSH
// InGameOn ;
4645: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4649: LD_INT 2
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4659: LD_EXP 23
4663: PPUSH
4664: LD_INT 78
4666: PPUSH
4667: LD_INT 61
4669: PPUSH
4670: CALL_OW 111
// if Mike then
4674: LD_EXP 25
4678: IFFALSE 4695
// ComMoveXY ( Mike , 80 , 66 ) ;
4680: LD_EXP 25
4684: PPUSH
4685: LD_INT 80
4687: PPUSH
4688: LD_INT 66
4690: PPUSH
4691: CALL_OW 111
// if Givi then
4695: LD_EXP 24
4699: IFFALSE 4716
// ComMoveXY ( Givi , 82 , 66 ) ;
4701: LD_EXP 24
4705: PPUSH
4706: LD_INT 82
4708: PPUSH
4709: LD_INT 66
4711: PPUSH
4712: CALL_OW 111
// if Kamil then
4716: LD_EXP 26
4720: IFFALSE 4737
// ComMoveXY ( Kamil , 82 , 67 ) ;
4722: LD_EXP 26
4726: PPUSH
4727: LD_INT 82
4729: PPUSH
4730: LD_INT 67
4732: PPUSH
4733: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4737: LD_EXP 23
4741: PPUSH
4742: CALL_OW 87
// wait ( 0 0$2 ) ;
4746: LD_INT 70
4748: PPUSH
4749: CALL_OW 67
// if Givi and Mike then
4753: LD_EXP 24
4757: PUSH
4758: LD_EXP 25
4762: AND
4763: IFFALSE 5297
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4765: LD_EXP 24
4769: PUSH
4770: LD_EXP 25
4774: PUSH
4775: LD_EXP 26
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: PPUSH
4785: LD_EXP 23
4789: PPUSH
4790: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4794: LD_EXP 23
4798: PPUSH
4799: LD_EXP 24
4803: PPUSH
4804: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4808: LD_EXP 24
4812: PPUSH
4813: LD_STRING DG-1-start
4815: PPUSH
4816: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4820: LD_EXP 23
4824: PPUSH
4825: LD_STRING DH-1-start
4827: PPUSH
4828: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4832: LD_EXP 25
4836: PPUSH
4837: LD_EXP 23
4841: PPUSH
4842: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4846: LD_EXP 23
4850: PPUSH
4851: LD_EXP 25
4855: PPUSH
4856: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4860: LD_EXP 25
4864: PPUSH
4865: LD_STRING DM-1-start
4867: PPUSH
4868: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_STRING DH-2-start
4879: PPUSH
4880: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4884: LD_EXP 25
4888: PPUSH
4889: LD_STRING DM-2-start
4891: PPUSH
4892: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4896: LD_EXP 24
4900: PPUSH
4901: LD_STRING DG-2-start
4903: PPUSH
4904: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4908: LD_EXP 25
4912: PPUSH
4913: LD_EXP 24
4917: PPUSH
4918: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4922: LD_EXP 23
4926: PPUSH
4927: LD_EXP 25
4931: PPUSH
4932: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4936: LD_EXP 25
4940: PPUSH
4941: LD_STRING DM-3-start
4943: PPUSH
4944: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4948: LD_EXP 23
4952: PPUSH
4953: LD_STRING DH-3-start
4955: PPUSH
4956: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4960: LD_EXP 23
4964: PUSH
4965: LD_EXP 25
4969: PUSH
4970: LD_EXP 24
4974: PUSH
4975: LD_EXP 26
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: PPUSH
4986: LD_INT 84
4988: PPUSH
4989: LD_INT 51
4991: PPUSH
4992: CALL_OW 111
// wait ( 0 0$2 ) ;
4996: LD_INT 70
4998: PPUSH
4999: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5003: LD_EXP 24
5007: PPUSH
5008: LD_STRING DG-3-start
5010: PPUSH
5011: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5015: LD_EXP 23
5019: PUSH
5020: LD_EXP 25
5024: PUSH
5025: LD_EXP 24
5029: PUSH
5030: LD_EXP 26
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PPUSH
5041: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5045: LD_EXP 23
5049: PPUSH
5050: LD_EXP 24
5054: PPUSH
5055: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5059: LD_EXP 24
5063: PUSH
5064: LD_EXP 25
5068: PUSH
5069: LD_EXP 26
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: PPUSH
5079: LD_EXP 23
5083: PPUSH
5084: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5088: LD_EXP 23
5092: PPUSH
5093: LD_STRING DH-4-start
5095: PPUSH
5096: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5100: LD_EXP 24
5104: PPUSH
5105: LD_STRING DG-4-start
5107: PPUSH
5108: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5112: LD_EXP 23
5116: PPUSH
5117: LD_STRING DH-5-start
5119: PPUSH
5120: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5124: LD_EXP 24
5128: PPUSH
5129: LD_STRING DG-5-start
5131: PPUSH
5132: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5136: LD_EXP 23
5140: PPUSH
5141: LD_STRING DH-6-start
5143: PPUSH
5144: CALL_OW 88
// if not Kamil then
5148: LD_EXP 26
5152: NOT
5153: IFFALSE 5204
// begin Say ( Mike , DM-6-start ) ;
5155: LD_EXP 25
5159: PPUSH
5160: LD_STRING DM-6-start
5162: PPUSH
5163: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5167: LD_EXP 23
5171: PUSH
5172: LD_EXP 24
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: LD_EXP 25
5185: PPUSH
5186: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5190: LD_EXP 24
5194: PPUSH
5195: LD_STRING DG-6-start
5197: PPUSH
5198: CALL_OW 88
// end else
5202: GO 5283
// begin Say ( Mike , DM-6-start-a ) ;
5204: LD_EXP 25
5208: PPUSH
5209: LD_STRING DM-6-start-a
5211: PPUSH
5212: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5216: LD_EXP 23
5220: PUSH
5221: LD_EXP 24
5225: PUSH
5226: LD_EXP 25
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_EXP 26
5240: PPUSH
5241: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5245: LD_EXP 26
5249: PPUSH
5250: LD_EXP 25
5254: PPUSH
5255: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5259: LD_EXP 26
5263: PPUSH
5264: LD_STRING DKam-7-start-a
5266: PPUSH
5267: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5271: LD_EXP 24
5275: PPUSH
5276: LD_STRING DG-6-start-a
5278: PPUSH
5279: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5283: LD_EXP 23
5287: PPUSH
5288: LD_STRING DH-7-start
5290: PPUSH
5291: CALL_OW 88
// end else
5295: GO 6019
// if not Mike and Givi then
5297: LD_EXP 25
5301: NOT
5302: PUSH
5303: LD_EXP 24
5307: AND
5308: IFFALSE 5653
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5310: LD_EXP 24
5314: PUSH
5315: LD_EXP 26
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PPUSH
5324: LD_EXP 23
5328: PPUSH
5329: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5333: LD_EXP 23
5337: PPUSH
5338: LD_EXP 24
5342: PPUSH
5343: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5347: LD_EXP 24
5351: PPUSH
5352: LD_STRING DG-1-start-c
5354: PPUSH
5355: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5359: LD_EXP 23
5363: PPUSH
5364: LD_STRING DH-1-start-c
5366: PPUSH
5367: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5371: LD_EXP 24
5375: PPUSH
5376: LD_STRING DG-2-start-c
5378: PPUSH
5379: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5383: LD_EXP 23
5387: PPUSH
5388: LD_STRING DH-2-start-c
5390: PPUSH
5391: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5395: LD_EXP 24
5399: PPUSH
5400: LD_STRING DG-3-start-c
5402: PPUSH
5403: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5407: LD_EXP 23
5411: PPUSH
5412: LD_INT 83
5414: PPUSH
5415: LD_INT 56
5417: PPUSH
5418: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_INT 83
5429: PPUSH
5430: LD_INT 59
5432: PPUSH
5433: CALL_OW 111
// if Kamil then
5437: LD_EXP 26
5441: IFFALSE 5458
// ComMoveXY ( Kamil , 80 , 58 ) ;
5443: LD_EXP 26
5447: PPUSH
5448: LD_INT 80
5450: PPUSH
5451: LD_INT 58
5453: PPUSH
5454: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_EXP 24
5467: PPUSH
5468: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5472: LD_EXP 24
5476: PUSH
5477: LD_EXP 26
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: LD_EXP 23
5490: PPUSH
5491: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5495: LD_EXP 23
5499: PPUSH
5500: LD_STRING DH-3-start-c
5502: PPUSH
5503: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5507: LD_EXP 24
5511: PPUSH
5512: LD_STRING DG-4-start-c
5514: PPUSH
5515: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5519: LD_EXP 23
5523: PPUSH
5524: LD_STRING DH-5-start-c
5526: PPUSH
5527: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5531: LD_EXP 24
5535: PPUSH
5536: LD_STRING DG-5-start-c
5538: PPUSH
5539: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5543: LD_EXP 23
5547: PPUSH
5548: LD_STRING DH-6-start-c
5550: PPUSH
5551: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5555: LD_EXP 24
5559: PPUSH
5560: LD_STRING DG-6-start-c
5562: PPUSH
5563: CALL_OW 88
// if Kamil then
5567: LD_EXP 26
5571: IFFALSE 5627
// begin ComTurnUnit ( Kamil , Heike ) ;
5573: LD_EXP 26
5577: PPUSH
5578: LD_EXP 23
5582: PPUSH
5583: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5587: LD_EXP 26
5591: PPUSH
5592: LD_STRING DKam-1-start-c
5594: PPUSH
5595: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5599: LD_EXP 24
5603: PPUSH
5604: LD_EXP 26
5608: PPUSH
5609: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5613: LD_EXP 24
5617: PPUSH
5618: LD_STRING DG-7-start-c
5620: PPUSH
5621: CALL_OW 88
// end else
5625: GO 5651
// begin Say ( Givi , DG-8-start-c ) ;
5627: LD_EXP 24
5631: PPUSH
5632: LD_STRING DG-8-start-c
5634: PPUSH
5635: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5639: LD_EXP 23
5643: PPUSH
5644: LD_STRING DH-7-start-c
5646: PPUSH
5647: CALL_OW 88
// end ; end else
5651: GO 6019
// if not Givi and Mike then
5653: LD_EXP 24
5657: NOT
5658: PUSH
5659: LD_EXP 25
5663: AND
5664: IFFALSE 5923
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5666: LD_EXP 25
5670: PUSH
5671: LD_EXP 26
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_EXP 23
5684: PPUSH
5685: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5689: LD_EXP 23
5693: PPUSH
5694: LD_EXP 25
5698: PPUSH
5699: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5703: LD_EXP 25
5707: PPUSH
5708: LD_STRING DM-1-start-b
5710: PPUSH
5711: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5715: LD_EXP 23
5719: PPUSH
5720: LD_STRING DH-1-start-b
5722: PPUSH
5723: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5727: LD_EXP 25
5731: PPUSH
5732: LD_STRING DM-2-start-b
5734: PPUSH
5735: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5739: LD_EXP 23
5743: PPUSH
5744: LD_STRING DH-2-start-b
5746: PPUSH
5747: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5751: LD_EXP 25
5755: PPUSH
5756: LD_STRING DM-3-start-b
5758: PPUSH
5759: CALL_OW 88
// if Kamil then
5763: LD_EXP 26
5767: IFFALSE 5784
// ComMoveXY ( Kamil , 80 , 58 ) ;
5769: LD_EXP 26
5773: PPUSH
5774: LD_INT 80
5776: PPUSH
5777: LD_INT 58
5779: PPUSH
5780: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5784: LD_EXP 23
5788: PPUSH
5789: LD_INT 83
5791: PPUSH
5792: LD_INT 56
5794: PPUSH
5795: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5799: LD_EXP 25
5803: PPUSH
5804: LD_INT 83
5806: PPUSH
5807: LD_INT 59
5809: PPUSH
5810: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5814: LD_EXP 23
5818: PPUSH
5819: LD_EXP 25
5823: PPUSH
5824: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5828: LD_EXP 26
5832: PUSH
5833: LD_EXP 25
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PPUSH
5842: LD_EXP 23
5846: PPUSH
5847: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5851: LD_EXP 23
5855: PPUSH
5856: LD_STRING DH-3-start-b
5858: PPUSH
5859: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5863: LD_EXP 25
5867: PPUSH
5868: LD_STRING DM-4-start-b
5870: PPUSH
5871: CALL_OW 88
// if Kamil then
5875: LD_EXP 26
5879: IFFALSE 5909
// begin ComTurnUnit ( Kamil , Heike ) ;
5881: LD_EXP 26
5885: PPUSH
5886: LD_EXP 23
5890: PPUSH
5891: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5895: LD_EXP 26
5899: PPUSH
5900: LD_STRING DKam-1-start-c
5902: PPUSH
5903: CALL_OW 88
// end else
5907: GO 5921
// begin Say ( Mike , DM-5-start-b ) ;
5909: LD_EXP 25
5913: PPUSH
5914: LD_STRING DM-5-start-b
5916: PPUSH
5917: CALL_OW 88
// end ; end else
5921: GO 6019
// if Kamil then
5923: LD_EXP 26
5927: IFFALSE 6007
// begin AddComTurnUnit ( Heike , Kamil ) ;
5929: LD_EXP 23
5933: PPUSH
5934: LD_EXP 26
5938: PPUSH
5939: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5943: LD_EXP 26
5947: PPUSH
5948: LD_EXP 23
5952: PPUSH
5953: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5957: LD_EXP 23
5961: PPUSH
5962: LD_STRING DH-1-start-f
5964: PPUSH
5965: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5969: LD_EXP 26
5973: PPUSH
5974: LD_STRING DKam-1-start-f
5976: PPUSH
5977: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5981: LD_EXP 23
5985: PPUSH
5986: LD_STRING DH-2-start-f
5988: PPUSH
5989: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5993: LD_EXP 26
5997: PPUSH
5998: LD_STRING DKam-2-start-f
6000: PPUSH
6001: CALL_OW 88
// end else
6005: GO 6019
// begin Say ( Heike , DH-1-start-d ) ;
6007: LD_EXP 23
6011: PPUSH
6012: LD_STRING DH-1-start-d
6014: PPUSH
6015: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6019: LD_EXP 23
6023: PUSH
6024: LD_EXP 24
6028: PUSH
6029: LD_EXP 25
6033: PUSH
6034: LD_EXP 26
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 139
// InGameOff ;
6049: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6053: LD_STRING OEast
6055: PPUSH
6056: CALL_OW 337
// SaveForQuickRestart ;
6060: CALL_OW 22
// wait ( 0 0$20 ) ;
6064: LD_INT 700
6066: PPUSH
6067: CALL_OW 67
// SendSciToForest ;
6071: CALL 1479 0 0
// if Difficulty = 1 then
6075: LD_OWVAR 67
6079: PUSH
6080: LD_INT 1
6082: EQUAL
6083: IFFALSE 6087
// exit ;
6085: GO 6204
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6087: LD_INT 10500
6089: PUSH
6090: LD_INT 5250
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: PUSH
6102: LD_INT 1
6104: MINUS
6105: ARRAY
6106: PPUSH
6107: CALL_OW 67
// if usAlert then
6111: LD_EXP 10
6115: IFFALSE 6119
// exit ;
6117: GO 6204
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 22
6126: PUSH
6127: LD_INT 1
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 25
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: ST_TO_ADDR
// if not tmp then
6153: LD_VAR 0 3
6157: NOT
6158: IFFALSE 6162
// exit ;
6160: GO 6204
// ComExitBuilding ( tmp ) ;
6162: LD_VAR 0 3
6166: PPUSH
6167: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6171: LD_VAR 0 3
6175: PPUSH
6176: LD_INT 31
6178: PPUSH
6179: LD_INT 40
6181: PPUSH
6182: LD_INT 13
6184: PPUSH
6185: LD_INT 3
6187: PPUSH
6188: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6192: LD_VAR 0 3
6196: PPUSH
6197: LD_INT 1
6199: PPUSH
6200: CALL_OW 180
// end ;
6204: LD_VAR 0 1
6208: RET
// every 3 3$00 do
6209: GO 6211
6211: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6212: LD_INT 1
6214: PPUSH
6215: LD_INT 570
6217: PPUSH
6218: LD_INT 350
6220: PPUSH
6221: CALL_OW 550
// wait ( 2 2$40 ) ;
6225: LD_INT 5600
6227: PPUSH
6228: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6232: LD_INT 0
6234: PPUSH
6235: LD_INT 570
6237: PPUSH
6238: LD_INT 350
6240: PPUSH
6241: CALL_OW 550
// end ;
6245: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6246: LD_EXP 4
6250: NOT
6251: PUSH
6252: LD_INT 2
6254: PPUSH
6255: LD_EXP 27
6259: PPUSH
6260: CALL_OW 292
6264: AND
6265: IFFALSE 7171
6267: GO 6269
6269: DISABLE
6270: LD_INT 0
6272: PPUSH
6273: PPUSH
// begin aviradzeSpotted := true ;
6274: LD_ADDR_EXP 4
6278: PUSH
6279: LD_INT 1
6281: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6282: LD_ADDR_VAR 0 2
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 21
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6316: LD_EXP 23
6320: PPUSH
6321: LD_EXP 27
6325: PPUSH
6326: CALL_OW 250
6330: PPUSH
6331: LD_EXP 27
6335: PPUSH
6336: CALL_OW 251
6340: PPUSH
6341: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6345: LD_INT 35
6347: PPUSH
6348: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6352: LD_EXP 23
6356: PPUSH
6357: LD_EXP 27
6361: PPUSH
6362: CALL_OW 296
6366: PUSH
6367: LD_INT 16
6369: LESS
6370: IFFALSE 6345
// InGameOn ;
6372: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6376: LD_INT 5
6378: PPUSH
6379: LD_INT 2
6381: PPUSH
6382: CALL_OW 343
// if pepAmount > 2 then
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: GREATER
6394: IFFALSE 6410
// Say ( Heike , DH-1-spot ) else
6396: LD_EXP 23
6400: PPUSH
6401: LD_STRING DH-1-spot
6403: PPUSH
6404: CALL_OW 88
6408: GO 6422
// Say ( Heike , DH-1-spot-d ) ;
6410: LD_EXP 23
6414: PPUSH
6415: LD_STRING DH-1-spot-d
6417: PPUSH
6418: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6422: LD_EXP 23
6426: PPUSH
6427: LD_EXP 27
6431: PPUSH
6432: CALL_OW 250
6436: PPUSH
6437: LD_EXP 27
6441: PPUSH
6442: CALL_OW 251
6446: PPUSH
6447: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_EXP 26
6460: PUSH
6461: LD_EXP 25
6465: PUSH
6466: LD_EXP 24
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6516
// if GetDistUnits ( i , Aviradze ) > 7 then
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_EXP 27
6488: PPUSH
6489: CALL_OW 296
6493: PUSH
6494: LD_INT 7
6496: GREATER
6497: IFFALSE 6514
// ComMoveXY ( i , 102 , 40 ) ;
6499: LD_VAR 0 1
6503: PPUSH
6504: LD_INT 102
6506: PPUSH
6507: LD_INT 40
6509: PPUSH
6510: CALL_OW 111
6514: GO 6476
6516: POP
6517: POP
// repeat wait ( 0 0$1 ) ;
6518: LD_INT 35
6520: PPUSH
6521: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6525: LD_EXP 23
6529: PPUSH
6530: LD_EXP 27
6534: PPUSH
6535: CALL_OW 296
6539: PUSH
6540: LD_INT 6
6542: LESS
6543: IFFALSE 6518
// ComTurnUnit ( Heike , Aviradze ) ;
6545: LD_EXP 23
6549: PPUSH
6550: LD_EXP 27
6554: PPUSH
6555: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6559: LD_EXP 27
6563: PUSH
6564: LD_EXP 29
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: PPUSH
6579: LD_EXP 23
6583: PPUSH
6584: CALL_OW 119
// if pepAmount > 1 then
6588: LD_VAR 0 2
6592: PUSH
6593: LD_INT 1
6595: GREATER
6596: IFFALSE 6648
// begin wait ( 0 0$2 ) ;
6598: LD_INT 70
6600: PPUSH
6601: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6605: LD_EXP 26
6609: PUSH
6610: LD_EXP 25
6614: PUSH
6615: LD_EXP 24
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6634: LD_EXP 23
6638: PPUSH
6639: LD_STRING DH-2-spot
6641: PPUSH
6642: CALL_OW 88
// end else
6646: GO 6660
// Say ( Heike , DH-2-spot-d ) ;
6648: LD_EXP 23
6652: PPUSH
6653: LD_STRING DH-2-spot-d
6655: PPUSH
6656: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6660: LD_EXP 27
6664: PPUSH
6665: LD_STRING DA-2-spot
6667: PPUSH
6668: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6672: LD_EXP 23
6676: PPUSH
6677: LD_STRING DH-3-spot
6679: PPUSH
6680: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6684: LD_EXP 28
6688: PPUSH
6689: LD_EXP 23
6693: PPUSH
6694: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6698: LD_EXP 23
6702: PPUSH
6703: LD_EXP 28
6707: PPUSH
6708: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6712: LD_INT 10
6714: PPUSH
6715: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6719: LD_EXP 28
6723: PPUSH
6724: LD_STRING DK-3-spot
6726: PPUSH
6727: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6731: LD_EXP 28
6735: PPUSH
6736: LD_EXP 23
6740: PPUSH
6741: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6745: LD_EXP 23
6749: PPUSH
6750: LD_STRING DH-4-spot
6752: PPUSH
6753: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6757: LD_INT 10
6759: PPUSH
6760: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6764: LD_EXP 23
6768: PPUSH
6769: LD_EXP 27
6773: PPUSH
6774: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6778: LD_EXP 27
6782: PPUSH
6783: LD_STRING DA-4-spot
6785: PPUSH
6786: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6790: LD_EXP 28
6794: PPUSH
6795: LD_EXP 27
6799: PPUSH
6800: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6804: LD_EXP 28
6808: PPUSH
6809: LD_STRING DK-4-spot
6811: PPUSH
6812: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6816: LD_EXP 27
6820: PPUSH
6821: LD_EXP 28
6825: PPUSH
6826: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6830: LD_EXP 27
6834: PPUSH
6835: LD_STRING DA-5-spot
6837: PPUSH
6838: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6842: LD_EXP 28
6846: PPUSH
6847: LD_STRING DK-5-spot
6849: PPUSH
6850: CALL_OW 88
// if pepAmount = 1 then
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 1
6861: EQUAL
6862: IFFALSE 6876
// Say ( Heike , DH-5-spot-f ) ;
6864: LD_EXP 23
6868: PPUSH
6869: LD_STRING DH-5-spot-f
6871: PPUSH
6872: CALL_OW 88
// if pepAmount < 3 then
6876: LD_VAR 0 2
6880: PUSH
6881: LD_INT 3
6883: LESS
6884: IFFALSE 6900
// Say ( Aviradze , DA-6-spot-f ) else
6886: LD_EXP 27
6890: PPUSH
6891: LD_STRING DA-6-spot-f
6893: PPUSH
6894: CALL_OW 88
6898: GO 6936
// if pepAmount < 4 then
6900: LD_VAR 0 2
6904: PUSH
6905: LD_INT 4
6907: LESS
6908: IFFALSE 6924
// Say ( Aviradze , DA-6-spot-c ) else
6910: LD_EXP 27
6914: PPUSH
6915: LD_STRING DA-6-spot-c
6917: PPUSH
6918: CALL_OW 88
6922: GO 6936
// Say ( Aviradze , DA-6-spot ) ;
6924: LD_EXP 27
6928: PPUSH
6929: LD_STRING DA-6-spot
6931: PPUSH
6932: CALL_OW 88
// if Kamil then
6936: LD_EXP 26
6940: IFFALSE 6954
// Say ( Kamil , DKam-6-spot ) ;
6942: LD_EXP 26
6946: PPUSH
6947: LD_STRING DKam-6-spot
6949: PPUSH
6950: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6954: LD_EXP 28
6958: PPUSH
6959: LD_STRING DK-6-spot
6961: PPUSH
6962: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6966: LD_EXP 27
6970: PPUSH
6971: LD_EXP 23
6975: PPUSH
6976: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6980: LD_EXP 27
6984: PPUSH
6985: LD_STRING DA-7-spot
6987: PPUSH
6988: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6992: LD_EXP 23
6996: PPUSH
6997: LD_STRING DH-7-spot
6999: PPUSH
7000: CALL_OW 88
// if sciCounterKill >= 3 then
7004: LD_EXP 9
7008: PUSH
7009: LD_INT 3
7011: GREATEREQUAL
7012: IFFALSE 7038
// begin Say ( Heike , DH-7-spot-a ) ;
7014: LD_EXP 23
7018: PPUSH
7019: LD_STRING DH-7-spot-a
7021: PPUSH
7022: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7026: LD_EXP 27
7030: PPUSH
7031: LD_STRING DA-8-spot-a
7033: PPUSH
7034: CALL_OW 88
// end ; InGameOff ;
7038: CALL_OW 9
// if sciCounterKill < 3 then
7042: LD_EXP 9
7046: PUSH
7047: LD_INT 3
7049: LESS
7050: IFFALSE 7109
// begin SetSide ( Kaia , 2 ) ;
7052: LD_EXP 28
7056: PPUSH
7057: LD_INT 2
7059: PPUSH
7060: CALL_OW 235
// ComFree ( Kaia ) ;
7064: LD_EXP 28
7068: PPUSH
7069: CALL_OW 139
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7100
// begin ComHold ( Kamil ) ;
7079: LD_EXP 26
7083: PPUSH
7084: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7088: LD_EXP 26
7092: PPUSH
7093: LD_INT 5
7095: PPUSH
7096: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7100: LD_STRING OSci
7102: PPUSH
7103: CALL_OW 337
// end else
7107: GO 7171
// begin aviradzeQuestDone := true ;
7109: LD_ADDR_EXP 8
7113: PUSH
7114: LD_INT 1
7116: ST_TO_ADDR
// attackDeltaAllowed := true ;
7117: LD_ADDR_EXP 14
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7125: LD_STRING ODelta2
7127: PPUSH
7128: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7132: LD_ADDR_VAR 0 1
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 5
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PUSH
7152: FOR_IN
7153: IFFALSE 7169
// SetSide ( i , 2 ) ;
7155: LD_VAR 0 1
7159: PPUSH
7160: LD_INT 2
7162: PPUSH
7163: CALL_OW 235
7167: GO 7152
7169: POP
7170: POP
// end ; end ;
7171: PPOPN 2
7173: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7174: LD_EXP 7
7178: NOT
7179: PUSH
7180: LD_EXP 22
7184: PPUSH
7185: LD_EXP 23
7189: PPUSH
7190: CALL_OW 74
7194: PPUSH
7195: LD_EXP 23
7199: PPUSH
7200: CALL_OW 296
7204: PUSH
7205: LD_INT 8
7207: LESS
7208: AND
7209: PUSH
7210: LD_INT 2
7212: PPUSH
7213: LD_EXP 22
7217: PPUSH
7218: LD_EXP 23
7222: PPUSH
7223: CALL_OW 74
7227: PPUSH
7228: CALL_OW 292
7232: AND
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 21
7246: PUSH
7247: LD_INT 1
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: PUSH
7263: LD_INT 1
7265: GREATER
7266: AND
7267: PUSH
7268: LD_EXP 4
7272: NOT
7273: AND
7274: IFFALSE 7318
7276: GO 7278
7278: DISABLE
// begin sciSpotted := true ;
7279: LD_ADDR_EXP 7
7283: PUSH
7284: LD_INT 1
7286: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7287: LD_EXP 22
7291: PPUSH
7292: LD_EXP 23
7296: PPUSH
7297: CALL_OW 74
7301: PPUSH
7302: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7306: LD_EXP 23
7310: PPUSH
7311: LD_STRING DH-1-sci
7313: PPUSH
7314: CALL_OW 88
// end ;
7318: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7319: LD_EXP 4
7323: PUSH
7324: LD_EXP 7
7328: NOT
7329: AND
7330: PUSH
7331: LD_INT 2
7333: PPUSH
7334: LD_EXP 22
7338: PPUSH
7339: LD_EXP 23
7343: PPUSH
7344: CALL_OW 74
7348: PPUSH
7349: CALL_OW 292
7353: AND
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 21
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: PUSH
7384: LD_INT 1
7386: GREATER
7387: AND
7388: PUSH
7389: LD_EXP 4
7393: AND
7394: PUSH
7395: LD_EXP 8
7399: NOT
7400: AND
7401: IFFALSE 7542
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin sciSpotted := true ;
7409: LD_ADDR_EXP 7
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7417: LD_ADDR_VAR 0 1
7421: PUSH
7422: LD_EXP 22
7426: PPUSH
7427: LD_EXP 23
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// DialogueOn ;
7437: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7441: LD_VAR 0 1
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: LD_INT 3
7466: NEG
7467: PPUSH
7468: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7481: LD_EXP 23
7485: PPUSH
7486: LD_STRING DH-1-sci-a
7488: PPUSH
7489: CALL_OW 88
// if Mike then
7493: LD_EXP 25
7497: IFFALSE 7511
// Say ( Mike , DM-1-sci-a ) ;
7499: LD_EXP 25
7503: PPUSH
7504: LD_STRING DM-1-sci-a
7506: PPUSH
7507: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 251
7530: PPUSH
7531: LD_INT 2
7533: PPUSH
7534: CALL_OW 331
// DialogueOff ;
7538: CALL_OW 7
// end ;
7542: PPOPN 1
7544: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7545: LD_EXP 10
7549: PUSH
7550: LD_EXP 19
7554: PPUSH
7555: CALL_OW 256
7559: PUSH
7560: LD_INT 1000
7562: LESS
7563: PUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 256
7571: PUSH
7572: LD_INT 999
7574: LESS
7575: OR
7576: AND
7577: IFFALSE 7833
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 58
7612: PUSH
7613: EMPTY
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PPUSH
7621: CALL_OW 69
7625: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7626: LD_VAR 0 1
7630: PUSH
7631: LD_EXP 19
7635: PPUSH
7636: CALL_OW 302
7640: AND
7641: IFFALSE 7683
// begin if IsInUnit ( Gladstone ) then
7643: LD_EXP 19
7647: PPUSH
7648: CALL_OW 310
7652: IFFALSE 7663
// ComExitBuilding ( Gladstone ) ;
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7663: LD_EXP 19
7667: PPUSH
7668: LD_VAR 0 1
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PPUSH
7677: CALL_OW 180
// end else
7681: GO 7703
// if IsInUnit ( Gladstone ) then
7683: LD_EXP 19
7687: PPUSH
7688: CALL_OW 310
7692: IFFALSE 7703
// ComExitBuilding ( Gladstone ) ;
7694: LD_EXP 19
7698: PPUSH
7699: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7703: LD_EXP 19
7707: PPUSH
7708: LD_INT 27
7710: PPUSH
7711: LD_INT 51
7713: PPUSH
7714: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7718: LD_EXP 19
7722: PPUSH
7723: LD_STRING D8-Glad-2
7725: PPUSH
7726: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7730: LD_INT 35
7732: PPUSH
7733: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7737: LD_EXP 19
7741: PPUSH
7742: LD_INT 27
7744: PPUSH
7745: LD_INT 51
7747: PPUSH
7748: CALL_OW 307
7752: PUSH
7753: LD_EXP 19
7757: PPUSH
7758: CALL_OW 310
7762: PPUSH
7763: LD_INT 27
7765: PPUSH
7766: LD_INT 51
7768: PPUSH
7769: CALL_OW 307
7773: OR
7774: PUSH
7775: LD_EXP 19
7779: PPUSH
7780: CALL_OW 301
7784: OR
7785: IFFALSE 7730
// if IsDead ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 301
7796: IFFALSE 7800
// exit ;
7798: GO 7833
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 428
7810: PPUSH
7811: CALL_OW 64
// gladstoneEscaped := true ;
7815: LD_ADDR_EXP 12
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7823: LD_INT 1
7825: PPUSH
7826: LD_STRING 02_GladstoneEscaped
7828: PPUSH
7829: CALL_OW 39
// end ;
7833: PPOPN 1
7835: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7836: LD_EXP 4
7840: PUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_INT 3
7848: GREATEREQUAL
7849: PUSH
7850: LD_EXP 22
7854: NOT
7855: OR
7856: AND
7857: PUSH
7858: LD_EXP 8
7862: NOT
7863: AND
7864: IFFALSE 7907
7866: GO 7868
7868: DISABLE
// begin aviradzeQuestDone := true ;
7869: LD_ADDR_EXP 8
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7877: LD_EXP 23
7881: PPUSH
7882: LD_STRING DH-1-quest-done
7884: PPUSH
7885: CALL_OW 88
// if Givi then
7889: LD_EXP 24
7893: IFFALSE 7907
// Say ( Givi , DG-1-quest-done ) ;
7895: LD_EXP 24
7899: PPUSH
7900: LD_STRING DG-1-quest-done
7902: PPUSH
7903: CALL_OW 88
// end ;
7907: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7908: LD_INT 5
7910: PPUSH
7911: LD_EXP 23
7915: PPUSH
7916: CALL_OW 292
7920: PUSH
7921: LD_EXP 23
7925: PPUSH
7926: LD_EXP 27
7930: PPUSH
7931: CALL_OW 296
7935: PUSH
7936: LD_INT 6
7938: LESS
7939: AND
7940: PUSH
7941: LD_EXP 8
7945: AND
7946: PUSH
7947: LD_EXP 14
7951: NOT
7952: AND
7953: IFFALSE 8091
7955: GO 7957
7957: DISABLE
7958: LD_INT 0
7960: PPUSH
// begin attackDeltaAllowed := true ;
7961: LD_ADDR_EXP 14
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// InGameOn ;
7969: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7973: LD_EXP 23
7977: PPUSH
7978: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7982: LD_INT 10
7984: PPUSH
7985: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7989: LD_EXP 27
7993: PPUSH
7994: LD_EXP 23
7998: PPUSH
7999: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8003: LD_EXP 23
8007: PPUSH
8008: LD_EXP 27
8012: PPUSH
8013: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8017: LD_EXP 23
8021: PPUSH
8022: LD_STRING DH-1-return
8024: PPUSH
8025: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8029: LD_EXP 27
8033: PPUSH
8034: LD_STRING DA-1-return
8036: PPUSH
8037: CALL_OW 88
// InGameOff ;
8041: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8045: LD_STRING ODelta
8047: PPUSH
8048: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8089
// SetSide ( i , 2 ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 2
8082: PPUSH
8083: CALL_OW 235
8087: GO 8072
8089: POP
8090: POP
// end ;
8091: PPOPN 1
8093: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8094: LD_EXP 10
8098: PUSH
8099: LD_EXP 14
8103: NOT
8104: AND
8105: IFFALSE 8118
8107: GO 8109
8109: DISABLE
// spottedBeforeRadio := true ;
8110: LD_ADDR_EXP 6
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
8118: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8119: LD_EXP 14
8123: PUSH
8124: LD_EXP 30
8128: PPUSH
8129: CALL_OW 302
8133: AND
8134: PUSH
8135: LD_INT 1
8137: PPUSH
8138: CALL_OW 255
8142: PUSH
8143: LD_INT 1
8145: EQUAL
8146: AND
8147: PUSH
8148: LD_EXP 20
8152: PPUSH
8153: CALL_OW 302
8157: AND
8158: PUSH
8159: LD_EXP 10
8163: NOT
8164: AND
8165: IFFALSE 9381
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
8174: PPUSH
// begin trap := 0 ;
8175: LD_ADDR_EXP 17
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8183: LD_INT 420
8185: PPUSH
8186: CALL_OW 67
// DialogueOn ;
8190: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8194: LD_EXP 30
8198: PPUSH
8199: LD_STRING DMar-1-radio
8201: PPUSH
8202: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8206: LD_EXP 23
8210: PPUSH
8211: LD_STRING DH-1-radio
8213: PPUSH
8214: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8218: LD_EXP 30
8222: PPUSH
8223: LD_STRING DMar-2-radio
8225: PPUSH
8226: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8230: LD_EXP 23
8234: PPUSH
8235: LD_STRING DH-2-radio
8237: PPUSH
8238: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8242: LD_EXP 26
8246: PPUSH
8247: CALL_OW 302
8251: PUSH
8252: LD_EXP 29
8256: PPUSH
8257: CALL_OW 302
8261: OR
8262: IFFALSE 9381
// begin case Query ( Q1Trap ) of 1 :
8264: LD_STRING Q1Trap
8266: PPUSH
8267: CALL_OW 97
8271: PUSH
8272: LD_INT 1
8274: DOUBLE
8275: EQUAL
8276: IFTRUE 8280
8278: GO 8474
8280: POP
// begin if IsOk ( Kamil ) then
8281: LD_EXP 26
8285: PPUSH
8286: CALL_OW 302
8290: IFFALSE 8369
// begin Say ( Kamil , DKam-2-radio ) ;
8292: LD_EXP 26
8296: PPUSH
8297: LD_STRING DKam-2-radio
8299: PPUSH
8300: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8304: LD_EXP 26
8308: PPUSH
8309: LD_STRING DKam-3-radio
8311: PPUSH
8312: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8316: LD_EXP 20
8320: PPUSH
8321: LD_STRING DDelta-3-radio
8323: PPUSH
8324: CALL_OW 94
// dwait ( 0 0$01 ) ;
8328: LD_INT 35
8330: PPUSH
8331: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8335: LD_EXP 23
8339: PPUSH
8340: LD_STRING DH-3-radio
8342: PPUSH
8343: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8347: LD_EXP 26
8351: PPUSH
8352: LD_STRING DKam-4-radio
8354: PPUSH
8355: CALL_OW 88
// trap := 1 ;
8359: LD_ADDR_EXP 17
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// end else
8367: GO 8468
// begin Say ( Sophia , DS-1-radio ) ;
8369: LD_EXP 29
8373: PPUSH
8374: LD_STRING DS-1-radio
8376: PPUSH
8377: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8381: LD_EXP 29
8385: PPUSH
8386: LD_STRING DS-2-radio
8388: PPUSH
8389: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8393: LD_EXP 20
8397: PPUSH
8398: LD_STRING DDelta-2-radio-s
8400: PPUSH
8401: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8405: LD_EXP 29
8409: PPUSH
8410: LD_STRING DS-3-radio
8412: PPUSH
8413: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8417: LD_EXP 20
8421: PPUSH
8422: LD_STRING DDelta-3-radio-s
8424: PPUSH
8425: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8429: LD_EXP 29
8433: PPUSH
8434: LD_STRING DS-4-radio-s
8436: PPUSH
8437: CALL_OW 88
// dwait ( 0 0$01 ) ;
8441: LD_INT 35
8443: PPUSH
8444: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8448: LD_EXP 23
8452: PPUSH
8453: LD_STRING DH-1-trap
8455: PPUSH
8456: CALL_OW 88
// trap := 0 ;
8460: LD_ADDR_EXP 17
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// end ; DialogueOff ;
8468: CALL_OW 7
// end ; 2 :
8472: GO 8492
8474: LD_INT 2
8476: DOUBLE
8477: EQUAL
8478: IFTRUE 8482
8480: GO 8491
8482: POP
// begin DialogueOff ;
8483: CALL_OW 7
// exit ;
8487: GO 9381
// end ; end ;
8489: GO 8492
8491: POP
// if trap = 1 then
8492: LD_EXP 17
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: IFFALSE 8952
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8502: LD_INT 64
8504: PPUSH
8505: LD_INT 32
8507: PPUSH
8508: LD_INT 2
8510: PPUSH
8511: LD_INT 8
8513: PPUSH
8514: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8518: LD_INT 64
8520: PPUSH
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 84
// tmp := [ ] ;
8528: LD_ADDR_VAR 0 3
8532: PUSH
8533: EMPTY
8534: ST_TO_ADDR
// k := 3 ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_INT 3
8542: ST_TO_ADDR
// if usForces < 3 then
8543: LD_EXP 21
8547: PUSH
8548: LD_INT 3
8550: LESS
8551: IFFALSE 8563
// k := usForces ;
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: LD_EXP 21
8562: ST_TO_ADDR
// for i := 1 to k do
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_VAR 0 2
8577: PUSH
8578: FOR_TO
8579: IFFALSE 8634
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8581: LD_ADDR_VAR 0 3
8585: PUSH
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 1
8598: PLUS
8599: PPUSH
8600: LD_EXP 21
8604: PUSH
8605: LD_INT 1
8607: ARRAY
8608: PPUSH
8609: CALL_OW 1
8613: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8614: LD_ADDR_EXP 21
8618: PUSH
8619: LD_EXP 21
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 3
8631: ST_TO_ADDR
// end ;
8632: GO 8578
8634: POP
8635: POP
// usPatrol := tmp ;
8636: LD_ADDR_EXP 16
8640: PUSH
8641: LD_VAR 0 3
8645: ST_TO_ADDR
// for i in tmp do
8646: LD_ADDR_VAR 0 1
8650: PUSH
8651: LD_VAR 0 3
8655: PUSH
8656: FOR_IN
8657: IFFALSE 8787
// begin if IsInUnit ( i ) then
8659: LD_VAR 0 1
8663: PPUSH
8664: CALL_OW 310
8668: IFFALSE 8679
// ComExitBuilding ( i ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8679: LD_VAR 0 1
8683: PPUSH
8684: LD_INT 63
8686: PPUSH
8687: LD_INT 31
8689: PPUSH
8690: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8694: LD_VAR 0 1
8698: PPUSH
8699: LD_INT 70
8701: PPUSH
8702: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8706: LD_VAR 0 1
8710: PPUSH
8711: LD_INT 103
8713: PPUSH
8714: LD_INT 43
8716: PPUSH
8717: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_INT 105
8728: PPUSH
8729: CALL_OW 202
// if Difficulty > 1 then
8733: LD_OWVAR 67
8737: PUSH
8738: LD_INT 1
8740: GREATER
8741: IFFALSE 8758
// AddComAgressiveMove ( i , 114 , 69 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 114
8750: PPUSH
8751: LD_INT 69
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8770: LD_VAR 0 1
8774: PPUSH
8775: LD_INT 42
8777: PPUSH
8778: LD_INT 20
8780: PPUSH
8781: CALL_OW 174
// end ;
8785: GO 8656
8787: POP
8788: POP
// wait ( 0 0$8 ) ;
8789: LD_INT 280
8791: PPUSH
8792: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8796: LD_INT 64
8798: PPUSH
8799: LD_INT 32
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8809: LD_INT 35
8811: PPUSH
8812: CALL_OW 67
// for i in tmp do
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: FOR_IN
8827: IFFALSE 8858
// if IsDead ( i ) then
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 301
8838: IFFALSE 8856
// tmp := tmp diff i ;
8840: LD_ADDR_VAR 0 3
8844: PUSH
8845: LD_VAR 0 3
8849: PUSH
8850: LD_VAR 0 1
8854: DIFF
8855: ST_TO_ADDR
8856: GO 8826
8858: POP
8859: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8860: LD_VAR 0 3
8864: NOT
8865: PUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 95
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 60
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: PUSH
8903: LD_VAR 0 3
8907: EQUAL
8908: OR
8909: IFFALSE 8809
// if tmp then
8911: LD_VAR 0 3
8915: IFFALSE 8942
// begin usPatrol := [ ] ;
8917: LD_ADDR_EXP 16
8921: PUSH
8922: EMPTY
8923: ST_TO_ADDR
// usForces := usForces union tmp ;
8924: LD_ADDR_EXP 21
8928: PUSH
8929: LD_EXP 21
8933: PUSH
8934: LD_VAR 0 3
8938: UNION
8939: ST_TO_ADDR
// end else
8940: GO 8950
// trickyMove := true ;
8942: LD_ADDR_EXP 15
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// end else
8950: GO 9381
// begin tmp := [ ] ;
8952: LD_ADDR_VAR 0 3
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// k := 4 ;
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: ST_TO_ADDR
// if usForces < 4 then
8967: LD_EXP 21
8971: PUSH
8972: LD_INT 4
8974: LESS
8975: IFFALSE 8987
// k := usForces ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_EXP 21
8986: ST_TO_ADDR
// for i := 1 to k do
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: DOUBLE
8993: LD_INT 1
8995: DEC
8996: ST_TO_ADDR
8997: LD_VAR 0 2
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9058
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_VAR 0 3
9014: PPUSH
9015: LD_VAR 0 3
9019: PUSH
9020: LD_INT 1
9022: PLUS
9023: PPUSH
9024: LD_EXP 21
9028: PUSH
9029: LD_INT 1
9031: ARRAY
9032: PPUSH
9033: CALL_OW 1
9037: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9038: LD_ADDR_EXP 21
9042: PUSH
9043: LD_EXP 21
9047: PPUSH
9048: LD_INT 1
9050: PPUSH
9051: CALL_OW 3
9055: ST_TO_ADDR
// end ;
9056: GO 9002
9058: POP
9059: POP
// if Lynch then
9060: LD_EXP 20
9064: IFFALSE 9082
// tmp := tmp ^ Lynch ;
9066: LD_ADDR_VAR 0 3
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_EXP 20
9080: ADD
9081: ST_TO_ADDR
// usPatrol := tmp ;
9082: LD_ADDR_EXP 16
9086: PUSH
9087: LD_VAR 0 3
9091: ST_TO_ADDR
// for i in tmp do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_VAR 0 3
9101: PUSH
9102: FOR_IN
9103: IFFALSE 9196
// begin if IsInUnit ( i ) then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 310
9114: IFFALSE 9125
// ComExitBuilding ( i ) ;
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9125: LD_VAR 0 1
9129: PPUSH
9130: LD_INT 69
9132: PPUSH
9133: LD_INT 15
9135: PPUSH
9136: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9140: LD_VAR 0 1
9144: PPUSH
9145: LD_INT 700
9147: PPUSH
9148: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9152: LD_VAR 0 1
9156: PPUSH
9157: LD_INT 55
9159: PPUSH
9160: LD_INT 43
9162: PPUSH
9163: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9167: LD_VAR 0 1
9171: PPUSH
9172: LD_INT 700
9174: PPUSH
9175: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9179: LD_VAR 0 1
9183: PPUSH
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 20
9189: PPUSH
9190: CALL_OW 174
// end ;
9194: GO 9102
9196: POP
9197: POP
// repeat wait ( 0 0$1 ) ;
9198: LD_INT 35
9200: PPUSH
9201: CALL_OW 67
// for i in tmp do
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: LD_VAR 0 3
9214: PUSH
9215: FOR_IN
9216: IFFALSE 9247
// if IsDead ( i ) then
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 301
9227: IFFALSE 9245
// tmp := tmp diff i ;
9229: LD_ADDR_VAR 0 3
9233: PUSH
9234: LD_VAR 0 3
9238: PUSH
9239: LD_VAR 0 1
9243: DIFF
9244: ST_TO_ADDR
9245: GO 9215
9247: POP
9248: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9249: LD_VAR 0 3
9253: NOT
9254: PUSH
9255: LD_VAR 0 3
9259: PPUSH
9260: LD_INT 95
9262: PUSH
9263: LD_INT 7
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 3
9272: PUSH
9273: LD_INT 60
9275: PUSH
9276: EMPTY
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 72
9291: PUSH
9292: LD_VAR 0 3
9296: EQUAL
9297: OR
9298: IFFALSE 9198
// if not tmp then
9300: LD_VAR 0 3
9304: NOT
9305: IFFALSE 9317
// trickyMove := true else
9307: LD_ADDR_EXP 15
9311: PUSH
9312: LD_INT 1
9314: ST_TO_ADDR
9315: GO 9324
// usPatrol := [ ] ;
9317: LD_ADDR_EXP 16
9321: PUSH
9322: EMPTY
9323: ST_TO_ADDR
// if tmp diff Lynch then
9324: LD_VAR 0 3
9328: PUSH
9329: LD_EXP 20
9333: DIFF
9334: IFFALSE 9358
// usForces := usForces union ( tmp diff Lynch ) ;
9336: LD_ADDR_EXP 21
9340: PUSH
9341: LD_EXP 21
9345: PUSH
9346: LD_VAR 0 3
9350: PUSH
9351: LD_EXP 20
9355: DIFF
9356: UNION
9357: ST_TO_ADDR
// if IsOk ( Lynch ) then
9358: LD_EXP 20
9362: PPUSH
9363: CALL_OW 302
9367: IFFALSE 9381
// ComEnterUnit ( Lynch , Delta ) ;
9369: LD_EXP 20
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 120
// end ; end ; end ;
9381: PPOPN 3
9383: END
// every 0 0$1 trigger trickyMove do
9384: LD_EXP 15
9388: IFFALSE 9400
9390: GO 9392
9392: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9393: LD_STRING ACH_TRAP
9395: PPUSH
9396: CALL_OW 543
9400: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9401: LD_INT 22
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 23
9413: PUSH
9414: LD_INT 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PPUSH
9436: CALL_OW 69
9440: IFFALSE 9452
9442: GO 9444
9444: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9445: LD_STRING ACH_SCRAP
9447: PPUSH
9448: CALL_OW 543
9452: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
9453: LD_EXP 16
9457: PPUSH
9458: LD_INT 101
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PPUSH
9468: CALL_OW 72
9472: IFFALSE 9605
9474: GO 9476
9476: DISABLE
// begin if not trap then
9477: LD_EXP 17
9481: NOT
9482: IFFALSE 9510
// begin Say ( Heike , DH-2-trap ) ;
9484: LD_EXP 23
9488: PPUSH
9489: LD_STRING DH-2-trap
9491: PPUSH
9492: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9496: LD_EXP 25
9500: PPUSH
9501: LD_STRING DM-2-trap
9503: PPUSH
9504: CALL_OW 88
// end else
9508: GO 9522
// begin Say ( Heike , DH-1-trap-a ) ;
9510: LD_EXP 23
9514: PPUSH
9515: LD_STRING DH-1-trap-a
9517: PPUSH
9518: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9522: LD_INT 35
9524: PPUSH
9525: CALL_OW 67
// until trickyMove ;
9529: LD_EXP 15
9533: IFFALSE 9522
// Say ( Heike , DH-3-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-3-trap
9542: PPUSH
9543: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9547: LD_EXP 24
9551: PPUSH
9552: CALL_OW 302
9556: PUSH
9557: LD_EXP 28
9561: PPUSH
9562: CALL_OW 302
9566: AND
9567: IFFALSE 9605
// begin Say ( Givi , DG-3-trap ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING DG-3-trap
9576: PPUSH
9577: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9581: LD_EXP 28
9585: PPUSH
9586: LD_STRING DK-3-trap
9588: PPUSH
9589: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9593: LD_EXP 24
9597: PPUSH
9598: LD_STRING DG-4-trap
9600: PPUSH
9601: CALL_OW 88
// end ; end ;
9605: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 255
9613: PUSH
9614: LD_INT 2
9616: EQUAL
9617: PUSH
9618: LD_EXP 14
9622: AND
9623: IFFALSE 9782
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
// begin if not IsOk ( Kaia ) then
9632: LD_EXP 28
9636: PPUSH
9637: CALL_OW 302
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 9782
// if tick < 5 5$00 then
9646: LD_OWVAR 1
9650: PUSH
9651: LD_INT 10500
9653: LESS
9654: IFFALSE 9663
// SetAchievement ( ACH_DELTA ) ;
9656: LD_STRING ACH_DELTA
9658: PPUSH
9659: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9663: LD_EXP 28
9667: PPUSH
9668: LD_STRING DK-1-capture
9670: PPUSH
9671: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9675: LD_EXP 23
9679: PPUSH
9680: LD_STRING DH-1-capture
9682: PPUSH
9683: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 22
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 25
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 2
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 9782
// for i in tmp do
9730: LD_ADDR_VAR 0 1
9734: PUSH
9735: LD_VAR 0 2
9739: PUSH
9740: FOR_IN
9741: IFFALSE 9780
// begin if IsInUnit ( i ) then
9743: LD_VAR 0 1
9747: PPUSH
9748: CALL_OW 310
9752: IFFALSE 9763
// ComExitBuilding ( i ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: LD_INT 38
9770: PPUSH
9771: LD_INT 23
9773: PPUSH
9774: CALL_OW 174
// end ;
9778: GO 9740
9780: POP
9781: POP
// end ;
9782: PPOPN 2
9784: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9785: LD_INT 3
9787: PPUSH
9788: CALL_OW 255
9792: PUSH
9793: LD_INT 2
9795: EQUAL
9796: PUSH
9797: LD_EXP 14
9801: AND
9802: IFFALSE 9834
9804: GO 9806
9806: DISABLE
// begin DialogueOn ;
9807: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9811: LD_EXP 27
9815: PPUSH
9816: LD_STRING DA-1-capture
9818: PPUSH
9819: CALL_OW 88
// DialogueOff ;
9823: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9827: LD_STRING OTame
9829: PPUSH
9830: CALL_OW 337
// end ;
9834: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9835: LD_INT 1
9837: PPUSH
9838: LD_INT 2
9840: PPUSH
9841: CALL_OW 321
9845: PUSH
9846: LD_INT 2
9848: EQUAL
9849: PUSH
9850: LD_EXP 14
9854: AND
9855: IFFALSE 10002
9857: GO 9859
9859: DISABLE
// begin DialogueOn ;
9860: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9864: LD_EXP 27
9868: PPUSH
9869: LD_STRING DA-1-ape
9871: PPUSH
9872: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9876: LD_EXP 23
9880: PPUSH
9881: LD_STRING DH-1-ape
9883: PPUSH
9884: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9888: LD_EXP 27
9892: PPUSH
9893: LD_STRING DA-2-ape
9895: PPUSH
9896: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9900: LD_EXP 27
9904: PPUSH
9905: LD_STRING DA-3-ape
9907: PPUSH
9908: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9912: LD_EXP 23
9916: PPUSH
9917: LD_STRING DH-3-ape
9919: PPUSH
9920: CALL_OW 88
// DialogueOff ;
9924: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) then
9928: LD_INT 22
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 12
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: IFFALSE 9968
// SpawnApeman ( forest , 2 ) ;
9958: LD_INT 1
9960: PPUSH
9961: LD_INT 2
9963: PPUSH
9964: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
9968: LD_INT 35
9970: PPUSH
9971: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
9975: LD_INT 25
9977: PUSH
9978: LD_INT 12
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 69
9989: PUSH
9990: LD_INT 0
9992: EQUAL
9993: IFFALSE 9968
// YouLost ( Ape ) ;
9995: LD_STRING Ape
9997: PPUSH
9998: CALL_OW 104
// end ;
10002: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10003: LD_EXP 18
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: GREATEREQUAL
10028: IFFALSE 10072
10030: GO 10032
10032: DISABLE
// begin DialogueOn ;
10033: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10037: LD_EXP 27
10041: PPUSH
10042: LD_STRING DA-1-failure
10044: PPUSH
10045: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10049: LD_EXP 27
10053: PPUSH
10054: LD_STRING DA-2-failure
10056: PPUSH
10057: CALL_OW 88
// YouLost ( Failure ) ;
10061: LD_STRING Failure
10063: PPUSH
10064: CALL_OW 104
// DialogueOff ;
10068: CALL_OW 7
// end ;
10072: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10073: LD_EXP 28
10077: PPUSH
10078: CALL_OW 256
10082: PUSH
10083: LD_INT 3
10085: LESS
10086: IFFALSE 10219
10088: GO 10090
10090: DISABLE
// begin DialogueOn ;
10091: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10095: LD_EXP 28
10099: PPUSH
10100: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10104: LD_EXP 28
10108: PPUSH
10109: LD_STRING DK-Kaiaout-1
10111: PPUSH
10112: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10116: LD_EXP 23
10120: PPUSH
10121: LD_STRING DH-Kaiaout-2
10123: PPUSH
10124: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10128: LD_EXP 24
10132: PPUSH
10133: LD_STRING DG-Kaiaout-3
10135: PPUSH
10136: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10140: LD_EXP 23
10144: PPUSH
10145: LD_STRING DH-Kaiaout-4
10147: PPUSH
10148: CALL_OW 88
// if Givi then
10152: LD_EXP 24
10156: IFFALSE 10206
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10158: LD_EXP 24
10162: PPUSH
10163: LD_STRING DG-Kaiaout-5
10165: PPUSH
10166: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10170: LD_EXP 23
10174: PPUSH
10175: LD_STRING DH-Kaiaout-6
10177: PPUSH
10178: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10182: LD_EXP 24
10186: PPUSH
10187: LD_STRING DG-Kaiaout-7
10189: PPUSH
10190: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10194: LD_EXP 23
10198: PPUSH
10199: LD_STRING DH-Kaiaout-8
10201: PPUSH
10202: CALL_OW 88
// end ; DialogueOff ;
10206: CALL_OW 7
// KillUnit ( Kaia ) ;
10210: LD_EXP 28
10214: PPUSH
10215: CALL_OW 66
// end ;
10219: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10220: LD_INT 22
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 23
10232: PUSH
10233: LD_INT 0
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: CALL_OW 69
10248: PUSH
10249: LD_EXP 27
10253: PPUSH
10254: CALL_OW 302
10258: AND
10259: PUSH
10260: LD_EXP 27
10264: PPUSH
10265: CALL_OW 255
10269: PUSH
10270: LD_INT 2
10272: EQUAL
10273: AND
10274: IFFALSE 11046
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 23
10299: PUSH
10300: LD_INT 0
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PPUSH
10311: CALL_OW 69
10315: ST_TO_ADDR
// InGameOn ;
10316: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10329: LD_VAR 0 1
10333: PPUSH
10334: LD_EXP 27
10338: PPUSH
10339: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10343: LD_EXP 27
10347: PPUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 119
// wait ( 0 0$1 ) ;
10357: LD_INT 35
10359: PPUSH
10360: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10364: LD_EXP 27
10368: PPUSH
10369: LD_STRING DA-1-tame-a
10371: PPUSH
10372: CALL_OW 88
// if IsOk ( Mike ) then
10376: LD_EXP 25
10380: PPUSH
10381: CALL_OW 302
10385: IFFALSE 10423
// begin Say ( Mike , DM-1-tame-a ) ;
10387: LD_EXP 25
10391: PPUSH
10392: LD_STRING DM-1-tame-a
10394: PPUSH
10395: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10399: LD_EXP 29
10403: PPUSH
10404: LD_STRING DS-1-tame-a
10406: PPUSH
10407: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10411: LD_EXP 25
10415: PPUSH
10416: LD_STRING DM-2-tame-a
10418: PPUSH
10419: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10423: LD_INT 105
10425: PPUSH
10426: CALL_OW 67
// PrepareFarmer ;
10430: CALL 11721 0 0
// CenterOnUnits ( Farmer ) ;
10434: LD_EXP 31
10438: PPUSH
10439: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10443: LD_EXP 31
10447: PPUSH
10448: LD_INT 105
10450: PPUSH
10451: LD_INT 59
10453: PPUSH
10454: CALL_OW 111
// AddComHold ( Farmer ) ;
10458: LD_EXP 31
10462: PPUSH
10463: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10467: LD_EXP 31
10471: PPUSH
10472: LD_STRING DF-1-end
10474: PPUSH
10475: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10479: LD_EXP 27
10483: PPUSH
10484: LD_STRING DA-1-end
10486: PPUSH
10487: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10491: LD_EXP 31
10495: PPUSH
10496: LD_STRING DF-2-end
10498: PPUSH
10499: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10503: LD_EXP 27
10507: PPUSH
10508: LD_STRING DA-2-end
10510: PPUSH
10511: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10515: LD_EXP 31
10519: PPUSH
10520: LD_STRING DF-3-end
10522: PPUSH
10523: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10527: LD_EXP 23
10531: PPUSH
10532: LD_STRING DH-3-end
10534: PPUSH
10535: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10539: LD_EXP 31
10543: PPUSH
10544: LD_STRING DF-4-end
10546: PPUSH
10547: CALL_OW 94
// if tick <= [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] then
10551: LD_OWVAR 1
10555: PUSH
10556: LD_INT 52500
10558: PUSH
10559: LD_INT 50400
10561: PUSH
10562: LD_INT 48300
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: LD_OWVAR 67
10574: ARRAY
10575: LESSEQUAL
10576: IFFALSE 10590
// AddMedal ( med1 , 1 ) else
10578: LD_STRING med1
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 101
10588: GO 10601
// AddMedal ( med1 , - 1 ) ;
10590: LD_STRING med1
10592: PPUSH
10593: LD_INT 1
10595: NEG
10596: PPUSH
10597: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10601: LD_INT 22
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: PUSH
10630: LD_INT 0
10632: EQUAL
10633: PUSH
10634: LD_EXP 12
10638: NOT
10639: AND
10640: IFFALSE 10654
// AddMedal ( med2 , 1 ) else
10642: LD_STRING med2
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 101
10652: GO 10665
// AddMedal ( med2 , - 1 ) ;
10654: LD_STRING med2
10656: PPUSH
10657: LD_INT 1
10659: NEG
10660: PPUSH
10661: CALL_OW 101
// if trickyMove then
10665: LD_EXP 15
10669: IFFALSE 10683
// AddMedal ( med3 , 1 ) else
10671: LD_STRING med3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 101
10681: GO 10713
// if spottedBeforeRadio then
10683: LD_EXP 6
10687: IFFALSE 10702
// AddMedal ( med3 , - 2 ) else
10689: LD_STRING med3
10691: PPUSH
10692: LD_INT 2
10694: NEG
10695: PPUSH
10696: CALL_OW 101
10700: GO 10713
// AddMedal ( med3 , - 1 ) ;
10702: LD_STRING med3
10704: PPUSH
10705: LD_INT 1
10707: NEG
10708: PPUSH
10709: CALL_OW 101
// GiveMedals ( MAIN ) ;
10713: LD_STRING MAIN
10715: PPUSH
10716: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10720: LD_VAR 0 1
10724: PPUSH
10725: LD_STRING 02_ape
10727: PPUSH
10728: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 21
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: PPUSH
10772: CALL_OW 69
10776: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10777: LD_VAR 0 1
10781: PPUSH
10782: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10786: LD_EXP 23
10790: PPUSH
10791: LD_STRING 02_Heike
10793: PPUSH
10794: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10798: LD_EXP 27
10802: PPUSH
10803: LD_STRING 02_Aviradze
10805: PPUSH
10806: CALL_OW 38
// if Givi then
10810: LD_EXP 24
10814: IFFALSE 10828
// SaveCharacters ( Givi , 02_Givi ) ;
10816: LD_EXP 24
10820: PPUSH
10821: LD_STRING 02_Givi
10823: PPUSH
10824: CALL_OW 38
// if Mike then
10828: LD_EXP 25
10832: IFFALSE 10846
// SaveCharacters ( Mike , 02_Mike ) ;
10834: LD_EXP 25
10838: PPUSH
10839: LD_STRING 02_Mike
10841: PPUSH
10842: CALL_OW 38
// if Kamil then
10846: LD_EXP 26
10850: IFFALSE 10864
// SaveCharacters ( Kamil , 02_Kamil ) ;
10852: LD_EXP 26
10856: PPUSH
10857: LD_STRING 02_Kamil
10859: PPUSH
10860: CALL_OW 38
// if Kaia then
10864: LD_EXP 28
10868: IFFALSE 10882
// SaveCharacters ( Kaia , 02_Kaia ) ;
10870: LD_EXP 28
10874: PPUSH
10875: LD_STRING 02_Kaia
10877: PPUSH
10878: CALL_OW 38
// if Sophia then
10882: LD_EXP 29
10886: IFFALSE 10900
// SaveCharacters ( Sophia , 02_Sophia ) ;
10888: LD_EXP 29
10892: PPUSH
10893: LD_STRING 02_Sophia
10895: PPUSH
10896: CALL_OW 38
// if Markov then
10900: LD_EXP 30
10904: IFFALSE 10918
// SaveCharacters ( Markov , 02_Markov ) ;
10906: LD_EXP 30
10910: PPUSH
10911: LD_STRING 02_Markov
10913: PPUSH
10914: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10918: LD_VAR 0 1
10922: PUSH
10923: LD_EXP 23
10927: PUSH
10928: LD_EXP 27
10932: PUSH
10933: LD_EXP 24
10937: PUSH
10938: LD_EXP 25
10942: PUSH
10943: LD_EXP 26
10947: PUSH
10948: LD_EXP 29
10952: PUSH
10953: LD_EXP 28
10957: PUSH
10958: LD_EXP 30
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: DIFF
10973: IFFALSE 11038
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10975: LD_VAR 0 1
10979: PUSH
10980: LD_EXP 23
10984: PUSH
10985: LD_EXP 27
10989: PUSH
10990: LD_EXP 24
10994: PUSH
10995: LD_EXP 25
10999: PUSH
11000: LD_EXP 26
11004: PUSH
11005: LD_EXP 29
11009: PUSH
11010: LD_EXP 28
11014: PUSH
11015: LD_EXP 30
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: DIFF
11030: PPUSH
11031: LD_STRING 02_others
11033: PPUSH
11034: CALL_OW 38
// YouWin ;
11038: CALL_OW 103
// InGameOff ;
11042: CALL_OW 9
// end ;
11046: PPOPN 1
11048: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11049: LD_OWVAR 1
11053: PUSH
11054: LD_EXP 13
11058: GREATER
11059: PUSH
11060: LD_EXP 4
11064: AND
11065: IFFALSE 11105
11067: GO 11069
11069: DISABLE
// begin InGameOn ;
11070: CALL_OW 8
// PrepareFarmer ;
11074: CALL 11721 0 0
// CenterNowOnUnits ( Farmer ) ;
11078: LD_EXP 31
11082: PPUSH
11083: CALL_OW 87
// wait ( 0 0$2 ) ;
11087: LD_INT 70
11089: PPUSH
11090: CALL_OW 67
// YouLost ( Farmer ) ;
11094: LD_STRING Farmer
11096: PPUSH
11097: CALL_OW 104
// InGameOff ;
11101: CALL_OW 9
// end ; end_of_file
11105: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
11110: PPUSH
// uc_side := 2 ;
11111: LD_ADDR_OWVAR 20
11115: PUSH
11116: LD_INT 2
11118: ST_TO_ADDR
// uc_nation := 2 ;
11119: LD_ADDR_OWVAR 21
11123: PUSH
11124: LD_INT 2
11126: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11127: LD_ADDR_EXP 23
11131: PUSH
11132: LD_STRING Heike
11134: PPUSH
11135: LD_EXP 1
11139: NOT
11140: PPUSH
11141: LD_EXP 2
11145: PPUSH
11146: CALL 25153 0 3
11150: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11151: LD_EXP 23
11155: PPUSH
11156: LD_INT 83
11158: PPUSH
11159: LD_INT 72
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11169: LD_ADDR_EXP 24
11173: PUSH
11174: LD_STRING Givi
11176: PPUSH
11177: LD_EXP 1
11181: NOT
11182: PPUSH
11183: LD_EXP 2
11187: PPUSH
11188: CALL 25153 0 3
11192: ST_TO_ADDR
// if Givi then
11193: LD_EXP 24
11197: IFFALSE 11217
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11199: LD_EXP 24
11203: PPUSH
11204: LD_INT 87
11206: PPUSH
11207: LD_INT 76
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11217: LD_ADDR_EXP 25
11221: PUSH
11222: LD_STRING Mike
11224: PPUSH
11225: LD_EXP 1
11229: NOT
11230: PPUSH
11231: LD_EXP 2
11235: PPUSH
11236: CALL 25153 0 3
11240: ST_TO_ADDR
// if Mike then
11241: LD_EXP 25
11245: IFFALSE 11265
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11247: LD_EXP 25
11251: PPUSH
11252: LD_INT 84
11254: PPUSH
11255: LD_INT 76
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11265: LD_ADDR_EXP 26
11269: PUSH
11270: LD_STRING Kamil
11272: PPUSH
11273: LD_EXP 1
11277: NOT
11278: PPUSH
11279: LD_EXP 2
11283: PPUSH
11284: CALL 25153 0 3
11288: ST_TO_ADDR
// if Kamil then
11289: LD_EXP 26
11293: IFFALSE 11313
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11295: LD_EXP 26
11299: PPUSH
11300: LD_INT 85
11302: PPUSH
11303: LD_INT 78
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 48
// uc_side := 5 ;
11313: LD_ADDR_OWVAR 20
11317: PUSH
11318: LD_INT 5
11320: ST_TO_ADDR
// uc_nation := 2 ;
11321: LD_ADDR_OWVAR 21
11325: PUSH
11326: LD_INT 2
11328: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11329: LD_ADDR_EXP 27
11333: PUSH
11334: LD_STRING Aviradze
11336: PPUSH
11337: LD_INT 0
11339: PPUSH
11340: LD_STRING 
11342: PPUSH
11343: CALL 25153 0 3
11347: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_INT 106
11355: PPUSH
11356: LD_INT 38
11358: PPUSH
11359: LD_INT 0
11361: PPUSH
11362: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11366: LD_EXP 27
11370: PPUSH
11371: LD_INT 103
11373: PPUSH
11374: LD_INT 38
11376: PPUSH
11377: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11381: LD_ADDR_EXP 28
11385: PUSH
11386: LD_STRING Kaia
11388: PPUSH
11389: LD_INT 0
11391: PPUSH
11392: LD_STRING 
11394: PPUSH
11395: CALL 25153 0 3
11399: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11400: LD_EXP 28
11404: PPUSH
11405: LD_INT 100
11407: PPUSH
11408: LD_INT 34
11410: PPUSH
11411: LD_INT 0
11413: PPUSH
11414: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11418: LD_EXP 28
11422: PPUSH
11423: LD_INT 100
11425: PPUSH
11426: LD_INT 39
11428: PPUSH
11429: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11433: LD_ADDR_EXP 29
11437: PUSH
11438: LD_STRING Sophia
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: LD_STRING 
11446: PPUSH
11447: CALL 25153 0 3
11451: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11452: LD_EXP 29
11456: PPUSH
11457: LD_INT 109
11459: PPUSH
11460: LD_INT 50
11462: PPUSH
11463: LD_INT 0
11465: PPUSH
11466: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11470: LD_EXP 29
11474: PPUSH
11475: LD_INT 100
11477: PPUSH
11478: LD_INT 39
11480: PPUSH
11481: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11485: LD_ADDR_EXP 30
11489: PUSH
11490: LD_STRING Markov
11492: PPUSH
11493: LD_INT 0
11495: PPUSH
11496: LD_STRING 
11498: PPUSH
11499: CALL 25153 0 3
11503: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11504: LD_INT 5
11506: PPUSH
11507: LD_INT 3
11509: PPUSH
11510: LD_INT 21
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: LD_INT 42
11521: PPUSH
11522: LD_INT 90
11524: PUSH
11525: LD_INT 70
11527: PUSH
11528: LD_INT 60
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: LD_OWVAR 67
11540: ARRAY
11541: PPUSH
11542: CALL 237 0 7
// veh := CreateVehicle ;
11546: LD_ADDR_VAR 0 3
11550: PUSH
11551: CALL_OW 45
11555: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 4
11563: PPUSH
11564: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 109
11575: PPUSH
11576: LD_INT 38
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11586: LD_EXP 30
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11600: LD_EXP 28
11604: PPUSH
11605: LD_EXP 27
11609: PPUSH
11610: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11614: LD_EXP 27
11618: PPUSH
11619: LD_EXP 28
11623: PPUSH
11624: CALL_OW 119
// if not Givi or not Mike then
11628: LD_EXP 24
11632: NOT
11633: PUSH
11634: LD_EXP 25
11638: NOT
11639: OR
11640: IFFALSE 11716
// begin uc_nation := 2 ;
11642: LD_ADDR_OWVAR 21
11646: PUSH
11647: LD_INT 2
11649: ST_TO_ADDR
// uc_side := 5 ;
11650: LD_ADDR_OWVAR 20
11654: PUSH
11655: LD_INT 5
11657: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11658: LD_INT 1
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 380
// un := CreateHuman ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: CALL_OW 44
11680: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_INT 112
11688: PPUSH
11689: LD_INT 40
11691: PPUSH
11692: LD_INT 3
11694: PPUSH
11695: LD_INT 0
11697: PPUSH
11698: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11702: LD_VAR 0 2
11706: PPUSH
11707: LD_EXP 27
11711: PPUSH
11712: CALL_OW 119
// end ; end ;
11716: LD_VAR 0 1
11720: RET
// export function PrepareFarmer ; var i ; begin
11721: LD_INT 0
11723: PPUSH
11724: PPUSH
// uc_side := 5 ;
11725: LD_ADDR_OWVAR 20
11729: PUSH
11730: LD_INT 5
11732: ST_TO_ADDR
// uc_nation := 2 ;
11733: LD_ADDR_OWVAR 21
11737: PUSH
11738: LD_INT 2
11740: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11741: LD_ADDR_EXP 31
11745: PUSH
11746: LD_STRING Farmer
11748: PPUSH
11749: LD_INT 0
11751: PPUSH
11752: LD_STRING 
11754: PPUSH
11755: CALL 25153 0 3
11759: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11760: LD_EXP 31
11764: PPUSH
11765: LD_INT 106
11767: PPUSH
11768: LD_INT 62
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// for i := 1 to 5 do
11778: LD_ADDR_VAR 0 2
11782: PUSH
11783: DOUBLE
11784: LD_INT 1
11786: DEC
11787: ST_TO_ADDR
11788: LD_INT 5
11790: PUSH
11791: FOR_TO
11792: IFFALSE 11830
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11794: LD_INT 1
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11807: CALL_OW 44
11811: PPUSH
11812: LD_INT 105
11814: PPUSH
11815: LD_INT 64
11817: PPUSH
11818: LD_INT 3
11820: PPUSH
11821: LD_INT 0
11823: PPUSH
11824: CALL_OW 50
// end ;
11828: GO 11791
11830: POP
11831: POP
// end ; end_of_file
11832: LD_VAR 0 1
11836: RET
// every 2 2$20 + 0 0$10 do
11837: GO 11839
11839: DISABLE
// begin enable ;
11840: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 5
11846: PPUSH
11847: CALL_OW 12
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 55
// if tick > 6 6$00 then
11862: LD_OWVAR 1
11866: PUSH
11867: LD_INT 12600
11869: GREATER
11870: IFFALSE 11873
// disable ;
11872: DISABLE
// end ; end_of_file
11873: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11874: LD_VAR 0 1
11878: PUSH
11879: LD_EXP 23
11883: EQUAL
11884: IFFALSE 11893
// YouLost ( Heike ) ;
11886: LD_STRING Heike
11888: PPUSH
11889: CALL_OW 104
// if un = Aviradze then
11893: LD_VAR 0 1
11897: PUSH
11898: LD_EXP 27
11902: EQUAL
11903: IFFALSE 11912
// YouLost ( Aviradze ) ;
11905: LD_STRING Aviradze
11907: PPUSH
11908: CALL_OW 104
// if un = usLab then
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 3
11919: EQUAL
11920: IFFALSE 11929
// YouLost ( Lab ) ;
11922: LD_STRING Lab
11924: PPUSH
11925: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11929: LD_VAR 0 1
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_INT 2
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 21
11946: PUSH
11947: LD_INT 1
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 23
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 69
11973: PUSH
11974: LD_EXP 23
11978: PUSH
11979: LD_EXP 27
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: DIFF
11988: IN
11989: PUSH
11990: LD_EXP 4
11994: AND
11995: IFFALSE 12011
// lostCounter := lostCounter + 1 ;
11997: LD_ADDR_EXP 18
12001: PUSH
12002: LD_EXP 18
12006: PUSH
12007: LD_INT 1
12009: PLUS
12010: ST_TO_ADDR
// end ;
12011: PPOPN 1
12013: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12014: LD_INT 23
12016: PUSH
12017: LD_INT 2
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PUSH
12043: LD_INT 0
12045: EQUAL
12046: PUSH
12047: LD_INT 22
12049: PUSH
12050: LD_INT 2
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: PUSH
12076: LD_INT 0
12078: EQUAL
12079: AND
12080: IFFALSE 12092
12082: GO 12084
12084: DISABLE
// YouLost ( Eng ) ;
12085: LD_STRING Eng
12087: PPUSH
12088: CALL_OW 104
12092: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12093: LD_VAR 0 1
12097: PUSH
12098: LD_EXP 22
12102: IN
12103: PUSH
12104: LD_VAR 0 2
12108: PUSH
12109: LD_INT 2
12111: EQUAL
12112: AND
12113: IFFALSE 12145
// begin usSci := usSci diff un ;
12115: LD_ADDR_EXP 22
12119: PUSH
12120: LD_EXP 22
12124: PUSH
12125: LD_VAR 0 1
12129: DIFF
12130: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12131: LD_ADDR_EXP 9
12135: PUSH
12136: LD_EXP 9
12140: PUSH
12141: LD_INT 1
12143: PLUS
12144: ST_TO_ADDR
// end ; end ;
12145: PPOPN 3
12147: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12148: LD_VAR 0 1
12152: PUSH
12153: LD_INT 2
12155: EQUAL
12156: PUSH
12157: LD_VAR 0 2
12161: PUSH
12162: LD_INT 5
12164: EQUAL
12165: AND
12166: IFFALSE 12175
// YouLost ( FriendlyFire ) ;
12168: LD_STRING FriendlyFire
12170: PPUSH
12171: CALL_OW 104
// end ; end_of_file
12175: PPOPN 2
12177: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12178: LD_INT 0
12180: PPUSH
// ar_crane := 88 ;
12181: LD_ADDR_EXP 38
12185: PUSH
12186: LD_INT 88
12188: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12189: LD_ADDR_EXP 33
12193: PUSH
12194: LD_INT 89
12196: ST_TO_ADDR
// us_hack := 99 ;
12197: LD_ADDR_EXP 34
12201: PUSH
12202: LD_INT 99
12204: ST_TO_ADDR
// us_artillery := 97 ;
12205: LD_ADDR_EXP 35
12209: PUSH
12210: LD_INT 97
12212: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12213: LD_ADDR_EXP 36
12217: PUSH
12218: LD_INT 91
12220: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12221: LD_ADDR_EXP 37
12225: PUSH
12226: LD_INT 92
12228: ST_TO_ADDR
// ru_radar := 98 ;
12229: LD_ADDR_EXP 32
12233: PUSH
12234: LD_INT 98
12236: ST_TO_ADDR
// tech_Artillery := 80 ;
12237: LD_ADDR_EXP 39
12241: PUSH
12242: LD_INT 80
12244: ST_TO_ADDR
// tech_RadMat := 81 ;
12245: LD_ADDR_EXP 40
12249: PUSH
12250: LD_INT 81
12252: ST_TO_ADDR
// tech_BasicTools := 82 ;
12253: LD_ADDR_EXP 41
12257: PUSH
12258: LD_INT 82
12260: ST_TO_ADDR
// tech_Cargo := 83 ;
12261: LD_ADDR_EXP 42
12265: PUSH
12266: LD_INT 83
12268: ST_TO_ADDR
// tech_Track := 84 ;
12269: LD_ADDR_EXP 43
12273: PUSH
12274: LD_INT 84
12276: ST_TO_ADDR
// tech_Crane := 85 ;
12277: LD_ADDR_EXP 44
12281: PUSH
12282: LD_INT 85
12284: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12285: LD_ADDR_EXP 45
12289: PUSH
12290: LD_INT 86
12292: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12293: LD_ADDR_EXP 46
12297: PUSH
12298: LD_INT 87
12300: ST_TO_ADDR
// end ;
12301: LD_VAR 0 1
12305: RET
// every 1 do
12306: GO 12308
12308: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12309: CALL 12178 0 0
12313: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12314: GO 12316
12316: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12317: LD_STRING initStreamRollete();
12319: PPUSH
12320: CALL_OW 559
// InitStreamMode ;
12324: CALL 12333 0 0
// DefineStreamItems ( ) ;
12328: CALL 12773 0 0
// end ;
12332: END
// function InitStreamMode ; begin
12333: LD_INT 0
12335: PPUSH
// streamModeActive := false ;
12336: LD_ADDR_EXP 47
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// normalCounter := 36 ;
12344: LD_ADDR_EXP 48
12348: PUSH
12349: LD_INT 36
12351: ST_TO_ADDR
// hardcoreCounter := 16 ;
12352: LD_ADDR_EXP 49
12356: PUSH
12357: LD_INT 16
12359: ST_TO_ADDR
// sRocket := false ;
12360: LD_ADDR_EXP 52
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sSpeed := false ;
12368: LD_ADDR_EXP 51
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sEngine := false ;
12376: LD_ADDR_EXP 53
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sSpec := false ;
12384: LD_ADDR_EXP 50
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sLevel := false ;
12392: LD_ADDR_EXP 54
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sArmoury := false ;
12400: LD_ADDR_EXP 55
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sRadar := false ;
12408: LD_ADDR_EXP 56
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sBunker := false ;
12416: LD_ADDR_EXP 57
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sHack := false ;
12424: LD_ADDR_EXP 58
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sFire := false ;
12432: LD_ADDR_EXP 59
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sRefresh := false ;
12440: LD_ADDR_EXP 60
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sExp := false ;
12448: LD_ADDR_EXP 61
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sDepot := false ;
12456: LD_ADDR_EXP 62
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sFlag := false ;
12464: LD_ADDR_EXP 63
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sKamikadze := false ;
12472: LD_ADDR_EXP 71
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sTroll := false ;
12480: LD_ADDR_EXP 72
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sSlow := false ;
12488: LD_ADDR_EXP 73
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sLack := false ;
12496: LD_ADDR_EXP 74
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sTank := false ;
12504: LD_ADDR_EXP 76
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sRemote := false ;
12512: LD_ADDR_EXP 77
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sPowell := false ;
12520: LD_ADDR_EXP 78
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sTeleport := false ;
12528: LD_ADDR_EXP 81
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sOilTower := false ;
12536: LD_ADDR_EXP 83
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sShovel := false ;
12544: LD_ADDR_EXP 84
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sSheik := false ;
12552: LD_ADDR_EXP 85
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sEarthquake := false ;
12560: LD_ADDR_EXP 87
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sAI := false ;
12568: LD_ADDR_EXP 88
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sCargo := false ;
12576: LD_ADDR_EXP 91
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sDLaser := false ;
12584: LD_ADDR_EXP 92
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sExchange := false ;
12592: LD_ADDR_EXP 93
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sFac := false ;
12600: LD_ADDR_EXP 94
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sPower := false ;
12608: LD_ADDR_EXP 95
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sRandom := false ;
12616: LD_ADDR_EXP 96
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sShield := false ;
12624: LD_ADDR_EXP 97
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sTime := false ;
12632: LD_ADDR_EXP 98
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sTools := false ;
12640: LD_ADDR_EXP 99
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sSold := false ;
12648: LD_ADDR_EXP 64
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sDiff := false ;
12656: LD_ADDR_EXP 65
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sFog := false ;
12664: LD_ADDR_EXP 68
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sReset := false ;
12672: LD_ADDR_EXP 69
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sSun := false ;
12680: LD_ADDR_EXP 70
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sTiger := false ;
12688: LD_ADDR_EXP 66
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sBomb := false ;
12696: LD_ADDR_EXP 67
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sWound := false ;
12704: LD_ADDR_EXP 75
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sBetray := false ;
12712: LD_ADDR_EXP 79
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sContamin := false ;
12720: LD_ADDR_EXP 80
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sOil := false ;
12728: LD_ADDR_EXP 82
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sStu := false ;
12736: LD_ADDR_EXP 86
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sBazooka := false ;
12744: LD_ADDR_EXP 89
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sMortar := false ;
12752: LD_ADDR_EXP 90
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sRanger := false ;
12760: LD_ADDR_EXP 100
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// end ;
12768: LD_VAR 0 1
12772: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12773: LD_INT 0
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
// result := [ ] ;
12780: LD_ADDR_VAR 0 1
12784: PUSH
12785: EMPTY
12786: ST_TO_ADDR
// if campaign_id = 1 then
12787: LD_OWVAR 69
12791: PUSH
12792: LD_INT 1
12794: EQUAL
12795: IFFALSE 15733
// begin case mission_number of 1 :
12797: LD_OWVAR 70
12801: PUSH
12802: LD_INT 1
12804: DOUBLE
12805: EQUAL
12806: IFTRUE 12810
12808: GO 12874
12810: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12811: LD_ADDR_VAR 0 1
12815: PUSH
12816: LD_INT 2
12818: PUSH
12819: LD_INT 4
12821: PUSH
12822: LD_INT 11
12824: PUSH
12825: LD_INT 12
12827: PUSH
12828: LD_INT 15
12830: PUSH
12831: LD_INT 16
12833: PUSH
12834: LD_INT 22
12836: PUSH
12837: LD_INT 23
12839: PUSH
12840: LD_INT 26
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 101
12856: PUSH
12857: LD_INT 102
12859: PUSH
12860: LD_INT 106
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: ST_TO_ADDR
12872: GO 15731
12874: LD_INT 2
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12954
12882: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 4
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_INT 23
12911: PUSH
12912: LD_INT 26
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 101
12928: PUSH
12929: LD_INT 102
12931: PUSH
12932: LD_INT 105
12934: PUSH
12935: LD_INT 106
12937: PUSH
12938: LD_INT 108
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: ST_TO_ADDR
12952: GO 15731
12954: LD_INT 3
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 13038
12962: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 2
12970: PUSH
12971: LD_INT 4
12973: PUSH
12974: LD_INT 5
12976: PUSH
12977: LD_INT 11
12979: PUSH
12980: LD_INT 12
12982: PUSH
12983: LD_INT 15
12985: PUSH
12986: LD_INT 16
12988: PUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 101
13012: PUSH
13013: LD_INT 102
13015: PUSH
13016: LD_INT 105
13018: PUSH
13019: LD_INT 106
13021: PUSH
13022: LD_INT 108
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: ST_TO_ADDR
13036: GO 15731
13038: LD_INT 4
13040: DOUBLE
13041: EQUAL
13042: IFTRUE 13046
13044: GO 13130
13046: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13047: LD_ADDR_VAR 0 1
13051: PUSH
13052: LD_INT 2
13054: PUSH
13055: LD_INT 4
13057: PUSH
13058: LD_INT 5
13060: PUSH
13061: LD_INT 8
13063: PUSH
13064: LD_INT 11
13066: PUSH
13067: LD_INT 12
13069: PUSH
13070: LD_INT 15
13072: PUSH
13073: LD_INT 16
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_INT 23
13081: PUSH
13082: LD_INT 26
13084: PUSH
13085: LD_INT 36
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 101
13104: PUSH
13105: LD_INT 102
13107: PUSH
13108: LD_INT 105
13110: PUSH
13111: LD_INT 106
13113: PUSH
13114: LD_INT 108
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 15731
13130: LD_INT 5
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13238
13138: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 4
13149: PUSH
13150: LD_INT 5
13152: PUSH
13153: LD_INT 6
13155: PUSH
13156: LD_INT 8
13158: PUSH
13159: LD_INT 11
13161: PUSH
13162: LD_INT 12
13164: PUSH
13165: LD_INT 15
13167: PUSH
13168: LD_INT 16
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_INT 23
13176: PUSH
13177: LD_INT 25
13179: PUSH
13180: LD_INT 26
13182: PUSH
13183: LD_INT 36
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 101
13204: PUSH
13205: LD_INT 102
13207: PUSH
13208: LD_INT 105
13210: PUSH
13211: LD_INT 106
13213: PUSH
13214: LD_INT 108
13216: PUSH
13217: LD_INT 109
13219: PUSH
13220: LD_INT 112
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: ST_TO_ADDR
13236: GO 15731
13238: LD_INT 6
13240: DOUBLE
13241: EQUAL
13242: IFTRUE 13246
13244: GO 13366
13246: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 2
13254: PUSH
13255: LD_INT 4
13257: PUSH
13258: LD_INT 5
13260: PUSH
13261: LD_INT 6
13263: PUSH
13264: LD_INT 8
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 15
13275: PUSH
13276: LD_INT 16
13278: PUSH
13279: LD_INT 20
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_INT 23
13290: PUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 26
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 31
13302: PUSH
13303: LD_INT 32
13305: PUSH
13306: LD_INT 36
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 101
13332: PUSH
13333: LD_INT 102
13335: PUSH
13336: LD_INT 105
13338: PUSH
13339: LD_INT 106
13341: PUSH
13342: LD_INT 108
13344: PUSH
13345: LD_INT 109
13347: PUSH
13348: LD_INT 112
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 15731
13366: LD_INT 7
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13474
13374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_INT 2
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: LD_INT 5
13388: PUSH
13389: LD_INT 7
13391: PUSH
13392: LD_INT 11
13394: PUSH
13395: LD_INT 12
13397: PUSH
13398: LD_INT 15
13400: PUSH
13401: LD_INT 16
13403: PUSH
13404: LD_INT 20
13406: PUSH
13407: LD_INT 21
13409: PUSH
13410: LD_INT 22
13412: PUSH
13413: LD_INT 23
13415: PUSH
13416: LD_INT 25
13418: PUSH
13419: LD_INT 26
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 101
13440: PUSH
13441: LD_INT 102
13443: PUSH
13444: LD_INT 103
13446: PUSH
13447: LD_INT 105
13449: PUSH
13450: LD_INT 106
13452: PUSH
13453: LD_INT 108
13455: PUSH
13456: LD_INT 112
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: ST_TO_ADDR
13472: GO 15731
13474: LD_INT 8
13476: DOUBLE
13477: EQUAL
13478: IFTRUE 13482
13480: GO 13610
13482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13483: LD_ADDR_VAR 0 1
13487: PUSH
13488: LD_INT 2
13490: PUSH
13491: LD_INT 4
13493: PUSH
13494: LD_INT 5
13496: PUSH
13497: LD_INT 6
13499: PUSH
13500: LD_INT 7
13502: PUSH
13503: LD_INT 8
13505: PUSH
13506: LD_INT 11
13508: PUSH
13509: LD_INT 12
13511: PUSH
13512: LD_INT 15
13514: PUSH
13515: LD_INT 16
13517: PUSH
13518: LD_INT 20
13520: PUSH
13521: LD_INT 21
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_INT 23
13529: PUSH
13530: LD_INT 25
13532: PUSH
13533: LD_INT 26
13535: PUSH
13536: LD_INT 30
13538: PUSH
13539: LD_INT 31
13541: PUSH
13542: LD_INT 32
13544: PUSH
13545: LD_INT 36
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 101
13572: PUSH
13573: LD_INT 102
13575: PUSH
13576: LD_INT 103
13578: PUSH
13579: LD_INT 105
13581: PUSH
13582: LD_INT 106
13584: PUSH
13585: LD_INT 108
13587: PUSH
13588: LD_INT 109
13590: PUSH
13591: LD_INT 112
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: ST_TO_ADDR
13608: GO 15731
13610: LD_INT 9
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13754
13618: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13619: LD_ADDR_VAR 0 1
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: LD_INT 4
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: LD_INT 6
13635: PUSH
13636: LD_INT 7
13638: PUSH
13639: LD_INT 8
13641: PUSH
13642: LD_INT 11
13644: PUSH
13645: LD_INT 12
13647: PUSH
13648: LD_INT 15
13650: PUSH
13651: LD_INT 16
13653: PUSH
13654: LD_INT 20
13656: PUSH
13657: LD_INT 21
13659: PUSH
13660: LD_INT 22
13662: PUSH
13663: LD_INT 23
13665: PUSH
13666: LD_INT 25
13668: PUSH
13669: LD_INT 26
13671: PUSH
13672: LD_INT 28
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_INT 31
13680: PUSH
13681: LD_INT 32
13683: PUSH
13684: LD_INT 36
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 101
13712: PUSH
13713: LD_INT 102
13715: PUSH
13716: LD_INT 103
13718: PUSH
13719: LD_INT 105
13721: PUSH
13722: LD_INT 106
13724: PUSH
13725: LD_INT 108
13727: PUSH
13728: LD_INT 109
13730: PUSH
13731: LD_INT 112
13733: PUSH
13734: LD_INT 114
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: ST_TO_ADDR
13752: GO 15731
13754: LD_INT 10
13756: DOUBLE
13757: EQUAL
13758: IFTRUE 13762
13760: GO 13946
13762: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13763: LD_ADDR_VAR 0 1
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: LD_INT 4
13773: PUSH
13774: LD_INT 5
13776: PUSH
13777: LD_INT 6
13779: PUSH
13780: LD_INT 7
13782: PUSH
13783: LD_INT 8
13785: PUSH
13786: LD_INT 9
13788: PUSH
13789: LD_INT 10
13791: PUSH
13792: LD_INT 11
13794: PUSH
13795: LD_INT 12
13797: PUSH
13798: LD_INT 13
13800: PUSH
13801: LD_INT 14
13803: PUSH
13804: LD_INT 15
13806: PUSH
13807: LD_INT 16
13809: PUSH
13810: LD_INT 17
13812: PUSH
13813: LD_INT 18
13815: PUSH
13816: LD_INT 19
13818: PUSH
13819: LD_INT 20
13821: PUSH
13822: LD_INT 21
13824: PUSH
13825: LD_INT 22
13827: PUSH
13828: LD_INT 23
13830: PUSH
13831: LD_INT 24
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 26
13839: PUSH
13840: LD_INT 28
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 31
13848: PUSH
13849: LD_INT 32
13851: PUSH
13852: LD_INT 36
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 101
13888: PUSH
13889: LD_INT 102
13891: PUSH
13892: LD_INT 103
13894: PUSH
13895: LD_INT 104
13897: PUSH
13898: LD_INT 105
13900: PUSH
13901: LD_INT 106
13903: PUSH
13904: LD_INT 107
13906: PUSH
13907: LD_INT 108
13909: PUSH
13910: LD_INT 109
13912: PUSH
13913: LD_INT 110
13915: PUSH
13916: LD_INT 111
13918: PUSH
13919: LD_INT 112
13921: PUSH
13922: LD_INT 114
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: ST_TO_ADDR
13944: GO 15731
13946: LD_INT 11
13948: DOUBLE
13949: EQUAL
13950: IFTRUE 13954
13952: GO 14146
13954: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_INT 2
13962: PUSH
13963: LD_INT 3
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: LD_INT 5
13971: PUSH
13972: LD_INT 6
13974: PUSH
13975: LD_INT 7
13977: PUSH
13978: LD_INT 8
13980: PUSH
13981: LD_INT 9
13983: PUSH
13984: LD_INT 10
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: LD_INT 12
13992: PUSH
13993: LD_INT 13
13995: PUSH
13996: LD_INT 14
13998: PUSH
13999: LD_INT 15
14001: PUSH
14002: LD_INT 16
14004: PUSH
14005: LD_INT 17
14007: PUSH
14008: LD_INT 18
14010: PUSH
14011: LD_INT 19
14013: PUSH
14014: LD_INT 20
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 23
14025: PUSH
14026: LD_INT 24
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 26
14034: PUSH
14035: LD_INT 28
14037: PUSH
14038: LD_INT 30
14040: PUSH
14041: LD_INT 31
14043: PUSH
14044: LD_INT 32
14046: PUSH
14047: LD_INT 34
14049: PUSH
14050: LD_INT 36
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 101
14088: PUSH
14089: LD_INT 102
14091: PUSH
14092: LD_INT 103
14094: PUSH
14095: LD_INT 104
14097: PUSH
14098: LD_INT 105
14100: PUSH
14101: LD_INT 106
14103: PUSH
14104: LD_INT 107
14106: PUSH
14107: LD_INT 108
14109: PUSH
14110: LD_INT 109
14112: PUSH
14113: LD_INT 110
14115: PUSH
14116: LD_INT 111
14118: PUSH
14119: LD_INT 112
14121: PUSH
14122: LD_INT 114
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: ST_TO_ADDR
14144: GO 15731
14146: LD_INT 12
14148: DOUBLE
14149: EQUAL
14150: IFTRUE 14154
14152: GO 14362
14154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 1
14162: PUSH
14163: LD_INT 2
14165: PUSH
14166: LD_INT 3
14168: PUSH
14169: LD_INT 4
14171: PUSH
14172: LD_INT 5
14174: PUSH
14175: LD_INT 6
14177: PUSH
14178: LD_INT 7
14180: PUSH
14181: LD_INT 8
14183: PUSH
14184: LD_INT 9
14186: PUSH
14187: LD_INT 10
14189: PUSH
14190: LD_INT 11
14192: PUSH
14193: LD_INT 12
14195: PUSH
14196: LD_INT 13
14198: PUSH
14199: LD_INT 14
14201: PUSH
14202: LD_INT 15
14204: PUSH
14205: LD_INT 16
14207: PUSH
14208: LD_INT 17
14210: PUSH
14211: LD_INT 18
14213: PUSH
14214: LD_INT 19
14216: PUSH
14217: LD_INT 20
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_INT 23
14228: PUSH
14229: LD_INT 24
14231: PUSH
14232: LD_INT 25
14234: PUSH
14235: LD_INT 26
14237: PUSH
14238: LD_INT 27
14240: PUSH
14241: LD_INT 28
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 31
14249: PUSH
14250: LD_INT 32
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 34
14258: PUSH
14259: LD_INT 36
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 101
14300: PUSH
14301: LD_INT 102
14303: PUSH
14304: LD_INT 103
14306: PUSH
14307: LD_INT 104
14309: PUSH
14310: LD_INT 105
14312: PUSH
14313: LD_INT 106
14315: PUSH
14316: LD_INT 107
14318: PUSH
14319: LD_INT 108
14321: PUSH
14322: LD_INT 109
14324: PUSH
14325: LD_INT 110
14327: PUSH
14328: LD_INT 111
14330: PUSH
14331: LD_INT 112
14333: PUSH
14334: LD_INT 113
14336: PUSH
14337: LD_INT 114
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: ST_TO_ADDR
14360: GO 15731
14362: LD_INT 13
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14566
14370: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14371: LD_ADDR_VAR 0 1
14375: PUSH
14376: LD_INT 1
14378: PUSH
14379: LD_INT 2
14381: PUSH
14382: LD_INT 3
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: LD_INT 8
14393: PUSH
14394: LD_INT 9
14396: PUSH
14397: LD_INT 10
14399: PUSH
14400: LD_INT 11
14402: PUSH
14403: LD_INT 12
14405: PUSH
14406: LD_INT 14
14408: PUSH
14409: LD_INT 15
14411: PUSH
14412: LD_INT 16
14414: PUSH
14415: LD_INT 17
14417: PUSH
14418: LD_INT 18
14420: PUSH
14421: LD_INT 19
14423: PUSH
14424: LD_INT 20
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_INT 23
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: LD_INT 27
14447: PUSH
14448: LD_INT 28
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 31
14456: PUSH
14457: LD_INT 32
14459: PUSH
14460: LD_INT 33
14462: PUSH
14463: LD_INT 34
14465: PUSH
14466: LD_INT 36
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 101
14504: PUSH
14505: LD_INT 102
14507: PUSH
14508: LD_INT 103
14510: PUSH
14511: LD_INT 104
14513: PUSH
14514: LD_INT 105
14516: PUSH
14517: LD_INT 106
14519: PUSH
14520: LD_INT 107
14522: PUSH
14523: LD_INT 108
14525: PUSH
14526: LD_INT 109
14528: PUSH
14529: LD_INT 110
14531: PUSH
14532: LD_INT 111
14534: PUSH
14535: LD_INT 112
14537: PUSH
14538: LD_INT 113
14540: PUSH
14541: LD_INT 114
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: ST_TO_ADDR
14564: GO 15731
14566: LD_INT 14
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14786
14574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14575: LD_ADDR_VAR 0 1
14579: PUSH
14580: LD_INT 1
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: LD_INT 4
14591: PUSH
14592: LD_INT 5
14594: PUSH
14595: LD_INT 6
14597: PUSH
14598: LD_INT 7
14600: PUSH
14601: LD_INT 8
14603: PUSH
14604: LD_INT 9
14606: PUSH
14607: LD_INT 10
14609: PUSH
14610: LD_INT 11
14612: PUSH
14613: LD_INT 12
14615: PUSH
14616: LD_INT 13
14618: PUSH
14619: LD_INT 14
14621: PUSH
14622: LD_INT 15
14624: PUSH
14625: LD_INT 16
14627: PUSH
14628: LD_INT 17
14630: PUSH
14631: LD_INT 18
14633: PUSH
14634: LD_INT 19
14636: PUSH
14637: LD_INT 20
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_INT 23
14648: PUSH
14649: LD_INT 24
14651: PUSH
14652: LD_INT 25
14654: PUSH
14655: LD_INT 26
14657: PUSH
14658: LD_INT 27
14660: PUSH
14661: LD_INT 28
14663: PUSH
14664: LD_INT 29
14666: PUSH
14667: LD_INT 30
14669: PUSH
14670: LD_INT 31
14672: PUSH
14673: LD_INT 32
14675: PUSH
14676: LD_INT 33
14678: PUSH
14679: LD_INT 34
14681: PUSH
14682: LD_INT 36
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 101
14724: PUSH
14725: LD_INT 102
14727: PUSH
14728: LD_INT 103
14730: PUSH
14731: LD_INT 104
14733: PUSH
14734: LD_INT 105
14736: PUSH
14737: LD_INT 106
14739: PUSH
14740: LD_INT 107
14742: PUSH
14743: LD_INT 108
14745: PUSH
14746: LD_INT 109
14748: PUSH
14749: LD_INT 110
14751: PUSH
14752: LD_INT 111
14754: PUSH
14755: LD_INT 112
14757: PUSH
14758: LD_INT 113
14760: PUSH
14761: LD_INT 114
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: ST_TO_ADDR
14784: GO 15731
14786: LD_INT 15
14788: DOUBLE
14789: EQUAL
14790: IFTRUE 14794
14792: GO 15006
14794: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14795: LD_ADDR_VAR 0 1
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: LD_INT 3
14808: PUSH
14809: LD_INT 4
14811: PUSH
14812: LD_INT 5
14814: PUSH
14815: LD_INT 6
14817: PUSH
14818: LD_INT 7
14820: PUSH
14821: LD_INT 8
14823: PUSH
14824: LD_INT 9
14826: PUSH
14827: LD_INT 10
14829: PUSH
14830: LD_INT 11
14832: PUSH
14833: LD_INT 12
14835: PUSH
14836: LD_INT 13
14838: PUSH
14839: LD_INT 14
14841: PUSH
14842: LD_INT 15
14844: PUSH
14845: LD_INT 16
14847: PUSH
14848: LD_INT 17
14850: PUSH
14851: LD_INT 18
14853: PUSH
14854: LD_INT 19
14856: PUSH
14857: LD_INT 20
14859: PUSH
14860: LD_INT 21
14862: PUSH
14863: LD_INT 22
14865: PUSH
14866: LD_INT 23
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 25
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: LD_INT 27
14880: PUSH
14881: LD_INT 28
14883: PUSH
14884: LD_INT 29
14886: PUSH
14887: LD_INT 30
14889: PUSH
14890: LD_INT 31
14892: PUSH
14893: LD_INT 32
14895: PUSH
14896: LD_INT 33
14898: PUSH
14899: LD_INT 34
14901: PUSH
14902: LD_INT 36
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 101
14944: PUSH
14945: LD_INT 102
14947: PUSH
14948: LD_INT 103
14950: PUSH
14951: LD_INT 104
14953: PUSH
14954: LD_INT 105
14956: PUSH
14957: LD_INT 106
14959: PUSH
14960: LD_INT 107
14962: PUSH
14963: LD_INT 108
14965: PUSH
14966: LD_INT 109
14968: PUSH
14969: LD_INT 110
14971: PUSH
14972: LD_INT 111
14974: PUSH
14975: LD_INT 112
14977: PUSH
14978: LD_INT 113
14980: PUSH
14981: LD_INT 114
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: ST_TO_ADDR
15004: GO 15731
15006: LD_INT 16
15008: DOUBLE
15009: EQUAL
15010: IFTRUE 15014
15012: GO 15138
15014: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 2
15022: PUSH
15023: LD_INT 4
15025: PUSH
15026: LD_INT 5
15028: PUSH
15029: LD_INT 7
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 15
15040: PUSH
15041: LD_INT 16
15043: PUSH
15044: LD_INT 20
15046: PUSH
15047: LD_INT 21
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 23
15055: PUSH
15056: LD_INT 25
15058: PUSH
15059: LD_INT 26
15061: PUSH
15062: LD_INT 30
15064: PUSH
15065: LD_INT 31
15067: PUSH
15068: LD_INT 32
15070: PUSH
15071: LD_INT 33
15073: PUSH
15074: LD_INT 34
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 101
15100: PUSH
15101: LD_INT 102
15103: PUSH
15104: LD_INT 103
15106: PUSH
15107: LD_INT 106
15109: PUSH
15110: LD_INT 108
15112: PUSH
15113: LD_INT 112
15115: PUSH
15116: LD_INT 113
15118: PUSH
15119: LD_INT 114
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: ST_TO_ADDR
15136: GO 15731
15138: LD_INT 17
15140: DOUBLE
15141: EQUAL
15142: IFTRUE 15146
15144: GO 15358
15146: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: LD_INT 2
15157: PUSH
15158: LD_INT 3
15160: PUSH
15161: LD_INT 4
15163: PUSH
15164: LD_INT 5
15166: PUSH
15167: LD_INT 6
15169: PUSH
15170: LD_INT 7
15172: PUSH
15173: LD_INT 8
15175: PUSH
15176: LD_INT 9
15178: PUSH
15179: LD_INT 10
15181: PUSH
15182: LD_INT 11
15184: PUSH
15185: LD_INT 12
15187: PUSH
15188: LD_INT 13
15190: PUSH
15191: LD_INT 14
15193: PUSH
15194: LD_INT 15
15196: PUSH
15197: LD_INT 16
15199: PUSH
15200: LD_INT 17
15202: PUSH
15203: LD_INT 18
15205: PUSH
15206: LD_INT 19
15208: PUSH
15209: LD_INT 20
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 22
15217: PUSH
15218: LD_INT 23
15220: PUSH
15221: LD_INT 24
15223: PUSH
15224: LD_INT 25
15226: PUSH
15227: LD_INT 26
15229: PUSH
15230: LD_INT 27
15232: PUSH
15233: LD_INT 28
15235: PUSH
15236: LD_INT 29
15238: PUSH
15239: LD_INT 30
15241: PUSH
15242: LD_INT 31
15244: PUSH
15245: LD_INT 32
15247: PUSH
15248: LD_INT 33
15250: PUSH
15251: LD_INT 34
15253: PUSH
15254: LD_INT 36
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 101
15296: PUSH
15297: LD_INT 102
15299: PUSH
15300: LD_INT 103
15302: PUSH
15303: LD_INT 104
15305: PUSH
15306: LD_INT 105
15308: PUSH
15309: LD_INT 106
15311: PUSH
15312: LD_INT 107
15314: PUSH
15315: LD_INT 108
15317: PUSH
15318: LD_INT 109
15320: PUSH
15321: LD_INT 110
15323: PUSH
15324: LD_INT 111
15326: PUSH
15327: LD_INT 112
15329: PUSH
15330: LD_INT 113
15332: PUSH
15333: LD_INT 114
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: ST_TO_ADDR
15356: GO 15731
15358: LD_INT 18
15360: DOUBLE
15361: EQUAL
15362: IFTRUE 15366
15364: GO 15502
15366: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: LD_INT 5
15380: PUSH
15381: LD_INT 7
15383: PUSH
15384: LD_INT 11
15386: PUSH
15387: LD_INT 12
15389: PUSH
15390: LD_INT 15
15392: PUSH
15393: LD_INT 16
15395: PUSH
15396: LD_INT 20
15398: PUSH
15399: LD_INT 21
15401: PUSH
15402: LD_INT 22
15404: PUSH
15405: LD_INT 23
15407: PUSH
15408: LD_INT 25
15410: PUSH
15411: LD_INT 26
15413: PUSH
15414: LD_INT 30
15416: PUSH
15417: LD_INT 31
15419: PUSH
15420: LD_INT 32
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: LD_INT 34
15428: PUSH
15429: LD_INT 35
15431: PUSH
15432: LD_INT 36
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 101
15460: PUSH
15461: LD_INT 102
15463: PUSH
15464: LD_INT 103
15466: PUSH
15467: LD_INT 106
15469: PUSH
15470: LD_INT 108
15472: PUSH
15473: LD_INT 112
15475: PUSH
15476: LD_INT 113
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: LD_INT 115
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: ST_TO_ADDR
15500: GO 15731
15502: LD_INT 19
15504: DOUBLE
15505: EQUAL
15506: IFTRUE 15510
15508: GO 15730
15510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15511: LD_ADDR_VAR 0 1
15515: PUSH
15516: LD_INT 1
15518: PUSH
15519: LD_INT 2
15521: PUSH
15522: LD_INT 3
15524: PUSH
15525: LD_INT 4
15527: PUSH
15528: LD_INT 5
15530: PUSH
15531: LD_INT 6
15533: PUSH
15534: LD_INT 7
15536: PUSH
15537: LD_INT 8
15539: PUSH
15540: LD_INT 9
15542: PUSH
15543: LD_INT 10
15545: PUSH
15546: LD_INT 11
15548: PUSH
15549: LD_INT 12
15551: PUSH
15552: LD_INT 13
15554: PUSH
15555: LD_INT 14
15557: PUSH
15558: LD_INT 15
15560: PUSH
15561: LD_INT 16
15563: PUSH
15564: LD_INT 17
15566: PUSH
15567: LD_INT 18
15569: PUSH
15570: LD_INT 19
15572: PUSH
15573: LD_INT 20
15575: PUSH
15576: LD_INT 21
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 23
15584: PUSH
15585: LD_INT 24
15587: PUSH
15588: LD_INT 25
15590: PUSH
15591: LD_INT 26
15593: PUSH
15594: LD_INT 27
15596: PUSH
15597: LD_INT 28
15599: PUSH
15600: LD_INT 29
15602: PUSH
15603: LD_INT 30
15605: PUSH
15606: LD_INT 31
15608: PUSH
15609: LD_INT 32
15611: PUSH
15612: LD_INT 33
15614: PUSH
15615: LD_INT 34
15617: PUSH
15618: LD_INT 35
15620: PUSH
15621: LD_INT 36
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 101
15664: PUSH
15665: LD_INT 102
15667: PUSH
15668: LD_INT 103
15670: PUSH
15671: LD_INT 104
15673: PUSH
15674: LD_INT 105
15676: PUSH
15677: LD_INT 106
15679: PUSH
15680: LD_INT 107
15682: PUSH
15683: LD_INT 108
15685: PUSH
15686: LD_INT 109
15688: PUSH
15689: LD_INT 110
15691: PUSH
15692: LD_INT 111
15694: PUSH
15695: LD_INT 112
15697: PUSH
15698: LD_INT 113
15700: PUSH
15701: LD_INT 114
15703: PUSH
15704: LD_INT 115
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: ST_TO_ADDR
15728: GO 15731
15730: POP
// end else
15731: GO 15950
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15733: LD_ADDR_VAR 0 1
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: LD_INT 2
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: LD_INT 4
15749: PUSH
15750: LD_INT 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_INT 7
15758: PUSH
15759: LD_INT 8
15761: PUSH
15762: LD_INT 9
15764: PUSH
15765: LD_INT 10
15767: PUSH
15768: LD_INT 11
15770: PUSH
15771: LD_INT 12
15773: PUSH
15774: LD_INT 13
15776: PUSH
15777: LD_INT 14
15779: PUSH
15780: LD_INT 15
15782: PUSH
15783: LD_INT 16
15785: PUSH
15786: LD_INT 17
15788: PUSH
15789: LD_INT 18
15791: PUSH
15792: LD_INT 19
15794: PUSH
15795: LD_INT 20
15797: PUSH
15798: LD_INT 21
15800: PUSH
15801: LD_INT 22
15803: PUSH
15804: LD_INT 23
15806: PUSH
15807: LD_INT 24
15809: PUSH
15810: LD_INT 25
15812: PUSH
15813: LD_INT 26
15815: PUSH
15816: LD_INT 27
15818: PUSH
15819: LD_INT 28
15821: PUSH
15822: LD_INT 29
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 31
15830: PUSH
15831: LD_INT 32
15833: PUSH
15834: LD_INT 33
15836: PUSH
15837: LD_INT 34
15839: PUSH
15840: LD_INT 35
15842: PUSH
15843: LD_INT 36
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 101
15886: PUSH
15887: LD_INT 102
15889: PUSH
15890: LD_INT 103
15892: PUSH
15893: LD_INT 104
15895: PUSH
15896: LD_INT 105
15898: PUSH
15899: LD_INT 106
15901: PUSH
15902: LD_INT 107
15904: PUSH
15905: LD_INT 108
15907: PUSH
15908: LD_INT 109
15910: PUSH
15911: LD_INT 110
15913: PUSH
15914: LD_INT 111
15916: PUSH
15917: LD_INT 112
15919: PUSH
15920: LD_INT 113
15922: PUSH
15923: LD_INT 114
15925: PUSH
15926: LD_INT 115
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: ST_TO_ADDR
// if result then
15950: LD_VAR 0 1
15954: IFFALSE 16243
// begin normal :=  ;
15956: LD_ADDR_VAR 0 3
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hardcore :=  ;
15964: LD_ADDR_VAR 0 4
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// for i = 1 to normalCounter do
15972: LD_ADDR_VAR 0 5
15976: PUSH
15977: DOUBLE
15978: LD_INT 1
15980: DEC
15981: ST_TO_ADDR
15982: LD_EXP 48
15986: PUSH
15987: FOR_TO
15988: IFFALSE 16089
// begin tmp := 0 ;
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: LD_STRING 0
15997: ST_TO_ADDR
// if result [ 1 ] then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_INT 1
16005: ARRAY
16006: IFFALSE 16071
// if result [ 1 ] [ 1 ] = i then
16008: LD_VAR 0 1
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PUSH
16017: LD_INT 1
16019: ARRAY
16020: PUSH
16021: LD_VAR 0 5
16025: EQUAL
16026: IFFALSE 16071
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16028: LD_ADDR_VAR 0 1
16032: PUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: LD_VAR 0 1
16045: PUSH
16046: LD_INT 1
16048: ARRAY
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: CALL_OW 3
16057: PPUSH
16058: CALL_OW 1
16062: ST_TO_ADDR
// tmp := 1 ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_STRING 1
16070: ST_TO_ADDR
// end ; normal := normal & tmp ;
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_VAR 0 3
16080: PUSH
16081: LD_VAR 0 2
16085: STR
16086: ST_TO_ADDR
// end ;
16087: GO 15987
16089: POP
16090: POP
// for i = 1 to hardcoreCounter do
16091: LD_ADDR_VAR 0 5
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_EXP 49
16105: PUSH
16106: FOR_TO
16107: IFFALSE 16212
// begin tmp := 0 ;
16109: LD_ADDR_VAR 0 2
16113: PUSH
16114: LD_STRING 0
16116: ST_TO_ADDR
// if result [ 2 ] then
16117: LD_VAR 0 1
16121: PUSH
16122: LD_INT 2
16124: ARRAY
16125: IFFALSE 16194
// if result [ 2 ] [ 1 ] = 100 + i then
16127: LD_VAR 0 1
16131: PUSH
16132: LD_INT 2
16134: ARRAY
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PUSH
16140: LD_INT 100
16142: PUSH
16143: LD_VAR 0 5
16147: PLUS
16148: EQUAL
16149: IFFALSE 16194
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16151: LD_ADDR_VAR 0 1
16155: PUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: LD_INT 2
16163: PPUSH
16164: LD_VAR 0 1
16168: PUSH
16169: LD_INT 2
16171: ARRAY
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 3
16180: PPUSH
16181: CALL_OW 1
16185: ST_TO_ADDR
// tmp := 1 ;
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_STRING 1
16193: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_VAR 0 4
16203: PUSH
16204: LD_VAR 0 2
16208: STR
16209: ST_TO_ADDR
// end ;
16210: GO 16106
16212: POP
16213: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16214: LD_STRING getStreamItemsFromMission("
16216: PUSH
16217: LD_VAR 0 3
16221: STR
16222: PUSH
16223: LD_STRING ","
16225: STR
16226: PUSH
16227: LD_VAR 0 4
16231: STR
16232: PUSH
16233: LD_STRING ")
16235: STR
16236: PPUSH
16237: CALL_OW 559
// end else
16241: GO 16250
// ToLua ( getStreamItemsFromMission("","") ) ;
16243: LD_STRING getStreamItemsFromMission("","")
16245: PPUSH
16246: CALL_OW 559
// end ;
16250: LD_VAR 0 1
16254: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
16255: LD_VAR 0 2
16259: PUSH
16260: LD_INT 100
16262: EQUAL
16263: IFFALSE 17212
// begin if not StreamModeActive then
16265: LD_EXP 47
16269: NOT
16270: IFFALSE 16280
// StreamModeActive := true ;
16272: LD_ADDR_EXP 47
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if p3 = 0 then
16280: LD_VAR 0 3
16284: PUSH
16285: LD_INT 0
16287: EQUAL
16288: IFFALSE 16294
// InitStreamMode ;
16290: CALL 12333 0 0
// if p3 = 1 then
16294: LD_VAR 0 3
16298: PUSH
16299: LD_INT 1
16301: EQUAL
16302: IFFALSE 16312
// sRocket := true ;
16304: LD_ADDR_EXP 52
16308: PUSH
16309: LD_INT 1
16311: ST_TO_ADDR
// if p3 = 2 then
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 2
16319: EQUAL
16320: IFFALSE 16330
// sSpeed := true ;
16322: LD_ADDR_EXP 51
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// if p3 = 3 then
16330: LD_VAR 0 3
16334: PUSH
16335: LD_INT 3
16337: EQUAL
16338: IFFALSE 16348
// sEngine := true ;
16340: LD_ADDR_EXP 53
16344: PUSH
16345: LD_INT 1
16347: ST_TO_ADDR
// if p3 = 4 then
16348: LD_VAR 0 3
16352: PUSH
16353: LD_INT 4
16355: EQUAL
16356: IFFALSE 16366
// sSpec := true ;
16358: LD_ADDR_EXP 50
16362: PUSH
16363: LD_INT 1
16365: ST_TO_ADDR
// if p3 = 5 then
16366: LD_VAR 0 3
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: IFFALSE 16384
// sLevel := true ;
16376: LD_ADDR_EXP 54
16380: PUSH
16381: LD_INT 1
16383: ST_TO_ADDR
// if p3 = 6 then
16384: LD_VAR 0 3
16388: PUSH
16389: LD_INT 6
16391: EQUAL
16392: IFFALSE 16402
// sArmoury := true ;
16394: LD_ADDR_EXP 55
16398: PUSH
16399: LD_INT 1
16401: ST_TO_ADDR
// if p3 = 7 then
16402: LD_VAR 0 3
16406: PUSH
16407: LD_INT 7
16409: EQUAL
16410: IFFALSE 16420
// sRadar := true ;
16412: LD_ADDR_EXP 56
16416: PUSH
16417: LD_INT 1
16419: ST_TO_ADDR
// if p3 = 8 then
16420: LD_VAR 0 3
16424: PUSH
16425: LD_INT 8
16427: EQUAL
16428: IFFALSE 16438
// sBunker := true ;
16430: LD_ADDR_EXP 57
16434: PUSH
16435: LD_INT 1
16437: ST_TO_ADDR
// if p3 = 9 then
16438: LD_VAR 0 3
16442: PUSH
16443: LD_INT 9
16445: EQUAL
16446: IFFALSE 16456
// sHack := true ;
16448: LD_ADDR_EXP 58
16452: PUSH
16453: LD_INT 1
16455: ST_TO_ADDR
// if p3 = 10 then
16456: LD_VAR 0 3
16460: PUSH
16461: LD_INT 10
16463: EQUAL
16464: IFFALSE 16474
// sFire := true ;
16466: LD_ADDR_EXP 59
16470: PUSH
16471: LD_INT 1
16473: ST_TO_ADDR
// if p3 = 11 then
16474: LD_VAR 0 3
16478: PUSH
16479: LD_INT 11
16481: EQUAL
16482: IFFALSE 16492
// sRefresh := true ;
16484: LD_ADDR_EXP 60
16488: PUSH
16489: LD_INT 1
16491: ST_TO_ADDR
// if p3 = 12 then
16492: LD_VAR 0 3
16496: PUSH
16497: LD_INT 12
16499: EQUAL
16500: IFFALSE 16510
// sExp := true ;
16502: LD_ADDR_EXP 61
16506: PUSH
16507: LD_INT 1
16509: ST_TO_ADDR
// if p3 = 13 then
16510: LD_VAR 0 3
16514: PUSH
16515: LD_INT 13
16517: EQUAL
16518: IFFALSE 16528
// sDepot := true ;
16520: LD_ADDR_EXP 62
16524: PUSH
16525: LD_INT 1
16527: ST_TO_ADDR
// if p3 = 14 then
16528: LD_VAR 0 3
16532: PUSH
16533: LD_INT 14
16535: EQUAL
16536: IFFALSE 16546
// sFlag := true ;
16538: LD_ADDR_EXP 63
16542: PUSH
16543: LD_INT 1
16545: ST_TO_ADDR
// if p3 = 15 then
16546: LD_VAR 0 3
16550: PUSH
16551: LD_INT 15
16553: EQUAL
16554: IFFALSE 16564
// sKamikadze := true ;
16556: LD_ADDR_EXP 71
16560: PUSH
16561: LD_INT 1
16563: ST_TO_ADDR
// if p3 = 16 then
16564: LD_VAR 0 3
16568: PUSH
16569: LD_INT 16
16571: EQUAL
16572: IFFALSE 16582
// sTroll := true ;
16574: LD_ADDR_EXP 72
16578: PUSH
16579: LD_INT 1
16581: ST_TO_ADDR
// if p3 = 17 then
16582: LD_VAR 0 3
16586: PUSH
16587: LD_INT 17
16589: EQUAL
16590: IFFALSE 16600
// sSlow := true ;
16592: LD_ADDR_EXP 73
16596: PUSH
16597: LD_INT 1
16599: ST_TO_ADDR
// if p3 = 18 then
16600: LD_VAR 0 3
16604: PUSH
16605: LD_INT 18
16607: EQUAL
16608: IFFALSE 16618
// sLack := true ;
16610: LD_ADDR_EXP 74
16614: PUSH
16615: LD_INT 1
16617: ST_TO_ADDR
// if p3 = 19 then
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 19
16625: EQUAL
16626: IFFALSE 16636
// sTank := true ;
16628: LD_ADDR_EXP 76
16632: PUSH
16633: LD_INT 1
16635: ST_TO_ADDR
// if p3 = 20 then
16636: LD_VAR 0 3
16640: PUSH
16641: LD_INT 20
16643: EQUAL
16644: IFFALSE 16654
// sRemote := true ;
16646: LD_ADDR_EXP 77
16650: PUSH
16651: LD_INT 1
16653: ST_TO_ADDR
// if p3 = 21 then
16654: LD_VAR 0 3
16658: PUSH
16659: LD_INT 21
16661: EQUAL
16662: IFFALSE 16672
// sPowell := true ;
16664: LD_ADDR_EXP 78
16668: PUSH
16669: LD_INT 1
16671: ST_TO_ADDR
// if p3 = 22 then
16672: LD_VAR 0 3
16676: PUSH
16677: LD_INT 22
16679: EQUAL
16680: IFFALSE 16690
// sTeleport := true ;
16682: LD_ADDR_EXP 81
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// if p3 = 23 then
16690: LD_VAR 0 3
16694: PUSH
16695: LD_INT 23
16697: EQUAL
16698: IFFALSE 16708
// sOilTower := true ;
16700: LD_ADDR_EXP 83
16704: PUSH
16705: LD_INT 1
16707: ST_TO_ADDR
// if p3 = 24 then
16708: LD_VAR 0 3
16712: PUSH
16713: LD_INT 24
16715: EQUAL
16716: IFFALSE 16726
// sShovel := true ;
16718: LD_ADDR_EXP 84
16722: PUSH
16723: LD_INT 1
16725: ST_TO_ADDR
// if p3 = 25 then
16726: LD_VAR 0 3
16730: PUSH
16731: LD_INT 25
16733: EQUAL
16734: IFFALSE 16744
// sSheik := true ;
16736: LD_ADDR_EXP 85
16740: PUSH
16741: LD_INT 1
16743: ST_TO_ADDR
// if p3 = 26 then
16744: LD_VAR 0 3
16748: PUSH
16749: LD_INT 26
16751: EQUAL
16752: IFFALSE 16762
// sEarthquake := true ;
16754: LD_ADDR_EXP 87
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// if p3 = 27 then
16762: LD_VAR 0 3
16766: PUSH
16767: LD_INT 27
16769: EQUAL
16770: IFFALSE 16780
// sAI := true ;
16772: LD_ADDR_EXP 88
16776: PUSH
16777: LD_INT 1
16779: ST_TO_ADDR
// if p3 = 28 then
16780: LD_VAR 0 3
16784: PUSH
16785: LD_INT 28
16787: EQUAL
16788: IFFALSE 16798
// sCargo := true ;
16790: LD_ADDR_EXP 91
16794: PUSH
16795: LD_INT 1
16797: ST_TO_ADDR
// if p3 = 29 then
16798: LD_VAR 0 3
16802: PUSH
16803: LD_INT 29
16805: EQUAL
16806: IFFALSE 16816
// sDLaser := true ;
16808: LD_ADDR_EXP 92
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// if p3 = 30 then
16816: LD_VAR 0 3
16820: PUSH
16821: LD_INT 30
16823: EQUAL
16824: IFFALSE 16834
// sExchange := true ;
16826: LD_ADDR_EXP 93
16830: PUSH
16831: LD_INT 1
16833: ST_TO_ADDR
// if p3 = 31 then
16834: LD_VAR 0 3
16838: PUSH
16839: LD_INT 31
16841: EQUAL
16842: IFFALSE 16852
// sFac := true ;
16844: LD_ADDR_EXP 94
16848: PUSH
16849: LD_INT 1
16851: ST_TO_ADDR
// if p3 = 32 then
16852: LD_VAR 0 3
16856: PUSH
16857: LD_INT 32
16859: EQUAL
16860: IFFALSE 16870
// sPower := true ;
16862: LD_ADDR_EXP 95
16866: PUSH
16867: LD_INT 1
16869: ST_TO_ADDR
// if p3 = 33 then
16870: LD_VAR 0 3
16874: PUSH
16875: LD_INT 33
16877: EQUAL
16878: IFFALSE 16888
// sRandom := true ;
16880: LD_ADDR_EXP 96
16884: PUSH
16885: LD_INT 1
16887: ST_TO_ADDR
// if p3 = 34 then
16888: LD_VAR 0 3
16892: PUSH
16893: LD_INT 34
16895: EQUAL
16896: IFFALSE 16906
// sShield := true ;
16898: LD_ADDR_EXP 97
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// if p3 = 35 then
16906: LD_VAR 0 3
16910: PUSH
16911: LD_INT 35
16913: EQUAL
16914: IFFALSE 16924
// sTime := true ;
16916: LD_ADDR_EXP 98
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// if p3 = 36 then
16924: LD_VAR 0 3
16928: PUSH
16929: LD_INT 36
16931: EQUAL
16932: IFFALSE 16942
// sTools := true ;
16934: LD_ADDR_EXP 99
16938: PUSH
16939: LD_INT 1
16941: ST_TO_ADDR
// if p3 = 101 then
16942: LD_VAR 0 3
16946: PUSH
16947: LD_INT 101
16949: EQUAL
16950: IFFALSE 16960
// sSold := true ;
16952: LD_ADDR_EXP 64
16956: PUSH
16957: LD_INT 1
16959: ST_TO_ADDR
// if p3 = 102 then
16960: LD_VAR 0 3
16964: PUSH
16965: LD_INT 102
16967: EQUAL
16968: IFFALSE 16978
// sDiff := true ;
16970: LD_ADDR_EXP 65
16974: PUSH
16975: LD_INT 1
16977: ST_TO_ADDR
// if p3 = 103 then
16978: LD_VAR 0 3
16982: PUSH
16983: LD_INT 103
16985: EQUAL
16986: IFFALSE 16996
// sFog := true ;
16988: LD_ADDR_EXP 68
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// if p3 = 104 then
16996: LD_VAR 0 3
17000: PUSH
17001: LD_INT 104
17003: EQUAL
17004: IFFALSE 17014
// sReset := true ;
17006: LD_ADDR_EXP 69
17010: PUSH
17011: LD_INT 1
17013: ST_TO_ADDR
// if p3 = 105 then
17014: LD_VAR 0 3
17018: PUSH
17019: LD_INT 105
17021: EQUAL
17022: IFFALSE 17032
// sSun := true ;
17024: LD_ADDR_EXP 70
17028: PUSH
17029: LD_INT 1
17031: ST_TO_ADDR
// if p3 = 106 then
17032: LD_VAR 0 3
17036: PUSH
17037: LD_INT 106
17039: EQUAL
17040: IFFALSE 17050
// sTiger := true ;
17042: LD_ADDR_EXP 66
17046: PUSH
17047: LD_INT 1
17049: ST_TO_ADDR
// if p3 = 107 then
17050: LD_VAR 0 3
17054: PUSH
17055: LD_INT 107
17057: EQUAL
17058: IFFALSE 17068
// sBomb := true ;
17060: LD_ADDR_EXP 67
17064: PUSH
17065: LD_INT 1
17067: ST_TO_ADDR
// if p3 = 108 then
17068: LD_VAR 0 3
17072: PUSH
17073: LD_INT 108
17075: EQUAL
17076: IFFALSE 17086
// sWound := true ;
17078: LD_ADDR_EXP 75
17082: PUSH
17083: LD_INT 1
17085: ST_TO_ADDR
// if p3 = 109 then
17086: LD_VAR 0 3
17090: PUSH
17091: LD_INT 109
17093: EQUAL
17094: IFFALSE 17104
// sBetray := true ;
17096: LD_ADDR_EXP 79
17100: PUSH
17101: LD_INT 1
17103: ST_TO_ADDR
// if p3 = 110 then
17104: LD_VAR 0 3
17108: PUSH
17109: LD_INT 110
17111: EQUAL
17112: IFFALSE 17122
// sContamin := true ;
17114: LD_ADDR_EXP 80
17118: PUSH
17119: LD_INT 1
17121: ST_TO_ADDR
// if p3 = 111 then
17122: LD_VAR 0 3
17126: PUSH
17127: LD_INT 111
17129: EQUAL
17130: IFFALSE 17140
// sOil := true ;
17132: LD_ADDR_EXP 82
17136: PUSH
17137: LD_INT 1
17139: ST_TO_ADDR
// if p3 = 112 then
17140: LD_VAR 0 3
17144: PUSH
17145: LD_INT 112
17147: EQUAL
17148: IFFALSE 17158
// sStu := true ;
17150: LD_ADDR_EXP 86
17154: PUSH
17155: LD_INT 1
17157: ST_TO_ADDR
// if p3 = 113 then
17158: LD_VAR 0 3
17162: PUSH
17163: LD_INT 113
17165: EQUAL
17166: IFFALSE 17176
// sBazooka := true ;
17168: LD_ADDR_EXP 89
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// if p3 = 114 then
17176: LD_VAR 0 3
17180: PUSH
17181: LD_INT 114
17183: EQUAL
17184: IFFALSE 17194
// sMortar := true ;
17186: LD_ADDR_EXP 90
17190: PUSH
17191: LD_INT 1
17193: ST_TO_ADDR
// if p3 = 115 then
17194: LD_VAR 0 3
17198: PUSH
17199: LD_INT 115
17201: EQUAL
17202: IFFALSE 17212
// sRanger := true ;
17204: LD_ADDR_EXP 100
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// end ; end ;
17212: PPOPN 6
17214: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17215: LD_EXP 47
17219: PUSH
17220: LD_EXP 52
17224: AND
17225: IFFALSE 17349
17227: GO 17229
17229: DISABLE
17230: LD_INT 0
17232: PPUSH
17233: PPUSH
// begin enable ;
17234: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17235: LD_ADDR_VAR 0 2
17239: PUSH
17240: LD_INT 22
17242: PUSH
17243: LD_OWVAR 2
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: LD_INT 34
17257: PUSH
17258: LD_INT 7
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 34
17267: PUSH
17268: LD_INT 45
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 34
17277: PUSH
17278: LD_INT 28
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 34
17287: PUSH
17288: LD_INT 47
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: ST_TO_ADDR
// if not tmp then
17311: LD_VAR 0 2
17315: NOT
17316: IFFALSE 17320
// exit ;
17318: GO 17349
// for i in tmp do
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: LD_VAR 0 2
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17347
// begin SetLives ( i , 0 ) ;
17333: LD_VAR 0 1
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 234
// end ;
17345: GO 17330
17347: POP
17348: POP
// end ;
17349: PPOPN 2
17351: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17352: LD_EXP 47
17356: PUSH
17357: LD_EXP 53
17361: AND
17362: IFFALSE 17446
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
17370: PPUSH
// begin enable ;
17371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17372: LD_ADDR_VAR 0 2
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_OWVAR 2
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 32
17391: PUSH
17392: LD_INT 3
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PPUSH
17403: CALL_OW 69
17407: ST_TO_ADDR
// if not tmp then
17408: LD_VAR 0 2
17412: NOT
17413: IFFALSE 17417
// exit ;
17415: GO 17446
// for i in tmp do
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_VAR 0 2
17426: PUSH
17427: FOR_IN
17428: IFFALSE 17444
// begin SetLives ( i , 0 ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 0
17437: PPUSH
17438: CALL_OW 234
// end ;
17442: GO 17427
17444: POP
17445: POP
// end ;
17446: PPOPN 2
17448: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17449: LD_EXP 47
17453: PUSH
17454: LD_EXP 50
17458: AND
17459: IFFALSE 17552
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
// begin enable ;
17467: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17468: LD_ADDR_VAR 0 1
17472: PUSH
17473: LD_INT 22
17475: PUSH
17476: LD_OWVAR 2
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 25
17490: PUSH
17491: LD_INT 5
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 25
17500: PUSH
17501: LD_INT 9
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 25
17510: PUSH
17511: LD_INT 8
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: PUSH
17533: FOR_IN
17534: IFFALSE 17550
// begin SetClass ( i , 1 ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: CALL_OW 336
// end ;
17548: GO 17533
17550: POP
17551: POP
// end ;
17552: PPOPN 1
17554: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17555: LD_EXP 47
17559: PUSH
17560: LD_EXP 51
17564: AND
17565: PUSH
17566: LD_OWVAR 65
17570: PUSH
17571: LD_INT 7
17573: LESS
17574: AND
17575: IFFALSE 17589
17577: GO 17579
17579: DISABLE
// begin enable ;
17580: ENABLE
// game_speed := 7 ;
17581: LD_ADDR_OWVAR 65
17585: PUSH
17586: LD_INT 7
17588: ST_TO_ADDR
// end ;
17589: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17590: LD_EXP 47
17594: PUSH
17595: LD_EXP 54
17599: AND
17600: IFFALSE 17802
17602: GO 17604
17604: DISABLE
17605: LD_INT 0
17607: PPUSH
17608: PPUSH
17609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: LD_INT 81
17617: PUSH
17618: LD_OWVAR 2
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: ST_TO_ADDR
// if not tmp then
17646: LD_VAR 0 3
17650: NOT
17651: IFFALSE 17655
// exit ;
17653: GO 17802
// if tmp > 5 then
17655: LD_VAR 0 3
17659: PUSH
17660: LD_INT 5
17662: GREATER
17663: IFFALSE 17675
// k := 5 else
17665: LD_ADDR_VAR 0 2
17669: PUSH
17670: LD_INT 5
17672: ST_TO_ADDR
17673: GO 17685
// k := tmp ;
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_VAR 0 3
17684: ST_TO_ADDR
// for i := 1 to k do
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: DOUBLE
17691: LD_INT 1
17693: DEC
17694: ST_TO_ADDR
17695: LD_VAR 0 2
17699: PUSH
17700: FOR_TO
17701: IFFALSE 17800
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_VAR 0 1
17712: ARRAY
17713: PPUSH
17714: LD_VAR 0 1
17718: PUSH
17719: LD_INT 4
17721: MOD
17722: PUSH
17723: LD_INT 1
17725: PLUS
17726: PPUSH
17727: CALL_OW 259
17731: PUSH
17732: LD_INT 10
17734: LESS
17735: IFFALSE 17798
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17737: LD_VAR 0 3
17741: PUSH
17742: LD_VAR 0 1
17746: ARRAY
17747: PPUSH
17748: LD_VAR 0 1
17752: PUSH
17753: LD_INT 4
17755: MOD
17756: PUSH
17757: LD_INT 1
17759: PLUS
17760: PPUSH
17761: LD_VAR 0 3
17765: PUSH
17766: LD_VAR 0 1
17770: ARRAY
17771: PPUSH
17772: LD_VAR 0 1
17776: PUSH
17777: LD_INT 4
17779: MOD
17780: PUSH
17781: LD_INT 1
17783: PLUS
17784: PPUSH
17785: CALL_OW 259
17789: PUSH
17790: LD_INT 1
17792: PLUS
17793: PPUSH
17794: CALL_OW 237
17798: GO 17700
17800: POP
17801: POP
// end ;
17802: PPOPN 3
17804: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17805: LD_EXP 47
17809: PUSH
17810: LD_EXP 55
17814: AND
17815: IFFALSE 17835
17817: GO 17819
17819: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17820: LD_INT 4
17822: PPUSH
17823: LD_OWVAR 2
17827: PPUSH
17828: LD_INT 0
17830: PPUSH
17831: CALL_OW 324
17835: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17836: LD_EXP 47
17840: PUSH
17841: LD_EXP 84
17845: AND
17846: IFFALSE 17866
17848: GO 17850
17850: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17851: LD_INT 19
17853: PPUSH
17854: LD_OWVAR 2
17858: PPUSH
17859: LD_INT 0
17861: PPUSH
17862: CALL_OW 324
17866: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17867: LD_EXP 47
17871: PUSH
17872: LD_EXP 56
17876: AND
17877: IFFALSE 17979
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
// begin enable ;
17886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17887: LD_ADDR_VAR 0 2
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: LD_INT 34
17909: PUSH
17910: LD_INT 11
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 34
17919: PUSH
17920: LD_INT 30
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PPUSH
17936: CALL_OW 69
17940: ST_TO_ADDR
// if not tmp then
17941: LD_VAR 0 2
17945: NOT
17946: IFFALSE 17950
// exit ;
17948: GO 17979
// for i in tmp do
17950: LD_ADDR_VAR 0 1
17954: PUSH
17955: LD_VAR 0 2
17959: PUSH
17960: FOR_IN
17961: IFFALSE 17977
// begin SetLives ( i , 0 ) ;
17963: LD_VAR 0 1
17967: PPUSH
17968: LD_INT 0
17970: PPUSH
17971: CALL_OW 234
// end ;
17975: GO 17960
17977: POP
17978: POP
// end ;
17979: PPOPN 2
17981: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17982: LD_EXP 47
17986: PUSH
17987: LD_EXP 57
17991: AND
17992: IFFALSE 18012
17994: GO 17996
17996: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17997: LD_INT 32
17999: PPUSH
18000: LD_OWVAR 2
18004: PPUSH
18005: LD_INT 0
18007: PPUSH
18008: CALL_OW 324
18012: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18013: LD_EXP 47
18017: PUSH
18018: LD_EXP 58
18022: AND
18023: IFFALSE 18204
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
18031: PPUSH
18032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18033: LD_ADDR_VAR 0 2
18037: PUSH
18038: LD_INT 22
18040: PUSH
18041: LD_OWVAR 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 33
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: ST_TO_ADDR
// if not tmp then
18069: LD_VAR 0 2
18073: NOT
18074: IFFALSE 18078
// exit ;
18076: GO 18204
// side := 0 ;
18078: LD_ADDR_VAR 0 3
18082: PUSH
18083: LD_INT 0
18085: ST_TO_ADDR
// for i := 1 to 8 do
18086: LD_ADDR_VAR 0 1
18090: PUSH
18091: DOUBLE
18092: LD_INT 1
18094: DEC
18095: ST_TO_ADDR
18096: LD_INT 8
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18148
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18102: LD_OWVAR 2
18106: PUSH
18107: LD_VAR 0 1
18111: NONEQUAL
18112: PUSH
18113: LD_OWVAR 2
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 81
18127: PUSH
18128: LD_INT 2
18130: EQUAL
18131: AND
18132: IFFALSE 18146
// begin side := i ;
18134: LD_ADDR_VAR 0 3
18138: PUSH
18139: LD_VAR 0 1
18143: ST_TO_ADDR
// break ;
18144: GO 18148
// end ;
18146: GO 18099
18148: POP
18149: POP
// if not side then
18150: LD_VAR 0 3
18154: NOT
18155: IFFALSE 18159
// exit ;
18157: GO 18204
// for i := 1 to tmp do
18159: LD_ADDR_VAR 0 1
18163: PUSH
18164: DOUBLE
18165: LD_INT 1
18167: DEC
18168: ST_TO_ADDR
18169: LD_VAR 0 2
18173: PUSH
18174: FOR_TO
18175: IFFALSE 18202
// if Prob ( 60 ) then
18177: LD_INT 60
18179: PPUSH
18180: CALL_OW 13
18184: IFFALSE 18200
// SetSide ( i , side ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: CALL_OW 235
18200: GO 18174
18202: POP
18203: POP
// end ;
18204: PPOPN 3
18206: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18207: LD_EXP 47
18211: PUSH
18212: LD_EXP 60
18216: AND
18217: IFFALSE 18336
18219: GO 18221
18221: DISABLE
18222: LD_INT 0
18224: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18225: LD_ADDR_VAR 0 1
18229: PUSH
18230: LD_INT 22
18232: PUSH
18233: LD_OWVAR 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 21
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: LD_INT 23
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: PUSH
18279: FOR_IN
18280: IFFALSE 18334
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 257
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: LD_INT 4
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: IN
18310: IFFALSE 18332
// SetClass ( un , rand ( 1 , 4 ) ) ;
18312: LD_VAR 0 1
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: LD_INT 4
18322: PPUSH
18323: CALL_OW 12
18327: PPUSH
18328: CALL_OW 336
18332: GO 18279
18334: POP
18335: POP
// end ;
18336: PPOPN 1
18338: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18339: LD_EXP 47
18343: PUSH
18344: LD_EXP 59
18348: AND
18349: IFFALSE 18428
18351: GO 18353
18353: DISABLE
18354: LD_INT 0
18356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18357: LD_ADDR_VAR 0 1
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_OWVAR 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 3
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: ST_TO_ADDR
// if not tmp then
18393: LD_VAR 0 1
18397: NOT
18398: IFFALSE 18402
// exit ;
18400: GO 18428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 12
18419: ARRAY
18420: PPUSH
18421: LD_INT 100
18423: PPUSH
18424: CALL_OW 234
// end ;
18428: PPOPN 1
18430: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18431: LD_EXP 47
18435: PUSH
18436: LD_EXP 61
18440: AND
18441: IFFALSE 18539
18443: GO 18445
18445: DISABLE
18446: LD_INT 0
18448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18449: LD_ADDR_VAR 0 1
18453: PUSH
18454: LD_INT 22
18456: PUSH
18457: LD_OWVAR 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 21
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PPUSH
18480: CALL_OW 69
18484: ST_TO_ADDR
// if not tmp then
18485: LD_VAR 0 1
18489: NOT
18490: IFFALSE 18494
// exit ;
18492: GO 18539
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18494: LD_VAR 0 1
18498: PUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 12
18511: ARRAY
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: LD_INT 4
18518: PPUSH
18519: CALL_OW 12
18523: PPUSH
18524: LD_INT 3000
18526: PPUSH
18527: LD_INT 9000
18529: PPUSH
18530: CALL_OW 12
18534: PPUSH
18535: CALL_OW 492
// end ;
18539: PPOPN 1
18541: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18542: LD_EXP 47
18546: PUSH
18547: LD_EXP 62
18551: AND
18552: IFFALSE 18572
18554: GO 18556
18556: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18557: LD_INT 1
18559: PPUSH
18560: LD_OWVAR 2
18564: PPUSH
18565: LD_INT 0
18567: PPUSH
18568: CALL_OW 324
18572: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18573: LD_EXP 47
18577: PUSH
18578: LD_EXP 63
18582: AND
18583: IFFALSE 18666
18585: GO 18587
18587: DISABLE
18588: LD_INT 0
18590: PPUSH
18591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18592: LD_ADDR_VAR 0 2
18596: PUSH
18597: LD_INT 22
18599: PUSH
18600: LD_OWVAR 2
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 21
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PPUSH
18623: CALL_OW 69
18627: ST_TO_ADDR
// if not tmp then
18628: LD_VAR 0 2
18632: NOT
18633: IFFALSE 18637
// exit ;
18635: GO 18666
// for i in tmp do
18637: LD_ADDR_VAR 0 1
18641: PUSH
18642: LD_VAR 0 2
18646: PUSH
18647: FOR_IN
18648: IFFALSE 18664
// SetBLevel ( i , 10 ) ;
18650: LD_VAR 0 1
18654: PPUSH
18655: LD_INT 10
18657: PPUSH
18658: CALL_OW 241
18662: GO 18647
18664: POP
18665: POP
// end ;
18666: PPOPN 2
18668: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18669: LD_EXP 47
18673: PUSH
18674: LD_EXP 64
18678: AND
18679: IFFALSE 18790
18681: GO 18683
18683: DISABLE
18684: LD_INT 0
18686: PPUSH
18687: PPUSH
18688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: LD_INT 22
18696: PUSH
18697: LD_OWVAR 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 25
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PPUSH
18720: CALL_OW 69
18724: ST_TO_ADDR
// if not tmp then
18725: LD_VAR 0 3
18729: NOT
18730: IFFALSE 18734
// exit ;
18732: GO 18790
// un := tmp [ rand ( 1 , tmp ) ] ;
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_VAR 0 3
18751: PPUSH
18752: CALL_OW 12
18756: ARRAY
18757: ST_TO_ADDR
// if Crawls ( un ) then
18758: LD_VAR 0 2
18762: PPUSH
18763: CALL_OW 318
18767: IFFALSE 18778
// ComWalk ( un ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18778: LD_VAR 0 2
18782: PPUSH
18783: LD_INT 5
18785: PPUSH
18786: CALL_OW 336
// end ;
18790: PPOPN 3
18792: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18793: LD_EXP 47
18797: PUSH
18798: LD_EXP 65
18802: AND
18803: PUSH
18804: LD_OWVAR 67
18808: PUSH
18809: LD_INT 3
18811: LESS
18812: AND
18813: IFFALSE 18832
18815: GO 18817
18817: DISABLE
// Difficulty := Difficulty + 1 ;
18818: LD_ADDR_OWVAR 67
18822: PUSH
18823: LD_OWVAR 67
18827: PUSH
18828: LD_INT 1
18830: PLUS
18831: ST_TO_ADDR
18832: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18833: LD_EXP 47
18837: PUSH
18838: LD_EXP 66
18842: AND
18843: IFFALSE 18946
18845: GO 18847
18847: DISABLE
18848: LD_INT 0
18850: PPUSH
// begin for i := 1 to 5 do
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: DOUBLE
18857: LD_INT 1
18859: DEC
18860: ST_TO_ADDR
18861: LD_INT 5
18863: PUSH
18864: FOR_TO
18865: IFFALSE 18944
// begin uc_nation := nation_nature ;
18867: LD_ADDR_OWVAR 21
18871: PUSH
18872: LD_INT 0
18874: ST_TO_ADDR
// uc_side := 0 ;
18875: LD_ADDR_OWVAR 20
18879: PUSH
18880: LD_INT 0
18882: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18883: LD_ADDR_OWVAR 29
18887: PUSH
18888: LD_INT 12
18890: PUSH
18891: LD_INT 12
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: ST_TO_ADDR
// hc_agressivity := 20 ;
18898: LD_ADDR_OWVAR 35
18902: PUSH
18903: LD_INT 20
18905: ST_TO_ADDR
// hc_class := class_tiger ;
18906: LD_ADDR_OWVAR 28
18910: PUSH
18911: LD_INT 14
18913: ST_TO_ADDR
// hc_gallery :=  ;
18914: LD_ADDR_OWVAR 33
18918: PUSH
18919: LD_STRING 
18921: ST_TO_ADDR
// hc_name :=  ;
18922: LD_ADDR_OWVAR 26
18926: PUSH
18927: LD_STRING 
18929: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18930: CALL_OW 44
18934: PPUSH
18935: LD_INT 0
18937: PPUSH
18938: CALL_OW 51
// end ;
18942: GO 18864
18944: POP
18945: POP
// end ;
18946: PPOPN 1
18948: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18949: LD_EXP 47
18953: PUSH
18954: LD_EXP 67
18958: AND
18959: IFFALSE 18968
18961: GO 18963
18963: DISABLE
// StreamSibBomb ;
18964: CALL 18969 0 0
18968: END
// export function StreamSibBomb ; var i , x , y ; begin
18969: LD_INT 0
18971: PPUSH
18972: PPUSH
18973: PPUSH
18974: PPUSH
// result := false ;
18975: LD_ADDR_VAR 0 1
18979: PUSH
18980: LD_INT 0
18982: ST_TO_ADDR
// for i := 1 to 16 do
18983: LD_ADDR_VAR 0 2
18987: PUSH
18988: DOUBLE
18989: LD_INT 1
18991: DEC
18992: ST_TO_ADDR
18993: LD_INT 16
18995: PUSH
18996: FOR_TO
18997: IFFALSE 19196
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_INT 10
19006: PUSH
19007: LD_INT 20
19009: PUSH
19010: LD_INT 30
19012: PUSH
19013: LD_INT 40
19015: PUSH
19016: LD_INT 50
19018: PUSH
19019: LD_INT 60
19021: PUSH
19022: LD_INT 70
19024: PUSH
19025: LD_INT 80
19027: PUSH
19028: LD_INT 90
19030: PUSH
19031: LD_INT 100
19033: PUSH
19034: LD_INT 110
19036: PUSH
19037: LD_INT 120
19039: PUSH
19040: LD_INT 130
19042: PUSH
19043: LD_INT 140
19045: PUSH
19046: LD_INT 150
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: PPUSH
19069: LD_INT 15
19071: PPUSH
19072: CALL_OW 12
19076: ARRAY
19077: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19078: LD_ADDR_VAR 0 4
19082: PUSH
19083: LD_INT 10
19085: PUSH
19086: LD_INT 20
19088: PUSH
19089: LD_INT 30
19091: PUSH
19092: LD_INT 40
19094: PUSH
19095: LD_INT 50
19097: PUSH
19098: LD_INT 60
19100: PUSH
19101: LD_INT 70
19103: PUSH
19104: LD_INT 80
19106: PUSH
19107: LD_INT 90
19109: PUSH
19110: LD_INT 100
19112: PUSH
19113: LD_INT 110
19115: PUSH
19116: LD_INT 120
19118: PUSH
19119: LD_INT 130
19121: PUSH
19122: LD_INT 140
19124: PUSH
19125: LD_INT 150
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PPUSH
19148: LD_INT 15
19150: PPUSH
19151: CALL_OW 12
19155: ARRAY
19156: ST_TO_ADDR
// if ValidHex ( x , y ) then
19157: LD_VAR 0 3
19161: PPUSH
19162: LD_VAR 0 4
19166: PPUSH
19167: CALL_OW 488
19171: IFFALSE 19194
// begin result := [ x , y ] ;
19173: LD_ADDR_VAR 0 1
19177: PUSH
19178: LD_VAR 0 3
19182: PUSH
19183: LD_VAR 0 4
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: ST_TO_ADDR
// break ;
19192: GO 19196
// end ; end ;
19194: GO 18996
19196: POP
19197: POP
// if result then
19198: LD_VAR 0 1
19202: IFFALSE 19262
// begin ToLua ( playSibBomb() ) ;
19204: LD_STRING playSibBomb()
19206: PPUSH
19207: CALL_OW 559
// wait ( 0 0$14 ) ;
19211: LD_INT 490
19213: PPUSH
19214: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19218: LD_VAR 0 1
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: LD_VAR 0 1
19231: PUSH
19232: LD_INT 2
19234: ARRAY
19235: PPUSH
19236: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19240: LD_VAR 0 1
19244: PUSH
19245: LD_INT 1
19247: ARRAY
19248: PPUSH
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 2
19256: ARRAY
19257: PPUSH
19258: CALL_OW 429
// end ; end ;
19262: LD_VAR 0 1
19266: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19267: LD_EXP 47
19271: PUSH
19272: LD_EXP 69
19276: AND
19277: IFFALSE 19289
19279: GO 19281
19281: DISABLE
// YouLost (  ) ;
19282: LD_STRING 
19284: PPUSH
19285: CALL_OW 104
19289: END
// every 0 0$1 trigger StreamModeActive and sFog do
19290: LD_EXP 47
19294: PUSH
19295: LD_EXP 68
19299: AND
19300: IFFALSE 19314
19302: GO 19304
19304: DISABLE
// FogOff ( your_side ) ;
19305: LD_OWVAR 2
19309: PPUSH
19310: CALL_OW 344
19314: END
// every 0 0$1 trigger StreamModeActive and sSun do
19315: LD_EXP 47
19319: PUSH
19320: LD_EXP 70
19324: AND
19325: IFFALSE 19353
19327: GO 19329
19329: DISABLE
// begin solar_recharge_percent := 0 ;
19330: LD_ADDR_OWVAR 79
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19338: LD_INT 10500
19340: PPUSH
19341: CALL_OW 67
// solar_recharge_percent := 100 ;
19345: LD_ADDR_OWVAR 79
19349: PUSH
19350: LD_INT 100
19352: ST_TO_ADDR
// end ;
19353: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19354: LD_EXP 47
19358: PUSH
19359: LD_EXP 71
19363: AND
19364: IFFALSE 19603
19366: GO 19368
19368: DISABLE
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
19373: PPUSH
// begin tmp := [ ] ;
19374: LD_ADDR_VAR 0 3
19378: PUSH
19379: EMPTY
19380: ST_TO_ADDR
// for i := 1 to 6 do
19381: LD_ADDR_VAR 0 1
19385: PUSH
19386: DOUBLE
19387: LD_INT 1
19389: DEC
19390: ST_TO_ADDR
19391: LD_INT 6
19393: PUSH
19394: FOR_TO
19395: IFFALSE 19500
// begin uc_nation := nation_nature ;
19397: LD_ADDR_OWVAR 21
19401: PUSH
19402: LD_INT 0
19404: ST_TO_ADDR
// uc_side := 0 ;
19405: LD_ADDR_OWVAR 20
19409: PUSH
19410: LD_INT 0
19412: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19413: LD_ADDR_OWVAR 29
19417: PUSH
19418: LD_INT 12
19420: PUSH
19421: LD_INT 12
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: ST_TO_ADDR
// hc_agressivity := 20 ;
19428: LD_ADDR_OWVAR 35
19432: PUSH
19433: LD_INT 20
19435: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19436: LD_ADDR_OWVAR 28
19440: PUSH
19441: LD_INT 17
19443: ST_TO_ADDR
// hc_gallery :=  ;
19444: LD_ADDR_OWVAR 33
19448: PUSH
19449: LD_STRING 
19451: ST_TO_ADDR
// hc_name :=  ;
19452: LD_ADDR_OWVAR 26
19456: PUSH
19457: LD_STRING 
19459: ST_TO_ADDR
// un := CreateHuman ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: CALL_OW 44
19469: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 51
// tmp := tmp ^ un ;
19482: LD_ADDR_VAR 0 3
19486: PUSH
19487: LD_VAR 0 3
19491: PUSH
19492: LD_VAR 0 2
19496: ADD
19497: ST_TO_ADDR
// end ;
19498: GO 19394
19500: POP
19501: POP
// repeat wait ( 0 0$1 ) ;
19502: LD_INT 35
19504: PPUSH
19505: CALL_OW 67
// for un in tmp do
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_VAR 0 3
19518: PUSH
19519: FOR_IN
19520: IFFALSE 19594
// begin if IsDead ( un ) then
19522: LD_VAR 0 2
19526: PPUSH
19527: CALL_OW 301
19531: IFFALSE 19551
// begin tmp := tmp diff un ;
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_VAR 0 3
19542: PUSH
19543: LD_VAR 0 2
19547: DIFF
19548: ST_TO_ADDR
// continue ;
19549: GO 19519
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_INT 3
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PPUSH
19573: CALL_OW 69
19577: PPUSH
19578: LD_VAR 0 2
19582: PPUSH
19583: CALL_OW 74
19587: PPUSH
19588: CALL_OW 115
// end ;
19592: GO 19519
19594: POP
19595: POP
// until not tmp ;
19596: LD_VAR 0 3
19600: NOT
19601: IFFALSE 19502
// end ;
19603: PPOPN 3
19605: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19606: LD_EXP 47
19610: PUSH
19611: LD_EXP 72
19615: AND
19616: IFFALSE 19670
19618: GO 19620
19620: DISABLE
// begin ToLua ( displayTroll(); ) ;
19621: LD_STRING displayTroll();
19623: PPUSH
19624: CALL_OW 559
// wait ( 3 3$00 ) ;
19628: LD_INT 6300
19630: PPUSH
19631: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19635: LD_STRING hideTroll();
19637: PPUSH
19638: CALL_OW 559
// wait ( 1 1$00 ) ;
19642: LD_INT 2100
19644: PPUSH
19645: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19649: LD_STRING displayTroll();
19651: PPUSH
19652: CALL_OW 559
// wait ( 1 1$00 ) ;
19656: LD_INT 2100
19658: PPUSH
19659: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19663: LD_STRING hideTroll();
19665: PPUSH
19666: CALL_OW 559
// end ;
19670: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19671: LD_EXP 47
19675: PUSH
19676: LD_EXP 73
19680: AND
19681: IFFALSE 19744
19683: GO 19685
19685: DISABLE
19686: LD_INT 0
19688: PPUSH
// begin p := 0 ;
19689: LD_ADDR_VAR 0 1
19693: PUSH
19694: LD_INT 0
19696: ST_TO_ADDR
// repeat game_speed := 1 ;
19697: LD_ADDR_OWVAR 65
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19705: LD_INT 35
19707: PPUSH
19708: CALL_OW 67
// p := p + 1 ;
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_VAR 0 1
19721: PUSH
19722: LD_INT 1
19724: PLUS
19725: ST_TO_ADDR
// until p >= 60 ;
19726: LD_VAR 0 1
19730: PUSH
19731: LD_INT 60
19733: GREATEREQUAL
19734: IFFALSE 19697
// game_speed := 4 ;
19736: LD_ADDR_OWVAR 65
19740: PUSH
19741: LD_INT 4
19743: ST_TO_ADDR
// end ;
19744: PPOPN 1
19746: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19747: LD_EXP 47
19751: PUSH
19752: LD_EXP 74
19756: AND
19757: IFFALSE 19903
19759: GO 19761
19761: DISABLE
19762: LD_INT 0
19764: PPUSH
19765: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19766: LD_ADDR_VAR 0 1
19770: PUSH
19771: LD_INT 22
19773: PUSH
19774: LD_OWVAR 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 30
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PPUSH
19815: CALL_OW 69
19819: ST_TO_ADDR
// if not depot then
19820: LD_VAR 0 1
19824: NOT
19825: IFFALSE 19829
// exit ;
19827: GO 19903
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_VAR 0 1
19838: PUSH
19839: LD_INT 1
19841: PPUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 12
19851: ARRAY
19852: PPUSH
19853: CALL_OW 274
19857: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19858: LD_VAR 0 2
19862: PPUSH
19863: LD_INT 1
19865: PPUSH
19866: LD_INT 0
19868: PPUSH
19869: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19873: LD_VAR 0 2
19877: PPUSH
19878: LD_INT 2
19880: PPUSH
19881: LD_INT 0
19883: PPUSH
19884: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_INT 3
19895: PPUSH
19896: LD_INT 0
19898: PPUSH
19899: CALL_OW 277
// end ;
19903: PPOPN 2
19905: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19906: LD_EXP 47
19910: PUSH
19911: LD_EXP 75
19915: AND
19916: IFFALSE 20013
19918: GO 19920
19920: DISABLE
19921: LD_INT 0
19923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19924: LD_ADDR_VAR 0 1
19928: PUSH
19929: LD_INT 22
19931: PUSH
19932: LD_OWVAR 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: LD_INT 23
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: PPUSH
19973: CALL_OW 69
19977: ST_TO_ADDR
// if not tmp then
19978: LD_VAR 0 1
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19987: LD_VAR 0 1
19991: PUSH
19992: LD_INT 1
19994: PPUSH
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 12
20004: ARRAY
20005: PPUSH
20006: LD_INT 200
20008: PPUSH
20009: CALL_OW 234
// end ;
20013: PPOPN 1
20015: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20016: LD_EXP 47
20020: PUSH
20021: LD_EXP 76
20025: AND
20026: IFFALSE 20105
20028: GO 20030
20030: DISABLE
20031: LD_INT 0
20033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20034: LD_ADDR_VAR 0 1
20038: PUSH
20039: LD_INT 22
20041: PUSH
20042: LD_OWVAR 2
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 21
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 69
20069: ST_TO_ADDR
// if not tmp then
20070: LD_VAR 0 1
20074: NOT
20075: IFFALSE 20079
// exit ;
20077: GO 20105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20079: LD_VAR 0 1
20083: PUSH
20084: LD_INT 1
20086: PPUSH
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 12
20096: ARRAY
20097: PPUSH
20098: LD_INT 60
20100: PPUSH
20101: CALL_OW 234
// end ;
20105: PPOPN 1
20107: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20108: LD_EXP 47
20112: PUSH
20113: LD_EXP 77
20117: AND
20118: IFFALSE 20217
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
20126: PPUSH
// begin enable ;
20127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20128: LD_ADDR_VAR 0 1
20132: PUSH
20133: LD_INT 22
20135: PUSH
20136: LD_OWVAR 2
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 61
20147: PUSH
20148: EMPTY
20149: LIST
20150: PUSH
20151: LD_INT 33
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: PPUSH
20166: CALL_OW 69
20170: ST_TO_ADDR
// if not tmp then
20171: LD_VAR 0 1
20175: NOT
20176: IFFALSE 20180
// exit ;
20178: GO 20217
// for i in tmp do
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_VAR 0 1
20189: PUSH
20190: FOR_IN
20191: IFFALSE 20215
// if IsControledBy ( i ) then
20193: LD_VAR 0 2
20197: PPUSH
20198: CALL_OW 312
20202: IFFALSE 20213
// ComUnlink ( i ) ;
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL_OW 136
20213: GO 20190
20215: POP
20216: POP
// end ;
20217: PPOPN 2
20219: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20220: LD_EXP 47
20224: PUSH
20225: LD_EXP 78
20229: AND
20230: IFFALSE 20370
20232: GO 20234
20234: DISABLE
20235: LD_INT 0
20237: PPUSH
20238: PPUSH
// begin ToLua ( displayPowell(); ) ;
20239: LD_STRING displayPowell();
20241: PPUSH
20242: CALL_OW 559
// uc_side := 0 ;
20246: LD_ADDR_OWVAR 20
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// uc_nation := 2 ;
20254: LD_ADDR_OWVAR 21
20258: PUSH
20259: LD_INT 2
20261: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20262: LD_ADDR_OWVAR 37
20266: PUSH
20267: LD_INT 14
20269: ST_TO_ADDR
// vc_engine := engine_siberite ;
20270: LD_ADDR_OWVAR 39
20274: PUSH
20275: LD_INT 3
20277: ST_TO_ADDR
// vc_control := control_apeman ;
20278: LD_ADDR_OWVAR 38
20282: PUSH
20283: LD_INT 5
20285: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20286: LD_ADDR_OWVAR 40
20290: PUSH
20291: LD_INT 29
20293: ST_TO_ADDR
// un := CreateVehicle ;
20294: LD_ADDR_VAR 0 2
20298: PUSH
20299: CALL_OW 45
20303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20304: LD_VAR 0 2
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20316: LD_INT 35
20318: PPUSH
20319: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20323: LD_VAR 0 2
20327: PPUSH
20328: LD_INT 22
20330: PUSH
20331: LD_OWVAR 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PPUSH
20340: CALL_OW 69
20344: PPUSH
20345: LD_VAR 0 2
20349: PPUSH
20350: CALL_OW 74
20354: PPUSH
20355: CALL_OW 115
// until IsDead ( un ) ;
20359: LD_VAR 0 2
20363: PPUSH
20364: CALL_OW 301
20368: IFFALSE 20316
// end ;
20370: PPOPN 2
20372: END
// every 0 0$1 trigger StreamModeActive and sStu do
20373: LD_EXP 47
20377: PUSH
20378: LD_EXP 86
20382: AND
20383: IFFALSE 20399
20385: GO 20387
20387: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20388: LD_STRING displayStucuk();
20390: PPUSH
20391: CALL_OW 559
// ResetFog ;
20395: CALL_OW 335
// end ;
20399: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20400: LD_EXP 47
20404: PUSH
20405: LD_EXP 79
20409: AND
20410: IFFALSE 20551
20412: GO 20414
20414: DISABLE
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20419: LD_ADDR_VAR 0 2
20423: PUSH
20424: LD_INT 22
20426: PUSH
20427: LD_OWVAR 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 21
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PPUSH
20450: CALL_OW 69
20454: ST_TO_ADDR
// if not tmp then
20455: LD_VAR 0 2
20459: NOT
20460: IFFALSE 20464
// exit ;
20462: GO 20551
// un := tmp [ rand ( 1 , tmp ) ] ;
20464: LD_ADDR_VAR 0 1
20468: PUSH
20469: LD_VAR 0 2
20473: PUSH
20474: LD_INT 1
20476: PPUSH
20477: LD_VAR 0 2
20481: PPUSH
20482: CALL_OW 12
20486: ARRAY
20487: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20488: LD_VAR 0 1
20492: PPUSH
20493: LD_INT 0
20495: PPUSH
20496: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20500: LD_VAR 0 1
20504: PPUSH
20505: LD_OWVAR 3
20509: PUSH
20510: LD_VAR 0 1
20514: DIFF
20515: PPUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 74
20525: PPUSH
20526: CALL_OW 115
// wait ( 0 0$20 ) ;
20530: LD_INT 700
20532: PPUSH
20533: CALL_OW 67
// SetSide ( un , your_side ) ;
20537: LD_VAR 0 1
20541: PPUSH
20542: LD_OWVAR 2
20546: PPUSH
20547: CALL_OW 235
// end ;
20551: PPOPN 2
20553: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20554: LD_EXP 47
20558: PUSH
20559: LD_EXP 80
20563: AND
20564: IFFALSE 20670
20566: GO 20568
20568: DISABLE
20569: LD_INT 0
20571: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20572: LD_ADDR_VAR 0 1
20576: PUSH
20577: LD_INT 22
20579: PUSH
20580: LD_OWVAR 2
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: PUSH
20592: LD_INT 30
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 30
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PPUSH
20621: CALL_OW 69
20625: ST_TO_ADDR
// if not depot then
20626: LD_VAR 0 1
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20670
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20635: LD_VAR 0 1
20639: PUSH
20640: LD_INT 1
20642: ARRAY
20643: PPUSH
20644: CALL_OW 250
20648: PPUSH
20649: LD_VAR 0 1
20653: PUSH
20654: LD_INT 1
20656: ARRAY
20657: PPUSH
20658: CALL_OW 251
20662: PPUSH
20663: LD_INT 70
20665: PPUSH
20666: CALL_OW 495
// end ;
20670: PPOPN 1
20672: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20673: LD_EXP 47
20677: PUSH
20678: LD_EXP 81
20682: AND
20683: IFFALSE 20894
20685: GO 20687
20687: DISABLE
20688: LD_INT 0
20690: PPUSH
20691: PPUSH
20692: PPUSH
20693: PPUSH
20694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20695: LD_ADDR_VAR 0 5
20699: PUSH
20700: LD_INT 22
20702: PUSH
20703: LD_OWVAR 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 21
20714: PUSH
20715: LD_INT 1
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PPUSH
20726: CALL_OW 69
20730: ST_TO_ADDR
// if not tmp then
20731: LD_VAR 0 5
20735: NOT
20736: IFFALSE 20740
// exit ;
20738: GO 20894
// for i in tmp do
20740: LD_ADDR_VAR 0 1
20744: PUSH
20745: LD_VAR 0 5
20749: PUSH
20750: FOR_IN
20751: IFFALSE 20892
// begin d := rand ( 0 , 5 ) ;
20753: LD_ADDR_VAR 0 4
20757: PUSH
20758: LD_INT 0
20760: PPUSH
20761: LD_INT 5
20763: PPUSH
20764: CALL_OW 12
20768: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20769: LD_ADDR_VAR 0 2
20773: PUSH
20774: LD_VAR 0 1
20778: PPUSH
20779: CALL_OW 250
20783: PPUSH
20784: LD_VAR 0 4
20788: PPUSH
20789: LD_INT 3
20791: PPUSH
20792: LD_INT 12
20794: PPUSH
20795: CALL_OW 12
20799: PPUSH
20800: CALL_OW 272
20804: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: LD_VAR 0 1
20814: PPUSH
20815: CALL_OW 251
20819: PPUSH
20820: LD_VAR 0 4
20824: PPUSH
20825: LD_INT 3
20827: PPUSH
20828: LD_INT 12
20830: PPUSH
20831: CALL_OW 12
20835: PPUSH
20836: CALL_OW 273
20840: ST_TO_ADDR
// if ValidHex ( x , y ) then
20841: LD_VAR 0 2
20845: PPUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: CALL_OW 488
20855: IFFALSE 20890
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: LD_INT 3
20874: PPUSH
20875: LD_INT 6
20877: PPUSH
20878: CALL_OW 12
20882: PPUSH
20883: LD_INT 1
20885: PPUSH
20886: CALL_OW 483
// end ;
20890: GO 20750
20892: POP
20893: POP
// end ;
20894: PPOPN 5
20896: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20897: LD_EXP 47
20901: PUSH
20902: LD_EXP 82
20906: AND
20907: IFFALSE 21001
20909: GO 20911
20911: DISABLE
20912: LD_INT 0
20914: PPUSH
20915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20916: LD_ADDR_VAR 0 2
20920: PUSH
20921: LD_INT 22
20923: PUSH
20924: LD_OWVAR 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 32
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 21
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 69
20962: ST_TO_ADDR
// if not tmp then
20963: LD_VAR 0 2
20967: NOT
20968: IFFALSE 20972
// exit ;
20970: GO 21001
// for i in tmp do
20972: LD_ADDR_VAR 0 1
20976: PUSH
20977: LD_VAR 0 2
20981: PUSH
20982: FOR_IN
20983: IFFALSE 20999
// SetFuel ( i , 0 ) ;
20985: LD_VAR 0 1
20989: PPUSH
20990: LD_INT 0
20992: PPUSH
20993: CALL_OW 240
20997: GO 20982
20999: POP
21000: POP
// end ;
21001: PPOPN 2
21003: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21004: LD_EXP 47
21008: PUSH
21009: LD_EXP 83
21013: AND
21014: IFFALSE 21080
21016: GO 21018
21018: DISABLE
21019: LD_INT 0
21021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21022: LD_ADDR_VAR 0 1
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_OWVAR 2
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 29
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL_OW 69
21057: ST_TO_ADDR
// if not tmp then
21058: LD_VAR 0 1
21062: NOT
21063: IFFALSE 21067
// exit ;
21065: GO 21080
// DestroyUnit ( tmp [ 1 ] ) ;
21067: LD_VAR 0 1
21071: PUSH
21072: LD_INT 1
21074: ARRAY
21075: PPUSH
21076: CALL_OW 65
// end ;
21080: PPOPN 1
21082: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21083: LD_EXP 47
21087: PUSH
21088: LD_EXP 85
21092: AND
21093: IFFALSE 21222
21095: GO 21097
21097: DISABLE
21098: LD_INT 0
21100: PPUSH
// begin uc_side := 0 ;
21101: LD_ADDR_OWVAR 20
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// uc_nation := nation_arabian ;
21109: LD_ADDR_OWVAR 21
21113: PUSH
21114: LD_INT 2
21116: ST_TO_ADDR
// hc_gallery :=  ;
21117: LD_ADDR_OWVAR 33
21121: PUSH
21122: LD_STRING 
21124: ST_TO_ADDR
// hc_name :=  ;
21125: LD_ADDR_OWVAR 26
21129: PUSH
21130: LD_STRING 
21132: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21133: LD_INT 1
21135: PPUSH
21136: LD_INT 11
21138: PPUSH
21139: LD_INT 10
21141: PPUSH
21142: CALL_OW 380
// un := CreateHuman ;
21146: LD_ADDR_VAR 0 1
21150: PUSH
21151: CALL_OW 44
21155: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21156: LD_VAR 0 1
21160: PPUSH
21161: LD_INT 1
21163: PPUSH
21164: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21168: LD_INT 35
21170: PPUSH
21171: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_INT 22
21182: PUSH
21183: LD_OWVAR 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PPUSH
21192: CALL_OW 69
21196: PPUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 74
21206: PPUSH
21207: CALL_OW 115
// until IsDead ( un ) ;
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 301
21220: IFFALSE 21168
// end ;
21222: PPOPN 1
21224: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21225: LD_EXP 47
21229: PUSH
21230: LD_EXP 87
21234: AND
21235: IFFALSE 21247
21237: GO 21239
21239: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21240: LD_STRING earthquake(getX(game), 0, 32)
21242: PPUSH
21243: CALL_OW 559
21247: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21248: LD_EXP 47
21252: PUSH
21253: LD_EXP 88
21257: AND
21258: IFFALSE 21349
21260: GO 21262
21262: DISABLE
21263: LD_INT 0
21265: PPUSH
// begin enable ;
21266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21267: LD_ADDR_VAR 0 1
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_OWVAR 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 21
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 33
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: PPUSH
21309: CALL_OW 69
21313: ST_TO_ADDR
// if not tmp then
21314: LD_VAR 0 1
21318: NOT
21319: IFFALSE 21323
// exit ;
21321: GO 21349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21323: LD_VAR 0 1
21327: PUSH
21328: LD_INT 1
21330: PPUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 12
21340: ARRAY
21341: PPUSH
21342: LD_INT 1
21344: PPUSH
21345: CALL_OW 234
// end ;
21349: PPOPN 1
21351: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21352: LD_EXP 47
21356: PUSH
21357: LD_EXP 89
21361: AND
21362: IFFALSE 21503
21364: GO 21366
21366: DISABLE
21367: LD_INT 0
21369: PPUSH
21370: PPUSH
21371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21372: LD_ADDR_VAR 0 3
21376: PUSH
21377: LD_INT 22
21379: PUSH
21380: LD_OWVAR 2
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 25
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PPUSH
21403: CALL_OW 69
21407: ST_TO_ADDR
// if not tmp then
21408: LD_VAR 0 3
21412: NOT
21413: IFFALSE 21417
// exit ;
21415: GO 21503
// un := tmp [ rand ( 1 , tmp ) ] ;
21417: LD_ADDR_VAR 0 2
21421: PUSH
21422: LD_VAR 0 3
21426: PUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_VAR 0 3
21434: PPUSH
21435: CALL_OW 12
21439: ARRAY
21440: ST_TO_ADDR
// if Crawls ( un ) then
21441: LD_VAR 0 2
21445: PPUSH
21446: CALL_OW 318
21450: IFFALSE 21461
// ComWalk ( un ) ;
21452: LD_VAR 0 2
21456: PPUSH
21457: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_INT 9
21468: PPUSH
21469: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21473: LD_INT 28
21475: PPUSH
21476: LD_OWVAR 2
21480: PPUSH
21481: LD_INT 2
21483: PPUSH
21484: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21488: LD_INT 29
21490: PPUSH
21491: LD_OWVAR 2
21495: PPUSH
21496: LD_INT 2
21498: PPUSH
21499: CALL_OW 322
// end ;
21503: PPOPN 3
21505: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21506: LD_EXP 47
21510: PUSH
21511: LD_EXP 90
21515: AND
21516: IFFALSE 21627
21518: GO 21520
21520: DISABLE
21521: LD_INT 0
21523: PPUSH
21524: PPUSH
21525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21526: LD_ADDR_VAR 0 3
21530: PUSH
21531: LD_INT 22
21533: PUSH
21534: LD_OWVAR 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 25
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PPUSH
21557: CALL_OW 69
21561: ST_TO_ADDR
// if not tmp then
21562: LD_VAR 0 3
21566: NOT
21567: IFFALSE 21571
// exit ;
21569: GO 21627
// un := tmp [ rand ( 1 , tmp ) ] ;
21571: LD_ADDR_VAR 0 2
21575: PUSH
21576: LD_VAR 0 3
21580: PUSH
21581: LD_INT 1
21583: PPUSH
21584: LD_VAR 0 3
21588: PPUSH
21589: CALL_OW 12
21593: ARRAY
21594: ST_TO_ADDR
// if Crawls ( un ) then
21595: LD_VAR 0 2
21599: PPUSH
21600: CALL_OW 318
21604: IFFALSE 21615
// ComWalk ( un ) ;
21606: LD_VAR 0 2
21610: PPUSH
21611: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21615: LD_VAR 0 2
21619: PPUSH
21620: LD_INT 8
21622: PPUSH
21623: CALL_OW 336
// end ;
21627: PPOPN 3
21629: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21630: LD_EXP 47
21634: PUSH
21635: LD_EXP 91
21639: AND
21640: IFFALSE 21784
21642: GO 21644
21644: DISABLE
21645: LD_INT 0
21647: PPUSH
21648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21649: LD_ADDR_VAR 0 2
21653: PUSH
21654: LD_INT 22
21656: PUSH
21657: LD_OWVAR 2
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 21
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 34
21681: PUSH
21682: LD_INT 12
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 34
21691: PUSH
21692: LD_INT 51
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 34
21701: PUSH
21702: LD_INT 32
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: PPUSH
21720: CALL_OW 69
21724: ST_TO_ADDR
// if not tmp then
21725: LD_VAR 0 2
21729: NOT
21730: IFFALSE 21734
// exit ;
21732: GO 21784
// for i in tmp do
21734: LD_ADDR_VAR 0 1
21738: PUSH
21739: LD_VAR 0 2
21743: PUSH
21744: FOR_IN
21745: IFFALSE 21782
// if GetCargo ( i , mat_artifact ) = 0 then
21747: LD_VAR 0 1
21751: PPUSH
21752: LD_INT 4
21754: PPUSH
21755: CALL_OW 289
21759: PUSH
21760: LD_INT 0
21762: EQUAL
21763: IFFALSE 21780
// SetCargo ( i , mat_siberit , 100 ) ;
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 3
21772: PPUSH
21773: LD_INT 100
21775: PPUSH
21776: CALL_OW 290
21780: GO 21744
21782: POP
21783: POP
// end ;
21784: PPOPN 2
21786: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21787: LD_EXP 47
21791: PUSH
21792: LD_EXP 92
21796: AND
21797: IFFALSE 21980
21799: GO 21801
21801: DISABLE
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: LD_INT 22
21813: PUSH
21814: LD_OWVAR 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 2
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21980
// for i := 1 to 2 do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: DOUBLE
21843: LD_INT 1
21845: DEC
21846: ST_TO_ADDR
21847: LD_INT 2
21849: PUSH
21850: FOR_TO
21851: IFFALSE 21978
// begin uc_side := your_side ;
21853: LD_ADDR_OWVAR 20
21857: PUSH
21858: LD_OWVAR 2
21862: ST_TO_ADDR
// uc_nation := nation_american ;
21863: LD_ADDR_OWVAR 21
21867: PUSH
21868: LD_INT 1
21870: ST_TO_ADDR
// vc_chassis := us_morphling ;
21871: LD_ADDR_OWVAR 37
21875: PUSH
21876: LD_INT 5
21878: ST_TO_ADDR
// vc_engine := engine_siberite ;
21879: LD_ADDR_OWVAR 39
21883: PUSH
21884: LD_INT 3
21886: ST_TO_ADDR
// vc_control := control_computer ;
21887: LD_ADDR_OWVAR 38
21891: PUSH
21892: LD_INT 3
21894: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21895: LD_ADDR_OWVAR 40
21899: PUSH
21900: LD_INT 10
21902: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21903: LD_VAR 0 2
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: CALL_OW 310
21916: NOT
21917: IFFALSE 21964
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21919: CALL_OW 45
21923: PPUSH
21924: LD_VAR 0 2
21928: PUSH
21929: LD_INT 1
21931: ARRAY
21932: PPUSH
21933: CALL_OW 250
21937: PPUSH
21938: LD_VAR 0 2
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: CALL_OW 251
21951: PPUSH
21952: LD_INT 12
21954: PPUSH
21955: LD_INT 1
21957: PPUSH
21958: CALL_OW 50
21962: GO 21976
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21964: CALL_OW 45
21968: PPUSH
21969: LD_INT 1
21971: PPUSH
21972: CALL_OW 51
// end ;
21976: GO 21850
21978: POP
21979: POP
// end ;
21980: PPOPN 2
21982: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21983: LD_EXP 47
21987: PUSH
21988: LD_EXP 93
21992: AND
21993: IFFALSE 22215
21995: GO 21997
21997: DISABLE
21998: LD_INT 0
22000: PPUSH
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22006: LD_ADDR_VAR 0 6
22010: PUSH
22011: LD_INT 22
22013: PUSH
22014: LD_OWVAR 2
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 21
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 3
22035: PUSH
22036: LD_INT 23
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 6
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22215
// s1 := rand ( 1 , 4 ) ;
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_INT 1
22076: PPUSH
22077: LD_INT 4
22079: PPUSH
22080: CALL_OW 12
22084: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22085: LD_ADDR_VAR 0 4
22089: PUSH
22090: LD_VAR 0 6
22094: PUSH
22095: LD_INT 1
22097: ARRAY
22098: PPUSH
22099: LD_VAR 0 2
22103: PPUSH
22104: CALL_OW 259
22108: ST_TO_ADDR
// if s1 = 1 then
22109: LD_VAR 0 2
22113: PUSH
22114: LD_INT 1
22116: EQUAL
22117: IFFALSE 22137
// s2 := rand ( 2 , 4 ) else
22119: LD_ADDR_VAR 0 3
22123: PUSH
22124: LD_INT 2
22126: PPUSH
22127: LD_INT 4
22129: PPUSH
22130: CALL_OW 12
22134: ST_TO_ADDR
22135: GO 22145
// s2 := 1 ;
22137: LD_ADDR_VAR 0 3
22141: PUSH
22142: LD_INT 1
22144: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22145: LD_ADDR_VAR 0 5
22149: PUSH
22150: LD_VAR 0 6
22154: PUSH
22155: LD_INT 1
22157: ARRAY
22158: PPUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: CALL_OW 259
22168: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22169: LD_VAR 0 6
22173: PUSH
22174: LD_INT 1
22176: ARRAY
22177: PPUSH
22178: LD_VAR 0 2
22182: PPUSH
22183: LD_VAR 0 5
22187: PPUSH
22188: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22192: LD_VAR 0 6
22196: PUSH
22197: LD_INT 1
22199: ARRAY
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: LD_VAR 0 4
22210: PPUSH
22211: CALL_OW 237
// end ;
22215: PPOPN 6
22217: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22218: LD_EXP 47
22222: PUSH
22223: LD_EXP 94
22227: AND
22228: IFFALSE 22307
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 30
22255: PUSH
22256: LD_INT 3
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: ST_TO_ADDR
// if not tmp then
22272: LD_VAR 0 1
22276: NOT
22277: IFFALSE 22281
// exit ;
22279: GO 22307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22281: LD_VAR 0 1
22285: PUSH
22286: LD_INT 1
22288: PPUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL_OW 12
22298: ARRAY
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL_OW 234
// end ;
22307: PPOPN 1
22309: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22310: LD_EXP 47
22314: PUSH
22315: LD_EXP 95
22319: AND
22320: IFFALSE 22432
22322: GO 22324
22324: DISABLE
22325: LD_INT 0
22327: PPUSH
22328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22329: LD_ADDR_VAR 0 2
22333: PUSH
22334: LD_INT 22
22336: PUSH
22337: LD_OWVAR 2
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 30
22351: PUSH
22352: LD_INT 27
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 30
22361: PUSH
22362: LD_INT 26
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 30
22371: PUSH
22372: LD_INT 28
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PPUSH
22389: CALL_OW 69
22393: ST_TO_ADDR
// if not tmp then
22394: LD_VAR 0 2
22398: NOT
22399: IFFALSE 22403
// exit ;
22401: GO 22432
// for i in tmp do
22403: LD_ADDR_VAR 0 1
22407: PUSH
22408: LD_VAR 0 2
22412: PUSH
22413: FOR_IN
22414: IFFALSE 22430
// SetLives ( i , 1 ) ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_INT 1
22423: PPUSH
22424: CALL_OW 234
22428: GO 22413
22430: POP
22431: POP
// end ;
22432: PPOPN 2
22434: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22435: LD_EXP 47
22439: PUSH
22440: LD_EXP 96
22444: AND
22445: IFFALSE 22719
22447: GO 22449
22449: DISABLE
22450: LD_INT 0
22452: PPUSH
22453: PPUSH
22454: PPUSH
// begin i := rand ( 1 , 7 ) ;
22455: LD_ADDR_VAR 0 1
22459: PUSH
22460: LD_INT 1
22462: PPUSH
22463: LD_INT 7
22465: PPUSH
22466: CALL_OW 12
22470: ST_TO_ADDR
// case i of 1 :
22471: LD_VAR 0 1
22475: PUSH
22476: LD_INT 1
22478: DOUBLE
22479: EQUAL
22480: IFTRUE 22484
22482: GO 22494
22484: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22485: LD_STRING earthquake(getX(game), 0, 32)
22487: PPUSH
22488: CALL_OW 559
22492: GO 22719
22494: LD_INT 2
22496: DOUBLE
22497: EQUAL
22498: IFTRUE 22502
22500: GO 22516
22502: POP
// begin ToLua ( displayStucuk(); ) ;
22503: LD_STRING displayStucuk();
22505: PPUSH
22506: CALL_OW 559
// ResetFog ;
22510: CALL_OW 335
// end ; 3 :
22514: GO 22719
22516: LD_INT 3
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22628
22524: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22525: LD_ADDR_VAR 0 2
22529: PUSH
22530: LD_INT 22
22532: PUSH
22533: LD_OWVAR 2
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 25
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: ST_TO_ADDR
// if not tmp then
22561: LD_VAR 0 2
22565: NOT
22566: IFFALSE 22570
// exit ;
22568: GO 22719
// un := tmp [ rand ( 1 , tmp ) ] ;
22570: LD_ADDR_VAR 0 3
22574: PUSH
22575: LD_VAR 0 2
22579: PUSH
22580: LD_INT 1
22582: PPUSH
22583: LD_VAR 0 2
22587: PPUSH
22588: CALL_OW 12
22592: ARRAY
22593: ST_TO_ADDR
// if Crawls ( un ) then
22594: LD_VAR 0 3
22598: PPUSH
22599: CALL_OW 318
22603: IFFALSE 22614
// ComWalk ( un ) ;
22605: LD_VAR 0 3
22609: PPUSH
22610: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22614: LD_VAR 0 3
22618: PPUSH
22619: LD_INT 8
22621: PPUSH
22622: CALL_OW 336
// end ; 4 :
22626: GO 22719
22628: LD_INT 4
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22697
22636: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 22
22644: PUSH
22645: LD_OWVAR 2
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 30
22656: PUSH
22657: LD_INT 29
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: ST_TO_ADDR
// if not tmp then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22719
// DestroyUnit ( tmp [ 1 ] ) ;
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 1
22689: ARRAY
22690: PPUSH
22691: CALL_OW 65
// end ; 5 .. 7 :
22695: GO 22719
22697: LD_INT 5
22699: DOUBLE
22700: GREATEREQUAL
22701: IFFALSE 22709
22703: LD_INT 7
22705: DOUBLE
22706: LESSEQUAL
22707: IFTRUE 22711
22709: GO 22718
22711: POP
// StreamSibBomb ; end ;
22712: CALL 18969 0 0
22716: GO 22719
22718: POP
// end ;
22719: PPOPN 3
22721: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22722: LD_EXP 47
22726: PUSH
22727: LD_EXP 97
22731: AND
22732: IFFALSE 22888
22734: GO 22736
22736: DISABLE
22737: LD_INT 0
22739: PPUSH
22740: PPUSH
22741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22742: LD_ADDR_VAR 0 2
22746: PUSH
22747: LD_INT 81
22749: PUSH
22750: LD_OWVAR 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: LD_INT 21
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 21
22774: PUSH
22775: LD_INT 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PPUSH
22791: CALL_OW 69
22795: ST_TO_ADDR
// if not tmp then
22796: LD_VAR 0 2
22800: NOT
22801: IFFALSE 22805
// exit ;
22803: GO 22888
// p := 0 ;
22805: LD_ADDR_VAR 0 3
22809: PUSH
22810: LD_INT 0
22812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22813: LD_INT 35
22815: PPUSH
22816: CALL_OW 67
// p := p + 1 ;
22820: LD_ADDR_VAR 0 3
22824: PUSH
22825: LD_VAR 0 3
22829: PUSH
22830: LD_INT 1
22832: PLUS
22833: ST_TO_ADDR
// for i in tmp do
22834: LD_ADDR_VAR 0 1
22838: PUSH
22839: LD_VAR 0 2
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22876
// if GetLives ( i ) < 1000 then
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 256
22856: PUSH
22857: LD_INT 1000
22859: LESS
22860: IFFALSE 22874
// SetLives ( i , 1000 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 1000
22869: PPUSH
22870: CALL_OW 234
22874: GO 22844
22876: POP
22877: POP
// until p > 20 ;
22878: LD_VAR 0 3
22882: PUSH
22883: LD_INT 20
22885: GREATER
22886: IFFALSE 22813
// end ;
22888: PPOPN 3
22890: END
// every 0 0$1 trigger StreamModeActive and sTime do
22891: LD_EXP 47
22895: PUSH
22896: LD_EXP 98
22900: AND
22901: IFFALSE 22936
22903: GO 22905
22905: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22906: LD_INT 28
22908: PPUSH
22909: LD_OWVAR 2
22913: PPUSH
22914: LD_INT 2
22916: PPUSH
22917: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22921: LD_INT 30
22923: PPUSH
22924: LD_OWVAR 2
22928: PPUSH
22929: LD_INT 2
22931: PPUSH
22932: CALL_OW 322
// end ;
22936: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22937: LD_EXP 47
22941: PUSH
22942: LD_EXP 99
22946: AND
22947: IFFALSE 23068
22949: GO 22951
22951: DISABLE
22952: LD_INT 0
22954: PPUSH
22955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22956: LD_ADDR_VAR 0 2
22960: PUSH
22961: LD_INT 22
22963: PUSH
22964: LD_OWVAR 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 21
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: LD_INT 23
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PPUSH
23005: CALL_OW 69
23009: ST_TO_ADDR
// if not tmp then
23010: LD_VAR 0 2
23014: NOT
23015: IFFALSE 23019
// exit ;
23017: GO 23068
// for i in tmp do
23019: LD_ADDR_VAR 0 1
23023: PUSH
23024: LD_VAR 0 2
23028: PUSH
23029: FOR_IN
23030: IFFALSE 23066
// begin if Crawls ( i ) then
23032: LD_VAR 0 1
23036: PPUSH
23037: CALL_OW 318
23041: IFFALSE 23052
// ComWalk ( i ) ;
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 138
// SetClass ( i , 2 ) ;
23052: LD_VAR 0 1
23056: PPUSH
23057: LD_INT 2
23059: PPUSH
23060: CALL_OW 336
// end ;
23064: GO 23029
23066: POP
23067: POP
// end ;
23068: PPOPN 2
23070: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23071: LD_EXP 47
23075: PUSH
23076: LD_EXP 100
23080: AND
23081: IFFALSE 23362
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
23089: PPUSH
23090: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23091: LD_OWVAR 2
23095: PPUSH
23096: LD_INT 9
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: LD_INT 1
23104: PPUSH
23105: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23109: LD_INT 9
23111: PPUSH
23112: LD_OWVAR 2
23116: PPUSH
23117: CALL_OW 343
// uc_side := 9 ;
23121: LD_ADDR_OWVAR 20
23125: PUSH
23126: LD_INT 9
23128: ST_TO_ADDR
// uc_nation := 2 ;
23129: LD_ADDR_OWVAR 21
23133: PUSH
23134: LD_INT 2
23136: ST_TO_ADDR
// hc_name := Dark Warrior ;
23137: LD_ADDR_OWVAR 26
23141: PUSH
23142: LD_STRING Dark Warrior
23144: ST_TO_ADDR
// hc_gallery :=  ;
23145: LD_ADDR_OWVAR 33
23149: PUSH
23150: LD_STRING 
23152: ST_TO_ADDR
// hc_noskilllimit := true ;
23153: LD_ADDR_OWVAR 76
23157: PUSH
23158: LD_INT 1
23160: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23161: LD_ADDR_OWVAR 31
23165: PUSH
23166: LD_INT 30
23168: PUSH
23169: LD_INT 30
23171: PUSH
23172: LD_INT 30
23174: PUSH
23175: LD_INT 30
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: ST_TO_ADDR
// un := CreateHuman ;
23184: LD_ADDR_VAR 0 3
23188: PUSH
23189: CALL_OW 44
23193: ST_TO_ADDR
// hc_noskilllimit := false ;
23194: LD_ADDR_OWVAR 76
23198: PUSH
23199: LD_INT 0
23201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23202: LD_VAR 0 3
23206: PPUSH
23207: LD_INT 1
23209: PPUSH
23210: CALL_OW 51
// p := 0 ;
23214: LD_ADDR_VAR 0 2
23218: PUSH
23219: LD_INT 0
23221: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23222: LD_INT 35
23224: PPUSH
23225: CALL_OW 67
// p := p + 1 ;
23229: LD_ADDR_VAR 0 2
23233: PUSH
23234: LD_VAR 0 2
23238: PUSH
23239: LD_INT 1
23241: PLUS
23242: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23243: LD_VAR 0 3
23247: PPUSH
23248: CALL_OW 256
23252: PUSH
23253: LD_INT 1000
23255: LESS
23256: IFFALSE 23270
// SetLives ( un , 1000 ) ;
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_INT 1000
23265: PPUSH
23266: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23270: LD_VAR 0 3
23274: PPUSH
23275: LD_INT 81
23277: PUSH
23278: LD_OWVAR 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 91
23289: PUSH
23290: LD_VAR 0 3
23294: PUSH
23295: LD_INT 30
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PPUSH
23307: CALL_OW 69
23311: PPUSH
23312: LD_VAR 0 3
23316: PPUSH
23317: CALL_OW 74
23321: PPUSH
23322: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23326: LD_VAR 0 2
23330: PUSH
23331: LD_INT 60
23333: GREATER
23334: PUSH
23335: LD_VAR 0 3
23339: PPUSH
23340: CALL_OW 301
23344: OR
23345: IFFALSE 23222
// if un then
23347: LD_VAR 0 3
23351: IFFALSE 23362
// RemoveUnit ( un ) ;
23353: LD_VAR 0 3
23357: PPUSH
23358: CALL_OW 64
// end ; end_of_file
23362: PPOPN 3
23364: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23365: LD_INT 0
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23371: LD_VAR 0 1
23375: PPUSH
23376: CALL_OW 264
23380: PUSH
23381: LD_EXP 36
23385: EQUAL
23386: IFFALSE 23458
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23388: LD_INT 68
23390: PPUSH
23391: LD_VAR 0 1
23395: PPUSH
23396: CALL_OW 255
23400: PPUSH
23401: CALL_OW 321
23405: PUSH
23406: LD_INT 2
23408: EQUAL
23409: IFFALSE 23421
// eff := 70 else
23411: LD_ADDR_VAR 0 4
23415: PUSH
23416: LD_INT 70
23418: ST_TO_ADDR
23419: GO 23429
// eff := 30 ;
23421: LD_ADDR_VAR 0 4
23425: PUSH
23426: LD_INT 30
23428: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 250
23438: PPUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 251
23448: PPUSH
23449: LD_VAR 0 4
23453: PPUSH
23454: CALL_OW 495
// end ; end ;
23458: LD_VAR 0 2
23462: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23463: LD_INT 0
23465: PPUSH
// end ;
23466: LD_VAR 0 4
23470: RET
// export function SOS_Command ( cmd ) ; begin
23471: LD_INT 0
23473: PPUSH
// end ;
23474: LD_VAR 0 2
23478: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 254
23486: EQUAL
23487: PUSH
23488: LD_VAR 0 2
23492: PPUSH
23493: CALL_OW 264
23497: PUSH
23498: LD_EXP 34
23502: EQUAL
23503: AND
23504: PUSH
23505: LD_VAR 0 3
23509: PPUSH
23510: CALL_OW 263
23514: PUSH
23515: LD_INT 3
23517: EQUAL
23518: AND
23519: IFFALSE 23535
// HackDestroyVehicle ( unit , selectedUnit ) ;
23521: LD_VAR 0 2
23525: PPUSH
23526: LD_VAR 0 3
23530: PPUSH
23531: CALL 25042 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23535: LD_VAR 0 1
23539: PUSH
23540: LD_INT 255
23542: EQUAL
23543: PUSH
23544: LD_VAR 0 2
23548: PPUSH
23549: CALL_OW 264
23553: PUSH
23554: LD_INT 14
23556: PUSH
23557: LD_INT 53
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: IN
23564: AND
23565: PUSH
23566: LD_VAR 0 4
23570: PPUSH
23571: LD_VAR 0 5
23575: PPUSH
23576: CALL_OW 488
23580: AND
23581: IFFALSE 23605
// CutTreeXYR ( unit , x , y , 12 ) ;
23583: LD_VAR 0 2
23587: PPUSH
23588: LD_VAR 0 4
23592: PPUSH
23593: LD_VAR 0 5
23597: PPUSH
23598: LD_INT 12
23600: PPUSH
23601: CALL 23608 0 4
// end ;
23605: PPOPN 5
23607: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23619: LD_VAR 0 1
23623: NOT
23624: PUSH
23625: LD_VAR 0 2
23629: PPUSH
23630: LD_VAR 0 3
23634: PPUSH
23635: CALL_OW 488
23639: NOT
23640: OR
23641: PUSH
23642: LD_VAR 0 4
23646: NOT
23647: OR
23648: IFFALSE 23652
// exit ;
23650: GO 23992
// list := [ ] ;
23652: LD_ADDR_VAR 0 13
23656: PUSH
23657: EMPTY
23658: ST_TO_ADDR
// if x - r < 0 then
23659: LD_VAR 0 2
23663: PUSH
23664: LD_VAR 0 4
23668: MINUS
23669: PUSH
23670: LD_INT 0
23672: LESS
23673: IFFALSE 23685
// min_x := 0 else
23675: LD_ADDR_VAR 0 7
23679: PUSH
23680: LD_INT 0
23682: ST_TO_ADDR
23683: GO 23701
// min_x := x - r ;
23685: LD_ADDR_VAR 0 7
23689: PUSH
23690: LD_VAR 0 2
23694: PUSH
23695: LD_VAR 0 4
23699: MINUS
23700: ST_TO_ADDR
// if y - r < 0 then
23701: LD_VAR 0 3
23705: PUSH
23706: LD_VAR 0 4
23710: MINUS
23711: PUSH
23712: LD_INT 0
23714: LESS
23715: IFFALSE 23727
// min_y := 0 else
23717: LD_ADDR_VAR 0 8
23721: PUSH
23722: LD_INT 0
23724: ST_TO_ADDR
23725: GO 23743
// min_y := y - r ;
23727: LD_ADDR_VAR 0 8
23731: PUSH
23732: LD_VAR 0 3
23736: PUSH
23737: LD_VAR 0 4
23741: MINUS
23742: ST_TO_ADDR
// max_x := x + r ;
23743: LD_ADDR_VAR 0 9
23747: PUSH
23748: LD_VAR 0 2
23752: PUSH
23753: LD_VAR 0 4
23757: PLUS
23758: ST_TO_ADDR
// max_y := y + r ;
23759: LD_ADDR_VAR 0 10
23763: PUSH
23764: LD_VAR 0 3
23768: PUSH
23769: LD_VAR 0 4
23773: PLUS
23774: ST_TO_ADDR
// for _x = min_x to max_x do
23775: LD_ADDR_VAR 0 11
23779: PUSH
23780: DOUBLE
23781: LD_VAR 0 7
23785: DEC
23786: ST_TO_ADDR
23787: LD_VAR 0 9
23791: PUSH
23792: FOR_TO
23793: IFFALSE 23910
// for _y = min_y to max_y do
23795: LD_ADDR_VAR 0 12
23799: PUSH
23800: DOUBLE
23801: LD_VAR 0 8
23805: DEC
23806: ST_TO_ADDR
23807: LD_VAR 0 10
23811: PUSH
23812: FOR_TO
23813: IFFALSE 23906
// begin if not ValidHex ( _x , _y ) then
23815: LD_VAR 0 11
23819: PPUSH
23820: LD_VAR 0 12
23824: PPUSH
23825: CALL_OW 488
23829: NOT
23830: IFFALSE 23834
// continue ;
23832: GO 23812
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23834: LD_VAR 0 11
23838: PPUSH
23839: LD_VAR 0 12
23843: PPUSH
23844: CALL_OW 351
23848: PUSH
23849: LD_VAR 0 11
23853: PPUSH
23854: LD_VAR 0 12
23858: PPUSH
23859: CALL_OW 554
23863: AND
23864: IFFALSE 23904
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23866: LD_ADDR_VAR 0 13
23870: PUSH
23871: LD_VAR 0 13
23875: PPUSH
23876: LD_VAR 0 13
23880: PUSH
23881: LD_INT 1
23883: PLUS
23884: PPUSH
23885: LD_VAR 0 11
23889: PUSH
23890: LD_VAR 0 12
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 2
23903: ST_TO_ADDR
// end ;
23904: GO 23812
23906: POP
23907: POP
23908: GO 23792
23910: POP
23911: POP
// if not list then
23912: LD_VAR 0 13
23916: NOT
23917: IFFALSE 23921
// exit ;
23919: GO 23992
// for i in list do
23921: LD_ADDR_VAR 0 6
23925: PUSH
23926: LD_VAR 0 13
23930: PUSH
23931: FOR_IN
23932: IFFALSE 23990
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_STRING M
23941: PUSH
23942: LD_VAR 0 6
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PUSH
23951: LD_VAR 0 6
23955: PUSH
23956: LD_INT 2
23958: ARRAY
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: PPUSH
23984: CALL_OW 447
23988: GO 23931
23990: POP
23991: POP
// end ;
23992: LD_VAR 0 5
23996: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23997: LD_EXP 101
24001: NOT
24002: IFFALSE 24052
24004: GO 24006
24006: DISABLE
// begin initHack := true ;
24007: LD_ADDR_EXP 101
24011: PUSH
24012: LD_INT 1
24014: ST_TO_ADDR
// hackTanks := [ ] ;
24015: LD_ADDR_EXP 102
24019: PUSH
24020: EMPTY
24021: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24022: LD_ADDR_EXP 103
24026: PUSH
24027: EMPTY
24028: ST_TO_ADDR
// hackLimit := 3 ;
24029: LD_ADDR_EXP 104
24033: PUSH
24034: LD_INT 3
24036: ST_TO_ADDR
// hackDist := 12 ;
24037: LD_ADDR_EXP 105
24041: PUSH
24042: LD_INT 12
24044: ST_TO_ADDR
// hackCounter := [ ] ;
24045: LD_ADDR_EXP 106
24049: PUSH
24050: EMPTY
24051: ST_TO_ADDR
// end ;
24052: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24053: LD_EXP 101
24057: PUSH
24058: LD_INT 34
24060: PUSH
24061: LD_EXP 34
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 69
24074: AND
24075: IFFALSE 24330
24077: GO 24079
24079: DISABLE
24080: LD_INT 0
24082: PPUSH
24083: PPUSH
// begin enable ;
24084: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24085: LD_ADDR_VAR 0 1
24089: PUSH
24090: LD_INT 34
24092: PUSH
24093: LD_EXP 34
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PPUSH
24102: CALL_OW 69
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24328
// begin if not i in hackTanks then
24110: LD_VAR 0 1
24114: PUSH
24115: LD_EXP 102
24119: IN
24120: NOT
24121: IFFALSE 24204
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24123: LD_ADDR_EXP 102
24127: PUSH
24128: LD_EXP 102
24132: PPUSH
24133: LD_EXP 102
24137: PUSH
24138: LD_INT 1
24140: PLUS
24141: PPUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 1
24151: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24152: LD_ADDR_EXP 103
24156: PUSH
24157: LD_EXP 103
24161: PPUSH
24162: LD_EXP 103
24166: PUSH
24167: LD_INT 1
24169: PLUS
24170: PPUSH
24171: EMPTY
24172: PPUSH
24173: CALL_OW 1
24177: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24178: LD_ADDR_EXP 106
24182: PUSH
24183: LD_EXP 106
24187: PPUSH
24188: LD_EXP 106
24192: PUSH
24193: LD_INT 1
24195: PLUS
24196: PPUSH
24197: EMPTY
24198: PPUSH
24199: CALL_OW 1
24203: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 302
24213: NOT
24214: IFFALSE 24227
// begin HackUnlinkAll ( i ) ;
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL 24333 0 1
// continue ;
24225: GO 24107
// end ; HackCheckCapturedStatus ( i ) ;
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL 24776 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 81
24243: PUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 255
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 33
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 91
24270: PUSH
24271: LD_VAR 0 1
24275: PUSH
24276: LD_EXP 105
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 50
24288: PUSH
24289: EMPTY
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: ST_TO_ADDR
// if not tmp then
24303: LD_VAR 0 2
24307: NOT
24308: IFFALSE 24312
// continue ;
24310: GO 24107
// HackLink ( i , tmp ) ;
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_VAR 0 2
24321: PPUSH
24322: CALL 24469 0 2
// end ;
24326: GO 24107
24328: POP
24329: POP
// end ;
24330: PPOPN 2
24332: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24333: LD_INT 0
24335: PPUSH
24336: PPUSH
24337: PPUSH
// if not hack in hackTanks then
24338: LD_VAR 0 1
24342: PUSH
24343: LD_EXP 102
24347: IN
24348: NOT
24349: IFFALSE 24353
// exit ;
24351: GO 24464
// index := GetElementIndex ( hackTanks , hack ) ;
24353: LD_ADDR_VAR 0 4
24357: PUSH
24358: LD_EXP 102
24362: PPUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL 29884 0 2
24372: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24373: LD_EXP 103
24377: PUSH
24378: LD_VAR 0 4
24382: ARRAY
24383: IFFALSE 24464
// begin for i in hackTanksCaptured [ index ] do
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_EXP 103
24394: PUSH
24395: LD_VAR 0 4
24399: ARRAY
24400: PUSH
24401: FOR_IN
24402: IFFALSE 24428
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24404: LD_VAR 0 3
24408: PUSH
24409: LD_INT 1
24411: ARRAY
24412: PPUSH
24413: LD_VAR 0 3
24417: PUSH
24418: LD_INT 2
24420: ARRAY
24421: PPUSH
24422: CALL_OW 235
24426: GO 24401
24428: POP
24429: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24430: LD_ADDR_EXP 103
24434: PUSH
24435: LD_EXP 103
24439: PPUSH
24440: LD_VAR 0 4
24444: PPUSH
24445: EMPTY
24446: PPUSH
24447: CALL_OW 1
24451: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24452: LD_VAR 0 1
24456: PPUSH
24457: LD_INT 0
24459: PPUSH
24460: CALL_OW 505
// end ; end ;
24464: LD_VAR 0 2
24468: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
// if not hack in hackTanks or not vehicles then
24474: LD_VAR 0 1
24478: PUSH
24479: LD_EXP 102
24483: IN
24484: NOT
24485: PUSH
24486: LD_VAR 0 2
24490: NOT
24491: OR
24492: IFFALSE 24496
// exit ;
24494: GO 24771
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_VAR 0 1
24505: PPUSH
24506: LD_VAR 0 2
24510: PPUSH
24511: LD_INT 1
24513: PPUSH
24514: LD_INT 1
24516: PPUSH
24517: CALL 30534 0 4
24521: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24522: LD_ADDR_VAR 0 5
24526: PUSH
24527: LD_EXP 102
24531: PPUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL 29884 0 2
24541: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24542: LD_EXP 103
24546: PUSH
24547: LD_VAR 0 5
24551: ARRAY
24552: PUSH
24553: LD_EXP 104
24557: LESS
24558: IFFALSE 24747
// begin for i := 1 to vehicles do
24560: LD_ADDR_VAR 0 4
24564: PUSH
24565: DOUBLE
24566: LD_INT 1
24568: DEC
24569: ST_TO_ADDR
24570: LD_VAR 0 2
24574: PUSH
24575: FOR_TO
24576: IFFALSE 24745
// begin if hackTanksCaptured [ index ] = hackLimit then
24578: LD_EXP 103
24582: PUSH
24583: LD_VAR 0 5
24587: ARRAY
24588: PUSH
24589: LD_EXP 104
24593: EQUAL
24594: IFFALSE 24598
// break ;
24596: GO 24745
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24598: LD_ADDR_EXP 106
24602: PUSH
24603: LD_EXP 106
24607: PPUSH
24608: LD_VAR 0 5
24612: PPUSH
24613: LD_EXP 106
24617: PUSH
24618: LD_VAR 0 5
24622: ARRAY
24623: PUSH
24624: LD_INT 1
24626: PLUS
24627: PPUSH
24628: CALL_OW 1
24632: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24633: LD_ADDR_EXP 103
24637: PUSH
24638: LD_EXP 103
24642: PPUSH
24643: LD_VAR 0 5
24647: PUSH
24648: LD_EXP 103
24652: PUSH
24653: LD_VAR 0 5
24657: ARRAY
24658: PUSH
24659: LD_INT 1
24661: PLUS
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PPUSH
24667: LD_VAR 0 2
24671: PUSH
24672: LD_VAR 0 4
24676: ARRAY
24677: PUSH
24678: LD_VAR 0 2
24682: PUSH
24683: LD_VAR 0 4
24687: ARRAY
24688: PPUSH
24689: CALL_OW 255
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL 30099 0 3
24702: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24703: LD_VAR 0 2
24707: PUSH
24708: LD_VAR 0 4
24712: ARRAY
24713: PPUSH
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 255
24723: PPUSH
24724: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24728: LD_VAR 0 2
24732: PUSH
24733: LD_VAR 0 4
24737: ARRAY
24738: PPUSH
24739: CALL_OW 141
// end ;
24743: GO 24575
24745: POP
24746: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_EXP 103
24756: PUSH
24757: LD_VAR 0 5
24761: ARRAY
24762: PUSH
24763: LD_INT 0
24765: PLUS
24766: PPUSH
24767: CALL_OW 505
// end ;
24771: LD_VAR 0 3
24775: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24776: LD_INT 0
24778: PPUSH
24779: PPUSH
24780: PPUSH
24781: PPUSH
// if not hack in hackTanks then
24782: LD_VAR 0 1
24786: PUSH
24787: LD_EXP 102
24791: IN
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25037
// index := GetElementIndex ( hackTanks , hack ) ;
24797: LD_ADDR_VAR 0 4
24801: PUSH
24802: LD_EXP 102
24806: PPUSH
24807: LD_VAR 0 1
24811: PPUSH
24812: CALL 29884 0 2
24816: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24817: LD_ADDR_VAR 0 3
24821: PUSH
24822: DOUBLE
24823: LD_EXP 103
24827: PUSH
24828: LD_VAR 0 4
24832: ARRAY
24833: INC
24834: ST_TO_ADDR
24835: LD_INT 1
24837: PUSH
24838: FOR_DOWNTO
24839: IFFALSE 25011
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24841: LD_ADDR_VAR 0 5
24845: PUSH
24846: LD_EXP 103
24850: PUSH
24851: LD_VAR 0 4
24855: ARRAY
24856: PUSH
24857: LD_VAR 0 3
24861: ARRAY
24862: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24863: LD_VAR 0 5
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: CALL_OW 302
24876: NOT
24877: PUSH
24878: LD_VAR 0 5
24882: PUSH
24883: LD_INT 1
24885: ARRAY
24886: PPUSH
24887: CALL_OW 255
24891: PUSH
24892: LD_VAR 0 1
24896: PPUSH
24897: CALL_OW 255
24901: NONEQUAL
24902: OR
24903: IFFALSE 25009
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24905: LD_VAR 0 5
24909: PUSH
24910: LD_INT 1
24912: ARRAY
24913: PPUSH
24914: CALL_OW 305
24918: PUSH
24919: LD_VAR 0 5
24923: PUSH
24924: LD_INT 1
24926: ARRAY
24927: PPUSH
24928: CALL_OW 255
24932: PUSH
24933: LD_VAR 0 1
24937: PPUSH
24938: CALL_OW 255
24942: EQUAL
24943: AND
24944: IFFALSE 24968
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24946: LD_VAR 0 5
24950: PUSH
24951: LD_INT 1
24953: ARRAY
24954: PPUSH
24955: LD_VAR 0 5
24959: PUSH
24960: LD_INT 2
24962: ARRAY
24963: PPUSH
24964: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24968: LD_ADDR_EXP 103
24972: PUSH
24973: LD_EXP 103
24977: PPUSH
24978: LD_VAR 0 4
24982: PPUSH
24983: LD_EXP 103
24987: PUSH
24988: LD_VAR 0 4
24992: ARRAY
24993: PPUSH
24994: LD_VAR 0 3
24998: PPUSH
24999: CALL_OW 3
25003: PPUSH
25004: CALL_OW 1
25008: ST_TO_ADDR
// end ; end ;
25009: GO 24838
25011: POP
25012: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25013: LD_VAR 0 1
25017: PPUSH
25018: LD_EXP 103
25022: PUSH
25023: LD_VAR 0 4
25027: ARRAY
25028: PUSH
25029: LD_INT 0
25031: PLUS
25032: PPUSH
25033: CALL_OW 505
// end ;
25037: LD_VAR 0 2
25041: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25042: LD_INT 0
25044: PPUSH
25045: PPUSH
25046: PPUSH
25047: PPUSH
// if not hack in hackTanks then
25048: LD_VAR 0 1
25052: PUSH
25053: LD_EXP 102
25057: IN
25058: NOT
25059: IFFALSE 25063
// exit ;
25061: GO 25148
// index := GetElementIndex ( hackTanks , hack ) ;
25063: LD_ADDR_VAR 0 5
25067: PUSH
25068: LD_EXP 102
25072: PPUSH
25073: LD_VAR 0 1
25077: PPUSH
25078: CALL 29884 0 2
25082: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25083: LD_ADDR_VAR 0 4
25087: PUSH
25088: DOUBLE
25089: LD_INT 1
25091: DEC
25092: ST_TO_ADDR
25093: LD_EXP 103
25097: PUSH
25098: LD_VAR 0 5
25102: ARRAY
25103: PUSH
25104: FOR_TO
25105: IFFALSE 25146
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25107: LD_EXP 103
25111: PUSH
25112: LD_VAR 0 5
25116: ARRAY
25117: PUSH
25118: LD_VAR 0 4
25122: ARRAY
25123: PUSH
25124: LD_INT 1
25126: ARRAY
25127: PUSH
25128: LD_VAR 0 2
25132: EQUAL
25133: IFFALSE 25144
// KillUnit ( vehicle ) ;
25135: LD_VAR 0 2
25139: PPUSH
25140: CALL_OW 66
25144: GO 25104
25146: POP
25147: POP
// end ; end_of_file
25148: LD_VAR 0 3
25152: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
// if exist_mode then
25157: LD_VAR 0 2
25161: IFFALSE 25186
// unit := CreateCharacter ( prefix & ident ) else
25163: LD_ADDR_VAR 0 5
25167: PUSH
25168: LD_VAR 0 3
25172: PUSH
25173: LD_VAR 0 1
25177: STR
25178: PPUSH
25179: CALL_OW 34
25183: ST_TO_ADDR
25184: GO 25201
// unit := NewCharacter ( ident ) ;
25186: LD_ADDR_VAR 0 5
25190: PUSH
25191: LD_VAR 0 1
25195: PPUSH
25196: CALL_OW 25
25200: ST_TO_ADDR
// result := unit ;
25201: LD_ADDR_VAR 0 4
25205: PUSH
25206: LD_VAR 0 5
25210: ST_TO_ADDR
// end ;
25211: LD_VAR 0 4
25215: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
// if not side or not nation then
25220: LD_VAR 0 1
25224: NOT
25225: PUSH
25226: LD_VAR 0 2
25230: NOT
25231: OR
25232: IFFALSE 25236
// exit ;
25234: GO 26000
// case nation of nation_american :
25236: LD_VAR 0 2
25240: PUSH
25241: LD_INT 1
25243: DOUBLE
25244: EQUAL
25245: IFTRUE 25249
25247: GO 25463
25249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_INT 35
25257: PUSH
25258: LD_INT 45
25260: PUSH
25261: LD_INT 46
25263: PUSH
25264: LD_INT 47
25266: PUSH
25267: LD_INT 82
25269: PUSH
25270: LD_INT 83
25272: PUSH
25273: LD_INT 84
25275: PUSH
25276: LD_INT 85
25278: PUSH
25279: LD_INT 86
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 6
25290: PUSH
25291: LD_INT 15
25293: PUSH
25294: LD_INT 16
25296: PUSH
25297: LD_INT 7
25299: PUSH
25300: LD_INT 12
25302: PUSH
25303: LD_INT 13
25305: PUSH
25306: LD_INT 10
25308: PUSH
25309: LD_INT 14
25311: PUSH
25312: LD_INT 20
25314: PUSH
25315: LD_INT 21
25317: PUSH
25318: LD_INT 22
25320: PUSH
25321: LD_INT 25
25323: PUSH
25324: LD_INT 32
25326: PUSH
25327: LD_INT 27
25329: PUSH
25330: LD_INT 36
25332: PUSH
25333: LD_INT 69
25335: PUSH
25336: LD_INT 39
25338: PUSH
25339: LD_INT 34
25341: PUSH
25342: LD_INT 40
25344: PUSH
25345: LD_INT 48
25347: PUSH
25348: LD_INT 49
25350: PUSH
25351: LD_INT 50
25353: PUSH
25354: LD_INT 51
25356: PUSH
25357: LD_INT 52
25359: PUSH
25360: LD_INT 53
25362: PUSH
25363: LD_INT 54
25365: PUSH
25366: LD_INT 55
25368: PUSH
25369: LD_INT 56
25371: PUSH
25372: LD_INT 57
25374: PUSH
25375: LD_INT 58
25377: PUSH
25378: LD_INT 59
25380: PUSH
25381: LD_INT 60
25383: PUSH
25384: LD_INT 61
25386: PUSH
25387: LD_INT 62
25389: PUSH
25390: LD_INT 80
25392: PUSH
25393: LD_INT 82
25395: PUSH
25396: LD_INT 83
25398: PUSH
25399: LD_INT 84
25401: PUSH
25402: LD_INT 85
25404: PUSH
25405: LD_INT 86
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: ST_TO_ADDR
25461: GO 25924
25463: LD_INT 2
25465: DOUBLE
25466: EQUAL
25467: IFTRUE 25471
25469: GO 25693
25471: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
25472: LD_ADDR_VAR 0 4
25476: PUSH
25477: LD_INT 35
25479: PUSH
25480: LD_INT 45
25482: PUSH
25483: LD_INT 46
25485: PUSH
25486: LD_INT 47
25488: PUSH
25489: LD_INT 82
25491: PUSH
25492: LD_INT 83
25494: PUSH
25495: LD_INT 84
25497: PUSH
25498: LD_INT 85
25500: PUSH
25501: LD_INT 87
25503: PUSH
25504: LD_INT 70
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: LD_INT 11
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: LD_INT 4
25518: PUSH
25519: LD_INT 5
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: LD_INT 15
25527: PUSH
25528: LD_INT 18
25530: PUSH
25531: LD_INT 7
25533: PUSH
25534: LD_INT 17
25536: PUSH
25537: LD_INT 8
25539: PUSH
25540: LD_INT 20
25542: PUSH
25543: LD_INT 21
25545: PUSH
25546: LD_INT 22
25548: PUSH
25549: LD_INT 72
25551: PUSH
25552: LD_INT 26
25554: PUSH
25555: LD_INT 69
25557: PUSH
25558: LD_INT 39
25560: PUSH
25561: LD_INT 40
25563: PUSH
25564: LD_INT 41
25566: PUSH
25567: LD_INT 42
25569: PUSH
25570: LD_INT 43
25572: PUSH
25573: LD_INT 48
25575: PUSH
25576: LD_INT 49
25578: PUSH
25579: LD_INT 50
25581: PUSH
25582: LD_INT 51
25584: PUSH
25585: LD_INT 52
25587: PUSH
25588: LD_INT 53
25590: PUSH
25591: LD_INT 54
25593: PUSH
25594: LD_INT 55
25596: PUSH
25597: LD_INT 56
25599: PUSH
25600: LD_INT 60
25602: PUSH
25603: LD_INT 61
25605: PUSH
25606: LD_INT 62
25608: PUSH
25609: LD_INT 66
25611: PUSH
25612: LD_INT 67
25614: PUSH
25615: LD_INT 68
25617: PUSH
25618: LD_INT 81
25620: PUSH
25621: LD_INT 82
25623: PUSH
25624: LD_INT 83
25626: PUSH
25627: LD_INT 84
25629: PUSH
25630: LD_INT 85
25632: PUSH
25633: LD_INT 87
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: ST_TO_ADDR
25691: GO 25924
25693: LD_INT 3
25695: DOUBLE
25696: EQUAL
25697: IFTRUE 25701
25699: GO 25923
25701: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25702: LD_ADDR_VAR 0 4
25706: PUSH
25707: LD_INT 46
25709: PUSH
25710: LD_INT 47
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 82
25721: PUSH
25722: LD_INT 83
25724: PUSH
25725: LD_INT 84
25727: PUSH
25728: LD_INT 85
25730: PUSH
25731: LD_INT 86
25733: PUSH
25734: LD_INT 11
25736: PUSH
25737: LD_INT 9
25739: PUSH
25740: LD_INT 20
25742: PUSH
25743: LD_INT 19
25745: PUSH
25746: LD_INT 21
25748: PUSH
25749: LD_INT 24
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 25
25757: PUSH
25758: LD_INT 28
25760: PUSH
25761: LD_INT 29
25763: PUSH
25764: LD_INT 30
25766: PUSH
25767: LD_INT 31
25769: PUSH
25770: LD_INT 37
25772: PUSH
25773: LD_INT 38
25775: PUSH
25776: LD_INT 32
25778: PUSH
25779: LD_INT 27
25781: PUSH
25782: LD_INT 33
25784: PUSH
25785: LD_INT 69
25787: PUSH
25788: LD_INT 39
25790: PUSH
25791: LD_INT 34
25793: PUSH
25794: LD_INT 40
25796: PUSH
25797: LD_INT 71
25799: PUSH
25800: LD_INT 23
25802: PUSH
25803: LD_INT 44
25805: PUSH
25806: LD_INT 48
25808: PUSH
25809: LD_INT 49
25811: PUSH
25812: LD_INT 50
25814: PUSH
25815: LD_INT 51
25817: PUSH
25818: LD_INT 52
25820: PUSH
25821: LD_INT 53
25823: PUSH
25824: LD_INT 54
25826: PUSH
25827: LD_INT 55
25829: PUSH
25830: LD_INT 56
25832: PUSH
25833: LD_INT 57
25835: PUSH
25836: LD_INT 58
25838: PUSH
25839: LD_INT 59
25841: PUSH
25842: LD_INT 63
25844: PUSH
25845: LD_INT 64
25847: PUSH
25848: LD_INT 65
25850: PUSH
25851: LD_INT 82
25853: PUSH
25854: LD_INT 83
25856: PUSH
25857: LD_INT 84
25859: PUSH
25860: LD_INT 85
25862: PUSH
25863: LD_INT 86
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 25924
25923: POP
// if state > - 1 and state < 3 then
25924: LD_VAR 0 3
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: GREATER
25933: PUSH
25934: LD_VAR 0 3
25938: PUSH
25939: LD_INT 3
25941: LESS
25942: AND
25943: IFFALSE 26000
// for i in result do
25945: LD_ADDR_VAR 0 5
25949: PUSH
25950: LD_VAR 0 4
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25998
// if GetTech ( i , side ) <> state then
25958: LD_VAR 0 5
25962: PPUSH
25963: LD_VAR 0 1
25967: PPUSH
25968: CALL_OW 321
25972: PUSH
25973: LD_VAR 0 3
25977: NONEQUAL
25978: IFFALSE 25996
// result := result diff i ;
25980: LD_ADDR_VAR 0 4
25984: PUSH
25985: LD_VAR 0 4
25989: PUSH
25990: LD_VAR 0 5
25994: DIFF
25995: ST_TO_ADDR
25996: GO 25955
25998: POP
25999: POP
// end ;
26000: LD_VAR 0 4
26004: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
// result := true ;
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_INT 1
26017: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26018: LD_ADDR_VAR 0 5
26022: PUSH
26023: LD_VAR 0 2
26027: PPUSH
26028: CALL_OW 480
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 5
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26091
// for i in tmp do
26042: LD_ADDR_VAR 0 4
26046: PUSH
26047: LD_VAR 0 5
26051: PUSH
26052: FOR_IN
26053: IFFALSE 26089
// if GetTech ( i , side ) <> state_researched then
26055: LD_VAR 0 4
26059: PPUSH
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 321
26069: PUSH
26070: LD_INT 2
26072: NONEQUAL
26073: IFFALSE 26087
// begin result := false ;
26075: LD_ADDR_VAR 0 3
26079: PUSH
26080: LD_INT 0
26082: ST_TO_ADDR
// exit ;
26083: POP
26084: POP
26085: GO 26091
// end ;
26087: GO 26052
26089: POP
26090: POP
// end ;
26091: LD_VAR 0 3
26095: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26111: LD_VAR 0 1
26115: NOT
26116: PUSH
26117: LD_VAR 0 1
26121: PPUSH
26122: CALL_OW 257
26126: PUSH
26127: LD_INT 9
26129: NONEQUAL
26130: OR
26131: IFFALSE 26135
// exit ;
26133: GO 26708
// side := GetSide ( unit ) ;
26135: LD_ADDR_VAR 0 9
26139: PUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 255
26149: ST_TO_ADDR
// tech_space := tech_spacanom ;
26150: LD_ADDR_VAR 0 12
26154: PUSH
26155: LD_INT 29
26157: ST_TO_ADDR
// tech_time := tech_taurad ;
26158: LD_ADDR_VAR 0 13
26162: PUSH
26163: LD_INT 28
26165: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26166: LD_ADDR_VAR 0 11
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 310
26180: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26181: LD_VAR 0 11
26185: PPUSH
26186: CALL_OW 247
26190: PUSH
26191: LD_INT 2
26193: EQUAL
26194: IFFALSE 26198
// exit ;
26196: GO 26708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26198: LD_ADDR_VAR 0 8
26202: PUSH
26203: LD_INT 81
26205: PUSH
26206: LD_VAR 0 9
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PPUSH
26236: CALL_OW 69
26240: ST_TO_ADDR
// if not tmp then
26241: LD_VAR 0 8
26245: NOT
26246: IFFALSE 26250
// exit ;
26248: GO 26708
// if in_unit then
26250: LD_VAR 0 11
26254: IFFALSE 26278
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26256: LD_ADDR_VAR 0 10
26260: PUSH
26261: LD_VAR 0 8
26265: PPUSH
26266: LD_VAR 0 11
26270: PPUSH
26271: CALL_OW 74
26275: ST_TO_ADDR
26276: GO 26298
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26278: LD_ADDR_VAR 0 10
26282: PUSH
26283: LD_VAR 0 8
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 74
26297: ST_TO_ADDR
// if not enemy then
26298: LD_VAR 0 10
26302: NOT
26303: IFFALSE 26307
// exit ;
26305: GO 26708
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26307: LD_VAR 0 11
26311: PUSH
26312: LD_VAR 0 11
26316: PPUSH
26317: LD_VAR 0 10
26321: PPUSH
26322: CALL_OW 296
26326: PUSH
26327: LD_INT 13
26329: GREATER
26330: AND
26331: PUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_VAR 0 10
26341: PPUSH
26342: CALL_OW 296
26346: PUSH
26347: LD_INT 12
26349: GREATER
26350: OR
26351: IFFALSE 26355
// exit ;
26353: GO 26708
// missile := [ 1 ] ;
26355: LD_ADDR_VAR 0 14
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26366: LD_VAR 0 9
26370: PPUSH
26371: LD_VAR 0 12
26375: PPUSH
26376: CALL_OW 325
26380: IFFALSE 26409
// missile := Insert ( missile , missile + 1 , 2 ) ;
26382: LD_ADDR_VAR 0 14
26386: PUSH
26387: LD_VAR 0 14
26391: PPUSH
26392: LD_VAR 0 14
26396: PUSH
26397: LD_INT 1
26399: PLUS
26400: PPUSH
26401: LD_INT 2
26403: PPUSH
26404: CALL_OW 2
26408: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26409: LD_VAR 0 9
26413: PPUSH
26414: LD_VAR 0 13
26418: PPUSH
26419: CALL_OW 325
26423: PUSH
26424: LD_VAR 0 10
26428: PPUSH
26429: CALL_OW 255
26433: PPUSH
26434: LD_VAR 0 13
26438: PPUSH
26439: CALL_OW 325
26443: NOT
26444: AND
26445: IFFALSE 26474
// missile := Insert ( missile , missile + 1 , 3 ) ;
26447: LD_ADDR_VAR 0 14
26451: PUSH
26452: LD_VAR 0 14
26456: PPUSH
26457: LD_VAR 0 14
26461: PUSH
26462: LD_INT 1
26464: PLUS
26465: PPUSH
26466: LD_INT 3
26468: PPUSH
26469: CALL_OW 2
26473: ST_TO_ADDR
// if missile < 2 then
26474: LD_VAR 0 14
26478: PUSH
26479: LD_INT 2
26481: LESS
26482: IFFALSE 26486
// exit ;
26484: GO 26708
// x := GetX ( enemy ) ;
26486: LD_ADDR_VAR 0 4
26490: PUSH
26491: LD_VAR 0 10
26495: PPUSH
26496: CALL_OW 250
26500: ST_TO_ADDR
// y := GetY ( enemy ) ;
26501: LD_ADDR_VAR 0 5
26505: PUSH
26506: LD_VAR 0 10
26510: PPUSH
26511: CALL_OW 251
26515: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26516: LD_ADDR_VAR 0 6
26520: PUSH
26521: LD_VAR 0 4
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PPUSH
26530: LD_INT 1
26532: PPUSH
26533: CALL_OW 12
26537: PLUS
26538: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26539: LD_ADDR_VAR 0 7
26543: PUSH
26544: LD_VAR 0 5
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 12
26560: PLUS
26561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26562: LD_VAR 0 6
26566: PPUSH
26567: LD_VAR 0 7
26571: PPUSH
26572: CALL_OW 488
26576: NOT
26577: IFFALSE 26599
// begin _x := x ;
26579: LD_ADDR_VAR 0 6
26583: PUSH
26584: LD_VAR 0 4
26588: ST_TO_ADDR
// _y := y ;
26589: LD_ADDR_VAR 0 7
26593: PUSH
26594: LD_VAR 0 5
26598: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_INT 1
26606: PPUSH
26607: LD_VAR 0 14
26611: PPUSH
26612: CALL_OW 12
26616: ST_TO_ADDR
// case i of 1 :
26617: LD_VAR 0 3
26621: PUSH
26622: LD_INT 1
26624: DOUBLE
26625: EQUAL
26626: IFTRUE 26630
26628: GO 26647
26630: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26631: LD_VAR 0 1
26635: PPUSH
26636: LD_VAR 0 10
26640: PPUSH
26641: CALL_OW 115
26645: GO 26708
26647: LD_INT 2
26649: DOUBLE
26650: EQUAL
26651: IFTRUE 26655
26653: GO 26677
26655: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26656: LD_VAR 0 1
26660: PPUSH
26661: LD_VAR 0 6
26665: PPUSH
26666: LD_VAR 0 7
26670: PPUSH
26671: CALL_OW 153
26675: GO 26708
26677: LD_INT 3
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26707
26685: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26686: LD_VAR 0 1
26690: PPUSH
26691: LD_VAR 0 6
26695: PPUSH
26696: LD_VAR 0 7
26700: PPUSH
26701: CALL_OW 154
26705: GO 26708
26707: POP
// end ;
26708: LD_VAR 0 2
26712: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26713: LD_INT 0
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
// if not unit or not building then
26721: LD_VAR 0 1
26725: NOT
26726: PUSH
26727: LD_VAR 0 2
26731: NOT
26732: OR
26733: IFFALSE 26737
// exit ;
26735: GO 26895
// x := GetX ( building ) ;
26737: LD_ADDR_VAR 0 5
26741: PUSH
26742: LD_VAR 0 2
26746: PPUSH
26747: CALL_OW 250
26751: ST_TO_ADDR
// y := GetY ( building ) ;
26752: LD_ADDR_VAR 0 6
26756: PUSH
26757: LD_VAR 0 2
26761: PPUSH
26762: CALL_OW 251
26766: ST_TO_ADDR
// for i = 0 to 5 do
26767: LD_ADDR_VAR 0 4
26771: PUSH
26772: DOUBLE
26773: LD_INT 0
26775: DEC
26776: ST_TO_ADDR
26777: LD_INT 5
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26893
// begin _x := ShiftX ( x , i , 3 ) ;
26783: LD_ADDR_VAR 0 7
26787: PUSH
26788: LD_VAR 0 5
26792: PPUSH
26793: LD_VAR 0 4
26797: PPUSH
26798: LD_INT 3
26800: PPUSH
26801: CALL_OW 272
26805: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26806: LD_ADDR_VAR 0 8
26810: PUSH
26811: LD_VAR 0 6
26815: PPUSH
26816: LD_VAR 0 4
26820: PPUSH
26821: LD_INT 3
26823: PPUSH
26824: CALL_OW 273
26828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26829: LD_VAR 0 7
26833: PPUSH
26834: LD_VAR 0 8
26838: PPUSH
26839: CALL_OW 488
26843: NOT
26844: IFFALSE 26848
// continue ;
26846: GO 26780
// if HexInfo ( _x , _y ) = 0 then
26848: LD_VAR 0 7
26852: PPUSH
26853: LD_VAR 0 8
26857: PPUSH
26858: CALL_OW 428
26862: PUSH
26863: LD_INT 0
26865: EQUAL
26866: IFFALSE 26891
// begin ComMoveXY ( unit , _x , _y ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_VAR 0 7
26877: PPUSH
26878: LD_VAR 0 8
26882: PPUSH
26883: CALL_OW 111
// exit ;
26887: POP
26888: POP
26889: GO 26895
// end ; end ;
26891: GO 26780
26893: POP
26894: POP
// end ;
26895: LD_VAR 0 3
26899: RET
// export function ScanBase ( side , base_area ) ; begin
26900: LD_INT 0
26902: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26903: LD_ADDR_VAR 0 3
26907: PUSH
26908: LD_VAR 0 2
26912: PPUSH
26913: LD_INT 81
26915: PUSH
26916: LD_VAR 0 1
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PPUSH
26925: CALL_OW 70
26929: ST_TO_ADDR
// end ;
26930: LD_VAR 0 3
26934: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26935: LD_INT 0
26937: PPUSH
26938: PPUSH
26939: PPUSH
26940: PPUSH
// result := false ;
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: LD_INT 0
26948: ST_TO_ADDR
// side := GetSide ( unit ) ;
26949: LD_ADDR_VAR 0 3
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 255
26963: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26964: LD_ADDR_VAR 0 4
26968: PUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 248
26978: ST_TO_ADDR
// case nat of 1 :
26979: LD_VAR 0 4
26983: PUSH
26984: LD_INT 1
26986: DOUBLE
26987: EQUAL
26988: IFTRUE 26992
26990: GO 27003
26992: POP
// tech := tech_lassight ; 2 :
26993: LD_ADDR_VAR 0 5
26997: PUSH
26998: LD_INT 12
27000: ST_TO_ADDR
27001: GO 27042
27003: LD_INT 2
27005: DOUBLE
27006: EQUAL
27007: IFTRUE 27011
27009: GO 27022
27011: POP
// tech := tech_mortar ; 3 :
27012: LD_ADDR_VAR 0 5
27016: PUSH
27017: LD_INT 41
27019: ST_TO_ADDR
27020: GO 27042
27022: LD_INT 3
27024: DOUBLE
27025: EQUAL
27026: IFTRUE 27030
27028: GO 27041
27030: POP
// tech := tech_bazooka ; end ;
27031: LD_ADDR_VAR 0 5
27035: PUSH
27036: LD_INT 44
27038: ST_TO_ADDR
27039: GO 27042
27041: POP
// if Researched ( side , tech ) then
27042: LD_VAR 0 3
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: CALL_OW 325
27056: IFFALSE 27083
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_INT 5
27065: PUSH
27066: LD_INT 8
27068: PUSH
27069: LD_INT 9
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_VAR 0 4
27081: ARRAY
27082: ST_TO_ADDR
// end ;
27083: LD_VAR 0 2
27087: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27088: LD_INT 0
27090: PPUSH
27091: PPUSH
27092: PPUSH
// if not mines then
27093: LD_VAR 0 2
27097: NOT
27098: IFFALSE 27102
// exit ;
27100: GO 27246
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27102: LD_ADDR_VAR 0 5
27106: PUSH
27107: LD_INT 81
27109: PUSH
27110: LD_VAR 0 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: LD_INT 21
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 69
27144: ST_TO_ADDR
// for i in mines do
27145: LD_ADDR_VAR 0 4
27149: PUSH
27150: LD_VAR 0 2
27154: PUSH
27155: FOR_IN
27156: IFFALSE 27244
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27158: LD_VAR 0 4
27162: PUSH
27163: LD_INT 1
27165: ARRAY
27166: PPUSH
27167: LD_VAR 0 4
27171: PUSH
27172: LD_INT 2
27174: ARRAY
27175: PPUSH
27176: CALL_OW 458
27180: NOT
27181: IFFALSE 27185
// continue ;
27183: GO 27155
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27185: LD_VAR 0 4
27189: PUSH
27190: LD_INT 1
27192: ARRAY
27193: PPUSH
27194: LD_VAR 0 4
27198: PUSH
27199: LD_INT 2
27201: ARRAY
27202: PPUSH
27203: CALL_OW 428
27207: PUSH
27208: LD_VAR 0 5
27212: IN
27213: IFFALSE 27242
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27215: LD_VAR 0 4
27219: PUSH
27220: LD_INT 1
27222: ARRAY
27223: PPUSH
27224: LD_VAR 0 4
27228: PUSH
27229: LD_INT 2
27231: ARRAY
27232: PPUSH
27233: LD_VAR 0 1
27237: PPUSH
27238: CALL_OW 456
// end ;
27242: GO 27155
27244: POP
27245: POP
// end ;
27246: LD_VAR 0 3
27250: RET
// export function Count ( array ) ; var i ; begin
27251: LD_INT 0
27253: PPUSH
27254: PPUSH
// result := 0 ;
27255: LD_ADDR_VAR 0 2
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// for i in array do
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_VAR 0 1
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27298
// if i then
27276: LD_VAR 0 3
27280: IFFALSE 27296
// result := result + 1 ;
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_VAR 0 2
27291: PUSH
27292: LD_INT 1
27294: PLUS
27295: ST_TO_ADDR
27296: GO 27273
27298: POP
27299: POP
// end ;
27300: LD_VAR 0 2
27304: RET
// export function IsEmpty ( building ) ; begin
27305: LD_INT 0
27307: PPUSH
// if not building then
27308: LD_VAR 0 1
27312: NOT
27313: IFFALSE 27317
// exit ;
27315: GO 27360
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_VAR 0 1
27326: PUSH
27327: LD_INT 22
27329: PUSH
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 255
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 58
27346: PUSH
27347: EMPTY
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: CALL_OW 69
27358: IN
27359: ST_TO_ADDR
// end ;
27360: LD_VAR 0 2
27364: RET
// export function IsNotFull ( building ) ; begin
27365: LD_INT 0
27367: PPUSH
// if not building then
27368: LD_VAR 0 1
27372: NOT
27373: IFFALSE 27377
// exit ;
27375: GO 27396
// result := UnitsInside ( building ) < 6 ;
27377: LD_ADDR_VAR 0 2
27381: PUSH
27382: LD_VAR 0 1
27386: PPUSH
27387: CALL_OW 313
27391: PUSH
27392: LD_INT 6
27394: LESS
27395: ST_TO_ADDR
// end ;
27396: LD_VAR 0 2
27400: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
// tmp := [ ] ;
27407: LD_ADDR_VAR 0 3
27411: PUSH
27412: EMPTY
27413: ST_TO_ADDR
// list := [ ] ;
27414: LD_ADDR_VAR 0 5
27418: PUSH
27419: EMPTY
27420: ST_TO_ADDR
// for i = 16 to 25 do
27421: LD_ADDR_VAR 0 4
27425: PUSH
27426: DOUBLE
27427: LD_INT 16
27429: DEC
27430: ST_TO_ADDR
27431: LD_INT 25
27433: PUSH
27434: FOR_TO
27435: IFFALSE 27508
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27437: LD_ADDR_VAR 0 3
27441: PUSH
27442: LD_VAR 0 3
27446: PUSH
27447: LD_INT 22
27449: PUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 255
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 91
27466: PUSH
27467: LD_VAR 0 1
27471: PUSH
27472: LD_INT 6
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 30
27482: PUSH
27483: LD_VAR 0 4
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: PPUSH
27500: CALL_OW 69
27504: ADD
27505: ST_TO_ADDR
27506: GO 27434
27508: POP
27509: POP
// for i = 1 to tmp do
27510: LD_ADDR_VAR 0 4
27514: PUSH
27515: DOUBLE
27516: LD_INT 1
27518: DEC
27519: ST_TO_ADDR
27520: LD_VAR 0 3
27524: PUSH
27525: FOR_TO
27526: IFFALSE 27614
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27528: LD_ADDR_VAR 0 5
27532: PUSH
27533: LD_VAR 0 5
27537: PUSH
27538: LD_VAR 0 3
27542: PUSH
27543: LD_VAR 0 4
27547: ARRAY
27548: PPUSH
27549: CALL_OW 266
27553: PUSH
27554: LD_VAR 0 3
27558: PUSH
27559: LD_VAR 0 4
27563: ARRAY
27564: PPUSH
27565: CALL_OW 250
27569: PUSH
27570: LD_VAR 0 3
27574: PUSH
27575: LD_VAR 0 4
27579: ARRAY
27580: PPUSH
27581: CALL_OW 251
27585: PUSH
27586: LD_VAR 0 3
27590: PUSH
27591: LD_VAR 0 4
27595: ARRAY
27596: PPUSH
27597: CALL_OW 254
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: ADD
27611: ST_TO_ADDR
27612: GO 27525
27614: POP
27615: POP
// result := list ;
27616: LD_ADDR_VAR 0 2
27620: PUSH
27621: LD_VAR 0 5
27625: ST_TO_ADDR
// end ;
27626: LD_VAR 0 2
27630: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27631: LD_INT 0
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
// if not factory then
27640: LD_VAR 0 1
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 28242
// if control = control_apeman then
27649: LD_VAR 0 4
27653: PUSH
27654: LD_INT 5
27656: EQUAL
27657: IFFALSE 27766
// begin tmp := UnitsInside ( factory ) ;
27659: LD_ADDR_VAR 0 8
27663: PUSH
27664: LD_VAR 0 1
27668: PPUSH
27669: CALL_OW 313
27673: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27674: LD_VAR 0 8
27678: PPUSH
27679: LD_INT 25
27681: PUSH
27682: LD_INT 12
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PPUSH
27689: CALL_OW 72
27693: NOT
27694: IFFALSE 27704
// control := control_manual ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_INT 1
27703: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27704: LD_ADDR_VAR 0 8
27708: PUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL 27401 0 1
27718: ST_TO_ADDR
// if tmp then
27719: LD_VAR 0 8
27723: IFFALSE 27766
// begin for i in tmp do
27725: LD_ADDR_VAR 0 7
27729: PUSH
27730: LD_VAR 0 8
27734: PUSH
27735: FOR_IN
27736: IFFALSE 27764
// if i [ 1 ] = b_ext_radio then
27738: LD_VAR 0 7
27742: PUSH
27743: LD_INT 1
27745: ARRAY
27746: PUSH
27747: LD_INT 22
27749: EQUAL
27750: IFFALSE 27762
// begin control := control_remote ;
27752: LD_ADDR_VAR 0 4
27756: PUSH
27757: LD_INT 2
27759: ST_TO_ADDR
// break ;
27760: GO 27764
// end ;
27762: GO 27735
27764: POP
27765: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27766: LD_VAR 0 1
27770: PPUSH
27771: LD_VAR 0 2
27775: PPUSH
27776: LD_VAR 0 3
27780: PPUSH
27781: LD_VAR 0 4
27785: PPUSH
27786: LD_VAR 0 5
27790: PPUSH
27791: CALL_OW 448
27795: IFFALSE 27830
// begin result := [ chassis , engine , control , weapon ] ;
27797: LD_ADDR_VAR 0 6
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: LD_VAR 0 3
27811: PUSH
27812: LD_VAR 0 4
27816: PUSH
27817: LD_VAR 0 5
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// exit ;
27828: GO 28242
// end ; _chassis := AvailableChassisList ( factory ) ;
27830: LD_ADDR_VAR 0 9
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 475
27844: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27845: LD_ADDR_VAR 0 11
27849: PUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: CALL_OW 476
27859: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27860: LD_ADDR_VAR 0 12
27864: PUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL_OW 477
27874: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: LD_VAR 0 1
27884: PPUSH
27885: CALL_OW 478
27889: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27890: LD_VAR 0 9
27894: NOT
27895: PUSH
27896: LD_VAR 0 11
27900: NOT
27901: OR
27902: PUSH
27903: LD_VAR 0 12
27907: NOT
27908: OR
27909: PUSH
27910: LD_VAR 0 10
27914: NOT
27915: OR
27916: IFFALSE 27951
// begin result := [ chassis , engine , control , weapon ] ;
27918: LD_ADDR_VAR 0 6
27922: PUSH
27923: LD_VAR 0 2
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: LD_VAR 0 4
27937: PUSH
27938: LD_VAR 0 5
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// exit ;
27949: GO 28242
// end ; if not chassis in _chassis then
27951: LD_VAR 0 2
27955: PUSH
27956: LD_VAR 0 9
27960: IN
27961: NOT
27962: IFFALSE 27988
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27964: LD_ADDR_VAR 0 2
27968: PUSH
27969: LD_VAR 0 9
27973: PUSH
27974: LD_INT 1
27976: PPUSH
27977: LD_VAR 0 9
27981: PPUSH
27982: CALL_OW 12
27986: ARRAY
27987: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27988: LD_VAR 0 2
27992: PPUSH
27993: LD_VAR 0 3
27997: PPUSH
27998: CALL 28247 0 2
28002: NOT
28003: IFFALSE 28062
// repeat engine := _engine [ 1 ] ;
28005: LD_ADDR_VAR 0 3
28009: PUSH
28010: LD_VAR 0 11
28014: PUSH
28015: LD_INT 1
28017: ARRAY
28018: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28019: LD_ADDR_VAR 0 11
28023: PUSH
28024: LD_VAR 0 11
28028: PPUSH
28029: LD_INT 1
28031: PPUSH
28032: CALL_OW 3
28036: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28037: LD_VAR 0 2
28041: PPUSH
28042: LD_VAR 0 3
28046: PPUSH
28047: CALL 28247 0 2
28051: PUSH
28052: LD_VAR 0 11
28056: PUSH
28057: EMPTY
28058: EQUAL
28059: OR
28060: IFFALSE 28005
// if not control in _control then
28062: LD_VAR 0 4
28066: PUSH
28067: LD_VAR 0 12
28071: IN
28072: NOT
28073: IFFALSE 28099
// control := _control [ rand ( 1 , _control ) ] ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: LD_VAR 0 12
28084: PUSH
28085: LD_INT 1
28087: PPUSH
28088: LD_VAR 0 12
28092: PPUSH
28093: CALL_OW 12
28097: ARRAY
28098: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28099: LD_VAR 0 2
28103: PPUSH
28104: LD_VAR 0 5
28108: PPUSH
28109: CALL 28467 0 2
28113: NOT
28114: IFFALSE 28173
// repeat weapon := _weapon [ 1 ] ;
28116: LD_ADDR_VAR 0 5
28120: PUSH
28121: LD_VAR 0 10
28125: PUSH
28126: LD_INT 1
28128: ARRAY
28129: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28130: LD_ADDR_VAR 0 10
28134: PUSH
28135: LD_VAR 0 10
28139: PPUSH
28140: LD_INT 1
28142: PPUSH
28143: CALL_OW 3
28147: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28148: LD_VAR 0 2
28152: PPUSH
28153: LD_VAR 0 5
28157: PPUSH
28158: CALL 28467 0 2
28162: PUSH
28163: LD_VAR 0 10
28167: PUSH
28168: EMPTY
28169: EQUAL
28170: OR
28171: IFFALSE 28116
// result := [ ] ;
28173: LD_ADDR_VAR 0 6
28177: PUSH
28178: EMPTY
28179: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28180: LD_VAR 0 1
28184: PPUSH
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_VAR 0 3
28194: PPUSH
28195: LD_VAR 0 4
28199: PPUSH
28200: LD_VAR 0 5
28204: PPUSH
28205: CALL_OW 448
28209: IFFALSE 28242
// result := [ chassis , engine , control , weapon ] ;
28211: LD_ADDR_VAR 0 6
28215: PUSH
28216: LD_VAR 0 2
28220: PUSH
28221: LD_VAR 0 3
28225: PUSH
28226: LD_VAR 0 4
28230: PUSH
28231: LD_VAR 0 5
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// end ;
28242: LD_VAR 0 6
28246: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28247: LD_INT 0
28249: PPUSH
// if not chassis or not engine then
28250: LD_VAR 0 1
28254: NOT
28255: PUSH
28256: LD_VAR 0 2
28260: NOT
28261: OR
28262: IFFALSE 28266
// exit ;
28264: GO 28462
// case engine of engine_solar :
28266: LD_VAR 0 2
28270: PUSH
28271: LD_INT 2
28273: DOUBLE
28274: EQUAL
28275: IFTRUE 28279
28277: GO 28317
28279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_INT 11
28287: PUSH
28288: LD_INT 12
28290: PUSH
28291: LD_INT 13
28293: PUSH
28294: LD_INT 14
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 3
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 28446
28317: LD_INT 1
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28387
28325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 11
28333: PUSH
28334: LD_INT 12
28336: PUSH
28337: LD_INT 13
28339: PUSH
28340: LD_INT 14
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 4
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: LD_INT 21
28360: PUSH
28361: LD_INT 23
28363: PUSH
28364: LD_INT 22
28366: PUSH
28367: LD_INT 24
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: ST_TO_ADDR
28385: GO 28446
28387: LD_INT 3
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28445
28395: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 13
28403: PUSH
28404: LD_INT 14
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 4
28415: PUSH
28416: LD_INT 5
28418: PUSH
28419: LD_INT 21
28421: PUSH
28422: LD_INT 22
28424: PUSH
28425: LD_INT 23
28427: PUSH
28428: LD_INT 24
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28446
28445: POP
// result := ( chassis in result ) ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_VAR 0 1
28455: PUSH
28456: LD_VAR 0 3
28460: IN
28461: ST_TO_ADDR
// end ;
28462: LD_VAR 0 3
28466: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28467: LD_INT 0
28469: PPUSH
// if not chassis or not weapon then
28470: LD_VAR 0 1
28474: NOT
28475: PUSH
28476: LD_VAR 0 2
28480: NOT
28481: OR
28482: IFFALSE 28486
// exit ;
28484: GO 29512
// case weapon of us_machine_gun :
28486: LD_VAR 0 2
28490: PUSH
28491: LD_INT 2
28493: DOUBLE
28494: EQUAL
28495: IFTRUE 28499
28497: GO 28529
28499: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: LD_INT 2
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 4
28516: PUSH
28517: LD_INT 5
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: ST_TO_ADDR
28527: GO 29496
28529: LD_INT 3
28531: DOUBLE
28532: EQUAL
28533: IFTRUE 28537
28535: GO 28567
28537: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: LD_INT 4
28554: PUSH
28555: LD_INT 5
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
28565: GO 29496
28567: LD_INT 11
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28605
28575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: LD_INT 4
28592: PUSH
28593: LD_INT 5
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
28603: GO 29496
28605: LD_INT 4
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28639
28613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 3
28624: PUSH
28625: LD_INT 4
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
28637: GO 29496
28639: LD_INT 5
28641: DOUBLE
28642: EQUAL
28643: IFTRUE 28647
28645: GO 28673
28647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28648: LD_ADDR_VAR 0 3
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 4
28661: PUSH
28662: LD_INT 5
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
28671: GO 29496
28673: LD_INT 9
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28707
28681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28682: LD_ADDR_VAR 0 3
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 3
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: LD_INT 5
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
28705: GO 29496
28707: LD_INT 7
28709: DOUBLE
28710: EQUAL
28711: IFTRUE 28715
28713: GO 28741
28715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 3
28726: PUSH
28727: LD_INT 4
28729: PUSH
28730: LD_INT 5
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: ST_TO_ADDR
28739: GO 29496
28741: LD_INT 12
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28775
28749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: LD_INT 5
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: ST_TO_ADDR
28773: GO 29496
28775: LD_INT 13
28777: DOUBLE
28778: EQUAL
28779: IFTRUE 28783
28781: GO 28809
28783: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 3
28794: PUSH
28795: LD_INT 4
28797: PUSH
28798: LD_INT 5
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: ST_TO_ADDR
28807: GO 29496
28809: LD_INT 14
28811: DOUBLE
28812: EQUAL
28813: IFTRUE 28817
28815: GO 28835
28817: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28818: LD_ADDR_VAR 0 3
28822: PUSH
28823: LD_INT 4
28825: PUSH
28826: LD_INT 5
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: ST_TO_ADDR
28833: GO 29496
28835: LD_INT 6
28837: DOUBLE
28838: EQUAL
28839: IFTRUE 28843
28841: GO 28861
28843: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28844: LD_ADDR_VAR 0 3
28848: PUSH
28849: LD_INT 4
28851: PUSH
28852: LD_INT 5
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: ST_TO_ADDR
28859: GO 29496
28861: LD_INT 10
28863: DOUBLE
28864: EQUAL
28865: IFTRUE 28869
28867: GO 28887
28869: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28870: LD_ADDR_VAR 0 3
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 5
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: ST_TO_ADDR
28885: GO 29496
28887: LD_INT 22
28889: DOUBLE
28890: EQUAL
28891: IFTRUE 28895
28893: GO 28921
28895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28896: LD_ADDR_VAR 0 3
28900: PUSH
28901: LD_INT 11
28903: PUSH
28904: LD_INT 12
28906: PUSH
28907: LD_INT 13
28909: PUSH
28910: LD_INT 14
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: ST_TO_ADDR
28919: GO 29496
28921: LD_INT 23
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28929
28927: GO 28955
28929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28930: LD_ADDR_VAR 0 3
28934: PUSH
28935: LD_INT 11
28937: PUSH
28938: LD_INT 12
28940: PUSH
28941: LD_INT 13
28943: PUSH
28944: LD_INT 14
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
28953: GO 29496
28955: LD_INT 24
28957: DOUBLE
28958: EQUAL
28959: IFTRUE 28963
28961: GO 28989
28963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28964: LD_ADDR_VAR 0 3
28968: PUSH
28969: LD_INT 11
28971: PUSH
28972: LD_INT 12
28974: PUSH
28975: LD_INT 13
28977: PUSH
28978: LD_INT 14
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
28987: GO 29496
28989: LD_INT 30
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29023
28997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_INT 11
29005: PUSH
29006: LD_INT 12
29008: PUSH
29009: LD_INT 13
29011: PUSH
29012: LD_INT 14
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
29021: GO 29496
29023: LD_INT 25
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29049
29031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 13
29039: PUSH
29040: LD_INT 14
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: ST_TO_ADDR
29047: GO 29496
29049: LD_INT 27
29051: DOUBLE
29052: EQUAL
29053: IFTRUE 29057
29055: GO 29075
29057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29058: LD_ADDR_VAR 0 3
29062: PUSH
29063: LD_INT 13
29065: PUSH
29066: LD_INT 14
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: ST_TO_ADDR
29073: GO 29496
29075: LD_INT 28
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29101
29083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 13
29091: PUSH
29092: LD_INT 14
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: ST_TO_ADDR
29099: GO 29496
29101: LD_INT 29
29103: DOUBLE
29104: EQUAL
29105: IFTRUE 29109
29107: GO 29127
29109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29110: LD_ADDR_VAR 0 3
29114: PUSH
29115: LD_INT 13
29117: PUSH
29118: LD_INT 14
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: ST_TO_ADDR
29125: GO 29496
29127: LD_INT 31
29129: DOUBLE
29130: EQUAL
29131: IFTRUE 29135
29133: GO 29153
29135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29136: LD_ADDR_VAR 0 3
29140: PUSH
29141: LD_INT 13
29143: PUSH
29144: LD_INT 14
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: ST_TO_ADDR
29151: GO 29496
29153: LD_INT 26
29155: DOUBLE
29156: EQUAL
29157: IFTRUE 29161
29159: GO 29179
29161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29162: LD_ADDR_VAR 0 3
29166: PUSH
29167: LD_INT 13
29169: PUSH
29170: LD_INT 14
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: ST_TO_ADDR
29177: GO 29496
29179: LD_INT 42
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29213
29187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_INT 21
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 23
29201: PUSH
29202: LD_INT 24
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
29211: GO 29496
29213: LD_INT 43
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29247
29221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_INT 21
29229: PUSH
29230: LD_INT 22
29232: PUSH
29233: LD_INT 23
29235: PUSH
29236: LD_INT 24
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
29245: GO 29496
29247: LD_INT 44
29249: DOUBLE
29250: EQUAL
29251: IFTRUE 29255
29253: GO 29281
29255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29256: LD_ADDR_VAR 0 3
29260: PUSH
29261: LD_INT 21
29263: PUSH
29264: LD_INT 22
29266: PUSH
29267: LD_INT 23
29269: PUSH
29270: LD_INT 24
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
29279: GO 29496
29281: LD_INT 45
29283: DOUBLE
29284: EQUAL
29285: IFTRUE 29289
29287: GO 29315
29289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_INT 21
29297: PUSH
29298: LD_INT 22
29300: PUSH
29301: LD_INT 23
29303: PUSH
29304: LD_INT 24
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
29313: GO 29496
29315: LD_INT 49
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29349
29323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: LD_INT 21
29331: PUSH
29332: LD_INT 22
29334: PUSH
29335: LD_INT 23
29337: PUSH
29338: LD_INT 24
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: ST_TO_ADDR
29347: GO 29496
29349: LD_INT 51
29351: DOUBLE
29352: EQUAL
29353: IFTRUE 29357
29355: GO 29383
29357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_INT 21
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_INT 23
29371: PUSH
29372: LD_INT 24
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
29381: GO 29496
29383: LD_INT 52
29385: DOUBLE
29386: EQUAL
29387: IFTRUE 29391
29389: GO 29417
29391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_INT 21
29399: PUSH
29400: LD_INT 22
29402: PUSH
29403: LD_INT 23
29405: PUSH
29406: LD_INT 24
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
29415: GO 29496
29417: LD_INT 53
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29443
29425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 23
29433: PUSH
29434: LD_INT 24
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: ST_TO_ADDR
29441: GO 29496
29443: LD_INT 46
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 29469
29451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 23
29459: PUSH
29460: LD_INT 24
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: ST_TO_ADDR
29467: GO 29496
29469: LD_INT 47
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29495
29477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29478: LD_ADDR_VAR 0 3
29482: PUSH
29483: LD_INT 23
29485: PUSH
29486: LD_INT 24
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: ST_TO_ADDR
29493: GO 29496
29495: POP
// result := ( chassis in result ) ;
29496: LD_ADDR_VAR 0 3
29500: PUSH
29501: LD_VAR 0 1
29505: PUSH
29506: LD_VAR 0 3
29510: IN
29511: ST_TO_ADDR
// end ;
29512: LD_VAR 0 3
29516: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29517: LD_INT 0
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
29525: PPUSH
// result := array ;
29526: LD_ADDR_VAR 0 5
29530: PUSH
29531: LD_VAR 0 1
29535: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29536: LD_VAR 0 1
29540: NOT
29541: PUSH
29542: LD_VAR 0 2
29546: NOT
29547: OR
29548: PUSH
29549: LD_VAR 0 3
29553: NOT
29554: OR
29555: PUSH
29556: LD_VAR 0 2
29560: PUSH
29561: LD_VAR 0 1
29565: GREATER
29566: OR
29567: PUSH
29568: LD_VAR 0 3
29572: PUSH
29573: LD_VAR 0 1
29577: GREATER
29578: OR
29579: IFFALSE 29583
// exit ;
29581: GO 29879
// if direction then
29583: LD_VAR 0 4
29587: IFFALSE 29651
// begin d := 1 ;
29589: LD_ADDR_VAR 0 9
29593: PUSH
29594: LD_INT 1
29596: ST_TO_ADDR
// if i_from > i_to then
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 3
29606: GREATER
29607: IFFALSE 29633
// length := ( array - i_from ) + i_to else
29609: LD_ADDR_VAR 0 11
29613: PUSH
29614: LD_VAR 0 1
29618: PUSH
29619: LD_VAR 0 2
29623: MINUS
29624: PUSH
29625: LD_VAR 0 3
29629: PLUS
29630: ST_TO_ADDR
29631: GO 29649
// length := i_to - i_from ;
29633: LD_ADDR_VAR 0 11
29637: PUSH
29638: LD_VAR 0 3
29642: PUSH
29643: LD_VAR 0 2
29647: MINUS
29648: ST_TO_ADDR
// end else
29649: GO 29712
// begin d := - 1 ;
29651: LD_ADDR_VAR 0 9
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: ST_TO_ADDR
// if i_from > i_to then
29660: LD_VAR 0 2
29664: PUSH
29665: LD_VAR 0 3
29669: GREATER
29670: IFFALSE 29690
// length := i_from - i_to else
29672: LD_ADDR_VAR 0 11
29676: PUSH
29677: LD_VAR 0 2
29681: PUSH
29682: LD_VAR 0 3
29686: MINUS
29687: ST_TO_ADDR
29688: GO 29712
// length := ( array - i_to ) + i_from ;
29690: LD_ADDR_VAR 0 11
29694: PUSH
29695: LD_VAR 0 1
29699: PUSH
29700: LD_VAR 0 3
29704: MINUS
29705: PUSH
29706: LD_VAR 0 2
29710: PLUS
29711: ST_TO_ADDR
// end ; if not length then
29712: LD_VAR 0 11
29716: NOT
29717: IFFALSE 29721
// exit ;
29719: GO 29879
// tmp := array ;
29721: LD_ADDR_VAR 0 10
29725: PUSH
29726: LD_VAR 0 1
29730: ST_TO_ADDR
// for i = 1 to length do
29731: LD_ADDR_VAR 0 6
29735: PUSH
29736: DOUBLE
29737: LD_INT 1
29739: DEC
29740: ST_TO_ADDR
29741: LD_VAR 0 11
29745: PUSH
29746: FOR_TO
29747: IFFALSE 29867
// begin for j = 1 to array do
29749: LD_ADDR_VAR 0 7
29753: PUSH
29754: DOUBLE
29755: LD_INT 1
29757: DEC
29758: ST_TO_ADDR
29759: LD_VAR 0 1
29763: PUSH
29764: FOR_TO
29765: IFFALSE 29853
// begin k := j + d ;
29767: LD_ADDR_VAR 0 8
29771: PUSH
29772: LD_VAR 0 7
29776: PUSH
29777: LD_VAR 0 9
29781: PLUS
29782: ST_TO_ADDR
// if k > array then
29783: LD_VAR 0 8
29787: PUSH
29788: LD_VAR 0 1
29792: GREATER
29793: IFFALSE 29803
// k := 1 ;
29795: LD_ADDR_VAR 0 8
29799: PUSH
29800: LD_INT 1
29802: ST_TO_ADDR
// if not k then
29803: LD_VAR 0 8
29807: NOT
29808: IFFALSE 29820
// k := array ;
29810: LD_ADDR_VAR 0 8
29814: PUSH
29815: LD_VAR 0 1
29819: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29820: LD_ADDR_VAR 0 10
29824: PUSH
29825: LD_VAR 0 10
29829: PPUSH
29830: LD_VAR 0 8
29834: PPUSH
29835: LD_VAR 0 1
29839: PUSH
29840: LD_VAR 0 7
29844: ARRAY
29845: PPUSH
29846: CALL_OW 1
29850: ST_TO_ADDR
// end ;
29851: GO 29764
29853: POP
29854: POP
// array := tmp ;
29855: LD_ADDR_VAR 0 1
29859: PUSH
29860: LD_VAR 0 10
29864: ST_TO_ADDR
// end ;
29865: GO 29746
29867: POP
29868: POP
// result := array ;
29869: LD_ADDR_VAR 0 5
29873: PUSH
29874: LD_VAR 0 1
29878: ST_TO_ADDR
// end ;
29879: LD_VAR 0 5
29883: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29884: LD_INT 0
29886: PPUSH
29887: PPUSH
// result := 0 ;
29888: LD_ADDR_VAR 0 3
29892: PUSH
29893: LD_INT 0
29895: ST_TO_ADDR
// if not array or not value in array then
29896: LD_VAR 0 1
29900: NOT
29901: PUSH
29902: LD_VAR 0 2
29906: PUSH
29907: LD_VAR 0 1
29911: IN
29912: NOT
29913: OR
29914: IFFALSE 29918
// exit ;
29916: GO 29972
// for i = 1 to array do
29918: LD_ADDR_VAR 0 4
29922: PUSH
29923: DOUBLE
29924: LD_INT 1
29926: DEC
29927: ST_TO_ADDR
29928: LD_VAR 0 1
29932: PUSH
29933: FOR_TO
29934: IFFALSE 29970
// if value = array [ i ] then
29936: LD_VAR 0 2
29940: PUSH
29941: LD_VAR 0 1
29945: PUSH
29946: LD_VAR 0 4
29950: ARRAY
29951: EQUAL
29952: IFFALSE 29968
// begin result := i ;
29954: LD_ADDR_VAR 0 3
29958: PUSH
29959: LD_VAR 0 4
29963: ST_TO_ADDR
// exit ;
29964: POP
29965: POP
29966: GO 29972
// end ;
29968: GO 29933
29970: POP
29971: POP
// end ;
29972: LD_VAR 0 3
29976: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29977: LD_INT 0
29979: PPUSH
// vc_chassis := chassis ;
29980: LD_ADDR_OWVAR 37
29984: PUSH
29985: LD_VAR 0 1
29989: ST_TO_ADDR
// vc_engine := engine ;
29990: LD_ADDR_OWVAR 39
29994: PUSH
29995: LD_VAR 0 2
29999: ST_TO_ADDR
// vc_control := control ;
30000: LD_ADDR_OWVAR 38
30004: PUSH
30005: LD_VAR 0 3
30009: ST_TO_ADDR
// vc_weapon := weapon ;
30010: LD_ADDR_OWVAR 40
30014: PUSH
30015: LD_VAR 0 4
30019: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30020: LD_ADDR_OWVAR 41
30024: PUSH
30025: LD_VAR 0 5
30029: ST_TO_ADDR
// end ;
30030: LD_VAR 0 6
30034: RET
// export function WantPlant ( unit ) ; var task ; begin
30035: LD_INT 0
30037: PPUSH
30038: PPUSH
// result := false ;
30039: LD_ADDR_VAR 0 2
30043: PUSH
30044: LD_INT 0
30046: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL_OW 437
30061: ST_TO_ADDR
// if task then
30062: LD_VAR 0 3
30066: IFFALSE 30094
// if task [ 1 ] [ 1 ] = p then
30068: LD_VAR 0 3
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: PUSH
30077: LD_INT 1
30079: ARRAY
30080: PUSH
30081: LD_STRING p
30083: EQUAL
30084: IFFALSE 30094
// result := true ;
30086: LD_ADDR_VAR 0 2
30090: PUSH
30091: LD_INT 1
30093: ST_TO_ADDR
// end ;
30094: LD_VAR 0 2
30098: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
// if pos < 1 then
30105: LD_VAR 0 2
30109: PUSH
30110: LD_INT 1
30112: LESS
30113: IFFALSE 30117
// exit ;
30115: GO 30420
// if pos = 1 then
30117: LD_VAR 0 2
30121: PUSH
30122: LD_INT 1
30124: EQUAL
30125: IFFALSE 30158
// result := Replace ( arr , pos [ 1 ] , value ) else
30127: LD_ADDR_VAR 0 4
30131: PUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: LD_VAR 0 2
30141: PUSH
30142: LD_INT 1
30144: ARRAY
30145: PPUSH
30146: LD_VAR 0 3
30150: PPUSH
30151: CALL_OW 1
30155: ST_TO_ADDR
30156: GO 30420
// begin tmp := arr ;
30158: LD_ADDR_VAR 0 6
30162: PUSH
30163: LD_VAR 0 1
30167: ST_TO_ADDR
// s_arr := [ tmp ] ;
30168: LD_ADDR_VAR 0 7
30172: PUSH
30173: LD_VAR 0 6
30177: PUSH
30178: EMPTY
30179: LIST
30180: ST_TO_ADDR
// for i = 1 to pos - 1 do
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: DOUBLE
30187: LD_INT 1
30189: DEC
30190: ST_TO_ADDR
30191: LD_VAR 0 2
30195: PUSH
30196: LD_INT 1
30198: MINUS
30199: PUSH
30200: FOR_TO
30201: IFFALSE 30246
// begin tmp := tmp [ pos [ i ] ] ;
30203: LD_ADDR_VAR 0 6
30207: PUSH
30208: LD_VAR 0 6
30212: PUSH
30213: LD_VAR 0 2
30217: PUSH
30218: LD_VAR 0 5
30222: ARRAY
30223: ARRAY
30224: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30225: LD_ADDR_VAR 0 7
30229: PUSH
30230: LD_VAR 0 7
30234: PUSH
30235: LD_VAR 0 6
30239: PUSH
30240: EMPTY
30241: LIST
30242: ADD
30243: ST_TO_ADDR
// end ;
30244: GO 30200
30246: POP
30247: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30248: LD_ADDR_VAR 0 6
30252: PUSH
30253: LD_VAR 0 6
30257: PPUSH
30258: LD_VAR 0 2
30262: PUSH
30263: LD_VAR 0 2
30267: ARRAY
30268: PPUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: CALL_OW 1
30278: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30279: LD_ADDR_VAR 0 7
30283: PUSH
30284: LD_VAR 0 7
30288: PPUSH
30289: LD_VAR 0 7
30293: PPUSH
30294: LD_VAR 0 6
30298: PPUSH
30299: CALL_OW 1
30303: ST_TO_ADDR
// for i = s_arr downto 2 do
30304: LD_ADDR_VAR 0 5
30308: PUSH
30309: DOUBLE
30310: LD_VAR 0 7
30314: INC
30315: ST_TO_ADDR
30316: LD_INT 2
30318: PUSH
30319: FOR_DOWNTO
30320: IFFALSE 30404
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30322: LD_ADDR_VAR 0 6
30326: PUSH
30327: LD_VAR 0 7
30331: PUSH
30332: LD_VAR 0 5
30336: PUSH
30337: LD_INT 1
30339: MINUS
30340: ARRAY
30341: PPUSH
30342: LD_VAR 0 2
30346: PUSH
30347: LD_VAR 0 5
30351: PUSH
30352: LD_INT 1
30354: MINUS
30355: ARRAY
30356: PPUSH
30357: LD_VAR 0 7
30361: PUSH
30362: LD_VAR 0 5
30366: ARRAY
30367: PPUSH
30368: CALL_OW 1
30372: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30373: LD_ADDR_VAR 0 7
30377: PUSH
30378: LD_VAR 0 7
30382: PPUSH
30383: LD_VAR 0 5
30387: PUSH
30388: LD_INT 1
30390: MINUS
30391: PPUSH
30392: LD_VAR 0 6
30396: PPUSH
30397: CALL_OW 1
30401: ST_TO_ADDR
// end ;
30402: GO 30319
30404: POP
30405: POP
// result := s_arr [ 1 ] ;
30406: LD_ADDR_VAR 0 4
30410: PUSH
30411: LD_VAR 0 7
30415: PUSH
30416: LD_INT 1
30418: ARRAY
30419: ST_TO_ADDR
// end ; end ;
30420: LD_VAR 0 4
30424: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30425: LD_INT 0
30427: PPUSH
30428: PPUSH
// if not list then
30429: LD_VAR 0 1
30433: NOT
30434: IFFALSE 30438
// exit ;
30436: GO 30529
// i := list [ pos1 ] ;
30438: LD_ADDR_VAR 0 5
30442: PUSH
30443: LD_VAR 0 1
30447: PUSH
30448: LD_VAR 0 2
30452: ARRAY
30453: ST_TO_ADDR
// if not i then
30454: LD_VAR 0 5
30458: NOT
30459: IFFALSE 30463
// exit ;
30461: GO 30529
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30463: LD_ADDR_VAR 0 1
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_VAR 0 2
30477: PPUSH
30478: LD_VAR 0 1
30482: PUSH
30483: LD_VAR 0 3
30487: ARRAY
30488: PPUSH
30489: CALL_OW 1
30493: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30494: LD_ADDR_VAR 0 1
30498: PUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: LD_VAR 0 3
30508: PPUSH
30509: LD_VAR 0 5
30513: PPUSH
30514: CALL_OW 1
30518: ST_TO_ADDR
// result := list ;
30519: LD_ADDR_VAR 0 4
30523: PUSH
30524: LD_VAR 0 1
30528: ST_TO_ADDR
// end ;
30529: LD_VAR 0 4
30533: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30534: LD_INT 0
30536: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30537: LD_ADDR_VAR 0 5
30541: PUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 250
30551: PPUSH
30552: LD_VAR 0 1
30556: PPUSH
30557: CALL_OW 251
30561: PPUSH
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: CALL 30587 0 5
30581: ST_TO_ADDR
// end ;
30582: LD_VAR 0 5
30586: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30587: LD_INT 0
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
// if not list then
30593: LD_VAR 0 3
30597: NOT
30598: IFFALSE 30602
// exit ;
30600: GO 30990
// result := [ ] ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: EMPTY
30608: ST_TO_ADDR
// for i in list do
30609: LD_ADDR_VAR 0 7
30613: PUSH
30614: LD_VAR 0 3
30618: PUSH
30619: FOR_IN
30620: IFFALSE 30822
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30622: LD_ADDR_VAR 0 9
30626: PUSH
30627: LD_VAR 0 7
30631: PPUSH
30632: LD_VAR 0 1
30636: PPUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: CALL_OW 297
30646: ST_TO_ADDR
// if not result then
30647: LD_VAR 0 6
30651: NOT
30652: IFFALSE 30678
// result := [ [ i , tmp ] ] else
30654: LD_ADDR_VAR 0 6
30658: PUSH
30659: LD_VAR 0 7
30663: PUSH
30664: LD_VAR 0 9
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: ST_TO_ADDR
30676: GO 30820
// begin if result [ result ] [ 2 ] < tmp then
30678: LD_VAR 0 6
30682: PUSH
30683: LD_VAR 0 6
30687: ARRAY
30688: PUSH
30689: LD_INT 2
30691: ARRAY
30692: PUSH
30693: LD_VAR 0 9
30697: LESS
30698: IFFALSE 30740
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30700: LD_ADDR_VAR 0 6
30704: PUSH
30705: LD_VAR 0 6
30709: PPUSH
30710: LD_VAR 0 6
30714: PUSH
30715: LD_INT 1
30717: PLUS
30718: PPUSH
30719: LD_VAR 0 7
30723: PUSH
30724: LD_VAR 0 9
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PPUSH
30733: CALL_OW 2
30737: ST_TO_ADDR
30738: GO 30820
// for j = 1 to result do
30740: LD_ADDR_VAR 0 8
30744: PUSH
30745: DOUBLE
30746: LD_INT 1
30748: DEC
30749: ST_TO_ADDR
30750: LD_VAR 0 6
30754: PUSH
30755: FOR_TO
30756: IFFALSE 30818
// begin if tmp < result [ j ] [ 2 ] then
30758: LD_VAR 0 9
30762: PUSH
30763: LD_VAR 0 6
30767: PUSH
30768: LD_VAR 0 8
30772: ARRAY
30773: PUSH
30774: LD_INT 2
30776: ARRAY
30777: LESS
30778: IFFALSE 30816
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30780: LD_ADDR_VAR 0 6
30784: PUSH
30785: LD_VAR 0 6
30789: PPUSH
30790: LD_VAR 0 8
30794: PPUSH
30795: LD_VAR 0 7
30799: PUSH
30800: LD_VAR 0 9
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PPUSH
30809: CALL_OW 2
30813: ST_TO_ADDR
// break ;
30814: GO 30818
// end ; end ;
30816: GO 30755
30818: POP
30819: POP
// end ; end ;
30820: GO 30619
30822: POP
30823: POP
// if result and not asc then
30824: LD_VAR 0 6
30828: PUSH
30829: LD_VAR 0 4
30833: NOT
30834: AND
30835: IFFALSE 30910
// begin tmp := result ;
30837: LD_ADDR_VAR 0 9
30841: PUSH
30842: LD_VAR 0 6
30846: ST_TO_ADDR
// for i = tmp downto 1 do
30847: LD_ADDR_VAR 0 7
30851: PUSH
30852: DOUBLE
30853: LD_VAR 0 9
30857: INC
30858: ST_TO_ADDR
30859: LD_INT 1
30861: PUSH
30862: FOR_DOWNTO
30863: IFFALSE 30908
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30865: LD_ADDR_VAR 0 6
30869: PUSH
30870: LD_VAR 0 6
30874: PPUSH
30875: LD_VAR 0 9
30879: PUSH
30880: LD_VAR 0 7
30884: MINUS
30885: PUSH
30886: LD_INT 1
30888: PLUS
30889: PPUSH
30890: LD_VAR 0 9
30894: PUSH
30895: LD_VAR 0 7
30899: ARRAY
30900: PPUSH
30901: CALL_OW 1
30905: ST_TO_ADDR
30906: GO 30862
30908: POP
30909: POP
// end ; tmp := [ ] ;
30910: LD_ADDR_VAR 0 9
30914: PUSH
30915: EMPTY
30916: ST_TO_ADDR
// if mode then
30917: LD_VAR 0 5
30921: IFFALSE 30990
// begin for i = 1 to result do
30923: LD_ADDR_VAR 0 7
30927: PUSH
30928: DOUBLE
30929: LD_INT 1
30931: DEC
30932: ST_TO_ADDR
30933: LD_VAR 0 6
30937: PUSH
30938: FOR_TO
30939: IFFALSE 30978
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30941: LD_ADDR_VAR 0 9
30945: PUSH
30946: LD_VAR 0 9
30950: PPUSH
30951: LD_VAR 0 7
30955: PPUSH
30956: LD_VAR 0 6
30960: PUSH
30961: LD_VAR 0 7
30965: ARRAY
30966: PUSH
30967: LD_INT 1
30969: ARRAY
30970: PPUSH
30971: CALL_OW 1
30975: ST_TO_ADDR
30976: GO 30938
30978: POP
30979: POP
// result := tmp ;
30980: LD_ADDR_VAR 0 6
30984: PUSH
30985: LD_VAR 0 9
30989: ST_TO_ADDR
// end ; end ;
30990: LD_VAR 0 6
30994: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30995: LD_INT 0
30997: PPUSH
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
31002: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31003: LD_ADDR_VAR 0 5
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: ST_TO_ADDR
// if not x or not y then
31025: LD_VAR 0 2
31029: NOT
31030: PUSH
31031: LD_VAR 0 3
31035: NOT
31036: OR
31037: IFFALSE 31041
// exit ;
31039: GO 32687
// if not range then
31041: LD_VAR 0 4
31045: NOT
31046: IFFALSE 31056
// range := 10 ;
31048: LD_ADDR_VAR 0 4
31052: PUSH
31053: LD_INT 10
31055: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31056: LD_ADDR_VAR 0 8
31060: PUSH
31061: LD_INT 81
31063: PUSH
31064: LD_VAR 0 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 92
31075: PUSH
31076: LD_VAR 0 2
31080: PUSH
31081: LD_VAR 0 3
31085: PUSH
31086: LD_VAR 0 4
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 3
31099: PUSH
31100: LD_INT 21
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: PPUSH
31119: CALL_OW 69
31123: ST_TO_ADDR
// if not tmp then
31124: LD_VAR 0 8
31128: NOT
31129: IFFALSE 31133
// exit ;
31131: GO 32687
// for i in tmp do
31133: LD_ADDR_VAR 0 6
31137: PUSH
31138: LD_VAR 0 8
31142: PUSH
31143: FOR_IN
31144: IFFALSE 32662
// begin points := [ 0 , 0 , 0 ] ;
31146: LD_ADDR_VAR 0 9
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: ST_TO_ADDR
// bpoints := 1 ;
31165: LD_ADDR_VAR 0 10
31169: PUSH
31170: LD_INT 1
31172: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31173: LD_VAR 0 6
31177: PPUSH
31178: CALL_OW 247
31182: PUSH
31183: LD_INT 1
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31769
31191: POP
// begin if GetClass ( i ) = 1 then
31192: LD_VAR 0 6
31196: PPUSH
31197: CALL_OW 257
31201: PUSH
31202: LD_INT 1
31204: EQUAL
31205: IFFALSE 31226
// points := [ 10 , 5 , 3 ] ;
31207: LD_ADDR_VAR 0 9
31211: PUSH
31212: LD_INT 10
31214: PUSH
31215: LD_INT 5
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31226: LD_VAR 0 6
31230: PPUSH
31231: CALL_OW 257
31235: PUSH
31236: LD_INT 2
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: LD_INT 4
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: IN
31250: IFFALSE 31271
// points := [ 3 , 2 , 1 ] ;
31252: LD_ADDR_VAR 0 9
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31271: LD_VAR 0 6
31275: PPUSH
31276: CALL_OW 257
31280: PUSH
31281: LD_INT 5
31283: EQUAL
31284: IFFALSE 31305
// points := [ 130 , 5 , 2 ] ;
31286: LD_ADDR_VAR 0 9
31290: PUSH
31291: LD_INT 130
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31305: LD_VAR 0 6
31309: PPUSH
31310: CALL_OW 257
31314: PUSH
31315: LD_INT 8
31317: EQUAL
31318: IFFALSE 31339
// points := [ 35 , 35 , 30 ] ;
31320: LD_ADDR_VAR 0 9
31324: PUSH
31325: LD_INT 35
31327: PUSH
31328: LD_INT 35
31330: PUSH
31331: LD_INT 30
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31339: LD_VAR 0 6
31343: PPUSH
31344: CALL_OW 257
31348: PUSH
31349: LD_INT 9
31351: EQUAL
31352: IFFALSE 31373
// points := [ 20 , 55 , 40 ] ;
31354: LD_ADDR_VAR 0 9
31358: PUSH
31359: LD_INT 20
31361: PUSH
31362: LD_INT 55
31364: PUSH
31365: LD_INT 40
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31373: LD_VAR 0 6
31377: PPUSH
31378: CALL_OW 257
31382: PUSH
31383: LD_INT 12
31385: PUSH
31386: LD_INT 16
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: IN
31393: IFFALSE 31414
// points := [ 5 , 3 , 2 ] ;
31395: LD_ADDR_VAR 0 9
31399: PUSH
31400: LD_INT 5
31402: PUSH
31403: LD_INT 3
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31414: LD_VAR 0 6
31418: PPUSH
31419: CALL_OW 257
31423: PUSH
31424: LD_INT 17
31426: EQUAL
31427: IFFALSE 31448
// points := [ 100 , 50 , 75 ] ;
31429: LD_ADDR_VAR 0 9
31433: PUSH
31434: LD_INT 100
31436: PUSH
31437: LD_INT 50
31439: PUSH
31440: LD_INT 75
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31448: LD_VAR 0 6
31452: PPUSH
31453: CALL_OW 257
31457: PUSH
31458: LD_INT 15
31460: EQUAL
31461: IFFALSE 31482
// points := [ 10 , 5 , 3 ] ;
31463: LD_ADDR_VAR 0 9
31467: PUSH
31468: LD_INT 10
31470: PUSH
31471: LD_INT 5
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31482: LD_VAR 0 6
31486: PPUSH
31487: CALL_OW 257
31491: PUSH
31492: LD_INT 14
31494: EQUAL
31495: IFFALSE 31516
// points := [ 10 , 0 , 0 ] ;
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: LD_INT 10
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 257
31525: PUSH
31526: LD_INT 11
31528: EQUAL
31529: IFFALSE 31550
// points := [ 30 , 10 , 5 ] ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 30
31538: PUSH
31539: LD_INT 10
31541: PUSH
31542: LD_INT 5
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31550: LD_VAR 0 1
31554: PPUSH
31555: LD_INT 5
31557: PPUSH
31558: CALL_OW 321
31562: PUSH
31563: LD_INT 2
31565: EQUAL
31566: IFFALSE 31583
// bpoints := bpoints * 1.8 ;
31568: LD_ADDR_VAR 0 10
31572: PUSH
31573: LD_VAR 0 10
31577: PUSH
31578: LD_REAL  1.80000000000000E+0000
31581: MUL
31582: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31583: LD_VAR 0 6
31587: PPUSH
31588: CALL_OW 257
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 3
31601: PUSH
31602: LD_INT 4
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: IN
31611: PUSH
31612: LD_VAR 0 1
31616: PPUSH
31617: LD_INT 51
31619: PPUSH
31620: CALL_OW 321
31624: PUSH
31625: LD_INT 2
31627: EQUAL
31628: AND
31629: IFFALSE 31646
// bpoints := bpoints * 1.2 ;
31631: LD_ADDR_VAR 0 10
31635: PUSH
31636: LD_VAR 0 10
31640: PUSH
31641: LD_REAL  1.20000000000000E+0000
31644: MUL
31645: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31646: LD_VAR 0 6
31650: PPUSH
31651: CALL_OW 257
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 7
31661: PUSH
31662: LD_INT 9
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: IN
31670: PUSH
31671: LD_VAR 0 1
31675: PPUSH
31676: LD_INT 52
31678: PPUSH
31679: CALL_OW 321
31683: PUSH
31684: LD_INT 2
31686: EQUAL
31687: AND
31688: IFFALSE 31705
// bpoints := bpoints * 1.5 ;
31690: LD_ADDR_VAR 0 10
31694: PUSH
31695: LD_VAR 0 10
31699: PUSH
31700: LD_REAL  1.50000000000000E+0000
31703: MUL
31704: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31705: LD_VAR 0 1
31709: PPUSH
31710: LD_INT 66
31712: PPUSH
31713: CALL_OW 321
31717: PUSH
31718: LD_INT 2
31720: EQUAL
31721: IFFALSE 31738
// bpoints := bpoints * 1.1 ;
31723: LD_ADDR_VAR 0 10
31727: PUSH
31728: LD_VAR 0 10
31732: PUSH
31733: LD_REAL  1.10000000000000E+0000
31736: MUL
31737: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31738: LD_ADDR_VAR 0 10
31742: PUSH
31743: LD_VAR 0 10
31747: PUSH
31748: LD_VAR 0 6
31752: PPUSH
31753: LD_INT 1
31755: PPUSH
31756: CALL_OW 259
31760: PUSH
31761: LD_REAL  1.15000000000000E+0000
31764: MUL
31765: MUL
31766: ST_TO_ADDR
// end ; unit_vehicle :
31767: GO 32591
31769: LD_INT 2
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 32579
31777: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31778: LD_VAR 0 6
31782: PPUSH
31783: CALL_OW 264
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 42
31793: PUSH
31794: LD_INT 24
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: IN
31802: IFFALSE 31823
// points := [ 25 , 5 , 3 ] ;
31804: LD_ADDR_VAR 0 9
31808: PUSH
31809: LD_INT 25
31811: PUSH
31812: LD_INT 5
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31823: LD_VAR 0 6
31827: PPUSH
31828: CALL_OW 264
31832: PUSH
31833: LD_INT 4
31835: PUSH
31836: LD_INT 43
31838: PUSH
31839: LD_INT 25
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: IN
31847: IFFALSE 31868
// points := [ 40 , 15 , 5 ] ;
31849: LD_ADDR_VAR 0 9
31853: PUSH
31854: LD_INT 40
31856: PUSH
31857: LD_INT 15
31859: PUSH
31860: LD_INT 5
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31868: LD_VAR 0 6
31872: PPUSH
31873: CALL_OW 264
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 23
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: IN
31888: IFFALSE 31909
// points := [ 7 , 25 , 8 ] ;
31890: LD_ADDR_VAR 0 9
31894: PUSH
31895: LD_INT 7
31897: PUSH
31898: LD_INT 25
31900: PUSH
31901: LD_INT 8
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31909: LD_VAR 0 6
31913: PPUSH
31914: CALL_OW 264
31918: PUSH
31919: LD_INT 5
31921: PUSH
31922: LD_INT 27
31924: PUSH
31925: LD_INT 44
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: IN
31933: IFFALSE 31954
// points := [ 14 , 50 , 16 ] ;
31935: LD_ADDR_VAR 0 9
31939: PUSH
31940: LD_INT 14
31942: PUSH
31943: LD_INT 50
31945: PUSH
31946: LD_INT 16
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31954: LD_VAR 0 6
31958: PPUSH
31959: CALL_OW 264
31963: PUSH
31964: LD_INT 6
31966: PUSH
31967: LD_INT 46
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: IN
31974: IFFALSE 31995
// points := [ 32 , 120 , 70 ] ;
31976: LD_ADDR_VAR 0 9
31980: PUSH
31981: LD_INT 32
31983: PUSH
31984: LD_INT 120
31986: PUSH
31987: LD_INT 70
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 264
32004: PUSH
32005: LD_INT 7
32007: PUSH
32008: LD_INT 28
32010: PUSH
32011: LD_INT 45
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: IN
32019: IFFALSE 32040
// points := [ 35 , 20 , 45 ] ;
32021: LD_ADDR_VAR 0 9
32025: PUSH
32026: LD_INT 35
32028: PUSH
32029: LD_INT 20
32031: PUSH
32032: LD_INT 45
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32040: LD_VAR 0 6
32044: PPUSH
32045: CALL_OW 264
32049: PUSH
32050: LD_INT 47
32052: PUSH
32053: EMPTY
32054: LIST
32055: IN
32056: IFFALSE 32077
// points := [ 67 , 45 , 75 ] ;
32058: LD_ADDR_VAR 0 9
32062: PUSH
32063: LD_INT 67
32065: PUSH
32066: LD_INT 45
32068: PUSH
32069: LD_INT 75
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32077: LD_VAR 0 6
32081: PPUSH
32082: CALL_OW 264
32086: PUSH
32087: LD_INT 26
32089: PUSH
32090: EMPTY
32091: LIST
32092: IN
32093: IFFALSE 32114
// points := [ 120 , 30 , 80 ] ;
32095: LD_ADDR_VAR 0 9
32099: PUSH
32100: LD_INT 120
32102: PUSH
32103: LD_INT 30
32105: PUSH
32106: LD_INT 80
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: LIST
32113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32114: LD_VAR 0 6
32118: PPUSH
32119: CALL_OW 264
32123: PUSH
32124: LD_INT 22
32126: PUSH
32127: EMPTY
32128: LIST
32129: IN
32130: IFFALSE 32151
// points := [ 40 , 1 , 1 ] ;
32132: LD_ADDR_VAR 0 9
32136: PUSH
32137: LD_INT 40
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32151: LD_VAR 0 6
32155: PPUSH
32156: CALL_OW 264
32160: PUSH
32161: LD_INT 29
32163: PUSH
32164: EMPTY
32165: LIST
32166: IN
32167: IFFALSE 32188
// points := [ 70 , 200 , 400 ] ;
32169: LD_ADDR_VAR 0 9
32173: PUSH
32174: LD_INT 70
32176: PUSH
32177: LD_INT 200
32179: PUSH
32180: LD_INT 400
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32188: LD_VAR 0 6
32192: PPUSH
32193: CALL_OW 264
32197: PUSH
32198: LD_INT 14
32200: PUSH
32201: LD_INT 53
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: IN
32208: IFFALSE 32229
// points := [ 40 , 10 , 20 ] ;
32210: LD_ADDR_VAR 0 9
32214: PUSH
32215: LD_INT 40
32217: PUSH
32218: LD_INT 10
32220: PUSH
32221: LD_INT 20
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32229: LD_VAR 0 6
32233: PPUSH
32234: CALL_OW 264
32238: PUSH
32239: LD_INT 9
32241: PUSH
32242: EMPTY
32243: LIST
32244: IN
32245: IFFALSE 32266
// points := [ 5 , 70 , 20 ] ;
32247: LD_ADDR_VAR 0 9
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: LD_INT 70
32257: PUSH
32258: LD_INT 20
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32266: LD_VAR 0 6
32270: PPUSH
32271: CALL_OW 264
32275: PUSH
32276: LD_INT 10
32278: PUSH
32279: EMPTY
32280: LIST
32281: IN
32282: IFFALSE 32303
// points := [ 35 , 110 , 70 ] ;
32284: LD_ADDR_VAR 0 9
32288: PUSH
32289: LD_INT 35
32291: PUSH
32292: LD_INT 110
32294: PUSH
32295: LD_INT 70
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32303: LD_VAR 0 6
32307: PPUSH
32308: CALL_OW 265
32312: PUSH
32313: LD_INT 25
32315: EQUAL
32316: IFFALSE 32337
// points := [ 80 , 65 , 100 ] ;
32318: LD_ADDR_VAR 0 9
32322: PUSH
32323: LD_INT 80
32325: PUSH
32326: LD_INT 65
32328: PUSH
32329: LD_INT 100
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32337: LD_VAR 0 6
32341: PPUSH
32342: CALL_OW 263
32346: PUSH
32347: LD_INT 1
32349: EQUAL
32350: IFFALSE 32385
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32352: LD_ADDR_VAR 0 10
32356: PUSH
32357: LD_VAR 0 10
32361: PUSH
32362: LD_VAR 0 6
32366: PPUSH
32367: CALL_OW 311
32371: PPUSH
32372: LD_INT 3
32374: PPUSH
32375: CALL_OW 259
32379: PUSH
32380: LD_INT 4
32382: MUL
32383: MUL
32384: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32385: LD_VAR 0 6
32389: PPUSH
32390: CALL_OW 263
32394: PUSH
32395: LD_INT 2
32397: EQUAL
32398: IFFALSE 32449
// begin j := IsControledBy ( i ) ;
32400: LD_ADDR_VAR 0 7
32404: PUSH
32405: LD_VAR 0 6
32409: PPUSH
32410: CALL_OW 312
32414: ST_TO_ADDR
// if j then
32415: LD_VAR 0 7
32419: IFFALSE 32449
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32421: LD_ADDR_VAR 0 10
32425: PUSH
32426: LD_VAR 0 10
32430: PUSH
32431: LD_VAR 0 7
32435: PPUSH
32436: LD_INT 3
32438: PPUSH
32439: CALL_OW 259
32443: PUSH
32444: LD_INT 3
32446: MUL
32447: MUL
32448: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32449: LD_VAR 0 6
32453: PPUSH
32454: CALL_OW 264
32458: PUSH
32459: LD_INT 5
32461: PUSH
32462: LD_INT 6
32464: PUSH
32465: LD_INT 46
32467: PUSH
32468: LD_INT 44
32470: PUSH
32471: LD_INT 47
32473: PUSH
32474: LD_INT 45
32476: PUSH
32477: LD_INT 28
32479: PUSH
32480: LD_INT 7
32482: PUSH
32483: LD_INT 27
32485: PUSH
32486: LD_INT 29
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: IN
32501: PUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: LD_INT 52
32509: PPUSH
32510: CALL_OW 321
32514: PUSH
32515: LD_INT 2
32517: EQUAL
32518: AND
32519: IFFALSE 32536
// bpoints := bpoints * 1.2 ;
32521: LD_ADDR_VAR 0 10
32525: PUSH
32526: LD_VAR 0 10
32530: PUSH
32531: LD_REAL  1.20000000000000E+0000
32534: MUL
32535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32536: LD_VAR 0 6
32540: PPUSH
32541: CALL_OW 264
32545: PUSH
32546: LD_INT 6
32548: PUSH
32549: LD_INT 46
32551: PUSH
32552: LD_INT 47
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: IN
32560: IFFALSE 32577
// bpoints := bpoints * 1.2 ;
32562: LD_ADDR_VAR 0 10
32566: PUSH
32567: LD_VAR 0 10
32571: PUSH
32572: LD_REAL  1.20000000000000E+0000
32575: MUL
32576: ST_TO_ADDR
// end ; unit_building :
32577: GO 32591
32579: LD_INT 3
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32590
32587: POP
// ; end ;
32588: GO 32591
32590: POP
// for j = 1 to 3 do
32591: LD_ADDR_VAR 0 7
32595: PUSH
32596: DOUBLE
32597: LD_INT 1
32599: DEC
32600: ST_TO_ADDR
32601: LD_INT 3
32603: PUSH
32604: FOR_TO
32605: IFFALSE 32658
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32607: LD_ADDR_VAR 0 5
32611: PUSH
32612: LD_VAR 0 5
32616: PPUSH
32617: LD_VAR 0 7
32621: PPUSH
32622: LD_VAR 0 5
32626: PUSH
32627: LD_VAR 0 7
32631: ARRAY
32632: PUSH
32633: LD_VAR 0 9
32637: PUSH
32638: LD_VAR 0 7
32642: ARRAY
32643: PUSH
32644: LD_VAR 0 10
32648: MUL
32649: PLUS
32650: PPUSH
32651: CALL_OW 1
32655: ST_TO_ADDR
32656: GO 32604
32658: POP
32659: POP
// end ;
32660: GO 31143
32662: POP
32663: POP
// result := Replace ( result , 4 , tmp ) ;
32664: LD_ADDR_VAR 0 5
32668: PUSH
32669: LD_VAR 0 5
32673: PPUSH
32674: LD_INT 4
32676: PPUSH
32677: LD_VAR 0 8
32681: PPUSH
32682: CALL_OW 1
32686: ST_TO_ADDR
// end ;
32687: LD_VAR 0 5
32691: RET
// export function DangerAtRange ( unit , range ) ; begin
32692: LD_INT 0
32694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_VAR 0 1
32704: PPUSH
32705: CALL_OW 255
32709: PPUSH
32710: LD_VAR 0 1
32714: PPUSH
32715: CALL_OW 250
32719: PPUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 251
32729: PPUSH
32730: LD_VAR 0 2
32734: PPUSH
32735: CALL 30995 0 4
32739: ST_TO_ADDR
// end ;
32740: LD_VAR 0 3
32744: RET
// export function DangerInArea ( side , area ) ; begin
32745: LD_INT 0
32747: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32748: LD_ADDR_VAR 0 3
32752: PUSH
32753: LD_VAR 0 2
32757: PPUSH
32758: LD_INT 81
32760: PUSH
32761: LD_VAR 0 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 70
32774: ST_TO_ADDR
// end ;
32775: LD_VAR 0 3
32779: RET
// export function IsExtension ( b ) ; begin
32780: LD_INT 0
32782: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32783: LD_ADDR_VAR 0 2
32787: PUSH
32788: LD_VAR 0 1
32792: PUSH
32793: LD_INT 23
32795: PUSH
32796: LD_INT 20
32798: PUSH
32799: LD_INT 22
32801: PUSH
32802: LD_INT 17
32804: PUSH
32805: LD_INT 24
32807: PUSH
32808: LD_INT 21
32810: PUSH
32811: LD_INT 19
32813: PUSH
32814: LD_INT 16
32816: PUSH
32817: LD_INT 25
32819: PUSH
32820: LD_INT 18
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: IN
32835: ST_TO_ADDR
// end ;
32836: LD_VAR 0 2
32840: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32841: LD_INT 0
32843: PPUSH
32844: PPUSH
32845: PPUSH
// result := [ ] ;
32846: LD_ADDR_VAR 0 3
32850: PUSH
32851: EMPTY
32852: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32853: LD_ADDR_VAR 0 4
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_INT 21
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PPUSH
32873: CALL_OW 70
32877: ST_TO_ADDR
// if not tmp then
32878: LD_VAR 0 4
32882: NOT
32883: IFFALSE 32887
// exit ;
32885: GO 32945
// for i in tmp do
32887: LD_ADDR_VAR 0 5
32891: PUSH
32892: LD_VAR 0 4
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32933
// if GetBase ( i ) <> base then
32900: LD_VAR 0 5
32904: PPUSH
32905: CALL_OW 274
32909: PUSH
32910: LD_VAR 0 1
32914: NONEQUAL
32915: IFFALSE 32931
// ComLinkToBase ( base , i ) ;
32917: LD_VAR 0 1
32921: PPUSH
32922: LD_VAR 0 5
32926: PPUSH
32927: CALL_OW 169
32931: GO 32897
32933: POP
32934: POP
// result := tmp ;
32935: LD_ADDR_VAR 0 3
32939: PUSH
32940: LD_VAR 0 4
32944: ST_TO_ADDR
// end ;
32945: LD_VAR 0 3
32949: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32950: LD_INT 0
32952: PPUSH
32953: PPUSH
// if BuildingStatus ( b ) = bs_build then
32954: LD_VAR 0 2
32958: PPUSH
32959: CALL_OW 461
32963: PUSH
32964: LD_INT 1
32966: EQUAL
32967: IFFALSE 33027
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32969: LD_VAR 0 1
32973: PPUSH
32974: LD_STRING h
32976: PUSH
32977: LD_VAR 0 2
32981: PPUSH
32982: CALL_OW 250
32986: PUSH
32987: LD_VAR 0 2
32991: PPUSH
32992: CALL_OW 251
32996: PUSH
32997: LD_VAR 0 2
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: PPUSH
33023: CALL_OW 446
// end ;
33027: LD_VAR 0 3
33031: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
33040: LD_VAR 0 1
33044: NOT
33045: PUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 263
33055: PUSH
33056: LD_INT 2
33058: EQUAL
33059: NOT
33060: OR
33061: IFFALSE 33065
// exit ;
33063: GO 33381
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33065: LD_ADDR_VAR 0 6
33069: PUSH
33070: LD_INT 22
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 255
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 30
33092: PUSH
33093: LD_INT 36
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 34
33102: PUSH
33103: LD_INT 31
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PPUSH
33119: CALL_OW 69
33123: ST_TO_ADDR
// if not tmp then
33124: LD_VAR 0 6
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 33381
// result := [ ] ;
33133: LD_ADDR_VAR 0 2
33137: PUSH
33138: EMPTY
33139: ST_TO_ADDR
// for i in tmp do
33140: LD_ADDR_VAR 0 3
33144: PUSH
33145: LD_VAR 0 6
33149: PUSH
33150: FOR_IN
33151: IFFALSE 33222
// begin t := UnitsInside ( i ) ;
33153: LD_ADDR_VAR 0 4
33157: PUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: CALL_OW 313
33167: ST_TO_ADDR
// if t then
33168: LD_VAR 0 4
33172: IFFALSE 33220
// for j in t do
33174: LD_ADDR_VAR 0 7
33178: PUSH
33179: LD_VAR 0 4
33183: PUSH
33184: FOR_IN
33185: IFFALSE 33218
// result := Insert ( result , result + 1 , j ) ;
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_VAR 0 2
33196: PPUSH
33197: LD_VAR 0 2
33201: PUSH
33202: LD_INT 1
33204: PLUS
33205: PPUSH
33206: LD_VAR 0 7
33210: PPUSH
33211: CALL_OW 2
33215: ST_TO_ADDR
33216: GO 33184
33218: POP
33219: POP
// end ;
33220: GO 33150
33222: POP
33223: POP
// if not result then
33224: LD_VAR 0 2
33228: NOT
33229: IFFALSE 33233
// exit ;
33231: GO 33381
// mech := result [ 1 ] ;
33233: LD_ADDR_VAR 0 5
33237: PUSH
33238: LD_VAR 0 2
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: ST_TO_ADDR
// if result > 1 then
33247: LD_VAR 0 2
33251: PUSH
33252: LD_INT 1
33254: GREATER
33255: IFFALSE 33367
// for i = 2 to result do
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: DOUBLE
33263: LD_INT 2
33265: DEC
33266: ST_TO_ADDR
33267: LD_VAR 0 2
33271: PUSH
33272: FOR_TO
33273: IFFALSE 33365
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33275: LD_ADDR_VAR 0 4
33279: PUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_VAR 0 3
33289: ARRAY
33290: PPUSH
33291: LD_INT 3
33293: PPUSH
33294: CALL_OW 259
33298: PUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_VAR 0 3
33308: ARRAY
33309: PPUSH
33310: CALL_OW 432
33314: MINUS
33315: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33316: LD_VAR 0 4
33320: PUSH
33321: LD_VAR 0 5
33325: PPUSH
33326: LD_INT 3
33328: PPUSH
33329: CALL_OW 259
33333: PUSH
33334: LD_VAR 0 5
33338: PPUSH
33339: CALL_OW 432
33343: MINUS
33344: GREATEREQUAL
33345: IFFALSE 33363
// mech := result [ i ] ;
33347: LD_ADDR_VAR 0 5
33351: PUSH
33352: LD_VAR 0 2
33356: PUSH
33357: LD_VAR 0 3
33361: ARRAY
33362: ST_TO_ADDR
// end ;
33363: GO 33272
33365: POP
33366: POP
// ComLinkTo ( vehicle , mech ) ;
33367: LD_VAR 0 1
33371: PPUSH
33372: LD_VAR 0 5
33376: PPUSH
33377: CALL_OW 135
// end ;
33381: LD_VAR 0 2
33385: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33386: LD_INT 0
33388: PPUSH
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
// result := [ ] ;
33401: LD_ADDR_VAR 0 7
33405: PUSH
33406: EMPTY
33407: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 266
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: IN
33428: NOT
33429: IFFALSE 33433
// exit ;
33431: GO 35064
// if name then
33433: LD_VAR 0 3
33437: IFFALSE 33453
// SetBName ( base_dep , name ) ;
33439: LD_VAR 0 1
33443: PPUSH
33444: LD_VAR 0 3
33448: PPUSH
33449: CALL_OW 500
// base := GetBase ( base_dep ) ;
33453: LD_ADDR_VAR 0 15
33457: PUSH
33458: LD_VAR 0 1
33462: PPUSH
33463: CALL_OW 274
33467: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33468: LD_ADDR_VAR 0 16
33472: PUSH
33473: LD_VAR 0 1
33477: PPUSH
33478: CALL_OW 255
33482: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33483: LD_ADDR_VAR 0 17
33487: PUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 248
33497: ST_TO_ADDR
// if sources then
33498: LD_VAR 0 5
33502: IFFALSE 33549
// for i = 1 to 3 do
33504: LD_ADDR_VAR 0 8
33508: PUSH
33509: DOUBLE
33510: LD_INT 1
33512: DEC
33513: ST_TO_ADDR
33514: LD_INT 3
33516: PUSH
33517: FOR_TO
33518: IFFALSE 33547
// AddResourceType ( base , i , sources [ i ] ) ;
33520: LD_VAR 0 15
33524: PPUSH
33525: LD_VAR 0 8
33529: PPUSH
33530: LD_VAR 0 5
33534: PUSH
33535: LD_VAR 0 8
33539: ARRAY
33540: PPUSH
33541: CALL_OW 276
33545: GO 33517
33547: POP
33548: POP
// buildings := GetBaseBuildings ( base , area ) ;
33549: LD_ADDR_VAR 0 18
33553: PUSH
33554: LD_VAR 0 15
33558: PPUSH
33559: LD_VAR 0 2
33563: PPUSH
33564: CALL 32841 0 2
33568: ST_TO_ADDR
// InitHc ;
33569: CALL_OW 19
// InitUc ;
33573: CALL_OW 18
// uc_side := side ;
33577: LD_ADDR_OWVAR 20
33581: PUSH
33582: LD_VAR 0 16
33586: ST_TO_ADDR
// uc_nation := nation ;
33587: LD_ADDR_OWVAR 21
33591: PUSH
33592: LD_VAR 0 17
33596: ST_TO_ADDR
// if buildings then
33597: LD_VAR 0 18
33601: IFFALSE 34923
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33603: LD_ADDR_VAR 0 19
33607: PUSH
33608: LD_VAR 0 18
33612: PPUSH
33613: LD_INT 2
33615: PUSH
33616: LD_INT 30
33618: PUSH
33619: LD_INT 29
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 30
33628: PUSH
33629: LD_INT 30
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 72
33645: ST_TO_ADDR
// if tmp then
33646: LD_VAR 0 19
33650: IFFALSE 33698
// for i in tmp do
33652: LD_ADDR_VAR 0 8
33656: PUSH
33657: LD_VAR 0 19
33661: PUSH
33662: FOR_IN
33663: IFFALSE 33696
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33665: LD_VAR 0 8
33669: PPUSH
33670: CALL_OW 250
33674: PPUSH
33675: LD_VAR 0 8
33679: PPUSH
33680: CALL_OW 251
33684: PPUSH
33685: LD_VAR 0 16
33689: PPUSH
33690: CALL_OW 441
33694: GO 33662
33696: POP
33697: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33698: LD_VAR 0 18
33702: PPUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 30
33708: PUSH
33709: LD_INT 32
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 30
33718: PUSH
33719: LD_INT 33
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: PPUSH
33731: CALL_OW 72
33735: IFFALSE 33823
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33737: LD_ADDR_VAR 0 8
33741: PUSH
33742: LD_VAR 0 18
33746: PPUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 30
33752: PUSH
33753: LD_INT 32
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 30
33762: PUSH
33763: LD_INT 33
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: PPUSH
33775: CALL_OW 72
33779: PUSH
33780: FOR_IN
33781: IFFALSE 33821
// begin if not GetBWeapon ( i ) then
33783: LD_VAR 0 8
33787: PPUSH
33788: CALL_OW 269
33792: NOT
33793: IFFALSE 33819
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_VAR 0 8
33804: PPUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL 35069 0 2
33814: PPUSH
33815: CALL_OW 431
// end ;
33819: GO 33780
33821: POP
33822: POP
// end ; for i = 1 to personel do
33823: LD_ADDR_VAR 0 8
33827: PUSH
33828: DOUBLE
33829: LD_INT 1
33831: DEC
33832: ST_TO_ADDR
33833: LD_VAR 0 6
33837: PUSH
33838: FOR_TO
33839: IFFALSE 34903
// begin if i > 4 then
33841: LD_VAR 0 8
33845: PUSH
33846: LD_INT 4
33848: GREATER
33849: IFFALSE 33853
// break ;
33851: GO 34903
// case i of 1 :
33853: LD_VAR 0 8
33857: PUSH
33858: LD_INT 1
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33866
33864: GO 33946
33866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33867: LD_ADDR_VAR 0 12
33871: PUSH
33872: LD_VAR 0 18
33876: PPUSH
33877: LD_INT 22
33879: PUSH
33880: LD_VAR 0 16
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 58
33891: PUSH
33892: EMPTY
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 30
33900: PUSH
33901: LD_INT 32
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 30
33910: PUSH
33911: LD_INT 4
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 30
33920: PUSH
33921: LD_INT 5
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: PPUSH
33939: CALL_OW 72
33943: ST_TO_ADDR
33944: GO 34168
33946: LD_INT 2
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 34016
33954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33955: LD_ADDR_VAR 0 12
33959: PUSH
33960: LD_VAR 0 18
33964: PPUSH
33965: LD_INT 22
33967: PUSH
33968: LD_VAR 0 16
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: LD_INT 30
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 30
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PPUSH
34009: CALL_OW 72
34013: ST_TO_ADDR
34014: GO 34168
34016: LD_INT 3
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34024
34022: GO 34086
34024: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34025: LD_ADDR_VAR 0 12
34029: PUSH
34030: LD_VAR 0 18
34034: PPUSH
34035: LD_INT 22
34037: PUSH
34038: LD_VAR 0 16
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 30
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 30
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PPUSH
34079: CALL_OW 72
34083: ST_TO_ADDR
34084: GO 34168
34086: LD_INT 4
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34167
34094: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34095: LD_ADDR_VAR 0 12
34099: PUSH
34100: LD_VAR 0 18
34104: PPUSH
34105: LD_INT 22
34107: PUSH
34108: LD_VAR 0 16
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 30
34122: PUSH
34123: LD_INT 6
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 30
34132: PUSH
34133: LD_INT 7
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 30
34142: PUSH
34143: LD_INT 8
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PPUSH
34160: CALL_OW 72
34164: ST_TO_ADDR
34165: GO 34168
34167: POP
// if i = 1 then
34168: LD_VAR 0 8
34172: PUSH
34173: LD_INT 1
34175: EQUAL
34176: IFFALSE 34287
// begin tmp := [ ] ;
34178: LD_ADDR_VAR 0 19
34182: PUSH
34183: EMPTY
34184: ST_TO_ADDR
// for j in f do
34185: LD_ADDR_VAR 0 9
34189: PUSH
34190: LD_VAR 0 12
34194: PUSH
34195: FOR_IN
34196: IFFALSE 34269
// if GetBType ( j ) = b_bunker then
34198: LD_VAR 0 9
34202: PPUSH
34203: CALL_OW 266
34207: PUSH
34208: LD_INT 32
34210: EQUAL
34211: IFFALSE 34238
// tmp := Insert ( tmp , 1 , j ) else
34213: LD_ADDR_VAR 0 19
34217: PUSH
34218: LD_VAR 0 19
34222: PPUSH
34223: LD_INT 1
34225: PPUSH
34226: LD_VAR 0 9
34230: PPUSH
34231: CALL_OW 2
34235: ST_TO_ADDR
34236: GO 34267
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34238: LD_ADDR_VAR 0 19
34242: PUSH
34243: LD_VAR 0 19
34247: PPUSH
34248: LD_VAR 0 19
34252: PUSH
34253: LD_INT 1
34255: PLUS
34256: PPUSH
34257: LD_VAR 0 9
34261: PPUSH
34262: CALL_OW 2
34266: ST_TO_ADDR
34267: GO 34195
34269: POP
34270: POP
// if tmp then
34271: LD_VAR 0 19
34275: IFFALSE 34287
// f := tmp ;
34277: LD_ADDR_VAR 0 12
34281: PUSH
34282: LD_VAR 0 19
34286: ST_TO_ADDR
// end ; x := personel [ i ] ;
34287: LD_ADDR_VAR 0 13
34291: PUSH
34292: LD_VAR 0 6
34296: PUSH
34297: LD_VAR 0 8
34301: ARRAY
34302: ST_TO_ADDR
// if x = - 1 then
34303: LD_VAR 0 13
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: EQUAL
34312: IFFALSE 34521
// begin for j in f do
34314: LD_ADDR_VAR 0 9
34318: PUSH
34319: LD_VAR 0 12
34323: PUSH
34324: FOR_IN
34325: IFFALSE 34517
// repeat InitHc ;
34327: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34331: LD_VAR 0 9
34335: PPUSH
34336: CALL_OW 266
34340: PUSH
34341: LD_INT 5
34343: EQUAL
34344: IFFALSE 34414
// begin if UnitsInside ( j ) < 3 then
34346: LD_VAR 0 9
34350: PPUSH
34351: CALL_OW 313
34355: PUSH
34356: LD_INT 3
34358: LESS
34359: IFFALSE 34395
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34361: LD_INT 0
34363: PPUSH
34364: LD_INT 5
34366: PUSH
34367: LD_INT 8
34369: PUSH
34370: LD_INT 9
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: PUSH
34378: LD_VAR 0 17
34382: ARRAY
34383: PPUSH
34384: LD_VAR 0 4
34388: PPUSH
34389: CALL_OW 380
34393: GO 34412
// PrepareHuman ( false , i , skill ) ;
34395: LD_INT 0
34397: PPUSH
34398: LD_VAR 0 8
34402: PPUSH
34403: LD_VAR 0 4
34407: PPUSH
34408: CALL_OW 380
// end else
34412: GO 34431
// PrepareHuman ( false , i , skill ) ;
34414: LD_INT 0
34416: PPUSH
34417: LD_VAR 0 8
34421: PPUSH
34422: LD_VAR 0 4
34426: PPUSH
34427: CALL_OW 380
// un := CreateHuman ;
34431: LD_ADDR_VAR 0 14
34435: PUSH
34436: CALL_OW 44
34440: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34441: LD_ADDR_VAR 0 7
34445: PUSH
34446: LD_VAR 0 7
34450: PPUSH
34451: LD_INT 1
34453: PPUSH
34454: LD_VAR 0 14
34458: PPUSH
34459: CALL_OW 2
34463: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34464: LD_VAR 0 14
34468: PPUSH
34469: LD_VAR 0 9
34473: PPUSH
34474: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34478: LD_VAR 0 9
34482: PPUSH
34483: CALL_OW 313
34487: PUSH
34488: LD_INT 6
34490: EQUAL
34491: PUSH
34492: LD_VAR 0 9
34496: PPUSH
34497: CALL_OW 266
34501: PUSH
34502: LD_INT 32
34504: PUSH
34505: LD_INT 31
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: IN
34512: OR
34513: IFFALSE 34327
34515: GO 34324
34517: POP
34518: POP
// end else
34519: GO 34901
// for j = 1 to x do
34521: LD_ADDR_VAR 0 9
34525: PUSH
34526: DOUBLE
34527: LD_INT 1
34529: DEC
34530: ST_TO_ADDR
34531: LD_VAR 0 13
34535: PUSH
34536: FOR_TO
34537: IFFALSE 34899
// begin InitHc ;
34539: CALL_OW 19
// if not f then
34543: LD_VAR 0 12
34547: NOT
34548: IFFALSE 34637
// begin PrepareHuman ( false , i , skill ) ;
34550: LD_INT 0
34552: PPUSH
34553: LD_VAR 0 8
34557: PPUSH
34558: LD_VAR 0 4
34562: PPUSH
34563: CALL_OW 380
// un := CreateHuman ;
34567: LD_ADDR_VAR 0 14
34571: PUSH
34572: CALL_OW 44
34576: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34577: LD_ADDR_VAR 0 7
34581: PUSH
34582: LD_VAR 0 7
34586: PPUSH
34587: LD_INT 1
34589: PPUSH
34590: LD_VAR 0 14
34594: PPUSH
34595: CALL_OW 2
34599: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34600: LD_VAR 0 14
34604: PPUSH
34605: LD_VAR 0 1
34609: PPUSH
34610: CALL_OW 250
34614: PPUSH
34615: LD_VAR 0 1
34619: PPUSH
34620: CALL_OW 251
34624: PPUSH
34625: LD_INT 10
34627: PPUSH
34628: LD_INT 0
34630: PPUSH
34631: CALL_OW 50
// continue ;
34635: GO 34536
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34637: LD_VAR 0 12
34641: PUSH
34642: LD_INT 1
34644: ARRAY
34645: PPUSH
34646: CALL_OW 313
34650: PUSH
34651: LD_VAR 0 12
34655: PUSH
34656: LD_INT 1
34658: ARRAY
34659: PPUSH
34660: CALL_OW 266
34664: PUSH
34665: LD_INT 32
34667: PUSH
34668: LD_INT 31
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: IN
34675: AND
34676: PUSH
34677: LD_VAR 0 12
34681: PUSH
34682: LD_INT 1
34684: ARRAY
34685: PPUSH
34686: CALL_OW 313
34690: PUSH
34691: LD_INT 6
34693: EQUAL
34694: OR
34695: IFFALSE 34715
// f := Delete ( f , 1 ) ;
34697: LD_ADDR_VAR 0 12
34701: PUSH
34702: LD_VAR 0 12
34706: PPUSH
34707: LD_INT 1
34709: PPUSH
34710: CALL_OW 3
34714: ST_TO_ADDR
// if not f then
34715: LD_VAR 0 12
34719: NOT
34720: IFFALSE 34738
// begin x := x + 2 ;
34722: LD_ADDR_VAR 0 13
34726: PUSH
34727: LD_VAR 0 13
34731: PUSH
34732: LD_INT 2
34734: PLUS
34735: ST_TO_ADDR
// continue ;
34736: GO 34536
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34738: LD_VAR 0 12
34742: PUSH
34743: LD_INT 1
34745: ARRAY
34746: PPUSH
34747: CALL_OW 266
34751: PUSH
34752: LD_INT 5
34754: EQUAL
34755: IFFALSE 34829
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34757: LD_VAR 0 12
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PPUSH
34766: CALL_OW 313
34770: PUSH
34771: LD_INT 3
34773: LESS
34774: IFFALSE 34810
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34776: LD_INT 0
34778: PPUSH
34779: LD_INT 5
34781: PUSH
34782: LD_INT 8
34784: PUSH
34785: LD_INT 9
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: PUSH
34793: LD_VAR 0 17
34797: ARRAY
34798: PPUSH
34799: LD_VAR 0 4
34803: PPUSH
34804: CALL_OW 380
34808: GO 34827
// PrepareHuman ( false , i , skill ) ;
34810: LD_INT 0
34812: PPUSH
34813: LD_VAR 0 8
34817: PPUSH
34818: LD_VAR 0 4
34822: PPUSH
34823: CALL_OW 380
// end else
34827: GO 34846
// PrepareHuman ( false , i , skill ) ;
34829: LD_INT 0
34831: PPUSH
34832: LD_VAR 0 8
34836: PPUSH
34837: LD_VAR 0 4
34841: PPUSH
34842: CALL_OW 380
// un := CreateHuman ;
34846: LD_ADDR_VAR 0 14
34850: PUSH
34851: CALL_OW 44
34855: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34856: LD_ADDR_VAR 0 7
34860: PUSH
34861: LD_VAR 0 7
34865: PPUSH
34866: LD_INT 1
34868: PPUSH
34869: LD_VAR 0 14
34873: PPUSH
34874: CALL_OW 2
34878: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34879: LD_VAR 0 14
34883: PPUSH
34884: LD_VAR 0 12
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: PPUSH
34893: CALL_OW 52
// end ;
34897: GO 34536
34899: POP
34900: POP
// end ;
34901: GO 33838
34903: POP
34904: POP
// result := result ^ buildings ;
34905: LD_ADDR_VAR 0 7
34909: PUSH
34910: LD_VAR 0 7
34914: PUSH
34915: LD_VAR 0 18
34919: ADD
34920: ST_TO_ADDR
// end else
34921: GO 35064
// begin for i = 1 to personel do
34923: LD_ADDR_VAR 0 8
34927: PUSH
34928: DOUBLE
34929: LD_INT 1
34931: DEC
34932: ST_TO_ADDR
34933: LD_VAR 0 6
34937: PUSH
34938: FOR_TO
34939: IFFALSE 35062
// begin if i > 4 then
34941: LD_VAR 0 8
34945: PUSH
34946: LD_INT 4
34948: GREATER
34949: IFFALSE 34953
// break ;
34951: GO 35062
// x := personel [ i ] ;
34953: LD_ADDR_VAR 0 13
34957: PUSH
34958: LD_VAR 0 6
34962: PUSH
34963: LD_VAR 0 8
34967: ARRAY
34968: ST_TO_ADDR
// if x = - 1 then
34969: LD_VAR 0 13
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: EQUAL
34978: IFFALSE 34982
// continue ;
34980: GO 34938
// PrepareHuman ( false , i , skill ) ;
34982: LD_INT 0
34984: PPUSH
34985: LD_VAR 0 8
34989: PPUSH
34990: LD_VAR 0 4
34994: PPUSH
34995: CALL_OW 380
// un := CreateHuman ;
34999: LD_ADDR_VAR 0 14
35003: PUSH
35004: CALL_OW 44
35008: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35009: LD_VAR 0 14
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 250
35023: PPUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 251
35033: PPUSH
35034: LD_INT 10
35036: PPUSH
35037: LD_INT 0
35039: PPUSH
35040: CALL_OW 50
// result := result ^ un ;
35044: LD_ADDR_VAR 0 7
35048: PUSH
35049: LD_VAR 0 7
35053: PUSH
35054: LD_VAR 0 14
35058: ADD
35059: ST_TO_ADDR
// end ;
35060: GO 34938
35062: POP
35063: POP
// end ; end ;
35064: LD_VAR 0 7
35068: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
// result := false ;
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: LD_INT 0
35094: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35095: LD_VAR 0 1
35099: NOT
35100: PUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 266
35110: PUSH
35111: LD_INT 32
35113: PUSH
35114: LD_INT 33
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: IN
35121: NOT
35122: OR
35123: IFFALSE 35127
// exit ;
35125: GO 36263
// nat := GetNation ( tower ) ;
35127: LD_ADDR_VAR 0 12
35131: PUSH
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 248
35141: ST_TO_ADDR
// side := GetSide ( tower ) ;
35142: LD_ADDR_VAR 0 16
35146: PUSH
35147: LD_VAR 0 1
35151: PPUSH
35152: CALL_OW 255
35156: ST_TO_ADDR
// x := GetX ( tower ) ;
35157: LD_ADDR_VAR 0 10
35161: PUSH
35162: LD_VAR 0 1
35166: PPUSH
35167: CALL_OW 250
35171: ST_TO_ADDR
// y := GetY ( tower ) ;
35172: LD_ADDR_VAR 0 11
35176: PUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: CALL_OW 251
35186: ST_TO_ADDR
// if not x or not y then
35187: LD_VAR 0 10
35191: NOT
35192: PUSH
35193: LD_VAR 0 11
35197: NOT
35198: OR
35199: IFFALSE 35203
// exit ;
35201: GO 36263
// weapon := 0 ;
35203: LD_ADDR_VAR 0 18
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// fac_list := [ ] ;
35211: LD_ADDR_VAR 0 17
35215: PUSH
35216: EMPTY
35217: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
35218: LD_ADDR_VAR 0 6
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 274
35232: PPUSH
35233: LD_VAR 0 2
35237: PPUSH
35238: CALL 32841 0 2
35242: PPUSH
35243: LD_INT 30
35245: PUSH
35246: LD_INT 3
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PPUSH
35253: CALL_OW 72
35257: ST_TO_ADDR
// if not factories then
35258: LD_VAR 0 6
35262: NOT
35263: IFFALSE 35267
// exit ;
35265: GO 36263
// for i in factories do
35267: LD_ADDR_VAR 0 8
35271: PUSH
35272: LD_VAR 0 6
35276: PUSH
35277: FOR_IN
35278: IFFALSE 35303
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35280: LD_ADDR_VAR 0 17
35284: PUSH
35285: LD_VAR 0 17
35289: PUSH
35290: LD_VAR 0 8
35294: PPUSH
35295: CALL_OW 478
35299: UNION
35300: ST_TO_ADDR
35301: GO 35277
35303: POP
35304: POP
// if not fac_list then
35305: LD_VAR 0 17
35309: NOT
35310: IFFALSE 35314
// exit ;
35312: GO 36263
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35314: LD_ADDR_VAR 0 5
35318: PUSH
35319: LD_INT 4
35321: PUSH
35322: LD_INT 5
35324: PUSH
35325: LD_INT 9
35327: PUSH
35328: LD_INT 10
35330: PUSH
35331: LD_INT 6
35333: PUSH
35334: LD_INT 7
35336: PUSH
35337: LD_INT 11
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 27
35351: PUSH
35352: LD_INT 28
35354: PUSH
35355: LD_INT 26
35357: PUSH
35358: LD_INT 30
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 43
35369: PUSH
35370: LD_INT 44
35372: PUSH
35373: LD_INT 46
35375: PUSH
35376: LD_INT 45
35378: PUSH
35379: LD_INT 47
35381: PUSH
35382: LD_INT 49
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: PUSH
35398: LD_VAR 0 12
35402: ARRAY
35403: ST_TO_ADDR
// for i in list do
35404: LD_ADDR_VAR 0 8
35408: PUSH
35409: LD_VAR 0 5
35413: PUSH
35414: FOR_IN
35415: IFFALSE 35448
// if not i in fac_list then
35417: LD_VAR 0 8
35421: PUSH
35422: LD_VAR 0 17
35426: IN
35427: NOT
35428: IFFALSE 35446
// list := list diff i ;
35430: LD_ADDR_VAR 0 5
35434: PUSH
35435: LD_VAR 0 5
35439: PUSH
35440: LD_VAR 0 8
35444: DIFF
35445: ST_TO_ADDR
35446: GO 35414
35448: POP
35449: POP
// if not list then
35450: LD_VAR 0 5
35454: NOT
35455: IFFALSE 35459
// exit ;
35457: GO 36263
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35459: LD_VAR 0 12
35463: PUSH
35464: LD_INT 3
35466: EQUAL
35467: PUSH
35468: LD_INT 49
35470: PUSH
35471: LD_VAR 0 5
35475: IN
35476: AND
35477: PUSH
35478: LD_INT 31
35480: PPUSH
35481: LD_VAR 0 16
35485: PPUSH
35486: CALL_OW 321
35490: PUSH
35491: LD_INT 2
35493: EQUAL
35494: AND
35495: IFFALSE 35555
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35497: LD_INT 22
35499: PUSH
35500: LD_VAR 0 16
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 35
35511: PUSH
35512: LD_INT 49
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 91
35521: PUSH
35522: LD_VAR 0 1
35526: PUSH
35527: LD_INT 10
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: PPUSH
35540: CALL_OW 69
35544: NOT
35545: IFFALSE 35555
// weapon := ru_time_lapser ;
35547: LD_ADDR_VAR 0 18
35551: PUSH
35552: LD_INT 49
35554: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35555: LD_VAR 0 12
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: IN
35570: PUSH
35571: LD_INT 11
35573: PUSH
35574: LD_VAR 0 5
35578: IN
35579: PUSH
35580: LD_INT 30
35582: PUSH
35583: LD_VAR 0 5
35587: IN
35588: OR
35589: AND
35590: PUSH
35591: LD_INT 6
35593: PPUSH
35594: LD_VAR 0 16
35598: PPUSH
35599: CALL_OW 321
35603: PUSH
35604: LD_INT 2
35606: EQUAL
35607: AND
35608: IFFALSE 35773
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35610: LD_INT 22
35612: PUSH
35613: LD_VAR 0 16
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: LD_INT 35
35627: PUSH
35628: LD_INT 11
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 35
35637: PUSH
35638: LD_INT 30
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 91
35652: PUSH
35653: LD_VAR 0 1
35657: PUSH
35658: LD_INT 18
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: PPUSH
35671: CALL_OW 69
35675: NOT
35676: PUSH
35677: LD_INT 22
35679: PUSH
35680: LD_VAR 0 16
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 30
35694: PUSH
35695: LD_INT 32
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 30
35704: PUSH
35705: LD_INT 33
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 91
35719: PUSH
35720: LD_VAR 0 1
35724: PUSH
35725: LD_INT 12
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: PPUSH
35741: CALL_OW 69
35745: PUSH
35746: LD_INT 2
35748: GREATER
35749: AND
35750: IFFALSE 35773
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35752: LD_ADDR_VAR 0 18
35756: PUSH
35757: LD_INT 11
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_VAR 0 12
35771: ARRAY
35772: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35773: LD_VAR 0 18
35777: NOT
35778: PUSH
35779: LD_INT 40
35781: PPUSH
35782: LD_VAR 0 16
35786: PPUSH
35787: CALL_OW 321
35791: PUSH
35792: LD_INT 2
35794: EQUAL
35795: AND
35796: PUSH
35797: LD_INT 7
35799: PUSH
35800: LD_VAR 0 5
35804: IN
35805: PUSH
35806: LD_INT 28
35808: PUSH
35809: LD_VAR 0 5
35813: IN
35814: OR
35815: PUSH
35816: LD_INT 45
35818: PUSH
35819: LD_VAR 0 5
35823: IN
35824: OR
35825: AND
35826: IFFALSE 36080
// begin hex := GetHexInfo ( x , y ) ;
35828: LD_ADDR_VAR 0 4
35832: PUSH
35833: LD_VAR 0 10
35837: PPUSH
35838: LD_VAR 0 11
35842: PPUSH
35843: CALL_OW 546
35847: ST_TO_ADDR
// if hex [ 1 ] then
35848: LD_VAR 0 4
35852: PUSH
35853: LD_INT 1
35855: ARRAY
35856: IFFALSE 35860
// exit ;
35858: GO 36263
// height := hex [ 2 ] ;
35860: LD_ADDR_VAR 0 15
35864: PUSH
35865: LD_VAR 0 4
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35874: LD_ADDR_VAR 0 14
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// for i in tmp do
35897: LD_ADDR_VAR 0 8
35901: PUSH
35902: LD_VAR 0 14
35906: PUSH
35907: FOR_IN
35908: IFFALSE 36078
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: LD_VAR 0 10
35919: PPUSH
35920: LD_VAR 0 8
35924: PPUSH
35925: LD_INT 5
35927: PPUSH
35928: CALL_OW 272
35932: PUSH
35933: LD_VAR 0 11
35937: PPUSH
35938: LD_VAR 0 8
35942: PPUSH
35943: LD_INT 5
35945: PPUSH
35946: CALL_OW 273
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35955: LD_VAR 0 9
35959: PUSH
35960: LD_INT 1
35962: ARRAY
35963: PPUSH
35964: LD_VAR 0 9
35968: PUSH
35969: LD_INT 2
35971: ARRAY
35972: PPUSH
35973: CALL_OW 488
35977: IFFALSE 36076
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35979: LD_ADDR_VAR 0 4
35983: PUSH
35984: LD_VAR 0 9
35988: PUSH
35989: LD_INT 1
35991: ARRAY
35992: PPUSH
35993: LD_VAR 0 9
35997: PUSH
35998: LD_INT 2
36000: ARRAY
36001: PPUSH
36002: CALL_OW 546
36006: ST_TO_ADDR
// if hex [ 1 ] then
36007: LD_VAR 0 4
36011: PUSH
36012: LD_INT 1
36014: ARRAY
36015: IFFALSE 36019
// continue ;
36017: GO 35907
// h := hex [ 2 ] ;
36019: LD_ADDR_VAR 0 13
36023: PUSH
36024: LD_VAR 0 4
36028: PUSH
36029: LD_INT 2
36031: ARRAY
36032: ST_TO_ADDR
// if h + 7 < height then
36033: LD_VAR 0 13
36037: PUSH
36038: LD_INT 7
36040: PLUS
36041: PUSH
36042: LD_VAR 0 15
36046: LESS
36047: IFFALSE 36076
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36049: LD_ADDR_VAR 0 18
36053: PUSH
36054: LD_INT 7
36056: PUSH
36057: LD_INT 28
36059: PUSH
36060: LD_INT 45
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: PUSH
36068: LD_VAR 0 12
36072: ARRAY
36073: ST_TO_ADDR
// break ;
36074: GO 36078
// end ; end ; end ;
36076: GO 35907
36078: POP
36079: POP
// end ; if not weapon then
36080: LD_VAR 0 18
36084: NOT
36085: IFFALSE 36145
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36087: LD_ADDR_VAR 0 5
36091: PUSH
36092: LD_VAR 0 5
36096: PUSH
36097: LD_INT 11
36099: PUSH
36100: LD_INT 30
36102: PUSH
36103: LD_INT 49
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: LIST
36110: DIFF
36111: ST_TO_ADDR
// if not list then
36112: LD_VAR 0 5
36116: NOT
36117: IFFALSE 36121
// exit ;
36119: GO 36263
// weapon := list [ rand ( 1 , list ) ] ;
36121: LD_ADDR_VAR 0 18
36125: PUSH
36126: LD_VAR 0 5
36130: PUSH
36131: LD_INT 1
36133: PPUSH
36134: LD_VAR 0 5
36138: PPUSH
36139: CALL_OW 12
36143: ARRAY
36144: ST_TO_ADDR
// end ; if weapon then
36145: LD_VAR 0 18
36149: IFFALSE 36263
// begin tmp := CostOfWeapon ( weapon ) ;
36151: LD_ADDR_VAR 0 14
36155: PUSH
36156: LD_VAR 0 18
36160: PPUSH
36161: CALL_OW 451
36165: ST_TO_ADDR
// j := GetBase ( tower ) ;
36166: LD_ADDR_VAR 0 9
36170: PUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: CALL_OW 274
36180: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36181: LD_VAR 0 9
36185: PPUSH
36186: LD_INT 1
36188: PPUSH
36189: CALL_OW 275
36193: PUSH
36194: LD_VAR 0 14
36198: PUSH
36199: LD_INT 1
36201: ARRAY
36202: GREATEREQUAL
36203: PUSH
36204: LD_VAR 0 9
36208: PPUSH
36209: LD_INT 2
36211: PPUSH
36212: CALL_OW 275
36216: PUSH
36217: LD_VAR 0 14
36221: PUSH
36222: LD_INT 2
36224: ARRAY
36225: GREATEREQUAL
36226: AND
36227: PUSH
36228: LD_VAR 0 9
36232: PPUSH
36233: LD_INT 3
36235: PPUSH
36236: CALL_OW 275
36240: PUSH
36241: LD_VAR 0 14
36245: PUSH
36246: LD_INT 3
36248: ARRAY
36249: GREATEREQUAL
36250: AND
36251: IFFALSE 36263
// result := weapon ;
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_VAR 0 18
36262: ST_TO_ADDR
// end ; end ;
36263: LD_VAR 0 3
36267: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36268: LD_INT 0
36270: PPUSH
36271: PPUSH
// result := true ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_INT 1
36279: ST_TO_ADDR
// if array1 = array2 then
36280: LD_VAR 0 1
36284: PUSH
36285: LD_VAR 0 2
36289: EQUAL
36290: IFFALSE 36350
// begin for i = 1 to array1 do
36292: LD_ADDR_VAR 0 4
36296: PUSH
36297: DOUBLE
36298: LD_INT 1
36300: DEC
36301: ST_TO_ADDR
36302: LD_VAR 0 1
36306: PUSH
36307: FOR_TO
36308: IFFALSE 36346
// if array1 [ i ] <> array2 [ i ] then
36310: LD_VAR 0 1
36314: PUSH
36315: LD_VAR 0 4
36319: ARRAY
36320: PUSH
36321: LD_VAR 0 2
36325: PUSH
36326: LD_VAR 0 4
36330: ARRAY
36331: NONEQUAL
36332: IFFALSE 36344
// begin result := false ;
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_INT 0
36341: ST_TO_ADDR
// break ;
36342: GO 36346
// end ;
36344: GO 36307
36346: POP
36347: POP
// end else
36348: GO 36358
// result := false ;
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_INT 0
36357: ST_TO_ADDR
// end ;
36358: LD_VAR 0 3
36362: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36363: LD_INT 0
36365: PPUSH
36366: PPUSH
36367: PPUSH
// pom := GetBase ( fac ) ;
36368: LD_ADDR_VAR 0 5
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 274
36382: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36383: LD_ADDR_VAR 0 4
36387: PUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_INT 1
36395: ARRAY
36396: PPUSH
36397: LD_VAR 0 2
36401: PUSH
36402: LD_INT 2
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 2
36410: PUSH
36411: LD_INT 3
36413: ARRAY
36414: PPUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_INT 4
36422: ARRAY
36423: PPUSH
36424: CALL_OW 449
36428: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: LD_VAR 0 5
36438: PPUSH
36439: LD_INT 1
36441: PPUSH
36442: CALL_OW 275
36446: PUSH
36447: LD_VAR 0 4
36451: PUSH
36452: LD_INT 1
36454: ARRAY
36455: GREATEREQUAL
36456: PUSH
36457: LD_VAR 0 5
36461: PPUSH
36462: LD_INT 2
36464: PPUSH
36465: CALL_OW 275
36469: PUSH
36470: LD_VAR 0 4
36474: PUSH
36475: LD_INT 2
36477: ARRAY
36478: GREATEREQUAL
36479: AND
36480: PUSH
36481: LD_VAR 0 5
36485: PPUSH
36486: LD_INT 3
36488: PPUSH
36489: CALL_OW 275
36493: PUSH
36494: LD_VAR 0 4
36498: PUSH
36499: LD_INT 3
36501: ARRAY
36502: GREATEREQUAL
36503: AND
36504: ST_TO_ADDR
// end ;
36505: LD_VAR 0 3
36509: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36510: LD_INT 0
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
// pom := GetBase ( building ) ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 274
36530: ST_TO_ADDR
// if not pom then
36531: LD_VAR 0 3
36535: NOT
36536: IFFALSE 36540
// exit ;
36538: GO 36710
// btype := GetBType ( building ) ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_VAR 0 1
36549: PPUSH
36550: CALL_OW 266
36554: ST_TO_ADDR
// if btype = b_armoury then
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 4
36562: EQUAL
36563: IFFALSE 36573
// btype := b_barracks ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_INT 5
36572: ST_TO_ADDR
// if btype = b_depot then
36573: LD_VAR 0 5
36577: PUSH
36578: LD_INT 0
36580: EQUAL
36581: IFFALSE 36591
// btype := b_warehouse ;
36583: LD_ADDR_VAR 0 5
36587: PUSH
36588: LD_INT 1
36590: ST_TO_ADDR
// if btype = b_workshop then
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 2
36598: EQUAL
36599: IFFALSE 36609
// btype := b_factory ;
36601: LD_ADDR_VAR 0 5
36605: PUSH
36606: LD_INT 3
36608: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36609: LD_ADDR_VAR 0 4
36613: PUSH
36614: LD_VAR 0 5
36618: PPUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: CALL_OW 248
36628: PPUSH
36629: CALL_OW 450
36633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36634: LD_ADDR_VAR 0 2
36638: PUSH
36639: LD_VAR 0 3
36643: PPUSH
36644: LD_INT 1
36646: PPUSH
36647: CALL_OW 275
36651: PUSH
36652: LD_VAR 0 4
36656: PUSH
36657: LD_INT 1
36659: ARRAY
36660: GREATEREQUAL
36661: PUSH
36662: LD_VAR 0 3
36666: PPUSH
36667: LD_INT 2
36669: PPUSH
36670: CALL_OW 275
36674: PUSH
36675: LD_VAR 0 4
36679: PUSH
36680: LD_INT 2
36682: ARRAY
36683: GREATEREQUAL
36684: AND
36685: PUSH
36686: LD_VAR 0 3
36690: PPUSH
36691: LD_INT 3
36693: PPUSH
36694: CALL_OW 275
36698: PUSH
36699: LD_VAR 0 4
36703: PUSH
36704: LD_INT 3
36706: ARRAY
36707: GREATEREQUAL
36708: AND
36709: ST_TO_ADDR
// end ;
36710: LD_VAR 0 2
36714: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36715: LD_INT 0
36717: PPUSH
36718: PPUSH
36719: PPUSH
// pom := GetBase ( building ) ;
36720: LD_ADDR_VAR 0 4
36724: PUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 274
36734: ST_TO_ADDR
// if not pom then
36735: LD_VAR 0 4
36739: NOT
36740: IFFALSE 36744
// exit ;
36742: GO 36845
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36744: LD_ADDR_VAR 0 5
36748: PUSH
36749: LD_VAR 0 2
36753: PPUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 248
36763: PPUSH
36764: CALL_OW 450
36768: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_VAR 0 4
36778: PPUSH
36779: LD_INT 1
36781: PPUSH
36782: CALL_OW 275
36786: PUSH
36787: LD_VAR 0 5
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: GREATEREQUAL
36796: PUSH
36797: LD_VAR 0 4
36801: PPUSH
36802: LD_INT 2
36804: PPUSH
36805: CALL_OW 275
36809: PUSH
36810: LD_VAR 0 5
36814: PUSH
36815: LD_INT 2
36817: ARRAY
36818: GREATEREQUAL
36819: AND
36820: PUSH
36821: LD_VAR 0 4
36825: PPUSH
36826: LD_INT 3
36828: PPUSH
36829: CALL_OW 275
36833: PUSH
36834: LD_VAR 0 5
36838: PUSH
36839: LD_INT 3
36841: ARRAY
36842: GREATEREQUAL
36843: AND
36844: ST_TO_ADDR
// end ;
36845: LD_VAR 0 3
36849: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36850: LD_INT 0
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
// result := false ;
36862: LD_ADDR_VAR 0 6
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// if not base or not btype or not x or not y then
36870: LD_VAR 0 1
36874: NOT
36875: PUSH
36876: LD_VAR 0 2
36880: NOT
36881: OR
36882: PUSH
36883: LD_VAR 0 3
36887: NOT
36888: OR
36889: PUSH
36890: LD_VAR 0 4
36894: NOT
36895: OR
36896: IFFALSE 36900
// exit ;
36898: GO 37509
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36900: LD_ADDR_VAR 0 12
36904: PUSH
36905: LD_VAR 0 2
36909: PPUSH
36910: LD_VAR 0 3
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: LD_VAR 0 5
36924: PPUSH
36925: LD_VAR 0 1
36929: PUSH
36930: LD_INT 1
36932: ARRAY
36933: PPUSH
36934: CALL_OW 248
36938: PPUSH
36939: LD_INT 0
36941: PPUSH
36942: CALL 38346 0 6
36946: ST_TO_ADDR
// if not hexes then
36947: LD_VAR 0 12
36951: NOT
36952: IFFALSE 36956
// exit ;
36954: GO 37509
// for i = 1 to hexes do
36956: LD_ADDR_VAR 0 7
36960: PUSH
36961: DOUBLE
36962: LD_INT 1
36964: DEC
36965: ST_TO_ADDR
36966: LD_VAR 0 12
36970: PUSH
36971: FOR_TO
36972: IFFALSE 37507
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36974: LD_ADDR_VAR 0 11
36978: PUSH
36979: LD_VAR 0 12
36983: PUSH
36984: LD_VAR 0 7
36988: ARRAY
36989: PUSH
36990: LD_INT 1
36992: ARRAY
36993: PPUSH
36994: LD_VAR 0 12
36998: PUSH
36999: LD_VAR 0 7
37003: ARRAY
37004: PUSH
37005: LD_INT 2
37007: ARRAY
37008: PPUSH
37009: CALL_OW 428
37013: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37014: LD_VAR 0 12
37018: PUSH
37019: LD_VAR 0 7
37023: ARRAY
37024: PUSH
37025: LD_INT 1
37027: ARRAY
37028: PPUSH
37029: LD_VAR 0 12
37033: PUSH
37034: LD_VAR 0 7
37038: ARRAY
37039: PUSH
37040: LD_INT 2
37042: ARRAY
37043: PPUSH
37044: CALL_OW 351
37048: PUSH
37049: LD_VAR 0 12
37053: PUSH
37054: LD_VAR 0 7
37058: ARRAY
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: PPUSH
37064: LD_VAR 0 12
37068: PUSH
37069: LD_VAR 0 7
37073: ARRAY
37074: PUSH
37075: LD_INT 2
37077: ARRAY
37078: PPUSH
37079: CALL_OW 488
37083: NOT
37084: OR
37085: PUSH
37086: LD_VAR 0 11
37090: PPUSH
37091: CALL_OW 247
37095: PUSH
37096: LD_INT 3
37098: EQUAL
37099: OR
37100: IFFALSE 37106
// exit ;
37102: POP
37103: POP
37104: GO 37509
// if not tmp or not tmp in base then
37106: LD_VAR 0 11
37110: NOT
37111: PUSH
37112: LD_VAR 0 11
37116: PUSH
37117: LD_VAR 0 1
37121: IN
37122: NOT
37123: OR
37124: IFFALSE 37128
// continue ;
37126: GO 36971
// result := true ;
37128: LD_ADDR_VAR 0 6
37132: PUSH
37133: LD_INT 1
37135: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37136: LD_ADDR_VAR 0 15
37140: PUSH
37141: LD_VAR 0 1
37145: PPUSH
37146: LD_INT 22
37148: PUSH
37149: LD_VAR 0 11
37153: PPUSH
37154: CALL_OW 255
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 30
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PPUSH
37195: CALL_OW 72
37199: ST_TO_ADDR
// if dep then
37200: LD_VAR 0 15
37204: IFFALSE 37340
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37206: LD_ADDR_VAR 0 14
37210: PUSH
37211: LD_VAR 0 15
37215: PUSH
37216: LD_INT 1
37218: ARRAY
37219: PPUSH
37220: CALL_OW 250
37224: PPUSH
37225: LD_VAR 0 15
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PPUSH
37234: CALL_OW 254
37238: PPUSH
37239: LD_INT 5
37241: PPUSH
37242: CALL_OW 272
37246: PUSH
37247: LD_VAR 0 15
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PPUSH
37256: CALL_OW 251
37260: PPUSH
37261: LD_VAR 0 15
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: CALL_OW 254
37274: PPUSH
37275: LD_INT 5
37277: PPUSH
37278: CALL_OW 273
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37287: LD_VAR 0 14
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 14
37300: PUSH
37301: LD_INT 2
37303: ARRAY
37304: PPUSH
37305: CALL_OW 488
37309: IFFALSE 37340
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37311: LD_VAR 0 11
37315: PPUSH
37316: LD_VAR 0 14
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: PPUSH
37325: LD_VAR 0 14
37329: PUSH
37330: LD_INT 2
37332: ARRAY
37333: PPUSH
37334: CALL_OW 111
// continue ;
37338: GO 36971
// end ; end ; r := GetDir ( tmp ) ;
37340: LD_ADDR_VAR 0 13
37344: PUSH
37345: LD_VAR 0 11
37349: PPUSH
37350: CALL_OW 254
37354: ST_TO_ADDR
// if r = 5 then
37355: LD_VAR 0 13
37359: PUSH
37360: LD_INT 5
37362: EQUAL
37363: IFFALSE 37373
// r := 0 ;
37365: LD_ADDR_VAR 0 13
37369: PUSH
37370: LD_INT 0
37372: ST_TO_ADDR
// for j = r to 5 do
37373: LD_ADDR_VAR 0 8
37377: PUSH
37378: DOUBLE
37379: LD_VAR 0 13
37383: DEC
37384: ST_TO_ADDR
37385: LD_INT 5
37387: PUSH
37388: FOR_TO
37389: IFFALSE 37503
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37391: LD_ADDR_VAR 0 9
37395: PUSH
37396: LD_VAR 0 11
37400: PPUSH
37401: CALL_OW 250
37405: PPUSH
37406: LD_VAR 0 8
37410: PPUSH
37411: LD_INT 2
37413: PPUSH
37414: CALL_OW 272
37418: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37419: LD_ADDR_VAR 0 10
37423: PUSH
37424: LD_VAR 0 11
37428: PPUSH
37429: CALL_OW 251
37433: PPUSH
37434: LD_VAR 0 8
37438: PPUSH
37439: LD_INT 2
37441: PPUSH
37442: CALL_OW 273
37446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37447: LD_VAR 0 9
37451: PPUSH
37452: LD_VAR 0 10
37456: PPUSH
37457: CALL_OW 488
37461: PUSH
37462: LD_VAR 0 9
37466: PPUSH
37467: LD_VAR 0 10
37471: PPUSH
37472: CALL_OW 428
37476: NOT
37477: AND
37478: IFFALSE 37501
// begin ComMoveXY ( tmp , _x , _y ) ;
37480: LD_VAR 0 11
37484: PPUSH
37485: LD_VAR 0 9
37489: PPUSH
37490: LD_VAR 0 10
37494: PPUSH
37495: CALL_OW 111
// break ;
37499: GO 37503
// end ; end ;
37501: GO 37388
37503: POP
37504: POP
// end ;
37505: GO 36971
37507: POP
37508: POP
// end ;
37509: LD_VAR 0 6
37513: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
37514: LD_INT 0
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
37525: PPUSH
// result := false ;
37526: LD_ADDR_VAR 0 6
37530: PUSH
37531: LD_INT 0
37533: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37534: LD_VAR 0 1
37538: NOT
37539: PUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: CALL_OW 266
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: IN
37560: NOT
37561: OR
37562: PUSH
37563: LD_VAR 0 2
37567: NOT
37568: OR
37569: PUSH
37570: LD_VAR 0 5
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: LD_INT 4
37589: PUSH
37590: LD_INT 5
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: IN
37601: NOT
37602: OR
37603: PUSH
37604: LD_VAR 0 3
37608: PPUSH
37609: LD_VAR 0 4
37613: PPUSH
37614: CALL_OW 488
37618: NOT
37619: OR
37620: IFFALSE 37624
// exit ;
37622: GO 38341
// pom := GetBase ( depot ) ;
37624: LD_ADDR_VAR 0 10
37628: PUSH
37629: LD_VAR 0 1
37633: PPUSH
37634: CALL_OW 274
37638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37639: LD_ADDR_VAR 0 11
37643: PUSH
37644: LD_VAR 0 2
37648: PPUSH
37649: LD_VAR 0 1
37653: PPUSH
37654: CALL_OW 248
37658: PPUSH
37659: CALL_OW 450
37663: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37664: LD_VAR 0 10
37668: PPUSH
37669: LD_INT 1
37671: PPUSH
37672: CALL_OW 275
37676: PUSH
37677: LD_VAR 0 11
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: GREATEREQUAL
37686: PUSH
37687: LD_VAR 0 10
37691: PPUSH
37692: LD_INT 2
37694: PPUSH
37695: CALL_OW 275
37699: PUSH
37700: LD_VAR 0 11
37704: PUSH
37705: LD_INT 2
37707: ARRAY
37708: GREATEREQUAL
37709: AND
37710: PUSH
37711: LD_VAR 0 10
37715: PPUSH
37716: LD_INT 3
37718: PPUSH
37719: CALL_OW 275
37723: PUSH
37724: LD_VAR 0 11
37728: PUSH
37729: LD_INT 3
37731: ARRAY
37732: GREATEREQUAL
37733: AND
37734: NOT
37735: IFFALSE 37739
// exit ;
37737: GO 38341
// if GetBType ( depot ) = b_depot then
37739: LD_VAR 0 1
37743: PPUSH
37744: CALL_OW 266
37748: PUSH
37749: LD_INT 0
37751: EQUAL
37752: IFFALSE 37764
// dist := 28 else
37754: LD_ADDR_VAR 0 14
37758: PUSH
37759: LD_INT 28
37761: ST_TO_ADDR
37762: GO 37772
// dist := 36 ;
37764: LD_ADDR_VAR 0 14
37768: PUSH
37769: LD_INT 36
37771: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37772: LD_VAR 0 1
37776: PPUSH
37777: LD_VAR 0 3
37781: PPUSH
37782: LD_VAR 0 4
37786: PPUSH
37787: CALL_OW 297
37791: PUSH
37792: LD_VAR 0 14
37796: GREATER
37797: IFFALSE 37801
// exit ;
37799: GO 38341
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37801: LD_ADDR_VAR 0 12
37805: PUSH
37806: LD_VAR 0 2
37810: PPUSH
37811: LD_VAR 0 3
37815: PPUSH
37816: LD_VAR 0 4
37820: PPUSH
37821: LD_VAR 0 5
37825: PPUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: CALL_OW 248
37835: PPUSH
37836: LD_INT 0
37838: PPUSH
37839: CALL 38346 0 6
37843: ST_TO_ADDR
// if not hexes then
37844: LD_VAR 0 12
37848: NOT
37849: IFFALSE 37853
// exit ;
37851: GO 38341
// hex := GetHexInfo ( x , y ) ;
37853: LD_ADDR_VAR 0 15
37857: PUSH
37858: LD_VAR 0 3
37862: PPUSH
37863: LD_VAR 0 4
37867: PPUSH
37868: CALL_OW 546
37872: ST_TO_ADDR
// if hex [ 1 ] then
37873: LD_VAR 0 15
37877: PUSH
37878: LD_INT 1
37880: ARRAY
37881: IFFALSE 37885
// exit ;
37883: GO 38341
// height := hex [ 2 ] ;
37885: LD_ADDR_VAR 0 13
37889: PUSH
37890: LD_VAR 0 15
37894: PUSH
37895: LD_INT 2
37897: ARRAY
37898: ST_TO_ADDR
// for i = 1 to hexes do
37899: LD_ADDR_VAR 0 7
37903: PUSH
37904: DOUBLE
37905: LD_INT 1
37907: DEC
37908: ST_TO_ADDR
37909: LD_VAR 0 12
37913: PUSH
37914: FOR_TO
37915: IFFALSE 38245
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37917: LD_VAR 0 12
37921: PUSH
37922: LD_VAR 0 7
37926: ARRAY
37927: PUSH
37928: LD_INT 1
37930: ARRAY
37931: PPUSH
37932: LD_VAR 0 12
37936: PUSH
37937: LD_VAR 0 7
37941: ARRAY
37942: PUSH
37943: LD_INT 2
37945: ARRAY
37946: PPUSH
37947: CALL_OW 488
37951: NOT
37952: PUSH
37953: LD_VAR 0 12
37957: PUSH
37958: LD_VAR 0 7
37962: ARRAY
37963: PUSH
37964: LD_INT 1
37966: ARRAY
37967: PPUSH
37968: LD_VAR 0 12
37972: PUSH
37973: LD_VAR 0 7
37977: ARRAY
37978: PUSH
37979: LD_INT 2
37981: ARRAY
37982: PPUSH
37983: CALL_OW 428
37987: PUSH
37988: LD_INT 0
37990: GREATER
37991: OR
37992: PUSH
37993: LD_VAR 0 12
37997: PUSH
37998: LD_VAR 0 7
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PPUSH
38008: LD_VAR 0 12
38012: PUSH
38013: LD_VAR 0 7
38017: ARRAY
38018: PUSH
38019: LD_INT 2
38021: ARRAY
38022: PPUSH
38023: CALL_OW 351
38027: OR
38028: IFFALSE 38034
// exit ;
38030: POP
38031: POP
38032: GO 38341
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38034: LD_ADDR_VAR 0 8
38038: PUSH
38039: LD_VAR 0 12
38043: PUSH
38044: LD_VAR 0 7
38048: ARRAY
38049: PUSH
38050: LD_INT 1
38052: ARRAY
38053: PPUSH
38054: LD_VAR 0 12
38058: PUSH
38059: LD_VAR 0 7
38063: ARRAY
38064: PUSH
38065: LD_INT 2
38067: ARRAY
38068: PPUSH
38069: CALL_OW 546
38073: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38074: LD_VAR 0 8
38078: PUSH
38079: LD_INT 1
38081: ARRAY
38082: PUSH
38083: LD_VAR 0 8
38087: PUSH
38088: LD_INT 2
38090: ARRAY
38091: PUSH
38092: LD_VAR 0 13
38096: PUSH
38097: LD_INT 2
38099: PLUS
38100: GREATER
38101: OR
38102: PUSH
38103: LD_VAR 0 8
38107: PUSH
38108: LD_INT 2
38110: ARRAY
38111: PUSH
38112: LD_VAR 0 13
38116: PUSH
38117: LD_INT 2
38119: MINUS
38120: LESS
38121: OR
38122: PUSH
38123: LD_VAR 0 8
38127: PUSH
38128: LD_INT 3
38130: ARRAY
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 8
38137: PUSH
38138: LD_INT 9
38140: PUSH
38141: LD_INT 10
38143: PUSH
38144: LD_INT 11
38146: PUSH
38147: LD_INT 12
38149: PUSH
38150: LD_INT 13
38152: PUSH
38153: LD_INT 16
38155: PUSH
38156: LD_INT 17
38158: PUSH
38159: LD_INT 18
38161: PUSH
38162: LD_INT 19
38164: PUSH
38165: LD_INT 20
38167: PUSH
38168: LD_INT 21
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: IN
38186: NOT
38187: OR
38188: PUSH
38189: LD_VAR 0 8
38193: PUSH
38194: LD_INT 5
38196: ARRAY
38197: NOT
38198: OR
38199: PUSH
38200: LD_VAR 0 8
38204: PUSH
38205: LD_INT 6
38207: ARRAY
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: LD_INT 7
38217: PUSH
38218: LD_INT 9
38220: PUSH
38221: LD_INT 10
38223: PUSH
38224: LD_INT 11
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: IN
38235: NOT
38236: OR
38237: IFFALSE 38243
// exit ;
38239: POP
38240: POP
38241: GO 38341
// end ;
38243: GO 37914
38245: POP
38246: POP
// side := GetSide ( depot ) ;
38247: LD_ADDR_VAR 0 9
38251: PUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 255
38261: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38262: LD_VAR 0 9
38266: PPUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: LD_VAR 0 4
38276: PPUSH
38277: LD_INT 20
38279: PPUSH
38280: CALL 30995 0 4
38284: PUSH
38285: LD_INT 4
38287: ARRAY
38288: IFFALSE 38292
// exit ;
38290: GO 38341
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38292: LD_VAR 0 2
38296: PUSH
38297: LD_INT 29
38299: PUSH
38300: LD_INT 30
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: IN
38307: PUSH
38308: LD_VAR 0 3
38312: PPUSH
38313: LD_VAR 0 4
38317: PPUSH
38318: LD_VAR 0 9
38322: PPUSH
38323: CALL_OW 440
38327: NOT
38328: AND
38329: IFFALSE 38333
// exit ;
38331: GO 38341
// result := true ;
38333: LD_ADDR_VAR 0 6
38337: PUSH
38338: LD_INT 1
38340: ST_TO_ADDR
// end ;
38341: LD_VAR 0 6
38345: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
38346: LD_INT 0
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
// result = [ ] ;
38406: LD_ADDR_VAR 0 7
38410: PUSH
38411: EMPTY
38412: ST_TO_ADDR
// temp_list = [ ] ;
38413: LD_ADDR_VAR 0 9
38417: PUSH
38418: EMPTY
38419: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38420: LD_VAR 0 4
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: LD_INT 4
38439: PUSH
38440: LD_INT 5
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: IN
38451: NOT
38452: PUSH
38453: LD_VAR 0 1
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: IN
38468: PUSH
38469: LD_VAR 0 5
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: IN
38488: NOT
38489: AND
38490: OR
38491: IFFALSE 38495
// exit ;
38493: GO 56886
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38495: LD_VAR 0 1
38499: PUSH
38500: LD_INT 6
38502: PUSH
38503: LD_INT 7
38505: PUSH
38506: LD_INT 8
38508: PUSH
38509: LD_INT 13
38511: PUSH
38512: LD_INT 12
38514: PUSH
38515: LD_INT 15
38517: PUSH
38518: LD_INT 11
38520: PUSH
38521: LD_INT 14
38523: PUSH
38524: LD_INT 10
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: IN
38538: IFFALSE 38548
// btype = b_lab ;
38540: LD_ADDR_VAR 0 1
38544: PUSH
38545: LD_INT 6
38547: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38548: LD_VAR 0 6
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: IN
38567: NOT
38568: PUSH
38569: LD_VAR 0 1
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 6
38588: PUSH
38589: LD_INT 36
38591: PUSH
38592: LD_INT 4
38594: PUSH
38595: LD_INT 5
38597: PUSH
38598: LD_INT 31
38600: PUSH
38601: LD_INT 32
38603: PUSH
38604: LD_INT 33
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: IN
38620: NOT
38621: PUSH
38622: LD_VAR 0 6
38626: PUSH
38627: LD_INT 1
38629: EQUAL
38630: AND
38631: OR
38632: PUSH
38633: LD_VAR 0 1
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: IN
38648: NOT
38649: PUSH
38650: LD_VAR 0 6
38654: PUSH
38655: LD_INT 2
38657: EQUAL
38658: AND
38659: OR
38660: IFFALSE 38670
// mode = 0 ;
38662: LD_ADDR_VAR 0 6
38666: PUSH
38667: LD_INT 0
38669: ST_TO_ADDR
// case mode of 0 :
38670: LD_VAR 0 6
38674: PUSH
38675: LD_INT 0
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 50136
38683: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38684: LD_ADDR_VAR 0 11
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38877: LD_ADDR_VAR 0 12
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 3
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39073: LD_ADDR_VAR 0 13
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 3
39232: NEG
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 3
39244: NEG
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39272: LD_ADDR_VAR 0 14
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 3
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39468: LD_ADDR_VAR 0 15
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: NEG
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39661: LD_ADDR_VAR 0 16
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 3
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39854: LD_ADDR_VAR 0 17
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40084: LD_ADDR_VAR 0 18
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40314: LD_ADDR_VAR 0 19
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40544: LD_ADDR_VAR 0 20
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40774: LD_ADDR_VAR 0 21
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41004: LD_ADDR_VAR 0 22
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41234: LD_ADDR_VAR 0 23
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: LD_INT 3
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 3
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41514: LD_ADDR_VAR 0 24
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41790: LD_ADDR_VAR 0 25
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42064: LD_ADDR_VAR 0 26
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42340: LD_ADDR_VAR 0 27
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42620: LD_ADDR_VAR 0 28
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42902: LD_ADDR_VAR 0 29
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43181: LD_ADDR_VAR 0 30
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 3
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43459: LD_ADDR_VAR 0 31
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 3
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 3
43702: NEG
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43737: LD_ADDR_VAR 0 32
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44015: LD_ADDR_VAR 0 33
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44294: LD_ADDR_VAR 0 34
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 3
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44574: LD_ADDR_VAR 0 35
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44686: LD_ADDR_VAR 0 36
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44798: LD_ADDR_VAR 0 37
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44910: LD_ADDR_VAR 0 38
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45022: LD_ADDR_VAR 0 39
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 2
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45134: LD_ADDR_VAR 0 40
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45246: LD_ADDR_VAR 0 41
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: LD_INT 3
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45596: LD_ADDR_VAR 0 42
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 3
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45946: LD_ADDR_VAR 0 43
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 3
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46294: LD_ADDR_VAR 0 44
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: LD_INT 3
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46644: LD_ADDR_VAR 0 45
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46994: LD_ADDR_VAR 0 46
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47342: LD_ADDR_VAR 0 47
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47493: LD_ADDR_VAR 0 48
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47640: LD_ADDR_VAR 0 49
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47784: LD_ADDR_VAR 0 50
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47928: LD_ADDR_VAR 0 51
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48075: LD_ADDR_VAR 0 52
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48226: LD_ADDR_VAR 0 53
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48456: LD_ADDR_VAR 0 54
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48686: LD_ADDR_VAR 0 55
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48916: LD_ADDR_VAR 0 56
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49146: LD_ADDR_VAR 0 57
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49376: LD_ADDR_VAR 0 58
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49606: LD_ADDR_VAR 0 59
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49694: LD_ADDR_VAR 0 60
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49782: LD_ADDR_VAR 0 61
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49870: LD_ADDR_VAR 0 62
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49958: LD_ADDR_VAR 0 63
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50046: LD_ADDR_VAR 0 64
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// end ; 1 :
50134: GO 56031
50136: LD_INT 1
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50144
50142: GO 52767
50144: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50145: LD_ADDR_VAR 0 11
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50189: LD_ADDR_VAR 0 12
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50230: LD_ADDR_VAR 0 13
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50270: LD_ADDR_VAR 0 14
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50311: LD_ADDR_VAR 0 15
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: LIST
50354: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50355: LD_ADDR_VAR 0 16
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50401: LD_ADDR_VAR 0 17
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50445: LD_ADDR_VAR 0 18
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50486: LD_ADDR_VAR 0 19
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50526: LD_ADDR_VAR 0 20
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 3
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50567: LD_ADDR_VAR 0 21
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50611: LD_ADDR_VAR 0 22
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: LD_INT 3
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50657: LD_ADDR_VAR 0 23
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 4
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50701: LD_ADDR_VAR 0 24
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50742: LD_ADDR_VAR 0 25
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 4
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 4
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50782: LD_ADDR_VAR 0 26
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 4
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50823: LD_ADDR_VAR 0 27
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 4
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50867: LD_ADDR_VAR 0 28
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 4
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 4
50898: NEG
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50913: LD_ADDR_VAR 0 29
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 4
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 5
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 5
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 6
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 6
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 5
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51068: LD_ADDR_VAR 0 30
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 5
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 5
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 6
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 6
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51211: LD_ADDR_VAR 0 31
51215: PUSH
51216: LD_INT 3
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 5
51278: PUSH
51279: LD_INT 4
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: LD_INT 5
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 6
51308: PUSH
51309: LD_INT 5
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 6
51318: PUSH
51319: LD_INT 6
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 5
51328: PUSH
51329: LD_INT 6
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51350: LD_ADDR_VAR 0 32
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 4
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 5
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 4
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 6
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 6
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51493: LD_ADDR_VAR 0 33
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 4
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 4
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 5
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 5
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 5
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 6
51613: NEG
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 6
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51648: LD_ADDR_VAR 0 34
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 4
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 4
51703: NEG
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 4
51715: NEG
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 4
51727: NEG
51728: PUSH
51729: LD_INT 5
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 5
51739: NEG
51740: PUSH
51741: LD_INT 4
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 5
51751: NEG
51752: PUSH
51753: LD_INT 5
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 5
51763: NEG
51764: PUSH
51765: LD_INT 6
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 6
51775: NEG
51776: PUSH
51777: LD_INT 5
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 6
51787: NEG
51788: PUSH
51789: LD_INT 6
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51811: LD_ADDR_VAR 0 41
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51855: LD_ADDR_VAR 0 42
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51896: LD_ADDR_VAR 0 43
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 3
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51936: LD_ADDR_VAR 0 44
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 3
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51977: LD_ADDR_VAR 0 45
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52021: LD_ADDR_VAR 0 46
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52067: LD_ADDR_VAR 0 47
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 3
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52100: LD_ADDR_VAR 0 48
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52131: LD_ADDR_VAR 0 49
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52160: LD_ADDR_VAR 0 50
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52189: LD_ADDR_VAR 0 51
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52220: LD_ADDR_VAR 0 52
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52253: LD_ADDR_VAR 0 53
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52297: LD_ADDR_VAR 0 54
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52338: LD_ADDR_VAR 0 55
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52378: LD_ADDR_VAR 0 56
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52419: LD_ADDR_VAR 0 57
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52463: LD_ADDR_VAR 0 58
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52509: LD_ADDR_VAR 0 59
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52553: LD_ADDR_VAR 0 60
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52594: LD_ADDR_VAR 0 61
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52634: LD_ADDR_VAR 0 62
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52675: LD_ADDR_VAR 0 63
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52719: LD_ADDR_VAR 0 64
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// end ; 2 :
52765: GO 56031
52767: LD_INT 2
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52775
52773: GO 56030
52775: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52776: LD_ADDR_VAR 0 29
52780: PUSH
52781: LD_INT 4
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 5
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 5
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: PUSH
52907: LD_INT 4
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 4
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 5
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 4
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 5
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 3
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 4
53115: NEG
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 4
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 4
53138: NEG
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 4
53161: NEG
53162: PUSH
53163: LD_INT 4
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 4
53173: NEG
53174: PUSH
53175: LD_INT 5
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: LD_INT 4
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 4
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 5
53221: NEG
53222: PUSH
53223: LD_INT 4
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 5
53233: NEG
53234: PUSH
53235: LD_INT 5
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 5
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 5
53257: NEG
53258: PUSH
53259: LD_INT 3
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53314: LD_ADDR_VAR 0 30
53318: PUSH
53319: LD_INT 4
53321: PUSH
53322: LD_INT 4
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 4
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 5
53341: PUSH
53342: LD_INT 4
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 5
53351: PUSH
53352: LD_INT 5
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 4
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 4
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 5
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 5
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 4
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 4
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 5
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 5
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 5
53583: NEG
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 4
53666: NEG
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: LD_INT 4
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 4
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 4
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 5
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 4
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 5
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 5
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53861: LD_ADDR_VAR 0 31
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 4
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 3
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 5
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 4
54063: NEG
54064: PUSH
54065: LD_INT 4
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: LD_INT 4
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 4
54111: NEG
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 5
54123: NEG
54124: PUSH
54125: LD_INT 4
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 5
54135: NEG
54136: PUSH
54137: LD_INT 5
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 5
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 5
54159: NEG
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 4
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 4
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 4
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 5
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 4
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 5
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54411: LD_ADDR_VAR 0 32
54415: PUSH
54416: LD_INT 4
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 4
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 5
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 5
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 4
54592: NEG
54593: PUSH
54594: LD_INT 4
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: NEG
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 5
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 4
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: LD_INT 4
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 5
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 5
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 4
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 5
54843: PUSH
54844: LD_INT 4
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 5
54853: PUSH
54854: LD_INT 5
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: PUSH
54864: LD_INT 5
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 5
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: LD_INT 5
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54958: LD_ADDR_VAR 0 33
54962: PUSH
54963: LD_INT 4
54965: NEG
54966: PUSH
54967: LD_INT 4
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 4
54977: NEG
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 3
54989: NEG
54990: PUSH
54991: LD_INT 4
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 5
55037: NEG
55038: PUSH
55039: LD_INT 5
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 5
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 4
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 4
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 4
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 5
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 5
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 4
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: PUSH
55299: LD_INT 4
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: LD_INT 4
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 4
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55496: LD_ADDR_VAR 0 34
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 5
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: LD_INT 5
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 5
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 4
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: LD_INT 5
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 5
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 5
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 3
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 4
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 4
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 5
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 5
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 5
55960: NEG
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: NEG
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// end ; end ;
56028: GO 56031
56030: POP
// case btype of b_depot , b_warehouse :
56031: LD_VAR 0 1
56035: PUSH
56036: LD_INT 0
56038: DOUBLE
56039: EQUAL
56040: IFTRUE 56050
56042: LD_INT 1
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56050
56048: GO 56251
56050: POP
// case nation of nation_american :
56051: LD_VAR 0 5
56055: PUSH
56056: LD_INT 1
56058: DOUBLE
56059: EQUAL
56060: IFTRUE 56064
56062: GO 56120
56064: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
56065: LD_ADDR_VAR 0 9
56069: PUSH
56070: LD_VAR 0 11
56074: PUSH
56075: LD_VAR 0 12
56079: PUSH
56080: LD_VAR 0 13
56084: PUSH
56085: LD_VAR 0 14
56089: PUSH
56090: LD_VAR 0 15
56094: PUSH
56095: LD_VAR 0 16
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: PUSH
56108: LD_VAR 0 4
56112: PUSH
56113: LD_INT 1
56115: PLUS
56116: ARRAY
56117: ST_TO_ADDR
56118: GO 56249
56120: LD_INT 2
56122: DOUBLE
56123: EQUAL
56124: IFTRUE 56128
56126: GO 56184
56128: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
56129: LD_ADDR_VAR 0 9
56133: PUSH
56134: LD_VAR 0 17
56138: PUSH
56139: LD_VAR 0 18
56143: PUSH
56144: LD_VAR 0 19
56148: PUSH
56149: LD_VAR 0 20
56153: PUSH
56154: LD_VAR 0 21
56158: PUSH
56159: LD_VAR 0 22
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: PUSH
56172: LD_VAR 0 4
56176: PUSH
56177: LD_INT 1
56179: PLUS
56180: ARRAY
56181: ST_TO_ADDR
56182: GO 56249
56184: LD_INT 3
56186: DOUBLE
56187: EQUAL
56188: IFTRUE 56192
56190: GO 56248
56192: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56193: LD_ADDR_VAR 0 9
56197: PUSH
56198: LD_VAR 0 23
56202: PUSH
56203: LD_VAR 0 24
56207: PUSH
56208: LD_VAR 0 25
56212: PUSH
56213: LD_VAR 0 26
56217: PUSH
56218: LD_VAR 0 27
56222: PUSH
56223: LD_VAR 0 28
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: PUSH
56236: LD_VAR 0 4
56240: PUSH
56241: LD_INT 1
56243: PLUS
56244: ARRAY
56245: ST_TO_ADDR
56246: GO 56249
56248: POP
56249: GO 56804
56251: LD_INT 2
56253: DOUBLE
56254: EQUAL
56255: IFTRUE 56265
56257: LD_INT 3
56259: DOUBLE
56260: EQUAL
56261: IFTRUE 56265
56263: GO 56321
56265: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56266: LD_ADDR_VAR 0 9
56270: PUSH
56271: LD_VAR 0 29
56275: PUSH
56276: LD_VAR 0 30
56280: PUSH
56281: LD_VAR 0 31
56285: PUSH
56286: LD_VAR 0 32
56290: PUSH
56291: LD_VAR 0 33
56295: PUSH
56296: LD_VAR 0 34
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: PUSH
56309: LD_VAR 0 4
56313: PUSH
56314: LD_INT 1
56316: PLUS
56317: ARRAY
56318: ST_TO_ADDR
56319: GO 56804
56321: LD_INT 16
56323: DOUBLE
56324: EQUAL
56325: IFTRUE 56383
56327: LD_INT 17
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56383
56333: LD_INT 18
56335: DOUBLE
56336: EQUAL
56337: IFTRUE 56383
56339: LD_INT 19
56341: DOUBLE
56342: EQUAL
56343: IFTRUE 56383
56345: LD_INT 22
56347: DOUBLE
56348: EQUAL
56349: IFTRUE 56383
56351: LD_INT 20
56353: DOUBLE
56354: EQUAL
56355: IFTRUE 56383
56357: LD_INT 21
56359: DOUBLE
56360: EQUAL
56361: IFTRUE 56383
56363: LD_INT 23
56365: DOUBLE
56366: EQUAL
56367: IFTRUE 56383
56369: LD_INT 24
56371: DOUBLE
56372: EQUAL
56373: IFTRUE 56383
56375: LD_INT 25
56377: DOUBLE
56378: EQUAL
56379: IFTRUE 56383
56381: GO 56439
56383: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56384: LD_ADDR_VAR 0 9
56388: PUSH
56389: LD_VAR 0 35
56393: PUSH
56394: LD_VAR 0 36
56398: PUSH
56399: LD_VAR 0 37
56403: PUSH
56404: LD_VAR 0 38
56408: PUSH
56409: LD_VAR 0 39
56413: PUSH
56414: LD_VAR 0 40
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: PUSH
56427: LD_VAR 0 4
56431: PUSH
56432: LD_INT 1
56434: PLUS
56435: ARRAY
56436: ST_TO_ADDR
56437: GO 56804
56439: LD_INT 6
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56495
56445: LD_INT 7
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56495
56451: LD_INT 8
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56495
56457: LD_INT 13
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56495
56463: LD_INT 12
56465: DOUBLE
56466: EQUAL
56467: IFTRUE 56495
56469: LD_INT 15
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56495
56475: LD_INT 11
56477: DOUBLE
56478: EQUAL
56479: IFTRUE 56495
56481: LD_INT 14
56483: DOUBLE
56484: EQUAL
56485: IFTRUE 56495
56487: LD_INT 10
56489: DOUBLE
56490: EQUAL
56491: IFTRUE 56495
56493: GO 56551
56495: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
56496: LD_ADDR_VAR 0 9
56500: PUSH
56501: LD_VAR 0 41
56505: PUSH
56506: LD_VAR 0 42
56510: PUSH
56511: LD_VAR 0 43
56515: PUSH
56516: LD_VAR 0 44
56520: PUSH
56521: LD_VAR 0 45
56525: PUSH
56526: LD_VAR 0 46
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: PUSH
56539: LD_VAR 0 4
56543: PUSH
56544: LD_INT 1
56546: PLUS
56547: ARRAY
56548: ST_TO_ADDR
56549: GO 56804
56551: LD_INT 36
56553: DOUBLE
56554: EQUAL
56555: IFTRUE 56559
56557: GO 56615
56559: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56560: LD_ADDR_VAR 0 9
56564: PUSH
56565: LD_VAR 0 47
56569: PUSH
56570: LD_VAR 0 48
56574: PUSH
56575: LD_VAR 0 49
56579: PUSH
56580: LD_VAR 0 50
56584: PUSH
56585: LD_VAR 0 51
56589: PUSH
56590: LD_VAR 0 52
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 4
56607: PUSH
56608: LD_INT 1
56610: PLUS
56611: ARRAY
56612: ST_TO_ADDR
56613: GO 56804
56615: LD_INT 4
56617: DOUBLE
56618: EQUAL
56619: IFTRUE 56641
56621: LD_INT 5
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56641
56627: LD_INT 34
56629: DOUBLE
56630: EQUAL
56631: IFTRUE 56641
56633: LD_INT 37
56635: DOUBLE
56636: EQUAL
56637: IFTRUE 56641
56639: GO 56697
56641: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56642: LD_ADDR_VAR 0 9
56646: PUSH
56647: LD_VAR 0 53
56651: PUSH
56652: LD_VAR 0 54
56656: PUSH
56657: LD_VAR 0 55
56661: PUSH
56662: LD_VAR 0 56
56666: PUSH
56667: LD_VAR 0 57
56671: PUSH
56672: LD_VAR 0 58
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: PUSH
56685: LD_VAR 0 4
56689: PUSH
56690: LD_INT 1
56692: PLUS
56693: ARRAY
56694: ST_TO_ADDR
56695: GO 56804
56697: LD_INT 31
56699: DOUBLE
56700: EQUAL
56701: IFTRUE 56747
56703: LD_INT 32
56705: DOUBLE
56706: EQUAL
56707: IFTRUE 56747
56709: LD_INT 33
56711: DOUBLE
56712: EQUAL
56713: IFTRUE 56747
56715: LD_INT 27
56717: DOUBLE
56718: EQUAL
56719: IFTRUE 56747
56721: LD_INT 26
56723: DOUBLE
56724: EQUAL
56725: IFTRUE 56747
56727: LD_INT 28
56729: DOUBLE
56730: EQUAL
56731: IFTRUE 56747
56733: LD_INT 29
56735: DOUBLE
56736: EQUAL
56737: IFTRUE 56747
56739: LD_INT 30
56741: DOUBLE
56742: EQUAL
56743: IFTRUE 56747
56745: GO 56803
56747: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
56748: LD_ADDR_VAR 0 9
56752: PUSH
56753: LD_VAR 0 59
56757: PUSH
56758: LD_VAR 0 60
56762: PUSH
56763: LD_VAR 0 61
56767: PUSH
56768: LD_VAR 0 62
56772: PUSH
56773: LD_VAR 0 63
56777: PUSH
56778: LD_VAR 0 64
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: PUSH
56791: LD_VAR 0 4
56795: PUSH
56796: LD_INT 1
56798: PLUS
56799: ARRAY
56800: ST_TO_ADDR
56801: GO 56804
56803: POP
// temp_list2 = [ ] ;
56804: LD_ADDR_VAR 0 10
56808: PUSH
56809: EMPTY
56810: ST_TO_ADDR
// for i in temp_list do
56811: LD_ADDR_VAR 0 8
56815: PUSH
56816: LD_VAR 0 9
56820: PUSH
56821: FOR_IN
56822: IFFALSE 56874
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56824: LD_ADDR_VAR 0 10
56828: PUSH
56829: LD_VAR 0 10
56833: PUSH
56834: LD_VAR 0 8
56838: PUSH
56839: LD_INT 1
56841: ARRAY
56842: PUSH
56843: LD_VAR 0 2
56847: PLUS
56848: PUSH
56849: LD_VAR 0 8
56853: PUSH
56854: LD_INT 2
56856: ARRAY
56857: PUSH
56858: LD_VAR 0 3
56862: PLUS
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: EMPTY
56869: LIST
56870: ADD
56871: ST_TO_ADDR
56872: GO 56821
56874: POP
56875: POP
// result = temp_list2 ;
56876: LD_ADDR_VAR 0 7
56880: PUSH
56881: LD_VAR 0 10
56885: ST_TO_ADDR
// end ;
56886: LD_VAR 0 7
56890: RET
// export function EnemyInRange ( unit , dist ) ; begin
56891: LD_INT 0
56893: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56894: LD_ADDR_VAR 0 3
56898: PUSH
56899: LD_VAR 0 1
56903: PPUSH
56904: CALL_OW 255
56908: PPUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 250
56918: PPUSH
56919: LD_VAR 0 1
56923: PPUSH
56924: CALL_OW 251
56928: PPUSH
56929: LD_VAR 0 2
56933: PPUSH
56934: CALL 30995 0 4
56938: PUSH
56939: LD_INT 4
56941: ARRAY
56942: ST_TO_ADDR
// end ;
56943: LD_VAR 0 3
56947: RET
// export function PlayerSeeMe ( unit ) ; begin
56948: LD_INT 0
56950: PPUSH
// result := See ( your_side , unit ) ;
56951: LD_ADDR_VAR 0 2
56955: PUSH
56956: LD_OWVAR 2
56960: PPUSH
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 292
56970: ST_TO_ADDR
// end ;
56971: LD_VAR 0 2
56975: RET
// export function ReverseDir ( unit ) ; begin
56976: LD_INT 0
56978: PPUSH
// if not unit then
56979: LD_VAR 0 1
56983: NOT
56984: IFFALSE 56988
// exit ;
56986: GO 57011
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56988: LD_ADDR_VAR 0 2
56992: PUSH
56993: LD_VAR 0 1
56997: PPUSH
56998: CALL_OW 254
57002: PUSH
57003: LD_INT 3
57005: PLUS
57006: PUSH
57007: LD_INT 6
57009: MOD
57010: ST_TO_ADDR
// end ;
57011: LD_VAR 0 2
57015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57016: LD_INT 0
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
// if not hexes then
57023: LD_VAR 0 2
57027: NOT
57028: IFFALSE 57032
// exit ;
57030: GO 57180
// dist := 9999 ;
57032: LD_ADDR_VAR 0 5
57036: PUSH
57037: LD_INT 9999
57039: ST_TO_ADDR
// for i = 1 to hexes do
57040: LD_ADDR_VAR 0 4
57044: PUSH
57045: DOUBLE
57046: LD_INT 1
57048: DEC
57049: ST_TO_ADDR
57050: LD_VAR 0 2
57054: PUSH
57055: FOR_TO
57056: IFFALSE 57168
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57058: LD_VAR 0 1
57062: PPUSH
57063: LD_VAR 0 2
57067: PUSH
57068: LD_VAR 0 4
57072: ARRAY
57073: PUSH
57074: LD_INT 1
57076: ARRAY
57077: PPUSH
57078: LD_VAR 0 2
57082: PUSH
57083: LD_VAR 0 4
57087: ARRAY
57088: PUSH
57089: LD_INT 2
57091: ARRAY
57092: PPUSH
57093: CALL_OW 297
57097: PUSH
57098: LD_VAR 0 5
57102: LESS
57103: IFFALSE 57166
// begin hex := hexes [ i ] ;
57105: LD_ADDR_VAR 0 7
57109: PUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_VAR 0 4
57119: ARRAY
57120: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57121: LD_ADDR_VAR 0 5
57125: PUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: LD_VAR 0 2
57135: PUSH
57136: LD_VAR 0 4
57140: ARRAY
57141: PUSH
57142: LD_INT 1
57144: ARRAY
57145: PPUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_VAR 0 4
57155: ARRAY
57156: PUSH
57157: LD_INT 2
57159: ARRAY
57160: PPUSH
57161: CALL_OW 297
57165: ST_TO_ADDR
// end ; end ;
57166: GO 57055
57168: POP
57169: POP
// result := hex ;
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_VAR 0 7
57179: ST_TO_ADDR
// end ;
57180: LD_VAR 0 3
57184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57185: LD_INT 0
57187: PPUSH
57188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57189: LD_VAR 0 1
57193: NOT
57194: PUSH
57195: LD_VAR 0 1
57199: PUSH
57200: LD_INT 21
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 23
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PPUSH
57224: CALL_OW 69
57228: IN
57229: NOT
57230: OR
57231: IFFALSE 57235
// exit ;
57233: GO 57282
// for i = 1 to 3 do
57235: LD_ADDR_VAR 0 3
57239: PUSH
57240: DOUBLE
57241: LD_INT 1
57243: DEC
57244: ST_TO_ADDR
57245: LD_INT 3
57247: PUSH
57248: FOR_TO
57249: IFFALSE 57280
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 250
57260: PPUSH
57261: LD_VAR 0 1
57265: PPUSH
57266: CALL_OW 251
57270: PPUSH
57271: LD_INT 1
57273: PPUSH
57274: CALL_OW 453
57278: GO 57248
57280: POP
57281: POP
// end ;
57282: LD_VAR 0 2
57286: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57287: LD_INT 0
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
57294: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57295: LD_VAR 0 1
57299: NOT
57300: PUSH
57301: LD_VAR 0 2
57305: NOT
57306: OR
57307: PUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 314
57317: OR
57318: IFFALSE 57322
// exit ;
57320: GO 57763
// x := GetX ( enemy_unit ) ;
57322: LD_ADDR_VAR 0 7
57326: PUSH
57327: LD_VAR 0 2
57331: PPUSH
57332: CALL_OW 250
57336: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57337: LD_ADDR_VAR 0 8
57341: PUSH
57342: LD_VAR 0 2
57346: PPUSH
57347: CALL_OW 251
57351: ST_TO_ADDR
// if not x or not y then
57352: LD_VAR 0 7
57356: NOT
57357: PUSH
57358: LD_VAR 0 8
57362: NOT
57363: OR
57364: IFFALSE 57368
// exit ;
57366: GO 57763
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57368: LD_ADDR_VAR 0 6
57372: PUSH
57373: LD_VAR 0 7
57377: PPUSH
57378: LD_INT 0
57380: PPUSH
57381: LD_INT 4
57383: PPUSH
57384: CALL_OW 272
57388: PUSH
57389: LD_VAR 0 8
57393: PPUSH
57394: LD_INT 0
57396: PPUSH
57397: LD_INT 4
57399: PPUSH
57400: CALL_OW 273
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_VAR 0 7
57413: PPUSH
57414: LD_INT 1
57416: PPUSH
57417: LD_INT 4
57419: PPUSH
57420: CALL_OW 272
57424: PUSH
57425: LD_VAR 0 8
57429: PPUSH
57430: LD_INT 1
57432: PPUSH
57433: LD_INT 4
57435: PPUSH
57436: CALL_OW 273
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_VAR 0 7
57449: PPUSH
57450: LD_INT 2
57452: PPUSH
57453: LD_INT 4
57455: PPUSH
57456: CALL_OW 272
57460: PUSH
57461: LD_VAR 0 8
57465: PPUSH
57466: LD_INT 2
57468: PPUSH
57469: LD_INT 4
57471: PPUSH
57472: CALL_OW 273
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_VAR 0 7
57485: PPUSH
57486: LD_INT 3
57488: PPUSH
57489: LD_INT 4
57491: PPUSH
57492: CALL_OW 272
57496: PUSH
57497: LD_VAR 0 8
57501: PPUSH
57502: LD_INT 3
57504: PPUSH
57505: LD_INT 4
57507: PPUSH
57508: CALL_OW 273
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_VAR 0 7
57521: PPUSH
57522: LD_INT 4
57524: PPUSH
57525: LD_INT 4
57527: PPUSH
57528: CALL_OW 272
57532: PUSH
57533: LD_VAR 0 8
57537: PPUSH
57538: LD_INT 4
57540: PPUSH
57541: LD_INT 4
57543: PPUSH
57544: CALL_OW 273
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_VAR 0 7
57557: PPUSH
57558: LD_INT 5
57560: PPUSH
57561: LD_INT 4
57563: PPUSH
57564: CALL_OW 272
57568: PUSH
57569: LD_VAR 0 8
57573: PPUSH
57574: LD_INT 5
57576: PPUSH
57577: LD_INT 4
57579: PPUSH
57580: CALL_OW 273
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// for i = tmp downto 1 do
57597: LD_ADDR_VAR 0 4
57601: PUSH
57602: DOUBLE
57603: LD_VAR 0 6
57607: INC
57608: ST_TO_ADDR
57609: LD_INT 1
57611: PUSH
57612: FOR_DOWNTO
57613: IFFALSE 57714
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57615: LD_VAR 0 6
57619: PUSH
57620: LD_VAR 0 4
57624: ARRAY
57625: PUSH
57626: LD_INT 1
57628: ARRAY
57629: PPUSH
57630: LD_VAR 0 6
57634: PUSH
57635: LD_VAR 0 4
57639: ARRAY
57640: PUSH
57641: LD_INT 2
57643: ARRAY
57644: PPUSH
57645: CALL_OW 488
57649: NOT
57650: PUSH
57651: LD_VAR 0 6
57655: PUSH
57656: LD_VAR 0 4
57660: ARRAY
57661: PUSH
57662: LD_INT 1
57664: ARRAY
57665: PPUSH
57666: LD_VAR 0 6
57670: PUSH
57671: LD_VAR 0 4
57675: ARRAY
57676: PUSH
57677: LD_INT 2
57679: ARRAY
57680: PPUSH
57681: CALL_OW 428
57685: PUSH
57686: LD_INT 0
57688: NONEQUAL
57689: OR
57690: IFFALSE 57712
// tmp := Delete ( tmp , i ) ;
57692: LD_ADDR_VAR 0 6
57696: PUSH
57697: LD_VAR 0 6
57701: PPUSH
57702: LD_VAR 0 4
57706: PPUSH
57707: CALL_OW 3
57711: ST_TO_ADDR
57712: GO 57612
57714: POP
57715: POP
// j := GetClosestHex ( unit , tmp ) ;
57716: LD_ADDR_VAR 0 5
57720: PUSH
57721: LD_VAR 0 1
57725: PPUSH
57726: LD_VAR 0 6
57730: PPUSH
57731: CALL 57016 0 2
57735: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57736: LD_VAR 0 1
57740: PPUSH
57741: LD_VAR 0 5
57745: PUSH
57746: LD_INT 1
57748: ARRAY
57749: PPUSH
57750: LD_VAR 0 5
57754: PUSH
57755: LD_INT 2
57757: ARRAY
57758: PPUSH
57759: CALL_OW 111
// end ;
57763: LD_VAR 0 3
57767: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57768: LD_INT 0
57770: PPUSH
57771: PPUSH
57772: PPUSH
// uc_side = 0 ;
57773: LD_ADDR_OWVAR 20
57777: PUSH
57778: LD_INT 0
57780: ST_TO_ADDR
// uc_nation = 0 ;
57781: LD_ADDR_OWVAR 21
57785: PUSH
57786: LD_INT 0
57788: ST_TO_ADDR
// InitHc ;
57789: CALL_OW 19
// InitVc ;
57793: CALL_OW 20
// if mastodonts then
57797: LD_VAR 0 6
57801: IFFALSE 57868
// for i = 1 to mastodonts do
57803: LD_ADDR_VAR 0 11
57807: PUSH
57808: DOUBLE
57809: LD_INT 1
57811: DEC
57812: ST_TO_ADDR
57813: LD_VAR 0 6
57817: PUSH
57818: FOR_TO
57819: IFFALSE 57866
// begin vc_chassis := 31 ;
57821: LD_ADDR_OWVAR 37
57825: PUSH
57826: LD_INT 31
57828: ST_TO_ADDR
// vc_control := control_rider ;
57829: LD_ADDR_OWVAR 38
57833: PUSH
57834: LD_INT 4
57836: ST_TO_ADDR
// animal := CreateVehicle ;
57837: LD_ADDR_VAR 0 12
57841: PUSH
57842: CALL_OW 45
57846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57847: LD_VAR 0 12
57851: PPUSH
57852: LD_VAR 0 8
57856: PPUSH
57857: LD_INT 0
57859: PPUSH
57860: CALL 59937 0 3
// end ;
57864: GO 57818
57866: POP
57867: POP
// if horses then
57868: LD_VAR 0 5
57872: IFFALSE 57939
// for i = 1 to horses do
57874: LD_ADDR_VAR 0 11
57878: PUSH
57879: DOUBLE
57880: LD_INT 1
57882: DEC
57883: ST_TO_ADDR
57884: LD_VAR 0 5
57888: PUSH
57889: FOR_TO
57890: IFFALSE 57937
// begin hc_class := 21 ;
57892: LD_ADDR_OWVAR 28
57896: PUSH
57897: LD_INT 21
57899: ST_TO_ADDR
// hc_gallery :=  ;
57900: LD_ADDR_OWVAR 33
57904: PUSH
57905: LD_STRING 
57907: ST_TO_ADDR
// animal := CreateHuman ;
57908: LD_ADDR_VAR 0 12
57912: PUSH
57913: CALL_OW 44
57917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57918: LD_VAR 0 12
57922: PPUSH
57923: LD_VAR 0 8
57927: PPUSH
57928: LD_INT 0
57930: PPUSH
57931: CALL 59937 0 3
// end ;
57935: GO 57889
57937: POP
57938: POP
// if birds then
57939: LD_VAR 0 1
57943: IFFALSE 58010
// for i = 1 to birds do
57945: LD_ADDR_VAR 0 11
57949: PUSH
57950: DOUBLE
57951: LD_INT 1
57953: DEC
57954: ST_TO_ADDR
57955: LD_VAR 0 1
57959: PUSH
57960: FOR_TO
57961: IFFALSE 58008
// begin hc_class = 18 ;
57963: LD_ADDR_OWVAR 28
57967: PUSH
57968: LD_INT 18
57970: ST_TO_ADDR
// hc_gallery =  ;
57971: LD_ADDR_OWVAR 33
57975: PUSH
57976: LD_STRING 
57978: ST_TO_ADDR
// animal := CreateHuman ;
57979: LD_ADDR_VAR 0 12
57983: PUSH
57984: CALL_OW 44
57988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57989: LD_VAR 0 12
57993: PPUSH
57994: LD_VAR 0 8
57998: PPUSH
57999: LD_INT 0
58001: PPUSH
58002: CALL 59937 0 3
// end ;
58006: GO 57960
58008: POP
58009: POP
// if tigers then
58010: LD_VAR 0 2
58014: IFFALSE 58098
// for i = 1 to tigers do
58016: LD_ADDR_VAR 0 11
58020: PUSH
58021: DOUBLE
58022: LD_INT 1
58024: DEC
58025: ST_TO_ADDR
58026: LD_VAR 0 2
58030: PUSH
58031: FOR_TO
58032: IFFALSE 58096
// begin hc_class = class_tiger ;
58034: LD_ADDR_OWVAR 28
58038: PUSH
58039: LD_INT 14
58041: ST_TO_ADDR
// hc_gallery =  ;
58042: LD_ADDR_OWVAR 33
58046: PUSH
58047: LD_STRING 
58049: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58050: LD_ADDR_OWVAR 35
58054: PUSH
58055: LD_INT 7
58057: NEG
58058: PPUSH
58059: LD_INT 7
58061: PPUSH
58062: CALL_OW 12
58066: ST_TO_ADDR
// animal := CreateHuman ;
58067: LD_ADDR_VAR 0 12
58071: PUSH
58072: CALL_OW 44
58076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58077: LD_VAR 0 12
58081: PPUSH
58082: LD_VAR 0 8
58086: PPUSH
58087: LD_INT 0
58089: PPUSH
58090: CALL 59937 0 3
// end ;
58094: GO 58031
58096: POP
58097: POP
// if apemans then
58098: LD_VAR 0 3
58102: IFFALSE 58225
// for i = 1 to apemans do
58104: LD_ADDR_VAR 0 11
58108: PUSH
58109: DOUBLE
58110: LD_INT 1
58112: DEC
58113: ST_TO_ADDR
58114: LD_VAR 0 3
58118: PUSH
58119: FOR_TO
58120: IFFALSE 58223
// begin hc_class = class_apeman ;
58122: LD_ADDR_OWVAR 28
58126: PUSH
58127: LD_INT 12
58129: ST_TO_ADDR
// hc_gallery =  ;
58130: LD_ADDR_OWVAR 33
58134: PUSH
58135: LD_STRING 
58137: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
58138: LD_ADDR_OWVAR 35
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PPUSH
58147: LD_INT 5
58149: PPUSH
58150: CALL_OW 12
58154: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58155: LD_ADDR_OWVAR 31
58159: PUSH
58160: LD_INT 1
58162: PPUSH
58163: LD_INT 3
58165: PPUSH
58166: CALL_OW 12
58170: PUSH
58171: LD_INT 1
58173: PPUSH
58174: LD_INT 3
58176: PPUSH
58177: CALL_OW 12
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// animal := CreateHuman ;
58194: LD_ADDR_VAR 0 12
58198: PUSH
58199: CALL_OW 44
58203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58204: LD_VAR 0 12
58208: PPUSH
58209: LD_VAR 0 8
58213: PPUSH
58214: LD_INT 0
58216: PPUSH
58217: CALL 59937 0 3
// end ;
58221: GO 58119
58223: POP
58224: POP
// if enchidnas then
58225: LD_VAR 0 4
58229: IFFALSE 58296
// for i = 1 to enchidnas do
58231: LD_ADDR_VAR 0 11
58235: PUSH
58236: DOUBLE
58237: LD_INT 1
58239: DEC
58240: ST_TO_ADDR
58241: LD_VAR 0 4
58245: PUSH
58246: FOR_TO
58247: IFFALSE 58294
// begin hc_class = 13 ;
58249: LD_ADDR_OWVAR 28
58253: PUSH
58254: LD_INT 13
58256: ST_TO_ADDR
// hc_gallery =  ;
58257: LD_ADDR_OWVAR 33
58261: PUSH
58262: LD_STRING 
58264: ST_TO_ADDR
// animal := CreateHuman ;
58265: LD_ADDR_VAR 0 12
58269: PUSH
58270: CALL_OW 44
58274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58275: LD_VAR 0 12
58279: PPUSH
58280: LD_VAR 0 8
58284: PPUSH
58285: LD_INT 0
58287: PPUSH
58288: CALL 59937 0 3
// end ;
58292: GO 58246
58294: POP
58295: POP
// if fishes then
58296: LD_VAR 0 7
58300: IFFALSE 58367
// for i = 1 to fishes do
58302: LD_ADDR_VAR 0 11
58306: PUSH
58307: DOUBLE
58308: LD_INT 1
58310: DEC
58311: ST_TO_ADDR
58312: LD_VAR 0 7
58316: PUSH
58317: FOR_TO
58318: IFFALSE 58365
// begin hc_class = 20 ;
58320: LD_ADDR_OWVAR 28
58324: PUSH
58325: LD_INT 20
58327: ST_TO_ADDR
// hc_gallery =  ;
58328: LD_ADDR_OWVAR 33
58332: PUSH
58333: LD_STRING 
58335: ST_TO_ADDR
// animal := CreateHuman ;
58336: LD_ADDR_VAR 0 12
58340: PUSH
58341: CALL_OW 44
58345: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58346: LD_VAR 0 12
58350: PPUSH
58351: LD_VAR 0 9
58355: PPUSH
58356: LD_INT 0
58358: PPUSH
58359: CALL 59937 0 3
// end ;
58363: GO 58317
58365: POP
58366: POP
// end ;
58367: LD_VAR 0 10
58371: RET
// export function WantHeal ( sci , unit ) ; begin
58372: LD_INT 0
58374: PPUSH
// if GetTaskList ( sci ) > 0 then
58375: LD_VAR 0 1
58379: PPUSH
58380: CALL_OW 437
58384: PUSH
58385: LD_INT 0
58387: GREATER
58388: IFFALSE 58458
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58390: LD_VAR 0 1
58394: PPUSH
58395: CALL_OW 437
58399: PUSH
58400: LD_INT 1
58402: ARRAY
58403: PUSH
58404: LD_INT 1
58406: ARRAY
58407: PUSH
58408: LD_STRING l
58410: EQUAL
58411: PUSH
58412: LD_VAR 0 1
58416: PPUSH
58417: CALL_OW 437
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PUSH
58426: LD_INT 4
58428: ARRAY
58429: PUSH
58430: LD_VAR 0 2
58434: EQUAL
58435: AND
58436: IFFALSE 58448
// result := true else
58438: LD_ADDR_VAR 0 3
58442: PUSH
58443: LD_INT 1
58445: ST_TO_ADDR
58446: GO 58456
// result := false ;
58448: LD_ADDR_VAR 0 3
58452: PUSH
58453: LD_INT 0
58455: ST_TO_ADDR
// end else
58456: GO 58466
// result := false ;
58458: LD_ADDR_VAR 0 3
58462: PUSH
58463: LD_INT 0
58465: ST_TO_ADDR
// end ;
58466: LD_VAR 0 3
58470: RET
// export function HealTarget ( sci ) ; begin
58471: LD_INT 0
58473: PPUSH
// if not sci then
58474: LD_VAR 0 1
58478: NOT
58479: IFFALSE 58483
// exit ;
58481: GO 58548
// result := 0 ;
58483: LD_ADDR_VAR 0 2
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// if GetTaskList ( sci ) then
58491: LD_VAR 0 1
58495: PPUSH
58496: CALL_OW 437
58500: IFFALSE 58548
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 437
58511: PUSH
58512: LD_INT 1
58514: ARRAY
58515: PUSH
58516: LD_INT 1
58518: ARRAY
58519: PUSH
58520: LD_STRING l
58522: EQUAL
58523: IFFALSE 58548
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58525: LD_ADDR_VAR 0 2
58529: PUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: CALL_OW 437
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PUSH
58544: LD_INT 4
58546: ARRAY
58547: ST_TO_ADDR
// end ;
58548: LD_VAR 0 2
58552: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58553: LD_INT 0
58555: PPUSH
58556: PPUSH
58557: PPUSH
58558: PPUSH
// if not base_units then
58559: LD_VAR 0 1
58563: NOT
58564: IFFALSE 58568
// exit ;
58566: GO 58655
// result := false ;
58568: LD_ADDR_VAR 0 2
58572: PUSH
58573: LD_INT 0
58575: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58576: LD_ADDR_VAR 0 5
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: LD_INT 21
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PPUSH
58596: CALL_OW 72
58600: ST_TO_ADDR
// if not tmp then
58601: LD_VAR 0 5
58605: NOT
58606: IFFALSE 58610
// exit ;
58608: GO 58655
// for i in tmp do
58610: LD_ADDR_VAR 0 3
58614: PUSH
58615: LD_VAR 0 5
58619: PUSH
58620: FOR_IN
58621: IFFALSE 58653
// begin result := EnemyInRange ( i , 22 ) ;
58623: LD_ADDR_VAR 0 2
58627: PUSH
58628: LD_VAR 0 3
58632: PPUSH
58633: LD_INT 22
58635: PPUSH
58636: CALL 56891 0 2
58640: ST_TO_ADDR
// if result then
58641: LD_VAR 0 2
58645: IFFALSE 58651
// exit ;
58647: POP
58648: POP
58649: GO 58655
// end ;
58651: GO 58620
58653: POP
58654: POP
// end ;
58655: LD_VAR 0 2
58659: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58660: LD_INT 0
58662: PPUSH
58663: PPUSH
// if not units then
58664: LD_VAR 0 1
58668: NOT
58669: IFFALSE 58673
// exit ;
58671: GO 58743
// result := [ ] ;
58673: LD_ADDR_VAR 0 3
58677: PUSH
58678: EMPTY
58679: ST_TO_ADDR
// for i in units do
58680: LD_ADDR_VAR 0 4
58684: PUSH
58685: LD_VAR 0 1
58689: PUSH
58690: FOR_IN
58691: IFFALSE 58741
// if GetTag ( i ) = tag then
58693: LD_VAR 0 4
58697: PPUSH
58698: CALL_OW 110
58702: PUSH
58703: LD_VAR 0 2
58707: EQUAL
58708: IFFALSE 58739
// result := Insert ( result , result + 1 , i ) ;
58710: LD_ADDR_VAR 0 3
58714: PUSH
58715: LD_VAR 0 3
58719: PPUSH
58720: LD_VAR 0 3
58724: PUSH
58725: LD_INT 1
58727: PLUS
58728: PPUSH
58729: LD_VAR 0 4
58733: PPUSH
58734: CALL_OW 2
58738: ST_TO_ADDR
58739: GO 58690
58741: POP
58742: POP
// end ;
58743: LD_VAR 0 3
58747: RET
// export function IsDriver ( un ) ; begin
58748: LD_INT 0
58750: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58751: LD_ADDR_VAR 0 2
58755: PUSH
58756: LD_VAR 0 1
58760: PUSH
58761: LD_INT 55
58763: PUSH
58764: EMPTY
58765: LIST
58766: PPUSH
58767: CALL_OW 69
58771: IN
58772: ST_TO_ADDR
// end ;
58773: LD_VAR 0 2
58777: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58778: LD_INT 0
58780: PPUSH
58781: PPUSH
// list := [ ] ;
58782: LD_ADDR_VAR 0 5
58786: PUSH
58787: EMPTY
58788: ST_TO_ADDR
// case d of 0 :
58789: LD_VAR 0 3
58793: PUSH
58794: LD_INT 0
58796: DOUBLE
58797: EQUAL
58798: IFTRUE 58802
58800: GO 58935
58802: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58803: LD_ADDR_VAR 0 5
58807: PUSH
58808: LD_VAR 0 1
58812: PUSH
58813: LD_INT 4
58815: MINUS
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: LD_INT 4
58824: MINUS
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_VAR 0 1
58838: PUSH
58839: LD_INT 3
58841: MINUS
58842: PUSH
58843: LD_VAR 0 2
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: PUSH
58856: LD_VAR 0 1
58860: PUSH
58861: LD_INT 4
58863: PLUS
58864: PUSH
58865: LD_VAR 0 2
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: PUSH
58878: LD_VAR 0 1
58882: PUSH
58883: LD_INT 3
58885: PLUS
58886: PUSH
58887: LD_VAR 0 2
58891: PUSH
58892: LD_INT 3
58894: PLUS
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: PUSH
58904: LD_VAR 0 1
58908: PUSH
58909: LD_VAR 0 2
58913: PUSH
58914: LD_INT 4
58916: PLUS
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// end ; 1 :
58933: GO 59633
58935: LD_INT 1
58937: DOUBLE
58938: EQUAL
58939: IFTRUE 58943
58941: GO 59076
58943: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58944: LD_ADDR_VAR 0 5
58948: PUSH
58949: LD_VAR 0 1
58953: PUSH
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 4
58961: MINUS
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: PUSH
58971: LD_VAR 0 1
58975: PUSH
58976: LD_INT 3
58978: MINUS
58979: PUSH
58980: LD_VAR 0 2
58984: PUSH
58985: LD_INT 3
58987: MINUS
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_VAR 0 1
59001: PUSH
59002: LD_INT 4
59004: MINUS
59005: PUSH
59006: LD_VAR 0 2
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: LIST
59018: PUSH
59019: LD_VAR 0 1
59023: PUSH
59024: LD_VAR 0 2
59028: PUSH
59029: LD_INT 3
59031: PLUS
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: PUSH
59041: LD_VAR 0 1
59045: PUSH
59046: LD_INT 4
59048: PLUS
59049: PUSH
59050: LD_VAR 0 2
59054: PUSH
59055: LD_INT 4
59057: PLUS
59058: PUSH
59059: LD_INT 5
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// end ; 2 :
59074: GO 59633
59076: LD_INT 2
59078: DOUBLE
59079: EQUAL
59080: IFTRUE 59084
59082: GO 59213
59084: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59085: LD_ADDR_VAR 0 5
59089: PUSH
59090: LD_VAR 0 1
59094: PUSH
59095: LD_VAR 0 2
59099: PUSH
59100: LD_INT 3
59102: MINUS
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: PUSH
59112: LD_VAR 0 1
59116: PUSH
59117: LD_INT 4
59119: PLUS
59120: PUSH
59121: LD_VAR 0 2
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: PUSH
59134: LD_VAR 0 1
59138: PUSH
59139: LD_VAR 0 2
59143: PUSH
59144: LD_INT 4
59146: PLUS
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: PUSH
59156: LD_VAR 0 1
59160: PUSH
59161: LD_INT 3
59163: MINUS
59164: PUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: PUSH
59178: LD_VAR 0 1
59182: PUSH
59183: LD_INT 4
59185: MINUS
59186: PUSH
59187: LD_VAR 0 2
59191: PUSH
59192: LD_INT 4
59194: MINUS
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: ST_TO_ADDR
// end ; 3 :
59211: GO 59633
59213: LD_INT 3
59215: DOUBLE
59216: EQUAL
59217: IFTRUE 59221
59219: GO 59354
59221: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59222: LD_ADDR_VAR 0 5
59226: PUSH
59227: LD_VAR 0 1
59231: PUSH
59232: LD_INT 3
59234: PLUS
59235: PUSH
59236: LD_VAR 0 2
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: PUSH
59249: LD_VAR 0 1
59253: PUSH
59254: LD_INT 4
59256: PLUS
59257: PUSH
59258: LD_VAR 0 2
59262: PUSH
59263: LD_INT 4
59265: PLUS
59266: PUSH
59267: LD_INT 5
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: PUSH
59275: LD_VAR 0 1
59279: PUSH
59280: LD_INT 4
59282: MINUS
59283: PUSH
59284: LD_VAR 0 2
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: PUSH
59297: LD_VAR 0 1
59301: PUSH
59302: LD_VAR 0 2
59306: PUSH
59307: LD_INT 4
59309: MINUS
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: PUSH
59319: LD_VAR 0 1
59323: PUSH
59324: LD_INT 3
59326: MINUS
59327: PUSH
59328: LD_VAR 0 2
59332: PUSH
59333: LD_INT 3
59335: MINUS
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: ST_TO_ADDR
// end ; 4 :
59352: GO 59633
59354: LD_INT 4
59356: DOUBLE
59357: EQUAL
59358: IFTRUE 59362
59360: GO 59495
59362: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59363: LD_ADDR_VAR 0 5
59367: PUSH
59368: LD_VAR 0 1
59372: PUSH
59373: LD_VAR 0 2
59377: PUSH
59378: LD_INT 4
59380: PLUS
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: PUSH
59390: LD_VAR 0 1
59394: PUSH
59395: LD_INT 3
59397: PLUS
59398: PUSH
59399: LD_VAR 0 2
59403: PUSH
59404: LD_INT 3
59406: PLUS
59407: PUSH
59408: LD_INT 5
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: LD_VAR 0 1
59420: PUSH
59421: LD_INT 4
59423: PLUS
59424: PUSH
59425: LD_VAR 0 2
59429: PUSH
59430: LD_INT 4
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: PUSH
59438: LD_VAR 0 1
59442: PUSH
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 3
59450: MINUS
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: PUSH
59460: LD_VAR 0 1
59464: PUSH
59465: LD_INT 4
59467: MINUS
59468: PUSH
59469: LD_VAR 0 2
59473: PUSH
59474: LD_INT 4
59476: MINUS
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: ST_TO_ADDR
// end ; 5 :
59493: GO 59633
59495: LD_INT 5
59497: DOUBLE
59498: EQUAL
59499: IFTRUE 59503
59501: GO 59632
59503: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_VAR 0 1
59513: PUSH
59514: LD_INT 4
59516: MINUS
59517: PUSH
59518: LD_VAR 0 2
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_VAR 0 1
59535: PUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_INT 4
59543: MINUS
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: LIST
59552: PUSH
59553: LD_VAR 0 1
59557: PUSH
59558: LD_INT 4
59560: PLUS
59561: PUSH
59562: LD_VAR 0 2
59566: PUSH
59567: LD_INT 4
59569: PLUS
59570: PUSH
59571: LD_INT 5
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: PUSH
59579: LD_VAR 0 1
59583: PUSH
59584: LD_INT 3
59586: PLUS
59587: PUSH
59588: LD_VAR 0 2
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: PUSH
59601: LD_VAR 0 1
59605: PUSH
59606: LD_VAR 0 2
59610: PUSH
59611: LD_INT 3
59613: PLUS
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: ST_TO_ADDR
// end ; end ;
59630: GO 59633
59632: POP
// result := list ;
59633: LD_ADDR_VAR 0 4
59637: PUSH
59638: LD_VAR 0 5
59642: ST_TO_ADDR
// end ;
59643: LD_VAR 0 4
59647: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59648: LD_INT 0
59650: PPUSH
59651: PPUSH
59652: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59653: LD_VAR 0 1
59657: NOT
59658: PUSH
59659: LD_VAR 0 2
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: IN
59682: NOT
59683: OR
59684: IFFALSE 59688
// exit ;
59686: GO 59780
// tmp := [ ] ;
59688: LD_ADDR_VAR 0 5
59692: PUSH
59693: EMPTY
59694: ST_TO_ADDR
// for i in units do
59695: LD_ADDR_VAR 0 4
59699: PUSH
59700: LD_VAR 0 1
59704: PUSH
59705: FOR_IN
59706: IFFALSE 59749
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59708: LD_ADDR_VAR 0 5
59712: PUSH
59713: LD_VAR 0 5
59717: PPUSH
59718: LD_VAR 0 5
59722: PUSH
59723: LD_INT 1
59725: PLUS
59726: PPUSH
59727: LD_VAR 0 4
59731: PPUSH
59732: LD_VAR 0 2
59736: PPUSH
59737: CALL_OW 259
59741: PPUSH
59742: CALL_OW 2
59746: ST_TO_ADDR
59747: GO 59705
59749: POP
59750: POP
// if not tmp then
59751: LD_VAR 0 5
59755: NOT
59756: IFFALSE 59760
// exit ;
59758: GO 59780
// result := SortListByListDesc ( units , tmp ) ;
59760: LD_ADDR_VAR 0 3
59764: PUSH
59765: LD_VAR 0 1
59769: PPUSH
59770: LD_VAR 0 5
59774: PPUSH
59775: CALL_OW 77
59779: ST_TO_ADDR
// end ;
59780: LD_VAR 0 3
59784: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59785: LD_INT 0
59787: PPUSH
59788: PPUSH
59789: PPUSH
// x := GetX ( building ) ;
59790: LD_ADDR_VAR 0 4
59794: PUSH
59795: LD_VAR 0 2
59799: PPUSH
59800: CALL_OW 250
59804: ST_TO_ADDR
// y := GetY ( building ) ;
59805: LD_ADDR_VAR 0 5
59809: PUSH
59810: LD_VAR 0 2
59814: PPUSH
59815: CALL_OW 251
59819: ST_TO_ADDR
// if GetTaskList ( unit ) then
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 437
59829: IFFALSE 59924
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59831: LD_STRING e
59833: PUSH
59834: LD_VAR 0 1
59838: PPUSH
59839: CALL_OW 437
59843: PUSH
59844: LD_INT 1
59846: ARRAY
59847: PUSH
59848: LD_INT 1
59850: ARRAY
59851: EQUAL
59852: PUSH
59853: LD_VAR 0 4
59857: PUSH
59858: LD_VAR 0 1
59862: PPUSH
59863: CALL_OW 437
59867: PUSH
59868: LD_INT 1
59870: ARRAY
59871: PUSH
59872: LD_INT 2
59874: ARRAY
59875: EQUAL
59876: AND
59877: PUSH
59878: LD_VAR 0 5
59882: PUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 437
59892: PUSH
59893: LD_INT 1
59895: ARRAY
59896: PUSH
59897: LD_INT 3
59899: ARRAY
59900: EQUAL
59901: AND
59902: IFFALSE 59914
// result := true else
59904: LD_ADDR_VAR 0 3
59908: PUSH
59909: LD_INT 1
59911: ST_TO_ADDR
59912: GO 59922
// result := false ;
59914: LD_ADDR_VAR 0 3
59918: PUSH
59919: LD_INT 0
59921: ST_TO_ADDR
// end else
59922: GO 59932
// result := false ;
59924: LD_ADDR_VAR 0 3
59928: PUSH
59929: LD_INT 0
59931: ST_TO_ADDR
// end ;
59932: LD_VAR 0 3
59936: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59937: LD_INT 0
59939: PPUSH
59940: PPUSH
59941: PPUSH
59942: PPUSH
// if not unit or not area then
59943: LD_VAR 0 1
59947: NOT
59948: PUSH
59949: LD_VAR 0 2
59953: NOT
59954: OR
59955: IFFALSE 59959
// exit ;
59957: GO 60123
// tmp := AreaToList ( area , i ) ;
59959: LD_ADDR_VAR 0 6
59963: PUSH
59964: LD_VAR 0 2
59968: PPUSH
59969: LD_VAR 0 5
59973: PPUSH
59974: CALL_OW 517
59978: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59979: LD_ADDR_VAR 0 5
59983: PUSH
59984: DOUBLE
59985: LD_INT 1
59987: DEC
59988: ST_TO_ADDR
59989: LD_VAR 0 6
59993: PUSH
59994: LD_INT 1
59996: ARRAY
59997: PUSH
59998: FOR_TO
59999: IFFALSE 60121
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60001: LD_ADDR_VAR 0 7
60005: PUSH
60006: LD_VAR 0 6
60010: PUSH
60011: LD_INT 1
60013: ARRAY
60014: PUSH
60015: LD_VAR 0 5
60019: ARRAY
60020: PUSH
60021: LD_VAR 0 6
60025: PUSH
60026: LD_INT 2
60028: ARRAY
60029: PUSH
60030: LD_VAR 0 5
60034: ARRAY
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60040: LD_VAR 0 7
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PPUSH
60049: LD_VAR 0 7
60053: PUSH
60054: LD_INT 2
60056: ARRAY
60057: PPUSH
60058: CALL_OW 428
60062: PUSH
60063: LD_INT 0
60065: EQUAL
60066: IFFALSE 60119
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60068: LD_VAR 0 1
60072: PPUSH
60073: LD_VAR 0 7
60077: PUSH
60078: LD_INT 1
60080: ARRAY
60081: PPUSH
60082: LD_VAR 0 7
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: PPUSH
60091: LD_VAR 0 3
60095: PPUSH
60096: CALL_OW 48
// result := IsPlaced ( unit ) ;
60100: LD_ADDR_VAR 0 4
60104: PUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 305
60114: ST_TO_ADDR
// exit ;
60115: POP
60116: POP
60117: GO 60123
// end ; end ;
60119: GO 59998
60121: POP
60122: POP
// end ;
60123: LD_VAR 0 4
60127: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60128: LD_INT 0
60130: PPUSH
60131: PPUSH
60132: PPUSH
// if not side or side > 8 then
60133: LD_VAR 0 1
60137: NOT
60138: PUSH
60139: LD_VAR 0 1
60143: PUSH
60144: LD_INT 8
60146: GREATER
60147: OR
60148: IFFALSE 60152
// exit ;
60150: GO 60339
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60152: LD_ADDR_VAR 0 4
60156: PUSH
60157: LD_INT 22
60159: PUSH
60160: LD_VAR 0 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 21
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PPUSH
60183: CALL_OW 69
60187: ST_TO_ADDR
// if not tmp then
60188: LD_VAR 0 4
60192: NOT
60193: IFFALSE 60197
// exit ;
60195: GO 60339
// enable_addtolog := true ;
60197: LD_ADDR_OWVAR 81
60201: PUSH
60202: LD_INT 1
60204: ST_TO_ADDR
// AddToLog ( [ ) ;
60205: LD_STRING [
60207: PPUSH
60208: CALL_OW 561
// for i in tmp do
60212: LD_ADDR_VAR 0 3
60216: PUSH
60217: LD_VAR 0 4
60221: PUSH
60222: FOR_IN
60223: IFFALSE 60330
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60225: LD_STRING [
60227: PUSH
60228: LD_VAR 0 3
60232: PPUSH
60233: CALL_OW 266
60237: STR
60238: PUSH
60239: LD_STRING , 
60241: STR
60242: PUSH
60243: LD_VAR 0 3
60247: PPUSH
60248: CALL_OW 250
60252: STR
60253: PUSH
60254: LD_STRING , 
60256: STR
60257: PUSH
60258: LD_VAR 0 3
60262: PPUSH
60263: CALL_OW 251
60267: STR
60268: PUSH
60269: LD_STRING , 
60271: STR
60272: PUSH
60273: LD_VAR 0 3
60277: PPUSH
60278: CALL_OW 254
60282: STR
60283: PUSH
60284: LD_STRING , 
60286: STR
60287: PUSH
60288: LD_VAR 0 3
60292: PPUSH
60293: LD_INT 1
60295: PPUSH
60296: CALL_OW 268
60300: STR
60301: PUSH
60302: LD_STRING , 
60304: STR
60305: PUSH
60306: LD_VAR 0 3
60310: PPUSH
60311: LD_INT 2
60313: PPUSH
60314: CALL_OW 268
60318: STR
60319: PUSH
60320: LD_STRING ],
60322: STR
60323: PPUSH
60324: CALL_OW 561
// end ;
60328: GO 60222
60330: POP
60331: POP
// AddToLog ( ]; ) ;
60332: LD_STRING ];
60334: PPUSH
60335: CALL_OW 561
// end ;
60339: LD_VAR 0 2
60343: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60344: LD_INT 0
60346: PPUSH
60347: PPUSH
60348: PPUSH
60349: PPUSH
60350: PPUSH
// if not area or not rate or not max then
60351: LD_VAR 0 1
60355: NOT
60356: PUSH
60357: LD_VAR 0 2
60361: NOT
60362: OR
60363: PUSH
60364: LD_VAR 0 4
60368: NOT
60369: OR
60370: IFFALSE 60374
// exit ;
60372: GO 60566
// while 1 do
60374: LD_INT 1
60376: IFFALSE 60566
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60378: LD_ADDR_VAR 0 9
60382: PUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: LD_INT 1
60390: PPUSH
60391: CALL_OW 287
60395: PUSH
60396: LD_INT 10
60398: MUL
60399: ST_TO_ADDR
// r := rate / 10 ;
60400: LD_ADDR_VAR 0 7
60404: PUSH
60405: LD_VAR 0 2
60409: PUSH
60410: LD_INT 10
60412: DIVREAL
60413: ST_TO_ADDR
// time := 1 1$00 ;
60414: LD_ADDR_VAR 0 8
60418: PUSH
60419: LD_INT 2100
60421: ST_TO_ADDR
// if amount < min then
60422: LD_VAR 0 9
60426: PUSH
60427: LD_VAR 0 3
60431: LESS
60432: IFFALSE 60450
// r := r * 2 else
60434: LD_ADDR_VAR 0 7
60438: PUSH
60439: LD_VAR 0 7
60443: PUSH
60444: LD_INT 2
60446: MUL
60447: ST_TO_ADDR
60448: GO 60476
// if amount > max then
60450: LD_VAR 0 9
60454: PUSH
60455: LD_VAR 0 4
60459: GREATER
60460: IFFALSE 60476
// r := r / 2 ;
60462: LD_ADDR_VAR 0 7
60466: PUSH
60467: LD_VAR 0 7
60471: PUSH
60472: LD_INT 2
60474: DIVREAL
60475: ST_TO_ADDR
// time := time / r ;
60476: LD_ADDR_VAR 0 8
60480: PUSH
60481: LD_VAR 0 8
60485: PUSH
60486: LD_VAR 0 7
60490: DIVREAL
60491: ST_TO_ADDR
// if time < 0 then
60492: LD_VAR 0 8
60496: PUSH
60497: LD_INT 0
60499: LESS
60500: IFFALSE 60517
// time := time * - 1 ;
60502: LD_ADDR_VAR 0 8
60506: PUSH
60507: LD_VAR 0 8
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: MUL
60516: ST_TO_ADDR
// wait ( time ) ;
60517: LD_VAR 0 8
60521: PPUSH
60522: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60526: LD_INT 35
60528: PPUSH
60529: LD_INT 875
60531: PPUSH
60532: CALL_OW 12
60536: PPUSH
60537: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60541: LD_INT 1
60543: PPUSH
60544: LD_INT 5
60546: PPUSH
60547: CALL_OW 12
60551: PPUSH
60552: LD_VAR 0 1
60556: PPUSH
60557: LD_INT 1
60559: PPUSH
60560: CALL_OW 55
// end ;
60564: GO 60374
// end ;
60566: LD_VAR 0 5
60570: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60571: LD_INT 0
60573: PPUSH
60574: PPUSH
60575: PPUSH
60576: PPUSH
60577: PPUSH
60578: PPUSH
60579: PPUSH
60580: PPUSH
// if not turrets or not factories then
60581: LD_VAR 0 1
60585: NOT
60586: PUSH
60587: LD_VAR 0 2
60591: NOT
60592: OR
60593: IFFALSE 60597
// exit ;
60595: GO 60904
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60597: LD_ADDR_VAR 0 10
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: LD_INT 6
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: PUSH
60625: LD_INT 5
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 24
60639: PUSH
60640: LD_INT 25
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 23
60649: PUSH
60650: LD_INT 27
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 42
60663: PUSH
60664: LD_INT 43
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 44
60673: PUSH
60674: LD_INT 46
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 45
60683: PUSH
60684: LD_INT 47
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: ST_TO_ADDR
// result := [ ] ;
60701: LD_ADDR_VAR 0 3
60705: PUSH
60706: EMPTY
60707: ST_TO_ADDR
// for i in turrets do
60708: LD_ADDR_VAR 0 4
60712: PUSH
60713: LD_VAR 0 1
60717: PUSH
60718: FOR_IN
60719: IFFALSE 60902
// begin nat := GetNation ( i ) ;
60721: LD_ADDR_VAR 0 7
60725: PUSH
60726: LD_VAR 0 4
60730: PPUSH
60731: CALL_OW 248
60735: ST_TO_ADDR
// weapon := 0 ;
60736: LD_ADDR_VAR 0 8
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// if not nat then
60744: LD_VAR 0 7
60748: NOT
60749: IFFALSE 60753
// continue ;
60751: GO 60718
// for j in list [ nat ] do
60753: LD_ADDR_VAR 0 5
60757: PUSH
60758: LD_VAR 0 10
60762: PUSH
60763: LD_VAR 0 7
60767: ARRAY
60768: PUSH
60769: FOR_IN
60770: IFFALSE 60811
// if GetBWeapon ( i ) = j [ 1 ] then
60772: LD_VAR 0 4
60776: PPUSH
60777: CALL_OW 269
60781: PUSH
60782: LD_VAR 0 5
60786: PUSH
60787: LD_INT 1
60789: ARRAY
60790: EQUAL
60791: IFFALSE 60809
// begin weapon := j [ 2 ] ;
60793: LD_ADDR_VAR 0 8
60797: PUSH
60798: LD_VAR 0 5
60802: PUSH
60803: LD_INT 2
60805: ARRAY
60806: ST_TO_ADDR
// break ;
60807: GO 60811
// end ;
60809: GO 60769
60811: POP
60812: POP
// if not weapon then
60813: LD_VAR 0 8
60817: NOT
60818: IFFALSE 60822
// continue ;
60820: GO 60718
// for k in factories do
60822: LD_ADDR_VAR 0 6
60826: PUSH
60827: LD_VAR 0 2
60831: PUSH
60832: FOR_IN
60833: IFFALSE 60898
// begin weapons := AvailableWeaponList ( k ) ;
60835: LD_ADDR_VAR 0 9
60839: PUSH
60840: LD_VAR 0 6
60844: PPUSH
60845: CALL_OW 478
60849: ST_TO_ADDR
// if not weapons then
60850: LD_VAR 0 9
60854: NOT
60855: IFFALSE 60859
// continue ;
60857: GO 60832
// if weapon in weapons then
60859: LD_VAR 0 8
60863: PUSH
60864: LD_VAR 0 9
60868: IN
60869: IFFALSE 60896
// begin result := [ i , weapon ] ;
60871: LD_ADDR_VAR 0 3
60875: PUSH
60876: LD_VAR 0 4
60880: PUSH
60881: LD_VAR 0 8
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// exit ;
60890: POP
60891: POP
60892: POP
60893: POP
60894: GO 60904
// end ; end ;
60896: GO 60832
60898: POP
60899: POP
// end ;
60900: GO 60718
60902: POP
60903: POP
// end ;
60904: LD_VAR 0 3
60908: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60909: LD_INT 0
60911: PPUSH
// if not side or side > 8 then
60912: LD_VAR 0 3
60916: NOT
60917: PUSH
60918: LD_VAR 0 3
60922: PUSH
60923: LD_INT 8
60925: GREATER
60926: OR
60927: IFFALSE 60931
// exit ;
60929: GO 60990
// if not range then
60931: LD_VAR 0 4
60935: NOT
60936: IFFALSE 60947
// range := - 12 ;
60938: LD_ADDR_VAR 0 4
60942: PUSH
60943: LD_INT 12
60945: NEG
60946: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60947: LD_VAR 0 1
60951: PPUSH
60952: LD_VAR 0 2
60956: PPUSH
60957: LD_VAR 0 3
60961: PPUSH
60962: LD_VAR 0 4
60966: PPUSH
60967: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60971: LD_VAR 0 1
60975: PPUSH
60976: LD_VAR 0 2
60980: PPUSH
60981: LD_VAR 0 3
60985: PPUSH
60986: CALL_OW 331
// end ;
60990: LD_VAR 0 5
60994: RET
// export function Video ( mode ) ; begin
60995: LD_INT 0
60997: PPUSH
// ingame_video = mode ;
60998: LD_ADDR_OWVAR 52
61002: PUSH
61003: LD_VAR 0 1
61007: ST_TO_ADDR
// interface_hidden = mode ;
61008: LD_ADDR_OWVAR 54
61012: PUSH
61013: LD_VAR 0 1
61017: ST_TO_ADDR
// end ;
61018: LD_VAR 0 2
61022: RET
// export function Join ( array , element ) ; begin
61023: LD_INT 0
61025: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61026: LD_ADDR_VAR 0 3
61030: PUSH
61031: LD_VAR 0 1
61035: PPUSH
61036: LD_VAR 0 1
61040: PUSH
61041: LD_INT 1
61043: PLUS
61044: PPUSH
61045: LD_VAR 0 2
61049: PPUSH
61050: CALL_OW 1
61054: ST_TO_ADDR
// end ;
61055: LD_VAR 0 3
61059: RET
// export function JoinUnion ( array , element ) ; begin
61060: LD_INT 0
61062: PPUSH
// result := array union element ;
61063: LD_ADDR_VAR 0 3
61067: PUSH
61068: LD_VAR 0 1
61072: PUSH
61073: LD_VAR 0 2
61077: UNION
61078: ST_TO_ADDR
// end ;
61079: LD_VAR 0 3
61083: RET
// export function GetBehemoths ( side ) ; begin
61084: LD_INT 0
61086: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61087: LD_ADDR_VAR 0 2
61091: PUSH
61092: LD_INT 22
61094: PUSH
61095: LD_VAR 0 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 31
61106: PUSH
61107: LD_INT 25
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PPUSH
61118: CALL_OW 69
61122: ST_TO_ADDR
// end ;
61123: LD_VAR 0 2
61127: RET
// export function Shuffle ( array ) ; var i , index ; begin
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
61132: PPUSH
// result := [ ] ;
61133: LD_ADDR_VAR 0 2
61137: PUSH
61138: EMPTY
61139: ST_TO_ADDR
// if not array then
61140: LD_VAR 0 1
61144: NOT
61145: IFFALSE 61149
// exit ;
61147: GO 61248
// Randomize ;
61149: CALL_OW 10
// for i = array downto 1 do
61153: LD_ADDR_VAR 0 3
61157: PUSH
61158: DOUBLE
61159: LD_VAR 0 1
61163: INC
61164: ST_TO_ADDR
61165: LD_INT 1
61167: PUSH
61168: FOR_DOWNTO
61169: IFFALSE 61246
// begin index := rand ( 1 , array ) ;
61171: LD_ADDR_VAR 0 4
61175: PUSH
61176: LD_INT 1
61178: PPUSH
61179: LD_VAR 0 1
61183: PPUSH
61184: CALL_OW 12
61188: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61189: LD_ADDR_VAR 0 2
61193: PUSH
61194: LD_VAR 0 2
61198: PPUSH
61199: LD_VAR 0 2
61203: PUSH
61204: LD_INT 1
61206: PLUS
61207: PPUSH
61208: LD_VAR 0 1
61212: PUSH
61213: LD_VAR 0 4
61217: ARRAY
61218: PPUSH
61219: CALL_OW 2
61223: ST_TO_ADDR
// array := Delete ( array , index ) ;
61224: LD_ADDR_VAR 0 1
61228: PUSH
61229: LD_VAR 0 1
61233: PPUSH
61234: LD_VAR 0 4
61238: PPUSH
61239: CALL_OW 3
61243: ST_TO_ADDR
// end ;
61244: GO 61168
61246: POP
61247: POP
// end ;
61248: LD_VAR 0 2
61252: RET
// export function GetBaseMaterials ( base ) ; begin
61253: LD_INT 0
61255: PPUSH
// result := [ 0 , 0 , 0 ] ;
61256: LD_ADDR_VAR 0 2
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: ST_TO_ADDR
// if not base then
61275: LD_VAR 0 1
61279: NOT
61280: IFFALSE 61284
// exit ;
61282: GO 61333
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61284: LD_ADDR_VAR 0 2
61288: PUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: LD_INT 1
61296: PPUSH
61297: CALL_OW 275
61301: PUSH
61302: LD_VAR 0 1
61306: PPUSH
61307: LD_INT 2
61309: PPUSH
61310: CALL_OW 275
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_INT 3
61322: PPUSH
61323: CALL_OW 275
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: ST_TO_ADDR
// end ;
61333: LD_VAR 0 2
61337: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61338: LD_INT 0
61340: PPUSH
61341: PPUSH
// result := array ;
61342: LD_ADDR_VAR 0 3
61346: PUSH
61347: LD_VAR 0 1
61351: ST_TO_ADDR
// if size > 0 then
61352: LD_VAR 0 2
61356: PUSH
61357: LD_INT 0
61359: GREATER
61360: IFFALSE 61406
// for i := array downto size do
61362: LD_ADDR_VAR 0 4
61366: PUSH
61367: DOUBLE
61368: LD_VAR 0 1
61372: INC
61373: ST_TO_ADDR
61374: LD_VAR 0 2
61378: PUSH
61379: FOR_DOWNTO
61380: IFFALSE 61404
// result := Delete ( result , result ) ;
61382: LD_ADDR_VAR 0 3
61386: PUSH
61387: LD_VAR 0 3
61391: PPUSH
61392: LD_VAR 0 3
61396: PPUSH
61397: CALL_OW 3
61401: ST_TO_ADDR
61402: GO 61379
61404: POP
61405: POP
// end ;
61406: LD_VAR 0 3
61410: RET
// export function ComExit ( unit ) ; var tmp ; begin
61411: LD_INT 0
61413: PPUSH
61414: PPUSH
// if not IsInUnit ( unit ) then
61415: LD_VAR 0 1
61419: PPUSH
61420: CALL_OW 310
61424: NOT
61425: IFFALSE 61429
// exit ;
61427: GO 61489
// tmp := IsInUnit ( unit ) ;
61429: LD_ADDR_VAR 0 3
61433: PUSH
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 310
61443: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61444: LD_VAR 0 3
61448: PPUSH
61449: CALL_OW 247
61453: PUSH
61454: LD_INT 2
61456: EQUAL
61457: IFFALSE 61470
// ComExitVehicle ( unit ) else
61459: LD_VAR 0 1
61463: PPUSH
61464: CALL_OW 121
61468: GO 61479
// ComExitBuilding ( unit ) ;
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL_OW 122
// result := tmp ;
61479: LD_ADDR_VAR 0 2
61483: PUSH
61484: LD_VAR 0 3
61488: ST_TO_ADDR
// end ;
61489: LD_VAR 0 2
61493: RET
// export function ResetHc ; begin
61494: LD_INT 0
61496: PPUSH
// InitHc ;
61497: CALL_OW 19
// hc_importance := 0 ;
61501: LD_ADDR_OWVAR 32
61505: PUSH
61506: LD_INT 0
61508: ST_TO_ADDR
// end ;
61509: LD_VAR 0 1
61513: RET
