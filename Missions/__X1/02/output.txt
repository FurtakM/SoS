// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 836 0 0
// PrepareArabian ;
  27: CALL 12293 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4893 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: IFTRUE 779
 772: PUSH
 773: LD_VAR 0 2
 777: NOT
 778: OR
 779: IFFALSE 783
// exit ;
 781: GO 831
// if not See ( GetSide ( observer ) , unit ) then
 783: LD_VAR 0 1
 787: PPUSH
 788: CALL_OW 255
 792: PPUSH
 793: LD_VAR 0 2
 797: PPUSH
 798: CALL_OW 292
 802: NOT
 803: IFFALSE 807
// exit ;
 805: GO 831
// result := GetDistUnits ( observer , unit ) < 12 ;
 807: LD_ADDR_VAR 0 3
 811: PUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_VAR 0 2
 821: PPUSH
 822: CALL_OW 296
 826: PUSH
 827: LD_INT 12
 829: LESS
 830: ST_TO_ADDR
// end ; end_of_file
 831: LD_VAR 0 3
 835: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
// usForces := [ ] ;
 844: LD_ADDR_EXP 21
 848: PUSH
 849: EMPTY
 850: ST_TO_ADDR
// usSci := [ ] ;
 851: LD_ADDR_EXP 22
 855: PUSH
 856: EMPTY
 857: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_STRING Delta
 863: PPUSH
 864: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 400
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 886: LD_INT 1
 888: PPUSH
 889: CALL_OW 274
 893: PPUSH
 894: LD_INT 2
 896: PPUSH
 897: LD_INT 80
 899: PPUSH
 900: CALL_OW 277
// uc_side := 1 ;
 904: LD_ADDR_OWVAR 20
 908: PUSH
 909: LD_INT 1
 911: ST_TO_ADDR
// uc_nation := 1 ;
 912: LD_ADDR_OWVAR 21
 916: PUSH
 917: LD_INT 1
 919: ST_TO_ADDR
// InitHc ;
 920: CALL_OW 19
// hc_importance := 0 ;
 924: LD_ADDR_OWVAR 32
 928: PUSH
 929: LD_INT 0
 931: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 932: LD_ADDR_EXP 20
 936: PUSH
 937: LD_STRING Lynch
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: LD_STRING 
 945: PPUSH
 946: CALL 35951 0 3
 950: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 951: LD_ADDR_EXP 19
 955: PUSH
 956: LD_STRING Gladstone
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: LD_STRING 
 964: PPUSH
 965: CALL 35951 0 3
 969: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 970: LD_EXP 20
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 982: LD_EXP 19
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 1
1006: PUSH
1007: LD_INT 2
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: LD_OWVAR 67
1026: ARRAY
1027: PUSH
1028: FOR_TO
1029: IFFALSE 1079
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1031: LD_INT 0
1033: PPUSH
1034: LD_INT 2
1036: PPUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PPUSH
1061: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1065: CALL_OW 44
1069: PPUSH
1070: LD_INT 1
1072: PPUSH
1073: CALL_OW 52
// end ;
1077: GO 1028
1079: POP
1080: POP
// for i := 1 to 7 - Difficulty do
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: DOUBLE
1087: LD_INT 1
1089: DEC
1090: ST_TO_ADDR
1091: LD_INT 7
1093: PUSH
1094: LD_OWVAR 67
1098: MINUS
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1190
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 2
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_OWVAR 67
1131: ARRAY
1132: PPUSH
1133: CALL_OW 380
// un := CreateHuman ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: CALL_OW 44
1146: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1147: LD_VAR 0 3
1151: PPUSH
1152: LD_INT 3
1154: PPUSH
1155: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1159: LD_ADDR_EXP 22
1163: PUSH
1164: LD_EXP 22
1168: PPUSH
1169: LD_EXP 22
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: PPUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: CALL_OW 1
1187: ST_TO_ADDR
// end ;
1188: GO 1100
1190: POP
1191: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1192: LD_ADDR_VAR 0 6
1196: PUSH
1197: LD_INT 22
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 4
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PPUSH
1221: CALL_OW 69
1225: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_INT 3
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 2
1244: PUSH
1245: LD_INT 2
1247: PUSH
1248: LD_INT 3
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: LD_OWVAR 67
1261: ARRAY
1262: PLUS
1263: PUSH
1264: FOR_TO
1265: IFFALSE 1347
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1267: LD_INT 0
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 1
1275: PUSH
1276: LD_INT 2
1278: PUSH
1279: LD_INT 3
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_OWVAR 67
1295: ARRAY
1296: PPUSH
1297: CALL_OW 380
// un := CreateHuman ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 44
1310: ST_TO_ADDR
// usForces := usForces ^ un ;
1311: LD_ADDR_EXP 21
1315: PUSH
1316: LD_EXP 21
1320: PUSH
1321: LD_VAR 0 3
1325: ADD
1326: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_VAR 0 6
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PPUSH
1341: CALL_OW 52
// end ;
1345: GO 1264
1347: POP
1348: POP
// if Difficulty > 1 then
1349: LD_OWVAR 67
1353: PUSH
1354: LD_INT 1
1356: GREATER
1357: IFFALSE 1456
// begin for i := 1 to Difficulty do
1359: LD_ADDR_VAR 0 2
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_OWVAR 67
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1454
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1377: LD_INT 0
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 1
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: LD_INT 2
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_OWVAR 67
1405: ARRAY
1406: PPUSH
1407: CALL_OW 380
// un := CreateHuman ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: CALL_OW 44
1420: ST_TO_ADDR
// usForces := usForces ^ un ;
1421: LD_ADDR_EXP 21
1425: PUSH
1426: LD_EXP 21
1430: PUSH
1431: LD_VAR 0 3
1435: ADD
1436: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1437: LD_VAR 0 3
1441: PPUSH
1442: LD_INT 9
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// end ;
1452: GO 1374
1454: POP
1455: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1456: LD_INT 1
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 2
1467: PPUSH
1468: LD_INT 1
1470: PPUSH
1471: LD_INT 2
1473: PPUSH
1474: LD_INT 100
1476: PPUSH
1477: CALL 241 0 7
// veh := CreateVehicle ;
1481: LD_ADDR_VAR 0 4
1485: PUSH
1486: CALL_OW 45
1490: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1491: LD_VAR 0 4
1495: PPUSH
1496: LD_INT 2
1498: PPUSH
1499: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_INT 43
1510: PPUSH
1511: LD_INT 24
1513: PPUSH
1514: LD_INT 0
1516: PPUSH
1517: CALL_OW 48
// end ;
1521: LD_VAR 0 1
1525: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
// if not usSci then
1534: LD_EXP 22
1538: NOT
1539: IFFALSE 1543
// exit ;
1541: GO 1717
// xy := AreaToList ( tameArea , 0 ) ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: LD_INT 5
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 517
1558: ST_TO_ADDR
// for i in usSci do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 22
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1715
// begin k := rand ( 1 , xy [ 1 ] ) ;
1572: LD_ADDR_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_VAR 0 6
1584: PUSH
1585: LD_INT 1
1587: ARRAY
1588: PPUSH
1589: CALL_OW 12
1593: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1594: LD_VAR 0 2
1598: PPUSH
1599: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1603: LD_VAR 0 2
1607: PPUSH
1608: LD_VAR 0 6
1612: PUSH
1613: LD_INT 1
1615: ARRAY
1616: PUSH
1617: LD_VAR 0 4
1621: ARRAY
1622: PPUSH
1623: LD_VAR 0 6
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PUSH
1632: LD_VAR 0 4
1636: ARRAY
1637: PPUSH
1638: CALL_OW 171
// for j := 1 to 2 do
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: DOUBLE
1648: LD_INT 1
1650: DEC
1651: ST_TO_ADDR
1652: LD_INT 2
1654: PUSH
1655: FOR_TO
1656: IFFALSE 1711
// begin tmp := Delete ( xy [ j ] , k ) ;
1658: LD_ADDR_VAR 0 5
1662: PUSH
1663: LD_VAR 0 6
1667: PUSH
1668: LD_VAR 0 3
1672: ARRAY
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL_OW 3
1683: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1684: LD_ADDR_VAR 0 6
1688: PUSH
1689: LD_VAR 0 6
1693: PPUSH
1694: LD_VAR 0 3
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL_OW 1
1708: ST_TO_ADDR
// end ;
1709: GO 1655
1711: POP
1712: POP
// end ;
1713: GO 1569
1715: POP
1716: POP
// end ;
1717: LD_VAR 0 1
1721: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1722: LD_EXP 4
1726: IFFALSE 1734
1728: PUSH
1729: LD_EXP 22
1733: AND
1734: IFFALSE 1743
1736: PUSH
1737: LD_EXP 10
1741: NOT
1742: AND
1743: IFFALSE 1775
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 25
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: AND
1775: IFFALSE 2285
1777: GO 1779
1779: DISABLE
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
// begin enable ;
1787: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1788: LD_EXP 22
1792: PPUSH
1793: LD_INT 2
1795: PUSH
1796: LD_INT 60
1798: PUSH
1799: EMPTY
1800: LIST
1801: PUSH
1802: LD_INT 54
1804: PUSH
1805: EMPTY
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 72
1817: IFFALSE 1821
// exit ;
1819: GO 2285
// for i in usSci do
1821: LD_ADDR_VAR 0 1
1825: PUSH
1826: LD_EXP 22
1830: PUSH
1831: FOR_IN
1832: IFFALSE 2283
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1834: LD_VAR 0 1
1838: PPUSH
1839: CALL_OW 314
1843: NOT
1844: IFFALSE 1861
1846: PUSH
1847: LD_VAR 0 1
1851: PPUSH
1852: CALL_OW 256
1856: PUSH
1857: LD_INT 1000
1859: EQUAL
1860: AND
1861: IFFALSE 2068
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1863: LD_ADDR_VAR 0 5
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 0
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 12
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: PPUSH
1897: LD_VAR 0 1
1901: PPUSH
1902: CALL_OW 74
1906: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1907: LD_VAR 0 1
1911: PPUSH
1912: LD_VAR 0 5
1916: PPUSH
1917: CALL_OW 296
1921: PUSH
1922: LD_INT 10
1924: LESS
1925: IFFALSE 1958
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 250
1941: PPUSH
1942: LD_VAR 0 5
1946: PPUSH
1947: CALL_OW 251
1951: PPUSH
1952: CALL_OW 131
1956: GO 2068
// begin d := rand ( 0 , 5 ) ;
1958: LD_ADDR_VAR 0 4
1962: PUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 5
1968: PPUSH
1969: CALL_OW 12
1973: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_VAR 0 1
1983: PPUSH
1984: CALL_OW 250
1988: PPUSH
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 272
2001: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 1
2011: PPUSH
2012: CALL_OW 251
2016: PPUSH
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_INT 3
2024: PPUSH
2025: CALL_OW 273
2029: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 488
2044: NOT
2045: IFFALSE 2049
// continue ;
2047: GO 1831
// ComMoveXY ( i , x , y ) ;
2049: LD_VAR 0 1
2053: PPUSH
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 3
2063: PPUSH
2064: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 256
2077: PUSH
2078: LD_INT 900
2080: LESS
2081: IFFALSE 2104
2083: PUSH
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 37
2091: PPUSH
2092: LD_INT 23
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 10
2102: GREATER
2103: AND
2104: IFFALSE 2194
// begin SetTag ( Gladstone , 1 ) ;
2106: LD_EXP 19
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 109
// if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2118: LD_EXP 19
2122: PPUSH
2123: CALL_OW 302
2127: IFFALSE 2140
2129: PUSH
2130: LD_EXP 19
2134: PPUSH
2135: CALL_OW 310
2139: AND
2140: IFFALSE 2151
// ComExitBuilding ( Gladstone ) ;
2142: LD_EXP 19
2146: PPUSH
2147: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2151: LD_EXP 19
2155: PPUSH
2156: LD_VAR 0 1
2160: PPUSH
2161: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2165: LD_EXP 19
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2177: LD_VAR 0 1
2181: PPUSH
2182: LD_INT 37
2184: PPUSH
2185: LD_INT 23
2187: PPUSH
2188: CALL_OW 111
// end else
2192: GO 2281
// if GetLives ( i ) = 1000 then
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 256
2203: PUSH
2204: LD_INT 1000
2206: EQUAL
2207: IFFALSE 2281
// begin if SideShoot ( i ) = 2 then
2209: LD_VAR 0 1
2213: PPUSH
2214: CALL_OW 503
2218: PUSH
2219: LD_INT 2
2221: EQUAL
2222: IFFALSE 2269
// begin if not usAlert then
2224: LD_EXP 10
2228: NOT
2229: IFFALSE 2239
// usAlert := true ;
2231: LD_ADDR_EXP 10
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2239: LD_VAR 0 1
2243: PPUSH
2244: LD_INT 3
2246: PPUSH
2247: CALL_OW 180
// usSci := usSci diff i ;
2251: LD_ADDR_EXP 22
2255: PUSH
2256: LD_EXP 22
2260: PUSH
2261: LD_VAR 0 1
2265: DIFF
2266: ST_TO_ADDR
// end else
2267: GO 2281
// ComMoveToArea ( i , tameArea ) ;
2269: LD_VAR 0 1
2273: PPUSH
2274: LD_INT 5
2276: PPUSH
2277: CALL_OW 113
// end ; end ;
2281: GO 1831
2283: POP
2284: POP
// end ;
2285: PPOPN 5
2287: END
// every 0 0$1 trigger GetTag ( Gladstone ) = 1 and not IsInUnit ( Gladstone ) and not usAlert do
2288: LD_EXP 19
2292: PPUSH
2293: CALL_OW 110
2297: PUSH
2298: LD_INT 1
2300: EQUAL
2301: IFFALSE 2315
2303: PUSH
2304: LD_EXP 19
2308: PPUSH
2309: CALL_OW 310
2313: NOT
2314: AND
2315: IFFALSE 2324
2317: PUSH
2318: LD_EXP 10
2322: NOT
2323: AND
2324: IFFALSE 2341
2326: GO 2328
2328: DISABLE
// ComEnterUnit ( Gladstone , usLab ) ;
2329: LD_EXP 19
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 120
2341: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2342: LD_EXP 10
2346: NOT
2347: IFFALSE 2432
2349: PUSH
2350: LD_INT 22
2352: PUSH
2353: LD_INT 1
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: LD_INT 21
2362: PUSH
2363: LD_INT 3
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: LD_INT 57
2375: PUSH
2376: EMPTY
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 24
2388: PUSH
2389: LD_INT 999
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 69
2410: IFTRUE 2431
2412: PUSH
2413: LD_INT 7
2415: PPUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 2
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PPUSH
2426: CALL_OW 70
2430: OR
2431: AND
2432: IFFALSE 2445
2434: GO 2436
2436: DISABLE
// usAlert := true ;
2437: LD_ADDR_EXP 10
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
2445: END
// every 0 0$1 trigger FilterUnitsExceptArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i ;
2446: LD_INT 7
2448: PPUSH
2449: LD_INT 22
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 25
2461: PUSH
2462: LD_INT 2
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 71
2477: IFFALSE 2545
2479: GO 2481
2481: DISABLE
2482: LD_INT 0
2484: PPUSH
// begin for i in FilterUnitsExceptArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
2485: LD_ADDR_VAR 0 1
2489: PUSH
2490: LD_INT 7
2492: PPUSH
2493: LD_INT 22
2495: PUSH
2496: LD_INT 1
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 25
2505: PUSH
2506: LD_INT 2
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL_OW 71
2521: PUSH
2522: FOR_IN
2523: IFFALSE 2542
// ComMoveXY ( i , 37 , 23 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_INT 37
2532: PPUSH
2533: LD_INT 23
2535: PPUSH
2536: CALL_OW 111
2540: GO 2522
2542: POP
2543: POP
// enable ;
2544: ENABLE
// end ;
2545: PPOPN 1
2547: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2548: LD_EXP 10
2552: IFFALSE 2901
2554: GO 2556
2556: DISABLE
2557: LD_INT 0
2559: PPUSH
2560: PPUSH
2561: PPUSH
// begin usActiveDefend := true ;
2562: LD_ADDR_EXP 11
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// if not usForces then
2570: LD_EXP 21
2574: NOT
2575: IFFALSE 2579
// exit ;
2577: GO 2901
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2579: LD_ADDR_VAR 0 3
2583: PUSH
2584: LD_INT 22
2586: PUSH
2587: LD_INT 1
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 30
2596: PUSH
2597: LD_INT 4
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2613: LD_ADDR_VAR 0 2
2617: PUSH
2618: LD_INT 22
2620: PUSH
2621: LD_INT 1
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 31
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PPUSH
2642: CALL_OW 69
2646: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2647: LD_EXP 20
2651: PPUSH
2652: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2656: LD_EXP 20
2660: PPUSH
2661: LD_VAR 0 3
2665: PUSH
2666: LD_INT 1
2668: ARRAY
2669: PPUSH
2670: CALL_OW 180
// if IsOk ( Gladstone ) then
2674: LD_EXP 19
2678: PPUSH
2679: CALL_OW 302
2683: IFFALSE 2724
// begin ComExitBuilding ( Gladstone ) ;
2685: LD_EXP 19
2689: PPUSH
2690: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2694: LD_EXP 19
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 1
2706: ARRAY
2707: PPUSH
2708: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2712: LD_EXP 19
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2724: LD_EXP 21
2728: PUSH
2729: LD_INT 1
2731: ARRAY
2732: PPUSH
2733: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2737: LD_EXP 21
2741: PUSH
2742: LD_INT 1
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 2
2750: PUSH
2751: LD_INT 1
2753: ARRAY
2754: PPUSH
2755: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2759: LD_EXP 21
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PPUSH
2768: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2772: LD_EXP 21
2776: PUSH
2777: LD_INT 2
2779: ARRAY
2780: PPUSH
2781: LD_INT 22
2783: PUSH
2784: LD_INT 1
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 30
2793: PUSH
2794: LD_INT 32
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: PUSH
2810: LD_INT 1
2812: ARRAY
2813: PPUSH
2814: CALL_OW 180
// if b > 1 and usForces > 2 then
2818: LD_VAR 0 2
2822: PUSH
2823: LD_INT 1
2825: GREATER
2826: IFFALSE 2838
2828: PUSH
2829: LD_EXP 21
2833: PUSH
2834: LD_INT 2
2836: GREATER
2837: AND
2838: IFFALSE 2901
// begin repeat wait ( 0 0$1 ) ;
2840: LD_INT 35
2842: PPUSH
2843: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2847: LD_VAR 0 2
2851: PUSH
2852: LD_INT 2
2854: ARRAY
2855: PPUSH
2856: CALL_OW 461
2860: PUSH
2861: LD_INT 1
2863: NONEQUAL
2864: IFFALSE 2840
// ComExitBuilding ( usForces [ 3 ] ) ;
2866: LD_EXP 21
2870: PUSH
2871: LD_INT 3
2873: ARRAY
2874: PPUSH
2875: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2879: LD_EXP 21
2883: PUSH
2884: LD_INT 3
2886: ARRAY
2887: PPUSH
2888: LD_VAR 0 2
2892: PUSH
2893: LD_INT 2
2895: ARRAY
2896: PPUSH
2897: CALL_OW 180
// end ; end ;
2901: PPOPN 3
2903: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 256
2911: PUSH
2912: LD_INT 999
2914: LESS
2915: IFFALSE 2923
2917: PUSH
2918: LD_EXP 10
2922: AND
2923: IFFALSE 2931
2925: PUSH
2926: LD_EXP 21
2930: AND
2931: IFFALSE 3102
2933: GO 2935
2935: DISABLE
2936: LD_INT 0
2938: PPUSH
// begin for i in usForces do
2939: LD_ADDR_VAR 0 1
2943: PUSH
2944: LD_EXP 21
2948: PUSH
2949: FOR_IN
2950: IFFALSE 2989
// begin if IsInUnit ( i ) then
2952: LD_VAR 0 1
2956: PPUSH
2957: CALL_OW 310
2961: IFFALSE 2972
// ComExitBuilding ( i ) ;
2963: LD_VAR 0 1
2967: PPUSH
2968: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_INT 31
2979: PPUSH
2980: LD_INT 8
2982: PPUSH
2983: CALL_OW 174
// end ;
2987: GO 2949
2989: POP
2990: POP
// wait ( 0 0$8 ) ;
2991: LD_INT 280
2993: PPUSH
2994: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2998: LD_INT 22
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 91
3010: PUSH
3011: LD_INT 3
3013: PUSH
3014: LD_INT 14
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: CALL_OW 69
3030: IFFALSE 3080
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
3032: LD_EXP 21
3036: PPUSH
3037: LD_INT 22
3039: PUSH
3040: LD_INT 2
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 91
3049: PUSH
3050: LD_INT 3
3052: PUSH
3053: LD_INT 14
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PPUSH
3065: CALL_OW 69
3069: PUSH
3070: LD_INT 1
3072: ARRAY
3073: PPUSH
3074: CALL_OW 115
3078: GO 3102
// begin wait ( 0 0$20 ) ;
3080: LD_INT 700
3082: PPUSH
3083: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
3087: LD_EXP 21
3091: PPUSH
3092: LD_INT 39
3094: PPUSH
3095: LD_INT 19
3097: PPUSH
3098: CALL_OW 171
// end ; end ;
3102: PPOPN 1
3104: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
3105: LD_EXP 23
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: CALL_OW 296
3117: PUSH
3118: LD_INT 10
3120: LESS
3121: IFTRUE 3136
3123: PUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 256
3131: PUSH
3132: LD_INT 999
3134: LESS
3135: OR
3136: IFFALSE 3168
3138: PUSH
3139: LD_INT 22
3141: PUSH
3142: LD_INT 1
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 25
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PPUSH
3163: CALL_OW 69
3167: AND
3168: IFFALSE 3282
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
3176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 25
3194: PUSH
3195: LD_INT 2
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 69
3210: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3211: LD_ADDR_VAR 0 2
3215: PUSH
3216: LD_INT 22
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 21
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: PUSH
3236: LD_INT 58
3238: PUSH
3239: EMPTY
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: ST_TO_ADDR
// if not tmp then
3252: LD_VAR 0 1
3256: NOT
3257: IFFALSE 3261
// exit ;
3259: GO 3282
// ComExitBuilding ( tmp ) ;
3261: LD_VAR 0 1
3265: PPUSH
3266: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: CALL_OW 227
// end ;
3282: PPOPN 2
3284: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3285: LD_EXP 10
3289: IFFALSE 3342
3291: PUSH
3292: LD_INT 7
3294: PPUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 21
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 3
3317: PUSH
3318: LD_INT 24
3320: PUSH
3321: LD_INT 600
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PPUSH
3337: CALL_OW 70
3341: AND
3342: IFFALSE 3470
3344: GO 3346
3346: DISABLE
3347: LD_INT 0
3349: PPUSH
3350: PPUSH
// begin enable ;
3351: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3352: LD_ADDR_VAR 0 2
3356: PUSH
3357: LD_INT 7
3359: PPUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 1
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 21
3372: PUSH
3373: LD_INT 1
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 3
3382: PUSH
3383: LD_INT 24
3385: PUSH
3386: LD_INT 600
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: PPUSH
3402: CALL_OW 70
3406: ST_TO_ADDR
// if not tmp then
3407: LD_VAR 0 2
3411: NOT
3412: IFFALSE 3416
// exit ;
3414: GO 3470
// for i in tmp do
3416: LD_ADDR_VAR 0 1
3420: PUSH
3421: LD_VAR 0 2
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3468
// if IsInUnit ( i ) then
3429: LD_VAR 0 1
3433: PPUSH
3434: CALL_OW 310
3438: IFFALSE 3451
// ComExitBuilding ( i ) else
3440: LD_VAR 0 1
3444: PPUSH
3445: CALL_OW 122
3449: GO 3466
// ComMoveXY ( i , 48 , 74 ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: LD_INT 48
3458: PPUSH
3459: LD_INT 74
3461: PPUSH
3462: CALL_OW 111
3466: GO 3426
3468: POP
3469: POP
// end ;
3470: PPOPN 2
3472: END
// every 12 12$00 do var i , un , tmp ;
3473: GO 3475
3475: DISABLE
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
3480: PPUSH
// begin tmp := [ ] ;
3481: LD_ADDR_VAR 0 3
3485: PUSH
3486: EMPTY
3487: ST_TO_ADDR
// uc_side := 1 ;
3488: LD_ADDR_OWVAR 20
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
// uc_nation := 1 ;
3496: LD_ADDR_OWVAR 21
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// case Difficulty of 1 :
3504: LD_OWVAR 67
3508: PUSH
3509: LD_INT 1
3511: DOUBLE
3512: EQUAL
3513: IFTRUE 3517
3515: GO 3620
3517: POP
// begin wait ( 1 1$00 ) ;
3518: LD_INT 2100
3520: PPUSH
3521: CALL_OW 67
// for i := 1 to 2 do
3525: LD_ADDR_VAR 0 1
3529: PUSH
3530: DOUBLE
3531: LD_INT 1
3533: DEC
3534: ST_TO_ADDR
3535: LD_INT 2
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 1
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_VAR 0 1
3558: PUSH
3559: LD_INT 2
3561: MOD
3562: PUSH
3563: LD_INT 1
3565: PLUS
3566: ARRAY
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: CALL_OW 380
// un := CreateHuman ;
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: CALL_OW 44
3584: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: LD_VAR 0 3
3594: PPUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_INT 1
3602: PLUS
3603: PPUSH
3604: LD_VAR 0 2
3608: PPUSH
3609: CALL_OW 1
3613: ST_TO_ADDR
// end ;
3614: GO 3538
3616: POP
3617: POP
// end ; 2 :
3618: GO 4020
3620: LD_INT 2
3622: DOUBLE
3623: EQUAL
3624: IFTRUE 3628
3626: GO 3762
3628: POP
// begin wait ( 0 0$30 ) ;
3629: LD_INT 1050
3631: PPUSH
3632: CALL_OW 67
// for i := 1 to 2 do
3636: LD_ADDR_VAR 0 1
3640: PUSH
3641: DOUBLE
3642: LD_INT 1
3644: DEC
3645: ST_TO_ADDR
3646: LD_INT 2
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3706
// begin PrepareHuman ( false , 1 , 2 ) ;
3652: LD_INT 0
3654: PPUSH
3655: LD_INT 1
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: CALL_OW 380
// un := CreateHuman ;
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: CALL_OW 44
3674: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3675: LD_ADDR_VAR 0 3
3679: PUSH
3680: LD_VAR 0 3
3684: PPUSH
3685: LD_VAR 0 3
3689: PUSH
3690: LD_INT 1
3692: PLUS
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 1
3703: ST_TO_ADDR
// end ;
3704: GO 3649
3706: POP
3707: POP
// PrepareHuman ( false , 4 , 2 ) ;
3708: LD_INT 0
3710: PPUSH
3711: LD_INT 4
3713: PPUSH
3714: LD_INT 2
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3731: LD_ADDR_VAR 0 3
3735: PUSH
3736: LD_VAR 0 3
3740: PPUSH
3741: LD_VAR 0 3
3745: PUSH
3746: LD_INT 1
3748: PLUS
3749: PPUSH
3750: LD_VAR 0 2
3754: PPUSH
3755: CALL_OW 1
3759: ST_TO_ADDR
// end ; 3 .. 4 :
3760: GO 4020
3762: LD_INT 3
3764: DOUBLE
3765: GREATEREQUAL
3766: IFFALSE 3774
3768: LD_INT 4
3770: DOUBLE
3771: LESSEQUAL
3772: IFTRUE 3776
3774: GO 4019
3776: POP
// begin for i := 1 to 2 do
3777: LD_ADDR_VAR 0 1
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 2
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3847
// begin PrepareHuman ( false , 1 , 2 ) ;
3793: LD_INT 0
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 380
// un := CreateHuman ;
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: CALL_OW 44
3815: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_VAR 0 3
3830: PUSH
3831: LD_INT 1
3833: PLUS
3834: PPUSH
3835: LD_VAR 0 2
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ;
3845: GO 3790
3847: POP
3848: POP
// PrepareHuman ( false , 4 , 2 ) ;
3849: LD_INT 0
3851: PPUSH
3852: LD_INT 4
3854: PPUSH
3855: LD_INT 2
3857: PPUSH
3858: CALL_OW 380
// un := CreateHuman ;
3862: LD_ADDR_VAR 0 2
3866: PUSH
3867: CALL_OW 44
3871: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3872: LD_ADDR_VAR 0 3
3876: PUSH
3877: LD_VAR 0 3
3881: PPUSH
3882: LD_VAR 0 3
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 2
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3901: LD_INT 1
3903: PPUSH
3904: LD_INT 1
3906: PPUSH
3907: LD_INT 2
3909: PPUSH
3910: LD_INT 2
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 2
3918: PPUSH
3919: LD_INT 90
3921: PPUSH
3922: CALL 241 0 7
// un := CreateVehicle ;
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: CALL_OW 45
3935: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 3
3945: PPUSH
3946: LD_VAR 0 3
3950: PUSH
3951: LD_INT 1
3953: PLUS
3954: PPUSH
3955: LD_VAR 0 2
3959: PPUSH
3960: CALL_OW 1
3964: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 380
// un := CreateHuman ;
3978: LD_ADDR_VAR 0 2
3982: PUSH
3983: CALL_OW 44
3987: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_VAR 0 3
4002: PUSH
4003: LD_INT 1
4005: PLUS
4006: PPUSH
4007: LD_VAR 0 2
4011: PPUSH
4012: CALL_OW 1
4016: ST_TO_ADDR
// end ; end ;
4017: GO 4020
4019: POP
// for i := 1 to tmp do
4020: LD_ADDR_VAR 0 1
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_TO
4036: IFFALSE 4201
// begin SetDir ( tmp [ i ] , 1 ) ;
4038: LD_VAR 0 3
4042: PUSH
4043: LD_VAR 0 1
4047: ARRAY
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
4056: LD_VAR 0 3
4060: PUSH
4061: LD_VAR 0 1
4065: ARRAY
4066: PPUSH
4067: CALL_OW 247
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: IFFALSE 4103
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
4077: LD_VAR 0 3
4081: PUSH
4082: LD_VAR 0 1
4086: ARRAY
4087: PPUSH
4088: LD_INT 28
4090: PPUSH
4091: LD_INT 52
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 48
4101: GO 4171
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
4103: LD_VAR 0 3
4107: PUSH
4108: LD_VAR 0 1
4112: ARRAY
4113: PPUSH
4114: LD_INT 28
4116: PPUSH
4117: LD_INT 52
4119: PPUSH
4120: LD_INT 0
4122: PPUSH
4123: CALL_OW 48
// i := i + 1 ;
4127: LD_ADDR_VAR 0 1
4131: PUSH
4132: LD_VAR 0 1
4136: PUSH
4137: LD_INT 1
4139: PLUS
4140: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
4141: LD_VAR 0 3
4145: PUSH
4146: LD_VAR 0 1
4150: ARRAY
4151: PPUSH
4152: LD_VAR 0 3
4156: PUSH
4157: LD_VAR 0 1
4161: PUSH
4162: LD_INT 1
4164: MINUS
4165: ARRAY
4166: PPUSH
4167: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
4171: LD_VAR 0 3
4175: PUSH
4176: LD_VAR 0 1
4180: ARRAY
4181: PPUSH
4182: LD_INT 43
4184: PPUSH
4185: LD_INT 56
4187: PPUSH
4188: CALL_OW 111
// wait ( 0 0$2 ) ;
4192: LD_INT 70
4194: PPUSH
4195: CALL_OW 67
// end ;
4199: GO 4035
4201: POP
4202: POP
// wait ( 0 0$2 ) ;
4203: LD_INT 70
4205: PPUSH
4206: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4210: LD_INT 7
4212: PPUSH
4213: LD_INT 22
4215: PUSH
4216: LD_INT 2
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 70
4227: NOT
4228: IFFALSE 4426
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4230: LD_VAR 0 3
4234: PPUSH
4235: LD_INT 35
4237: PPUSH
4238: LD_INT 24
4240: PPUSH
4241: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4245: LD_ADDR_EXP 21
4249: PUSH
4250: LD_EXP 21
4254: PUSH
4255: LD_VAR 0 3
4259: PPUSH
4260: LD_INT 25
4262: PUSH
4263: LD_INT 1
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PPUSH
4270: CALL_OW 72
4274: UNION
4275: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4276: LD_INT 22
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 30
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 69
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: CALL_OW 313
4313: PUSH
4314: LD_INT 6
4316: LESS
4317: IFFALSE 4376
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 25
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PPUSH
4334: CALL_OW 72
4338: PPUSH
4339: LD_INT 22
4341: PUSH
4342: LD_INT 1
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: LD_INT 30
4351: PUSH
4352: LD_INT 4
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PPUSH
4363: CALL_OW 69
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: PPUSH
4372: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4376: LD_VAR 0 3
4380: PPUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 4
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 72
4395: IFFALSE 4424
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 4
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PPUSH
4412: CALL_OW 72
4416: PPUSH
4417: LD_INT 3
4419: PPUSH
4420: CALL_OW 180
// end else
4424: GO 4703
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4426: LD_ADDR_VAR 0 3
4430: PUSH
4431: LD_VAR 0 3
4435: PUSH
4436: LD_INT 6
4438: PPUSH
4439: LD_INT 22
4441: PUSH
4442: LD_INT 1
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PPUSH
4449: CALL_OW 70
4453: UNION
4454: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4455: LD_VAR 0 3
4459: PPUSH
4460: LD_INT 45
4462: PPUSH
4463: LD_INT 54
4465: PPUSH
4466: CALL_OW 111
// wait ( 0 0$3 ) ;
4470: LD_INT 105
4472: PPUSH
4473: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4477: LD_VAR 0 3
4481: PUSH
4482: LD_VAR 0 3
4486: PPUSH
4487: LD_INT 25
4489: PUSH
4490: LD_INT 4
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 72
4501: DIFF
4502: PPUSH
4503: LD_INT 35
4505: PPUSH
4506: LD_INT 24
4508: PPUSH
4509: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: LD_INT 25
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PPUSH
4528: CALL_OW 72
4532: PPUSH
4533: LD_INT 42
4535: PPUSH
4536: LD_INT 49
4538: PPUSH
4539: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4543: LD_INT 35
4545: PPUSH
4546: CALL_OW 67
// for i in tmp do
4550: LD_ADDR_VAR 0 1
4554: PUSH
4555: LD_VAR 0 3
4559: PUSH
4560: FOR_IN
4561: IFFALSE 4694
// if IsDead ( i ) then
4563: LD_VAR 0 1
4567: PPUSH
4568: CALL_OW 301
4572: IFFALSE 4592
// tmp := tmp diff i else
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: LD_VAR 0 3
4583: PUSH
4584: LD_VAR 0 1
4588: DIFF
4589: ST_TO_ADDR
4590: GO 4692
// if GetClass ( i ) = 1 then
4592: LD_VAR 0 1
4596: PPUSH
4597: CALL_OW 257
4601: PUSH
4602: LD_INT 1
4604: EQUAL
4605: IFFALSE 4692
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4607: LD_VAR 0 1
4611: PPUSH
4612: CALL_OW 256
4616: PUSH
4617: LD_INT 600
4619: LESS
4620: IFFALSE 4643
4622: PUSH
4623: LD_VAR 0 1
4627: PPUSH
4628: LD_INT 42
4630: PPUSH
4631: LD_INT 49
4633: PPUSH
4634: CALL_OW 297
4638: PUSH
4639: LD_INT 6
4641: GREATER
4642: AND
4643: IFFALSE 4662
// ComMoveXY ( i , 42 , 49 ) else
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_INT 42
4652: PPUSH
4653: LD_INT 49
4655: PPUSH
4656: CALL_OW 111
4660: GO 4692
// if GetLives ( i ) = 1000 then
4662: LD_VAR 0 1
4666: PPUSH
4667: CALL_OW 256
4671: PUSH
4672: LD_INT 1000
4674: EQUAL
4675: IFFALSE 4692
// ComAgressiveMove ( i , 36 , 25 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_INT 36
4684: PPUSH
4685: LD_INT 25
4687: PPUSH
4688: CALL_OW 114
// end ;
4692: GO 4560
4694: POP
4695: POP
// until not tmp ;
4696: LD_VAR 0 3
4700: NOT
4701: IFFALSE 4543
// end ; end ;
4703: PPOPN 3
4705: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4706: LD_INT 7
4708: PPUSH
4709: LD_INT 22
4711: PUSH
4712: LD_INT 2
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PPUSH
4719: CALL_OW 70
4723: IFFALSE 4732
4725: PUSH
4726: LD_EXP 14
4730: NOT
4731: AND
4732: IFFALSE 4890
4734: GO 4736
4736: DISABLE
4737: LD_INT 0
4739: PPUSH
4740: PPUSH
4741: PPUSH
// begin for i := 1 to 2 do
4742: LD_ADDR_VAR 0 1
4746: PUSH
4747: DOUBLE
4748: LD_INT 1
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 2
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4888
// begin wait ( 0 0$3 ) ;
4758: LD_INT 105
4760: PPUSH
4761: CALL_OW 67
// uc_side := 1 ;
4765: LD_ADDR_OWVAR 20
4769: PUSH
4770: LD_INT 1
4772: ST_TO_ADDR
// uc_nation := 1 ;
4773: LD_ADDR_OWVAR 21
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4781: LD_INT 1
4783: PPUSH
4784: LD_INT 1
4786: PPUSH
4787: LD_INT 2
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 1
4795: PPUSH
4796: LD_INT 4
4798: PPUSH
4799: LD_INT 90
4801: PPUSH
4802: CALL 241 0 7
// veh := CreateVehicle ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: CALL_OW 45
4815: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 29
4823: PPUSH
4824: LD_INT 52
4826: PPUSH
4827: LD_INT 0
4829: PPUSH
4830: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 3
4839: PPUSH
4840: LD_INT 3
4842: PPUSH
4843: CALL_OW 380
// un := CreateHuman ;
4847: LD_ADDR_VAR 0 2
4851: PUSH
4852: CALL_OW 44
4856: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4871: LD_VAR 0 3
4875: PPUSH
4876: LD_INT 36
4878: PPUSH
4879: LD_INT 25
4881: PPUSH
4882: CALL_OW 114
// end ;
4886: GO 4755
4888: POP
4889: POP
// end ; end_of_file
4890: PPOPN 3
4892: END
// export function Action ; var i , tmp ; begin
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
4897: PPUSH
// InGameOn ;
4898: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4902: LD_INT 2
4904: PPUSH
4905: LD_INT 3
4907: PPUSH
4908: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4912: LD_EXP 23
4916: PPUSH
4917: LD_INT 78
4919: PPUSH
4920: LD_INT 61
4922: PPUSH
4923: CALL_OW 111
// if Mike then
4927: LD_EXP 25
4931: IFFALSE 4948
// ComMoveXY ( Mike , 80 , 66 ) ;
4933: LD_EXP 25
4937: PPUSH
4938: LD_INT 80
4940: PPUSH
4941: LD_INT 66
4943: PPUSH
4944: CALL_OW 111
// if Givi then
4948: LD_EXP 24
4952: IFFALSE 4969
// ComMoveXY ( Givi , 82 , 66 ) ;
4954: LD_EXP 24
4958: PPUSH
4959: LD_INT 82
4961: PPUSH
4962: LD_INT 66
4964: PPUSH
4965: CALL_OW 111
// if Kamil then
4969: LD_EXP 26
4973: IFFALSE 4990
// ComMoveXY ( Kamil , 82 , 67 ) ;
4975: LD_EXP 26
4979: PPUSH
4980: LD_INT 82
4982: PPUSH
4983: LD_INT 67
4985: PPUSH
4986: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4990: LD_EXP 23
4994: PPUSH
4995: CALL_OW 87
// wait ( 0 0$2 ) ;
4999: LD_INT 70
5001: PPUSH
5002: CALL_OW 67
// if Givi and Mike then
5006: LD_EXP 24
5010: IFFALSE 5018
5012: PUSH
5013: LD_EXP 25
5017: AND
5018: IFFALSE 5552
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5020: LD_EXP 24
5024: PUSH
5025: LD_EXP 25
5029: PUSH
5030: LD_EXP 26
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: PPUSH
5040: LD_EXP 23
5044: PPUSH
5045: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5049: LD_EXP 23
5053: PPUSH
5054: LD_EXP 24
5058: PPUSH
5059: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
5063: LD_EXP 24
5067: PPUSH
5068: LD_STRING DG-1-start
5070: PPUSH
5071: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
5075: LD_EXP 23
5079: PPUSH
5080: LD_STRING DH-1-start
5082: PPUSH
5083: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
5087: LD_EXP 25
5091: PPUSH
5092: LD_EXP 23
5096: PPUSH
5097: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5101: LD_EXP 23
5105: PPUSH
5106: LD_EXP 25
5110: PPUSH
5111: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
5115: LD_EXP 25
5119: PPUSH
5120: LD_STRING DM-1-start
5122: PPUSH
5123: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
5127: LD_EXP 23
5131: PPUSH
5132: LD_STRING DH-2-start
5134: PPUSH
5135: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
5139: LD_EXP 25
5143: PPUSH
5144: LD_STRING DM-2-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-2-start
5158: PPUSH
5159: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
5163: LD_EXP 25
5167: PPUSH
5168: LD_EXP 24
5172: PPUSH
5173: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
5177: LD_EXP 23
5181: PPUSH
5182: LD_EXP 25
5186: PPUSH
5187: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
5191: LD_EXP 25
5195: PPUSH
5196: LD_STRING DM-3-start
5198: PPUSH
5199: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
5203: LD_EXP 23
5207: PPUSH
5208: LD_STRING DH-3-start
5210: PPUSH
5211: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5215: LD_EXP 23
5219: PUSH
5220: LD_EXP 25
5224: PUSH
5225: LD_EXP 24
5229: PUSH
5230: LD_EXP 26
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: PPUSH
5241: LD_INT 84
5243: PPUSH
5244: LD_INT 51
5246: PPUSH
5247: CALL_OW 111
// wait ( 0 0$2 ) ;
5251: LD_INT 70
5253: PPUSH
5254: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5258: LD_EXP 24
5262: PPUSH
5263: LD_STRING DG-3-start
5265: PPUSH
5266: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5270: LD_EXP 23
5274: PUSH
5275: LD_EXP 25
5279: PUSH
5280: LD_EXP 24
5284: PUSH
5285: LD_EXP 26
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: PPUSH
5296: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_EXP 24
5309: PPUSH
5310: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5314: LD_EXP 24
5318: PUSH
5319: LD_EXP 25
5323: PUSH
5324: LD_EXP 26
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: PPUSH
5334: LD_EXP 23
5338: PPUSH
5339: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5343: LD_EXP 23
5347: PPUSH
5348: LD_STRING DH-4-start
5350: PPUSH
5351: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5355: LD_EXP 24
5359: PPUSH
5360: LD_STRING DG-4-start
5362: PPUSH
5363: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5367: LD_EXP 23
5371: PPUSH
5372: LD_STRING DH-5-start
5374: PPUSH
5375: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5379: LD_EXP 24
5383: PPUSH
5384: LD_STRING DG-5-start
5386: PPUSH
5387: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5391: LD_EXP 23
5395: PPUSH
5396: LD_STRING DH-6-start
5398: PPUSH
5399: CALL_OW 88
// if not Kamil then
5403: LD_EXP 26
5407: NOT
5408: IFFALSE 5459
// begin Say ( Mike , DM-6-start ) ;
5410: LD_EXP 25
5414: PPUSH
5415: LD_STRING DM-6-start
5417: PPUSH
5418: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5422: LD_EXP 23
5426: PUSH
5427: LD_EXP 24
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PPUSH
5436: LD_EXP 25
5440: PPUSH
5441: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5445: LD_EXP 24
5449: PPUSH
5450: LD_STRING DG-6-start
5452: PPUSH
5453: CALL_OW 88
// end else
5457: GO 5538
// begin Say ( Mike , DM-6-start-a ) ;
5459: LD_EXP 25
5463: PPUSH
5464: LD_STRING DM-6-start-a
5466: PPUSH
5467: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5471: LD_EXP 23
5475: PUSH
5476: LD_EXP 24
5480: PUSH
5481: LD_EXP 25
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: LD_EXP 26
5495: PPUSH
5496: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5500: LD_EXP 26
5504: PPUSH
5505: LD_EXP 25
5509: PPUSH
5510: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5514: LD_EXP 26
5518: PPUSH
5519: LD_STRING DKam-7-start-a
5521: PPUSH
5522: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5526: LD_EXP 24
5530: PPUSH
5531: LD_STRING DG-6-start-a
5533: PPUSH
5534: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5538: LD_EXP 23
5542: PPUSH
5543: LD_STRING DH-7-start
5545: PPUSH
5546: CALL_OW 88
// end else
5550: GO 6278
// if not Mike and Givi then
5552: LD_EXP 25
5556: NOT
5557: IFFALSE 5565
5559: PUSH
5560: LD_EXP 24
5564: AND
5565: IFFALSE 5910
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5567: LD_EXP 24
5571: PUSH
5572: LD_EXP 26
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PPUSH
5581: LD_EXP 23
5585: PPUSH
5586: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5590: LD_EXP 23
5594: PPUSH
5595: LD_EXP 24
5599: PPUSH
5600: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5604: LD_EXP 24
5608: PPUSH
5609: LD_STRING DG-1-start-c
5611: PPUSH
5612: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5616: LD_EXP 23
5620: PPUSH
5621: LD_STRING DH-1-start-c
5623: PPUSH
5624: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5628: LD_EXP 24
5632: PPUSH
5633: LD_STRING DG-2-start-c
5635: PPUSH
5636: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5640: LD_EXP 23
5644: PPUSH
5645: LD_STRING DH-2-start-c
5647: PPUSH
5648: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5652: LD_EXP 24
5656: PPUSH
5657: LD_STRING DG-3-start-c
5659: PPUSH
5660: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5664: LD_EXP 23
5668: PPUSH
5669: LD_INT 83
5671: PPUSH
5672: LD_INT 56
5674: PPUSH
5675: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5679: LD_EXP 24
5683: PPUSH
5684: LD_INT 83
5686: PPUSH
5687: LD_INT 59
5689: PPUSH
5690: CALL_OW 111
// if Kamil then
5694: LD_EXP 26
5698: IFFALSE 5715
// ComMoveXY ( Kamil , 80 , 58 ) ;
5700: LD_EXP 26
5704: PPUSH
5705: LD_INT 80
5707: PPUSH
5708: LD_INT 58
5710: PPUSH
5711: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5715: LD_EXP 23
5719: PPUSH
5720: LD_EXP 24
5724: PPUSH
5725: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5729: LD_EXP 24
5733: PUSH
5734: LD_EXP 26
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PPUSH
5743: LD_EXP 23
5747: PPUSH
5748: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5752: LD_EXP 23
5756: PPUSH
5757: LD_STRING DH-3-start-c
5759: PPUSH
5760: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5764: LD_EXP 24
5768: PPUSH
5769: LD_STRING DG-4-start-c
5771: PPUSH
5772: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5776: LD_EXP 23
5780: PPUSH
5781: LD_STRING DH-5-start-c
5783: PPUSH
5784: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5788: LD_EXP 24
5792: PPUSH
5793: LD_STRING DG-5-start-c
5795: PPUSH
5796: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5800: LD_EXP 23
5804: PPUSH
5805: LD_STRING DH-6-start-c
5807: PPUSH
5808: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5812: LD_EXP 24
5816: PPUSH
5817: LD_STRING DG-6-start-c
5819: PPUSH
5820: CALL_OW 88
// if Kamil then
5824: LD_EXP 26
5828: IFFALSE 5884
// begin ComTurnUnit ( Kamil , Heike ) ;
5830: LD_EXP 26
5834: PPUSH
5835: LD_EXP 23
5839: PPUSH
5840: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5844: LD_EXP 26
5848: PPUSH
5849: LD_STRING DKam-1-start-c
5851: PPUSH
5852: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5856: LD_EXP 24
5860: PPUSH
5861: LD_EXP 26
5865: PPUSH
5866: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5870: LD_EXP 24
5874: PPUSH
5875: LD_STRING DG-7-start-c
5877: PPUSH
5878: CALL_OW 88
// end else
5882: GO 5908
// begin Say ( Givi , DG-8-start-c ) ;
5884: LD_EXP 24
5888: PPUSH
5889: LD_STRING DG-8-start-c
5891: PPUSH
5892: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5896: LD_EXP 23
5900: PPUSH
5901: LD_STRING DH-7-start-c
5903: PPUSH
5904: CALL_OW 88
// end ; end else
5908: GO 6278
// if not Givi and Mike then
5910: LD_EXP 24
5914: NOT
5915: IFFALSE 5923
5917: PUSH
5918: LD_EXP 25
5922: AND
5923: IFFALSE 6182
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5925: LD_EXP 25
5929: PUSH
5930: LD_EXP 26
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: LD_EXP 23
5943: PPUSH
5944: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5948: LD_EXP 23
5952: PPUSH
5953: LD_EXP 25
5957: PPUSH
5958: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5962: LD_EXP 25
5966: PPUSH
5967: LD_STRING DM-1-start-b
5969: PPUSH
5970: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-b
5981: PPUSH
5982: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5986: LD_EXP 25
5990: PPUSH
5991: LD_STRING DM-2-start-b
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-b
6005: PPUSH
6006: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
6010: LD_EXP 25
6014: PPUSH
6015: LD_STRING DM-3-start-b
6017: PPUSH
6018: CALL_OW 88
// if Kamil then
6022: LD_EXP 26
6026: IFFALSE 6043
// ComMoveXY ( Kamil , 80 , 58 ) ;
6028: LD_EXP 26
6032: PPUSH
6033: LD_INT 80
6035: PPUSH
6036: LD_INT 58
6038: PPUSH
6039: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
6043: LD_EXP 23
6047: PPUSH
6048: LD_INT 83
6050: PPUSH
6051: LD_INT 56
6053: PPUSH
6054: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
6058: LD_EXP 25
6062: PPUSH
6063: LD_INT 83
6065: PPUSH
6066: LD_INT 59
6068: PPUSH
6069: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
6073: LD_EXP 23
6077: PPUSH
6078: LD_EXP 25
6082: PPUSH
6083: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
6087: LD_EXP 26
6091: PUSH
6092: LD_EXP 25
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PPUSH
6101: LD_EXP 23
6105: PPUSH
6106: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
6110: LD_EXP 23
6114: PPUSH
6115: LD_STRING DH-3-start-b
6117: PPUSH
6118: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
6122: LD_EXP 25
6126: PPUSH
6127: LD_STRING DM-4-start-b
6129: PPUSH
6130: CALL_OW 88
// if Kamil then
6134: LD_EXP 26
6138: IFFALSE 6168
// begin ComTurnUnit ( Kamil , Heike ) ;
6140: LD_EXP 26
6144: PPUSH
6145: LD_EXP 23
6149: PPUSH
6150: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
6154: LD_EXP 26
6158: PPUSH
6159: LD_STRING DKam-1-start-c
6161: PPUSH
6162: CALL_OW 88
// end else
6166: GO 6180
// begin Say ( Mike , DM-5-start-b ) ;
6168: LD_EXP 25
6172: PPUSH
6173: LD_STRING DM-5-start-b
6175: PPUSH
6176: CALL_OW 88
// end ; end else
6180: GO 6278
// if Kamil then
6182: LD_EXP 26
6186: IFFALSE 6266
// begin AddComTurnUnit ( Heike , Kamil ) ;
6188: LD_EXP 23
6192: PPUSH
6193: LD_EXP 26
6197: PPUSH
6198: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
6202: LD_EXP 26
6206: PPUSH
6207: LD_EXP 23
6211: PPUSH
6212: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6216: LD_EXP 23
6220: PPUSH
6221: LD_STRING DH-1-start-f
6223: PPUSH
6224: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6228: LD_EXP 26
6232: PPUSH
6233: LD_STRING DKam-1-start-f
6235: PPUSH
6236: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6240: LD_EXP 23
6244: PPUSH
6245: LD_STRING DH-2-start-f
6247: PPUSH
6248: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6252: LD_EXP 26
6256: PPUSH
6257: LD_STRING DKam-2-start-f
6259: PPUSH
6260: CALL_OW 88
// end else
6264: GO 6278
// begin Say ( Heike , DH-1-start-d ) ;
6266: LD_EXP 23
6270: PPUSH
6271: LD_STRING DH-1-start-d
6273: PPUSH
6274: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6278: LD_EXP 23
6282: PUSH
6283: LD_EXP 24
6287: PUSH
6288: LD_EXP 25
6292: PUSH
6293: LD_EXP 26
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 139
// InGameOff ;
6308: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6312: LD_STRING OEast
6314: PPUSH
6315: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6319: LD_INT 10
6321: PPUSH
6322: LD_INT 1
6324: PPUSH
6325: CALL_OW 424
// SaveForQuickRestart ;
6329: CALL_OW 22
// wait ( 0 0$20 ) ;
6333: LD_INT 700
6335: PPUSH
6336: CALL_OW 67
// SendSciToForest ;
6340: CALL 1526 0 0
// if Difficulty = 1 then
6344: LD_OWVAR 67
6348: PUSH
6349: LD_INT 1
6351: EQUAL
6352: IFFALSE 6356
// exit ;
6354: GO 6508
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6356: LD_INT 10500
6358: PUSH
6359: LD_INT 5250
6361: PUSH
6362: LD_INT 4200
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_OWVAR 67
6374: PUSH
6375: LD_INT 1
6377: MINUS
6378: ARRAY
6379: PPUSH
6380: CALL_OW 67
// if usAlert then
6384: LD_EXP 10
6388: IFFALSE 6392
// exit ;
6390: GO 6508
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6392: LD_ADDR_VAR 0 3
6396: PUSH
6397: LD_INT 22
6399: PUSH
6400: LD_INT 1
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 25
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PPUSH
6421: CALL_OW 69
6425: ST_TO_ADDR
// if not tmp then
6426: LD_VAR 0 3
6430: NOT
6431: IFFALSE 6435
// exit ;
6433: GO 6508
// ComExitBuilding ( tmp ) ;
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6444: LD_VAR 0 3
6448: PPUSH
6449: LD_INT 31
6451: PPUSH
6452: LD_INT 40
6454: PPUSH
6455: LD_INT 13
6457: PPUSH
6458: LD_INT 3
6460: PPUSH
6461: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
6465: LD_INT 35
6467: PPUSH
6468: CALL_OW 67
// until UnitFilter ( tmp , [ f_not , [ f_hastask ] ] ) ;
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 60
6482: PUSH
6483: EMPTY
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PPUSH
6490: CALL_OW 72
6494: IFFALSE 6465
// ComEnterUnit ( tmp , Delta ) ;
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: CALL_OW 120
// end ;
6508: LD_VAR 0 1
6512: RET
// every 3 3$00 do
6513: GO 6515
6515: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6516: LD_INT 1
6518: PPUSH
6519: LD_INT 570
6521: PPUSH
6522: LD_INT 350
6524: PPUSH
6525: CALL_OW 550
// wait ( 2 2$40 ) ;
6529: LD_INT 5600
6531: PPUSH
6532: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6536: LD_INT 0
6538: PPUSH
6539: LD_INT 570
6541: PPUSH
6542: LD_INT 350
6544: PPUSH
6545: CALL_OW 550
// end ;
6549: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6550: LD_EXP 4
6554: NOT
6555: IFFALSE 6571
6557: PUSH
6558: LD_INT 2
6560: PPUSH
6561: LD_EXP 27
6565: PPUSH
6566: CALL_OW 292
6570: AND
6571: IFFALSE 7503
6573: GO 6575
6575: DISABLE
6576: LD_INT 0
6578: PPUSH
6579: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6580: LD_INT 10
6582: PPUSH
6583: LD_INT 0
6585: PPUSH
6586: CALL_OW 424
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6590: LD_ADDR_VAR 0 2
6594: PUSH
6595: LD_INT 22
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6624: LD_EXP 23
6628: PPUSH
6629: LD_EXP 27
6633: PPUSH
6634: CALL_OW 250
6638: PPUSH
6639: LD_EXP 27
6643: PPUSH
6644: CALL_OW 251
6648: PPUSH
6649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6660: LD_EXP 23
6664: PPUSH
6665: LD_EXP 27
6669: PPUSH
6670: CALL_OW 296
6674: PUSH
6675: LD_INT 16
6677: LESS
6678: IFFALSE 6653
// InGameOn ;
6680: CALL_OW 8
// aviradzeSpotted := true ;
6684: LD_ADDR_EXP 4
6688: PUSH
6689: LD_INT 1
6691: ST_TO_ADDR
// ChangeSideFog ( 5 , 2 ) ;
6692: LD_INT 5
6694: PPUSH
6695: LD_INT 2
6697: PPUSH
6698: CALL_OW 343
// if pepAmount > 2 then
6702: LD_VAR 0 2
6706: PUSH
6707: LD_INT 2
6709: GREATER
6710: IFFALSE 6726
// Say ( Heike , DH-1-spot ) else
6712: LD_EXP 23
6716: PPUSH
6717: LD_STRING DH-1-spot
6719: PPUSH
6720: CALL_OW 88
6724: GO 6738
// Say ( Heike , DH-1-spot-d ) ;
6726: LD_EXP 23
6730: PPUSH
6731: LD_STRING DH-1-spot-d
6733: PPUSH
6734: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6738: LD_EXP 23
6742: PPUSH
6743: LD_EXP 27
6747: PPUSH
6748: CALL_OW 250
6752: PPUSH
6753: LD_EXP 27
6757: PPUSH
6758: CALL_OW 251
6762: PPUSH
6763: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6767: LD_ADDR_VAR 0 1
6771: PUSH
6772: LD_EXP 26
6776: PUSH
6777: LD_EXP 25
6781: PUSH
6782: LD_EXP 24
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: FOR_IN
6793: IFFALSE 6832
// if GetDistUnits ( i , Aviradze ) > 7 then
6795: LD_VAR 0 1
6799: PPUSH
6800: LD_EXP 27
6804: PPUSH
6805: CALL_OW 296
6809: PUSH
6810: LD_INT 7
6812: GREATER
6813: IFFALSE 6830
// ComMoveXY ( i , 102 , 40 ) ;
6815: LD_VAR 0 1
6819: PPUSH
6820: LD_INT 102
6822: PPUSH
6823: LD_INT 40
6825: PPUSH
6826: CALL_OW 111
6830: GO 6792
6832: POP
6833: POP
// repeat wait ( 0 0$1 ) ;
6834: LD_INT 35
6836: PPUSH
6837: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6841: LD_EXP 23
6845: PPUSH
6846: LD_EXP 27
6850: PPUSH
6851: CALL_OW 296
6855: PUSH
6856: LD_INT 6
6858: LESS
6859: IFFALSE 6834
// ComTurnUnit ( Heike , Aviradze ) ;
6861: LD_EXP 23
6865: PPUSH
6866: LD_EXP 27
6870: PPUSH
6871: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6875: LD_EXP 27
6879: PUSH
6880: LD_EXP 29
6884: PUSH
6885: LD_EXP 28
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: PPUSH
6895: LD_EXP 23
6899: PPUSH
6900: CALL_OW 119
// if pepAmount > 1 then
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 1
6911: GREATER
6912: IFFALSE 6964
// begin wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6921: LD_EXP 26
6925: PUSH
6926: LD_EXP 25
6930: PUSH
6931: LD_EXP 24
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: PPUSH
6941: LD_EXP 27
6945: PPUSH
6946: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6950: LD_EXP 23
6954: PPUSH
6955: LD_STRING DH-2-spot
6957: PPUSH
6958: CALL_OW 88
// end else
6962: GO 6976
// Say ( Heike , DH-2-spot-d ) ;
6964: LD_EXP 23
6968: PPUSH
6969: LD_STRING DH-2-spot-d
6971: PPUSH
6972: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6976: LD_EXP 27
6980: PPUSH
6981: LD_STRING DA-2-spot
6983: PPUSH
6984: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6988: LD_EXP 23
6992: PPUSH
6993: LD_STRING DH-3-spot
6995: PPUSH
6996: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
7000: LD_EXP 28
7004: PPUSH
7005: LD_EXP 23
7009: PPUSH
7010: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
7014: LD_EXP 23
7018: PPUSH
7019: LD_EXP 28
7023: PPUSH
7024: CALL_OW 119
// wait ( 0 0$0.3 ) ;
7028: LD_INT 10
7030: PPUSH
7031: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
7035: LD_EXP 28
7039: PPUSH
7040: LD_STRING DK-3-spot
7042: PPUSH
7043: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
7047: LD_EXP 28
7051: PPUSH
7052: LD_EXP 23
7056: PPUSH
7057: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
7061: LD_EXP 23
7065: PPUSH
7066: LD_STRING DH-4-spot
7068: PPUSH
7069: CALL_OW 88
// wait ( 0 0$0.3 ) ;
7073: LD_INT 10
7075: PPUSH
7076: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
7080: LD_EXP 23
7084: PPUSH
7085: LD_EXP 27
7089: PPUSH
7090: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
7094: LD_EXP 27
7098: PPUSH
7099: LD_STRING DA-4-spot
7101: PPUSH
7102: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
7106: LD_EXP 28
7110: PPUSH
7111: LD_EXP 27
7115: PPUSH
7116: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
7120: LD_EXP 28
7124: PPUSH
7125: LD_STRING DK-4-spot
7127: PPUSH
7128: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
7132: LD_EXP 27
7136: PPUSH
7137: LD_EXP 28
7141: PPUSH
7142: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
7146: LD_EXP 27
7150: PPUSH
7151: LD_STRING DA-5-spot
7153: PPUSH
7154: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
7158: LD_EXP 28
7162: PPUSH
7163: LD_STRING DK-5-spot
7165: PPUSH
7166: CALL_OW 88
// if pepAmount = 1 then
7170: LD_VAR 0 2
7174: PUSH
7175: LD_INT 1
7177: EQUAL
7178: IFFALSE 7192
// Say ( Heike , DH-5-spot-f ) ;
7180: LD_EXP 23
7184: PPUSH
7185: LD_STRING DH-5-spot-f
7187: PPUSH
7188: CALL_OW 88
// if pepAmount < 3 then
7192: LD_VAR 0 2
7196: PUSH
7197: LD_INT 3
7199: LESS
7200: IFFALSE 7216
// Say ( Aviradze , DA-6-spot-f ) else
7202: LD_EXP 27
7206: PPUSH
7207: LD_STRING DA-6-spot-f
7209: PPUSH
7210: CALL_OW 88
7214: GO 7252
// if pepAmount < 4 then
7216: LD_VAR 0 2
7220: PUSH
7221: LD_INT 4
7223: LESS
7224: IFFALSE 7240
// Say ( Aviradze , DA-6-spot-c ) else
7226: LD_EXP 27
7230: PPUSH
7231: LD_STRING DA-6-spot-c
7233: PPUSH
7234: CALL_OW 88
7238: GO 7252
// Say ( Aviradze , DA-6-spot ) ;
7240: LD_EXP 27
7244: PPUSH
7245: LD_STRING DA-6-spot
7247: PPUSH
7248: CALL_OW 88
// if Kamil then
7252: LD_EXP 26
7256: IFFALSE 7270
// Say ( Kamil , DKam-6-spot ) ;
7258: LD_EXP 26
7262: PPUSH
7263: LD_STRING DKam-6-spot
7265: PPUSH
7266: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7270: LD_EXP 28
7274: PPUSH
7275: LD_STRING DK-6-spot
7277: PPUSH
7278: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7282: LD_EXP 27
7286: PPUSH
7287: LD_EXP 23
7291: PPUSH
7292: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7296: LD_EXP 27
7300: PPUSH
7301: LD_STRING DA-7-spot
7303: PPUSH
7304: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7308: LD_EXP 23
7312: PPUSH
7313: LD_STRING DH-7-spot
7315: PPUSH
7316: CALL_OW 88
// if sciCounterKill >= 3 then
7320: LD_EXP 9
7324: PUSH
7325: LD_INT 3
7327: GREATEREQUAL
7328: IFFALSE 7354
// begin Say ( Heike , DH-7-spot-a ) ;
7330: LD_EXP 23
7334: PPUSH
7335: LD_STRING DH-7-spot-a
7337: PPUSH
7338: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7342: LD_EXP 27
7346: PPUSH
7347: LD_STRING DA-8-spot-a
7349: PPUSH
7350: CALL_OW 88
// end ; InGameOff ;
7354: CALL_OW 9
// if sciCounterKill < 3 then
7358: LD_EXP 9
7362: PUSH
7363: LD_INT 3
7365: LESS
7366: IFFALSE 7434
// begin SetSide ( Kaia , 2 ) ;
7368: LD_EXP 28
7372: PPUSH
7373: LD_INT 2
7375: PPUSH
7376: CALL_OW 235
// ComFree ( Kaia ) ;
7380: LD_EXP 28
7384: PPUSH
7385: CALL_OW 139
// if Kamil then
7389: LD_EXP 26
7393: IFFALSE 7416
// begin ComHold ( Kamil ) ;
7395: LD_EXP 26
7399: PPUSH
7400: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7404: LD_EXP 26
7408: PPUSH
7409: LD_INT 5
7411: PPUSH
7412: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7416: LD_STRING OSci
7418: PPUSH
7419: CALL_OW 337
// ComFree ( Aviradze ) ;
7423: LD_EXP 27
7427: PPUSH
7428: CALL_OW 139
// end else
7432: GO 7503
// begin SetAchievement ( ACH_SCIDEAD ) ;
7434: LD_STRING ACH_SCIDEAD
7436: PPUSH
7437: CALL_OW 543
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7441: LD_ADDR_VAR 0 1
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: PUSH
7461: FOR_IN
7462: IFFALSE 7478
// SetSide ( i , 2 ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 2
7471: PPUSH
7472: CALL_OW 235
7476: GO 7461
7478: POP
7479: POP
// aviradzeQuestDone := true ;
7480: LD_ADDR_EXP 8
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// attackDeltaAllowed := true ;
7488: LD_ADDR_EXP 14
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7496: LD_STRING ODelta2
7498: PPUSH
7499: CALL_OW 337
// end ; end ;
7503: PPOPN 2
7505: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7506: LD_EXP 27
7510: PPUSH
7511: LD_INT 106
7513: PPUSH
7514: LD_INT 38
7516: PPUSH
7517: CALL_OW 297
7521: PUSH
7522: LD_INT 8
7524: GREATER
7525: IFFALSE 7542
7527: PUSH
7528: LD_EXP 27
7532: PPUSH
7533: CALL_OW 255
7537: PUSH
7538: LD_INT 5
7540: EQUAL
7541: AND
7542: IFFALSE 7563
7544: GO 7546
7546: DISABLE
// begin enable ;
7547: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7548: LD_EXP 27
7552: PPUSH
7553: LD_INT 106
7555: PPUSH
7556: LD_INT 38
7558: PPUSH
7559: CALL_OW 111
// end ;
7563: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7564: LD_EXP 10
7568: IFFALSE 7577
7570: PUSH
7571: LD_EXP 8
7575: NOT
7576: AND
7577: IFFALSE 7594
7579: GO 7581
7581: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7582: LD_EXP 20
7586: PPUSH
7587: LD_STRING DDelta-Alarm-1
7589: PPUSH
7590: CALL 78396 0 2
7594: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7595: LD_EXP 7
7599: NOT
7600: IFFALSE 7632
7602: PUSH
7603: LD_EXP 22
7607: PPUSH
7608: LD_EXP 23
7612: PPUSH
7613: CALL_OW 74
7617: PPUSH
7618: LD_EXP 23
7622: PPUSH
7623: CALL_OW 296
7627: PUSH
7628: LD_INT 8
7630: LESS
7631: AND
7632: IFFALSE 7658
7634: PUSH
7635: LD_INT 2
7637: PPUSH
7638: LD_EXP 22
7642: PPUSH
7643: LD_EXP 23
7647: PPUSH
7648: CALL_OW 74
7652: PPUSH
7653: CALL_OW 292
7657: AND
7658: IFFALSE 7694
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: PUSH
7690: LD_INT 1
7692: GREATER
7693: AND
7694: IFFALSE 7703
7696: PUSH
7697: LD_EXP 4
7701: NOT
7702: AND
7703: IFFALSE 7747
7705: GO 7707
7707: DISABLE
// begin sciSpotted := true ;
7708: LD_ADDR_EXP 7
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7716: LD_EXP 22
7720: PPUSH
7721: LD_EXP 23
7725: PPUSH
7726: CALL_OW 74
7730: PPUSH
7731: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7735: LD_EXP 23
7739: PPUSH
7740: LD_STRING DH-1-sci
7742: PPUSH
7743: CALL_OW 88
// end ;
7747: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7748: LD_EXP 4
7752: IFFALSE 7761
7754: PUSH
7755: LD_EXP 7
7759: NOT
7760: AND
7761: IFFALSE 7787
7763: PUSH
7764: LD_INT 2
7766: PPUSH
7767: LD_EXP 22
7771: PPUSH
7772: LD_EXP 23
7776: PPUSH
7777: CALL_OW 74
7781: PPUSH
7782: CALL_OW 292
7786: AND
7787: IFFALSE 7823
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: PUSH
7819: LD_INT 1
7821: GREATER
7822: AND
7823: IFFALSE 7831
7825: PUSH
7826: LD_EXP 4
7830: AND
7831: IFFALSE 7840
7833: PUSH
7834: LD_EXP 8
7838: NOT
7839: AND
7840: IFFALSE 7981
7842: GO 7844
7844: DISABLE
7845: LD_INT 0
7847: PPUSH
// begin sciSpotted := true ;
7848: LD_ADDR_EXP 7
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7856: LD_ADDR_VAR 0 1
7860: PUSH
7861: LD_EXP 22
7865: PPUSH
7866: LD_EXP 23
7870: PPUSH
7871: CALL_OW 74
7875: ST_TO_ADDR
// DialogueOn ;
7876: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: CALL_OW 250
7889: PPUSH
7890: LD_VAR 0 1
7894: PPUSH
7895: CALL_OW 251
7899: PPUSH
7900: LD_INT 2
7902: PPUSH
7903: LD_INT 3
7905: NEG
7906: PPUSH
7907: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7920: LD_EXP 23
7924: PPUSH
7925: LD_STRING DH-1-sci-a
7927: PPUSH
7928: CALL_OW 88
// if Mike then
7932: LD_EXP 25
7936: IFFALSE 7950
// Say ( Mike , DM-1-sci-a ) ;
7938: LD_EXP 25
7942: PPUSH
7943: LD_STRING DM-1-sci-a
7945: PPUSH
7946: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 250
7959: PPUSH
7960: LD_VAR 0 1
7964: PPUSH
7965: CALL_OW 251
7969: PPUSH
7970: LD_INT 2
7972: PPUSH
7973: CALL_OW 331
// DialogueOff ;
7977: CALL_OW 7
// end ;
7981: PPOPN 1
7983: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7984: LD_EXP 10
7988: IFFALSE 8020
7990: PUSH
7991: LD_EXP 19
7995: PPUSH
7996: CALL_OW 256
8000: PUSH
8001: LD_INT 1000
8003: LESS
8004: IFTRUE 8019
8006: PUSH
8007: LD_INT 3
8009: PPUSH
8010: CALL_OW 256
8014: PUSH
8015: LD_INT 999
8017: LESS
8018: OR
8019: AND
8020: IFFALSE 8282
8022: GO 8024
8024: DISABLE
8025: LD_INT 0
8027: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
8028: LD_ADDR_VAR 0 1
8032: PUSH
8033: LD_INT 22
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 21
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: LD_INT 58
8055: PUSH
8056: EMPTY
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 69
8068: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
8069: LD_VAR 0 1
8073: IFFALSE 8086
8075: PUSH
8076: LD_EXP 19
8080: PPUSH
8081: CALL_OW 302
8085: AND
8086: IFFALSE 8128
// begin if IsInUnit ( Gladstone ) then
8088: LD_EXP 19
8092: PPUSH
8093: CALL_OW 310
8097: IFFALSE 8108
// ComExitBuilding ( Gladstone ) ;
8099: LD_EXP 19
8103: PPUSH
8104: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
8108: LD_EXP 19
8112: PPUSH
8113: LD_VAR 0 1
8117: PUSH
8118: LD_INT 1
8120: ARRAY
8121: PPUSH
8122: CALL_OW 180
// end else
8126: GO 8148
// if IsInUnit ( Gladstone ) then
8128: LD_EXP 19
8132: PPUSH
8133: CALL_OW 310
8137: IFFALSE 8148
// ComExitBuilding ( Gladstone ) ;
8139: LD_EXP 19
8143: PPUSH
8144: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
8148: LD_EXP 19
8152: PPUSH
8153: LD_INT 27
8155: PPUSH
8156: LD_INT 51
8158: PPUSH
8159: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
8163: LD_EXP 19
8167: PPUSH
8168: LD_STRING D8-Glad-2
8170: PPUSH
8171: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8175: LD_INT 35
8177: PPUSH
8178: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
8182: LD_EXP 19
8186: PPUSH
8187: LD_INT 27
8189: PPUSH
8190: LD_INT 51
8192: PPUSH
8193: CALL_OW 307
8197: IFTRUE 8221
8199: PUSH
8200: LD_EXP 19
8204: PPUSH
8205: CALL_OW 310
8209: PPUSH
8210: LD_INT 27
8212: PPUSH
8213: LD_INT 51
8215: PPUSH
8216: CALL_OW 307
8220: OR
8221: IFTRUE 8234
8223: PUSH
8224: LD_EXP 19
8228: PPUSH
8229: CALL_OW 301
8233: OR
8234: IFFALSE 8175
// if IsDead ( Gladstone ) then
8236: LD_EXP 19
8240: PPUSH
8241: CALL_OW 301
8245: IFFALSE 8249
// exit ;
8247: GO 8282
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
8249: LD_INT 27
8251: PPUSH
8252: LD_INT 51
8254: PPUSH
8255: CALL_OW 428
8259: PPUSH
8260: CALL_OW 64
// gladstoneEscaped := true ;
8264: LD_ADDR_EXP 12
8268: PUSH
8269: LD_INT 1
8271: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
8272: LD_INT 1
8274: PPUSH
8275: LD_STRING 02_GladstoneEscaped
8277: PPUSH
8278: CALL_OW 39
// end ;
8282: PPOPN 1
8284: END
// every 0 0$3 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone and GetSide ( Aviradze ) = 5 do
8285: LD_EXP 4
8289: IFFALSE 8310
8291: PUSH
8292: LD_EXP 9
8296: PUSH
8297: LD_INT 3
8299: GREATEREQUAL
8300: IFTRUE 8309
8302: PUSH
8303: LD_EXP 22
8307: NOT
8308: OR
8309: AND
8310: IFFALSE 8319
8312: PUSH
8313: LD_EXP 8
8317: NOT
8318: AND
8319: IFFALSE 8336
8321: PUSH
8322: LD_EXP 27
8326: PPUSH
8327: CALL_OW 255
8331: PUSH
8332: LD_INT 5
8334: EQUAL
8335: AND
8336: IFFALSE 8387
8338: GO 8340
8340: DISABLE
// begin DialogueOn ;
8341: CALL_OW 6
// Say ( Heike , DH-1-quest-done ) ;
8345: LD_EXP 23
8349: PPUSH
8350: LD_STRING DH-1-quest-done
8352: PPUSH
8353: CALL_OW 88
// if Givi then
8357: LD_EXP 24
8361: IFFALSE 8375
// Say ( Givi , DG-1-quest-done ) ;
8363: LD_EXP 24
8367: PPUSH
8368: LD_STRING DG-1-quest-done
8370: PPUSH
8371: CALL_OW 88
// DialogueOff ;
8375: CALL_OW 7
// aviradzeQuestDone := true ;
8379: LD_ADDR_EXP 8
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// end ;
8387: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8388: LD_INT 11
8390: PPUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 70
8405: PUSH
8406: LD_INT 1
8408: GREATER
8409: IFFALSE 8418
8411: PUSH
8412: LD_EXP 8
8416: NOT
8417: AND
8418: IFFALSE 8433
8420: PUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 255
8428: PUSH
8429: LD_INT 2
8431: NONEQUAL
8432: AND
8433: IFFALSE 8446
8435: PUSH
8436: LD_EXP 25
8440: PPUSH
8441: CALL_OW 302
8445: AND
8446: IFFALSE 8459
8448: PUSH
8449: LD_EXP 23
8453: PPUSH
8454: CALL_OW 302
8458: AND
8459: IFFALSE 8604
8461: GO 8463
8463: DISABLE
// begin DialogueOn ;
8464: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8468: LD_INT 47
8470: PPUSH
8471: LD_INT 19
8473: PPUSH
8474: LD_INT 2
8476: PPUSH
8477: LD_INT 6
8479: NEG
8480: PPUSH
8481: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8485: LD_INT 47
8487: PPUSH
8488: LD_INT 19
8490: PPUSH
8491: LD_INT 2
8493: PPUSH
8494: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8498: LD_INT 34
8500: PPUSH
8501: LD_INT 32
8503: PPUSH
8504: LD_INT 2
8506: PPUSH
8507: LD_INT 6
8509: NEG
8510: PPUSH
8511: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8515: LD_INT 34
8517: PPUSH
8518: LD_INT 32
8520: PPUSH
8521: LD_INT 2
8523: PPUSH
8524: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8528: LD_EXP 25
8532: PPUSH
8533: LD_STRING DM-Prem-1
8535: PPUSH
8536: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8540: LD_EXP 23
8544: PPUSH
8545: LD_STRING DH-Prem-2
8547: PPUSH
8548: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8552: LD_EXP 23
8556: PPUSH
8557: LD_STRING DH-Prem-3
8559: PPUSH
8560: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8564: LD_EXP 25
8568: PPUSH
8569: LD_STRING DM-Prem-4
8571: PPUSH
8572: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8576: LD_EXP 25
8580: PPUSH
8581: LD_STRING DM-Prem-5
8583: PPUSH
8584: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8588: LD_EXP 24
8592: PPUSH
8593: LD_STRING DG-Prem-6
8595: PPUSH
8596: CALL_OW 88
// DialogueOff ;
8600: CALL_OW 7
// end ;
8604: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8605: LD_INT 5
8607: PPUSH
8608: LD_EXP 23
8612: PPUSH
8613: CALL_OW 292
8617: IFFALSE 8639
8619: PUSH
8620: LD_EXP 23
8624: PPUSH
8625: LD_EXP 27
8629: PPUSH
8630: CALL_OW 296
8634: PUSH
8635: LD_INT 6
8637: LESS
8638: AND
8639: IFFALSE 8647
8641: PUSH
8642: LD_EXP 8
8646: AND
8647: IFFALSE 8656
8649: PUSH
8650: LD_EXP 14
8654: NOT
8655: AND
8656: IFFALSE 8794
8658: GO 8660
8660: DISABLE
8661: LD_INT 0
8663: PPUSH
// begin attackDeltaAllowed := true ;
8664: LD_ADDR_EXP 14
8668: PUSH
8669: LD_INT 1
8671: ST_TO_ADDR
// InGameOn ;
8672: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8676: LD_EXP 23
8680: PPUSH
8681: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8685: LD_INT 10
8687: PPUSH
8688: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8692: LD_EXP 27
8696: PPUSH
8697: LD_EXP 23
8701: PPUSH
8702: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8706: LD_EXP 23
8710: PPUSH
8711: LD_EXP 27
8715: PPUSH
8716: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8720: LD_EXP 23
8724: PPUSH
8725: LD_STRING DH-1-return
8727: PPUSH
8728: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8732: LD_EXP 27
8736: PPUSH
8737: LD_STRING DA-1-return
8739: PPUSH
8740: CALL_OW 88
// InGameOff ;
8744: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8748: LD_STRING ODelta
8750: PPUSH
8751: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8755: LD_ADDR_VAR 0 1
8759: PUSH
8760: LD_INT 22
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: PUSH
8775: FOR_IN
8776: IFFALSE 8792
// SetSide ( i , 2 ) ;
8778: LD_VAR 0 1
8782: PPUSH
8783: LD_INT 2
8785: PPUSH
8786: CALL_OW 235
8790: GO 8775
8792: POP
8793: POP
// end ;
8794: PPOPN 1
8796: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8797: LD_EXP 10
8801: IFFALSE 8810
8803: PUSH
8804: LD_EXP 14
8808: NOT
8809: AND
8810: IFFALSE 8823
8812: GO 8814
8814: DISABLE
// spottedBeforeRadio := true ;
8815: LD_ADDR_EXP 6
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
8823: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8824: LD_EXP 14
8828: IFFALSE 8841
8830: PUSH
8831: LD_EXP 30
8835: PPUSH
8836: CALL_OW 302
8840: AND
8841: IFFALSE 8856
8843: PUSH
8844: LD_INT 1
8846: PPUSH
8847: CALL_OW 255
8851: PUSH
8852: LD_INT 1
8854: EQUAL
8855: AND
8856: IFFALSE 8869
8858: PUSH
8859: LD_EXP 20
8863: PPUSH
8864: CALL_OW 302
8868: AND
8869: IFFALSE 8878
8871: PUSH
8872: LD_EXP 10
8876: NOT
8877: AND
8878: IFFALSE 10112
8880: GO 8882
8882: DISABLE
8883: LD_INT 0
8885: PPUSH
8886: PPUSH
8887: PPUSH
// begin trap := 0 ;
8888: LD_ADDR_EXP 17
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8896: LD_INT 420
8898: PPUSH
8899: CALL_OW 67
// DialogueOn ;
8903: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8907: LD_EXP 30
8911: PPUSH
8912: LD_STRING DMar-1-radio
8914: PPUSH
8915: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8919: LD_EXP 23
8923: PPUSH
8924: LD_STRING DH-1-radio
8926: PPUSH
8927: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8931: LD_EXP 30
8935: PPUSH
8936: LD_STRING DMar-2-radio
8938: PPUSH
8939: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DH-2-radio
8950: PPUSH
8951: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8955: LD_EXP 26
8959: PPUSH
8960: CALL_OW 302
8964: IFTRUE 8977
8966: PUSH
8967: LD_EXP 29
8971: PPUSH
8972: CALL_OW 302
8976: OR
8977: IFFALSE 10112
// begin case Query ( Q1Trap ) of 1 :
8979: LD_STRING Q1Trap
8981: PPUSH
8982: CALL_OW 97
8986: PUSH
8987: LD_INT 1
8989: DOUBLE
8990: EQUAL
8991: IFTRUE 8995
8993: GO 9201
8995: POP
// begin if IsOk ( Kamil ) then
8996: LD_EXP 26
9000: PPUSH
9001: CALL_OW 302
9005: IFFALSE 9084
// begin Say ( Kamil , DKam-2-radio ) ;
9007: LD_EXP 26
9011: PPUSH
9012: LD_STRING DKam-2-radio
9014: PPUSH
9015: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
9019: LD_EXP 26
9023: PPUSH
9024: LD_STRING DKam-3-radio
9026: PPUSH
9027: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
9031: LD_EXP 20
9035: PPUSH
9036: LD_STRING DDelta-3-radio
9038: PPUSH
9039: CALL 78396 0 2
// dwait ( 0 0$01 ) ;
9043: LD_INT 35
9045: PPUSH
9046: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
9050: LD_EXP 23
9054: PPUSH
9055: LD_STRING DH-3-radio
9057: PPUSH
9058: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
9062: LD_EXP 26
9066: PPUSH
9067: LD_STRING DKam-4-radio
9069: PPUSH
9070: CALL_OW 88
// trap := 1 ;
9074: LD_ADDR_EXP 17
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// end else
9082: GO 9195
// begin Say ( Sophia , DS-1-radio ) ;
9084: LD_EXP 29
9088: PPUSH
9089: LD_STRING DS-1-radio
9091: PPUSH
9092: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
9096: LD_EXP 29
9100: PPUSH
9101: LD_STRING DS-2-radio
9103: PPUSH
9104: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
9108: LD_EXP 20
9112: PPUSH
9113: LD_STRING DDelta-2-radio-s
9115: PPUSH
9116: CALL 78396 0 2
// Say ( Sophia , DS-3-radio ) ;
9120: LD_EXP 29
9124: PPUSH
9125: LD_STRING DS-3-radio
9127: PPUSH
9128: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
9132: LD_EXP 20
9136: PPUSH
9137: LD_STRING DDelta-3-radio-s
9139: PPUSH
9140: CALL 78396 0 2
// Say ( Sophia , DS-4-radio-s ) ;
9144: LD_EXP 29
9148: PPUSH
9149: LD_STRING DS-4-radio-s
9151: PPUSH
9152: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
9156: LD_EXP 20
9160: PPUSH
9161: LD_STRING DDelta-4-radio-s
9163: PPUSH
9164: CALL 78396 0 2
// dwait ( 0 0$01 ) ;
9168: LD_INT 35
9170: PPUSH
9171: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
9175: LD_EXP 23
9179: PPUSH
9180: LD_STRING DH-1-trap
9182: PPUSH
9183: CALL_OW 88
// trap := 0 ;
9187: LD_ADDR_EXP 17
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// end ; DialogueOff ;
9195: CALL_OW 7
// end ; 2 :
9199: GO 9219
9201: LD_INT 2
9203: DOUBLE
9204: EQUAL
9205: IFTRUE 9209
9207: GO 9218
9209: POP
// begin DialogueOff ;
9210: CALL_OW 7
// exit ;
9214: GO 10112
// end ; end ;
9216: GO 9219
9218: POP
// if trap = 1 then
9219: LD_EXP 17
9223: PUSH
9224: LD_INT 1
9226: EQUAL
9227: IFFALSE 9681
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
9229: LD_INT 64
9231: PPUSH
9232: LD_INT 32
9234: PPUSH
9235: LD_INT 2
9237: PPUSH
9238: LD_INT 8
9240: PPUSH
9241: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
9245: LD_INT 64
9247: PPUSH
9248: LD_INT 32
9250: PPUSH
9251: CALL_OW 84
// tmp := [ ] ;
9255: LD_ADDR_VAR 0 3
9259: PUSH
9260: EMPTY
9261: ST_TO_ADDR
// k := 3 ;
9262: LD_ADDR_VAR 0 2
9266: PUSH
9267: LD_INT 3
9269: ST_TO_ADDR
// if usForces < 3 then
9270: LD_EXP 21
9274: PUSH
9275: LD_INT 3
9277: LESS
9278: IFFALSE 9290
// k := usForces ;
9280: LD_ADDR_VAR 0 2
9284: PUSH
9285: LD_EXP 21
9289: ST_TO_ADDR
// for i := 1 to k do
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: DOUBLE
9296: LD_INT 1
9298: DEC
9299: ST_TO_ADDR
9300: LD_VAR 0 2
9304: PUSH
9305: FOR_TO
9306: IFFALSE 9361
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9308: LD_ADDR_VAR 0 3
9312: PUSH
9313: LD_VAR 0 3
9317: PPUSH
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 1
9325: PLUS
9326: PPUSH
9327: LD_EXP 21
9331: PUSH
9332: LD_INT 1
9334: ARRAY
9335: PPUSH
9336: CALL_OW 1
9340: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9341: LD_ADDR_EXP 21
9345: PUSH
9346: LD_EXP 21
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 3
9358: ST_TO_ADDR
// end ;
9359: GO 9305
9361: POP
9362: POP
// usPatrol := tmp ;
9363: LD_ADDR_EXP 16
9367: PUSH
9368: LD_VAR 0 3
9372: ST_TO_ADDR
// for i in tmp do
9373: LD_ADDR_VAR 0 1
9377: PUSH
9378: LD_VAR 0 3
9382: PUSH
9383: FOR_IN
9384: IFFALSE 9514
// begin if IsInUnit ( i ) then
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL_OW 310
9395: IFFALSE 9406
// ComExitBuilding ( i ) ;
9397: LD_VAR 0 1
9401: PPUSH
9402: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9406: LD_VAR 0 1
9410: PPUSH
9411: LD_INT 63
9413: PPUSH
9414: LD_INT 31
9416: PPUSH
9417: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_INT 70
9428: PPUSH
9429: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9433: LD_VAR 0 1
9437: PPUSH
9438: LD_INT 103
9440: PPUSH
9441: LD_INT 43
9443: PPUSH
9444: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 105
9455: PPUSH
9456: CALL_OW 202
// if Difficulty > 1 then
9460: LD_OWVAR 67
9464: PUSH
9465: LD_INT 1
9467: GREATER
9468: IFFALSE 9485
// AddComAgressiveMove ( i , 114 , 69 ) ;
9470: LD_VAR 0 1
9474: PPUSH
9475: LD_INT 114
9477: PPUSH
9478: LD_INT 69
9480: PPUSH
9481: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 105
9492: PPUSH
9493: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 42
9504: PPUSH
9505: LD_INT 20
9507: PPUSH
9508: CALL_OW 174
// end ;
9512: GO 9383
9514: POP
9515: POP
// wait ( 0 0$8 ) ;
9516: LD_INT 280
9518: PPUSH
9519: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9523: LD_INT 64
9525: PPUSH
9526: LD_INT 32
9528: PPUSH
9529: LD_INT 2
9531: PPUSH
9532: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9536: LD_INT 35
9538: PPUSH
9539: CALL_OW 67
// for i in tmp do
9543: LD_ADDR_VAR 0 1
9547: PUSH
9548: LD_VAR 0 3
9552: PUSH
9553: FOR_IN
9554: IFFALSE 9585
// if IsDead ( i ) then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 301
9565: IFFALSE 9583
// tmp := tmp diff i ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_VAR 0 1
9581: DIFF
9582: ST_TO_ADDR
9583: GO 9553
9585: POP
9586: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9587: LD_VAR 0 3
9591: NOT
9592: IFTRUE 9638
9594: PUSH
9595: LD_VAR 0 3
9599: PPUSH
9600: LD_INT 95
9602: PUSH
9603: LD_INT 7
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 60
9615: PUSH
9616: EMPTY
9617: LIST
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PPUSH
9627: CALL_OW 72
9631: PUSH
9632: LD_VAR 0 3
9636: EQUAL
9637: OR
9638: IFFALSE 9536
// if tmp then
9640: LD_VAR 0 3
9644: IFFALSE 9671
// begin usPatrol := [ ] ;
9646: LD_ADDR_EXP 16
9650: PUSH
9651: EMPTY
9652: ST_TO_ADDR
// usForces := usForces union tmp ;
9653: LD_ADDR_EXP 21
9657: PUSH
9658: LD_EXP 21
9662: PUSH
9663: LD_VAR 0 3
9667: UNION
9668: ST_TO_ADDR
// end else
9669: GO 9679
// trickyMove := true ;
9671: LD_ADDR_EXP 15
9675: PUSH
9676: LD_INT 1
9678: ST_TO_ADDR
// end else
9679: GO 10112
// begin tmp := [ ] ;
9681: LD_ADDR_VAR 0 3
9685: PUSH
9686: EMPTY
9687: ST_TO_ADDR
// k := 4 ;
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 4
9695: ST_TO_ADDR
// if usForces < 4 then
9696: LD_EXP 21
9700: PUSH
9701: LD_INT 4
9703: LESS
9704: IFFALSE 9716
// k := usForces ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_EXP 21
9715: ST_TO_ADDR
// for i := 1 to k do
9716: LD_ADDR_VAR 0 1
9720: PUSH
9721: DOUBLE
9722: LD_INT 1
9724: DEC
9725: ST_TO_ADDR
9726: LD_VAR 0 2
9730: PUSH
9731: FOR_TO
9732: IFFALSE 9787
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9734: LD_ADDR_VAR 0 3
9738: PUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 1
9751: PLUS
9752: PPUSH
9753: LD_EXP 21
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PPUSH
9762: CALL_OW 1
9766: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9767: LD_ADDR_EXP 21
9771: PUSH
9772: LD_EXP 21
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 3
9784: ST_TO_ADDR
// end ;
9785: GO 9731
9787: POP
9788: POP
// if Lynch then
9789: LD_EXP 20
9793: IFFALSE 9811
// tmp := tmp ^ Lynch ;
9795: LD_ADDR_VAR 0 3
9799: PUSH
9800: LD_VAR 0 3
9804: PUSH
9805: LD_EXP 20
9809: ADD
9810: ST_TO_ADDR
// usPatrol := tmp ;
9811: LD_ADDR_EXP 16
9815: PUSH
9816: LD_VAR 0 3
9820: ST_TO_ADDR
// for i in tmp do
9821: LD_ADDR_VAR 0 1
9825: PUSH
9826: LD_VAR 0 3
9830: PUSH
9831: FOR_IN
9832: IFFALSE 9925
// begin if IsInUnit ( i ) then
9834: LD_VAR 0 1
9838: PPUSH
9839: CALL_OW 310
9843: IFFALSE 9854
// ComExitBuilding ( i ) ;
9845: LD_VAR 0 1
9849: PPUSH
9850: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 69
9861: PPUSH
9862: LD_INT 15
9864: PPUSH
9865: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_INT 700
9876: PPUSH
9877: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 55
9888: PPUSH
9889: LD_INT 43
9891: PPUSH
9892: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9896: LD_VAR 0 1
9900: PPUSH
9901: LD_INT 700
9903: PPUSH
9904: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9908: LD_VAR 0 1
9912: PPUSH
9913: LD_INT 42
9915: PPUSH
9916: LD_INT 20
9918: PPUSH
9919: CALL_OW 174
// end ;
9923: GO 9831
9925: POP
9926: POP
// repeat wait ( 0 0$1 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// for i in tmp do
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: LD_VAR 0 3
9943: PUSH
9944: FOR_IN
9945: IFFALSE 9976
// if IsDead ( i ) then
9947: LD_VAR 0 1
9951: PPUSH
9952: CALL_OW 301
9956: IFFALSE 9974
// tmp := tmp diff i ;
9958: LD_ADDR_VAR 0 3
9962: PUSH
9963: LD_VAR 0 3
9967: PUSH
9968: LD_VAR 0 1
9972: DIFF
9973: ST_TO_ADDR
9974: GO 9944
9976: POP
9977: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9978: LD_VAR 0 3
9982: NOT
9983: IFTRUE 10029
9985: PUSH
9986: LD_VAR 0 3
9990: PPUSH
9991: LD_INT 95
9993: PUSH
9994: LD_INT 7
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: LD_INT 60
10006: PUSH
10007: EMPTY
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 72
10022: PUSH
10023: LD_VAR 0 3
10027: EQUAL
10028: OR
10029: IFFALSE 9927
// if not tmp then
10031: LD_VAR 0 3
10035: NOT
10036: IFFALSE 10048
// trickyMove := true else
10038: LD_ADDR_EXP 15
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
10046: GO 10055
// usPatrol := [ ] ;
10048: LD_ADDR_EXP 16
10052: PUSH
10053: EMPTY
10054: ST_TO_ADDR
// if tmp diff Lynch then
10055: LD_VAR 0 3
10059: PUSH
10060: LD_EXP 20
10064: DIFF
10065: IFFALSE 10089
// usForces := usForces union ( tmp diff Lynch ) ;
10067: LD_ADDR_EXP 21
10071: PUSH
10072: LD_EXP 21
10076: PUSH
10077: LD_VAR 0 3
10081: PUSH
10082: LD_EXP 20
10086: DIFF
10087: UNION
10088: ST_TO_ADDR
// if IsOk ( Lynch ) then
10089: LD_EXP 20
10093: PPUSH
10094: CALL_OW 302
10098: IFFALSE 10112
// ComEnterUnit ( Lynch , Delta ) ;
10100: LD_EXP 20
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 120
// end ; end ; end ;
10112: PPOPN 3
10114: END
// every 0 0$1 trigger trickyMove do
10115: LD_EXP 15
10119: IFFALSE 10131
10121: GO 10123
10123: DISABLE
// SetAchievement ( ACH_TRAP ) ;
10124: LD_STRING ACH_TRAP
10126: PPUSH
10127: CALL_OW 543
10131: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
10132: LD_INT 22
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 23
10144: PUSH
10145: LD_INT 1
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 21
10154: PUSH
10155: LD_INT 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 69
10171: IFFALSE 10183
10173: GO 10175
10175: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
10176: LD_STRING ACH_SCRAP
10178: PPUSH
10179: CALL_OW 543
10183: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
10184: LD_EXP 16
10188: PPUSH
10189: LD_INT 101
10191: PUSH
10192: LD_INT 2
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PPUSH
10199: CALL_OW 72
10203: IFFALSE 10219
10205: PUSH
10206: LD_INT 1
10208: PPUSH
10209: LD_EXP 23
10213: PPUSH
10214: CALL_OW 292
10218: AND
10219: IFFALSE 10354
10221: GO 10223
10223: DISABLE
// begin if not trap then
10224: LD_EXP 17
10228: NOT
10229: IFFALSE 10257
// begin Say ( Heike , DH-2-trap ) ;
10231: LD_EXP 23
10235: PPUSH
10236: LD_STRING DH-2-trap
10238: PPUSH
10239: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
10243: LD_EXP 25
10247: PPUSH
10248: LD_STRING DM-2-trap
10250: PPUSH
10251: CALL_OW 88
// end else
10255: GO 10269
// begin Say ( Heike , DH-1-trap-a ) ;
10257: LD_EXP 23
10261: PPUSH
10262: LD_STRING DH-1-trap-a
10264: PPUSH
10265: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10269: LD_INT 35
10271: PPUSH
10272: CALL_OW 67
// until trickyMove ;
10276: LD_EXP 15
10280: IFFALSE 10269
// Say ( Heike , DH-3-trap ) ;
10282: LD_EXP 23
10286: PPUSH
10287: LD_STRING DH-3-trap
10289: PPUSH
10290: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
10294: LD_EXP 24
10298: PPUSH
10299: CALL_OW 302
10303: IFFALSE 10316
10305: PUSH
10306: LD_EXP 28
10310: PPUSH
10311: CALL_OW 302
10315: AND
10316: IFFALSE 10354
// begin Say ( Givi , DG-3-trap ) ;
10318: LD_EXP 24
10322: PPUSH
10323: LD_STRING DG-3-trap
10325: PPUSH
10326: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
10330: LD_EXP 28
10334: PPUSH
10335: LD_STRING DK-3-trap
10337: PPUSH
10338: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
10342: LD_EXP 24
10346: PPUSH
10347: LD_STRING DG-4-trap
10349: PPUSH
10350: CALL_OW 88
// end ; end ;
10354: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 255
10362: PUSH
10363: LD_INT 2
10365: EQUAL
10366: IFFALSE 10374
10368: PUSH
10369: LD_EXP 14
10373: AND
10374: IFFALSE 10533
10376: GO 10378
10378: DISABLE
10379: LD_INT 0
10381: PPUSH
10382: PPUSH
// begin if not IsOk ( Kaia ) then
10383: LD_EXP 28
10387: PPUSH
10388: CALL_OW 302
10392: NOT
10393: IFFALSE 10397
// exit ;
10395: GO 10533
// if tick < 5 5$00 then
10397: LD_OWVAR 1
10401: PUSH
10402: LD_INT 10500
10404: LESS
10405: IFFALSE 10414
// SetAchievement ( ACH_DELTA ) ;
10407: LD_STRING ACH_DELTA
10409: PPUSH
10410: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10414: LD_EXP 28
10418: PPUSH
10419: LD_STRING DK-1-capture
10421: PPUSH
10422: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10426: LD_EXP 23
10430: PPUSH
10431: LD_STRING DH-1-capture
10433: PPUSH
10434: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10438: LD_ADDR_VAR 0 2
10442: PUSH
10443: LD_INT 22
10445: PUSH
10446: LD_INT 1
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 25
10455: PUSH
10456: LD_INT 1
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: ST_TO_ADDR
// if not tmp then
10472: LD_VAR 0 2
10476: NOT
10477: IFFALSE 10481
// exit ;
10479: GO 10533
// for i in tmp do
10481: LD_ADDR_VAR 0 1
10485: PUSH
10486: LD_VAR 0 2
10490: PUSH
10491: FOR_IN
10492: IFFALSE 10531
// begin if IsInUnit ( i ) then
10494: LD_VAR 0 1
10498: PPUSH
10499: CALL_OW 310
10503: IFFALSE 10514
// ComExitBuilding ( i ) ;
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 38
10521: PPUSH
10522: LD_INT 23
10524: PPUSH
10525: CALL_OW 174
// end ;
10529: GO 10491
10531: POP
10532: POP
// end ;
10533: PPOPN 2
10535: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10536: LD_INT 3
10538: PPUSH
10539: CALL_OW 255
10543: PUSH
10544: LD_INT 2
10546: EQUAL
10547: IFFALSE 10555
10549: PUSH
10550: LD_EXP 14
10554: AND
10555: IFFALSE 10600
10557: GO 10559
10559: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10560: LD_INT 1
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 322
// DialogueOn ;
10573: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10577: LD_EXP 27
10581: PPUSH
10582: LD_STRING DA-1-capture
10584: PPUSH
10585: CALL_OW 88
// DialogueOff ;
10589: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10593: LD_STRING OTame
10595: PPUSH
10596: CALL_OW 337
// end ;
10600: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10601: LD_INT 1
10603: PPUSH
10604: LD_INT 2
10606: PPUSH
10607: CALL_OW 321
10611: PUSH
10612: LD_INT 2
10614: EQUAL
10615: IFFALSE 10623
10617: PUSH
10618: LD_EXP 14
10622: AND
10623: IFFALSE 10774
10625: GO 10627
10627: DISABLE
// begin DialogueOn ;
10628: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10632: LD_EXP 27
10636: PPUSH
10637: LD_STRING DA-1-ape
10639: PPUSH
10640: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10644: LD_EXP 23
10648: PPUSH
10649: LD_STRING DH-1-ape
10651: PPUSH
10652: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10656: LD_EXP 27
10660: PPUSH
10661: LD_STRING DA-2-ape
10663: PPUSH
10664: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10668: LD_EXP 27
10672: PPUSH
10673: LD_STRING DA-3-ape
10675: PPUSH
10676: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10680: LD_EXP 23
10684: PPUSH
10685: LD_STRING DH-3-ape
10687: PPUSH
10688: CALL_OW 88
// DialogueOff ;
10692: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10696: LD_INT 22
10698: PUSH
10699: LD_INT 0
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PPUSH
10720: CALL_OW 69
10724: PUSH
10725: LD_INT 0
10727: EQUAL
10728: IFFALSE 10740
// SpawnApeman ( forest , 2 ) ;
10730: LD_INT 1
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10740: LD_INT 35
10742: PPUSH
10743: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10747: LD_INT 25
10749: PUSH
10750: LD_INT 12
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: PUSH
10762: LD_INT 0
10764: EQUAL
10765: IFFALSE 10740
// YouLost ( Ape ) ;
10767: LD_STRING Ape
10769: PPUSH
10770: CALL_OW 104
// end ;
10774: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10775: LD_EXP 18
10779: PUSH
10780: LD_INT 3
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: ARRAY
10803: GREATEREQUAL
10804: IFFALSE 10855
10806: GO 10808
10808: DISABLE
// begin wait ( 0 0$5 ) ;
10809: LD_INT 175
10811: PPUSH
10812: CALL_OW 67
// DialogueOn ;
10816: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10820: LD_EXP 27
10824: PPUSH
10825: LD_STRING DA-1-failure
10827: PPUSH
10828: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10832: LD_EXP 27
10836: PPUSH
10837: LD_STRING DA-2-failure
10839: PPUSH
10840: CALL_OW 88
// YouLost ( Failure ) ;
10844: LD_STRING Failure
10846: PPUSH
10847: CALL_OW 104
// DialogueOff ;
10851: CALL_OW 7
// end ;
10855: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10856: LD_EXP 28
10860: PPUSH
10861: CALL_OW 256
10865: PUSH
10866: LD_INT 3
10868: LESS
10869: IFFALSE 11002
10871: GO 10873
10873: DISABLE
// begin DialogueOn ;
10874: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10878: LD_EXP 28
10882: PPUSH
10883: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10887: LD_EXP 28
10891: PPUSH
10892: LD_STRING DK-Kaiaout-1
10894: PPUSH
10895: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10899: LD_EXP 23
10903: PPUSH
10904: LD_STRING DH-Kaiaout-2
10906: PPUSH
10907: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10911: LD_EXP 24
10915: PPUSH
10916: LD_STRING DG-Kaiaout-3
10918: PPUSH
10919: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10923: LD_EXP 23
10927: PPUSH
10928: LD_STRING DH-Kaiaout-4
10930: PPUSH
10931: CALL_OW 88
// if Givi then
10935: LD_EXP 24
10939: IFFALSE 10989
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10941: LD_EXP 24
10945: PPUSH
10946: LD_STRING DG-Kaiaout-5
10948: PPUSH
10949: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10953: LD_EXP 23
10957: PPUSH
10958: LD_STRING DH-Kaiaout-6
10960: PPUSH
10961: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10965: LD_EXP 24
10969: PPUSH
10970: LD_STRING DG-Kaiaout-7
10972: PPUSH
10973: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10977: LD_EXP 23
10981: PPUSH
10982: LD_STRING DH-Kaiaout-8
10984: PPUSH
10985: CALL_OW 88
// end ; DialogueOff ;
10989: CALL_OW 7
// KillUnit ( Kaia ) ;
10993: LD_EXP 28
10997: PPUSH
10998: CALL_OW 66
// end ;
11002: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var i , tmp , m1 , m2 , m3 ;
11003: LD_INT 22
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 23
11015: PUSH
11016: LD_INT 0
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11044
11033: PUSH
11034: LD_EXP 27
11038: PPUSH
11039: CALL_OW 302
11043: AND
11044: IFFALSE 11061
11046: PUSH
11047: LD_EXP 27
11051: PPUSH
11052: CALL_OW 255
11056: PUSH
11057: LD_INT 2
11059: EQUAL
11060: AND
11061: IFFALSE 12231
11063: GO 11065
11065: DISABLE
11066: LD_INT 0
11068: PPUSH
11069: PPUSH
11070: PPUSH
11071: PPUSH
11072: PPUSH
// begin m1 := false ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// m2 := false ;
11081: LD_ADDR_VAR 0 4
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// m3 := false ;
11089: LD_ADDR_VAR 0 5
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
11097: LD_INT 22
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 2
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 1
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 34
11122: PUSH
11123: LD_INT 4
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PPUSH
11139: CALL_OW 69
11143: IFFALSE 11324
// begin Query ( QEnemyInSight ) ;
11145: LD_STRING QEnemyInSight
11147: PPUSH
11148: CALL_OW 97
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) ;
11152: LD_ADDR_VAR 0 2
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 25
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 34
11182: PUSH
11183: LD_INT 4
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: ST_TO_ADDR
// for i in tmp do
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_VAR 0 2
11213: PUSH
11214: FOR_IN
11215: IFFALSE 11234
// ComAgressiveMove ( i , 36 , 22 ) ;
11217: LD_VAR 0 1
11221: PPUSH
11222: LD_INT 36
11224: PPUSH
11225: LD_INT 22
11227: PPUSH
11228: CALL_OW 114
11232: GO 11214
11234: POP
11235: POP
// repeat wait ( 0 0$1 ) ;
11236: LD_INT 35
11238: PPUSH
11239: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11243: LD_INT 22
11245: PUSH
11246: LD_INT 1
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 34
11268: PUSH
11269: LD_INT 4
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: NOT
11290: IFFALSE 11322
11292: PUSH
11293: LD_INT 22
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 23
11305: PUSH
11306: LD_INT 0
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: AND
11322: IFFALSE 11236
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11324: LD_ADDR_VAR 0 2
11328: PUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 23
11341: PUSH
11342: LD_INT 0
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: ST_TO_ADDR
// InGameOn ;
11358: CALL_OW 8
// if tick <= 10 10$00 then
11362: LD_OWVAR 1
11366: PUSH
11367: LD_INT 21000
11369: LESSEQUAL
11370: IFFALSE 11379
// SetAchievement ( ACH_HSPEED_2 ) ;
11372: LD_STRING ACH_HSPEED_2
11374: PPUSH
11375: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
11379: LD_VAR 0 2
11383: PPUSH
11384: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
11388: LD_VAR 0 2
11392: PPUSH
11393: LD_EXP 27
11397: PPUSH
11398: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
11402: LD_EXP 27
11406: PPUSH
11407: LD_VAR 0 2
11411: PPUSH
11412: CALL_OW 119
// wait ( 0 0$1 ) ;
11416: LD_INT 35
11418: PPUSH
11419: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
11423: LD_EXP 27
11427: PPUSH
11428: LD_STRING DA-1-tame-a
11430: PPUSH
11431: CALL_OW 88
// if IsOk ( Mike ) then
11435: LD_EXP 25
11439: PPUSH
11440: CALL_OW 302
11444: IFFALSE 11482
// begin Say ( Mike , DM-1-tame-a ) ;
11446: LD_EXP 25
11450: PPUSH
11451: LD_STRING DM-1-tame-a
11453: PPUSH
11454: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
11458: LD_EXP 29
11462: PPUSH
11463: LD_STRING DS-1-tame-a
11465: PPUSH
11466: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
11470: LD_EXP 25
11474: PPUSH
11475: LD_STRING DM-2-tame-a
11477: PPUSH
11478: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11482: LD_INT 105
11484: PPUSH
11485: CALL_OW 67
// PrepareFarmer ;
11489: CALL 12914 0 0
// CenterOnUnits ( Farmer ) ;
11493: LD_EXP 31
11497: PPUSH
11498: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11502: LD_EXP 31
11506: PPUSH
11507: LD_INT 105
11509: PPUSH
11510: LD_INT 59
11512: PPUSH
11513: CALL_OW 111
// AddComHold ( Farmer ) ;
11517: LD_EXP 31
11521: PPUSH
11522: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11526: LD_EXP 31
11530: PPUSH
11531: LD_STRING DF-1-end
11533: PPUSH
11534: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11538: LD_EXP 27
11542: PPUSH
11543: LD_STRING DA-1-end
11545: PPUSH
11546: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11550: LD_EXP 31
11554: PPUSH
11555: LD_STRING DF-2-end
11557: PPUSH
11558: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11562: LD_EXP 27
11566: PPUSH
11567: LD_STRING DA-2-end
11569: PPUSH
11570: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11574: LD_EXP 31
11578: PPUSH
11579: LD_STRING DF-3-end
11581: PPUSH
11582: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11586: LD_EXP 23
11590: PPUSH
11591: LD_STRING DH-3-end
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11598: LD_EXP 31
11602: PPUSH
11603: LD_STRING DF-4-end
11605: PPUSH
11606: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11610: LD_OWVAR 1
11614: PUSH
11615: LD_INT 52500
11617: PUSH
11618: LD_INT 47250
11620: PUSH
11621: LD_INT 42000
11623: PUSH
11624: LD_INT 31500
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_OWVAR 67
11637: ARRAY
11638: LESSEQUAL
11639: IFFALSE 11661
// begin m1 := true ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
11649: LD_STRING med1
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 101
// end else
11659: GO 11672
// AddMedal ( med1 , - 1 ) ;
11661: LD_STRING med1
11663: PPUSH
11664: LD_INT 1
11666: NEG
11667: PPUSH
11668: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11672: LD_INT 22
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 4
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: PUSH
11701: LD_INT 0
11703: EQUAL
11704: IFFALSE 11713
11706: PUSH
11707: LD_EXP 12
11711: NOT
11712: AND
11713: IFFALSE 11735
// begin m2 := true ;
11715: LD_ADDR_VAR 0 4
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
11723: LD_STRING med2
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 101
// end else
11733: GO 11746
// AddMedal ( med2 , - 1 ) ;
11735: LD_STRING med2
11737: PPUSH
11738: LD_INT 1
11740: NEG
11741: PPUSH
11742: CALL_OW 101
// if trickyMove then
11746: LD_EXP 15
11750: IFFALSE 11772
// begin m3 := true ;
11752: LD_ADDR_VAR 0 5
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
11760: LD_STRING med3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 101
// end else
11770: GO 11802
// if spottedBeforeRadio then
11772: LD_EXP 6
11776: IFFALSE 11791
// AddMedal ( med3 , - 2 ) else
11778: LD_STRING med3
11780: PPUSH
11781: LD_INT 2
11783: NEG
11784: PPUSH
11785: CALL_OW 101
11789: GO 11802
// AddMedal ( med3 , - 1 ) ;
11791: LD_STRING med3
11793: PPUSH
11794: LD_INT 1
11796: NEG
11797: PPUSH
11798: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
11802: LD_VAR 0 3
11806: IFFALSE 11814
11808: PUSH
11809: LD_VAR 0 4
11813: AND
11814: IFFALSE 11822
11816: PUSH
11817: LD_VAR 0 5
11821: AND
11822: IFFALSE 11834
11824: PUSH
11825: LD_OWVAR 67
11829: PUSH
11830: LD_INT 3
11832: GREATEREQUAL
11833: AND
11834: IFFALSE 11846
// SetAchievementEX ( ACH_ARES , 2 ) ;
11836: LD_STRING ACH_ARES
11838: PPUSH
11839: LD_INT 2
11841: PPUSH
11842: CALL_OW 564
// GiveMedals ( MAIN ) ;
11846: LD_STRING MAIN
11848: PPUSH
11849: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11853: LD_INT 22
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 23
11865: PUSH
11866: LD_INT 0
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PPUSH
11882: LD_STRING 02_ape
11884: PPUSH
11885: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11889: LD_ADDR_VAR 0 2
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 23
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 69
11933: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11934: LD_VAR 0 2
11938: PPUSH
11939: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11943: LD_EXP 23
11947: PPUSH
11948: LD_STRING 02_Heike
11950: PPUSH
11951: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11955: LD_EXP 27
11959: PPUSH
11960: LD_STRING 02_Aviradze
11962: PPUSH
11963: CALL_OW 38
// if Givi then
11967: LD_EXP 24
11971: IFFALSE 11985
// SaveCharacters ( Givi , 02_Givi ) ;
11973: LD_EXP 24
11977: PPUSH
11978: LD_STRING 02_Givi
11980: PPUSH
11981: CALL_OW 38
// if Mike then
11985: LD_EXP 25
11989: IFFALSE 12003
// SaveCharacters ( Mike , 02_Mike ) ;
11991: LD_EXP 25
11995: PPUSH
11996: LD_STRING 02_Mike
11998: PPUSH
11999: CALL_OW 38
// if Kamil then
12003: LD_EXP 26
12007: IFFALSE 12021
// SaveCharacters ( Kamil , 02_Kamil ) ;
12009: LD_EXP 26
12013: PPUSH
12014: LD_STRING 02_Kamil
12016: PPUSH
12017: CALL_OW 38
// if Kaia then
12021: LD_EXP 28
12025: IFFALSE 12039
// SaveCharacters ( Kaia , 02_Kaia ) ;
12027: LD_EXP 28
12031: PPUSH
12032: LD_STRING 02_Kaia
12034: PPUSH
12035: CALL_OW 38
// if Sophia then
12039: LD_EXP 29
12043: IFFALSE 12057
// SaveCharacters ( Sophia , 02_Sophia ) ;
12045: LD_EXP 29
12049: PPUSH
12050: LD_STRING 02_Sophia
12052: PPUSH
12053: CALL_OW 38
// if Markov then
12057: LD_EXP 30
12061: IFFALSE 12075
// SaveCharacters ( Markov , 02_Markov ) ;
12063: LD_EXP 30
12067: PPUSH
12068: LD_STRING 02_Markov
12070: PPUSH
12071: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
12075: LD_VAR 0 2
12079: PUSH
12080: LD_EXP 23
12084: PUSH
12085: LD_EXP 27
12089: PUSH
12090: LD_EXP 24
12094: PUSH
12095: LD_EXP 25
12099: PUSH
12100: LD_EXP 26
12104: PUSH
12105: LD_EXP 29
12109: PUSH
12110: LD_EXP 28
12114: PUSH
12115: LD_EXP 30
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: DIFF
12130: IFFALSE 12195
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
12132: LD_VAR 0 2
12136: PUSH
12137: LD_EXP 23
12141: PUSH
12142: LD_EXP 27
12146: PUSH
12147: LD_EXP 24
12151: PUSH
12152: LD_EXP 25
12156: PUSH
12157: LD_EXP 26
12161: PUSH
12162: LD_EXP 29
12166: PUSH
12167: LD_EXP 28
12171: PUSH
12172: LD_EXP 30
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: DIFF
12187: PPUSH
12188: LD_STRING 02_others
12190: PPUSH
12191: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
12195: LD_STRING enableBioCharacter(BIO_KRAY)
12197: PPUSH
12198: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
12202: LD_STRING enableBioCharacter(BIO_AVIR)
12204: PPUSH
12205: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
12209: LD_STRING enableBioCharacter(BIO_SOPH)
12211: PPUSH
12212: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
12216: LD_STRING enableBioCharacter(BIO_KAMI)
12218: PPUSH
12219: CALL_OW 559
// YouWin ;
12223: CALL_OW 103
// InGameOff ;
12227: CALL_OW 9
// end ;
12231: PPOPN 5
12233: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
12234: LD_OWVAR 1
12238: PUSH
12239: LD_EXP 13
12243: GREATER
12244: IFFALSE 12252
12246: PUSH
12247: LD_EXP 4
12251: AND
12252: IFFALSE 12292
12254: GO 12256
12256: DISABLE
// begin InGameOn ;
12257: CALL_OW 8
// PrepareFarmer ;
12261: CALL 12914 0 0
// CenterNowOnUnits ( Farmer ) ;
12265: LD_EXP 31
12269: PPUSH
12270: CALL_OW 87
// wait ( 0 0$2 ) ;
12274: LD_INT 70
12276: PPUSH
12277: CALL_OW 67
// YouLost ( Farmer ) ;
12281: LD_STRING Farmer
12283: PPUSH
12284: CALL_OW 104
// InGameOff ;
12288: CALL_OW 9
// end ; end_of_file
12292: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
12293: LD_INT 0
12295: PPUSH
12296: PPUSH
12297: PPUSH
// uc_side := 2 ;
12298: LD_ADDR_OWVAR 20
12302: PUSH
12303: LD_INT 2
12305: ST_TO_ADDR
// uc_nation := 2 ;
12306: LD_ADDR_OWVAR 21
12310: PUSH
12311: LD_INT 2
12313: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
12314: LD_ADDR_EXP 23
12318: PUSH
12319: LD_STRING Heike
12321: PPUSH
12322: LD_EXP 1
12326: NOT
12327: PPUSH
12328: LD_EXP 2
12332: PPUSH
12333: CALL 35951 0 3
12337: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
12338: LD_EXP 23
12342: PPUSH
12343: LD_INT 83
12345: PPUSH
12346: LD_INT 72
12348: PPUSH
12349: LD_INT 0
12351: PPUSH
12352: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
12356: LD_ADDR_EXP 24
12360: PUSH
12361: LD_STRING Givi
12363: PPUSH
12364: LD_EXP 1
12368: NOT
12369: PPUSH
12370: LD_EXP 2
12374: PPUSH
12375: CALL 35951 0 3
12379: ST_TO_ADDR
// if Givi then
12380: LD_EXP 24
12384: IFFALSE 12404
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
12386: LD_EXP 24
12390: PPUSH
12391: LD_INT 87
12393: PPUSH
12394: LD_INT 76
12396: PPUSH
12397: LD_INT 0
12399: PPUSH
12400: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
12404: LD_ADDR_EXP 25
12408: PUSH
12409: LD_STRING Mike
12411: PPUSH
12412: LD_EXP 1
12416: NOT
12417: PPUSH
12418: LD_EXP 2
12422: PPUSH
12423: CALL 35951 0 3
12427: ST_TO_ADDR
// if Mike then
12428: LD_EXP 25
12432: IFFALSE 12452
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
12434: LD_EXP 25
12438: PPUSH
12439: LD_INT 84
12441: PPUSH
12442: LD_INT 76
12444: PPUSH
12445: LD_INT 0
12447: PPUSH
12448: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
12452: LD_ADDR_EXP 26
12456: PUSH
12457: LD_STRING Kamil
12459: PPUSH
12460: LD_EXP 1
12464: NOT
12465: PPUSH
12466: LD_EXP 2
12470: PPUSH
12471: CALL 35951 0 3
12475: ST_TO_ADDR
// if Kamil then
12476: LD_EXP 26
12480: IFFALSE 12500
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
12482: LD_EXP 26
12486: PPUSH
12487: LD_INT 85
12489: PPUSH
12490: LD_INT 78
12492: PPUSH
12493: LD_INT 0
12495: PPUSH
12496: CALL_OW 48
// uc_side := 5 ;
12500: LD_ADDR_OWVAR 20
12504: PUSH
12505: LD_INT 5
12507: ST_TO_ADDR
// uc_nation := 2 ;
12508: LD_ADDR_OWVAR 21
12512: PUSH
12513: LD_INT 2
12515: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
12516: LD_ADDR_EXP 27
12520: PUSH
12521: LD_STRING Aviradze
12523: PPUSH
12524: LD_INT 0
12526: PPUSH
12527: LD_STRING 
12529: PPUSH
12530: CALL 35951 0 3
12534: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
12535: LD_EXP 27
12539: PPUSH
12540: LD_INT 106
12542: PPUSH
12543: LD_INT 38
12545: PPUSH
12546: LD_INT 0
12548: PPUSH
12549: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12553: LD_EXP 27
12557: PPUSH
12558: LD_INT 103
12560: PPUSH
12561: LD_INT 38
12563: PPUSH
12564: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12568: LD_ADDR_EXP 28
12572: PUSH
12573: LD_STRING Kaia
12575: PPUSH
12576: LD_INT 0
12578: PPUSH
12579: LD_STRING 
12581: PPUSH
12582: CALL 35951 0 3
12586: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12587: LD_EXP 28
12591: PPUSH
12592: LD_INT 100
12594: PPUSH
12595: LD_INT 34
12597: PPUSH
12598: LD_INT 0
12600: PPUSH
12601: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12605: LD_EXP 28
12609: PPUSH
12610: LD_INT 100
12612: PPUSH
12613: LD_INT 39
12615: PPUSH
12616: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12620: LD_ADDR_EXP 29
12624: PUSH
12625: LD_STRING Sophia
12627: PPUSH
12628: LD_INT 0
12630: PPUSH
12631: LD_STRING 
12633: PPUSH
12634: CALL 35951 0 3
12638: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12639: LD_EXP 29
12643: PPUSH
12644: LD_INT 109
12646: PPUSH
12647: LD_INT 50
12649: PPUSH
12650: LD_INT 0
12652: PPUSH
12653: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12657: LD_EXP 29
12661: PPUSH
12662: LD_INT 100
12664: PPUSH
12665: LD_INT 39
12667: PPUSH
12668: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12672: LD_ADDR_EXP 30
12676: PUSH
12677: LD_STRING Markov
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: LD_STRING 
12685: PPUSH
12686: CALL 35951 0 3
12690: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12691: LD_INT 5
12693: PPUSH
12694: LD_INT 3
12696: PPUSH
12697: LD_INT 21
12699: PPUSH
12700: LD_INT 1
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: LD_INT 42
12708: PPUSH
12709: LD_INT 90
12711: PUSH
12712: LD_INT 70
12714: PUSH
12715: LD_INT 60
12717: PUSH
12718: LD_INT 50
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_OWVAR 67
12731: ARRAY
12732: PPUSH
12733: CALL 241 0 7
// veh := CreateVehicle ;
12737: LD_ADDR_VAR 0 3
12741: PUSH
12742: CALL_OW 45
12746: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 109
12766: PPUSH
12767: LD_INT 38
12769: PPUSH
12770: LD_INT 0
12772: PPUSH
12773: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12777: LD_EXP 30
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12791: LD_EXP 28
12795: PPUSH
12796: LD_EXP 27
12800: PPUSH
12801: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12805: LD_EXP 27
12809: PPUSH
12810: LD_EXP 28
12814: PPUSH
12815: CALL_OW 119
// if not Givi or not Mike then
12819: LD_EXP 24
12823: NOT
12824: IFTRUE 12833
12826: PUSH
12827: LD_EXP 25
12831: NOT
12832: OR
12833: IFFALSE 12909
// begin uc_nation := 2 ;
12835: LD_ADDR_OWVAR 21
12839: PUSH
12840: LD_INT 2
12842: ST_TO_ADDR
// uc_side := 5 ;
12843: LD_ADDR_OWVAR 20
12847: PUSH
12848: LD_INT 5
12850: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12851: LD_INT 1
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 380
// un := CreateHuman ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: CALL_OW 44
12873: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12874: LD_VAR 0 2
12878: PPUSH
12879: LD_INT 112
12881: PPUSH
12882: LD_INT 40
12884: PPUSH
12885: LD_INT 3
12887: PPUSH
12888: LD_INT 0
12890: PPUSH
12891: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12895: LD_VAR 0 2
12899: PPUSH
12900: LD_EXP 27
12904: PPUSH
12905: CALL_OW 119
// end ; end ;
12909: LD_VAR 0 1
12913: RET
// export function PrepareFarmer ; var i ; begin
12914: LD_INT 0
12916: PPUSH
12917: PPUSH
// uc_side := 5 ;
12918: LD_ADDR_OWVAR 20
12922: PUSH
12923: LD_INT 5
12925: ST_TO_ADDR
// uc_nation := 2 ;
12926: LD_ADDR_OWVAR 21
12930: PUSH
12931: LD_INT 2
12933: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12934: LD_ADDR_EXP 31
12938: PUSH
12939: LD_STRING Farmer
12941: PPUSH
12942: LD_INT 0
12944: PPUSH
12945: LD_STRING 
12947: PPUSH
12948: CALL 35951 0 3
12952: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12953: LD_EXP 31
12957: PPUSH
12958: LD_INT 106
12960: PPUSH
12961: LD_INT 62
12963: PPUSH
12964: LD_INT 0
12966: PPUSH
12967: CALL_OW 48
// for i := 1 to 5 do
12971: LD_ADDR_VAR 0 2
12975: PUSH
12976: DOUBLE
12977: LD_INT 1
12979: DEC
12980: ST_TO_ADDR
12981: LD_INT 5
12983: PUSH
12984: FOR_TO
12985: IFFALSE 13023
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12987: LD_INT 1
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
13000: CALL_OW 44
13004: PPUSH
13005: LD_INT 105
13007: PPUSH
13008: LD_INT 64
13010: PPUSH
13011: LD_INT 3
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL_OW 50
// end ;
13021: GO 12984
13023: POP
13024: POP
// end ; end_of_file
13025: LD_VAR 0 1
13029: RET
// every 2 2$20 + 0 0$10 do
13030: GO 13032
13032: DISABLE
// begin enable ;
13033: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
13034: LD_INT 1
13036: PPUSH
13037: LD_INT 5
13039: PPUSH
13040: CALL_OW 12
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 55
// if tick > 6 6$00 then
13055: LD_OWVAR 1
13059: PUSH
13060: LD_INT 12600
13062: GREATER
13063: IFFALSE 13066
// disable ;
13065: DISABLE
// end ; end_of_file
13066: END
// on UnitDestroyed ( un ) do begin if un = Heike then
13067: LD_VAR 0 1
13071: PUSH
13072: LD_EXP 23
13076: EQUAL
13077: IFFALSE 13086
// YouLost ( Heike ) ;
13079: LD_STRING Heike
13081: PPUSH
13082: CALL_OW 104
// if un = Aviradze then
13086: LD_VAR 0 1
13090: PUSH
13091: LD_EXP 27
13095: EQUAL
13096: IFFALSE 13105
// YouLost ( Aviradze ) ;
13098: LD_STRING Aviradze
13100: PPUSH
13101: CALL_OW 104
// if un = usLab then
13105: LD_VAR 0 1
13109: PUSH
13110: LD_INT 3
13112: EQUAL
13113: IFFALSE 13122
// YouLost ( Lab ) ;
13115: LD_STRING Lab
13117: PPUSH
13118: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
13122: LD_VAR 0 1
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 21
13139: PUSH
13140: LD_INT 1
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 23
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: PPUSH
13162: CALL_OW 69
13166: PUSH
13167: LD_EXP 23
13171: PUSH
13172: LD_EXP 27
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: DIFF
13181: IN
13182: IFFALSE 13190
13184: PUSH
13185: LD_EXP 4
13189: AND
13190: IFFALSE 13206
// lostCounter := lostCounter + 1 ;
13192: LD_ADDR_EXP 18
13196: PUSH
13197: LD_EXP 18
13201: PUSH
13202: LD_INT 1
13204: PLUS
13205: ST_TO_ADDR
// if un in usSci then
13206: LD_VAR 0 1
13210: PUSH
13211: LD_EXP 22
13215: IN
13216: IFFALSE 13248
// begin usSci := usSci diff un ;
13218: LD_ADDR_EXP 22
13222: PUSH
13223: LD_EXP 22
13227: PUSH
13228: LD_VAR 0 1
13232: DIFF
13233: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
13234: LD_ADDR_EXP 9
13238: PUSH
13239: LD_EXP 9
13243: PUSH
13244: LD_INT 1
13246: PLUS
13247: ST_TO_ADDR
// end ; end ;
13248: PPOPN 1
13250: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
13251: LD_INT 23
13253: PUSH
13254: LD_INT 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 69
13279: PUSH
13280: LD_INT 0
13282: EQUAL
13283: IFFALSE 13319
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 3
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: PUSH
13315: LD_INT 0
13317: EQUAL
13318: AND
13319: IFFALSE 13331
13321: GO 13323
13323: DISABLE
// YouLost ( Eng ) ;
13324: LD_STRING Eng
13326: PPUSH
13327: CALL_OW 104
13331: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
13332: LD_VAR 0 1
13336: PUSH
13337: LD_INT 2
13339: EQUAL
13340: IFFALSE 13352
13342: PUSH
13343: LD_VAR 0 2
13347: PUSH
13348: LD_INT 5
13350: EQUAL
13351: AND
13352: IFFALSE 13361
// YouLost ( FriendlyFire ) ;
13354: LD_STRING FriendlyFire
13356: PPUSH
13357: CALL_OW 104
// end ;
13361: PPOPN 2
13363: END
// on EnterBuilding ( b , un ) do begin if un = Gladstone then
13364: LD_VAR 0 2
13368: PUSH
13369: LD_EXP 19
13373: EQUAL
13374: IFFALSE 13388
// SetTag ( Gladstone , 0 ) ;
13376: LD_EXP 19
13380: PPUSH
13381: LD_INT 0
13383: PPUSH
13384: CALL_OW 109
// end ; end_of_file end_of_file
13388: PPOPN 2
13390: END
// export globalGameSaveCounter ; every 0 0$1 do
13391: GO 13393
13393: DISABLE
// begin enable ;
13394: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13395: LD_STRING updateTimer(
13397: PUSH
13398: LD_OWVAR 1
13402: STR
13403: PUSH
13404: LD_STRING );
13406: STR
13407: PPUSH
13408: CALL_OW 559
// end ;
13412: END
// every 0 0$1 do
13413: GO 13415
13415: DISABLE
// begin globalGameSaveCounter := 0 ;
13416: LD_ADDR_EXP 32
13420: PUSH
13421: LD_INT 0
13423: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13424: LD_STRING setGameSaveCounter(0)
13426: PPUSH
13427: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13431: LD_STRING initStreamRollete();
13433: PPUSH
13434: CALL_OW 559
// InitStreamMode ;
13438: CALL 14790 0 0
// DefineStreamItems ( false ) ;
13442: LD_INT 0
13444: PPUSH
13445: CALL 15254 0 1
// end ;
13449: END
// export function SOS_MapStart ( ) ; begin
13450: LD_INT 0
13452: PPUSH
// if streamModeActive then
13453: LD_EXP 33
13457: IFFALSE 13466
// DefineStreamItems ( true ) ;
13459: LD_INT 1
13461: PPUSH
13462: CALL 15254 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
13466: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
13468: PPUSH
13469: CALL_OW 559
// UpdateLuaVariables ( ) ;
13473: CALL 13490 0 0
// UpdateFactoryWaypoints ( ) ;
13477: CALL 28376 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13481: CALL 28628 0 0
// end ;
13485: LD_VAR 0 1
13489: RET
// function UpdateLuaVariables ( ) ; begin
13490: LD_INT 0
13492: PPUSH
// if globalGameSaveCounter then
13493: LD_EXP 32
13497: IFFALSE 13531
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13499: LD_ADDR_EXP 32
13503: PUSH
13504: LD_EXP 32
13508: PPUSH
13509: CALL 75524 0 1
13513: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13514: LD_STRING setGameSaveCounter(
13516: PUSH
13517: LD_EXP 32
13521: STR
13522: PUSH
13523: LD_STRING )
13525: STR
13526: PPUSH
13527: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13531: LD_STRING setGameDifficulty(
13533: PUSH
13534: LD_OWVAR 67
13538: STR
13539: PUSH
13540: LD_STRING )
13542: STR
13543: PPUSH
13544: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
13548: LD_STRING displayDifficulty(
13550: PUSH
13551: LD_OWVAR 67
13555: STR
13556: PUSH
13557: LD_STRING )
13559: STR
13560: PPUSH
13561: CALL_OW 559
// end ;
13565: LD_VAR 0 1
13569: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13570: LD_INT 0
13572: PPUSH
// if p2 = stream_mode then
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 100
13580: EQUAL
13581: IFFALSE 14584
// begin if not StreamModeActive then
13583: LD_EXP 33
13587: NOT
13588: IFFALSE 13598
// StreamModeActive := true ;
13590: LD_ADDR_EXP 33
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// if p3 = 0 then
13598: LD_VAR 0 3
13602: PUSH
13603: LD_INT 0
13605: EQUAL
13606: IFFALSE 13612
// InitStreamMode ;
13608: CALL 14790 0 0
// if p3 = 1 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 1
13619: EQUAL
13620: IFFALSE 13630
// sRocket := true ;
13622: LD_ADDR_EXP 38
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 2 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 2
13637: EQUAL
13638: IFFALSE 13648
// sSpeed := true ;
13640: LD_ADDR_EXP 37
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 3 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 3
13655: EQUAL
13656: IFFALSE 13666
// sEngine := true ;
13658: LD_ADDR_EXP 39
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 4 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 4
13673: EQUAL
13674: IFFALSE 13684
// sSpec := true ;
13676: LD_ADDR_EXP 36
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 5 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 5
13691: EQUAL
13692: IFFALSE 13702
// sLevel := true ;
13694: LD_ADDR_EXP 40
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 6 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 6
13709: EQUAL
13710: IFFALSE 13720
// sArmoury := true ;
13712: LD_ADDR_EXP 41
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 7 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 7
13727: EQUAL
13728: IFFALSE 13738
// sRadar := true ;
13730: LD_ADDR_EXP 42
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 8 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 8
13745: EQUAL
13746: IFFALSE 13756
// sBunker := true ;
13748: LD_ADDR_EXP 43
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 9 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 9
13763: EQUAL
13764: IFFALSE 13774
// sHack := true ;
13766: LD_ADDR_EXP 44
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 10 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 10
13781: EQUAL
13782: IFFALSE 13792
// sFire := true ;
13784: LD_ADDR_EXP 45
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 11 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 11
13799: EQUAL
13800: IFFALSE 13810
// sRefresh := true ;
13802: LD_ADDR_EXP 46
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 12 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 12
13817: EQUAL
13818: IFFALSE 13828
// sExp := true ;
13820: LD_ADDR_EXP 47
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 13 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 13
13835: EQUAL
13836: IFFALSE 13846
// sDepot := true ;
13838: LD_ADDR_EXP 48
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 14 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 14
13853: EQUAL
13854: IFFALSE 13864
// sFlag := true ;
13856: LD_ADDR_EXP 49
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 15 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 15
13871: EQUAL
13872: IFFALSE 13882
// sKamikadze := true ;
13874: LD_ADDR_EXP 57
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 16 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 16
13889: EQUAL
13890: IFFALSE 13900
// sTroll := true ;
13892: LD_ADDR_EXP 58
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 17 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 17
13907: EQUAL
13908: IFFALSE 13918
// sSlow := true ;
13910: LD_ADDR_EXP 59
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 18 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 18
13925: EQUAL
13926: IFFALSE 13936
// sLack := true ;
13928: LD_ADDR_EXP 60
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 19 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 19
13943: EQUAL
13944: IFFALSE 13954
// sTank := true ;
13946: LD_ADDR_EXP 62
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 20 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 20
13961: EQUAL
13962: IFFALSE 13972
// sRemote := true ;
13964: LD_ADDR_EXP 63
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 21 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 21
13979: EQUAL
13980: IFFALSE 13990
// sPowell := true ;
13982: LD_ADDR_EXP 64
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// if p3 = 22 then
13990: LD_VAR 0 3
13994: PUSH
13995: LD_INT 22
13997: EQUAL
13998: IFFALSE 14008
// sTeleport := true ;
14000: LD_ADDR_EXP 67
14004: PUSH
14005: LD_INT 1
14007: ST_TO_ADDR
// if p3 = 23 then
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 23
14015: EQUAL
14016: IFFALSE 14026
// sOilTower := true ;
14018: LD_ADDR_EXP 69
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// if p3 = 24 then
14026: LD_VAR 0 3
14030: PUSH
14031: LD_INT 24
14033: EQUAL
14034: IFFALSE 14044
// sShovel := true ;
14036: LD_ADDR_EXP 70
14040: PUSH
14041: LD_INT 1
14043: ST_TO_ADDR
// if p3 = 25 then
14044: LD_VAR 0 3
14048: PUSH
14049: LD_INT 25
14051: EQUAL
14052: IFFALSE 14062
// sSheik := true ;
14054: LD_ADDR_EXP 71
14058: PUSH
14059: LD_INT 1
14061: ST_TO_ADDR
// if p3 = 26 then
14062: LD_VAR 0 3
14066: PUSH
14067: LD_INT 26
14069: EQUAL
14070: IFFALSE 14080
// sEarthquake := true ;
14072: LD_ADDR_EXP 73
14076: PUSH
14077: LD_INT 1
14079: ST_TO_ADDR
// if p3 = 27 then
14080: LD_VAR 0 3
14084: PUSH
14085: LD_INT 27
14087: EQUAL
14088: IFFALSE 14098
// sAI := true ;
14090: LD_ADDR_EXP 74
14094: PUSH
14095: LD_INT 1
14097: ST_TO_ADDR
// if p3 = 28 then
14098: LD_VAR 0 3
14102: PUSH
14103: LD_INT 28
14105: EQUAL
14106: IFFALSE 14116
// sCargo := true ;
14108: LD_ADDR_EXP 77
14112: PUSH
14113: LD_INT 1
14115: ST_TO_ADDR
// if p3 = 29 then
14116: LD_VAR 0 3
14120: PUSH
14121: LD_INT 29
14123: EQUAL
14124: IFFALSE 14134
// sDLaser := true ;
14126: LD_ADDR_EXP 78
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// if p3 = 30 then
14134: LD_VAR 0 3
14138: PUSH
14139: LD_INT 30
14141: EQUAL
14142: IFFALSE 14152
// sExchange := true ;
14144: LD_ADDR_EXP 79
14148: PUSH
14149: LD_INT 1
14151: ST_TO_ADDR
// if p3 = 31 then
14152: LD_VAR 0 3
14156: PUSH
14157: LD_INT 31
14159: EQUAL
14160: IFFALSE 14170
// sFac := true ;
14162: LD_ADDR_EXP 80
14166: PUSH
14167: LD_INT 1
14169: ST_TO_ADDR
// if p3 = 32 then
14170: LD_VAR 0 3
14174: PUSH
14175: LD_INT 32
14177: EQUAL
14178: IFFALSE 14188
// sPower := true ;
14180: LD_ADDR_EXP 81
14184: PUSH
14185: LD_INT 1
14187: ST_TO_ADDR
// if p3 = 33 then
14188: LD_VAR 0 3
14192: PUSH
14193: LD_INT 33
14195: EQUAL
14196: IFFALSE 14206
// sRandom := true ;
14198: LD_ADDR_EXP 82
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// if p3 = 34 then
14206: LD_VAR 0 3
14210: PUSH
14211: LD_INT 34
14213: EQUAL
14214: IFFALSE 14224
// sShield := true ;
14216: LD_ADDR_EXP 83
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// if p3 = 35 then
14224: LD_VAR 0 3
14228: PUSH
14229: LD_INT 35
14231: EQUAL
14232: IFFALSE 14242
// sTime := true ;
14234: LD_ADDR_EXP 84
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// if p3 = 36 then
14242: LD_VAR 0 3
14246: PUSH
14247: LD_INT 36
14249: EQUAL
14250: IFFALSE 14260
// sTools := true ;
14252: LD_ADDR_EXP 85
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// if p3 = 101 then
14260: LD_VAR 0 3
14264: PUSH
14265: LD_INT 101
14267: EQUAL
14268: IFFALSE 14278
// sSold := true ;
14270: LD_ADDR_EXP 50
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// if p3 = 102 then
14278: LD_VAR 0 3
14282: PUSH
14283: LD_INT 102
14285: EQUAL
14286: IFFALSE 14296
// sDiff := true ;
14288: LD_ADDR_EXP 51
14292: PUSH
14293: LD_INT 1
14295: ST_TO_ADDR
// if p3 = 103 then
14296: LD_VAR 0 3
14300: PUSH
14301: LD_INT 103
14303: EQUAL
14304: IFFALSE 14314
// sFog := true ;
14306: LD_ADDR_EXP 54
14310: PUSH
14311: LD_INT 1
14313: ST_TO_ADDR
// if p3 = 104 then
14314: LD_VAR 0 3
14318: PUSH
14319: LD_INT 104
14321: EQUAL
14322: IFFALSE 14332
// sReset := true ;
14324: LD_ADDR_EXP 55
14328: PUSH
14329: LD_INT 1
14331: ST_TO_ADDR
// if p3 = 105 then
14332: LD_VAR 0 3
14336: PUSH
14337: LD_INT 105
14339: EQUAL
14340: IFFALSE 14350
// sSun := true ;
14342: LD_ADDR_EXP 56
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// if p3 = 106 then
14350: LD_VAR 0 3
14354: PUSH
14355: LD_INT 106
14357: EQUAL
14358: IFFALSE 14368
// sTiger := true ;
14360: LD_ADDR_EXP 52
14364: PUSH
14365: LD_INT 1
14367: ST_TO_ADDR
// if p3 = 107 then
14368: LD_VAR 0 3
14372: PUSH
14373: LD_INT 107
14375: EQUAL
14376: IFFALSE 14386
// sBomb := true ;
14378: LD_ADDR_EXP 53
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// if p3 = 108 then
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 108
14393: EQUAL
14394: IFFALSE 14404
// sWound := true ;
14396: LD_ADDR_EXP 61
14400: PUSH
14401: LD_INT 1
14403: ST_TO_ADDR
// if p3 = 109 then
14404: LD_VAR 0 3
14408: PUSH
14409: LD_INT 109
14411: EQUAL
14412: IFFALSE 14422
// sBetray := true ;
14414: LD_ADDR_EXP 65
14418: PUSH
14419: LD_INT 1
14421: ST_TO_ADDR
// if p3 = 110 then
14422: LD_VAR 0 3
14426: PUSH
14427: LD_INT 110
14429: EQUAL
14430: IFFALSE 14440
// sContamin := true ;
14432: LD_ADDR_EXP 66
14436: PUSH
14437: LD_INT 1
14439: ST_TO_ADDR
// if p3 = 111 then
14440: LD_VAR 0 3
14444: PUSH
14445: LD_INT 111
14447: EQUAL
14448: IFFALSE 14458
// sOil := true ;
14450: LD_ADDR_EXP 68
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// if p3 = 112 then
14458: LD_VAR 0 3
14462: PUSH
14463: LD_INT 112
14465: EQUAL
14466: IFFALSE 14476
// sStu := true ;
14468: LD_ADDR_EXP 72
14472: PUSH
14473: LD_INT 1
14475: ST_TO_ADDR
// if p3 = 113 then
14476: LD_VAR 0 3
14480: PUSH
14481: LD_INT 113
14483: EQUAL
14484: IFFALSE 14494
// sBazooka := true ;
14486: LD_ADDR_EXP 75
14490: PUSH
14491: LD_INT 1
14493: ST_TO_ADDR
// if p3 = 114 then
14494: LD_VAR 0 3
14498: PUSH
14499: LD_INT 114
14501: EQUAL
14502: IFFALSE 14512
// sMortar := true ;
14504: LD_ADDR_EXP 76
14508: PUSH
14509: LD_INT 1
14511: ST_TO_ADDR
// if p3 = 115 then
14512: LD_VAR 0 3
14516: PUSH
14517: LD_INT 115
14519: EQUAL
14520: IFFALSE 14530
// sRanger := true ;
14522: LD_ADDR_EXP 86
14526: PUSH
14527: LD_INT 1
14529: ST_TO_ADDR
// if p3 = 116 then
14530: LD_VAR 0 3
14534: PUSH
14535: LD_INT 116
14537: EQUAL
14538: IFFALSE 14548
// sComputer := true ;
14540: LD_ADDR_EXP 87
14544: PUSH
14545: LD_INT 1
14547: ST_TO_ADDR
// if p3 = 117 then
14548: LD_VAR 0 3
14552: PUSH
14553: LD_INT 117
14555: EQUAL
14556: IFFALSE 14566
// s30 := true ;
14558: LD_ADDR_EXP 88
14562: PUSH
14563: LD_INT 1
14565: ST_TO_ADDR
// if p3 = 118 then
14566: LD_VAR 0 3
14570: PUSH
14571: LD_INT 118
14573: EQUAL
14574: IFFALSE 14584
// s60 := true ;
14576: LD_ADDR_EXP 89
14580: PUSH
14581: LD_INT 1
14583: ST_TO_ADDR
// end ; if p2 = hack_mode then
14584: LD_VAR 0 2
14588: PUSH
14589: LD_INT 101
14591: EQUAL
14592: IFFALSE 14720
// begin case p3 of 1 :
14594: LD_VAR 0 3
14598: PUSH
14599: LD_INT 1
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14614
14607: POP
// hHackUnlimitedResources ; 2 :
14608: CALL 26983 0 0
14612: GO 14720
14614: LD_INT 2
14616: DOUBLE
14617: EQUAL
14618: IFTRUE 14622
14620: GO 14629
14622: POP
// hHackSetLevel10 ; 3 :
14623: CALL 27116 0 0
14627: GO 14720
14629: LD_INT 3
14631: DOUBLE
14632: EQUAL
14633: IFTRUE 14637
14635: GO 14644
14637: POP
// hHackSetLevel10YourUnits ; 4 :
14638: CALL 27201 0 0
14642: GO 14720
14644: LD_INT 4
14646: DOUBLE
14647: EQUAL
14648: IFTRUE 14652
14650: GO 14659
14652: POP
// hHackInvincible ; 5 :
14653: CALL 27649 0 0
14657: GO 14720
14659: LD_INT 5
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14674
14667: POP
// hHackInvisible ; 6 :
14668: CALL 27760 0 0
14672: GO 14720
14674: LD_INT 6
14676: DOUBLE
14677: EQUAL
14678: IFTRUE 14682
14680: GO 14689
14682: POP
// hHackChangeYourSide ; 7 :
14683: CALL 27817 0 0
14687: GO 14720
14689: LD_INT 7
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14704
14697: POP
// hHackChangeUnitSide ; 8 :
14698: CALL 27859 0 0
14702: GO 14720
14704: LD_INT 8
14706: DOUBLE
14707: EQUAL
14708: IFTRUE 14712
14710: GO 14719
14712: POP
// hHackFog ; end ;
14713: CALL 27960 0 0
14717: GO 14720
14719: POP
// end ; if p2 = game_save_mode then
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 102
14727: EQUAL
14728: IFFALSE 14785
// begin if p3 = 1 then
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: EQUAL
14738: IFFALSE 14750
// globalGameSaveCounter := p4 ;
14740: LD_ADDR_EXP 32
14744: PUSH
14745: LD_VAR 0 4
14749: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14750: LD_VAR 0 3
14754: PUSH
14755: LD_INT 2
14757: EQUAL
14758: IFFALSE 14766
14760: PUSH
14761: LD_EXP 32
14765: AND
14766: IFFALSE 14785
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14768: LD_STRING setGameSaveCounter(
14770: PUSH
14771: LD_EXP 32
14775: STR
14776: PUSH
14777: LD_STRING )
14779: STR
14780: PPUSH
14781: CALL_OW 559
// end ; end ;
14785: LD_VAR 0 7
14789: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14790: LD_INT 0
14792: PPUSH
// streamModeActive := false ;
14793: LD_ADDR_EXP 33
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// normalCounter := 36 ;
14801: LD_ADDR_EXP 34
14805: PUSH
14806: LD_INT 36
14808: ST_TO_ADDR
// hardcoreCounter := 18 ;
14809: LD_ADDR_EXP 35
14813: PUSH
14814: LD_INT 18
14816: ST_TO_ADDR
// sRocket := false ;
14817: LD_ADDR_EXP 38
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// sSpeed := false ;
14825: LD_ADDR_EXP 37
14829: PUSH
14830: LD_INT 0
14832: ST_TO_ADDR
// sEngine := false ;
14833: LD_ADDR_EXP 39
14837: PUSH
14838: LD_INT 0
14840: ST_TO_ADDR
// sSpec := false ;
14841: LD_ADDR_EXP 36
14845: PUSH
14846: LD_INT 0
14848: ST_TO_ADDR
// sLevel := false ;
14849: LD_ADDR_EXP 40
14853: PUSH
14854: LD_INT 0
14856: ST_TO_ADDR
// sArmoury := false ;
14857: LD_ADDR_EXP 41
14861: PUSH
14862: LD_INT 0
14864: ST_TO_ADDR
// sRadar := false ;
14865: LD_ADDR_EXP 42
14869: PUSH
14870: LD_INT 0
14872: ST_TO_ADDR
// sBunker := false ;
14873: LD_ADDR_EXP 43
14877: PUSH
14878: LD_INT 0
14880: ST_TO_ADDR
// sHack := false ;
14881: LD_ADDR_EXP 44
14885: PUSH
14886: LD_INT 0
14888: ST_TO_ADDR
// sFire := false ;
14889: LD_ADDR_EXP 45
14893: PUSH
14894: LD_INT 0
14896: ST_TO_ADDR
// sRefresh := false ;
14897: LD_ADDR_EXP 46
14901: PUSH
14902: LD_INT 0
14904: ST_TO_ADDR
// sExp := false ;
14905: LD_ADDR_EXP 47
14909: PUSH
14910: LD_INT 0
14912: ST_TO_ADDR
// sDepot := false ;
14913: LD_ADDR_EXP 48
14917: PUSH
14918: LD_INT 0
14920: ST_TO_ADDR
// sFlag := false ;
14921: LD_ADDR_EXP 49
14925: PUSH
14926: LD_INT 0
14928: ST_TO_ADDR
// sKamikadze := false ;
14929: LD_ADDR_EXP 57
14933: PUSH
14934: LD_INT 0
14936: ST_TO_ADDR
// sTroll := false ;
14937: LD_ADDR_EXP 58
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// sSlow := false ;
14945: LD_ADDR_EXP 59
14949: PUSH
14950: LD_INT 0
14952: ST_TO_ADDR
// sLack := false ;
14953: LD_ADDR_EXP 60
14957: PUSH
14958: LD_INT 0
14960: ST_TO_ADDR
// sTank := false ;
14961: LD_ADDR_EXP 62
14965: PUSH
14966: LD_INT 0
14968: ST_TO_ADDR
// sRemote := false ;
14969: LD_ADDR_EXP 63
14973: PUSH
14974: LD_INT 0
14976: ST_TO_ADDR
// sPowell := false ;
14977: LD_ADDR_EXP 64
14981: PUSH
14982: LD_INT 0
14984: ST_TO_ADDR
// sTeleport := false ;
14985: LD_ADDR_EXP 67
14989: PUSH
14990: LD_INT 0
14992: ST_TO_ADDR
// sOilTower := false ;
14993: LD_ADDR_EXP 69
14997: PUSH
14998: LD_INT 0
15000: ST_TO_ADDR
// sShovel := false ;
15001: LD_ADDR_EXP 70
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// sSheik := false ;
15009: LD_ADDR_EXP 71
15013: PUSH
15014: LD_INT 0
15016: ST_TO_ADDR
// sEarthquake := false ;
15017: LD_ADDR_EXP 73
15021: PUSH
15022: LD_INT 0
15024: ST_TO_ADDR
// sAI := false ;
15025: LD_ADDR_EXP 74
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// sCargo := false ;
15033: LD_ADDR_EXP 77
15037: PUSH
15038: LD_INT 0
15040: ST_TO_ADDR
// sDLaser := false ;
15041: LD_ADDR_EXP 78
15045: PUSH
15046: LD_INT 0
15048: ST_TO_ADDR
// sExchange := false ;
15049: LD_ADDR_EXP 79
15053: PUSH
15054: LD_INT 0
15056: ST_TO_ADDR
// sFac := false ;
15057: LD_ADDR_EXP 80
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// sPower := false ;
15065: LD_ADDR_EXP 81
15069: PUSH
15070: LD_INT 0
15072: ST_TO_ADDR
// sRandom := false ;
15073: LD_ADDR_EXP 82
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// sShield := false ;
15081: LD_ADDR_EXP 83
15085: PUSH
15086: LD_INT 0
15088: ST_TO_ADDR
// sTime := false ;
15089: LD_ADDR_EXP 84
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// sTools := false ;
15097: LD_ADDR_EXP 85
15101: PUSH
15102: LD_INT 0
15104: ST_TO_ADDR
// sSold := false ;
15105: LD_ADDR_EXP 50
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// sDiff := false ;
15113: LD_ADDR_EXP 51
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// sFog := false ;
15121: LD_ADDR_EXP 54
15125: PUSH
15126: LD_INT 0
15128: ST_TO_ADDR
// sReset := false ;
15129: LD_ADDR_EXP 55
15133: PUSH
15134: LD_INT 0
15136: ST_TO_ADDR
// sSun := false ;
15137: LD_ADDR_EXP 56
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// sTiger := false ;
15145: LD_ADDR_EXP 52
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// sBomb := false ;
15153: LD_ADDR_EXP 53
15157: PUSH
15158: LD_INT 0
15160: ST_TO_ADDR
// sWound := false ;
15161: LD_ADDR_EXP 61
15165: PUSH
15166: LD_INT 0
15168: ST_TO_ADDR
// sBetray := false ;
15169: LD_ADDR_EXP 65
15173: PUSH
15174: LD_INT 0
15176: ST_TO_ADDR
// sContamin := false ;
15177: LD_ADDR_EXP 66
15181: PUSH
15182: LD_INT 0
15184: ST_TO_ADDR
// sOil := false ;
15185: LD_ADDR_EXP 68
15189: PUSH
15190: LD_INT 0
15192: ST_TO_ADDR
// sStu := false ;
15193: LD_ADDR_EXP 72
15197: PUSH
15198: LD_INT 0
15200: ST_TO_ADDR
// sBazooka := false ;
15201: LD_ADDR_EXP 75
15205: PUSH
15206: LD_INT 0
15208: ST_TO_ADDR
// sMortar := false ;
15209: LD_ADDR_EXP 76
15213: PUSH
15214: LD_INT 0
15216: ST_TO_ADDR
// sRanger := false ;
15217: LD_ADDR_EXP 86
15221: PUSH
15222: LD_INT 0
15224: ST_TO_ADDR
// sComputer := false ;
15225: LD_ADDR_EXP 87
15229: PUSH
15230: LD_INT 0
15232: ST_TO_ADDR
// s30 := false ;
15233: LD_ADDR_EXP 88
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// s60 := false ;
15241: LD_ADDR_EXP 89
15245: PUSH
15246: LD_INT 0
15248: ST_TO_ADDR
// end ;
15249: LD_VAR 0 1
15253: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
15254: LD_INT 0
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// result := [ ] ;
15263: LD_ADDR_VAR 0 2
15267: PUSH
15268: EMPTY
15269: ST_TO_ADDR
// if campaign_id = 1 then
15270: LD_OWVAR 69
15274: PUSH
15275: LD_INT 1
15277: EQUAL
15278: IFFALSE 18444
// begin case mission_number of 1 :
15280: LD_OWVAR 70
15284: PUSH
15285: LD_INT 1
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15369
15293: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
15294: LD_ADDR_VAR 0 2
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 4
15304: PUSH
15305: LD_INT 11
15307: PUSH
15308: LD_INT 12
15310: PUSH
15311: LD_INT 15
15313: PUSH
15314: LD_INT 16
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 23
15322: PUSH
15323: LD_INT 26
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 101
15339: PUSH
15340: LD_INT 102
15342: PUSH
15343: LD_INT 106
15345: PUSH
15346: LD_INT 116
15348: PUSH
15349: LD_INT 117
15351: PUSH
15352: LD_INT 118
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: ST_TO_ADDR
15367: GO 18442
15369: LD_INT 2
15371: DOUBLE
15372: EQUAL
15373: IFTRUE 15377
15375: GO 15461
15377: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: LD_INT 4
15388: PUSH
15389: LD_INT 11
15391: PUSH
15392: LD_INT 12
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 16
15400: PUSH
15401: LD_INT 22
15403: PUSH
15404: LD_INT 23
15406: PUSH
15407: LD_INT 26
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 101
15423: PUSH
15424: LD_INT 102
15426: PUSH
15427: LD_INT 105
15429: PUSH
15430: LD_INT 106
15432: PUSH
15433: LD_INT 108
15435: PUSH
15436: LD_INT 116
15438: PUSH
15439: LD_INT 117
15441: PUSH
15442: LD_INT 118
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: ST_TO_ADDR
15459: GO 18442
15461: LD_INT 3
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15557
15469: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15470: LD_ADDR_VAR 0 2
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: LD_INT 4
15480: PUSH
15481: LD_INT 5
15483: PUSH
15484: LD_INT 11
15486: PUSH
15487: LD_INT 12
15489: PUSH
15490: LD_INT 15
15492: PUSH
15493: LD_INT 16
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 26
15501: PUSH
15502: LD_INT 36
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 101
15519: PUSH
15520: LD_INT 102
15522: PUSH
15523: LD_INT 105
15525: PUSH
15526: LD_INT 106
15528: PUSH
15529: LD_INT 108
15531: PUSH
15532: LD_INT 116
15534: PUSH
15535: LD_INT 117
15537: PUSH
15538: LD_INT 118
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: ST_TO_ADDR
15555: GO 18442
15557: LD_INT 4
15559: DOUBLE
15560: EQUAL
15561: IFTRUE 15565
15563: GO 15661
15565: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: LD_INT 4
15576: PUSH
15577: LD_INT 5
15579: PUSH
15580: LD_INT 8
15582: PUSH
15583: LD_INT 11
15585: PUSH
15586: LD_INT 12
15588: PUSH
15589: LD_INT 15
15591: PUSH
15592: LD_INT 16
15594: PUSH
15595: LD_INT 22
15597: PUSH
15598: LD_INT 23
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 36
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 101
15623: PUSH
15624: LD_INT 102
15626: PUSH
15627: LD_INT 105
15629: PUSH
15630: LD_INT 106
15632: PUSH
15633: LD_INT 108
15635: PUSH
15636: LD_INT 116
15638: PUSH
15639: LD_INT 117
15641: PUSH
15642: LD_INT 118
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: ST_TO_ADDR
15659: GO 18442
15661: LD_INT 5
15663: DOUBLE
15664: EQUAL
15665: IFTRUE 15669
15667: GO 15781
15669: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15670: LD_ADDR_VAR 0 2
15674: PUSH
15675: LD_INT 2
15677: PUSH
15678: LD_INT 4
15680: PUSH
15681: LD_INT 5
15683: PUSH
15684: LD_INT 6
15686: PUSH
15687: LD_INT 8
15689: PUSH
15690: LD_INT 11
15692: PUSH
15693: LD_INT 12
15695: PUSH
15696: LD_INT 15
15698: PUSH
15699: LD_INT 16
15701: PUSH
15702: LD_INT 22
15704: PUSH
15705: LD_INT 23
15707: PUSH
15708: LD_INT 25
15710: PUSH
15711: LD_INT 26
15713: PUSH
15714: LD_INT 36
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 101
15735: PUSH
15736: LD_INT 102
15738: PUSH
15739: LD_INT 105
15741: PUSH
15742: LD_INT 106
15744: PUSH
15745: LD_INT 108
15747: PUSH
15748: LD_INT 109
15750: PUSH
15751: LD_INT 112
15753: PUSH
15754: LD_INT 116
15756: PUSH
15757: LD_INT 117
15759: PUSH
15760: LD_INT 118
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: ST_TO_ADDR
15779: GO 18442
15781: LD_INT 6
15783: DOUBLE
15784: EQUAL
15785: IFTRUE 15789
15787: GO 15921
15789: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15790: LD_ADDR_VAR 0 2
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 4
15800: PUSH
15801: LD_INT 5
15803: PUSH
15804: LD_INT 6
15806: PUSH
15807: LD_INT 8
15809: PUSH
15810: LD_INT 11
15812: PUSH
15813: LD_INT 12
15815: PUSH
15816: LD_INT 15
15818: PUSH
15819: LD_INT 16
15821: PUSH
15822: LD_INT 20
15824: PUSH
15825: LD_INT 21
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_INT 23
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 26
15839: PUSH
15840: LD_INT 30
15842: PUSH
15843: LD_INT 31
15845: PUSH
15846: LD_INT 32
15848: PUSH
15849: LD_INT 36
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 101
15875: PUSH
15876: LD_INT 102
15878: PUSH
15879: LD_INT 105
15881: PUSH
15882: LD_INT 106
15884: PUSH
15885: LD_INT 108
15887: PUSH
15888: LD_INT 109
15890: PUSH
15891: LD_INT 112
15893: PUSH
15894: LD_INT 116
15896: PUSH
15897: LD_INT 117
15899: PUSH
15900: LD_INT 118
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: ST_TO_ADDR
15919: GO 18442
15921: LD_INT 7
15923: DOUBLE
15924: EQUAL
15925: IFTRUE 15929
15927: GO 16041
15929: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: LD_INT 2
15937: PUSH
15938: LD_INT 4
15940: PUSH
15941: LD_INT 5
15943: PUSH
15944: LD_INT 7
15946: PUSH
15947: LD_INT 11
15949: PUSH
15950: LD_INT 12
15952: PUSH
15953: LD_INT 15
15955: PUSH
15956: LD_INT 16
15958: PUSH
15959: LD_INT 20
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 25
15973: PUSH
15974: LD_INT 26
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 101
15995: PUSH
15996: LD_INT 102
15998: PUSH
15999: LD_INT 103
16001: PUSH
16002: LD_INT 105
16004: PUSH
16005: LD_INT 106
16007: PUSH
16008: LD_INT 108
16010: PUSH
16011: LD_INT 112
16013: PUSH
16014: LD_INT 116
16016: PUSH
16017: LD_INT 117
16019: PUSH
16020: LD_INT 118
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: ST_TO_ADDR
16039: GO 18442
16041: LD_INT 8
16043: DOUBLE
16044: EQUAL
16045: IFTRUE 16049
16047: GO 16189
16049: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: LD_INT 4
16060: PUSH
16061: LD_INT 5
16063: PUSH
16064: LD_INT 6
16066: PUSH
16067: LD_INT 7
16069: PUSH
16070: LD_INT 8
16072: PUSH
16073: LD_INT 11
16075: PUSH
16076: LD_INT 12
16078: PUSH
16079: LD_INT 15
16081: PUSH
16082: LD_INT 16
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_INT 23
16096: PUSH
16097: LD_INT 25
16099: PUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 36
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 101
16139: PUSH
16140: LD_INT 102
16142: PUSH
16143: LD_INT 103
16145: PUSH
16146: LD_INT 105
16148: PUSH
16149: LD_INT 106
16151: PUSH
16152: LD_INT 108
16154: PUSH
16155: LD_INT 109
16157: PUSH
16158: LD_INT 112
16160: PUSH
16161: LD_INT 116
16163: PUSH
16164: LD_INT 117
16166: PUSH
16167: LD_INT 118
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: ST_TO_ADDR
16187: GO 18442
16189: LD_INT 9
16191: DOUBLE
16192: EQUAL
16193: IFTRUE 16197
16195: GO 16345
16197: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: LD_INT 4
16208: PUSH
16209: LD_INT 5
16211: PUSH
16212: LD_INT 6
16214: PUSH
16215: LD_INT 7
16217: PUSH
16218: LD_INT 8
16220: PUSH
16221: LD_INT 11
16223: PUSH
16224: LD_INT 12
16226: PUSH
16227: LD_INT 15
16229: PUSH
16230: LD_INT 16
16232: PUSH
16233: LD_INT 20
16235: PUSH
16236: LD_INT 21
16238: PUSH
16239: LD_INT 22
16241: PUSH
16242: LD_INT 23
16244: PUSH
16245: LD_INT 25
16247: PUSH
16248: LD_INT 26
16250: PUSH
16251: LD_INT 28
16253: PUSH
16254: LD_INT 30
16256: PUSH
16257: LD_INT 31
16259: PUSH
16260: LD_INT 32
16262: PUSH
16263: LD_INT 36
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 101
16291: PUSH
16292: LD_INT 102
16294: PUSH
16295: LD_INT 103
16297: PUSH
16298: LD_INT 105
16300: PUSH
16301: LD_INT 106
16303: PUSH
16304: LD_INT 108
16306: PUSH
16307: LD_INT 109
16309: PUSH
16310: LD_INT 112
16312: PUSH
16313: LD_INT 114
16315: PUSH
16316: LD_INT 116
16318: PUSH
16319: LD_INT 117
16321: PUSH
16322: LD_INT 118
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: ST_TO_ADDR
16343: GO 18442
16345: LD_INT 10
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16549
16353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: LD_INT 4
16364: PUSH
16365: LD_INT 5
16367: PUSH
16368: LD_INT 6
16370: PUSH
16371: LD_INT 7
16373: PUSH
16374: LD_INT 8
16376: PUSH
16377: LD_INT 9
16379: PUSH
16380: LD_INT 10
16382: PUSH
16383: LD_INT 11
16385: PUSH
16386: LD_INT 12
16388: PUSH
16389: LD_INT 13
16391: PUSH
16392: LD_INT 14
16394: PUSH
16395: LD_INT 15
16397: PUSH
16398: LD_INT 16
16400: PUSH
16401: LD_INT 17
16403: PUSH
16404: LD_INT 18
16406: PUSH
16407: LD_INT 19
16409: PUSH
16410: LD_INT 20
16412: PUSH
16413: LD_INT 21
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 23
16421: PUSH
16422: LD_INT 24
16424: PUSH
16425: LD_INT 25
16427: PUSH
16428: LD_INT 26
16430: PUSH
16431: LD_INT 28
16433: PUSH
16434: LD_INT 30
16436: PUSH
16437: LD_INT 31
16439: PUSH
16440: LD_INT 32
16442: PUSH
16443: LD_INT 36
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 101
16479: PUSH
16480: LD_INT 102
16482: PUSH
16483: LD_INT 103
16485: PUSH
16486: LD_INT 104
16488: PUSH
16489: LD_INT 105
16491: PUSH
16492: LD_INT 106
16494: PUSH
16495: LD_INT 107
16497: PUSH
16498: LD_INT 108
16500: PUSH
16501: LD_INT 109
16503: PUSH
16504: LD_INT 110
16506: PUSH
16507: LD_INT 111
16509: PUSH
16510: LD_INT 112
16512: PUSH
16513: LD_INT 114
16515: PUSH
16516: LD_INT 116
16518: PUSH
16519: LD_INT 117
16521: PUSH
16522: LD_INT 118
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: ST_TO_ADDR
16547: GO 18442
16549: LD_INT 11
16551: DOUBLE
16552: EQUAL
16553: IFTRUE 16557
16555: GO 16761
16557: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16558: LD_ADDR_VAR 0 2
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 3
16568: PUSH
16569: LD_INT 4
16571: PUSH
16572: LD_INT 5
16574: PUSH
16575: LD_INT 6
16577: PUSH
16578: LD_INT 7
16580: PUSH
16581: LD_INT 8
16583: PUSH
16584: LD_INT 9
16586: PUSH
16587: LD_INT 10
16589: PUSH
16590: LD_INT 11
16592: PUSH
16593: LD_INT 12
16595: PUSH
16596: LD_INT 13
16598: PUSH
16599: LD_INT 14
16601: PUSH
16602: LD_INT 15
16604: PUSH
16605: LD_INT 16
16607: PUSH
16608: LD_INT 17
16610: PUSH
16611: LD_INT 18
16613: PUSH
16614: LD_INT 19
16616: PUSH
16617: LD_INT 20
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 22
16625: PUSH
16626: LD_INT 23
16628: PUSH
16629: LD_INT 24
16631: PUSH
16632: LD_INT 25
16634: PUSH
16635: LD_INT 26
16637: PUSH
16638: LD_INT 28
16640: PUSH
16641: LD_INT 30
16643: PUSH
16644: LD_INT 31
16646: PUSH
16647: LD_INT 32
16649: PUSH
16650: LD_INT 34
16652: PUSH
16653: LD_INT 36
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 101
16691: PUSH
16692: LD_INT 102
16694: PUSH
16695: LD_INT 103
16697: PUSH
16698: LD_INT 104
16700: PUSH
16701: LD_INT 105
16703: PUSH
16704: LD_INT 106
16706: PUSH
16707: LD_INT 107
16709: PUSH
16710: LD_INT 108
16712: PUSH
16713: LD_INT 109
16715: PUSH
16716: LD_INT 110
16718: PUSH
16719: LD_INT 111
16721: PUSH
16722: LD_INT 112
16724: PUSH
16725: LD_INT 114
16727: PUSH
16728: LD_INT 116
16730: PUSH
16731: LD_INT 117
16733: PUSH
16734: LD_INT 118
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: ST_TO_ADDR
16759: GO 18442
16761: LD_INT 12
16763: DOUBLE
16764: EQUAL
16765: IFTRUE 16769
16767: GO 16989
16769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 4
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: LD_INT 6
16792: PUSH
16793: LD_INT 7
16795: PUSH
16796: LD_INT 8
16798: PUSH
16799: LD_INT 9
16801: PUSH
16802: LD_INT 10
16804: PUSH
16805: LD_INT 11
16807: PUSH
16808: LD_INT 12
16810: PUSH
16811: LD_INT 13
16813: PUSH
16814: LD_INT 14
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: LD_INT 16
16822: PUSH
16823: LD_INT 17
16825: PUSH
16826: LD_INT 18
16828: PUSH
16829: LD_INT 19
16831: PUSH
16832: LD_INT 20
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 23
16843: PUSH
16844: LD_INT 24
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: LD_INT 27
16855: PUSH
16856: LD_INT 28
16858: PUSH
16859: LD_INT 30
16861: PUSH
16862: LD_INT 31
16864: PUSH
16865: LD_INT 32
16867: PUSH
16868: LD_INT 33
16870: PUSH
16871: LD_INT 34
16873: PUSH
16874: LD_INT 36
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 101
16915: PUSH
16916: LD_INT 102
16918: PUSH
16919: LD_INT 103
16921: PUSH
16922: LD_INT 104
16924: PUSH
16925: LD_INT 105
16927: PUSH
16928: LD_INT 106
16930: PUSH
16931: LD_INT 107
16933: PUSH
16934: LD_INT 108
16936: PUSH
16937: LD_INT 109
16939: PUSH
16940: LD_INT 110
16942: PUSH
16943: LD_INT 111
16945: PUSH
16946: LD_INT 112
16948: PUSH
16949: LD_INT 113
16951: PUSH
16952: LD_INT 114
16954: PUSH
16955: LD_INT 116
16957: PUSH
16958: LD_INT 117
16960: PUSH
16961: LD_INT 118
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: ST_TO_ADDR
16987: GO 18442
16989: LD_INT 13
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17205
16997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16998: LD_ADDR_VAR 0 2
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: LD_INT 4
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: LD_INT 8
17020: PUSH
17021: LD_INT 9
17023: PUSH
17024: LD_INT 10
17026: PUSH
17027: LD_INT 11
17029: PUSH
17030: LD_INT 12
17032: PUSH
17033: LD_INT 14
17035: PUSH
17036: LD_INT 15
17038: PUSH
17039: LD_INT 16
17041: PUSH
17042: LD_INT 17
17044: PUSH
17045: LD_INT 18
17047: PUSH
17048: LD_INT 19
17050: PUSH
17051: LD_INT 20
17053: PUSH
17054: LD_INT 21
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_INT 23
17062: PUSH
17063: LD_INT 24
17065: PUSH
17066: LD_INT 25
17068: PUSH
17069: LD_INT 26
17071: PUSH
17072: LD_INT 27
17074: PUSH
17075: LD_INT 28
17077: PUSH
17078: LD_INT 30
17080: PUSH
17081: LD_INT 31
17083: PUSH
17084: LD_INT 32
17086: PUSH
17087: LD_INT 33
17089: PUSH
17090: LD_INT 34
17092: PUSH
17093: LD_INT 36
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 101
17131: PUSH
17132: LD_INT 102
17134: PUSH
17135: LD_INT 103
17137: PUSH
17138: LD_INT 104
17140: PUSH
17141: LD_INT 105
17143: PUSH
17144: LD_INT 106
17146: PUSH
17147: LD_INT 107
17149: PUSH
17150: LD_INT 108
17152: PUSH
17153: LD_INT 109
17155: PUSH
17156: LD_INT 110
17158: PUSH
17159: LD_INT 111
17161: PUSH
17162: LD_INT 112
17164: PUSH
17165: LD_INT 113
17167: PUSH
17168: LD_INT 114
17170: PUSH
17171: LD_INT 116
17173: PUSH
17174: LD_INT 117
17176: PUSH
17177: LD_INT 118
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: ST_TO_ADDR
17203: GO 18442
17205: LD_INT 14
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17437
17213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
17214: LD_ADDR_VAR 0 2
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: LD_INT 3
17227: PUSH
17228: LD_INT 4
17230: PUSH
17231: LD_INT 5
17233: PUSH
17234: LD_INT 6
17236: PUSH
17237: LD_INT 7
17239: PUSH
17240: LD_INT 8
17242: PUSH
17243: LD_INT 9
17245: PUSH
17246: LD_INT 10
17248: PUSH
17249: LD_INT 11
17251: PUSH
17252: LD_INT 12
17254: PUSH
17255: LD_INT 13
17257: PUSH
17258: LD_INT 14
17260: PUSH
17261: LD_INT 15
17263: PUSH
17264: LD_INT 16
17266: PUSH
17267: LD_INT 17
17269: PUSH
17270: LD_INT 18
17272: PUSH
17273: LD_INT 19
17275: PUSH
17276: LD_INT 20
17278: PUSH
17279: LD_INT 21
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_INT 23
17287: PUSH
17288: LD_INT 24
17290: PUSH
17291: LD_INT 25
17293: PUSH
17294: LD_INT 26
17296: PUSH
17297: LD_INT 27
17299: PUSH
17300: LD_INT 28
17302: PUSH
17303: LD_INT 29
17305: PUSH
17306: LD_INT 30
17308: PUSH
17309: LD_INT 31
17311: PUSH
17312: LD_INT 32
17314: PUSH
17315: LD_INT 33
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 36
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 101
17363: PUSH
17364: LD_INT 102
17366: PUSH
17367: LD_INT 103
17369: PUSH
17370: LD_INT 104
17372: PUSH
17373: LD_INT 105
17375: PUSH
17376: LD_INT 106
17378: PUSH
17379: LD_INT 107
17381: PUSH
17382: LD_INT 108
17384: PUSH
17385: LD_INT 109
17387: PUSH
17388: LD_INT 110
17390: PUSH
17391: LD_INT 111
17393: PUSH
17394: LD_INT 112
17396: PUSH
17397: LD_INT 113
17399: PUSH
17400: LD_INT 114
17402: PUSH
17403: LD_INT 116
17405: PUSH
17406: LD_INT 117
17408: PUSH
17409: LD_INT 118
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: ST_TO_ADDR
17435: GO 18442
17437: LD_INT 15
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17669
17445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: LD_INT 4
17462: PUSH
17463: LD_INT 5
17465: PUSH
17466: LD_INT 6
17468: PUSH
17469: LD_INT 7
17471: PUSH
17472: LD_INT 8
17474: PUSH
17475: LD_INT 9
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: LD_INT 11
17483: PUSH
17484: LD_INT 12
17486: PUSH
17487: LD_INT 13
17489: PUSH
17490: LD_INT 14
17492: PUSH
17493: LD_INT 15
17495: PUSH
17496: LD_INT 16
17498: PUSH
17499: LD_INT 17
17501: PUSH
17502: LD_INT 18
17504: PUSH
17505: LD_INT 19
17507: PUSH
17508: LD_INT 20
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 23
17519: PUSH
17520: LD_INT 24
17522: PUSH
17523: LD_INT 25
17525: PUSH
17526: LD_INT 26
17528: PUSH
17529: LD_INT 27
17531: PUSH
17532: LD_INT 28
17534: PUSH
17535: LD_INT 29
17537: PUSH
17538: LD_INT 30
17540: PUSH
17541: LD_INT 31
17543: PUSH
17544: LD_INT 32
17546: PUSH
17547: LD_INT 33
17549: PUSH
17550: LD_INT 34
17552: PUSH
17553: LD_INT 36
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 101
17595: PUSH
17596: LD_INT 102
17598: PUSH
17599: LD_INT 103
17601: PUSH
17602: LD_INT 104
17604: PUSH
17605: LD_INT 105
17607: PUSH
17608: LD_INT 106
17610: PUSH
17611: LD_INT 107
17613: PUSH
17614: LD_INT 108
17616: PUSH
17617: LD_INT 109
17619: PUSH
17620: LD_INT 110
17622: PUSH
17623: LD_INT 111
17625: PUSH
17626: LD_INT 112
17628: PUSH
17629: LD_INT 113
17631: PUSH
17632: LD_INT 114
17634: PUSH
17635: LD_INT 116
17637: PUSH
17638: LD_INT 117
17640: PUSH
17641: LD_INT 118
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: ST_TO_ADDR
17667: GO 18442
17669: LD_INT 16
17671: DOUBLE
17672: EQUAL
17673: IFTRUE 17677
17675: GO 17813
17677: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17678: LD_ADDR_VAR 0 2
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 4
17688: PUSH
17689: LD_INT 5
17691: PUSH
17692: LD_INT 7
17694: PUSH
17695: LD_INT 11
17697: PUSH
17698: LD_INT 12
17700: PUSH
17701: LD_INT 15
17703: PUSH
17704: LD_INT 16
17706: PUSH
17707: LD_INT 20
17709: PUSH
17710: LD_INT 21
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 23
17718: PUSH
17719: LD_INT 25
17721: PUSH
17722: LD_INT 26
17724: PUSH
17725: LD_INT 30
17727: PUSH
17728: LD_INT 31
17730: PUSH
17731: LD_INT 32
17733: PUSH
17734: LD_INT 33
17736: PUSH
17737: LD_INT 34
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 101
17763: PUSH
17764: LD_INT 102
17766: PUSH
17767: LD_INT 103
17769: PUSH
17770: LD_INT 106
17772: PUSH
17773: LD_INT 108
17775: PUSH
17776: LD_INT 112
17778: PUSH
17779: LD_INT 113
17781: PUSH
17782: LD_INT 114
17784: PUSH
17785: LD_INT 116
17787: PUSH
17788: LD_INT 117
17790: PUSH
17791: LD_INT 118
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: ST_TO_ADDR
17811: GO 18442
17813: LD_INT 17
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 18045
17821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: LD_INT 3
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: LD_INT 5
17841: PUSH
17842: LD_INT 6
17844: PUSH
17845: LD_INT 7
17847: PUSH
17848: LD_INT 8
17850: PUSH
17851: LD_INT 9
17853: PUSH
17854: LD_INT 10
17856: PUSH
17857: LD_INT 11
17859: PUSH
17860: LD_INT 12
17862: PUSH
17863: LD_INT 13
17865: PUSH
17866: LD_INT 14
17868: PUSH
17869: LD_INT 15
17871: PUSH
17872: LD_INT 16
17874: PUSH
17875: LD_INT 17
17877: PUSH
17878: LD_INT 18
17880: PUSH
17881: LD_INT 19
17883: PUSH
17884: LD_INT 20
17886: PUSH
17887: LD_INT 21
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_INT 23
17895: PUSH
17896: LD_INT 24
17898: PUSH
17899: LD_INT 25
17901: PUSH
17902: LD_INT 26
17904: PUSH
17905: LD_INT 27
17907: PUSH
17908: LD_INT 28
17910: PUSH
17911: LD_INT 29
17913: PUSH
17914: LD_INT 30
17916: PUSH
17917: LD_INT 31
17919: PUSH
17920: LD_INT 32
17922: PUSH
17923: LD_INT 33
17925: PUSH
17926: LD_INT 34
17928: PUSH
17929: LD_INT 36
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 101
17971: PUSH
17972: LD_INT 102
17974: PUSH
17975: LD_INT 103
17977: PUSH
17978: LD_INT 104
17980: PUSH
17981: LD_INT 105
17983: PUSH
17984: LD_INT 106
17986: PUSH
17987: LD_INT 107
17989: PUSH
17990: LD_INT 108
17992: PUSH
17993: LD_INT 109
17995: PUSH
17996: LD_INT 110
17998: PUSH
17999: LD_INT 111
18001: PUSH
18002: LD_INT 112
18004: PUSH
18005: LD_INT 113
18007: PUSH
18008: LD_INT 114
18010: PUSH
18011: LD_INT 116
18013: PUSH
18014: LD_INT 117
18016: PUSH
18017: LD_INT 118
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: ST_TO_ADDR
18043: GO 18442
18045: LD_INT 18
18047: DOUBLE
18048: EQUAL
18049: IFTRUE 18053
18051: GO 18201
18053: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18054: LD_ADDR_VAR 0 2
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: LD_INT 4
18064: PUSH
18065: LD_INT 5
18067: PUSH
18068: LD_INT 7
18070: PUSH
18071: LD_INT 11
18073: PUSH
18074: LD_INT 12
18076: PUSH
18077: LD_INT 15
18079: PUSH
18080: LD_INT 16
18082: PUSH
18083: LD_INT 20
18085: PUSH
18086: LD_INT 21
18088: PUSH
18089: LD_INT 22
18091: PUSH
18092: LD_INT 23
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 26
18100: PUSH
18101: LD_INT 30
18103: PUSH
18104: LD_INT 31
18106: PUSH
18107: LD_INT 32
18109: PUSH
18110: LD_INT 33
18112: PUSH
18113: LD_INT 34
18115: PUSH
18116: LD_INT 35
18118: PUSH
18119: LD_INT 36
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 101
18147: PUSH
18148: LD_INT 102
18150: PUSH
18151: LD_INT 103
18153: PUSH
18154: LD_INT 106
18156: PUSH
18157: LD_INT 108
18159: PUSH
18160: LD_INT 112
18162: PUSH
18163: LD_INT 113
18165: PUSH
18166: LD_INT 114
18168: PUSH
18169: LD_INT 115
18171: PUSH
18172: LD_INT 116
18174: PUSH
18175: LD_INT 117
18177: PUSH
18178: LD_INT 118
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: ST_TO_ADDR
18199: GO 18442
18201: LD_INT 19
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18441
18209: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
18210: LD_ADDR_VAR 0 2
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: LD_INT 4
18226: PUSH
18227: LD_INT 5
18229: PUSH
18230: LD_INT 6
18232: PUSH
18233: LD_INT 7
18235: PUSH
18236: LD_INT 8
18238: PUSH
18239: LD_INT 9
18241: PUSH
18242: LD_INT 10
18244: PUSH
18245: LD_INT 11
18247: PUSH
18248: LD_INT 12
18250: PUSH
18251: LD_INT 13
18253: PUSH
18254: LD_INT 14
18256: PUSH
18257: LD_INT 15
18259: PUSH
18260: LD_INT 16
18262: PUSH
18263: LD_INT 17
18265: PUSH
18266: LD_INT 18
18268: PUSH
18269: LD_INT 19
18271: PUSH
18272: LD_INT 20
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 22
18280: PUSH
18281: LD_INT 23
18283: PUSH
18284: LD_INT 24
18286: PUSH
18287: LD_INT 25
18289: PUSH
18290: LD_INT 26
18292: PUSH
18293: LD_INT 27
18295: PUSH
18296: LD_INT 28
18298: PUSH
18299: LD_INT 29
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 31
18307: PUSH
18308: LD_INT 32
18310: PUSH
18311: LD_INT 33
18313: PUSH
18314: LD_INT 34
18316: PUSH
18317: LD_INT 35
18319: PUSH
18320: LD_INT 36
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 101
18363: PUSH
18364: LD_INT 102
18366: PUSH
18367: LD_INT 103
18369: PUSH
18370: LD_INT 104
18372: PUSH
18373: LD_INT 105
18375: PUSH
18376: LD_INT 106
18378: PUSH
18379: LD_INT 107
18381: PUSH
18382: LD_INT 108
18384: PUSH
18385: LD_INT 109
18387: PUSH
18388: LD_INT 110
18390: PUSH
18391: LD_INT 111
18393: PUSH
18394: LD_INT 112
18396: PUSH
18397: LD_INT 113
18399: PUSH
18400: LD_INT 114
18402: PUSH
18403: LD_INT 115
18405: PUSH
18406: LD_INT 116
18408: PUSH
18409: LD_INT 117
18411: PUSH
18412: LD_INT 118
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: ST_TO_ADDR
18439: GO 18442
18441: POP
// end else
18442: GO 18673
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18444: LD_ADDR_VAR 0 2
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 3
18457: PUSH
18458: LD_INT 4
18460: PUSH
18461: LD_INT 5
18463: PUSH
18464: LD_INT 6
18466: PUSH
18467: LD_INT 7
18469: PUSH
18470: LD_INT 8
18472: PUSH
18473: LD_INT 9
18475: PUSH
18476: LD_INT 10
18478: PUSH
18479: LD_INT 11
18481: PUSH
18482: LD_INT 12
18484: PUSH
18485: LD_INT 13
18487: PUSH
18488: LD_INT 14
18490: PUSH
18491: LD_INT 15
18493: PUSH
18494: LD_INT 16
18496: PUSH
18497: LD_INT 17
18499: PUSH
18500: LD_INT 18
18502: PUSH
18503: LD_INT 19
18505: PUSH
18506: LD_INT 20
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 22
18514: PUSH
18515: LD_INT 23
18517: PUSH
18518: LD_INT 24
18520: PUSH
18521: LD_INT 25
18523: PUSH
18524: LD_INT 26
18526: PUSH
18527: LD_INT 27
18529: PUSH
18530: LD_INT 28
18532: PUSH
18533: LD_INT 29
18535: PUSH
18536: LD_INT 30
18538: PUSH
18539: LD_INT 31
18541: PUSH
18542: LD_INT 32
18544: PUSH
18545: LD_INT 33
18547: PUSH
18548: LD_INT 34
18550: PUSH
18551: LD_INT 35
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 101
18597: PUSH
18598: LD_INT 102
18600: PUSH
18601: LD_INT 103
18603: PUSH
18604: LD_INT 104
18606: PUSH
18607: LD_INT 105
18609: PUSH
18610: LD_INT 106
18612: PUSH
18613: LD_INT 107
18615: PUSH
18616: LD_INT 108
18618: PUSH
18619: LD_INT 109
18621: PUSH
18622: LD_INT 110
18624: PUSH
18625: LD_INT 111
18627: PUSH
18628: LD_INT 112
18630: PUSH
18631: LD_INT 113
18633: PUSH
18634: LD_INT 114
18636: PUSH
18637: LD_INT 115
18639: PUSH
18640: LD_INT 116
18642: PUSH
18643: LD_INT 117
18645: PUSH
18646: LD_INT 118
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: ST_TO_ADDR
// if result then
18673: LD_VAR 0 2
18677: IFFALSE 19463
// begin normal :=  ;
18679: LD_ADDR_VAR 0 5
18683: PUSH
18684: LD_STRING 
18686: ST_TO_ADDR
// hardcore :=  ;
18687: LD_ADDR_VAR 0 6
18691: PUSH
18692: LD_STRING 
18694: ST_TO_ADDR
// active :=  ;
18695: LD_ADDR_VAR 0 7
18699: PUSH
18700: LD_STRING 
18702: ST_TO_ADDR
// for i = 1 to normalCounter do
18703: LD_ADDR_VAR 0 8
18707: PUSH
18708: DOUBLE
18709: LD_INT 1
18711: DEC
18712: ST_TO_ADDR
18713: LD_EXP 34
18717: PUSH
18718: FOR_TO
18719: IFFALSE 18820
// begin tmp := 0 ;
18721: LD_ADDR_VAR 0 3
18725: PUSH
18726: LD_STRING 0
18728: ST_TO_ADDR
// if result [ 1 ] then
18729: LD_VAR 0 2
18733: PUSH
18734: LD_INT 1
18736: ARRAY
18737: IFFALSE 18802
// if result [ 1 ] [ 1 ] = i then
18739: LD_VAR 0 2
18743: PUSH
18744: LD_INT 1
18746: ARRAY
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: PUSH
18752: LD_VAR 0 8
18756: EQUAL
18757: IFFALSE 18802
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: LD_VAR 0 2
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PPUSH
18781: LD_INT 1
18783: PPUSH
18784: CALL_OW 3
18788: PPUSH
18789: CALL_OW 1
18793: ST_TO_ADDR
// tmp := 1 ;
18794: LD_ADDR_VAR 0 3
18798: PUSH
18799: LD_STRING 1
18801: ST_TO_ADDR
// end ; normal := normal & tmp ;
18802: LD_ADDR_VAR 0 5
18806: PUSH
18807: LD_VAR 0 5
18811: PUSH
18812: LD_VAR 0 3
18816: STR
18817: ST_TO_ADDR
// end ;
18818: GO 18718
18820: POP
18821: POP
// for i = 1 to hardcoreCounter do
18822: LD_ADDR_VAR 0 8
18826: PUSH
18827: DOUBLE
18828: LD_INT 1
18830: DEC
18831: ST_TO_ADDR
18832: LD_EXP 35
18836: PUSH
18837: FOR_TO
18838: IFFALSE 18943
// begin tmp := 0 ;
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: LD_STRING 0
18847: ST_TO_ADDR
// if result [ 2 ] then
18848: LD_VAR 0 2
18852: PUSH
18853: LD_INT 2
18855: ARRAY
18856: IFFALSE 18925
// if result [ 2 ] [ 1 ] = 100 + i then
18858: LD_VAR 0 2
18862: PUSH
18863: LD_INT 2
18865: ARRAY
18866: PUSH
18867: LD_INT 1
18869: ARRAY
18870: PUSH
18871: LD_INT 100
18873: PUSH
18874: LD_VAR 0 8
18878: PLUS
18879: EQUAL
18880: IFFALSE 18925
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: LD_VAR 0 2
18891: PPUSH
18892: LD_INT 2
18894: PPUSH
18895: LD_VAR 0 2
18899: PUSH
18900: LD_INT 2
18902: ARRAY
18903: PPUSH
18904: LD_INT 1
18906: PPUSH
18907: CALL_OW 3
18911: PPUSH
18912: CALL_OW 1
18916: ST_TO_ADDR
// tmp := 1 ;
18917: LD_ADDR_VAR 0 3
18921: PUSH
18922: LD_STRING 1
18924: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18925: LD_ADDR_VAR 0 6
18929: PUSH
18930: LD_VAR 0 6
18934: PUSH
18935: LD_VAR 0 3
18939: STR
18940: ST_TO_ADDR
// end ;
18941: GO 18837
18943: POP
18944: POP
// if isGameLoad then
18945: LD_VAR 0 1
18949: IFFALSE 19424
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18951: LD_ADDR_VAR 0 4
18955: PUSH
18956: LD_EXP 38
18960: PUSH
18961: LD_EXP 37
18965: PUSH
18966: LD_EXP 39
18970: PUSH
18971: LD_EXP 36
18975: PUSH
18976: LD_EXP 40
18980: PUSH
18981: LD_EXP 41
18985: PUSH
18986: LD_EXP 42
18990: PUSH
18991: LD_EXP 43
18995: PUSH
18996: LD_EXP 44
19000: PUSH
19001: LD_EXP 45
19005: PUSH
19006: LD_EXP 46
19010: PUSH
19011: LD_EXP 47
19015: PUSH
19016: LD_EXP 48
19020: PUSH
19021: LD_EXP 49
19025: PUSH
19026: LD_EXP 57
19030: PUSH
19031: LD_EXP 58
19035: PUSH
19036: LD_EXP 59
19040: PUSH
19041: LD_EXP 60
19045: PUSH
19046: LD_EXP 62
19050: PUSH
19051: LD_EXP 63
19055: PUSH
19056: LD_EXP 64
19060: PUSH
19061: LD_EXP 67
19065: PUSH
19066: LD_EXP 69
19070: PUSH
19071: LD_EXP 70
19075: PUSH
19076: LD_EXP 71
19080: PUSH
19081: LD_EXP 73
19085: PUSH
19086: LD_EXP 74
19090: PUSH
19091: LD_EXP 77
19095: PUSH
19096: LD_EXP 78
19100: PUSH
19101: LD_EXP 79
19105: PUSH
19106: LD_EXP 80
19110: PUSH
19111: LD_EXP 81
19115: PUSH
19116: LD_EXP 82
19120: PUSH
19121: LD_EXP 83
19125: PUSH
19126: LD_EXP 84
19130: PUSH
19131: LD_EXP 85
19135: PUSH
19136: LD_EXP 50
19140: PUSH
19141: LD_EXP 51
19145: PUSH
19146: LD_EXP 54
19150: PUSH
19151: LD_EXP 55
19155: PUSH
19156: LD_EXP 56
19160: PUSH
19161: LD_EXP 52
19165: PUSH
19166: LD_EXP 53
19170: PUSH
19171: LD_EXP 61
19175: PUSH
19176: LD_EXP 65
19180: PUSH
19181: LD_EXP 66
19185: PUSH
19186: LD_EXP 68
19190: PUSH
19191: LD_EXP 72
19195: PUSH
19196: LD_EXP 75
19200: PUSH
19201: LD_EXP 76
19205: PUSH
19206: LD_EXP 86
19210: PUSH
19211: LD_EXP 87
19215: PUSH
19216: LD_EXP 88
19220: PUSH
19221: LD_EXP 89
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: ST_TO_ADDR
// tmp :=  ;
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: LD_STRING 
19289: ST_TO_ADDR
// for i = 1 to normalCounter do
19290: LD_ADDR_VAR 0 8
19294: PUSH
19295: DOUBLE
19296: LD_INT 1
19298: DEC
19299: ST_TO_ADDR
19300: LD_EXP 34
19304: PUSH
19305: FOR_TO
19306: IFFALSE 19342
// begin if flags [ i ] then
19308: LD_VAR 0 4
19312: PUSH
19313: LD_VAR 0 8
19317: ARRAY
19318: IFFALSE 19340
// tmp := tmp & i & ; ;
19320: LD_ADDR_VAR 0 3
19324: PUSH
19325: LD_VAR 0 3
19329: PUSH
19330: LD_VAR 0 8
19334: STR
19335: PUSH
19336: LD_STRING ;
19338: STR
19339: ST_TO_ADDR
// end ;
19340: GO 19305
19342: POP
19343: POP
// for i = 1 to hardcoreCounter do
19344: LD_ADDR_VAR 0 8
19348: PUSH
19349: DOUBLE
19350: LD_INT 1
19352: DEC
19353: ST_TO_ADDR
19354: LD_EXP 35
19358: PUSH
19359: FOR_TO
19360: IFFALSE 19406
// begin if flags [ normalCounter + i ] then
19362: LD_VAR 0 4
19366: PUSH
19367: LD_EXP 34
19371: PUSH
19372: LD_VAR 0 8
19376: PLUS
19377: ARRAY
19378: IFFALSE 19404
// tmp := tmp & ( 100 + i ) & ; ;
19380: LD_ADDR_VAR 0 3
19384: PUSH
19385: LD_VAR 0 3
19389: PUSH
19390: LD_INT 100
19392: PUSH
19393: LD_VAR 0 8
19397: PLUS
19398: STR
19399: PUSH
19400: LD_STRING ;
19402: STR
19403: ST_TO_ADDR
// end ;
19404: GO 19359
19406: POP
19407: POP
// if tmp then
19408: LD_VAR 0 3
19412: IFFALSE 19424
// active := tmp ;
19414: LD_ADDR_VAR 0 7
19418: PUSH
19419: LD_VAR 0 3
19423: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19424: LD_STRING getStreamItemsFromMission("
19426: PUSH
19427: LD_VAR 0 5
19431: STR
19432: PUSH
19433: LD_STRING ","
19435: STR
19436: PUSH
19437: LD_VAR 0 6
19441: STR
19442: PUSH
19443: LD_STRING ","
19445: STR
19446: PUSH
19447: LD_VAR 0 7
19451: STR
19452: PUSH
19453: LD_STRING ")
19455: STR
19456: PPUSH
19457: CALL_OW 559
// end else
19461: GO 19470
// ToLua ( getStreamItemsFromMission("","","") ) ;
19463: LD_STRING getStreamItemsFromMission("","","")
19465: PPUSH
19466: CALL_OW 559
// end ;
19470: LD_VAR 0 2
19474: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19475: LD_EXP 33
19479: IFFALSE 19487
19481: PUSH
19482: LD_EXP 38
19486: AND
19487: IFFALSE 19611
19489: GO 19491
19491: DISABLE
19492: LD_INT 0
19494: PPUSH
19495: PPUSH
// begin enable ;
19496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19497: LD_ADDR_VAR 0 2
19501: PUSH
19502: LD_INT 22
19504: PUSH
19505: LD_OWVAR 2
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 34
19519: PUSH
19520: LD_INT 7
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 34
19529: PUSH
19530: LD_INT 45
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 34
19539: PUSH
19540: LD_INT 28
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 34
19549: PUSH
19550: LD_INT 47
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: ST_TO_ADDR
// if not tmp then
19573: LD_VAR 0 2
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 19611
// for i in tmp do
19582: LD_ADDR_VAR 0 1
19586: PUSH
19587: LD_VAR 0 2
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19609
// begin SetLives ( i , 0 ) ;
19595: LD_VAR 0 1
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 234
// end ;
19607: GO 19592
19609: POP
19610: POP
// end ;
19611: PPOPN 2
19613: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19614: LD_EXP 33
19618: IFFALSE 19626
19620: PUSH
19621: LD_EXP 39
19625: AND
19626: IFFALSE 19710
19628: GO 19630
19630: DISABLE
19631: LD_INT 0
19633: PPUSH
19634: PPUSH
// begin enable ;
19635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19636: LD_ADDR_VAR 0 2
19640: PUSH
19641: LD_INT 22
19643: PUSH
19644: LD_OWVAR 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 32
19655: PUSH
19656: LD_INT 3
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: CALL_OW 69
19671: ST_TO_ADDR
// if not tmp then
19672: LD_VAR 0 2
19676: NOT
19677: IFFALSE 19681
// exit ;
19679: GO 19710
// for i in tmp do
19681: LD_ADDR_VAR 0 1
19685: PUSH
19686: LD_VAR 0 2
19690: PUSH
19691: FOR_IN
19692: IFFALSE 19708
// begin SetLives ( i , 0 ) ;
19694: LD_VAR 0 1
19698: PPUSH
19699: LD_INT 0
19701: PPUSH
19702: CALL_OW 234
// end ;
19706: GO 19691
19708: POP
19709: POP
// end ;
19710: PPOPN 2
19712: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19713: LD_EXP 33
19717: IFFALSE 19725
19719: PUSH
19720: LD_EXP 36
19724: AND
19725: IFFALSE 19818
19727: GO 19729
19729: DISABLE
19730: LD_INT 0
19732: PPUSH
// begin enable ;
19733: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_OWVAR 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 25
19756: PUSH
19757: LD_INT 5
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 25
19766: PUSH
19767: LD_INT 9
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 25
19776: PUSH
19777: LD_INT 8
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 69
19798: PUSH
19799: FOR_IN
19800: IFFALSE 19816
// begin SetClass ( i , 1 ) ;
19802: LD_VAR 0 1
19806: PPUSH
19807: LD_INT 1
19809: PPUSH
19810: CALL_OW 336
// end ;
19814: GO 19799
19816: POP
19817: POP
// end ;
19818: PPOPN 1
19820: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19821: LD_EXP 33
19825: IFFALSE 19833
19827: PUSH
19828: LD_EXP 37
19832: AND
19833: IFFALSE 19845
19835: PUSH
19836: LD_OWVAR 65
19840: PUSH
19841: LD_INT 7
19843: LESS
19844: AND
19845: IFFALSE 19859
19847: GO 19849
19849: DISABLE
// begin enable ;
19850: ENABLE
// game_speed := 7 ;
19851: LD_ADDR_OWVAR 65
19855: PUSH
19856: LD_INT 7
19858: ST_TO_ADDR
// end ;
19859: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19860: LD_EXP 33
19864: IFFALSE 19872
19866: PUSH
19867: LD_EXP 40
19871: AND
19872: IFFALSE 20074
19874: GO 19876
19876: DISABLE
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
19881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19882: LD_ADDR_VAR 0 3
19886: PUSH
19887: LD_INT 81
19889: PUSH
19890: LD_OWVAR 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 21
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PPUSH
19913: CALL_OW 69
19917: ST_TO_ADDR
// if not tmp then
19918: LD_VAR 0 3
19922: NOT
19923: IFFALSE 19927
// exit ;
19925: GO 20074
// if tmp > 5 then
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 5
19934: GREATER
19935: IFFALSE 19947
// k := 5 else
19937: LD_ADDR_VAR 0 2
19941: PUSH
19942: LD_INT 5
19944: ST_TO_ADDR
19945: GO 19957
// k := tmp ;
19947: LD_ADDR_VAR 0 2
19951: PUSH
19952: LD_VAR 0 3
19956: ST_TO_ADDR
// for i := 1 to k do
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: DOUBLE
19963: LD_INT 1
19965: DEC
19966: ST_TO_ADDR
19967: LD_VAR 0 2
19971: PUSH
19972: FOR_TO
19973: IFFALSE 20072
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_VAR 0 1
19984: ARRAY
19985: PPUSH
19986: LD_VAR 0 1
19990: PUSH
19991: LD_INT 4
19993: MOD
19994: PUSH
19995: LD_INT 1
19997: PLUS
19998: PPUSH
19999: CALL_OW 259
20003: PUSH
20004: LD_INT 10
20006: LESS
20007: IFFALSE 20070
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20009: LD_VAR 0 3
20013: PUSH
20014: LD_VAR 0 1
20018: ARRAY
20019: PPUSH
20020: LD_VAR 0 1
20024: PUSH
20025: LD_INT 4
20027: MOD
20028: PUSH
20029: LD_INT 1
20031: PLUS
20032: PPUSH
20033: LD_VAR 0 3
20037: PUSH
20038: LD_VAR 0 1
20042: ARRAY
20043: PPUSH
20044: LD_VAR 0 1
20048: PUSH
20049: LD_INT 4
20051: MOD
20052: PUSH
20053: LD_INT 1
20055: PLUS
20056: PPUSH
20057: CALL_OW 259
20061: PUSH
20062: LD_INT 1
20064: PLUS
20065: PPUSH
20066: CALL_OW 237
20070: GO 19972
20072: POP
20073: POP
// end ;
20074: PPOPN 3
20076: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20077: LD_EXP 33
20081: IFFALSE 20089
20083: PUSH
20084: LD_EXP 41
20088: AND
20089: IFFALSE 20109
20091: GO 20093
20093: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20094: LD_INT 4
20096: PPUSH
20097: LD_OWVAR 2
20101: PPUSH
20102: LD_INT 0
20104: PPUSH
20105: CALL_OW 324
20109: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20110: LD_EXP 33
20114: IFFALSE 20122
20116: PUSH
20117: LD_EXP 70
20121: AND
20122: IFFALSE 20142
20124: GO 20126
20126: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20127: LD_INT 19
20129: PPUSH
20130: LD_OWVAR 2
20134: PPUSH
20135: LD_INT 0
20137: PPUSH
20138: CALL_OW 324
20142: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20143: LD_EXP 33
20147: IFFALSE 20155
20149: PUSH
20150: LD_EXP 42
20154: AND
20155: IFFALSE 20257
20157: GO 20159
20159: DISABLE
20160: LD_INT 0
20162: PPUSH
20163: PPUSH
// begin enable ;
20164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 22
20172: PUSH
20173: LD_OWVAR 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 2
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_INT 11
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 34
20197: PUSH
20198: LD_INT 30
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PPUSH
20214: CALL_OW 69
20218: ST_TO_ADDR
// if not tmp then
20219: LD_VAR 0 2
20223: NOT
20224: IFFALSE 20228
// exit ;
20226: GO 20257
// for i in tmp do
20228: LD_ADDR_VAR 0 1
20232: PUSH
20233: LD_VAR 0 2
20237: PUSH
20238: FOR_IN
20239: IFFALSE 20255
// begin SetLives ( i , 0 ) ;
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_INT 0
20248: PPUSH
20249: CALL_OW 234
// end ;
20253: GO 20238
20255: POP
20256: POP
// end ;
20257: PPOPN 2
20259: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20260: LD_EXP 33
20264: IFFALSE 20272
20266: PUSH
20267: LD_EXP 43
20271: AND
20272: IFFALSE 20292
20274: GO 20276
20276: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20277: LD_INT 32
20279: PPUSH
20280: LD_OWVAR 2
20284: PPUSH
20285: LD_INT 0
20287: PPUSH
20288: CALL_OW 324
20292: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20293: LD_EXP 33
20297: IFFALSE 20305
20299: PUSH
20300: LD_EXP 44
20304: AND
20305: IFFALSE 20488
20307: GO 20309
20309: DISABLE
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20315: LD_ADDR_VAR 0 2
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_OWVAR 2
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 33
20334: PUSH
20335: LD_INT 3
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: ST_TO_ADDR
// if not tmp then
20351: LD_VAR 0 2
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20488
// side := 0 ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// for i := 1 to 8 do
20368: LD_ADDR_VAR 0 1
20372: PUSH
20373: DOUBLE
20374: LD_INT 1
20376: DEC
20377: ST_TO_ADDR
20378: LD_INT 8
20380: PUSH
20381: FOR_TO
20382: IFFALSE 20432
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20384: LD_OWVAR 2
20388: PUSH
20389: LD_VAR 0 1
20393: NONEQUAL
20394: IFFALSE 20416
20396: PUSH
20397: LD_OWVAR 2
20401: PPUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 81
20411: PUSH
20412: LD_INT 2
20414: EQUAL
20415: AND
20416: IFFALSE 20430
// begin side := i ;
20418: LD_ADDR_VAR 0 3
20422: PUSH
20423: LD_VAR 0 1
20427: ST_TO_ADDR
// break ;
20428: GO 20432
// end ;
20430: GO 20381
20432: POP
20433: POP
// if not side then
20434: LD_VAR 0 3
20438: NOT
20439: IFFALSE 20443
// exit ;
20441: GO 20488
// for i := 1 to tmp do
20443: LD_ADDR_VAR 0 1
20447: PUSH
20448: DOUBLE
20449: LD_INT 1
20451: DEC
20452: ST_TO_ADDR
20453: LD_VAR 0 2
20457: PUSH
20458: FOR_TO
20459: IFFALSE 20486
// if Prob ( 60 ) then
20461: LD_INT 60
20463: PPUSH
20464: CALL_OW 13
20468: IFFALSE 20484
// SetSide ( i , side ) ;
20470: LD_VAR 0 1
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 235
20484: GO 20458
20486: POP
20487: POP
// end ;
20488: PPOPN 3
20490: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20491: LD_EXP 33
20495: IFFALSE 20503
20497: PUSH
20498: LD_EXP 46
20502: AND
20503: IFFALSE 20622
20505: GO 20507
20507: DISABLE
20508: LD_INT 0
20510: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20511: LD_ADDR_VAR 0 1
20515: PUSH
20516: LD_INT 22
20518: PUSH
20519: LD_OWVAR 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 21
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 3
20540: PUSH
20541: LD_INT 23
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 69
20564: PUSH
20565: FOR_IN
20566: IFFALSE 20620
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 257
20577: PUSH
20578: LD_INT 1
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 3
20586: PUSH
20587: LD_INT 4
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: IN
20596: IFFALSE 20618
// SetClass ( un , rand ( 1 , 4 ) ) ;
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: LD_INT 4
20608: PPUSH
20609: CALL_OW 12
20613: PPUSH
20614: CALL_OW 336
20618: GO 20565
20620: POP
20621: POP
// end ;
20622: PPOPN 1
20624: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20625: LD_EXP 33
20629: IFFALSE 20637
20631: PUSH
20632: LD_EXP 45
20636: AND
20637: IFFALSE 20716
20639: GO 20641
20641: DISABLE
20642: LD_INT 0
20644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20645: LD_ADDR_VAR 0 1
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_OWVAR 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 3
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PPUSH
20676: CALL_OW 69
20680: ST_TO_ADDR
// if not tmp then
20681: LD_VAR 0 1
20685: NOT
20686: IFFALSE 20690
// exit ;
20688: GO 20716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20690: LD_VAR 0 1
20694: PUSH
20695: LD_INT 1
20697: PPUSH
20698: LD_VAR 0 1
20702: PPUSH
20703: CALL_OW 12
20707: ARRAY
20708: PPUSH
20709: LD_INT 100
20711: PPUSH
20712: CALL_OW 234
// end ;
20716: PPOPN 1
20718: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20719: LD_EXP 33
20723: IFFALSE 20731
20725: PUSH
20726: LD_EXP 47
20730: AND
20731: IFFALSE 20829
20733: GO 20735
20735: DISABLE
20736: LD_INT 0
20738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20739: LD_ADDR_VAR 0 1
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_OWVAR 2
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 21
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PPUSH
20770: CALL_OW 69
20774: ST_TO_ADDR
// if not tmp then
20775: LD_VAR 0 1
20779: NOT
20780: IFFALSE 20784
// exit ;
20782: GO 20829
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20784: LD_VAR 0 1
20788: PUSH
20789: LD_INT 1
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 12
20801: ARRAY
20802: PPUSH
20803: LD_INT 1
20805: PPUSH
20806: LD_INT 4
20808: PPUSH
20809: CALL_OW 12
20813: PPUSH
20814: LD_INT 3000
20816: PPUSH
20817: LD_INT 9000
20819: PPUSH
20820: CALL_OW 12
20824: PPUSH
20825: CALL_OW 492
// end ;
20829: PPOPN 1
20831: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20832: LD_EXP 33
20836: IFFALSE 20844
20838: PUSH
20839: LD_EXP 48
20843: AND
20844: IFFALSE 20864
20846: GO 20848
20848: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20849: LD_INT 1
20851: PPUSH
20852: LD_OWVAR 2
20856: PPUSH
20857: LD_INT 0
20859: PPUSH
20860: CALL_OW 324
20864: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20865: LD_EXP 33
20869: IFFALSE 20877
20871: PUSH
20872: LD_EXP 49
20876: AND
20877: IFFALSE 20960
20879: GO 20881
20881: DISABLE
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20886: LD_ADDR_VAR 0 2
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_OWVAR 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 21
20905: PUSH
20906: LD_INT 3
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PPUSH
20917: CALL_OW 69
20921: ST_TO_ADDR
// if not tmp then
20922: LD_VAR 0 2
20926: NOT
20927: IFFALSE 20931
// exit ;
20929: GO 20960
// for i in tmp do
20931: LD_ADDR_VAR 0 1
20935: PUSH
20936: LD_VAR 0 2
20940: PUSH
20941: FOR_IN
20942: IFFALSE 20958
// SetBLevel ( i , 10 ) ;
20944: LD_VAR 0 1
20948: PPUSH
20949: LD_INT 10
20951: PPUSH
20952: CALL_OW 241
20956: GO 20941
20958: POP
20959: POP
// end ;
20960: PPOPN 2
20962: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20963: LD_EXP 33
20967: IFFALSE 20975
20969: PUSH
20970: LD_EXP 50
20974: AND
20975: IFFALSE 21086
20977: GO 20979
20979: DISABLE
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
20984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20985: LD_ADDR_VAR 0 3
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_OWVAR 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 25
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: ST_TO_ADDR
// if not tmp then
21021: LD_VAR 0 3
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21086
// un := tmp [ rand ( 1 , tmp ) ] ;
21030: LD_ADDR_VAR 0 2
21034: PUSH
21035: LD_VAR 0 3
21039: PUSH
21040: LD_INT 1
21042: PPUSH
21043: LD_VAR 0 3
21047: PPUSH
21048: CALL_OW 12
21052: ARRAY
21053: ST_TO_ADDR
// if Crawls ( un ) then
21054: LD_VAR 0 2
21058: PPUSH
21059: CALL_OW 318
21063: IFFALSE 21074
// ComWalk ( un ) ;
21065: LD_VAR 0 2
21069: PPUSH
21070: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21074: LD_VAR 0 2
21078: PPUSH
21079: LD_INT 5
21081: PPUSH
21082: CALL_OW 336
// end ;
21086: PPOPN 3
21088: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21089: LD_EXP 33
21093: IFFALSE 21101
21095: PUSH
21096: LD_EXP 51
21100: AND
21101: IFFALSE 21113
21103: PUSH
21104: LD_OWVAR 67
21108: PUSH
21109: LD_INT 4
21111: LESS
21112: AND
21113: IFFALSE 21132
21115: GO 21117
21117: DISABLE
// begin Difficulty := Difficulty + 1 ;
21118: LD_ADDR_OWVAR 67
21122: PUSH
21123: LD_OWVAR 67
21127: PUSH
21128: LD_INT 1
21130: PLUS
21131: ST_TO_ADDR
// end ;
21132: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21133: LD_EXP 33
21137: IFFALSE 21145
21139: PUSH
21140: LD_EXP 52
21144: AND
21145: IFFALSE 21248
21147: GO 21149
21149: DISABLE
21150: LD_INT 0
21152: PPUSH
// begin for i := 1 to 5 do
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_INT 5
21165: PUSH
21166: FOR_TO
21167: IFFALSE 21246
// begin uc_nation := nation_nature ;
21169: LD_ADDR_OWVAR 21
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// uc_side := 0 ;
21177: LD_ADDR_OWVAR 20
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21185: LD_ADDR_OWVAR 29
21189: PUSH
21190: LD_INT 12
21192: PUSH
21193: LD_INT 12
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: ST_TO_ADDR
// hc_agressivity := 20 ;
21200: LD_ADDR_OWVAR 35
21204: PUSH
21205: LD_INT 20
21207: ST_TO_ADDR
// hc_class := class_tiger ;
21208: LD_ADDR_OWVAR 28
21212: PUSH
21213: LD_INT 14
21215: ST_TO_ADDR
// hc_gallery :=  ;
21216: LD_ADDR_OWVAR 33
21220: PUSH
21221: LD_STRING 
21223: ST_TO_ADDR
// hc_name :=  ;
21224: LD_ADDR_OWVAR 26
21228: PUSH
21229: LD_STRING 
21231: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21232: CALL_OW 44
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 51
// end ;
21244: GO 21166
21246: POP
21247: POP
// end ;
21248: PPOPN 1
21250: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21251: LD_EXP 33
21255: IFFALSE 21263
21257: PUSH
21258: LD_EXP 53
21262: AND
21263: IFFALSE 21272
21265: GO 21267
21267: DISABLE
// StreamSibBomb ;
21268: CALL 21273 0 0
21272: END
// export function StreamSibBomb ; var i , x , y ; begin
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
// result := false ;
21279: LD_ADDR_VAR 0 1
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// for i := 1 to 16 do
21287: LD_ADDR_VAR 0 2
21291: PUSH
21292: DOUBLE
21293: LD_INT 1
21295: DEC
21296: ST_TO_ADDR
21297: LD_INT 16
21299: PUSH
21300: FOR_TO
21301: IFFALSE 21500
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21303: LD_ADDR_VAR 0 3
21307: PUSH
21308: LD_INT 10
21310: PUSH
21311: LD_INT 20
21313: PUSH
21314: LD_INT 30
21316: PUSH
21317: LD_INT 40
21319: PUSH
21320: LD_INT 50
21322: PUSH
21323: LD_INT 60
21325: PUSH
21326: LD_INT 70
21328: PUSH
21329: LD_INT 80
21331: PUSH
21332: LD_INT 90
21334: PUSH
21335: LD_INT 100
21337: PUSH
21338: LD_INT 110
21340: PUSH
21341: LD_INT 120
21343: PUSH
21344: LD_INT 130
21346: PUSH
21347: LD_INT 140
21349: PUSH
21350: LD_INT 150
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: PPUSH
21373: LD_INT 15
21375: PPUSH
21376: CALL_OW 12
21380: ARRAY
21381: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21382: LD_ADDR_VAR 0 4
21386: PUSH
21387: LD_INT 10
21389: PUSH
21390: LD_INT 20
21392: PUSH
21393: LD_INT 30
21395: PUSH
21396: LD_INT 40
21398: PUSH
21399: LD_INT 50
21401: PUSH
21402: LD_INT 60
21404: PUSH
21405: LD_INT 70
21407: PUSH
21408: LD_INT 80
21410: PUSH
21411: LD_INT 90
21413: PUSH
21414: LD_INT 100
21416: PUSH
21417: LD_INT 110
21419: PUSH
21420: LD_INT 120
21422: PUSH
21423: LD_INT 130
21425: PUSH
21426: LD_INT 140
21428: PUSH
21429: LD_INT 150
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PPUSH
21452: LD_INT 15
21454: PPUSH
21455: CALL_OW 12
21459: ARRAY
21460: ST_TO_ADDR
// if ValidHex ( x , y ) then
21461: LD_VAR 0 3
21465: PPUSH
21466: LD_VAR 0 4
21470: PPUSH
21471: CALL_OW 488
21475: IFFALSE 21498
// begin result := [ x , y ] ;
21477: LD_ADDR_VAR 0 1
21481: PUSH
21482: LD_VAR 0 3
21486: PUSH
21487: LD_VAR 0 4
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: ST_TO_ADDR
// break ;
21496: GO 21500
// end ; end ;
21498: GO 21300
21500: POP
21501: POP
// if result then
21502: LD_VAR 0 1
21506: IFFALSE 21566
// begin ToLua ( playSibBomb() ) ;
21508: LD_STRING playSibBomb()
21510: PPUSH
21511: CALL_OW 559
// wait ( 0 0$14 ) ;
21515: LD_INT 490
21517: PPUSH
21518: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21522: LD_VAR 0 1
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: LD_VAR 0 1
21535: PUSH
21536: LD_INT 2
21538: ARRAY
21539: PPUSH
21540: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21544: LD_VAR 0 1
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: PPUSH
21553: LD_VAR 0 1
21557: PUSH
21558: LD_INT 2
21560: ARRAY
21561: PPUSH
21562: CALL_OW 429
// end ; end ;
21566: LD_VAR 0 1
21570: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21571: LD_EXP 33
21575: IFFALSE 21583
21577: PUSH
21578: LD_EXP 55
21582: AND
21583: IFFALSE 21595
21585: GO 21587
21587: DISABLE
// YouLost (  ) ;
21588: LD_STRING 
21590: PPUSH
21591: CALL_OW 104
21595: END
// every 0 0$1 trigger StreamModeActive and sFog do
21596: LD_EXP 33
21600: IFFALSE 21608
21602: PUSH
21603: LD_EXP 54
21607: AND
21608: IFFALSE 21622
21610: GO 21612
21612: DISABLE
// FogOff ( your_side ) ;
21613: LD_OWVAR 2
21617: PPUSH
21618: CALL_OW 344
21622: END
// every 0 0$1 trigger StreamModeActive and sSun do
21623: LD_EXP 33
21627: IFFALSE 21635
21629: PUSH
21630: LD_EXP 56
21634: AND
21635: IFFALSE 21663
21637: GO 21639
21639: DISABLE
// begin solar_recharge_percent := 0 ;
21640: LD_ADDR_OWVAR 79
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21648: LD_INT 10500
21650: PPUSH
21651: CALL_OW 67
// solar_recharge_percent := 100 ;
21655: LD_ADDR_OWVAR 79
21659: PUSH
21660: LD_INT 100
21662: ST_TO_ADDR
// end ;
21663: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21664: LD_EXP 33
21668: IFFALSE 21676
21670: PUSH
21671: LD_EXP 57
21675: AND
21676: IFFALSE 21915
21678: GO 21680
21680: DISABLE
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
// begin tmp := [ ] ;
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: EMPTY
21692: ST_TO_ADDR
// for i := 1 to 6 do
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: DOUBLE
21699: LD_INT 1
21701: DEC
21702: ST_TO_ADDR
21703: LD_INT 6
21705: PUSH
21706: FOR_TO
21707: IFFALSE 21812
// begin uc_nation := nation_nature ;
21709: LD_ADDR_OWVAR 21
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// uc_side := 0 ;
21717: LD_ADDR_OWVAR 20
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21725: LD_ADDR_OWVAR 29
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 12
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
// hc_agressivity := 20 ;
21740: LD_ADDR_OWVAR 35
21744: PUSH
21745: LD_INT 20
21747: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21748: LD_ADDR_OWVAR 28
21752: PUSH
21753: LD_INT 17
21755: ST_TO_ADDR
// hc_gallery :=  ;
21756: LD_ADDR_OWVAR 33
21760: PUSH
21761: LD_STRING 
21763: ST_TO_ADDR
// hc_name :=  ;
21764: LD_ADDR_OWVAR 26
21768: PUSH
21769: LD_STRING 
21771: ST_TO_ADDR
// un := CreateHuman ;
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: CALL_OW 44
21781: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21782: LD_VAR 0 2
21786: PPUSH
21787: LD_INT 1
21789: PPUSH
21790: CALL_OW 51
// tmp := tmp ^ un ;
21794: LD_ADDR_VAR 0 3
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_VAR 0 2
21808: ADD
21809: ST_TO_ADDR
// end ;
21810: GO 21706
21812: POP
21813: POP
// repeat wait ( 0 0$1 ) ;
21814: LD_INT 35
21816: PPUSH
21817: CALL_OW 67
// for un in tmp do
21821: LD_ADDR_VAR 0 2
21825: PUSH
21826: LD_VAR 0 3
21830: PUSH
21831: FOR_IN
21832: IFFALSE 21906
// begin if IsDead ( un ) then
21834: LD_VAR 0 2
21838: PPUSH
21839: CALL_OW 301
21843: IFFALSE 21863
// begin tmp := tmp diff un ;
21845: LD_ADDR_VAR 0 3
21849: PUSH
21850: LD_VAR 0 3
21854: PUSH
21855: LD_VAR 0 2
21859: DIFF
21860: ST_TO_ADDR
// continue ;
21861: GO 21831
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21863: LD_VAR 0 2
21867: PPUSH
21868: LD_INT 3
21870: PUSH
21871: LD_INT 22
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PPUSH
21885: CALL_OW 69
21889: PPUSH
21890: LD_VAR 0 2
21894: PPUSH
21895: CALL_OW 74
21899: PPUSH
21900: CALL_OW 115
// end ;
21904: GO 21831
21906: POP
21907: POP
// until not tmp ;
21908: LD_VAR 0 3
21912: NOT
21913: IFFALSE 21814
// end ;
21915: PPOPN 3
21917: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21918: LD_EXP 33
21922: IFFALSE 21930
21924: PUSH
21925: LD_EXP 58
21929: AND
21930: IFFALSE 21984
21932: GO 21934
21934: DISABLE
// begin ToLua ( displayTroll(); ) ;
21935: LD_STRING displayTroll();
21937: PPUSH
21938: CALL_OW 559
// wait ( 3 3$00 ) ;
21942: LD_INT 6300
21944: PPUSH
21945: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21949: LD_STRING hideTroll();
21951: PPUSH
21952: CALL_OW 559
// wait ( 1 1$00 ) ;
21956: LD_INT 2100
21958: PPUSH
21959: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21963: LD_STRING displayTroll();
21965: PPUSH
21966: CALL_OW 559
// wait ( 1 1$00 ) ;
21970: LD_INT 2100
21972: PPUSH
21973: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21977: LD_STRING hideTroll();
21979: PPUSH
21980: CALL_OW 559
// end ;
21984: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21985: LD_EXP 33
21989: IFFALSE 21997
21991: PUSH
21992: LD_EXP 59
21996: AND
21997: IFFALSE 22060
21999: GO 22001
22001: DISABLE
22002: LD_INT 0
22004: PPUSH
// begin p := 0 ;
22005: LD_ADDR_VAR 0 1
22009: PUSH
22010: LD_INT 0
22012: ST_TO_ADDR
// repeat game_speed := 1 ;
22013: LD_ADDR_OWVAR 65
22017: PUSH
22018: LD_INT 1
22020: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22021: LD_INT 35
22023: PPUSH
22024: CALL_OW 67
// p := p + 1 ;
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: LD_VAR 0 1
22037: PUSH
22038: LD_INT 1
22040: PLUS
22041: ST_TO_ADDR
// until p >= 60 ;
22042: LD_VAR 0 1
22046: PUSH
22047: LD_INT 60
22049: GREATEREQUAL
22050: IFFALSE 22013
// game_speed := 4 ;
22052: LD_ADDR_OWVAR 65
22056: PUSH
22057: LD_INT 4
22059: ST_TO_ADDR
// end ;
22060: PPOPN 1
22062: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22063: LD_EXP 33
22067: IFFALSE 22075
22069: PUSH
22070: LD_EXP 60
22074: AND
22075: IFFALSE 22221
22077: GO 22079
22079: DISABLE
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22084: LD_ADDR_VAR 0 1
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_OWVAR 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 30
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PPUSH
22133: CALL_OW 69
22137: ST_TO_ADDR
// if not depot then
22138: LD_VAR 0 1
22142: NOT
22143: IFFALSE 22147
// exit ;
22145: GO 22221
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22147: LD_ADDR_VAR 0 2
22151: PUSH
22152: LD_VAR 0 1
22156: PUSH
22157: LD_INT 1
22159: PPUSH
22160: LD_VAR 0 1
22164: PPUSH
22165: CALL_OW 12
22169: ARRAY
22170: PPUSH
22171: CALL_OW 274
22175: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22176: LD_VAR 0 2
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: LD_INT 0
22186: PPUSH
22187: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_INT 2
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22206: LD_VAR 0 2
22210: PPUSH
22211: LD_INT 3
22213: PPUSH
22214: LD_INT 0
22216: PPUSH
22217: CALL_OW 277
// end ;
22221: PPOPN 2
22223: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22224: LD_EXP 33
22228: IFFALSE 22236
22230: PUSH
22231: LD_EXP 61
22235: AND
22236: IFFALSE 22333
22238: GO 22240
22240: DISABLE
22241: LD_INT 0
22243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22244: LD_ADDR_VAR 0 1
22248: PUSH
22249: LD_INT 22
22251: PUSH
22252: LD_OWVAR 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 21
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: PPUSH
22293: CALL_OW 69
22297: ST_TO_ADDR
// if not tmp then
22298: LD_VAR 0 1
22302: NOT
22303: IFFALSE 22307
// exit ;
22305: GO 22333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22307: LD_VAR 0 1
22311: PUSH
22312: LD_INT 1
22314: PPUSH
22315: LD_VAR 0 1
22319: PPUSH
22320: CALL_OW 12
22324: ARRAY
22325: PPUSH
22326: LD_INT 200
22328: PPUSH
22329: CALL_OW 234
// end ;
22333: PPOPN 1
22335: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22336: LD_EXP 33
22340: IFFALSE 22348
22342: PUSH
22343: LD_EXP 62
22347: AND
22348: IFFALSE 22427
22350: GO 22352
22352: DISABLE
22353: LD_INT 0
22355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22356: LD_ADDR_VAR 0 1
22360: PUSH
22361: LD_INT 22
22363: PUSH
22364: LD_OWVAR 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 21
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 69
22391: ST_TO_ADDR
// if not tmp then
22392: LD_VAR 0 1
22396: NOT
22397: IFFALSE 22401
// exit ;
22399: GO 22427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22401: LD_VAR 0 1
22405: PUSH
22406: LD_INT 1
22408: PPUSH
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 12
22418: ARRAY
22419: PPUSH
22420: LD_INT 60
22422: PPUSH
22423: CALL_OW 234
// end ;
22427: PPOPN 1
22429: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22430: LD_EXP 33
22434: IFFALSE 22442
22436: PUSH
22437: LD_EXP 63
22441: AND
22442: IFFALSE 22541
22444: GO 22446
22446: DISABLE
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
// begin enable ;
22451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22452: LD_ADDR_VAR 0 1
22456: PUSH
22457: LD_INT 22
22459: PUSH
22460: LD_OWVAR 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 61
22471: PUSH
22472: EMPTY
22473: LIST
22474: PUSH
22475: LD_INT 33
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PPUSH
22490: CALL_OW 69
22494: ST_TO_ADDR
// if not tmp then
22495: LD_VAR 0 1
22499: NOT
22500: IFFALSE 22504
// exit ;
22502: GO 22541
// for i in tmp do
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_VAR 0 1
22513: PUSH
22514: FOR_IN
22515: IFFALSE 22539
// if IsControledBy ( i ) then
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL_OW 312
22526: IFFALSE 22537
// ComUnlink ( i ) ;
22528: LD_VAR 0 2
22532: PPUSH
22533: CALL_OW 136
22537: GO 22514
22539: POP
22540: POP
// end ;
22541: PPOPN 2
22543: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22544: LD_EXP 33
22548: IFFALSE 22556
22550: PUSH
22551: LD_EXP 64
22555: AND
22556: IFFALSE 22696
22558: GO 22560
22560: DISABLE
22561: LD_INT 0
22563: PPUSH
22564: PPUSH
// begin ToLua ( displayPowell(); ) ;
22565: LD_STRING displayPowell();
22567: PPUSH
22568: CALL_OW 559
// uc_side := 0 ;
22572: LD_ADDR_OWVAR 20
22576: PUSH
22577: LD_INT 0
22579: ST_TO_ADDR
// uc_nation := 2 ;
22580: LD_ADDR_OWVAR 21
22584: PUSH
22585: LD_INT 2
22587: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22588: LD_ADDR_OWVAR 37
22592: PUSH
22593: LD_INT 14
22595: ST_TO_ADDR
// vc_engine := engine_siberite ;
22596: LD_ADDR_OWVAR 39
22600: PUSH
22601: LD_INT 3
22603: ST_TO_ADDR
// vc_control := control_apeman ;
22604: LD_ADDR_OWVAR 38
22608: PUSH
22609: LD_INT 5
22611: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22612: LD_ADDR_OWVAR 40
22616: PUSH
22617: LD_INT 29
22619: ST_TO_ADDR
// un := CreateVehicle ;
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: CALL_OW 45
22629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22630: LD_VAR 0 2
22634: PPUSH
22635: LD_INT 1
22637: PPUSH
22638: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22642: LD_INT 35
22644: PPUSH
22645: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_INT 22
22656: PUSH
22657: LD_OWVAR 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PPUSH
22666: CALL_OW 69
22670: PPUSH
22671: LD_VAR 0 2
22675: PPUSH
22676: CALL_OW 74
22680: PPUSH
22681: CALL_OW 115
// until IsDead ( un ) ;
22685: LD_VAR 0 2
22689: PPUSH
22690: CALL_OW 301
22694: IFFALSE 22642
// end ;
22696: PPOPN 2
22698: END
// every 0 0$1 trigger StreamModeActive and sStu do
22699: LD_EXP 33
22703: IFFALSE 22711
22705: PUSH
22706: LD_EXP 72
22710: AND
22711: IFFALSE 22727
22713: GO 22715
22715: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22716: LD_STRING displayStucuk();
22718: PPUSH
22719: CALL_OW 559
// ResetFog ;
22723: CALL_OW 335
// end ;
22727: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22728: LD_EXP 33
22732: IFFALSE 22740
22734: PUSH
22735: LD_EXP 65
22739: AND
22740: IFFALSE 22881
22742: GO 22744
22744: DISABLE
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22749: LD_ADDR_VAR 0 2
22753: PUSH
22754: LD_INT 22
22756: PUSH
22757: LD_OWVAR 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 21
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PPUSH
22780: CALL_OW 69
22784: ST_TO_ADDR
// if not tmp then
22785: LD_VAR 0 2
22789: NOT
22790: IFFALSE 22794
// exit ;
22792: GO 22881
// un := tmp [ rand ( 1 , tmp ) ] ;
22794: LD_ADDR_VAR 0 1
22798: PUSH
22799: LD_VAR 0 2
22803: PUSH
22804: LD_INT 1
22806: PPUSH
22807: LD_VAR 0 2
22811: PPUSH
22812: CALL_OW 12
22816: ARRAY
22817: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22818: LD_VAR 0 1
22822: PPUSH
22823: LD_INT 0
22825: PPUSH
22826: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22830: LD_VAR 0 1
22834: PPUSH
22835: LD_OWVAR 3
22839: PUSH
22840: LD_VAR 0 1
22844: DIFF
22845: PPUSH
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 74
22855: PPUSH
22856: CALL_OW 115
// wait ( 0 0$20 ) ;
22860: LD_INT 700
22862: PPUSH
22863: CALL_OW 67
// SetSide ( un , your_side ) ;
22867: LD_VAR 0 1
22871: PPUSH
22872: LD_OWVAR 2
22876: PPUSH
22877: CALL_OW 235
// end ;
22881: PPOPN 2
22883: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22884: LD_EXP 33
22888: IFFALSE 22896
22890: PUSH
22891: LD_EXP 66
22895: AND
22896: IFFALSE 23002
22898: GO 22900
22900: DISABLE
22901: LD_INT 0
22903: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22904: LD_ADDR_VAR 0 1
22908: PUSH
22909: LD_INT 22
22911: PUSH
22912: LD_OWVAR 2
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: LD_INT 30
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 30
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PPUSH
22953: CALL_OW 69
22957: ST_TO_ADDR
// if not depot then
22958: LD_VAR 0 1
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23002
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22967: LD_VAR 0 1
22971: PUSH
22972: LD_INT 1
22974: ARRAY
22975: PPUSH
22976: CALL_OW 250
22980: PPUSH
22981: LD_VAR 0 1
22985: PUSH
22986: LD_INT 1
22988: ARRAY
22989: PPUSH
22990: CALL_OW 251
22994: PPUSH
22995: LD_INT 70
22997: PPUSH
22998: CALL_OW 495
// end ;
23002: PPOPN 1
23004: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23005: LD_EXP 33
23009: IFFALSE 23017
23011: PUSH
23012: LD_EXP 67
23016: AND
23017: IFFALSE 23228
23019: GO 23021
23021: DISABLE
23022: LD_INT 0
23024: PPUSH
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23029: LD_ADDR_VAR 0 5
23033: PUSH
23034: LD_INT 22
23036: PUSH
23037: LD_OWVAR 2
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 21
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 69
23064: ST_TO_ADDR
// if not tmp then
23065: LD_VAR 0 5
23069: NOT
23070: IFFALSE 23074
// exit ;
23072: GO 23228
// for i in tmp do
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_VAR 0 5
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23226
// begin d := rand ( 0 , 5 ) ;
23087: LD_ADDR_VAR 0 4
23091: PUSH
23092: LD_INT 0
23094: PPUSH
23095: LD_INT 5
23097: PPUSH
23098: CALL_OW 12
23102: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 250
23117: PPUSH
23118: LD_VAR 0 4
23122: PPUSH
23123: LD_INT 3
23125: PPUSH
23126: LD_INT 12
23128: PPUSH
23129: CALL_OW 12
23133: PPUSH
23134: CALL_OW 272
23138: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23139: LD_ADDR_VAR 0 3
23143: PUSH
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 251
23153: PPUSH
23154: LD_VAR 0 4
23158: PPUSH
23159: LD_INT 3
23161: PPUSH
23162: LD_INT 12
23164: PPUSH
23165: CALL_OW 12
23169: PPUSH
23170: CALL_OW 273
23174: ST_TO_ADDR
// if ValidHex ( x , y ) then
23175: LD_VAR 0 2
23179: PPUSH
23180: LD_VAR 0 3
23184: PPUSH
23185: CALL_OW 488
23189: IFFALSE 23224
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 3
23208: PPUSH
23209: LD_INT 6
23211: PPUSH
23212: CALL_OW 12
23216: PPUSH
23217: LD_INT 1
23219: PPUSH
23220: CALL_OW 483
// end ;
23224: GO 23084
23226: POP
23227: POP
// end ;
23228: PPOPN 5
23230: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23231: LD_EXP 33
23235: IFFALSE 23243
23237: PUSH
23238: LD_EXP 68
23242: AND
23243: IFFALSE 23337
23245: GO 23247
23247: DISABLE
23248: LD_INT 0
23250: PPUSH
23251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23252: LD_ADDR_VAR 0 2
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_OWVAR 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 32
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 21
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: PPUSH
23294: CALL_OW 69
23298: ST_TO_ADDR
// if not tmp then
23299: LD_VAR 0 2
23303: NOT
23304: IFFALSE 23308
// exit ;
23306: GO 23337
// for i in tmp do
23308: LD_ADDR_VAR 0 1
23312: PUSH
23313: LD_VAR 0 2
23317: PUSH
23318: FOR_IN
23319: IFFALSE 23335
// SetFuel ( i , 0 ) ;
23321: LD_VAR 0 1
23325: PPUSH
23326: LD_INT 0
23328: PPUSH
23329: CALL_OW 240
23333: GO 23318
23335: POP
23336: POP
// end ;
23337: PPOPN 2
23339: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23340: LD_EXP 33
23344: IFFALSE 23352
23346: PUSH
23347: LD_EXP 69
23351: AND
23352: IFFALSE 23418
23354: GO 23356
23356: DISABLE
23357: LD_INT 0
23359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23360: LD_ADDR_VAR 0 1
23364: PUSH
23365: LD_INT 22
23367: PUSH
23368: LD_OWVAR 2
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 30
23379: PUSH
23380: LD_INT 29
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PPUSH
23391: CALL_OW 69
23395: ST_TO_ADDR
// if not tmp then
23396: LD_VAR 0 1
23400: NOT
23401: IFFALSE 23405
// exit ;
23403: GO 23418
// DestroyUnit ( tmp [ 1 ] ) ;
23405: LD_VAR 0 1
23409: PUSH
23410: LD_INT 1
23412: ARRAY
23413: PPUSH
23414: CALL_OW 65
// end ;
23418: PPOPN 1
23420: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23421: LD_EXP 33
23425: IFFALSE 23433
23427: PUSH
23428: LD_EXP 71
23432: AND
23433: IFFALSE 23562
23435: GO 23437
23437: DISABLE
23438: LD_INT 0
23440: PPUSH
// begin uc_side := 0 ;
23441: LD_ADDR_OWVAR 20
23445: PUSH
23446: LD_INT 0
23448: ST_TO_ADDR
// uc_nation := nation_arabian ;
23449: LD_ADDR_OWVAR 21
23453: PUSH
23454: LD_INT 2
23456: ST_TO_ADDR
// hc_gallery :=  ;
23457: LD_ADDR_OWVAR 33
23461: PUSH
23462: LD_STRING 
23464: ST_TO_ADDR
// hc_name :=  ;
23465: LD_ADDR_OWVAR 26
23469: PUSH
23470: LD_STRING 
23472: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23473: LD_INT 1
23475: PPUSH
23476: LD_INT 11
23478: PPUSH
23479: LD_INT 10
23481: PPUSH
23482: CALL_OW 380
// un := CreateHuman ;
23486: LD_ADDR_VAR 0 1
23490: PUSH
23491: CALL_OW 44
23495: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23496: LD_VAR 0 1
23500: PPUSH
23501: LD_INT 1
23503: PPUSH
23504: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23508: LD_INT 35
23510: PPUSH
23511: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23515: LD_VAR 0 1
23519: PPUSH
23520: LD_INT 22
23522: PUSH
23523: LD_OWVAR 2
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 69
23536: PPUSH
23537: LD_VAR 0 1
23541: PPUSH
23542: CALL_OW 74
23546: PPUSH
23547: CALL_OW 115
// until IsDead ( un ) ;
23551: LD_VAR 0 1
23555: PPUSH
23556: CALL_OW 301
23560: IFFALSE 23508
// end ;
23562: PPOPN 1
23564: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23565: LD_EXP 33
23569: IFFALSE 23577
23571: PUSH
23572: LD_EXP 73
23576: AND
23577: IFFALSE 23589
23579: GO 23581
23581: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23582: LD_STRING earthquake(getX(game), 0, 32)
23584: PPUSH
23585: CALL_OW 559
23589: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23590: LD_EXP 33
23594: IFFALSE 23602
23596: PUSH
23597: LD_EXP 74
23601: AND
23602: IFFALSE 23693
23604: GO 23606
23606: DISABLE
23607: LD_INT 0
23609: PPUSH
// begin enable ;
23610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23611: LD_ADDR_VAR 0 1
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_OWVAR 2
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 21
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 33
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: ST_TO_ADDR
// if not tmp then
23658: LD_VAR 0 1
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23667: LD_VAR 0 1
23671: PUSH
23672: LD_INT 1
23674: PPUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL_OW 12
23684: ARRAY
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 234
// end ;
23693: PPOPN 1
23695: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23696: LD_EXP 33
23700: IFFALSE 23708
23702: PUSH
23703: LD_EXP 75
23707: AND
23708: IFFALSE 23849
23710: GO 23712
23712: DISABLE
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: LD_INT 22
23725: PUSH
23726: LD_OWVAR 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 25
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PPUSH
23749: CALL_OW 69
23753: ST_TO_ADDR
// if not tmp then
23754: LD_VAR 0 3
23758: NOT
23759: IFFALSE 23763
// exit ;
23761: GO 23849
// un := tmp [ rand ( 1 , tmp ) ] ;
23763: LD_ADDR_VAR 0 2
23767: PUSH
23768: LD_VAR 0 3
23772: PUSH
23773: LD_INT 1
23775: PPUSH
23776: LD_VAR 0 3
23780: PPUSH
23781: CALL_OW 12
23785: ARRAY
23786: ST_TO_ADDR
// if Crawls ( un ) then
23787: LD_VAR 0 2
23791: PPUSH
23792: CALL_OW 318
23796: IFFALSE 23807
// ComWalk ( un ) ;
23798: LD_VAR 0 2
23802: PPUSH
23803: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23807: LD_VAR 0 2
23811: PPUSH
23812: LD_INT 9
23814: PPUSH
23815: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23819: LD_INT 28
23821: PPUSH
23822: LD_OWVAR 2
23826: PPUSH
23827: LD_INT 2
23829: PPUSH
23830: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23834: LD_INT 29
23836: PPUSH
23837: LD_OWVAR 2
23841: PPUSH
23842: LD_INT 2
23844: PPUSH
23845: CALL_OW 322
// end ;
23849: PPOPN 3
23851: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23852: LD_EXP 33
23856: IFFALSE 23864
23858: PUSH
23859: LD_EXP 76
23863: AND
23864: IFFALSE 23975
23866: GO 23868
23868: DISABLE
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
23873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23874: LD_ADDR_VAR 0 3
23878: PUSH
23879: LD_INT 22
23881: PUSH
23882: LD_OWVAR 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 25
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PPUSH
23905: CALL_OW 69
23909: ST_TO_ADDR
// if not tmp then
23910: LD_VAR 0 3
23914: NOT
23915: IFFALSE 23919
// exit ;
23917: GO 23975
// un := tmp [ rand ( 1 , tmp ) ] ;
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_VAR 0 3
23928: PUSH
23929: LD_INT 1
23931: PPUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: CALL_OW 12
23941: ARRAY
23942: ST_TO_ADDR
// if Crawls ( un ) then
23943: LD_VAR 0 2
23947: PPUSH
23948: CALL_OW 318
23952: IFFALSE 23963
// ComWalk ( un ) ;
23954: LD_VAR 0 2
23958: PPUSH
23959: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23963: LD_VAR 0 2
23967: PPUSH
23968: LD_INT 8
23970: PPUSH
23971: CALL_OW 336
// end ;
23975: PPOPN 3
23977: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23978: LD_EXP 33
23982: IFFALSE 23990
23984: PUSH
23985: LD_EXP 77
23989: AND
23990: IFFALSE 24134
23992: GO 23994
23994: DISABLE
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_OWVAR 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 34
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 34
24041: PUSH
24042: LD_INT 51
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 34
24051: PUSH
24052: LD_INT 32
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 69
24074: ST_TO_ADDR
// if not tmp then
24075: LD_VAR 0 2
24079: NOT
24080: IFFALSE 24084
// exit ;
24082: GO 24134
// for i in tmp do
24084: LD_ADDR_VAR 0 1
24088: PUSH
24089: LD_VAR 0 2
24093: PUSH
24094: FOR_IN
24095: IFFALSE 24132
// if GetCargo ( i , mat_artifact ) = 0 then
24097: LD_VAR 0 1
24101: PPUSH
24102: LD_INT 4
24104: PPUSH
24105: CALL_OW 289
24109: PUSH
24110: LD_INT 0
24112: EQUAL
24113: IFFALSE 24130
// SetCargo ( i , mat_siberit , 100 ) ;
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: LD_INT 100
24125: PPUSH
24126: CALL_OW 290
24130: GO 24094
24132: POP
24133: POP
// end ;
24134: PPOPN 2
24136: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24137: LD_EXP 33
24141: IFFALSE 24149
24143: PUSH
24144: LD_EXP 78
24148: AND
24149: IFFALSE 24332
24151: GO 24153
24153: DISABLE
24154: LD_INT 0
24156: PPUSH
24157: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24158: LD_ADDR_VAR 0 2
24162: PUSH
24163: LD_INT 22
24165: PUSH
24166: LD_OWVAR 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PPUSH
24175: CALL_OW 69
24179: ST_TO_ADDR
// if not tmp then
24180: LD_VAR 0 2
24184: NOT
24185: IFFALSE 24189
// exit ;
24187: GO 24332
// for i := 1 to 2 do
24189: LD_ADDR_VAR 0 1
24193: PUSH
24194: DOUBLE
24195: LD_INT 1
24197: DEC
24198: ST_TO_ADDR
24199: LD_INT 2
24201: PUSH
24202: FOR_TO
24203: IFFALSE 24330
// begin uc_side := your_side ;
24205: LD_ADDR_OWVAR 20
24209: PUSH
24210: LD_OWVAR 2
24214: ST_TO_ADDR
// uc_nation := nation_american ;
24215: LD_ADDR_OWVAR 21
24219: PUSH
24220: LD_INT 1
24222: ST_TO_ADDR
// vc_chassis := us_morphling ;
24223: LD_ADDR_OWVAR 37
24227: PUSH
24228: LD_INT 5
24230: ST_TO_ADDR
// vc_engine := engine_siberite ;
24231: LD_ADDR_OWVAR 39
24235: PUSH
24236: LD_INT 3
24238: ST_TO_ADDR
// vc_control := control_computer ;
24239: LD_ADDR_OWVAR 38
24243: PUSH
24244: LD_INT 3
24246: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24247: LD_ADDR_OWVAR 40
24251: PUSH
24252: LD_INT 10
24254: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24255: LD_VAR 0 2
24259: PUSH
24260: LD_INT 1
24262: ARRAY
24263: PPUSH
24264: CALL_OW 310
24268: NOT
24269: IFFALSE 24316
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24271: CALL_OW 45
24275: PPUSH
24276: LD_VAR 0 2
24280: PUSH
24281: LD_INT 1
24283: ARRAY
24284: PPUSH
24285: CALL_OW 250
24289: PPUSH
24290: LD_VAR 0 2
24294: PUSH
24295: LD_INT 1
24297: ARRAY
24298: PPUSH
24299: CALL_OW 251
24303: PPUSH
24304: LD_INT 12
24306: PPUSH
24307: LD_INT 1
24309: PPUSH
24310: CALL_OW 50
24314: GO 24328
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24316: CALL_OW 45
24320: PPUSH
24321: LD_INT 1
24323: PPUSH
24324: CALL_OW 51
// end ;
24328: GO 24202
24330: POP
24331: POP
// end ;
24332: PPOPN 2
24334: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24335: LD_EXP 33
24339: IFFALSE 24347
24341: PUSH
24342: LD_EXP 79
24346: AND
24347: IFFALSE 24569
24349: GO 24351
24351: DISABLE
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
24356: PPUSH
24357: PPUSH
24358: PPUSH
24359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24360: LD_ADDR_VAR 0 6
24364: PUSH
24365: LD_INT 22
24367: PUSH
24368: LD_OWVAR 2
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 3
24389: PUSH
24390: LD_INT 23
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: ST_TO_ADDR
// if not tmp then
24414: LD_VAR 0 6
24418: NOT
24419: IFFALSE 24423
// exit ;
24421: GO 24569
// s1 := rand ( 1 , 4 ) ;
24423: LD_ADDR_VAR 0 2
24427: PUSH
24428: LD_INT 1
24430: PPUSH
24431: LD_INT 4
24433: PPUSH
24434: CALL_OW 12
24438: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: LD_VAR 0 6
24448: PUSH
24449: LD_INT 1
24451: ARRAY
24452: PPUSH
24453: LD_VAR 0 2
24457: PPUSH
24458: CALL_OW 259
24462: ST_TO_ADDR
// if s1 = 1 then
24463: LD_VAR 0 2
24467: PUSH
24468: LD_INT 1
24470: EQUAL
24471: IFFALSE 24491
// s2 := rand ( 2 , 4 ) else
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_INT 2
24480: PPUSH
24481: LD_INT 4
24483: PPUSH
24484: CALL_OW 12
24488: ST_TO_ADDR
24489: GO 24499
// s2 := 1 ;
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: LD_INT 1
24498: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24499: LD_ADDR_VAR 0 5
24503: PUSH
24504: LD_VAR 0 6
24508: PUSH
24509: LD_INT 1
24511: ARRAY
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: CALL_OW 259
24522: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24523: LD_VAR 0 6
24527: PUSH
24528: LD_INT 1
24530: ARRAY
24531: PPUSH
24532: LD_VAR 0 2
24536: PPUSH
24537: LD_VAR 0 5
24541: PPUSH
24542: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24546: LD_VAR 0 6
24550: PUSH
24551: LD_INT 1
24553: ARRAY
24554: PPUSH
24555: LD_VAR 0 3
24559: PPUSH
24560: LD_VAR 0 4
24564: PPUSH
24565: CALL_OW 237
// end ;
24569: PPOPN 6
24571: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24572: LD_EXP 33
24576: IFFALSE 24584
24578: PUSH
24579: LD_EXP 80
24583: AND
24584: IFFALSE 24663
24586: GO 24588
24588: DISABLE
24589: LD_INT 0
24591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_INT 22
24599: PUSH
24600: LD_OWVAR 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 30
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PPUSH
24623: CALL_OW 69
24627: ST_TO_ADDR
// if not tmp then
24628: LD_VAR 0 1
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24637: LD_VAR 0 1
24641: PUSH
24642: LD_INT 1
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 12
24654: ARRAY
24655: PPUSH
24656: LD_INT 1
24658: PPUSH
24659: CALL_OW 234
// end ;
24663: PPOPN 1
24665: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24666: LD_EXP 33
24670: IFFALSE 24678
24672: PUSH
24673: LD_EXP 81
24677: AND
24678: IFFALSE 24790
24680: GO 24682
24682: DISABLE
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24687: LD_ADDR_VAR 0 2
24691: PUSH
24692: LD_INT 22
24694: PUSH
24695: LD_OWVAR 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: LD_INT 27
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 30
24719: PUSH
24720: LD_INT 26
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 30
24729: PUSH
24730: LD_INT 28
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 69
24751: ST_TO_ADDR
// if not tmp then
24752: LD_VAR 0 2
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 24790
// for i in tmp do
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_VAR 0 2
24770: PUSH
24771: FOR_IN
24772: IFFALSE 24788
// SetLives ( i , 1 ) ;
24774: LD_VAR 0 1
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: CALL_OW 234
24786: GO 24771
24788: POP
24789: POP
// end ;
24790: PPOPN 2
24792: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24793: LD_EXP 33
24797: IFFALSE 24805
24799: PUSH
24800: LD_EXP 82
24804: AND
24805: IFFALSE 25092
24807: GO 24809
24809: DISABLE
24810: LD_INT 0
24812: PPUSH
24813: PPUSH
24814: PPUSH
// begin i := rand ( 1 , 7 ) ;
24815: LD_ADDR_VAR 0 1
24819: PUSH
24820: LD_INT 1
24822: PPUSH
24823: LD_INT 7
24825: PPUSH
24826: CALL_OW 12
24830: ST_TO_ADDR
// case i of 1 :
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 1
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24854
24844: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24845: LD_STRING earthquake(getX(game), 0, 32)
24847: PPUSH
24848: CALL_OW 559
24852: GO 25092
24854: LD_INT 2
24856: DOUBLE
24857: EQUAL
24858: IFTRUE 24862
24860: GO 24876
24862: POP
// begin ToLua ( displayStucuk(); ) ;
24863: LD_STRING displayStucuk();
24865: PPUSH
24866: CALL_OW 559
// ResetFog ;
24870: CALL_OW 335
// end ; 3 :
24874: GO 25092
24876: LD_INT 3
24878: DOUBLE
24879: EQUAL
24880: IFTRUE 24884
24882: GO 24988
24884: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24885: LD_ADDR_VAR 0 2
24889: PUSH
24890: LD_INT 22
24892: PUSH
24893: LD_OWVAR 2
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PPUSH
24916: CALL_OW 69
24920: ST_TO_ADDR
// if not tmp then
24921: LD_VAR 0 2
24925: NOT
24926: IFFALSE 24930
// exit ;
24928: GO 25092
// un := tmp [ rand ( 1 , tmp ) ] ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_VAR 0 2
24939: PUSH
24940: LD_INT 1
24942: PPUSH
24943: LD_VAR 0 2
24947: PPUSH
24948: CALL_OW 12
24952: ARRAY
24953: ST_TO_ADDR
// if Crawls ( un ) then
24954: LD_VAR 0 3
24958: PPUSH
24959: CALL_OW 318
24963: IFFALSE 24974
// ComWalk ( un ) ;
24965: LD_VAR 0 3
24969: PPUSH
24970: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24974: LD_VAR 0 3
24978: PPUSH
24979: LD_INT 8
24981: PPUSH
24982: CALL_OW 336
// end ; 4 :
24986: GO 25092
24988: LD_INT 4
24990: DOUBLE
24991: EQUAL
24992: IFTRUE 24996
24994: GO 25070
24996: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24997: LD_ADDR_VAR 0 2
25001: PUSH
25002: LD_INT 22
25004: PUSH
25005: LD_OWVAR 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 30
25016: PUSH
25017: LD_INT 29
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PPUSH
25028: CALL_OW 69
25032: ST_TO_ADDR
// if not tmp then
25033: LD_VAR 0 2
25037: NOT
25038: IFFALSE 25042
// exit ;
25040: GO 25092
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25042: LD_VAR 0 2
25046: PUSH
25047: LD_INT 1
25049: ARRAY
25050: PPUSH
25051: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25055: LD_VAR 0 2
25059: PUSH
25060: LD_INT 1
25062: ARRAY
25063: PPUSH
25064: CALL_OW 65
// end ; 5 .. 7 :
25068: GO 25092
25070: LD_INT 5
25072: DOUBLE
25073: GREATEREQUAL
25074: IFFALSE 25082
25076: LD_INT 7
25078: DOUBLE
25079: LESSEQUAL
25080: IFTRUE 25084
25082: GO 25091
25084: POP
// StreamSibBomb ; end ;
25085: CALL 21273 0 0
25089: GO 25092
25091: POP
// end ;
25092: PPOPN 3
25094: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25095: LD_EXP 33
25099: IFFALSE 25107
25101: PUSH
25102: LD_EXP 83
25106: AND
25107: IFFALSE 25263
25109: GO 25111
25111: DISABLE
25112: LD_INT 0
25114: PPUSH
25115: PPUSH
25116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25117: LD_ADDR_VAR 0 2
25121: PUSH
25122: LD_INT 81
25124: PUSH
25125: LD_OWVAR 2
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 21
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 21
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 2
25175: NOT
25176: IFFALSE 25180
// exit ;
25178: GO 25263
// p := 0 ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 0
25187: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25188: LD_INT 35
25190: PPUSH
25191: CALL_OW 67
// p := p + 1 ;
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_VAR 0 3
25204: PUSH
25205: LD_INT 1
25207: PLUS
25208: ST_TO_ADDR
// for i in tmp do
25209: LD_ADDR_VAR 0 1
25213: PUSH
25214: LD_VAR 0 2
25218: PUSH
25219: FOR_IN
25220: IFFALSE 25251
// if GetLives ( i ) < 1000 then
25222: LD_VAR 0 1
25226: PPUSH
25227: CALL_OW 256
25231: PUSH
25232: LD_INT 1000
25234: LESS
25235: IFFALSE 25249
// SetLives ( i , 1000 ) ;
25237: LD_VAR 0 1
25241: PPUSH
25242: LD_INT 1000
25244: PPUSH
25245: CALL_OW 234
25249: GO 25219
25251: POP
25252: POP
// until p > 20 ;
25253: LD_VAR 0 3
25257: PUSH
25258: LD_INT 20
25260: GREATER
25261: IFFALSE 25188
// end ;
25263: PPOPN 3
25265: END
// every 0 0$1 trigger StreamModeActive and sTime do
25266: LD_EXP 33
25270: IFFALSE 25278
25272: PUSH
25273: LD_EXP 84
25277: AND
25278: IFFALSE 25313
25280: GO 25282
25282: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25283: LD_INT 28
25285: PPUSH
25286: LD_OWVAR 2
25290: PPUSH
25291: LD_INT 2
25293: PPUSH
25294: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25298: LD_INT 30
25300: PPUSH
25301: LD_OWVAR 2
25305: PPUSH
25306: LD_INT 2
25308: PPUSH
25309: CALL_OW 322
// end ;
25313: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25314: LD_EXP 33
25318: IFFALSE 25326
25320: PUSH
25321: LD_EXP 85
25325: AND
25326: IFFALSE 25447
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25335: LD_ADDR_VAR 0 2
25339: PUSH
25340: LD_INT 22
25342: PUSH
25343: LD_OWVAR 2
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 21
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 3
25364: PUSH
25365: LD_INT 23
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: PPUSH
25384: CALL_OW 69
25388: ST_TO_ADDR
// if not tmp then
25389: LD_VAR 0 2
25393: NOT
25394: IFFALSE 25398
// exit ;
25396: GO 25447
// for i in tmp do
25398: LD_ADDR_VAR 0 1
25402: PUSH
25403: LD_VAR 0 2
25407: PUSH
25408: FOR_IN
25409: IFFALSE 25445
// begin if Crawls ( i ) then
25411: LD_VAR 0 1
25415: PPUSH
25416: CALL_OW 318
25420: IFFALSE 25431
// ComWalk ( i ) ;
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 138
// SetClass ( i , 2 ) ;
25431: LD_VAR 0 1
25435: PPUSH
25436: LD_INT 2
25438: PPUSH
25439: CALL_OW 336
// end ;
25443: GO 25408
25445: POP
25446: POP
// end ;
25447: PPOPN 2
25449: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25450: LD_EXP 33
25454: IFFALSE 25462
25456: PUSH
25457: LD_EXP 86
25461: AND
25462: IFFALSE 25752
25464: GO 25466
25466: DISABLE
25467: LD_INT 0
25469: PPUSH
25470: PPUSH
25471: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25472: LD_OWVAR 2
25476: PPUSH
25477: LD_INT 9
25479: PPUSH
25480: LD_INT 1
25482: PPUSH
25483: LD_INT 1
25485: PPUSH
25486: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25490: LD_INT 9
25492: PPUSH
25493: LD_OWVAR 2
25497: PPUSH
25498: CALL_OW 343
// uc_side := 9 ;
25502: LD_ADDR_OWVAR 20
25506: PUSH
25507: LD_INT 9
25509: ST_TO_ADDR
// uc_nation := 2 ;
25510: LD_ADDR_OWVAR 21
25514: PUSH
25515: LD_INT 2
25517: ST_TO_ADDR
// hc_name := Dark Warrior ;
25518: LD_ADDR_OWVAR 26
25522: PUSH
25523: LD_STRING Dark Warrior
25525: ST_TO_ADDR
// hc_gallery :=  ;
25526: LD_ADDR_OWVAR 33
25530: PUSH
25531: LD_STRING 
25533: ST_TO_ADDR
// hc_noskilllimit := true ;
25534: LD_ADDR_OWVAR 76
25538: PUSH
25539: LD_INT 1
25541: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25542: LD_ADDR_OWVAR 31
25546: PUSH
25547: LD_INT 30
25549: PUSH
25550: LD_INT 30
25552: PUSH
25553: LD_INT 30
25555: PUSH
25556: LD_INT 30
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
// un := CreateHuman ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: CALL_OW 44
25574: ST_TO_ADDR
// hc_noskilllimit := false ;
25575: LD_ADDR_OWVAR 76
25579: PUSH
25580: LD_INT 0
25582: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25583: LD_VAR 0 3
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 51
// ToLua ( playRanger() ) ;
25595: LD_STRING playRanger()
25597: PPUSH
25598: CALL_OW 559
// p := 0 ;
25602: LD_ADDR_VAR 0 2
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25610: LD_INT 35
25612: PPUSH
25613: CALL_OW 67
// p := p + 1 ;
25617: LD_ADDR_VAR 0 2
25621: PUSH
25622: LD_VAR 0 2
25626: PUSH
25627: LD_INT 1
25629: PLUS
25630: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25631: LD_VAR 0 3
25635: PPUSH
25636: CALL_OW 256
25640: PUSH
25641: LD_INT 1000
25643: LESS
25644: IFFALSE 25658
// SetLives ( un , 1000 ) ;
25646: LD_VAR 0 3
25650: PPUSH
25651: LD_INT 1000
25653: PPUSH
25654: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25658: LD_VAR 0 3
25662: PPUSH
25663: LD_INT 81
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 91
25677: PUSH
25678: LD_VAR 0 3
25682: PUSH
25683: LD_INT 30
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL_OW 69
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: CALL_OW 74
25709: PPUSH
25710: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25714: LD_VAR 0 2
25718: PUSH
25719: LD_INT 80
25721: GREATER
25722: IFTRUE 25735
25724: PUSH
25725: LD_VAR 0 3
25729: PPUSH
25730: CALL_OW 301
25734: OR
25735: IFFALSE 25610
// if un then
25737: LD_VAR 0 3
25741: IFFALSE 25752
// RemoveUnit ( un ) ;
25743: LD_VAR 0 3
25747: PPUSH
25748: CALL_OW 64
// end ;
25752: PPOPN 3
25754: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25755: LD_EXP 87
25759: IFFALSE 25875
25761: GO 25763
25763: DISABLE
25764: LD_INT 0
25766: PPUSH
25767: PPUSH
25768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25769: LD_ADDR_VAR 0 2
25773: PUSH
25774: LD_INT 81
25776: PUSH
25777: LD_OWVAR 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 21
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL_OW 69
25804: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25805: LD_STRING playComputer()
25807: PPUSH
25808: CALL_OW 559
// if not tmp then
25812: LD_VAR 0 2
25816: NOT
25817: IFFALSE 25821
// exit ;
25819: GO 25875
// for i in tmp do
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: LD_VAR 0 2
25830: PUSH
25831: FOR_IN
25832: IFFALSE 25873
// for j := 1 to 4 do
25834: LD_ADDR_VAR 0 3
25838: PUSH
25839: DOUBLE
25840: LD_INT 1
25842: DEC
25843: ST_TO_ADDR
25844: LD_INT 4
25846: PUSH
25847: FOR_TO
25848: IFFALSE 25869
// SetSkill ( i , j , 10 ) ;
25850: LD_VAR 0 1
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: LD_INT 10
25862: PPUSH
25863: CALL_OW 237
25867: GO 25847
25869: POP
25870: POP
25871: GO 25831
25873: POP
25874: POP
// end ;
25875: PPOPN 3
25877: END
// every 0 0$1 trigger s30 do var i , tmp ;
25878: LD_EXP 88
25882: IFFALSE 25951
25884: GO 25886
25886: DISABLE
25887: LD_INT 0
25889: PPUSH
25890: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_OWVAR 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PPUSH
25908: CALL_OW 69
25912: ST_TO_ADDR
// if not tmp then
25913: LD_VAR 0 2
25917: NOT
25918: IFFALSE 25922
// exit ;
25920: GO 25951
// for i in tmp do
25922: LD_ADDR_VAR 0 1
25926: PUSH
25927: LD_VAR 0 2
25931: PUSH
25932: FOR_IN
25933: IFFALSE 25949
// SetLives ( i , 300 ) ;
25935: LD_VAR 0 1
25939: PPUSH
25940: LD_INT 300
25942: PPUSH
25943: CALL_OW 234
25947: GO 25932
25949: POP
25950: POP
// end ;
25951: PPOPN 2
25953: END
// every 0 0$1 trigger s60 do var i , tmp ;
25954: LD_EXP 89
25958: IFFALSE 26027
25960: GO 25962
25962: DISABLE
25963: LD_INT 0
25965: PPUSH
25966: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25967: LD_ADDR_VAR 0 2
25971: PUSH
25972: LD_INT 22
25974: PUSH
25975: LD_OWVAR 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 69
25988: ST_TO_ADDR
// if not tmp then
25989: LD_VAR 0 2
25993: NOT
25994: IFFALSE 25998
// exit ;
25996: GO 26027
// for i in tmp do
25998: LD_ADDR_VAR 0 1
26002: PUSH
26003: LD_VAR 0 2
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26025
// SetLives ( i , 600 ) ;
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_INT 600
26018: PPUSH
26019: CALL_OW 234
26023: GO 26008
26025: POP
26026: POP
// end ;
26027: PPOPN 2
26029: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26030: LD_INT 0
26032: PPUSH
// case cmd of 301 :
26033: LD_VAR 0 1
26037: PUSH
26038: LD_INT 301
26040: DOUBLE
26041: EQUAL
26042: IFTRUE 26046
26044: GO 26078
26046: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26047: LD_VAR 0 6
26051: PPUSH
26052: LD_VAR 0 7
26056: PPUSH
26057: LD_VAR 0 8
26061: PPUSH
26062: LD_VAR 0 4
26066: PPUSH
26067: LD_VAR 0 5
26071: PPUSH
26072: CALL 27291 0 5
26076: GO 26199
26078: LD_INT 302
26080: DOUBLE
26081: EQUAL
26082: IFTRUE 26086
26084: GO 26123
26086: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26087: LD_VAR 0 6
26091: PPUSH
26092: LD_VAR 0 7
26096: PPUSH
26097: LD_VAR 0 8
26101: PPUSH
26102: LD_VAR 0 9
26106: PPUSH
26107: LD_VAR 0 4
26111: PPUSH
26112: LD_VAR 0 5
26116: PPUSH
26117: CALL 27382 0 6
26121: GO 26199
26123: LD_INT 303
26125: DOUBLE
26126: EQUAL
26127: IFTRUE 26131
26129: GO 26168
26131: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26132: LD_VAR 0 6
26136: PPUSH
26137: LD_VAR 0 7
26141: PPUSH
26142: LD_VAR 0 8
26146: PPUSH
26147: LD_VAR 0 9
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: CALL 26204 0 6
26166: GO 26199
26168: LD_INT 304
26170: DOUBLE
26171: EQUAL
26172: IFTRUE 26176
26174: GO 26198
26176: POP
// hHackTeleport ( unit , x , y ) ; end ;
26177: LD_VAR 0 2
26181: PPUSH
26182: LD_VAR 0 4
26186: PPUSH
26187: LD_VAR 0 5
26191: PPUSH
26192: CALL 27975 0 3
26196: GO 26199
26198: POP
// end ;
26199: LD_VAR 0 12
26203: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26204: LD_INT 0
26206: PPUSH
26207: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26208: LD_VAR 0 1
26212: PUSH
26213: LD_INT 1
26215: LESS
26216: IFTRUE 26228
26218: PUSH
26219: LD_VAR 0 1
26223: PUSH
26224: LD_INT 3
26226: GREATER
26227: OR
26228: IFTRUE 26246
26230: PUSH
26231: LD_VAR 0 5
26235: PPUSH
26236: LD_VAR 0 6
26240: PPUSH
26241: CALL_OW 428
26245: OR
26246: IFFALSE 26250
// exit ;
26248: GO 26978
// uc_side := your_side ;
26250: LD_ADDR_OWVAR 20
26254: PUSH
26255: LD_OWVAR 2
26259: ST_TO_ADDR
// uc_nation := nation ;
26260: LD_ADDR_OWVAR 21
26264: PUSH
26265: LD_VAR 0 1
26269: ST_TO_ADDR
// bc_level = 1 ;
26270: LD_ADDR_OWVAR 43
26274: PUSH
26275: LD_INT 1
26277: ST_TO_ADDR
// case btype of 1 :
26278: LD_VAR 0 2
26282: PUSH
26283: LD_INT 1
26285: DOUBLE
26286: EQUAL
26287: IFTRUE 26291
26289: GO 26302
26291: POP
// bc_type := b_depot ; 2 :
26292: LD_ADDR_OWVAR 42
26296: PUSH
26297: LD_INT 0
26299: ST_TO_ADDR
26300: GO 26922
26302: LD_INT 2
26304: DOUBLE
26305: EQUAL
26306: IFTRUE 26310
26308: GO 26321
26310: POP
// bc_type := b_warehouse ; 3 :
26311: LD_ADDR_OWVAR 42
26315: PUSH
26316: LD_INT 1
26318: ST_TO_ADDR
26319: GO 26922
26321: LD_INT 3
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26340
26329: POP
// bc_type := b_lab ; 4 .. 9 :
26330: LD_ADDR_OWVAR 42
26334: PUSH
26335: LD_INT 6
26337: ST_TO_ADDR
26338: GO 26922
26340: LD_INT 4
26342: DOUBLE
26343: GREATEREQUAL
26344: IFFALSE 26352
26346: LD_INT 9
26348: DOUBLE
26349: LESSEQUAL
26350: IFTRUE 26354
26352: GO 26414
26354: POP
// begin bc_type := b_lab_half ;
26355: LD_ADDR_OWVAR 42
26359: PUSH
26360: LD_INT 7
26362: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26363: LD_ADDR_OWVAR 44
26367: PUSH
26368: LD_INT 10
26370: PUSH
26371: LD_INT 11
26373: PUSH
26374: LD_INT 12
26376: PUSH
26377: LD_INT 15
26379: PUSH
26380: LD_INT 14
26382: PUSH
26383: LD_INT 13
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PUSH
26394: LD_VAR 0 2
26398: PUSH
26399: LD_INT 3
26401: MINUS
26402: ARRAY
26403: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
26404: LD_ADDR_OWVAR 45
26408: PUSH
26409: LD_INT 9
26411: ST_TO_ADDR
// end ; 10 .. 13 :
26412: GO 26922
26414: LD_INT 10
26416: DOUBLE
26417: GREATEREQUAL
26418: IFFALSE 26426
26420: LD_INT 13
26422: DOUBLE
26423: LESSEQUAL
26424: IFTRUE 26428
26426: GO 26505
26428: POP
// begin bc_type := b_lab_full ;
26429: LD_ADDR_OWVAR 42
26433: PUSH
26434: LD_INT 8
26436: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26437: LD_ADDR_OWVAR 44
26441: PUSH
26442: LD_INT 10
26444: PUSH
26445: LD_INT 12
26447: PUSH
26448: LD_INT 14
26450: PUSH
26451: LD_INT 13
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: PUSH
26460: LD_VAR 0 2
26464: PUSH
26465: LD_INT 9
26467: MINUS
26468: ARRAY
26469: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26470: LD_ADDR_OWVAR 45
26474: PUSH
26475: LD_INT 11
26477: PUSH
26478: LD_INT 15
26480: PUSH
26481: LD_INT 12
26483: PUSH
26484: LD_INT 15
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: PUSH
26493: LD_VAR 0 2
26497: PUSH
26498: LD_INT 9
26500: MINUS
26501: ARRAY
26502: ST_TO_ADDR
// end ; 14 :
26503: GO 26922
26505: LD_INT 14
26507: DOUBLE
26508: EQUAL
26509: IFTRUE 26513
26511: GO 26524
26513: POP
// bc_type := b_workshop ; 15 :
26514: LD_ADDR_OWVAR 42
26518: PUSH
26519: LD_INT 2
26521: ST_TO_ADDR
26522: GO 26922
26524: LD_INT 15
26526: DOUBLE
26527: EQUAL
26528: IFTRUE 26532
26530: GO 26543
26532: POP
// bc_type := b_factory ; 16 :
26533: LD_ADDR_OWVAR 42
26537: PUSH
26538: LD_INT 3
26540: ST_TO_ADDR
26541: GO 26922
26543: LD_INT 16
26545: DOUBLE
26546: EQUAL
26547: IFTRUE 26551
26549: GO 26562
26551: POP
// bc_type := b_ext_gun ; 17 :
26552: LD_ADDR_OWVAR 42
26556: PUSH
26557: LD_INT 17
26559: ST_TO_ADDR
26560: GO 26922
26562: LD_INT 17
26564: DOUBLE
26565: EQUAL
26566: IFTRUE 26570
26568: GO 26598
26570: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26571: LD_ADDR_OWVAR 42
26575: PUSH
26576: LD_INT 19
26578: PUSH
26579: LD_INT 23
26581: PUSH
26582: LD_INT 19
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: PUSH
26590: LD_VAR 0 1
26594: ARRAY
26595: ST_TO_ADDR
26596: GO 26922
26598: LD_INT 18
26600: DOUBLE
26601: EQUAL
26602: IFTRUE 26606
26604: GO 26617
26606: POP
// bc_type := b_ext_radar ; 19 :
26607: LD_ADDR_OWVAR 42
26611: PUSH
26612: LD_INT 20
26614: ST_TO_ADDR
26615: GO 26922
26617: LD_INT 19
26619: DOUBLE
26620: EQUAL
26621: IFTRUE 26625
26623: GO 26636
26625: POP
// bc_type := b_ext_radio ; 20 :
26626: LD_ADDR_OWVAR 42
26630: PUSH
26631: LD_INT 22
26633: ST_TO_ADDR
26634: GO 26922
26636: LD_INT 20
26638: DOUBLE
26639: EQUAL
26640: IFTRUE 26644
26642: GO 26655
26644: POP
// bc_type := b_ext_siberium ; 21 :
26645: LD_ADDR_OWVAR 42
26649: PUSH
26650: LD_INT 21
26652: ST_TO_ADDR
26653: GO 26922
26655: LD_INT 21
26657: DOUBLE
26658: EQUAL
26659: IFTRUE 26663
26661: GO 26674
26663: POP
// bc_type := b_ext_computer ; 22 :
26664: LD_ADDR_OWVAR 42
26668: PUSH
26669: LD_INT 24
26671: ST_TO_ADDR
26672: GO 26922
26674: LD_INT 22
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26693
26682: POP
// bc_type := b_ext_track ; 23 :
26683: LD_ADDR_OWVAR 42
26687: PUSH
26688: LD_INT 16
26690: ST_TO_ADDR
26691: GO 26922
26693: LD_INT 23
26695: DOUBLE
26696: EQUAL
26697: IFTRUE 26701
26699: GO 26712
26701: POP
// bc_type := b_ext_laser ; 24 :
26702: LD_ADDR_OWVAR 42
26706: PUSH
26707: LD_INT 25
26709: ST_TO_ADDR
26710: GO 26922
26712: LD_INT 24
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 26731
26720: POP
// bc_type := b_control_tower ; 25 :
26721: LD_ADDR_OWVAR 42
26725: PUSH
26726: LD_INT 36
26728: ST_TO_ADDR
26729: GO 26922
26731: LD_INT 25
26733: DOUBLE
26734: EQUAL
26735: IFTRUE 26739
26737: GO 26750
26739: POP
// bc_type := b_breastwork ; 26 :
26740: LD_ADDR_OWVAR 42
26744: PUSH
26745: LD_INT 31
26747: ST_TO_ADDR
26748: GO 26922
26750: LD_INT 26
26752: DOUBLE
26753: EQUAL
26754: IFTRUE 26758
26756: GO 26769
26758: POP
// bc_type := b_bunker ; 27 :
26759: LD_ADDR_OWVAR 42
26763: PUSH
26764: LD_INT 32
26766: ST_TO_ADDR
26767: GO 26922
26769: LD_INT 27
26771: DOUBLE
26772: EQUAL
26773: IFTRUE 26777
26775: GO 26788
26777: POP
// bc_type := b_turret ; 28 :
26778: LD_ADDR_OWVAR 42
26782: PUSH
26783: LD_INT 33
26785: ST_TO_ADDR
26786: GO 26922
26788: LD_INT 28
26790: DOUBLE
26791: EQUAL
26792: IFTRUE 26796
26794: GO 26807
26796: POP
// bc_type := b_armoury ; 29 :
26797: LD_ADDR_OWVAR 42
26801: PUSH
26802: LD_INT 4
26804: ST_TO_ADDR
26805: GO 26922
26807: LD_INT 29
26809: DOUBLE
26810: EQUAL
26811: IFTRUE 26815
26813: GO 26826
26815: POP
// bc_type := b_barracks ; 30 :
26816: LD_ADDR_OWVAR 42
26820: PUSH
26821: LD_INT 5
26823: ST_TO_ADDR
26824: GO 26922
26826: LD_INT 30
26828: DOUBLE
26829: EQUAL
26830: IFTRUE 26834
26832: GO 26845
26834: POP
// bc_type := b_solar_power ; 31 :
26835: LD_ADDR_OWVAR 42
26839: PUSH
26840: LD_INT 27
26842: ST_TO_ADDR
26843: GO 26922
26845: LD_INT 31
26847: DOUBLE
26848: EQUAL
26849: IFTRUE 26853
26851: GO 26864
26853: POP
// bc_type := b_oil_power ; 32 :
26854: LD_ADDR_OWVAR 42
26858: PUSH
26859: LD_INT 26
26861: ST_TO_ADDR
26862: GO 26922
26864: LD_INT 32
26866: DOUBLE
26867: EQUAL
26868: IFTRUE 26872
26870: GO 26883
26872: POP
// bc_type := b_siberite_power ; 33 :
26873: LD_ADDR_OWVAR 42
26877: PUSH
26878: LD_INT 28
26880: ST_TO_ADDR
26881: GO 26922
26883: LD_INT 33
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26902
26891: POP
// bc_type := b_oil_mine ; 34 :
26892: LD_ADDR_OWVAR 42
26896: PUSH
26897: LD_INT 29
26899: ST_TO_ADDR
26900: GO 26922
26902: LD_INT 34
26904: DOUBLE
26905: EQUAL
26906: IFTRUE 26910
26908: GO 26921
26910: POP
// bc_type := b_siberite_mine ; end ;
26911: LD_ADDR_OWVAR 42
26915: PUSH
26916: LD_INT 30
26918: ST_TO_ADDR
26919: GO 26922
26921: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26922: LD_ADDR_VAR 0 8
26926: PUSH
26927: LD_VAR 0 5
26931: PPUSH
26932: LD_VAR 0 6
26936: PPUSH
26937: LD_VAR 0 3
26941: PPUSH
26942: CALL_OW 47
26946: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26947: LD_OWVAR 42
26951: PUSH
26952: LD_INT 32
26954: PUSH
26955: LD_INT 33
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: IN
26962: IFFALSE 26978
// PlaceWeaponTurret ( b , weapon ) ;
26964: LD_VAR 0 8
26968: PPUSH
26969: LD_VAR 0 4
26973: PPUSH
26974: CALL_OW 431
// end ;
26978: LD_VAR 0 7
26982: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26983: LD_INT 0
26985: PPUSH
26986: PPUSH
26987: PPUSH
26988: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_OWVAR 2
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 30
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 30
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PPUSH
27038: CALL_OW 69
27042: ST_TO_ADDR
// if not tmp then
27043: LD_VAR 0 4
27047: NOT
27048: IFFALSE 27052
// exit ;
27050: GO 27111
// for i in tmp do
27052: LD_ADDR_VAR 0 2
27056: PUSH
27057: LD_VAR 0 4
27061: PUSH
27062: FOR_IN
27063: IFFALSE 27109
// for j = 1 to 3 do
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: DOUBLE
27071: LD_INT 1
27073: DEC
27074: ST_TO_ADDR
27075: LD_INT 3
27077: PUSH
27078: FOR_TO
27079: IFFALSE 27105
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 274
27090: PPUSH
27091: LD_VAR 0 3
27095: PPUSH
27096: LD_INT 99999
27098: PPUSH
27099: CALL_OW 277
27103: GO 27078
27105: POP
27106: POP
27107: GO 27062
27109: POP
27110: POP
// end ;
27111: LD_VAR 0 1
27115: RET
// export function hHackSetLevel10 ; var i , j ; begin
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
27120: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27121: LD_ADDR_VAR 0 2
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PPUSH
27136: CALL_OW 69
27140: PUSH
27141: FOR_IN
27142: IFFALSE 27194
// if IsSelected ( i ) then
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 306
27153: IFFALSE 27192
// begin for j := 1 to 4 do
27155: LD_ADDR_VAR 0 3
27159: PUSH
27160: DOUBLE
27161: LD_INT 1
27163: DEC
27164: ST_TO_ADDR
27165: LD_INT 4
27167: PUSH
27168: FOR_TO
27169: IFFALSE 27190
// SetSkill ( i , j , 10 ) ;
27171: LD_VAR 0 2
27175: PPUSH
27176: LD_VAR 0 3
27180: PPUSH
27181: LD_INT 10
27183: PPUSH
27184: CALL_OW 237
27188: GO 27168
27190: POP
27191: POP
// end ;
27192: GO 27141
27194: POP
27195: POP
// end ;
27196: LD_VAR 0 1
27200: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
27205: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27206: LD_ADDR_VAR 0 2
27210: PUSH
27211: LD_INT 22
27213: PUSH
27214: LD_OWVAR 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 21
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: PUSH
27242: FOR_IN
27243: IFFALSE 27284
// begin for j := 1 to 4 do
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: DOUBLE
27251: LD_INT 1
27253: DEC
27254: ST_TO_ADDR
27255: LD_INT 4
27257: PUSH
27258: FOR_TO
27259: IFFALSE 27280
// SetSkill ( i , j , 10 ) ;
27261: LD_VAR 0 2
27265: PPUSH
27266: LD_VAR 0 3
27270: PPUSH
27271: LD_INT 10
27273: PPUSH
27274: CALL_OW 237
27278: GO 27258
27280: POP
27281: POP
// end ;
27282: GO 27242
27284: POP
27285: POP
// end ;
27286: LD_VAR 0 1
27290: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27291: LD_INT 0
27293: PPUSH
// uc_side := your_side ;
27294: LD_ADDR_OWVAR 20
27298: PUSH
27299: LD_OWVAR 2
27303: ST_TO_ADDR
// uc_nation := nation ;
27304: LD_ADDR_OWVAR 21
27308: PUSH
27309: LD_VAR 0 1
27313: ST_TO_ADDR
// InitHc ;
27314: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27318: LD_INT 0
27320: PPUSH
27321: LD_VAR 0 2
27325: PPUSH
27326: LD_VAR 0 3
27330: PPUSH
27331: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27335: LD_VAR 0 4
27339: PPUSH
27340: LD_VAR 0 5
27344: PPUSH
27345: CALL_OW 428
27349: PUSH
27350: LD_INT 0
27352: EQUAL
27353: IFFALSE 27377
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27355: CALL_OW 44
27359: PPUSH
27360: LD_VAR 0 4
27364: PPUSH
27365: LD_VAR 0 5
27369: PPUSH
27370: LD_INT 1
27372: PPUSH
27373: CALL_OW 48
// end ;
27377: LD_VAR 0 6
27381: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27382: LD_INT 0
27384: PPUSH
27385: PPUSH
// uc_side := your_side ;
27386: LD_ADDR_OWVAR 20
27390: PUSH
27391: LD_OWVAR 2
27395: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27396: LD_VAR 0 1
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: LD_INT 4
27412: PUSH
27413: LD_INT 5
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: IN
27423: IFFALSE 27435
// uc_nation := nation_american else
27425: LD_ADDR_OWVAR 21
27429: PUSH
27430: LD_INT 1
27432: ST_TO_ADDR
27433: GO 27478
// if chassis in [ 11 , 12 , 13 , 14 ] then
27435: LD_VAR 0 1
27439: PUSH
27440: LD_INT 11
27442: PUSH
27443: LD_INT 12
27445: PUSH
27446: LD_INT 13
27448: PUSH
27449: LD_INT 14
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: IN
27458: IFFALSE 27470
// uc_nation := nation_arabian else
27460: LD_ADDR_OWVAR 21
27464: PUSH
27465: LD_INT 2
27467: ST_TO_ADDR
27468: GO 27478
// uc_nation := nation_russian ;
27470: LD_ADDR_OWVAR 21
27474: PUSH
27475: LD_INT 3
27477: ST_TO_ADDR
// vc_chassis := chassis ;
27478: LD_ADDR_OWVAR 37
27482: PUSH
27483: LD_VAR 0 1
27487: ST_TO_ADDR
// vc_engine := engine ;
27488: LD_ADDR_OWVAR 39
27492: PUSH
27493: LD_VAR 0 2
27497: ST_TO_ADDR
// vc_control := control ;
27498: LD_ADDR_OWVAR 38
27502: PUSH
27503: LD_VAR 0 3
27507: ST_TO_ADDR
// vc_weapon := weapon ;
27508: LD_ADDR_OWVAR 40
27512: PUSH
27513: LD_VAR 0 4
27517: ST_TO_ADDR
// un := CreateVehicle ;
27518: LD_ADDR_VAR 0 8
27522: PUSH
27523: CALL_OW 45
27527: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27528: LD_VAR 0 8
27532: PPUSH
27533: LD_INT 0
27535: PPUSH
27536: LD_INT 5
27538: PPUSH
27539: CALL_OW 12
27543: PPUSH
27544: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27548: LD_VAR 0 8
27552: PPUSH
27553: LD_VAR 0 5
27557: PPUSH
27558: LD_VAR 0 6
27562: PPUSH
27563: LD_INT 1
27565: PPUSH
27566: CALL_OW 48
// end ;
27570: LD_VAR 0 7
27574: RET
// export hInvincible ; every 1 do
27575: GO 27577
27577: DISABLE
// hInvincible := [ ] ;
27578: LD_ADDR_EXP 90
27582: PUSH
27583: EMPTY
27584: ST_TO_ADDR
27585: END
// every 10 do var i ;
27586: GO 27588
27588: DISABLE
27589: LD_INT 0
27591: PPUSH
// begin enable ;
27592: ENABLE
// if not hInvincible then
27593: LD_EXP 90
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27646
// for i in hInvincible do
27602: LD_ADDR_VAR 0 1
27606: PUSH
27607: LD_EXP 90
27611: PUSH
27612: FOR_IN
27613: IFFALSE 27644
// if GetLives ( i ) < 1000 then
27615: LD_VAR 0 1
27619: PPUSH
27620: CALL_OW 256
27624: PUSH
27625: LD_INT 1000
27627: LESS
27628: IFFALSE 27642
// SetLives ( i , 1000 ) ;
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_INT 1000
27637: PPUSH
27638: CALL_OW 234
27642: GO 27612
27644: POP
27645: POP
// end ;
27646: PPOPN 1
27648: END
// export function hHackInvincible ; var i ; begin
27649: LD_INT 0
27651: PPUSH
27652: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27653: LD_ADDR_VAR 0 2
27657: PUSH
27658: LD_INT 2
27660: PUSH
27661: LD_INT 21
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 21
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 69
27690: PUSH
27691: FOR_IN
27692: IFFALSE 27753
// if IsSelected ( i ) then
27694: LD_VAR 0 2
27698: PPUSH
27699: CALL_OW 306
27703: IFFALSE 27751
// begin if i in hInvincible then
27705: LD_VAR 0 2
27709: PUSH
27710: LD_EXP 90
27714: IN
27715: IFFALSE 27735
// hInvincible := hInvincible diff i else
27717: LD_ADDR_EXP 90
27721: PUSH
27722: LD_EXP 90
27726: PUSH
27727: LD_VAR 0 2
27731: DIFF
27732: ST_TO_ADDR
27733: GO 27751
// hInvincible := hInvincible union i ;
27735: LD_ADDR_EXP 90
27739: PUSH
27740: LD_EXP 90
27744: PUSH
27745: LD_VAR 0 2
27749: UNION
27750: ST_TO_ADDR
// end ;
27751: GO 27691
27753: POP
27754: POP
// end ;
27755: LD_VAR 0 1
27759: RET
// export function hHackInvisible ; var i , j ; begin
27760: LD_INT 0
27762: PPUSH
27763: PPUSH
27764: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27765: LD_ADDR_VAR 0 2
27769: PUSH
27770: LD_INT 21
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PPUSH
27780: CALL_OW 69
27784: PUSH
27785: FOR_IN
27786: IFFALSE 27810
// if IsSelected ( i ) then
27788: LD_VAR 0 2
27792: PPUSH
27793: CALL_OW 306
27797: IFFALSE 27808
// ComForceInvisible ( i ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: CALL_OW 496
27808: GO 27785
27810: POP
27811: POP
// end ;
27812: LD_VAR 0 1
27816: RET
// export function hHackChangeYourSide ; begin
27817: LD_INT 0
27819: PPUSH
// if your_side = 8 then
27820: LD_OWVAR 2
27824: PUSH
27825: LD_INT 8
27827: EQUAL
27828: IFFALSE 27840
// your_side := 0 else
27830: LD_ADDR_OWVAR 2
27834: PUSH
27835: LD_INT 0
27837: ST_TO_ADDR
27838: GO 27854
// your_side := your_side + 1 ;
27840: LD_ADDR_OWVAR 2
27844: PUSH
27845: LD_OWVAR 2
27849: PUSH
27850: LD_INT 1
27852: PLUS
27853: ST_TO_ADDR
// end ;
27854: LD_VAR 0 1
27858: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27859: LD_INT 0
27861: PPUSH
27862: PPUSH
27863: PPUSH
// for i in all_units do
27864: LD_ADDR_VAR 0 2
27868: PUSH
27869: LD_OWVAR 3
27873: PUSH
27874: FOR_IN
27875: IFFALSE 27953
// if IsSelected ( i ) then
27877: LD_VAR 0 2
27881: PPUSH
27882: CALL_OW 306
27886: IFFALSE 27951
// begin j := GetSide ( i ) ;
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_VAR 0 2
27897: PPUSH
27898: CALL_OW 255
27902: ST_TO_ADDR
// if j = 8 then
27903: LD_VAR 0 3
27907: PUSH
27908: LD_INT 8
27910: EQUAL
27911: IFFALSE 27923
// j := 0 else
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: LD_INT 0
27920: ST_TO_ADDR
27921: GO 27937
// j := j + 1 ;
27923: LD_ADDR_VAR 0 3
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: LD_INT 1
27935: PLUS
27936: ST_TO_ADDR
// SetSide ( i , j ) ;
27937: LD_VAR 0 2
27941: PPUSH
27942: LD_VAR 0 3
27946: PPUSH
27947: CALL_OW 235
// end ;
27951: GO 27874
27953: POP
27954: POP
// end ;
27955: LD_VAR 0 1
27959: RET
// export function hHackFog ; begin
27960: LD_INT 0
27962: PPUSH
// FogOff ( true ) ;
27963: LD_INT 1
27965: PPUSH
27966: CALL_OW 344
// end ;
27970: LD_VAR 0 1
27974: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27975: LD_INT 0
27977: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27978: LD_VAR 0 1
27982: PPUSH
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_VAR 0 3
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_INT 1
27998: PPUSH
27999: CALL_OW 483
// CenterOnXY ( x , y ) ;
28003: LD_VAR 0 2
28007: PPUSH
28008: LD_VAR 0 3
28012: PPUSH
28013: CALL_OW 84
// end ;
28017: LD_VAR 0 4
28021: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28026: LD_VAR 0 1
28030: NOT
28031: IFTRUE 28050
28033: PUSH
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL_OW 488
28048: NOT
28049: OR
28050: IFTRUE 28085
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 266
28062: PUSH
28063: LD_INT 3
28065: NONEQUAL
28066: IFFALSE 28084
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 247
28078: PUSH
28079: LD_INT 1
28081: EQUAL
28082: NOT
28083: AND
28084: OR
28085: IFFALSE 28089
// exit ;
28087: GO 28371
// if GetType ( factory ) = unit_human then
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 247
28098: PUSH
28099: LD_INT 1
28101: EQUAL
28102: IFFALSE 28119
// factory := IsInUnit ( factory ) ;
28104: LD_ADDR_VAR 0 1
28108: PUSH
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL_OW 310
28118: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 266
28128: PUSH
28129: LD_INT 3
28131: NONEQUAL
28132: IFFALSE 28136
// exit ;
28134: GO 28371
// for i := 1 to Count ( factoryWaypoints ) do
28136: LD_ADDR_VAR 0 5
28140: PUSH
28141: DOUBLE
28142: LD_INT 1
28144: DEC
28145: ST_TO_ADDR
28146: LD_EXP 91
28150: PPUSH
28151: CALL 38175 0 1
28155: PUSH
28156: FOR_TO
28157: IFFALSE 28319
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_VAR 0 3
28168: PPUSH
28169: CALL_OW 428
28173: PUSH
28174: LD_EXP 91
28178: PUSH
28179: LD_VAR 0 5
28183: ARRAY
28184: PUSH
28185: LD_INT 2
28187: ARRAY
28188: EQUAL
28189: IFFALSE 28221
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
28191: LD_ADDR_EXP 91
28195: PUSH
28196: LD_EXP 91
28200: PPUSH
28201: LD_VAR 0 5
28205: PPUSH
28206: CALL_OW 3
28210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28211: CALL 28376 0 0
// exit ;
28215: POP
28216: POP
28217: GO 28371
// end else
28219: GO 28317
// if factory = factoryWaypoints [ i ] [ 2 ] then
28221: LD_VAR 0 1
28225: PUSH
28226: LD_EXP 91
28230: PUSH
28231: LD_VAR 0 5
28235: ARRAY
28236: PUSH
28237: LD_INT 2
28239: ARRAY
28240: EQUAL
28241: IFFALSE 28317
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
28243: LD_ADDR_EXP 91
28247: PUSH
28248: LD_EXP 91
28252: PPUSH
28253: LD_VAR 0 5
28257: PPUSH
28258: CALL_OW 3
28262: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28263: LD_ADDR_EXP 91
28267: PUSH
28268: LD_EXP 91
28272: PPUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL_OW 255
28282: PUSH
28283: LD_VAR 0 1
28287: PUSH
28288: LD_VAR 0 2
28292: PUSH
28293: LD_VAR 0 3
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: PPUSH
28304: CALL 74151 0 2
28308: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28309: CALL 28376 0 0
// exit ;
28313: POP
28314: POP
28315: GO 28371
// end ; end ;
28317: GO 28156
28319: POP
28320: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28321: LD_ADDR_EXP 91
28325: PUSH
28326: LD_EXP 91
28330: PPUSH
28331: LD_VAR 0 1
28335: PPUSH
28336: CALL_OW 255
28340: PUSH
28341: LD_VAR 0 1
28345: PUSH
28346: LD_VAR 0 2
28350: PUSH
28351: LD_VAR 0 3
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: PPUSH
28362: CALL 74151 0 2
28366: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28367: CALL 28376 0 0
// end ;
28371: LD_VAR 0 4
28375: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28376: LD_INT 0
28378: PPUSH
28379: PPUSH
28380: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28381: LD_STRING resetFactoryWaypoint();
28383: PPUSH
28384: CALL_OW 559
// if factoryWaypoints then
28388: LD_EXP 91
28392: IFFALSE 28513
// begin list := factoryWaypoints ;
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_EXP 91
28403: ST_TO_ADDR
// for i := 1 to list do
28404: LD_ADDR_VAR 0 2
28408: PUSH
28409: DOUBLE
28410: LD_INT 1
28412: DEC
28413: ST_TO_ADDR
28414: LD_VAR 0 3
28418: PUSH
28419: FOR_TO
28420: IFFALSE 28511
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28422: LD_STRING setFactoryWaypointXY(
28424: PUSH
28425: LD_VAR 0 3
28429: PUSH
28430: LD_VAR 0 2
28434: ARRAY
28435: PUSH
28436: LD_INT 1
28438: ARRAY
28439: STR
28440: PUSH
28441: LD_STRING ,
28443: STR
28444: PUSH
28445: LD_VAR 0 3
28449: PUSH
28450: LD_VAR 0 2
28454: ARRAY
28455: PUSH
28456: LD_INT 2
28458: ARRAY
28459: STR
28460: PUSH
28461: LD_STRING ,
28463: STR
28464: PUSH
28465: LD_VAR 0 3
28469: PUSH
28470: LD_VAR 0 2
28474: ARRAY
28475: PUSH
28476: LD_INT 3
28478: ARRAY
28479: STR
28480: PUSH
28481: LD_STRING ,
28483: STR
28484: PUSH
28485: LD_VAR 0 3
28489: PUSH
28490: LD_VAR 0 2
28494: ARRAY
28495: PUSH
28496: LD_INT 4
28498: ARRAY
28499: STR
28500: PUSH
28501: LD_STRING )
28503: STR
28504: PPUSH
28505: CALL_OW 559
28509: GO 28419
28511: POP
28512: POP
// end ; end ;
28513: LD_VAR 0 1
28517: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28518: LD_INT 0
28520: PPUSH
// if HexInfo ( x , y ) = warehouse then
28521: LD_VAR 0 2
28525: PPUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: CALL_OW 428
28535: PUSH
28536: LD_VAR 0 1
28540: EQUAL
28541: IFFALSE 28568
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28543: LD_ADDR_EXP 93
28547: PUSH
28548: LD_EXP 93
28552: PPUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: LD_INT 0
28560: PPUSH
28561: CALL_OW 1
28565: ST_TO_ADDR
28566: GO 28619
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28568: LD_ADDR_EXP 93
28572: PUSH
28573: LD_EXP 93
28577: PPUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 255
28592: PUSH
28593: LD_VAR 0 1
28597: PUSH
28598: LD_VAR 0 2
28602: PUSH
28603: LD_VAR 0 3
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 1
28618: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28619: CALL 28628 0 0
// end ;
28623: LD_VAR 0 4
28627: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
28632: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28633: LD_STRING resetWarehouseGatheringPoints();
28635: PPUSH
28636: CALL_OW 559
// if warehouseGatheringPoints then
28640: LD_EXP 93
28644: IFFALSE 28770
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28646: LD_ADDR_VAR 0 3
28650: PUSH
28651: LD_EXP 93
28655: PPUSH
28656: CALL 78085 0 1
28660: ST_TO_ADDR
// for i := 1 to list do
28661: LD_ADDR_VAR 0 2
28665: PUSH
28666: DOUBLE
28667: LD_INT 1
28669: DEC
28670: ST_TO_ADDR
28671: LD_VAR 0 3
28675: PUSH
28676: FOR_TO
28677: IFFALSE 28768
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28679: LD_STRING setWarehouseGatheringPointXY(
28681: PUSH
28682: LD_VAR 0 3
28686: PUSH
28687: LD_VAR 0 2
28691: ARRAY
28692: PUSH
28693: LD_INT 1
28695: ARRAY
28696: STR
28697: PUSH
28698: LD_STRING ,
28700: STR
28701: PUSH
28702: LD_VAR 0 3
28706: PUSH
28707: LD_VAR 0 2
28711: ARRAY
28712: PUSH
28713: LD_INT 2
28715: ARRAY
28716: STR
28717: PUSH
28718: LD_STRING ,
28720: STR
28721: PUSH
28722: LD_VAR 0 3
28726: PUSH
28727: LD_VAR 0 2
28731: ARRAY
28732: PUSH
28733: LD_INT 3
28735: ARRAY
28736: STR
28737: PUSH
28738: LD_STRING ,
28740: STR
28741: PUSH
28742: LD_VAR 0 3
28746: PUSH
28747: LD_VAR 0 2
28751: ARRAY
28752: PUSH
28753: LD_INT 4
28755: ARRAY
28756: STR
28757: PUSH
28758: LD_STRING )
28760: STR
28761: PPUSH
28762: CALL_OW 559
28766: GO 28676
28768: POP
28769: POP
// end ; end ;
28770: LD_VAR 0 1
28774: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28775: LD_EXP 93
28779: IFFALSE 29474
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
28787: PPUSH
28788: PPUSH
28789: PPUSH
28790: PPUSH
28791: PPUSH
28792: PPUSH
28793: PPUSH
28794: PPUSH
// begin enable ;
28795: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_EXP 93
28805: PPUSH
28806: CALL 78085 0 1
28810: ST_TO_ADDR
// if not list then
28811: LD_VAR 0 3
28815: NOT
28816: IFFALSE 28820
// exit ;
28818: GO 29474
// for i := 1 to list do
28820: LD_ADDR_VAR 0 1
28824: PUSH
28825: DOUBLE
28826: LD_INT 1
28828: DEC
28829: ST_TO_ADDR
28830: LD_VAR 0 3
28834: PUSH
28835: FOR_TO
28836: IFFALSE 29472
// begin depot := list [ i ] [ 2 ] ;
28838: LD_ADDR_VAR 0 8
28842: PUSH
28843: LD_VAR 0 3
28847: PUSH
28848: LD_VAR 0 1
28852: ARRAY
28853: PUSH
28854: LD_INT 2
28856: ARRAY
28857: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28858: LD_ADDR_VAR 0 5
28862: PUSH
28863: LD_VAR 0 3
28867: PUSH
28868: LD_VAR 0 1
28872: ARRAY
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28878: LD_VAR 0 8
28882: PPUSH
28883: CALL_OW 301
28887: IFTRUE 28906
28889: PUSH
28890: LD_VAR 0 5
28894: PUSH
28895: LD_VAR 0 8
28899: PPUSH
28900: CALL_OW 255
28904: NONEQUAL
28905: OR
28906: IFFALSE 28935
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28908: LD_ADDR_EXP 93
28912: PUSH
28913: LD_EXP 93
28917: PPUSH
28918: LD_VAR 0 8
28922: PPUSH
28923: LD_INT 0
28925: PPUSH
28926: CALL_OW 1
28930: ST_TO_ADDR
// exit ;
28931: POP
28932: POP
28933: GO 29474
// end ; x := list [ i ] [ 3 ] ;
28935: LD_ADDR_VAR 0 6
28939: PUSH
28940: LD_VAR 0 3
28944: PUSH
28945: LD_VAR 0 1
28949: ARRAY
28950: PUSH
28951: LD_INT 3
28953: ARRAY
28954: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28955: LD_ADDR_VAR 0 7
28959: PUSH
28960: LD_VAR 0 3
28964: PUSH
28965: LD_VAR 0 1
28969: ARRAY
28970: PUSH
28971: LD_INT 4
28973: ARRAY
28974: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28975: LD_ADDR_VAR 0 9
28979: PUSH
28980: LD_VAR 0 6
28984: PPUSH
28985: LD_VAR 0 7
28989: PPUSH
28990: LD_INT 16
28992: PPUSH
28993: CALL 76659 0 3
28997: ST_TO_ADDR
// if not cratesNearbyPoint then
28998: LD_VAR 0 9
29002: NOT
29003: IFFALSE 29009
// exit ;
29005: POP
29006: POP
29007: GO 29474
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
29009: LD_ADDR_VAR 0 4
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_VAR 0 5
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 60
29031: PUSH
29032: EMPTY
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 91
29041: PUSH
29042: LD_VAR 0 8
29046: PUSH
29047: LD_INT 6
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: PUSH
29058: LD_INT 25
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 25
29070: PUSH
29071: LD_INT 16
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: PPUSH
29089: CALL_OW 69
29093: PUSH
29094: LD_VAR 0 8
29098: PPUSH
29099: CALL_OW 313
29103: PPUSH
29104: LD_INT 3
29106: PUSH
29107: LD_INT 60
29109: PUSH
29110: EMPTY
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: PUSH
29120: LD_INT 25
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 25
29132: PUSH
29133: LD_INT 16
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PPUSH
29149: CALL_OW 72
29153: UNION
29154: ST_TO_ADDR
// if tmp then
29155: LD_VAR 0 4
29159: IFFALSE 29239
// begin tmp := ShrinkArray ( tmp , 3 ) ;
29161: LD_ADDR_VAR 0 4
29165: PUSH
29166: LD_VAR 0 4
29170: PPUSH
29171: LD_INT 3
29173: PPUSH
29174: CALL 74466 0 2
29178: ST_TO_ADDR
// for j in tmp do
29179: LD_ADDR_VAR 0 2
29183: PUSH
29184: LD_VAR 0 4
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29233
// begin if IsInUnit ( j ) then
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 310
29201: IFFALSE 29212
// ComExit ( j ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: CALL 74549 0 1
// AddComCollect ( j , x , y ) ;
29212: LD_VAR 0 2
29216: PPUSH
29217: LD_VAR 0 6
29221: PPUSH
29222: LD_VAR 0 7
29226: PPUSH
29227: CALL_OW 177
// end ;
29231: GO 29189
29233: POP
29234: POP
// exit ;
29235: POP
29236: POP
29237: GO 29474
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29239: LD_ADDR_VAR 0 4
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_VAR 0 5
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 91
29258: PUSH
29259: LD_VAR 0 8
29263: PUSH
29264: LD_INT 8
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: LD_INT 34
29277: PUSH
29278: LD_INT 12
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 34
29287: PUSH
29288: LD_INT 51
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 34
29297: PUSH
29298: LD_INT 32
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 34
29307: PUSH
29308: LD_INT 89
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: ST_TO_ADDR
// if tmp then
29332: LD_VAR 0 4
29336: IFFALSE 29470
// begin for j in tmp do
29338: LD_ADDR_VAR 0 2
29342: PUSH
29343: LD_VAR 0 4
29347: PUSH
29348: FOR_IN
29349: IFFALSE 29468
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29351: LD_VAR 0 2
29355: PPUSH
29356: CALL_OW 262
29360: PUSH
29361: LD_INT 3
29363: EQUAL
29364: IFTRUE 29381
29366: PUSH
29367: LD_VAR 0 2
29371: PPUSH
29372: CALL_OW 261
29376: PUSH
29377: LD_INT 20
29379: GREATER
29380: OR
29381: IFFALSE 29395
29383: PUSH
29384: LD_VAR 0 2
29388: PPUSH
29389: CALL_OW 314
29393: NOT
29394: AND
29395: IFFALSE 29425
29397: PUSH
29398: LD_VAR 0 2
29402: PPUSH
29403: CALL_OW 263
29407: PUSH
29408: LD_INT 1
29410: NONEQUAL
29411: IFTRUE 29424
29413: PUSH
29414: LD_VAR 0 2
29418: PPUSH
29419: CALL_OW 311
29423: OR
29424: AND
29425: IFFALSE 29466
// begin ComCollect ( j , x , y ) ;
29427: LD_VAR 0 2
29431: PPUSH
29432: LD_VAR 0 6
29436: PPUSH
29437: LD_VAR 0 7
29441: PPUSH
29442: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_VAR 0 8
29455: PPUSH
29456: CALL_OW 172
// exit ;
29460: POP
29461: POP
29462: POP
29463: POP
29464: GO 29474
// end ;
29466: GO 29348
29468: POP
29469: POP
// end ; end ;
29470: GO 28835
29472: POP
29473: POP
// end ; end_of_file
29474: PPOPN 9
29476: END
// export function SOS_UnitDestroyed ( un ) ; begin
29477: LD_INT 0
29479: PPUSH
// ComRadiation ( un ) ;
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL 30647 0 1
// end ;
29489: LD_VAR 0 2
29493: RET
// export function SOS_UnitKamikazed ( un ) ; begin
29494: LD_INT 0
29496: PPUSH
// ComRadiation ( un ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL 30647 0 1
// end ;
29506: LD_VAR 0 2
29510: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29511: LD_INT 0
29513: PPUSH
// end ;
29514: LD_VAR 0 4
29518: RET
// export function SOS_Command ( cmd ) ; begin
29519: LD_INT 0
29521: PPUSH
// end ;
29522: LD_VAR 0 2
29526: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29527: LD_INT 0
29529: PPUSH
// end ;
29530: LD_VAR 0 6
29534: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
29535: LD_INT 0
29537: PPUSH
29538: PPUSH
29539: PPUSH
29540: PPUSH
29541: PPUSH
// if not vehicle or not factory then
29542: LD_VAR 0 1
29546: NOT
29547: IFTRUE 29556
29549: PUSH
29550: LD_VAR 0 2
29554: NOT
29555: OR
29556: IFFALSE 29560
// exit ;
29558: GO 30222
// weapon := GetWeapon ( vehicle ) ;
29560: LD_ADDR_VAR 0 7
29564: PUSH
29565: LD_VAR 0 1
29569: PPUSH
29570: CALL_OW 264
29574: ST_TO_ADDR
// if weapon = ar_miner then
29575: LD_VAR 0 7
29579: PUSH
29580: LD_INT 81
29582: EQUAL
29583: IFFALSE 29640
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
29585: LD_ADDR_EXP 102
29589: PUSH
29590: LD_EXP 102
29594: PPUSH
29595: LD_EXP 102
29599: PUSH
29600: LD_INT 1
29602: PLUS
29603: PPUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 1
29613: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29614: LD_ADDR_EXP 103
29618: PUSH
29619: LD_EXP 103
29623: PPUSH
29624: LD_EXP 103
29628: PUSH
29629: LD_INT 1
29631: PLUS
29632: PPUSH
29633: EMPTY
29634: PPUSH
29635: CALL_OW 1
29639: ST_TO_ADDR
// end ; if not factoryWaypoints then
29640: LD_EXP 91
29644: NOT
29645: IFFALSE 29649
// exit ;
29647: GO 30222
// for i := 1 to Count ( factoryWaypoints ) do
29649: LD_ADDR_VAR 0 4
29653: PUSH
29654: DOUBLE
29655: LD_INT 1
29657: DEC
29658: ST_TO_ADDR
29659: LD_EXP 91
29663: PPUSH
29664: CALL 38175 0 1
29668: PUSH
29669: FOR_TO
29670: IFFALSE 30220
// if factoryWaypoints [ i ] [ 2 ] = factory then
29672: LD_EXP 91
29676: PUSH
29677: LD_VAR 0 4
29681: ARRAY
29682: PUSH
29683: LD_INT 2
29685: ARRAY
29686: PUSH
29687: LD_VAR 0 2
29691: EQUAL
29692: IFFALSE 30218
// begin if GetControl ( vehicle ) = control_manual then
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 263
29703: PUSH
29704: LD_INT 1
29706: EQUAL
29707: IFFALSE 30071
// begin driver := IsDrivenBy ( vehicle ) ;
29709: LD_ADDR_VAR 0 5
29713: PUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 311
29723: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
29724: LD_VAR 0 5
29728: PUSH
29729: LD_EXP 92
29733: IN
29734: IFTRUE 29748
29736: PUSH
29737: LD_VAR 0 1
29741: PUSH
29742: LD_EXP 92
29746: IN
29747: OR
29748: IFFALSE 29754
// exit ;
29750: POP
29751: POP
29752: GO 30222
// if not HasTask ( driver ) then
29754: LD_VAR 0 5
29758: PPUSH
29759: CALL_OW 314
29763: NOT
29764: IFFALSE 30069
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
29766: LD_ADDR_EXP 92
29770: PUSH
29771: LD_EXP 92
29775: PPUSH
29776: LD_VAR 0 5
29780: PPUSH
29781: CALL 74151 0 2
29785: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
29786: LD_ADDR_EXP 92
29790: PUSH
29791: LD_EXP 92
29795: PPUSH
29796: LD_VAR 0 1
29800: PPUSH
29801: CALL 74151 0 2
29805: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29806: LD_ADDR_VAR 0 6
29810: PUSH
29811: LD_EXP 91
29815: PUSH
29816: LD_VAR 0 4
29820: ARRAY
29821: PUSH
29822: LD_INT 3
29824: ARRAY
29825: PPUSH
29826: LD_EXP 91
29830: PUSH
29831: LD_VAR 0 4
29835: ARRAY
29836: PUSH
29837: LD_INT 4
29839: ARRAY
29840: PPUSH
29841: CALL_OW 428
29845: ST_TO_ADDR
// if hex then
29846: LD_VAR 0 6
29850: IFFALSE 29868
// ComMoveUnit ( driver , hex ) else
29852: LD_VAR 0 5
29856: PPUSH
29857: LD_VAR 0 6
29861: PPUSH
29862: CALL_OW 112
29866: GO 29952
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
29868: LD_VAR 0 1
29872: PPUSH
29873: LD_EXP 91
29877: PUSH
29878: LD_VAR 0 4
29882: ARRAY
29883: PUSH
29884: LD_INT 3
29886: ARRAY
29887: PPUSH
29888: LD_EXP 91
29892: PUSH
29893: LD_VAR 0 4
29897: ARRAY
29898: PUSH
29899: LD_INT 4
29901: ARRAY
29902: PPUSH
29903: CALL_OW 297
29907: PUSH
29908: LD_INT 0
29910: GREATER
29911: IFFALSE 29952
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29913: LD_VAR 0 5
29917: PPUSH
29918: LD_EXP 91
29922: PUSH
29923: LD_VAR 0 4
29927: ARRAY
29928: PUSH
29929: LD_INT 3
29931: ARRAY
29932: PPUSH
29933: LD_EXP 91
29937: PUSH
29938: LD_VAR 0 4
29942: ARRAY
29943: PUSH
29944: LD_INT 4
29946: ARRAY
29947: PPUSH
29948: CALL_OW 111
// AddComExitVehicle ( driver ) ;
29952: LD_VAR 0 5
29956: PPUSH
29957: CALL_OW 181
// if Multiplayer then
29961: LD_OWVAR 4
29965: IFFALSE 30014
// begin repeat wait ( 10 ) ;
29967: LD_INT 10
29969: PPUSH
29970: CALL_OW 67
// until not IsInUnit ( driver ) ;
29974: LD_VAR 0 5
29978: PPUSH
29979: CALL_OW 310
29983: NOT
29984: IFFALSE 29967
// if not HasTask ( driver ) then
29986: LD_VAR 0 5
29990: PPUSH
29991: CALL_OW 314
29995: NOT
29996: IFFALSE 30012
// ComEnterUnit ( driver , factory ) ;
29998: LD_VAR 0 5
30002: PPUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 120
// end else
30012: GO 30028
// AddComEnterUnit ( driver , factory ) ;
30014: LD_VAR 0 5
30018: PPUSH
30019: LD_VAR 0 2
30023: PPUSH
30024: CALL_OW 180
// wait ( 0 0$1 ) ;
30028: LD_INT 35
30030: PPUSH
30031: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
30035: LD_ADDR_EXP 92
30039: PUSH
30040: LD_EXP 92
30044: PUSH
30045: LD_VAR 0 5
30049: DIFF
30050: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
30051: LD_ADDR_EXP 92
30055: PUSH
30056: LD_EXP 92
30060: PUSH
30061: LD_VAR 0 1
30065: DIFF
30066: ST_TO_ADDR
// break ;
30067: GO 30220
// end ; end else
30069: GO 30218
// if GetControl ( vehicle ) = control_remote then
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 263
30080: PUSH
30081: LD_INT 2
30083: EQUAL
30084: IFFALSE 30170
// begin wait ( 0 0$2 ) ;
30086: LD_INT 70
30088: PPUSH
30089: CALL_OW 67
// repeat wait ( 10 ) ;
30093: LD_INT 10
30095: PPUSH
30096: CALL_OW 67
// Connect ( vehicle ) ;
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL 44453 0 1
// until IsControledBy ( vehicle ) ;
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 312
30118: IFFALSE 30093
// wait ( 10 ) ;
30120: LD_INT 10
30122: PPUSH
30123: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
30127: LD_VAR 0 1
30131: PPUSH
30132: LD_EXP 91
30136: PUSH
30137: LD_VAR 0 4
30141: ARRAY
30142: PUSH
30143: LD_INT 3
30145: ARRAY
30146: PPUSH
30147: LD_EXP 91
30151: PUSH
30152: LD_VAR 0 4
30156: ARRAY
30157: PUSH
30158: LD_INT 4
30160: ARRAY
30161: PPUSH
30162: CALL_OW 111
// break ;
30166: GO 30220
// end else
30168: GO 30218
// begin wait ( 0 0$3 ) ;
30170: LD_INT 105
30172: PPUSH
30173: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_EXP 91
30186: PUSH
30187: LD_VAR 0 4
30191: ARRAY
30192: PUSH
30193: LD_INT 3
30195: ARRAY
30196: PPUSH
30197: LD_EXP 91
30201: PUSH
30202: LD_VAR 0 4
30206: ARRAY
30207: PUSH
30208: LD_INT 4
30210: ARRAY
30211: PPUSH
30212: CALL_OW 111
// break ;
30216: GO 30220
// end ; end ;
30218: GO 29669
30220: POP
30221: POP
// end ;
30222: LD_VAR 0 3
30226: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30227: LD_INT 0
30229: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30230: LD_VAR 0 1
30234: PUSH
30235: LD_INT 250
30237: EQUAL
30238: IFFALSE 30255
30240: PUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL_OW 264
30250: PUSH
30251: LD_INT 81
30253: EQUAL
30254: AND
30255: IFFALSE 30276
// MinerPlaceMine ( unit , x , y ) ;
30257: LD_VAR 0 2
30261: PPUSH
30262: LD_VAR 0 4
30266: PPUSH
30267: LD_VAR 0 5
30271: PPUSH
30272: CALL 33622 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30276: LD_VAR 0 1
30280: PUSH
30281: LD_INT 251
30283: EQUAL
30284: IFFALSE 30301
30286: PUSH
30287: LD_VAR 0 2
30291: PPUSH
30292: CALL_OW 264
30296: PUSH
30297: LD_INT 81
30299: EQUAL
30300: AND
30301: IFFALSE 30322
// MinerDetonateMine ( unit , x , y ) ;
30303: LD_VAR 0 2
30307: PPUSH
30308: LD_VAR 0 4
30312: PPUSH
30313: LD_VAR 0 5
30317: PPUSH
30318: CALL 34029 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30322: LD_VAR 0 1
30326: PUSH
30327: LD_INT 252
30329: EQUAL
30330: IFFALSE 30347
30332: PUSH
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL_OW 264
30342: PUSH
30343: LD_INT 81
30345: EQUAL
30346: AND
30347: IFFALSE 30368
// MinerCreateMinefield ( unit , x , y ) ;
30349: LD_VAR 0 2
30353: PPUSH
30354: LD_VAR 0 4
30358: PPUSH
30359: LD_VAR 0 5
30363: PPUSH
30364: CALL 34261 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30368: LD_VAR 0 1
30372: PUSH
30373: LD_INT 253
30375: EQUAL
30376: IFFALSE 30393
30378: PUSH
30379: LD_VAR 0 2
30383: PPUSH
30384: CALL_OW 257
30388: PUSH
30389: LD_INT 5
30391: EQUAL
30392: AND
30393: IFFALSE 30414
// ComBinocular ( unit , x , y ) ;
30395: LD_VAR 0 2
30399: PPUSH
30400: LD_VAR 0 4
30404: PPUSH
30405: LD_VAR 0 5
30409: PPUSH
30410: CALL 34636 0 3
// if selectedUnit then
30414: LD_VAR 0 3
30418: IFFALSE 30478
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30420: LD_VAR 0 1
30424: PUSH
30425: LD_INT 254
30427: EQUAL
30428: IFFALSE 30445
30430: PUSH
30431: LD_VAR 0 2
30435: PPUSH
30436: CALL_OW 264
30440: PUSH
30441: LD_INT 99
30443: EQUAL
30444: AND
30445: IFFALSE 30462
30447: PUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: CALL_OW 263
30457: PUSH
30458: LD_INT 3
30460: EQUAL
30461: AND
30462: IFFALSE 30478
// HackDestroyVehicle ( unit , selectedUnit ) ;
30464: LD_VAR 0 2
30468: PPUSH
30469: LD_VAR 0 3
30473: PPUSH
30474: CALL 32812 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30478: LD_VAR 0 1
30482: PUSH
30483: LD_INT 255
30485: EQUAL
30486: IFFALSE 30510
30488: PUSH
30489: LD_VAR 0 2
30493: PPUSH
30494: CALL_OW 264
30498: PUSH
30499: LD_INT 14
30501: PUSH
30502: LD_INT 53
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: IN
30509: AND
30510: IFFALSE 30528
30512: PUSH
30513: LD_VAR 0 4
30517: PPUSH
30518: LD_VAR 0 5
30522: PPUSH
30523: CALL_OW 488
30527: AND
30528: IFFALSE 30552
// CutTreeXYR ( unit , x , y , 12 ) ;
30530: LD_VAR 0 2
30534: PPUSH
30535: LD_VAR 0 4
30539: PPUSH
30540: LD_VAR 0 5
30544: PPUSH
30545: LD_INT 12
30547: PPUSH
30548: CALL 30743 0 4
// if cmd = 256 then
30552: LD_VAR 0 1
30556: PUSH
30557: LD_INT 256
30559: EQUAL
30560: IFFALSE 30581
// SetFactoryWaypoint ( unit , x , y ) ;
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 4
30571: PPUSH
30572: LD_VAR 0 5
30576: PPUSH
30577: CALL 28022 0 3
// if cmd = 257 then
30581: LD_VAR 0 1
30585: PUSH
30586: LD_INT 257
30588: EQUAL
30589: IFFALSE 30610
// SetWarehouseGatheringPoint ( unit , x , y ) ;
30591: LD_VAR 0 2
30595: PPUSH
30596: LD_VAR 0 4
30600: PPUSH
30601: LD_VAR 0 5
30605: PPUSH
30606: CALL 28518 0 3
// if cmd = 258 then
30610: LD_VAR 0 1
30614: PUSH
30615: LD_INT 258
30617: EQUAL
30618: IFFALSE 30642
// BurnTreeXYR ( unit , x , y , 8 ) ;
30620: LD_VAR 0 2
30624: PPUSH
30625: LD_VAR 0 4
30629: PPUSH
30630: LD_VAR 0 5
30634: PPUSH
30635: LD_INT 8
30637: PPUSH
30638: CALL 31165 0 4
// end ;
30642: LD_VAR 0 6
30646: RET
// export function ComRadiation ( un ) ; var eff ; begin
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
30651: LD_VAR 0 1
30655: PPUSH
30656: CALL_OW 264
30660: PUSH
30661: LD_INT 91
30663: NONEQUAL
30664: IFFALSE 30668
// exit ;
30666: GO 30738
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30668: LD_INT 68
30670: PPUSH
30671: LD_VAR 0 1
30675: PPUSH
30676: CALL_OW 255
30680: PPUSH
30681: CALL_OW 321
30685: PUSH
30686: LD_INT 2
30688: EQUAL
30689: IFFALSE 30701
// eff := 50 else
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 50
30698: ST_TO_ADDR
30699: GO 30709
// eff := 25 ;
30701: LD_ADDR_VAR 0 3
30705: PUSH
30706: LD_INT 25
30708: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 250
30718: PPUSH
30719: LD_VAR 0 1
30723: PPUSH
30724: CALL_OW 251
30728: PPUSH
30729: LD_VAR 0 3
30733: PPUSH
30734: CALL_OW 495
// end ;
30738: LD_VAR 0 2
30742: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 302
30763: NOT
30764: IFTRUE 30783
30766: PUSH
30767: LD_VAR 0 2
30771: PPUSH
30772: LD_VAR 0 3
30776: PPUSH
30777: CALL_OW 488
30781: NOT
30782: OR
30783: IFTRUE 30792
30785: PUSH
30786: LD_VAR 0 4
30790: NOT
30791: OR
30792: IFFALSE 30796
// exit ;
30794: GO 31160
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
30796: LD_VAR 0 1
30800: PPUSH
30801: CALL_OW 437
30805: PPUSH
30806: CALL 38175 0 1
30810: PUSH
30811: LD_INT 10
30813: GREATER
30814: IFFALSE 30818
// exit ;
30816: GO 31160
// list := [ ] ;
30818: LD_ADDR_VAR 0 13
30822: PUSH
30823: EMPTY
30824: ST_TO_ADDR
// if x - r < 0 then
30825: LD_VAR 0 2
30829: PUSH
30830: LD_VAR 0 4
30834: MINUS
30835: PUSH
30836: LD_INT 0
30838: LESS
30839: IFFALSE 30851
// min_x := 0 else
30841: LD_ADDR_VAR 0 7
30845: PUSH
30846: LD_INT 0
30848: ST_TO_ADDR
30849: GO 30867
// min_x := x - r ;
30851: LD_ADDR_VAR 0 7
30855: PUSH
30856: LD_VAR 0 2
30860: PUSH
30861: LD_VAR 0 4
30865: MINUS
30866: ST_TO_ADDR
// if y - r < 0 then
30867: LD_VAR 0 3
30871: PUSH
30872: LD_VAR 0 4
30876: MINUS
30877: PUSH
30878: LD_INT 0
30880: LESS
30881: IFFALSE 30893
// min_y := 0 else
30883: LD_ADDR_VAR 0 8
30887: PUSH
30888: LD_INT 0
30890: ST_TO_ADDR
30891: GO 30909
// min_y := y - r ;
30893: LD_ADDR_VAR 0 8
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_VAR 0 4
30907: MINUS
30908: ST_TO_ADDR
// max_x := x + r ;
30909: LD_ADDR_VAR 0 9
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: LD_VAR 0 4
30923: PLUS
30924: ST_TO_ADDR
// max_y := y + r ;
30925: LD_ADDR_VAR 0 10
30929: PUSH
30930: LD_VAR 0 3
30934: PUSH
30935: LD_VAR 0 4
30939: PLUS
30940: ST_TO_ADDR
// for _x = min_x to max_x do
30941: LD_ADDR_VAR 0 11
30945: PUSH
30946: DOUBLE
30947: LD_VAR 0 7
30951: DEC
30952: ST_TO_ADDR
30953: LD_VAR 0 9
30957: PUSH
30958: FOR_TO
30959: IFFALSE 31078
// for _y = min_y to max_y do
30961: LD_ADDR_VAR 0 12
30965: PUSH
30966: DOUBLE
30967: LD_VAR 0 8
30971: DEC
30972: ST_TO_ADDR
30973: LD_VAR 0 10
30977: PUSH
30978: FOR_TO
30979: IFFALSE 31074
// begin if not ValidHex ( _x , _y ) then
30981: LD_VAR 0 11
30985: PPUSH
30986: LD_VAR 0 12
30990: PPUSH
30991: CALL_OW 488
30995: NOT
30996: IFFALSE 31000
// continue ;
30998: GO 30978
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31000: LD_VAR 0 11
31004: PPUSH
31005: LD_VAR 0 12
31009: PPUSH
31010: CALL_OW 351
31014: IFFALSE 31032
31016: PUSH
31017: LD_VAR 0 11
31021: PPUSH
31022: LD_VAR 0 12
31026: PPUSH
31027: CALL_OW 554
31031: AND
31032: IFFALSE 31072
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31034: LD_ADDR_VAR 0 13
31038: PUSH
31039: LD_VAR 0 13
31043: PPUSH
31044: LD_VAR 0 13
31048: PUSH
31049: LD_INT 1
31051: PLUS
31052: PPUSH
31053: LD_VAR 0 11
31057: PUSH
31058: LD_VAR 0 12
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PPUSH
31067: CALL_OW 2
31071: ST_TO_ADDR
// end ;
31072: GO 30978
31074: POP
31075: POP
31076: GO 30958
31078: POP
31079: POP
// if not list then
31080: LD_VAR 0 13
31084: NOT
31085: IFFALSE 31089
// exit ;
31087: GO 31160
// for i in list do
31089: LD_ADDR_VAR 0 6
31093: PUSH
31094: LD_VAR 0 13
31098: PUSH
31099: FOR_IN
31100: IFFALSE 31158
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31102: LD_VAR 0 1
31106: PPUSH
31107: LD_STRING M
31109: PUSH
31110: LD_VAR 0 6
31114: PUSH
31115: LD_INT 1
31117: ARRAY
31118: PUSH
31119: LD_VAR 0 6
31123: PUSH
31124: LD_INT 2
31126: ARRAY
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: PPUSH
31152: CALL_OW 447
31156: GO 31099
31158: POP
31159: POP
// end ;
31160: LD_VAR 0 5
31164: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
31176: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 302
31186: NOT
31187: IFTRUE 31206
31189: PUSH
31190: LD_VAR 0 2
31194: PPUSH
31195: LD_VAR 0 3
31199: PPUSH
31200: CALL_OW 488
31204: NOT
31205: OR
31206: IFTRUE 31215
31208: PUSH
31209: LD_VAR 0 4
31213: NOT
31214: OR
31215: IFFALSE 31219
// exit ;
31217: GO 31758
// if Count ( GetTaskList ( flame ) ) > 10 then
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL_OW 437
31228: PPUSH
31229: CALL 38175 0 1
31233: PUSH
31234: LD_INT 10
31236: GREATER
31237: IFFALSE 31241
// exit ;
31239: GO 31758
// list := [ ] ;
31241: LD_ADDR_VAR 0 13
31245: PUSH
31246: EMPTY
31247: ST_TO_ADDR
// if x - r < 0 then
31248: LD_VAR 0 2
31252: PUSH
31253: LD_VAR 0 4
31257: MINUS
31258: PUSH
31259: LD_INT 0
31261: LESS
31262: IFFALSE 31274
// min_x := 0 else
31264: LD_ADDR_VAR 0 7
31268: PUSH
31269: LD_INT 0
31271: ST_TO_ADDR
31272: GO 31290
// min_x := x - r ;
31274: LD_ADDR_VAR 0 7
31278: PUSH
31279: LD_VAR 0 2
31283: PUSH
31284: LD_VAR 0 4
31288: MINUS
31289: ST_TO_ADDR
// if y - r < 0 then
31290: LD_VAR 0 3
31294: PUSH
31295: LD_VAR 0 4
31299: MINUS
31300: PUSH
31301: LD_INT 0
31303: LESS
31304: IFFALSE 31316
// min_y := 0 else
31306: LD_ADDR_VAR 0 8
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
31314: GO 31332
// min_y := y - r ;
31316: LD_ADDR_VAR 0 8
31320: PUSH
31321: LD_VAR 0 3
31325: PUSH
31326: LD_VAR 0 4
31330: MINUS
31331: ST_TO_ADDR
// max_x := x + r ;
31332: LD_ADDR_VAR 0 9
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: LD_VAR 0 4
31346: PLUS
31347: ST_TO_ADDR
// max_y := y + r ;
31348: LD_ADDR_VAR 0 10
31352: PUSH
31353: LD_VAR 0 3
31357: PUSH
31358: LD_VAR 0 4
31362: PLUS
31363: ST_TO_ADDR
// for _x = min_x to max_x do
31364: LD_ADDR_VAR 0 11
31368: PUSH
31369: DOUBLE
31370: LD_VAR 0 7
31374: DEC
31375: ST_TO_ADDR
31376: LD_VAR 0 9
31380: PUSH
31381: FOR_TO
31382: IFFALSE 31501
// for _y = min_y to max_y do
31384: LD_ADDR_VAR 0 12
31388: PUSH
31389: DOUBLE
31390: LD_VAR 0 8
31394: DEC
31395: ST_TO_ADDR
31396: LD_VAR 0 10
31400: PUSH
31401: FOR_TO
31402: IFFALSE 31497
// begin if not ValidHex ( _x , _y ) then
31404: LD_VAR 0 11
31408: PPUSH
31409: LD_VAR 0 12
31413: PPUSH
31414: CALL_OW 488
31418: NOT
31419: IFFALSE 31423
// continue ;
31421: GO 31401
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31423: LD_VAR 0 11
31427: PPUSH
31428: LD_VAR 0 12
31432: PPUSH
31433: CALL_OW 351
31437: IFFALSE 31455
31439: PUSH
31440: LD_VAR 0 11
31444: PPUSH
31445: LD_VAR 0 12
31449: PPUSH
31450: CALL_OW 554
31454: AND
31455: IFFALSE 31495
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31457: LD_ADDR_VAR 0 13
31461: PUSH
31462: LD_VAR 0 13
31466: PPUSH
31467: LD_VAR 0 13
31471: PUSH
31472: LD_INT 1
31474: PLUS
31475: PPUSH
31476: LD_VAR 0 11
31480: PUSH
31481: LD_VAR 0 12
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PPUSH
31490: CALL_OW 2
31494: ST_TO_ADDR
// end ;
31495: GO 31401
31497: POP
31498: POP
31499: GO 31381
31501: POP
31502: POP
// if not list then
31503: LD_VAR 0 13
31507: NOT
31508: IFFALSE 31512
// exit ;
31510: GO 31758
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
31512: LD_ADDR_VAR 0 13
31516: PUSH
31517: LD_VAR 0 1
31521: PPUSH
31522: LD_VAR 0 13
31526: PPUSH
31527: LD_INT 1
31529: PPUSH
31530: LD_INT 1
31532: PPUSH
31533: CALL 41581 0 4
31537: ST_TO_ADDR
// ComStop ( flame ) ;
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 141
// for i in list do
31547: LD_ADDR_VAR 0 6
31551: PUSH
31552: LD_VAR 0 13
31556: PUSH
31557: FOR_IN
31558: IFFALSE 31589
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
31560: LD_VAR 0 1
31564: PPUSH
31565: LD_VAR 0 6
31569: PUSH
31570: LD_INT 1
31572: ARRAY
31573: PPUSH
31574: LD_VAR 0 6
31578: PUSH
31579: LD_INT 2
31581: ARRAY
31582: PPUSH
31583: CALL_OW 176
31587: GO 31557
31589: POP
31590: POP
// repeat wait ( 0 0$1 ) ;
31591: LD_INT 35
31593: PPUSH
31594: CALL_OW 67
// task := GetTaskList ( flame ) ;
31598: LD_ADDR_VAR 0 14
31602: PUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 437
31612: ST_TO_ADDR
// if not task then
31613: LD_VAR 0 14
31617: NOT
31618: IFFALSE 31622
// exit ;
31620: GO 31758
// if task [ 1 ] [ 1 ] <> | then
31622: LD_VAR 0 14
31626: PUSH
31627: LD_INT 1
31629: ARRAY
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PUSH
31635: LD_STRING |
31637: NONEQUAL
31638: IFFALSE 31642
// exit ;
31640: GO 31758
// _x := task [ 1 ] [ 2 ] ;
31642: LD_ADDR_VAR 0 11
31646: PUSH
31647: LD_VAR 0 14
31651: PUSH
31652: LD_INT 1
31654: ARRAY
31655: PUSH
31656: LD_INT 2
31658: ARRAY
31659: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
31660: LD_ADDR_VAR 0 12
31664: PUSH
31665: LD_VAR 0 14
31669: PUSH
31670: LD_INT 1
31672: ARRAY
31673: PUSH
31674: LD_INT 3
31676: ARRAY
31677: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
31678: LD_VAR 0 11
31682: PPUSH
31683: LD_VAR 0 12
31687: PPUSH
31688: CALL_OW 351
31692: NOT
31693: IFTRUE 31712
31695: PUSH
31696: LD_VAR 0 11
31700: PPUSH
31701: LD_VAR 0 12
31705: PPUSH
31706: CALL_OW 554
31710: NOT
31711: OR
31712: IFFALSE 31746
// begin task := Delete ( task , 1 ) ;
31714: LD_ADDR_VAR 0 14
31718: PUSH
31719: LD_VAR 0 14
31723: PPUSH
31724: LD_INT 1
31726: PPUSH
31727: CALL_OW 3
31731: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_VAR 0 14
31741: PPUSH
31742: CALL_OW 446
// end ; until not HasTask ( flame ) ;
31746: LD_VAR 0 1
31750: PPUSH
31751: CALL_OW 314
31755: NOT
31756: IFFALSE 31591
// end ;
31758: LD_VAR 0 5
31762: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31763: LD_EXP 95
31767: NOT
31768: IFFALSE 31818
31770: GO 31772
31772: DISABLE
// begin initHack := true ;
31773: LD_ADDR_EXP 95
31777: PUSH
31778: LD_INT 1
31780: ST_TO_ADDR
// hackTanks := [ ] ;
31781: LD_ADDR_EXP 96
31785: PUSH
31786: EMPTY
31787: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31788: LD_ADDR_EXP 97
31792: PUSH
31793: EMPTY
31794: ST_TO_ADDR
// hackLimit := 3 ;
31795: LD_ADDR_EXP 98
31799: PUSH
31800: LD_INT 3
31802: ST_TO_ADDR
// hackDist := 12 ;
31803: LD_ADDR_EXP 99
31807: PUSH
31808: LD_INT 12
31810: ST_TO_ADDR
// hackCounter := [ ] ;
31811: LD_ADDR_EXP 100
31815: PUSH
31816: EMPTY
31817: ST_TO_ADDR
// end ;
31818: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31819: LD_EXP 95
31823: IFFALSE 31841
31825: PUSH
31826: LD_INT 34
31828: PUSH
31829: LD_INT 99
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PPUSH
31836: CALL_OW 69
31840: AND
31841: IFFALSE 32094
31843: GO 31845
31845: DISABLE
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
// begin enable ;
31850: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31851: LD_ADDR_VAR 0 1
31855: PUSH
31856: LD_INT 34
31858: PUSH
31859: LD_INT 99
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 69
31870: PUSH
31871: FOR_IN
31872: IFFALSE 32092
// begin if not i in hackTanks then
31874: LD_VAR 0 1
31878: PUSH
31879: LD_EXP 96
31883: IN
31884: NOT
31885: IFFALSE 31968
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31887: LD_ADDR_EXP 96
31891: PUSH
31892: LD_EXP 96
31896: PPUSH
31897: LD_EXP 96
31901: PUSH
31902: LD_INT 1
31904: PLUS
31905: PPUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 1
31915: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31916: LD_ADDR_EXP 97
31920: PUSH
31921: LD_EXP 97
31925: PPUSH
31926: LD_EXP 97
31930: PUSH
31931: LD_INT 1
31933: PLUS
31934: PPUSH
31935: EMPTY
31936: PPUSH
31937: CALL_OW 1
31941: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31942: LD_ADDR_EXP 100
31946: PUSH
31947: LD_EXP 100
31951: PPUSH
31952: LD_EXP 100
31956: PUSH
31957: LD_INT 1
31959: PLUS
31960: PPUSH
31961: EMPTY
31962: PPUSH
31963: CALL_OW 1
31967: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31968: LD_VAR 0 1
31972: PPUSH
31973: CALL_OW 302
31977: NOT
31978: IFFALSE 31991
// begin HackUnlinkAll ( i ) ;
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL 32097 0 1
// continue ;
31989: GO 31871
// end ; HackCheckCapturedStatus ( i ) ;
31991: LD_VAR 0 1
31995: PPUSH
31996: CALL 32542 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32000: LD_ADDR_VAR 0 2
32004: PUSH
32005: LD_INT 81
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 255
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 33
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 91
32034: PUSH
32035: LD_VAR 0 1
32039: PUSH
32040: LD_EXP 99
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 50
32052: PUSH
32053: EMPTY
32054: LIST
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: PPUSH
32062: CALL_OW 69
32066: ST_TO_ADDR
// if not tmp then
32067: LD_VAR 0 2
32071: NOT
32072: IFFALSE 32076
// continue ;
32074: GO 31871
// HackLink ( i , tmp ) ;
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: CALL 32233 0 2
// end ;
32090: GO 31871
32092: POP
32093: POP
// end ;
32094: PPOPN 2
32096: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32097: LD_INT 0
32099: PPUSH
32100: PPUSH
32101: PPUSH
// if not hack in hackTanks then
32102: LD_VAR 0 1
32106: PUSH
32107: LD_EXP 96
32111: IN
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32228
// index := GetElementIndex ( hackTanks , hack ) ;
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_EXP 96
32126: PPUSH
32127: LD_VAR 0 1
32131: PPUSH
32132: CALL 40876 0 2
32136: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32137: LD_EXP 97
32141: PUSH
32142: LD_VAR 0 4
32146: ARRAY
32147: IFFALSE 32228
// begin for i in hackTanksCaptured [ index ] do
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_EXP 97
32158: PUSH
32159: LD_VAR 0 4
32163: ARRAY
32164: PUSH
32165: FOR_IN
32166: IFFALSE 32192
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32168: LD_VAR 0 3
32172: PUSH
32173: LD_INT 1
32175: ARRAY
32176: PPUSH
32177: LD_VAR 0 3
32181: PUSH
32182: LD_INT 2
32184: ARRAY
32185: PPUSH
32186: CALL_OW 235
32190: GO 32165
32192: POP
32193: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32194: LD_ADDR_EXP 97
32198: PUSH
32199: LD_EXP 97
32203: PPUSH
32204: LD_VAR 0 4
32208: PPUSH
32209: EMPTY
32210: PPUSH
32211: CALL_OW 1
32215: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32216: LD_VAR 0 1
32220: PPUSH
32221: LD_INT 0
32223: PPUSH
32224: CALL_OW 505
// end ; end ;
32228: LD_VAR 0 2
32232: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32233: LD_INT 0
32235: PPUSH
32236: PPUSH
32237: PPUSH
// if not hack in hackTanks or not vehicles then
32238: LD_VAR 0 1
32242: PUSH
32243: LD_EXP 96
32247: IN
32248: NOT
32249: IFTRUE 32258
32251: PUSH
32252: LD_VAR 0 2
32256: NOT
32257: OR
32258: IFFALSE 32262
// exit ;
32260: GO 32537
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32262: LD_ADDR_VAR 0 2
32266: PUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_INT 1
32282: PPUSH
32283: CALL 41528 0 4
32287: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32288: LD_ADDR_VAR 0 5
32292: PUSH
32293: LD_EXP 96
32297: PPUSH
32298: LD_VAR 0 1
32302: PPUSH
32303: CALL 40876 0 2
32307: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32308: LD_EXP 97
32312: PUSH
32313: LD_VAR 0 5
32317: ARRAY
32318: PUSH
32319: LD_EXP 98
32323: LESS
32324: IFFALSE 32513
// begin for i := 1 to vehicles do
32326: LD_ADDR_VAR 0 4
32330: PUSH
32331: DOUBLE
32332: LD_INT 1
32334: DEC
32335: ST_TO_ADDR
32336: LD_VAR 0 2
32340: PUSH
32341: FOR_TO
32342: IFFALSE 32511
// begin if hackTanksCaptured [ index ] = hackLimit then
32344: LD_EXP 97
32348: PUSH
32349: LD_VAR 0 5
32353: ARRAY
32354: PUSH
32355: LD_EXP 98
32359: EQUAL
32360: IFFALSE 32364
// break ;
32362: GO 32511
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32364: LD_ADDR_EXP 100
32368: PUSH
32369: LD_EXP 100
32373: PPUSH
32374: LD_VAR 0 5
32378: PPUSH
32379: LD_EXP 100
32383: PUSH
32384: LD_VAR 0 5
32388: ARRAY
32389: PUSH
32390: LD_INT 1
32392: PLUS
32393: PPUSH
32394: CALL_OW 1
32398: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32399: LD_ADDR_EXP 97
32403: PUSH
32404: LD_EXP 97
32408: PPUSH
32409: LD_VAR 0 5
32413: PUSH
32414: LD_EXP 97
32418: PUSH
32419: LD_VAR 0 5
32423: ARRAY
32424: PUSH
32425: LD_INT 1
32427: PLUS
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: LD_VAR 0 2
32437: PUSH
32438: LD_VAR 0 4
32442: ARRAY
32443: PUSH
32444: LD_VAR 0 2
32448: PUSH
32449: LD_VAR 0 4
32453: ARRAY
32454: PPUSH
32455: CALL_OW 255
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PPUSH
32464: CALL 41093 0 3
32468: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32469: LD_VAR 0 2
32473: PUSH
32474: LD_VAR 0 4
32478: ARRAY
32479: PPUSH
32480: LD_VAR 0 1
32484: PPUSH
32485: CALL_OW 255
32489: PPUSH
32490: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32494: LD_VAR 0 2
32498: PUSH
32499: LD_VAR 0 4
32503: ARRAY
32504: PPUSH
32505: CALL_OW 141
// end ;
32509: GO 32341
32511: POP
32512: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_EXP 97
32522: PUSH
32523: LD_VAR 0 5
32527: ARRAY
32528: PUSH
32529: LD_INT 0
32531: PLUS
32532: PPUSH
32533: CALL_OW 505
// end ;
32537: LD_VAR 0 3
32541: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
// if not hack in hackTanks then
32548: LD_VAR 0 1
32552: PUSH
32553: LD_EXP 96
32557: IN
32558: NOT
32559: IFFALSE 32563
// exit ;
32561: GO 32807
// index := GetElementIndex ( hackTanks , hack ) ;
32563: LD_ADDR_VAR 0 4
32567: PUSH
32568: LD_EXP 96
32572: PPUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL 40876 0 2
32582: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: DOUBLE
32589: LD_EXP 97
32593: PUSH
32594: LD_VAR 0 4
32598: ARRAY
32599: INC
32600: ST_TO_ADDR
32601: LD_INT 1
32603: PUSH
32604: FOR_DOWNTO
32605: IFFALSE 32781
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32607: LD_ADDR_VAR 0 5
32611: PUSH
32612: LD_EXP 97
32616: PUSH
32617: LD_VAR 0 4
32621: ARRAY
32622: PUSH
32623: LD_VAR 0 3
32627: ARRAY
32628: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32629: LD_VAR 0 5
32633: PUSH
32634: LD_INT 1
32636: ARRAY
32637: PPUSH
32638: CALL_OW 302
32642: NOT
32643: IFTRUE 32671
32645: PUSH
32646: LD_VAR 0 5
32650: PUSH
32651: LD_INT 1
32653: ARRAY
32654: PPUSH
32655: CALL_OW 255
32659: PUSH
32660: LD_VAR 0 1
32664: PPUSH
32665: CALL_OW 255
32669: NONEQUAL
32670: OR
32671: IFFALSE 32779
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32673: LD_VAR 0 5
32677: PUSH
32678: LD_INT 1
32680: ARRAY
32681: PPUSH
32682: CALL_OW 305
32686: IFFALSE 32714
32688: PUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_INT 1
32696: ARRAY
32697: PPUSH
32698: CALL_OW 255
32702: PUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 255
32712: EQUAL
32713: AND
32714: IFFALSE 32738
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32716: LD_VAR 0 5
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: PPUSH
32725: LD_VAR 0 5
32729: PUSH
32730: LD_INT 2
32732: ARRAY
32733: PPUSH
32734: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32738: LD_ADDR_EXP 97
32742: PUSH
32743: LD_EXP 97
32747: PPUSH
32748: LD_VAR 0 4
32752: PPUSH
32753: LD_EXP 97
32757: PUSH
32758: LD_VAR 0 4
32762: ARRAY
32763: PPUSH
32764: LD_VAR 0 3
32768: PPUSH
32769: CALL_OW 3
32773: PPUSH
32774: CALL_OW 1
32778: ST_TO_ADDR
// end ; end ;
32779: GO 32604
32781: POP
32782: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32783: LD_VAR 0 1
32787: PPUSH
32788: LD_EXP 97
32792: PUSH
32793: LD_VAR 0 4
32797: ARRAY
32798: PUSH
32799: LD_INT 0
32801: PLUS
32802: PPUSH
32803: CALL_OW 505
// end ;
32807: LD_VAR 0 2
32811: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32812: LD_INT 0
32814: PPUSH
32815: PPUSH
32816: PPUSH
32817: PPUSH
// if not hack in hackTanks then
32818: LD_VAR 0 1
32822: PUSH
32823: LD_EXP 96
32827: IN
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32918
// index := GetElementIndex ( hackTanks , hack ) ;
32833: LD_ADDR_VAR 0 5
32837: PUSH
32838: LD_EXP 96
32842: PPUSH
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL 40876 0 2
32852: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32853: LD_ADDR_VAR 0 4
32857: PUSH
32858: DOUBLE
32859: LD_INT 1
32861: DEC
32862: ST_TO_ADDR
32863: LD_EXP 97
32867: PUSH
32868: LD_VAR 0 5
32872: ARRAY
32873: PUSH
32874: FOR_TO
32875: IFFALSE 32916
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32877: LD_EXP 97
32881: PUSH
32882: LD_VAR 0 5
32886: ARRAY
32887: PUSH
32888: LD_VAR 0 4
32892: ARRAY
32893: PUSH
32894: LD_INT 1
32896: ARRAY
32897: PUSH
32898: LD_VAR 0 2
32902: EQUAL
32903: IFFALSE 32914
// KillUnit ( vehicle ) ;
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL_OW 66
32914: GO 32874
32916: POP
32917: POP
// end ;
32918: LD_VAR 0 3
32922: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
32923: LD_EXP 101
32927: NOT
32928: IFFALSE 33061
32930: GO 32932
32932: DISABLE
32933: LD_INT 0
32935: PPUSH
// begin initMiner := true ;
32936: LD_ADDR_EXP 101
32940: PUSH
32941: LD_INT 1
32943: ST_TO_ADDR
// minersList := [ ] ;
32944: LD_ADDR_EXP 102
32948: PUSH
32949: EMPTY
32950: ST_TO_ADDR
// minerMinesList := [ ] ;
32951: LD_ADDR_EXP 103
32955: PUSH
32956: EMPTY
32957: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
32958: LD_ADDR_EXP 104
32962: PUSH
32963: LD_INT 10
32965: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32966: LD_ADDR_VAR 0 1
32970: PUSH
32971: LD_INT 34
32973: PUSH
32974: LD_INT 81
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PPUSH
32981: CALL_OW 69
32985: PUSH
32986: FOR_IN
32987: IFFALSE 33059
// begin if not i in minersList then
32989: LD_VAR 0 1
32993: PUSH
32994: LD_EXP 102
32998: IN
32999: NOT
33000: IFFALSE 33057
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33002: LD_ADDR_EXP 102
33006: PUSH
33007: LD_EXP 102
33011: PPUSH
33012: LD_EXP 102
33016: PUSH
33017: LD_INT 1
33019: PLUS
33020: PPUSH
33021: LD_VAR 0 1
33025: PPUSH
33026: CALL_OW 1
33030: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33031: LD_ADDR_EXP 103
33035: PUSH
33036: LD_EXP 103
33040: PPUSH
33041: LD_EXP 103
33045: PUSH
33046: LD_INT 1
33048: PLUS
33049: PPUSH
33050: EMPTY
33051: PPUSH
33052: CALL_OW 1
33056: ST_TO_ADDR
// end end ;
33057: GO 32986
33059: POP
33060: POP
// end ;
33061: PPOPN 1
33063: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
33064: LD_EXP 101
33068: IFFALSE 33099
33070: PUSH
33071: LD_EXP 103
33075: PPUSH
33076: CALL 38175 0 1
33080: IFTRUE 33098
33082: PUSH
33083: LD_INT 34
33085: PUSH
33086: LD_INT 81
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PPUSH
33093: CALL_OW 69
33097: OR
33098: AND
33099: IFFALSE 33619
33101: GO 33103
33103: DISABLE
33104: LD_INT 0
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
// begin enable ;
33110: ENABLE
// for i := minerMinesList downto 1 do
33111: LD_ADDR_VAR 0 1
33115: PUSH
33116: DOUBLE
33117: LD_EXP 103
33121: INC
33122: ST_TO_ADDR
33123: LD_INT 1
33125: PUSH
33126: FOR_DOWNTO
33127: IFFALSE 33617
// begin side := GetSide ( minersList [ i ] ) ;
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_EXP 102
33138: PUSH
33139: LD_VAR 0 1
33143: ARRAY
33144: PPUSH
33145: CALL_OW 255
33149: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
33150: LD_EXP 102
33154: PUSH
33155: LD_VAR 0 1
33159: ARRAY
33160: PPUSH
33161: CALL_OW 300
33165: IFFALSE 33186
33167: PUSH
33168: LD_VAR 0 3
33172: PUSH
33173: LD_OWVAR 2
33177: PUSH
33178: LD_INT 9
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: IN
33185: AND
33186: IFFALSE 33219
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
33188: LD_EXP 102
33192: PUSH
33193: LD_VAR 0 1
33197: ARRAY
33198: PPUSH
33199: LD_EXP 103
33203: PUSH
33204: LD_VAR 0 1
33208: ARRAY
33209: PPUSH
33210: CALL 38175 0 1
33214: PPUSH
33215: CALL_OW 505
// if not minerMinesList [ i ] then
33219: LD_EXP 103
33223: PUSH
33224: LD_VAR 0 1
33228: ARRAY
33229: NOT
33230: IFFALSE 33234
// continue ;
33232: GO 33126
// for j := minerMinesList [ i ] downto 1 do
33234: LD_ADDR_VAR 0 2
33238: PUSH
33239: DOUBLE
33240: LD_EXP 103
33244: PUSH
33245: LD_VAR 0 1
33249: ARRAY
33250: INC
33251: ST_TO_ADDR
33252: LD_INT 1
33254: PUSH
33255: FOR_DOWNTO
33256: IFFALSE 33613
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
33258: LD_EXP 102
33262: PUSH
33263: LD_VAR 0 1
33267: ARRAY
33268: PPUSH
33269: CALL_OW 301
33273: IFTRUE 33293
33275: PUSH
33276: LD_EXP 102
33280: PUSH
33281: LD_VAR 0 1
33285: ARRAY
33286: PPUSH
33287: CALL_OW 305
33291: NOT
33292: OR
33293: IFFALSE 33384
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33295: LD_EXP 103
33299: PUSH
33300: LD_VAR 0 1
33304: ARRAY
33305: PUSH
33306: LD_VAR 0 2
33310: ARRAY
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PPUSH
33316: LD_EXP 103
33320: PUSH
33321: LD_VAR 0 1
33325: ARRAY
33326: PUSH
33327: LD_VAR 0 2
33331: ARRAY
33332: PUSH
33333: LD_INT 2
33335: ARRAY
33336: PPUSH
33337: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33341: LD_ADDR_EXP 103
33345: PUSH
33346: LD_EXP 103
33350: PPUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: LD_EXP 103
33360: PUSH
33361: LD_VAR 0 1
33365: ARRAY
33366: PPUSH
33367: LD_VAR 0 2
33371: PPUSH
33372: CALL_OW 3
33376: PPUSH
33377: CALL_OW 1
33381: ST_TO_ADDR
// continue ;
33382: GO 33255
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33384: LD_ADDR_VAR 0 4
33388: PUSH
33389: LD_EXP 103
33393: PUSH
33394: LD_VAR 0 1
33398: ARRAY
33399: PUSH
33400: LD_VAR 0 2
33404: ARRAY
33405: PUSH
33406: LD_INT 1
33408: ARRAY
33409: PPUSH
33410: LD_EXP 103
33414: PUSH
33415: LD_VAR 0 1
33419: ARRAY
33420: PUSH
33421: LD_VAR 0 2
33425: ARRAY
33426: PUSH
33427: LD_INT 2
33429: ARRAY
33430: PPUSH
33431: CALL_OW 428
33435: ST_TO_ADDR
// if not tmp then
33436: LD_VAR 0 4
33440: NOT
33441: IFFALSE 33445
// continue ;
33443: GO 33255
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33445: LD_VAR 0 4
33449: PUSH
33450: LD_INT 81
33452: PUSH
33453: LD_VAR 0 3
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PPUSH
33462: CALL_OW 69
33466: IN
33467: IFFALSE 33517
33469: PUSH
33470: LD_EXP 103
33474: PUSH
33475: LD_VAR 0 1
33479: ARRAY
33480: PUSH
33481: LD_VAR 0 2
33485: ARRAY
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PPUSH
33491: LD_EXP 103
33495: PUSH
33496: LD_VAR 0 1
33500: ARRAY
33501: PUSH
33502: LD_VAR 0 2
33506: ARRAY
33507: PUSH
33508: LD_INT 2
33510: ARRAY
33511: PPUSH
33512: CALL_OW 458
33516: AND
33517: IFFALSE 33611
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33519: LD_EXP 103
33523: PUSH
33524: LD_VAR 0 1
33528: ARRAY
33529: PUSH
33530: LD_VAR 0 2
33534: ARRAY
33535: PUSH
33536: LD_INT 1
33538: ARRAY
33539: PPUSH
33540: LD_EXP 103
33544: PUSH
33545: LD_VAR 0 1
33549: ARRAY
33550: PUSH
33551: LD_VAR 0 2
33555: ARRAY
33556: PUSH
33557: LD_INT 2
33559: ARRAY
33560: PPUSH
33561: LD_VAR 0 3
33565: PPUSH
33566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33570: LD_ADDR_EXP 103
33574: PUSH
33575: LD_EXP 103
33579: PPUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: LD_EXP 103
33589: PUSH
33590: LD_VAR 0 1
33594: ARRAY
33595: PPUSH
33596: LD_VAR 0 2
33600: PPUSH
33601: CALL_OW 3
33605: PPUSH
33606: CALL_OW 1
33610: ST_TO_ADDR
// end ; end ;
33611: GO 33255
33613: POP
33614: POP
// end ;
33615: GO 33126
33617: POP
33618: POP
// end ;
33619: PPOPN 4
33621: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
33622: LD_INT 0
33624: PPUSH
33625: PPUSH
33626: PPUSH
33627: PPUSH
// result := false ;
33628: LD_ADDR_VAR 0 4
33632: PUSH
33633: LD_INT 0
33635: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33636: LD_VAR 0 1
33640: PPUSH
33641: CALL_OW 264
33645: PUSH
33646: LD_INT 81
33648: EQUAL
33649: NOT
33650: IFFALSE 33654
// exit ;
33652: GO 34024
// side := GetSide ( unit ) ;
33654: LD_ADDR_VAR 0 6
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 255
33668: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
33669: LD_ADDR_VAR 0 5
33673: PUSH
33674: LD_EXP 102
33678: PPUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL 40876 0 2
33688: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33689: LD_EXP 103
33693: PUSH
33694: LD_VAR 0 5
33698: ARRAY
33699: PUSH
33700: LD_EXP 104
33704: GREATEREQUAL
33705: IFFALSE 33709
// exit ;
33707: GO 34024
// ComMoveXY ( unit , x , y ) ;
33709: LD_VAR 0 1
33713: PPUSH
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33728: LD_INT 35
33730: PPUSH
33731: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33735: LD_VAR 0 1
33739: PPUSH
33740: LD_VAR 0 2
33744: PPUSH
33745: LD_VAR 0 3
33749: PPUSH
33750: CALL 72932 0 3
33754: NOT
33755: IFFALSE 33768
33757: PUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 314
33767: AND
33768: IFFALSE 33772
// exit ;
33770: GO 34024
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL_OW 428
33786: PUSH
33787: LD_VAR 0 1
33791: EQUAL
33792: IFFALSE 33806
33794: PUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 314
33804: NOT
33805: AND
33806: IFFALSE 33728
// if MineAtPos ( x , y ) then
33808: LD_VAR 0 2
33812: PPUSH
33813: LD_VAR 0 3
33817: PPUSH
33818: CALL_OW 458
33822: IFFALSE 33826
// exit ;
33824: GO 34024
// if your_side = side then
33826: LD_OWVAR 2
33830: PUSH
33831: LD_VAR 0 6
33835: EQUAL
33836: IFFALSE 33855
// PlaySoundXY ( x , y , PlantMine ) ;
33838: LD_VAR 0 2
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: LD_STRING PlantMine
33850: PPUSH
33851: CALL_OW 366
// repeat wait ( 1 ) ;
33855: LD_INT 1
33857: PPUSH
33858: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
33862: LD_VAR 0 2
33866: PPUSH
33867: LD_VAR 0 3
33871: PPUSH
33872: LD_VAR 0 6
33876: PPUSH
33877: LD_INT 0
33879: PPUSH
33880: CALL_OW 454
33884: IFFALSE 33855
// if MineAtPos ( x , y ) then
33886: LD_VAR 0 2
33890: PPUSH
33891: LD_VAR 0 3
33895: PPUSH
33896: CALL_OW 458
33900: IFFALSE 34016
// begin for i in minerMinesList [ index ] do
33902: LD_ADDR_VAR 0 7
33906: PUSH
33907: LD_EXP 103
33911: PUSH
33912: LD_VAR 0 5
33916: ARRAY
33917: PUSH
33918: FOR_IN
33919: IFFALSE 33961
// if i [ 1 ] = x and i [ 2 ] = y then
33921: LD_VAR 0 7
33925: PUSH
33926: LD_INT 1
33928: ARRAY
33929: PUSH
33930: LD_VAR 0 2
33934: EQUAL
33935: IFFALSE 33953
33937: PUSH
33938: LD_VAR 0 7
33942: PUSH
33943: LD_INT 2
33945: ARRAY
33946: PUSH
33947: LD_VAR 0 3
33951: EQUAL
33952: AND
33953: IFFALSE 33959
// exit ;
33955: POP
33956: POP
33957: GO 34024
33959: GO 33918
33961: POP
33962: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33963: LD_ADDR_EXP 103
33967: PUSH
33968: LD_EXP 103
33972: PPUSH
33973: LD_VAR 0 5
33977: PUSH
33978: LD_EXP 103
33982: PUSH
33983: LD_VAR 0 5
33987: ARRAY
33988: PUSH
33989: LD_INT 1
33991: PLUS
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PPUSH
33997: LD_VAR 0 2
34001: PUSH
34002: LD_VAR 0 3
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PPUSH
34011: CALL 41093 0 3
34015: ST_TO_ADDR
// end ; result := true ;
34016: LD_ADDR_VAR 0 4
34020: PUSH
34021: LD_INT 1
34023: ST_TO_ADDR
// end ;
34024: LD_VAR 0 4
34028: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34029: LD_INT 0
34031: PPUSH
34032: PPUSH
34033: PPUSH
// if not unit in minersList then
34034: LD_VAR 0 1
34038: PUSH
34039: LD_EXP 102
34043: IN
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34256
// index := GetElementIndex ( minersList , unit ) ;
34049: LD_ADDR_VAR 0 6
34053: PUSH
34054: LD_EXP 102
34058: PPUSH
34059: LD_VAR 0 1
34063: PPUSH
34064: CALL 40876 0 2
34068: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34069: LD_ADDR_VAR 0 5
34073: PUSH
34074: DOUBLE
34075: LD_EXP 103
34079: PUSH
34080: LD_VAR 0 6
34084: ARRAY
34085: INC
34086: ST_TO_ADDR
34087: LD_INT 1
34089: PUSH
34090: FOR_DOWNTO
34091: IFFALSE 34254
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34093: LD_EXP 103
34097: PUSH
34098: LD_VAR 0 6
34102: ARRAY
34103: PUSH
34104: LD_VAR 0 5
34108: ARRAY
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: LD_EXP 103
34118: PUSH
34119: LD_VAR 0 6
34123: ARRAY
34124: PUSH
34125: LD_VAR 0 5
34129: ARRAY
34130: PUSH
34131: LD_INT 2
34133: ARRAY
34134: PPUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: CALL_OW 298
34149: PUSH
34150: LD_INT 6
34152: LESS
34153: IFFALSE 34252
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34155: LD_EXP 103
34159: PUSH
34160: LD_VAR 0 6
34164: ARRAY
34165: PUSH
34166: LD_VAR 0 5
34170: ARRAY
34171: PUSH
34172: LD_INT 1
34174: ARRAY
34175: PPUSH
34176: LD_EXP 103
34180: PUSH
34181: LD_VAR 0 6
34185: ARRAY
34186: PUSH
34187: LD_VAR 0 5
34191: ARRAY
34192: PUSH
34193: LD_INT 2
34195: ARRAY
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 255
34206: PPUSH
34207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34211: LD_ADDR_EXP 103
34215: PUSH
34216: LD_EXP 103
34220: PPUSH
34221: LD_VAR 0 6
34225: PPUSH
34226: LD_EXP 103
34230: PUSH
34231: LD_VAR 0 6
34235: ARRAY
34236: PPUSH
34237: LD_VAR 0 5
34241: PPUSH
34242: CALL_OW 3
34246: PPUSH
34247: CALL_OW 1
34251: ST_TO_ADDR
// end ; end ;
34252: GO 34090
34254: POP
34255: POP
// end ;
34256: LD_VAR 0 4
34260: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34261: LD_INT 0
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34272: LD_VAR 0 1
34276: PPUSH
34277: CALL_OW 264
34281: PUSH
34282: LD_INT 81
34284: EQUAL
34285: NOT
34286: IFTRUE 34301
34288: PUSH
34289: LD_VAR 0 1
34293: PUSH
34294: LD_EXP 102
34298: IN
34299: NOT
34300: OR
34301: IFFALSE 34305
// exit ;
34303: GO 34631
// index := GetElementIndex ( minersList , unit ) ;
34305: LD_ADDR_VAR 0 6
34309: PUSH
34310: LD_EXP 102
34314: PPUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL 40876 0 2
34324: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34325: LD_ADDR_VAR 0 8
34329: PUSH
34330: LD_EXP 104
34334: PUSH
34335: LD_EXP 103
34339: PUSH
34340: LD_VAR 0 6
34344: ARRAY
34345: MINUS
34346: ST_TO_ADDR
// if not minesFreeAmount then
34347: LD_VAR 0 8
34351: NOT
34352: IFFALSE 34356
// exit ;
34354: GO 34631
// tmp := [ ] ;
34356: LD_ADDR_VAR 0 7
34360: PUSH
34361: EMPTY
34362: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34363: LD_ADDR_VAR 0 5
34367: PUSH
34368: DOUBLE
34369: LD_INT 1
34371: DEC
34372: ST_TO_ADDR
34373: LD_VAR 0 8
34377: PUSH
34378: FOR_TO
34379: IFFALSE 34578
// begin _d := rand ( 0 , 5 ) ;
34381: LD_ADDR_VAR 0 11
34385: PUSH
34386: LD_INT 0
34388: PPUSH
34389: LD_INT 5
34391: PPUSH
34392: CALL_OW 12
34396: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34397: LD_ADDR_VAR 0 12
34401: PUSH
34402: LD_INT 2
34404: PPUSH
34405: LD_INT 6
34407: PPUSH
34408: CALL_OW 12
34412: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34413: LD_ADDR_VAR 0 9
34417: PUSH
34418: LD_VAR 0 2
34422: PPUSH
34423: LD_VAR 0 11
34427: PPUSH
34428: LD_VAR 0 12
34432: PPUSH
34433: CALL_OW 272
34437: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34438: LD_ADDR_VAR 0 10
34442: PUSH
34443: LD_VAR 0 3
34447: PPUSH
34448: LD_VAR 0 11
34452: PPUSH
34453: LD_VAR 0 12
34457: PPUSH
34458: CALL_OW 273
34462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34463: LD_VAR 0 9
34467: PPUSH
34468: LD_VAR 0 10
34472: PPUSH
34473: CALL_OW 488
34477: IFFALSE 34501
34479: PUSH
34480: LD_VAR 0 9
34484: PUSH
34485: LD_VAR 0 10
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_VAR 0 7
34498: IN
34499: NOT
34500: AND
34501: IFFALSE 34520
34503: PUSH
34504: LD_VAR 0 9
34508: PPUSH
34509: LD_VAR 0 10
34513: PPUSH
34514: CALL_OW 458
34518: NOT
34519: AND
34520: IFFALSE 34562
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34522: LD_ADDR_VAR 0 7
34526: PUSH
34527: LD_VAR 0 7
34531: PPUSH
34532: LD_VAR 0 7
34536: PUSH
34537: LD_INT 1
34539: PLUS
34540: PPUSH
34541: LD_VAR 0 9
34545: PUSH
34546: LD_VAR 0 10
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PPUSH
34555: CALL_OW 1
34559: ST_TO_ADDR
34560: GO 34576
// i := i - 1 ;
34562: LD_ADDR_VAR 0 5
34566: PUSH
34567: LD_VAR 0 5
34571: PUSH
34572: LD_INT 1
34574: MINUS
34575: ST_TO_ADDR
// end ;
34576: GO 34378
34578: POP
34579: POP
// for i in tmp do
34580: LD_ADDR_VAR 0 5
34584: PUSH
34585: LD_VAR 0 7
34589: PUSH
34590: FOR_IN
34591: IFFALSE 34629
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34593: LD_VAR 0 1
34597: PPUSH
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 1
34605: ARRAY
34606: PPUSH
34607: LD_VAR 0 5
34611: PUSH
34612: LD_INT 2
34614: ARRAY
34615: PPUSH
34616: CALL 33622 0 3
34620: NOT
34621: IFFALSE 34627
// exit ;
34623: POP
34624: POP
34625: GO 34631
34627: GO 34590
34629: POP
34630: POP
// end ;
34631: LD_VAR 0 4
34635: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
34636: LD_INT 0
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
// if GetClass ( unit ) <> class_sniper then
34647: LD_VAR 0 1
34651: PPUSH
34652: CALL_OW 257
34656: PUSH
34657: LD_INT 5
34659: NONEQUAL
34660: IFFALSE 34664
// exit ;
34662: GO 35134
// dist := 8 ;
34664: LD_ADDR_VAR 0 5
34668: PUSH
34669: LD_INT 8
34671: ST_TO_ADDR
// viewRange := 12 ;
34672: LD_ADDR_VAR 0 8
34676: PUSH
34677: LD_INT 12
34679: ST_TO_ADDR
// side := GetSide ( unit ) ;
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 255
34694: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34695: LD_INT 61
34697: PPUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: CALL_OW 321
34707: PUSH
34708: LD_INT 2
34710: EQUAL
34711: IFFALSE 34721
// viewRange := 16 ;
34713: LD_ADDR_VAR 0 8
34717: PUSH
34718: LD_INT 16
34720: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34721: LD_VAR 0 1
34725: PPUSH
34726: LD_VAR 0 2
34730: PPUSH
34731: LD_VAR 0 3
34735: PPUSH
34736: CALL_OW 297
34740: PUSH
34741: LD_VAR 0 5
34745: GREATER
34746: IFFALSE 34825
// begin ComMoveXY ( unit , x , y ) ;
34748: LD_VAR 0 1
34752: PPUSH
34753: LD_VAR 0 2
34757: PPUSH
34758: LD_VAR 0 3
34762: PPUSH
34763: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34767: LD_INT 35
34769: PPUSH
34770: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: LD_VAR 0 3
34788: PPUSH
34789: CALL 72932 0 3
34793: NOT
34794: IFFALSE 34798
// exit ;
34796: GO 35134
// until GetDistUnitXY ( unit , x , y ) < dist ;
34798: LD_VAR 0 1
34802: PPUSH
34803: LD_VAR 0 2
34807: PPUSH
34808: LD_VAR 0 3
34812: PPUSH
34813: CALL_OW 297
34817: PUSH
34818: LD_VAR 0 5
34822: LESS
34823: IFFALSE 34767
// end ; ComTurnXY ( unit , x , y ) ;
34825: LD_VAR 0 1
34829: PPUSH
34830: LD_VAR 0 2
34834: PPUSH
34835: LD_VAR 0 3
34839: PPUSH
34840: CALL_OW 118
// repeat if Multiplayer then
34844: LD_OWVAR 4
34848: IFFALSE 34859
// wait ( 35 ) else
34850: LD_INT 35
34852: PPUSH
34853: CALL_OW 67
34857: GO 34866
// wait ( 5 ) ;
34859: LD_INT 5
34861: PPUSH
34862: CALL_OW 67
// _d := GetDir ( unit ) ;
34866: LD_ADDR_VAR 0 11
34870: PUSH
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 254
34880: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
34881: LD_ADDR_VAR 0 7
34885: PUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 250
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 251
34905: PPUSH
34906: LD_VAR 0 2
34910: PPUSH
34911: LD_VAR 0 3
34915: PPUSH
34916: CALL 75568 0 4
34920: ST_TO_ADDR
// until dir = _d ;
34921: LD_VAR 0 7
34925: PUSH
34926: LD_VAR 0 11
34930: EQUAL
34931: IFFALSE 34844
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
34933: LD_ADDR_VAR 0 9
34937: PUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 250
34947: PPUSH
34948: LD_VAR 0 7
34952: PPUSH
34953: LD_VAR 0 5
34957: PPUSH
34958: CALL_OW 272
34962: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
34963: LD_ADDR_VAR 0 10
34967: PUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 251
34977: PPUSH
34978: LD_VAR 0 7
34982: PPUSH
34983: LD_VAR 0 5
34987: PPUSH
34988: CALL_OW 273
34992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34993: LD_VAR 0 9
34997: PPUSH
34998: LD_VAR 0 10
35002: PPUSH
35003: CALL_OW 488
35007: NOT
35008: IFFALSE 35012
// exit ;
35010: GO 35134
// ComAnimCustom ( unit , 1 ) ;
35012: LD_VAR 0 1
35016: PPUSH
35017: LD_INT 1
35019: PPUSH
35020: CALL_OW 592
// p := 0 ;
35024: LD_ADDR_VAR 0 12
35028: PUSH
35029: LD_INT 0
35031: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35032: LD_VAR 0 9
35036: PPUSH
35037: LD_VAR 0 10
35041: PPUSH
35042: LD_VAR 0 6
35046: PPUSH
35047: LD_VAR 0 8
35051: PPUSH
35052: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
35056: LD_INT 35
35058: PPUSH
35059: CALL_OW 67
// p := Inc ( p ) ;
35063: LD_ADDR_VAR 0 12
35067: PUSH
35068: LD_VAR 0 12
35072: PPUSH
35073: CALL 75524 0 1
35077: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
35078: LD_VAR 0 12
35082: PUSH
35083: LD_INT 3
35085: EQUAL
35086: IFTRUE 35100
35088: PUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 302
35098: NOT
35099: OR
35100: IFTRUE 35113
35102: PUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 301
35112: OR
35113: IFFALSE 35056
// RemoveSeeing ( _x , _y , side ) ;
35115: LD_VAR 0 9
35119: PPUSH
35120: LD_VAR 0 10
35124: PPUSH
35125: LD_VAR 0 6
35129: PPUSH
35130: CALL_OW 331
// end ;
35134: LD_VAR 0 4
35138: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
35139: LD_INT 0
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
// if not unit then
35152: LD_VAR 0 1
35156: NOT
35157: IFFALSE 35161
// exit ;
35159: GO 35432
// side := GetSide ( unit ) ;
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_VAR 0 1
35170: PPUSH
35171: CALL_OW 255
35175: ST_TO_ADDR
// x := GetX ( unit ) ;
35176: LD_ADDR_VAR 0 5
35180: PUSH
35181: LD_VAR 0 1
35185: PPUSH
35186: CALL_OW 250
35190: ST_TO_ADDR
// y := GetY ( unit ) ;
35191: LD_ADDR_VAR 0 6
35195: PUSH
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 251
35205: ST_TO_ADDR
// r := 8 ;
35206: LD_ADDR_VAR 0 4
35210: PUSH
35211: LD_INT 8
35213: ST_TO_ADDR
// if x - r < 0 then
35214: LD_VAR 0 5
35218: PUSH
35219: LD_VAR 0 4
35223: MINUS
35224: PUSH
35225: LD_INT 0
35227: LESS
35228: IFFALSE 35240
// min_x := 0 else
35230: LD_ADDR_VAR 0 7
35234: PUSH
35235: LD_INT 0
35237: ST_TO_ADDR
35238: GO 35256
// min_x := x - r ;
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: LD_VAR 0 5
35249: PUSH
35250: LD_VAR 0 4
35254: MINUS
35255: ST_TO_ADDR
// if y - r < 0 then
35256: LD_VAR 0 6
35260: PUSH
35261: LD_VAR 0 4
35265: MINUS
35266: PUSH
35267: LD_INT 0
35269: LESS
35270: IFFALSE 35282
// min_y := 0 else
35272: LD_ADDR_VAR 0 8
35276: PUSH
35277: LD_INT 0
35279: ST_TO_ADDR
35280: GO 35298
// min_y := y - r ;
35282: LD_ADDR_VAR 0 8
35286: PUSH
35287: LD_VAR 0 6
35291: PUSH
35292: LD_VAR 0 4
35296: MINUS
35297: ST_TO_ADDR
// max_x := x + r ;
35298: LD_ADDR_VAR 0 9
35302: PUSH
35303: LD_VAR 0 5
35307: PUSH
35308: LD_VAR 0 4
35312: PLUS
35313: ST_TO_ADDR
// max_y := y + r ;
35314: LD_ADDR_VAR 0 10
35318: PUSH
35319: LD_VAR 0 6
35323: PUSH
35324: LD_VAR 0 4
35328: PLUS
35329: ST_TO_ADDR
// for _x = min_x to max_x do
35330: LD_ADDR_VAR 0 11
35334: PUSH
35335: DOUBLE
35336: LD_VAR 0 7
35340: DEC
35341: ST_TO_ADDR
35342: LD_VAR 0 9
35346: PUSH
35347: FOR_TO
35348: IFFALSE 35430
// for _y = min_y to max_y do
35350: LD_ADDR_VAR 0 12
35354: PUSH
35355: DOUBLE
35356: LD_VAR 0 8
35360: DEC
35361: ST_TO_ADDR
35362: LD_VAR 0 10
35366: PUSH
35367: FOR_TO
35368: IFFALSE 35426
// begin if not ValidHex ( _x , _y ) then
35370: LD_VAR 0 11
35374: PPUSH
35375: LD_VAR 0 12
35379: PPUSH
35380: CALL_OW 488
35384: NOT
35385: IFFALSE 35389
// continue ;
35387: GO 35367
// if MineAtPos ( _x , _y ) then
35389: LD_VAR 0 11
35393: PPUSH
35394: LD_VAR 0 12
35398: PPUSH
35399: CALL_OW 458
35403: IFFALSE 35424
// ViewMineAtPos ( _x , _y , side ) ;
35405: LD_VAR 0 11
35409: PPUSH
35410: LD_VAR 0 12
35414: PPUSH
35415: LD_VAR 0 3
35419: PPUSH
35420: CALL_OW 457
// end ;
35424: GO 35367
35426: POP
35427: POP
35428: GO 35347
35430: POP
35431: POP
// end ;
35432: LD_VAR 0 2
35436: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
35437: LD_INT 0
35439: PPUSH
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
// if not units then
35446: LD_VAR 0 1
35450: NOT
35451: IFFALSE 35455
// exit ;
35453: GO 35919
// scaners := [ ] ;
35455: LD_ADDR_VAR 0 6
35459: PUSH
35460: EMPTY
35461: ST_TO_ADDR
// for i in units do
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_VAR 0 1
35471: PUSH
35472: FOR_IN
35473: IFFALSE 35630
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
35475: LD_VAR 0 3
35479: PPUSH
35480: CALL_OW 264
35484: PUSH
35485: LD_INT 11
35487: NONEQUAL
35488: IFTRUE 35502
35490: PUSH
35491: LD_VAR 0 3
35495: PPUSH
35496: CALL_OW 302
35500: NOT
35501: OR
35502: IFTRUE 35519
35504: PUSH
35505: LD_VAR 0 3
35509: PPUSH
35510: CALL_OW 110
35514: PUSH
35515: LD_INT 502
35517: EQUAL
35518: OR
35519: IFFALSE 35523
// continue ;
35521: GO 35472
// ComStop ( i ) ;
35523: LD_VAR 0 3
35527: PPUSH
35528: CALL_OW 141
// x := GetX ( i ) ;
35532: LD_ADDR_VAR 0 4
35536: PUSH
35537: LD_VAR 0 3
35541: PPUSH
35542: CALL_OW 250
35546: ST_TO_ADDR
// y := GetY ( i ) ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 3
35556: PPUSH
35557: CALL_OW 251
35561: ST_TO_ADDR
// if GetSide ( i ) = your_side then
35562: LD_VAR 0 3
35566: PPUSH
35567: CALL_OW 255
35571: PUSH
35572: LD_OWVAR 2
35576: EQUAL
35577: IFFALSE 35596
// PlaySoundXY ( x , y , mineDetector ) ;
35579: LD_VAR 0 4
35583: PPUSH
35584: LD_VAR 0 5
35588: PPUSH
35589: LD_STRING mineDetector
35591: PPUSH
35592: CALL_OW 366
// scaners := Join ( scaners , i ) ;
35596: LD_ADDR_VAR 0 6
35600: PUSH
35601: LD_VAR 0 6
35605: PPUSH
35606: LD_VAR 0 3
35610: PPUSH
35611: CALL 74151 0 2
35615: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
35616: LD_VAR 0 3
35620: PPUSH
35621: LD_INT 502
35623: PPUSH
35624: CALL_OW 109
// end ;
35628: GO 35472
35630: POP
35631: POP
// if not scaners then
35632: LD_VAR 0 6
35636: NOT
35637: IFFALSE 35641
// exit ;
35639: GO 35919
// wait ( 3 ) ;
35641: LD_INT 3
35643: PPUSH
35644: CALL_OW 67
// timer := 6 ;
35648: LD_ADDR_VAR 0 7
35652: PUSH
35653: LD_INT 6
35655: ST_TO_ADDR
// repeat for i in scaners do
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_VAR 0 6
35665: PUSH
35666: FOR_IN
35667: IFFALSE 35817
// begin side := GetSide ( i ) ;
35669: LD_ADDR_VAR 0 8
35673: PUSH
35674: LD_VAR 0 3
35678: PPUSH
35679: CALL_OW 255
35683: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
35684: LD_VAR 0 3
35688: PPUSH
35689: CALL_OW 302
35693: NOT
35694: IFTRUE 35707
35696: PUSH
35697: LD_VAR 0 3
35701: PPUSH
35702: CALL_OW 314
35706: OR
35707: IFTRUE 35738
35709: PUSH
35710: LD_VAR 0 3
35714: PPUSH
35715: CALL_OW 263
35719: PUSH
35720: LD_INT 1
35722: EQUAL
35723: IFFALSE 35737
35725: PUSH
35726: LD_VAR 0 3
35730: PPUSH
35731: CALL_OW 311
35735: NOT
35736: AND
35737: OR
35738: IFFALSE 35782
// begin SetUnitDisplayNumber ( i , 0 ) ;
35740: LD_VAR 0 3
35744: PPUSH
35745: LD_INT 0
35747: PPUSH
35748: CALL_OW 505
// SetTag ( i , 0 ) ;
35752: LD_VAR 0 3
35756: PPUSH
35757: LD_INT 0
35759: PPUSH
35760: CALL_OW 109
// scaners := scaners diff i ;
35764: LD_ADDR_VAR 0 6
35768: PUSH
35769: LD_VAR 0 6
35773: PUSH
35774: LD_VAR 0 3
35778: DIFF
35779: ST_TO_ADDR
// continue ;
35780: GO 35666
// end ; if side in [ your_side , 9 ] then
35782: LD_VAR 0 8
35786: PUSH
35787: LD_OWVAR 2
35791: PUSH
35792: LD_INT 9
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: IN
35799: IFFALSE 35815
// SetUnitDisplayNumber ( i , timer ) ;
35801: LD_VAR 0 3
35805: PPUSH
35806: LD_VAR 0 7
35810: PPUSH
35811: CALL_OW 505
// end ;
35815: GO 35666
35817: POP
35818: POP
// if not scaners then
35819: LD_VAR 0 6
35823: NOT
35824: IFFALSE 35828
// exit ;
35826: GO 35919
// timer := Dec ( timer ) ;
35828: LD_ADDR_VAR 0 7
35832: PUSH
35833: LD_VAR 0 7
35837: PPUSH
35838: CALL 75546 0 1
35842: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35843: LD_INT 35
35845: PPUSH
35846: CALL_OW 67
// until timer = 0 ;
35850: LD_VAR 0 7
35854: PUSH
35855: LD_INT 0
35857: EQUAL
35858: IFFALSE 35656
// if not scaners then
35860: LD_VAR 0 6
35864: NOT
35865: IFFALSE 35869
// exit ;
35867: GO 35919
// for i in scaners do
35869: LD_ADDR_VAR 0 3
35873: PUSH
35874: LD_VAR 0 6
35878: PUSH
35879: FOR_IN
35880: IFFALSE 35917
// begin SetUnitDisplayNumber ( i , 0 ) ;
35882: LD_VAR 0 3
35886: PPUSH
35887: LD_INT 0
35889: PPUSH
35890: CALL_OW 505
// SetTag ( i , 0 ) ;
35894: LD_VAR 0 3
35898: PPUSH
35899: LD_INT 0
35901: PPUSH
35902: CALL_OW 109
// RevealDetectorMine ( i ) ;
35906: LD_VAR 0 3
35910: PPUSH
35911: CALL 35139 0 1
// end ;
35915: GO 35879
35917: POP
35918: POP
// end ;
35919: LD_VAR 0 2
35923: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
35924: LD_INT 0
35926: PPUSH
// if p1 = mine_detector_mode then
35927: LD_VAR 0 2
35931: PUSH
35932: LD_INT 103
35934: EQUAL
35935: IFFALSE 35946
// DetectMine ( units ) ;
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL 35437 0 1
// end ; end_of_file
35946: LD_VAR 0 7
35950: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35951: LD_INT 0
35953: PPUSH
35954: PPUSH
// if exist_mode then
35955: LD_VAR 0 2
35959: IFFALSE 36005
// begin unit := CreateCharacter ( prefix & ident ) ;
35961: LD_ADDR_VAR 0 5
35965: PUSH
35966: LD_VAR 0 3
35970: PUSH
35971: LD_VAR 0 1
35975: STR
35976: PPUSH
35977: CALL_OW 34
35981: ST_TO_ADDR
// if unit then
35982: LD_VAR 0 5
35986: IFFALSE 36003
// DeleteCharacters ( prefix & ident ) ;
35988: LD_VAR 0 3
35992: PUSH
35993: LD_VAR 0 1
35997: STR
35998: PPUSH
35999: CALL_OW 40
// end else
36003: GO 36020
// unit := NewCharacter ( ident ) ;
36005: LD_ADDR_VAR 0 5
36009: PUSH
36010: LD_VAR 0 1
36014: PPUSH
36015: CALL_OW 25
36019: ST_TO_ADDR
// result := unit ;
36020: LD_ADDR_VAR 0 4
36024: PUSH
36025: LD_VAR 0 5
36029: ST_TO_ADDR
// end ;
36030: LD_VAR 0 4
36034: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
36035: LD_INT 0
36037: PPUSH
36038: PPUSH
// if exist_mode then
36039: LD_VAR 0 2
36043: IFFALSE 36068
// unit := CreateCharacter ( prefix & ident ) else
36045: LD_ADDR_VAR 0 5
36049: PUSH
36050: LD_VAR 0 3
36054: PUSH
36055: LD_VAR 0 1
36059: STR
36060: PPUSH
36061: CALL_OW 34
36065: ST_TO_ADDR
36066: GO 36083
// unit := NewCharacter ( ident ) ;
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 25
36082: ST_TO_ADDR
// result := unit ;
36083: LD_ADDR_VAR 0 4
36087: PUSH
36088: LD_VAR 0 5
36092: ST_TO_ADDR
// end ;
36093: LD_VAR 0 4
36097: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36098: LD_INT 0
36100: PPUSH
36101: PPUSH
// if not side or not nation then
36102: LD_VAR 0 1
36106: NOT
36107: IFTRUE 36116
36109: PUSH
36110: LD_VAR 0 2
36114: NOT
36115: OR
36116: IFFALSE 36120
// exit ;
36118: GO 36914
// case nation of nation_american :
36120: LD_VAR 0 2
36124: PUSH
36125: LD_INT 1
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36355
36133: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
36134: LD_ADDR_VAR 0 4
36138: PUSH
36139: LD_INT 35
36141: PUSH
36142: LD_INT 45
36144: PUSH
36145: LD_INT 46
36147: PUSH
36148: LD_INT 47
36150: PUSH
36151: LD_INT 82
36153: PUSH
36154: LD_INT 83
36156: PUSH
36157: LD_INT 84
36159: PUSH
36160: LD_INT 85
36162: PUSH
36163: LD_INT 86
36165: PUSH
36166: LD_INT 1
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 6
36174: PUSH
36175: LD_INT 15
36177: PUSH
36178: LD_INT 16
36180: PUSH
36181: LD_INT 7
36183: PUSH
36184: LD_INT 12
36186: PUSH
36187: LD_INT 13
36189: PUSH
36190: LD_INT 10
36192: PUSH
36193: LD_INT 14
36195: PUSH
36196: LD_INT 20
36198: PUSH
36199: LD_INT 21
36201: PUSH
36202: LD_INT 22
36204: PUSH
36205: LD_INT 25
36207: PUSH
36208: LD_INT 32
36210: PUSH
36211: LD_INT 27
36213: PUSH
36214: LD_INT 36
36216: PUSH
36217: LD_INT 69
36219: PUSH
36220: LD_INT 39
36222: PUSH
36223: LD_INT 34
36225: PUSH
36226: LD_INT 40
36228: PUSH
36229: LD_INT 48
36231: PUSH
36232: LD_INT 49
36234: PUSH
36235: LD_INT 50
36237: PUSH
36238: LD_INT 51
36240: PUSH
36241: LD_INT 52
36243: PUSH
36244: LD_INT 53
36246: PUSH
36247: LD_INT 54
36249: PUSH
36250: LD_INT 55
36252: PUSH
36253: LD_INT 56
36255: PUSH
36256: LD_INT 57
36258: PUSH
36259: LD_INT 58
36261: PUSH
36262: LD_INT 59
36264: PUSH
36265: LD_INT 60
36267: PUSH
36268: LD_INT 61
36270: PUSH
36271: LD_INT 62
36273: PUSH
36274: LD_INT 80
36276: PUSH
36277: LD_INT 82
36279: PUSH
36280: LD_INT 83
36282: PUSH
36283: LD_INT 84
36285: PUSH
36286: LD_INT 85
36288: PUSH
36289: LD_INT 86
36291: PUSH
36292: LD_INT 90
36294: PUSH
36295: LD_INT 93
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: ST_TO_ADDR
36353: GO 36836
36355: LD_INT 2
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36363
36361: GO 36597
36363: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
36364: LD_ADDR_VAR 0 4
36368: PUSH
36369: LD_INT 35
36371: PUSH
36372: LD_INT 45
36374: PUSH
36375: LD_INT 46
36377: PUSH
36378: LD_INT 47
36380: PUSH
36381: LD_INT 82
36383: PUSH
36384: LD_INT 83
36386: PUSH
36387: LD_INT 84
36389: PUSH
36390: LD_INT 85
36392: PUSH
36393: LD_INT 87
36395: PUSH
36396: LD_INT 70
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 11
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 4
36410: PUSH
36411: LD_INT 5
36413: PUSH
36414: LD_INT 6
36416: PUSH
36417: LD_INT 15
36419: PUSH
36420: LD_INT 18
36422: PUSH
36423: LD_INT 7
36425: PUSH
36426: LD_INT 17
36428: PUSH
36429: LD_INT 8
36431: PUSH
36432: LD_INT 20
36434: PUSH
36435: LD_INT 21
36437: PUSH
36438: LD_INT 22
36440: PUSH
36441: LD_INT 72
36443: PUSH
36444: LD_INT 26
36446: PUSH
36447: LD_INT 69
36449: PUSH
36450: LD_INT 39
36452: PUSH
36453: LD_INT 40
36455: PUSH
36456: LD_INT 41
36458: PUSH
36459: LD_INT 42
36461: PUSH
36462: LD_INT 43
36464: PUSH
36465: LD_INT 48
36467: PUSH
36468: LD_INT 49
36470: PUSH
36471: LD_INT 50
36473: PUSH
36474: LD_INT 51
36476: PUSH
36477: LD_INT 52
36479: PUSH
36480: LD_INT 53
36482: PUSH
36483: LD_INT 54
36485: PUSH
36486: LD_INT 55
36488: PUSH
36489: LD_INT 56
36491: PUSH
36492: LD_INT 60
36494: PUSH
36495: LD_INT 61
36497: PUSH
36498: LD_INT 62
36500: PUSH
36501: LD_INT 66
36503: PUSH
36504: LD_INT 67
36506: PUSH
36507: LD_INT 68
36509: PUSH
36510: LD_INT 81
36512: PUSH
36513: LD_INT 82
36515: PUSH
36516: LD_INT 83
36518: PUSH
36519: LD_INT 84
36521: PUSH
36522: LD_INT 85
36524: PUSH
36525: LD_INT 87
36527: PUSH
36528: LD_INT 88
36530: PUSH
36531: LD_INT 92
36533: PUSH
36534: LD_INT 94
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
36595: GO 36836
36597: LD_INT 3
36599: DOUBLE
36600: EQUAL
36601: IFTRUE 36605
36603: GO 36835
36605: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
36606: LD_ADDR_VAR 0 4
36610: PUSH
36611: LD_INT 46
36613: PUSH
36614: LD_INT 47
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: LD_INT 82
36625: PUSH
36626: LD_INT 83
36628: PUSH
36629: LD_INT 84
36631: PUSH
36632: LD_INT 85
36634: PUSH
36635: LD_INT 86
36637: PUSH
36638: LD_INT 11
36640: PUSH
36641: LD_INT 9
36643: PUSH
36644: LD_INT 20
36646: PUSH
36647: LD_INT 19
36649: PUSH
36650: LD_INT 21
36652: PUSH
36653: LD_INT 24
36655: PUSH
36656: LD_INT 22
36658: PUSH
36659: LD_INT 25
36661: PUSH
36662: LD_INT 28
36664: PUSH
36665: LD_INT 29
36667: PUSH
36668: LD_INT 30
36670: PUSH
36671: LD_INT 31
36673: PUSH
36674: LD_INT 37
36676: PUSH
36677: LD_INT 38
36679: PUSH
36680: LD_INT 32
36682: PUSH
36683: LD_INT 27
36685: PUSH
36686: LD_INT 33
36688: PUSH
36689: LD_INT 69
36691: PUSH
36692: LD_INT 39
36694: PUSH
36695: LD_INT 34
36697: PUSH
36698: LD_INT 40
36700: PUSH
36701: LD_INT 71
36703: PUSH
36704: LD_INT 23
36706: PUSH
36707: LD_INT 44
36709: PUSH
36710: LD_INT 48
36712: PUSH
36713: LD_INT 49
36715: PUSH
36716: LD_INT 50
36718: PUSH
36719: LD_INT 51
36721: PUSH
36722: LD_INT 52
36724: PUSH
36725: LD_INT 53
36727: PUSH
36728: LD_INT 54
36730: PUSH
36731: LD_INT 55
36733: PUSH
36734: LD_INT 56
36736: PUSH
36737: LD_INT 57
36739: PUSH
36740: LD_INT 58
36742: PUSH
36743: LD_INT 59
36745: PUSH
36746: LD_INT 63
36748: PUSH
36749: LD_INT 64
36751: PUSH
36752: LD_INT 65
36754: PUSH
36755: LD_INT 82
36757: PUSH
36758: LD_INT 83
36760: PUSH
36761: LD_INT 84
36763: PUSH
36764: LD_INT 85
36766: PUSH
36767: LD_INT 86
36769: PUSH
36770: LD_INT 89
36772: PUSH
36773: LD_INT 91
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
36833: GO 36836
36835: POP
// if state > - 1 and state < 3 then
36836: LD_VAR 0 3
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: GREATER
36845: IFFALSE 36857
36847: PUSH
36848: LD_VAR 0 3
36852: PUSH
36853: LD_INT 3
36855: LESS
36856: AND
36857: IFFALSE 36914
// for i in result do
36859: LD_ADDR_VAR 0 5
36863: PUSH
36864: LD_VAR 0 4
36868: PUSH
36869: FOR_IN
36870: IFFALSE 36912
// if GetTech ( i , side ) <> state then
36872: LD_VAR 0 5
36876: PPUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 321
36886: PUSH
36887: LD_VAR 0 3
36891: NONEQUAL
36892: IFFALSE 36910
// result := result diff i ;
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: LD_VAR 0 4
36903: PUSH
36904: LD_VAR 0 5
36908: DIFF
36909: ST_TO_ADDR
36910: GO 36869
36912: POP
36913: POP
// end ;
36914: LD_VAR 0 4
36918: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36919: LD_INT 0
36921: PPUSH
36922: PPUSH
36923: PPUSH
// result := true ;
36924: LD_ADDR_VAR 0 3
36928: PUSH
36929: LD_INT 1
36931: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36932: LD_ADDR_VAR 0 5
36936: PUSH
36937: LD_VAR 0 2
36941: PPUSH
36942: CALL_OW 480
36946: ST_TO_ADDR
// if not tmp then
36947: LD_VAR 0 5
36951: NOT
36952: IFFALSE 36956
// exit ;
36954: GO 37005
// for i in tmp do
36956: LD_ADDR_VAR 0 4
36960: PUSH
36961: LD_VAR 0 5
36965: PUSH
36966: FOR_IN
36967: IFFALSE 37003
// if GetTech ( i , side ) <> state_researched then
36969: LD_VAR 0 4
36973: PPUSH
36974: LD_VAR 0 1
36978: PPUSH
36979: CALL_OW 321
36983: PUSH
36984: LD_INT 2
36986: NONEQUAL
36987: IFFALSE 37001
// begin result := false ;
36989: LD_ADDR_VAR 0 3
36993: PUSH
36994: LD_INT 0
36996: ST_TO_ADDR
// exit ;
36997: POP
36998: POP
36999: GO 37005
// end ;
37001: GO 36966
37003: POP
37004: POP
// end ;
37005: LD_VAR 0 3
37009: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37010: LD_INT 0
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37025: LD_VAR 0 1
37029: NOT
37030: IFTRUE 37047
37032: PUSH
37033: LD_VAR 0 1
37037: PPUSH
37038: CALL_OW 257
37042: PUSH
37043: LD_INT 9
37045: NONEQUAL
37046: OR
37047: IFFALSE 37051
// exit ;
37049: GO 37630
// side := GetSide ( unit ) ;
37051: LD_ADDR_VAR 0 9
37055: PUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: CALL_OW 255
37065: ST_TO_ADDR
// tech_space := tech_spacanom ;
37066: LD_ADDR_VAR 0 12
37070: PUSH
37071: LD_INT 29
37073: ST_TO_ADDR
// tech_time := tech_taurad ;
37074: LD_ADDR_VAR 0 13
37078: PUSH
37079: LD_INT 28
37081: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37082: LD_ADDR_VAR 0 11
37086: PUSH
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 310
37096: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37097: LD_VAR 0 11
37101: PPUSH
37102: CALL_OW 247
37106: PUSH
37107: LD_INT 2
37109: EQUAL
37110: IFFALSE 37114
// exit ;
37112: GO 37630
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37114: LD_ADDR_VAR 0 8
37118: PUSH
37119: LD_INT 81
37121: PUSH
37122: LD_VAR 0 9
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: LD_INT 21
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 69
37156: ST_TO_ADDR
// if not tmp then
37157: LD_VAR 0 8
37161: NOT
37162: IFFALSE 37166
// exit ;
37164: GO 37630
// if in_unit then
37166: LD_VAR 0 11
37170: IFFALSE 37194
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37172: LD_ADDR_VAR 0 10
37176: PUSH
37177: LD_VAR 0 8
37181: PPUSH
37182: LD_VAR 0 11
37186: PPUSH
37187: CALL_OW 74
37191: ST_TO_ADDR
37192: GO 37214
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37194: LD_ADDR_VAR 0 10
37198: PUSH
37199: LD_VAR 0 8
37203: PPUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 74
37213: ST_TO_ADDR
// if not enemy then
37214: LD_VAR 0 10
37218: NOT
37219: IFFALSE 37223
// exit ;
37221: GO 37630
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37223: LD_VAR 0 11
37227: IFFALSE 37249
37229: PUSH
37230: LD_VAR 0 11
37234: PPUSH
37235: LD_VAR 0 10
37239: PPUSH
37240: CALL_OW 296
37244: PUSH
37245: LD_INT 13
37247: GREATER
37248: AND
37249: IFTRUE 37271
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_VAR 0 10
37261: PPUSH
37262: CALL_OW 296
37266: PUSH
37267: LD_INT 12
37269: GREATER
37270: OR
37271: IFFALSE 37275
// exit ;
37273: GO 37630
// missile := [ 1 ] ;
37275: LD_ADDR_VAR 0 14
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37286: LD_VAR 0 9
37290: PPUSH
37291: LD_VAR 0 12
37295: PPUSH
37296: CALL_OW 325
37300: IFFALSE 37329
// missile := Replace ( missile , missile + 1 , 2 ) ;
37302: LD_ADDR_VAR 0 14
37306: PUSH
37307: LD_VAR 0 14
37311: PPUSH
37312: LD_VAR 0 14
37316: PUSH
37317: LD_INT 1
37319: PLUS
37320: PPUSH
37321: LD_INT 2
37323: PPUSH
37324: CALL_OW 1
37328: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37329: LD_VAR 0 9
37333: PPUSH
37334: LD_VAR 0 13
37338: PPUSH
37339: CALL_OW 325
37343: IFFALSE 37367
37345: PUSH
37346: LD_VAR 0 10
37350: PPUSH
37351: CALL_OW 255
37355: PPUSH
37356: LD_VAR 0 13
37360: PPUSH
37361: CALL_OW 325
37365: NOT
37366: AND
37367: IFFALSE 37396
// missile := Replace ( missile , missile + 1 , 3 ) ;
37369: LD_ADDR_VAR 0 14
37373: PUSH
37374: LD_VAR 0 14
37378: PPUSH
37379: LD_VAR 0 14
37383: PUSH
37384: LD_INT 1
37386: PLUS
37387: PPUSH
37388: LD_INT 3
37390: PPUSH
37391: CALL_OW 1
37395: ST_TO_ADDR
// if missile < 2 then
37396: LD_VAR 0 14
37400: PUSH
37401: LD_INT 2
37403: LESS
37404: IFFALSE 37408
// exit ;
37406: GO 37630
// x := GetX ( enemy ) ;
37408: LD_ADDR_VAR 0 4
37412: PUSH
37413: LD_VAR 0 10
37417: PPUSH
37418: CALL_OW 250
37422: ST_TO_ADDR
// y := GetY ( enemy ) ;
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_VAR 0 10
37432: PPUSH
37433: CALL_OW 251
37437: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37438: LD_ADDR_VAR 0 6
37442: PUSH
37443: LD_VAR 0 4
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PPUSH
37452: LD_INT 1
37454: PPUSH
37455: CALL_OW 12
37459: PLUS
37460: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37461: LD_ADDR_VAR 0 7
37465: PUSH
37466: LD_VAR 0 5
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PPUSH
37475: LD_INT 1
37477: PPUSH
37478: CALL_OW 12
37482: PLUS
37483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37484: LD_VAR 0 6
37488: PPUSH
37489: LD_VAR 0 7
37493: PPUSH
37494: CALL_OW 488
37498: NOT
37499: IFFALSE 37521
// begin _x := x ;
37501: LD_ADDR_VAR 0 6
37505: PUSH
37506: LD_VAR 0 4
37510: ST_TO_ADDR
// _y := y ;
37511: LD_ADDR_VAR 0 7
37515: PUSH
37516: LD_VAR 0 5
37520: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 1
37528: PPUSH
37529: LD_VAR 0 14
37533: PPUSH
37534: CALL_OW 12
37538: ST_TO_ADDR
// case i of 1 :
37539: LD_VAR 0 3
37543: PUSH
37544: LD_INT 1
37546: DOUBLE
37547: EQUAL
37548: IFTRUE 37552
37550: GO 37569
37552: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37553: LD_VAR 0 1
37557: PPUSH
37558: LD_VAR 0 10
37562: PPUSH
37563: CALL_OW 115
37567: GO 37630
37569: LD_INT 2
37571: DOUBLE
37572: EQUAL
37573: IFTRUE 37577
37575: GO 37599
37577: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37578: LD_VAR 0 1
37582: PPUSH
37583: LD_VAR 0 6
37587: PPUSH
37588: LD_VAR 0 7
37592: PPUSH
37593: CALL_OW 153
37597: GO 37630
37599: LD_INT 3
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37607
37605: GO 37629
37607: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37608: LD_VAR 0 1
37612: PPUSH
37613: LD_VAR 0 6
37617: PPUSH
37618: LD_VAR 0 7
37622: PPUSH
37623: CALL_OW 154
37627: GO 37630
37629: POP
// end ;
37630: LD_VAR 0 2
37634: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37635: LD_INT 0
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
// if not unit or not building then
37643: LD_VAR 0 1
37647: NOT
37648: IFTRUE 37657
37650: PUSH
37651: LD_VAR 0 2
37655: NOT
37656: OR
37657: IFFALSE 37661
// exit ;
37659: GO 37819
// x := GetX ( building ) ;
37661: LD_ADDR_VAR 0 5
37665: PUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: CALL_OW 250
37675: ST_TO_ADDR
// y := GetY ( building ) ;
37676: LD_ADDR_VAR 0 6
37680: PUSH
37681: LD_VAR 0 2
37685: PPUSH
37686: CALL_OW 251
37690: ST_TO_ADDR
// for i := 0 to 5 do
37691: LD_ADDR_VAR 0 4
37695: PUSH
37696: DOUBLE
37697: LD_INT 0
37699: DEC
37700: ST_TO_ADDR
37701: LD_INT 5
37703: PUSH
37704: FOR_TO
37705: IFFALSE 37817
// begin _x := ShiftX ( x , i , 3 ) ;
37707: LD_ADDR_VAR 0 7
37711: PUSH
37712: LD_VAR 0 5
37716: PPUSH
37717: LD_VAR 0 4
37721: PPUSH
37722: LD_INT 3
37724: PPUSH
37725: CALL_OW 272
37729: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37730: LD_ADDR_VAR 0 8
37734: PUSH
37735: LD_VAR 0 6
37739: PPUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: LD_INT 3
37747: PPUSH
37748: CALL_OW 273
37752: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37753: LD_VAR 0 7
37757: PPUSH
37758: LD_VAR 0 8
37762: PPUSH
37763: CALL_OW 488
37767: NOT
37768: IFFALSE 37772
// continue ;
37770: GO 37704
// if HexInfo ( _x , _y ) = 0 then
37772: LD_VAR 0 7
37776: PPUSH
37777: LD_VAR 0 8
37781: PPUSH
37782: CALL_OW 428
37786: PUSH
37787: LD_INT 0
37789: EQUAL
37790: IFFALSE 37815
// begin ComMoveXY ( unit , _x , _y ) ;
37792: LD_VAR 0 1
37796: PPUSH
37797: LD_VAR 0 7
37801: PPUSH
37802: LD_VAR 0 8
37806: PPUSH
37807: CALL_OW 111
// exit ;
37811: POP
37812: POP
37813: GO 37819
// end ; end ;
37815: GO 37704
37817: POP
37818: POP
// end ;
37819: LD_VAR 0 3
37823: RET
// export function ScanBase ( side , base_area ) ; begin
37824: LD_INT 0
37826: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37827: LD_ADDR_VAR 0 3
37831: PUSH
37832: LD_VAR 0 2
37836: PPUSH
37837: LD_INT 81
37839: PUSH
37840: LD_VAR 0 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PPUSH
37849: CALL_OW 70
37853: ST_TO_ADDR
// end ;
37854: LD_VAR 0 3
37858: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37859: LD_INT 0
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
// result := false ;
37865: LD_ADDR_VAR 0 2
37869: PUSH
37870: LD_INT 0
37872: ST_TO_ADDR
// side := GetSide ( unit ) ;
37873: LD_ADDR_VAR 0 3
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 255
37887: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37888: LD_ADDR_VAR 0 4
37892: PUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 248
37902: ST_TO_ADDR
// case nat of 1 :
37903: LD_VAR 0 4
37907: PUSH
37908: LD_INT 1
37910: DOUBLE
37911: EQUAL
37912: IFTRUE 37916
37914: GO 37927
37916: POP
// tech := tech_lassight ; 2 :
37917: LD_ADDR_VAR 0 5
37921: PUSH
37922: LD_INT 12
37924: ST_TO_ADDR
37925: GO 37966
37927: LD_INT 2
37929: DOUBLE
37930: EQUAL
37931: IFTRUE 37935
37933: GO 37946
37935: POP
// tech := tech_mortar ; 3 :
37936: LD_ADDR_VAR 0 5
37940: PUSH
37941: LD_INT 41
37943: ST_TO_ADDR
37944: GO 37966
37946: LD_INT 3
37948: DOUBLE
37949: EQUAL
37950: IFTRUE 37954
37952: GO 37965
37954: POP
// tech := tech_bazooka ; end ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_INT 44
37962: ST_TO_ADDR
37963: GO 37966
37965: POP
// if Researched ( side , tech ) then
37966: LD_VAR 0 3
37970: PPUSH
37971: LD_VAR 0 5
37975: PPUSH
37976: CALL_OW 325
37980: IFFALSE 38007
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37982: LD_ADDR_VAR 0 2
37986: PUSH
37987: LD_INT 5
37989: PUSH
37990: LD_INT 8
37992: PUSH
37993: LD_INT 9
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: LD_VAR 0 4
38005: ARRAY
38006: ST_TO_ADDR
// end ;
38007: LD_VAR 0 2
38011: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
// if not mines then
38017: LD_VAR 0 2
38021: NOT
38022: IFFALSE 38026
// exit ;
38024: GO 38170
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38026: LD_ADDR_VAR 0 5
38030: PUSH
38031: LD_INT 81
38033: PUSH
38034: LD_VAR 0 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: LD_INT 21
38048: PUSH
38049: LD_INT 3
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PPUSH
38064: CALL_OW 69
38068: ST_TO_ADDR
// for i in mines do
38069: LD_ADDR_VAR 0 4
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: FOR_IN
38080: IFFALSE 38168
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38082: LD_VAR 0 4
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PPUSH
38091: LD_VAR 0 4
38095: PUSH
38096: LD_INT 2
38098: ARRAY
38099: PPUSH
38100: CALL_OW 458
38104: NOT
38105: IFFALSE 38109
// continue ;
38107: GO 38079
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38109: LD_VAR 0 4
38113: PUSH
38114: LD_INT 1
38116: ARRAY
38117: PPUSH
38118: LD_VAR 0 4
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: PPUSH
38127: CALL_OW 428
38131: PUSH
38132: LD_VAR 0 5
38136: IN
38137: IFFALSE 38166
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38139: LD_VAR 0 4
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 4
38152: PUSH
38153: LD_INT 2
38155: ARRAY
38156: PPUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 456
// end ;
38166: GO 38079
38168: POP
38169: POP
// end ;
38170: LD_VAR 0 3
38174: RET
// export function Count ( array ) ; begin
38175: LD_INT 0
38177: PPUSH
// result := array + 0 ;
38178: LD_ADDR_VAR 0 2
38182: PUSH
38183: LD_VAR 0 1
38187: PUSH
38188: LD_INT 0
38190: PLUS
38191: ST_TO_ADDR
// end ;
38192: LD_VAR 0 2
38196: RET
// export function IsEmpty ( building ) ; begin
38197: LD_INT 0
38199: PPUSH
// if not building then
38200: LD_VAR 0 1
38204: NOT
38205: IFFALSE 38209
// exit ;
38207: GO 38252
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38209: LD_ADDR_VAR 0 2
38213: PUSH
38214: LD_VAR 0 1
38218: PUSH
38219: LD_INT 22
38221: PUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: CALL_OW 255
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 58
38238: PUSH
38239: EMPTY
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PPUSH
38246: CALL_OW 69
38250: IN
38251: ST_TO_ADDR
// end ;
38252: LD_VAR 0 2
38256: RET
// export function IsNotFull ( building ) ; var places ; begin
38257: LD_INT 0
38259: PPUSH
38260: PPUSH
// if not building then
38261: LD_VAR 0 1
38265: NOT
38266: IFFALSE 38270
// exit ;
38268: GO 38298
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38270: LD_ADDR_VAR 0 2
38274: PUSH
38275: LD_VAR 0 1
38279: PPUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 62
38285: PUSH
38286: EMPTY
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PPUSH
38293: CALL_OW 72
38297: ST_TO_ADDR
// end ;
38298: LD_VAR 0 2
38302: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38303: LD_INT 0
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
// tmp := [ ] ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: EMPTY
38315: ST_TO_ADDR
// list := [ ] ;
38316: LD_ADDR_VAR 0 5
38320: PUSH
38321: EMPTY
38322: ST_TO_ADDR
// for i = 16 to 25 do
38323: LD_ADDR_VAR 0 4
38327: PUSH
38328: DOUBLE
38329: LD_INT 16
38331: DEC
38332: ST_TO_ADDR
38333: LD_INT 25
38335: PUSH
38336: FOR_TO
38337: IFFALSE 38410
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_VAR 0 3
38348: PUSH
38349: LD_INT 22
38351: PUSH
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 255
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 91
38368: PUSH
38369: LD_VAR 0 1
38373: PUSH
38374: LD_INT 6
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 30
38384: PUSH
38385: LD_VAR 0 4
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: PPUSH
38402: CALL_OW 69
38406: ADD
38407: ST_TO_ADDR
38408: GO 38336
38410: POP
38411: POP
// for i = 1 to tmp do
38412: LD_ADDR_VAR 0 4
38416: PUSH
38417: DOUBLE
38418: LD_INT 1
38420: DEC
38421: ST_TO_ADDR
38422: LD_VAR 0 3
38426: PUSH
38427: FOR_TO
38428: IFFALSE 38516
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38430: LD_ADDR_VAR 0 5
38434: PUSH
38435: LD_VAR 0 5
38439: PUSH
38440: LD_VAR 0 3
38444: PUSH
38445: LD_VAR 0 4
38449: ARRAY
38450: PPUSH
38451: CALL_OW 266
38455: PUSH
38456: LD_VAR 0 3
38460: PUSH
38461: LD_VAR 0 4
38465: ARRAY
38466: PPUSH
38467: CALL_OW 250
38471: PUSH
38472: LD_VAR 0 3
38476: PUSH
38477: LD_VAR 0 4
38481: ARRAY
38482: PPUSH
38483: CALL_OW 251
38487: PUSH
38488: LD_VAR 0 3
38492: PUSH
38493: LD_VAR 0 4
38497: ARRAY
38498: PPUSH
38499: CALL_OW 254
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: ADD
38513: ST_TO_ADDR
38514: GO 38427
38516: POP
38517: POP
// result := list ;
38518: LD_ADDR_VAR 0 2
38522: PUSH
38523: LD_VAR 0 5
38527: ST_TO_ADDR
// end ;
38528: LD_VAR 0 2
38532: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38533: LD_INT 0
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
// if not factory then
38542: LD_VAR 0 1
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 39154
// if control = control_apeman then
38551: LD_VAR 0 4
38555: PUSH
38556: LD_INT 5
38558: EQUAL
38559: IFFALSE 38668
// begin tmp := UnitsInside ( factory ) ;
38561: LD_ADDR_VAR 0 8
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 313
38575: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38576: LD_VAR 0 8
38580: PPUSH
38581: LD_INT 25
38583: PUSH
38584: LD_INT 12
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PPUSH
38591: CALL_OW 72
38595: NOT
38596: IFFALSE 38606
// control := control_manual ;
38598: LD_ADDR_VAR 0 4
38602: PUSH
38603: LD_INT 1
38605: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL 38303 0 1
38620: ST_TO_ADDR
// if tmp then
38621: LD_VAR 0 8
38625: IFFALSE 38668
// begin for i in tmp do
38627: LD_ADDR_VAR 0 7
38631: PUSH
38632: LD_VAR 0 8
38636: PUSH
38637: FOR_IN
38638: IFFALSE 38666
// if i [ 1 ] = b_ext_radio then
38640: LD_VAR 0 7
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PUSH
38649: LD_INT 22
38651: EQUAL
38652: IFFALSE 38664
// begin control := control_remote ;
38654: LD_ADDR_VAR 0 4
38658: PUSH
38659: LD_INT 2
38661: ST_TO_ADDR
// break ;
38662: GO 38666
// end ;
38664: GO 38637
38666: POP
38667: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38668: LD_VAR 0 1
38672: PPUSH
38673: LD_VAR 0 2
38677: PPUSH
38678: LD_VAR 0 3
38682: PPUSH
38683: LD_VAR 0 4
38687: PPUSH
38688: LD_VAR 0 5
38692: PPUSH
38693: CALL_OW 448
38697: IFFALSE 38732
// begin result := [ chassis , engine , control , weapon ] ;
38699: LD_ADDR_VAR 0 6
38703: PUSH
38704: LD_VAR 0 2
38708: PUSH
38709: LD_VAR 0 3
38713: PUSH
38714: LD_VAR 0 4
38718: PUSH
38719: LD_VAR 0 5
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// exit ;
38730: GO 39154
// end ; _chassis := AvailableChassisList ( factory ) ;
38732: LD_ADDR_VAR 0 9
38736: PUSH
38737: LD_VAR 0 1
38741: PPUSH
38742: CALL_OW 475
38746: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38747: LD_ADDR_VAR 0 11
38751: PUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: CALL_OW 476
38761: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38762: LD_ADDR_VAR 0 12
38766: PUSH
38767: LD_VAR 0 1
38771: PPUSH
38772: CALL_OW 477
38776: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38777: LD_ADDR_VAR 0 10
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: CALL_OW 478
38791: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38792: LD_VAR 0 9
38796: NOT
38797: IFTRUE 38806
38799: PUSH
38800: LD_VAR 0 11
38804: NOT
38805: OR
38806: IFTRUE 38815
38808: PUSH
38809: LD_VAR 0 12
38813: NOT
38814: OR
38815: IFTRUE 38824
38817: PUSH
38818: LD_VAR 0 10
38822: NOT
38823: OR
38824: IFFALSE 38859
// begin result := [ chassis , engine , control , weapon ] ;
38826: LD_ADDR_VAR 0 6
38830: PUSH
38831: LD_VAR 0 2
38835: PUSH
38836: LD_VAR 0 3
38840: PUSH
38841: LD_VAR 0 4
38845: PUSH
38846: LD_VAR 0 5
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: ST_TO_ADDR
// exit ;
38857: GO 39154
// end ; if not chassis in _chassis then
38859: LD_VAR 0 2
38863: PUSH
38864: LD_VAR 0 9
38868: IN
38869: NOT
38870: IFFALSE 38896
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38872: LD_ADDR_VAR 0 2
38876: PUSH
38877: LD_VAR 0 9
38881: PUSH
38882: LD_INT 1
38884: PPUSH
38885: LD_VAR 0 9
38889: PPUSH
38890: CALL_OW 12
38894: ARRAY
38895: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38896: LD_VAR 0 2
38900: PPUSH
38901: LD_VAR 0 3
38905: PPUSH
38906: CALL 39159 0 2
38910: NOT
38911: IFFALSE 38972
// repeat engine := _engine [ 1 ] ;
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_VAR 0 11
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38927: LD_ADDR_VAR 0 11
38931: PUSH
38932: LD_VAR 0 11
38936: PPUSH
38937: LD_INT 1
38939: PPUSH
38940: CALL_OW 3
38944: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_VAR 0 3
38954: PPUSH
38955: CALL 39159 0 2
38959: IFTRUE 38970
38961: PUSH
38962: LD_VAR 0 11
38966: PUSH
38967: EMPTY
38968: EQUAL
38969: OR
38970: IFFALSE 38913
// if not control in _control then
38972: LD_VAR 0 4
38976: PUSH
38977: LD_VAR 0 12
38981: IN
38982: NOT
38983: IFFALSE 39009
// control := _control [ rand ( 1 , _control ) ] ;
38985: LD_ADDR_VAR 0 4
38989: PUSH
38990: LD_VAR 0 12
38994: PUSH
38995: LD_INT 1
38997: PPUSH
38998: LD_VAR 0 12
39002: PPUSH
39003: CALL_OW 12
39007: ARRAY
39008: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39009: LD_VAR 0 2
39013: PPUSH
39014: LD_VAR 0 5
39018: PPUSH
39019: CALL 39381 0 2
39023: NOT
39024: IFFALSE 39085
// repeat weapon := _weapon [ 1 ] ;
39026: LD_ADDR_VAR 0 5
39030: PUSH
39031: LD_VAR 0 10
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39040: LD_ADDR_VAR 0 10
39044: PUSH
39045: LD_VAR 0 10
39049: PPUSH
39050: LD_INT 1
39052: PPUSH
39053: CALL_OW 3
39057: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39058: LD_VAR 0 2
39062: PPUSH
39063: LD_VAR 0 5
39067: PPUSH
39068: CALL 39381 0 2
39072: IFTRUE 39083
39074: PUSH
39075: LD_VAR 0 10
39079: PUSH
39080: EMPTY
39081: EQUAL
39082: OR
39083: IFFALSE 39026
// result := [ ] ;
39085: LD_ADDR_VAR 0 6
39089: PUSH
39090: EMPTY
39091: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_VAR 0 2
39101: PPUSH
39102: LD_VAR 0 3
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: LD_VAR 0 5
39116: PPUSH
39117: CALL_OW 448
39121: IFFALSE 39154
// result := [ chassis , engine , control , weapon ] ;
39123: LD_ADDR_VAR 0 6
39127: PUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_VAR 0 3
39137: PUSH
39138: LD_VAR 0 4
39142: PUSH
39143: LD_VAR 0 5
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// end ;
39154: LD_VAR 0 6
39158: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39159: LD_INT 0
39161: PPUSH
// if not chassis or not engine then
39162: LD_VAR 0 1
39166: NOT
39167: IFTRUE 39176
39169: PUSH
39170: LD_VAR 0 2
39174: NOT
39175: OR
39176: IFFALSE 39180
// exit ;
39178: GO 39376
// case engine of engine_solar :
39180: LD_VAR 0 2
39184: PUSH
39185: LD_INT 2
39187: DOUBLE
39188: EQUAL
39189: IFTRUE 39193
39191: GO 39231
39193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39194: LD_ADDR_VAR 0 3
39198: PUSH
39199: LD_INT 11
39201: PUSH
39202: LD_INT 12
39204: PUSH
39205: LD_INT 13
39207: PUSH
39208: LD_INT 14
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
39229: GO 39360
39231: LD_INT 1
39233: DOUBLE
39234: EQUAL
39235: IFTRUE 39239
39237: GO 39301
39239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39240: LD_ADDR_VAR 0 3
39244: PUSH
39245: LD_INT 11
39247: PUSH
39248: LD_INT 12
39250: PUSH
39251: LD_INT 13
39253: PUSH
39254: LD_INT 14
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: LD_INT 21
39274: PUSH
39275: LD_INT 23
39277: PUSH
39278: LD_INT 22
39280: PUSH
39281: LD_INT 24
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
39299: GO 39360
39301: LD_INT 3
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39359
39309: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39310: LD_ADDR_VAR 0 3
39314: PUSH
39315: LD_INT 13
39317: PUSH
39318: LD_INT 14
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: LD_INT 4
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 21
39335: PUSH
39336: LD_INT 22
39338: PUSH
39339: LD_INT 23
39341: PUSH
39342: LD_INT 24
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
39357: GO 39360
39359: POP
// result := ( chassis in result ) ;
39360: LD_ADDR_VAR 0 3
39364: PUSH
39365: LD_VAR 0 1
39369: PUSH
39370: LD_VAR 0 3
39374: IN
39375: ST_TO_ADDR
// end ;
39376: LD_VAR 0 3
39380: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39381: LD_INT 0
39383: PPUSH
// if not chassis or not weapon then
39384: LD_VAR 0 1
39388: NOT
39389: IFTRUE 39398
39391: PUSH
39392: LD_VAR 0 2
39396: NOT
39397: OR
39398: IFFALSE 39402
// exit ;
39400: GO 40496
// case weapon of us_machine_gun :
39402: LD_VAR 0 2
39406: PUSH
39407: LD_INT 2
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39415
39413: GO 39445
39415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39416: LD_ADDR_VAR 0 3
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 4
39432: PUSH
39433: LD_INT 5
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: ST_TO_ADDR
39443: GO 40480
39445: LD_INT 3
39447: DOUBLE
39448: EQUAL
39449: IFTRUE 39453
39451: GO 39483
39453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39454: LD_ADDR_VAR 0 3
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 4
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
39481: GO 40480
39483: LD_INT 11
39485: DOUBLE
39486: EQUAL
39487: IFTRUE 39491
39489: GO 39521
39491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39492: LD_ADDR_VAR 0 3
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 4
39508: PUSH
39509: LD_INT 5
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
39519: GO 40480
39521: LD_INT 4
39523: DOUBLE
39524: EQUAL
39525: IFTRUE 39529
39527: GO 39555
39529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39530: LD_ADDR_VAR 0 3
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: LD_INT 4
39543: PUSH
39544: LD_INT 5
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
39553: GO 40480
39555: LD_INT 5
39557: DOUBLE
39558: EQUAL
39559: IFTRUE 39563
39561: GO 39589
39563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39564: LD_ADDR_VAR 0 3
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: LD_INT 4
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: ST_TO_ADDR
39587: GO 40480
39589: LD_INT 9
39591: DOUBLE
39592: EQUAL
39593: IFTRUE 39597
39595: GO 39623
39597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39598: LD_ADDR_VAR 0 3
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
39621: GO 40480
39623: LD_INT 7
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39657
39631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39632: LD_ADDR_VAR 0 3
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 3
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: ST_TO_ADDR
39655: GO 40480
39657: LD_INT 12
39659: DOUBLE
39660: EQUAL
39661: IFTRUE 39665
39663: GO 39691
39665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39666: LD_ADDR_VAR 0 3
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: LD_INT 4
39679: PUSH
39680: LD_INT 5
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: ST_TO_ADDR
39689: GO 40480
39691: LD_INT 13
39693: DOUBLE
39694: EQUAL
39695: IFTRUE 39699
39697: GO 39725
39699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: LD_INT 4
39713: PUSH
39714: LD_INT 5
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
39723: GO 40480
39725: LD_INT 14
39727: DOUBLE
39728: EQUAL
39729: IFTRUE 39733
39731: GO 39751
39733: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39734: LD_ADDR_VAR 0 3
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: LD_INT 5
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: ST_TO_ADDR
39749: GO 40480
39751: LD_INT 6
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39777
39759: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 4
39767: PUSH
39768: LD_INT 5
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: ST_TO_ADDR
39775: GO 40480
39777: LD_INT 10
39779: DOUBLE
39780: EQUAL
39781: IFTRUE 39785
39783: GO 39803
39785: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: LD_INT 5
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: ST_TO_ADDR
39801: GO 40480
39803: LD_INT 22
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39811
39809: GO 39837
39811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39812: LD_ADDR_VAR 0 3
39816: PUSH
39817: LD_INT 11
39819: PUSH
39820: LD_INT 12
39822: PUSH
39823: LD_INT 13
39825: PUSH
39826: LD_INT 14
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
39835: GO 40480
39837: LD_INT 23
39839: DOUBLE
39840: EQUAL
39841: IFTRUE 39845
39843: GO 39871
39845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_INT 11
39853: PUSH
39854: LD_INT 12
39856: PUSH
39857: LD_INT 13
39859: PUSH
39860: LD_INT 14
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: ST_TO_ADDR
39869: GO 40480
39871: LD_INT 24
39873: DOUBLE
39874: EQUAL
39875: IFTRUE 39879
39877: GO 39905
39879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_INT 11
39887: PUSH
39888: LD_INT 12
39890: PUSH
39891: LD_INT 13
39893: PUSH
39894: LD_INT 14
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
39903: GO 40480
39905: LD_INT 30
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39939
39913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 11
39921: PUSH
39922: LD_INT 12
39924: PUSH
39925: LD_INT 13
39927: PUSH
39928: LD_INT 14
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
39937: GO 40480
39939: LD_INT 25
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39947
39945: GO 39965
39947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 13
39955: PUSH
39956: LD_INT 14
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 40480
39965: LD_INT 27
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 39991
39973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 13
39981: PUSH
39982: LD_INT 14
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40480
39991: LD_INT 92
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40025
39999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 11
40007: PUSH
40008: LD_INT 12
40010: PUSH
40011: LD_INT 13
40013: PUSH
40014: LD_INT 14
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
40023: GO 40480
40025: LD_INT 28
40027: DOUBLE
40028: EQUAL
40029: IFTRUE 40033
40031: GO 40051
40033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40034: LD_ADDR_VAR 0 3
40038: PUSH
40039: LD_INT 13
40041: PUSH
40042: LD_INT 14
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: ST_TO_ADDR
40049: GO 40480
40051: LD_INT 29
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40077
40059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 13
40067: PUSH
40068: LD_INT 14
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: ST_TO_ADDR
40075: GO 40480
40077: LD_INT 31
40079: DOUBLE
40080: EQUAL
40081: IFTRUE 40085
40083: GO 40103
40085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40086: LD_ADDR_VAR 0 3
40090: PUSH
40091: LD_INT 13
40093: PUSH
40094: LD_INT 14
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: ST_TO_ADDR
40101: GO 40480
40103: LD_INT 26
40105: DOUBLE
40106: EQUAL
40107: IFTRUE 40111
40109: GO 40129
40111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40112: LD_ADDR_VAR 0 3
40116: PUSH
40117: LD_INT 13
40119: PUSH
40120: LD_INT 14
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: ST_TO_ADDR
40127: GO 40480
40129: LD_INT 42
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40163
40137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 21
40145: PUSH
40146: LD_INT 22
40148: PUSH
40149: LD_INT 23
40151: PUSH
40152: LD_INT 24
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
40161: GO 40480
40163: LD_INT 43
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40171
40169: GO 40197
40171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_INT 21
40179: PUSH
40180: LD_INT 22
40182: PUSH
40183: LD_INT 23
40185: PUSH
40186: LD_INT 24
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
40195: GO 40480
40197: LD_INT 44
40199: DOUBLE
40200: EQUAL
40201: IFTRUE 40205
40203: GO 40231
40205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40206: LD_ADDR_VAR 0 3
40210: PUSH
40211: LD_INT 21
40213: PUSH
40214: LD_INT 22
40216: PUSH
40217: LD_INT 23
40219: PUSH
40220: LD_INT 24
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: ST_TO_ADDR
40229: GO 40480
40231: LD_INT 45
40233: DOUBLE
40234: EQUAL
40235: IFTRUE 40239
40237: GO 40265
40239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40240: LD_ADDR_VAR 0 3
40244: PUSH
40245: LD_INT 21
40247: PUSH
40248: LD_INT 22
40250: PUSH
40251: LD_INT 23
40253: PUSH
40254: LD_INT 24
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: ST_TO_ADDR
40263: GO 40480
40265: LD_INT 49
40267: DOUBLE
40268: EQUAL
40269: IFTRUE 40273
40271: GO 40299
40273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40274: LD_ADDR_VAR 0 3
40278: PUSH
40279: LD_INT 21
40281: PUSH
40282: LD_INT 22
40284: PUSH
40285: LD_INT 23
40287: PUSH
40288: LD_INT 24
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
40297: GO 40480
40299: LD_INT 51
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 40333
40307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 21
40315: PUSH
40316: LD_INT 22
40318: PUSH
40319: LD_INT 23
40321: PUSH
40322: LD_INT 24
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
40331: GO 40480
40333: LD_INT 52
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40367
40341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 21
40349: PUSH
40350: LD_INT 22
40352: PUSH
40353: LD_INT 23
40355: PUSH
40356: LD_INT 24
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: ST_TO_ADDR
40365: GO 40480
40367: LD_INT 53
40369: DOUBLE
40370: EQUAL
40371: IFTRUE 40375
40373: GO 40393
40375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40376: LD_ADDR_VAR 0 3
40380: PUSH
40381: LD_INT 23
40383: PUSH
40384: LD_INT 24
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: ST_TO_ADDR
40391: GO 40480
40393: LD_INT 46
40395: DOUBLE
40396: EQUAL
40397: IFTRUE 40401
40399: GO 40419
40401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_INT 23
40409: PUSH
40410: LD_INT 24
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: ST_TO_ADDR
40417: GO 40480
40419: LD_INT 47
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40445
40427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_INT 23
40435: PUSH
40436: LD_INT 24
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: ST_TO_ADDR
40443: GO 40480
40445: LD_INT 98
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40453
40451: GO 40479
40453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40454: LD_ADDR_VAR 0 3
40458: PUSH
40459: LD_INT 21
40461: PUSH
40462: LD_INT 22
40464: PUSH
40465: LD_INT 23
40467: PUSH
40468: LD_INT 24
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
40477: GO 40480
40479: POP
// result := ( chassis in result ) ;
40480: LD_ADDR_VAR 0 3
40484: PUSH
40485: LD_VAR 0 1
40489: PUSH
40490: LD_VAR 0 3
40494: IN
40495: ST_TO_ADDR
// end ;
40496: LD_VAR 0 3
40500: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40501: LD_INT 0
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
// result := array ;
40510: LD_ADDR_VAR 0 5
40514: PUSH
40515: LD_VAR 0 1
40519: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40520: LD_VAR 0 1
40524: NOT
40525: IFTRUE 40534
40527: PUSH
40528: LD_VAR 0 2
40532: NOT
40533: OR
40534: IFTRUE 40543
40536: PUSH
40537: LD_VAR 0 3
40541: NOT
40542: OR
40543: IFTRUE 40557
40545: PUSH
40546: LD_VAR 0 2
40550: PUSH
40551: LD_VAR 0 1
40555: GREATER
40556: OR
40557: IFTRUE 40571
40559: PUSH
40560: LD_VAR 0 3
40564: PUSH
40565: LD_VAR 0 1
40569: GREATER
40570: OR
40571: IFFALSE 40575
// exit ;
40573: GO 40871
// if direction then
40575: LD_VAR 0 4
40579: IFFALSE 40643
// begin d := 1 ;
40581: LD_ADDR_VAR 0 9
40585: PUSH
40586: LD_INT 1
40588: ST_TO_ADDR
// if i_from > i_to then
40589: LD_VAR 0 2
40593: PUSH
40594: LD_VAR 0 3
40598: GREATER
40599: IFFALSE 40625
// length := ( array - i_from ) + i_to else
40601: LD_ADDR_VAR 0 11
40605: PUSH
40606: LD_VAR 0 1
40610: PUSH
40611: LD_VAR 0 2
40615: MINUS
40616: PUSH
40617: LD_VAR 0 3
40621: PLUS
40622: ST_TO_ADDR
40623: GO 40641
// length := i_to - i_from ;
40625: LD_ADDR_VAR 0 11
40629: PUSH
40630: LD_VAR 0 3
40634: PUSH
40635: LD_VAR 0 2
40639: MINUS
40640: ST_TO_ADDR
// end else
40641: GO 40704
// begin d := - 1 ;
40643: LD_ADDR_VAR 0 9
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: ST_TO_ADDR
// if i_from > i_to then
40652: LD_VAR 0 2
40656: PUSH
40657: LD_VAR 0 3
40661: GREATER
40662: IFFALSE 40682
// length := i_from - i_to else
40664: LD_ADDR_VAR 0 11
40668: PUSH
40669: LD_VAR 0 2
40673: PUSH
40674: LD_VAR 0 3
40678: MINUS
40679: ST_TO_ADDR
40680: GO 40704
// length := ( array - i_to ) + i_from ;
40682: LD_ADDR_VAR 0 11
40686: PUSH
40687: LD_VAR 0 1
40691: PUSH
40692: LD_VAR 0 3
40696: MINUS
40697: PUSH
40698: LD_VAR 0 2
40702: PLUS
40703: ST_TO_ADDR
// end ; if not length then
40704: LD_VAR 0 11
40708: NOT
40709: IFFALSE 40713
// exit ;
40711: GO 40871
// tmp := array ;
40713: LD_ADDR_VAR 0 10
40717: PUSH
40718: LD_VAR 0 1
40722: ST_TO_ADDR
// for i = 1 to length do
40723: LD_ADDR_VAR 0 6
40727: PUSH
40728: DOUBLE
40729: LD_INT 1
40731: DEC
40732: ST_TO_ADDR
40733: LD_VAR 0 11
40737: PUSH
40738: FOR_TO
40739: IFFALSE 40859
// begin for j = 1 to array do
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: DOUBLE
40747: LD_INT 1
40749: DEC
40750: ST_TO_ADDR
40751: LD_VAR 0 1
40755: PUSH
40756: FOR_TO
40757: IFFALSE 40845
// begin k := j + d ;
40759: LD_ADDR_VAR 0 8
40763: PUSH
40764: LD_VAR 0 7
40768: PUSH
40769: LD_VAR 0 9
40773: PLUS
40774: ST_TO_ADDR
// if k > array then
40775: LD_VAR 0 8
40779: PUSH
40780: LD_VAR 0 1
40784: GREATER
40785: IFFALSE 40795
// k := 1 ;
40787: LD_ADDR_VAR 0 8
40791: PUSH
40792: LD_INT 1
40794: ST_TO_ADDR
// if not k then
40795: LD_VAR 0 8
40799: NOT
40800: IFFALSE 40812
// k := array ;
40802: LD_ADDR_VAR 0 8
40806: PUSH
40807: LD_VAR 0 1
40811: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40812: LD_ADDR_VAR 0 10
40816: PUSH
40817: LD_VAR 0 10
40821: PPUSH
40822: LD_VAR 0 8
40826: PPUSH
40827: LD_VAR 0 1
40831: PUSH
40832: LD_VAR 0 7
40836: ARRAY
40837: PPUSH
40838: CALL_OW 1
40842: ST_TO_ADDR
// end ;
40843: GO 40756
40845: POP
40846: POP
// array := tmp ;
40847: LD_ADDR_VAR 0 1
40851: PUSH
40852: LD_VAR 0 10
40856: ST_TO_ADDR
// end ;
40857: GO 40738
40859: POP
40860: POP
// result := array ;
40861: LD_ADDR_VAR 0 5
40865: PUSH
40866: LD_VAR 0 1
40870: ST_TO_ADDR
// end ;
40871: LD_VAR 0 5
40875: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40876: LD_INT 0
40878: PPUSH
40879: PPUSH
// result := 0 ;
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_INT 0
40887: ST_TO_ADDR
// if not array or not value in array then
40888: LD_VAR 0 1
40892: NOT
40893: IFTRUE 40908
40895: PUSH
40896: LD_VAR 0 2
40900: PUSH
40901: LD_VAR 0 1
40905: IN
40906: NOT
40907: OR
40908: IFFALSE 40912
// exit ;
40910: GO 40966
// for i = 1 to array do
40912: LD_ADDR_VAR 0 4
40916: PUSH
40917: DOUBLE
40918: LD_INT 1
40920: DEC
40921: ST_TO_ADDR
40922: LD_VAR 0 1
40926: PUSH
40927: FOR_TO
40928: IFFALSE 40964
// if value = array [ i ] then
40930: LD_VAR 0 2
40934: PUSH
40935: LD_VAR 0 1
40939: PUSH
40940: LD_VAR 0 4
40944: ARRAY
40945: EQUAL
40946: IFFALSE 40962
// begin result := i ;
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_VAR 0 4
40957: ST_TO_ADDR
// exit ;
40958: POP
40959: POP
40960: GO 40966
// end ;
40962: GO 40927
40964: POP
40965: POP
// end ;
40966: LD_VAR 0 3
40970: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40971: LD_INT 0
40973: PPUSH
// vc_chassis := chassis ;
40974: LD_ADDR_OWVAR 37
40978: PUSH
40979: LD_VAR 0 1
40983: ST_TO_ADDR
// vc_engine := engine ;
40984: LD_ADDR_OWVAR 39
40988: PUSH
40989: LD_VAR 0 2
40993: ST_TO_ADDR
// vc_control := control ;
40994: LD_ADDR_OWVAR 38
40998: PUSH
40999: LD_VAR 0 3
41003: ST_TO_ADDR
// vc_weapon := weapon ;
41004: LD_ADDR_OWVAR 40
41008: PUSH
41009: LD_VAR 0 4
41013: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41014: LD_ADDR_OWVAR 41
41018: PUSH
41019: LD_VAR 0 5
41023: ST_TO_ADDR
// end ;
41024: LD_VAR 0 6
41028: RET
// export function WantPlant ( unit ) ; var task ; begin
41029: LD_INT 0
41031: PPUSH
41032: PPUSH
// result := false ;
41033: LD_ADDR_VAR 0 2
41037: PUSH
41038: LD_INT 0
41040: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41041: LD_ADDR_VAR 0 3
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 437
41055: ST_TO_ADDR
// if task then
41056: LD_VAR 0 3
41060: IFFALSE 41088
// if task [ 1 ] [ 1 ] = p then
41062: LD_VAR 0 3
41066: PUSH
41067: LD_INT 1
41069: ARRAY
41070: PUSH
41071: LD_INT 1
41073: ARRAY
41074: PUSH
41075: LD_STRING p
41077: EQUAL
41078: IFFALSE 41088
// result := true ;
41080: LD_ADDR_VAR 0 2
41084: PUSH
41085: LD_INT 1
41087: ST_TO_ADDR
// end ;
41088: LD_VAR 0 2
41092: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41093: LD_INT 0
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
// if pos < 1 then
41099: LD_VAR 0 2
41103: PUSH
41104: LD_INT 1
41106: LESS
41107: IFFALSE 41111
// exit ;
41109: GO 41414
// if pos = 1 then
41111: LD_VAR 0 2
41115: PUSH
41116: LD_INT 1
41118: EQUAL
41119: IFFALSE 41152
// result := Replace ( arr , pos [ 1 ] , value ) else
41121: LD_ADDR_VAR 0 4
41125: PUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: LD_VAR 0 2
41135: PUSH
41136: LD_INT 1
41138: ARRAY
41139: PPUSH
41140: LD_VAR 0 3
41144: PPUSH
41145: CALL_OW 1
41149: ST_TO_ADDR
41150: GO 41414
// begin tmp := arr ;
41152: LD_ADDR_VAR 0 6
41156: PUSH
41157: LD_VAR 0 1
41161: ST_TO_ADDR
// s_arr := [ tmp ] ;
41162: LD_ADDR_VAR 0 7
41166: PUSH
41167: LD_VAR 0 6
41171: PUSH
41172: EMPTY
41173: LIST
41174: ST_TO_ADDR
// for i = 1 to pos - 1 do
41175: LD_ADDR_VAR 0 5
41179: PUSH
41180: DOUBLE
41181: LD_INT 1
41183: DEC
41184: ST_TO_ADDR
41185: LD_VAR 0 2
41189: PUSH
41190: LD_INT 1
41192: MINUS
41193: PUSH
41194: FOR_TO
41195: IFFALSE 41240
// begin tmp := tmp [ pos [ i ] ] ;
41197: LD_ADDR_VAR 0 6
41201: PUSH
41202: LD_VAR 0 6
41206: PUSH
41207: LD_VAR 0 2
41211: PUSH
41212: LD_VAR 0 5
41216: ARRAY
41217: ARRAY
41218: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41219: LD_ADDR_VAR 0 7
41223: PUSH
41224: LD_VAR 0 7
41228: PUSH
41229: LD_VAR 0 6
41233: PUSH
41234: EMPTY
41235: LIST
41236: ADD
41237: ST_TO_ADDR
// end ;
41238: GO 41194
41240: POP
41241: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_VAR 0 6
41251: PPUSH
41252: LD_VAR 0 2
41256: PUSH
41257: LD_VAR 0 2
41261: ARRAY
41262: PPUSH
41263: LD_VAR 0 3
41267: PPUSH
41268: CALL_OW 1
41272: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41273: LD_ADDR_VAR 0 7
41277: PUSH
41278: LD_VAR 0 7
41282: PPUSH
41283: LD_VAR 0 7
41287: PPUSH
41288: LD_VAR 0 6
41292: PPUSH
41293: CALL_OW 1
41297: ST_TO_ADDR
// for i = s_arr downto 2 do
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: DOUBLE
41304: LD_VAR 0 7
41308: INC
41309: ST_TO_ADDR
41310: LD_INT 2
41312: PUSH
41313: FOR_DOWNTO
41314: IFFALSE 41398
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41316: LD_ADDR_VAR 0 6
41320: PUSH
41321: LD_VAR 0 7
41325: PUSH
41326: LD_VAR 0 5
41330: PUSH
41331: LD_INT 1
41333: MINUS
41334: ARRAY
41335: PPUSH
41336: LD_VAR 0 2
41340: PUSH
41341: LD_VAR 0 5
41345: PUSH
41346: LD_INT 1
41348: MINUS
41349: ARRAY
41350: PPUSH
41351: LD_VAR 0 7
41355: PUSH
41356: LD_VAR 0 5
41360: ARRAY
41361: PPUSH
41362: CALL_OW 1
41366: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41367: LD_ADDR_VAR 0 7
41371: PUSH
41372: LD_VAR 0 7
41376: PPUSH
41377: LD_VAR 0 5
41381: PUSH
41382: LD_INT 1
41384: MINUS
41385: PPUSH
41386: LD_VAR 0 6
41390: PPUSH
41391: CALL_OW 1
41395: ST_TO_ADDR
// end ;
41396: GO 41313
41398: POP
41399: POP
// result := s_arr [ 1 ] ;
41400: LD_ADDR_VAR 0 4
41404: PUSH
41405: LD_VAR 0 7
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: ST_TO_ADDR
// end ; end ;
41414: LD_VAR 0 4
41418: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41419: LD_INT 0
41421: PPUSH
41422: PPUSH
// if not list then
41423: LD_VAR 0 1
41427: NOT
41428: IFFALSE 41432
// exit ;
41430: GO 41523
// i := list [ pos1 ] ;
41432: LD_ADDR_VAR 0 5
41436: PUSH
41437: LD_VAR 0 1
41441: PUSH
41442: LD_VAR 0 2
41446: ARRAY
41447: ST_TO_ADDR
// if not i then
41448: LD_VAR 0 5
41452: NOT
41453: IFFALSE 41457
// exit ;
41455: GO 41523
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41457: LD_ADDR_VAR 0 1
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: LD_VAR 0 2
41471: PPUSH
41472: LD_VAR 0 1
41476: PUSH
41477: LD_VAR 0 3
41481: ARRAY
41482: PPUSH
41483: CALL_OW 1
41487: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41488: LD_ADDR_VAR 0 1
41492: PUSH
41493: LD_VAR 0 1
41497: PPUSH
41498: LD_VAR 0 3
41502: PPUSH
41503: LD_VAR 0 5
41507: PPUSH
41508: CALL_OW 1
41512: ST_TO_ADDR
// result := list ;
41513: LD_ADDR_VAR 0 4
41517: PUSH
41518: LD_VAR 0 1
41522: ST_TO_ADDR
// end ;
41523: LD_VAR 0 4
41527: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41528: LD_INT 0
41530: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: CALL_OW 250
41545: PPUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL_OW 251
41555: PPUSH
41556: LD_VAR 0 2
41560: PPUSH
41561: LD_VAR 0 3
41565: PPUSH
41566: LD_VAR 0 4
41570: PPUSH
41571: CALL 41953 0 5
41575: ST_TO_ADDR
// end ;
41576: LD_VAR 0 5
41580: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
// if not list or not unit then
41587: LD_VAR 0 2
41591: NOT
41592: IFTRUE 41601
41594: PUSH
41595: LD_VAR 0 1
41599: NOT
41600: OR
41601: IFFALSE 41605
// exit ;
41603: GO 41948
// result := [ ] ;
41605: LD_ADDR_VAR 0 5
41609: PUSH
41610: EMPTY
41611: ST_TO_ADDR
// for i in list do
41612: LD_ADDR_VAR 0 6
41616: PUSH
41617: LD_VAR 0 2
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41841
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41625: LD_ADDR_VAR 0 8
41629: PUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: LD_VAR 0 6
41639: PUSH
41640: LD_INT 1
41642: ARRAY
41643: PPUSH
41644: LD_VAR 0 6
41648: PUSH
41649: LD_INT 2
41651: ARRAY
41652: PPUSH
41653: CALL_OW 297
41657: ST_TO_ADDR
// if not Count ( result ) then
41658: LD_VAR 0 5
41662: PPUSH
41663: CALL 38175 0 1
41667: NOT
41668: IFFALSE 41701
// begin result := Join ( result , [ i , tmp ] ) ;
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_VAR 0 5
41679: PPUSH
41680: LD_VAR 0 6
41684: PUSH
41685: LD_VAR 0 8
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PPUSH
41694: CALL 74151 0 2
41698: ST_TO_ADDR
// continue ;
41699: GO 41622
// end ; if result [ result ] [ 2 ] <= tmp then
41701: LD_VAR 0 5
41705: PUSH
41706: LD_VAR 0 5
41710: ARRAY
41711: PUSH
41712: LD_INT 2
41714: ARRAY
41715: PUSH
41716: LD_VAR 0 8
41720: LESSEQUAL
41721: IFFALSE 41754
// result := Join ( result , [ i , tmp ] ) else
41723: LD_ADDR_VAR 0 5
41727: PUSH
41728: LD_VAR 0 5
41732: PPUSH
41733: LD_VAR 0 6
41737: PUSH
41738: LD_VAR 0 8
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PPUSH
41747: CALL 74151 0 2
41751: ST_TO_ADDR
41752: GO 41839
// begin for j := 1 to Count ( result ) do
41754: LD_ADDR_VAR 0 7
41758: PUSH
41759: DOUBLE
41760: LD_INT 1
41762: DEC
41763: ST_TO_ADDR
41764: LD_VAR 0 5
41768: PPUSH
41769: CALL 38175 0 1
41773: PUSH
41774: FOR_TO
41775: IFFALSE 41837
// begin if tmp < result [ j ] [ 2 ] then
41777: LD_VAR 0 8
41781: PUSH
41782: LD_VAR 0 5
41786: PUSH
41787: LD_VAR 0 7
41791: ARRAY
41792: PUSH
41793: LD_INT 2
41795: ARRAY
41796: LESS
41797: IFFALSE 41835
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41799: LD_ADDR_VAR 0 5
41803: PUSH
41804: LD_VAR 0 5
41808: PPUSH
41809: LD_VAR 0 7
41813: PPUSH
41814: LD_VAR 0 6
41818: PUSH
41819: LD_VAR 0 8
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PPUSH
41828: CALL_OW 2
41832: ST_TO_ADDR
// break ;
41833: GO 41837
// end ; end ;
41835: GO 41774
41837: POP
41838: POP
// end ; end ;
41839: GO 41622
41841: POP
41842: POP
// if result and not asc then
41843: LD_VAR 0 5
41847: IFFALSE 41856
41849: PUSH
41850: LD_VAR 0 3
41854: NOT
41855: AND
41856: IFFALSE 41873
// result := ReverseArray ( result ) ;
41858: LD_ADDR_VAR 0 5
41862: PUSH
41863: LD_VAR 0 5
41867: PPUSH
41868: CALL 69231 0 1
41872: ST_TO_ADDR
// tmp := [ ] ;
41873: LD_ADDR_VAR 0 8
41877: PUSH
41878: EMPTY
41879: ST_TO_ADDR
// if mode then
41880: LD_VAR 0 4
41884: IFFALSE 41948
// begin for i := 1 to result do
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: DOUBLE
41892: LD_INT 1
41894: DEC
41895: ST_TO_ADDR
41896: LD_VAR 0 5
41900: PUSH
41901: FOR_TO
41902: IFFALSE 41936
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41904: LD_ADDR_VAR 0 8
41908: PUSH
41909: LD_VAR 0 8
41913: PPUSH
41914: LD_VAR 0 5
41918: PUSH
41919: LD_VAR 0 6
41923: ARRAY
41924: PUSH
41925: LD_INT 1
41927: ARRAY
41928: PPUSH
41929: CALL 74151 0 2
41933: ST_TO_ADDR
41934: GO 41901
41936: POP
41937: POP
// result := tmp ;
41938: LD_ADDR_VAR 0 5
41942: PUSH
41943: LD_VAR 0 8
41947: ST_TO_ADDR
// end ; end ;
41948: LD_VAR 0 5
41952: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41953: LD_INT 0
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
// if not list then
41959: LD_VAR 0 3
41963: NOT
41964: IFFALSE 41968
// exit ;
41966: GO 42358
// result := [ ] ;
41968: LD_ADDR_VAR 0 6
41972: PUSH
41973: EMPTY
41974: ST_TO_ADDR
// for i in list do
41975: LD_ADDR_VAR 0 7
41979: PUSH
41980: LD_VAR 0 3
41984: PUSH
41985: FOR_IN
41986: IFFALSE 42188
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_VAR 0 7
41997: PPUSH
41998: LD_VAR 0 1
42002: PPUSH
42003: LD_VAR 0 2
42007: PPUSH
42008: CALL_OW 297
42012: ST_TO_ADDR
// if not result then
42013: LD_VAR 0 6
42017: NOT
42018: IFFALSE 42044
// result := [ [ i , tmp ] ] else
42020: LD_ADDR_VAR 0 6
42024: PUSH
42025: LD_VAR 0 7
42029: PUSH
42030: LD_VAR 0 9
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: ST_TO_ADDR
42042: GO 42186
// begin if result [ result ] [ 2 ] <= tmp then
42044: LD_VAR 0 6
42048: PUSH
42049: LD_VAR 0 6
42053: ARRAY
42054: PUSH
42055: LD_INT 2
42057: ARRAY
42058: PUSH
42059: LD_VAR 0 9
42063: LESSEQUAL
42064: IFFALSE 42106
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42066: LD_ADDR_VAR 0 6
42070: PUSH
42071: LD_VAR 0 6
42075: PPUSH
42076: LD_VAR 0 6
42080: PUSH
42081: LD_INT 1
42083: PLUS
42084: PPUSH
42085: LD_VAR 0 7
42089: PUSH
42090: LD_VAR 0 9
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PPUSH
42099: CALL_OW 2
42103: ST_TO_ADDR
42104: GO 42186
// for j := 1 to result do
42106: LD_ADDR_VAR 0 8
42110: PUSH
42111: DOUBLE
42112: LD_INT 1
42114: DEC
42115: ST_TO_ADDR
42116: LD_VAR 0 6
42120: PUSH
42121: FOR_TO
42122: IFFALSE 42184
// begin if tmp < result [ j ] [ 2 ] then
42124: LD_VAR 0 9
42128: PUSH
42129: LD_VAR 0 6
42133: PUSH
42134: LD_VAR 0 8
42138: ARRAY
42139: PUSH
42140: LD_INT 2
42142: ARRAY
42143: LESS
42144: IFFALSE 42182
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42146: LD_ADDR_VAR 0 6
42150: PUSH
42151: LD_VAR 0 6
42155: PPUSH
42156: LD_VAR 0 8
42160: PPUSH
42161: LD_VAR 0 7
42165: PUSH
42166: LD_VAR 0 9
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PPUSH
42175: CALL_OW 2
42179: ST_TO_ADDR
// break ;
42180: GO 42184
// end ; end ;
42182: GO 42121
42184: POP
42185: POP
// end ; end ;
42186: GO 41985
42188: POP
42189: POP
// if result and not asc then
42190: LD_VAR 0 6
42194: IFFALSE 42203
42196: PUSH
42197: LD_VAR 0 4
42201: NOT
42202: AND
42203: IFFALSE 42278
// begin tmp := result ;
42205: LD_ADDR_VAR 0 9
42209: PUSH
42210: LD_VAR 0 6
42214: ST_TO_ADDR
// for i = tmp downto 1 do
42215: LD_ADDR_VAR 0 7
42219: PUSH
42220: DOUBLE
42221: LD_VAR 0 9
42225: INC
42226: ST_TO_ADDR
42227: LD_INT 1
42229: PUSH
42230: FOR_DOWNTO
42231: IFFALSE 42276
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42233: LD_ADDR_VAR 0 6
42237: PUSH
42238: LD_VAR 0 6
42242: PPUSH
42243: LD_VAR 0 9
42247: PUSH
42248: LD_VAR 0 7
42252: MINUS
42253: PUSH
42254: LD_INT 1
42256: PLUS
42257: PPUSH
42258: LD_VAR 0 9
42262: PUSH
42263: LD_VAR 0 7
42267: ARRAY
42268: PPUSH
42269: CALL_OW 1
42273: ST_TO_ADDR
42274: GO 42230
42276: POP
42277: POP
// end ; tmp := [ ] ;
42278: LD_ADDR_VAR 0 9
42282: PUSH
42283: EMPTY
42284: ST_TO_ADDR
// if mode then
42285: LD_VAR 0 5
42289: IFFALSE 42358
// begin for i = 1 to result do
42291: LD_ADDR_VAR 0 7
42295: PUSH
42296: DOUBLE
42297: LD_INT 1
42299: DEC
42300: ST_TO_ADDR
42301: LD_VAR 0 6
42305: PUSH
42306: FOR_TO
42307: IFFALSE 42346
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42309: LD_ADDR_VAR 0 9
42313: PUSH
42314: LD_VAR 0 9
42318: PPUSH
42319: LD_VAR 0 7
42323: PPUSH
42324: LD_VAR 0 6
42328: PUSH
42329: LD_VAR 0 7
42333: ARRAY
42334: PUSH
42335: LD_INT 1
42337: ARRAY
42338: PPUSH
42339: CALL_OW 1
42343: ST_TO_ADDR
42344: GO 42306
42346: POP
42347: POP
// result := tmp ;
42348: LD_ADDR_VAR 0 6
42352: PUSH
42353: LD_VAR 0 9
42357: ST_TO_ADDR
// end ; end ;
42358: LD_VAR 0 6
42362: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42363: LD_INT 0
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
42370: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42371: LD_ADDR_VAR 0 5
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: ST_TO_ADDR
// if not x or not y then
42393: LD_VAR 0 2
42397: NOT
42398: IFTRUE 42407
42400: PUSH
42401: LD_VAR 0 3
42405: NOT
42406: OR
42407: IFFALSE 42411
// exit ;
42409: GO 44067
// if not range then
42411: LD_VAR 0 4
42415: NOT
42416: IFFALSE 42426
// range := 10 ;
42418: LD_ADDR_VAR 0 4
42422: PUSH
42423: LD_INT 10
42425: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42426: LD_ADDR_VAR 0 8
42430: PUSH
42431: LD_INT 81
42433: PUSH
42434: LD_VAR 0 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 92
42445: PUSH
42446: LD_VAR 0 2
42450: PUSH
42451: LD_VAR 0 3
42455: PUSH
42456: LD_VAR 0 4
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 21
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: PPUSH
42489: CALL_OW 69
42493: ST_TO_ADDR
// if not tmp then
42494: LD_VAR 0 8
42498: NOT
42499: IFFALSE 42503
// exit ;
42501: GO 44067
// for i in tmp do
42503: LD_ADDR_VAR 0 6
42507: PUSH
42508: LD_VAR 0 8
42512: PUSH
42513: FOR_IN
42514: IFFALSE 44042
// begin points := [ 0 , 0 , 0 ] ;
42516: LD_ADDR_VAR 0 9
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: ST_TO_ADDR
// bpoints := 1 ;
42535: LD_ADDR_VAR 0 10
42539: PUSH
42540: LD_INT 1
42542: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42543: LD_VAR 0 6
42547: PPUSH
42548: CALL_OW 247
42552: PUSH
42553: LD_INT 1
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 43143
42561: POP
// begin if GetClass ( i ) = 1 then
42562: LD_VAR 0 6
42566: PPUSH
42567: CALL_OW 257
42571: PUSH
42572: LD_INT 1
42574: EQUAL
42575: IFFALSE 42596
// points := [ 10 , 5 , 3 ] ;
42577: LD_ADDR_VAR 0 9
42581: PUSH
42582: LD_INT 10
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42596: LD_VAR 0 6
42600: PPUSH
42601: CALL_OW 257
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 4
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: IN
42620: IFFALSE 42641
// points := [ 3 , 2 , 1 ] ;
42622: LD_ADDR_VAR 0 9
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42641: LD_VAR 0 6
42645: PPUSH
42646: CALL_OW 257
42650: PUSH
42651: LD_INT 5
42653: EQUAL
42654: IFFALSE 42675
// points := [ 130 , 5 , 2 ] ;
42656: LD_ADDR_VAR 0 9
42660: PUSH
42661: LD_INT 130
42663: PUSH
42664: LD_INT 5
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42675: LD_VAR 0 6
42679: PPUSH
42680: CALL_OW 257
42684: PUSH
42685: LD_INT 8
42687: EQUAL
42688: IFFALSE 42709
// points := [ 35 , 35 , 30 ] ;
42690: LD_ADDR_VAR 0 9
42694: PUSH
42695: LD_INT 35
42697: PUSH
42698: LD_INT 35
42700: PUSH
42701: LD_INT 30
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42709: LD_VAR 0 6
42713: PPUSH
42714: CALL_OW 257
42718: PUSH
42719: LD_INT 9
42721: EQUAL
42722: IFFALSE 42743
// points := [ 20 , 55 , 40 ] ;
42724: LD_ADDR_VAR 0 9
42728: PUSH
42729: LD_INT 20
42731: PUSH
42732: LD_INT 55
42734: PUSH
42735: LD_INT 40
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42743: LD_VAR 0 6
42747: PPUSH
42748: CALL_OW 257
42752: PUSH
42753: LD_INT 12
42755: PUSH
42756: LD_INT 16
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: IN
42763: IFFALSE 42784
// points := [ 5 , 3 , 2 ] ;
42765: LD_ADDR_VAR 0 9
42769: PUSH
42770: LD_INT 5
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42784: LD_VAR 0 6
42788: PPUSH
42789: CALL_OW 257
42793: PUSH
42794: LD_INT 17
42796: EQUAL
42797: IFFALSE 42818
// points := [ 100 , 50 , 75 ] ;
42799: LD_ADDR_VAR 0 9
42803: PUSH
42804: LD_INT 100
42806: PUSH
42807: LD_INT 50
42809: PUSH
42810: LD_INT 75
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42818: LD_VAR 0 6
42822: PPUSH
42823: CALL_OW 257
42827: PUSH
42828: LD_INT 15
42830: EQUAL
42831: IFFALSE 42852
// points := [ 10 , 5 , 3 ] ;
42833: LD_ADDR_VAR 0 9
42837: PUSH
42838: LD_INT 10
42840: PUSH
42841: LD_INT 5
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42852: LD_VAR 0 6
42856: PPUSH
42857: CALL_OW 257
42861: PUSH
42862: LD_INT 14
42864: EQUAL
42865: IFFALSE 42886
// points := [ 10 , 0 , 0 ] ;
42867: LD_ADDR_VAR 0 9
42871: PUSH
42872: LD_INT 10
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42886: LD_VAR 0 6
42890: PPUSH
42891: CALL_OW 257
42895: PUSH
42896: LD_INT 11
42898: EQUAL
42899: IFFALSE 42920
// points := [ 30 , 10 , 5 ] ;
42901: LD_ADDR_VAR 0 9
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 10
42911: PUSH
42912: LD_INT 5
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42920: LD_VAR 0 1
42924: PPUSH
42925: LD_INT 5
42927: PPUSH
42928: CALL_OW 321
42932: PUSH
42933: LD_INT 2
42935: EQUAL
42936: IFFALSE 42953
// bpoints := bpoints * 1.8 ;
42938: LD_ADDR_VAR 0 10
42942: PUSH
42943: LD_VAR 0 10
42947: PUSH
42948: LD_REAL  1.80000000000000E+0000
42951: MUL
42952: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42953: LD_VAR 0 6
42957: PPUSH
42958: CALL_OW 257
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 2
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: LD_INT 4
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: IN
42981: IFFALSE 43001
42983: PUSH
42984: LD_VAR 0 1
42988: PPUSH
42989: LD_INT 51
42991: PPUSH
42992: CALL_OW 321
42996: PUSH
42997: LD_INT 2
42999: EQUAL
43000: AND
43001: IFFALSE 43018
// bpoints := bpoints * 1.2 ;
43003: LD_ADDR_VAR 0 10
43007: PUSH
43008: LD_VAR 0 10
43012: PUSH
43013: LD_REAL  1.20000000000000E+0000
43016: MUL
43017: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43018: LD_VAR 0 6
43022: PPUSH
43023: CALL_OW 257
43027: PUSH
43028: LD_INT 5
43030: PUSH
43031: LD_INT 7
43033: PUSH
43034: LD_INT 9
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: IN
43042: IFFALSE 43062
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: LD_INT 52
43052: PPUSH
43053: CALL_OW 321
43057: PUSH
43058: LD_INT 2
43060: EQUAL
43061: AND
43062: IFFALSE 43079
// bpoints := bpoints * 1.5 ;
43064: LD_ADDR_VAR 0 10
43068: PUSH
43069: LD_VAR 0 10
43073: PUSH
43074: LD_REAL  1.50000000000000E+0000
43077: MUL
43078: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43079: LD_VAR 0 1
43083: PPUSH
43084: LD_INT 66
43086: PPUSH
43087: CALL_OW 321
43091: PUSH
43092: LD_INT 2
43094: EQUAL
43095: IFFALSE 43112
// bpoints := bpoints * 1.1 ;
43097: LD_ADDR_VAR 0 10
43101: PUSH
43102: LD_VAR 0 10
43106: PUSH
43107: LD_REAL  1.10000000000000E+0000
43110: MUL
43111: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43112: LD_ADDR_VAR 0 10
43116: PUSH
43117: LD_VAR 0 10
43121: PUSH
43122: LD_VAR 0 6
43126: PPUSH
43127: LD_INT 1
43129: PPUSH
43130: CALL_OW 259
43134: PUSH
43135: LD_REAL  1.15000000000000E+0000
43138: MUL
43139: MUL
43140: ST_TO_ADDR
// end ; unit_vehicle :
43141: GO 43971
43143: LD_INT 2
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43959
43151: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43152: LD_VAR 0 6
43156: PPUSH
43157: CALL_OW 264
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 42
43167: PUSH
43168: LD_INT 24
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: IN
43176: IFFALSE 43197
// points := [ 25 , 5 , 3 ] ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_INT 25
43185: PUSH
43186: LD_INT 5
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43197: LD_VAR 0 6
43201: PPUSH
43202: CALL_OW 264
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: LD_INT 43
43212: PUSH
43213: LD_INT 25
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: IN
43221: IFFALSE 43242
// points := [ 40 , 15 , 5 ] ;
43223: LD_ADDR_VAR 0 9
43227: PUSH
43228: LD_INT 40
43230: PUSH
43231: LD_INT 15
43233: PUSH
43234: LD_INT 5
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43242: LD_VAR 0 6
43246: PPUSH
43247: CALL_OW 264
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 23
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: IN
43262: IFFALSE 43283
// points := [ 7 , 25 , 8 ] ;
43264: LD_ADDR_VAR 0 9
43268: PUSH
43269: LD_INT 7
43271: PUSH
43272: LD_INT 25
43274: PUSH
43275: LD_INT 8
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43283: LD_VAR 0 6
43287: PPUSH
43288: CALL_OW 264
43292: PUSH
43293: LD_INT 5
43295: PUSH
43296: LD_INT 27
43298: PUSH
43299: LD_INT 44
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: LIST
43306: IN
43307: IFFALSE 43328
// points := [ 14 , 50 , 16 ] ;
43309: LD_ADDR_VAR 0 9
43313: PUSH
43314: LD_INT 14
43316: PUSH
43317: LD_INT 50
43319: PUSH
43320: LD_INT 16
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43328: LD_VAR 0 6
43332: PPUSH
43333: CALL_OW 264
43337: PUSH
43338: LD_INT 6
43340: PUSH
43341: LD_INT 46
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: IN
43348: IFFALSE 43369
// points := [ 32 , 120 , 70 ] ;
43350: LD_ADDR_VAR 0 9
43354: PUSH
43355: LD_INT 32
43357: PUSH
43358: LD_INT 120
43360: PUSH
43361: LD_INT 70
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43369: LD_VAR 0 6
43373: PPUSH
43374: CALL_OW 264
43378: PUSH
43379: LD_INT 7
43381: PUSH
43382: LD_INT 28
43384: PUSH
43385: LD_INT 45
43387: PUSH
43388: LD_INT 92
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: IN
43397: IFFALSE 43418
// points := [ 35 , 20 , 45 ] ;
43399: LD_ADDR_VAR 0 9
43403: PUSH
43404: LD_INT 35
43406: PUSH
43407: LD_INT 20
43409: PUSH
43410: LD_INT 45
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43418: LD_VAR 0 6
43422: PPUSH
43423: CALL_OW 264
43427: PUSH
43428: LD_INT 47
43430: PUSH
43431: EMPTY
43432: LIST
43433: IN
43434: IFFALSE 43455
// points := [ 67 , 45 , 75 ] ;
43436: LD_ADDR_VAR 0 9
43440: PUSH
43441: LD_INT 67
43443: PUSH
43444: LD_INT 45
43446: PUSH
43447: LD_INT 75
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43455: LD_VAR 0 6
43459: PPUSH
43460: CALL_OW 264
43464: PUSH
43465: LD_INT 26
43467: PUSH
43468: EMPTY
43469: LIST
43470: IN
43471: IFFALSE 43492
// points := [ 120 , 30 , 80 ] ;
43473: LD_ADDR_VAR 0 9
43477: PUSH
43478: LD_INT 120
43480: PUSH
43481: LD_INT 30
43483: PUSH
43484: LD_INT 80
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43492: LD_VAR 0 6
43496: PPUSH
43497: CALL_OW 264
43501: PUSH
43502: LD_INT 22
43504: PUSH
43505: EMPTY
43506: LIST
43507: IN
43508: IFFALSE 43529
// points := [ 40 , 1 , 1 ] ;
43510: LD_ADDR_VAR 0 9
43514: PUSH
43515: LD_INT 40
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43529: LD_VAR 0 6
43533: PPUSH
43534: CALL_OW 264
43538: PUSH
43539: LD_INT 29
43541: PUSH
43542: EMPTY
43543: LIST
43544: IN
43545: IFFALSE 43566
// points := [ 70 , 200 , 400 ] ;
43547: LD_ADDR_VAR 0 9
43551: PUSH
43552: LD_INT 70
43554: PUSH
43555: LD_INT 200
43557: PUSH
43558: LD_INT 400
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43566: LD_VAR 0 6
43570: PPUSH
43571: CALL_OW 264
43575: PUSH
43576: LD_INT 14
43578: PUSH
43579: LD_INT 53
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: IN
43586: IFFALSE 43607
// points := [ 40 , 10 , 20 ] ;
43588: LD_ADDR_VAR 0 9
43592: PUSH
43593: LD_INT 40
43595: PUSH
43596: LD_INT 10
43598: PUSH
43599: LD_INT 20
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43607: LD_VAR 0 6
43611: PPUSH
43612: CALL_OW 264
43616: PUSH
43617: LD_INT 9
43619: PUSH
43620: EMPTY
43621: LIST
43622: IN
43623: IFFALSE 43644
// points := [ 5 , 70 , 20 ] ;
43625: LD_ADDR_VAR 0 9
43629: PUSH
43630: LD_INT 5
43632: PUSH
43633: LD_INT 70
43635: PUSH
43636: LD_INT 20
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43644: LD_VAR 0 6
43648: PPUSH
43649: CALL_OW 264
43653: PUSH
43654: LD_INT 10
43656: PUSH
43657: EMPTY
43658: LIST
43659: IN
43660: IFFALSE 43681
// points := [ 35 , 110 , 70 ] ;
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_INT 35
43669: PUSH
43670: LD_INT 110
43672: PUSH
43673: LD_INT 70
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43681: LD_VAR 0 6
43685: PPUSH
43686: CALL_OW 265
43690: PUSH
43691: LD_INT 25
43693: EQUAL
43694: IFFALSE 43715
// points := [ 80 , 65 , 100 ] ;
43696: LD_ADDR_VAR 0 9
43700: PUSH
43701: LD_INT 80
43703: PUSH
43704: LD_INT 65
43706: PUSH
43707: LD_INT 100
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43715: LD_VAR 0 6
43719: PPUSH
43720: CALL_OW 263
43724: PUSH
43725: LD_INT 1
43727: EQUAL
43728: IFFALSE 43763
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43730: LD_ADDR_VAR 0 10
43734: PUSH
43735: LD_VAR 0 10
43739: PUSH
43740: LD_VAR 0 6
43744: PPUSH
43745: CALL_OW 311
43749: PPUSH
43750: LD_INT 3
43752: PPUSH
43753: CALL_OW 259
43757: PUSH
43758: LD_INT 4
43760: MUL
43761: MUL
43762: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43763: LD_VAR 0 6
43767: PPUSH
43768: CALL_OW 263
43772: PUSH
43773: LD_INT 2
43775: EQUAL
43776: IFFALSE 43827
// begin j := IsControledBy ( i ) ;
43778: LD_ADDR_VAR 0 7
43782: PUSH
43783: LD_VAR 0 6
43787: PPUSH
43788: CALL_OW 312
43792: ST_TO_ADDR
// if j then
43793: LD_VAR 0 7
43797: IFFALSE 43827
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43799: LD_ADDR_VAR 0 10
43803: PUSH
43804: LD_VAR 0 10
43808: PUSH
43809: LD_VAR 0 7
43813: PPUSH
43814: LD_INT 3
43816: PPUSH
43817: CALL_OW 259
43821: PUSH
43822: LD_INT 3
43824: MUL
43825: MUL
43826: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43827: LD_VAR 0 6
43831: PPUSH
43832: CALL_OW 264
43836: PUSH
43837: LD_INT 5
43839: PUSH
43840: LD_INT 6
43842: PUSH
43843: LD_INT 46
43845: PUSH
43846: LD_INT 44
43848: PUSH
43849: LD_INT 47
43851: PUSH
43852: LD_INT 45
43854: PUSH
43855: LD_INT 28
43857: PUSH
43858: LD_INT 7
43860: PUSH
43861: LD_INT 27
43863: PUSH
43864: LD_INT 29
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: IN
43879: IFFALSE 43899
43881: PUSH
43882: LD_VAR 0 1
43886: PPUSH
43887: LD_INT 52
43889: PPUSH
43890: CALL_OW 321
43894: PUSH
43895: LD_INT 2
43897: EQUAL
43898: AND
43899: IFFALSE 43916
// bpoints := bpoints * 1.2 ;
43901: LD_ADDR_VAR 0 10
43905: PUSH
43906: LD_VAR 0 10
43910: PUSH
43911: LD_REAL  1.20000000000000E+0000
43914: MUL
43915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43916: LD_VAR 0 6
43920: PPUSH
43921: CALL_OW 264
43925: PUSH
43926: LD_INT 6
43928: PUSH
43929: LD_INT 46
43931: PUSH
43932: LD_INT 47
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: IN
43940: IFFALSE 43957
// bpoints := bpoints * 1.2 ;
43942: LD_ADDR_VAR 0 10
43946: PUSH
43947: LD_VAR 0 10
43951: PUSH
43952: LD_REAL  1.20000000000000E+0000
43955: MUL
43956: ST_TO_ADDR
// end ; unit_building :
43957: GO 43971
43959: LD_INT 3
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 43970
43967: POP
// ; end ;
43968: GO 43971
43970: POP
// for j = 1 to 3 do
43971: LD_ADDR_VAR 0 7
43975: PUSH
43976: DOUBLE
43977: LD_INT 1
43979: DEC
43980: ST_TO_ADDR
43981: LD_INT 3
43983: PUSH
43984: FOR_TO
43985: IFFALSE 44038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43987: LD_ADDR_VAR 0 5
43991: PUSH
43992: LD_VAR 0 5
43996: PPUSH
43997: LD_VAR 0 7
44001: PPUSH
44002: LD_VAR 0 5
44006: PUSH
44007: LD_VAR 0 7
44011: ARRAY
44012: PUSH
44013: LD_VAR 0 9
44017: PUSH
44018: LD_VAR 0 7
44022: ARRAY
44023: PUSH
44024: LD_VAR 0 10
44028: MUL
44029: PLUS
44030: PPUSH
44031: CALL_OW 1
44035: ST_TO_ADDR
44036: GO 43984
44038: POP
44039: POP
// end ;
44040: GO 42513
44042: POP
44043: POP
// result := Replace ( result , 4 , tmp ) ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_VAR 0 5
44053: PPUSH
44054: LD_INT 4
44056: PPUSH
44057: LD_VAR 0 8
44061: PPUSH
44062: CALL_OW 1
44066: ST_TO_ADDR
// end ;
44067: LD_VAR 0 5
44071: RET
// export function DangerAtRange ( unit , range ) ; begin
44072: LD_INT 0
44074: PPUSH
// if not unit then
44075: LD_VAR 0 1
44079: NOT
44080: IFFALSE 44084
// exit ;
44082: GO 44129
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44084: LD_ADDR_VAR 0 3
44088: PUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 255
44098: PPUSH
44099: LD_VAR 0 1
44103: PPUSH
44104: CALL_OW 250
44108: PPUSH
44109: LD_VAR 0 1
44113: PPUSH
44114: CALL_OW 251
44118: PPUSH
44119: LD_VAR 0 2
44123: PPUSH
44124: CALL 42363 0 4
44128: ST_TO_ADDR
// end ;
44129: LD_VAR 0 3
44133: RET
// export function DangerInArea ( side , area ) ; begin
44134: LD_INT 0
44136: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_VAR 0 2
44146: PPUSH
44147: LD_INT 81
44149: PUSH
44150: LD_VAR 0 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PPUSH
44159: CALL_OW 70
44163: ST_TO_ADDR
// end ;
44164: LD_VAR 0 3
44168: RET
// export function IsExtension ( b ) ; begin
44169: LD_INT 0
44171: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_INT 23
44184: PUSH
44185: LD_INT 20
44187: PUSH
44188: LD_INT 22
44190: PUSH
44191: LD_INT 17
44193: PUSH
44194: LD_INT 24
44196: PUSH
44197: LD_INT 21
44199: PUSH
44200: LD_INT 19
44202: PUSH
44203: LD_INT 16
44205: PUSH
44206: LD_INT 25
44208: PUSH
44209: LD_INT 18
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: IN
44224: ST_TO_ADDR
// end ;
44225: LD_VAR 0 2
44229: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44230: LD_INT 0
44232: PPUSH
44233: PPUSH
44234: PPUSH
// result := [ ] ;
44235: LD_ADDR_VAR 0 4
44239: PUSH
44240: EMPTY
44241: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44242: LD_ADDR_VAR 0 5
44246: PUSH
44247: LD_VAR 0 2
44251: PPUSH
44252: LD_INT 21
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PPUSH
44262: CALL_OW 70
44266: ST_TO_ADDR
// if not tmp then
44267: LD_VAR 0 5
44271: NOT
44272: IFFALSE 44276
// exit ;
44274: GO 44340
// if checkLink then
44276: LD_VAR 0 3
44280: IFFALSE 44330
// begin for i in tmp do
44282: LD_ADDR_VAR 0 6
44286: PUSH
44287: LD_VAR 0 5
44291: PUSH
44292: FOR_IN
44293: IFFALSE 44328
// if GetBase ( i ) <> base then
44295: LD_VAR 0 6
44299: PPUSH
44300: CALL_OW 274
44304: PUSH
44305: LD_VAR 0 1
44309: NONEQUAL
44310: IFFALSE 44326
// ComLinkToBase ( base , i ) ;
44312: LD_VAR 0 1
44316: PPUSH
44317: LD_VAR 0 6
44321: PPUSH
44322: CALL_OW 169
44326: GO 44292
44328: POP
44329: POP
// end ; result := tmp ;
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: LD_VAR 0 5
44339: ST_TO_ADDR
// end ;
44340: LD_VAR 0 4
44344: RET
// export function ComComplete ( units , b ) ; var i ; begin
44345: LD_INT 0
44347: PPUSH
44348: PPUSH
// if not units then
44349: LD_VAR 0 1
44353: NOT
44354: IFFALSE 44358
// exit ;
44356: GO 44448
// for i in units do
44358: LD_ADDR_VAR 0 4
44362: PUSH
44363: LD_VAR 0 1
44367: PUSH
44368: FOR_IN
44369: IFFALSE 44446
// if BuildingStatus ( b ) = bs_build then
44371: LD_VAR 0 2
44375: PPUSH
44376: CALL_OW 461
44380: PUSH
44381: LD_INT 1
44383: EQUAL
44384: IFFALSE 44444
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44386: LD_VAR 0 4
44390: PPUSH
44391: LD_STRING h
44393: PUSH
44394: LD_VAR 0 2
44398: PPUSH
44399: CALL_OW 250
44403: PUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: CALL_OW 251
44413: PUSH
44414: LD_VAR 0 2
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: PPUSH
44440: CALL_OW 446
44444: GO 44368
44446: POP
44447: POP
// end ;
44448: LD_VAR 0 3
44452: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44453: LD_INT 0
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
44459: PPUSH
44460: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44461: LD_VAR 0 1
44465: NOT
44466: IFTRUE 44483
44468: PUSH
44469: LD_VAR 0 1
44473: PPUSH
44474: CALL_OW 263
44478: PUSH
44479: LD_INT 2
44481: NONEQUAL
44482: OR
44483: IFFALSE 44487
// exit ;
44485: GO 44803
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44487: LD_ADDR_VAR 0 6
44491: PUSH
44492: LD_INT 22
44494: PUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 255
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 30
44514: PUSH
44515: LD_INT 36
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 34
44524: PUSH
44525: LD_INT 31
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PPUSH
44541: CALL_OW 69
44545: ST_TO_ADDR
// if not tmp then
44546: LD_VAR 0 6
44550: NOT
44551: IFFALSE 44555
// exit ;
44553: GO 44803
// result := [ ] ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: EMPTY
44561: ST_TO_ADDR
// for i in tmp do
44562: LD_ADDR_VAR 0 3
44566: PUSH
44567: LD_VAR 0 6
44571: PUSH
44572: FOR_IN
44573: IFFALSE 44644
// begin t := UnitsInside ( i ) ;
44575: LD_ADDR_VAR 0 4
44579: PUSH
44580: LD_VAR 0 3
44584: PPUSH
44585: CALL_OW 313
44589: ST_TO_ADDR
// if t then
44590: LD_VAR 0 4
44594: IFFALSE 44642
// for j in t do
44596: LD_ADDR_VAR 0 7
44600: PUSH
44601: LD_VAR 0 4
44605: PUSH
44606: FOR_IN
44607: IFFALSE 44640
// result := Replace ( result , result + 1 , j ) ;
44609: LD_ADDR_VAR 0 2
44613: PUSH
44614: LD_VAR 0 2
44618: PPUSH
44619: LD_VAR 0 2
44623: PUSH
44624: LD_INT 1
44626: PLUS
44627: PPUSH
44628: LD_VAR 0 7
44632: PPUSH
44633: CALL_OW 1
44637: ST_TO_ADDR
44638: GO 44606
44640: POP
44641: POP
// end ;
44642: GO 44572
44644: POP
44645: POP
// if not result then
44646: LD_VAR 0 2
44650: NOT
44651: IFFALSE 44655
// exit ;
44653: GO 44803
// mech := result [ 1 ] ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 2
44664: PUSH
44665: LD_INT 1
44667: ARRAY
44668: ST_TO_ADDR
// if result > 1 then
44669: LD_VAR 0 2
44673: PUSH
44674: LD_INT 1
44676: GREATER
44677: IFFALSE 44789
// begin for i = 2 to result do
44679: LD_ADDR_VAR 0 3
44683: PUSH
44684: DOUBLE
44685: LD_INT 2
44687: DEC
44688: ST_TO_ADDR
44689: LD_VAR 0 2
44693: PUSH
44694: FOR_TO
44695: IFFALSE 44787
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44697: LD_ADDR_VAR 0 4
44701: PUSH
44702: LD_VAR 0 2
44706: PUSH
44707: LD_VAR 0 3
44711: ARRAY
44712: PPUSH
44713: LD_INT 3
44715: PPUSH
44716: CALL_OW 259
44720: PUSH
44721: LD_VAR 0 2
44725: PUSH
44726: LD_VAR 0 3
44730: ARRAY
44731: PPUSH
44732: CALL_OW 432
44736: MINUS
44737: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44738: LD_VAR 0 4
44742: PUSH
44743: LD_VAR 0 5
44747: PPUSH
44748: LD_INT 3
44750: PPUSH
44751: CALL_OW 259
44755: PUSH
44756: LD_VAR 0 5
44760: PPUSH
44761: CALL_OW 432
44765: MINUS
44766: GREATEREQUAL
44767: IFFALSE 44785
// mech := result [ i ] ;
44769: LD_ADDR_VAR 0 5
44773: PUSH
44774: LD_VAR 0 2
44778: PUSH
44779: LD_VAR 0 3
44783: ARRAY
44784: ST_TO_ADDR
// end ;
44785: GO 44694
44787: POP
44788: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44789: LD_VAR 0 1
44793: PPUSH
44794: LD_VAR 0 5
44798: PPUSH
44799: CALL_OW 135
// end ;
44803: LD_VAR 0 2
44807: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44808: LD_INT 0
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
// result := [ ] ;
44823: LD_ADDR_VAR 0 7
44827: PUSH
44828: EMPTY
44829: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44830: LD_VAR 0 1
44834: PPUSH
44835: CALL_OW 266
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: IN
44850: NOT
44851: IFFALSE 44855
// exit ;
44853: GO 46495
// if name then
44855: LD_VAR 0 3
44859: IFFALSE 44875
// SetBName ( base_dep , name ) ;
44861: LD_VAR 0 1
44865: PPUSH
44866: LD_VAR 0 3
44870: PPUSH
44871: CALL_OW 500
// base := GetBase ( base_dep ) ;
44875: LD_ADDR_VAR 0 15
44879: PUSH
44880: LD_VAR 0 1
44884: PPUSH
44885: CALL_OW 274
44889: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44890: LD_ADDR_VAR 0 16
44894: PUSH
44895: LD_VAR 0 1
44899: PPUSH
44900: CALL_OW 255
44904: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44905: LD_ADDR_VAR 0 17
44909: PUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 248
44919: ST_TO_ADDR
// if sources then
44920: LD_VAR 0 5
44924: IFFALSE 44971
// for i = 1 to 3 do
44926: LD_ADDR_VAR 0 8
44930: PUSH
44931: DOUBLE
44932: LD_INT 1
44934: DEC
44935: ST_TO_ADDR
44936: LD_INT 3
44938: PUSH
44939: FOR_TO
44940: IFFALSE 44969
// AddResourceType ( base , i , sources [ i ] ) ;
44942: LD_VAR 0 15
44946: PPUSH
44947: LD_VAR 0 8
44951: PPUSH
44952: LD_VAR 0 5
44956: PUSH
44957: LD_VAR 0 8
44961: ARRAY
44962: PPUSH
44963: CALL_OW 276
44967: GO 44939
44969: POP
44970: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44971: LD_ADDR_VAR 0 18
44975: PUSH
44976: LD_VAR 0 15
44980: PPUSH
44981: LD_VAR 0 2
44985: PPUSH
44986: LD_INT 1
44988: PPUSH
44989: CALL 44230 0 3
44993: ST_TO_ADDR
// InitHc ;
44994: CALL_OW 19
// InitUc ;
44998: CALL_OW 18
// uc_side := side ;
45002: LD_ADDR_OWVAR 20
45006: PUSH
45007: LD_VAR 0 16
45011: ST_TO_ADDR
// uc_nation := nation ;
45012: LD_ADDR_OWVAR 21
45016: PUSH
45017: LD_VAR 0 17
45021: ST_TO_ADDR
// if buildings then
45022: LD_VAR 0 18
45026: IFFALSE 46354
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45028: LD_ADDR_VAR 0 19
45032: PUSH
45033: LD_VAR 0 18
45037: PPUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 30
45043: PUSH
45044: LD_INT 29
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 30
45053: PUSH
45054: LD_INT 30
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: PPUSH
45066: CALL_OW 72
45070: ST_TO_ADDR
// if tmp then
45071: LD_VAR 0 19
45075: IFFALSE 45123
// for i in tmp do
45077: LD_ADDR_VAR 0 8
45081: PUSH
45082: LD_VAR 0 19
45086: PUSH
45087: FOR_IN
45088: IFFALSE 45121
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45090: LD_VAR 0 8
45094: PPUSH
45095: CALL_OW 250
45099: PPUSH
45100: LD_VAR 0 8
45104: PPUSH
45105: CALL_OW 251
45109: PPUSH
45110: LD_VAR 0 16
45114: PPUSH
45115: CALL_OW 441
45119: GO 45087
45121: POP
45122: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45123: LD_VAR 0 18
45127: PPUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: LD_INT 32
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 30
45143: PUSH
45144: LD_INT 33
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: PPUSH
45156: CALL_OW 72
45160: IFFALSE 45248
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45162: LD_ADDR_VAR 0 8
45166: PUSH
45167: LD_VAR 0 18
45171: PPUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 30
45177: PUSH
45178: LD_INT 32
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 30
45187: PUSH
45188: LD_INT 33
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: PPUSH
45200: CALL_OW 72
45204: PUSH
45205: FOR_IN
45206: IFFALSE 45246
// begin if not GetBWeapon ( i ) then
45208: LD_VAR 0 8
45212: PPUSH
45213: CALL_OW 269
45217: NOT
45218: IFFALSE 45244
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45220: LD_VAR 0 8
45224: PPUSH
45225: LD_VAR 0 8
45229: PPUSH
45230: LD_VAR 0 2
45234: PPUSH
45235: CALL 46500 0 2
45239: PPUSH
45240: CALL_OW 431
// end ;
45244: GO 45205
45246: POP
45247: POP
// end ; for i = 1 to personel do
45248: LD_ADDR_VAR 0 8
45252: PUSH
45253: DOUBLE
45254: LD_INT 1
45256: DEC
45257: ST_TO_ADDR
45258: LD_VAR 0 6
45262: PUSH
45263: FOR_TO
45264: IFFALSE 46334
// begin if i > 4 then
45266: LD_VAR 0 8
45270: PUSH
45271: LD_INT 4
45273: GREATER
45274: IFFALSE 45278
// break ;
45276: GO 46334
// case i of 1 :
45278: LD_VAR 0 8
45282: PUSH
45283: LD_INT 1
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45371
45291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45292: LD_ADDR_VAR 0 12
45296: PUSH
45297: LD_VAR 0 18
45301: PPUSH
45302: LD_INT 22
45304: PUSH
45305: LD_VAR 0 16
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 58
45316: PUSH
45317: EMPTY
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 30
45325: PUSH
45326: LD_INT 32
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 30
45335: PUSH
45336: LD_INT 4
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 30
45345: PUSH
45346: LD_INT 5
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: PPUSH
45364: CALL_OW 72
45368: ST_TO_ADDR
45369: GO 45593
45371: LD_INT 2
45373: DOUBLE
45374: EQUAL
45375: IFTRUE 45379
45377: GO 45441
45379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45380: LD_ADDR_VAR 0 12
45384: PUSH
45385: LD_VAR 0 18
45389: PPUSH
45390: LD_INT 22
45392: PUSH
45393: LD_VAR 0 16
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 30
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 30
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PPUSH
45434: CALL_OW 72
45438: ST_TO_ADDR
45439: GO 45593
45441: LD_INT 3
45443: DOUBLE
45444: EQUAL
45445: IFTRUE 45449
45447: GO 45511
45449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45450: LD_ADDR_VAR 0 12
45454: PUSH
45455: LD_VAR 0 18
45459: PPUSH
45460: LD_INT 22
45462: PUSH
45463: LD_VAR 0 16
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 30
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 30
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PPUSH
45504: CALL_OW 72
45508: ST_TO_ADDR
45509: GO 45593
45511: LD_INT 4
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45592
45519: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45520: LD_ADDR_VAR 0 12
45524: PUSH
45525: LD_VAR 0 18
45529: PPUSH
45530: LD_INT 22
45532: PUSH
45533: LD_VAR 0 16
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 30
45547: PUSH
45548: LD_INT 6
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 30
45557: PUSH
45558: LD_INT 7
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 30
45567: PUSH
45568: LD_INT 8
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PPUSH
45585: CALL_OW 72
45589: ST_TO_ADDR
45590: GO 45593
45592: POP
// if i = 1 then
45593: LD_VAR 0 8
45597: PUSH
45598: LD_INT 1
45600: EQUAL
45601: IFFALSE 45712
// begin tmp := [ ] ;
45603: LD_ADDR_VAR 0 19
45607: PUSH
45608: EMPTY
45609: ST_TO_ADDR
// for j in f do
45610: LD_ADDR_VAR 0 9
45614: PUSH
45615: LD_VAR 0 12
45619: PUSH
45620: FOR_IN
45621: IFFALSE 45694
// if GetBType ( j ) = b_bunker then
45623: LD_VAR 0 9
45627: PPUSH
45628: CALL_OW 266
45632: PUSH
45633: LD_INT 32
45635: EQUAL
45636: IFFALSE 45663
// tmp := Insert ( tmp , 1 , j ) else
45638: LD_ADDR_VAR 0 19
45642: PUSH
45643: LD_VAR 0 19
45647: PPUSH
45648: LD_INT 1
45650: PPUSH
45651: LD_VAR 0 9
45655: PPUSH
45656: CALL_OW 2
45660: ST_TO_ADDR
45661: GO 45692
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45663: LD_ADDR_VAR 0 19
45667: PUSH
45668: LD_VAR 0 19
45672: PPUSH
45673: LD_VAR 0 19
45677: PUSH
45678: LD_INT 1
45680: PLUS
45681: PPUSH
45682: LD_VAR 0 9
45686: PPUSH
45687: CALL_OW 2
45691: ST_TO_ADDR
45692: GO 45620
45694: POP
45695: POP
// if tmp then
45696: LD_VAR 0 19
45700: IFFALSE 45712
// f := tmp ;
45702: LD_ADDR_VAR 0 12
45706: PUSH
45707: LD_VAR 0 19
45711: ST_TO_ADDR
// end ; x := personel [ i ] ;
45712: LD_ADDR_VAR 0 13
45716: PUSH
45717: LD_VAR 0 6
45721: PUSH
45722: LD_VAR 0 8
45726: ARRAY
45727: ST_TO_ADDR
// if x = - 1 then
45728: LD_VAR 0 13
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: EQUAL
45737: IFFALSE 45948
// begin for j in f do
45739: LD_ADDR_VAR 0 9
45743: PUSH
45744: LD_VAR 0 12
45748: PUSH
45749: FOR_IN
45750: IFFALSE 45944
// repeat InitHc ;
45752: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45756: LD_VAR 0 9
45760: PPUSH
45761: CALL_OW 266
45765: PUSH
45766: LD_INT 5
45768: EQUAL
45769: IFFALSE 45839
// begin if UnitsInside ( j ) < 3 then
45771: LD_VAR 0 9
45775: PPUSH
45776: CALL_OW 313
45780: PUSH
45781: LD_INT 3
45783: LESS
45784: IFFALSE 45820
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45786: LD_INT 0
45788: PPUSH
45789: LD_INT 5
45791: PUSH
45792: LD_INT 8
45794: PUSH
45795: LD_INT 9
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: PUSH
45803: LD_VAR 0 17
45807: ARRAY
45808: PPUSH
45809: LD_VAR 0 4
45813: PPUSH
45814: CALL_OW 380
45818: GO 45837
// PrepareHuman ( false , i , skill ) ;
45820: LD_INT 0
45822: PPUSH
45823: LD_VAR 0 8
45827: PPUSH
45828: LD_VAR 0 4
45832: PPUSH
45833: CALL_OW 380
// end else
45837: GO 45856
// PrepareHuman ( false , i , skill ) ;
45839: LD_INT 0
45841: PPUSH
45842: LD_VAR 0 8
45846: PPUSH
45847: LD_VAR 0 4
45851: PPUSH
45852: CALL_OW 380
// un := CreateHuman ;
45856: LD_ADDR_VAR 0 14
45860: PUSH
45861: CALL_OW 44
45865: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45866: LD_ADDR_VAR 0 7
45870: PUSH
45871: LD_VAR 0 7
45875: PPUSH
45876: LD_INT 1
45878: PPUSH
45879: LD_VAR 0 14
45883: PPUSH
45884: CALL_OW 2
45888: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45889: LD_VAR 0 14
45893: PPUSH
45894: LD_VAR 0 9
45898: PPUSH
45899: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45903: LD_VAR 0 9
45907: PPUSH
45908: CALL_OW 313
45912: PUSH
45913: LD_INT 6
45915: EQUAL
45916: IFTRUE 45940
45918: PUSH
45919: LD_VAR 0 9
45923: PPUSH
45924: CALL_OW 266
45928: PUSH
45929: LD_INT 32
45931: PUSH
45932: LD_INT 31
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: IN
45939: OR
45940: IFFALSE 45752
45942: GO 45749
45944: POP
45945: POP
// end else
45946: GO 46332
// for j = 1 to x do
45948: LD_ADDR_VAR 0 9
45952: PUSH
45953: DOUBLE
45954: LD_INT 1
45956: DEC
45957: ST_TO_ADDR
45958: LD_VAR 0 13
45962: PUSH
45963: FOR_TO
45964: IFFALSE 46330
// begin InitHc ;
45966: CALL_OW 19
// if not f then
45970: LD_VAR 0 12
45974: NOT
45975: IFFALSE 46064
// begin PrepareHuman ( false , i , skill ) ;
45977: LD_INT 0
45979: PPUSH
45980: LD_VAR 0 8
45984: PPUSH
45985: LD_VAR 0 4
45989: PPUSH
45990: CALL_OW 380
// un := CreateHuman ;
45994: LD_ADDR_VAR 0 14
45998: PUSH
45999: CALL_OW 44
46003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46004: LD_ADDR_VAR 0 7
46008: PUSH
46009: LD_VAR 0 7
46013: PPUSH
46014: LD_INT 1
46016: PPUSH
46017: LD_VAR 0 14
46021: PPUSH
46022: CALL_OW 2
46026: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46027: LD_VAR 0 14
46031: PPUSH
46032: LD_VAR 0 1
46036: PPUSH
46037: CALL_OW 250
46041: PPUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: CALL_OW 251
46051: PPUSH
46052: LD_INT 10
46054: PPUSH
46055: LD_INT 0
46057: PPUSH
46058: CALL_OW 50
// continue ;
46062: GO 45963
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46064: LD_VAR 0 12
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PPUSH
46073: CALL_OW 313
46077: IFFALSE 46105
46079: PUSH
46080: LD_VAR 0 12
46084: PUSH
46085: LD_INT 1
46087: ARRAY
46088: PPUSH
46089: CALL_OW 266
46093: PUSH
46094: LD_INT 32
46096: PUSH
46097: LD_INT 31
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: IN
46104: AND
46105: IFTRUE 46126
46107: PUSH
46108: LD_VAR 0 12
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: CALL_OW 313
46121: PUSH
46122: LD_INT 6
46124: EQUAL
46125: OR
46126: IFFALSE 46146
// f := Delete ( f , 1 ) ;
46128: LD_ADDR_VAR 0 12
46132: PUSH
46133: LD_VAR 0 12
46137: PPUSH
46138: LD_INT 1
46140: PPUSH
46141: CALL_OW 3
46145: ST_TO_ADDR
// if not f then
46146: LD_VAR 0 12
46150: NOT
46151: IFFALSE 46169
// begin x := x + 2 ;
46153: LD_ADDR_VAR 0 13
46157: PUSH
46158: LD_VAR 0 13
46162: PUSH
46163: LD_INT 2
46165: PLUS
46166: ST_TO_ADDR
// continue ;
46167: GO 45963
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46169: LD_VAR 0 12
46173: PUSH
46174: LD_INT 1
46176: ARRAY
46177: PPUSH
46178: CALL_OW 266
46182: PUSH
46183: LD_INT 5
46185: EQUAL
46186: IFFALSE 46260
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46188: LD_VAR 0 12
46192: PUSH
46193: LD_INT 1
46195: ARRAY
46196: PPUSH
46197: CALL_OW 313
46201: PUSH
46202: LD_INT 3
46204: LESS
46205: IFFALSE 46241
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46207: LD_INT 0
46209: PPUSH
46210: LD_INT 5
46212: PUSH
46213: LD_INT 8
46215: PUSH
46216: LD_INT 9
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: PUSH
46224: LD_VAR 0 17
46228: ARRAY
46229: PPUSH
46230: LD_VAR 0 4
46234: PPUSH
46235: CALL_OW 380
46239: GO 46258
// PrepareHuman ( false , i , skill ) ;
46241: LD_INT 0
46243: PPUSH
46244: LD_VAR 0 8
46248: PPUSH
46249: LD_VAR 0 4
46253: PPUSH
46254: CALL_OW 380
// end else
46258: GO 46277
// PrepareHuman ( false , i , skill ) ;
46260: LD_INT 0
46262: PPUSH
46263: LD_VAR 0 8
46267: PPUSH
46268: LD_VAR 0 4
46272: PPUSH
46273: CALL_OW 380
// un := CreateHuman ;
46277: LD_ADDR_VAR 0 14
46281: PUSH
46282: CALL_OW 44
46286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46287: LD_ADDR_VAR 0 7
46291: PUSH
46292: LD_VAR 0 7
46296: PPUSH
46297: LD_INT 1
46299: PPUSH
46300: LD_VAR 0 14
46304: PPUSH
46305: CALL_OW 2
46309: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46310: LD_VAR 0 14
46314: PPUSH
46315: LD_VAR 0 12
46319: PUSH
46320: LD_INT 1
46322: ARRAY
46323: PPUSH
46324: CALL_OW 52
// end ;
46328: GO 45963
46330: POP
46331: POP
// end ;
46332: GO 45263
46334: POP
46335: POP
// result := result ^ buildings ;
46336: LD_ADDR_VAR 0 7
46340: PUSH
46341: LD_VAR 0 7
46345: PUSH
46346: LD_VAR 0 18
46350: ADD
46351: ST_TO_ADDR
// end else
46352: GO 46495
// begin for i = 1 to personel do
46354: LD_ADDR_VAR 0 8
46358: PUSH
46359: DOUBLE
46360: LD_INT 1
46362: DEC
46363: ST_TO_ADDR
46364: LD_VAR 0 6
46368: PUSH
46369: FOR_TO
46370: IFFALSE 46493
// begin if i > 4 then
46372: LD_VAR 0 8
46376: PUSH
46377: LD_INT 4
46379: GREATER
46380: IFFALSE 46384
// break ;
46382: GO 46493
// x := personel [ i ] ;
46384: LD_ADDR_VAR 0 13
46388: PUSH
46389: LD_VAR 0 6
46393: PUSH
46394: LD_VAR 0 8
46398: ARRAY
46399: ST_TO_ADDR
// if x = - 1 then
46400: LD_VAR 0 13
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: EQUAL
46409: IFFALSE 46413
// continue ;
46411: GO 46369
// PrepareHuman ( false , i , skill ) ;
46413: LD_INT 0
46415: PPUSH
46416: LD_VAR 0 8
46420: PPUSH
46421: LD_VAR 0 4
46425: PPUSH
46426: CALL_OW 380
// un := CreateHuman ;
46430: LD_ADDR_VAR 0 14
46434: PUSH
46435: CALL_OW 44
46439: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46440: LD_VAR 0 14
46444: PPUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 250
46454: PPUSH
46455: LD_VAR 0 1
46459: PPUSH
46460: CALL_OW 251
46464: PPUSH
46465: LD_INT 10
46467: PPUSH
46468: LD_INT 0
46470: PPUSH
46471: CALL_OW 50
// result := result ^ un ;
46475: LD_ADDR_VAR 0 7
46479: PUSH
46480: LD_VAR 0 7
46484: PUSH
46485: LD_VAR 0 14
46489: ADD
46490: ST_TO_ADDR
// end ;
46491: GO 46369
46493: POP
46494: POP
// end ; end ;
46495: LD_VAR 0 7
46499: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46500: LD_INT 0
46502: PPUSH
46503: PPUSH
46504: PPUSH
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
46513: PPUSH
46514: PPUSH
46515: PPUSH
46516: PPUSH
46517: PPUSH
// result := false ;
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_INT 0
46525: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46526: LD_VAR 0 1
46530: NOT
46531: IFTRUE 46556
46533: PUSH
46534: LD_VAR 0 1
46538: PPUSH
46539: CALL_OW 266
46543: PUSH
46544: LD_INT 32
46546: PUSH
46547: LD_INT 33
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: IN
46554: NOT
46555: OR
46556: IFFALSE 46560
// exit ;
46558: GO 47695
// nat := GetNation ( tower ) ;
46560: LD_ADDR_VAR 0 12
46564: PUSH
46565: LD_VAR 0 1
46569: PPUSH
46570: CALL_OW 248
46574: ST_TO_ADDR
// side := GetSide ( tower ) ;
46575: LD_ADDR_VAR 0 16
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 255
46589: ST_TO_ADDR
// x := GetX ( tower ) ;
46590: LD_ADDR_VAR 0 10
46594: PUSH
46595: LD_VAR 0 1
46599: PPUSH
46600: CALL_OW 250
46604: ST_TO_ADDR
// y := GetY ( tower ) ;
46605: LD_ADDR_VAR 0 11
46609: PUSH
46610: LD_VAR 0 1
46614: PPUSH
46615: CALL_OW 251
46619: ST_TO_ADDR
// if not x or not y then
46620: LD_VAR 0 10
46624: NOT
46625: IFTRUE 46634
46627: PUSH
46628: LD_VAR 0 11
46632: NOT
46633: OR
46634: IFFALSE 46638
// exit ;
46636: GO 47695
// weapon := 0 ;
46638: LD_ADDR_VAR 0 18
46642: PUSH
46643: LD_INT 0
46645: ST_TO_ADDR
// fac_list := [ ] ;
46646: LD_ADDR_VAR 0 17
46650: PUSH
46651: EMPTY
46652: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46653: LD_ADDR_VAR 0 6
46657: PUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: CALL_OW 274
46667: PPUSH
46668: LD_VAR 0 2
46672: PPUSH
46673: LD_INT 0
46675: PPUSH
46676: CALL 44230 0 3
46680: PPUSH
46681: LD_INT 30
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PPUSH
46691: CALL_OW 72
46695: ST_TO_ADDR
// if not factories then
46696: LD_VAR 0 6
46700: NOT
46701: IFFALSE 46705
// exit ;
46703: GO 47695
// for i in factories do
46705: LD_ADDR_VAR 0 8
46709: PUSH
46710: LD_VAR 0 6
46714: PUSH
46715: FOR_IN
46716: IFFALSE 46741
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46718: LD_ADDR_VAR 0 17
46722: PUSH
46723: LD_VAR 0 17
46727: PUSH
46728: LD_VAR 0 8
46732: PPUSH
46733: CALL_OW 478
46737: UNION
46738: ST_TO_ADDR
46739: GO 46715
46741: POP
46742: POP
// if not fac_list then
46743: LD_VAR 0 17
46747: NOT
46748: IFFALSE 46752
// exit ;
46750: GO 47695
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46752: LD_ADDR_VAR 0 5
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: LD_INT 5
46762: PUSH
46763: LD_INT 9
46765: PUSH
46766: LD_INT 10
46768: PUSH
46769: LD_INT 6
46771: PUSH
46772: LD_INT 7
46774: PUSH
46775: LD_INT 11
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 27
46789: PUSH
46790: LD_INT 28
46792: PUSH
46793: LD_INT 26
46795: PUSH
46796: LD_INT 30
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 43
46807: PUSH
46808: LD_INT 44
46810: PUSH
46811: LD_INT 46
46813: PUSH
46814: LD_INT 45
46816: PUSH
46817: LD_INT 47
46819: PUSH
46820: LD_INT 49
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: PUSH
46836: LD_VAR 0 12
46840: ARRAY
46841: ST_TO_ADDR
// list := list isect fac_list ;
46842: LD_ADDR_VAR 0 5
46846: PUSH
46847: LD_VAR 0 5
46851: PUSH
46852: LD_VAR 0 17
46856: ISECT
46857: ST_TO_ADDR
// if not list then
46858: LD_VAR 0 5
46862: NOT
46863: IFFALSE 46867
// exit ;
46865: GO 47695
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46867: LD_VAR 0 12
46871: PUSH
46872: LD_INT 3
46874: EQUAL
46875: IFFALSE 46887
46877: PUSH
46878: LD_INT 49
46880: PUSH
46881: LD_VAR 0 5
46885: IN
46886: AND
46887: IFFALSE 46907
46889: PUSH
46890: LD_INT 31
46892: PPUSH
46893: LD_VAR 0 16
46897: PPUSH
46898: CALL_OW 321
46902: PUSH
46903: LD_INT 2
46905: EQUAL
46906: AND
46907: IFFALSE 46967
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46909: LD_INT 22
46911: PUSH
46912: LD_VAR 0 16
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 35
46923: PUSH
46924: LD_INT 49
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 91
46933: PUSH
46934: LD_VAR 0 1
46938: PUSH
46939: LD_INT 10
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: PPUSH
46952: CALL_OW 69
46956: NOT
46957: IFFALSE 46967
// weapon := ru_time_lapser ;
46959: LD_ADDR_VAR 0 18
46963: PUSH
46964: LD_INT 49
46966: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46967: LD_VAR 0 12
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: IN
46982: IFFALSE 47006
46984: PUSH
46985: LD_INT 11
46987: PUSH
46988: LD_VAR 0 5
46992: IN
46993: IFTRUE 47005
46995: PUSH
46996: LD_INT 30
46998: PUSH
46999: LD_VAR 0 5
47003: IN
47004: OR
47005: AND
47006: IFFALSE 47026
47008: PUSH
47009: LD_INT 6
47011: PPUSH
47012: LD_VAR 0 16
47016: PPUSH
47017: CALL_OW 321
47021: PUSH
47022: LD_INT 2
47024: EQUAL
47025: AND
47026: IFFALSE 47193
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47028: LD_INT 22
47030: PUSH
47031: LD_VAR 0 16
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 35
47045: PUSH
47046: LD_INT 11
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 35
47055: PUSH
47056: LD_INT 30
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 91
47070: PUSH
47071: LD_VAR 0 1
47075: PUSH
47076: LD_INT 18
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: PPUSH
47089: CALL_OW 69
47093: NOT
47094: IFFALSE 47170
47096: PUSH
47097: LD_INT 22
47099: PUSH
47100: LD_VAR 0 16
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 30
47114: PUSH
47115: LD_INT 32
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 30
47124: PUSH
47125: LD_INT 33
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 91
47139: PUSH
47140: LD_VAR 0 1
47144: PUSH
47145: LD_INT 12
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: PPUSH
47161: CALL_OW 69
47165: PUSH
47166: LD_INT 2
47168: GREATER
47169: AND
47170: IFFALSE 47193
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47172: LD_ADDR_VAR 0 18
47176: PUSH
47177: LD_INT 11
47179: PUSH
47180: LD_INT 30
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_VAR 0 12
47191: ARRAY
47192: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47193: LD_VAR 0 18
47197: NOT
47198: IFFALSE 47218
47200: PUSH
47201: LD_INT 40
47203: PPUSH
47204: LD_VAR 0 16
47208: PPUSH
47209: CALL_OW 321
47213: PUSH
47214: LD_INT 2
47216: EQUAL
47217: AND
47218: IFFALSE 47254
47220: PUSH
47221: LD_INT 7
47223: PUSH
47224: LD_VAR 0 5
47228: IN
47229: IFTRUE 47241
47231: PUSH
47232: LD_INT 28
47234: PUSH
47235: LD_VAR 0 5
47239: IN
47240: OR
47241: IFTRUE 47253
47243: PUSH
47244: LD_INT 45
47246: PUSH
47247: LD_VAR 0 5
47251: IN
47252: OR
47253: AND
47254: IFFALSE 47508
// begin hex := GetHexInfo ( x , y ) ;
47256: LD_ADDR_VAR 0 4
47260: PUSH
47261: LD_VAR 0 10
47265: PPUSH
47266: LD_VAR 0 11
47270: PPUSH
47271: CALL_OW 546
47275: ST_TO_ADDR
// if hex [ 1 ] then
47276: LD_VAR 0 4
47280: PUSH
47281: LD_INT 1
47283: ARRAY
47284: IFFALSE 47288
// exit ;
47286: GO 47695
// height := hex [ 2 ] ;
47288: LD_ADDR_VAR 0 15
47292: PUSH
47293: LD_VAR 0 4
47297: PUSH
47298: LD_INT 2
47300: ARRAY
47301: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47302: LD_ADDR_VAR 0 14
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// for i in tmp do
47325: LD_ADDR_VAR 0 8
47329: PUSH
47330: LD_VAR 0 14
47334: PUSH
47335: FOR_IN
47336: IFFALSE 47506
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_VAR 0 10
47347: PPUSH
47348: LD_VAR 0 8
47352: PPUSH
47353: LD_INT 5
47355: PPUSH
47356: CALL_OW 272
47360: PUSH
47361: LD_VAR 0 11
47365: PPUSH
47366: LD_VAR 0 8
47370: PPUSH
47371: LD_INT 5
47373: PPUSH
47374: CALL_OW 273
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47383: LD_VAR 0 9
47387: PUSH
47388: LD_INT 1
47390: ARRAY
47391: PPUSH
47392: LD_VAR 0 9
47396: PUSH
47397: LD_INT 2
47399: ARRAY
47400: PPUSH
47401: CALL_OW 488
47405: IFFALSE 47504
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47407: LD_ADDR_VAR 0 4
47411: PUSH
47412: LD_VAR 0 9
47416: PUSH
47417: LD_INT 1
47419: ARRAY
47420: PPUSH
47421: LD_VAR 0 9
47425: PUSH
47426: LD_INT 2
47428: ARRAY
47429: PPUSH
47430: CALL_OW 546
47434: ST_TO_ADDR
// if hex [ 1 ] then
47435: LD_VAR 0 4
47439: PUSH
47440: LD_INT 1
47442: ARRAY
47443: IFFALSE 47447
// continue ;
47445: GO 47335
// h := hex [ 2 ] ;
47447: LD_ADDR_VAR 0 13
47451: PUSH
47452: LD_VAR 0 4
47456: PUSH
47457: LD_INT 2
47459: ARRAY
47460: ST_TO_ADDR
// if h + 7 < height then
47461: LD_VAR 0 13
47465: PUSH
47466: LD_INT 7
47468: PLUS
47469: PUSH
47470: LD_VAR 0 15
47474: LESS
47475: IFFALSE 47504
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47477: LD_ADDR_VAR 0 18
47481: PUSH
47482: LD_INT 7
47484: PUSH
47485: LD_INT 28
47487: PUSH
47488: LD_INT 45
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: PUSH
47496: LD_VAR 0 12
47500: ARRAY
47501: ST_TO_ADDR
// break ;
47502: GO 47506
// end ; end ; end ;
47504: GO 47335
47506: POP
47507: POP
// end ; if not weapon then
47508: LD_VAR 0 18
47512: NOT
47513: IFFALSE 47573
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47515: LD_ADDR_VAR 0 5
47519: PUSH
47520: LD_VAR 0 5
47524: PUSH
47525: LD_INT 11
47527: PUSH
47528: LD_INT 30
47530: PUSH
47531: LD_INT 49
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: DIFF
47539: ST_TO_ADDR
// if not list then
47540: LD_VAR 0 5
47544: NOT
47545: IFFALSE 47549
// exit ;
47547: GO 47695
// weapon := list [ rand ( 1 , list ) ] ;
47549: LD_ADDR_VAR 0 18
47553: PUSH
47554: LD_VAR 0 5
47558: PUSH
47559: LD_INT 1
47561: PPUSH
47562: LD_VAR 0 5
47566: PPUSH
47567: CALL_OW 12
47571: ARRAY
47572: ST_TO_ADDR
// end ; if weapon then
47573: LD_VAR 0 18
47577: IFFALSE 47695
// begin tmp := CostOfWeapon ( weapon ) ;
47579: LD_ADDR_VAR 0 14
47583: PUSH
47584: LD_VAR 0 18
47588: PPUSH
47589: CALL_OW 451
47593: ST_TO_ADDR
// j := GetBase ( tower ) ;
47594: LD_ADDR_VAR 0 9
47598: PUSH
47599: LD_VAR 0 1
47603: PPUSH
47604: CALL_OW 274
47608: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47609: LD_VAR 0 9
47613: PPUSH
47614: LD_INT 1
47616: PPUSH
47617: CALL_OW 275
47621: PUSH
47622: LD_VAR 0 14
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: GREATEREQUAL
47631: IFFALSE 47657
47633: PUSH
47634: LD_VAR 0 9
47638: PPUSH
47639: LD_INT 2
47641: PPUSH
47642: CALL_OW 275
47646: PUSH
47647: LD_VAR 0 14
47651: PUSH
47652: LD_INT 2
47654: ARRAY
47655: GREATEREQUAL
47656: AND
47657: IFFALSE 47683
47659: PUSH
47660: LD_VAR 0 9
47664: PPUSH
47665: LD_INT 3
47667: PPUSH
47668: CALL_OW 275
47672: PUSH
47673: LD_VAR 0 14
47677: PUSH
47678: LD_INT 3
47680: ARRAY
47681: GREATEREQUAL
47682: AND
47683: IFFALSE 47695
// result := weapon ;
47685: LD_ADDR_VAR 0 3
47689: PUSH
47690: LD_VAR 0 18
47694: ST_TO_ADDR
// end ; end ;
47695: LD_VAR 0 3
47699: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47700: LD_INT 0
47702: PPUSH
47703: PPUSH
// result := true ;
47704: LD_ADDR_VAR 0 3
47708: PUSH
47709: LD_INT 1
47711: ST_TO_ADDR
// if array1 = array2 then
47712: LD_VAR 0 1
47716: PUSH
47717: LD_VAR 0 2
47721: EQUAL
47722: IFFALSE 47782
// begin for i = 1 to array1 do
47724: LD_ADDR_VAR 0 4
47728: PUSH
47729: DOUBLE
47730: LD_INT 1
47732: DEC
47733: ST_TO_ADDR
47734: LD_VAR 0 1
47738: PUSH
47739: FOR_TO
47740: IFFALSE 47778
// if array1 [ i ] <> array2 [ i ] then
47742: LD_VAR 0 1
47746: PUSH
47747: LD_VAR 0 4
47751: ARRAY
47752: PUSH
47753: LD_VAR 0 2
47757: PUSH
47758: LD_VAR 0 4
47762: ARRAY
47763: NONEQUAL
47764: IFFALSE 47776
// begin result := false ;
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: LD_INT 0
47773: ST_TO_ADDR
// break ;
47774: GO 47778
// end ;
47776: GO 47739
47778: POP
47779: POP
// end else
47780: GO 47790
// result := false ;
47782: LD_ADDR_VAR 0 3
47786: PUSH
47787: LD_INT 0
47789: ST_TO_ADDR
// end ;
47790: LD_VAR 0 3
47794: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47795: LD_INT 0
47797: PPUSH
47798: PPUSH
// if not array1 or not array2 then
47799: LD_VAR 0 1
47803: NOT
47804: IFTRUE 47813
47806: PUSH
47807: LD_VAR 0 2
47811: NOT
47812: OR
47813: IFFALSE 47817
// exit ;
47815: GO 47881
// result := true ;
47817: LD_ADDR_VAR 0 3
47821: PUSH
47822: LD_INT 1
47824: ST_TO_ADDR
// for i = 1 to array1 do
47825: LD_ADDR_VAR 0 4
47829: PUSH
47830: DOUBLE
47831: LD_INT 1
47833: DEC
47834: ST_TO_ADDR
47835: LD_VAR 0 1
47839: PUSH
47840: FOR_TO
47841: IFFALSE 47879
// if array1 [ i ] <> array2 [ i ] then
47843: LD_VAR 0 1
47847: PUSH
47848: LD_VAR 0 4
47852: ARRAY
47853: PUSH
47854: LD_VAR 0 2
47858: PUSH
47859: LD_VAR 0 4
47863: ARRAY
47864: NONEQUAL
47865: IFFALSE 47877
// begin result := false ;
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: LD_INT 0
47874: ST_TO_ADDR
// break ;
47875: GO 47879
// end ;
47877: GO 47840
47879: POP
47880: POP
// end ;
47881: LD_VAR 0 3
47885: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47886: LD_INT 0
47888: PPUSH
47889: PPUSH
47890: PPUSH
// pom := GetBase ( fac ) ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 274
47905: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47906: LD_ADDR_VAR 0 4
47910: PUSH
47911: LD_VAR 0 2
47915: PUSH
47916: LD_INT 1
47918: ARRAY
47919: PPUSH
47920: LD_VAR 0 2
47924: PUSH
47925: LD_INT 2
47927: ARRAY
47928: PPUSH
47929: LD_VAR 0 2
47933: PUSH
47934: LD_INT 3
47936: ARRAY
47937: PPUSH
47938: LD_VAR 0 2
47942: PUSH
47943: LD_INT 4
47945: ARRAY
47946: PPUSH
47947: CALL_OW 449
47951: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47952: LD_ADDR_VAR 0 3
47956: PUSH
47957: LD_VAR 0 5
47961: PPUSH
47962: LD_INT 1
47964: PPUSH
47965: CALL_OW 275
47969: PUSH
47970: LD_VAR 0 4
47974: PUSH
47975: LD_INT 1
47977: ARRAY
47978: GREATEREQUAL
47979: IFFALSE 48005
47981: PUSH
47982: LD_VAR 0 5
47986: PPUSH
47987: LD_INT 2
47989: PPUSH
47990: CALL_OW 275
47994: PUSH
47995: LD_VAR 0 4
47999: PUSH
48000: LD_INT 2
48002: ARRAY
48003: GREATEREQUAL
48004: AND
48005: IFFALSE 48031
48007: PUSH
48008: LD_VAR 0 5
48012: PPUSH
48013: LD_INT 3
48015: PPUSH
48016: CALL_OW 275
48020: PUSH
48021: LD_VAR 0 4
48025: PUSH
48026: LD_INT 3
48028: ARRAY
48029: GREATEREQUAL
48030: AND
48031: ST_TO_ADDR
// end ;
48032: LD_VAR 0 3
48036: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48037: LD_INT 0
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
// pom := GetBase ( building ) ;
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_VAR 0 1
48052: PPUSH
48053: CALL_OW 274
48057: ST_TO_ADDR
// if not pom then
48058: LD_VAR 0 3
48062: NOT
48063: IFFALSE 48067
// exit ;
48065: GO 48241
// btype := GetBType ( building ) ;
48067: LD_ADDR_VAR 0 5
48071: PUSH
48072: LD_VAR 0 1
48076: PPUSH
48077: CALL_OW 266
48081: ST_TO_ADDR
// if btype = b_armoury then
48082: LD_VAR 0 5
48086: PUSH
48087: LD_INT 4
48089: EQUAL
48090: IFFALSE 48100
// btype := b_barracks ;
48092: LD_ADDR_VAR 0 5
48096: PUSH
48097: LD_INT 5
48099: ST_TO_ADDR
// if btype = b_depot then
48100: LD_VAR 0 5
48104: PUSH
48105: LD_INT 0
48107: EQUAL
48108: IFFALSE 48118
// btype := b_warehouse ;
48110: LD_ADDR_VAR 0 5
48114: PUSH
48115: LD_INT 1
48117: ST_TO_ADDR
// if btype = b_workshop then
48118: LD_VAR 0 5
48122: PUSH
48123: LD_INT 2
48125: EQUAL
48126: IFFALSE 48136
// btype := b_factory ;
48128: LD_ADDR_VAR 0 5
48132: PUSH
48133: LD_INT 3
48135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48136: LD_ADDR_VAR 0 4
48140: PUSH
48141: LD_VAR 0 5
48145: PPUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 248
48155: PPUSH
48156: CALL_OW 450
48160: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48161: LD_ADDR_VAR 0 2
48165: PUSH
48166: LD_VAR 0 3
48170: PPUSH
48171: LD_INT 1
48173: PPUSH
48174: CALL_OW 275
48178: PUSH
48179: LD_VAR 0 4
48183: PUSH
48184: LD_INT 1
48186: ARRAY
48187: GREATEREQUAL
48188: IFFALSE 48214
48190: PUSH
48191: LD_VAR 0 3
48195: PPUSH
48196: LD_INT 2
48198: PPUSH
48199: CALL_OW 275
48203: PUSH
48204: LD_VAR 0 4
48208: PUSH
48209: LD_INT 2
48211: ARRAY
48212: GREATEREQUAL
48213: AND
48214: IFFALSE 48240
48216: PUSH
48217: LD_VAR 0 3
48221: PPUSH
48222: LD_INT 3
48224: PPUSH
48225: CALL_OW 275
48229: PUSH
48230: LD_VAR 0 4
48234: PUSH
48235: LD_INT 3
48237: ARRAY
48238: GREATEREQUAL
48239: AND
48240: ST_TO_ADDR
// end ;
48241: LD_VAR 0 2
48245: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48246: LD_INT 0
48248: PPUSH
48249: PPUSH
48250: PPUSH
// pom := GetBase ( building ) ;
48251: LD_ADDR_VAR 0 4
48255: PUSH
48256: LD_VAR 0 1
48260: PPUSH
48261: CALL_OW 274
48265: ST_TO_ADDR
// if not pom then
48266: LD_VAR 0 4
48270: NOT
48271: IFFALSE 48275
// exit ;
48273: GO 48380
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48275: LD_ADDR_VAR 0 5
48279: PUSH
48280: LD_VAR 0 2
48284: PPUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 248
48294: PPUSH
48295: CALL_OW 450
48299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48300: LD_ADDR_VAR 0 3
48304: PUSH
48305: LD_VAR 0 4
48309: PPUSH
48310: LD_INT 1
48312: PPUSH
48313: CALL_OW 275
48317: PUSH
48318: LD_VAR 0 5
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: GREATEREQUAL
48327: IFFALSE 48353
48329: PUSH
48330: LD_VAR 0 4
48334: PPUSH
48335: LD_INT 2
48337: PPUSH
48338: CALL_OW 275
48342: PUSH
48343: LD_VAR 0 5
48347: PUSH
48348: LD_INT 2
48350: ARRAY
48351: GREATEREQUAL
48352: AND
48353: IFFALSE 48379
48355: PUSH
48356: LD_VAR 0 4
48360: PPUSH
48361: LD_INT 3
48363: PPUSH
48364: CALL_OW 275
48368: PUSH
48369: LD_VAR 0 5
48373: PUSH
48374: LD_INT 3
48376: ARRAY
48377: GREATEREQUAL
48378: AND
48379: ST_TO_ADDR
// end ;
48380: LD_VAR 0 3
48384: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48385: LD_INT 0
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
// result := false ;
48398: LD_ADDR_VAR 0 8
48402: PUSH
48403: LD_INT 0
48405: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48406: LD_VAR 0 5
48410: NOT
48411: IFTRUE 48420
48413: PUSH
48414: LD_VAR 0 1
48418: NOT
48419: OR
48420: IFTRUE 48429
48422: PUSH
48423: LD_VAR 0 2
48427: NOT
48428: OR
48429: IFTRUE 48438
48431: PUSH
48432: LD_VAR 0 3
48436: NOT
48437: OR
48438: IFFALSE 48442
// exit ;
48440: GO 49268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48442: LD_ADDR_VAR 0 14
48446: PUSH
48447: LD_VAR 0 1
48451: PPUSH
48452: LD_VAR 0 2
48456: PPUSH
48457: LD_VAR 0 3
48461: PPUSH
48462: LD_VAR 0 4
48466: PPUSH
48467: LD_VAR 0 5
48471: PUSH
48472: LD_INT 1
48474: ARRAY
48475: PPUSH
48476: CALL_OW 248
48480: PPUSH
48481: LD_INT 0
48483: PPUSH
48484: CALL 50549 0 6
48488: ST_TO_ADDR
// if not hexes then
48489: LD_VAR 0 14
48493: NOT
48494: IFFALSE 48498
// exit ;
48496: GO 49268
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48498: LD_ADDR_VAR 0 17
48502: PUSH
48503: LD_VAR 0 5
48507: PPUSH
48508: LD_INT 22
48510: PUSH
48511: LD_VAR 0 13
48515: PPUSH
48516: CALL_OW 255
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 30
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 30
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PPUSH
48557: CALL_OW 72
48561: ST_TO_ADDR
// for i = 1 to hexes do
48562: LD_ADDR_VAR 0 9
48566: PUSH
48567: DOUBLE
48568: LD_INT 1
48570: DEC
48571: ST_TO_ADDR
48572: LD_VAR 0 14
48576: PUSH
48577: FOR_TO
48578: IFFALSE 49266
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48580: LD_ADDR_VAR 0 13
48584: PUSH
48585: LD_VAR 0 14
48589: PUSH
48590: LD_VAR 0 9
48594: ARRAY
48595: PUSH
48596: LD_INT 1
48598: ARRAY
48599: PPUSH
48600: LD_VAR 0 14
48604: PUSH
48605: LD_VAR 0 9
48609: ARRAY
48610: PUSH
48611: LD_INT 2
48613: ARRAY
48614: PPUSH
48615: CALL_OW 428
48619: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48620: LD_VAR 0 14
48624: PUSH
48625: LD_VAR 0 9
48629: ARRAY
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: LD_VAR 0 14
48639: PUSH
48640: LD_VAR 0 9
48644: ARRAY
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: PPUSH
48650: CALL_OW 351
48654: IFTRUE 48693
48656: PUSH
48657: LD_VAR 0 14
48661: PUSH
48662: LD_VAR 0 9
48666: ARRAY
48667: PUSH
48668: LD_INT 1
48670: ARRAY
48671: PPUSH
48672: LD_VAR 0 14
48676: PUSH
48677: LD_VAR 0 9
48681: ARRAY
48682: PUSH
48683: LD_INT 2
48685: ARRAY
48686: PPUSH
48687: CALL_OW 488
48691: NOT
48692: OR
48693: IFTRUE 48710
48695: PUSH
48696: LD_VAR 0 13
48700: PPUSH
48701: CALL_OW 247
48705: PUSH
48706: LD_INT 3
48708: EQUAL
48709: OR
48710: IFFALSE 48716
// exit ;
48712: POP
48713: POP
48714: GO 49268
// if not tmp then
48716: LD_VAR 0 13
48720: NOT
48721: IFFALSE 48725
// continue ;
48723: GO 48577
// result := true ;
48725: LD_ADDR_VAR 0 8
48729: PUSH
48730: LD_INT 1
48732: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48733: LD_VAR 0 6
48737: IFFALSE 48754
48739: PUSH
48740: LD_VAR 0 13
48744: PPUSH
48745: CALL_OW 247
48749: PUSH
48750: LD_INT 2
48752: EQUAL
48753: AND
48754: IFFALSE 48771
48756: PUSH
48757: LD_VAR 0 13
48761: PPUSH
48762: CALL_OW 263
48766: PUSH
48767: LD_INT 1
48769: EQUAL
48770: AND
48771: IFFALSE 48935
// begin if IsDrivenBy ( tmp ) then
48773: LD_VAR 0 13
48777: PPUSH
48778: CALL_OW 311
48782: IFFALSE 48786
// continue ;
48784: GO 48577
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48786: LD_VAR 0 6
48790: PPUSH
48791: LD_INT 3
48793: PUSH
48794: LD_INT 60
48796: PUSH
48797: EMPTY
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 55
48809: PUSH
48810: EMPTY
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PPUSH
48821: CALL_OW 72
48825: IFFALSE 48933
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48827: LD_ADDR_VAR 0 18
48831: PUSH
48832: LD_VAR 0 6
48836: PPUSH
48837: LD_INT 3
48839: PUSH
48840: LD_INT 60
48842: PUSH
48843: EMPTY
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 55
48855: PUSH
48856: EMPTY
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PPUSH
48867: CALL_OW 72
48871: PUSH
48872: LD_INT 1
48874: ARRAY
48875: ST_TO_ADDR
// if IsInUnit ( driver ) then
48876: LD_VAR 0 18
48880: PPUSH
48881: CALL_OW 310
48885: IFFALSE 48896
// ComExit ( driver ) ;
48887: LD_VAR 0 18
48891: PPUSH
48892: CALL 74549 0 1
// AddComEnterUnit ( driver , tmp ) ;
48896: LD_VAR 0 18
48900: PPUSH
48901: LD_VAR 0 13
48905: PPUSH
48906: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48910: LD_VAR 0 18
48914: PPUSH
48915: LD_VAR 0 7
48919: PPUSH
48920: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48924: LD_VAR 0 18
48928: PPUSH
48929: CALL_OW 181
// end ; continue ;
48933: GO 48577
// end ; if not cleaners or not tmp in cleaners then
48935: LD_VAR 0 6
48939: NOT
48940: IFTRUE 48955
48942: PUSH
48943: LD_VAR 0 13
48947: PUSH
48948: LD_VAR 0 6
48952: IN
48953: NOT
48954: OR
48955: IFFALSE 49264
// begin if dep then
48957: LD_VAR 0 17
48961: IFFALSE 49097
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48963: LD_ADDR_VAR 0 16
48967: PUSH
48968: LD_VAR 0 17
48972: PUSH
48973: LD_INT 1
48975: ARRAY
48976: PPUSH
48977: CALL_OW 250
48981: PPUSH
48982: LD_VAR 0 17
48986: PUSH
48987: LD_INT 1
48989: ARRAY
48990: PPUSH
48991: CALL_OW 254
48995: PPUSH
48996: LD_INT 5
48998: PPUSH
48999: CALL_OW 272
49003: PUSH
49004: LD_VAR 0 17
49008: PUSH
49009: LD_INT 1
49011: ARRAY
49012: PPUSH
49013: CALL_OW 251
49017: PPUSH
49018: LD_VAR 0 17
49022: PUSH
49023: LD_INT 1
49025: ARRAY
49026: PPUSH
49027: CALL_OW 254
49031: PPUSH
49032: LD_INT 5
49034: PPUSH
49035: CALL_OW 273
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49044: LD_VAR 0 16
49048: PUSH
49049: LD_INT 1
49051: ARRAY
49052: PPUSH
49053: LD_VAR 0 16
49057: PUSH
49058: LD_INT 2
49060: ARRAY
49061: PPUSH
49062: CALL_OW 488
49066: IFFALSE 49097
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49068: LD_VAR 0 13
49072: PPUSH
49073: LD_VAR 0 16
49077: PUSH
49078: LD_INT 1
49080: ARRAY
49081: PPUSH
49082: LD_VAR 0 16
49086: PUSH
49087: LD_INT 2
49089: ARRAY
49090: PPUSH
49091: CALL_OW 111
// continue ;
49095: GO 48577
// end ; end ; r := GetDir ( tmp ) ;
49097: LD_ADDR_VAR 0 15
49101: PUSH
49102: LD_VAR 0 13
49106: PPUSH
49107: CALL_OW 254
49111: ST_TO_ADDR
// if r = 5 then
49112: LD_VAR 0 15
49116: PUSH
49117: LD_INT 5
49119: EQUAL
49120: IFFALSE 49130
// r := 0 ;
49122: LD_ADDR_VAR 0 15
49126: PUSH
49127: LD_INT 0
49129: ST_TO_ADDR
// for j = r to 5 do
49130: LD_ADDR_VAR 0 10
49134: PUSH
49135: DOUBLE
49136: LD_VAR 0 15
49140: DEC
49141: ST_TO_ADDR
49142: LD_INT 5
49144: PUSH
49145: FOR_TO
49146: IFFALSE 49262
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49148: LD_ADDR_VAR 0 11
49152: PUSH
49153: LD_VAR 0 13
49157: PPUSH
49158: CALL_OW 250
49162: PPUSH
49163: LD_VAR 0 10
49167: PPUSH
49168: LD_INT 2
49170: PPUSH
49171: CALL_OW 272
49175: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49176: LD_ADDR_VAR 0 12
49180: PUSH
49181: LD_VAR 0 13
49185: PPUSH
49186: CALL_OW 251
49190: PPUSH
49191: LD_VAR 0 10
49195: PPUSH
49196: LD_INT 2
49198: PPUSH
49199: CALL_OW 273
49203: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49204: LD_VAR 0 11
49208: PPUSH
49209: LD_VAR 0 12
49213: PPUSH
49214: CALL_OW 488
49218: IFFALSE 49237
49220: PUSH
49221: LD_VAR 0 11
49225: PPUSH
49226: LD_VAR 0 12
49230: PPUSH
49231: CALL_OW 428
49235: NOT
49236: AND
49237: IFFALSE 49260
// begin ComMoveXY ( tmp , _x , _y ) ;
49239: LD_VAR 0 13
49243: PPUSH
49244: LD_VAR 0 11
49248: PPUSH
49249: LD_VAR 0 12
49253: PPUSH
49254: CALL_OW 111
// break ;
49258: GO 49262
// end ; end ;
49260: GO 49145
49262: POP
49263: POP
// end ; end ;
49264: GO 48577
49266: POP
49267: POP
// end ;
49268: LD_VAR 0 8
49272: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49273: LD_INT 0
49275: PPUSH
// result := true ;
49276: LD_ADDR_VAR 0 3
49280: PUSH
49281: LD_INT 1
49283: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49284: LD_VAR 0 2
49288: PUSH
49289: LD_INT 24
49291: DOUBLE
49292: EQUAL
49293: IFTRUE 49303
49295: LD_INT 33
49297: DOUBLE
49298: EQUAL
49299: IFTRUE 49303
49301: GO 49328
49303: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49304: LD_ADDR_VAR 0 3
49308: PUSH
49309: LD_INT 32
49311: PPUSH
49312: LD_VAR 0 1
49316: PPUSH
49317: CALL_OW 321
49321: PUSH
49322: LD_INT 2
49324: EQUAL
49325: ST_TO_ADDR
49326: GO 49644
49328: LD_INT 20
49330: DOUBLE
49331: EQUAL
49332: IFTRUE 49336
49334: GO 49361
49336: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49337: LD_ADDR_VAR 0 3
49341: PUSH
49342: LD_INT 6
49344: PPUSH
49345: LD_VAR 0 1
49349: PPUSH
49350: CALL_OW 321
49354: PUSH
49355: LD_INT 2
49357: EQUAL
49358: ST_TO_ADDR
49359: GO 49644
49361: LD_INT 22
49363: DOUBLE
49364: EQUAL
49365: IFTRUE 49375
49367: LD_INT 36
49369: DOUBLE
49370: EQUAL
49371: IFTRUE 49375
49373: GO 49400
49375: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49376: LD_ADDR_VAR 0 3
49380: PUSH
49381: LD_INT 15
49383: PPUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 321
49393: PUSH
49394: LD_INT 2
49396: EQUAL
49397: ST_TO_ADDR
49398: GO 49644
49400: LD_INT 30
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49408
49406: GO 49433
49408: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_INT 20
49416: PPUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: CALL_OW 321
49426: PUSH
49427: LD_INT 2
49429: EQUAL
49430: ST_TO_ADDR
49431: GO 49644
49433: LD_INT 28
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49447
49439: LD_INT 21
49441: DOUBLE
49442: EQUAL
49443: IFTRUE 49447
49445: GO 49472
49447: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49448: LD_ADDR_VAR 0 3
49452: PUSH
49453: LD_INT 21
49455: PPUSH
49456: LD_VAR 0 1
49460: PPUSH
49461: CALL_OW 321
49465: PUSH
49466: LD_INT 2
49468: EQUAL
49469: ST_TO_ADDR
49470: GO 49644
49472: LD_INT 16
49474: DOUBLE
49475: EQUAL
49476: IFTRUE 49480
49478: GO 49505
49480: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_INT 84
49488: PPUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 321
49498: PUSH
49499: LD_INT 2
49501: EQUAL
49502: ST_TO_ADDR
49503: GO 49644
49505: LD_INT 19
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49519
49511: LD_INT 23
49513: DOUBLE
49514: EQUAL
49515: IFTRUE 49519
49517: GO 49544
49519: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49520: LD_ADDR_VAR 0 3
49524: PUSH
49525: LD_INT 83
49527: PPUSH
49528: LD_VAR 0 1
49532: PPUSH
49533: CALL_OW 321
49537: PUSH
49538: LD_INT 2
49540: EQUAL
49541: ST_TO_ADDR
49542: GO 49644
49544: LD_INT 17
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49577
49552: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49553: LD_ADDR_VAR 0 3
49557: PUSH
49558: LD_INT 39
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 321
49570: PUSH
49571: LD_INT 2
49573: EQUAL
49574: ST_TO_ADDR
49575: GO 49644
49577: LD_INT 18
49579: DOUBLE
49580: EQUAL
49581: IFTRUE 49585
49583: GO 49610
49585: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_INT 40
49593: PPUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: CALL_OW 321
49603: PUSH
49604: LD_INT 2
49606: EQUAL
49607: ST_TO_ADDR
49608: GO 49644
49610: LD_INT 27
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49618
49616: GO 49643
49618: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49619: LD_ADDR_VAR 0 3
49623: PUSH
49624: LD_INT 35
49626: PPUSH
49627: LD_VAR 0 1
49631: PPUSH
49632: CALL_OW 321
49636: PUSH
49637: LD_INT 2
49639: EQUAL
49640: ST_TO_ADDR
49641: GO 49644
49643: POP
// end ;
49644: LD_VAR 0 3
49648: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49649: LD_INT 0
49651: PPUSH
49652: PPUSH
49653: PPUSH
49654: PPUSH
49655: PPUSH
49656: PPUSH
49657: PPUSH
49658: PPUSH
49659: PPUSH
49660: PPUSH
49661: PPUSH
// result := false ;
49662: LD_ADDR_VAR 0 6
49666: PUSH
49667: LD_INT 0
49669: ST_TO_ADDR
// if btype = b_depot then
49670: LD_VAR 0 2
49674: PUSH
49675: LD_INT 0
49677: EQUAL
49678: IFFALSE 49690
// begin result := true ;
49680: LD_ADDR_VAR 0 6
49684: PUSH
49685: LD_INT 1
49687: ST_TO_ADDR
// exit ;
49688: GO 50544
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49690: LD_VAR 0 1
49694: NOT
49695: IFTRUE 49720
49697: PUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL_OW 266
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: IN
49718: NOT
49719: OR
49720: IFTRUE 49729
49722: PUSH
49723: LD_VAR 0 2
49727: NOT
49728: OR
49729: IFTRUE 49765
49731: PUSH
49732: LD_VAR 0 5
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: LD_INT 5
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: IN
49763: NOT
49764: OR
49765: IFTRUE 49784
49767: PUSH
49768: LD_VAR 0 3
49772: PPUSH
49773: LD_VAR 0 4
49777: PPUSH
49778: CALL_OW 488
49782: NOT
49783: OR
49784: IFFALSE 49788
// exit ;
49786: GO 50544
// side := GetSide ( depot ) ;
49788: LD_ADDR_VAR 0 9
49792: PUSH
49793: LD_VAR 0 1
49797: PPUSH
49798: CALL_OW 255
49802: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49803: LD_VAR 0 9
49807: PPUSH
49808: LD_VAR 0 2
49812: PPUSH
49813: CALL 49273 0 2
49817: NOT
49818: IFFALSE 49822
// exit ;
49820: GO 50544
// pom := GetBase ( depot ) ;
49822: LD_ADDR_VAR 0 10
49826: PUSH
49827: LD_VAR 0 1
49831: PPUSH
49832: CALL_OW 274
49836: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49837: LD_ADDR_VAR 0 11
49841: PUSH
49842: LD_VAR 0 2
49846: PPUSH
49847: LD_VAR 0 1
49851: PPUSH
49852: CALL_OW 248
49856: PPUSH
49857: CALL_OW 450
49861: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49862: LD_VAR 0 10
49866: PPUSH
49867: LD_INT 1
49869: PPUSH
49870: CALL_OW 275
49874: PUSH
49875: LD_VAR 0 11
49879: PUSH
49880: LD_INT 1
49882: ARRAY
49883: GREATEREQUAL
49884: IFFALSE 49910
49886: PUSH
49887: LD_VAR 0 10
49891: PPUSH
49892: LD_INT 2
49894: PPUSH
49895: CALL_OW 275
49899: PUSH
49900: LD_VAR 0 11
49904: PUSH
49905: LD_INT 2
49907: ARRAY
49908: GREATEREQUAL
49909: AND
49910: IFFALSE 49936
49912: PUSH
49913: LD_VAR 0 10
49917: PPUSH
49918: LD_INT 3
49920: PPUSH
49921: CALL_OW 275
49925: PUSH
49926: LD_VAR 0 11
49930: PUSH
49931: LD_INT 3
49933: ARRAY
49934: GREATEREQUAL
49935: AND
49936: NOT
49937: IFFALSE 49941
// exit ;
49939: GO 50544
// if GetBType ( depot ) = b_depot then
49941: LD_VAR 0 1
49945: PPUSH
49946: CALL_OW 266
49950: PUSH
49951: LD_INT 0
49953: EQUAL
49954: IFFALSE 49966
// dist := 28 else
49956: LD_ADDR_VAR 0 14
49960: PUSH
49961: LD_INT 28
49963: ST_TO_ADDR
49964: GO 49974
// dist := 36 ;
49966: LD_ADDR_VAR 0 14
49970: PUSH
49971: LD_INT 36
49973: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_VAR 0 3
49983: PPUSH
49984: LD_VAR 0 4
49988: PPUSH
49989: CALL_OW 297
49993: PUSH
49994: LD_VAR 0 14
49998: GREATER
49999: IFFALSE 50003
// exit ;
50001: GO 50544
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50003: LD_ADDR_VAR 0 12
50007: PUSH
50008: LD_VAR 0 2
50012: PPUSH
50013: LD_VAR 0 3
50017: PPUSH
50018: LD_VAR 0 4
50022: PPUSH
50023: LD_VAR 0 5
50027: PPUSH
50028: LD_VAR 0 1
50032: PPUSH
50033: CALL_OW 248
50037: PPUSH
50038: LD_INT 0
50040: PPUSH
50041: CALL 50549 0 6
50045: ST_TO_ADDR
// if not hexes then
50046: LD_VAR 0 12
50050: NOT
50051: IFFALSE 50055
// exit ;
50053: GO 50544
// hex := GetHexInfo ( x , y ) ;
50055: LD_ADDR_VAR 0 15
50059: PUSH
50060: LD_VAR 0 3
50064: PPUSH
50065: LD_VAR 0 4
50069: PPUSH
50070: CALL_OW 546
50074: ST_TO_ADDR
// if hex [ 1 ] then
50075: LD_VAR 0 15
50079: PUSH
50080: LD_INT 1
50082: ARRAY
50083: IFFALSE 50087
// exit ;
50085: GO 50544
// height := hex [ 2 ] ;
50087: LD_ADDR_VAR 0 13
50091: PUSH
50092: LD_VAR 0 15
50096: PUSH
50097: LD_INT 2
50099: ARRAY
50100: ST_TO_ADDR
// for i = 1 to hexes do
50101: LD_ADDR_VAR 0 7
50105: PUSH
50106: DOUBLE
50107: LD_INT 1
50109: DEC
50110: ST_TO_ADDR
50111: LD_VAR 0 12
50115: PUSH
50116: FOR_TO
50117: IFFALSE 50461
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50119: LD_VAR 0 12
50123: PUSH
50124: LD_VAR 0 7
50128: ARRAY
50129: PUSH
50130: LD_INT 1
50132: ARRAY
50133: PPUSH
50134: LD_VAR 0 12
50138: PUSH
50139: LD_VAR 0 7
50143: ARRAY
50144: PUSH
50145: LD_INT 2
50147: ARRAY
50148: PPUSH
50149: CALL_OW 488
50153: NOT
50154: IFTRUE 50196
50156: PUSH
50157: LD_VAR 0 12
50161: PUSH
50162: LD_VAR 0 7
50166: ARRAY
50167: PUSH
50168: LD_INT 1
50170: ARRAY
50171: PPUSH
50172: LD_VAR 0 12
50176: PUSH
50177: LD_VAR 0 7
50181: ARRAY
50182: PUSH
50183: LD_INT 2
50185: ARRAY
50186: PPUSH
50187: CALL_OW 428
50191: PUSH
50192: LD_INT 0
50194: GREATER
50195: OR
50196: IFTRUE 50234
50198: PUSH
50199: LD_VAR 0 12
50203: PUSH
50204: LD_VAR 0 7
50208: ARRAY
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: PPUSH
50214: LD_VAR 0 12
50218: PUSH
50219: LD_VAR 0 7
50223: ARRAY
50224: PUSH
50225: LD_INT 2
50227: ARRAY
50228: PPUSH
50229: CALL_OW 351
50233: OR
50234: IFFALSE 50240
// exit ;
50236: POP
50237: POP
50238: GO 50544
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50240: LD_ADDR_VAR 0 8
50244: PUSH
50245: LD_VAR 0 12
50249: PUSH
50250: LD_VAR 0 7
50254: ARRAY
50255: PUSH
50256: LD_INT 1
50258: ARRAY
50259: PPUSH
50260: LD_VAR 0 12
50264: PUSH
50265: LD_VAR 0 7
50269: ARRAY
50270: PUSH
50271: LD_INT 2
50273: ARRAY
50274: PPUSH
50275: CALL_OW 546
50279: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50280: LD_VAR 0 8
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: IFTRUE 50310
50290: PUSH
50291: LD_VAR 0 8
50295: PUSH
50296: LD_INT 2
50298: ARRAY
50299: PUSH
50300: LD_VAR 0 13
50304: PUSH
50305: LD_INT 2
50307: PLUS
50308: GREATER
50309: OR
50310: IFTRUE 50332
50312: PUSH
50313: LD_VAR 0 8
50317: PUSH
50318: LD_INT 2
50320: ARRAY
50321: PUSH
50322: LD_VAR 0 13
50326: PUSH
50327: LD_INT 2
50329: MINUS
50330: LESS
50331: OR
50332: IFTRUE 50400
50334: PUSH
50335: LD_VAR 0 8
50339: PUSH
50340: LD_INT 3
50342: ARRAY
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 8
50349: PUSH
50350: LD_INT 9
50352: PUSH
50353: LD_INT 10
50355: PUSH
50356: LD_INT 11
50358: PUSH
50359: LD_INT 12
50361: PUSH
50362: LD_INT 13
50364: PUSH
50365: LD_INT 16
50367: PUSH
50368: LD_INT 17
50370: PUSH
50371: LD_INT 18
50373: PUSH
50374: LD_INT 19
50376: PUSH
50377: LD_INT 20
50379: PUSH
50380: LD_INT 21
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: IN
50398: NOT
50399: OR
50400: IFTRUE 50413
50402: PUSH
50403: LD_VAR 0 8
50407: PUSH
50408: LD_INT 5
50410: ARRAY
50411: NOT
50412: OR
50413: IFTRUE 50453
50415: PUSH
50416: LD_VAR 0 8
50420: PUSH
50421: LD_INT 6
50423: ARRAY
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 7
50433: PUSH
50434: LD_INT 9
50436: PUSH
50437: LD_INT 10
50439: PUSH
50440: LD_INT 11
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: IN
50451: NOT
50452: OR
50453: IFFALSE 50459
// exit ;
50455: POP
50456: POP
50457: GO 50544
// end ;
50459: GO 50116
50461: POP
50462: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50463: LD_VAR 0 9
50467: PPUSH
50468: LD_VAR 0 3
50472: PPUSH
50473: LD_VAR 0 4
50477: PPUSH
50478: LD_INT 20
50480: PPUSH
50481: CALL 42363 0 4
50485: PUSH
50486: LD_INT 4
50488: ARRAY
50489: IFFALSE 50493
// exit ;
50491: GO 50544
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50493: LD_VAR 0 2
50497: PUSH
50498: LD_INT 29
50500: PUSH
50501: LD_INT 30
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: IN
50508: IFFALSE 50532
50510: PUSH
50511: LD_VAR 0 3
50515: PPUSH
50516: LD_VAR 0 4
50520: PPUSH
50521: LD_VAR 0 9
50525: PPUSH
50526: CALL_OW 440
50530: NOT
50531: AND
50532: IFFALSE 50536
// exit ;
50534: GO 50544
// result := true ;
50536: LD_ADDR_VAR 0 6
50540: PUSH
50541: LD_INT 1
50543: ST_TO_ADDR
// end ;
50544: LD_VAR 0 6
50548: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50549: LD_INT 0
50551: PPUSH
50552: PPUSH
50553: PPUSH
50554: PPUSH
50555: PPUSH
50556: PPUSH
50557: PPUSH
50558: PPUSH
50559: PPUSH
50560: PPUSH
50561: PPUSH
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
50567: PPUSH
50568: PPUSH
50569: PPUSH
50570: PPUSH
50571: PPUSH
50572: PPUSH
50573: PPUSH
50574: PPUSH
50575: PPUSH
50576: PPUSH
50577: PPUSH
50578: PPUSH
50579: PPUSH
50580: PPUSH
50581: PPUSH
50582: PPUSH
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
50588: PPUSH
50589: PPUSH
50590: PPUSH
50591: PPUSH
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
// result = [ ] ;
50609: LD_ADDR_VAR 0 7
50613: PUSH
50614: EMPTY
50615: ST_TO_ADDR
// temp_list = [ ] ;
50616: LD_ADDR_VAR 0 9
50620: PUSH
50621: EMPTY
50622: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50623: LD_VAR 0 4
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: IN
50654: NOT
50655: IFTRUE 50698
50657: PUSH
50658: LD_VAR 0 1
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: IN
50673: IFFALSE 50697
50675: PUSH
50676: LD_VAR 0 5
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: IN
50695: NOT
50696: AND
50697: OR
50698: IFFALSE 50702
// exit ;
50700: GO 69101
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50702: LD_VAR 0 1
50706: PUSH
50707: LD_INT 6
50709: PUSH
50710: LD_INT 7
50712: PUSH
50713: LD_INT 8
50715: PUSH
50716: LD_INT 13
50718: PUSH
50719: LD_INT 12
50721: PUSH
50722: LD_INT 15
50724: PUSH
50725: LD_INT 11
50727: PUSH
50728: LD_INT 14
50730: PUSH
50731: LD_INT 10
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: IN
50745: IFFALSE 50755
// btype = b_lab ;
50747: LD_ADDR_VAR 0 1
50751: PUSH
50752: LD_INT 6
50754: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50755: LD_VAR 0 6
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: IN
50774: NOT
50775: IFTRUE 50843
50777: PUSH
50778: LD_VAR 0 1
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: LD_INT 6
50797: PUSH
50798: LD_INT 36
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: LD_INT 5
50806: PUSH
50807: LD_INT 31
50809: PUSH
50810: LD_INT 32
50812: PUSH
50813: LD_INT 33
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: IN
50829: NOT
50830: IFFALSE 50842
50832: PUSH
50833: LD_VAR 0 6
50837: PUSH
50838: LD_INT 1
50840: EQUAL
50841: AND
50842: OR
50843: IFTRUE 50875
50845: PUSH
50846: LD_VAR 0 1
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: IN
50861: NOT
50862: IFFALSE 50874
50864: PUSH
50865: LD_VAR 0 6
50869: PUSH
50870: LD_INT 2
50872: EQUAL
50873: AND
50874: OR
50875: IFFALSE 50885
// mode = 0 ;
50877: LD_ADDR_VAR 0 6
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// case mode of 0 :
50885: LD_VAR 0 6
50889: PUSH
50890: LD_INT 0
50892: DOUBLE
50893: EQUAL
50894: IFTRUE 50898
50896: GO 62351
50898: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50899: LD_ADDR_VAR 0 11
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51092: LD_ADDR_VAR 0 12
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51288: LD_ADDR_VAR 0 13
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51487: LD_ADDR_VAR 0 14
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51683: LD_ADDR_VAR 0 15
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51876: LD_ADDR_VAR 0 16
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52069: LD_ADDR_VAR 0 17
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52299: LD_ADDR_VAR 0 18
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52529: LD_ADDR_VAR 0 19
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52759: LD_ADDR_VAR 0 20
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52989: LD_ADDR_VAR 0 21
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: NEG
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53219: LD_ADDR_VAR 0 22
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53449: LD_ADDR_VAR 0 23
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53729: LD_ADDR_VAR 0 24
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54005: LD_ADDR_VAR 0 25
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54279: LD_ADDR_VAR 0 26
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54555: LD_ADDR_VAR 0 27
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54835: LD_ADDR_VAR 0 28
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 3
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55117: LD_ADDR_VAR 0 29
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55396: LD_ADDR_VAR 0 30
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55674: LD_ADDR_VAR 0 31
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55952: LD_ADDR_VAR 0 32
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56230: LD_ADDR_VAR 0 33
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56509: LD_ADDR_VAR 0 34
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56789: LD_ADDR_VAR 0 35
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56901: LD_ADDR_VAR 0 36
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57013: LD_ADDR_VAR 0 37
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57125: LD_ADDR_VAR 0 38
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57237: LD_ADDR_VAR 0 39
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57349: LD_ADDR_VAR 0 40
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57461: LD_ADDR_VAR 0 41
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57811: LD_ADDR_VAR 0 42
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 3
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 3
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58161: LD_ADDR_VAR 0 43
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58509: LD_ADDR_VAR 0 44
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 3
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58859: LD_ADDR_VAR 0 45
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 3
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 3
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 3
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 0
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59209: LD_ADDR_VAR 0 46
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59557: LD_ADDR_VAR 0 47
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59708: LD_ADDR_VAR 0 48
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59855: LD_ADDR_VAR 0 49
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59999: LD_ADDR_VAR 0 50
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60143: LD_ADDR_VAR 0 51
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60290: LD_ADDR_VAR 0 52
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60441: LD_ADDR_VAR 0 53
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 2
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60671: LD_ADDR_VAR 0 54
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60901: LD_ADDR_VAR 0 55
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61131: LD_ADDR_VAR 0 56
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61361: LD_ADDR_VAR 0 57
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61591: LD_ADDR_VAR 0 58
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61821: LD_ADDR_VAR 0 59
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61909: LD_ADDR_VAR 0 60
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61997: LD_ADDR_VAR 0 61
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62085: LD_ADDR_VAR 0 62
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62173: LD_ADDR_VAR 0 63
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62261: LD_ADDR_VAR 0 64
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// end ; 1 :
62349: GO 68246
62351: LD_INT 1
62353: DOUBLE
62354: EQUAL
62355: IFTRUE 62359
62357: GO 64982
62359: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62360: LD_ADDR_VAR 0 11
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 3
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62404: LD_ADDR_VAR 0 12
62408: PUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62445: LD_ADDR_VAR 0 13
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: LD_INT 3
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62485: LD_ADDR_VAR 0 14
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62526: LD_ADDR_VAR 0 15
62530: PUSH
62531: LD_INT 2
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62570: LD_ADDR_VAR 0 16
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: LD_INT 3
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: NEG
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 3
62601: NEG
62602: PUSH
62603: LD_INT 3
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: LIST
62615: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62616: LD_ADDR_VAR 0 17
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 3
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62660: LD_ADDR_VAR 0 18
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62701: LD_ADDR_VAR 0 19
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62741: LD_ADDR_VAR 0 20
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62782: LD_ADDR_VAR 0 21
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62826: LD_ADDR_VAR 0 22
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: LD_INT 3
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62872: LD_ADDR_VAR 0 23
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: LD_INT 4
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62916: LD_ADDR_VAR 0 24
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62957: LD_ADDR_VAR 0 25
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 4
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: LD_INT 4
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62997: LD_ADDR_VAR 0 26
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 3
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 4
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63038: LD_ADDR_VAR 0 27
63042: PUSH
63043: LD_INT 3
63045: NEG
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 4
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63082: LD_ADDR_VAR 0 28
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: LD_INT 3
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: LD_INT 4
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 4
63113: NEG
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63128: LD_ADDR_VAR 0 29
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 4
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 5
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 5
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 4
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 6
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 6
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 5
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63283: LD_ADDR_VAR 0 30
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 4
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 5
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 5
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 6
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 6
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63426: LD_ADDR_VAR 0 31
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 3
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 4
63473: PUSH
63474: LD_INT 4
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 5
63493: PUSH
63494: LD_INT 4
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 5
63503: PUSH
63504: LD_INT 5
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 4
63513: PUSH
63514: LD_INT 5
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 6
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 6
63533: PUSH
63534: LD_INT 6
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 5
63543: PUSH
63544: LD_INT 6
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63565: LD_ADDR_VAR 0 32
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 3
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: LD_INT 4
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: LD_INT 4
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 3
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 6
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 6
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: LD_INT 5
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63708: LD_ADDR_VAR 0 33
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 4
63760: NEG
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 4
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 5
63794: NEG
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 5
63805: NEG
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 5
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 6
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 6
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63863: LD_ADDR_VAR 0 34
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: LD_INT 2
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: LD_INT 3
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: LD_INT 4
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 4
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 4
63930: NEG
63931: PUSH
63932: LD_INT 4
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 4
63942: NEG
63943: PUSH
63944: LD_INT 5
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 5
63954: NEG
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 5
63966: NEG
63967: PUSH
63968: LD_INT 5
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: LD_INT 6
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 6
63990: NEG
63991: PUSH
63992: LD_INT 5
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 6
64002: NEG
64003: PUSH
64004: LD_INT 6
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64026: LD_ADDR_VAR 0 41
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 2
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 2
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64070: LD_ADDR_VAR 0 42
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64111: LD_ADDR_VAR 0 43
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 3
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 3
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64151: LD_ADDR_VAR 0 44
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: LD_INT 3
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64192: LD_ADDR_VAR 0 45
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 2
64210: NEG
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 3
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64236: LD_ADDR_VAR 0 46
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 3
64267: NEG
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64282: LD_ADDR_VAR 0 47
64286: PUSH
64287: LD_INT 2
64289: NEG
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64315: LD_ADDR_VAR 0 48
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64346: LD_ADDR_VAR 0 49
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 3
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64375: LD_ADDR_VAR 0 50
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64404: LD_ADDR_VAR 0 51
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64435: LD_ADDR_VAR 0 52
64439: PUSH
64440: LD_INT 3
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: NEG
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64468: LD_ADDR_VAR 0 53
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 3
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 3
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64512: LD_ADDR_VAR 0 54
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: LD_INT 1
64522: NEG
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64553: LD_ADDR_VAR 0 55
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64593: LD_ADDR_VAR 0 56
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 3
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: LIST
64633: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64634: LD_ADDR_VAR 0 57
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: NEG
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 3
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64678: LD_ADDR_VAR 0 58
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 2
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: LIST
64723: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64724: LD_ADDR_VAR 0 59
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64768: LD_ADDR_VAR 0 60
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64809: LD_ADDR_VAR 0 61
64813: PUSH
64814: LD_INT 2
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64849: LD_ADDR_VAR 0 62
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64890: LD_ADDR_VAR 0 63
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64934: LD_ADDR_VAR 0 64
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// end ; 2 :
64980: GO 68246
64982: LD_INT 2
64984: DOUBLE
64985: EQUAL
64986: IFTRUE 64990
64988: GO 68245
64990: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64991: LD_ADDR_VAR 0 29
64995: PUSH
64996: LD_INT 4
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 4
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 5
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 5
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 5
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: LD_INT 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 4
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 4
65121: PUSH
65122: LD_INT 4
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 4
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: LD_INT 4
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: LD_INT 5
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 5
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 4
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: LD_INT 3
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: LD_INT 5
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 3
65274: NEG
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 4
65330: NEG
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 4
65341: NEG
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 4
65353: NEG
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 4
65376: NEG
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 4
65388: NEG
65389: PUSH
65390: LD_INT 5
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: NEG
65401: PUSH
65402: LD_INT 4
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 3
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 4
65424: NEG
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 5
65436: NEG
65437: PUSH
65438: LD_INT 4
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 5
65448: NEG
65449: PUSH
65450: LD_INT 5
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 5
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 5
65472: NEG
65473: PUSH
65474: LD_INT 3
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65529: LD_ADDR_VAR 0 30
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 5
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 4
65576: PUSH
65577: LD_INT 5
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 3
65586: PUSH
65587: LD_INT 4
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 5
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 3
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 3
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: LD_INT 2
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 4
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 4
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: LD_INT 4
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 4
65719: NEG
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 4
65730: NEG
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 3
65753: NEG
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 4
65764: NEG
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 5
65775: NEG
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 5
65786: NEG
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 5
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: LD_INT 3
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: LD_INT 4
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: LD_INT 3
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: LD_INT 2
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 4
65881: NEG
65882: PUSH
65883: LD_INT 3
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: LD_INT 4
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: LD_INT 4
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: NEG
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 4
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 5
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: LD_INT 3
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 5
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 3
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 5
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66076: LD_ADDR_VAR 0 31
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 4
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: LD_INT 5
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 5
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 4
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: LD_INT 3
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: LD_INT 5
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 3
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: NEG
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 4
66232: NEG
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 4
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 4
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 4
66278: NEG
66279: PUSH
66280: LD_INT 4
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 4
66290: NEG
66291: PUSH
66292: LD_INT 5
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: LD_INT 4
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 3
66314: NEG
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: LD_INT 3
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 5
66338: NEG
66339: PUSH
66340: LD_INT 4
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: LD_INT 5
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: LD_INT 5
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 5
66374: NEG
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 3
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 4
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: NEG
66454: PUSH
66455: LD_INT 4
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 2
66476: NEG
66477: PUSH
66478: LD_INT 4
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 5
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 5
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 3
66560: PUSH
66561: LD_INT 2
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 5
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66626: LD_ADDR_VAR 0 32
66630: PUSH
66631: LD_INT 4
66633: NEG
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 4
66644: NEG
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 5
66689: NEG
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 5
66700: NEG
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 3
66735: NEG
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 4
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: LD_INT 2
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 4
66807: NEG
66808: PUSH
66809: LD_INT 4
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 4
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: NEG
66832: PUSH
66833: LD_INT 2
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 4
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 5
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 4
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 1
66910: NEG
66911: PUSH
66912: LD_INT 5
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: LD_INT 5
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 4
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 4
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 3
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 2
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 4
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 4
67038: PUSH
67039: LD_INT 4
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 4
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 5
67058: PUSH
67059: LD_INT 4
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 5
67068: PUSH
67069: LD_INT 5
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 4
67078: PUSH
67079: LD_INT 5
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 3
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 3
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 5
67108: PUSH
67109: LD_INT 3
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 3
67118: PUSH
67119: LD_INT 5
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67173: LD_ADDR_VAR 0 33
67177: PUSH
67178: LD_INT 4
67180: NEG
67181: PUSH
67182: LD_INT 4
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 4
67192: NEG
67193: PUSH
67194: LD_INT 5
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 4
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 3
67216: NEG
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 5
67240: NEG
67241: PUSH
67242: LD_INT 4
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 5
67252: NEG
67253: PUSH
67254: LD_INT 5
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 5
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 5
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 4
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 1
67355: NEG
67356: PUSH
67357: LD_INT 4
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: LD_INT 2
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 4
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 5
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 4
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 3
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: LD_INT 2
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 5
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 3
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 2
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 4
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: LD_INT 3
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 4
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_INT 5
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: LD_INT 4
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: LD_INT 3
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: PUSH
67646: LD_INT 5
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67711: LD_ADDR_VAR 0 34
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 4
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_INT 5
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: LD_INT 4
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: NEG
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: NEG
67809: PUSH
67810: LD_INT 5
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: LD_INT 4
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 4
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 5
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: PUSH
67944: LD_INT 5
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: PUSH
67954: LD_INT 5
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: LD_INT 4
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: LD_INT 3
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 5
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 0
68013: PUSH
68014: LD_INT 2
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: LD_INT 3
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: LD_INT 4
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: NEG
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 4
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: LD_INT 2
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 0
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: NEG
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 3
68119: NEG
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 3
68130: NEG
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 5
68152: NEG
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 5
68163: NEG
68164: PUSH
68165: LD_INT 1
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 5
68175: NEG
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 3
68187: NEG
68188: PUSH
68189: LD_INT 2
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: ST_TO_ADDR
// end ; end ;
68243: GO 68246
68245: POP
// case btype of b_depot , b_warehouse :
68246: LD_VAR 0 1
68250: PUSH
68251: LD_INT 0
68253: DOUBLE
68254: EQUAL
68255: IFTRUE 68265
68257: LD_INT 1
68259: DOUBLE
68260: EQUAL
68261: IFTRUE 68265
68263: GO 68466
68265: POP
// case nation of nation_american :
68266: LD_VAR 0 5
68270: PUSH
68271: LD_INT 1
68273: DOUBLE
68274: EQUAL
68275: IFTRUE 68279
68277: GO 68335
68279: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68280: LD_ADDR_VAR 0 9
68284: PUSH
68285: LD_VAR 0 11
68289: PUSH
68290: LD_VAR 0 12
68294: PUSH
68295: LD_VAR 0 13
68299: PUSH
68300: LD_VAR 0 14
68304: PUSH
68305: LD_VAR 0 15
68309: PUSH
68310: LD_VAR 0 16
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: PUSH
68323: LD_VAR 0 4
68327: PUSH
68328: LD_INT 1
68330: PLUS
68331: ARRAY
68332: ST_TO_ADDR
68333: GO 68464
68335: LD_INT 2
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68343
68341: GO 68399
68343: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68344: LD_ADDR_VAR 0 9
68348: PUSH
68349: LD_VAR 0 17
68353: PUSH
68354: LD_VAR 0 18
68358: PUSH
68359: LD_VAR 0 19
68363: PUSH
68364: LD_VAR 0 20
68368: PUSH
68369: LD_VAR 0 21
68373: PUSH
68374: LD_VAR 0 22
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: PUSH
68387: LD_VAR 0 4
68391: PUSH
68392: LD_INT 1
68394: PLUS
68395: ARRAY
68396: ST_TO_ADDR
68397: GO 68464
68399: LD_INT 3
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68407
68405: GO 68463
68407: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68408: LD_ADDR_VAR 0 9
68412: PUSH
68413: LD_VAR 0 23
68417: PUSH
68418: LD_VAR 0 24
68422: PUSH
68423: LD_VAR 0 25
68427: PUSH
68428: LD_VAR 0 26
68432: PUSH
68433: LD_VAR 0 27
68437: PUSH
68438: LD_VAR 0 28
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: PUSH
68451: LD_VAR 0 4
68455: PUSH
68456: LD_INT 1
68458: PLUS
68459: ARRAY
68460: ST_TO_ADDR
68461: GO 68464
68463: POP
68464: GO 69019
68466: LD_INT 2
68468: DOUBLE
68469: EQUAL
68470: IFTRUE 68480
68472: LD_INT 3
68474: DOUBLE
68475: EQUAL
68476: IFTRUE 68480
68478: GO 68536
68480: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68481: LD_ADDR_VAR 0 9
68485: PUSH
68486: LD_VAR 0 29
68490: PUSH
68491: LD_VAR 0 30
68495: PUSH
68496: LD_VAR 0 31
68500: PUSH
68501: LD_VAR 0 32
68505: PUSH
68506: LD_VAR 0 33
68510: PUSH
68511: LD_VAR 0 34
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: PUSH
68524: LD_VAR 0 4
68528: PUSH
68529: LD_INT 1
68531: PLUS
68532: ARRAY
68533: ST_TO_ADDR
68534: GO 69019
68536: LD_INT 16
68538: DOUBLE
68539: EQUAL
68540: IFTRUE 68598
68542: LD_INT 17
68544: DOUBLE
68545: EQUAL
68546: IFTRUE 68598
68548: LD_INT 18
68550: DOUBLE
68551: EQUAL
68552: IFTRUE 68598
68554: LD_INT 19
68556: DOUBLE
68557: EQUAL
68558: IFTRUE 68598
68560: LD_INT 22
68562: DOUBLE
68563: EQUAL
68564: IFTRUE 68598
68566: LD_INT 20
68568: DOUBLE
68569: EQUAL
68570: IFTRUE 68598
68572: LD_INT 21
68574: DOUBLE
68575: EQUAL
68576: IFTRUE 68598
68578: LD_INT 23
68580: DOUBLE
68581: EQUAL
68582: IFTRUE 68598
68584: LD_INT 24
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68598
68590: LD_INT 25
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68598
68596: GO 68654
68598: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68599: LD_ADDR_VAR 0 9
68603: PUSH
68604: LD_VAR 0 35
68608: PUSH
68609: LD_VAR 0 36
68613: PUSH
68614: LD_VAR 0 37
68618: PUSH
68619: LD_VAR 0 38
68623: PUSH
68624: LD_VAR 0 39
68628: PUSH
68629: LD_VAR 0 40
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: PUSH
68642: LD_VAR 0 4
68646: PUSH
68647: LD_INT 1
68649: PLUS
68650: ARRAY
68651: ST_TO_ADDR
68652: GO 69019
68654: LD_INT 6
68656: DOUBLE
68657: EQUAL
68658: IFTRUE 68710
68660: LD_INT 7
68662: DOUBLE
68663: EQUAL
68664: IFTRUE 68710
68666: LD_INT 8
68668: DOUBLE
68669: EQUAL
68670: IFTRUE 68710
68672: LD_INT 13
68674: DOUBLE
68675: EQUAL
68676: IFTRUE 68710
68678: LD_INT 12
68680: DOUBLE
68681: EQUAL
68682: IFTRUE 68710
68684: LD_INT 15
68686: DOUBLE
68687: EQUAL
68688: IFTRUE 68710
68690: LD_INT 11
68692: DOUBLE
68693: EQUAL
68694: IFTRUE 68710
68696: LD_INT 14
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68710
68702: LD_INT 10
68704: DOUBLE
68705: EQUAL
68706: IFTRUE 68710
68708: GO 68766
68710: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68711: LD_ADDR_VAR 0 9
68715: PUSH
68716: LD_VAR 0 41
68720: PUSH
68721: LD_VAR 0 42
68725: PUSH
68726: LD_VAR 0 43
68730: PUSH
68731: LD_VAR 0 44
68735: PUSH
68736: LD_VAR 0 45
68740: PUSH
68741: LD_VAR 0 46
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: PUSH
68754: LD_VAR 0 4
68758: PUSH
68759: LD_INT 1
68761: PLUS
68762: ARRAY
68763: ST_TO_ADDR
68764: GO 69019
68766: LD_INT 36
68768: DOUBLE
68769: EQUAL
68770: IFTRUE 68774
68772: GO 68830
68774: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68775: LD_ADDR_VAR 0 9
68779: PUSH
68780: LD_VAR 0 47
68784: PUSH
68785: LD_VAR 0 48
68789: PUSH
68790: LD_VAR 0 49
68794: PUSH
68795: LD_VAR 0 50
68799: PUSH
68800: LD_VAR 0 51
68804: PUSH
68805: LD_VAR 0 52
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: PUSH
68818: LD_VAR 0 4
68822: PUSH
68823: LD_INT 1
68825: PLUS
68826: ARRAY
68827: ST_TO_ADDR
68828: GO 69019
68830: LD_INT 4
68832: DOUBLE
68833: EQUAL
68834: IFTRUE 68856
68836: LD_INT 5
68838: DOUBLE
68839: EQUAL
68840: IFTRUE 68856
68842: LD_INT 34
68844: DOUBLE
68845: EQUAL
68846: IFTRUE 68856
68848: LD_INT 37
68850: DOUBLE
68851: EQUAL
68852: IFTRUE 68856
68854: GO 68912
68856: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68857: LD_ADDR_VAR 0 9
68861: PUSH
68862: LD_VAR 0 53
68866: PUSH
68867: LD_VAR 0 54
68871: PUSH
68872: LD_VAR 0 55
68876: PUSH
68877: LD_VAR 0 56
68881: PUSH
68882: LD_VAR 0 57
68886: PUSH
68887: LD_VAR 0 58
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: PUSH
68900: LD_VAR 0 4
68904: PUSH
68905: LD_INT 1
68907: PLUS
68908: ARRAY
68909: ST_TO_ADDR
68910: GO 69019
68912: LD_INT 31
68914: DOUBLE
68915: EQUAL
68916: IFTRUE 68962
68918: LD_INT 32
68920: DOUBLE
68921: EQUAL
68922: IFTRUE 68962
68924: LD_INT 33
68926: DOUBLE
68927: EQUAL
68928: IFTRUE 68962
68930: LD_INT 27
68932: DOUBLE
68933: EQUAL
68934: IFTRUE 68962
68936: LD_INT 26
68938: DOUBLE
68939: EQUAL
68940: IFTRUE 68962
68942: LD_INT 28
68944: DOUBLE
68945: EQUAL
68946: IFTRUE 68962
68948: LD_INT 29
68950: DOUBLE
68951: EQUAL
68952: IFTRUE 68962
68954: LD_INT 30
68956: DOUBLE
68957: EQUAL
68958: IFTRUE 68962
68960: GO 69018
68962: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68963: LD_ADDR_VAR 0 9
68967: PUSH
68968: LD_VAR 0 59
68972: PUSH
68973: LD_VAR 0 60
68977: PUSH
68978: LD_VAR 0 61
68982: PUSH
68983: LD_VAR 0 62
68987: PUSH
68988: LD_VAR 0 63
68992: PUSH
68993: LD_VAR 0 64
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: PUSH
69006: LD_VAR 0 4
69010: PUSH
69011: LD_INT 1
69013: PLUS
69014: ARRAY
69015: ST_TO_ADDR
69016: GO 69019
69018: POP
// temp_list2 = [ ] ;
69019: LD_ADDR_VAR 0 10
69023: PUSH
69024: EMPTY
69025: ST_TO_ADDR
// for i in temp_list do
69026: LD_ADDR_VAR 0 8
69030: PUSH
69031: LD_VAR 0 9
69035: PUSH
69036: FOR_IN
69037: IFFALSE 69089
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69039: LD_ADDR_VAR 0 10
69043: PUSH
69044: LD_VAR 0 10
69048: PUSH
69049: LD_VAR 0 8
69053: PUSH
69054: LD_INT 1
69056: ARRAY
69057: PUSH
69058: LD_VAR 0 2
69062: PLUS
69063: PUSH
69064: LD_VAR 0 8
69068: PUSH
69069: LD_INT 2
69071: ARRAY
69072: PUSH
69073: LD_VAR 0 3
69077: PLUS
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: ADD
69086: ST_TO_ADDR
69087: GO 69036
69089: POP
69090: POP
// result = temp_list2 ;
69091: LD_ADDR_VAR 0 7
69095: PUSH
69096: LD_VAR 0 10
69100: ST_TO_ADDR
// end ;
69101: LD_VAR 0 7
69105: RET
// export function EnemyInRange ( unit , dist ) ; begin
69106: LD_INT 0
69108: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69109: LD_ADDR_VAR 0 3
69113: PUSH
69114: LD_VAR 0 1
69118: PPUSH
69119: CALL_OW 255
69123: PPUSH
69124: LD_VAR 0 1
69128: PPUSH
69129: CALL_OW 250
69133: PPUSH
69134: LD_VAR 0 1
69138: PPUSH
69139: CALL_OW 251
69143: PPUSH
69144: LD_VAR 0 2
69148: PPUSH
69149: CALL 42363 0 4
69153: PUSH
69154: LD_INT 4
69156: ARRAY
69157: ST_TO_ADDR
// end ;
69158: LD_VAR 0 3
69162: RET
// export function PlayerSeeMe ( unit ) ; begin
69163: LD_INT 0
69165: PPUSH
// result := See ( your_side , unit ) ;
69166: LD_ADDR_VAR 0 2
69170: PUSH
69171: LD_OWVAR 2
69175: PPUSH
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 292
69185: ST_TO_ADDR
// end ;
69186: LD_VAR 0 2
69190: RET
// export function ReverseDir ( unit ) ; begin
69191: LD_INT 0
69193: PPUSH
// if not unit then
69194: LD_VAR 0 1
69198: NOT
69199: IFFALSE 69203
// exit ;
69201: GO 69226
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69203: LD_ADDR_VAR 0 2
69207: PUSH
69208: LD_VAR 0 1
69212: PPUSH
69213: CALL_OW 254
69217: PUSH
69218: LD_INT 3
69220: PLUS
69221: PUSH
69222: LD_INT 6
69224: MOD
69225: ST_TO_ADDR
// end ;
69226: LD_VAR 0 2
69230: RET
// export function ReverseArray ( array ) ; var i ; begin
69231: LD_INT 0
69233: PPUSH
69234: PPUSH
// if not array then
69235: LD_VAR 0 1
69239: NOT
69240: IFFALSE 69244
// exit ;
69242: GO 69299
// result := [ ] ;
69244: LD_ADDR_VAR 0 2
69248: PUSH
69249: EMPTY
69250: ST_TO_ADDR
// for i := array downto 1 do
69251: LD_ADDR_VAR 0 3
69255: PUSH
69256: DOUBLE
69257: LD_VAR 0 1
69261: INC
69262: ST_TO_ADDR
69263: LD_INT 1
69265: PUSH
69266: FOR_DOWNTO
69267: IFFALSE 69297
// result := Join ( result , array [ i ] ) ;
69269: LD_ADDR_VAR 0 2
69273: PUSH
69274: LD_VAR 0 2
69278: PPUSH
69279: LD_VAR 0 1
69283: PUSH
69284: LD_VAR 0 3
69288: ARRAY
69289: PPUSH
69290: CALL 74151 0 2
69294: ST_TO_ADDR
69295: GO 69266
69297: POP
69298: POP
// end ;
69299: LD_VAR 0 2
69303: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69304: LD_INT 0
69306: PPUSH
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
69311: PPUSH
// if not unit or not hexes then
69312: LD_VAR 0 1
69316: NOT
69317: IFTRUE 69326
69319: PUSH
69320: LD_VAR 0 2
69324: NOT
69325: OR
69326: IFFALSE 69330
// exit ;
69328: GO 69453
// dist := 9999 ;
69330: LD_ADDR_VAR 0 5
69334: PUSH
69335: LD_INT 9999
69337: ST_TO_ADDR
// for i = 1 to hexes do
69338: LD_ADDR_VAR 0 4
69342: PUSH
69343: DOUBLE
69344: LD_INT 1
69346: DEC
69347: ST_TO_ADDR
69348: LD_VAR 0 2
69352: PUSH
69353: FOR_TO
69354: IFFALSE 69441
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69356: LD_ADDR_VAR 0 6
69360: PUSH
69361: LD_VAR 0 1
69365: PPUSH
69366: LD_VAR 0 2
69370: PUSH
69371: LD_VAR 0 4
69375: ARRAY
69376: PUSH
69377: LD_INT 1
69379: ARRAY
69380: PPUSH
69381: LD_VAR 0 2
69385: PUSH
69386: LD_VAR 0 4
69390: ARRAY
69391: PUSH
69392: LD_INT 2
69394: ARRAY
69395: PPUSH
69396: CALL_OW 297
69400: ST_TO_ADDR
// if tdist < dist then
69401: LD_VAR 0 6
69405: PUSH
69406: LD_VAR 0 5
69410: LESS
69411: IFFALSE 69439
// begin hex := hexes [ i ] ;
69413: LD_ADDR_VAR 0 8
69417: PUSH
69418: LD_VAR 0 2
69422: PUSH
69423: LD_VAR 0 4
69427: ARRAY
69428: ST_TO_ADDR
// dist := tdist ;
69429: LD_ADDR_VAR 0 5
69433: PUSH
69434: LD_VAR 0 6
69438: ST_TO_ADDR
// end ; end ;
69439: GO 69353
69441: POP
69442: POP
// result := hex ;
69443: LD_ADDR_VAR 0 3
69447: PUSH
69448: LD_VAR 0 8
69452: ST_TO_ADDR
// end ;
69453: LD_VAR 0 3
69457: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69458: LD_INT 0
69460: PPUSH
69461: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69462: LD_VAR 0 1
69466: NOT
69467: IFTRUE 69506
69469: PUSH
69470: LD_VAR 0 1
69474: PUSH
69475: LD_INT 21
69477: PUSH
69478: LD_INT 2
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 23
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PPUSH
69499: CALL_OW 69
69503: IN
69504: NOT
69505: OR
69506: IFFALSE 69510
// exit ;
69508: GO 69557
// for i = 1 to 3 do
69510: LD_ADDR_VAR 0 3
69514: PUSH
69515: DOUBLE
69516: LD_INT 1
69518: DEC
69519: ST_TO_ADDR
69520: LD_INT 3
69522: PUSH
69523: FOR_TO
69524: IFFALSE 69555
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69526: LD_VAR 0 1
69530: PPUSH
69531: CALL_OW 250
69535: PPUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: CALL_OW 251
69545: PPUSH
69546: LD_INT 1
69548: PPUSH
69549: CALL_OW 453
69553: GO 69523
69555: POP
69556: POP
// end ;
69557: LD_VAR 0 2
69561: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69562: LD_INT 0
69564: PPUSH
69565: PPUSH
69566: PPUSH
69567: PPUSH
69568: PPUSH
69569: PPUSH
// if not unit or not enemy_unit then
69570: LD_VAR 0 1
69574: NOT
69575: IFTRUE 69584
69577: PUSH
69578: LD_VAR 0 2
69582: NOT
69583: OR
69584: IFFALSE 69588
// exit ;
69586: GO 70069
// if GetLives ( i ) < 250 then
69588: LD_VAR 0 4
69592: PPUSH
69593: CALL_OW 256
69597: PUSH
69598: LD_INT 250
69600: LESS
69601: IFFALSE 69614
// begin ComAutodestruct ( i ) ;
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL 69458 0 1
// exit ;
69612: GO 70069
// end ; x := GetX ( enemy_unit ) ;
69614: LD_ADDR_VAR 0 7
69618: PUSH
69619: LD_VAR 0 2
69623: PPUSH
69624: CALL_OW 250
69628: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69629: LD_ADDR_VAR 0 8
69633: PUSH
69634: LD_VAR 0 2
69638: PPUSH
69639: CALL_OW 251
69643: ST_TO_ADDR
// if not x or not y then
69644: LD_VAR 0 7
69648: NOT
69649: IFTRUE 69658
69651: PUSH
69652: LD_VAR 0 8
69656: NOT
69657: OR
69658: IFFALSE 69662
// exit ;
69660: GO 70069
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69662: LD_ADDR_VAR 0 6
69666: PUSH
69667: LD_VAR 0 7
69671: PPUSH
69672: LD_INT 0
69674: PPUSH
69675: LD_INT 4
69677: PPUSH
69678: CALL_OW 272
69682: PUSH
69683: LD_VAR 0 8
69687: PPUSH
69688: LD_INT 0
69690: PPUSH
69691: LD_INT 4
69693: PPUSH
69694: CALL_OW 273
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_VAR 0 7
69707: PPUSH
69708: LD_INT 1
69710: PPUSH
69711: LD_INT 4
69713: PPUSH
69714: CALL_OW 272
69718: PUSH
69719: LD_VAR 0 8
69723: PPUSH
69724: LD_INT 1
69726: PPUSH
69727: LD_INT 4
69729: PPUSH
69730: CALL_OW 273
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_VAR 0 7
69743: PPUSH
69744: LD_INT 2
69746: PPUSH
69747: LD_INT 4
69749: PPUSH
69750: CALL_OW 272
69754: PUSH
69755: LD_VAR 0 8
69759: PPUSH
69760: LD_INT 2
69762: PPUSH
69763: LD_INT 4
69765: PPUSH
69766: CALL_OW 273
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_VAR 0 7
69779: PPUSH
69780: LD_INT 3
69782: PPUSH
69783: LD_INT 4
69785: PPUSH
69786: CALL_OW 272
69790: PUSH
69791: LD_VAR 0 8
69795: PPUSH
69796: LD_INT 3
69798: PPUSH
69799: LD_INT 4
69801: PPUSH
69802: CALL_OW 273
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: LD_INT 4
69818: PPUSH
69819: LD_INT 4
69821: PPUSH
69822: CALL_OW 272
69826: PUSH
69827: LD_VAR 0 8
69831: PPUSH
69832: LD_INT 4
69834: PPUSH
69835: LD_INT 4
69837: PPUSH
69838: CALL_OW 273
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_VAR 0 7
69851: PPUSH
69852: LD_INT 5
69854: PPUSH
69855: LD_INT 4
69857: PPUSH
69858: CALL_OW 272
69862: PUSH
69863: LD_VAR 0 8
69867: PPUSH
69868: LD_INT 5
69870: PPUSH
69871: LD_INT 4
69873: PPUSH
69874: CALL_OW 273
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: ST_TO_ADDR
// for i = tmp downto 1 do
69891: LD_ADDR_VAR 0 4
69895: PUSH
69896: DOUBLE
69897: LD_VAR 0 6
69901: INC
69902: ST_TO_ADDR
69903: LD_INT 1
69905: PUSH
69906: FOR_DOWNTO
69907: IFFALSE 70010
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69909: LD_VAR 0 6
69913: PUSH
69914: LD_VAR 0 4
69918: ARRAY
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PPUSH
69924: LD_VAR 0 6
69928: PUSH
69929: LD_VAR 0 4
69933: ARRAY
69934: PUSH
69935: LD_INT 2
69937: ARRAY
69938: PPUSH
69939: CALL_OW 488
69943: NOT
69944: IFTRUE 69986
69946: PUSH
69947: LD_VAR 0 6
69951: PUSH
69952: LD_VAR 0 4
69956: ARRAY
69957: PUSH
69958: LD_INT 1
69960: ARRAY
69961: PPUSH
69962: LD_VAR 0 6
69966: PUSH
69967: LD_VAR 0 4
69971: ARRAY
69972: PUSH
69973: LD_INT 2
69975: ARRAY
69976: PPUSH
69977: CALL_OW 428
69981: PUSH
69982: LD_INT 0
69984: NONEQUAL
69985: OR
69986: IFFALSE 70008
// tmp := Delete ( tmp , i ) ;
69988: LD_ADDR_VAR 0 6
69992: PUSH
69993: LD_VAR 0 6
69997: PPUSH
69998: LD_VAR 0 4
70002: PPUSH
70003: CALL_OW 3
70007: ST_TO_ADDR
70008: GO 69906
70010: POP
70011: POP
// j := GetClosestHex ( unit , tmp ) ;
70012: LD_ADDR_VAR 0 5
70016: PUSH
70017: LD_VAR 0 1
70021: PPUSH
70022: LD_VAR 0 6
70026: PPUSH
70027: CALL 69304 0 2
70031: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70032: LD_VAR 0 1
70036: PPUSH
70037: LD_VAR 0 5
70041: PUSH
70042: LD_INT 1
70044: ARRAY
70045: PPUSH
70046: LD_VAR 0 5
70050: PUSH
70051: LD_INT 2
70053: ARRAY
70054: PPUSH
70055: CALL_OW 111
// result := j ;
70059: LD_ADDR_VAR 0 3
70063: PUSH
70064: LD_VAR 0 5
70068: ST_TO_ADDR
// end ;
70069: LD_VAR 0 3
70073: RET
// export function PrepareApemanSoldier ( ) ; begin
70074: LD_INT 0
70076: PPUSH
// uc_nation := 0 ;
70077: LD_ADDR_OWVAR 21
70081: PUSH
70082: LD_INT 0
70084: ST_TO_ADDR
// hc_sex := sex_male ;
70085: LD_ADDR_OWVAR 27
70089: PUSH
70090: LD_INT 1
70092: ST_TO_ADDR
// hc_name :=  ;
70093: LD_ADDR_OWVAR 26
70097: PUSH
70098: LD_STRING 
70100: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70101: LD_ADDR_OWVAR 28
70105: PUSH
70106: LD_INT 15
70108: ST_TO_ADDR
// hc_gallery :=  ;
70109: LD_ADDR_OWVAR 33
70113: PUSH
70114: LD_STRING 
70116: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70117: LD_ADDR_OWVAR 31
70121: PUSH
70122: LD_INT 0
70124: PPUSH
70125: LD_INT 3
70127: PPUSH
70128: CALL_OW 12
70132: PUSH
70133: LD_INT 0
70135: PPUSH
70136: LD_INT 3
70138: PPUSH
70139: CALL_OW 12
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
70156: LD_ADDR_OWVAR 29
70160: PUSH
70161: LD_INT 10
70163: PUSH
70164: LD_INT 12
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: ST_TO_ADDR
// end ;
70171: LD_VAR 0 1
70175: RET
// export function PrepareApemanEngineer ( ) ; begin
70176: LD_INT 0
70178: PPUSH
// uc_nation := 0 ;
70179: LD_ADDR_OWVAR 21
70183: PUSH
70184: LD_INT 0
70186: ST_TO_ADDR
// hc_sex := sex_male ;
70187: LD_ADDR_OWVAR 27
70191: PUSH
70192: LD_INT 1
70194: ST_TO_ADDR
// hc_name :=  ;
70195: LD_ADDR_OWVAR 26
70199: PUSH
70200: LD_STRING 
70202: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70203: LD_ADDR_OWVAR 28
70207: PUSH
70208: LD_INT 16
70210: ST_TO_ADDR
// hc_gallery :=  ;
70211: LD_ADDR_OWVAR 33
70215: PUSH
70216: LD_STRING 
70218: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70219: LD_ADDR_OWVAR 31
70223: PUSH
70224: LD_INT 0
70226: PPUSH
70227: LD_INT 3
70229: PPUSH
70230: CALL_OW 12
70234: PUSH
70235: LD_INT 0
70237: PPUSH
70238: LD_INT 3
70240: PPUSH
70241: CALL_OW 12
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
70258: LD_ADDR_OWVAR 29
70262: PUSH
70263: LD_INT 10
70265: PUSH
70266: LD_INT 12
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: ST_TO_ADDR
// end ;
70273: LD_VAR 0 1
70277: RET
// export function PrepareApeman ( agressivity ) ; begin
70278: LD_INT 0
70280: PPUSH
// uc_side := 0 ;
70281: LD_ADDR_OWVAR 20
70285: PUSH
70286: LD_INT 0
70288: ST_TO_ADDR
// uc_nation := 0 ;
70289: LD_ADDR_OWVAR 21
70293: PUSH
70294: LD_INT 0
70296: ST_TO_ADDR
// hc_sex := sex_male ;
70297: LD_ADDR_OWVAR 27
70301: PUSH
70302: LD_INT 1
70304: ST_TO_ADDR
// hc_class := class_apeman ;
70305: LD_ADDR_OWVAR 28
70309: PUSH
70310: LD_INT 12
70312: ST_TO_ADDR
// hc_gallery :=  ;
70313: LD_ADDR_OWVAR 33
70317: PUSH
70318: LD_STRING 
70320: ST_TO_ADDR
// hc_name :=  ;
70321: LD_ADDR_OWVAR 26
70325: PUSH
70326: LD_STRING 
70328: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
70329: LD_ADDR_OWVAR 29
70333: PUSH
70334: LD_INT 10
70336: PUSH
70337: LD_INT 12
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: ST_TO_ADDR
// if agressivity = 0 then
70344: LD_VAR 0 1
70348: PUSH
70349: LD_INT 0
70351: EQUAL
70352: IFFALSE 70364
// hc_agressivity := 0 else
70354: LD_ADDR_OWVAR 35
70358: PUSH
70359: LD_INT 0
70361: ST_TO_ADDR
70362: GO 70385
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70364: LD_ADDR_OWVAR 35
70368: PUSH
70369: LD_VAR 0 1
70373: NEG
70374: PPUSH
70375: LD_VAR 0 1
70379: PPUSH
70380: CALL_OW 12
70384: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70385: LD_ADDR_OWVAR 31
70389: PUSH
70390: LD_INT 0
70392: PPUSH
70393: LD_INT 3
70395: PPUSH
70396: CALL_OW 12
70400: PUSH
70401: LD_INT 0
70403: PPUSH
70404: LD_INT 3
70406: PPUSH
70407: CALL_OW 12
70411: PUSH
70412: LD_INT 0
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: ST_TO_ADDR
// end ;
70424: LD_VAR 0 2
70428: RET
// export function PrepareTiger ( agressivity ) ; begin
70429: LD_INT 0
70431: PPUSH
// uc_side := 0 ;
70432: LD_ADDR_OWVAR 20
70436: PUSH
70437: LD_INT 0
70439: ST_TO_ADDR
// uc_nation := 0 ;
70440: LD_ADDR_OWVAR 21
70444: PUSH
70445: LD_INT 0
70447: ST_TO_ADDR
// InitHc ;
70448: CALL_OW 19
// hc_class := class_tiger ;
70452: LD_ADDR_OWVAR 28
70456: PUSH
70457: LD_INT 14
70459: ST_TO_ADDR
// hc_gallery :=  ;
70460: LD_ADDR_OWVAR 33
70464: PUSH
70465: LD_STRING 
70467: ST_TO_ADDR
// hc_name :=  ;
70468: LD_ADDR_OWVAR 26
70472: PUSH
70473: LD_STRING 
70475: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70476: LD_ADDR_OWVAR 35
70480: PUSH
70481: LD_VAR 0 1
70485: NEG
70486: PPUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 12
70496: ST_TO_ADDR
// end ;
70497: LD_VAR 0 2
70501: RET
// export function PrepareEnchidna ( ) ; begin
70502: LD_INT 0
70504: PPUSH
// uc_side := 0 ;
70505: LD_ADDR_OWVAR 20
70509: PUSH
70510: LD_INT 0
70512: ST_TO_ADDR
// uc_nation := 0 ;
70513: LD_ADDR_OWVAR 21
70517: PUSH
70518: LD_INT 0
70520: ST_TO_ADDR
// InitHc ;
70521: CALL_OW 19
// hc_class := class_baggie ;
70525: LD_ADDR_OWVAR 28
70529: PUSH
70530: LD_INT 13
70532: ST_TO_ADDR
// hc_gallery :=  ;
70533: LD_ADDR_OWVAR 33
70537: PUSH
70538: LD_STRING 
70540: ST_TO_ADDR
// hc_name :=  ;
70541: LD_ADDR_OWVAR 26
70545: PUSH
70546: LD_STRING 
70548: ST_TO_ADDR
// end ;
70549: LD_VAR 0 1
70553: RET
// export function PrepareFrog ( ) ; begin
70554: LD_INT 0
70556: PPUSH
// uc_side := 0 ;
70557: LD_ADDR_OWVAR 20
70561: PUSH
70562: LD_INT 0
70564: ST_TO_ADDR
// uc_nation := 0 ;
70565: LD_ADDR_OWVAR 21
70569: PUSH
70570: LD_INT 0
70572: ST_TO_ADDR
// InitHc ;
70573: CALL_OW 19
// hc_class := class_frog ;
70577: LD_ADDR_OWVAR 28
70581: PUSH
70582: LD_INT 19
70584: ST_TO_ADDR
// hc_gallery :=  ;
70585: LD_ADDR_OWVAR 33
70589: PUSH
70590: LD_STRING 
70592: ST_TO_ADDR
// hc_name :=  ;
70593: LD_ADDR_OWVAR 26
70597: PUSH
70598: LD_STRING 
70600: ST_TO_ADDR
// end ;
70601: LD_VAR 0 1
70605: RET
// export function PrepareFish ( ) ; begin
70606: LD_INT 0
70608: PPUSH
// uc_side := 0 ;
70609: LD_ADDR_OWVAR 20
70613: PUSH
70614: LD_INT 0
70616: ST_TO_ADDR
// uc_nation := 0 ;
70617: LD_ADDR_OWVAR 21
70621: PUSH
70622: LD_INT 0
70624: ST_TO_ADDR
// InitHc ;
70625: CALL_OW 19
// hc_class := class_fish ;
70629: LD_ADDR_OWVAR 28
70633: PUSH
70634: LD_INT 20
70636: ST_TO_ADDR
// hc_gallery :=  ;
70637: LD_ADDR_OWVAR 33
70641: PUSH
70642: LD_STRING 
70644: ST_TO_ADDR
// hc_name :=  ;
70645: LD_ADDR_OWVAR 26
70649: PUSH
70650: LD_STRING 
70652: ST_TO_ADDR
// end ;
70653: LD_VAR 0 1
70657: RET
// export function PrepareBird ( ) ; begin
70658: LD_INT 0
70660: PPUSH
// uc_side := 0 ;
70661: LD_ADDR_OWVAR 20
70665: PUSH
70666: LD_INT 0
70668: ST_TO_ADDR
// uc_nation := 0 ;
70669: LD_ADDR_OWVAR 21
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// InitHc ;
70677: CALL_OW 19
// hc_class := class_phororhacos ;
70681: LD_ADDR_OWVAR 28
70685: PUSH
70686: LD_INT 18
70688: ST_TO_ADDR
// hc_gallery :=  ;
70689: LD_ADDR_OWVAR 33
70693: PUSH
70694: LD_STRING 
70696: ST_TO_ADDR
// hc_name :=  ;
70697: LD_ADDR_OWVAR 26
70701: PUSH
70702: LD_STRING 
70704: ST_TO_ADDR
// end ;
70705: LD_VAR 0 1
70709: RET
// export function PrepareHorse ( ) ; begin
70710: LD_INT 0
70712: PPUSH
// uc_side := 0 ;
70713: LD_ADDR_OWVAR 20
70717: PUSH
70718: LD_INT 0
70720: ST_TO_ADDR
// uc_nation := 0 ;
70721: LD_ADDR_OWVAR 21
70725: PUSH
70726: LD_INT 0
70728: ST_TO_ADDR
// InitHc ;
70729: CALL_OW 19
// hc_class := class_horse ;
70733: LD_ADDR_OWVAR 28
70737: PUSH
70738: LD_INT 21
70740: ST_TO_ADDR
// hc_gallery :=  ;
70741: LD_ADDR_OWVAR 33
70745: PUSH
70746: LD_STRING 
70748: ST_TO_ADDR
// hc_name :=  ;
70749: LD_ADDR_OWVAR 26
70753: PUSH
70754: LD_STRING 
70756: ST_TO_ADDR
// end ;
70757: LD_VAR 0 1
70761: RET
// export function PrepareMastodont ( ) ; begin
70762: LD_INT 0
70764: PPUSH
// uc_side := 0 ;
70765: LD_ADDR_OWVAR 20
70769: PUSH
70770: LD_INT 0
70772: ST_TO_ADDR
// uc_nation := 0 ;
70773: LD_ADDR_OWVAR 21
70777: PUSH
70778: LD_INT 0
70780: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70781: LD_ADDR_OWVAR 37
70785: PUSH
70786: LD_INT 31
70788: ST_TO_ADDR
// vc_control := control_rider ;
70789: LD_ADDR_OWVAR 38
70793: PUSH
70794: LD_INT 4
70796: ST_TO_ADDR
// end ;
70797: LD_VAR 0 1
70801: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70802: LD_INT 0
70804: PPUSH
70805: PPUSH
70806: PPUSH
// uc_side = 0 ;
70807: LD_ADDR_OWVAR 20
70811: PUSH
70812: LD_INT 0
70814: ST_TO_ADDR
// uc_nation = 0 ;
70815: LD_ADDR_OWVAR 21
70819: PUSH
70820: LD_INT 0
70822: ST_TO_ADDR
// InitHc_All ( ) ;
70823: CALL_OW 584
// InitVc ;
70827: CALL_OW 20
// if mastodonts then
70831: LD_VAR 0 6
70835: IFFALSE 70902
// for i = 1 to mastodonts do
70837: LD_ADDR_VAR 0 11
70841: PUSH
70842: DOUBLE
70843: LD_INT 1
70845: DEC
70846: ST_TO_ADDR
70847: LD_VAR 0 6
70851: PUSH
70852: FOR_TO
70853: IFFALSE 70900
// begin vc_chassis := 31 ;
70855: LD_ADDR_OWVAR 37
70859: PUSH
70860: LD_INT 31
70862: ST_TO_ADDR
// vc_control := control_rider ;
70863: LD_ADDR_OWVAR 38
70867: PUSH
70868: LD_INT 4
70870: ST_TO_ADDR
// animal := CreateVehicle ;
70871: LD_ADDR_VAR 0 12
70875: PUSH
70876: CALL_OW 45
70880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70881: LD_VAR 0 12
70885: PPUSH
70886: LD_VAR 0 8
70890: PPUSH
70891: LD_INT 0
70893: PPUSH
70894: CALL 73044 0 3
// end ;
70898: GO 70852
70900: POP
70901: POP
// if horses then
70902: LD_VAR 0 5
70906: IFFALSE 70973
// for i = 1 to horses do
70908: LD_ADDR_VAR 0 11
70912: PUSH
70913: DOUBLE
70914: LD_INT 1
70916: DEC
70917: ST_TO_ADDR
70918: LD_VAR 0 5
70922: PUSH
70923: FOR_TO
70924: IFFALSE 70971
// begin hc_class := 21 ;
70926: LD_ADDR_OWVAR 28
70930: PUSH
70931: LD_INT 21
70933: ST_TO_ADDR
// hc_gallery :=  ;
70934: LD_ADDR_OWVAR 33
70938: PUSH
70939: LD_STRING 
70941: ST_TO_ADDR
// animal := CreateHuman ;
70942: LD_ADDR_VAR 0 12
70946: PUSH
70947: CALL_OW 44
70951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70952: LD_VAR 0 12
70956: PPUSH
70957: LD_VAR 0 8
70961: PPUSH
70962: LD_INT 0
70964: PPUSH
70965: CALL 73044 0 3
// end ;
70969: GO 70923
70971: POP
70972: POP
// if birds then
70973: LD_VAR 0 1
70977: IFFALSE 71044
// for i = 1 to birds do
70979: LD_ADDR_VAR 0 11
70983: PUSH
70984: DOUBLE
70985: LD_INT 1
70987: DEC
70988: ST_TO_ADDR
70989: LD_VAR 0 1
70993: PUSH
70994: FOR_TO
70995: IFFALSE 71042
// begin hc_class := 18 ;
70997: LD_ADDR_OWVAR 28
71001: PUSH
71002: LD_INT 18
71004: ST_TO_ADDR
// hc_gallery =  ;
71005: LD_ADDR_OWVAR 33
71009: PUSH
71010: LD_STRING 
71012: ST_TO_ADDR
// animal := CreateHuman ;
71013: LD_ADDR_VAR 0 12
71017: PUSH
71018: CALL_OW 44
71022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71023: LD_VAR 0 12
71027: PPUSH
71028: LD_VAR 0 8
71032: PPUSH
71033: LD_INT 0
71035: PPUSH
71036: CALL 73044 0 3
// end ;
71040: GO 70994
71042: POP
71043: POP
// if tigers then
71044: LD_VAR 0 2
71048: IFFALSE 71132
// for i = 1 to tigers do
71050: LD_ADDR_VAR 0 11
71054: PUSH
71055: DOUBLE
71056: LD_INT 1
71058: DEC
71059: ST_TO_ADDR
71060: LD_VAR 0 2
71064: PUSH
71065: FOR_TO
71066: IFFALSE 71130
// begin hc_class = class_tiger ;
71068: LD_ADDR_OWVAR 28
71072: PUSH
71073: LD_INT 14
71075: ST_TO_ADDR
// hc_gallery =  ;
71076: LD_ADDR_OWVAR 33
71080: PUSH
71081: LD_STRING 
71083: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71084: LD_ADDR_OWVAR 35
71088: PUSH
71089: LD_INT 7
71091: NEG
71092: PPUSH
71093: LD_INT 7
71095: PPUSH
71096: CALL_OW 12
71100: ST_TO_ADDR
// animal := CreateHuman ;
71101: LD_ADDR_VAR 0 12
71105: PUSH
71106: CALL_OW 44
71110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71111: LD_VAR 0 12
71115: PPUSH
71116: LD_VAR 0 8
71120: PPUSH
71121: LD_INT 0
71123: PPUSH
71124: CALL 73044 0 3
// end ;
71128: GO 71065
71130: POP
71131: POP
// if apemans then
71132: LD_VAR 0 3
71136: IFFALSE 71259
// for i = 1 to apemans do
71138: LD_ADDR_VAR 0 11
71142: PUSH
71143: DOUBLE
71144: LD_INT 1
71146: DEC
71147: ST_TO_ADDR
71148: LD_VAR 0 3
71152: PUSH
71153: FOR_TO
71154: IFFALSE 71257
// begin hc_class = class_apeman ;
71156: LD_ADDR_OWVAR 28
71160: PUSH
71161: LD_INT 12
71163: ST_TO_ADDR
// hc_gallery =  ;
71164: LD_ADDR_OWVAR 33
71168: PUSH
71169: LD_STRING 
71171: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71172: LD_ADDR_OWVAR 35
71176: PUSH
71177: LD_INT 2
71179: NEG
71180: PPUSH
71181: LD_INT 2
71183: PPUSH
71184: CALL_OW 12
71188: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71189: LD_ADDR_OWVAR 31
71193: PUSH
71194: LD_INT 1
71196: PPUSH
71197: LD_INT 3
71199: PPUSH
71200: CALL_OW 12
71204: PUSH
71205: LD_INT 1
71207: PPUSH
71208: LD_INT 3
71210: PPUSH
71211: CALL_OW 12
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: LD_INT 0
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: ST_TO_ADDR
// animal := CreateHuman ;
71228: LD_ADDR_VAR 0 12
71232: PUSH
71233: CALL_OW 44
71237: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71238: LD_VAR 0 12
71242: PPUSH
71243: LD_VAR 0 8
71247: PPUSH
71248: LD_INT 0
71250: PPUSH
71251: CALL 73044 0 3
// end ;
71255: GO 71153
71257: POP
71258: POP
// if enchidnas then
71259: LD_VAR 0 4
71263: IFFALSE 71330
// for i = 1 to enchidnas do
71265: LD_ADDR_VAR 0 11
71269: PUSH
71270: DOUBLE
71271: LD_INT 1
71273: DEC
71274: ST_TO_ADDR
71275: LD_VAR 0 4
71279: PUSH
71280: FOR_TO
71281: IFFALSE 71328
// begin hc_class = 13 ;
71283: LD_ADDR_OWVAR 28
71287: PUSH
71288: LD_INT 13
71290: ST_TO_ADDR
// hc_gallery =  ;
71291: LD_ADDR_OWVAR 33
71295: PUSH
71296: LD_STRING 
71298: ST_TO_ADDR
// animal := CreateHuman ;
71299: LD_ADDR_VAR 0 12
71303: PUSH
71304: CALL_OW 44
71308: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71309: LD_VAR 0 12
71313: PPUSH
71314: LD_VAR 0 8
71318: PPUSH
71319: LD_INT 0
71321: PPUSH
71322: CALL 73044 0 3
// end ;
71326: GO 71280
71328: POP
71329: POP
// if fishes then
71330: LD_VAR 0 7
71334: IFFALSE 71401
// for i = 1 to fishes do
71336: LD_ADDR_VAR 0 11
71340: PUSH
71341: DOUBLE
71342: LD_INT 1
71344: DEC
71345: ST_TO_ADDR
71346: LD_VAR 0 7
71350: PUSH
71351: FOR_TO
71352: IFFALSE 71399
// begin hc_class = 20 ;
71354: LD_ADDR_OWVAR 28
71358: PUSH
71359: LD_INT 20
71361: ST_TO_ADDR
// hc_gallery =  ;
71362: LD_ADDR_OWVAR 33
71366: PUSH
71367: LD_STRING 
71369: ST_TO_ADDR
// animal := CreateHuman ;
71370: LD_ADDR_VAR 0 12
71374: PUSH
71375: CALL_OW 44
71379: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71380: LD_VAR 0 12
71384: PPUSH
71385: LD_VAR 0 9
71389: PPUSH
71390: LD_INT 0
71392: PPUSH
71393: CALL 73044 0 3
// end ;
71397: GO 71351
71399: POP
71400: POP
// end ;
71401: LD_VAR 0 10
71405: RET
// export function WantHeal ( sci , unit ) ; begin
71406: LD_INT 0
71408: PPUSH
// if GetTaskList ( sci ) > 0 then
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 437
71418: PUSH
71419: LD_INT 0
71421: GREATER
71422: IFFALSE 71494
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71424: LD_VAR 0 1
71428: PPUSH
71429: CALL_OW 437
71433: PUSH
71434: LD_INT 1
71436: ARRAY
71437: PUSH
71438: LD_INT 1
71440: ARRAY
71441: PUSH
71442: LD_STRING l
71444: EQUAL
71445: IFFALSE 71472
71447: PUSH
71448: LD_VAR 0 1
71452: PPUSH
71453: CALL_OW 437
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: LD_INT 4
71464: ARRAY
71465: PUSH
71466: LD_VAR 0 2
71470: EQUAL
71471: AND
71472: IFFALSE 71484
// result := true else
71474: LD_ADDR_VAR 0 3
71478: PUSH
71479: LD_INT 1
71481: ST_TO_ADDR
71482: GO 71492
// result := false ;
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_INT 0
71491: ST_TO_ADDR
// end else
71492: GO 71502
// result := false ;
71494: LD_ADDR_VAR 0 3
71498: PUSH
71499: LD_INT 0
71501: ST_TO_ADDR
// end ;
71502: LD_VAR 0 3
71506: RET
// export function HealTarget ( sci ) ; begin
71507: LD_INT 0
71509: PPUSH
// if not sci then
71510: LD_VAR 0 1
71514: NOT
71515: IFFALSE 71519
// exit ;
71517: GO 71584
// result := 0 ;
71519: LD_ADDR_VAR 0 2
71523: PUSH
71524: LD_INT 0
71526: ST_TO_ADDR
// if GetTaskList ( sci ) then
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 437
71536: IFFALSE 71584
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71538: LD_VAR 0 1
71542: PPUSH
71543: CALL_OW 437
71547: PUSH
71548: LD_INT 1
71550: ARRAY
71551: PUSH
71552: LD_INT 1
71554: ARRAY
71555: PUSH
71556: LD_STRING l
71558: EQUAL
71559: IFFALSE 71584
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71561: LD_ADDR_VAR 0 2
71565: PUSH
71566: LD_VAR 0 1
71570: PPUSH
71571: CALL_OW 437
71575: PUSH
71576: LD_INT 1
71578: ARRAY
71579: PUSH
71580: LD_INT 4
71582: ARRAY
71583: ST_TO_ADDR
// end ;
71584: LD_VAR 0 2
71588: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71589: LD_INT 0
71591: PPUSH
71592: PPUSH
71593: PPUSH
71594: PPUSH
// if not base_units then
71595: LD_VAR 0 1
71599: NOT
71600: IFFALSE 71604
// exit ;
71602: GO 71691
// result := false ;
71604: LD_ADDR_VAR 0 2
71608: PUSH
71609: LD_INT 0
71611: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71612: LD_ADDR_VAR 0 5
71616: PUSH
71617: LD_VAR 0 1
71621: PPUSH
71622: LD_INT 21
71624: PUSH
71625: LD_INT 3
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PPUSH
71632: CALL_OW 72
71636: ST_TO_ADDR
// if not tmp then
71637: LD_VAR 0 5
71641: NOT
71642: IFFALSE 71646
// exit ;
71644: GO 71691
// for i in tmp do
71646: LD_ADDR_VAR 0 3
71650: PUSH
71651: LD_VAR 0 5
71655: PUSH
71656: FOR_IN
71657: IFFALSE 71689
// begin result := EnemyInRange ( i , 22 ) ;
71659: LD_ADDR_VAR 0 2
71663: PUSH
71664: LD_VAR 0 3
71668: PPUSH
71669: LD_INT 22
71671: PPUSH
71672: CALL 69106 0 2
71676: ST_TO_ADDR
// if result then
71677: LD_VAR 0 2
71681: IFFALSE 71687
// exit ;
71683: POP
71684: POP
71685: GO 71691
// end ;
71687: GO 71656
71689: POP
71690: POP
// end ;
71691: LD_VAR 0 2
71695: RET
// export function FilterByTag ( units , tag ) ; begin
71696: LD_INT 0
71698: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_VAR 0 1
71708: PPUSH
71709: LD_INT 120
71711: PUSH
71712: LD_VAR 0 2
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PPUSH
71721: CALL_OW 72
71725: ST_TO_ADDR
// end ;
71726: LD_VAR 0 3
71730: RET
// export function IsDriver ( un ) ; begin
71731: LD_INT 0
71733: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71734: LD_ADDR_VAR 0 2
71738: PUSH
71739: LD_VAR 0 1
71743: PUSH
71744: LD_INT 55
71746: PUSH
71747: EMPTY
71748: LIST
71749: PPUSH
71750: CALL_OW 69
71754: IN
71755: ST_TO_ADDR
// end ;
71756: LD_VAR 0 2
71760: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71761: LD_INT 0
71763: PPUSH
71764: PPUSH
// list := [ ] ;
71765: LD_ADDR_VAR 0 5
71769: PUSH
71770: EMPTY
71771: ST_TO_ADDR
// case d of 0 :
71772: LD_VAR 0 3
71776: PUSH
71777: LD_INT 0
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71785
71783: GO 71918
71785: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71786: LD_ADDR_VAR 0 5
71790: PUSH
71791: LD_VAR 0 1
71795: PUSH
71796: LD_INT 4
71798: MINUS
71799: PUSH
71800: LD_VAR 0 2
71804: PUSH
71805: LD_INT 4
71807: MINUS
71808: PUSH
71809: LD_INT 2
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: PUSH
71817: LD_VAR 0 1
71821: PUSH
71822: LD_INT 3
71824: MINUS
71825: PUSH
71826: LD_VAR 0 2
71830: PUSH
71831: LD_INT 1
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: LIST
71838: PUSH
71839: LD_VAR 0 1
71843: PUSH
71844: LD_INT 4
71846: PLUS
71847: PUSH
71848: LD_VAR 0 2
71852: PUSH
71853: LD_INT 4
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: LIST
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: LD_INT 3
71868: PLUS
71869: PUSH
71870: LD_VAR 0 2
71874: PUSH
71875: LD_INT 3
71877: PLUS
71878: PUSH
71879: LD_INT 5
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: LIST
71886: PUSH
71887: LD_VAR 0 1
71891: PUSH
71892: LD_VAR 0 2
71896: PUSH
71897: LD_INT 4
71899: PLUS
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: ST_TO_ADDR
// end ; 1 :
71916: GO 72616
71918: LD_INT 1
71920: DOUBLE
71921: EQUAL
71922: IFTRUE 71926
71924: GO 72059
71926: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71927: LD_ADDR_VAR 0 5
71931: PUSH
71932: LD_VAR 0 1
71936: PUSH
71937: LD_VAR 0 2
71941: PUSH
71942: LD_INT 4
71944: MINUS
71945: PUSH
71946: LD_INT 3
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: PUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_INT 3
71961: MINUS
71962: PUSH
71963: LD_VAR 0 2
71967: PUSH
71968: LD_INT 3
71970: MINUS
71971: PUSH
71972: LD_INT 2
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: PUSH
71980: LD_VAR 0 1
71984: PUSH
71985: LD_INT 4
71987: MINUS
71988: PUSH
71989: LD_VAR 0 2
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: LIST
72001: PUSH
72002: LD_VAR 0 1
72006: PUSH
72007: LD_VAR 0 2
72011: PUSH
72012: LD_INT 3
72014: PLUS
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: LIST
72023: PUSH
72024: LD_VAR 0 1
72028: PUSH
72029: LD_INT 4
72031: PLUS
72032: PUSH
72033: LD_VAR 0 2
72037: PUSH
72038: LD_INT 4
72040: PLUS
72041: PUSH
72042: LD_INT 5
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: LIST
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: ST_TO_ADDR
// end ; 2 :
72057: GO 72616
72059: LD_INT 2
72061: DOUBLE
72062: EQUAL
72063: IFTRUE 72067
72065: GO 72196
72067: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72068: LD_ADDR_VAR 0 5
72072: PUSH
72073: LD_VAR 0 1
72077: PUSH
72078: LD_VAR 0 2
72082: PUSH
72083: LD_INT 3
72085: MINUS
72086: PUSH
72087: LD_INT 3
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: LIST
72094: PUSH
72095: LD_VAR 0 1
72099: PUSH
72100: LD_INT 4
72102: PLUS
72103: PUSH
72104: LD_VAR 0 2
72108: PUSH
72109: LD_INT 4
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: LIST
72116: PUSH
72117: LD_VAR 0 1
72121: PUSH
72122: LD_VAR 0 2
72126: PUSH
72127: LD_INT 4
72129: PLUS
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: LIST
72138: PUSH
72139: LD_VAR 0 1
72143: PUSH
72144: LD_INT 3
72146: MINUS
72147: PUSH
72148: LD_VAR 0 2
72152: PUSH
72153: LD_INT 1
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: LD_VAR 0 1
72165: PUSH
72166: LD_INT 4
72168: MINUS
72169: PUSH
72170: LD_VAR 0 2
72174: PUSH
72175: LD_INT 4
72177: MINUS
72178: PUSH
72179: LD_INT 2
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: LIST
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: ST_TO_ADDR
// end ; 3 :
72194: GO 72616
72196: LD_INT 3
72198: DOUBLE
72199: EQUAL
72200: IFTRUE 72204
72202: GO 72337
72204: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72205: LD_ADDR_VAR 0 5
72209: PUSH
72210: LD_VAR 0 1
72214: PUSH
72215: LD_INT 3
72217: PLUS
72218: PUSH
72219: LD_VAR 0 2
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: LIST
72231: PUSH
72232: LD_VAR 0 1
72236: PUSH
72237: LD_INT 4
72239: PLUS
72240: PUSH
72241: LD_VAR 0 2
72245: PUSH
72246: LD_INT 4
72248: PLUS
72249: PUSH
72250: LD_INT 5
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: LIST
72257: PUSH
72258: LD_VAR 0 1
72262: PUSH
72263: LD_INT 4
72265: MINUS
72266: PUSH
72267: LD_VAR 0 2
72271: PUSH
72272: LD_INT 1
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: PUSH
72280: LD_VAR 0 1
72284: PUSH
72285: LD_VAR 0 2
72289: PUSH
72290: LD_INT 4
72292: MINUS
72293: PUSH
72294: LD_INT 3
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: PUSH
72302: LD_VAR 0 1
72306: PUSH
72307: LD_INT 3
72309: MINUS
72310: PUSH
72311: LD_VAR 0 2
72315: PUSH
72316: LD_INT 3
72318: MINUS
72319: PUSH
72320: LD_INT 2
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: LIST
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: ST_TO_ADDR
// end ; 4 :
72335: GO 72616
72337: LD_INT 4
72339: DOUBLE
72340: EQUAL
72341: IFTRUE 72345
72343: GO 72478
72345: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72346: LD_ADDR_VAR 0 5
72350: PUSH
72351: LD_VAR 0 1
72355: PUSH
72356: LD_VAR 0 2
72360: PUSH
72361: LD_INT 4
72363: PLUS
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: PUSH
72373: LD_VAR 0 1
72377: PUSH
72378: LD_INT 3
72380: PLUS
72381: PUSH
72382: LD_VAR 0 2
72386: PUSH
72387: LD_INT 3
72389: PLUS
72390: PUSH
72391: LD_INT 5
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: LIST
72398: PUSH
72399: LD_VAR 0 1
72403: PUSH
72404: LD_INT 4
72406: PLUS
72407: PUSH
72408: LD_VAR 0 2
72412: PUSH
72413: LD_INT 4
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: LIST
72420: PUSH
72421: LD_VAR 0 1
72425: PUSH
72426: LD_VAR 0 2
72430: PUSH
72431: LD_INT 3
72433: MINUS
72434: PUSH
72435: LD_INT 3
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: LD_VAR 0 1
72447: PUSH
72448: LD_INT 4
72450: MINUS
72451: PUSH
72452: LD_VAR 0 2
72456: PUSH
72457: LD_INT 4
72459: MINUS
72460: PUSH
72461: LD_INT 2
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: LIST
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: ST_TO_ADDR
// end ; 5 :
72476: GO 72616
72478: LD_INT 5
72480: DOUBLE
72481: EQUAL
72482: IFTRUE 72486
72484: GO 72615
72486: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72487: LD_ADDR_VAR 0 5
72491: PUSH
72492: LD_VAR 0 1
72496: PUSH
72497: LD_INT 4
72499: MINUS
72500: PUSH
72501: LD_VAR 0 2
72505: PUSH
72506: LD_INT 1
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: LIST
72513: PUSH
72514: LD_VAR 0 1
72518: PUSH
72519: LD_VAR 0 2
72523: PUSH
72524: LD_INT 4
72526: MINUS
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: PUSH
72536: LD_VAR 0 1
72540: PUSH
72541: LD_INT 4
72543: PLUS
72544: PUSH
72545: LD_VAR 0 2
72549: PUSH
72550: LD_INT 4
72552: PLUS
72553: PUSH
72554: LD_INT 5
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: LIST
72561: PUSH
72562: LD_VAR 0 1
72566: PUSH
72567: LD_INT 3
72569: PLUS
72570: PUSH
72571: LD_VAR 0 2
72575: PUSH
72576: LD_INT 4
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: LIST
72583: PUSH
72584: LD_VAR 0 1
72588: PUSH
72589: LD_VAR 0 2
72593: PUSH
72594: LD_INT 3
72596: PLUS
72597: PUSH
72598: LD_INT 0
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: LIST
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: ST_TO_ADDR
// end ; end ;
72613: GO 72616
72615: POP
// result := list ;
72616: LD_ADDR_VAR 0 4
72620: PUSH
72621: LD_VAR 0 5
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 4
72630: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
72635: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72636: LD_VAR 0 1
72640: NOT
72641: IFTRUE 72669
72643: PUSH
72644: LD_VAR 0 2
72648: PUSH
72649: LD_INT 1
72651: PUSH
72652: LD_INT 2
72654: PUSH
72655: LD_INT 3
72657: PUSH
72658: LD_INT 4
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: IN
72667: NOT
72668: OR
72669: IFFALSE 72673
// exit ;
72671: GO 72756
// tmp := [ ] ;
72673: LD_ADDR_VAR 0 5
72677: PUSH
72678: EMPTY
72679: ST_TO_ADDR
// for i in units do
72680: LD_ADDR_VAR 0 4
72684: PUSH
72685: LD_VAR 0 1
72689: PUSH
72690: FOR_IN
72691: IFFALSE 72725
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72693: LD_ADDR_VAR 0 5
72697: PUSH
72698: LD_VAR 0 5
72702: PPUSH
72703: LD_VAR 0 4
72707: PPUSH
72708: LD_VAR 0 2
72712: PPUSH
72713: CALL_OW 259
72717: PPUSH
72718: CALL 74151 0 2
72722: ST_TO_ADDR
72723: GO 72690
72725: POP
72726: POP
// if not tmp then
72727: LD_VAR 0 5
72731: NOT
72732: IFFALSE 72736
// exit ;
72734: GO 72756
// result := SortListByListDesc ( units , tmp ) ;
72736: LD_ADDR_VAR 0 3
72740: PUSH
72741: LD_VAR 0 1
72745: PPUSH
72746: LD_VAR 0 5
72750: PPUSH
72751: CALL_OW 77
72755: ST_TO_ADDR
// end ;
72756: LD_VAR 0 3
72760: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72761: LD_INT 0
72763: PPUSH
72764: PPUSH
72765: PPUSH
// result := false ;
72766: LD_ADDR_VAR 0 3
72770: PUSH
72771: LD_INT 0
72773: ST_TO_ADDR
// if not building then
72774: LD_VAR 0 2
72778: NOT
72779: IFFALSE 72783
// exit ;
72781: GO 72927
// x := GetX ( building ) ;
72783: LD_ADDR_VAR 0 4
72787: PUSH
72788: LD_VAR 0 2
72792: PPUSH
72793: CALL_OW 250
72797: ST_TO_ADDR
// y := GetY ( building ) ;
72798: LD_ADDR_VAR 0 5
72802: PUSH
72803: LD_VAR 0 2
72807: PPUSH
72808: CALL_OW 251
72812: ST_TO_ADDR
// if not x or not y then
72813: LD_VAR 0 4
72817: NOT
72818: IFTRUE 72827
72820: PUSH
72821: LD_VAR 0 5
72825: NOT
72826: OR
72827: IFFALSE 72831
// exit ;
72829: GO 72927
// if GetTaskList ( unit ) then
72831: LD_VAR 0 1
72835: PPUSH
72836: CALL_OW 437
72840: IFFALSE 72927
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72842: LD_STRING e
72844: PUSH
72845: LD_VAR 0 1
72849: PPUSH
72850: CALL_OW 437
72854: PUSH
72855: LD_INT 1
72857: ARRAY
72858: PUSH
72859: LD_INT 1
72861: ARRAY
72862: EQUAL
72863: IFFALSE 72890
72865: PUSH
72866: LD_VAR 0 4
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 437
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PUSH
72885: LD_INT 2
72887: ARRAY
72888: EQUAL
72889: AND
72890: IFFALSE 72917
72892: PUSH
72893: LD_VAR 0 5
72897: PUSH
72898: LD_VAR 0 1
72902: PPUSH
72903: CALL_OW 437
72907: PUSH
72908: LD_INT 1
72910: ARRAY
72911: PUSH
72912: LD_INT 3
72914: ARRAY
72915: EQUAL
72916: AND
72917: IFFALSE 72927
// result := true end ;
72919: LD_ADDR_VAR 0 3
72923: PUSH
72924: LD_INT 1
72926: ST_TO_ADDR
// end ;
72927: LD_VAR 0 3
72931: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72932: LD_INT 0
72934: PPUSH
// result := false ;
72935: LD_ADDR_VAR 0 4
72939: PUSH
72940: LD_INT 0
72942: ST_TO_ADDR
// if GetTaskList ( unit ) then
72943: LD_VAR 0 1
72947: PPUSH
72948: CALL_OW 437
72952: IFFALSE 73039
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72954: LD_STRING M
72956: PUSH
72957: LD_VAR 0 1
72961: PPUSH
72962: CALL_OW 437
72966: PUSH
72967: LD_INT 1
72969: ARRAY
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: EQUAL
72975: IFFALSE 73002
72977: PUSH
72978: LD_VAR 0 2
72982: PUSH
72983: LD_VAR 0 1
72987: PPUSH
72988: CALL_OW 437
72992: PUSH
72993: LD_INT 1
72995: ARRAY
72996: PUSH
72997: LD_INT 2
72999: ARRAY
73000: EQUAL
73001: AND
73002: IFFALSE 73029
73004: PUSH
73005: LD_VAR 0 3
73009: PUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: CALL_OW 437
73019: PUSH
73020: LD_INT 1
73022: ARRAY
73023: PUSH
73024: LD_INT 3
73026: ARRAY
73027: EQUAL
73028: AND
73029: IFFALSE 73039
// result := true ;
73031: LD_ADDR_VAR 0 4
73035: PUSH
73036: LD_INT 1
73038: ST_TO_ADDR
// end ; end ;
73039: LD_VAR 0 4
73043: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73044: LD_INT 0
73046: PPUSH
73047: PPUSH
73048: PPUSH
73049: PPUSH
// if not unit or not area then
73050: LD_VAR 0 1
73054: NOT
73055: IFTRUE 73064
73057: PUSH
73058: LD_VAR 0 2
73062: NOT
73063: OR
73064: IFFALSE 73068
// exit ;
73066: GO 73244
// tmp := AreaToList ( area , i ) ;
73068: LD_ADDR_VAR 0 6
73072: PUSH
73073: LD_VAR 0 2
73077: PPUSH
73078: LD_VAR 0 5
73082: PPUSH
73083: CALL_OW 517
73087: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73088: LD_ADDR_VAR 0 5
73092: PUSH
73093: DOUBLE
73094: LD_INT 1
73096: DEC
73097: ST_TO_ADDR
73098: LD_VAR 0 6
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PUSH
73107: FOR_TO
73108: IFFALSE 73242
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73110: LD_ADDR_VAR 0 7
73114: PUSH
73115: LD_VAR 0 6
73119: PUSH
73120: LD_INT 1
73122: ARRAY
73123: PUSH
73124: LD_VAR 0 5
73128: ARRAY
73129: PUSH
73130: LD_VAR 0 6
73134: PUSH
73135: LD_INT 2
73137: ARRAY
73138: PUSH
73139: LD_VAR 0 5
73143: ARRAY
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73149: LD_INT 92
73151: PUSH
73152: LD_VAR 0 7
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: PUSH
73161: LD_VAR 0 7
73165: PUSH
73166: LD_INT 2
73168: ARRAY
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: PPUSH
73179: CALL_OW 69
73183: PUSH
73184: LD_INT 0
73186: EQUAL
73187: IFFALSE 73240
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73189: LD_VAR 0 1
73193: PPUSH
73194: LD_VAR 0 7
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: PPUSH
73203: LD_VAR 0 7
73207: PUSH
73208: LD_INT 2
73210: ARRAY
73211: PPUSH
73212: LD_VAR 0 3
73216: PPUSH
73217: CALL_OW 48
// result := IsPlaced ( unit ) ;
73221: LD_ADDR_VAR 0 4
73225: PUSH
73226: LD_VAR 0 1
73230: PPUSH
73231: CALL_OW 305
73235: ST_TO_ADDR
// exit ;
73236: POP
73237: POP
73238: GO 73244
// end ; end ;
73240: GO 73107
73242: POP
73243: POP
// end ;
73244: LD_VAR 0 4
73248: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73249: LD_INT 0
73251: PPUSH
73252: PPUSH
73253: PPUSH
// if not side or side > 8 then
73254: LD_VAR 0 1
73258: NOT
73259: IFTRUE 73271
73261: PUSH
73262: LD_VAR 0 1
73266: PUSH
73267: LD_INT 8
73269: GREATER
73270: OR
73271: IFFALSE 73275
// exit ;
73273: GO 73462
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73275: LD_ADDR_VAR 0 4
73279: PUSH
73280: LD_INT 22
73282: PUSH
73283: LD_VAR 0 1
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 21
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PPUSH
73306: CALL_OW 69
73310: ST_TO_ADDR
// if not tmp then
73311: LD_VAR 0 4
73315: NOT
73316: IFFALSE 73320
// exit ;
73318: GO 73462
// enable_addtolog := true ;
73320: LD_ADDR_OWVAR 81
73324: PUSH
73325: LD_INT 1
73327: ST_TO_ADDR
// AddToLog ( [ ) ;
73328: LD_STRING [
73330: PPUSH
73331: CALL_OW 561
// for i in tmp do
73335: LD_ADDR_VAR 0 3
73339: PUSH
73340: LD_VAR 0 4
73344: PUSH
73345: FOR_IN
73346: IFFALSE 73453
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73348: LD_STRING [
73350: PUSH
73351: LD_VAR 0 3
73355: PPUSH
73356: CALL_OW 266
73360: STR
73361: PUSH
73362: LD_STRING , 
73364: STR
73365: PUSH
73366: LD_VAR 0 3
73370: PPUSH
73371: CALL_OW 250
73375: STR
73376: PUSH
73377: LD_STRING , 
73379: STR
73380: PUSH
73381: LD_VAR 0 3
73385: PPUSH
73386: CALL_OW 251
73390: STR
73391: PUSH
73392: LD_STRING , 
73394: STR
73395: PUSH
73396: LD_VAR 0 3
73400: PPUSH
73401: CALL_OW 254
73405: STR
73406: PUSH
73407: LD_STRING , 
73409: STR
73410: PUSH
73411: LD_VAR 0 3
73415: PPUSH
73416: LD_INT 1
73418: PPUSH
73419: CALL_OW 268
73423: STR
73424: PUSH
73425: LD_STRING , 
73427: STR
73428: PUSH
73429: LD_VAR 0 3
73433: PPUSH
73434: LD_INT 2
73436: PPUSH
73437: CALL_OW 268
73441: STR
73442: PUSH
73443: LD_STRING ],
73445: STR
73446: PPUSH
73447: CALL_OW 561
// end ;
73451: GO 73345
73453: POP
73454: POP
// AddToLog ( ]; ) ;
73455: LD_STRING ];
73457: PPUSH
73458: CALL_OW 561
// end ;
73462: LD_VAR 0 2
73466: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73467: LD_INT 0
73469: PPUSH
73470: PPUSH
73471: PPUSH
73472: PPUSH
73473: PPUSH
// if not area or not rate or not max then
73474: LD_VAR 0 1
73478: NOT
73479: IFTRUE 73488
73481: PUSH
73482: LD_VAR 0 2
73486: NOT
73487: OR
73488: IFTRUE 73497
73490: PUSH
73491: LD_VAR 0 4
73495: NOT
73496: OR
73497: IFFALSE 73501
// exit ;
73499: GO 73690
// while 1 do
73501: LD_INT 1
73503: IFFALSE 73690
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73505: LD_ADDR_VAR 0 9
73509: PUSH
73510: LD_VAR 0 1
73514: PPUSH
73515: LD_INT 1
73517: PPUSH
73518: CALL_OW 287
73522: PUSH
73523: LD_INT 10
73525: MUL
73526: ST_TO_ADDR
// r := rate / 10 ;
73527: LD_ADDR_VAR 0 7
73531: PUSH
73532: LD_VAR 0 2
73536: PUSH
73537: LD_INT 10
73539: DIVREAL
73540: ST_TO_ADDR
// time := 1 1$00 ;
73541: LD_ADDR_VAR 0 8
73545: PUSH
73546: LD_INT 2100
73548: ST_TO_ADDR
// if amount < min then
73549: LD_VAR 0 9
73553: PUSH
73554: LD_VAR 0 3
73558: LESS
73559: IFFALSE 73577
// r := r * 2 else
73561: LD_ADDR_VAR 0 7
73565: PUSH
73566: LD_VAR 0 7
73570: PUSH
73571: LD_INT 2
73573: MUL
73574: ST_TO_ADDR
73575: GO 73603
// if amount > max then
73577: LD_VAR 0 9
73581: PUSH
73582: LD_VAR 0 4
73586: GREATER
73587: IFFALSE 73603
// r := r / 2 ;
73589: LD_ADDR_VAR 0 7
73593: PUSH
73594: LD_VAR 0 7
73598: PUSH
73599: LD_INT 2
73601: DIVREAL
73602: ST_TO_ADDR
// time := time / r ;
73603: LD_ADDR_VAR 0 8
73607: PUSH
73608: LD_VAR 0 8
73612: PUSH
73613: LD_VAR 0 7
73617: DIVREAL
73618: ST_TO_ADDR
// if time < 0 then
73619: LD_VAR 0 8
73623: PUSH
73624: LD_INT 0
73626: LESS
73627: IFFALSE 73644
// time := time * - 1 ;
73629: LD_ADDR_VAR 0 8
73633: PUSH
73634: LD_VAR 0 8
73638: PUSH
73639: LD_INT 1
73641: NEG
73642: MUL
73643: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73644: LD_VAR 0 8
73648: PUSH
73649: LD_INT 35
73651: PPUSH
73652: LD_INT 875
73654: PPUSH
73655: CALL_OW 12
73659: PLUS
73660: PPUSH
73661: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73665: LD_INT 1
73667: PPUSH
73668: LD_INT 5
73670: PPUSH
73671: CALL_OW 12
73675: PPUSH
73676: LD_VAR 0 1
73680: PPUSH
73681: LD_INT 1
73683: PPUSH
73684: CALL_OW 55
// end ;
73688: GO 73501
// end ;
73690: LD_VAR 0 5
73694: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73695: LD_INT 0
73697: PPUSH
73698: PPUSH
73699: PPUSH
73700: PPUSH
73701: PPUSH
73702: PPUSH
73703: PPUSH
73704: PPUSH
// if not turrets or not factories then
73705: LD_VAR 0 1
73709: NOT
73710: IFTRUE 73719
73712: PUSH
73713: LD_VAR 0 2
73717: NOT
73718: OR
73719: IFFALSE 73723
// exit ;
73721: GO 74030
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73723: LD_ADDR_VAR 0 10
73727: PUSH
73728: LD_INT 5
73730: PUSH
73731: LD_INT 6
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 2
73740: PUSH
73741: LD_INT 4
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 3
73750: PUSH
73751: LD_INT 5
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 24
73765: PUSH
73766: LD_INT 25
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 23
73775: PUSH
73776: LD_INT 27
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 42
73789: PUSH
73790: LD_INT 43
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: LD_INT 44
73799: PUSH
73800: LD_INT 46
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 45
73809: PUSH
73810: LD_INT 47
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: LIST
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: LIST
73826: ST_TO_ADDR
// result := [ ] ;
73827: LD_ADDR_VAR 0 3
73831: PUSH
73832: EMPTY
73833: ST_TO_ADDR
// for i in turrets do
73834: LD_ADDR_VAR 0 4
73838: PUSH
73839: LD_VAR 0 1
73843: PUSH
73844: FOR_IN
73845: IFFALSE 74028
// begin nat := GetNation ( i ) ;
73847: LD_ADDR_VAR 0 7
73851: PUSH
73852: LD_VAR 0 4
73856: PPUSH
73857: CALL_OW 248
73861: ST_TO_ADDR
// weapon := 0 ;
73862: LD_ADDR_VAR 0 8
73866: PUSH
73867: LD_INT 0
73869: ST_TO_ADDR
// if not nat then
73870: LD_VAR 0 7
73874: NOT
73875: IFFALSE 73879
// continue ;
73877: GO 73844
// for j in list [ nat ] do
73879: LD_ADDR_VAR 0 5
73883: PUSH
73884: LD_VAR 0 10
73888: PUSH
73889: LD_VAR 0 7
73893: ARRAY
73894: PUSH
73895: FOR_IN
73896: IFFALSE 73937
// if GetBWeapon ( i ) = j [ 1 ] then
73898: LD_VAR 0 4
73902: PPUSH
73903: CALL_OW 269
73907: PUSH
73908: LD_VAR 0 5
73912: PUSH
73913: LD_INT 1
73915: ARRAY
73916: EQUAL
73917: IFFALSE 73935
// begin weapon := j [ 2 ] ;
73919: LD_ADDR_VAR 0 8
73923: PUSH
73924: LD_VAR 0 5
73928: PUSH
73929: LD_INT 2
73931: ARRAY
73932: ST_TO_ADDR
// break ;
73933: GO 73937
// end ;
73935: GO 73895
73937: POP
73938: POP
// if not weapon then
73939: LD_VAR 0 8
73943: NOT
73944: IFFALSE 73948
// continue ;
73946: GO 73844
// for k in factories do
73948: LD_ADDR_VAR 0 6
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: FOR_IN
73959: IFFALSE 74024
// begin weapons := AvailableWeaponList ( k ) ;
73961: LD_ADDR_VAR 0 9
73965: PUSH
73966: LD_VAR 0 6
73970: PPUSH
73971: CALL_OW 478
73975: ST_TO_ADDR
// if not weapons then
73976: LD_VAR 0 9
73980: NOT
73981: IFFALSE 73985
// continue ;
73983: GO 73958
// if weapon in weapons then
73985: LD_VAR 0 8
73989: PUSH
73990: LD_VAR 0 9
73994: IN
73995: IFFALSE 74022
// begin result := [ i , weapon ] ;
73997: LD_ADDR_VAR 0 3
74001: PUSH
74002: LD_VAR 0 4
74006: PUSH
74007: LD_VAR 0 8
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: ST_TO_ADDR
// exit ;
74016: POP
74017: POP
74018: POP
74019: POP
74020: GO 74030
// end ; end ;
74022: GO 73958
74024: POP
74025: POP
// end ;
74026: GO 73844
74028: POP
74029: POP
// end ;
74030: LD_VAR 0 3
74034: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74035: LD_INT 0
74037: PPUSH
// if not side or side > 8 then
74038: LD_VAR 0 3
74042: NOT
74043: IFTRUE 74055
74045: PUSH
74046: LD_VAR 0 3
74050: PUSH
74051: LD_INT 8
74053: GREATER
74054: OR
74055: IFFALSE 74059
// exit ;
74057: GO 74118
// if not range then
74059: LD_VAR 0 4
74063: NOT
74064: IFFALSE 74075
// range := - 12 ;
74066: LD_ADDR_VAR 0 4
74070: PUSH
74071: LD_INT 12
74073: NEG
74074: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74075: LD_VAR 0 1
74079: PPUSH
74080: LD_VAR 0 2
74084: PPUSH
74085: LD_VAR 0 3
74089: PPUSH
74090: LD_VAR 0 4
74094: PPUSH
74095: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74099: LD_VAR 0 1
74103: PPUSH
74104: LD_VAR 0 2
74108: PPUSH
74109: LD_VAR 0 3
74113: PPUSH
74114: CALL_OW 331
// end ;
74118: LD_VAR 0 5
74122: RET
// export function Video ( mode ) ; begin
74123: LD_INT 0
74125: PPUSH
// ingame_video = mode ;
74126: LD_ADDR_OWVAR 52
74130: PUSH
74131: LD_VAR 0 1
74135: ST_TO_ADDR
// interface_hidden = mode ;
74136: LD_ADDR_OWVAR 54
74140: PUSH
74141: LD_VAR 0 1
74145: ST_TO_ADDR
// end ;
74146: LD_VAR 0 2
74150: RET
// export function Join ( array , element ) ; begin
74151: LD_INT 0
74153: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74154: LD_ADDR_VAR 0 3
74158: PUSH
74159: LD_VAR 0 1
74163: PPUSH
74164: LD_VAR 0 1
74168: PUSH
74169: LD_INT 1
74171: PLUS
74172: PPUSH
74173: LD_VAR 0 2
74177: PPUSH
74178: CALL_OW 1
74182: ST_TO_ADDR
// end ;
74183: LD_VAR 0 3
74187: RET
// export function JoinUnion ( array , element ) ; begin
74188: LD_INT 0
74190: PPUSH
// result := array union element ;
74191: LD_ADDR_VAR 0 3
74195: PUSH
74196: LD_VAR 0 1
74200: PUSH
74201: LD_VAR 0 2
74205: UNION
74206: ST_TO_ADDR
// end ;
74207: LD_VAR 0 3
74211: RET
// export function GetBehemoths ( side ) ; begin
74212: LD_INT 0
74214: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74215: LD_ADDR_VAR 0 2
74219: PUSH
74220: LD_INT 22
74222: PUSH
74223: LD_VAR 0 1
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 31
74234: PUSH
74235: LD_INT 25
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PPUSH
74246: CALL_OW 69
74250: ST_TO_ADDR
// end ;
74251: LD_VAR 0 2
74255: RET
// export function Shuffle ( array ) ; var i , index ; begin
74256: LD_INT 0
74258: PPUSH
74259: PPUSH
74260: PPUSH
// result := [ ] ;
74261: LD_ADDR_VAR 0 2
74265: PUSH
74266: EMPTY
74267: ST_TO_ADDR
// if not array then
74268: LD_VAR 0 1
74272: NOT
74273: IFFALSE 74277
// exit ;
74275: GO 74376
// Randomize ;
74277: CALL_OW 10
// for i = array downto 1 do
74281: LD_ADDR_VAR 0 3
74285: PUSH
74286: DOUBLE
74287: LD_VAR 0 1
74291: INC
74292: ST_TO_ADDR
74293: LD_INT 1
74295: PUSH
74296: FOR_DOWNTO
74297: IFFALSE 74374
// begin index := rand ( 1 , array ) ;
74299: LD_ADDR_VAR 0 4
74303: PUSH
74304: LD_INT 1
74306: PPUSH
74307: LD_VAR 0 1
74311: PPUSH
74312: CALL_OW 12
74316: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74317: LD_ADDR_VAR 0 2
74321: PUSH
74322: LD_VAR 0 2
74326: PPUSH
74327: LD_VAR 0 2
74331: PUSH
74332: LD_INT 1
74334: PLUS
74335: PPUSH
74336: LD_VAR 0 1
74340: PUSH
74341: LD_VAR 0 4
74345: ARRAY
74346: PPUSH
74347: CALL_OW 2
74351: ST_TO_ADDR
// array := Delete ( array , index ) ;
74352: LD_ADDR_VAR 0 1
74356: PUSH
74357: LD_VAR 0 1
74361: PPUSH
74362: LD_VAR 0 4
74366: PPUSH
74367: CALL_OW 3
74371: ST_TO_ADDR
// end ;
74372: GO 74296
74374: POP
74375: POP
// end ;
74376: LD_VAR 0 2
74380: RET
// export function GetBaseMaterials ( base ) ; begin
74381: LD_INT 0
74383: PPUSH
// result := [ 0 , 0 , 0 ] ;
74384: LD_ADDR_VAR 0 2
74388: PUSH
74389: LD_INT 0
74391: PUSH
74392: LD_INT 0
74394: PUSH
74395: LD_INT 0
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: ST_TO_ADDR
// if not base then
74403: LD_VAR 0 1
74407: NOT
74408: IFFALSE 74412
// exit ;
74410: GO 74461
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74412: LD_ADDR_VAR 0 2
74416: PUSH
74417: LD_VAR 0 1
74421: PPUSH
74422: LD_INT 1
74424: PPUSH
74425: CALL_OW 275
74429: PUSH
74430: LD_VAR 0 1
74434: PPUSH
74435: LD_INT 2
74437: PPUSH
74438: CALL_OW 275
74442: PUSH
74443: LD_VAR 0 1
74447: PPUSH
74448: LD_INT 3
74450: PPUSH
74451: CALL_OW 275
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: ST_TO_ADDR
// end ;
74461: LD_VAR 0 2
74465: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74466: LD_INT 0
74468: PPUSH
74469: PPUSH
// result := array ;
74470: LD_ADDR_VAR 0 3
74474: PUSH
74475: LD_VAR 0 1
74479: ST_TO_ADDR
// if size >= result then
74480: LD_VAR 0 2
74484: PUSH
74485: LD_VAR 0 3
74489: GREATEREQUAL
74490: IFFALSE 74494
// exit ;
74492: GO 74544
// if size then
74494: LD_VAR 0 2
74498: IFFALSE 74544
// for i := array downto size do
74500: LD_ADDR_VAR 0 4
74504: PUSH
74505: DOUBLE
74506: LD_VAR 0 1
74510: INC
74511: ST_TO_ADDR
74512: LD_VAR 0 2
74516: PUSH
74517: FOR_DOWNTO
74518: IFFALSE 74542
// result := Delete ( result , result ) ;
74520: LD_ADDR_VAR 0 3
74524: PUSH
74525: LD_VAR 0 3
74529: PPUSH
74530: LD_VAR 0 3
74534: PPUSH
74535: CALL_OW 3
74539: ST_TO_ADDR
74540: GO 74517
74542: POP
74543: POP
// end ;
74544: LD_VAR 0 3
74548: RET
// export function ComExit ( unit ) ; var tmp ; begin
74549: LD_INT 0
74551: PPUSH
74552: PPUSH
// if not IsInUnit ( unit ) then
74553: LD_VAR 0 1
74557: PPUSH
74558: CALL_OW 310
74562: NOT
74563: IFFALSE 74567
// exit ;
74565: GO 74627
// tmp := IsInUnit ( unit ) ;
74567: LD_ADDR_VAR 0 3
74571: PUSH
74572: LD_VAR 0 1
74576: PPUSH
74577: CALL_OW 310
74581: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74582: LD_VAR 0 3
74586: PPUSH
74587: CALL_OW 247
74591: PUSH
74592: LD_INT 2
74594: EQUAL
74595: IFFALSE 74608
// ComExitVehicle ( unit ) else
74597: LD_VAR 0 1
74601: PPUSH
74602: CALL_OW 121
74606: GO 74617
// ComExitBuilding ( unit ) ;
74608: LD_VAR 0 1
74612: PPUSH
74613: CALL_OW 122
// result := tmp ;
74617: LD_ADDR_VAR 0 2
74621: PUSH
74622: LD_VAR 0 3
74626: ST_TO_ADDR
// end ;
74627: LD_VAR 0 2
74631: RET
// export function ComExitAll ( units ) ; var i ; begin
74632: LD_INT 0
74634: PPUSH
74635: PPUSH
// if not units then
74636: LD_VAR 0 1
74640: NOT
74641: IFFALSE 74645
// exit ;
74643: GO 74671
// for i in units do
74645: LD_ADDR_VAR 0 3
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: FOR_IN
74656: IFFALSE 74669
// ComExit ( i ) ;
74658: LD_VAR 0 3
74662: PPUSH
74663: CALL 74549 0 1
74667: GO 74655
74669: POP
74670: POP
// end ;
74671: LD_VAR 0 2
74675: RET
// export function ResetHc ; begin
74676: LD_INT 0
74678: PPUSH
// InitHc ;
74679: CALL_OW 19
// hc_importance := 0 ;
74683: LD_ADDR_OWVAR 32
74687: PUSH
74688: LD_INT 0
74690: ST_TO_ADDR
// end ;
74691: LD_VAR 0 1
74695: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74696: LD_INT 0
74698: PPUSH
74699: PPUSH
74700: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74701: LD_ADDR_VAR 0 6
74705: PUSH
74706: LD_VAR 0 1
74710: PUSH
74711: LD_VAR 0 3
74715: PLUS
74716: PUSH
74717: LD_INT 2
74719: DIV
74720: ST_TO_ADDR
// if _x < 0 then
74721: LD_VAR 0 6
74725: PUSH
74726: LD_INT 0
74728: LESS
74729: IFFALSE 74746
// _x := _x * - 1 ;
74731: LD_ADDR_VAR 0 6
74735: PUSH
74736: LD_VAR 0 6
74740: PUSH
74741: LD_INT 1
74743: NEG
74744: MUL
74745: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74746: LD_ADDR_VAR 0 7
74750: PUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_VAR 0 4
74760: PLUS
74761: PUSH
74762: LD_INT 2
74764: DIV
74765: ST_TO_ADDR
// if _y < 0 then
74766: LD_VAR 0 7
74770: PUSH
74771: LD_INT 0
74773: LESS
74774: IFFALSE 74791
// _y := _y * - 1 ;
74776: LD_ADDR_VAR 0 7
74780: PUSH
74781: LD_VAR 0 7
74785: PUSH
74786: LD_INT 1
74788: NEG
74789: MUL
74790: ST_TO_ADDR
// result := [ _x , _y ] ;
74791: LD_ADDR_VAR 0 5
74795: PUSH
74796: LD_VAR 0 6
74800: PUSH
74801: LD_VAR 0 7
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: ST_TO_ADDR
// end ;
74810: LD_VAR 0 5
74814: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74815: LD_INT 0
74817: PPUSH
74818: PPUSH
74819: PPUSH
74820: PPUSH
// task := GetTaskList ( unit ) ;
74821: LD_ADDR_VAR 0 7
74825: PUSH
74826: LD_VAR 0 1
74830: PPUSH
74831: CALL_OW 437
74835: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74836: LD_VAR 0 7
74840: NOT
74841: IFFALSE 74860
74843: PUSH
74844: LD_VAR 0 1
74848: PPUSH
74849: LD_VAR 0 2
74853: PPUSH
74854: CALL_OW 308
74858: NOT
74859: AND
74860: IFFALSE 74864
// exit ;
74862: GO 74982
// if IsInArea ( unit , area ) then
74864: LD_VAR 0 1
74868: PPUSH
74869: LD_VAR 0 2
74873: PPUSH
74874: CALL_OW 308
74878: IFFALSE 74896
// begin ComMoveToArea ( unit , goAway ) ;
74880: LD_VAR 0 1
74884: PPUSH
74885: LD_VAR 0 3
74889: PPUSH
74890: CALL_OW 113
// exit ;
74894: GO 74982
// end ; if task [ 1 ] [ 1 ] <> M then
74896: LD_VAR 0 7
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PUSH
74905: LD_INT 1
74907: ARRAY
74908: PUSH
74909: LD_STRING M
74911: NONEQUAL
74912: IFFALSE 74916
// exit ;
74914: GO 74982
// x := task [ 1 ] [ 2 ] ;
74916: LD_ADDR_VAR 0 5
74920: PUSH
74921: LD_VAR 0 7
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PUSH
74930: LD_INT 2
74932: ARRAY
74933: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74934: LD_ADDR_VAR 0 6
74938: PUSH
74939: LD_VAR 0 7
74943: PUSH
74944: LD_INT 1
74946: ARRAY
74947: PUSH
74948: LD_INT 3
74950: ARRAY
74951: ST_TO_ADDR
// if InArea ( x , y , area ) then
74952: LD_VAR 0 5
74956: PPUSH
74957: LD_VAR 0 6
74961: PPUSH
74962: LD_VAR 0 2
74966: PPUSH
74967: CALL_OW 309
74971: IFFALSE 74982
// ComStop ( unit ) ;
74973: LD_VAR 0 1
74977: PPUSH
74978: CALL_OW 141
// end ;
74982: LD_VAR 0 4
74986: RET
// export function Abs ( value ) ; begin
74987: LD_INT 0
74989: PPUSH
// result := value ;
74990: LD_ADDR_VAR 0 2
74994: PUSH
74995: LD_VAR 0 1
74999: ST_TO_ADDR
// if value < 0 then
75000: LD_VAR 0 1
75004: PUSH
75005: LD_INT 0
75007: LESS
75008: IFFALSE 75025
// result := value * - 1 ;
75010: LD_ADDR_VAR 0 2
75014: PUSH
75015: LD_VAR 0 1
75019: PUSH
75020: LD_INT 1
75022: NEG
75023: MUL
75024: ST_TO_ADDR
// end ;
75025: LD_VAR 0 2
75029: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75030: LD_INT 0
75032: PPUSH
75033: PPUSH
75034: PPUSH
75035: PPUSH
75036: PPUSH
75037: PPUSH
75038: PPUSH
75039: PPUSH
// if not unit or not building then
75040: LD_VAR 0 1
75044: NOT
75045: IFTRUE 75054
75047: PUSH
75048: LD_VAR 0 2
75052: NOT
75053: OR
75054: IFFALSE 75058
// exit ;
75056: GO 75286
// x := GetX ( building ) ;
75058: LD_ADDR_VAR 0 4
75062: PUSH
75063: LD_VAR 0 2
75067: PPUSH
75068: CALL_OW 250
75072: ST_TO_ADDR
// y := GetY ( building ) ;
75073: LD_ADDR_VAR 0 6
75077: PUSH
75078: LD_VAR 0 2
75082: PPUSH
75083: CALL_OW 251
75087: ST_TO_ADDR
// d := GetDir ( building ) ;
75088: LD_ADDR_VAR 0 8
75092: PUSH
75093: LD_VAR 0 2
75097: PPUSH
75098: CALL_OW 254
75102: ST_TO_ADDR
// r := 4 ;
75103: LD_ADDR_VAR 0 9
75107: PUSH
75108: LD_INT 4
75110: ST_TO_ADDR
// for i := 1 to 5 do
75111: LD_ADDR_VAR 0 10
75115: PUSH
75116: DOUBLE
75117: LD_INT 1
75119: DEC
75120: ST_TO_ADDR
75121: LD_INT 5
75123: PUSH
75124: FOR_TO
75125: IFFALSE 75284
// begin _x := ShiftX ( x , d , r + i ) ;
75127: LD_ADDR_VAR 0 5
75131: PUSH
75132: LD_VAR 0 4
75136: PPUSH
75137: LD_VAR 0 8
75141: PPUSH
75142: LD_VAR 0 9
75146: PUSH
75147: LD_VAR 0 10
75151: PLUS
75152: PPUSH
75153: CALL_OW 272
75157: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75158: LD_ADDR_VAR 0 7
75162: PUSH
75163: LD_VAR 0 6
75167: PPUSH
75168: LD_VAR 0 8
75172: PPUSH
75173: LD_VAR 0 9
75177: PUSH
75178: LD_VAR 0 10
75182: PLUS
75183: PPUSH
75184: CALL_OW 273
75188: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75189: LD_VAR 0 5
75193: PPUSH
75194: LD_VAR 0 7
75198: PPUSH
75199: CALL_OW 488
75203: IFFALSE 75238
75205: PUSH
75206: LD_VAR 0 5
75210: PPUSH
75211: LD_VAR 0 7
75215: PPUSH
75216: CALL_OW 428
75220: PPUSH
75221: CALL_OW 247
75225: PUSH
75226: LD_INT 3
75228: PUSH
75229: LD_INT 2
75231: PUSH
75232: EMPTY
75233: LIST
75234: LIST
75235: IN
75236: NOT
75237: AND
75238: IFFALSE 75282
// begin ComMoveXY ( unit , _x , _y ) ;
75240: LD_VAR 0 1
75244: PPUSH
75245: LD_VAR 0 5
75249: PPUSH
75250: LD_VAR 0 7
75254: PPUSH
75255: CALL_OW 111
// result := [ _x , _y ] ;
75259: LD_ADDR_VAR 0 3
75263: PUSH
75264: LD_VAR 0 5
75268: PUSH
75269: LD_VAR 0 7
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: ST_TO_ADDR
// exit ;
75278: POP
75279: POP
75280: GO 75286
// end ; end ;
75282: GO 75124
75284: POP
75285: POP
// end ;
75286: LD_VAR 0 3
75290: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75291: LD_INT 0
75293: PPUSH
75294: PPUSH
75295: PPUSH
// result := 0 ;
75296: LD_ADDR_VAR 0 3
75300: PUSH
75301: LD_INT 0
75303: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75304: LD_VAR 0 1
75308: PUSH
75309: LD_INT 0
75311: LESS
75312: IFTRUE 75324
75314: PUSH
75315: LD_VAR 0 1
75319: PUSH
75320: LD_INT 8
75322: GREATER
75323: OR
75324: IFTRUE 75336
75326: PUSH
75327: LD_VAR 0 2
75331: PUSH
75332: LD_INT 0
75334: LESS
75335: OR
75336: IFTRUE 75348
75338: PUSH
75339: LD_VAR 0 2
75343: PUSH
75344: LD_INT 8
75346: GREATER
75347: OR
75348: IFFALSE 75352
// exit ;
75350: GO 75427
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75352: LD_ADDR_VAR 0 4
75356: PUSH
75357: LD_INT 22
75359: PUSH
75360: LD_VAR 0 2
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PPUSH
75369: CALL_OW 69
75373: PUSH
75374: FOR_IN
75375: IFFALSE 75425
// begin un := UnitShoot ( i ) ;
75377: LD_ADDR_VAR 0 5
75381: PUSH
75382: LD_VAR 0 4
75386: PPUSH
75387: CALL_OW 504
75391: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75392: LD_VAR 0 5
75396: PPUSH
75397: CALL_OW 255
75401: PUSH
75402: LD_VAR 0 1
75406: EQUAL
75407: IFFALSE 75423
// begin result := un ;
75409: LD_ADDR_VAR 0 3
75413: PUSH
75414: LD_VAR 0 5
75418: ST_TO_ADDR
// exit ;
75419: POP
75420: POP
75421: GO 75427
// end ; end ;
75423: GO 75374
75425: POP
75426: POP
// end ;
75427: LD_VAR 0 3
75431: RET
// export function GetCargoBay ( units ) ; begin
75432: LD_INT 0
75434: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75435: LD_ADDR_VAR 0 2
75439: PUSH
75440: LD_VAR 0 1
75444: PPUSH
75445: LD_INT 2
75447: PUSH
75448: LD_INT 34
75450: PUSH
75451: LD_INT 12
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 34
75460: PUSH
75461: LD_INT 51
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 34
75470: PUSH
75471: LD_INT 32
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: LD_INT 34
75480: PUSH
75481: LD_INT 89
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: PPUSH
75495: CALL_OW 72
75499: ST_TO_ADDR
// end ;
75500: LD_VAR 0 2
75504: RET
// export function Negate ( value ) ; begin
75505: LD_INT 0
75507: PPUSH
// result := not value ;
75508: LD_ADDR_VAR 0 2
75512: PUSH
75513: LD_VAR 0 1
75517: NOT
75518: ST_TO_ADDR
// end ;
75519: LD_VAR 0 2
75523: RET
// export function Inc ( value ) ; begin
75524: LD_INT 0
75526: PPUSH
// result := value + 1 ;
75527: LD_ADDR_VAR 0 2
75531: PUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_INT 1
75539: PLUS
75540: ST_TO_ADDR
// end ;
75541: LD_VAR 0 2
75545: RET
// export function Dec ( value ) ; begin
75546: LD_INT 0
75548: PPUSH
// result := value - 1 ;
75549: LD_ADDR_VAR 0 2
75553: PUSH
75554: LD_VAR 0 1
75558: PUSH
75559: LD_INT 1
75561: MINUS
75562: ST_TO_ADDR
// end ;
75563: LD_VAR 0 2
75567: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75568: LD_INT 0
75570: PPUSH
75571: PPUSH
75572: PPUSH
75573: PPUSH
75574: PPUSH
75575: PPUSH
75576: PPUSH
75577: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75578: LD_VAR 0 1
75582: PPUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 488
75592: NOT
75593: IFTRUE 75612
75595: PUSH
75596: LD_VAR 0 3
75600: PPUSH
75601: LD_VAR 0 4
75605: PPUSH
75606: CALL_OW 488
75610: NOT
75611: OR
75612: IFFALSE 75625
// begin result := - 1 ;
75614: LD_ADDR_VAR 0 5
75618: PUSH
75619: LD_INT 1
75621: NEG
75622: ST_TO_ADDR
// exit ;
75623: GO 75860
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75625: LD_ADDR_VAR 0 12
75629: PUSH
75630: LD_VAR 0 1
75634: PPUSH
75635: LD_VAR 0 2
75639: PPUSH
75640: LD_VAR 0 3
75644: PPUSH
75645: LD_VAR 0 4
75649: PPUSH
75650: CALL 74696 0 4
75654: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75655: LD_ADDR_VAR 0 11
75659: PUSH
75660: LD_VAR 0 1
75664: PPUSH
75665: LD_VAR 0 2
75669: PPUSH
75670: LD_VAR 0 12
75674: PUSH
75675: LD_INT 1
75677: ARRAY
75678: PPUSH
75679: LD_VAR 0 12
75683: PUSH
75684: LD_INT 2
75686: ARRAY
75687: PPUSH
75688: CALL_OW 298
75692: ST_TO_ADDR
// distance := 9999 ;
75693: LD_ADDR_VAR 0 10
75697: PUSH
75698: LD_INT 9999
75700: ST_TO_ADDR
// for i := 0 to 5 do
75701: LD_ADDR_VAR 0 6
75705: PUSH
75706: DOUBLE
75707: LD_INT 0
75709: DEC
75710: ST_TO_ADDR
75711: LD_INT 5
75713: PUSH
75714: FOR_TO
75715: IFFALSE 75858
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75717: LD_ADDR_VAR 0 7
75721: PUSH
75722: LD_VAR 0 1
75726: PPUSH
75727: LD_VAR 0 6
75731: PPUSH
75732: LD_VAR 0 11
75736: PPUSH
75737: CALL_OW 272
75741: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75742: LD_ADDR_VAR 0 8
75746: PUSH
75747: LD_VAR 0 2
75751: PPUSH
75752: LD_VAR 0 6
75756: PPUSH
75757: LD_VAR 0 11
75761: PPUSH
75762: CALL_OW 273
75766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75767: LD_VAR 0 7
75771: PPUSH
75772: LD_VAR 0 8
75776: PPUSH
75777: CALL_OW 488
75781: NOT
75782: IFFALSE 75786
// continue ;
75784: GO 75714
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75786: LD_ADDR_VAR 0 9
75790: PUSH
75791: LD_VAR 0 12
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: PPUSH
75800: LD_VAR 0 12
75804: PUSH
75805: LD_INT 2
75807: ARRAY
75808: PPUSH
75809: LD_VAR 0 7
75813: PPUSH
75814: LD_VAR 0 8
75818: PPUSH
75819: CALL_OW 298
75823: ST_TO_ADDR
// if tmp < distance then
75824: LD_VAR 0 9
75828: PUSH
75829: LD_VAR 0 10
75833: LESS
75834: IFFALSE 75856
// begin result := i ;
75836: LD_ADDR_VAR 0 5
75840: PUSH
75841: LD_VAR 0 6
75845: ST_TO_ADDR
// distance := tmp ;
75846: LD_ADDR_VAR 0 10
75850: PUSH
75851: LD_VAR 0 9
75855: ST_TO_ADDR
// end ; end ;
75856: GO 75714
75858: POP
75859: POP
// end ;
75860: LD_VAR 0 5
75864: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75865: LD_INT 0
75867: PPUSH
75868: PPUSH
// if not driver or not IsInUnit ( driver ) then
75869: LD_VAR 0 1
75873: NOT
75874: IFTRUE 75888
75876: PUSH
75877: LD_VAR 0 1
75881: PPUSH
75882: CALL_OW 310
75886: NOT
75887: OR
75888: IFFALSE 75892
// exit ;
75890: GO 75982
// vehicle := IsInUnit ( driver ) ;
75892: LD_ADDR_VAR 0 3
75896: PUSH
75897: LD_VAR 0 1
75901: PPUSH
75902: CALL_OW 310
75906: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75907: LD_VAR 0 1
75911: PPUSH
75912: LD_STRING \
75914: PUSH
75915: LD_INT 0
75917: PUSH
75918: LD_INT 0
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: LD_INT 0
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: PUSH
75942: LD_STRING E
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: LD_INT 0
75950: PUSH
75951: LD_VAR 0 3
75955: PUSH
75956: LD_INT 0
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PPUSH
75978: CALL_OW 446
// end ;
75982: LD_VAR 0 2
75986: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75987: LD_INT 0
75989: PPUSH
75990: PPUSH
// if not driver or not IsInUnit ( driver ) then
75991: LD_VAR 0 1
75995: NOT
75996: IFTRUE 76010
75998: PUSH
75999: LD_VAR 0 1
76003: PPUSH
76004: CALL_OW 310
76008: NOT
76009: OR
76010: IFFALSE 76014
// exit ;
76012: GO 76104
// vehicle := IsInUnit ( driver ) ;
76014: LD_ADDR_VAR 0 3
76018: PUSH
76019: LD_VAR 0 1
76023: PPUSH
76024: CALL_OW 310
76028: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76029: LD_VAR 0 1
76033: PPUSH
76034: LD_STRING \
76036: PUSH
76037: LD_INT 0
76039: PUSH
76040: LD_INT 0
76042: PUSH
76043: LD_INT 0
76045: PUSH
76046: LD_INT 0
76048: PUSH
76049: LD_INT 0
76051: PUSH
76052: LD_INT 0
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: PUSH
76064: LD_STRING E
76066: PUSH
76067: LD_INT 0
76069: PUSH
76070: LD_INT 0
76072: PUSH
76073: LD_VAR 0 3
76077: PUSH
76078: LD_INT 0
76080: PUSH
76081: LD_INT 0
76083: PUSH
76084: LD_INT 0
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PPUSH
76100: CALL_OW 447
// end ;
76104: LD_VAR 0 2
76108: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76109: LD_INT 0
76111: PPUSH
76112: PPUSH
76113: PPUSH
// tmp := [ ] ;
76114: LD_ADDR_VAR 0 5
76118: PUSH
76119: EMPTY
76120: ST_TO_ADDR
// for i in units do
76121: LD_ADDR_VAR 0 4
76125: PUSH
76126: LD_VAR 0 1
76130: PUSH
76131: FOR_IN
76132: IFFALSE 76170
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76134: LD_ADDR_VAR 0 5
76138: PUSH
76139: LD_VAR 0 5
76143: PPUSH
76144: LD_VAR 0 5
76148: PUSH
76149: LD_INT 1
76151: PLUS
76152: PPUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: CALL_OW 256
76162: PPUSH
76163: CALL_OW 2
76167: ST_TO_ADDR
76168: GO 76131
76170: POP
76171: POP
// if not tmp then
76172: LD_VAR 0 5
76176: NOT
76177: IFFALSE 76181
// exit ;
76179: GO 76229
// if asc then
76181: LD_VAR 0 2
76185: IFFALSE 76209
// result := SortListByListAsc ( units , tmp ) else
76187: LD_ADDR_VAR 0 3
76191: PUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_VAR 0 5
76201: PPUSH
76202: CALL_OW 76
76206: ST_TO_ADDR
76207: GO 76229
// result := SortListByListDesc ( units , tmp ) ;
76209: LD_ADDR_VAR 0 3
76213: PUSH
76214: LD_VAR 0 1
76218: PPUSH
76219: LD_VAR 0 5
76223: PPUSH
76224: CALL_OW 77
76228: ST_TO_ADDR
// end ;
76229: LD_VAR 0 3
76233: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76234: LD_INT 0
76236: PPUSH
76237: PPUSH
// task := GetTaskList ( mech ) ;
76238: LD_ADDR_VAR 0 4
76242: PUSH
76243: LD_VAR 0 1
76247: PPUSH
76248: CALL_OW 437
76252: ST_TO_ADDR
// if not task then
76253: LD_VAR 0 4
76257: NOT
76258: IFFALSE 76262
// exit ;
76260: GO 76306
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76262: LD_ADDR_VAR 0 3
76266: PUSH
76267: LD_VAR 0 4
76271: PUSH
76272: LD_INT 1
76274: ARRAY
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PUSH
76280: LD_STRING r
76282: EQUAL
76283: IFFALSE 76305
76285: PUSH
76286: LD_VAR 0 4
76290: PUSH
76291: LD_INT 1
76293: ARRAY
76294: PUSH
76295: LD_INT 4
76297: ARRAY
76298: PUSH
76299: LD_VAR 0 2
76303: EQUAL
76304: AND
76305: ST_TO_ADDR
// end ;
76306: LD_VAR 0 3
76310: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76311: LD_INT 0
76313: PPUSH
// SetDir ( unit , d ) ;
76314: LD_VAR 0 1
76318: PPUSH
76319: LD_VAR 0 4
76323: PPUSH
76324: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
76328: LD_ADDR_VAR 0 6
76332: PUSH
76333: LD_VAR 0 1
76337: PPUSH
76338: LD_VAR 0 2
76342: PPUSH
76343: LD_VAR 0 3
76347: PPUSH
76348: LD_VAR 0 5
76352: PPUSH
76353: CALL_OW 48
76357: ST_TO_ADDR
// end ;
76358: LD_VAR 0 6
76362: RET
// export function ToNaturalNumber ( number ) ; begin
76363: LD_INT 0
76365: PPUSH
// result := number div 1 ;
76366: LD_ADDR_VAR 0 2
76370: PUSH
76371: LD_VAR 0 1
76375: PUSH
76376: LD_INT 1
76378: DIV
76379: ST_TO_ADDR
// if number < 0 then
76380: LD_VAR 0 1
76384: PUSH
76385: LD_INT 0
76387: LESS
76388: IFFALSE 76398
// result := 0 ;
76390: LD_ADDR_VAR 0 2
76394: PUSH
76395: LD_INT 0
76397: ST_TO_ADDR
// end ;
76398: LD_VAR 0 2
76402: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
76403: LD_INT 0
76405: PPUSH
76406: PPUSH
76407: PPUSH
// if not buildings then
76408: LD_VAR 0 1
76412: NOT
76413: IFFALSE 76417
// exit ;
76415: GO 76532
// tmp := [ ] ;
76417: LD_ADDR_VAR 0 5
76421: PUSH
76422: EMPTY
76423: ST_TO_ADDR
// for b in buildings do
76424: LD_ADDR_VAR 0 4
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: FOR_IN
76435: IFFALSE 76473
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
76437: LD_ADDR_VAR 0 5
76441: PUSH
76442: LD_VAR 0 5
76446: PPUSH
76447: LD_VAR 0 5
76451: PUSH
76452: LD_INT 1
76454: PLUS
76455: PPUSH
76456: LD_VAR 0 4
76460: PPUSH
76461: CALL_OW 266
76465: PPUSH
76466: CALL_OW 1
76470: ST_TO_ADDR
76471: GO 76434
76473: POP
76474: POP
// if not tmp then
76475: LD_VAR 0 5
76479: NOT
76480: IFFALSE 76484
// exit ;
76482: GO 76532
// if asc then
76484: LD_VAR 0 2
76488: IFFALSE 76512
// result := SortListByListAsc ( buildings , tmp ) else
76490: LD_ADDR_VAR 0 3
76494: PUSH
76495: LD_VAR 0 1
76499: PPUSH
76500: LD_VAR 0 5
76504: PPUSH
76505: CALL_OW 76
76509: ST_TO_ADDR
76510: GO 76532
// result := SortListByListDesc ( buildings , tmp ) ;
76512: LD_ADDR_VAR 0 3
76516: PUSH
76517: LD_VAR 0 1
76521: PPUSH
76522: LD_VAR 0 5
76526: PPUSH
76527: CALL_OW 77
76531: ST_TO_ADDR
// end ;
76532: LD_VAR 0 3
76536: RET
// export function SortByClass ( units , class ) ; var un ; begin
76537: LD_INT 0
76539: PPUSH
76540: PPUSH
// if not units or not class then
76541: LD_VAR 0 1
76545: NOT
76546: IFTRUE 76555
76548: PUSH
76549: LD_VAR 0 2
76553: NOT
76554: OR
76555: IFFALSE 76559
// exit ;
76557: GO 76654
// result := [ ] ;
76559: LD_ADDR_VAR 0 3
76563: PUSH
76564: EMPTY
76565: ST_TO_ADDR
// for un in units do
76566: LD_ADDR_VAR 0 4
76570: PUSH
76571: LD_VAR 0 1
76575: PUSH
76576: FOR_IN
76577: IFFALSE 76652
// if GetClass ( un ) = class then
76579: LD_VAR 0 4
76583: PPUSH
76584: CALL_OW 257
76588: PUSH
76589: LD_VAR 0 2
76593: EQUAL
76594: IFFALSE 76621
// result := Insert ( result , 1 , un ) else
76596: LD_ADDR_VAR 0 3
76600: PUSH
76601: LD_VAR 0 3
76605: PPUSH
76606: LD_INT 1
76608: PPUSH
76609: LD_VAR 0 4
76613: PPUSH
76614: CALL_OW 2
76618: ST_TO_ADDR
76619: GO 76650
// result := Replace ( result , result + 1 , un ) ;
76621: LD_ADDR_VAR 0 3
76625: PUSH
76626: LD_VAR 0 3
76630: PPUSH
76631: LD_VAR 0 3
76635: PUSH
76636: LD_INT 1
76638: PLUS
76639: PPUSH
76640: LD_VAR 0 4
76644: PPUSH
76645: CALL_OW 1
76649: ST_TO_ADDR
76650: GO 76576
76652: POP
76653: POP
// end ;
76654: LD_VAR 0 3
76658: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76659: LD_INT 0
76661: PPUSH
76662: PPUSH
76663: PPUSH
76664: PPUSH
76665: PPUSH
76666: PPUSH
76667: PPUSH
// result := [ ] ;
76668: LD_ADDR_VAR 0 4
76672: PUSH
76673: EMPTY
76674: ST_TO_ADDR
// if x - r < 0 then
76675: LD_VAR 0 1
76679: PUSH
76680: LD_VAR 0 3
76684: MINUS
76685: PUSH
76686: LD_INT 0
76688: LESS
76689: IFFALSE 76701
// min_x := 0 else
76691: LD_ADDR_VAR 0 8
76695: PUSH
76696: LD_INT 0
76698: ST_TO_ADDR
76699: GO 76717
// min_x := x - r ;
76701: LD_ADDR_VAR 0 8
76705: PUSH
76706: LD_VAR 0 1
76710: PUSH
76711: LD_VAR 0 3
76715: MINUS
76716: ST_TO_ADDR
// if y - r < 0 then
76717: LD_VAR 0 2
76721: PUSH
76722: LD_VAR 0 3
76726: MINUS
76727: PUSH
76728: LD_INT 0
76730: LESS
76731: IFFALSE 76743
// min_y := 0 else
76733: LD_ADDR_VAR 0 7
76737: PUSH
76738: LD_INT 0
76740: ST_TO_ADDR
76741: GO 76759
// min_y := y - r ;
76743: LD_ADDR_VAR 0 7
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: LD_VAR 0 3
76757: MINUS
76758: ST_TO_ADDR
// max_x := x + r ;
76759: LD_ADDR_VAR 0 9
76763: PUSH
76764: LD_VAR 0 1
76768: PUSH
76769: LD_VAR 0 3
76773: PLUS
76774: ST_TO_ADDR
// max_y := y + r ;
76775: LD_ADDR_VAR 0 10
76779: PUSH
76780: LD_VAR 0 2
76784: PUSH
76785: LD_VAR 0 3
76789: PLUS
76790: ST_TO_ADDR
// for _x = min_x to max_x do
76791: LD_ADDR_VAR 0 5
76795: PUSH
76796: DOUBLE
76797: LD_VAR 0 8
76801: DEC
76802: ST_TO_ADDR
76803: LD_VAR 0 9
76807: PUSH
76808: FOR_TO
76809: IFFALSE 76910
// for _y = min_y to max_y do
76811: LD_ADDR_VAR 0 6
76815: PUSH
76816: DOUBLE
76817: LD_VAR 0 7
76821: DEC
76822: ST_TO_ADDR
76823: LD_VAR 0 10
76827: PUSH
76828: FOR_TO
76829: IFFALSE 76906
// begin if not ValidHex ( _x , _y ) then
76831: LD_VAR 0 5
76835: PPUSH
76836: LD_VAR 0 6
76840: PPUSH
76841: CALL_OW 488
76845: NOT
76846: IFFALSE 76850
// continue ;
76848: GO 76828
// if GetResourceTypeXY ( _x , _y ) then
76850: LD_VAR 0 5
76854: PPUSH
76855: LD_VAR 0 6
76859: PPUSH
76860: CALL_OW 283
76864: IFFALSE 76904
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76866: LD_ADDR_VAR 0 4
76870: PUSH
76871: LD_VAR 0 4
76875: PPUSH
76876: LD_VAR 0 4
76880: PUSH
76881: LD_INT 1
76883: PLUS
76884: PPUSH
76885: LD_VAR 0 5
76889: PUSH
76890: LD_VAR 0 6
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PPUSH
76899: CALL_OW 1
76903: ST_TO_ADDR
// end ;
76904: GO 76828
76906: POP
76907: POP
76908: GO 76808
76910: POP
76911: POP
// end ;
76912: LD_VAR 0 4
76916: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76917: LD_INT 0
76919: PPUSH
76920: PPUSH
76921: PPUSH
76922: PPUSH
76923: PPUSH
76924: PPUSH
76925: PPUSH
76926: PPUSH
// if not units then
76927: LD_VAR 0 1
76931: NOT
76932: IFFALSE 76936
// exit ;
76934: GO 77468
// result := UnitFilter ( units , [ f_ok ] ) ;
76936: LD_ADDR_VAR 0 3
76940: PUSH
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_INT 50
76948: PUSH
76949: EMPTY
76950: LIST
76951: PPUSH
76952: CALL_OW 72
76956: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76957: LD_ADDR_VAR 0 8
76961: PUSH
76962: LD_VAR 0 1
76966: PUSH
76967: LD_INT 1
76969: ARRAY
76970: PPUSH
76971: CALL_OW 255
76975: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76976: LD_ADDR_VAR 0 10
76980: PUSH
76981: LD_INT 29
76983: PUSH
76984: LD_INT 91
76986: PUSH
76987: LD_INT 49
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: LIST
76994: ST_TO_ADDR
// if not result then
76995: LD_VAR 0 3
76999: NOT
77000: IFFALSE 77004
// exit ;
77002: GO 77468
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77004: LD_ADDR_VAR 0 5
77008: PUSH
77009: LD_INT 81
77011: PUSH
77012: LD_VAR 0 8
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PPUSH
77021: CALL_OW 69
77025: ST_TO_ADDR
// for i in result do
77026: LD_ADDR_VAR 0 4
77030: PUSH
77031: LD_VAR 0 3
77035: PUSH
77036: FOR_IN
77037: IFFALSE 77466
// begin tag := GetTag ( i ) + 1 ;
77039: LD_ADDR_VAR 0 9
77043: PUSH
77044: LD_VAR 0 4
77048: PPUSH
77049: CALL_OW 110
77053: PUSH
77054: LD_INT 1
77056: PLUS
77057: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
77058: LD_ADDR_VAR 0 7
77062: PUSH
77063: LD_VAR 0 4
77067: PPUSH
77068: CALL_OW 250
77072: PPUSH
77073: LD_VAR 0 4
77077: PPUSH
77078: CALL_OW 251
77082: PPUSH
77083: LD_INT 4
77085: PPUSH
77086: CALL 76659 0 3
77090: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
77091: LD_VAR 0 4
77095: PPUSH
77096: CALL_OW 247
77100: PUSH
77101: LD_INT 2
77103: EQUAL
77104: IFFALSE 77116
77106: PUSH
77107: LD_VAR 0 7
77111: PUSH
77112: LD_INT 2
77114: GREATER
77115: AND
77116: IFFALSE 77136
77118: PUSH
77119: LD_VAR 0 4
77123: PPUSH
77124: CALL_OW 264
77128: PUSH
77129: LD_VAR 0 10
77133: IN
77134: NOT
77135: AND
77136: IFFALSE 77175
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77138: LD_VAR 0 4
77142: PPUSH
77143: LD_VAR 0 7
77147: PUSH
77148: LD_INT 1
77150: ARRAY
77151: PUSH
77152: LD_INT 1
77154: ARRAY
77155: PPUSH
77156: LD_VAR 0 7
77160: PUSH
77161: LD_INT 1
77163: ARRAY
77164: PUSH
77165: LD_INT 2
77167: ARRAY
77168: PPUSH
77169: CALL_OW 116
77173: GO 77464
// if path > tag then
77175: LD_VAR 0 2
77179: PUSH
77180: LD_VAR 0 9
77184: GREATER
77185: IFFALSE 77393
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77187: LD_ADDR_VAR 0 6
77191: PUSH
77192: LD_VAR 0 5
77196: PPUSH
77197: LD_INT 91
77199: PUSH
77200: LD_VAR 0 4
77204: PUSH
77205: LD_INT 8
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: LIST
77212: PPUSH
77213: CALL_OW 72
77217: ST_TO_ADDR
// if nearEnemy then
77218: LD_VAR 0 6
77222: IFFALSE 77291
// begin if GetWeapon ( i ) = ru_time_lapser then
77224: LD_VAR 0 4
77228: PPUSH
77229: CALL_OW 264
77233: PUSH
77234: LD_INT 49
77236: EQUAL
77237: IFFALSE 77265
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77239: LD_VAR 0 4
77243: PPUSH
77244: LD_VAR 0 6
77248: PPUSH
77249: LD_VAR 0 4
77253: PPUSH
77254: CALL_OW 74
77258: PPUSH
77259: CALL_OW 112
77263: GO 77289
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77265: LD_VAR 0 4
77269: PPUSH
77270: LD_VAR 0 6
77274: PPUSH
77275: LD_VAR 0 4
77279: PPUSH
77280: CALL_OW 74
77284: PPUSH
77285: CALL 78549 0 2
// end else
77289: GO 77391
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77291: LD_VAR 0 4
77295: PPUSH
77296: LD_VAR 0 2
77300: PUSH
77301: LD_VAR 0 9
77305: ARRAY
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PPUSH
77311: LD_VAR 0 2
77315: PUSH
77316: LD_VAR 0 9
77320: ARRAY
77321: PUSH
77322: LD_INT 2
77324: ARRAY
77325: PPUSH
77326: CALL_OW 297
77330: PUSH
77331: LD_INT 6
77333: GREATER
77334: IFFALSE 77377
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77336: LD_VAR 0 4
77340: PPUSH
77341: LD_VAR 0 2
77345: PUSH
77346: LD_VAR 0 9
77350: ARRAY
77351: PUSH
77352: LD_INT 1
77354: ARRAY
77355: PPUSH
77356: LD_VAR 0 2
77360: PUSH
77361: LD_VAR 0 9
77365: ARRAY
77366: PUSH
77367: LD_INT 2
77369: ARRAY
77370: PPUSH
77371: CALL_OW 114
77375: GO 77391
// SetTag ( i , tag ) ;
77377: LD_VAR 0 4
77381: PPUSH
77382: LD_VAR 0 9
77386: PPUSH
77387: CALL_OW 109
// end else
77391: GO 77464
// if enemy then
77393: LD_VAR 0 5
77397: IFFALSE 77464
// begin if GetWeapon ( i ) = ru_time_lapser then
77399: LD_VAR 0 4
77403: PPUSH
77404: CALL_OW 264
77408: PUSH
77409: LD_INT 49
77411: EQUAL
77412: IFFALSE 77440
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77414: LD_VAR 0 4
77418: PPUSH
77419: LD_VAR 0 5
77423: PPUSH
77424: LD_VAR 0 4
77428: PPUSH
77429: CALL_OW 74
77433: PPUSH
77434: CALL_OW 112
77438: GO 77464
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77440: LD_VAR 0 4
77444: PPUSH
77445: LD_VAR 0 5
77449: PPUSH
77450: LD_VAR 0 4
77454: PPUSH
77455: CALL_OW 74
77459: PPUSH
77460: CALL 78549 0 2
// end ; end ;
77464: GO 77036
77466: POP
77467: POP
// end ;
77468: LD_VAR 0 3
77472: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77473: LD_INT 0
77475: PPUSH
77476: PPUSH
77477: PPUSH
// if not unit or IsInUnit ( unit ) then
77478: LD_VAR 0 1
77482: NOT
77483: IFTRUE 77496
77485: PUSH
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 310
77495: OR
77496: IFFALSE 77500
// exit ;
77498: GO 77591
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77500: LD_ADDR_VAR 0 4
77504: PUSH
77505: LD_VAR 0 1
77509: PPUSH
77510: CALL_OW 250
77514: PPUSH
77515: LD_VAR 0 2
77519: PPUSH
77520: LD_INT 1
77522: PPUSH
77523: CALL_OW 272
77527: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77528: LD_ADDR_VAR 0 5
77532: PUSH
77533: LD_VAR 0 1
77537: PPUSH
77538: CALL_OW 251
77542: PPUSH
77543: LD_VAR 0 2
77547: PPUSH
77548: LD_INT 1
77550: PPUSH
77551: CALL_OW 273
77555: ST_TO_ADDR
// if ValidHex ( x , y ) then
77556: LD_VAR 0 4
77560: PPUSH
77561: LD_VAR 0 5
77565: PPUSH
77566: CALL_OW 488
77570: IFFALSE 77591
// ComTurnXY ( unit , x , y ) ;
77572: LD_VAR 0 1
77576: PPUSH
77577: LD_VAR 0 4
77581: PPUSH
77582: LD_VAR 0 5
77586: PPUSH
77587: CALL_OW 118
// end ;
77591: LD_VAR 0 3
77595: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77596: LD_INT 0
77598: PPUSH
77599: PPUSH
// result := false ;
77600: LD_ADDR_VAR 0 3
77604: PUSH
77605: LD_INT 0
77607: ST_TO_ADDR
// if not units then
77608: LD_VAR 0 2
77612: NOT
77613: IFFALSE 77617
// exit ;
77615: GO 77662
// for i in units do
77617: LD_ADDR_VAR 0 4
77621: PUSH
77622: LD_VAR 0 2
77626: PUSH
77627: FOR_IN
77628: IFFALSE 77660
// if See ( side , i ) then
77630: LD_VAR 0 1
77634: PPUSH
77635: LD_VAR 0 4
77639: PPUSH
77640: CALL_OW 292
77644: IFFALSE 77658
// begin result := true ;
77646: LD_ADDR_VAR 0 3
77650: PUSH
77651: LD_INT 1
77653: ST_TO_ADDR
// exit ;
77654: POP
77655: POP
77656: GO 77662
// end ;
77658: GO 77627
77660: POP
77661: POP
// end ;
77662: LD_VAR 0 3
77666: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77667: LD_INT 0
77669: PPUSH
77670: PPUSH
77671: PPUSH
77672: PPUSH
// if not unit or not points then
77673: LD_VAR 0 1
77677: NOT
77678: IFTRUE 77687
77680: PUSH
77681: LD_VAR 0 2
77685: NOT
77686: OR
77687: IFFALSE 77691
// exit ;
77689: GO 77781
// dist := 99999 ;
77691: LD_ADDR_VAR 0 5
77695: PUSH
77696: LD_INT 99999
77698: ST_TO_ADDR
// for i in points do
77699: LD_ADDR_VAR 0 4
77703: PUSH
77704: LD_VAR 0 2
77708: PUSH
77709: FOR_IN
77710: IFFALSE 77779
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77712: LD_ADDR_VAR 0 6
77716: PUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: LD_VAR 0 4
77726: PUSH
77727: LD_INT 1
77729: ARRAY
77730: PPUSH
77731: LD_VAR 0 4
77735: PUSH
77736: LD_INT 2
77738: ARRAY
77739: PPUSH
77740: CALL_OW 297
77744: ST_TO_ADDR
// if tmpDist < dist then
77745: LD_VAR 0 6
77749: PUSH
77750: LD_VAR 0 5
77754: LESS
77755: IFFALSE 77777
// begin result := i ;
77757: LD_ADDR_VAR 0 3
77761: PUSH
77762: LD_VAR 0 4
77766: ST_TO_ADDR
// dist := tmpDist ;
77767: LD_ADDR_VAR 0 5
77771: PUSH
77772: LD_VAR 0 6
77776: ST_TO_ADDR
// end ; end ;
77777: GO 77709
77779: POP
77780: POP
// end ;
77781: LD_VAR 0 3
77785: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77786: LD_INT 0
77788: PPUSH
// uc_side := side ;
77789: LD_ADDR_OWVAR 20
77793: PUSH
77794: LD_VAR 0 1
77798: ST_TO_ADDR
// uc_nation := 3 ;
77799: LD_ADDR_OWVAR 21
77803: PUSH
77804: LD_INT 3
77806: ST_TO_ADDR
// vc_chassis := 25 ;
77807: LD_ADDR_OWVAR 37
77811: PUSH
77812: LD_INT 25
77814: ST_TO_ADDR
// vc_engine := engine_siberite ;
77815: LD_ADDR_OWVAR 39
77819: PUSH
77820: LD_INT 3
77822: ST_TO_ADDR
// vc_control := control_computer ;
77823: LD_ADDR_OWVAR 38
77827: PUSH
77828: LD_INT 3
77830: ST_TO_ADDR
// vc_weapon := 59 ;
77831: LD_ADDR_OWVAR 40
77835: PUSH
77836: LD_INT 59
77838: ST_TO_ADDR
// result := CreateVehicle ;
77839: LD_ADDR_VAR 0 5
77843: PUSH
77844: CALL_OW 45
77848: ST_TO_ADDR
// SetDir ( result , d ) ;
77849: LD_VAR 0 5
77853: PPUSH
77854: LD_VAR 0 4
77858: PPUSH
77859: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77863: LD_VAR 0 5
77867: PPUSH
77868: LD_VAR 0 2
77872: PPUSH
77873: LD_VAR 0 3
77877: PPUSH
77878: LD_INT 0
77880: PPUSH
77881: CALL_OW 48
// end ;
77885: LD_VAR 0 5
77889: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77890: LD_INT 0
77892: PPUSH
77893: PPUSH
77894: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77895: LD_ADDR_VAR 0 2
77899: PUSH
77900: LD_INT 0
77902: PUSH
77903: LD_INT 0
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 0
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77918: LD_VAR 0 1
77922: NOT
77923: IFTRUE 77956
77925: PUSH
77926: LD_VAR 0 1
77930: PPUSH
77931: CALL_OW 264
77935: PUSH
77936: LD_INT 12
77938: PUSH
77939: LD_INT 51
77941: PUSH
77942: LD_INT 32
77944: PUSH
77945: LD_INT 89
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: IN
77954: NOT
77955: OR
77956: IFFALSE 77960
// exit ;
77958: GO 78058
// for i := 1 to 3 do
77960: LD_ADDR_VAR 0 3
77964: PUSH
77965: DOUBLE
77966: LD_INT 1
77968: DEC
77969: ST_TO_ADDR
77970: LD_INT 3
77972: PUSH
77973: FOR_TO
77974: IFFALSE 78056
// begin tmp := GetCargo ( cargo , i ) ;
77976: LD_ADDR_VAR 0 4
77980: PUSH
77981: LD_VAR 0 1
77985: PPUSH
77986: LD_VAR 0 3
77990: PPUSH
77991: CALL_OW 289
77995: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77996: LD_ADDR_VAR 0 2
78000: PUSH
78001: LD_VAR 0 2
78005: PPUSH
78006: LD_VAR 0 3
78010: PPUSH
78011: LD_VAR 0 4
78015: PPUSH
78016: CALL_OW 1
78020: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78021: LD_ADDR_VAR 0 2
78025: PUSH
78026: LD_VAR 0 2
78030: PPUSH
78031: LD_INT 4
78033: PPUSH
78034: LD_VAR 0 2
78038: PUSH
78039: LD_INT 4
78041: ARRAY
78042: PUSH
78043: LD_VAR 0 4
78047: PLUS
78048: PPUSH
78049: CALL_OW 1
78053: ST_TO_ADDR
// end ;
78054: GO 77973
78056: POP
78057: POP
// end ;
78058: LD_VAR 0 2
78062: RET
// export function Length ( array ) ; begin
78063: LD_INT 0
78065: PPUSH
// result := array + 0 ;
78066: LD_ADDR_VAR 0 2
78070: PUSH
78071: LD_VAR 0 1
78075: PUSH
78076: LD_INT 0
78078: PLUS
78079: ST_TO_ADDR
// end ;
78080: LD_VAR 0 2
78084: RET
// export function PrepareArray ( array ) ; begin
78085: LD_INT 0
78087: PPUSH
// result := array diff 0 ;
78088: LD_ADDR_VAR 0 2
78092: PUSH
78093: LD_VAR 0 1
78097: PUSH
78098: LD_INT 0
78100: DIFF
78101: ST_TO_ADDR
// if not result [ 1 ] then
78102: LD_VAR 0 2
78106: PUSH
78107: LD_INT 1
78109: ARRAY
78110: NOT
78111: IFFALSE 78131
// result := Delete ( result , 1 ) ;
78113: LD_ADDR_VAR 0 2
78117: PUSH
78118: LD_VAR 0 2
78122: PPUSH
78123: LD_INT 1
78125: PPUSH
78126: CALL_OW 3
78130: ST_TO_ADDR
// end ;
78131: LD_VAR 0 2
78135: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
78136: LD_INT 0
78138: PPUSH
78139: PPUSH
78140: PPUSH
78141: PPUSH
// sibRocketRange := 25 ;
78142: LD_ADDR_VAR 0 6
78146: PUSH
78147: LD_INT 25
78149: ST_TO_ADDR
// result := false ;
78150: LD_ADDR_VAR 0 4
78154: PUSH
78155: LD_INT 0
78157: ST_TO_ADDR
// for i := 0 to 5 do
78158: LD_ADDR_VAR 0 5
78162: PUSH
78163: DOUBLE
78164: LD_INT 0
78166: DEC
78167: ST_TO_ADDR
78168: LD_INT 5
78170: PUSH
78171: FOR_TO
78172: IFFALSE 78239
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
78174: LD_VAR 0 1
78178: PPUSH
78179: LD_VAR 0 5
78183: PPUSH
78184: LD_VAR 0 6
78188: PPUSH
78189: CALL_OW 272
78193: PPUSH
78194: LD_VAR 0 2
78198: PPUSH
78199: LD_VAR 0 5
78203: PPUSH
78204: LD_VAR 0 6
78208: PPUSH
78209: CALL_OW 273
78213: PPUSH
78214: LD_VAR 0 3
78218: PPUSH
78219: CALL_OW 309
78223: IFFALSE 78237
// begin result := true ;
78225: LD_ADDR_VAR 0 4
78229: PUSH
78230: LD_INT 1
78232: ST_TO_ADDR
// exit ;
78233: POP
78234: POP
78235: GO 78241
// end ;
78237: GO 78171
78239: POP
78240: POP
// end ;
78241: LD_VAR 0 4
78245: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78246: LD_INT 0
78248: PPUSH
78249: PPUSH
78250: PPUSH
// if btype = b_depot then
78251: LD_VAR 0 2
78255: PUSH
78256: LD_INT 0
78258: EQUAL
78259: IFFALSE 78271
// begin result := true ;
78261: LD_ADDR_VAR 0 3
78265: PUSH
78266: LD_INT 1
78268: ST_TO_ADDR
// exit ;
78269: GO 78391
// end ; pom := GetBase ( depot ) ;
78271: LD_ADDR_VAR 0 4
78275: PUSH
78276: LD_VAR 0 1
78280: PPUSH
78281: CALL_OW 274
78285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78286: LD_ADDR_VAR 0 5
78290: PUSH
78291: LD_VAR 0 2
78295: PPUSH
78296: LD_VAR 0 1
78300: PPUSH
78301: CALL_OW 248
78305: PPUSH
78306: CALL_OW 450
78310: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78311: LD_ADDR_VAR 0 3
78315: PUSH
78316: LD_VAR 0 4
78320: PPUSH
78321: LD_INT 1
78323: PPUSH
78324: CALL_OW 275
78328: PUSH
78329: LD_VAR 0 5
78333: PUSH
78334: LD_INT 1
78336: ARRAY
78337: GREATEREQUAL
78338: IFFALSE 78364
78340: PUSH
78341: LD_VAR 0 4
78345: PPUSH
78346: LD_INT 2
78348: PPUSH
78349: CALL_OW 275
78353: PUSH
78354: LD_VAR 0 5
78358: PUSH
78359: LD_INT 2
78361: ARRAY
78362: GREATEREQUAL
78363: AND
78364: IFFALSE 78390
78366: PUSH
78367: LD_VAR 0 4
78371: PPUSH
78372: LD_INT 3
78374: PPUSH
78375: CALL_OW 275
78379: PUSH
78380: LD_VAR 0 5
78384: PUSH
78385: LD_INT 3
78387: ARRAY
78388: GREATEREQUAL
78389: AND
78390: ST_TO_ADDR
// end ;
78391: LD_VAR 0 3
78395: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78396: LD_INT 0
78398: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_VAR 0 2
78408: PPUSH
78409: LD_INT 0
78411: PPUSH
78412: LD_INT 0
78414: PPUSH
78415: LD_INT 1
78417: PPUSH
78418: LD_INT 0
78420: PPUSH
78421: CALL_OW 587
// end ;
78425: LD_VAR 0 3
78429: RET
// export function CenterOnNow ( unit ) ; begin
78430: LD_INT 0
78432: PPUSH
// result := IsInUnit ( unit ) ;
78433: LD_ADDR_VAR 0 2
78437: PUSH
78438: LD_VAR 0 1
78442: PPUSH
78443: CALL_OW 310
78447: ST_TO_ADDR
// if not result then
78448: LD_VAR 0 2
78452: NOT
78453: IFFALSE 78465
// result := unit ;
78455: LD_ADDR_VAR 0 2
78459: PUSH
78460: LD_VAR 0 1
78464: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78465: LD_VAR 0 1
78469: PPUSH
78470: CALL_OW 87
// end ;
78474: LD_VAR 0 2
78478: RET
// export function ComMoveHex ( unit , hex ) ; begin
78479: LD_INT 0
78481: PPUSH
// if not hex then
78482: LD_VAR 0 2
78486: NOT
78487: IFFALSE 78491
// exit ;
78489: GO 78544
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78491: LD_VAR 0 2
78495: PUSH
78496: LD_INT 1
78498: ARRAY
78499: PPUSH
78500: LD_VAR 0 2
78504: PUSH
78505: LD_INT 2
78507: ARRAY
78508: PPUSH
78509: CALL_OW 428
78513: IFFALSE 78517
// exit ;
78515: GO 78544
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78517: LD_VAR 0 1
78521: PPUSH
78522: LD_VAR 0 2
78526: PUSH
78527: LD_INT 1
78529: ARRAY
78530: PPUSH
78531: LD_VAR 0 2
78535: PUSH
78536: LD_INT 2
78538: ARRAY
78539: PPUSH
78540: CALL_OW 111
// end ;
78544: LD_VAR 0 3
78548: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78549: LD_INT 0
78551: PPUSH
78552: PPUSH
78553: PPUSH
// if not unit or not enemy then
78554: LD_VAR 0 1
78558: NOT
78559: IFTRUE 78568
78561: PUSH
78562: LD_VAR 0 2
78566: NOT
78567: OR
78568: IFFALSE 78572
// exit ;
78570: GO 78698
// x := GetX ( enemy ) ;
78572: LD_ADDR_VAR 0 4
78576: PUSH
78577: LD_VAR 0 2
78581: PPUSH
78582: CALL_OW 250
78586: ST_TO_ADDR
// y := GetY ( enemy ) ;
78587: LD_ADDR_VAR 0 5
78591: PUSH
78592: LD_VAR 0 2
78596: PPUSH
78597: CALL_OW 251
78601: ST_TO_ADDR
// if ValidHex ( x , y ) then
78602: LD_VAR 0 4
78606: PPUSH
78607: LD_VAR 0 5
78611: PPUSH
78612: CALL_OW 488
78616: IFFALSE 78698
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78618: LD_VAR 0 2
78622: PPUSH
78623: CALL_OW 247
78627: PUSH
78628: LD_INT 3
78630: PUSH
78631: LD_INT 2
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: IN
78638: IFTRUE 78661
78640: PUSH
78641: LD_VAR 0 1
78645: PPUSH
78646: CALL_OW 255
78650: PPUSH
78651: LD_VAR 0 2
78655: PPUSH
78656: CALL_OW 292
78660: OR
78661: IFFALSE 78679
// ComAttackUnit ( unit , enemy ) else
78663: LD_VAR 0 1
78667: PPUSH
78668: LD_VAR 0 2
78672: PPUSH
78673: CALL_OW 115
78677: GO 78698
// ComAgressiveMove ( unit , x , y ) ;
78679: LD_VAR 0 1
78683: PPUSH
78684: LD_VAR 0 4
78688: PPUSH
78689: LD_VAR 0 5
78693: PPUSH
78694: CALL_OW 114
// end ;
78698: LD_VAR 0 3
78702: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78703: LD_INT 0
78705: PPUSH
78706: PPUSH
78707: PPUSH
// list := AreaToList ( area , 0 ) ;
78708: LD_ADDR_VAR 0 5
78712: PUSH
78713: LD_VAR 0 1
78717: PPUSH
78718: LD_INT 0
78720: PPUSH
78721: CALL_OW 517
78725: ST_TO_ADDR
// if not list then
78726: LD_VAR 0 5
78730: NOT
78731: IFFALSE 78735
// exit ;
78733: GO 78865
// if all then
78735: LD_VAR 0 2
78739: IFFALSE 78827
// begin for i := 1 to list [ 1 ] do
78741: LD_ADDR_VAR 0 4
78745: PUSH
78746: DOUBLE
78747: LD_INT 1
78749: DEC
78750: ST_TO_ADDR
78751: LD_VAR 0 5
78755: PUSH
78756: LD_INT 1
78758: ARRAY
78759: PUSH
78760: FOR_TO
78761: IFFALSE 78823
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78763: LD_ADDR_VAR 0 3
78767: PUSH
78768: LD_VAR 0 3
78772: PPUSH
78773: LD_VAR 0 3
78777: PUSH
78778: LD_INT 1
78780: PLUS
78781: PPUSH
78782: LD_VAR 0 5
78786: PUSH
78787: LD_INT 1
78789: ARRAY
78790: PUSH
78791: LD_VAR 0 4
78795: ARRAY
78796: PUSH
78797: LD_VAR 0 5
78801: PUSH
78802: LD_INT 2
78804: ARRAY
78805: PUSH
78806: LD_VAR 0 4
78810: ARRAY
78811: PUSH
78812: EMPTY
78813: LIST
78814: LIST
78815: PPUSH
78816: CALL_OW 1
78820: ST_TO_ADDR
78821: GO 78760
78823: POP
78824: POP
// exit ;
78825: GO 78865
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78827: LD_ADDR_VAR 0 3
78831: PUSH
78832: LD_VAR 0 5
78836: PUSH
78837: LD_INT 1
78839: ARRAY
78840: PUSH
78841: LD_INT 1
78843: ARRAY
78844: PUSH
78845: LD_VAR 0 5
78849: PUSH
78850: LD_INT 2
78852: ARRAY
78853: PUSH
78854: LD_INT 1
78856: ARRAY
78857: PUSH
78858: EMPTY
78859: LIST
78860: LIST
78861: PUSH
78862: EMPTY
78863: LIST
78864: ST_TO_ADDR
// end ;
78865: LD_VAR 0 3
78869: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78870: LD_INT 0
78872: PPUSH
78873: PPUSH
// list := AreaToList ( area , 0 ) ;
78874: LD_ADDR_VAR 0 4
78878: PUSH
78879: LD_VAR 0 1
78883: PPUSH
78884: LD_INT 0
78886: PPUSH
78887: CALL_OW 517
78891: ST_TO_ADDR
// if not list then
78892: LD_VAR 0 4
78896: NOT
78897: IFFALSE 78901
// exit ;
78899: GO 78942
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78901: LD_ADDR_VAR 0 3
78905: PUSH
78906: LD_VAR 0 4
78910: PUSH
78911: LD_INT 1
78913: ARRAY
78914: PUSH
78915: LD_INT 1
78917: ARRAY
78918: PUSH
78919: LD_VAR 0 4
78923: PUSH
78924: LD_INT 2
78926: ARRAY
78927: PUSH
78928: LD_INT 1
78930: ARRAY
78931: PUSH
78932: LD_VAR 0 2
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: LIST
78941: ST_TO_ADDR
// end ;
78942: LD_VAR 0 3
78946: RET
// export function First ( array ) ; begin
78947: LD_INT 0
78949: PPUSH
// if not array then
78950: LD_VAR 0 1
78954: NOT
78955: IFFALSE 78959
// exit ;
78957: GO 78973
// result := array [ 1 ] ;
78959: LD_ADDR_VAR 0 2
78963: PUSH
78964: LD_VAR 0 1
78968: PUSH
78969: LD_INT 1
78971: ARRAY
78972: ST_TO_ADDR
// end ;
78973: LD_VAR 0 2
78977: RET
// export function Last ( array ) ; begin
78978: LD_INT 0
78980: PPUSH
// if not array then
78981: LD_VAR 0 1
78985: NOT
78986: IFFALSE 78990
// exit ;
78988: GO 79006
// result := array [ array ] ;
78990: LD_ADDR_VAR 0 2
78994: PUSH
78995: LD_VAR 0 1
78999: PUSH
79000: LD_VAR 0 1
79004: ARRAY
79005: ST_TO_ADDR
// end ;
79006: LD_VAR 0 2
79010: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
79011: LD_INT 0
79013: PPUSH
79014: PPUSH
// result := [ ] ;
79015: LD_ADDR_VAR 0 5
79019: PUSH
79020: EMPTY
79021: ST_TO_ADDR
// if not array then
79022: LD_VAR 0 1
79026: NOT
79027: IFFALSE 79031
// exit ;
79029: GO 79143
// for i := 1 to array do
79031: LD_ADDR_VAR 0 6
79035: PUSH
79036: DOUBLE
79037: LD_INT 1
79039: DEC
79040: ST_TO_ADDR
79041: LD_VAR 0 1
79045: PUSH
79046: FOR_TO
79047: IFFALSE 79141
// if array [ i ] [ index ] = value then
79049: LD_VAR 0 1
79053: PUSH
79054: LD_VAR 0 6
79058: ARRAY
79059: PUSH
79060: LD_VAR 0 2
79064: ARRAY
79065: PUSH
79066: LD_VAR 0 3
79070: EQUAL
79071: IFFALSE 79139
// begin if indexColumn then
79073: LD_VAR 0 4
79077: IFFALSE 79113
// result := Join ( result , array [ i ] [ indexColumn ] ) else
79079: LD_ADDR_VAR 0 5
79083: PUSH
79084: LD_VAR 0 5
79088: PPUSH
79089: LD_VAR 0 1
79093: PUSH
79094: LD_VAR 0 6
79098: ARRAY
79099: PUSH
79100: LD_VAR 0 4
79104: ARRAY
79105: PPUSH
79106: CALL 74151 0 2
79110: ST_TO_ADDR
79111: GO 79139
// result := Join ( result , array [ i ] ) ;
79113: LD_ADDR_VAR 0 5
79117: PUSH
79118: LD_VAR 0 5
79122: PPUSH
79123: LD_VAR 0 1
79127: PUSH
79128: LD_VAR 0 6
79132: ARRAY
79133: PPUSH
79134: CALL 74151 0 2
79138: ST_TO_ADDR
// end ;
79139: GO 79046
79141: POP
79142: POP
// end ;
79143: LD_VAR 0 5
79147: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
79148: LD_INT 0
79150: PPUSH
// if not vehicles or not parkingPoint then
79151: LD_VAR 0 1
79155: NOT
79156: IFTRUE 79165
79158: PUSH
79159: LD_VAR 0 2
79163: NOT
79164: OR
79165: IFFALSE 79169
// exit ;
79167: GO 79267
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
79169: LD_ADDR_VAR 0 1
79173: PUSH
79174: LD_VAR 0 1
79178: PPUSH
79179: LD_INT 50
79181: PUSH
79182: EMPTY
79183: LIST
79184: PUSH
79185: LD_INT 3
79187: PUSH
79188: LD_INT 92
79190: PUSH
79191: LD_VAR 0 2
79195: PUSH
79196: LD_INT 1
79198: ARRAY
79199: PUSH
79200: LD_VAR 0 2
79204: PUSH
79205: LD_INT 2
79207: ARRAY
79208: PUSH
79209: LD_INT 8
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: LIST
79216: LIST
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: PPUSH
79226: CALL_OW 72
79230: ST_TO_ADDR
// if not vehicles then
79231: LD_VAR 0 1
79235: NOT
79236: IFFALSE 79240
// exit ;
79238: GO 79267
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
79240: LD_VAR 0 1
79244: PPUSH
79245: LD_VAR 0 2
79249: PUSH
79250: LD_INT 1
79252: ARRAY
79253: PPUSH
79254: LD_VAR 0 2
79258: PUSH
79259: LD_INT 2
79261: ARRAY
79262: PPUSH
79263: CALL_OW 111
// end ;
79267: LD_VAR 0 3
79271: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
79272: LD_INT 0
79274: PPUSH
79275: PPUSH
79276: PPUSH
// if not side or not area then
79277: LD_VAR 0 1
79281: NOT
79282: IFTRUE 79291
79284: PUSH
79285: LD_VAR 0 2
79289: NOT
79290: OR
79291: IFFALSE 79295
// exit ;
79293: GO 79414
// tmp := AreaToList ( area , 0 ) ;
79295: LD_ADDR_VAR 0 5
79299: PUSH
79300: LD_VAR 0 2
79304: PPUSH
79305: LD_INT 0
79307: PPUSH
79308: CALL_OW 517
79312: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
79313: LD_ADDR_VAR 0 4
79317: PUSH
79318: DOUBLE
79319: LD_INT 1
79321: DEC
79322: ST_TO_ADDR
79323: LD_VAR 0 5
79327: PUSH
79328: LD_INT 1
79330: ARRAY
79331: PUSH
79332: FOR_TO
79333: IFFALSE 79412
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79335: LD_VAR 0 5
79339: PUSH
79340: LD_INT 1
79342: ARRAY
79343: PUSH
79344: LD_VAR 0 4
79348: ARRAY
79349: PPUSH
79350: LD_VAR 0 5
79354: PUSH
79355: LD_INT 2
79357: ARRAY
79358: PUSH
79359: LD_VAR 0 4
79363: ARRAY
79364: PPUSH
79365: CALL_OW 351
79369: IFFALSE 79410
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79371: LD_VAR 0 5
79375: PUSH
79376: LD_INT 1
79378: ARRAY
79379: PUSH
79380: LD_VAR 0 4
79384: ARRAY
79385: PPUSH
79386: LD_VAR 0 5
79390: PUSH
79391: LD_INT 2
79393: ARRAY
79394: PUSH
79395: LD_VAR 0 4
79399: ARRAY
79400: PPUSH
79401: LD_VAR 0 1
79405: PPUSH
79406: CALL_OW 244
// end ;
79410: GO 79332
79412: POP
79413: POP
// end ;
79414: LD_VAR 0 3
79418: RET
// export function UniqueArray ( array ) ; var i ; begin
79419: LD_INT 0
79421: PPUSH
79422: PPUSH
// result := [ ] ;
79423: LD_ADDR_VAR 0 2
79427: PUSH
79428: EMPTY
79429: ST_TO_ADDR
// if not array then
79430: LD_VAR 0 1
79434: NOT
79435: IFFALSE 79439
// exit ;
79437: GO 79500
// for i := 1 to array do
79439: LD_ADDR_VAR 0 3
79443: PUSH
79444: DOUBLE
79445: LD_INT 1
79447: DEC
79448: ST_TO_ADDR
79449: LD_VAR 0 1
79453: PUSH
79454: FOR_TO
79455: IFFALSE 79498
// if not array [ i ] in result then
79457: LD_VAR 0 1
79461: PUSH
79462: LD_VAR 0 3
79466: ARRAY
79467: PUSH
79468: LD_VAR 0 2
79472: IN
79473: NOT
79474: IFFALSE 79496
// result := Join ( result , i ) ;
79476: LD_ADDR_VAR 0 2
79480: PUSH
79481: LD_VAR 0 2
79485: PPUSH
79486: LD_VAR 0 3
79490: PPUSH
79491: CALL 74151 0 2
79495: ST_TO_ADDR
79496: GO 79454
79498: POP
79499: POP
// end ; end_of_file
79500: LD_VAR 0 2
79504: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79505: LD_VAR 0 1
79509: PUSH
79510: LD_INT 200
79512: DOUBLE
79513: GREATEREQUAL
79514: IFFALSE 79522
79516: LD_INT 299
79518: DOUBLE
79519: LESSEQUAL
79520: IFTRUE 79524
79522: GO 79556
79524: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79525: LD_VAR 0 1
79529: PPUSH
79530: LD_VAR 0 2
79534: PPUSH
79535: LD_VAR 0 3
79539: PPUSH
79540: LD_VAR 0 4
79544: PPUSH
79545: LD_VAR 0 5
79549: PPUSH
79550: CALL 30227 0 5
79554: GO 79633
79556: LD_INT 300
79558: DOUBLE
79559: GREATEREQUAL
79560: IFFALSE 79568
79562: LD_INT 399
79564: DOUBLE
79565: LESSEQUAL
79566: IFTRUE 79570
79568: GO 79632
79570: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79571: LD_VAR 0 1
79575: PPUSH
79576: LD_VAR 0 2
79580: PPUSH
79581: LD_VAR 0 3
79585: PPUSH
79586: LD_VAR 0 4
79590: PPUSH
79591: LD_VAR 0 5
79595: PPUSH
79596: LD_VAR 0 6
79600: PPUSH
79601: LD_VAR 0 7
79605: PPUSH
79606: LD_VAR 0 8
79610: PPUSH
79611: LD_VAR 0 9
79615: PPUSH
79616: LD_VAR 0 10
79620: PPUSH
79621: LD_VAR 0 11
79625: PPUSH
79626: CALL 26030 0 11
79630: GO 79633
79632: POP
// end ;
79633: PPOPN 11
79635: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79636: LD_VAR 0 1
79640: PPUSH
79641: LD_VAR 0 2
79645: PPUSH
79646: LD_VAR 0 3
79650: PPUSH
79651: LD_VAR 0 4
79655: PPUSH
79656: LD_VAR 0 5
79660: PPUSH
79661: CALL 29527 0 5
// end ; end_of_file
79665: PPOPN 5
79667: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79668: LD_VAR 0 1
79672: PPUSH
79673: LD_VAR 0 2
79677: PPUSH
79678: LD_VAR 0 3
79682: PPUSH
79683: LD_VAR 0 4
79687: PPUSH
79688: LD_VAR 0 5
79692: PPUSH
79693: LD_VAR 0 6
79697: PPUSH
79698: CALL 13570 0 6
// end ;
79702: PPOPN 6
79704: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79705: LD_INT 0
79707: PPUSH
// begin if not units then
79708: LD_VAR 0 1
79712: NOT
79713: IFFALSE 79717
// exit ;
79715: GO 79751
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
79717: LD_VAR 0 1
79721: PPUSH
79722: LD_VAR 0 2
79726: PPUSH
79727: LD_VAR 0 3
79731: PPUSH
79732: LD_VAR 0 4
79736: PPUSH
79737: LD_VAR 0 5
79741: PPUSH
79742: LD_VAR 0 6
79746: PPUSH
79747: CALL 35924 0 6
// end ;
79751: PPOPN 7
79753: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79754: CALL 13450 0 0
// end ;
79758: PPOPN 1
79760: END
