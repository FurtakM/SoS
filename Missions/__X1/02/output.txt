// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11745 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 33351 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 33351 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74972 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_EXP 8
8103: NOT
8104: AND
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 255
8113: PUSH
8114: LD_INT 2
8116: NONEQUAL
8117: AND
8118: PUSH
8119: LD_EXP 25
8123: PPUSH
8124: CALL_OW 302
8128: AND
8129: PUSH
8130: LD_EXP 23
8134: PPUSH
8135: CALL_OW 302
8139: AND
8140: IFFALSE 8285
8142: GO 8144
8144: DISABLE
// begin DialogueOn ;
8145: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8149: LD_INT 47
8151: PPUSH
8152: LD_INT 19
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: LD_INT 6
8160: NEG
8161: PPUSH
8162: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8166: LD_INT 47
8168: PPUSH
8169: LD_INT 19
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8179: LD_INT 34
8181: PPUSH
8182: LD_INT 32
8184: PPUSH
8185: LD_INT 2
8187: PPUSH
8188: LD_INT 6
8190: NEG
8191: PPUSH
8192: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8196: LD_INT 34
8198: PPUSH
8199: LD_INT 32
8201: PPUSH
8202: LD_INT 2
8204: PPUSH
8205: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8209: LD_EXP 25
8213: PPUSH
8214: LD_STRING DM-Prem-1
8216: PPUSH
8217: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8221: LD_EXP 23
8225: PPUSH
8226: LD_STRING DH-Prem-2
8228: PPUSH
8229: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8233: LD_EXP 23
8237: PPUSH
8238: LD_STRING DH-Prem-3
8240: PPUSH
8241: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8245: LD_EXP 25
8249: PPUSH
8250: LD_STRING DM-Prem-4
8252: PPUSH
8253: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8257: LD_EXP 25
8261: PPUSH
8262: LD_STRING DM-Prem-5
8264: PPUSH
8265: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8269: LD_EXP 24
8273: PPUSH
8274: LD_STRING DG-Prem-6
8276: PPUSH
8277: CALL_OW 88
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8286: LD_INT 5
8288: PPUSH
8289: LD_EXP 23
8293: PPUSH
8294: CALL_OW 292
8298: PUSH
8299: LD_EXP 23
8303: PPUSH
8304: LD_EXP 27
8308: PPUSH
8309: CALL_OW 296
8313: PUSH
8314: LD_INT 6
8316: LESS
8317: AND
8318: PUSH
8319: LD_EXP 8
8323: AND
8324: PUSH
8325: LD_EXP 14
8329: NOT
8330: AND
8331: IFFALSE 8469
8333: GO 8335
8335: DISABLE
8336: LD_INT 0
8338: PPUSH
// begin attackDeltaAllowed := true ;
8339: LD_ADDR_EXP 14
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// InGameOn ;
8347: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8351: LD_EXP 23
8355: PPUSH
8356: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8367: LD_EXP 27
8371: PPUSH
8372: LD_EXP 23
8376: PPUSH
8377: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8381: LD_EXP 23
8385: PPUSH
8386: LD_EXP 27
8390: PPUSH
8391: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8395: LD_EXP 23
8399: PPUSH
8400: LD_STRING DH-1-return
8402: PPUSH
8403: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8407: LD_EXP 27
8411: PPUSH
8412: LD_STRING DA-1-return
8414: PPUSH
8415: CALL_OW 88
// InGameOff ;
8419: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8423: LD_STRING ODelta
8425: PPUSH
8426: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8467
// SetSide ( i , 2 ) ;
8453: LD_VAR 0 1
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 235
8465: GO 8450
8467: POP
8468: POP
// end ;
8469: PPOPN 1
8471: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 14
8481: NOT
8482: AND
8483: IFFALSE 8496
8485: GO 8487
8487: DISABLE
// spottedBeforeRadio := true ;
8488: LD_ADDR_EXP 6
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
8496: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8497: LD_EXP 14
8501: PUSH
8502: LD_EXP 30
8506: PPUSH
8507: CALL_OW 302
8511: AND
8512: PUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 255
8520: PUSH
8521: LD_INT 1
8523: EQUAL
8524: AND
8525: PUSH
8526: LD_EXP 20
8530: PPUSH
8531: CALL_OW 302
8535: AND
8536: PUSH
8537: LD_EXP 10
8541: NOT
8542: AND
8543: IFFALSE 9771
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin trap := 0 ;
8553: LD_ADDR_EXP 17
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8561: LD_INT 420
8563: PPUSH
8564: CALL_OW 67
// DialogueOn ;
8568: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8572: LD_EXP 30
8576: PPUSH
8577: LD_STRING DMar-1-radio
8579: PPUSH
8580: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8584: LD_EXP 23
8588: PPUSH
8589: LD_STRING DH-1-radio
8591: PPUSH
8592: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8596: LD_EXP 30
8600: PPUSH
8601: LD_STRING DMar-2-radio
8603: PPUSH
8604: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8608: LD_EXP 23
8612: PPUSH
8613: LD_STRING DH-2-radio
8615: PPUSH
8616: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8620: LD_EXP 26
8624: PPUSH
8625: CALL_OW 302
8629: PUSH
8630: LD_EXP 29
8634: PPUSH
8635: CALL_OW 302
8639: OR
8640: IFFALSE 9771
// begin case Query ( Q1Trap ) of 1 :
8642: LD_STRING Q1Trap
8644: PPUSH
8645: CALL_OW 97
8649: PUSH
8650: LD_INT 1
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8864
8658: POP
// begin if IsOk ( Kamil ) then
8659: LD_EXP 26
8663: PPUSH
8664: CALL_OW 302
8668: IFFALSE 8747
// begin Say ( Kamil , DKam-2-radio ) ;
8670: LD_EXP 26
8674: PPUSH
8675: LD_STRING DKam-2-radio
8677: PPUSH
8678: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8682: LD_EXP 26
8686: PPUSH
8687: LD_STRING DKam-3-radio
8689: PPUSH
8690: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8694: LD_EXP 20
8698: PPUSH
8699: LD_STRING DDelta-3-radio
8701: PPUSH
8702: CALL 74972 0 2
// dwait ( 0 0$01 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8713: LD_EXP 23
8717: PPUSH
8718: LD_STRING DH-3-radio
8720: PPUSH
8721: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8725: LD_EXP 26
8729: PPUSH
8730: LD_STRING DKam-4-radio
8732: PPUSH
8733: CALL_OW 88
// trap := 1 ;
8737: LD_ADDR_EXP 17
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end else
8745: GO 8858
// begin Say ( Sophia , DS-1-radio ) ;
8747: LD_EXP 29
8751: PPUSH
8752: LD_STRING DS-1-radio
8754: PPUSH
8755: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8759: LD_EXP 29
8763: PPUSH
8764: LD_STRING DS-2-radio
8766: PPUSH
8767: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8771: LD_EXP 20
8775: PPUSH
8776: LD_STRING DDelta-2-radio-s
8778: PPUSH
8779: CALL 74972 0 2
// Say ( Sophia , DS-3-radio ) ;
8783: LD_EXP 29
8787: PPUSH
8788: LD_STRING DS-3-radio
8790: PPUSH
8791: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8795: LD_EXP 20
8799: PPUSH
8800: LD_STRING DDelta-3-radio-s
8802: PPUSH
8803: CALL 74972 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8807: LD_EXP 29
8811: PPUSH
8812: LD_STRING DS-4-radio-s
8814: PPUSH
8815: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8819: LD_EXP 20
8823: PPUSH
8824: LD_STRING DDelta-4-radio-s
8826: PPUSH
8827: CALL 74972 0 2
// dwait ( 0 0$01 ) ;
8831: LD_INT 35
8833: PPUSH
8834: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8838: LD_EXP 23
8842: PPUSH
8843: LD_STRING DH-1-trap
8845: PPUSH
8846: CALL_OW 88
// trap := 0 ;
8850: LD_ADDR_EXP 17
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// end ; DialogueOff ;
8858: CALL_OW 7
// end ; 2 :
8862: GO 8882
8864: LD_INT 2
8866: DOUBLE
8867: EQUAL
8868: IFTRUE 8872
8870: GO 8881
8872: POP
// begin DialogueOff ;
8873: CALL_OW 7
// exit ;
8877: GO 9771
// end ; end ;
8879: GO 8882
8881: POP
// if trap = 1 then
8882: LD_EXP 17
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9342
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8892: LD_INT 64
8894: PPUSH
8895: LD_INT 32
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: LD_INT 8
8903: PPUSH
8904: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8908: LD_INT 64
8910: PPUSH
8911: LD_INT 32
8913: PPUSH
8914: CALL_OW 84
// tmp := [ ] ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: EMPTY
8924: ST_TO_ADDR
// k := 3 ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 3
8932: ST_TO_ADDR
// if usForces < 3 then
8933: LD_EXP 21
8937: PUSH
8938: LD_INT 3
8940: LESS
8941: IFFALSE 8953
// k := usForces ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_EXP 21
8952: ST_TO_ADDR
// for i := 1 to k do
8953: LD_ADDR_VAR 0 1
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 2
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9024
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8971: LD_ADDR_VAR 0 3
8975: PUSH
8976: LD_VAR 0 3
8980: PPUSH
8981: LD_VAR 0 3
8985: PUSH
8986: LD_INT 1
8988: PLUS
8989: PPUSH
8990: LD_EXP 21
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9004: LD_ADDR_EXP 21
9008: PUSH
9009: LD_EXP 21
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 3
9021: ST_TO_ADDR
// end ;
9022: GO 8968
9024: POP
9025: POP
// usPatrol := tmp ;
9026: LD_ADDR_EXP 16
9030: PUSH
9031: LD_VAR 0 3
9035: ST_TO_ADDR
// for i in tmp do
9036: LD_ADDR_VAR 0 1
9040: PUSH
9041: LD_VAR 0 3
9045: PUSH
9046: FOR_IN
9047: IFFALSE 9177
// begin if IsInUnit ( i ) then
9049: LD_VAR 0 1
9053: PPUSH
9054: CALL_OW 310
9058: IFFALSE 9069
// ComExitBuilding ( i ) ;
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: LD_INT 31
9079: PPUSH
9080: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9084: LD_VAR 0 1
9088: PPUSH
9089: LD_INT 70
9091: PPUSH
9092: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: LD_INT 103
9103: PPUSH
9104: LD_INT 43
9106: PPUSH
9107: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9111: LD_VAR 0 1
9115: PPUSH
9116: LD_INT 105
9118: PPUSH
9119: CALL_OW 202
// if Difficulty > 1 then
9123: LD_OWVAR 67
9127: PUSH
9128: LD_INT 1
9130: GREATER
9131: IFFALSE 9148
// AddComAgressiveMove ( i , 114 , 69 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 114
9140: PPUSH
9141: LD_INT 69
9143: PPUSH
9144: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_INT 105
9155: PPUSH
9156: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9160: LD_VAR 0 1
9164: PPUSH
9165: LD_INT 42
9167: PPUSH
9168: LD_INT 20
9170: PPUSH
9171: CALL_OW 174
// end ;
9175: GO 9046
9177: POP
9178: POP
// wait ( 0 0$8 ) ;
9179: LD_INT 280
9181: PPUSH
9182: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9186: LD_INT 64
9188: PPUSH
9189: LD_INT 32
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// for i in tmp do
9206: LD_ADDR_VAR 0 1
9210: PUSH
9211: LD_VAR 0 3
9215: PUSH
9216: FOR_IN
9217: IFFALSE 9248
// if IsDead ( i ) then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 301
9228: IFFALSE 9246
// tmp := tmp diff i ;
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_VAR 0 3
9239: PUSH
9240: LD_VAR 0 1
9244: DIFF
9245: ST_TO_ADDR
9246: GO 9216
9248: POP
9249: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9250: LD_VAR 0 3
9254: NOT
9255: PUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 95
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 60
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: PUSH
9293: LD_VAR 0 3
9297: EQUAL
9298: OR
9299: IFFALSE 9199
// if tmp then
9301: LD_VAR 0 3
9305: IFFALSE 9332
// begin usPatrol := [ ] ;
9307: LD_ADDR_EXP 16
9311: PUSH
9312: EMPTY
9313: ST_TO_ADDR
// usForces := usForces union tmp ;
9314: LD_ADDR_EXP 21
9318: PUSH
9319: LD_EXP 21
9323: PUSH
9324: LD_VAR 0 3
9328: UNION
9329: ST_TO_ADDR
// end else
9330: GO 9340
// trickyMove := true ;
9332: LD_ADDR_EXP 15
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// end else
9340: GO 9771
// begin tmp := [ ] ;
9342: LD_ADDR_VAR 0 3
9346: PUSH
9347: EMPTY
9348: ST_TO_ADDR
// k := 4 ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 4
9356: ST_TO_ADDR
// if usForces < 4 then
9357: LD_EXP 21
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: IFFALSE 9377
// k := usForces ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_EXP 21
9376: ST_TO_ADDR
// for i := 1 to k do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_VAR 0 2
9391: PUSH
9392: FOR_TO
9393: IFFALSE 9448
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9395: LD_ADDR_VAR 0 3
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: LD_EXP 21
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: CALL_OW 1
9427: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9428: LD_ADDR_EXP 21
9432: PUSH
9433: LD_EXP 21
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 3
9445: ST_TO_ADDR
// end ;
9446: GO 9392
9448: POP
9449: POP
// if Lynch then
9450: LD_EXP 20
9454: IFFALSE 9472
// tmp := tmp ^ Lynch ;
9456: LD_ADDR_VAR 0 3
9460: PUSH
9461: LD_VAR 0 3
9465: PUSH
9466: LD_EXP 20
9470: ADD
9471: ST_TO_ADDR
// usPatrol := tmp ;
9472: LD_ADDR_EXP 16
9476: PUSH
9477: LD_VAR 0 3
9481: ST_TO_ADDR
// for i in tmp do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 3
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9586
// begin if IsInUnit ( i ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 310
9504: IFFALSE 9515
// ComExitBuilding ( i ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 69
9522: PPUSH
9523: LD_INT 15
9525: PPUSH
9526: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9530: LD_VAR 0 1
9534: PPUSH
9535: LD_INT 700
9537: PPUSH
9538: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 55
9549: PPUSH
9550: LD_INT 43
9552: PPUSH
9553: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9557: LD_VAR 0 1
9561: PPUSH
9562: LD_INT 700
9564: PPUSH
9565: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_INT 42
9576: PPUSH
9577: LD_INT 20
9579: PPUSH
9580: CALL_OW 174
// end ;
9584: GO 9492
9586: POP
9587: POP
// repeat wait ( 0 0$1 ) ;
9588: LD_INT 35
9590: PPUSH
9591: CALL_OW 67
// for i in tmp do
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_VAR 0 3
9604: PUSH
9605: FOR_IN
9606: IFFALSE 9637
// if IsDead ( i ) then
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL_OW 301
9617: IFFALSE 9635
// tmp := tmp diff i ;
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: LD_VAR 0 1
9633: DIFF
9634: ST_TO_ADDR
9635: GO 9605
9637: POP
9638: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9639: LD_VAR 0 3
9643: NOT
9644: PUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 95
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 60
9665: PUSH
9666: EMPTY
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_VAR 0 3
9686: EQUAL
9687: OR
9688: IFFALSE 9588
// if not tmp then
9690: LD_VAR 0 3
9694: NOT
9695: IFFALSE 9707
// trickyMove := true else
9697: LD_ADDR_EXP 15
9701: PUSH
9702: LD_INT 1
9704: ST_TO_ADDR
9705: GO 9714
// usPatrol := [ ] ;
9707: LD_ADDR_EXP 16
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// if tmp diff Lynch then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_EXP 20
9723: DIFF
9724: IFFALSE 9748
// usForces := usForces union ( tmp diff Lynch ) ;
9726: LD_ADDR_EXP 21
9730: PUSH
9731: LD_EXP 21
9735: PUSH
9736: LD_VAR 0 3
9740: PUSH
9741: LD_EXP 20
9745: DIFF
9746: UNION
9747: ST_TO_ADDR
// if IsOk ( Lynch ) then
9748: LD_EXP 20
9752: PPUSH
9753: CALL_OW 302
9757: IFFALSE 9771
// ComEnterUnit ( Lynch , Delta ) ;
9759: LD_EXP 20
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 120
// end ; end ; end ;
9771: PPOPN 3
9773: END
// every 0 0$1 trigger trickyMove do
9774: LD_EXP 15
9778: IFFALSE 9790
9780: GO 9782
9782: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9783: LD_STRING ACH_TRAP
9785: PPUSH
9786: CALL_OW 543
9790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9791: LD_INT 22
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 23
9803: PUSH
9804: LD_INT 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9835: LD_STRING ACH_SCRAP
9837: PPUSH
9838: CALL_OW 543
9842: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9843: LD_EXP 16
9847: PPUSH
9848: LD_INT 101
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 72
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 23
9870: PPUSH
9871: CALL_OW 292
9875: AND
9876: IFFALSE 10009
9878: GO 9880
9880: DISABLE
// begin if not trap then
9881: LD_EXP 17
9885: NOT
9886: IFFALSE 9914
// begin Say ( Heike , DH-2-trap ) ;
9888: LD_EXP 23
9892: PPUSH
9893: LD_STRING DH-2-trap
9895: PPUSH
9896: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9900: LD_EXP 25
9904: PPUSH
9905: LD_STRING DM-2-trap
9907: PPUSH
9908: CALL_OW 88
// end else
9912: GO 9926
// begin Say ( Heike , DH-1-trap-a ) ;
9914: LD_EXP 23
9918: PPUSH
9919: LD_STRING DH-1-trap-a
9921: PPUSH
9922: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// until trickyMove ;
9933: LD_EXP 15
9937: IFFALSE 9926
// Say ( Heike , DH-3-trap ) ;
9939: LD_EXP 23
9943: PPUSH
9944: LD_STRING DH-3-trap
9946: PPUSH
9947: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9951: LD_EXP 24
9955: PPUSH
9956: CALL_OW 302
9960: PUSH
9961: LD_EXP 28
9965: PPUSH
9966: CALL_OW 302
9970: AND
9971: IFFALSE 10009
// begin Say ( Givi , DG-3-trap ) ;
9973: LD_EXP 24
9977: PPUSH
9978: LD_STRING DG-3-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9985: LD_EXP 28
9989: PPUSH
9990: LD_STRING DK-3-trap
9992: PPUSH
9993: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9997: LD_EXP 24
10001: PPUSH
10002: LD_STRING DG-4-trap
10004: PPUSH
10005: CALL_OW 88
// end ; end ;
10009: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 255
10017: PUSH
10018: LD_INT 2
10020: EQUAL
10021: PUSH
10022: LD_EXP 14
10026: AND
10027: IFFALSE 10186
10029: GO 10031
10031: DISABLE
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
// begin if not IsOk ( Kaia ) then
10036: LD_EXP 28
10040: PPUSH
10041: CALL_OW 302
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10186
// if tick < 5 5$00 then
10050: LD_OWVAR 1
10054: PUSH
10055: LD_INT 10500
10057: LESS
10058: IFFALSE 10067
// SetAchievement ( ACH_DELTA ) ;
10060: LD_STRING ACH_DELTA
10062: PPUSH
10063: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10067: LD_EXP 28
10071: PPUSH
10072: LD_STRING DK-1-capture
10074: PPUSH
10075: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10079: LD_EXP 23
10083: PPUSH
10084: LD_STRING DH-1-capture
10086: PPUSH
10087: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10091: LD_ADDR_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not tmp then
10125: LD_VAR 0 2
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10186
// for i in tmp do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10184
// begin if IsInUnit ( i ) then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: IFFALSE 10167
// ComExitBuilding ( i ) ;
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10167: LD_VAR 0 1
10171: PPUSH
10172: LD_INT 38
10174: PPUSH
10175: LD_INT 23
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10144
10184: POP
10185: POP
// end ;
10186: PPOPN 2
10188: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10189: LD_INT 3
10191: PPUSH
10192: CALL_OW 255
10196: PUSH
10197: LD_INT 2
10199: EQUAL
10200: PUSH
10201: LD_EXP 14
10205: AND
10206: IFFALSE 10251
10208: GO 10210
10210: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10211: LD_INT 1
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 322
// DialogueOn ;
10224: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10228: LD_EXP 27
10232: PPUSH
10233: LD_STRING DA-1-capture
10235: PPUSH
10236: CALL_OW 88
// DialogueOff ;
10240: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10244: LD_STRING OTame
10246: PPUSH
10247: CALL_OW 337
// end ;
10251: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10252: LD_INT 1
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: CALL_OW 321
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: PUSH
10267: LD_EXP 14
10271: AND
10272: IFFALSE 10423
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10281: LD_EXP 27
10285: PPUSH
10286: LD_STRING DA-1-ape
10288: PPUSH
10289: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10293: LD_EXP 23
10297: PPUSH
10298: LD_STRING DH-1-ape
10300: PPUSH
10301: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10305: LD_EXP 27
10309: PPUSH
10310: LD_STRING DA-2-ape
10312: PPUSH
10313: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10317: LD_EXP 27
10321: PPUSH
10322: LD_STRING DA-3-ape
10324: PPUSH
10325: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10329: LD_EXP 23
10333: PPUSH
10334: LD_STRING DH-3-ape
10336: PPUSH
10337: CALL_OW 88
// DialogueOff ;
10341: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10345: LD_INT 22
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 25
10357: PUSH
10358: LD_INT 12
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 69
10373: PUSH
10374: LD_INT 0
10376: EQUAL
10377: IFFALSE 10389
// SpawnApeman ( forest , 2 ) ;
10379: LD_INT 1
10381: PPUSH
10382: LD_INT 2
10384: PPUSH
10385: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10389: LD_INT 35
10391: PPUSH
10392: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10396: LD_INT 25
10398: PUSH
10399: LD_INT 12
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PPUSH
10406: CALL_OW 69
10410: PUSH
10411: LD_INT 0
10413: EQUAL
10414: IFFALSE 10389
// YouLost ( Ape ) ;
10416: LD_STRING Ape
10418: PPUSH
10419: CALL_OW 104
// end ;
10423: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10424: LD_EXP 18
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 2
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: LD_OWVAR 67
10451: ARRAY
10452: GREATEREQUAL
10453: IFFALSE 10497
10455: GO 10457
10457: DISABLE
// begin DialogueOn ;
10458: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10462: LD_EXP 27
10466: PPUSH
10467: LD_STRING DA-1-failure
10469: PPUSH
10470: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10474: LD_EXP 27
10478: PPUSH
10479: LD_STRING DA-2-failure
10481: PPUSH
10482: CALL_OW 88
// YouLost ( Failure ) ;
10486: LD_STRING Failure
10488: PPUSH
10489: CALL_OW 104
// DialogueOff ;
10493: CALL_OW 7
// end ;
10497: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10498: LD_EXP 28
10502: PPUSH
10503: CALL_OW 256
10507: PUSH
10508: LD_INT 3
10510: LESS
10511: IFFALSE 10644
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10520: LD_EXP 28
10524: PPUSH
10525: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10529: LD_EXP 28
10533: PPUSH
10534: LD_STRING DK-Kaiaout-1
10536: PPUSH
10537: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10541: LD_EXP 23
10545: PPUSH
10546: LD_STRING DH-Kaiaout-2
10548: PPUSH
10549: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10553: LD_EXP 24
10557: PPUSH
10558: LD_STRING DG-Kaiaout-3
10560: PPUSH
10561: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10565: LD_EXP 23
10569: PPUSH
10570: LD_STRING DH-Kaiaout-4
10572: PPUSH
10573: CALL_OW 88
// if Givi then
10577: LD_EXP 24
10581: IFFALSE 10631
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10583: LD_EXP 24
10587: PPUSH
10588: LD_STRING DG-Kaiaout-5
10590: PPUSH
10591: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10595: LD_EXP 23
10599: PPUSH
10600: LD_STRING DH-Kaiaout-6
10602: PPUSH
10603: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10607: LD_EXP 24
10611: PPUSH
10612: LD_STRING DG-Kaiaout-7
10614: PPUSH
10615: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10619: LD_EXP 23
10623: PPUSH
10624: LD_STRING DH-Kaiaout-8
10626: PPUSH
10627: CALL_OW 88
// end ; DialogueOff ;
10631: CALL_OW 7
// KillUnit ( Kaia ) ;
10635: LD_EXP 28
10639: PPUSH
10640: CALL_OW 66
// end ;
10644: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10645: LD_INT 22
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 23
10657: PUSH
10658: LD_INT 0
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: PUSH
10674: LD_EXP 27
10678: PPUSH
10679: CALL_OW 302
10683: AND
10684: PUSH
10685: LD_EXP 27
10689: PPUSH
10690: CALL_OW 255
10694: PUSH
10695: LD_INT 2
10697: EQUAL
10698: AND
10699: IFFALSE 11685
10701: GO 10703
10703: DISABLE
10704: LD_INT 0
10706: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10707: LD_INT 22
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 34
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: IFFALSE 10848
// begin Query ( QEnemyInSight ) ;
10755: LD_STRING QEnemyInSight
10757: PPUSH
10758: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10762: LD_INT 35
10764: PPUSH
10765: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10769: LD_INT 22
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 34
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: NOT
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 23
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: AND
10846: IFFALSE 10762
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 0
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: ST_TO_ADDR
// InGameOn ;
10882: CALL_OW 8
// if tick <= 10 10$00 then
10886: LD_OWVAR 1
10890: PUSH
10891: LD_INT 21000
10893: LESSEQUAL
10894: IFFALSE 10903
// SetAchievement ( ACH_HSPEED_2 ) ;
10896: LD_STRING ACH_HSPEED_2
10898: PPUSH
10899: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10912: LD_VAR 0 1
10916: PPUSH
10917: LD_EXP 27
10921: PPUSH
10922: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10926: LD_EXP 27
10930: PPUSH
10931: LD_VAR 0 1
10935: PPUSH
10936: CALL_OW 119
// wait ( 0 0$1 ) ;
10940: LD_INT 35
10942: PPUSH
10943: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10947: LD_EXP 27
10951: PPUSH
10952: LD_STRING DA-1-tame-a
10954: PPUSH
10955: CALL_OW 88
// if IsOk ( Mike ) then
10959: LD_EXP 25
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11006
// begin Say ( Mike , DM-1-tame-a ) ;
10970: LD_EXP 25
10974: PPUSH
10975: LD_STRING DM-1-tame-a
10977: PPUSH
10978: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10982: LD_EXP 29
10986: PPUSH
10987: LD_STRING DS-1-tame-a
10989: PPUSH
10990: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10994: LD_EXP 25
10998: PPUSH
10999: LD_STRING DM-2-tame-a
11001: PPUSH
11002: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// PrepareFarmer ;
11013: CALL 12364 0 0
// CenterOnUnits ( Farmer ) ;
11017: LD_EXP 31
11021: PPUSH
11022: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11026: LD_EXP 31
11030: PPUSH
11031: LD_INT 105
11033: PPUSH
11034: LD_INT 59
11036: PPUSH
11037: CALL_OW 111
// AddComHold ( Farmer ) ;
11041: LD_EXP 31
11045: PPUSH
11046: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11050: LD_EXP 31
11054: PPUSH
11055: LD_STRING DF-1-end
11057: PPUSH
11058: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11062: LD_EXP 27
11066: PPUSH
11067: LD_STRING DA-1-end
11069: PPUSH
11070: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11074: LD_EXP 31
11078: PPUSH
11079: LD_STRING DF-2-end
11081: PPUSH
11082: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11086: LD_EXP 27
11090: PPUSH
11091: LD_STRING DA-2-end
11093: PPUSH
11094: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11098: LD_EXP 31
11102: PPUSH
11103: LD_STRING DF-3-end
11105: PPUSH
11106: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11110: LD_EXP 23
11114: PPUSH
11115: LD_STRING DH-3-end
11117: PPUSH
11118: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11122: LD_EXP 31
11126: PPUSH
11127: LD_STRING DF-4-end
11129: PPUSH
11130: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11134: LD_OWVAR 1
11138: PUSH
11139: LD_INT 52500
11141: PUSH
11142: LD_INT 47250
11144: PUSH
11145: LD_INT 42000
11147: PUSH
11148: LD_INT 31500
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PUSH
11157: LD_OWVAR 67
11161: ARRAY
11162: LESSEQUAL
11163: IFFALSE 11177
// AddMedal ( med1 , 1 ) else
11165: LD_STRING med1
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 101
11175: GO 11188
// AddMedal ( med1 , - 1 ) ;
11177: LD_STRING med1
11179: PPUSH
11180: LD_INT 1
11182: NEG
11183: PPUSH
11184: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11188: LD_INT 22
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 4
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 69
11216: PUSH
11217: LD_INT 0
11219: EQUAL
11220: PUSH
11221: LD_EXP 12
11225: NOT
11226: AND
11227: IFFALSE 11241
// AddMedal ( med2 , 1 ) else
11229: LD_STRING med2
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: CALL_OW 101
11239: GO 11252
// AddMedal ( med2 , - 1 ) ;
11241: LD_STRING med2
11243: PPUSH
11244: LD_INT 1
11246: NEG
11247: PPUSH
11248: CALL_OW 101
// if trickyMove then
11252: LD_EXP 15
11256: IFFALSE 11270
// AddMedal ( med3 , 1 ) else
11258: LD_STRING med3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 101
11268: GO 11300
// if spottedBeforeRadio then
11270: LD_EXP 6
11274: IFFALSE 11289
// AddMedal ( med3 , - 2 ) else
11276: LD_STRING med3
11278: PPUSH
11279: LD_INT 2
11281: NEG
11282: PPUSH
11283: CALL_OW 101
11287: GO 11300
// AddMedal ( med3 , - 1 ) ;
11289: LD_STRING med3
11291: PPUSH
11292: LD_INT 1
11294: NEG
11295: PPUSH
11296: CALL_OW 101
// GiveMedals ( MAIN ) ;
11300: LD_STRING MAIN
11302: PPUSH
11303: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11307: LD_INT 22
11309: PUSH
11310: LD_INT 2
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: CALL_OW 69
11335: PPUSH
11336: LD_STRING 02_ape
11338: PPUSH
11339: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 23
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 21
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PPUSH
11383: CALL_OW 69
11387: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11397: LD_EXP 23
11401: PPUSH
11402: LD_STRING 02_Heike
11404: PPUSH
11405: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11409: LD_EXP 27
11413: PPUSH
11414: LD_STRING 02_Aviradze
11416: PPUSH
11417: CALL_OW 38
// if Givi then
11421: LD_EXP 24
11425: IFFALSE 11439
// SaveCharacters ( Givi , 02_Givi ) ;
11427: LD_EXP 24
11431: PPUSH
11432: LD_STRING 02_Givi
11434: PPUSH
11435: CALL_OW 38
// if Mike then
11439: LD_EXP 25
11443: IFFALSE 11457
// SaveCharacters ( Mike , 02_Mike ) ;
11445: LD_EXP 25
11449: PPUSH
11450: LD_STRING 02_Mike
11452: PPUSH
11453: CALL_OW 38
// if Kamil then
11457: LD_EXP 26
11461: IFFALSE 11475
// SaveCharacters ( Kamil , 02_Kamil ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING 02_Kamil
11470: PPUSH
11471: CALL_OW 38
// if Kaia then
11475: LD_EXP 28
11479: IFFALSE 11493
// SaveCharacters ( Kaia , 02_Kaia ) ;
11481: LD_EXP 28
11485: PPUSH
11486: LD_STRING 02_Kaia
11488: PPUSH
11489: CALL_OW 38
// if Sophia then
11493: LD_EXP 29
11497: IFFALSE 11511
// SaveCharacters ( Sophia , 02_Sophia ) ;
11499: LD_EXP 29
11503: PPUSH
11504: LD_STRING 02_Sophia
11506: PPUSH
11507: CALL_OW 38
// if Markov then
11511: LD_EXP 30
11515: IFFALSE 11529
// SaveCharacters ( Markov , 02_Markov ) ;
11517: LD_EXP 30
11521: PPUSH
11522: LD_STRING 02_Markov
11524: PPUSH
11525: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11529: LD_VAR 0 1
11533: PUSH
11534: LD_EXP 23
11538: PUSH
11539: LD_EXP 27
11543: PUSH
11544: LD_EXP 24
11548: PUSH
11549: LD_EXP 25
11553: PUSH
11554: LD_EXP 26
11558: PUSH
11559: LD_EXP 29
11563: PUSH
11564: LD_EXP 28
11568: PUSH
11569: LD_EXP 30
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: DIFF
11584: IFFALSE 11649
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11586: LD_VAR 0 1
11590: PUSH
11591: LD_EXP 23
11595: PUSH
11596: LD_EXP 27
11600: PUSH
11601: LD_EXP 24
11605: PUSH
11606: LD_EXP 25
11610: PUSH
11611: LD_EXP 26
11615: PUSH
11616: LD_EXP 29
11620: PUSH
11621: LD_EXP 28
11625: PUSH
11626: LD_EXP 30
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: DIFF
11641: PPUSH
11642: LD_STRING 02_others
11644: PPUSH
11645: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11649: LD_STRING enableBioCharacter(BIO_KRAY)
11651: PPUSH
11652: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11656: LD_STRING enableBioCharacter(BIO_AVIR)
11658: PPUSH
11659: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11663: LD_STRING enableBioCharacter(BIO_SOPH)
11665: PPUSH
11666: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11670: LD_STRING enableBioCharacter(BIO_KAMI)
11672: PPUSH
11673: CALL_OW 559
// YouWin ;
11677: CALL_OW 103
// InGameOff ;
11681: CALL_OW 9
// end ;
11685: PPOPN 1
11687: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11688: LD_OWVAR 1
11692: PUSH
11693: LD_EXP 13
11697: GREATER
11698: PUSH
11699: LD_EXP 4
11703: AND
11704: IFFALSE 11744
11706: GO 11708
11708: DISABLE
// begin InGameOn ;
11709: CALL_OW 8
// PrepareFarmer ;
11713: CALL 12364 0 0
// CenterNowOnUnits ( Farmer ) ;
11717: LD_EXP 31
11721: PPUSH
11722: CALL_OW 87
// wait ( 0 0$2 ) ;
11726: LD_INT 70
11728: PPUSH
11729: CALL_OW 67
// YouLost ( Farmer ) ;
11733: LD_STRING Farmer
11735: PPUSH
11736: CALL_OW 104
// InGameOff ;
11740: CALL_OW 9
// end ; end_of_file
11744: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
// uc_side := 2 ;
11750: LD_ADDR_OWVAR 20
11754: PUSH
11755: LD_INT 2
11757: ST_TO_ADDR
// uc_nation := 2 ;
11758: LD_ADDR_OWVAR 21
11762: PUSH
11763: LD_INT 2
11765: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11766: LD_ADDR_EXP 23
11770: PUSH
11771: LD_STRING Heike
11773: PPUSH
11774: LD_EXP 1
11778: NOT
11779: PPUSH
11780: LD_EXP 2
11784: PPUSH
11785: CALL 33351 0 3
11789: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11790: LD_EXP 23
11794: PPUSH
11795: LD_INT 83
11797: PPUSH
11798: LD_INT 72
11800: PPUSH
11801: LD_INT 0
11803: PPUSH
11804: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11808: LD_ADDR_EXP 24
11812: PUSH
11813: LD_STRING Givi
11815: PPUSH
11816: LD_EXP 1
11820: NOT
11821: PPUSH
11822: LD_EXP 2
11826: PPUSH
11827: CALL 33351 0 3
11831: ST_TO_ADDR
// if Givi then
11832: LD_EXP 24
11836: IFFALSE 11856
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11838: LD_EXP 24
11842: PPUSH
11843: LD_INT 87
11845: PPUSH
11846: LD_INT 76
11848: PPUSH
11849: LD_INT 0
11851: PPUSH
11852: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11856: LD_ADDR_EXP 25
11860: PUSH
11861: LD_STRING Mike
11863: PPUSH
11864: LD_EXP 1
11868: NOT
11869: PPUSH
11870: LD_EXP 2
11874: PPUSH
11875: CALL 33351 0 3
11879: ST_TO_ADDR
// if Mike then
11880: LD_EXP 25
11884: IFFALSE 11904
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11886: LD_EXP 25
11890: PPUSH
11891: LD_INT 84
11893: PPUSH
11894: LD_INT 76
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11904: LD_ADDR_EXP 26
11908: PUSH
11909: LD_STRING Kamil
11911: PPUSH
11912: LD_EXP 1
11916: NOT
11917: PPUSH
11918: LD_EXP 2
11922: PPUSH
11923: CALL 33351 0 3
11927: ST_TO_ADDR
// if Kamil then
11928: LD_EXP 26
11932: IFFALSE 11952
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11934: LD_EXP 26
11938: PPUSH
11939: LD_INT 85
11941: PPUSH
11942: LD_INT 78
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: CALL_OW 48
// uc_side := 5 ;
11952: LD_ADDR_OWVAR 20
11956: PUSH
11957: LD_INT 5
11959: ST_TO_ADDR
// uc_nation := 2 ;
11960: LD_ADDR_OWVAR 21
11964: PUSH
11965: LD_INT 2
11967: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11968: LD_ADDR_EXP 27
11972: PUSH
11973: LD_STRING Aviradze
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: LD_STRING 
11981: PPUSH
11982: CALL 33351 0 3
11986: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11987: LD_EXP 27
11991: PPUSH
11992: LD_INT 106
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12005: LD_EXP 27
12009: PPUSH
12010: LD_INT 103
12012: PPUSH
12013: LD_INT 38
12015: PPUSH
12016: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12020: LD_ADDR_EXP 28
12024: PUSH
12025: LD_STRING Kaia
12027: PPUSH
12028: LD_INT 0
12030: PPUSH
12031: LD_STRING 
12033: PPUSH
12034: CALL 33351 0 3
12038: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12039: LD_EXP 28
12043: PPUSH
12044: LD_INT 100
12046: PPUSH
12047: LD_INT 34
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12057: LD_EXP 28
12061: PPUSH
12062: LD_INT 100
12064: PPUSH
12065: LD_INT 39
12067: PPUSH
12068: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12072: LD_ADDR_EXP 29
12076: PUSH
12077: LD_STRING Sophia
12079: PPUSH
12080: LD_INT 0
12082: PPUSH
12083: LD_STRING 
12085: PPUSH
12086: CALL 33351 0 3
12090: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12091: LD_EXP 29
12095: PPUSH
12096: LD_INT 109
12098: PPUSH
12099: LD_INT 50
12101: PPUSH
12102: LD_INT 0
12104: PPUSH
12105: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12109: LD_EXP 29
12113: PPUSH
12114: LD_INT 100
12116: PPUSH
12117: LD_INT 39
12119: PPUSH
12120: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12124: LD_ADDR_EXP 30
12128: PUSH
12129: LD_STRING Markov
12131: PPUSH
12132: LD_INT 0
12134: PPUSH
12135: LD_STRING 
12137: PPUSH
12138: CALL 33351 0 3
12142: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12143: LD_INT 5
12145: PPUSH
12146: LD_INT 3
12148: PPUSH
12149: LD_INT 21
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 42
12160: PPUSH
12161: LD_INT 90
12163: PUSH
12164: LD_INT 70
12166: PUSH
12167: LD_INT 60
12169: PUSH
12170: LD_INT 50
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_OWVAR 67
12183: ARRAY
12184: PPUSH
12185: CALL 241 0 7
// veh := CreateVehicle ;
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: CALL_OW 45
12198: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 4
12206: PPUSH
12207: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 109
12218: PPUSH
12219: LD_INT 38
12221: PPUSH
12222: LD_INT 0
12224: PPUSH
12225: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12229: LD_EXP 30
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12243: LD_EXP 28
12247: PPUSH
12248: LD_EXP 27
12252: PPUSH
12253: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12257: LD_EXP 27
12261: PPUSH
12262: LD_EXP 28
12266: PPUSH
12267: CALL_OW 119
// if not Givi or not Mike then
12271: LD_EXP 24
12275: NOT
12276: PUSH
12277: LD_EXP 25
12281: NOT
12282: OR
12283: IFFALSE 12359
// begin uc_nation := 2 ;
12285: LD_ADDR_OWVAR 21
12289: PUSH
12290: LD_INT 2
12292: ST_TO_ADDR
// uc_side := 5 ;
12293: LD_ADDR_OWVAR 20
12297: PUSH
12298: LD_INT 5
12300: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 380
// un := CreateHuman ;
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: CALL_OW 44
12323: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12324: LD_VAR 0 2
12328: PPUSH
12329: LD_INT 112
12331: PPUSH
12332: LD_INT 40
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12345: LD_VAR 0 2
12349: PPUSH
12350: LD_EXP 27
12354: PPUSH
12355: CALL_OW 119
// end ; end ;
12359: LD_VAR 0 1
12363: RET
// export function PrepareFarmer ; var i ; begin
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
// uc_side := 5 ;
12368: LD_ADDR_OWVAR 20
12372: PUSH
12373: LD_INT 5
12375: ST_TO_ADDR
// uc_nation := 2 ;
12376: LD_ADDR_OWVAR 21
12380: PUSH
12381: LD_INT 2
12383: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12384: LD_ADDR_EXP 31
12388: PUSH
12389: LD_STRING Farmer
12391: PPUSH
12392: LD_INT 0
12394: PPUSH
12395: LD_STRING 
12397: PPUSH
12398: CALL 33351 0 3
12402: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12403: LD_EXP 31
12407: PPUSH
12408: LD_INT 106
12410: PPUSH
12411: LD_INT 62
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 48
// for i := 1 to 5 do
12421: LD_ADDR_VAR 0 2
12425: PUSH
12426: DOUBLE
12427: LD_INT 1
12429: DEC
12430: ST_TO_ADDR
12431: LD_INT 5
12433: PUSH
12434: FOR_TO
12435: IFFALSE 12473
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12437: LD_INT 1
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12450: CALL_OW 44
12454: PPUSH
12455: LD_INT 105
12457: PPUSH
12458: LD_INT 64
12460: PPUSH
12461: LD_INT 3
12463: PPUSH
12464: LD_INT 0
12466: PPUSH
12467: CALL_OW 50
// end ;
12471: GO 12434
12473: POP
12474: POP
// end ; end_of_file
12475: LD_VAR 0 1
12479: RET
// every 2 2$20 + 0 0$10 do
12480: GO 12482
12482: DISABLE
// begin enable ;
12483: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12484: LD_INT 1
12486: PPUSH
12487: LD_INT 5
12489: PPUSH
12490: CALL_OW 12
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 55
// if tick > 6 6$00 then
12505: LD_OWVAR 1
12509: PUSH
12510: LD_INT 12600
12512: GREATER
12513: IFFALSE 12516
// disable ;
12515: DISABLE
// end ; end_of_file
12516: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12517: LD_VAR 0 1
12521: PUSH
12522: LD_EXP 23
12526: EQUAL
12527: IFFALSE 12536
// YouLost ( Heike ) ;
12529: LD_STRING Heike
12531: PPUSH
12532: CALL_OW 104
// if un = Aviradze then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 27
12545: EQUAL
12546: IFFALSE 12555
// YouLost ( Aviradze ) ;
12548: LD_STRING Aviradze
12550: PPUSH
12551: CALL_OW 104
// if un = usLab then
12555: LD_VAR 0 1
12559: PUSH
12560: LD_INT 3
12562: EQUAL
12563: IFFALSE 12572
// YouLost ( Lab ) ;
12565: LD_STRING Lab
12567: PPUSH
12568: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12572: LD_VAR 0 1
12576: PUSH
12577: LD_INT 22
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 21
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 23
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: PUSH
12617: LD_EXP 23
12621: PUSH
12622: LD_EXP 27
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: DIFF
12631: IN
12632: PUSH
12633: LD_EXP 4
12637: AND
12638: IFFALSE 12654
// lostCounter := lostCounter + 1 ;
12640: LD_ADDR_EXP 18
12644: PUSH
12645: LD_EXP 18
12649: PUSH
12650: LD_INT 1
12652: PLUS
12653: ST_TO_ADDR
// end ;
12654: PPOPN 1
12656: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12657: LD_INT 23
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_INT 0
12688: EQUAL
12689: PUSH
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 21
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_INT 0
12721: EQUAL
12722: AND
12723: IFFALSE 12735
12725: GO 12727
12727: DISABLE
// YouLost ( Eng ) ;
12728: LD_STRING Eng
12730: PPUSH
12731: CALL_OW 104
12735: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12736: LD_VAR 0 1
12740: PUSH
12741: LD_EXP 22
12745: IN
12746: PUSH
12747: LD_VAR 0 2
12751: PUSH
12752: LD_INT 2
12754: EQUAL
12755: AND
12756: IFFALSE 12788
// begin usSci := usSci diff un ;
12758: LD_ADDR_EXP 22
12762: PUSH
12763: LD_EXP 22
12767: PUSH
12768: LD_VAR 0 1
12772: DIFF
12773: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12774: LD_ADDR_EXP 9
12778: PUSH
12779: LD_EXP 9
12783: PUSH
12784: LD_INT 1
12786: PLUS
12787: ST_TO_ADDR
// end ; end ;
12788: PPOPN 3
12790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12791: LD_VAR 0 1
12795: PUSH
12796: LD_INT 2
12798: EQUAL
12799: PUSH
12800: LD_VAR 0 2
12804: PUSH
12805: LD_INT 5
12807: EQUAL
12808: AND
12809: IFFALSE 12818
// YouLost ( FriendlyFire ) ;
12811: LD_STRING FriendlyFire
12813: PPUSH
12814: CALL_OW 104
// end ; end_of_file end_of_file
12818: PPOPN 2
12820: END
// export globalGameSaveCounter ; every 0 0$1 do
12821: GO 12823
12823: DISABLE
// begin enable ;
12824: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12825: LD_STRING updateTimer(
12827: PUSH
12828: LD_OWVAR 1
12832: STR
12833: PUSH
12834: LD_STRING );
12836: STR
12837: PPUSH
12838: CALL_OW 559
// end ;
12842: END
// every 0 0$1 do
12843: GO 12845
12845: DISABLE
// begin globalGameSaveCounter := 0 ;
12846: LD_ADDR_EXP 32
12850: PUSH
12851: LD_INT 0
12853: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12854: LD_STRING setGameSaveCounter(0)
12856: PPUSH
12857: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12861: LD_STRING initStreamRollete();
12863: PPUSH
12864: CALL_OW 559
// InitStreamMode ;
12868: CALL 14194 0 0
// DefineStreamItems ( false ) ;
12872: LD_INT 0
12874: PPUSH
12875: CALL 14658 0 1
// end ;
12879: END
// export function SOS_MapStart ( ) ; begin
12880: LD_INT 0
12882: PPUSH
// if streamModeActive then
12883: LD_EXP 33
12887: IFFALSE 12896
// DefineStreamItems ( true ) ;
12889: LD_INT 1
12891: PPUSH
12892: CALL 14658 0 1
// UpdateLuaVariables ( ) ;
12896: CALL 12913 0 0
// UpdateFactoryWaypoints ( ) ;
12900: CALL 27527 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12904: CALL 27784 0 0
// end ;
12908: LD_VAR 0 1
12912: RET
// function UpdateLuaVariables ( ) ; begin
12913: LD_INT 0
12915: PPUSH
// if globalGameSaveCounter then
12916: LD_EXP 32
12920: IFFALSE 12954
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12922: LD_ADDR_EXP 32
12926: PUSH
12927: LD_EXP 32
12931: PPUSH
12932: CALL 72414 0 1
12936: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12937: LD_STRING setGameSaveCounter(
12939: PUSH
12940: LD_EXP 32
12944: STR
12945: PUSH
12946: LD_STRING )
12948: STR
12949: PPUSH
12950: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12954: LD_STRING setGameDifficulty(
12956: PUSH
12957: LD_OWVAR 67
12961: STR
12962: PUSH
12963: LD_STRING )
12965: STR
12966: PPUSH
12967: CALL_OW 559
// end ;
12971: LD_VAR 0 1
12975: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12976: LD_INT 0
12978: PPUSH
// if p2 = stream_mode then
12979: LD_VAR 0 2
12983: PUSH
12984: LD_INT 100
12986: EQUAL
12987: IFFALSE 13990
// begin if not StreamModeActive then
12989: LD_EXP 33
12993: NOT
12994: IFFALSE 13004
// StreamModeActive := true ;
12996: LD_ADDR_EXP 33
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 0 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 0
13011: EQUAL
13012: IFFALSE 13018
// InitStreamMode ;
13014: CALL 14194 0 0
// if p3 = 1 then
13018: LD_VAR 0 3
13022: PUSH
13023: LD_INT 1
13025: EQUAL
13026: IFFALSE 13036
// sRocket := true ;
13028: LD_ADDR_EXP 38
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// if p3 = 2 then
13036: LD_VAR 0 3
13040: PUSH
13041: LD_INT 2
13043: EQUAL
13044: IFFALSE 13054
// sSpeed := true ;
13046: LD_ADDR_EXP 37
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if p3 = 3 then
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 3
13061: EQUAL
13062: IFFALSE 13072
// sEngine := true ;
13064: LD_ADDR_EXP 39
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// if p3 = 4 then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 4
13079: EQUAL
13080: IFFALSE 13090
// sSpec := true ;
13082: LD_ADDR_EXP 36
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// if p3 = 5 then
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 5
13097: EQUAL
13098: IFFALSE 13108
// sLevel := true ;
13100: LD_ADDR_EXP 40
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// if p3 = 6 then
13108: LD_VAR 0 3
13112: PUSH
13113: LD_INT 6
13115: EQUAL
13116: IFFALSE 13126
// sArmoury := true ;
13118: LD_ADDR_EXP 41
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// if p3 = 7 then
13126: LD_VAR 0 3
13130: PUSH
13131: LD_INT 7
13133: EQUAL
13134: IFFALSE 13144
// sRadar := true ;
13136: LD_ADDR_EXP 42
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// if p3 = 8 then
13144: LD_VAR 0 3
13148: PUSH
13149: LD_INT 8
13151: EQUAL
13152: IFFALSE 13162
// sBunker := true ;
13154: LD_ADDR_EXP 43
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// if p3 = 9 then
13162: LD_VAR 0 3
13166: PUSH
13167: LD_INT 9
13169: EQUAL
13170: IFFALSE 13180
// sHack := true ;
13172: LD_ADDR_EXP 44
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// if p3 = 10 then
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 10
13187: EQUAL
13188: IFFALSE 13198
// sFire := true ;
13190: LD_ADDR_EXP 45
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 11 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 11
13205: EQUAL
13206: IFFALSE 13216
// sRefresh := true ;
13208: LD_ADDR_EXP 46
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// if p3 = 12 then
13216: LD_VAR 0 3
13220: PUSH
13221: LD_INT 12
13223: EQUAL
13224: IFFALSE 13234
// sExp := true ;
13226: LD_ADDR_EXP 47
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// if p3 = 13 then
13234: LD_VAR 0 3
13238: PUSH
13239: LD_INT 13
13241: EQUAL
13242: IFFALSE 13252
// sDepot := true ;
13244: LD_ADDR_EXP 48
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if p3 = 14 then
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 14
13259: EQUAL
13260: IFFALSE 13270
// sFlag := true ;
13262: LD_ADDR_EXP 49
13266: PUSH
13267: LD_INT 1
13269: ST_TO_ADDR
// if p3 = 15 then
13270: LD_VAR 0 3
13274: PUSH
13275: LD_INT 15
13277: EQUAL
13278: IFFALSE 13288
// sKamikadze := true ;
13280: LD_ADDR_EXP 57
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if p3 = 16 then
13288: LD_VAR 0 3
13292: PUSH
13293: LD_INT 16
13295: EQUAL
13296: IFFALSE 13306
// sTroll := true ;
13298: LD_ADDR_EXP 58
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// if p3 = 17 then
13306: LD_VAR 0 3
13310: PUSH
13311: LD_INT 17
13313: EQUAL
13314: IFFALSE 13324
// sSlow := true ;
13316: LD_ADDR_EXP 59
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// if p3 = 18 then
13324: LD_VAR 0 3
13328: PUSH
13329: LD_INT 18
13331: EQUAL
13332: IFFALSE 13342
// sLack := true ;
13334: LD_ADDR_EXP 60
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// if p3 = 19 then
13342: LD_VAR 0 3
13346: PUSH
13347: LD_INT 19
13349: EQUAL
13350: IFFALSE 13360
// sTank := true ;
13352: LD_ADDR_EXP 62
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// if p3 = 20 then
13360: LD_VAR 0 3
13364: PUSH
13365: LD_INT 20
13367: EQUAL
13368: IFFALSE 13378
// sRemote := true ;
13370: LD_ADDR_EXP 63
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// if p3 = 21 then
13378: LD_VAR 0 3
13382: PUSH
13383: LD_INT 21
13385: EQUAL
13386: IFFALSE 13396
// sPowell := true ;
13388: LD_ADDR_EXP 64
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// if p3 = 22 then
13396: LD_VAR 0 3
13400: PUSH
13401: LD_INT 22
13403: EQUAL
13404: IFFALSE 13414
// sTeleport := true ;
13406: LD_ADDR_EXP 67
13410: PUSH
13411: LD_INT 1
13413: ST_TO_ADDR
// if p3 = 23 then
13414: LD_VAR 0 3
13418: PUSH
13419: LD_INT 23
13421: EQUAL
13422: IFFALSE 13432
// sOilTower := true ;
13424: LD_ADDR_EXP 69
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
// if p3 = 24 then
13432: LD_VAR 0 3
13436: PUSH
13437: LD_INT 24
13439: EQUAL
13440: IFFALSE 13450
// sShovel := true ;
13442: LD_ADDR_EXP 70
13446: PUSH
13447: LD_INT 1
13449: ST_TO_ADDR
// if p3 = 25 then
13450: LD_VAR 0 3
13454: PUSH
13455: LD_INT 25
13457: EQUAL
13458: IFFALSE 13468
// sSheik := true ;
13460: LD_ADDR_EXP 71
13464: PUSH
13465: LD_INT 1
13467: ST_TO_ADDR
// if p3 = 26 then
13468: LD_VAR 0 3
13472: PUSH
13473: LD_INT 26
13475: EQUAL
13476: IFFALSE 13486
// sEarthquake := true ;
13478: LD_ADDR_EXP 73
13482: PUSH
13483: LD_INT 1
13485: ST_TO_ADDR
// if p3 = 27 then
13486: LD_VAR 0 3
13490: PUSH
13491: LD_INT 27
13493: EQUAL
13494: IFFALSE 13504
// sAI := true ;
13496: LD_ADDR_EXP 74
13500: PUSH
13501: LD_INT 1
13503: ST_TO_ADDR
// if p3 = 28 then
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 28
13511: EQUAL
13512: IFFALSE 13522
// sCargo := true ;
13514: LD_ADDR_EXP 77
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// if p3 = 29 then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_INT 29
13529: EQUAL
13530: IFFALSE 13540
// sDLaser := true ;
13532: LD_ADDR_EXP 78
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// if p3 = 30 then
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 30
13547: EQUAL
13548: IFFALSE 13558
// sExchange := true ;
13550: LD_ADDR_EXP 79
13554: PUSH
13555: LD_INT 1
13557: ST_TO_ADDR
// if p3 = 31 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 31
13565: EQUAL
13566: IFFALSE 13576
// sFac := true ;
13568: LD_ADDR_EXP 80
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// if p3 = 32 then
13576: LD_VAR 0 3
13580: PUSH
13581: LD_INT 32
13583: EQUAL
13584: IFFALSE 13594
// sPower := true ;
13586: LD_ADDR_EXP 81
13590: PUSH
13591: LD_INT 1
13593: ST_TO_ADDR
// if p3 = 33 then
13594: LD_VAR 0 3
13598: PUSH
13599: LD_INT 33
13601: EQUAL
13602: IFFALSE 13612
// sRandom := true ;
13604: LD_ADDR_EXP 82
13608: PUSH
13609: LD_INT 1
13611: ST_TO_ADDR
// if p3 = 34 then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 34
13619: EQUAL
13620: IFFALSE 13630
// sShield := true ;
13622: LD_ADDR_EXP 83
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if p3 = 35 then
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 35
13637: EQUAL
13638: IFFALSE 13648
// sTime := true ;
13640: LD_ADDR_EXP 84
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if p3 = 36 then
13648: LD_VAR 0 3
13652: PUSH
13653: LD_INT 36
13655: EQUAL
13656: IFFALSE 13666
// sTools := true ;
13658: LD_ADDR_EXP 85
13662: PUSH
13663: LD_INT 1
13665: ST_TO_ADDR
// if p3 = 101 then
13666: LD_VAR 0 3
13670: PUSH
13671: LD_INT 101
13673: EQUAL
13674: IFFALSE 13684
// sSold := true ;
13676: LD_ADDR_EXP 50
13680: PUSH
13681: LD_INT 1
13683: ST_TO_ADDR
// if p3 = 102 then
13684: LD_VAR 0 3
13688: PUSH
13689: LD_INT 102
13691: EQUAL
13692: IFFALSE 13702
// sDiff := true ;
13694: LD_ADDR_EXP 51
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// if p3 = 103 then
13702: LD_VAR 0 3
13706: PUSH
13707: LD_INT 103
13709: EQUAL
13710: IFFALSE 13720
// sFog := true ;
13712: LD_ADDR_EXP 54
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if p3 = 104 then
13720: LD_VAR 0 3
13724: PUSH
13725: LD_INT 104
13727: EQUAL
13728: IFFALSE 13738
// sReset := true ;
13730: LD_ADDR_EXP 55
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// if p3 = 105 then
13738: LD_VAR 0 3
13742: PUSH
13743: LD_INT 105
13745: EQUAL
13746: IFFALSE 13756
// sSun := true ;
13748: LD_ADDR_EXP 56
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// if p3 = 106 then
13756: LD_VAR 0 3
13760: PUSH
13761: LD_INT 106
13763: EQUAL
13764: IFFALSE 13774
// sTiger := true ;
13766: LD_ADDR_EXP 52
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// if p3 = 107 then
13774: LD_VAR 0 3
13778: PUSH
13779: LD_INT 107
13781: EQUAL
13782: IFFALSE 13792
// sBomb := true ;
13784: LD_ADDR_EXP 53
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// if p3 = 108 then
13792: LD_VAR 0 3
13796: PUSH
13797: LD_INT 108
13799: EQUAL
13800: IFFALSE 13810
// sWound := true ;
13802: LD_ADDR_EXP 61
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// if p3 = 109 then
13810: LD_VAR 0 3
13814: PUSH
13815: LD_INT 109
13817: EQUAL
13818: IFFALSE 13828
// sBetray := true ;
13820: LD_ADDR_EXP 65
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if p3 = 110 then
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 110
13835: EQUAL
13836: IFFALSE 13846
// sContamin := true ;
13838: LD_ADDR_EXP 66
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// if p3 = 111 then
13846: LD_VAR 0 3
13850: PUSH
13851: LD_INT 111
13853: EQUAL
13854: IFFALSE 13864
// sOil := true ;
13856: LD_ADDR_EXP 68
13860: PUSH
13861: LD_INT 1
13863: ST_TO_ADDR
// if p3 = 112 then
13864: LD_VAR 0 3
13868: PUSH
13869: LD_INT 112
13871: EQUAL
13872: IFFALSE 13882
// sStu := true ;
13874: LD_ADDR_EXP 72
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// if p3 = 113 then
13882: LD_VAR 0 3
13886: PUSH
13887: LD_INT 113
13889: EQUAL
13890: IFFALSE 13900
// sBazooka := true ;
13892: LD_ADDR_EXP 75
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// if p3 = 114 then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_INT 114
13907: EQUAL
13908: IFFALSE 13918
// sMortar := true ;
13910: LD_ADDR_EXP 76
13914: PUSH
13915: LD_INT 1
13917: ST_TO_ADDR
// if p3 = 115 then
13918: LD_VAR 0 3
13922: PUSH
13923: LD_INT 115
13925: EQUAL
13926: IFFALSE 13936
// sRanger := true ;
13928: LD_ADDR_EXP 86
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// if p3 = 116 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 116
13943: EQUAL
13944: IFFALSE 13954
// sComputer := true ;
13946: LD_ADDR_EXP 87
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
// if p3 = 117 then
13954: LD_VAR 0 3
13958: PUSH
13959: LD_INT 117
13961: EQUAL
13962: IFFALSE 13972
// s30 := true ;
13964: LD_ADDR_EXP 88
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// if p3 = 118 then
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 118
13979: EQUAL
13980: IFFALSE 13990
// s60 := true ;
13982: LD_ADDR_EXP 89
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// end ; if p2 = hack_mode then
13990: LD_VAR 0 2
13994: PUSH
13995: LD_INT 101
13997: EQUAL
13998: IFFALSE 14126
// begin case p3 of 1 :
14000: LD_VAR 0 3
14004: PUSH
14005: LD_INT 1
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14020
14013: POP
// hHackUnlimitedResources ; 2 :
14014: CALL 26273 0 0
14018: GO 14126
14020: LD_INT 2
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14035
14028: POP
// hHackSetLevel10 ; 3 :
14029: CALL 26406 0 0
14033: GO 14126
14035: LD_INT 3
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14050
14043: POP
// hHackSetLevel10YourUnits ; 4 :
14044: CALL 26491 0 0
14048: GO 14126
14050: LD_INT 4
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14065
14058: POP
// hHackInvincible ; 5 :
14059: CALL 26939 0 0
14063: GO 14126
14065: LD_INT 5
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14080
14073: POP
// hHackInvisible ; 6 :
14074: CALL 27050 0 0
14078: GO 14126
14080: LD_INT 6
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14095
14088: POP
// hHackChangeYourSide ; 7 :
14089: CALL 27107 0 0
14093: GO 14126
14095: LD_INT 7
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14110
14103: POP
// hHackChangeUnitSide ; 8 :
14104: CALL 27149 0 0
14108: GO 14126
14110: LD_INT 8
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14125
14118: POP
// hHackFog ; end ;
14119: CALL 27250 0 0
14123: GO 14126
14125: POP
// end ; if p2 = game_save_mode then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_INT 102
14133: EQUAL
14134: IFFALSE 14189
// begin if p3 = 1 then
14136: LD_VAR 0 3
14140: PUSH
14141: LD_INT 1
14143: EQUAL
14144: IFFALSE 14156
// globalGameSaveCounter := p4 ;
14146: LD_ADDR_EXP 32
14150: PUSH
14151: LD_VAR 0 4
14155: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14156: LD_VAR 0 3
14160: PUSH
14161: LD_INT 2
14163: EQUAL
14164: PUSH
14165: LD_EXP 32
14169: AND
14170: IFFALSE 14189
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14172: LD_STRING setGameSaveCounter(
14174: PUSH
14175: LD_EXP 32
14179: STR
14180: PUSH
14181: LD_STRING )
14183: STR
14184: PPUSH
14185: CALL_OW 559
// end ; end ;
14189: LD_VAR 0 7
14193: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14194: LD_INT 0
14196: PPUSH
// streamModeActive := false ;
14197: LD_ADDR_EXP 33
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// normalCounter := 36 ;
14205: LD_ADDR_EXP 34
14209: PUSH
14210: LD_INT 36
14212: ST_TO_ADDR
// hardcoreCounter := 18 ;
14213: LD_ADDR_EXP 35
14217: PUSH
14218: LD_INT 18
14220: ST_TO_ADDR
// sRocket := false ;
14221: LD_ADDR_EXP 38
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sSpeed := false ;
14229: LD_ADDR_EXP 37
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sEngine := false ;
14237: LD_ADDR_EXP 39
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sSpec := false ;
14245: LD_ADDR_EXP 36
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sLevel := false ;
14253: LD_ADDR_EXP 40
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sArmoury := false ;
14261: LD_ADDR_EXP 41
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sRadar := false ;
14269: LD_ADDR_EXP 42
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sBunker := false ;
14277: LD_ADDR_EXP 43
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sHack := false ;
14285: LD_ADDR_EXP 44
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sFire := false ;
14293: LD_ADDR_EXP 45
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sRefresh := false ;
14301: LD_ADDR_EXP 46
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sExp := false ;
14309: LD_ADDR_EXP 47
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sDepot := false ;
14317: LD_ADDR_EXP 48
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sFlag := false ;
14325: LD_ADDR_EXP 49
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sKamikadze := false ;
14333: LD_ADDR_EXP 57
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sTroll := false ;
14341: LD_ADDR_EXP 58
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sSlow := false ;
14349: LD_ADDR_EXP 59
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sLack := false ;
14357: LD_ADDR_EXP 60
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sTank := false ;
14365: LD_ADDR_EXP 62
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sRemote := false ;
14373: LD_ADDR_EXP 63
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sPowell := false ;
14381: LD_ADDR_EXP 64
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sTeleport := false ;
14389: LD_ADDR_EXP 67
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sOilTower := false ;
14397: LD_ADDR_EXP 69
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sShovel := false ;
14405: LD_ADDR_EXP 70
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sSheik := false ;
14413: LD_ADDR_EXP 71
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sEarthquake := false ;
14421: LD_ADDR_EXP 73
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sAI := false ;
14429: LD_ADDR_EXP 74
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sCargo := false ;
14437: LD_ADDR_EXP 77
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sDLaser := false ;
14445: LD_ADDR_EXP 78
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sExchange := false ;
14453: LD_ADDR_EXP 79
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sFac := false ;
14461: LD_ADDR_EXP 80
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sPower := false ;
14469: LD_ADDR_EXP 81
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sRandom := false ;
14477: LD_ADDR_EXP 82
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sShield := false ;
14485: LD_ADDR_EXP 83
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sTime := false ;
14493: LD_ADDR_EXP 84
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sTools := false ;
14501: LD_ADDR_EXP 85
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sSold := false ;
14509: LD_ADDR_EXP 50
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sDiff := false ;
14517: LD_ADDR_EXP 51
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sFog := false ;
14525: LD_ADDR_EXP 54
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sReset := false ;
14533: LD_ADDR_EXP 55
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sSun := false ;
14541: LD_ADDR_EXP 56
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sTiger := false ;
14549: LD_ADDR_EXP 52
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sBomb := false ;
14557: LD_ADDR_EXP 53
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sWound := false ;
14565: LD_ADDR_EXP 61
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sBetray := false ;
14573: LD_ADDR_EXP 65
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// sContamin := false ;
14581: LD_ADDR_EXP 66
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// sOil := false ;
14589: LD_ADDR_EXP 68
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// sStu := false ;
14597: LD_ADDR_EXP 72
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// sBazooka := false ;
14605: LD_ADDR_EXP 75
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// sMortar := false ;
14613: LD_ADDR_EXP 76
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// sRanger := false ;
14621: LD_ADDR_EXP 86
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// sComputer := false ;
14629: LD_ADDR_EXP 87
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// s30 := false ;
14637: LD_ADDR_EXP 88
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// s60 := false ;
14645: LD_ADDR_EXP 89
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// end ;
14653: LD_VAR 0 1
14657: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
// result := [ ] ;
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// if campaign_id = 1 then
14674: LD_OWVAR 69
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: IFFALSE 17848
// begin case mission_number of 1 :
14684: LD_OWVAR 70
14688: PUSH
14689: LD_INT 1
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14773
14697: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 15
14717: PUSH
14718: LD_INT 16
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_INT 23
14726: PUSH
14727: LD_INT 26
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 102
14746: PUSH
14747: LD_INT 106
14749: PUSH
14750: LD_INT 116
14752: PUSH
14753: LD_INT 117
14755: PUSH
14756: LD_INT 118
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: ST_TO_ADDR
14771: GO 17846
14773: LD_INT 2
14775: DOUBLE
14776: EQUAL
14777: IFTRUE 14781
14779: GO 14865
14781: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 11
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 15
14801: PUSH
14802: LD_INT 16
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 23
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 101
14827: PUSH
14828: LD_INT 102
14830: PUSH
14831: LD_INT 105
14833: PUSH
14834: LD_INT 106
14836: PUSH
14837: LD_INT 108
14839: PUSH
14840: LD_INT 116
14842: PUSH
14843: LD_INT 117
14845: PUSH
14846: LD_INT 118
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
14863: GO 17846
14865: LD_INT 3
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14961
14873: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 2
14881: PUSH
14882: LD_INT 4
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: LD_INT 11
14890: PUSH
14891: LD_INT 12
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_INT 26
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 101
14923: PUSH
14924: LD_INT 102
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 116
14938: PUSH
14939: LD_INT 117
14941: PUSH
14942: LD_INT 118
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: ST_TO_ADDR
14959: GO 17846
14961: LD_INT 4
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15065
14969: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 4
14980: PUSH
14981: LD_INT 5
14983: PUSH
14984: LD_INT 8
14986: PUSH
14987: LD_INT 11
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: LD_INT 15
14995: PUSH
14996: LD_INT 16
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 26
15007: PUSH
15008: LD_INT 36
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 105
15033: PUSH
15034: LD_INT 106
15036: PUSH
15037: LD_INT 108
15039: PUSH
15040: LD_INT 116
15042: PUSH
15043: LD_INT 117
15045: PUSH
15046: LD_INT 118
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: ST_TO_ADDR
15063: GO 17846
15065: LD_INT 5
15067: DOUBLE
15068: EQUAL
15069: IFTRUE 15073
15071: GO 15185
15073: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: LD_INT 6
15090: PUSH
15091: LD_INT 8
15093: PUSH
15094: LD_INT 11
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: LD_INT 15
15102: PUSH
15103: LD_INT 16
15105: PUSH
15106: LD_INT 22
15108: PUSH
15109: LD_INT 23
15111: PUSH
15112: LD_INT 25
15114: PUSH
15115: LD_INT 26
15117: PUSH
15118: LD_INT 36
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 101
15139: PUSH
15140: LD_INT 102
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 108
15151: PUSH
15152: LD_INT 109
15154: PUSH
15155: LD_INT 112
15157: PUSH
15158: LD_INT 116
15160: PUSH
15161: LD_INT 117
15163: PUSH
15164: LD_INT 118
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: ST_TO_ADDR
15183: GO 17846
15185: LD_INT 6
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15325
15193: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: LD_INT 4
15204: PUSH
15205: LD_INT 5
15207: PUSH
15208: LD_INT 6
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 11
15216: PUSH
15217: LD_INT 12
15219: PUSH
15220: LD_INT 15
15222: PUSH
15223: LD_INT 16
15225: PUSH
15226: LD_INT 20
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 22
15234: PUSH
15235: LD_INT 23
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 26
15243: PUSH
15244: LD_INT 30
15246: PUSH
15247: LD_INT 31
15249: PUSH
15250: LD_INT 32
15252: PUSH
15253: LD_INT 36
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 101
15279: PUSH
15280: LD_INT 102
15282: PUSH
15283: LD_INT 105
15285: PUSH
15286: LD_INT 106
15288: PUSH
15289: LD_INT 108
15291: PUSH
15292: LD_INT 109
15294: PUSH
15295: LD_INT 112
15297: PUSH
15298: LD_INT 116
15300: PUSH
15301: LD_INT 117
15303: PUSH
15304: LD_INT 118
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: ST_TO_ADDR
15323: GO 17846
15325: LD_INT 7
15327: DOUBLE
15328: EQUAL
15329: IFTRUE 15333
15331: GO 15445
15333: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15334: LD_ADDR_VAR 0 2
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: LD_INT 4
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 11
15353: PUSH
15354: LD_INT 12
15356: PUSH
15357: LD_INT 15
15359: PUSH
15360: LD_INT 16
15362: PUSH
15363: LD_INT 20
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 23
15374: PUSH
15375: LD_INT 25
15377: PUSH
15378: LD_INT 26
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 101
15399: PUSH
15400: LD_INT 102
15402: PUSH
15403: LD_INT 103
15405: PUSH
15406: LD_INT 105
15408: PUSH
15409: LD_INT 106
15411: PUSH
15412: LD_INT 108
15414: PUSH
15415: LD_INT 112
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: ST_TO_ADDR
15443: GO 17846
15445: LD_INT 8
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15593
15453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15454: LD_ADDR_VAR 0 2
15458: PUSH
15459: LD_INT 2
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 11
15479: PUSH
15480: LD_INT 12
15482: PUSH
15483: LD_INT 15
15485: PUSH
15486: LD_INT 16
15488: PUSH
15489: LD_INT 20
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 22
15497: PUSH
15498: LD_INT 23
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: LD_INT 30
15509: PUSH
15510: LD_INT 31
15512: PUSH
15513: LD_INT 32
15515: PUSH
15516: LD_INT 36
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 101
15543: PUSH
15544: LD_INT 102
15546: PUSH
15547: LD_INT 103
15549: PUSH
15550: LD_INT 105
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 109
15561: PUSH
15562: LD_INT 112
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 17846
15593: LD_INT 9
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15749
15601: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: LD_INT 4
15612: PUSH
15613: LD_INT 5
15615: PUSH
15616: LD_INT 6
15618: PUSH
15619: LD_INT 7
15621: PUSH
15622: LD_INT 8
15624: PUSH
15625: LD_INT 11
15627: PUSH
15628: LD_INT 12
15630: PUSH
15631: LD_INT 15
15633: PUSH
15634: LD_INT 16
15636: PUSH
15637: LD_INT 20
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_INT 23
15648: PUSH
15649: LD_INT 25
15651: PUSH
15652: LD_INT 26
15654: PUSH
15655: LD_INT 28
15657: PUSH
15658: LD_INT 30
15660: PUSH
15661: LD_INT 31
15663: PUSH
15664: LD_INT 32
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 101
15695: PUSH
15696: LD_INT 102
15698: PUSH
15699: LD_INT 103
15701: PUSH
15702: LD_INT 105
15704: PUSH
15705: LD_INT 106
15707: PUSH
15708: LD_INT 108
15710: PUSH
15711: LD_INT 109
15713: PUSH
15714: LD_INT 112
15716: PUSH
15717: LD_INT 114
15719: PUSH
15720: LD_INT 116
15722: PUSH
15723: LD_INT 117
15725: PUSH
15726: LD_INT 118
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
15747: GO 17846
15749: LD_INT 10
15751: DOUBLE
15752: EQUAL
15753: IFTRUE 15757
15755: GO 15953
15757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15758: LD_ADDR_VAR 0 2
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: LD_INT 6
15774: PUSH
15775: LD_INT 7
15777: PUSH
15778: LD_INT 8
15780: PUSH
15781: LD_INT 9
15783: PUSH
15784: LD_INT 10
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 13
15795: PUSH
15796: LD_INT 14
15798: PUSH
15799: LD_INT 15
15801: PUSH
15802: LD_INT 16
15804: PUSH
15805: LD_INT 17
15807: PUSH
15808: LD_INT 18
15810: PUSH
15811: LD_INT 19
15813: PUSH
15814: LD_INT 20
15816: PUSH
15817: LD_INT 21
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 23
15825: PUSH
15826: LD_INT 24
15828: PUSH
15829: LD_INT 25
15831: PUSH
15832: LD_INT 26
15834: PUSH
15835: LD_INT 28
15837: PUSH
15838: LD_INT 30
15840: PUSH
15841: LD_INT 31
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 36
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 114
15919: PUSH
15920: LD_INT 116
15922: PUSH
15923: LD_INT 117
15925: PUSH
15926: LD_INT 118
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: ST_TO_ADDR
15951: GO 17846
15953: LD_INT 11
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16165
15961: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 3
15972: PUSH
15973: LD_INT 4
15975: PUSH
15976: LD_INT 5
15978: PUSH
15979: LD_INT 6
15981: PUSH
15982: LD_INT 7
15984: PUSH
15985: LD_INT 8
15987: PUSH
15988: LD_INT 9
15990: PUSH
15991: LD_INT 10
15993: PUSH
15994: LD_INT 11
15996: PUSH
15997: LD_INT 12
15999: PUSH
16000: LD_INT 13
16002: PUSH
16003: LD_INT 14
16005: PUSH
16006: LD_INT 15
16008: PUSH
16009: LD_INT 16
16011: PUSH
16012: LD_INT 17
16014: PUSH
16015: LD_INT 18
16017: PUSH
16018: LD_INT 19
16020: PUSH
16021: LD_INT 20
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_INT 23
16032: PUSH
16033: LD_INT 24
16035: PUSH
16036: LD_INT 25
16038: PUSH
16039: LD_INT 26
16041: PUSH
16042: LD_INT 28
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 31
16050: PUSH
16051: LD_INT 32
16053: PUSH
16054: LD_INT 34
16056: PUSH
16057: LD_INT 36
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 101
16095: PUSH
16096: LD_INT 102
16098: PUSH
16099: LD_INT 103
16101: PUSH
16102: LD_INT 104
16104: PUSH
16105: LD_INT 105
16107: PUSH
16108: LD_INT 106
16110: PUSH
16111: LD_INT 107
16113: PUSH
16114: LD_INT 108
16116: PUSH
16117: LD_INT 109
16119: PUSH
16120: LD_INT 110
16122: PUSH
16123: LD_INT 111
16125: PUSH
16126: LD_INT 112
16128: PUSH
16129: LD_INT 114
16131: PUSH
16132: LD_INT 116
16134: PUSH
16135: LD_INT 117
16137: PUSH
16138: LD_INT 118
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 17846
16165: LD_INT 12
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16393
16173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16174: LD_ADDR_VAR 0 2
16178: PUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: LD_INT 3
16187: PUSH
16188: LD_INT 4
16190: PUSH
16191: LD_INT 5
16193: PUSH
16194: LD_INT 6
16196: PUSH
16197: LD_INT 7
16199: PUSH
16200: LD_INT 8
16202: PUSH
16203: LD_INT 9
16205: PUSH
16206: LD_INT 10
16208: PUSH
16209: LD_INT 11
16211: PUSH
16212: LD_INT 12
16214: PUSH
16215: LD_INT 13
16217: PUSH
16218: LD_INT 14
16220: PUSH
16221: LD_INT 15
16223: PUSH
16224: LD_INT 16
16226: PUSH
16227: LD_INT 17
16229: PUSH
16230: LD_INT 18
16232: PUSH
16233: LD_INT 19
16235: PUSH
16236: LD_INT 20
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 22
16244: PUSH
16245: LD_INT 23
16247: PUSH
16248: LD_INT 24
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 26
16256: PUSH
16257: LD_INT 27
16259: PUSH
16260: LD_INT 28
16262: PUSH
16263: LD_INT 30
16265: PUSH
16266: LD_INT 31
16268: PUSH
16269: LD_INT 32
16271: PUSH
16272: LD_INT 33
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 36
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 104
16328: PUSH
16329: LD_INT 105
16331: PUSH
16332: LD_INT 106
16334: PUSH
16335: LD_INT 107
16337: PUSH
16338: LD_INT 108
16340: PUSH
16341: LD_INT 109
16343: PUSH
16344: LD_INT 110
16346: PUSH
16347: LD_INT 111
16349: PUSH
16350: LD_INT 112
16352: PUSH
16353: LD_INT 113
16355: PUSH
16356: LD_INT 114
16358: PUSH
16359: LD_INT 116
16361: PUSH
16362: LD_INT 117
16364: PUSH
16365: LD_INT 118
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
16391: GO 17846
16393: LD_INT 13
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 16609
16401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 3
16415: PUSH
16416: LD_INT 4
16418: PUSH
16419: LD_INT 5
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 9
16427: PUSH
16428: LD_INT 10
16430: PUSH
16431: LD_INT 11
16433: PUSH
16434: LD_INT 12
16436: PUSH
16437: LD_INT 14
16439: PUSH
16440: LD_INT 15
16442: PUSH
16443: LD_INT 16
16445: PUSH
16446: LD_INT 17
16448: PUSH
16449: LD_INT 18
16451: PUSH
16452: LD_INT 19
16454: PUSH
16455: LD_INT 20
16457: PUSH
16458: LD_INT 21
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_INT 23
16466: PUSH
16467: LD_INT 24
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 26
16475: PUSH
16476: LD_INT 27
16478: PUSH
16479: LD_INT 28
16481: PUSH
16482: LD_INT 30
16484: PUSH
16485: LD_INT 31
16487: PUSH
16488: LD_INT 32
16490: PUSH
16491: LD_INT 33
16493: PUSH
16494: LD_INT 34
16496: PUSH
16497: LD_INT 36
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 101
16535: PUSH
16536: LD_INT 102
16538: PUSH
16539: LD_INT 103
16541: PUSH
16542: LD_INT 104
16544: PUSH
16545: LD_INT 105
16547: PUSH
16548: LD_INT 106
16550: PUSH
16551: LD_INT 107
16553: PUSH
16554: LD_INT 108
16556: PUSH
16557: LD_INT 109
16559: PUSH
16560: LD_INT 110
16562: PUSH
16563: LD_INT 111
16565: PUSH
16566: LD_INT 112
16568: PUSH
16569: LD_INT 113
16571: PUSH
16572: LD_INT 114
16574: PUSH
16575: LD_INT 116
16577: PUSH
16578: LD_INT 117
16580: PUSH
16581: LD_INT 118
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: ST_TO_ADDR
16607: GO 17846
16609: LD_INT 14
16611: DOUBLE
16612: EQUAL
16613: IFTRUE 16617
16615: GO 16841
16617: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: LD_INT 4
16634: PUSH
16635: LD_INT 5
16637: PUSH
16638: LD_INT 6
16640: PUSH
16641: LD_INT 7
16643: PUSH
16644: LD_INT 8
16646: PUSH
16647: LD_INT 9
16649: PUSH
16650: LD_INT 10
16652: PUSH
16653: LD_INT 11
16655: PUSH
16656: LD_INT 12
16658: PUSH
16659: LD_INT 13
16661: PUSH
16662: LD_INT 14
16664: PUSH
16665: LD_INT 15
16667: PUSH
16668: LD_INT 16
16670: PUSH
16671: LD_INT 17
16673: PUSH
16674: LD_INT 18
16676: PUSH
16677: LD_INT 19
16679: PUSH
16680: LD_INT 20
16682: PUSH
16683: LD_INT 21
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_INT 23
16691: PUSH
16692: LD_INT 24
16694: PUSH
16695: LD_INT 25
16697: PUSH
16698: LD_INT 26
16700: PUSH
16701: LD_INT 27
16703: PUSH
16704: LD_INT 28
16706: PUSH
16707: LD_INT 29
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 31
16715: PUSH
16716: LD_INT 32
16718: PUSH
16719: LD_INT 33
16721: PUSH
16722: LD_INT 34
16724: PUSH
16725: LD_INT 36
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 104
16776: PUSH
16777: LD_INT 105
16779: PUSH
16780: LD_INT 106
16782: PUSH
16783: LD_INT 107
16785: PUSH
16786: LD_INT 108
16788: PUSH
16789: LD_INT 109
16791: PUSH
16792: LD_INT 110
16794: PUSH
16795: LD_INT 111
16797: PUSH
16798: LD_INT 112
16800: PUSH
16801: LD_INT 113
16803: PUSH
16804: LD_INT 114
16806: PUSH
16807: LD_INT 116
16809: PUSH
16810: LD_INT 117
16812: PUSH
16813: LD_INT 118
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
16839: GO 17846
16841: LD_INT 15
16843: DOUBLE
16844: EQUAL
16845: IFTRUE 16849
16847: GO 17073
16849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: LD_INT 6
16872: PUSH
16873: LD_INT 7
16875: PUSH
16876: LD_INT 8
16878: PUSH
16879: LD_INT 9
16881: PUSH
16882: LD_INT 10
16884: PUSH
16885: LD_INT 11
16887: PUSH
16888: LD_INT 12
16890: PUSH
16891: LD_INT 13
16893: PUSH
16894: LD_INT 14
16896: PUSH
16897: LD_INT 15
16899: PUSH
16900: LD_INT 16
16902: PUSH
16903: LD_INT 17
16905: PUSH
16906: LD_INT 18
16908: PUSH
16909: LD_INT 19
16911: PUSH
16912: LD_INT 20
16914: PUSH
16915: LD_INT 21
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 23
16923: PUSH
16924: LD_INT 24
16926: PUSH
16927: LD_INT 25
16929: PUSH
16930: LD_INT 26
16932: PUSH
16933: LD_INT 27
16935: PUSH
16936: LD_INT 28
16938: PUSH
16939: LD_INT 29
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 31
16947: PUSH
16948: LD_INT 32
16950: PUSH
16951: LD_INT 33
16953: PUSH
16954: LD_INT 34
16956: PUSH
16957: LD_INT 36
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 101
16999: PUSH
17000: LD_INT 102
17002: PUSH
17003: LD_INT 103
17005: PUSH
17006: LD_INT 104
17008: PUSH
17009: LD_INT 105
17011: PUSH
17012: LD_INT 106
17014: PUSH
17015: LD_INT 107
17017: PUSH
17018: LD_INT 108
17020: PUSH
17021: LD_INT 109
17023: PUSH
17024: LD_INT 110
17026: PUSH
17027: LD_INT 111
17029: PUSH
17030: LD_INT 112
17032: PUSH
17033: LD_INT 113
17035: PUSH
17036: LD_INT 114
17038: PUSH
17039: LD_INT 116
17041: PUSH
17042: LD_INT 117
17044: PUSH
17045: LD_INT 118
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: ST_TO_ADDR
17071: GO 17846
17073: LD_INT 16
17075: DOUBLE
17076: EQUAL
17077: IFTRUE 17081
17079: GO 17217
17081: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: LD_INT 5
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: LD_INT 11
17101: PUSH
17102: LD_INT 12
17104: PUSH
17105: LD_INT 15
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 25
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 30
17131: PUSH
17132: LD_INT 31
17134: PUSH
17135: LD_INT 32
17137: PUSH
17138: LD_INT 33
17140: PUSH
17141: LD_INT 34
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 101
17167: PUSH
17168: LD_INT 102
17170: PUSH
17171: LD_INT 103
17173: PUSH
17174: LD_INT 106
17176: PUSH
17177: LD_INT 108
17179: PUSH
17180: LD_INT 112
17182: PUSH
17183: LD_INT 113
17185: PUSH
17186: LD_INT 114
17188: PUSH
17189: LD_INT 116
17191: PUSH
17192: LD_INT 117
17194: PUSH
17195: LD_INT 118
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: ST_TO_ADDR
17215: GO 17846
17217: LD_INT 17
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17449
17225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17226: LD_ADDR_VAR 0 2
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 3
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: LD_INT 5
17245: PUSH
17246: LD_INT 6
17248: PUSH
17249: LD_INT 7
17251: PUSH
17252: LD_INT 8
17254: PUSH
17255: LD_INT 9
17257: PUSH
17258: LD_INT 10
17260: PUSH
17261: LD_INT 11
17263: PUSH
17264: LD_INT 12
17266: PUSH
17267: LD_INT 13
17269: PUSH
17270: LD_INT 14
17272: PUSH
17273: LD_INT 15
17275: PUSH
17276: LD_INT 16
17278: PUSH
17279: LD_INT 17
17281: PUSH
17282: LD_INT 18
17284: PUSH
17285: LD_INT 19
17287: PUSH
17288: LD_INT 20
17290: PUSH
17291: LD_INT 21
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_INT 23
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 25
17305: PUSH
17306: LD_INT 26
17308: PUSH
17309: LD_INT 27
17311: PUSH
17312: LD_INT 28
17314: PUSH
17315: LD_INT 29
17317: PUSH
17318: LD_INT 30
17320: PUSH
17321: LD_INT 31
17323: PUSH
17324: LD_INT 32
17326: PUSH
17327: LD_INT 33
17329: PUSH
17330: LD_INT 34
17332: PUSH
17333: LD_INT 36
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 101
17375: PUSH
17376: LD_INT 102
17378: PUSH
17379: LD_INT 103
17381: PUSH
17382: LD_INT 104
17384: PUSH
17385: LD_INT 105
17387: PUSH
17388: LD_INT 106
17390: PUSH
17391: LD_INT 107
17393: PUSH
17394: LD_INT 108
17396: PUSH
17397: LD_INT 109
17399: PUSH
17400: LD_INT 110
17402: PUSH
17403: LD_INT 111
17405: PUSH
17406: LD_INT 112
17408: PUSH
17409: LD_INT 113
17411: PUSH
17412: LD_INT 114
17414: PUSH
17415: LD_INT 116
17417: PUSH
17418: LD_INT 117
17420: PUSH
17421: LD_INT 118
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: ST_TO_ADDR
17447: GO 17846
17449: LD_INT 18
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17605
17457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17458: LD_ADDR_VAR 0 2
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 4
17468: PUSH
17469: LD_INT 5
17471: PUSH
17472: LD_INT 7
17474: PUSH
17475: LD_INT 11
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 15
17483: PUSH
17484: LD_INT 16
17486: PUSH
17487: LD_INT 20
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 22
17495: PUSH
17496: LD_INT 23
17498: PUSH
17499: LD_INT 25
17501: PUSH
17502: LD_INT 26
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 32
17513: PUSH
17514: LD_INT 33
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 35
17522: PUSH
17523: LD_INT 36
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 101
17551: PUSH
17552: LD_INT 102
17554: PUSH
17555: LD_INT 103
17557: PUSH
17558: LD_INT 106
17560: PUSH
17561: LD_INT 108
17563: PUSH
17564: LD_INT 112
17566: PUSH
17567: LD_INT 113
17569: PUSH
17570: LD_INT 114
17572: PUSH
17573: LD_INT 115
17575: PUSH
17576: LD_INT 116
17578: PUSH
17579: LD_INT 117
17581: PUSH
17582: LD_INT 118
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: ST_TO_ADDR
17603: GO 17846
17605: LD_INT 19
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17845
17613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17614: LD_ADDR_VAR 0 2
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: LD_INT 4
17630: PUSH
17631: LD_INT 5
17633: PUSH
17634: LD_INT 6
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: LD_INT 8
17642: PUSH
17643: LD_INT 9
17645: PUSH
17646: LD_INT 10
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 13
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: LD_INT 15
17663: PUSH
17664: LD_INT 16
17666: PUSH
17667: LD_INT 17
17669: PUSH
17670: LD_INT 18
17672: PUSH
17673: LD_INT 19
17675: PUSH
17676: LD_INT 20
17678: PUSH
17679: LD_INT 21
17681: PUSH
17682: LD_INT 22
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: LD_INT 24
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 26
17696: PUSH
17697: LD_INT 27
17699: PUSH
17700: LD_INT 28
17702: PUSH
17703: LD_INT 29
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 31
17711: PUSH
17712: LD_INT 32
17714: PUSH
17715: LD_INT 33
17717: PUSH
17718: LD_INT 34
17720: PUSH
17721: LD_INT 35
17723: PUSH
17724: LD_INT 36
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 101
17767: PUSH
17768: LD_INT 102
17770: PUSH
17771: LD_INT 103
17773: PUSH
17774: LD_INT 104
17776: PUSH
17777: LD_INT 105
17779: PUSH
17780: LD_INT 106
17782: PUSH
17783: LD_INT 107
17785: PUSH
17786: LD_INT 108
17788: PUSH
17789: LD_INT 109
17791: PUSH
17792: LD_INT 110
17794: PUSH
17795: LD_INT 111
17797: PUSH
17798: LD_INT 112
17800: PUSH
17801: LD_INT 113
17803: PUSH
17804: LD_INT 114
17806: PUSH
17807: LD_INT 115
17809: PUSH
17810: LD_INT 116
17812: PUSH
17813: LD_INT 117
17815: PUSH
17816: LD_INT 118
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: ST_TO_ADDR
17843: GO 17846
17845: POP
// end else
17846: GO 18077
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17848: LD_ADDR_VAR 0 2
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 5
17867: PUSH
17868: LD_INT 6
17870: PUSH
17871: LD_INT 7
17873: PUSH
17874: LD_INT 8
17876: PUSH
17877: LD_INT 9
17879: PUSH
17880: LD_INT 10
17882: PUSH
17883: LD_INT 11
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: LD_INT 13
17891: PUSH
17892: LD_INT 14
17894: PUSH
17895: LD_INT 15
17897: PUSH
17898: LD_INT 16
17900: PUSH
17901: LD_INT 17
17903: PUSH
17904: LD_INT 18
17906: PUSH
17907: LD_INT 19
17909: PUSH
17910: LD_INT 20
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 23
17921: PUSH
17922: LD_INT 24
17924: PUSH
17925: LD_INT 25
17927: PUSH
17928: LD_INT 26
17930: PUSH
17931: LD_INT 27
17933: PUSH
17934: LD_INT 28
17936: PUSH
17937: LD_INT 29
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 31
17945: PUSH
17946: LD_INT 32
17948: PUSH
17949: LD_INT 33
17951: PUSH
17952: LD_INT 34
17954: PUSH
17955: LD_INT 35
17957: PUSH
17958: LD_INT 36
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 101
18001: PUSH
18002: LD_INT 102
18004: PUSH
18005: LD_INT 103
18007: PUSH
18008: LD_INT 104
18010: PUSH
18011: LD_INT 105
18013: PUSH
18014: LD_INT 106
18016: PUSH
18017: LD_INT 107
18019: PUSH
18020: LD_INT 108
18022: PUSH
18023: LD_INT 109
18025: PUSH
18026: LD_INT 110
18028: PUSH
18029: LD_INT 111
18031: PUSH
18032: LD_INT 112
18034: PUSH
18035: LD_INT 113
18037: PUSH
18038: LD_INT 114
18040: PUSH
18041: LD_INT 115
18043: PUSH
18044: LD_INT 116
18046: PUSH
18047: LD_INT 117
18049: PUSH
18050: LD_INT 118
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: ST_TO_ADDR
// if result then
18077: LD_VAR 0 2
18081: IFFALSE 18867
// begin normal :=  ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_STRING 
18090: ST_TO_ADDR
// hardcore :=  ;
18091: LD_ADDR_VAR 0 6
18095: PUSH
18096: LD_STRING 
18098: ST_TO_ADDR
// active :=  ;
18099: LD_ADDR_VAR 0 7
18103: PUSH
18104: LD_STRING 
18106: ST_TO_ADDR
// for i = 1 to normalCounter do
18107: LD_ADDR_VAR 0 8
18111: PUSH
18112: DOUBLE
18113: LD_INT 1
18115: DEC
18116: ST_TO_ADDR
18117: LD_EXP 34
18121: PUSH
18122: FOR_TO
18123: IFFALSE 18224
// begin tmp := 0 ;
18125: LD_ADDR_VAR 0 3
18129: PUSH
18130: LD_STRING 0
18132: ST_TO_ADDR
// if result [ 1 ] then
18133: LD_VAR 0 2
18137: PUSH
18138: LD_INT 1
18140: ARRAY
18141: IFFALSE 18206
// if result [ 1 ] [ 1 ] = i then
18143: LD_VAR 0 2
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PUSH
18156: LD_VAR 0 8
18160: EQUAL
18161: IFFALSE 18206
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18163: LD_ADDR_VAR 0 2
18167: PUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_VAR 0 2
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 3
18192: PPUSH
18193: CALL_OW 1
18197: ST_TO_ADDR
// tmp := 1 ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_STRING 1
18205: ST_TO_ADDR
// end ; normal := normal & tmp ;
18206: LD_ADDR_VAR 0 5
18210: PUSH
18211: LD_VAR 0 5
18215: PUSH
18216: LD_VAR 0 3
18220: STR
18221: ST_TO_ADDR
// end ;
18222: GO 18122
18224: POP
18225: POP
// for i = 1 to hardcoreCounter do
18226: LD_ADDR_VAR 0 8
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_EXP 35
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18347
// begin tmp := 0 ;
18244: LD_ADDR_VAR 0 3
18248: PUSH
18249: LD_STRING 0
18251: ST_TO_ADDR
// if result [ 2 ] then
18252: LD_VAR 0 2
18256: PUSH
18257: LD_INT 2
18259: ARRAY
18260: IFFALSE 18329
// if result [ 2 ] [ 1 ] = 100 + i then
18262: LD_VAR 0 2
18266: PUSH
18267: LD_INT 2
18269: ARRAY
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PUSH
18275: LD_INT 100
18277: PUSH
18278: LD_VAR 0 8
18282: PLUS
18283: EQUAL
18284: IFFALSE 18329
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18286: LD_ADDR_VAR 0 2
18290: PUSH
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_INT 2
18298: PPUSH
18299: LD_VAR 0 2
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 3
18315: PPUSH
18316: CALL_OW 1
18320: ST_TO_ADDR
// tmp := 1 ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_STRING 1
18328: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_VAR 0 6
18338: PUSH
18339: LD_VAR 0 3
18343: STR
18344: ST_TO_ADDR
// end ;
18345: GO 18241
18347: POP
18348: POP
// if isGameLoad then
18349: LD_VAR 0 1
18353: IFFALSE 18828
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_EXP 38
18364: PUSH
18365: LD_EXP 37
18369: PUSH
18370: LD_EXP 39
18374: PUSH
18375: LD_EXP 36
18379: PUSH
18380: LD_EXP 40
18384: PUSH
18385: LD_EXP 41
18389: PUSH
18390: LD_EXP 42
18394: PUSH
18395: LD_EXP 43
18399: PUSH
18400: LD_EXP 44
18404: PUSH
18405: LD_EXP 45
18409: PUSH
18410: LD_EXP 46
18414: PUSH
18415: LD_EXP 47
18419: PUSH
18420: LD_EXP 48
18424: PUSH
18425: LD_EXP 49
18429: PUSH
18430: LD_EXP 57
18434: PUSH
18435: LD_EXP 58
18439: PUSH
18440: LD_EXP 59
18444: PUSH
18445: LD_EXP 60
18449: PUSH
18450: LD_EXP 62
18454: PUSH
18455: LD_EXP 63
18459: PUSH
18460: LD_EXP 64
18464: PUSH
18465: LD_EXP 67
18469: PUSH
18470: LD_EXP 69
18474: PUSH
18475: LD_EXP 70
18479: PUSH
18480: LD_EXP 71
18484: PUSH
18485: LD_EXP 73
18489: PUSH
18490: LD_EXP 74
18494: PUSH
18495: LD_EXP 77
18499: PUSH
18500: LD_EXP 78
18504: PUSH
18505: LD_EXP 79
18509: PUSH
18510: LD_EXP 80
18514: PUSH
18515: LD_EXP 81
18519: PUSH
18520: LD_EXP 82
18524: PUSH
18525: LD_EXP 83
18529: PUSH
18530: LD_EXP 84
18534: PUSH
18535: LD_EXP 85
18539: PUSH
18540: LD_EXP 50
18544: PUSH
18545: LD_EXP 51
18549: PUSH
18550: LD_EXP 54
18554: PUSH
18555: LD_EXP 55
18559: PUSH
18560: LD_EXP 56
18564: PUSH
18565: LD_EXP 52
18569: PUSH
18570: LD_EXP 53
18574: PUSH
18575: LD_EXP 61
18579: PUSH
18580: LD_EXP 65
18584: PUSH
18585: LD_EXP 66
18589: PUSH
18590: LD_EXP 68
18594: PUSH
18595: LD_EXP 72
18599: PUSH
18600: LD_EXP 75
18604: PUSH
18605: LD_EXP 76
18609: PUSH
18610: LD_EXP 86
18614: PUSH
18615: LD_EXP 87
18619: PUSH
18620: LD_EXP 88
18624: PUSH
18625: LD_EXP 89
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: ST_TO_ADDR
// tmp :=  ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_STRING 
18693: ST_TO_ADDR
// for i = 1 to normalCounter do
18694: LD_ADDR_VAR 0 8
18698: PUSH
18699: DOUBLE
18700: LD_INT 1
18702: DEC
18703: ST_TO_ADDR
18704: LD_EXP 34
18708: PUSH
18709: FOR_TO
18710: IFFALSE 18746
// begin if flags [ i ] then
18712: LD_VAR 0 4
18716: PUSH
18717: LD_VAR 0 8
18721: ARRAY
18722: IFFALSE 18744
// tmp := tmp & i & ; ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 8
18738: STR
18739: PUSH
18740: LD_STRING ;
18742: STR
18743: ST_TO_ADDR
// end ;
18744: GO 18709
18746: POP
18747: POP
// for i = 1 to hardcoreCounter do
18748: LD_ADDR_VAR 0 8
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 35
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// begin if flags [ normalCounter + i ] then
18766: LD_VAR 0 4
18770: PUSH
18771: LD_EXP 34
18775: PUSH
18776: LD_VAR 0 8
18780: PLUS
18781: ARRAY
18782: IFFALSE 18808
// tmp := tmp & ( 100 + i ) & ; ;
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 100
18796: PUSH
18797: LD_VAR 0 8
18801: PLUS
18802: STR
18803: PUSH
18804: LD_STRING ;
18806: STR
18807: ST_TO_ADDR
// end ;
18808: GO 18763
18810: POP
18811: POP
// if tmp then
18812: LD_VAR 0 3
18816: IFFALSE 18828
// active := tmp ;
18818: LD_ADDR_VAR 0 7
18822: PUSH
18823: LD_VAR 0 3
18827: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18828: LD_STRING getStreamItemsFromMission("
18830: PUSH
18831: LD_VAR 0 5
18835: STR
18836: PUSH
18837: LD_STRING ","
18839: STR
18840: PUSH
18841: LD_VAR 0 6
18845: STR
18846: PUSH
18847: LD_STRING ","
18849: STR
18850: PUSH
18851: LD_VAR 0 7
18855: STR
18856: PUSH
18857: LD_STRING ")
18859: STR
18860: PPUSH
18861: CALL_OW 559
// end else
18865: GO 18874
// ToLua ( getStreamItemsFromMission("","","") ) ;
18867: LD_STRING getStreamItemsFromMission("","","")
18869: PPUSH
18870: CALL_OW 559
// end ;
18874: LD_VAR 0 2
18878: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18879: LD_EXP 33
18883: PUSH
18884: LD_EXP 38
18888: AND
18889: IFFALSE 19013
18891: GO 18893
18893: DISABLE
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
// begin enable ;
18898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_OWVAR 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 7
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 34
18931: PUSH
18932: LD_INT 45
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 34
18941: PUSH
18942: LD_INT 28
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 34
18951: PUSH
18952: LD_INT 47
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19013
// for i in tmp do
18984: LD_ADDR_VAR 0 1
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19011
// begin SetLives ( i , 0 ) ;
18997: LD_VAR 0 1
19001: PPUSH
19002: LD_INT 0
19004: PPUSH
19005: CALL_OW 234
// end ;
19009: GO 18994
19011: POP
19012: POP
// end ;
19013: PPOPN 2
19015: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19016: LD_EXP 33
19020: PUSH
19021: LD_EXP 39
19025: AND
19026: IFFALSE 19110
19028: GO 19030
19030: DISABLE
19031: LD_INT 0
19033: PPUSH
19034: PPUSH
// begin enable ;
19035: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_OWVAR 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 32
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: ST_TO_ADDR
// if not tmp then
19072: LD_VAR 0 2
19076: NOT
19077: IFFALSE 19081
// exit ;
19079: GO 19110
// for i in tmp do
19081: LD_ADDR_VAR 0 1
19085: PUSH
19086: LD_VAR 0 2
19090: PUSH
19091: FOR_IN
19092: IFFALSE 19108
// begin SetLives ( i , 0 ) ;
19094: LD_VAR 0 1
19098: PPUSH
19099: LD_INT 0
19101: PPUSH
19102: CALL_OW 234
// end ;
19106: GO 19091
19108: POP
19109: POP
// end ;
19110: PPOPN 2
19112: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19113: LD_EXP 33
19117: PUSH
19118: LD_EXP 36
19122: AND
19123: IFFALSE 19216
19125: GO 19127
19127: DISABLE
19128: LD_INT 0
19130: PPUSH
// begin enable ;
19131: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19132: LD_ADDR_VAR 0 1
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_OWVAR 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 25
19154: PUSH
19155: LD_INT 5
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 25
19164: PUSH
19165: LD_INT 9
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 8
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: PUSH
19197: FOR_IN
19198: IFFALSE 19214
// begin SetClass ( i , 1 ) ;
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 336
// end ;
19212: GO 19197
19214: POP
19215: POP
// end ;
19216: PPOPN 1
19218: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19219: LD_EXP 33
19223: PUSH
19224: LD_EXP 37
19228: AND
19229: PUSH
19230: LD_OWVAR 65
19234: PUSH
19235: LD_INT 7
19237: LESS
19238: AND
19239: IFFALSE 19253
19241: GO 19243
19243: DISABLE
// begin enable ;
19244: ENABLE
// game_speed := 7 ;
19245: LD_ADDR_OWVAR 65
19249: PUSH
19250: LD_INT 7
19252: ST_TO_ADDR
// end ;
19253: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19254: LD_EXP 33
19258: PUSH
19259: LD_EXP 40
19263: AND
19264: IFFALSE 19466
19266: GO 19268
19268: DISABLE
19269: LD_INT 0
19271: PPUSH
19272: PPUSH
19273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_INT 81
19281: PUSH
19282: LD_OWVAR 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PPUSH
19305: CALL_OW 69
19309: ST_TO_ADDR
// if not tmp then
19310: LD_VAR 0 3
19314: NOT
19315: IFFALSE 19319
// exit ;
19317: GO 19466
// if tmp > 5 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 5
19326: GREATER
19327: IFFALSE 19339
// k := 5 else
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 5
19336: ST_TO_ADDR
19337: GO 19349
// k := tmp ;
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_VAR 0 3
19348: ST_TO_ADDR
// for i := 1 to k do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: DOUBLE
19355: LD_INT 1
19357: DEC
19358: ST_TO_ADDR
19359: LD_VAR 0 2
19363: PUSH
19364: FOR_TO
19365: IFFALSE 19464
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19367: LD_VAR 0 3
19371: PUSH
19372: LD_VAR 0 1
19376: ARRAY
19377: PPUSH
19378: LD_VAR 0 1
19382: PUSH
19383: LD_INT 4
19385: MOD
19386: PUSH
19387: LD_INT 1
19389: PLUS
19390: PPUSH
19391: CALL_OW 259
19395: PUSH
19396: LD_INT 10
19398: LESS
19399: IFFALSE 19462
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19401: LD_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: ARRAY
19411: PPUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 4
19419: MOD
19420: PUSH
19421: LD_INT 1
19423: PLUS
19424: PPUSH
19425: LD_VAR 0 3
19429: PUSH
19430: LD_VAR 0 1
19434: ARRAY
19435: PPUSH
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 4
19443: MOD
19444: PUSH
19445: LD_INT 1
19447: PLUS
19448: PPUSH
19449: CALL_OW 259
19453: PUSH
19454: LD_INT 1
19456: PLUS
19457: PPUSH
19458: CALL_OW 237
19462: GO 19364
19464: POP
19465: POP
// end ;
19466: PPOPN 3
19468: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19469: LD_EXP 33
19473: PUSH
19474: LD_EXP 41
19478: AND
19479: IFFALSE 19499
19481: GO 19483
19483: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19484: LD_INT 4
19486: PPUSH
19487: LD_OWVAR 2
19491: PPUSH
19492: LD_INT 0
19494: PPUSH
19495: CALL_OW 324
19499: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19500: LD_EXP 33
19504: PUSH
19505: LD_EXP 70
19509: AND
19510: IFFALSE 19530
19512: GO 19514
19514: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19515: LD_INT 19
19517: PPUSH
19518: LD_OWVAR 2
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: CALL_OW 324
19530: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19531: LD_EXP 33
19535: PUSH
19536: LD_EXP 42
19540: AND
19541: IFFALSE 19643
19543: GO 19545
19545: DISABLE
19546: LD_INT 0
19548: PPUSH
19549: PPUSH
// begin enable ;
19550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 11
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 69
19604: ST_TO_ADDR
// if not tmp then
19605: LD_VAR 0 2
19609: NOT
19610: IFFALSE 19614
// exit ;
19612: GO 19643
// for i in tmp do
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: LD_VAR 0 2
19623: PUSH
19624: FOR_IN
19625: IFFALSE 19641
// begin SetLives ( i , 0 ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: LD_INT 0
19634: PPUSH
19635: CALL_OW 234
// end ;
19639: GO 19624
19641: POP
19642: POP
// end ;
19643: PPOPN 2
19645: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19646: LD_EXP 33
19650: PUSH
19651: LD_EXP 43
19655: AND
19656: IFFALSE 19676
19658: GO 19660
19660: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19661: LD_INT 32
19663: PPUSH
19664: LD_OWVAR 2
19668: PPUSH
19669: LD_INT 0
19671: PPUSH
19672: CALL_OW 324
19676: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19677: LD_EXP 33
19681: PUSH
19682: LD_EXP 44
19686: AND
19687: IFFALSE 19868
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
19696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_INT 22
19704: PUSH
19705: LD_OWVAR 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 33
19716: PUSH
19717: LD_INT 3
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: ST_TO_ADDR
// if not tmp then
19733: LD_VAR 0 2
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19868
// side := 0 ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// for i := 1 to 8 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 8
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19812
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19766: LD_OWVAR 2
19770: PUSH
19771: LD_VAR 0 1
19775: NONEQUAL
19776: PUSH
19777: LD_OWVAR 2
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 81
19791: PUSH
19792: LD_INT 2
19794: EQUAL
19795: AND
19796: IFFALSE 19810
// begin side := i ;
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_VAR 0 1
19807: ST_TO_ADDR
// break ;
19808: GO 19812
// end ;
19810: GO 19763
19812: POP
19813: POP
// if not side then
19814: LD_VAR 0 3
19818: NOT
19819: IFFALSE 19823
// exit ;
19821: GO 19868
// for i := 1 to tmp do
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: DOUBLE
19829: LD_INT 1
19831: DEC
19832: ST_TO_ADDR
19833: LD_VAR 0 2
19837: PUSH
19838: FOR_TO
19839: IFFALSE 19866
// if Prob ( 60 ) then
19841: LD_INT 60
19843: PPUSH
19844: CALL_OW 13
19848: IFFALSE 19864
// SetSide ( i , side ) ;
19850: LD_VAR 0 1
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL_OW 235
19864: GO 19838
19866: POP
19867: POP
// end ;
19868: PPOPN 3
19870: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19871: LD_EXP 33
19875: PUSH
19876: LD_EXP 46
19880: AND
19881: IFFALSE 20000
19883: GO 19885
19885: DISABLE
19886: LD_INT 0
19888: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19889: LD_ADDR_VAR 0 1
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_OWVAR 2
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 21
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: LD_INT 23
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: FOR_IN
19944: IFFALSE 19998
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19946: LD_VAR 0 1
19950: PPUSH
19951: CALL_OW 257
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 3
19964: PUSH
19965: LD_INT 4
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: IN
19974: IFFALSE 19996
// SetClass ( un , rand ( 1 , 4 ) ) ;
19976: LD_VAR 0 1
19980: PPUSH
19981: LD_INT 1
19983: PPUSH
19984: LD_INT 4
19986: PPUSH
19987: CALL_OW 12
19991: PPUSH
19992: CALL_OW 336
19996: GO 19943
19998: POP
19999: POP
// end ;
20000: PPOPN 1
20002: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20003: LD_EXP 33
20007: PUSH
20008: LD_EXP 45
20012: AND
20013: IFFALSE 20092
20015: GO 20017
20017: DISABLE
20018: LD_INT 0
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 21
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PPUSH
20052: CALL_OW 69
20056: ST_TO_ADDR
// if not tmp then
20057: LD_VAR 0 1
20061: NOT
20062: IFFALSE 20066
// exit ;
20064: GO 20092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20066: LD_VAR 0 1
20070: PUSH
20071: LD_INT 1
20073: PPUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 12
20083: ARRAY
20084: PPUSH
20085: LD_INT 100
20087: PPUSH
20088: CALL_OW 234
// end ;
20092: PPOPN 1
20094: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20095: LD_EXP 33
20099: PUSH
20100: LD_EXP 47
20104: AND
20105: IFFALSE 20203
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20113: LD_ADDR_VAR 0 1
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 21
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 1
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20203
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 12
20175: ARRAY
20176: PPUSH
20177: LD_INT 1
20179: PPUSH
20180: LD_INT 4
20182: PPUSH
20183: CALL_OW 12
20187: PPUSH
20188: LD_INT 3000
20190: PPUSH
20191: LD_INT 9000
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: CALL_OW 492
// end ;
20203: PPOPN 1
20205: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20206: LD_EXP 33
20210: PUSH
20211: LD_EXP 48
20215: AND
20216: IFFALSE 20236
20218: GO 20220
20220: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20221: LD_INT 1
20223: PPUSH
20224: LD_OWVAR 2
20228: PPUSH
20229: LD_INT 0
20231: PPUSH
20232: CALL_OW 324
20236: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20237: LD_EXP 33
20241: PUSH
20242: LD_EXP 49
20246: AND
20247: IFFALSE 20330
20249: GO 20251
20251: DISABLE
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20256: LD_ADDR_VAR 0 2
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_OWVAR 2
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 21
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PPUSH
20287: CALL_OW 69
20291: ST_TO_ADDR
// if not tmp then
20292: LD_VAR 0 2
20296: NOT
20297: IFFALSE 20301
// exit ;
20299: GO 20330
// for i in tmp do
20301: LD_ADDR_VAR 0 1
20305: PUSH
20306: LD_VAR 0 2
20310: PUSH
20311: FOR_IN
20312: IFFALSE 20328
// SetBLevel ( i , 10 ) ;
20314: LD_VAR 0 1
20318: PPUSH
20319: LD_INT 10
20321: PPUSH
20322: CALL_OW 241
20326: GO 20311
20328: POP
20329: POP
// end ;
20330: PPOPN 2
20332: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20333: LD_EXP 33
20337: PUSH
20338: LD_EXP 50
20342: AND
20343: IFFALSE 20454
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_OWVAR 2
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 25
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not tmp then
20389: LD_VAR 0 3
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20454
// un := tmp [ rand ( 1 , tmp ) ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 1
20410: PPUSH
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 12
20420: ARRAY
20421: ST_TO_ADDR
// if Crawls ( un ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: CALL_OW 318
20431: IFFALSE 20442
// ComWalk ( un ) ;
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20442: LD_VAR 0 2
20446: PPUSH
20447: LD_INT 5
20449: PPUSH
20450: CALL_OW 336
// end ;
20454: PPOPN 3
20456: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20457: LD_EXP 33
20461: PUSH
20462: LD_EXP 51
20466: AND
20467: PUSH
20468: LD_OWVAR 67
20472: PUSH
20473: LD_INT 4
20475: LESS
20476: AND
20477: IFFALSE 20496
20479: GO 20481
20481: DISABLE
// begin Difficulty := Difficulty + 1 ;
20482: LD_ADDR_OWVAR 67
20486: PUSH
20487: LD_OWVAR 67
20491: PUSH
20492: LD_INT 1
20494: PLUS
20495: ST_TO_ADDR
// end ;
20496: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20497: LD_EXP 33
20501: PUSH
20502: LD_EXP 52
20506: AND
20507: IFFALSE 20610
20509: GO 20511
20511: DISABLE
20512: LD_INT 0
20514: PPUSH
// begin for i := 1 to 5 do
20515: LD_ADDR_VAR 0 1
20519: PUSH
20520: DOUBLE
20521: LD_INT 1
20523: DEC
20524: ST_TO_ADDR
20525: LD_INT 5
20527: PUSH
20528: FOR_TO
20529: IFFALSE 20608
// begin uc_nation := nation_nature ;
20531: LD_ADDR_OWVAR 21
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// uc_side := 0 ;
20539: LD_ADDR_OWVAR 20
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20547: LD_ADDR_OWVAR 29
20551: PUSH
20552: LD_INT 12
20554: PUSH
20555: LD_INT 12
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// hc_agressivity := 20 ;
20562: LD_ADDR_OWVAR 35
20566: PUSH
20567: LD_INT 20
20569: ST_TO_ADDR
// hc_class := class_tiger ;
20570: LD_ADDR_OWVAR 28
20574: PUSH
20575: LD_INT 14
20577: ST_TO_ADDR
// hc_gallery :=  ;
20578: LD_ADDR_OWVAR 33
20582: PUSH
20583: LD_STRING 
20585: ST_TO_ADDR
// hc_name :=  ;
20586: LD_ADDR_OWVAR 26
20590: PUSH
20591: LD_STRING 
20593: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20594: CALL_OW 44
20598: PPUSH
20599: LD_INT 0
20601: PPUSH
20602: CALL_OW 51
// end ;
20606: GO 20528
20608: POP
20609: POP
// end ;
20610: PPOPN 1
20612: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20613: LD_EXP 33
20617: PUSH
20618: LD_EXP 53
20622: AND
20623: IFFALSE 20632
20625: GO 20627
20627: DISABLE
// StreamSibBomb ;
20628: CALL 20633 0 0
20632: END
// export function StreamSibBomb ; var i , x , y ; begin
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
20638: PPUSH
// result := false ;
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_INT 0
20646: ST_TO_ADDR
// for i := 1 to 16 do
20647: LD_ADDR_VAR 0 2
20651: PUSH
20652: DOUBLE
20653: LD_INT 1
20655: DEC
20656: ST_TO_ADDR
20657: LD_INT 16
20659: PUSH
20660: FOR_TO
20661: IFFALSE 20860
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20663: LD_ADDR_VAR 0 3
20667: PUSH
20668: LD_INT 10
20670: PUSH
20671: LD_INT 20
20673: PUSH
20674: LD_INT 30
20676: PUSH
20677: LD_INT 40
20679: PUSH
20680: LD_INT 50
20682: PUSH
20683: LD_INT 60
20685: PUSH
20686: LD_INT 70
20688: PUSH
20689: LD_INT 80
20691: PUSH
20692: LD_INT 90
20694: PUSH
20695: LD_INT 100
20697: PUSH
20698: LD_INT 110
20700: PUSH
20701: LD_INT 120
20703: PUSH
20704: LD_INT 130
20706: PUSH
20707: LD_INT 140
20709: PUSH
20710: LD_INT 150
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: PPUSH
20733: LD_INT 15
20735: PPUSH
20736: CALL_OW 12
20740: ARRAY
20741: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20742: LD_ADDR_VAR 0 4
20746: PUSH
20747: LD_INT 10
20749: PUSH
20750: LD_INT 20
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 40
20758: PUSH
20759: LD_INT 50
20761: PUSH
20762: LD_INT 60
20764: PUSH
20765: LD_INT 70
20767: PUSH
20768: LD_INT 80
20770: PUSH
20771: LD_INT 90
20773: PUSH
20774: LD_INT 100
20776: PUSH
20777: LD_INT 110
20779: PUSH
20780: LD_INT 120
20782: PUSH
20783: LD_INT 130
20785: PUSH
20786: LD_INT 140
20788: PUSH
20789: LD_INT 150
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: PPUSH
20812: LD_INT 15
20814: PPUSH
20815: CALL_OW 12
20819: ARRAY
20820: ST_TO_ADDR
// if ValidHex ( x , y ) then
20821: LD_VAR 0 3
20825: PPUSH
20826: LD_VAR 0 4
20830: PPUSH
20831: CALL_OW 488
20835: IFFALSE 20858
// begin result := [ x , y ] ;
20837: LD_ADDR_VAR 0 1
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_VAR 0 4
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: ST_TO_ADDR
// break ;
20856: GO 20860
// end ; end ;
20858: GO 20660
20860: POP
20861: POP
// if result then
20862: LD_VAR 0 1
20866: IFFALSE 20926
// begin ToLua ( playSibBomb() ) ;
20868: LD_STRING playSibBomb()
20870: PPUSH
20871: CALL_OW 559
// wait ( 0 0$14 ) ;
20875: LD_INT 490
20877: PPUSH
20878: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20882: LD_VAR 0 1
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_VAR 0 1
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: PPUSH
20900: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20904: LD_VAR 0 1
20908: PUSH
20909: LD_INT 1
20911: ARRAY
20912: PPUSH
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 2
20920: ARRAY
20921: PPUSH
20922: CALL_OW 429
// end ; end ;
20926: LD_VAR 0 1
20930: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20931: LD_EXP 33
20935: PUSH
20936: LD_EXP 55
20940: AND
20941: IFFALSE 20953
20943: GO 20945
20945: DISABLE
// YouLost (  ) ;
20946: LD_STRING 
20948: PPUSH
20949: CALL_OW 104
20953: END
// every 0 0$1 trigger StreamModeActive and sFog do
20954: LD_EXP 33
20958: PUSH
20959: LD_EXP 54
20963: AND
20964: IFFALSE 20978
20966: GO 20968
20968: DISABLE
// FogOff ( your_side ) ;
20969: LD_OWVAR 2
20973: PPUSH
20974: CALL_OW 344
20978: END
// every 0 0$1 trigger StreamModeActive and sSun do
20979: LD_EXP 33
20983: PUSH
20984: LD_EXP 56
20988: AND
20989: IFFALSE 21017
20991: GO 20993
20993: DISABLE
// begin solar_recharge_percent := 0 ;
20994: LD_ADDR_OWVAR 79
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21002: LD_INT 10500
21004: PPUSH
21005: CALL_OW 67
// solar_recharge_percent := 100 ;
21009: LD_ADDR_OWVAR 79
21013: PUSH
21014: LD_INT 100
21016: ST_TO_ADDR
// end ;
21017: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21018: LD_EXP 33
21022: PUSH
21023: LD_EXP 57
21027: AND
21028: IFFALSE 21267
21030: GO 21032
21032: DISABLE
21033: LD_INT 0
21035: PPUSH
21036: PPUSH
21037: PPUSH
// begin tmp := [ ] ;
21038: LD_ADDR_VAR 0 3
21042: PUSH
21043: EMPTY
21044: ST_TO_ADDR
// for i := 1 to 6 do
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: DOUBLE
21051: LD_INT 1
21053: DEC
21054: ST_TO_ADDR
21055: LD_INT 6
21057: PUSH
21058: FOR_TO
21059: IFFALSE 21164
// begin uc_nation := nation_nature ;
21061: LD_ADDR_OWVAR 21
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// uc_side := 0 ;
21069: LD_ADDR_OWVAR 20
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21077: LD_ADDR_OWVAR 29
21081: PUSH
21082: LD_INT 12
21084: PUSH
21085: LD_INT 12
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: ST_TO_ADDR
// hc_agressivity := 20 ;
21092: LD_ADDR_OWVAR 35
21096: PUSH
21097: LD_INT 20
21099: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21100: LD_ADDR_OWVAR 28
21104: PUSH
21105: LD_INT 17
21107: ST_TO_ADDR
// hc_gallery :=  ;
21108: LD_ADDR_OWVAR 33
21112: PUSH
21113: LD_STRING 
21115: ST_TO_ADDR
// hc_name :=  ;
21116: LD_ADDR_OWVAR 26
21120: PUSH
21121: LD_STRING 
21123: ST_TO_ADDR
// un := CreateHuman ;
21124: LD_ADDR_VAR 0 2
21128: PUSH
21129: CALL_OW 44
21133: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 51
// tmp := tmp ^ un ;
21146: LD_ADDR_VAR 0 3
21150: PUSH
21151: LD_VAR 0 3
21155: PUSH
21156: LD_VAR 0 2
21160: ADD
21161: ST_TO_ADDR
// end ;
21162: GO 21058
21164: POP
21165: POP
// repeat wait ( 0 0$1 ) ;
21166: LD_INT 35
21168: PPUSH
21169: CALL_OW 67
// for un in tmp do
21173: LD_ADDR_VAR 0 2
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21258
// begin if IsDead ( un ) then
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 301
21195: IFFALSE 21215
// begin tmp := tmp diff un ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 2
21211: DIFF
21212: ST_TO_ADDR
// continue ;
21213: GO 21183
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: LD_INT 3
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 74
21251: PPUSH
21252: CALL_OW 115
// end ;
21256: GO 21183
21258: POP
21259: POP
// until not tmp ;
21260: LD_VAR 0 3
21264: NOT
21265: IFFALSE 21166
// end ;
21267: PPOPN 3
21269: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21270: LD_EXP 33
21274: PUSH
21275: LD_EXP 58
21279: AND
21280: IFFALSE 21334
21282: GO 21284
21284: DISABLE
// begin ToLua ( displayTroll(); ) ;
21285: LD_STRING displayTroll();
21287: PPUSH
21288: CALL_OW 559
// wait ( 3 3$00 ) ;
21292: LD_INT 6300
21294: PPUSH
21295: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21299: LD_STRING hideTroll();
21301: PPUSH
21302: CALL_OW 559
// wait ( 1 1$00 ) ;
21306: LD_INT 2100
21308: PPUSH
21309: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21313: LD_STRING displayTroll();
21315: PPUSH
21316: CALL_OW 559
// wait ( 1 1$00 ) ;
21320: LD_INT 2100
21322: PPUSH
21323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21327: LD_STRING hideTroll();
21329: PPUSH
21330: CALL_OW 559
// end ;
21334: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21335: LD_EXP 33
21339: PUSH
21340: LD_EXP 59
21344: AND
21345: IFFALSE 21408
21347: GO 21349
21349: DISABLE
21350: LD_INT 0
21352: PPUSH
// begin p := 0 ;
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// repeat game_speed := 1 ;
21361: LD_ADDR_OWVAR 65
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21369: LD_INT 35
21371: PPUSH
21372: CALL_OW 67
// p := p + 1 ;
21376: LD_ADDR_VAR 0 1
21380: PUSH
21381: LD_VAR 0 1
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
// until p >= 60 ;
21390: LD_VAR 0 1
21394: PUSH
21395: LD_INT 60
21397: GREATEREQUAL
21398: IFFALSE 21361
// game_speed := 4 ;
21400: LD_ADDR_OWVAR 65
21404: PUSH
21405: LD_INT 4
21407: ST_TO_ADDR
// end ;
21408: PPOPN 1
21410: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21411: LD_EXP 33
21415: PUSH
21416: LD_EXP 60
21420: AND
21421: IFFALSE 21567
21423: GO 21425
21425: DISABLE
21426: LD_INT 0
21428: PPUSH
21429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21430: LD_ADDR_VAR 0 1
21434: PUSH
21435: LD_INT 22
21437: PUSH
21438: LD_OWVAR 2
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 30
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PPUSH
21479: CALL_OW 69
21483: ST_TO_ADDR
// if not depot then
21484: LD_VAR 0 1
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21567
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: LD_VAR 0 1
21502: PUSH
21503: LD_INT 1
21505: PPUSH
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 12
21515: ARRAY
21516: PPUSH
21517: CALL_OW 274
21521: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21522: LD_VAR 0 2
21526: PPUSH
21527: LD_INT 1
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_INT 2
21544: PPUSH
21545: LD_INT 0
21547: PPUSH
21548: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_INT 3
21559: PPUSH
21560: LD_INT 0
21562: PPUSH
21563: CALL_OW 277
// end ;
21567: PPOPN 2
21569: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21570: LD_EXP 33
21574: PUSH
21575: LD_EXP 61
21579: AND
21580: IFFALSE 21677
21582: GO 21584
21584: DISABLE
21585: LD_INT 0
21587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21588: LD_ADDR_VAR 0 1
21592: PUSH
21593: LD_INT 22
21595: PUSH
21596: LD_OWVAR 2
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 21
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: LD_INT 23
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 69
21641: ST_TO_ADDR
// if not tmp then
21642: LD_VAR 0 1
21646: NOT
21647: IFFALSE 21651
// exit ;
21649: GO 21677
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21651: LD_VAR 0 1
21655: PUSH
21656: LD_INT 1
21658: PPUSH
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 12
21668: ARRAY
21669: PPUSH
21670: LD_INT 200
21672: PPUSH
21673: CALL_OW 234
// end ;
21677: PPOPN 1
21679: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21680: LD_EXP 33
21684: PUSH
21685: LD_EXP 62
21689: AND
21690: IFFALSE 21769
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_OWVAR 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: ST_TO_ADDR
// if not tmp then
21734: LD_VAR 0 1
21738: NOT
21739: IFFALSE 21743
// exit ;
21741: GO 21769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21743: LD_VAR 0 1
21747: PUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 12
21760: ARRAY
21761: PPUSH
21762: LD_INT 60
21764: PPUSH
21765: CALL_OW 234
// end ;
21769: PPOPN 1
21771: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21772: LD_EXP 33
21776: PUSH
21777: LD_EXP 63
21781: AND
21782: IFFALSE 21881
21784: GO 21786
21786: DISABLE
21787: LD_INT 0
21789: PPUSH
21790: PPUSH
// begin enable ;
21791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 61
21811: PUSH
21812: EMPTY
21813: LIST
21814: PUSH
21815: LD_INT 33
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: ST_TO_ADDR
// if not tmp then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 21881
// for i in tmp do
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_VAR 0 1
21853: PUSH
21854: FOR_IN
21855: IFFALSE 21879
// if IsControledBy ( i ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 312
21866: IFFALSE 21877
// ComUnlink ( i ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 136
21877: GO 21854
21879: POP
21880: POP
// end ;
21881: PPOPN 2
21883: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21884: LD_EXP 33
21888: PUSH
21889: LD_EXP 64
21893: AND
21894: IFFALSE 22034
21896: GO 21898
21898: DISABLE
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
// begin ToLua ( displayPowell(); ) ;
21903: LD_STRING displayPowell();
21905: PPUSH
21906: CALL_OW 559
// uc_side := 0 ;
21910: LD_ADDR_OWVAR 20
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// uc_nation := 2 ;
21918: LD_ADDR_OWVAR 21
21922: PUSH
21923: LD_INT 2
21925: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21926: LD_ADDR_OWVAR 37
21930: PUSH
21931: LD_INT 14
21933: ST_TO_ADDR
// vc_engine := engine_siberite ;
21934: LD_ADDR_OWVAR 39
21938: PUSH
21939: LD_INT 3
21941: ST_TO_ADDR
// vc_control := control_apeman ;
21942: LD_ADDR_OWVAR 38
21946: PUSH
21947: LD_INT 5
21949: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21950: LD_ADDR_OWVAR 40
21954: PUSH
21955: LD_INT 29
21957: ST_TO_ADDR
// un := CreateVehicle ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: CALL_OW 45
21967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21980: LD_INT 35
21982: PPUSH
21983: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_INT 22
21994: PUSH
21995: LD_OWVAR 2
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 69
22008: PPUSH
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 74
22018: PPUSH
22019: CALL_OW 115
// until IsDead ( un ) ;
22023: LD_VAR 0 2
22027: PPUSH
22028: CALL_OW 301
22032: IFFALSE 21980
// end ;
22034: PPOPN 2
22036: END
// every 0 0$1 trigger StreamModeActive and sStu do
22037: LD_EXP 33
22041: PUSH
22042: LD_EXP 72
22046: AND
22047: IFFALSE 22063
22049: GO 22051
22051: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22052: LD_STRING displayStucuk();
22054: PPUSH
22055: CALL_OW 559
// ResetFog ;
22059: CALL_OW 335
// end ;
22063: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22064: LD_EXP 33
22068: PUSH
22069: LD_EXP 65
22073: AND
22074: IFFALSE 22215
22076: GO 22078
22078: DISABLE
22079: LD_INT 0
22081: PPUSH
22082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: LD_OWVAR 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: ST_TO_ADDR
// if not tmp then
22119: LD_VAR 0 2
22123: NOT
22124: IFFALSE 22128
// exit ;
22126: GO 22215
// un := tmp [ rand ( 1 , tmp ) ] ;
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_VAR 0 2
22137: PUSH
22138: LD_INT 1
22140: PPUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: CALL_OW 12
22150: ARRAY
22151: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_INT 0
22159: PPUSH
22160: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22164: LD_VAR 0 1
22168: PPUSH
22169: LD_OWVAR 3
22173: PUSH
22174: LD_VAR 0 1
22178: DIFF
22179: PPUSH
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL_OW 74
22189: PPUSH
22190: CALL_OW 115
// wait ( 0 0$20 ) ;
22194: LD_INT 700
22196: PPUSH
22197: CALL_OW 67
// SetSide ( un , your_side ) ;
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_OWVAR 2
22210: PPUSH
22211: CALL_OW 235
// end ;
22215: PPOPN 2
22217: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22218: LD_EXP 33
22222: PUSH
22223: LD_EXP 66
22227: AND
22228: IFFALSE 22334
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: ST_TO_ADDR
// if not depot then
22290: LD_VAR 0 1
22294: NOT
22295: IFFALSE 22299
// exit ;
22297: GO 22334
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22299: LD_VAR 0 1
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: CALL_OW 250
22312: PPUSH
22313: LD_VAR 0 1
22317: PUSH
22318: LD_INT 1
22320: ARRAY
22321: PPUSH
22322: CALL_OW 251
22326: PPUSH
22327: LD_INT 70
22329: PPUSH
22330: CALL_OW 495
// end ;
22334: PPOPN 1
22336: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22337: LD_EXP 33
22341: PUSH
22342: LD_EXP 67
22346: AND
22347: IFFALSE 22558
22349: GO 22351
22351: DISABLE
22352: LD_INT 0
22354: PPUSH
22355: PPUSH
22356: PPUSH
22357: PPUSH
22358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22359: LD_ADDR_VAR 0 5
22363: PUSH
22364: LD_INT 22
22366: PUSH
22367: LD_OWVAR 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 21
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: ST_TO_ADDR
// if not tmp then
22395: LD_VAR 0 5
22399: NOT
22400: IFFALSE 22404
// exit ;
22402: GO 22558
// for i in tmp do
22404: LD_ADDR_VAR 0 1
22408: PUSH
22409: LD_VAR 0 5
22413: PUSH
22414: FOR_IN
22415: IFFALSE 22556
// begin d := rand ( 0 , 5 ) ;
22417: LD_ADDR_VAR 0 4
22421: PUSH
22422: LD_INT 0
22424: PPUSH
22425: LD_INT 5
22427: PPUSH
22428: CALL_OW 12
22432: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PPUSH
22448: LD_VAR 0 4
22452: PPUSH
22453: LD_INT 3
22455: PPUSH
22456: LD_INT 12
22458: PPUSH
22459: CALL_OW 12
22463: PPUSH
22464: CALL_OW 272
22468: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 251
22483: PPUSH
22484: LD_VAR 0 4
22488: PPUSH
22489: LD_INT 3
22491: PPUSH
22492: LD_INT 12
22494: PPUSH
22495: CALL_OW 12
22499: PPUSH
22500: CALL_OW 273
22504: ST_TO_ADDR
// if ValidHex ( x , y ) then
22505: LD_VAR 0 2
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: CALL_OW 488
22519: IFFALSE 22554
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_VAR 0 2
22530: PPUSH
22531: LD_VAR 0 3
22535: PPUSH
22536: LD_INT 3
22538: PPUSH
22539: LD_INT 6
22541: PPUSH
22542: CALL_OW 12
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 483
// end ;
22554: GO 22414
22556: POP
22557: POP
// end ;
22558: PPOPN 5
22560: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22561: LD_EXP 33
22565: PUSH
22566: LD_EXP 68
22570: AND
22571: IFFALSE 22665
22573: GO 22575
22575: DISABLE
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 32
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 69
22626: ST_TO_ADDR
// if not tmp then
22627: LD_VAR 0 2
22631: NOT
22632: IFFALSE 22636
// exit ;
22634: GO 22665
// for i in tmp do
22636: LD_ADDR_VAR 0 1
22640: PUSH
22641: LD_VAR 0 2
22645: PUSH
22646: FOR_IN
22647: IFFALSE 22663
// SetFuel ( i , 0 ) ;
22649: LD_VAR 0 1
22653: PPUSH
22654: LD_INT 0
22656: PPUSH
22657: CALL_OW 240
22661: GO 22646
22663: POP
22664: POP
// end ;
22665: PPOPN 2
22667: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22668: LD_EXP 33
22672: PUSH
22673: LD_EXP 69
22677: AND
22678: IFFALSE 22744
22680: GO 22682
22682: DISABLE
22683: LD_INT 0
22685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22686: LD_ADDR_VAR 0 1
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_OWVAR 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 29
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 69
22721: ST_TO_ADDR
// if not tmp then
22722: LD_VAR 0 1
22726: NOT
22727: IFFALSE 22731
// exit ;
22729: GO 22744
// DestroyUnit ( tmp [ 1 ] ) ;
22731: LD_VAR 0 1
22735: PUSH
22736: LD_INT 1
22738: ARRAY
22739: PPUSH
22740: CALL_OW 65
// end ;
22744: PPOPN 1
22746: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22747: LD_EXP 33
22751: PUSH
22752: LD_EXP 71
22756: AND
22757: IFFALSE 22886
22759: GO 22761
22761: DISABLE
22762: LD_INT 0
22764: PPUSH
// begin uc_side := 0 ;
22765: LD_ADDR_OWVAR 20
22769: PUSH
22770: LD_INT 0
22772: ST_TO_ADDR
// uc_nation := nation_arabian ;
22773: LD_ADDR_OWVAR 21
22777: PUSH
22778: LD_INT 2
22780: ST_TO_ADDR
// hc_gallery :=  ;
22781: LD_ADDR_OWVAR 33
22785: PUSH
22786: LD_STRING 
22788: ST_TO_ADDR
// hc_name :=  ;
22789: LD_ADDR_OWVAR 26
22793: PUSH
22794: LD_STRING 
22796: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22797: LD_INT 1
22799: PPUSH
22800: LD_INT 11
22802: PPUSH
22803: LD_INT 10
22805: PPUSH
22806: CALL_OW 380
// un := CreateHuman ;
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: CALL_OW 44
22819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_INT 1
22827: PPUSH
22828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22832: LD_INT 35
22834: PPUSH
22835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_INT 22
22846: PUSH
22847: LD_OWVAR 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: PPUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 74
22870: PPUSH
22871: CALL_OW 115
// until IsDead ( un ) ;
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 301
22884: IFFALSE 22832
// end ;
22886: PPOPN 1
22888: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22889: LD_EXP 33
22893: PUSH
22894: LD_EXP 73
22898: AND
22899: IFFALSE 22911
22901: GO 22903
22903: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22904: LD_STRING earthquake(getX(game), 0, 32)
22906: PPUSH
22907: CALL_OW 559
22911: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22912: LD_EXP 33
22916: PUSH
22917: LD_EXP 74
22921: AND
22922: IFFALSE 23013
22924: GO 22926
22926: DISABLE
22927: LD_INT 0
22929: PPUSH
// begin enable ;
22930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22931: LD_ADDR_VAR 0 1
22935: PUSH
22936: LD_INT 22
22938: PUSH
22939: LD_OWVAR 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 33
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: ST_TO_ADDR
// if not tmp then
22978: LD_VAR 0 1
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22987: LD_VAR 0 1
22991: PUSH
22992: LD_INT 1
22994: PPUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 12
23004: ARRAY
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 234
// end ;
23013: PPOPN 1
23015: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23016: LD_EXP 33
23020: PUSH
23021: LD_EXP 75
23025: AND
23026: IFFALSE 23167
23028: GO 23030
23030: DISABLE
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_OWVAR 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 25
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 3
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23167
// un := tmp [ rand ( 1 , tmp ) ] ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_VAR 0 3
23090: PUSH
23091: LD_INT 1
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: CALL_OW 12
23103: ARRAY
23104: ST_TO_ADDR
// if Crawls ( un ) then
23105: LD_VAR 0 2
23109: PPUSH
23110: CALL_OW 318
23114: IFFALSE 23125
// ComWalk ( un ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_INT 9
23132: PPUSH
23133: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23137: LD_INT 28
23139: PPUSH
23140: LD_OWVAR 2
23144: PPUSH
23145: LD_INT 2
23147: PPUSH
23148: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23152: LD_INT 29
23154: PPUSH
23155: LD_OWVAR 2
23159: PPUSH
23160: LD_INT 2
23162: PPUSH
23163: CALL_OW 322
// end ;
23167: PPOPN 3
23169: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23170: LD_EXP 33
23174: PUSH
23175: LD_EXP 76
23179: AND
23180: IFFALSE 23291
23182: GO 23184
23184: DISABLE
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
23189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 22
23197: PUSH
23198: LD_OWVAR 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 25
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: ST_TO_ADDR
// if not tmp then
23226: LD_VAR 0 3
23230: NOT
23231: IFFALSE 23235
// exit ;
23233: GO 23291
// un := tmp [ rand ( 1 , tmp ) ] ;
23235: LD_ADDR_VAR 0 2
23239: PUSH
23240: LD_VAR 0 3
23244: PUSH
23245: LD_INT 1
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: CALL_OW 12
23257: ARRAY
23258: ST_TO_ADDR
// if Crawls ( un ) then
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL_OW 318
23268: IFFALSE 23279
// ComWalk ( un ) ;
23270: LD_VAR 0 2
23274: PPUSH
23275: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_INT 8
23286: PPUSH
23287: CALL_OW 336
// end ;
23291: PPOPN 3
23293: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23294: LD_EXP 33
23298: PUSH
23299: LD_EXP 77
23303: AND
23304: IFFALSE 23448
23306: GO 23308
23308: DISABLE
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_OWVAR 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 34
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: LD_INT 51
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 34
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 69
23388: ST_TO_ADDR
// if not tmp then
23389: LD_VAR 0 2
23393: NOT
23394: IFFALSE 23398
// exit ;
23396: GO 23448
// for i in tmp do
23398: LD_ADDR_VAR 0 1
23402: PUSH
23403: LD_VAR 0 2
23407: PUSH
23408: FOR_IN
23409: IFFALSE 23446
// if GetCargo ( i , mat_artifact ) = 0 then
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 4
23418: PPUSH
23419: CALL_OW 289
23423: PUSH
23424: LD_INT 0
23426: EQUAL
23427: IFFALSE 23444
// SetCargo ( i , mat_siberit , 100 ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: LD_INT 3
23436: PPUSH
23437: LD_INT 100
23439: PPUSH
23440: CALL_OW 290
23444: GO 23408
23446: POP
23447: POP
// end ;
23448: PPOPN 2
23450: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23451: LD_EXP 33
23455: PUSH
23456: LD_EXP 78
23460: AND
23461: IFFALSE 23644
23463: GO 23465
23465: DISABLE
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_INT 22
23477: PUSH
23478: LD_OWVAR 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PPUSH
23487: CALL_OW 69
23491: ST_TO_ADDR
// if not tmp then
23492: LD_VAR 0 2
23496: NOT
23497: IFFALSE 23501
// exit ;
23499: GO 23644
// for i := 1 to 2 do
23501: LD_ADDR_VAR 0 1
23505: PUSH
23506: DOUBLE
23507: LD_INT 1
23509: DEC
23510: ST_TO_ADDR
23511: LD_INT 2
23513: PUSH
23514: FOR_TO
23515: IFFALSE 23642
// begin uc_side := your_side ;
23517: LD_ADDR_OWVAR 20
23521: PUSH
23522: LD_OWVAR 2
23526: ST_TO_ADDR
// uc_nation := nation_american ;
23527: LD_ADDR_OWVAR 21
23531: PUSH
23532: LD_INT 1
23534: ST_TO_ADDR
// vc_chassis := us_morphling ;
23535: LD_ADDR_OWVAR 37
23539: PUSH
23540: LD_INT 5
23542: ST_TO_ADDR
// vc_engine := engine_siberite ;
23543: LD_ADDR_OWVAR 39
23547: PUSH
23548: LD_INT 3
23550: ST_TO_ADDR
// vc_control := control_computer ;
23551: LD_ADDR_OWVAR 38
23555: PUSH
23556: LD_INT 3
23558: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23559: LD_ADDR_OWVAR 40
23563: PUSH
23564: LD_INT 10
23566: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23567: LD_VAR 0 2
23571: PUSH
23572: LD_INT 1
23574: ARRAY
23575: PPUSH
23576: CALL_OW 310
23580: NOT
23581: IFFALSE 23628
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23583: CALL_OW 45
23587: PPUSH
23588: LD_VAR 0 2
23592: PUSH
23593: LD_INT 1
23595: ARRAY
23596: PPUSH
23597: CALL_OW 250
23601: PPUSH
23602: LD_VAR 0 2
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PPUSH
23611: CALL_OW 251
23615: PPUSH
23616: LD_INT 12
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 50
23626: GO 23640
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23628: CALL_OW 45
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 51
// end ;
23640: GO 23514
23642: POP
23643: POP
// end ;
23644: PPOPN 2
23646: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23647: LD_EXP 33
23651: PUSH
23652: LD_EXP 79
23656: AND
23657: IFFALSE 23879
23659: GO 23661
23661: DISABLE
23662: LD_INT 0
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23670: LD_ADDR_VAR 0 6
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_OWVAR 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 3
23699: PUSH
23700: LD_INT 23
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: PPUSH
23719: CALL_OW 69
23723: ST_TO_ADDR
// if not tmp then
23724: LD_VAR 0 6
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23879
// s1 := rand ( 1 , 4 ) ;
23733: LD_ADDR_VAR 0 2
23737: PUSH
23738: LD_INT 1
23740: PPUSH
23741: LD_INT 4
23743: PPUSH
23744: CALL_OW 12
23748: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23749: LD_ADDR_VAR 0 4
23753: PUSH
23754: LD_VAR 0 6
23758: PUSH
23759: LD_INT 1
23761: ARRAY
23762: PPUSH
23763: LD_VAR 0 2
23767: PPUSH
23768: CALL_OW 259
23772: ST_TO_ADDR
// if s1 = 1 then
23773: LD_VAR 0 2
23777: PUSH
23778: LD_INT 1
23780: EQUAL
23781: IFFALSE 23801
// s2 := rand ( 2 , 4 ) else
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_INT 2
23790: PPUSH
23791: LD_INT 4
23793: PPUSH
23794: CALL_OW 12
23798: ST_TO_ADDR
23799: GO 23809
// s2 := 1 ;
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 1
23808: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 6
23818: PUSH
23819: LD_INT 1
23821: ARRAY
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: CALL_OW 259
23832: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23833: LD_VAR 0 6
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: PPUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: LD_VAR 0 5
23851: PPUSH
23852: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23856: LD_VAR 0 6
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: CALL_OW 237
// end ;
23879: PPOPN 6
23881: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23882: LD_EXP 33
23886: PUSH
23887: LD_EXP 80
23891: AND
23892: IFFALSE 23971
23894: GO 23896
23896: DISABLE
23897: LD_INT 0
23899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23900: LD_ADDR_VAR 0 1
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_OWVAR 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 3
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 69
23935: ST_TO_ADDR
// if not tmp then
23936: LD_VAR 0 1
23940: NOT
23941: IFFALSE 23945
// exit ;
23943: GO 23971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23945: LD_VAR 0 1
23949: PUSH
23950: LD_INT 1
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 12
23962: ARRAY
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 234
// end ;
23971: PPOPN 1
23973: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23974: LD_EXP 33
23978: PUSH
23979: LD_EXP 81
23983: AND
23984: IFFALSE 24096
23986: GO 23988
23988: DISABLE
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23993: LD_ADDR_VAR 0 2
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_OWVAR 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 27
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 26
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 28
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: ST_TO_ADDR
// if not tmp then
24058: LD_VAR 0 2
24062: NOT
24063: IFFALSE 24067
// exit ;
24065: GO 24096
// for i in tmp do
24067: LD_ADDR_VAR 0 1
24071: PUSH
24072: LD_VAR 0 2
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24094
// SetLives ( i , 1 ) ;
24080: LD_VAR 0 1
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 234
24092: GO 24077
24094: POP
24095: POP
// end ;
24096: PPOPN 2
24098: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24099: LD_EXP 33
24103: PUSH
24104: LD_EXP 82
24108: AND
24109: IFFALSE 24396
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
24118: PPUSH
// begin i := rand ( 1 , 7 ) ;
24119: LD_ADDR_VAR 0 1
24123: PUSH
24124: LD_INT 1
24126: PPUSH
24127: LD_INT 7
24129: PPUSH
24130: CALL_OW 12
24134: ST_TO_ADDR
// case i of 1 :
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: DOUBLE
24143: EQUAL
24144: IFTRUE 24148
24146: GO 24158
24148: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24149: LD_STRING earthquake(getX(game), 0, 32)
24151: PPUSH
24152: CALL_OW 559
24156: GO 24396
24158: LD_INT 2
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24180
24166: POP
// begin ToLua ( displayStucuk(); ) ;
24167: LD_STRING displayStucuk();
24169: PPUSH
24170: CALL_OW 559
// ResetFog ;
24174: CALL_OW 335
// end ; 3 :
24178: GO 24396
24180: LD_INT 3
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24292
24188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24189: LD_ADDR_VAR 0 2
24193: PUSH
24194: LD_INT 22
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 25
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24396
// un := tmp [ rand ( 1 , tmp ) ] ;
24234: LD_ADDR_VAR 0 3
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_INT 1
24246: PPUSH
24247: LD_VAR 0 2
24251: PPUSH
24252: CALL_OW 12
24256: ARRAY
24257: ST_TO_ADDR
// if Crawls ( un ) then
24258: LD_VAR 0 3
24262: PPUSH
24263: CALL_OW 318
24267: IFFALSE 24278
// ComWalk ( un ) ;
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24278: LD_VAR 0 3
24282: PPUSH
24283: LD_INT 8
24285: PPUSH
24286: CALL_OW 336
// end ; 4 :
24290: GO 24396
24292: LD_INT 4
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24374
24300: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24301: LD_ADDR_VAR 0 2
24305: PUSH
24306: LD_INT 22
24308: PUSH
24309: LD_OWVAR 2
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: LD_INT 29
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PPUSH
24332: CALL_OW 69
24336: ST_TO_ADDR
// if not tmp then
24337: LD_VAR 0 2
24341: NOT
24342: IFFALSE 24346
// exit ;
24344: GO 24396
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: ARRAY
24354: PPUSH
24355: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24359: LD_VAR 0 2
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: CALL_OW 65
// end ; 5 .. 7 :
24372: GO 24396
24374: LD_INT 5
24376: DOUBLE
24377: GREATEREQUAL
24378: IFFALSE 24386
24380: LD_INT 7
24382: DOUBLE
24383: LESSEQUAL
24384: IFTRUE 24388
24386: GO 24395
24388: POP
// StreamSibBomb ; end ;
24389: CALL 20633 0 0
24393: GO 24396
24395: POP
// end ;
24396: PPOPN 3
24398: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24399: LD_EXP 33
24403: PUSH
24404: LD_EXP 83
24408: AND
24409: IFFALSE 24565
24411: GO 24413
24413: DISABLE
24414: LD_INT 0
24416: PPUSH
24417: PPUSH
24418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24419: LD_ADDR_VAR 0 2
24423: PUSH
24424: LD_INT 81
24426: PUSH
24427: LD_OWVAR 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 21
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 21
24451: PUSH
24452: LD_INT 2
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL_OW 69
24472: ST_TO_ADDR
// if not tmp then
24473: LD_VAR 0 2
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24565
// p := 0 ;
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24490: LD_INT 35
24492: PPUSH
24493: CALL_OW 67
// p := p + 1 ;
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_INT 1
24509: PLUS
24510: ST_TO_ADDR
// for i in tmp do
24511: LD_ADDR_VAR 0 1
24515: PUSH
24516: LD_VAR 0 2
24520: PUSH
24521: FOR_IN
24522: IFFALSE 24553
// if GetLives ( i ) < 1000 then
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 256
24533: PUSH
24534: LD_INT 1000
24536: LESS
24537: IFFALSE 24551
// SetLives ( i , 1000 ) ;
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_INT 1000
24546: PPUSH
24547: CALL_OW 234
24551: GO 24521
24553: POP
24554: POP
// until p > 20 ;
24555: LD_VAR 0 3
24559: PUSH
24560: LD_INT 20
24562: GREATER
24563: IFFALSE 24490
// end ;
24565: PPOPN 3
24567: END
// every 0 0$1 trigger StreamModeActive and sTime do
24568: LD_EXP 33
24572: PUSH
24573: LD_EXP 84
24577: AND
24578: IFFALSE 24613
24580: GO 24582
24582: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24583: LD_INT 28
24585: PPUSH
24586: LD_OWVAR 2
24590: PPUSH
24591: LD_INT 2
24593: PPUSH
24594: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24598: LD_INT 30
24600: PPUSH
24601: LD_OWVAR 2
24605: PPUSH
24606: LD_INT 2
24608: PPUSH
24609: CALL_OW 322
// end ;
24613: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24614: LD_EXP 33
24618: PUSH
24619: LD_EXP 85
24623: AND
24624: IFFALSE 24745
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 22
24640: PUSH
24641: LD_OWVAR 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 23
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL_OW 69
24686: ST_TO_ADDR
// if not tmp then
24687: LD_VAR 0 2
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 24745
// for i in tmp do
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24743
// begin if Crawls ( i ) then
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 318
24718: IFFALSE 24729
// ComWalk ( i ) ;
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 138
// SetClass ( i , 2 ) ;
24729: LD_VAR 0 1
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL_OW 336
// end ;
24741: GO 24706
24743: POP
24744: POP
// end ;
24745: PPOPN 2
24747: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24748: LD_EXP 33
24752: PUSH
24753: LD_EXP 86
24757: AND
24758: IFFALSE 25046
24760: GO 24762
24762: DISABLE
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24768: LD_OWVAR 2
24772: PPUSH
24773: LD_INT 9
24775: PPUSH
24776: LD_INT 1
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24786: LD_INT 9
24788: PPUSH
24789: LD_OWVAR 2
24793: PPUSH
24794: CALL_OW 343
// uc_side := 9 ;
24798: LD_ADDR_OWVAR 20
24802: PUSH
24803: LD_INT 9
24805: ST_TO_ADDR
// uc_nation := 2 ;
24806: LD_ADDR_OWVAR 21
24810: PUSH
24811: LD_INT 2
24813: ST_TO_ADDR
// hc_name := Dark Warrior ;
24814: LD_ADDR_OWVAR 26
24818: PUSH
24819: LD_STRING Dark Warrior
24821: ST_TO_ADDR
// hc_gallery :=  ;
24822: LD_ADDR_OWVAR 33
24826: PUSH
24827: LD_STRING 
24829: ST_TO_ADDR
// hc_noskilllimit := true ;
24830: LD_ADDR_OWVAR 76
24834: PUSH
24835: LD_INT 1
24837: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24838: LD_ADDR_OWVAR 31
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 30
24848: PUSH
24849: LD_INT 30
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
// un := CreateHuman ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: CALL_OW 44
24870: ST_TO_ADDR
// hc_noskilllimit := false ;
24871: LD_ADDR_OWVAR 76
24875: PUSH
24876: LD_INT 0
24878: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24879: LD_VAR 0 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: CALL_OW 51
// ToLua ( playRanger() ) ;
24891: LD_STRING playRanger()
24893: PPUSH
24894: CALL_OW 559
// p := 0 ;
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 0
24905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24906: LD_INT 35
24908: PPUSH
24909: CALL_OW 67
// p := p + 1 ;
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_VAR 0 2
24922: PUSH
24923: LD_INT 1
24925: PLUS
24926: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24927: LD_VAR 0 3
24931: PPUSH
24932: CALL_OW 256
24936: PUSH
24937: LD_INT 1000
24939: LESS
24940: IFFALSE 24954
// SetLives ( un , 1000 ) ;
24942: LD_VAR 0 3
24946: PPUSH
24947: LD_INT 1000
24949: PPUSH
24950: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24954: LD_VAR 0 3
24958: PPUSH
24959: LD_INT 81
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 91
24973: PUSH
24974: LD_VAR 0 3
24978: PUSH
24979: LD_INT 30
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL_OW 74
25005: PPUSH
25006: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25010: LD_VAR 0 2
25014: PUSH
25015: LD_INT 80
25017: GREATER
25018: PUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: CALL_OW 301
25028: OR
25029: IFFALSE 24906
// if un then
25031: LD_VAR 0 3
25035: IFFALSE 25046
// RemoveUnit ( un ) ;
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 64
// end ;
25046: PPOPN 3
25048: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25049: LD_EXP 87
25053: IFFALSE 25169
25055: GO 25057
25057: DISABLE
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25063: LD_ADDR_VAR 0 2
25067: PUSH
25068: LD_INT 81
25070: PUSH
25071: LD_OWVAR 2
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 21
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PPUSH
25094: CALL_OW 69
25098: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25099: LD_STRING playComputer()
25101: PPUSH
25102: CALL_OW 559
// if not tmp then
25106: LD_VAR 0 2
25110: NOT
25111: IFFALSE 25115
// exit ;
25113: GO 25169
// for i in tmp do
25115: LD_ADDR_VAR 0 1
25119: PUSH
25120: LD_VAR 0 2
25124: PUSH
25125: FOR_IN
25126: IFFALSE 25167
// for j := 1 to 4 do
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: DOUBLE
25134: LD_INT 1
25136: DEC
25137: ST_TO_ADDR
25138: LD_INT 4
25140: PUSH
25141: FOR_TO
25142: IFFALSE 25163
// SetSkill ( i , j , 10 ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_INT 10
25156: PPUSH
25157: CALL_OW 237
25161: GO 25141
25163: POP
25164: POP
25165: GO 25125
25167: POP
25168: POP
// end ;
25169: PPOPN 3
25171: END
// every 0 0$1 trigger s30 do var i , tmp ;
25172: LD_EXP 88
25176: IFFALSE 25245
25178: GO 25180
25180: DISABLE
25181: LD_INT 0
25183: PPUSH
25184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25185: LD_ADDR_VAR 0 2
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_OWVAR 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 2
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25245
// for i in tmp do
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: FOR_IN
25227: IFFALSE 25243
// SetLives ( i , 300 ) ;
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_INT 300
25236: PPUSH
25237: CALL_OW 234
25241: GO 25226
25243: POP
25244: POP
// end ;
25245: PPOPN 2
25247: END
// every 0 0$1 trigger s60 do var i , tmp ;
25248: LD_EXP 89
25252: IFFALSE 25321
25254: GO 25256
25256: DISABLE
25257: LD_INT 0
25259: PPUSH
25260: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25261: LD_ADDR_VAR 0 2
25265: PUSH
25266: LD_INT 22
25268: PUSH
25269: LD_OWVAR 2
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 69
25282: ST_TO_ADDR
// if not tmp then
25283: LD_VAR 0 2
25287: NOT
25288: IFFALSE 25292
// exit ;
25290: GO 25321
// for i in tmp do
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_VAR 0 2
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25319
// SetLives ( i , 600 ) ;
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 600
25312: PPUSH
25313: CALL_OW 234
25317: GO 25302
25319: POP
25320: POP
// end ;
25321: PPOPN 2
25323: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25324: LD_INT 0
25326: PPUSH
// case cmd of 301 :
25327: LD_VAR 0 1
25331: PUSH
25332: LD_INT 301
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25372
25340: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25341: LD_VAR 0 6
25345: PPUSH
25346: LD_VAR 0 7
25350: PPUSH
25351: LD_VAR 0 8
25355: PPUSH
25356: LD_VAR 0 4
25360: PPUSH
25361: LD_VAR 0 5
25365: PPUSH
25366: CALL 26581 0 5
25370: GO 25493
25372: LD_INT 302
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25417
25380: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25381: LD_VAR 0 6
25385: PPUSH
25386: LD_VAR 0 7
25390: PPUSH
25391: LD_VAR 0 8
25395: PPUSH
25396: LD_VAR 0 9
25400: PPUSH
25401: LD_VAR 0 4
25405: PPUSH
25406: LD_VAR 0 5
25410: PPUSH
25411: CALL 26672 0 6
25415: GO 25493
25417: LD_INT 303
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25462
25425: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25426: LD_VAR 0 6
25430: PPUSH
25431: LD_VAR 0 7
25435: PPUSH
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_VAR 0 9
25445: PPUSH
25446: LD_VAR 0 4
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: CALL 25498 0 6
25460: GO 25493
25462: LD_INT 304
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25492
25470: POP
// hHackTeleport ( unit , x , y ) ; end ;
25471: LD_VAR 0 2
25475: PPUSH
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_VAR 0 5
25485: PPUSH
25486: CALL 27265 0 3
25490: GO 25493
25492: POP
// end ;
25493: LD_VAR 0 12
25497: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25498: LD_INT 0
25500: PPUSH
25501: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25502: LD_VAR 0 1
25506: PUSH
25507: LD_INT 1
25509: LESS
25510: PUSH
25511: LD_VAR 0 1
25515: PUSH
25516: LD_INT 3
25518: GREATER
25519: OR
25520: PUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: LD_VAR 0 6
25530: PPUSH
25531: CALL_OW 428
25535: OR
25536: IFFALSE 25540
// exit ;
25538: GO 26268
// uc_side := your_side ;
25540: LD_ADDR_OWVAR 20
25544: PUSH
25545: LD_OWVAR 2
25549: ST_TO_ADDR
// uc_nation := nation ;
25550: LD_ADDR_OWVAR 21
25554: PUSH
25555: LD_VAR 0 1
25559: ST_TO_ADDR
// bc_level = 1 ;
25560: LD_ADDR_OWVAR 43
25564: PUSH
25565: LD_INT 1
25567: ST_TO_ADDR
// case btype of 1 :
25568: LD_VAR 0 2
25572: PUSH
25573: LD_INT 1
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25592
25581: POP
// bc_type := b_depot ; 2 :
25582: LD_ADDR_OWVAR 42
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
25590: GO 26212
25592: LD_INT 2
25594: DOUBLE
25595: EQUAL
25596: IFTRUE 25600
25598: GO 25611
25600: POP
// bc_type := b_warehouse ; 3 :
25601: LD_ADDR_OWVAR 42
25605: PUSH
25606: LD_INT 1
25608: ST_TO_ADDR
25609: GO 26212
25611: LD_INT 3
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25630
25619: POP
// bc_type := b_lab ; 4 .. 9 :
25620: LD_ADDR_OWVAR 42
25624: PUSH
25625: LD_INT 6
25627: ST_TO_ADDR
25628: GO 26212
25630: LD_INT 4
25632: DOUBLE
25633: GREATEREQUAL
25634: IFFALSE 25642
25636: LD_INT 9
25638: DOUBLE
25639: LESSEQUAL
25640: IFTRUE 25644
25642: GO 25704
25644: POP
// begin bc_type := b_lab_half ;
25645: LD_ADDR_OWVAR 42
25649: PUSH
25650: LD_INT 7
25652: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25653: LD_ADDR_OWVAR 44
25657: PUSH
25658: LD_INT 10
25660: PUSH
25661: LD_INT 11
25663: PUSH
25664: LD_INT 12
25666: PUSH
25667: LD_INT 15
25669: PUSH
25670: LD_INT 14
25672: PUSH
25673: LD_INT 13
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: PUSH
25684: LD_VAR 0 2
25688: PUSH
25689: LD_INT 3
25691: MINUS
25692: ARRAY
25693: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25694: LD_ADDR_OWVAR 45
25698: PUSH
25699: LD_INT 9
25701: ST_TO_ADDR
// end ; 10 .. 13 :
25702: GO 26212
25704: LD_INT 10
25706: DOUBLE
25707: GREATEREQUAL
25708: IFFALSE 25716
25710: LD_INT 13
25712: DOUBLE
25713: LESSEQUAL
25714: IFTRUE 25718
25716: GO 25795
25718: POP
// begin bc_type := b_lab_full ;
25719: LD_ADDR_OWVAR 42
25723: PUSH
25724: LD_INT 8
25726: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25727: LD_ADDR_OWVAR 44
25731: PUSH
25732: LD_INT 10
25734: PUSH
25735: LD_INT 12
25737: PUSH
25738: LD_INT 14
25740: PUSH
25741: LD_INT 13
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: PUSH
25750: LD_VAR 0 2
25754: PUSH
25755: LD_INT 9
25757: MINUS
25758: ARRAY
25759: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25760: LD_ADDR_OWVAR 45
25764: PUSH
25765: LD_INT 11
25767: PUSH
25768: LD_INT 15
25770: PUSH
25771: LD_INT 12
25773: PUSH
25774: LD_INT 15
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: PUSH
25783: LD_VAR 0 2
25787: PUSH
25788: LD_INT 9
25790: MINUS
25791: ARRAY
25792: ST_TO_ADDR
// end ; 14 :
25793: GO 26212
25795: LD_INT 14
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25814
25803: POP
// bc_type := b_workshop ; 15 :
25804: LD_ADDR_OWVAR 42
25808: PUSH
25809: LD_INT 2
25811: ST_TO_ADDR
25812: GO 26212
25814: LD_INT 15
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25822
25820: GO 25833
25822: POP
// bc_type := b_factory ; 16 :
25823: LD_ADDR_OWVAR 42
25827: PUSH
25828: LD_INT 3
25830: ST_TO_ADDR
25831: GO 26212
25833: LD_INT 16
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25852
25841: POP
// bc_type := b_ext_gun ; 17 :
25842: LD_ADDR_OWVAR 42
25846: PUSH
25847: LD_INT 17
25849: ST_TO_ADDR
25850: GO 26212
25852: LD_INT 17
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 25888
25860: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25861: LD_ADDR_OWVAR 42
25865: PUSH
25866: LD_INT 19
25868: PUSH
25869: LD_INT 23
25871: PUSH
25872: LD_INT 19
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: PUSH
25880: LD_VAR 0 1
25884: ARRAY
25885: ST_TO_ADDR
25886: GO 26212
25888: LD_INT 18
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25907
25896: POP
// bc_type := b_ext_radar ; 19 :
25897: LD_ADDR_OWVAR 42
25901: PUSH
25902: LD_INT 20
25904: ST_TO_ADDR
25905: GO 26212
25907: LD_INT 19
25909: DOUBLE
25910: EQUAL
25911: IFTRUE 25915
25913: GO 25926
25915: POP
// bc_type := b_ext_radio ; 20 :
25916: LD_ADDR_OWVAR 42
25920: PUSH
25921: LD_INT 22
25923: ST_TO_ADDR
25924: GO 26212
25926: LD_INT 20
25928: DOUBLE
25929: EQUAL
25930: IFTRUE 25934
25932: GO 25945
25934: POP
// bc_type := b_ext_siberium ; 21 :
25935: LD_ADDR_OWVAR 42
25939: PUSH
25940: LD_INT 21
25942: ST_TO_ADDR
25943: GO 26212
25945: LD_INT 21
25947: DOUBLE
25948: EQUAL
25949: IFTRUE 25953
25951: GO 25964
25953: POP
// bc_type := b_ext_computer ; 22 :
25954: LD_ADDR_OWVAR 42
25958: PUSH
25959: LD_INT 24
25961: ST_TO_ADDR
25962: GO 26212
25964: LD_INT 22
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 25983
25972: POP
// bc_type := b_ext_track ; 23 :
25973: LD_ADDR_OWVAR 42
25977: PUSH
25978: LD_INT 16
25980: ST_TO_ADDR
25981: GO 26212
25983: LD_INT 23
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26002
25991: POP
// bc_type := b_ext_laser ; 24 :
25992: LD_ADDR_OWVAR 42
25996: PUSH
25997: LD_INT 25
25999: ST_TO_ADDR
26000: GO 26212
26002: LD_INT 24
26004: DOUBLE
26005: EQUAL
26006: IFTRUE 26010
26008: GO 26021
26010: POP
// bc_type := b_control_tower ; 25 :
26011: LD_ADDR_OWVAR 42
26015: PUSH
26016: LD_INT 36
26018: ST_TO_ADDR
26019: GO 26212
26021: LD_INT 25
26023: DOUBLE
26024: EQUAL
26025: IFTRUE 26029
26027: GO 26040
26029: POP
// bc_type := b_breastwork ; 26 :
26030: LD_ADDR_OWVAR 42
26034: PUSH
26035: LD_INT 31
26037: ST_TO_ADDR
26038: GO 26212
26040: LD_INT 26
26042: DOUBLE
26043: EQUAL
26044: IFTRUE 26048
26046: GO 26059
26048: POP
// bc_type := b_bunker ; 27 :
26049: LD_ADDR_OWVAR 42
26053: PUSH
26054: LD_INT 32
26056: ST_TO_ADDR
26057: GO 26212
26059: LD_INT 27
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26078
26067: POP
// bc_type := b_turret ; 28 :
26068: LD_ADDR_OWVAR 42
26072: PUSH
26073: LD_INT 33
26075: ST_TO_ADDR
26076: GO 26212
26078: LD_INT 28
26080: DOUBLE
26081: EQUAL
26082: IFTRUE 26086
26084: GO 26097
26086: POP
// bc_type := b_armoury ; 29 :
26087: LD_ADDR_OWVAR 42
26091: PUSH
26092: LD_INT 4
26094: ST_TO_ADDR
26095: GO 26212
26097: LD_INT 29
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26116
26105: POP
// bc_type := b_barracks ; 30 :
26106: LD_ADDR_OWVAR 42
26110: PUSH
26111: LD_INT 5
26113: ST_TO_ADDR
26114: GO 26212
26116: LD_INT 30
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26135
26124: POP
// bc_type := b_solar_power ; 31 :
26125: LD_ADDR_OWVAR 42
26129: PUSH
26130: LD_INT 27
26132: ST_TO_ADDR
26133: GO 26212
26135: LD_INT 31
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26154
26143: POP
// bc_type := b_oil_power ; 32 :
26144: LD_ADDR_OWVAR 42
26148: PUSH
26149: LD_INT 26
26151: ST_TO_ADDR
26152: GO 26212
26154: LD_INT 32
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26173
26162: POP
// bc_type := b_siberite_power ; 33 :
26163: LD_ADDR_OWVAR 42
26167: PUSH
26168: LD_INT 28
26170: ST_TO_ADDR
26171: GO 26212
26173: LD_INT 33
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26192
26181: POP
// bc_type := b_oil_mine ; 34 :
26182: LD_ADDR_OWVAR 42
26186: PUSH
26187: LD_INT 29
26189: ST_TO_ADDR
26190: GO 26212
26192: LD_INT 34
26194: DOUBLE
26195: EQUAL
26196: IFTRUE 26200
26198: GO 26211
26200: POP
// bc_type := b_siberite_mine ; end ;
26201: LD_ADDR_OWVAR 42
26205: PUSH
26206: LD_INT 30
26208: ST_TO_ADDR
26209: GO 26212
26211: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26212: LD_ADDR_VAR 0 8
26216: PUSH
26217: LD_VAR 0 5
26221: PPUSH
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_VAR 0 3
26231: PPUSH
26232: CALL_OW 47
26236: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26237: LD_OWVAR 42
26241: PUSH
26242: LD_INT 32
26244: PUSH
26245: LD_INT 33
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26268
// PlaceWeaponTurret ( b , weapon ) ;
26254: LD_VAR 0 8
26258: PPUSH
26259: LD_VAR 0 4
26263: PPUSH
26264: CALL_OW 431
// end ;
26268: LD_VAR 0 7
26272: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26279: LD_ADDR_VAR 0 4
26283: PUSH
26284: LD_INT 22
26286: PUSH
26287: LD_OWVAR 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 30
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 30
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PPUSH
26328: CALL_OW 69
26332: ST_TO_ADDR
// if not tmp then
26333: LD_VAR 0 4
26337: NOT
26338: IFFALSE 26342
// exit ;
26340: GO 26401
// for i in tmp do
26342: LD_ADDR_VAR 0 2
26346: PUSH
26347: LD_VAR 0 4
26351: PUSH
26352: FOR_IN
26353: IFFALSE 26399
// for j = 1 to 3 do
26355: LD_ADDR_VAR 0 3
26359: PUSH
26360: DOUBLE
26361: LD_INT 1
26363: DEC
26364: ST_TO_ADDR
26365: LD_INT 3
26367: PUSH
26368: FOR_TO
26369: IFFALSE 26395
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26371: LD_VAR 0 2
26375: PPUSH
26376: CALL_OW 274
26380: PPUSH
26381: LD_VAR 0 3
26385: PPUSH
26386: LD_INT 99999
26388: PPUSH
26389: CALL_OW 277
26393: GO 26368
26395: POP
26396: POP
26397: GO 26352
26399: POP
26400: POP
// end ;
26401: LD_VAR 0 1
26405: RET
// export function hHackSetLevel10 ; var i , j ; begin
26406: LD_INT 0
26408: PPUSH
26409: PPUSH
26410: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26411: LD_ADDR_VAR 0 2
26415: PUSH
26416: LD_INT 21
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PPUSH
26426: CALL_OW 69
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26484
// if IsSelected ( i ) then
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 306
26443: IFFALSE 26482
// begin for j := 1 to 4 do
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_INT 4
26457: PUSH
26458: FOR_TO
26459: IFFALSE 26480
// SetSkill ( i , j , 10 ) ;
26461: LD_VAR 0 2
26465: PPUSH
26466: LD_VAR 0 3
26470: PPUSH
26471: LD_INT 10
26473: PPUSH
26474: CALL_OW 237
26478: GO 26458
26480: POP
26481: POP
// end ;
26482: GO 26431
26484: POP
26485: POP
// end ;
26486: LD_VAR 0 1
26490: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
26495: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_INT 22
26503: PUSH
26504: LD_OWVAR 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 21
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PPUSH
26527: CALL_OW 69
26531: PUSH
26532: FOR_IN
26533: IFFALSE 26574
// begin for j := 1 to 4 do
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: DOUBLE
26541: LD_INT 1
26543: DEC
26544: ST_TO_ADDR
26545: LD_INT 4
26547: PUSH
26548: FOR_TO
26549: IFFALSE 26570
// SetSkill ( i , j , 10 ) ;
26551: LD_VAR 0 2
26555: PPUSH
26556: LD_VAR 0 3
26560: PPUSH
26561: LD_INT 10
26563: PPUSH
26564: CALL_OW 237
26568: GO 26548
26570: POP
26571: POP
// end ;
26572: GO 26532
26574: POP
26575: POP
// end ;
26576: LD_VAR 0 1
26580: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26581: LD_INT 0
26583: PPUSH
// uc_side := your_side ;
26584: LD_ADDR_OWVAR 20
26588: PUSH
26589: LD_OWVAR 2
26593: ST_TO_ADDR
// uc_nation := nation ;
26594: LD_ADDR_OWVAR 21
26598: PUSH
26599: LD_VAR 0 1
26603: ST_TO_ADDR
// InitHc ;
26604: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26608: LD_INT 0
26610: PPUSH
26611: LD_VAR 0 2
26615: PPUSH
26616: LD_VAR 0 3
26620: PPUSH
26621: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26625: LD_VAR 0 4
26629: PPUSH
26630: LD_VAR 0 5
26634: PPUSH
26635: CALL_OW 428
26639: PUSH
26640: LD_INT 0
26642: EQUAL
26643: IFFALSE 26667
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26645: CALL_OW 44
26649: PPUSH
26650: LD_VAR 0 4
26654: PPUSH
26655: LD_VAR 0 5
26659: PPUSH
26660: LD_INT 1
26662: PPUSH
26663: CALL_OW 48
// end ;
26667: LD_VAR 0 6
26671: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26672: LD_INT 0
26674: PPUSH
26675: PPUSH
// uc_side := your_side ;
26676: LD_ADDR_OWVAR 20
26680: PUSH
26681: LD_OWVAR 2
26685: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26686: LD_VAR 0 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 5
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: IN
26713: IFFALSE 26725
// uc_nation := nation_american else
26715: LD_ADDR_OWVAR 21
26719: PUSH
26720: LD_INT 1
26722: ST_TO_ADDR
26723: GO 26768
// if chassis in [ 11 , 12 , 13 , 14 ] then
26725: LD_VAR 0 1
26729: PUSH
26730: LD_INT 11
26732: PUSH
26733: LD_INT 12
26735: PUSH
26736: LD_INT 13
26738: PUSH
26739: LD_INT 14
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: IN
26748: IFFALSE 26760
// uc_nation := nation_arabian else
26750: LD_ADDR_OWVAR 21
26754: PUSH
26755: LD_INT 2
26757: ST_TO_ADDR
26758: GO 26768
// uc_nation := nation_russian ;
26760: LD_ADDR_OWVAR 21
26764: PUSH
26765: LD_INT 3
26767: ST_TO_ADDR
// vc_chassis := chassis ;
26768: LD_ADDR_OWVAR 37
26772: PUSH
26773: LD_VAR 0 1
26777: ST_TO_ADDR
// vc_engine := engine ;
26778: LD_ADDR_OWVAR 39
26782: PUSH
26783: LD_VAR 0 2
26787: ST_TO_ADDR
// vc_control := control ;
26788: LD_ADDR_OWVAR 38
26792: PUSH
26793: LD_VAR 0 3
26797: ST_TO_ADDR
// vc_weapon := weapon ;
26798: LD_ADDR_OWVAR 40
26802: PUSH
26803: LD_VAR 0 4
26807: ST_TO_ADDR
// un := CreateVehicle ;
26808: LD_ADDR_VAR 0 8
26812: PUSH
26813: CALL_OW 45
26817: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26818: LD_VAR 0 8
26822: PPUSH
26823: LD_INT 0
26825: PPUSH
26826: LD_INT 5
26828: PPUSH
26829: CALL_OW 12
26833: PPUSH
26834: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26838: LD_VAR 0 8
26842: PPUSH
26843: LD_VAR 0 5
26847: PPUSH
26848: LD_VAR 0 6
26852: PPUSH
26853: LD_INT 1
26855: PPUSH
26856: CALL_OW 48
// end ;
26860: LD_VAR 0 7
26864: RET
// export hInvincible ; every 1 do
26865: GO 26867
26867: DISABLE
// hInvincible := [ ] ;
26868: LD_ADDR_EXP 90
26872: PUSH
26873: EMPTY
26874: ST_TO_ADDR
26875: END
// every 10 do var i ;
26876: GO 26878
26878: DISABLE
26879: LD_INT 0
26881: PPUSH
// begin enable ;
26882: ENABLE
// if not hInvincible then
26883: LD_EXP 90
26887: NOT
26888: IFFALSE 26892
// exit ;
26890: GO 26936
// for i in hInvincible do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_EXP 90
26901: PUSH
26902: FOR_IN
26903: IFFALSE 26934
// if GetLives ( i ) < 1000 then
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 256
26914: PUSH
26915: LD_INT 1000
26917: LESS
26918: IFFALSE 26932
// SetLives ( i , 1000 ) ;
26920: LD_VAR 0 1
26924: PPUSH
26925: LD_INT 1000
26927: PPUSH
26928: CALL_OW 234
26932: GO 26902
26934: POP
26935: POP
// end ;
26936: PPOPN 1
26938: END
// export function hHackInvincible ; var i ; begin
26939: LD_INT 0
26941: PPUSH
26942: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26943: LD_ADDR_VAR 0 2
26947: PUSH
26948: LD_INT 2
26950: PUSH
26951: LD_INT 21
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 21
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: PPUSH
26976: CALL_OW 69
26980: PUSH
26981: FOR_IN
26982: IFFALSE 27043
// if IsSelected ( i ) then
26984: LD_VAR 0 2
26988: PPUSH
26989: CALL_OW 306
26993: IFFALSE 27041
// begin if i in hInvincible then
26995: LD_VAR 0 2
26999: PUSH
27000: LD_EXP 90
27004: IN
27005: IFFALSE 27025
// hInvincible := hInvincible diff i else
27007: LD_ADDR_EXP 90
27011: PUSH
27012: LD_EXP 90
27016: PUSH
27017: LD_VAR 0 2
27021: DIFF
27022: ST_TO_ADDR
27023: GO 27041
// hInvincible := hInvincible union i ;
27025: LD_ADDR_EXP 90
27029: PUSH
27030: LD_EXP 90
27034: PUSH
27035: LD_VAR 0 2
27039: UNION
27040: ST_TO_ADDR
// end ;
27041: GO 26981
27043: POP
27044: POP
// end ;
27045: LD_VAR 0 1
27049: RET
// export function hHackInvisible ; var i , j ; begin
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
27054: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27055: LD_ADDR_VAR 0 2
27059: PUSH
27060: LD_INT 21
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PPUSH
27070: CALL_OW 69
27074: PUSH
27075: FOR_IN
27076: IFFALSE 27100
// if IsSelected ( i ) then
27078: LD_VAR 0 2
27082: PPUSH
27083: CALL_OW 306
27087: IFFALSE 27098
// ComForceInvisible ( i ) ;
27089: LD_VAR 0 2
27093: PPUSH
27094: CALL_OW 496
27098: GO 27075
27100: POP
27101: POP
// end ;
27102: LD_VAR 0 1
27106: RET
// export function hHackChangeYourSide ; begin
27107: LD_INT 0
27109: PPUSH
// if your_side = 8 then
27110: LD_OWVAR 2
27114: PUSH
27115: LD_INT 8
27117: EQUAL
27118: IFFALSE 27130
// your_side := 0 else
27120: LD_ADDR_OWVAR 2
27124: PUSH
27125: LD_INT 0
27127: ST_TO_ADDR
27128: GO 27144
// your_side := your_side + 1 ;
27130: LD_ADDR_OWVAR 2
27134: PUSH
27135: LD_OWVAR 2
27139: PUSH
27140: LD_INT 1
27142: PLUS
27143: ST_TO_ADDR
// end ;
27144: LD_VAR 0 1
27148: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27149: LD_INT 0
27151: PPUSH
27152: PPUSH
27153: PPUSH
// for i in all_units do
27154: LD_ADDR_VAR 0 2
27158: PUSH
27159: LD_OWVAR 3
27163: PUSH
27164: FOR_IN
27165: IFFALSE 27243
// if IsSelected ( i ) then
27167: LD_VAR 0 2
27171: PPUSH
27172: CALL_OW 306
27176: IFFALSE 27241
// begin j := GetSide ( i ) ;
27178: LD_ADDR_VAR 0 3
27182: PUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 255
27192: ST_TO_ADDR
// if j = 8 then
27193: LD_VAR 0 3
27197: PUSH
27198: LD_INT 8
27200: EQUAL
27201: IFFALSE 27213
// j := 0 else
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_INT 0
27210: ST_TO_ADDR
27211: GO 27227
// j := j + 1 ;
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_VAR 0 3
27222: PUSH
27223: LD_INT 1
27225: PLUS
27226: ST_TO_ADDR
// SetSide ( i , j ) ;
27227: LD_VAR 0 2
27231: PPUSH
27232: LD_VAR 0 3
27236: PPUSH
27237: CALL_OW 235
// end ;
27241: GO 27164
27243: POP
27244: POP
// end ;
27245: LD_VAR 0 1
27249: RET
// export function hHackFog ; begin
27250: LD_INT 0
27252: PPUSH
// FogOff ( true ) ;
27253: LD_INT 1
27255: PPUSH
27256: CALL_OW 344
// end ;
27260: LD_VAR 0 1
27264: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27265: LD_INT 0
27267: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27268: LD_VAR 0 1
27272: PPUSH
27273: LD_VAR 0 2
27277: PPUSH
27278: LD_VAR 0 3
27282: PPUSH
27283: LD_INT 1
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: CALL_OW 483
// CenterOnXY ( x , y ) ;
27293: LD_VAR 0 2
27297: PPUSH
27298: LD_VAR 0 3
27302: PPUSH
27303: CALL_OW 84
// end ;
27307: LD_VAR 0 4
27311: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27312: LD_INT 0
27314: PPUSH
27315: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27316: LD_VAR 0 1
27320: NOT
27321: PUSH
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_VAR 0 3
27331: PPUSH
27332: CALL_OW 488
27336: NOT
27337: OR
27338: PUSH
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 266
27348: PUSH
27349: LD_INT 3
27351: NONEQUAL
27352: PUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 247
27362: PUSH
27363: LD_INT 1
27365: EQUAL
27366: NOT
27367: AND
27368: OR
27369: IFFALSE 27373
// exit ;
27371: GO 27522
// if GetType ( factory ) = unit_human then
27373: LD_VAR 0 1
27377: PPUSH
27378: CALL_OW 247
27382: PUSH
27383: LD_INT 1
27385: EQUAL
27386: IFFALSE 27403
// factory := IsInUnit ( factory ) ;
27388: LD_ADDR_VAR 0 1
27392: PUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: CALL_OW 310
27402: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27403: LD_VAR 0 1
27407: PPUSH
27408: CALL_OW 266
27412: PUSH
27413: LD_INT 3
27415: NONEQUAL
27416: IFFALSE 27420
// exit ;
27418: GO 27522
// if HexInfo ( x , y ) = factory then
27420: LD_VAR 0 2
27424: PPUSH
27425: LD_VAR 0 3
27429: PPUSH
27430: CALL_OW 428
27434: PUSH
27435: LD_VAR 0 1
27439: EQUAL
27440: IFFALSE 27467
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27442: LD_ADDR_EXP 91
27446: PUSH
27447: LD_EXP 91
27451: PPUSH
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_INT 0
27459: PPUSH
27460: CALL_OW 1
27464: ST_TO_ADDR
27465: GO 27518
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27467: LD_ADDR_EXP 91
27471: PUSH
27472: LD_EXP 91
27476: PPUSH
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 255
27491: PUSH
27492: LD_VAR 0 1
27496: PUSH
27497: LD_VAR 0 2
27501: PUSH
27502: LD_VAR 0 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27518: CALL 27527 0 0
// end ;
27522: LD_VAR 0 4
27526: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27527: LD_INT 0
27529: PPUSH
27530: PPUSH
27531: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27532: LD_STRING resetFactoryWaypoint();
27534: PPUSH
27535: CALL_OW 559
// if factoryWaypoints then
27539: LD_EXP 91
27543: IFFALSE 27669
// begin list := PrepareArray ( factoryWaypoints ) ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_EXP 91
27554: PPUSH
27555: CALL 74811 0 1
27559: ST_TO_ADDR
// for i := 1 to list do
27560: LD_ADDR_VAR 0 2
27564: PUSH
27565: DOUBLE
27566: LD_INT 1
27568: DEC
27569: ST_TO_ADDR
27570: LD_VAR 0 3
27574: PUSH
27575: FOR_TO
27576: IFFALSE 27667
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27578: LD_STRING setFactoryWaypointXY(
27580: PUSH
27581: LD_VAR 0 3
27585: PUSH
27586: LD_VAR 0 2
27590: ARRAY
27591: PUSH
27592: LD_INT 1
27594: ARRAY
27595: STR
27596: PUSH
27597: LD_STRING ,
27599: STR
27600: PUSH
27601: LD_VAR 0 3
27605: PUSH
27606: LD_VAR 0 2
27610: ARRAY
27611: PUSH
27612: LD_INT 2
27614: ARRAY
27615: STR
27616: PUSH
27617: LD_STRING ,
27619: STR
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: LD_VAR 0 2
27630: ARRAY
27631: PUSH
27632: LD_INT 3
27634: ARRAY
27635: STR
27636: PUSH
27637: LD_STRING ,
27639: STR
27640: PUSH
27641: LD_VAR 0 3
27645: PUSH
27646: LD_VAR 0 2
27650: ARRAY
27651: PUSH
27652: LD_INT 4
27654: ARRAY
27655: STR
27656: PUSH
27657: LD_STRING )
27659: STR
27660: PPUSH
27661: CALL_OW 559
27665: GO 27575
27667: POP
27668: POP
// end ; end ;
27669: LD_VAR 0 1
27673: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27674: LD_INT 0
27676: PPUSH
// if HexInfo ( x , y ) = warehouse then
27677: LD_VAR 0 2
27681: PPUSH
27682: LD_VAR 0 3
27686: PPUSH
27687: CALL_OW 428
27691: PUSH
27692: LD_VAR 0 1
27696: EQUAL
27697: IFFALSE 27724
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27699: LD_ADDR_EXP 92
27703: PUSH
27704: LD_EXP 92
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_INT 0
27716: PPUSH
27717: CALL_OW 1
27721: ST_TO_ADDR
27722: GO 27775
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27724: LD_ADDR_EXP 92
27728: PUSH
27729: LD_EXP 92
27733: PPUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 255
27748: PUSH
27749: LD_VAR 0 1
27753: PUSH
27754: LD_VAR 0 2
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: PPUSH
27770: CALL_OW 1
27774: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27775: CALL 27784 0 0
// end ;
27779: LD_VAR 0 4
27783: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27784: LD_INT 0
27786: PPUSH
27787: PPUSH
27788: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27789: LD_STRING resetWarehouseGatheringPoints();
27791: PPUSH
27792: CALL_OW 559
// if warehouseGatheringPoints then
27796: LD_EXP 92
27800: IFFALSE 27926
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_EXP 92
27811: PPUSH
27812: CALL 74811 0 1
27816: ST_TO_ADDR
// for i := 1 to list do
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: DOUBLE
27823: LD_INT 1
27825: DEC
27826: ST_TO_ADDR
27827: LD_VAR 0 3
27831: PUSH
27832: FOR_TO
27833: IFFALSE 27924
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27835: LD_STRING setWarehouseGatheringPointXY(
27837: PUSH
27838: LD_VAR 0 3
27842: PUSH
27843: LD_VAR 0 2
27847: ARRAY
27848: PUSH
27849: LD_INT 1
27851: ARRAY
27852: STR
27853: PUSH
27854: LD_STRING ,
27856: STR
27857: PUSH
27858: LD_VAR 0 3
27862: PUSH
27863: LD_VAR 0 2
27867: ARRAY
27868: PUSH
27869: LD_INT 2
27871: ARRAY
27872: STR
27873: PUSH
27874: LD_STRING ,
27876: STR
27877: PUSH
27878: LD_VAR 0 3
27882: PUSH
27883: LD_VAR 0 2
27887: ARRAY
27888: PUSH
27889: LD_INT 3
27891: ARRAY
27892: STR
27893: PUSH
27894: LD_STRING ,
27896: STR
27897: PUSH
27898: LD_VAR 0 3
27902: PUSH
27903: LD_VAR 0 2
27907: ARRAY
27908: PUSH
27909: LD_INT 4
27911: ARRAY
27912: STR
27913: PUSH
27914: LD_STRING )
27916: STR
27917: PPUSH
27918: CALL_OW 559
27922: GO 27832
27924: POP
27925: POP
// end ; end ;
27926: LD_VAR 0 1
27930: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27931: LD_EXP 92
27935: IFFALSE 28620
27937: GO 27939
27939: DISABLE
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
// begin enable ;
27951: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_EXP 92
27961: PPUSH
27962: CALL 74811 0 1
27966: ST_TO_ADDR
// if not list then
27967: LD_VAR 0 3
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28620
// for i := 1 to list do
27976: LD_ADDR_VAR 0 1
27980: PUSH
27981: DOUBLE
27982: LD_INT 1
27984: DEC
27985: ST_TO_ADDR
27986: LD_VAR 0 3
27990: PUSH
27991: FOR_TO
27992: IFFALSE 28618
// begin depot := list [ i ] [ 2 ] ;
27994: LD_ADDR_VAR 0 8
27998: PUSH
27999: LD_VAR 0 3
28003: PUSH
28004: LD_VAR 0 1
28008: ARRAY
28009: PUSH
28010: LD_INT 2
28012: ARRAY
28013: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 3
28023: PUSH
28024: LD_VAR 0 1
28028: ARRAY
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28034: LD_VAR 0 8
28038: PPUSH
28039: CALL_OW 301
28043: PUSH
28044: LD_VAR 0 5
28048: PUSH
28049: LD_VAR 0 8
28053: PPUSH
28054: CALL_OW 255
28058: NONEQUAL
28059: OR
28060: IFFALSE 28089
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28062: LD_ADDR_EXP 92
28066: PUSH
28067: LD_EXP 92
28071: PPUSH
28072: LD_VAR 0 8
28076: PPUSH
28077: LD_INT 0
28079: PPUSH
28080: CALL_OW 1
28084: ST_TO_ADDR
// exit ;
28085: POP
28086: POP
28087: GO 28620
// end ; x := list [ i ] [ 3 ] ;
28089: LD_ADDR_VAR 0 6
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 1
28103: ARRAY
28104: PUSH
28105: LD_INT 3
28107: ARRAY
28108: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28109: LD_ADDR_VAR 0 7
28113: PUSH
28114: LD_VAR 0 3
28118: PUSH
28119: LD_VAR 0 1
28123: ARRAY
28124: PUSH
28125: LD_INT 4
28127: ARRAY
28128: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28129: LD_ADDR_VAR 0 9
28133: PUSH
28134: LD_VAR 0 6
28138: PPUSH
28139: LD_VAR 0 7
28143: PPUSH
28144: LD_INT 16
28146: PPUSH
28147: CALL 73399 0 3
28151: ST_TO_ADDR
// if not cratesNearbyPoint then
28152: LD_VAR 0 9
28156: NOT
28157: IFFALSE 28163
// exit ;
28159: POP
28160: POP
28161: GO 28620
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28163: LD_ADDR_VAR 0 4
28167: PUSH
28168: LD_INT 22
28170: PUSH
28171: LD_VAR 0 5
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 60
28185: PUSH
28186: EMPTY
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 91
28195: PUSH
28196: LD_VAR 0 8
28200: PUSH
28201: LD_INT 6
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 25
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 25
28224: PUSH
28225: LD_INT 16
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 69
28247: PUSH
28248: LD_VAR 0 8
28252: PPUSH
28253: CALL_OW 313
28257: PPUSH
28258: LD_INT 3
28260: PUSH
28261: LD_INT 60
28263: PUSH
28264: EMPTY
28265: LIST
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 25
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 25
28286: PUSH
28287: LD_INT 16
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PPUSH
28303: CALL_OW 72
28307: UNION
28308: ST_TO_ADDR
// if tmp then
28309: LD_VAR 0 4
28313: IFFALSE 28393
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_VAR 0 4
28324: PPUSH
28325: LD_INT 3
28327: PPUSH
28328: CALL 71368 0 2
28332: ST_TO_ADDR
// for j in tmp do
28333: LD_ADDR_VAR 0 2
28337: PUSH
28338: LD_VAR 0 4
28342: PUSH
28343: FOR_IN
28344: IFFALSE 28387
// begin if IsInUnit ( j ) then
28346: LD_VAR 0 2
28350: PPUSH
28351: CALL_OW 310
28355: IFFALSE 28366
// ComExit ( j ) ;
28357: LD_VAR 0 2
28361: PPUSH
28362: CALL 71451 0 1
// AddComCollect ( j , x , y ) ;
28366: LD_VAR 0 2
28370: PPUSH
28371: LD_VAR 0 6
28375: PPUSH
28376: LD_VAR 0 7
28380: PPUSH
28381: CALL_OW 177
// end ;
28385: GO 28343
28387: POP
28388: POP
// exit ;
28389: POP
28390: POP
28391: GO 28620
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28393: LD_ADDR_VAR 0 4
28397: PUSH
28398: LD_INT 22
28400: PUSH
28401: LD_VAR 0 5
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 91
28412: PUSH
28413: LD_VAR 0 8
28417: PUSH
28418: LD_INT 8
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: LD_INT 34
28431: PUSH
28432: LD_INT 12
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 34
28441: PUSH
28442: LD_INT 51
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 34
28451: PUSH
28452: LD_INT 32
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 34
28461: PUSH
28462: LD_INT 89
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if tmp then
28486: LD_VAR 0 4
28490: IFFALSE 28616
// begin for j in tmp do
28492: LD_ADDR_VAR 0 2
28496: PUSH
28497: LD_VAR 0 4
28501: PUSH
28502: FOR_IN
28503: IFFALSE 28614
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28505: LD_VAR 0 2
28509: PPUSH
28510: CALL_OW 262
28514: PUSH
28515: LD_INT 3
28517: EQUAL
28518: PUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 261
28528: PUSH
28529: LD_INT 20
28531: GREATER
28532: OR
28533: PUSH
28534: LD_VAR 0 2
28538: PPUSH
28539: CALL_OW 314
28543: NOT
28544: AND
28545: PUSH
28546: LD_VAR 0 2
28550: PPUSH
28551: CALL_OW 263
28555: PUSH
28556: LD_INT 1
28558: NONEQUAL
28559: PUSH
28560: LD_VAR 0 2
28564: PPUSH
28565: CALL_OW 311
28569: OR
28570: AND
28571: IFFALSE 28612
// begin ComCollect ( j , x , y ) ;
28573: LD_VAR 0 2
28577: PPUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: LD_VAR 0 7
28587: PPUSH
28588: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 8
28601: PPUSH
28602: CALL_OW 172
// exit ;
28606: POP
28607: POP
28608: POP
28609: POP
28610: GO 28620
// end ;
28612: GO 28502
28614: POP
28615: POP
// end ; end ;
28616: GO 27991
28618: POP
28619: POP
// end ; end_of_file
28620: PPOPN 9
28622: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
28627: PPUSH
28628: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 264
28638: PUSH
28639: LD_INT 91
28641: EQUAL
28642: IFFALSE 28714
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28644: LD_INT 68
28646: PPUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 255
28656: PPUSH
28657: CALL_OW 321
28661: PUSH
28662: LD_INT 2
28664: EQUAL
28665: IFFALSE 28677
// eff := 70 else
28667: LD_ADDR_VAR 0 4
28671: PUSH
28672: LD_INT 70
28674: ST_TO_ADDR
28675: GO 28685
// eff := 30 ;
28677: LD_ADDR_VAR 0 4
28681: PUSH
28682: LD_INT 30
28684: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 250
28694: PPUSH
28695: LD_VAR 0 1
28699: PPUSH
28700: CALL_OW 251
28704: PPUSH
28705: LD_VAR 0 4
28709: PPUSH
28710: CALL_OW 495
// end ; end ;
28714: LD_VAR 0 2
28718: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28719: LD_INT 0
28721: PPUSH
// end ;
28722: LD_VAR 0 4
28726: RET
// export function SOS_Command ( cmd ) ; begin
28727: LD_INT 0
28729: PPUSH
// end ;
28730: LD_VAR 0 2
28734: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28735: LD_INT 0
28737: PPUSH
// end ;
28738: LD_VAR 0 6
28742: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
// if not vehicle or not factory then
28747: LD_VAR 0 1
28751: NOT
28752: PUSH
28753: LD_VAR 0 2
28757: NOT
28758: OR
28759: IFFALSE 28763
// exit ;
28761: GO 28994
// if factoryWaypoints >= factory then
28763: LD_EXP 91
28767: PUSH
28768: LD_VAR 0 2
28772: GREATEREQUAL
28773: IFFALSE 28994
// if factoryWaypoints [ factory ] then
28775: LD_EXP 91
28779: PUSH
28780: LD_VAR 0 2
28784: ARRAY
28785: IFFALSE 28994
// begin if GetControl ( vehicle ) = control_manual then
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 263
28796: PUSH
28797: LD_INT 1
28799: EQUAL
28800: IFFALSE 28881
// begin driver := IsDrivenBy ( vehicle ) ;
28802: LD_ADDR_VAR 0 4
28806: PUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 311
28816: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28817: LD_VAR 0 4
28821: PPUSH
28822: LD_EXP 91
28826: PUSH
28827: LD_VAR 0 2
28831: ARRAY
28832: PUSH
28833: LD_INT 3
28835: ARRAY
28836: PPUSH
28837: LD_EXP 91
28841: PUSH
28842: LD_VAR 0 2
28846: ARRAY
28847: PUSH
28848: LD_INT 4
28850: ARRAY
28851: PPUSH
28852: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28856: LD_VAR 0 4
28860: PPUSH
28861: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28865: LD_VAR 0 4
28869: PPUSH
28870: LD_VAR 0 2
28874: PPUSH
28875: CALL_OW 180
// end else
28879: GO 28994
// if GetControl ( vehicle ) = control_remote then
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 263
28890: PUSH
28891: LD_INT 2
28893: EQUAL
28894: IFFALSE 28955
// begin wait ( 0 0$2 ) ;
28896: LD_INT 70
28898: PPUSH
28899: CALL_OW 67
// if Connect ( vehicle ) then
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL 41659 0 1
28912: IFFALSE 28953
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28914: LD_VAR 0 1
28918: PPUSH
28919: LD_EXP 91
28923: PUSH
28924: LD_VAR 0 2
28928: ARRAY
28929: PUSH
28930: LD_INT 3
28932: ARRAY
28933: PPUSH
28934: LD_EXP 91
28938: PUSH
28939: LD_VAR 0 2
28943: ARRAY
28944: PUSH
28945: LD_INT 4
28947: ARRAY
28948: PPUSH
28949: CALL_OW 171
// end else
28953: GO 28994
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_EXP 91
28964: PUSH
28965: LD_VAR 0 2
28969: ARRAY
28970: PUSH
28971: LD_INT 3
28973: ARRAY
28974: PPUSH
28975: LD_EXP 91
28979: PUSH
28980: LD_VAR 0 2
28984: ARRAY
28985: PUSH
28986: LD_INT 4
28988: ARRAY
28989: PPUSH
28990: CALL_OW 171
// end ; end ;
28994: LD_VAR 0 3
28998: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28999: LD_INT 0
29001: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29002: LD_VAR 0 1
29006: PUSH
29007: LD_INT 250
29009: EQUAL
29010: PUSH
29011: LD_VAR 0 2
29015: PPUSH
29016: CALL_OW 264
29020: PUSH
29021: LD_INT 81
29023: EQUAL
29024: AND
29025: IFFALSE 29046
// MinerPlaceMine ( unit , x , y ) ;
29027: LD_VAR 0 2
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: LD_VAR 0 5
29041: PPUSH
29042: CALL 31870 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29046: LD_VAR 0 1
29050: PUSH
29051: LD_INT 251
29053: EQUAL
29054: PUSH
29055: LD_VAR 0 2
29059: PPUSH
29060: CALL_OW 264
29064: PUSH
29065: LD_INT 81
29067: EQUAL
29068: AND
29069: IFFALSE 29090
// MinerDetonateMine ( unit , x , y ) ;
29071: LD_VAR 0 2
29075: PPUSH
29076: LD_VAR 0 4
29080: PPUSH
29081: LD_VAR 0 5
29085: PPUSH
29086: CALL 32145 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29090: LD_VAR 0 1
29094: PUSH
29095: LD_INT 252
29097: EQUAL
29098: PUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL_OW 264
29108: PUSH
29109: LD_INT 81
29111: EQUAL
29112: AND
29113: IFFALSE 29134
// MinerCreateMinefield ( unit , x , y ) ;
29115: LD_VAR 0 2
29119: PPUSH
29120: LD_VAR 0 4
29124: PPUSH
29125: LD_VAR 0 5
29129: PPUSH
29130: CALL 32562 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29134: LD_VAR 0 1
29138: PUSH
29139: LD_INT 253
29141: EQUAL
29142: PUSH
29143: LD_VAR 0 2
29147: PPUSH
29148: CALL_OW 257
29152: PUSH
29153: LD_INT 5
29155: EQUAL
29156: AND
29157: IFFALSE 29178
// ComBinocular ( unit , x , y ) ;
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: LD_VAR 0 5
29173: PPUSH
29174: CALL 32931 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29178: LD_VAR 0 1
29182: PUSH
29183: LD_INT 254
29185: EQUAL
29186: PUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 264
29196: PUSH
29197: LD_INT 99
29199: EQUAL
29200: AND
29201: PUSH
29202: LD_VAR 0 3
29206: PPUSH
29207: CALL_OW 263
29211: PUSH
29212: LD_INT 3
29214: EQUAL
29215: AND
29216: IFFALSE 29232
// HackDestroyVehicle ( unit , selectedUnit ) ;
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL 31234 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29232: LD_VAR 0 1
29236: PUSH
29237: LD_INT 255
29239: EQUAL
29240: PUSH
29241: LD_VAR 0 2
29245: PPUSH
29246: CALL_OW 264
29250: PUSH
29251: LD_INT 14
29253: PUSH
29254: LD_INT 53
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: IN
29261: AND
29262: PUSH
29263: LD_VAR 0 4
29267: PPUSH
29268: LD_VAR 0 5
29272: PPUSH
29273: CALL_OW 488
29277: AND
29278: IFFALSE 29302
// CutTreeXYR ( unit , x , y , 12 ) ;
29280: LD_VAR 0 2
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: LD_VAR 0 5
29294: PPUSH
29295: LD_INT 12
29297: PPUSH
29298: CALL 29397 0 4
// if cmd = 256 then
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 256
29309: EQUAL
29310: IFFALSE 29331
// SetFactoryWaypoint ( unit , x , y ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_VAR 0 4
29321: PPUSH
29322: LD_VAR 0 5
29326: PPUSH
29327: CALL 27312 0 3
// if cmd = 257 then
29331: LD_VAR 0 1
29335: PUSH
29336: LD_INT 257
29338: EQUAL
29339: IFFALSE 29360
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: LD_VAR 0 4
29350: PPUSH
29351: LD_VAR 0 5
29355: PPUSH
29356: CALL 27674 0 3
// if cmd = 258 then
29360: LD_VAR 0 1
29364: PUSH
29365: LD_INT 258
29367: EQUAL
29368: IFFALSE 29392
// BurnTreeXYR ( unit , x , y , 8 ) ;
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 4
29379: PPUSH
29380: LD_VAR 0 5
29384: PPUSH
29385: LD_INT 8
29387: PPUSH
29388: CALL 29791 0 4
// end ;
29392: LD_VAR 0 6
29396: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29408: LD_VAR 0 1
29412: PPUSH
29413: CALL_OW 302
29417: NOT
29418: PUSH
29419: LD_VAR 0 2
29423: PPUSH
29424: LD_VAR 0 3
29428: PPUSH
29429: CALL_OW 488
29433: NOT
29434: OR
29435: PUSH
29436: LD_VAR 0 4
29440: NOT
29441: OR
29442: IFFALSE 29446
// exit ;
29444: GO 29786
// list := [ ] ;
29446: LD_ADDR_VAR 0 13
29450: PUSH
29451: EMPTY
29452: ST_TO_ADDR
// if x - r < 0 then
29453: LD_VAR 0 2
29457: PUSH
29458: LD_VAR 0 4
29462: MINUS
29463: PUSH
29464: LD_INT 0
29466: LESS
29467: IFFALSE 29479
// min_x := 0 else
29469: LD_ADDR_VAR 0 7
29473: PUSH
29474: LD_INT 0
29476: ST_TO_ADDR
29477: GO 29495
// min_x := x - r ;
29479: LD_ADDR_VAR 0 7
29483: PUSH
29484: LD_VAR 0 2
29488: PUSH
29489: LD_VAR 0 4
29493: MINUS
29494: ST_TO_ADDR
// if y - r < 0 then
29495: LD_VAR 0 3
29499: PUSH
29500: LD_VAR 0 4
29504: MINUS
29505: PUSH
29506: LD_INT 0
29508: LESS
29509: IFFALSE 29521
// min_y := 0 else
29511: LD_ADDR_VAR 0 8
29515: PUSH
29516: LD_INT 0
29518: ST_TO_ADDR
29519: GO 29537
// min_y := y - r ;
29521: LD_ADDR_VAR 0 8
29525: PUSH
29526: LD_VAR 0 3
29530: PUSH
29531: LD_VAR 0 4
29535: MINUS
29536: ST_TO_ADDR
// max_x := x + r ;
29537: LD_ADDR_VAR 0 9
29541: PUSH
29542: LD_VAR 0 2
29546: PUSH
29547: LD_VAR 0 4
29551: PLUS
29552: ST_TO_ADDR
// max_y := y + r ;
29553: LD_ADDR_VAR 0 10
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_VAR 0 4
29567: PLUS
29568: ST_TO_ADDR
// for _x = min_x to max_x do
29569: LD_ADDR_VAR 0 11
29573: PUSH
29574: DOUBLE
29575: LD_VAR 0 7
29579: DEC
29580: ST_TO_ADDR
29581: LD_VAR 0 9
29585: PUSH
29586: FOR_TO
29587: IFFALSE 29704
// for _y = min_y to max_y do
29589: LD_ADDR_VAR 0 12
29593: PUSH
29594: DOUBLE
29595: LD_VAR 0 8
29599: DEC
29600: ST_TO_ADDR
29601: LD_VAR 0 10
29605: PUSH
29606: FOR_TO
29607: IFFALSE 29700
// begin if not ValidHex ( _x , _y ) then
29609: LD_VAR 0 11
29613: PPUSH
29614: LD_VAR 0 12
29618: PPUSH
29619: CALL_OW 488
29623: NOT
29624: IFFALSE 29628
// continue ;
29626: GO 29606
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29628: LD_VAR 0 11
29632: PPUSH
29633: LD_VAR 0 12
29637: PPUSH
29638: CALL_OW 351
29642: PUSH
29643: LD_VAR 0 11
29647: PPUSH
29648: LD_VAR 0 12
29652: PPUSH
29653: CALL_OW 554
29657: AND
29658: IFFALSE 29698
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29660: LD_ADDR_VAR 0 13
29664: PUSH
29665: LD_VAR 0 13
29669: PPUSH
29670: LD_VAR 0 13
29674: PUSH
29675: LD_INT 1
29677: PLUS
29678: PPUSH
29679: LD_VAR 0 11
29683: PUSH
29684: LD_VAR 0 12
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 2
29697: ST_TO_ADDR
// end ;
29698: GO 29606
29700: POP
29701: POP
29702: GO 29586
29704: POP
29705: POP
// if not list then
29706: LD_VAR 0 13
29710: NOT
29711: IFFALSE 29715
// exit ;
29713: GO 29786
// for i in list do
29715: LD_ADDR_VAR 0 6
29719: PUSH
29720: LD_VAR 0 13
29724: PUSH
29725: FOR_IN
29726: IFFALSE 29784
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29728: LD_VAR 0 1
29732: PPUSH
29733: LD_STRING M
29735: PUSH
29736: LD_VAR 0 6
29740: PUSH
29741: LD_INT 1
29743: ARRAY
29744: PUSH
29745: LD_VAR 0 6
29749: PUSH
29750: LD_INT 2
29752: ARRAY
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: PPUSH
29778: CALL_OW 447
29782: GO 29725
29784: POP
29785: POP
// end ;
29786: LD_VAR 0 5
29790: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29791: LD_INT 0
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29802: LD_VAR 0 1
29806: PPUSH
29807: CALL_OW 302
29811: NOT
29812: PUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: CALL_OW 488
29827: NOT
29828: OR
29829: PUSH
29830: LD_VAR 0 4
29834: NOT
29835: OR
29836: IFFALSE 29840
// exit ;
29838: GO 30188
// list := [ ] ;
29840: LD_ADDR_VAR 0 13
29844: PUSH
29845: EMPTY
29846: ST_TO_ADDR
// if x - r < 0 then
29847: LD_VAR 0 2
29851: PUSH
29852: LD_VAR 0 4
29856: MINUS
29857: PUSH
29858: LD_INT 0
29860: LESS
29861: IFFALSE 29873
// min_x := 0 else
29863: LD_ADDR_VAR 0 7
29867: PUSH
29868: LD_INT 0
29870: ST_TO_ADDR
29871: GO 29889
// min_x := x - r ;
29873: LD_ADDR_VAR 0 7
29877: PUSH
29878: LD_VAR 0 2
29882: PUSH
29883: LD_VAR 0 4
29887: MINUS
29888: ST_TO_ADDR
// if y - r < 0 then
29889: LD_VAR 0 3
29893: PUSH
29894: LD_VAR 0 4
29898: MINUS
29899: PUSH
29900: LD_INT 0
29902: LESS
29903: IFFALSE 29915
// min_y := 0 else
29905: LD_ADDR_VAR 0 8
29909: PUSH
29910: LD_INT 0
29912: ST_TO_ADDR
29913: GO 29931
// min_y := y - r ;
29915: LD_ADDR_VAR 0 8
29919: PUSH
29920: LD_VAR 0 3
29924: PUSH
29925: LD_VAR 0 4
29929: MINUS
29930: ST_TO_ADDR
// max_x := x + r ;
29931: LD_ADDR_VAR 0 9
29935: PUSH
29936: LD_VAR 0 2
29940: PUSH
29941: LD_VAR 0 4
29945: PLUS
29946: ST_TO_ADDR
// max_y := y + r ;
29947: LD_ADDR_VAR 0 10
29951: PUSH
29952: LD_VAR 0 3
29956: PUSH
29957: LD_VAR 0 4
29961: PLUS
29962: ST_TO_ADDR
// for _x = min_x to max_x do
29963: LD_ADDR_VAR 0 11
29967: PUSH
29968: DOUBLE
29969: LD_VAR 0 7
29973: DEC
29974: ST_TO_ADDR
29975: LD_VAR 0 9
29979: PUSH
29980: FOR_TO
29981: IFFALSE 30098
// for _y = min_y to max_y do
29983: LD_ADDR_VAR 0 12
29987: PUSH
29988: DOUBLE
29989: LD_VAR 0 8
29993: DEC
29994: ST_TO_ADDR
29995: LD_VAR 0 10
29999: PUSH
30000: FOR_TO
30001: IFFALSE 30094
// begin if not ValidHex ( _x , _y ) then
30003: LD_VAR 0 11
30007: PPUSH
30008: LD_VAR 0 12
30012: PPUSH
30013: CALL_OW 488
30017: NOT
30018: IFFALSE 30022
// continue ;
30020: GO 30000
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30022: LD_VAR 0 11
30026: PPUSH
30027: LD_VAR 0 12
30031: PPUSH
30032: CALL_OW 351
30036: PUSH
30037: LD_VAR 0 11
30041: PPUSH
30042: LD_VAR 0 12
30046: PPUSH
30047: CALL_OW 554
30051: AND
30052: IFFALSE 30092
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30054: LD_ADDR_VAR 0 13
30058: PUSH
30059: LD_VAR 0 13
30063: PPUSH
30064: LD_VAR 0 13
30068: PUSH
30069: LD_INT 1
30071: PLUS
30072: PPUSH
30073: LD_VAR 0 11
30077: PUSH
30078: LD_VAR 0 12
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PPUSH
30087: CALL_OW 2
30091: ST_TO_ADDR
// end ;
30092: GO 30000
30094: POP
30095: POP
30096: GO 29980
30098: POP
30099: POP
// if not list then
30100: LD_VAR 0 13
30104: NOT
30105: IFFALSE 30109
// exit ;
30107: GO 30188
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30109: LD_ADDR_VAR 0 13
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: LD_VAR 0 13
30123: PPUSH
30124: LD_INT 1
30126: PPUSH
30127: LD_INT 1
30129: PPUSH
30130: CALL 38801 0 4
30134: ST_TO_ADDR
// ComStop ( flame ) ;
30135: LD_VAR 0 1
30139: PPUSH
30140: CALL_OW 141
// for i in list do
30144: LD_ADDR_VAR 0 6
30148: PUSH
30149: LD_VAR 0 13
30153: PUSH
30154: FOR_IN
30155: IFFALSE 30186
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30157: LD_VAR 0 1
30161: PPUSH
30162: LD_VAR 0 6
30166: PUSH
30167: LD_INT 1
30169: ARRAY
30170: PPUSH
30171: LD_VAR 0 6
30175: PUSH
30176: LD_INT 2
30178: ARRAY
30179: PPUSH
30180: CALL_OW 176
30184: GO 30154
30186: POP
30187: POP
// end ;
30188: LD_VAR 0 5
30192: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30193: LD_EXP 94
30197: NOT
30198: IFFALSE 30248
30200: GO 30202
30202: DISABLE
// begin initHack := true ;
30203: LD_ADDR_EXP 94
30207: PUSH
30208: LD_INT 1
30210: ST_TO_ADDR
// hackTanks := [ ] ;
30211: LD_ADDR_EXP 95
30215: PUSH
30216: EMPTY
30217: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30218: LD_ADDR_EXP 96
30222: PUSH
30223: EMPTY
30224: ST_TO_ADDR
// hackLimit := 3 ;
30225: LD_ADDR_EXP 97
30229: PUSH
30230: LD_INT 3
30232: ST_TO_ADDR
// hackDist := 12 ;
30233: LD_ADDR_EXP 98
30237: PUSH
30238: LD_INT 12
30240: ST_TO_ADDR
// hackCounter := [ ] ;
30241: LD_ADDR_EXP 99
30245: PUSH
30246: EMPTY
30247: ST_TO_ADDR
// end ;
30248: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30249: LD_EXP 94
30253: PUSH
30254: LD_INT 34
30256: PUSH
30257: LD_INT 99
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: CALL_OW 69
30268: AND
30269: IFFALSE 30522
30271: GO 30273
30273: DISABLE
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
// begin enable ;
30278: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30279: LD_ADDR_VAR 0 1
30283: PUSH
30284: LD_INT 34
30286: PUSH
30287: LD_INT 99
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PPUSH
30294: CALL_OW 69
30298: PUSH
30299: FOR_IN
30300: IFFALSE 30520
// begin if not i in hackTanks then
30302: LD_VAR 0 1
30306: PUSH
30307: LD_EXP 95
30311: IN
30312: NOT
30313: IFFALSE 30396
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30315: LD_ADDR_EXP 95
30319: PUSH
30320: LD_EXP 95
30324: PPUSH
30325: LD_EXP 95
30329: PUSH
30330: LD_INT 1
30332: PLUS
30333: PPUSH
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL_OW 1
30343: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30344: LD_ADDR_EXP 96
30348: PUSH
30349: LD_EXP 96
30353: PPUSH
30354: LD_EXP 96
30358: PUSH
30359: LD_INT 1
30361: PLUS
30362: PPUSH
30363: EMPTY
30364: PPUSH
30365: CALL_OW 1
30369: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30370: LD_ADDR_EXP 99
30374: PUSH
30375: LD_EXP 99
30379: PPUSH
30380: LD_EXP 99
30384: PUSH
30385: LD_INT 1
30387: PLUS
30388: PPUSH
30389: EMPTY
30390: PPUSH
30391: CALL_OW 1
30395: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 302
30405: NOT
30406: IFFALSE 30419
// begin HackUnlinkAll ( i ) ;
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL 30525 0 1
// continue ;
30417: GO 30299
// end ; HackCheckCapturedStatus ( i ) ;
30419: LD_VAR 0 1
30423: PPUSH
30424: CALL 30968 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30428: LD_ADDR_VAR 0 2
30432: PUSH
30433: LD_INT 81
30435: PUSH
30436: LD_VAR 0 1
30440: PPUSH
30441: CALL_OW 255
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 33
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 91
30462: PUSH
30463: LD_VAR 0 1
30467: PUSH
30468: LD_EXP 98
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 50
30480: PUSH
30481: EMPTY
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 2
30499: NOT
30500: IFFALSE 30504
// continue ;
30502: GO 30299
// HackLink ( i , tmp ) ;
30504: LD_VAR 0 1
30508: PPUSH
30509: LD_VAR 0 2
30513: PPUSH
30514: CALL 30661 0 2
// end ;
30518: GO 30299
30520: POP
30521: POP
// end ;
30522: PPOPN 2
30524: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30525: LD_INT 0
30527: PPUSH
30528: PPUSH
30529: PPUSH
// if not hack in hackTanks then
30530: LD_VAR 0 1
30534: PUSH
30535: LD_EXP 95
30539: IN
30540: NOT
30541: IFFALSE 30545
// exit ;
30543: GO 30656
// index := GetElementIndex ( hackTanks , hack ) ;
30545: LD_ADDR_VAR 0 4
30549: PUSH
30550: LD_EXP 95
30554: PPUSH
30555: LD_VAR 0 1
30559: PPUSH
30560: CALL 38098 0 2
30564: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30565: LD_EXP 96
30569: PUSH
30570: LD_VAR 0 4
30574: ARRAY
30575: IFFALSE 30656
// begin for i in hackTanksCaptured [ index ] do
30577: LD_ADDR_VAR 0 3
30581: PUSH
30582: LD_EXP 96
30586: PUSH
30587: LD_VAR 0 4
30591: ARRAY
30592: PUSH
30593: FOR_IN
30594: IFFALSE 30620
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30596: LD_VAR 0 3
30600: PUSH
30601: LD_INT 1
30603: ARRAY
30604: PPUSH
30605: LD_VAR 0 3
30609: PUSH
30610: LD_INT 2
30612: ARRAY
30613: PPUSH
30614: CALL_OW 235
30618: GO 30593
30620: POP
30621: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30622: LD_ADDR_EXP 96
30626: PUSH
30627: LD_EXP 96
30631: PPUSH
30632: LD_VAR 0 4
30636: PPUSH
30637: EMPTY
30638: PPUSH
30639: CALL_OW 1
30643: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30644: LD_VAR 0 1
30648: PPUSH
30649: LD_INT 0
30651: PPUSH
30652: CALL_OW 505
// end ; end ;
30656: LD_VAR 0 2
30660: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30661: LD_INT 0
30663: PPUSH
30664: PPUSH
30665: PPUSH
// if not hack in hackTanks or not vehicles then
30666: LD_VAR 0 1
30670: PUSH
30671: LD_EXP 95
30675: IN
30676: NOT
30677: PUSH
30678: LD_VAR 0 2
30682: NOT
30683: OR
30684: IFFALSE 30688
// exit ;
30686: GO 30963
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30688: LD_ADDR_VAR 0 2
30692: PUSH
30693: LD_VAR 0 1
30697: PPUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: LD_INT 1
30705: PPUSH
30706: LD_INT 1
30708: PPUSH
30709: CALL 38748 0 4
30713: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30714: LD_ADDR_VAR 0 5
30718: PUSH
30719: LD_EXP 95
30723: PPUSH
30724: LD_VAR 0 1
30728: PPUSH
30729: CALL 38098 0 2
30733: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30734: LD_EXP 96
30738: PUSH
30739: LD_VAR 0 5
30743: ARRAY
30744: PUSH
30745: LD_EXP 97
30749: LESS
30750: IFFALSE 30939
// begin for i := 1 to vehicles do
30752: LD_ADDR_VAR 0 4
30756: PUSH
30757: DOUBLE
30758: LD_INT 1
30760: DEC
30761: ST_TO_ADDR
30762: LD_VAR 0 2
30766: PUSH
30767: FOR_TO
30768: IFFALSE 30937
// begin if hackTanksCaptured [ index ] = hackLimit then
30770: LD_EXP 96
30774: PUSH
30775: LD_VAR 0 5
30779: ARRAY
30780: PUSH
30781: LD_EXP 97
30785: EQUAL
30786: IFFALSE 30790
// break ;
30788: GO 30937
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30790: LD_ADDR_EXP 99
30794: PUSH
30795: LD_EXP 99
30799: PPUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: LD_EXP 99
30809: PUSH
30810: LD_VAR 0 5
30814: ARRAY
30815: PUSH
30816: LD_INT 1
30818: PLUS
30819: PPUSH
30820: CALL_OW 1
30824: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30825: LD_ADDR_EXP 96
30829: PUSH
30830: LD_EXP 96
30834: PPUSH
30835: LD_VAR 0 5
30839: PUSH
30840: LD_EXP 96
30844: PUSH
30845: LD_VAR 0 5
30849: ARRAY
30850: PUSH
30851: LD_INT 1
30853: PLUS
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PPUSH
30859: LD_VAR 0 2
30863: PUSH
30864: LD_VAR 0 4
30868: ARRAY
30869: PUSH
30870: LD_VAR 0 2
30874: PUSH
30875: LD_VAR 0 4
30879: ARRAY
30880: PPUSH
30881: CALL_OW 255
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PPUSH
30890: CALL 38313 0 3
30894: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30895: LD_VAR 0 2
30899: PUSH
30900: LD_VAR 0 4
30904: ARRAY
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 255
30915: PPUSH
30916: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30920: LD_VAR 0 2
30924: PUSH
30925: LD_VAR 0 4
30929: ARRAY
30930: PPUSH
30931: CALL_OW 141
// end ;
30935: GO 30767
30937: POP
30938: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30939: LD_VAR 0 1
30943: PPUSH
30944: LD_EXP 96
30948: PUSH
30949: LD_VAR 0 5
30953: ARRAY
30954: PUSH
30955: LD_INT 0
30957: PLUS
30958: PPUSH
30959: CALL_OW 505
// end ;
30963: LD_VAR 0 3
30967: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30968: LD_INT 0
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
// if not hack in hackTanks then
30974: LD_VAR 0 1
30978: PUSH
30979: LD_EXP 95
30983: IN
30984: NOT
30985: IFFALSE 30989
// exit ;
30987: GO 31229
// index := GetElementIndex ( hackTanks , hack ) ;
30989: LD_ADDR_VAR 0 4
30993: PUSH
30994: LD_EXP 95
30998: PPUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: CALL 38098 0 2
31008: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: DOUBLE
31015: LD_EXP 96
31019: PUSH
31020: LD_VAR 0 4
31024: ARRAY
31025: INC
31026: ST_TO_ADDR
31027: LD_INT 1
31029: PUSH
31030: FOR_DOWNTO
31031: IFFALSE 31203
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31033: LD_ADDR_VAR 0 5
31037: PUSH
31038: LD_EXP 96
31042: PUSH
31043: LD_VAR 0 4
31047: ARRAY
31048: PUSH
31049: LD_VAR 0 3
31053: ARRAY
31054: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31055: LD_VAR 0 5
31059: PUSH
31060: LD_INT 1
31062: ARRAY
31063: PPUSH
31064: CALL_OW 302
31068: NOT
31069: PUSH
31070: LD_VAR 0 5
31074: PUSH
31075: LD_INT 1
31077: ARRAY
31078: PPUSH
31079: CALL_OW 255
31083: PUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL_OW 255
31093: NONEQUAL
31094: OR
31095: IFFALSE 31201
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31097: LD_VAR 0 5
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: CALL_OW 305
31110: PUSH
31111: LD_VAR 0 5
31115: PUSH
31116: LD_INT 1
31118: ARRAY
31119: PPUSH
31120: CALL_OW 255
31124: PUSH
31125: LD_VAR 0 1
31129: PPUSH
31130: CALL_OW 255
31134: EQUAL
31135: AND
31136: IFFALSE 31160
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31138: LD_VAR 0 5
31142: PUSH
31143: LD_INT 1
31145: ARRAY
31146: PPUSH
31147: LD_VAR 0 5
31151: PUSH
31152: LD_INT 2
31154: ARRAY
31155: PPUSH
31156: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31160: LD_ADDR_EXP 96
31164: PUSH
31165: LD_EXP 96
31169: PPUSH
31170: LD_VAR 0 4
31174: PPUSH
31175: LD_EXP 96
31179: PUSH
31180: LD_VAR 0 4
31184: ARRAY
31185: PPUSH
31186: LD_VAR 0 3
31190: PPUSH
31191: CALL_OW 3
31195: PPUSH
31196: CALL_OW 1
31200: ST_TO_ADDR
// end ; end ;
31201: GO 31030
31203: POP
31204: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31205: LD_VAR 0 1
31209: PPUSH
31210: LD_EXP 96
31214: PUSH
31215: LD_VAR 0 4
31219: ARRAY
31220: PUSH
31221: LD_INT 0
31223: PLUS
31224: PPUSH
31225: CALL_OW 505
// end ;
31229: LD_VAR 0 2
31233: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
// if not hack in hackTanks then
31240: LD_VAR 0 1
31244: PUSH
31245: LD_EXP 95
31249: IN
31250: NOT
31251: IFFALSE 31255
// exit ;
31253: GO 31340
// index := GetElementIndex ( hackTanks , hack ) ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_EXP 95
31264: PPUSH
31265: LD_VAR 0 1
31269: PPUSH
31270: CALL 38098 0 2
31274: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31275: LD_ADDR_VAR 0 4
31279: PUSH
31280: DOUBLE
31281: LD_INT 1
31283: DEC
31284: ST_TO_ADDR
31285: LD_EXP 96
31289: PUSH
31290: LD_VAR 0 5
31294: ARRAY
31295: PUSH
31296: FOR_TO
31297: IFFALSE 31338
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31299: LD_EXP 96
31303: PUSH
31304: LD_VAR 0 5
31308: ARRAY
31309: PUSH
31310: LD_VAR 0 4
31314: ARRAY
31315: PUSH
31316: LD_INT 1
31318: ARRAY
31319: PUSH
31320: LD_VAR 0 2
31324: EQUAL
31325: IFFALSE 31336
// KillUnit ( vehicle ) ;
31327: LD_VAR 0 2
31331: PPUSH
31332: CALL_OW 66
31336: GO 31296
31338: POP
31339: POP
// end ;
31340: LD_VAR 0 3
31344: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31345: LD_EXP 100
31349: NOT
31350: IFFALSE 31385
31352: GO 31354
31354: DISABLE
// begin initMiner := true ;
31355: LD_ADDR_EXP 100
31359: PUSH
31360: LD_INT 1
31362: ST_TO_ADDR
// minersList := [ ] ;
31363: LD_ADDR_EXP 101
31367: PUSH
31368: EMPTY
31369: ST_TO_ADDR
// minerMinesList := [ ] ;
31370: LD_ADDR_EXP 102
31374: PUSH
31375: EMPTY
31376: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31377: LD_ADDR_EXP 103
31381: PUSH
31382: LD_INT 5
31384: ST_TO_ADDR
// end ;
31385: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31386: LD_EXP 100
31390: PUSH
31391: LD_INT 34
31393: PUSH
31394: LD_INT 81
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 69
31405: AND
31406: IFFALSE 31867
31408: GO 31410
31410: DISABLE
31411: LD_INT 0
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
// begin enable ;
31417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31418: LD_ADDR_VAR 0 1
31422: PUSH
31423: LD_INT 34
31425: PUSH
31426: LD_INT 81
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PPUSH
31433: CALL_OW 69
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31511
// begin if not i in minersList then
31441: LD_VAR 0 1
31445: PUSH
31446: LD_EXP 101
31450: IN
31451: NOT
31452: IFFALSE 31509
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31454: LD_ADDR_EXP 101
31458: PUSH
31459: LD_EXP 101
31463: PPUSH
31464: LD_EXP 101
31468: PUSH
31469: LD_INT 1
31471: PLUS
31472: PPUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: CALL_OW 1
31482: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31483: LD_ADDR_EXP 102
31487: PUSH
31488: LD_EXP 102
31492: PPUSH
31493: LD_EXP 102
31497: PUSH
31498: LD_INT 1
31500: PLUS
31501: PPUSH
31502: EMPTY
31503: PPUSH
31504: CALL_OW 1
31508: ST_TO_ADDR
// end end ;
31509: GO 31438
31511: POP
31512: POP
// for i := minerMinesList downto 1 do
31513: LD_ADDR_VAR 0 1
31517: PUSH
31518: DOUBLE
31519: LD_EXP 102
31523: INC
31524: ST_TO_ADDR
31525: LD_INT 1
31527: PUSH
31528: FOR_DOWNTO
31529: IFFALSE 31865
// begin if IsLive ( minersList [ i ] ) then
31531: LD_EXP 101
31535: PUSH
31536: LD_VAR 0 1
31540: ARRAY
31541: PPUSH
31542: CALL_OW 300
31546: IFFALSE 31574
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31548: LD_EXP 101
31552: PUSH
31553: LD_VAR 0 1
31557: ARRAY
31558: PPUSH
31559: LD_EXP 102
31563: PUSH
31564: LD_VAR 0 1
31568: ARRAY
31569: PPUSH
31570: CALL_OW 505
// if not minerMinesList [ i ] then
31574: LD_EXP 102
31578: PUSH
31579: LD_VAR 0 1
31583: ARRAY
31584: NOT
31585: IFFALSE 31589
// continue ;
31587: GO 31528
// for j := minerMinesList [ i ] downto 1 do
31589: LD_ADDR_VAR 0 2
31593: PUSH
31594: DOUBLE
31595: LD_EXP 102
31599: PUSH
31600: LD_VAR 0 1
31604: ARRAY
31605: INC
31606: ST_TO_ADDR
31607: LD_INT 1
31609: PUSH
31610: FOR_DOWNTO
31611: IFFALSE 31861
// begin side := GetSide ( minersList [ i ] ) ;
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_EXP 101
31622: PUSH
31623: LD_VAR 0 1
31627: ARRAY
31628: PPUSH
31629: CALL_OW 255
31633: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31634: LD_ADDR_VAR 0 4
31638: PUSH
31639: LD_EXP 102
31643: PUSH
31644: LD_VAR 0 1
31648: ARRAY
31649: PUSH
31650: LD_VAR 0 2
31654: ARRAY
31655: PUSH
31656: LD_INT 1
31658: ARRAY
31659: PPUSH
31660: LD_EXP 102
31664: PUSH
31665: LD_VAR 0 1
31669: ARRAY
31670: PUSH
31671: LD_VAR 0 2
31675: ARRAY
31676: PUSH
31677: LD_INT 2
31679: ARRAY
31680: PPUSH
31681: CALL_OW 428
31685: ST_TO_ADDR
// if not tmp then
31686: LD_VAR 0 4
31690: NOT
31691: IFFALSE 31695
// continue ;
31693: GO 31610
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31695: LD_VAR 0 4
31699: PUSH
31700: LD_INT 81
31702: PUSH
31703: LD_VAR 0 3
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PPUSH
31712: CALL_OW 69
31716: IN
31717: PUSH
31718: LD_EXP 102
31722: PUSH
31723: LD_VAR 0 1
31727: ARRAY
31728: PUSH
31729: LD_VAR 0 2
31733: ARRAY
31734: PUSH
31735: LD_INT 1
31737: ARRAY
31738: PPUSH
31739: LD_EXP 102
31743: PUSH
31744: LD_VAR 0 1
31748: ARRAY
31749: PUSH
31750: LD_VAR 0 2
31754: ARRAY
31755: PUSH
31756: LD_INT 2
31758: ARRAY
31759: PPUSH
31760: CALL_OW 458
31764: AND
31765: IFFALSE 31859
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31767: LD_EXP 102
31771: PUSH
31772: LD_VAR 0 1
31776: ARRAY
31777: PUSH
31778: LD_VAR 0 2
31782: ARRAY
31783: PUSH
31784: LD_INT 1
31786: ARRAY
31787: PPUSH
31788: LD_EXP 102
31792: PUSH
31793: LD_VAR 0 1
31797: ARRAY
31798: PUSH
31799: LD_VAR 0 2
31803: ARRAY
31804: PUSH
31805: LD_INT 2
31807: ARRAY
31808: PPUSH
31809: LD_VAR 0 3
31813: PPUSH
31814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31818: LD_ADDR_EXP 102
31822: PUSH
31823: LD_EXP 102
31827: PPUSH
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_EXP 102
31837: PUSH
31838: LD_VAR 0 1
31842: ARRAY
31843: PPUSH
31844: LD_VAR 0 2
31848: PPUSH
31849: CALL_OW 3
31853: PPUSH
31854: CALL_OW 1
31858: ST_TO_ADDR
// end ; end ;
31859: GO 31610
31861: POP
31862: POP
// end ;
31863: GO 31528
31865: POP
31866: POP
// end ;
31867: PPOPN 4
31869: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31870: LD_INT 0
31872: PPUSH
31873: PPUSH
// result := false ;
31874: LD_ADDR_VAR 0 4
31878: PUSH
31879: LD_INT 0
31881: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 264
31891: PUSH
31892: LD_INT 81
31894: EQUAL
31895: NOT
31896: IFFALSE 31900
// exit ;
31898: GO 32140
// index := GetElementIndex ( minersList , unit ) ;
31900: LD_ADDR_VAR 0 5
31904: PUSH
31905: LD_EXP 101
31909: PPUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL 38098 0 2
31919: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31920: LD_EXP 102
31924: PUSH
31925: LD_VAR 0 5
31929: ARRAY
31930: PUSH
31931: LD_EXP 103
31935: GREATEREQUAL
31936: IFFALSE 31940
// exit ;
31938: GO 32140
// ComMoveXY ( unit , x , y ) ;
31940: LD_VAR 0 1
31944: PPUSH
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 3
31954: PPUSH
31955: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31959: LD_INT 35
31961: PPUSH
31962: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31966: LD_VAR 0 1
31970: PPUSH
31971: LD_VAR 0 2
31975: PPUSH
31976: LD_VAR 0 3
31980: PPUSH
31981: CALL 69850 0 3
31985: NOT
31986: PUSH
31987: LD_VAR 0 1
31991: PPUSH
31992: CALL_OW 314
31996: AND
31997: IFFALSE 32001
// exit ;
31999: GO 32140
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: CALL_OW 428
32015: PUSH
32016: LD_VAR 0 1
32020: EQUAL
32021: PUSH
32022: LD_VAR 0 1
32026: PPUSH
32027: CALL_OW 314
32031: NOT
32032: AND
32033: IFFALSE 31959
// PlaySoundXY ( x , y , PlantMine ) ;
32035: LD_VAR 0 2
32039: PPUSH
32040: LD_VAR 0 3
32044: PPUSH
32045: LD_STRING PlantMine
32047: PPUSH
32048: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32052: LD_VAR 0 2
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: LD_VAR 0 1
32066: PPUSH
32067: CALL_OW 255
32071: PPUSH
32072: LD_INT 0
32074: PPUSH
32075: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32079: LD_ADDR_EXP 102
32083: PUSH
32084: LD_EXP 102
32088: PPUSH
32089: LD_VAR 0 5
32093: PUSH
32094: LD_EXP 102
32098: PUSH
32099: LD_VAR 0 5
32103: ARRAY
32104: PUSH
32105: LD_INT 1
32107: PLUS
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PPUSH
32113: LD_VAR 0 2
32117: PUSH
32118: LD_VAR 0 3
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PPUSH
32127: CALL 38313 0 3
32131: ST_TO_ADDR
// result := true ;
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: LD_INT 1
32139: ST_TO_ADDR
// end ;
32140: LD_VAR 0 4
32144: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32145: LD_INT 0
32147: PPUSH
32148: PPUSH
32149: PPUSH
// if not unit in minersList then
32150: LD_VAR 0 1
32154: PUSH
32155: LD_EXP 101
32159: IN
32160: NOT
32161: IFFALSE 32165
// exit ;
32163: GO 32557
// index := GetElementIndex ( minersList , unit ) ;
32165: LD_ADDR_VAR 0 6
32169: PUSH
32170: LD_EXP 101
32174: PPUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: CALL 38098 0 2
32184: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32185: LD_ADDR_VAR 0 5
32189: PUSH
32190: DOUBLE
32191: LD_EXP 102
32195: PUSH
32196: LD_VAR 0 6
32200: ARRAY
32201: INC
32202: ST_TO_ADDR
32203: LD_INT 1
32205: PUSH
32206: FOR_DOWNTO
32207: IFFALSE 32368
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32209: LD_EXP 102
32213: PUSH
32214: LD_VAR 0 6
32218: ARRAY
32219: PUSH
32220: LD_VAR 0 5
32224: ARRAY
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: PUSH
32230: LD_VAR 0 2
32234: EQUAL
32235: PUSH
32236: LD_EXP 102
32240: PUSH
32241: LD_VAR 0 6
32245: ARRAY
32246: PUSH
32247: LD_VAR 0 5
32251: ARRAY
32252: PUSH
32253: LD_INT 2
32255: ARRAY
32256: PUSH
32257: LD_VAR 0 3
32261: EQUAL
32262: AND
32263: IFFALSE 32366
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32265: LD_EXP 102
32269: PUSH
32270: LD_VAR 0 6
32274: ARRAY
32275: PUSH
32276: LD_VAR 0 5
32280: ARRAY
32281: PUSH
32282: LD_INT 1
32284: ARRAY
32285: PPUSH
32286: LD_EXP 102
32290: PUSH
32291: LD_VAR 0 6
32295: ARRAY
32296: PUSH
32297: LD_VAR 0 5
32301: ARRAY
32302: PUSH
32303: LD_INT 2
32305: ARRAY
32306: PPUSH
32307: LD_VAR 0 1
32311: PPUSH
32312: CALL_OW 255
32316: PPUSH
32317: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32321: LD_ADDR_EXP 102
32325: PUSH
32326: LD_EXP 102
32330: PPUSH
32331: LD_VAR 0 6
32335: PPUSH
32336: LD_EXP 102
32340: PUSH
32341: LD_VAR 0 6
32345: ARRAY
32346: PPUSH
32347: LD_VAR 0 5
32351: PPUSH
32352: CALL_OW 3
32356: PPUSH
32357: CALL_OW 1
32361: ST_TO_ADDR
// exit ;
32362: POP
32363: POP
32364: GO 32557
// end ; end ;
32366: GO 32206
32368: POP
32369: POP
// for i := minerMinesList [ index ] downto 1 do
32370: LD_ADDR_VAR 0 5
32374: PUSH
32375: DOUBLE
32376: LD_EXP 102
32380: PUSH
32381: LD_VAR 0 6
32385: ARRAY
32386: INC
32387: ST_TO_ADDR
32388: LD_INT 1
32390: PUSH
32391: FOR_DOWNTO
32392: IFFALSE 32555
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32394: LD_EXP 102
32398: PUSH
32399: LD_VAR 0 6
32403: ARRAY
32404: PUSH
32405: LD_VAR 0 5
32409: ARRAY
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: PPUSH
32415: LD_EXP 102
32419: PUSH
32420: LD_VAR 0 6
32424: ARRAY
32425: PUSH
32426: LD_VAR 0 5
32430: ARRAY
32431: PUSH
32432: LD_INT 2
32434: ARRAY
32435: PPUSH
32436: LD_VAR 0 2
32440: PPUSH
32441: LD_VAR 0 3
32445: PPUSH
32446: CALL_OW 298
32450: PUSH
32451: LD_INT 6
32453: LESS
32454: IFFALSE 32553
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32456: LD_EXP 102
32460: PUSH
32461: LD_VAR 0 6
32465: ARRAY
32466: PUSH
32467: LD_VAR 0 5
32471: ARRAY
32472: PUSH
32473: LD_INT 1
32475: ARRAY
32476: PPUSH
32477: LD_EXP 102
32481: PUSH
32482: LD_VAR 0 6
32486: ARRAY
32487: PUSH
32488: LD_VAR 0 5
32492: ARRAY
32493: PUSH
32494: LD_INT 2
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 1
32502: PPUSH
32503: CALL_OW 255
32507: PPUSH
32508: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32512: LD_ADDR_EXP 102
32516: PUSH
32517: LD_EXP 102
32521: PPUSH
32522: LD_VAR 0 6
32526: PPUSH
32527: LD_EXP 102
32531: PUSH
32532: LD_VAR 0 6
32536: ARRAY
32537: PPUSH
32538: LD_VAR 0 5
32542: PPUSH
32543: CALL_OW 3
32547: PPUSH
32548: CALL_OW 1
32552: ST_TO_ADDR
// end ; end ;
32553: GO 32391
32555: POP
32556: POP
// end ;
32557: LD_VAR 0 4
32561: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32562: LD_INT 0
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 264
32582: PUSH
32583: LD_INT 81
32585: EQUAL
32586: NOT
32587: PUSH
32588: LD_VAR 0 1
32592: PUSH
32593: LD_EXP 101
32597: IN
32598: NOT
32599: OR
32600: IFFALSE 32604
// exit ;
32602: GO 32926
// index := GetElementIndex ( minersList , unit ) ;
32604: LD_ADDR_VAR 0 6
32608: PUSH
32609: LD_EXP 101
32613: PPUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL 38098 0 2
32623: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32624: LD_ADDR_VAR 0 8
32628: PUSH
32629: LD_EXP 103
32633: PUSH
32634: LD_EXP 102
32638: PUSH
32639: LD_VAR 0 6
32643: ARRAY
32644: MINUS
32645: ST_TO_ADDR
// if not minesFreeAmount then
32646: LD_VAR 0 8
32650: NOT
32651: IFFALSE 32655
// exit ;
32653: GO 32926
// tmp := [ ] ;
32655: LD_ADDR_VAR 0 7
32659: PUSH
32660: EMPTY
32661: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32662: LD_ADDR_VAR 0 5
32666: PUSH
32667: DOUBLE
32668: LD_INT 1
32670: DEC
32671: ST_TO_ADDR
32672: LD_VAR 0 8
32676: PUSH
32677: FOR_TO
32678: IFFALSE 32873
// begin _d := rand ( 0 , 5 ) ;
32680: LD_ADDR_VAR 0 11
32684: PUSH
32685: LD_INT 0
32687: PPUSH
32688: LD_INT 5
32690: PPUSH
32691: CALL_OW 12
32695: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32696: LD_ADDR_VAR 0 12
32700: PUSH
32701: LD_INT 2
32703: PPUSH
32704: LD_INT 6
32706: PPUSH
32707: CALL_OW 12
32711: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32712: LD_ADDR_VAR 0 9
32716: PUSH
32717: LD_VAR 0 2
32721: PPUSH
32722: LD_VAR 0 11
32726: PPUSH
32727: LD_VAR 0 12
32731: PPUSH
32732: CALL_OW 272
32736: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32737: LD_ADDR_VAR 0 10
32741: PUSH
32742: LD_VAR 0 3
32746: PPUSH
32747: LD_VAR 0 11
32751: PPUSH
32752: LD_VAR 0 12
32756: PPUSH
32757: CALL_OW 273
32761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32762: LD_VAR 0 9
32766: PPUSH
32767: LD_VAR 0 10
32771: PPUSH
32772: CALL_OW 488
32776: PUSH
32777: LD_VAR 0 9
32781: PUSH
32782: LD_VAR 0 10
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_VAR 0 7
32795: IN
32796: NOT
32797: AND
32798: PUSH
32799: LD_VAR 0 9
32803: PPUSH
32804: LD_VAR 0 10
32808: PPUSH
32809: CALL_OW 458
32813: NOT
32814: AND
32815: IFFALSE 32857
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32817: LD_ADDR_VAR 0 7
32821: PUSH
32822: LD_VAR 0 7
32826: PPUSH
32827: LD_VAR 0 7
32831: PUSH
32832: LD_INT 1
32834: PLUS
32835: PPUSH
32836: LD_VAR 0 9
32840: PUSH
32841: LD_VAR 0 10
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PPUSH
32850: CALL_OW 1
32854: ST_TO_ADDR
32855: GO 32871
// i := i - 1 ;
32857: LD_ADDR_VAR 0 5
32861: PUSH
32862: LD_VAR 0 5
32866: PUSH
32867: LD_INT 1
32869: MINUS
32870: ST_TO_ADDR
// end ;
32871: GO 32677
32873: POP
32874: POP
// for i in tmp do
32875: LD_ADDR_VAR 0 5
32879: PUSH
32880: LD_VAR 0 7
32884: PUSH
32885: FOR_IN
32886: IFFALSE 32924
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32888: LD_VAR 0 1
32892: PPUSH
32893: LD_VAR 0 5
32897: PUSH
32898: LD_INT 1
32900: ARRAY
32901: PPUSH
32902: LD_VAR 0 5
32906: PUSH
32907: LD_INT 2
32909: ARRAY
32910: PPUSH
32911: CALL 31870 0 3
32915: NOT
32916: IFFALSE 32922
// exit ;
32918: POP
32919: POP
32920: GO 32926
32922: GO 32885
32924: POP
32925: POP
// end ;
32926: LD_VAR 0 4
32930: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
// if not GetClass ( unit ) = class_sniper then
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 257
32949: PUSH
32950: LD_INT 5
32952: EQUAL
32953: NOT
32954: IFFALSE 32958
// exit ;
32956: GO 33346
// dist := 8 ;
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_INT 8
32965: ST_TO_ADDR
// viewRange := 12 ;
32966: LD_ADDR_VAR 0 7
32970: PUSH
32971: LD_INT 12
32973: ST_TO_ADDR
// side := GetSide ( unit ) ;
32974: LD_ADDR_VAR 0 6
32978: PUSH
32979: LD_VAR 0 1
32983: PPUSH
32984: CALL_OW 255
32988: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32989: LD_INT 61
32991: PPUSH
32992: LD_VAR 0 6
32996: PPUSH
32997: CALL_OW 321
33001: PUSH
33002: LD_INT 2
33004: EQUAL
33005: IFFALSE 33015
// viewRange := 16 ;
33007: LD_ADDR_VAR 0 7
33011: PUSH
33012: LD_INT 16
33014: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33015: LD_VAR 0 1
33019: PPUSH
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: CALL_OW 297
33034: PUSH
33035: LD_VAR 0 5
33039: GREATER
33040: IFFALSE 33119
// begin ComMoveXY ( unit , x , y ) ;
33042: LD_VAR 0 1
33046: PPUSH
33047: LD_VAR 0 2
33051: PPUSH
33052: LD_VAR 0 3
33056: PPUSH
33057: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33061: LD_INT 35
33063: PPUSH
33064: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_VAR 0 2
33077: PPUSH
33078: LD_VAR 0 3
33082: PPUSH
33083: CALL 69850 0 3
33087: NOT
33088: IFFALSE 33092
// exit ;
33090: GO 33346
// until GetDistUnitXY ( unit , x , y ) < dist ;
33092: LD_VAR 0 1
33096: PPUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: LD_VAR 0 3
33106: PPUSH
33107: CALL_OW 297
33111: PUSH
33112: LD_VAR 0 5
33116: LESS
33117: IFFALSE 33061
// end ; ComTurnXY ( unit , x , y ) ;
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 2
33128: PPUSH
33129: LD_VAR 0 3
33133: PPUSH
33134: CALL_OW 118
// wait ( 5 ) ;
33138: LD_INT 5
33140: PPUSH
33141: CALL_OW 67
// _d := GetDir ( unit ) ;
33145: LD_ADDR_VAR 0 10
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 254
33159: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33160: LD_ADDR_VAR 0 8
33164: PUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: CALL_OW 250
33174: PPUSH
33175: LD_VAR 0 10
33179: PPUSH
33180: LD_VAR 0 5
33184: PPUSH
33185: CALL_OW 272
33189: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33190: LD_ADDR_VAR 0 9
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 251
33204: PPUSH
33205: LD_VAR 0 10
33209: PPUSH
33210: LD_VAR 0 5
33214: PPUSH
33215: CALL_OW 273
33219: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33220: LD_VAR 0 8
33224: PPUSH
33225: LD_VAR 0 9
33229: PPUSH
33230: CALL_OW 488
33234: NOT
33235: IFFALSE 33239
// exit ;
33237: GO 33346
// ComAnimCustom ( unit , 1 ) ;
33239: LD_VAR 0 1
33243: PPUSH
33244: LD_INT 1
33246: PPUSH
33247: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33251: LD_VAR 0 8
33255: PPUSH
33256: LD_VAR 0 9
33260: PPUSH
33261: LD_VAR 0 6
33265: PPUSH
33266: LD_VAR 0 7
33270: PPUSH
33271: CALL_OW 330
// repeat wait ( 1 ) ;
33275: LD_INT 1
33277: PPUSH
33278: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL_OW 316
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 314
33301: OR
33302: PUSH
33303: LD_VAR 0 1
33307: PPUSH
33308: CALL_OW 302
33312: NOT
33313: OR
33314: PUSH
33315: LD_VAR 0 1
33319: PPUSH
33320: CALL_OW 301
33324: OR
33325: IFFALSE 33275
// RemoveSeeing ( _x , _y , side ) ;
33327: LD_VAR 0 8
33331: PPUSH
33332: LD_VAR 0 9
33336: PPUSH
33337: LD_VAR 0 6
33341: PPUSH
33342: CALL_OW 331
// end ; end_of_file
33346: LD_VAR 0 4
33350: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33351: LD_INT 0
33353: PPUSH
33354: PPUSH
// if exist_mode then
33355: LD_VAR 0 2
33359: IFFALSE 33384
// unit := CreateCharacter ( prefix & ident ) else
33361: LD_ADDR_VAR 0 5
33365: PUSH
33366: LD_VAR 0 3
33370: PUSH
33371: LD_VAR 0 1
33375: STR
33376: PPUSH
33377: CALL_OW 34
33381: ST_TO_ADDR
33382: GO 33399
// unit := NewCharacter ( ident ) ;
33384: LD_ADDR_VAR 0 5
33388: PUSH
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL_OW 25
33398: ST_TO_ADDR
// result := unit ;
33399: LD_ADDR_VAR 0 4
33403: PUSH
33404: LD_VAR 0 5
33408: ST_TO_ADDR
// end ;
33409: LD_VAR 0 4
33413: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
// if not side or not nation then
33418: LD_VAR 0 1
33422: NOT
33423: PUSH
33424: LD_VAR 0 2
33428: NOT
33429: OR
33430: IFFALSE 33434
// exit ;
33432: GO 34202
// case nation of nation_american :
33434: LD_VAR 0 2
33438: PUSH
33439: LD_INT 1
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33661
33447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33448: LD_ADDR_VAR 0 4
33452: PUSH
33453: LD_INT 35
33455: PUSH
33456: LD_INT 45
33458: PUSH
33459: LD_INT 46
33461: PUSH
33462: LD_INT 47
33464: PUSH
33465: LD_INT 82
33467: PUSH
33468: LD_INT 83
33470: PUSH
33471: LD_INT 84
33473: PUSH
33474: LD_INT 85
33476: PUSH
33477: LD_INT 86
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: LD_INT 6
33488: PUSH
33489: LD_INT 15
33491: PUSH
33492: LD_INT 16
33494: PUSH
33495: LD_INT 7
33497: PUSH
33498: LD_INT 12
33500: PUSH
33501: LD_INT 13
33503: PUSH
33504: LD_INT 10
33506: PUSH
33507: LD_INT 14
33509: PUSH
33510: LD_INT 20
33512: PUSH
33513: LD_INT 21
33515: PUSH
33516: LD_INT 22
33518: PUSH
33519: LD_INT 25
33521: PUSH
33522: LD_INT 32
33524: PUSH
33525: LD_INT 27
33527: PUSH
33528: LD_INT 36
33530: PUSH
33531: LD_INT 69
33533: PUSH
33534: LD_INT 39
33536: PUSH
33537: LD_INT 34
33539: PUSH
33540: LD_INT 40
33542: PUSH
33543: LD_INT 48
33545: PUSH
33546: LD_INT 49
33548: PUSH
33549: LD_INT 50
33551: PUSH
33552: LD_INT 51
33554: PUSH
33555: LD_INT 52
33557: PUSH
33558: LD_INT 53
33560: PUSH
33561: LD_INT 54
33563: PUSH
33564: LD_INT 55
33566: PUSH
33567: LD_INT 56
33569: PUSH
33570: LD_INT 57
33572: PUSH
33573: LD_INT 58
33575: PUSH
33576: LD_INT 59
33578: PUSH
33579: LD_INT 60
33581: PUSH
33582: LD_INT 61
33584: PUSH
33585: LD_INT 62
33587: PUSH
33588: LD_INT 80
33590: PUSH
33591: LD_INT 82
33593: PUSH
33594: LD_INT 83
33596: PUSH
33597: LD_INT 84
33599: PUSH
33600: LD_INT 85
33602: PUSH
33603: LD_INT 86
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
33659: GO 34126
33661: LD_INT 2
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33895
33669: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33670: LD_ADDR_VAR 0 4
33674: PUSH
33675: LD_INT 35
33677: PUSH
33678: LD_INT 45
33680: PUSH
33681: LD_INT 46
33683: PUSH
33684: LD_INT 47
33686: PUSH
33687: LD_INT 82
33689: PUSH
33690: LD_INT 83
33692: PUSH
33693: LD_INT 84
33695: PUSH
33696: LD_INT 85
33698: PUSH
33699: LD_INT 87
33701: PUSH
33702: LD_INT 70
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 11
33710: PUSH
33711: LD_INT 3
33713: PUSH
33714: LD_INT 4
33716: PUSH
33717: LD_INT 5
33719: PUSH
33720: LD_INT 6
33722: PUSH
33723: LD_INT 15
33725: PUSH
33726: LD_INT 18
33728: PUSH
33729: LD_INT 7
33731: PUSH
33732: LD_INT 17
33734: PUSH
33735: LD_INT 8
33737: PUSH
33738: LD_INT 20
33740: PUSH
33741: LD_INT 21
33743: PUSH
33744: LD_INT 22
33746: PUSH
33747: LD_INT 72
33749: PUSH
33750: LD_INT 26
33752: PUSH
33753: LD_INT 69
33755: PUSH
33756: LD_INT 39
33758: PUSH
33759: LD_INT 40
33761: PUSH
33762: LD_INT 41
33764: PUSH
33765: LD_INT 42
33767: PUSH
33768: LD_INT 43
33770: PUSH
33771: LD_INT 48
33773: PUSH
33774: LD_INT 49
33776: PUSH
33777: LD_INT 50
33779: PUSH
33780: LD_INT 51
33782: PUSH
33783: LD_INT 52
33785: PUSH
33786: LD_INT 53
33788: PUSH
33789: LD_INT 54
33791: PUSH
33792: LD_INT 55
33794: PUSH
33795: LD_INT 56
33797: PUSH
33798: LD_INT 60
33800: PUSH
33801: LD_INT 61
33803: PUSH
33804: LD_INT 62
33806: PUSH
33807: LD_INT 66
33809: PUSH
33810: LD_INT 67
33812: PUSH
33813: LD_INT 68
33815: PUSH
33816: LD_INT 81
33818: PUSH
33819: LD_INT 82
33821: PUSH
33822: LD_INT 83
33824: PUSH
33825: LD_INT 84
33827: PUSH
33828: LD_INT 85
33830: PUSH
33831: LD_INT 87
33833: PUSH
33834: LD_INT 88
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
33893: GO 34126
33895: LD_INT 3
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 34125
33903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33904: LD_ADDR_VAR 0 4
33908: PUSH
33909: LD_INT 46
33911: PUSH
33912: LD_INT 47
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 82
33923: PUSH
33924: LD_INT 83
33926: PUSH
33927: LD_INT 84
33929: PUSH
33930: LD_INT 85
33932: PUSH
33933: LD_INT 86
33935: PUSH
33936: LD_INT 11
33938: PUSH
33939: LD_INT 9
33941: PUSH
33942: LD_INT 20
33944: PUSH
33945: LD_INT 19
33947: PUSH
33948: LD_INT 21
33950: PUSH
33951: LD_INT 24
33953: PUSH
33954: LD_INT 22
33956: PUSH
33957: LD_INT 25
33959: PUSH
33960: LD_INT 28
33962: PUSH
33963: LD_INT 29
33965: PUSH
33966: LD_INT 30
33968: PUSH
33969: LD_INT 31
33971: PUSH
33972: LD_INT 37
33974: PUSH
33975: LD_INT 38
33977: PUSH
33978: LD_INT 32
33980: PUSH
33981: LD_INT 27
33983: PUSH
33984: LD_INT 33
33986: PUSH
33987: LD_INT 69
33989: PUSH
33990: LD_INT 39
33992: PUSH
33993: LD_INT 34
33995: PUSH
33996: LD_INT 40
33998: PUSH
33999: LD_INT 71
34001: PUSH
34002: LD_INT 23
34004: PUSH
34005: LD_INT 44
34007: PUSH
34008: LD_INT 48
34010: PUSH
34011: LD_INT 49
34013: PUSH
34014: LD_INT 50
34016: PUSH
34017: LD_INT 51
34019: PUSH
34020: LD_INT 52
34022: PUSH
34023: LD_INT 53
34025: PUSH
34026: LD_INT 54
34028: PUSH
34029: LD_INT 55
34031: PUSH
34032: LD_INT 56
34034: PUSH
34035: LD_INT 57
34037: PUSH
34038: LD_INT 58
34040: PUSH
34041: LD_INT 59
34043: PUSH
34044: LD_INT 63
34046: PUSH
34047: LD_INT 64
34049: PUSH
34050: LD_INT 65
34052: PUSH
34053: LD_INT 82
34055: PUSH
34056: LD_INT 83
34058: PUSH
34059: LD_INT 84
34061: PUSH
34062: LD_INT 85
34064: PUSH
34065: LD_INT 86
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: ST_TO_ADDR
34123: GO 34126
34125: POP
// if state > - 1 and state < 3 then
34126: LD_VAR 0 3
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: GREATER
34135: PUSH
34136: LD_VAR 0 3
34140: PUSH
34141: LD_INT 3
34143: LESS
34144: AND
34145: IFFALSE 34202
// for i in result do
34147: LD_ADDR_VAR 0 5
34151: PUSH
34152: LD_VAR 0 4
34156: PUSH
34157: FOR_IN
34158: IFFALSE 34200
// if GetTech ( i , side ) <> state then
34160: LD_VAR 0 5
34164: PPUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 321
34174: PUSH
34175: LD_VAR 0 3
34179: NONEQUAL
34180: IFFALSE 34198
// result := result diff i ;
34182: LD_ADDR_VAR 0 4
34186: PUSH
34187: LD_VAR 0 4
34191: PUSH
34192: LD_VAR 0 5
34196: DIFF
34197: ST_TO_ADDR
34198: GO 34157
34200: POP
34201: POP
// end ;
34202: LD_VAR 0 4
34206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34207: LD_INT 0
34209: PPUSH
34210: PPUSH
34211: PPUSH
// result := true ;
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: LD_INT 1
34219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34220: LD_ADDR_VAR 0 5
34224: PUSH
34225: LD_VAR 0 2
34229: PPUSH
34230: CALL_OW 480
34234: ST_TO_ADDR
// if not tmp then
34235: LD_VAR 0 5
34239: NOT
34240: IFFALSE 34244
// exit ;
34242: GO 34293
// for i in tmp do
34244: LD_ADDR_VAR 0 4
34248: PUSH
34249: LD_VAR 0 5
34253: PUSH
34254: FOR_IN
34255: IFFALSE 34291
// if GetTech ( i , side ) <> state_researched then
34257: LD_VAR 0 4
34261: PPUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 321
34271: PUSH
34272: LD_INT 2
34274: NONEQUAL
34275: IFFALSE 34289
// begin result := false ;
34277: LD_ADDR_VAR 0 3
34281: PUSH
34282: LD_INT 0
34284: ST_TO_ADDR
// exit ;
34285: POP
34286: POP
34287: GO 34293
// end ;
34289: GO 34254
34291: POP
34292: POP
// end ;
34293: LD_VAR 0 3
34297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34298: LD_INT 0
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34313: LD_VAR 0 1
34317: NOT
34318: PUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 257
34328: PUSH
34329: LD_INT 9
34331: NONEQUAL
34332: OR
34333: IFFALSE 34337
// exit ;
34335: GO 34910
// side := GetSide ( unit ) ;
34337: LD_ADDR_VAR 0 9
34341: PUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 255
34351: ST_TO_ADDR
// tech_space := tech_spacanom ;
34352: LD_ADDR_VAR 0 12
34356: PUSH
34357: LD_INT 29
34359: ST_TO_ADDR
// tech_time := tech_taurad ;
34360: LD_ADDR_VAR 0 13
34364: PUSH
34365: LD_INT 28
34367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34368: LD_ADDR_VAR 0 11
34372: PUSH
34373: LD_VAR 0 1
34377: PPUSH
34378: CALL_OW 310
34382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34383: LD_VAR 0 11
34387: PPUSH
34388: CALL_OW 247
34392: PUSH
34393: LD_INT 2
34395: EQUAL
34396: IFFALSE 34400
// exit ;
34398: GO 34910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34400: LD_ADDR_VAR 0 8
34404: PUSH
34405: LD_INT 81
34407: PUSH
34408: LD_VAR 0 9
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: LD_INT 21
34422: PUSH
34423: LD_INT 3
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PPUSH
34438: CALL_OW 69
34442: ST_TO_ADDR
// if not tmp then
34443: LD_VAR 0 8
34447: NOT
34448: IFFALSE 34452
// exit ;
34450: GO 34910
// if in_unit then
34452: LD_VAR 0 11
34456: IFFALSE 34480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34458: LD_ADDR_VAR 0 10
34462: PUSH
34463: LD_VAR 0 8
34467: PPUSH
34468: LD_VAR 0 11
34472: PPUSH
34473: CALL_OW 74
34477: ST_TO_ADDR
34478: GO 34500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34480: LD_ADDR_VAR 0 10
34484: PUSH
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 74
34499: ST_TO_ADDR
// if not enemy then
34500: LD_VAR 0 10
34504: NOT
34505: IFFALSE 34509
// exit ;
34507: GO 34910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34509: LD_VAR 0 11
34513: PUSH
34514: LD_VAR 0 11
34518: PPUSH
34519: LD_VAR 0 10
34523: PPUSH
34524: CALL_OW 296
34528: PUSH
34529: LD_INT 13
34531: GREATER
34532: AND
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: LD_VAR 0 10
34543: PPUSH
34544: CALL_OW 296
34548: PUSH
34549: LD_INT 12
34551: GREATER
34552: OR
34553: IFFALSE 34557
// exit ;
34555: GO 34910
// missile := [ 1 ] ;
34557: LD_ADDR_VAR 0 14
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34568: LD_VAR 0 9
34572: PPUSH
34573: LD_VAR 0 12
34577: PPUSH
34578: CALL_OW 325
34582: IFFALSE 34611
// missile := Replace ( missile , missile + 1 , 2 ) ;
34584: LD_ADDR_VAR 0 14
34588: PUSH
34589: LD_VAR 0 14
34593: PPUSH
34594: LD_VAR 0 14
34598: PUSH
34599: LD_INT 1
34601: PLUS
34602: PPUSH
34603: LD_INT 2
34605: PPUSH
34606: CALL_OW 1
34610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34611: LD_VAR 0 9
34615: PPUSH
34616: LD_VAR 0 13
34620: PPUSH
34621: CALL_OW 325
34625: PUSH
34626: LD_VAR 0 10
34630: PPUSH
34631: CALL_OW 255
34635: PPUSH
34636: LD_VAR 0 13
34640: PPUSH
34641: CALL_OW 325
34645: NOT
34646: AND
34647: IFFALSE 34676
// missile := Replace ( missile , missile + 1 , 3 ) ;
34649: LD_ADDR_VAR 0 14
34653: PUSH
34654: LD_VAR 0 14
34658: PPUSH
34659: LD_VAR 0 14
34663: PUSH
34664: LD_INT 1
34666: PLUS
34667: PPUSH
34668: LD_INT 3
34670: PPUSH
34671: CALL_OW 1
34675: ST_TO_ADDR
// if missile < 2 then
34676: LD_VAR 0 14
34680: PUSH
34681: LD_INT 2
34683: LESS
34684: IFFALSE 34688
// exit ;
34686: GO 34910
// x := GetX ( enemy ) ;
34688: LD_ADDR_VAR 0 4
34692: PUSH
34693: LD_VAR 0 10
34697: PPUSH
34698: CALL_OW 250
34702: ST_TO_ADDR
// y := GetY ( enemy ) ;
34703: LD_ADDR_VAR 0 5
34707: PUSH
34708: LD_VAR 0 10
34712: PPUSH
34713: CALL_OW 251
34717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34718: LD_ADDR_VAR 0 6
34722: PUSH
34723: LD_VAR 0 4
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PPUSH
34732: LD_INT 1
34734: PPUSH
34735: CALL_OW 12
34739: PLUS
34740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34741: LD_ADDR_VAR 0 7
34745: PUSH
34746: LD_VAR 0 5
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PPUSH
34755: LD_INT 1
34757: PPUSH
34758: CALL_OW 12
34762: PLUS
34763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34764: LD_VAR 0 6
34768: PPUSH
34769: LD_VAR 0 7
34773: PPUSH
34774: CALL_OW 488
34778: NOT
34779: IFFALSE 34801
// begin _x := x ;
34781: LD_ADDR_VAR 0 6
34785: PUSH
34786: LD_VAR 0 4
34790: ST_TO_ADDR
// _y := y ;
34791: LD_ADDR_VAR 0 7
34795: PUSH
34796: LD_VAR 0 5
34800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34801: LD_ADDR_VAR 0 3
34805: PUSH
34806: LD_INT 1
34808: PPUSH
34809: LD_VAR 0 14
34813: PPUSH
34814: CALL_OW 12
34818: ST_TO_ADDR
// case i of 1 :
34819: LD_VAR 0 3
34823: PUSH
34824: LD_INT 1
34826: DOUBLE
34827: EQUAL
34828: IFTRUE 34832
34830: GO 34849
34832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34833: LD_VAR 0 1
34837: PPUSH
34838: LD_VAR 0 10
34842: PPUSH
34843: CALL_OW 115
34847: GO 34910
34849: LD_INT 2
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34879
34857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34858: LD_VAR 0 1
34862: PPUSH
34863: LD_VAR 0 6
34867: PPUSH
34868: LD_VAR 0 7
34872: PPUSH
34873: CALL_OW 153
34877: GO 34910
34879: LD_INT 3
34881: DOUBLE
34882: EQUAL
34883: IFTRUE 34887
34885: GO 34909
34887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34888: LD_VAR 0 1
34892: PPUSH
34893: LD_VAR 0 6
34897: PPUSH
34898: LD_VAR 0 7
34902: PPUSH
34903: CALL_OW 154
34907: GO 34910
34909: POP
// end ;
34910: LD_VAR 0 2
34914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34915: LD_INT 0
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
// if not unit or not building then
34923: LD_VAR 0 1
34927: NOT
34928: PUSH
34929: LD_VAR 0 2
34933: NOT
34934: OR
34935: IFFALSE 34939
// exit ;
34937: GO 35097
// x := GetX ( building ) ;
34939: LD_ADDR_VAR 0 5
34943: PUSH
34944: LD_VAR 0 2
34948: PPUSH
34949: CALL_OW 250
34953: ST_TO_ADDR
// y := GetY ( building ) ;
34954: LD_ADDR_VAR 0 6
34958: PUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: CALL_OW 251
34968: ST_TO_ADDR
// for i = 0 to 5 do
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: DOUBLE
34975: LD_INT 0
34977: DEC
34978: ST_TO_ADDR
34979: LD_INT 5
34981: PUSH
34982: FOR_TO
34983: IFFALSE 35095
// begin _x := ShiftX ( x , i , 3 ) ;
34985: LD_ADDR_VAR 0 7
34989: PUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: LD_VAR 0 4
34999: PPUSH
35000: LD_INT 3
35002: PPUSH
35003: CALL_OW 272
35007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35008: LD_ADDR_VAR 0 8
35012: PUSH
35013: LD_VAR 0 6
35017: PPUSH
35018: LD_VAR 0 4
35022: PPUSH
35023: LD_INT 3
35025: PPUSH
35026: CALL_OW 273
35030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35031: LD_VAR 0 7
35035: PPUSH
35036: LD_VAR 0 8
35040: PPUSH
35041: CALL_OW 488
35045: NOT
35046: IFFALSE 35050
// continue ;
35048: GO 34982
// if HexInfo ( _x , _y ) = 0 then
35050: LD_VAR 0 7
35054: PPUSH
35055: LD_VAR 0 8
35059: PPUSH
35060: CALL_OW 428
35064: PUSH
35065: LD_INT 0
35067: EQUAL
35068: IFFALSE 35093
// begin ComMoveXY ( unit , _x , _y ) ;
35070: LD_VAR 0 1
35074: PPUSH
35075: LD_VAR 0 7
35079: PPUSH
35080: LD_VAR 0 8
35084: PPUSH
35085: CALL_OW 111
// exit ;
35089: POP
35090: POP
35091: GO 35097
// end ; end ;
35093: GO 34982
35095: POP
35096: POP
// end ;
35097: LD_VAR 0 3
35101: RET
// export function ScanBase ( side , base_area ) ; begin
35102: LD_INT 0
35104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_INT 81
35117: PUSH
35118: LD_VAR 0 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PPUSH
35127: CALL_OW 70
35131: ST_TO_ADDR
// end ;
35132: LD_VAR 0 3
35136: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35137: LD_INT 0
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
// result := false ;
35143: LD_ADDR_VAR 0 2
35147: PUSH
35148: LD_INT 0
35150: ST_TO_ADDR
// side := GetSide ( unit ) ;
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_VAR 0 1
35160: PPUSH
35161: CALL_OW 255
35165: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35166: LD_ADDR_VAR 0 4
35170: PUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 248
35180: ST_TO_ADDR
// case nat of 1 :
35181: LD_VAR 0 4
35185: PUSH
35186: LD_INT 1
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35205
35194: POP
// tech := tech_lassight ; 2 :
35195: LD_ADDR_VAR 0 5
35199: PUSH
35200: LD_INT 12
35202: ST_TO_ADDR
35203: GO 35244
35205: LD_INT 2
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35224
35213: POP
// tech := tech_mortar ; 3 :
35214: LD_ADDR_VAR 0 5
35218: PUSH
35219: LD_INT 41
35221: ST_TO_ADDR
35222: GO 35244
35224: LD_INT 3
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35232
35230: GO 35243
35232: POP
// tech := tech_bazooka ; end ;
35233: LD_ADDR_VAR 0 5
35237: PUSH
35238: LD_INT 44
35240: ST_TO_ADDR
35241: GO 35244
35243: POP
// if Researched ( side , tech ) then
35244: LD_VAR 0 3
35248: PPUSH
35249: LD_VAR 0 5
35253: PPUSH
35254: CALL_OW 325
35258: IFFALSE 35285
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35260: LD_ADDR_VAR 0 2
35264: PUSH
35265: LD_INT 5
35267: PUSH
35268: LD_INT 8
35270: PUSH
35271: LD_INT 9
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: PUSH
35279: LD_VAR 0 4
35283: ARRAY
35284: ST_TO_ADDR
// end ;
35285: LD_VAR 0 2
35289: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35290: LD_INT 0
35292: PPUSH
35293: PPUSH
35294: PPUSH
// if not mines then
35295: LD_VAR 0 2
35299: NOT
35300: IFFALSE 35304
// exit ;
35302: GO 35448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35304: LD_ADDR_VAR 0 5
35308: PUSH
35309: LD_INT 81
35311: PUSH
35312: LD_VAR 0 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: PUSH
35324: LD_INT 21
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PPUSH
35342: CALL_OW 69
35346: ST_TO_ADDR
// for i in mines do
35347: LD_ADDR_VAR 0 4
35351: PUSH
35352: LD_VAR 0 2
35356: PUSH
35357: FOR_IN
35358: IFFALSE 35446
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35360: LD_VAR 0 4
35364: PUSH
35365: LD_INT 1
35367: ARRAY
35368: PPUSH
35369: LD_VAR 0 4
35373: PUSH
35374: LD_INT 2
35376: ARRAY
35377: PPUSH
35378: CALL_OW 458
35382: NOT
35383: IFFALSE 35387
// continue ;
35385: GO 35357
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35387: LD_VAR 0 4
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: PPUSH
35396: LD_VAR 0 4
35400: PUSH
35401: LD_INT 2
35403: ARRAY
35404: PPUSH
35405: CALL_OW 428
35409: PUSH
35410: LD_VAR 0 5
35414: IN
35415: IFFALSE 35444
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35417: LD_VAR 0 4
35421: PUSH
35422: LD_INT 1
35424: ARRAY
35425: PPUSH
35426: LD_VAR 0 4
35430: PUSH
35431: LD_INT 2
35433: ARRAY
35434: PPUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 456
// end ;
35444: GO 35357
35446: POP
35447: POP
// end ;
35448: LD_VAR 0 3
35452: RET
// export function Count ( array ) ; begin
35453: LD_INT 0
35455: PPUSH
// result := array + 0 ;
35456: LD_ADDR_VAR 0 2
35460: PUSH
35461: LD_VAR 0 1
35465: PUSH
35466: LD_INT 0
35468: PLUS
35469: ST_TO_ADDR
// end ;
35470: LD_VAR 0 2
35474: RET
// export function IsEmpty ( building ) ; begin
35475: LD_INT 0
35477: PPUSH
// if not building then
35478: LD_VAR 0 1
35482: NOT
35483: IFFALSE 35487
// exit ;
35485: GO 35530
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35487: LD_ADDR_VAR 0 2
35491: PUSH
35492: LD_VAR 0 1
35496: PUSH
35497: LD_INT 22
35499: PUSH
35500: LD_VAR 0 1
35504: PPUSH
35505: CALL_OW 255
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 58
35516: PUSH
35517: EMPTY
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PPUSH
35524: CALL_OW 69
35528: IN
35529: ST_TO_ADDR
// end ;
35530: LD_VAR 0 2
35534: RET
// export function IsNotFull ( building ) ; var places ; begin
35535: LD_INT 0
35537: PPUSH
35538: PPUSH
// if not building then
35539: LD_VAR 0 1
35543: NOT
35544: IFFALSE 35548
// exit ;
35546: GO 35576
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35548: LD_ADDR_VAR 0 2
35552: PUSH
35553: LD_VAR 0 1
35557: PPUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 62
35563: PUSH
35564: EMPTY
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PPUSH
35571: CALL_OW 72
35575: ST_TO_ADDR
// end ;
35576: LD_VAR 0 2
35580: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35581: LD_INT 0
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
// tmp := [ ] ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: EMPTY
35593: ST_TO_ADDR
// list := [ ] ;
35594: LD_ADDR_VAR 0 5
35598: PUSH
35599: EMPTY
35600: ST_TO_ADDR
// for i = 16 to 25 do
35601: LD_ADDR_VAR 0 4
35605: PUSH
35606: DOUBLE
35607: LD_INT 16
35609: DEC
35610: ST_TO_ADDR
35611: LD_INT 25
35613: PUSH
35614: FOR_TO
35615: IFFALSE 35688
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: LD_VAR 0 3
35626: PUSH
35627: LD_INT 22
35629: PUSH
35630: LD_VAR 0 1
35634: PPUSH
35635: CALL_OW 255
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 91
35646: PUSH
35647: LD_VAR 0 1
35651: PUSH
35652: LD_INT 6
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 30
35662: PUSH
35663: LD_VAR 0 4
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: EMPTY
35678: LIST
35679: PPUSH
35680: CALL_OW 69
35684: ADD
35685: ST_TO_ADDR
35686: GO 35614
35688: POP
35689: POP
// for i = 1 to tmp do
35690: LD_ADDR_VAR 0 4
35694: PUSH
35695: DOUBLE
35696: LD_INT 1
35698: DEC
35699: ST_TO_ADDR
35700: LD_VAR 0 3
35704: PUSH
35705: FOR_TO
35706: IFFALSE 35794
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35708: LD_ADDR_VAR 0 5
35712: PUSH
35713: LD_VAR 0 5
35717: PUSH
35718: LD_VAR 0 3
35722: PUSH
35723: LD_VAR 0 4
35727: ARRAY
35728: PPUSH
35729: CALL_OW 266
35733: PUSH
35734: LD_VAR 0 3
35738: PUSH
35739: LD_VAR 0 4
35743: ARRAY
35744: PPUSH
35745: CALL_OW 250
35749: PUSH
35750: LD_VAR 0 3
35754: PUSH
35755: LD_VAR 0 4
35759: ARRAY
35760: PPUSH
35761: CALL_OW 251
35765: PUSH
35766: LD_VAR 0 3
35770: PUSH
35771: LD_VAR 0 4
35775: ARRAY
35776: PPUSH
35777: CALL_OW 254
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: ADD
35791: ST_TO_ADDR
35792: GO 35705
35794: POP
35795: POP
// result := list ;
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_VAR 0 5
35805: ST_TO_ADDR
// end ;
35806: LD_VAR 0 2
35810: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35811: LD_INT 0
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
// if not factory then
35820: LD_VAR 0 1
35824: NOT
35825: IFFALSE 35829
// exit ;
35827: GO 36422
// if control = control_apeman then
35829: LD_VAR 0 4
35833: PUSH
35834: LD_INT 5
35836: EQUAL
35837: IFFALSE 35946
// begin tmp := UnitsInside ( factory ) ;
35839: LD_ADDR_VAR 0 8
35843: PUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 313
35853: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35854: LD_VAR 0 8
35858: PPUSH
35859: LD_INT 25
35861: PUSH
35862: LD_INT 12
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PPUSH
35869: CALL_OW 72
35873: NOT
35874: IFFALSE 35884
// control := control_manual ;
35876: LD_ADDR_VAR 0 4
35880: PUSH
35881: LD_INT 1
35883: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35884: LD_ADDR_VAR 0 8
35888: PUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL 35581 0 1
35898: ST_TO_ADDR
// if tmp then
35899: LD_VAR 0 8
35903: IFFALSE 35946
// begin for i in tmp do
35905: LD_ADDR_VAR 0 7
35909: PUSH
35910: LD_VAR 0 8
35914: PUSH
35915: FOR_IN
35916: IFFALSE 35944
// if i [ 1 ] = b_ext_radio then
35918: LD_VAR 0 7
35922: PUSH
35923: LD_INT 1
35925: ARRAY
35926: PUSH
35927: LD_INT 22
35929: EQUAL
35930: IFFALSE 35942
// begin control := control_remote ;
35932: LD_ADDR_VAR 0 4
35936: PUSH
35937: LD_INT 2
35939: ST_TO_ADDR
// break ;
35940: GO 35944
// end ;
35942: GO 35915
35944: POP
35945: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35946: LD_VAR 0 1
35950: PPUSH
35951: LD_VAR 0 2
35955: PPUSH
35956: LD_VAR 0 3
35960: PPUSH
35961: LD_VAR 0 4
35965: PPUSH
35966: LD_VAR 0 5
35970: PPUSH
35971: CALL_OW 448
35975: IFFALSE 36010
// begin result := [ chassis , engine , control , weapon ] ;
35977: LD_ADDR_VAR 0 6
35981: PUSH
35982: LD_VAR 0 2
35986: PUSH
35987: LD_VAR 0 3
35991: PUSH
35992: LD_VAR 0 4
35996: PUSH
35997: LD_VAR 0 5
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// exit ;
36008: GO 36422
// end ; _chassis := AvailableChassisList ( factory ) ;
36010: LD_ADDR_VAR 0 9
36014: PUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 475
36024: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36025: LD_ADDR_VAR 0 11
36029: PUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 476
36039: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36040: LD_ADDR_VAR 0 12
36044: PUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 477
36054: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36055: LD_ADDR_VAR 0 10
36059: PUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 478
36069: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36070: LD_VAR 0 9
36074: NOT
36075: PUSH
36076: LD_VAR 0 11
36080: NOT
36081: OR
36082: PUSH
36083: LD_VAR 0 12
36087: NOT
36088: OR
36089: PUSH
36090: LD_VAR 0 10
36094: NOT
36095: OR
36096: IFFALSE 36131
// begin result := [ chassis , engine , control , weapon ] ;
36098: LD_ADDR_VAR 0 6
36102: PUSH
36103: LD_VAR 0 2
36107: PUSH
36108: LD_VAR 0 3
36112: PUSH
36113: LD_VAR 0 4
36117: PUSH
36118: LD_VAR 0 5
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
// exit ;
36129: GO 36422
// end ; if not chassis in _chassis then
36131: LD_VAR 0 2
36135: PUSH
36136: LD_VAR 0 9
36140: IN
36141: NOT
36142: IFFALSE 36168
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36144: LD_ADDR_VAR 0 2
36148: PUSH
36149: LD_VAR 0 9
36153: PUSH
36154: LD_INT 1
36156: PPUSH
36157: LD_VAR 0 9
36161: PPUSH
36162: CALL_OW 12
36166: ARRAY
36167: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36168: LD_VAR 0 2
36172: PPUSH
36173: LD_VAR 0 3
36177: PPUSH
36178: CALL 36427 0 2
36182: NOT
36183: IFFALSE 36242
// repeat engine := _engine [ 1 ] ;
36185: LD_ADDR_VAR 0 3
36189: PUSH
36190: LD_VAR 0 11
36194: PUSH
36195: LD_INT 1
36197: ARRAY
36198: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36199: LD_ADDR_VAR 0 11
36203: PUSH
36204: LD_VAR 0 11
36208: PPUSH
36209: LD_INT 1
36211: PPUSH
36212: CALL_OW 3
36216: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36217: LD_VAR 0 2
36221: PPUSH
36222: LD_VAR 0 3
36226: PPUSH
36227: CALL 36427 0 2
36231: PUSH
36232: LD_VAR 0 11
36236: PUSH
36237: EMPTY
36238: EQUAL
36239: OR
36240: IFFALSE 36185
// if not control in _control then
36242: LD_VAR 0 4
36246: PUSH
36247: LD_VAR 0 12
36251: IN
36252: NOT
36253: IFFALSE 36279
// control := _control [ rand ( 1 , _control ) ] ;
36255: LD_ADDR_VAR 0 4
36259: PUSH
36260: LD_VAR 0 12
36264: PUSH
36265: LD_INT 1
36267: PPUSH
36268: LD_VAR 0 12
36272: PPUSH
36273: CALL_OW 12
36277: ARRAY
36278: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36279: LD_VAR 0 2
36283: PPUSH
36284: LD_VAR 0 5
36288: PPUSH
36289: CALL 36647 0 2
36293: NOT
36294: IFFALSE 36353
// repeat weapon := _weapon [ 1 ] ;
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_VAR 0 10
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36310: LD_ADDR_VAR 0 10
36314: PUSH
36315: LD_VAR 0 10
36319: PPUSH
36320: LD_INT 1
36322: PPUSH
36323: CALL_OW 3
36327: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36328: LD_VAR 0 2
36332: PPUSH
36333: LD_VAR 0 5
36337: PPUSH
36338: CALL 36647 0 2
36342: PUSH
36343: LD_VAR 0 10
36347: PUSH
36348: EMPTY
36349: EQUAL
36350: OR
36351: IFFALSE 36296
// result := [ ] ;
36353: LD_ADDR_VAR 0 6
36357: PUSH
36358: EMPTY
36359: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36360: LD_VAR 0 1
36364: PPUSH
36365: LD_VAR 0 2
36369: PPUSH
36370: LD_VAR 0 3
36374: PPUSH
36375: LD_VAR 0 4
36379: PPUSH
36380: LD_VAR 0 5
36384: PPUSH
36385: CALL_OW 448
36389: IFFALSE 36422
// result := [ chassis , engine , control , weapon ] ;
36391: LD_ADDR_VAR 0 6
36395: PUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_VAR 0 3
36405: PUSH
36406: LD_VAR 0 4
36410: PUSH
36411: LD_VAR 0 5
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// end ;
36422: LD_VAR 0 6
36426: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36427: LD_INT 0
36429: PPUSH
// if not chassis or not engine then
36430: LD_VAR 0 1
36434: NOT
36435: PUSH
36436: LD_VAR 0 2
36440: NOT
36441: OR
36442: IFFALSE 36446
// exit ;
36444: GO 36642
// case engine of engine_solar :
36446: LD_VAR 0 2
36450: PUSH
36451: LD_INT 2
36453: DOUBLE
36454: EQUAL
36455: IFTRUE 36459
36457: GO 36497
36459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36460: LD_ADDR_VAR 0 3
36464: PUSH
36465: LD_INT 11
36467: PUSH
36468: LD_INT 12
36470: PUSH
36471: LD_INT 13
36473: PUSH
36474: LD_INT 14
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
36495: GO 36626
36497: LD_INT 1
36499: DOUBLE
36500: EQUAL
36501: IFTRUE 36505
36503: GO 36567
36505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: LD_INT 11
36513: PUSH
36514: LD_INT 12
36516: PUSH
36517: LD_INT 13
36519: PUSH
36520: LD_INT 14
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: LD_INT 4
36534: PUSH
36535: LD_INT 5
36537: PUSH
36538: LD_INT 21
36540: PUSH
36541: LD_INT 23
36543: PUSH
36544: LD_INT 22
36546: PUSH
36547: LD_INT 24
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
36565: GO 36626
36567: LD_INT 3
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 36625
36575: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_INT 13
36583: PUSH
36584: LD_INT 14
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: LD_INT 4
36595: PUSH
36596: LD_INT 5
36598: PUSH
36599: LD_INT 21
36601: PUSH
36602: LD_INT 22
36604: PUSH
36605: LD_INT 23
36607: PUSH
36608: LD_INT 24
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
36623: GO 36626
36625: POP
// result := ( chassis in result ) ;
36626: LD_ADDR_VAR 0 3
36630: PUSH
36631: LD_VAR 0 1
36635: PUSH
36636: LD_VAR 0 3
36640: IN
36641: ST_TO_ADDR
// end ;
36642: LD_VAR 0 3
36646: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36647: LD_INT 0
36649: PPUSH
// if not chassis or not weapon then
36650: LD_VAR 0 1
36654: NOT
36655: PUSH
36656: LD_VAR 0 2
36660: NOT
36661: OR
36662: IFFALSE 36666
// exit ;
36664: GO 37726
// case weapon of us_machine_gun :
36666: LD_VAR 0 2
36670: PUSH
36671: LD_INT 2
36673: DOUBLE
36674: EQUAL
36675: IFTRUE 36679
36677: GO 36709
36679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36680: LD_ADDR_VAR 0 3
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: LD_INT 4
36696: PUSH
36697: LD_INT 5
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
36707: GO 37710
36709: LD_INT 3
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36747
36717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: LD_INT 5
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
36745: GO 37710
36747: LD_INT 11
36749: DOUBLE
36750: EQUAL
36751: IFTRUE 36755
36753: GO 36785
36755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: LD_INT 4
36772: PUSH
36773: LD_INT 5
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
36783: GO 37710
36785: LD_INT 4
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36793
36791: GO 36819
36793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36794: LD_ADDR_VAR 0 3
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: LD_INT 4
36807: PUSH
36808: LD_INT 5
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
36817: GO 37710
36819: LD_INT 5
36821: DOUBLE
36822: EQUAL
36823: IFTRUE 36827
36825: GO 36853
36827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: LD_INT 4
36841: PUSH
36842: LD_INT 5
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
36851: GO 37710
36853: LD_INT 9
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 36887
36861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 3
36872: PUSH
36873: LD_INT 4
36875: PUSH
36876: LD_INT 5
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
36885: GO 37710
36887: LD_INT 7
36889: DOUBLE
36890: EQUAL
36891: IFTRUE 36895
36893: GO 36921
36895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36896: LD_ADDR_VAR 0 3
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: LD_INT 5
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
36919: GO 37710
36921: LD_INT 12
36923: DOUBLE
36924: EQUAL
36925: IFTRUE 36929
36927: GO 36955
36929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36930: LD_ADDR_VAR 0 3
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 4
36943: PUSH
36944: LD_INT 5
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
36953: GO 37710
36955: LD_INT 13
36957: DOUBLE
36958: EQUAL
36959: IFTRUE 36963
36961: GO 36989
36963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36964: LD_ADDR_VAR 0 3
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: LD_INT 5
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: ST_TO_ADDR
36987: GO 37710
36989: LD_INT 14
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37015
36997: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36998: LD_ADDR_VAR 0 3
37002: PUSH
37003: LD_INT 4
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: ST_TO_ADDR
37013: GO 37710
37015: LD_INT 6
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37041
37023: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37024: LD_ADDR_VAR 0 3
37028: PUSH
37029: LD_INT 4
37031: PUSH
37032: LD_INT 5
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: ST_TO_ADDR
37039: GO 37710
37041: LD_INT 10
37043: DOUBLE
37044: EQUAL
37045: IFTRUE 37049
37047: GO 37067
37049: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37050: LD_ADDR_VAR 0 3
37054: PUSH
37055: LD_INT 4
37057: PUSH
37058: LD_INT 5
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: ST_TO_ADDR
37065: GO 37710
37067: LD_INT 22
37069: DOUBLE
37070: EQUAL
37071: IFTRUE 37075
37073: GO 37101
37075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37076: LD_ADDR_VAR 0 3
37080: PUSH
37081: LD_INT 11
37083: PUSH
37084: LD_INT 12
37086: PUSH
37087: LD_INT 13
37089: PUSH
37090: LD_INT 14
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: ST_TO_ADDR
37099: GO 37710
37101: LD_INT 23
37103: DOUBLE
37104: EQUAL
37105: IFTRUE 37109
37107: GO 37135
37109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37110: LD_ADDR_VAR 0 3
37114: PUSH
37115: LD_INT 11
37117: PUSH
37118: LD_INT 12
37120: PUSH
37121: LD_INT 13
37123: PUSH
37124: LD_INT 14
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
37133: GO 37710
37135: LD_INT 24
37137: DOUBLE
37138: EQUAL
37139: IFTRUE 37143
37141: GO 37169
37143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_INT 11
37151: PUSH
37152: LD_INT 12
37154: PUSH
37155: LD_INT 13
37157: PUSH
37158: LD_INT 14
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: ST_TO_ADDR
37167: GO 37710
37169: LD_INT 30
37171: DOUBLE
37172: EQUAL
37173: IFTRUE 37177
37175: GO 37203
37177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37178: LD_ADDR_VAR 0 3
37182: PUSH
37183: LD_INT 11
37185: PUSH
37186: LD_INT 12
37188: PUSH
37189: LD_INT 13
37191: PUSH
37192: LD_INT 14
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: ST_TO_ADDR
37201: GO 37710
37203: LD_INT 25
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37229
37211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37212: LD_ADDR_VAR 0 3
37216: PUSH
37217: LD_INT 13
37219: PUSH
37220: LD_INT 14
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: ST_TO_ADDR
37227: GO 37710
37229: LD_INT 27
37231: DOUBLE
37232: EQUAL
37233: IFTRUE 37237
37235: GO 37255
37237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37238: LD_ADDR_VAR 0 3
37242: PUSH
37243: LD_INT 13
37245: PUSH
37246: LD_INT 14
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: ST_TO_ADDR
37253: GO 37710
37255: LD_INT 92
37257: DOUBLE
37258: EQUAL
37259: IFTRUE 37263
37261: GO 37289
37263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_INT 11
37271: PUSH
37272: LD_INT 12
37274: PUSH
37275: LD_INT 13
37277: PUSH
37278: LD_INT 14
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
37287: GO 37710
37289: LD_INT 28
37291: DOUBLE
37292: EQUAL
37293: IFTRUE 37297
37295: GO 37315
37297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37298: LD_ADDR_VAR 0 3
37302: PUSH
37303: LD_INT 13
37305: PUSH
37306: LD_INT 14
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: ST_TO_ADDR
37313: GO 37710
37315: LD_INT 29
37317: DOUBLE
37318: EQUAL
37319: IFTRUE 37323
37321: GO 37341
37323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_INT 13
37331: PUSH
37332: LD_INT 14
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: ST_TO_ADDR
37339: GO 37710
37341: LD_INT 31
37343: DOUBLE
37344: EQUAL
37345: IFTRUE 37349
37347: GO 37367
37349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: LD_INT 13
37357: PUSH
37358: LD_INT 14
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: ST_TO_ADDR
37365: GO 37710
37367: LD_INT 26
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37375
37373: GO 37393
37375: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_INT 13
37383: PUSH
37384: LD_INT 14
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: ST_TO_ADDR
37391: GO 37710
37393: LD_INT 42
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37427
37401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_INT 21
37409: PUSH
37410: LD_INT 22
37412: PUSH
37413: LD_INT 23
37415: PUSH
37416: LD_INT 24
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
37425: GO 37710
37427: LD_INT 43
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37461
37435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 21
37443: PUSH
37444: LD_INT 22
37446: PUSH
37447: LD_INT 23
37449: PUSH
37450: LD_INT 24
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
37459: GO 37710
37461: LD_INT 44
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37495
37469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 21
37477: PUSH
37478: LD_INT 22
37480: PUSH
37481: LD_INT 23
37483: PUSH
37484: LD_INT 24
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
37493: GO 37710
37495: LD_INT 45
37497: DOUBLE
37498: EQUAL
37499: IFTRUE 37503
37501: GO 37529
37503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_INT 21
37511: PUSH
37512: LD_INT 22
37514: PUSH
37515: LD_INT 23
37517: PUSH
37518: LD_INT 24
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
37527: GO 37710
37529: LD_INT 49
37531: DOUBLE
37532: EQUAL
37533: IFTRUE 37537
37535: GO 37563
37537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37538: LD_ADDR_VAR 0 3
37542: PUSH
37543: LD_INT 21
37545: PUSH
37546: LD_INT 22
37548: PUSH
37549: LD_INT 23
37551: PUSH
37552: LD_INT 24
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
37561: GO 37710
37563: LD_INT 51
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37597
37571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: LD_INT 21
37579: PUSH
37580: LD_INT 22
37582: PUSH
37583: LD_INT 23
37585: PUSH
37586: LD_INT 24
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
37595: GO 37710
37597: LD_INT 52
37599: DOUBLE
37600: EQUAL
37601: IFTRUE 37605
37603: GO 37631
37605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37606: LD_ADDR_VAR 0 3
37610: PUSH
37611: LD_INT 21
37613: PUSH
37614: LD_INT 22
37616: PUSH
37617: LD_INT 23
37619: PUSH
37620: LD_INT 24
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
37629: GO 37710
37631: LD_INT 53
37633: DOUBLE
37634: EQUAL
37635: IFTRUE 37639
37637: GO 37657
37639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37640: LD_ADDR_VAR 0 3
37644: PUSH
37645: LD_INT 23
37647: PUSH
37648: LD_INT 24
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: ST_TO_ADDR
37655: GO 37710
37657: LD_INT 46
37659: DOUBLE
37660: EQUAL
37661: IFTRUE 37665
37663: GO 37683
37665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_INT 23
37673: PUSH
37674: LD_INT 24
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: ST_TO_ADDR
37681: GO 37710
37683: LD_INT 47
37685: DOUBLE
37686: EQUAL
37687: IFTRUE 37691
37689: GO 37709
37691: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37692: LD_ADDR_VAR 0 3
37696: PUSH
37697: LD_INT 23
37699: PUSH
37700: LD_INT 24
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: ST_TO_ADDR
37707: GO 37710
37709: POP
// result := ( chassis in result ) ;
37710: LD_ADDR_VAR 0 3
37714: PUSH
37715: LD_VAR 0 1
37719: PUSH
37720: LD_VAR 0 3
37724: IN
37725: ST_TO_ADDR
// end ;
37726: LD_VAR 0 3
37730: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
// result := array ;
37740: LD_ADDR_VAR 0 5
37744: PUSH
37745: LD_VAR 0 1
37749: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37750: LD_VAR 0 1
37754: NOT
37755: PUSH
37756: LD_VAR 0 2
37760: NOT
37761: OR
37762: PUSH
37763: LD_VAR 0 3
37767: NOT
37768: OR
37769: PUSH
37770: LD_VAR 0 2
37774: PUSH
37775: LD_VAR 0 1
37779: GREATER
37780: OR
37781: PUSH
37782: LD_VAR 0 3
37786: PUSH
37787: LD_VAR 0 1
37791: GREATER
37792: OR
37793: IFFALSE 37797
// exit ;
37795: GO 38093
// if direction then
37797: LD_VAR 0 4
37801: IFFALSE 37865
// begin d := 1 ;
37803: LD_ADDR_VAR 0 9
37807: PUSH
37808: LD_INT 1
37810: ST_TO_ADDR
// if i_from > i_to then
37811: LD_VAR 0 2
37815: PUSH
37816: LD_VAR 0 3
37820: GREATER
37821: IFFALSE 37847
// length := ( array - i_from ) + i_to else
37823: LD_ADDR_VAR 0 11
37827: PUSH
37828: LD_VAR 0 1
37832: PUSH
37833: LD_VAR 0 2
37837: MINUS
37838: PUSH
37839: LD_VAR 0 3
37843: PLUS
37844: ST_TO_ADDR
37845: GO 37863
// length := i_to - i_from ;
37847: LD_ADDR_VAR 0 11
37851: PUSH
37852: LD_VAR 0 3
37856: PUSH
37857: LD_VAR 0 2
37861: MINUS
37862: ST_TO_ADDR
// end else
37863: GO 37926
// begin d := - 1 ;
37865: LD_ADDR_VAR 0 9
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: ST_TO_ADDR
// if i_from > i_to then
37874: LD_VAR 0 2
37878: PUSH
37879: LD_VAR 0 3
37883: GREATER
37884: IFFALSE 37904
// length := i_from - i_to else
37886: LD_ADDR_VAR 0 11
37890: PUSH
37891: LD_VAR 0 2
37895: PUSH
37896: LD_VAR 0 3
37900: MINUS
37901: ST_TO_ADDR
37902: GO 37926
// length := ( array - i_to ) + i_from ;
37904: LD_ADDR_VAR 0 11
37908: PUSH
37909: LD_VAR 0 1
37913: PUSH
37914: LD_VAR 0 3
37918: MINUS
37919: PUSH
37920: LD_VAR 0 2
37924: PLUS
37925: ST_TO_ADDR
// end ; if not length then
37926: LD_VAR 0 11
37930: NOT
37931: IFFALSE 37935
// exit ;
37933: GO 38093
// tmp := array ;
37935: LD_ADDR_VAR 0 10
37939: PUSH
37940: LD_VAR 0 1
37944: ST_TO_ADDR
// for i = 1 to length do
37945: LD_ADDR_VAR 0 6
37949: PUSH
37950: DOUBLE
37951: LD_INT 1
37953: DEC
37954: ST_TO_ADDR
37955: LD_VAR 0 11
37959: PUSH
37960: FOR_TO
37961: IFFALSE 38081
// begin for j = 1 to array do
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: DOUBLE
37969: LD_INT 1
37971: DEC
37972: ST_TO_ADDR
37973: LD_VAR 0 1
37977: PUSH
37978: FOR_TO
37979: IFFALSE 38067
// begin k := j + d ;
37981: LD_ADDR_VAR 0 8
37985: PUSH
37986: LD_VAR 0 7
37990: PUSH
37991: LD_VAR 0 9
37995: PLUS
37996: ST_TO_ADDR
// if k > array then
37997: LD_VAR 0 8
38001: PUSH
38002: LD_VAR 0 1
38006: GREATER
38007: IFFALSE 38017
// k := 1 ;
38009: LD_ADDR_VAR 0 8
38013: PUSH
38014: LD_INT 1
38016: ST_TO_ADDR
// if not k then
38017: LD_VAR 0 8
38021: NOT
38022: IFFALSE 38034
// k := array ;
38024: LD_ADDR_VAR 0 8
38028: PUSH
38029: LD_VAR 0 1
38033: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38034: LD_ADDR_VAR 0 10
38038: PUSH
38039: LD_VAR 0 10
38043: PPUSH
38044: LD_VAR 0 8
38048: PPUSH
38049: LD_VAR 0 1
38053: PUSH
38054: LD_VAR 0 7
38058: ARRAY
38059: PPUSH
38060: CALL_OW 1
38064: ST_TO_ADDR
// end ;
38065: GO 37978
38067: POP
38068: POP
// array := tmp ;
38069: LD_ADDR_VAR 0 1
38073: PUSH
38074: LD_VAR 0 10
38078: ST_TO_ADDR
// end ;
38079: GO 37960
38081: POP
38082: POP
// result := array ;
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_VAR 0 1
38092: ST_TO_ADDR
// end ;
38093: LD_VAR 0 5
38097: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38098: LD_INT 0
38100: PPUSH
38101: PPUSH
// result := 0 ;
38102: LD_ADDR_VAR 0 3
38106: PUSH
38107: LD_INT 0
38109: ST_TO_ADDR
// if not array or not value in array then
38110: LD_VAR 0 1
38114: NOT
38115: PUSH
38116: LD_VAR 0 2
38120: PUSH
38121: LD_VAR 0 1
38125: IN
38126: NOT
38127: OR
38128: IFFALSE 38132
// exit ;
38130: GO 38186
// for i = 1 to array do
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: DOUBLE
38138: LD_INT 1
38140: DEC
38141: ST_TO_ADDR
38142: LD_VAR 0 1
38146: PUSH
38147: FOR_TO
38148: IFFALSE 38184
// if value = array [ i ] then
38150: LD_VAR 0 2
38154: PUSH
38155: LD_VAR 0 1
38159: PUSH
38160: LD_VAR 0 4
38164: ARRAY
38165: EQUAL
38166: IFFALSE 38182
// begin result := i ;
38168: LD_ADDR_VAR 0 3
38172: PUSH
38173: LD_VAR 0 4
38177: ST_TO_ADDR
// exit ;
38178: POP
38179: POP
38180: GO 38186
// end ;
38182: GO 38147
38184: POP
38185: POP
// end ;
38186: LD_VAR 0 3
38190: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38191: LD_INT 0
38193: PPUSH
// vc_chassis := chassis ;
38194: LD_ADDR_OWVAR 37
38198: PUSH
38199: LD_VAR 0 1
38203: ST_TO_ADDR
// vc_engine := engine ;
38204: LD_ADDR_OWVAR 39
38208: PUSH
38209: LD_VAR 0 2
38213: ST_TO_ADDR
// vc_control := control ;
38214: LD_ADDR_OWVAR 38
38218: PUSH
38219: LD_VAR 0 3
38223: ST_TO_ADDR
// vc_weapon := weapon ;
38224: LD_ADDR_OWVAR 40
38228: PUSH
38229: LD_VAR 0 4
38233: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38234: LD_ADDR_OWVAR 41
38238: PUSH
38239: LD_VAR 0 5
38243: ST_TO_ADDR
// end ;
38244: LD_VAR 0 6
38248: RET
// export function WantPlant ( unit ) ; var task ; begin
38249: LD_INT 0
38251: PPUSH
38252: PPUSH
// result := false ;
38253: LD_ADDR_VAR 0 2
38257: PUSH
38258: LD_INT 0
38260: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38261: LD_ADDR_VAR 0 3
38265: PUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 437
38275: ST_TO_ADDR
// if task then
38276: LD_VAR 0 3
38280: IFFALSE 38308
// if task [ 1 ] [ 1 ] = p then
38282: LD_VAR 0 3
38286: PUSH
38287: LD_INT 1
38289: ARRAY
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PUSH
38295: LD_STRING p
38297: EQUAL
38298: IFFALSE 38308
// result := true ;
38300: LD_ADDR_VAR 0 2
38304: PUSH
38305: LD_INT 1
38307: ST_TO_ADDR
// end ;
38308: LD_VAR 0 2
38312: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
// if pos < 1 then
38319: LD_VAR 0 2
38323: PUSH
38324: LD_INT 1
38326: LESS
38327: IFFALSE 38331
// exit ;
38329: GO 38634
// if pos = 1 then
38331: LD_VAR 0 2
38335: PUSH
38336: LD_INT 1
38338: EQUAL
38339: IFFALSE 38372
// result := Replace ( arr , pos [ 1 ] , value ) else
38341: LD_ADDR_VAR 0 4
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_VAR 0 2
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 3
38364: PPUSH
38365: CALL_OW 1
38369: ST_TO_ADDR
38370: GO 38634
// begin tmp := arr ;
38372: LD_ADDR_VAR 0 6
38376: PUSH
38377: LD_VAR 0 1
38381: ST_TO_ADDR
// s_arr := [ tmp ] ;
38382: LD_ADDR_VAR 0 7
38386: PUSH
38387: LD_VAR 0 6
38391: PUSH
38392: EMPTY
38393: LIST
38394: ST_TO_ADDR
// for i = 1 to pos - 1 do
38395: LD_ADDR_VAR 0 5
38399: PUSH
38400: DOUBLE
38401: LD_INT 1
38403: DEC
38404: ST_TO_ADDR
38405: LD_VAR 0 2
38409: PUSH
38410: LD_INT 1
38412: MINUS
38413: PUSH
38414: FOR_TO
38415: IFFALSE 38460
// begin tmp := tmp [ pos [ i ] ] ;
38417: LD_ADDR_VAR 0 6
38421: PUSH
38422: LD_VAR 0 6
38426: PUSH
38427: LD_VAR 0 2
38431: PUSH
38432: LD_VAR 0 5
38436: ARRAY
38437: ARRAY
38438: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38439: LD_ADDR_VAR 0 7
38443: PUSH
38444: LD_VAR 0 7
38448: PUSH
38449: LD_VAR 0 6
38453: PUSH
38454: EMPTY
38455: LIST
38456: ADD
38457: ST_TO_ADDR
// end ;
38458: GO 38414
38460: POP
38461: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38462: LD_ADDR_VAR 0 6
38466: PUSH
38467: LD_VAR 0 6
38471: PPUSH
38472: LD_VAR 0 2
38476: PUSH
38477: LD_VAR 0 2
38481: ARRAY
38482: PPUSH
38483: LD_VAR 0 3
38487: PPUSH
38488: CALL_OW 1
38492: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38493: LD_ADDR_VAR 0 7
38497: PUSH
38498: LD_VAR 0 7
38502: PPUSH
38503: LD_VAR 0 7
38507: PPUSH
38508: LD_VAR 0 6
38512: PPUSH
38513: CALL_OW 1
38517: ST_TO_ADDR
// for i = s_arr downto 2 do
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: DOUBLE
38524: LD_VAR 0 7
38528: INC
38529: ST_TO_ADDR
38530: LD_INT 2
38532: PUSH
38533: FOR_DOWNTO
38534: IFFALSE 38618
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38536: LD_ADDR_VAR 0 6
38540: PUSH
38541: LD_VAR 0 7
38545: PUSH
38546: LD_VAR 0 5
38550: PUSH
38551: LD_INT 1
38553: MINUS
38554: ARRAY
38555: PPUSH
38556: LD_VAR 0 2
38560: PUSH
38561: LD_VAR 0 5
38565: PUSH
38566: LD_INT 1
38568: MINUS
38569: ARRAY
38570: PPUSH
38571: LD_VAR 0 7
38575: PUSH
38576: LD_VAR 0 5
38580: ARRAY
38581: PPUSH
38582: CALL_OW 1
38586: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38587: LD_ADDR_VAR 0 7
38591: PUSH
38592: LD_VAR 0 7
38596: PPUSH
38597: LD_VAR 0 5
38601: PUSH
38602: LD_INT 1
38604: MINUS
38605: PPUSH
38606: LD_VAR 0 6
38610: PPUSH
38611: CALL_OW 1
38615: ST_TO_ADDR
// end ;
38616: GO 38533
38618: POP
38619: POP
// result := s_arr [ 1 ] ;
38620: LD_ADDR_VAR 0 4
38624: PUSH
38625: LD_VAR 0 7
38629: PUSH
38630: LD_INT 1
38632: ARRAY
38633: ST_TO_ADDR
// end ; end ;
38634: LD_VAR 0 4
38638: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38639: LD_INT 0
38641: PPUSH
38642: PPUSH
// if not list then
38643: LD_VAR 0 1
38647: NOT
38648: IFFALSE 38652
// exit ;
38650: GO 38743
// i := list [ pos1 ] ;
38652: LD_ADDR_VAR 0 5
38656: PUSH
38657: LD_VAR 0 1
38661: PUSH
38662: LD_VAR 0 2
38666: ARRAY
38667: ST_TO_ADDR
// if not i then
38668: LD_VAR 0 5
38672: NOT
38673: IFFALSE 38677
// exit ;
38675: GO 38743
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38677: LD_ADDR_VAR 0 1
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: LD_VAR 0 2
38691: PPUSH
38692: LD_VAR 0 1
38696: PUSH
38697: LD_VAR 0 3
38701: ARRAY
38702: PPUSH
38703: CALL_OW 1
38707: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38708: LD_ADDR_VAR 0 1
38712: PUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: LD_VAR 0 3
38722: PPUSH
38723: LD_VAR 0 5
38727: PPUSH
38728: CALL_OW 1
38732: ST_TO_ADDR
// result := list ;
38733: LD_ADDR_VAR 0 4
38737: PUSH
38738: LD_VAR 0 1
38742: ST_TO_ADDR
// end ;
38743: LD_VAR 0 4
38747: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38748: LD_INT 0
38750: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38751: LD_ADDR_VAR 0 5
38755: PUSH
38756: LD_VAR 0 1
38760: PPUSH
38761: CALL_OW 250
38765: PPUSH
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL_OW 251
38775: PPUSH
38776: LD_VAR 0 2
38780: PPUSH
38781: LD_VAR 0 3
38785: PPUSH
38786: LD_VAR 0 4
38790: PPUSH
38791: CALL 39169 0 5
38795: ST_TO_ADDR
// end ;
38796: LD_VAR 0 5
38800: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38801: LD_INT 0
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
// if not list or not unit then
38807: LD_VAR 0 2
38811: NOT
38812: PUSH
38813: LD_VAR 0 1
38817: NOT
38818: OR
38819: IFFALSE 38823
// exit ;
38821: GO 39164
// result := [ ] ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: EMPTY
38829: ST_TO_ADDR
// for i in list do
38830: LD_ADDR_VAR 0 6
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: FOR_IN
38841: IFFALSE 39059
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38843: LD_ADDR_VAR 0 8
38847: PUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: LD_VAR 0 6
38857: PUSH
38858: LD_INT 1
38860: ARRAY
38861: PPUSH
38862: LD_VAR 0 6
38866: PUSH
38867: LD_INT 2
38869: ARRAY
38870: PPUSH
38871: CALL_OW 297
38875: ST_TO_ADDR
// if not Count ( result ) then
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL 35453 0 1
38885: NOT
38886: IFFALSE 38919
// begin result := Join ( result , [ i , tmp ] ) ;
38888: LD_ADDR_VAR 0 5
38892: PUSH
38893: LD_VAR 0 5
38897: PPUSH
38898: LD_VAR 0 6
38902: PUSH
38903: LD_VAR 0 8
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PPUSH
38912: CALL 71053 0 2
38916: ST_TO_ADDR
// continue ;
38917: GO 38840
// end ; if result [ result ] [ 2 ] <= tmp then
38919: LD_VAR 0 5
38923: PUSH
38924: LD_VAR 0 5
38928: ARRAY
38929: PUSH
38930: LD_INT 2
38932: ARRAY
38933: PUSH
38934: LD_VAR 0 8
38938: LESSEQUAL
38939: IFFALSE 38972
// result := Join ( result , [ i , tmp ] ) else
38941: LD_ADDR_VAR 0 5
38945: PUSH
38946: LD_VAR 0 5
38950: PPUSH
38951: LD_VAR 0 6
38955: PUSH
38956: LD_VAR 0 8
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PPUSH
38965: CALL 71053 0 2
38969: ST_TO_ADDR
38970: GO 39057
// begin for j := 1 to Count ( result ) do
38972: LD_ADDR_VAR 0 7
38976: PUSH
38977: DOUBLE
38978: LD_INT 1
38980: DEC
38981: ST_TO_ADDR
38982: LD_VAR 0 5
38986: PPUSH
38987: CALL 35453 0 1
38991: PUSH
38992: FOR_TO
38993: IFFALSE 39055
// begin if tmp < result [ j ] [ 2 ] then
38995: LD_VAR 0 8
38999: PUSH
39000: LD_VAR 0 5
39004: PUSH
39005: LD_VAR 0 7
39009: ARRAY
39010: PUSH
39011: LD_INT 2
39013: ARRAY
39014: LESS
39015: IFFALSE 39053
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39017: LD_ADDR_VAR 0 5
39021: PUSH
39022: LD_VAR 0 5
39026: PPUSH
39027: LD_VAR 0 7
39031: PPUSH
39032: LD_VAR 0 6
39036: PUSH
39037: LD_VAR 0 8
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PPUSH
39046: CALL_OW 2
39050: ST_TO_ADDR
// break ;
39051: GO 39055
// end ; end ;
39053: GO 38992
39055: POP
39056: POP
// end ; end ;
39057: GO 38840
39059: POP
39060: POP
// if result and not asc then
39061: LD_VAR 0 5
39065: PUSH
39066: LD_VAR 0 3
39070: NOT
39071: AND
39072: IFFALSE 39089
// result := ReverseArray ( result ) ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_VAR 0 5
39083: PPUSH
39084: CALL 66329 0 1
39088: ST_TO_ADDR
// tmp := [ ] ;
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: EMPTY
39095: ST_TO_ADDR
// if mode then
39096: LD_VAR 0 4
39100: IFFALSE 39164
// begin for i := 1 to result do
39102: LD_ADDR_VAR 0 6
39106: PUSH
39107: DOUBLE
39108: LD_INT 1
39110: DEC
39111: ST_TO_ADDR
39112: LD_VAR 0 5
39116: PUSH
39117: FOR_TO
39118: IFFALSE 39152
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39120: LD_ADDR_VAR 0 8
39124: PUSH
39125: LD_VAR 0 8
39129: PPUSH
39130: LD_VAR 0 5
39134: PUSH
39135: LD_VAR 0 6
39139: ARRAY
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PPUSH
39145: CALL 71053 0 2
39149: ST_TO_ADDR
39150: GO 39117
39152: POP
39153: POP
// result := tmp ;
39154: LD_ADDR_VAR 0 5
39158: PUSH
39159: LD_VAR 0 8
39163: ST_TO_ADDR
// end ; end ;
39164: LD_VAR 0 5
39168: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39169: LD_INT 0
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
// if not list then
39175: LD_VAR 0 3
39179: NOT
39180: IFFALSE 39184
// exit ;
39182: GO 39572
// result := [ ] ;
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: EMPTY
39190: ST_TO_ADDR
// for i in list do
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: LD_VAR 0 3
39200: PUSH
39201: FOR_IN
39202: IFFALSE 39404
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39204: LD_ADDR_VAR 0 9
39208: PUSH
39209: LD_VAR 0 7
39213: PPUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: LD_VAR 0 2
39223: PPUSH
39224: CALL_OW 297
39228: ST_TO_ADDR
// if not result then
39229: LD_VAR 0 6
39233: NOT
39234: IFFALSE 39260
// result := [ [ i , tmp ] ] else
39236: LD_ADDR_VAR 0 6
39240: PUSH
39241: LD_VAR 0 7
39245: PUSH
39246: LD_VAR 0 9
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: ST_TO_ADDR
39258: GO 39402
// begin if result [ result ] [ 2 ] < tmp then
39260: LD_VAR 0 6
39264: PUSH
39265: LD_VAR 0 6
39269: ARRAY
39270: PUSH
39271: LD_INT 2
39273: ARRAY
39274: PUSH
39275: LD_VAR 0 9
39279: LESS
39280: IFFALSE 39322
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39282: LD_ADDR_VAR 0 6
39286: PUSH
39287: LD_VAR 0 6
39291: PPUSH
39292: LD_VAR 0 6
39296: PUSH
39297: LD_INT 1
39299: PLUS
39300: PPUSH
39301: LD_VAR 0 7
39305: PUSH
39306: LD_VAR 0 9
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 2
39319: ST_TO_ADDR
39320: GO 39402
// for j = 1 to result do
39322: LD_ADDR_VAR 0 8
39326: PUSH
39327: DOUBLE
39328: LD_INT 1
39330: DEC
39331: ST_TO_ADDR
39332: LD_VAR 0 6
39336: PUSH
39337: FOR_TO
39338: IFFALSE 39400
// begin if tmp < result [ j ] [ 2 ] then
39340: LD_VAR 0 9
39344: PUSH
39345: LD_VAR 0 6
39349: PUSH
39350: LD_VAR 0 8
39354: ARRAY
39355: PUSH
39356: LD_INT 2
39358: ARRAY
39359: LESS
39360: IFFALSE 39398
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39362: LD_ADDR_VAR 0 6
39366: PUSH
39367: LD_VAR 0 6
39371: PPUSH
39372: LD_VAR 0 8
39376: PPUSH
39377: LD_VAR 0 7
39381: PUSH
39382: LD_VAR 0 9
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PPUSH
39391: CALL_OW 2
39395: ST_TO_ADDR
// break ;
39396: GO 39400
// end ; end ;
39398: GO 39337
39400: POP
39401: POP
// end ; end ;
39402: GO 39201
39404: POP
39405: POP
// if result and not asc then
39406: LD_VAR 0 6
39410: PUSH
39411: LD_VAR 0 4
39415: NOT
39416: AND
39417: IFFALSE 39492
// begin tmp := result ;
39419: LD_ADDR_VAR 0 9
39423: PUSH
39424: LD_VAR 0 6
39428: ST_TO_ADDR
// for i = tmp downto 1 do
39429: LD_ADDR_VAR 0 7
39433: PUSH
39434: DOUBLE
39435: LD_VAR 0 9
39439: INC
39440: ST_TO_ADDR
39441: LD_INT 1
39443: PUSH
39444: FOR_DOWNTO
39445: IFFALSE 39490
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39447: LD_ADDR_VAR 0 6
39451: PUSH
39452: LD_VAR 0 6
39456: PPUSH
39457: LD_VAR 0 9
39461: PUSH
39462: LD_VAR 0 7
39466: MINUS
39467: PUSH
39468: LD_INT 1
39470: PLUS
39471: PPUSH
39472: LD_VAR 0 9
39476: PUSH
39477: LD_VAR 0 7
39481: ARRAY
39482: PPUSH
39483: CALL_OW 1
39487: ST_TO_ADDR
39488: GO 39444
39490: POP
39491: POP
// end ; tmp := [ ] ;
39492: LD_ADDR_VAR 0 9
39496: PUSH
39497: EMPTY
39498: ST_TO_ADDR
// if mode then
39499: LD_VAR 0 5
39503: IFFALSE 39572
// begin for i = 1 to result do
39505: LD_ADDR_VAR 0 7
39509: PUSH
39510: DOUBLE
39511: LD_INT 1
39513: DEC
39514: ST_TO_ADDR
39515: LD_VAR 0 6
39519: PUSH
39520: FOR_TO
39521: IFFALSE 39560
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39523: LD_ADDR_VAR 0 9
39527: PUSH
39528: LD_VAR 0 9
39532: PPUSH
39533: LD_VAR 0 7
39537: PPUSH
39538: LD_VAR 0 6
39542: PUSH
39543: LD_VAR 0 7
39547: ARRAY
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: CALL_OW 1
39557: ST_TO_ADDR
39558: GO 39520
39560: POP
39561: POP
// result := tmp ;
39562: LD_ADDR_VAR 0 6
39566: PUSH
39567: LD_VAR 0 9
39571: ST_TO_ADDR
// end ; end ;
39572: LD_VAR 0 6
39576: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39577: LD_INT 0
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39585: LD_ADDR_VAR 0 5
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// if not x or not y then
39607: LD_VAR 0 2
39611: NOT
39612: PUSH
39613: LD_VAR 0 3
39617: NOT
39618: OR
39619: IFFALSE 39623
// exit ;
39621: GO 41273
// if not range then
39623: LD_VAR 0 4
39627: NOT
39628: IFFALSE 39638
// range := 10 ;
39630: LD_ADDR_VAR 0 4
39634: PUSH
39635: LD_INT 10
39637: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39638: LD_ADDR_VAR 0 8
39642: PUSH
39643: LD_INT 81
39645: PUSH
39646: LD_VAR 0 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 92
39657: PUSH
39658: LD_VAR 0 2
39662: PUSH
39663: LD_VAR 0 3
39667: PUSH
39668: LD_VAR 0 4
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 21
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: PPUSH
39701: CALL_OW 69
39705: ST_TO_ADDR
// if not tmp then
39706: LD_VAR 0 8
39710: NOT
39711: IFFALSE 39715
// exit ;
39713: GO 41273
// for i in tmp do
39715: LD_ADDR_VAR 0 6
39719: PUSH
39720: LD_VAR 0 8
39724: PUSH
39725: FOR_IN
39726: IFFALSE 41248
// begin points := [ 0 , 0 , 0 ] ;
39728: LD_ADDR_VAR 0 9
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// bpoints := 1 ;
39747: LD_ADDR_VAR 0 10
39751: PUSH
39752: LD_INT 1
39754: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39755: LD_VAR 0 6
39759: PPUSH
39760: CALL_OW 247
39764: PUSH
39765: LD_INT 1
39767: DOUBLE
39768: EQUAL
39769: IFTRUE 39773
39771: GO 40351
39773: POP
// begin if GetClass ( i ) = 1 then
39774: LD_VAR 0 6
39778: PPUSH
39779: CALL_OW 257
39783: PUSH
39784: LD_INT 1
39786: EQUAL
39787: IFFALSE 39808
// points := [ 10 , 5 , 3 ] ;
39789: LD_ADDR_VAR 0 9
39793: PUSH
39794: LD_INT 10
39796: PUSH
39797: LD_INT 5
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39808: LD_VAR 0 6
39812: PPUSH
39813: CALL_OW 257
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: LD_INT 4
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: IN
39832: IFFALSE 39853
// points := [ 3 , 2 , 1 ] ;
39834: LD_ADDR_VAR 0 9
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39853: LD_VAR 0 6
39857: PPUSH
39858: CALL_OW 257
39862: PUSH
39863: LD_INT 5
39865: EQUAL
39866: IFFALSE 39887
// points := [ 130 , 5 , 2 ] ;
39868: LD_ADDR_VAR 0 9
39872: PUSH
39873: LD_INT 130
39875: PUSH
39876: LD_INT 5
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39887: LD_VAR 0 6
39891: PPUSH
39892: CALL_OW 257
39896: PUSH
39897: LD_INT 8
39899: EQUAL
39900: IFFALSE 39921
// points := [ 35 , 35 , 30 ] ;
39902: LD_ADDR_VAR 0 9
39906: PUSH
39907: LD_INT 35
39909: PUSH
39910: LD_INT 35
39912: PUSH
39913: LD_INT 30
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39921: LD_VAR 0 6
39925: PPUSH
39926: CALL_OW 257
39930: PUSH
39931: LD_INT 9
39933: EQUAL
39934: IFFALSE 39955
// points := [ 20 , 55 , 40 ] ;
39936: LD_ADDR_VAR 0 9
39940: PUSH
39941: LD_INT 20
39943: PUSH
39944: LD_INT 55
39946: PUSH
39947: LD_INT 40
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39955: LD_VAR 0 6
39959: PPUSH
39960: CALL_OW 257
39964: PUSH
39965: LD_INT 12
39967: PUSH
39968: LD_INT 16
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: IN
39975: IFFALSE 39996
// points := [ 5 , 3 , 2 ] ;
39977: LD_ADDR_VAR 0 9
39981: PUSH
39982: LD_INT 5
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39996: LD_VAR 0 6
40000: PPUSH
40001: CALL_OW 257
40005: PUSH
40006: LD_INT 17
40008: EQUAL
40009: IFFALSE 40030
// points := [ 100 , 50 , 75 ] ;
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: LD_INT 100
40018: PUSH
40019: LD_INT 50
40021: PUSH
40022: LD_INT 75
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40030: LD_VAR 0 6
40034: PPUSH
40035: CALL_OW 257
40039: PUSH
40040: LD_INT 15
40042: EQUAL
40043: IFFALSE 40064
// points := [ 10 , 5 , 3 ] ;
40045: LD_ADDR_VAR 0 9
40049: PUSH
40050: LD_INT 10
40052: PUSH
40053: LD_INT 5
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40064: LD_VAR 0 6
40068: PPUSH
40069: CALL_OW 257
40073: PUSH
40074: LD_INT 14
40076: EQUAL
40077: IFFALSE 40098
// points := [ 10 , 0 , 0 ] ;
40079: LD_ADDR_VAR 0 9
40083: PUSH
40084: LD_INT 10
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40098: LD_VAR 0 6
40102: PPUSH
40103: CALL_OW 257
40107: PUSH
40108: LD_INT 11
40110: EQUAL
40111: IFFALSE 40132
// points := [ 30 , 10 , 5 ] ;
40113: LD_ADDR_VAR 0 9
40117: PUSH
40118: LD_INT 30
40120: PUSH
40121: LD_INT 10
40123: PUSH
40124: LD_INT 5
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40132: LD_VAR 0 1
40136: PPUSH
40137: LD_INT 5
40139: PPUSH
40140: CALL_OW 321
40144: PUSH
40145: LD_INT 2
40147: EQUAL
40148: IFFALSE 40165
// bpoints := bpoints * 1.8 ;
40150: LD_ADDR_VAR 0 10
40154: PUSH
40155: LD_VAR 0 10
40159: PUSH
40160: LD_REAL  1.80000000000000E+0000
40163: MUL
40164: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40165: LD_VAR 0 6
40169: PPUSH
40170: CALL_OW 257
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: IN
40193: PUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_INT 51
40201: PPUSH
40202: CALL_OW 321
40206: PUSH
40207: LD_INT 2
40209: EQUAL
40210: AND
40211: IFFALSE 40228
// bpoints := bpoints * 1.2 ;
40213: LD_ADDR_VAR 0 10
40217: PUSH
40218: LD_VAR 0 10
40222: PUSH
40223: LD_REAL  1.20000000000000E+0000
40226: MUL
40227: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40228: LD_VAR 0 6
40232: PPUSH
40233: CALL_OW 257
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: LD_INT 7
40243: PUSH
40244: LD_INT 9
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: IN
40252: PUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: LD_INT 52
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_INT 2
40268: EQUAL
40269: AND
40270: IFFALSE 40287
// bpoints := bpoints * 1.5 ;
40272: LD_ADDR_VAR 0 10
40276: PUSH
40277: LD_VAR 0 10
40281: PUSH
40282: LD_REAL  1.50000000000000E+0000
40285: MUL
40286: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40287: LD_VAR 0 1
40291: PPUSH
40292: LD_INT 66
40294: PPUSH
40295: CALL_OW 321
40299: PUSH
40300: LD_INT 2
40302: EQUAL
40303: IFFALSE 40320
// bpoints := bpoints * 1.1 ;
40305: LD_ADDR_VAR 0 10
40309: PUSH
40310: LD_VAR 0 10
40314: PUSH
40315: LD_REAL  1.10000000000000E+0000
40318: MUL
40319: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40320: LD_ADDR_VAR 0 10
40324: PUSH
40325: LD_VAR 0 10
40329: PUSH
40330: LD_VAR 0 6
40334: PPUSH
40335: LD_INT 1
40337: PPUSH
40338: CALL_OW 259
40342: PUSH
40343: LD_REAL  1.15000000000000E+0000
40346: MUL
40347: MUL
40348: ST_TO_ADDR
// end ; unit_vehicle :
40349: GO 41177
40351: LD_INT 2
40353: DOUBLE
40354: EQUAL
40355: IFTRUE 40359
40357: GO 41165
40359: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40360: LD_VAR 0 6
40364: PPUSH
40365: CALL_OW 264
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 42
40375: PUSH
40376: LD_INT 24
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: IN
40384: IFFALSE 40405
// points := [ 25 , 5 , 3 ] ;
40386: LD_ADDR_VAR 0 9
40390: PUSH
40391: LD_INT 25
40393: PUSH
40394: LD_INT 5
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40405: LD_VAR 0 6
40409: PPUSH
40410: CALL_OW 264
40414: PUSH
40415: LD_INT 4
40417: PUSH
40418: LD_INT 43
40420: PUSH
40421: LD_INT 25
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: IN
40429: IFFALSE 40450
// points := [ 40 , 15 , 5 ] ;
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_INT 40
40438: PUSH
40439: LD_INT 15
40441: PUSH
40442: LD_INT 5
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40450: LD_VAR 0 6
40454: PPUSH
40455: CALL_OW 264
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: LD_INT 23
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: IN
40470: IFFALSE 40491
// points := [ 7 , 25 , 8 ] ;
40472: LD_ADDR_VAR 0 9
40476: PUSH
40477: LD_INT 7
40479: PUSH
40480: LD_INT 25
40482: PUSH
40483: LD_INT 8
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40491: LD_VAR 0 6
40495: PPUSH
40496: CALL_OW 264
40500: PUSH
40501: LD_INT 5
40503: PUSH
40504: LD_INT 27
40506: PUSH
40507: LD_INT 44
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: IN
40515: IFFALSE 40536
// points := [ 14 , 50 , 16 ] ;
40517: LD_ADDR_VAR 0 9
40521: PUSH
40522: LD_INT 14
40524: PUSH
40525: LD_INT 50
40527: PUSH
40528: LD_INT 16
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 264
40545: PUSH
40546: LD_INT 6
40548: PUSH
40549: LD_INT 46
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: IN
40556: IFFALSE 40577
// points := [ 32 , 120 , 70 ] ;
40558: LD_ADDR_VAR 0 9
40562: PUSH
40563: LD_INT 32
40565: PUSH
40566: LD_INT 120
40568: PUSH
40569: LD_INT 70
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40577: LD_VAR 0 6
40581: PPUSH
40582: CALL_OW 264
40586: PUSH
40587: LD_INT 7
40589: PUSH
40590: LD_INT 28
40592: PUSH
40593: LD_INT 45
40595: PUSH
40596: LD_INT 92
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: IN
40605: IFFALSE 40626
// points := [ 35 , 20 , 45 ] ;
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_INT 35
40614: PUSH
40615: LD_INT 20
40617: PUSH
40618: LD_INT 45
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40626: LD_VAR 0 6
40630: PPUSH
40631: CALL_OW 264
40635: PUSH
40636: LD_INT 47
40638: PUSH
40639: EMPTY
40640: LIST
40641: IN
40642: IFFALSE 40663
// points := [ 67 , 45 , 75 ] ;
40644: LD_ADDR_VAR 0 9
40648: PUSH
40649: LD_INT 67
40651: PUSH
40652: LD_INT 45
40654: PUSH
40655: LD_INT 75
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40663: LD_VAR 0 6
40667: PPUSH
40668: CALL_OW 264
40672: PUSH
40673: LD_INT 26
40675: PUSH
40676: EMPTY
40677: LIST
40678: IN
40679: IFFALSE 40700
// points := [ 120 , 30 , 80 ] ;
40681: LD_ADDR_VAR 0 9
40685: PUSH
40686: LD_INT 120
40688: PUSH
40689: LD_INT 30
40691: PUSH
40692: LD_INT 80
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40700: LD_VAR 0 6
40704: PPUSH
40705: CALL_OW 264
40709: PUSH
40710: LD_INT 22
40712: PUSH
40713: EMPTY
40714: LIST
40715: IN
40716: IFFALSE 40737
// points := [ 40 , 1 , 1 ] ;
40718: LD_ADDR_VAR 0 9
40722: PUSH
40723: LD_INT 40
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40737: LD_VAR 0 6
40741: PPUSH
40742: CALL_OW 264
40746: PUSH
40747: LD_INT 29
40749: PUSH
40750: EMPTY
40751: LIST
40752: IN
40753: IFFALSE 40774
// points := [ 70 , 200 , 400 ] ;
40755: LD_ADDR_VAR 0 9
40759: PUSH
40760: LD_INT 70
40762: PUSH
40763: LD_INT 200
40765: PUSH
40766: LD_INT 400
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40774: LD_VAR 0 6
40778: PPUSH
40779: CALL_OW 264
40783: PUSH
40784: LD_INT 14
40786: PUSH
40787: LD_INT 53
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: IN
40794: IFFALSE 40815
// points := [ 40 , 10 , 20 ] ;
40796: LD_ADDR_VAR 0 9
40800: PUSH
40801: LD_INT 40
40803: PUSH
40804: LD_INT 10
40806: PUSH
40807: LD_INT 20
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40815: LD_VAR 0 6
40819: PPUSH
40820: CALL_OW 264
40824: PUSH
40825: LD_INT 9
40827: PUSH
40828: EMPTY
40829: LIST
40830: IN
40831: IFFALSE 40852
// points := [ 5 , 70 , 20 ] ;
40833: LD_ADDR_VAR 0 9
40837: PUSH
40838: LD_INT 5
40840: PUSH
40841: LD_INT 70
40843: PUSH
40844: LD_INT 20
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40852: LD_VAR 0 6
40856: PPUSH
40857: CALL_OW 264
40861: PUSH
40862: LD_INT 10
40864: PUSH
40865: EMPTY
40866: LIST
40867: IN
40868: IFFALSE 40889
// points := [ 35 , 110 , 70 ] ;
40870: LD_ADDR_VAR 0 9
40874: PUSH
40875: LD_INT 35
40877: PUSH
40878: LD_INT 110
40880: PUSH
40881: LD_INT 70
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40889: LD_VAR 0 6
40893: PPUSH
40894: CALL_OW 265
40898: PUSH
40899: LD_INT 25
40901: EQUAL
40902: IFFALSE 40923
// points := [ 80 , 65 , 100 ] ;
40904: LD_ADDR_VAR 0 9
40908: PUSH
40909: LD_INT 80
40911: PUSH
40912: LD_INT 65
40914: PUSH
40915: LD_INT 100
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40923: LD_VAR 0 6
40927: PPUSH
40928: CALL_OW 263
40932: PUSH
40933: LD_INT 1
40935: EQUAL
40936: IFFALSE 40971
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40938: LD_ADDR_VAR 0 10
40942: PUSH
40943: LD_VAR 0 10
40947: PUSH
40948: LD_VAR 0 6
40952: PPUSH
40953: CALL_OW 311
40957: PPUSH
40958: LD_INT 3
40960: PPUSH
40961: CALL_OW 259
40965: PUSH
40966: LD_INT 4
40968: MUL
40969: MUL
40970: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40971: LD_VAR 0 6
40975: PPUSH
40976: CALL_OW 263
40980: PUSH
40981: LD_INT 2
40983: EQUAL
40984: IFFALSE 41035
// begin j := IsControledBy ( i ) ;
40986: LD_ADDR_VAR 0 7
40990: PUSH
40991: LD_VAR 0 6
40995: PPUSH
40996: CALL_OW 312
41000: ST_TO_ADDR
// if j then
41001: LD_VAR 0 7
41005: IFFALSE 41035
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41007: LD_ADDR_VAR 0 10
41011: PUSH
41012: LD_VAR 0 10
41016: PUSH
41017: LD_VAR 0 7
41021: PPUSH
41022: LD_INT 3
41024: PPUSH
41025: CALL_OW 259
41029: PUSH
41030: LD_INT 3
41032: MUL
41033: MUL
41034: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41035: LD_VAR 0 6
41039: PPUSH
41040: CALL_OW 264
41044: PUSH
41045: LD_INT 5
41047: PUSH
41048: LD_INT 6
41050: PUSH
41051: LD_INT 46
41053: PUSH
41054: LD_INT 44
41056: PUSH
41057: LD_INT 47
41059: PUSH
41060: LD_INT 45
41062: PUSH
41063: LD_INT 28
41065: PUSH
41066: LD_INT 7
41068: PUSH
41069: LD_INT 27
41071: PUSH
41072: LD_INT 29
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: IN
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: LD_INT 52
41095: PPUSH
41096: CALL_OW 321
41100: PUSH
41101: LD_INT 2
41103: EQUAL
41104: AND
41105: IFFALSE 41122
// bpoints := bpoints * 1.2 ;
41107: LD_ADDR_VAR 0 10
41111: PUSH
41112: LD_VAR 0 10
41116: PUSH
41117: LD_REAL  1.20000000000000E+0000
41120: MUL
41121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41122: LD_VAR 0 6
41126: PPUSH
41127: CALL_OW 264
41131: PUSH
41132: LD_INT 6
41134: PUSH
41135: LD_INT 46
41137: PUSH
41138: LD_INT 47
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: IN
41146: IFFALSE 41163
// bpoints := bpoints * 1.2 ;
41148: LD_ADDR_VAR 0 10
41152: PUSH
41153: LD_VAR 0 10
41157: PUSH
41158: LD_REAL  1.20000000000000E+0000
41161: MUL
41162: ST_TO_ADDR
// end ; unit_building :
41163: GO 41177
41165: LD_INT 3
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41176
41173: POP
// ; end ;
41174: GO 41177
41176: POP
// for j = 1 to 3 do
41177: LD_ADDR_VAR 0 7
41181: PUSH
41182: DOUBLE
41183: LD_INT 1
41185: DEC
41186: ST_TO_ADDR
41187: LD_INT 3
41189: PUSH
41190: FOR_TO
41191: IFFALSE 41244
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41193: LD_ADDR_VAR 0 5
41197: PUSH
41198: LD_VAR 0 5
41202: PPUSH
41203: LD_VAR 0 7
41207: PPUSH
41208: LD_VAR 0 5
41212: PUSH
41213: LD_VAR 0 7
41217: ARRAY
41218: PUSH
41219: LD_VAR 0 9
41223: PUSH
41224: LD_VAR 0 7
41228: ARRAY
41229: PUSH
41230: LD_VAR 0 10
41234: MUL
41235: PLUS
41236: PPUSH
41237: CALL_OW 1
41241: ST_TO_ADDR
41242: GO 41190
41244: POP
41245: POP
// end ;
41246: GO 39725
41248: POP
41249: POP
// result := Replace ( result , 4 , tmp ) ;
41250: LD_ADDR_VAR 0 5
41254: PUSH
41255: LD_VAR 0 5
41259: PPUSH
41260: LD_INT 4
41262: PPUSH
41263: LD_VAR 0 8
41267: PPUSH
41268: CALL_OW 1
41272: ST_TO_ADDR
// end ;
41273: LD_VAR 0 5
41277: RET
// export function DangerAtRange ( unit , range ) ; begin
41278: LD_INT 0
41280: PPUSH
// if not unit then
41281: LD_VAR 0 1
41285: NOT
41286: IFFALSE 41290
// exit ;
41288: GO 41335
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 1
41299: PPUSH
41300: CALL_OW 255
41304: PPUSH
41305: LD_VAR 0 1
41309: PPUSH
41310: CALL_OW 250
41314: PPUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: CALL_OW 251
41324: PPUSH
41325: LD_VAR 0 2
41329: PPUSH
41330: CALL 39577 0 4
41334: ST_TO_ADDR
// end ;
41335: LD_VAR 0 3
41339: RET
// export function DangerInArea ( side , area ) ; begin
41340: LD_INT 0
41342: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41343: LD_ADDR_VAR 0 3
41347: PUSH
41348: LD_VAR 0 2
41352: PPUSH
41353: LD_INT 81
41355: PUSH
41356: LD_VAR 0 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PPUSH
41365: CALL_OW 70
41369: ST_TO_ADDR
// end ;
41370: LD_VAR 0 3
41374: RET
// export function IsExtension ( b ) ; begin
41375: LD_INT 0
41377: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41378: LD_ADDR_VAR 0 2
41382: PUSH
41383: LD_VAR 0 1
41387: PUSH
41388: LD_INT 23
41390: PUSH
41391: LD_INT 20
41393: PUSH
41394: LD_INT 22
41396: PUSH
41397: LD_INT 17
41399: PUSH
41400: LD_INT 24
41402: PUSH
41403: LD_INT 21
41405: PUSH
41406: LD_INT 19
41408: PUSH
41409: LD_INT 16
41411: PUSH
41412: LD_INT 25
41414: PUSH
41415: LD_INT 18
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: IN
41430: ST_TO_ADDR
// end ;
41431: LD_VAR 0 2
41435: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41436: LD_INT 0
41438: PPUSH
41439: PPUSH
41440: PPUSH
// result := [ ] ;
41441: LD_ADDR_VAR 0 4
41445: PUSH
41446: EMPTY
41447: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41448: LD_ADDR_VAR 0 5
41452: PUSH
41453: LD_VAR 0 2
41457: PPUSH
41458: LD_INT 21
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PPUSH
41468: CALL_OW 70
41472: ST_TO_ADDR
// if not tmp then
41473: LD_VAR 0 5
41477: NOT
41478: IFFALSE 41482
// exit ;
41480: GO 41546
// if checkLink then
41482: LD_VAR 0 3
41486: IFFALSE 41536
// begin for i in tmp do
41488: LD_ADDR_VAR 0 6
41492: PUSH
41493: LD_VAR 0 5
41497: PUSH
41498: FOR_IN
41499: IFFALSE 41534
// if GetBase ( i ) <> base then
41501: LD_VAR 0 6
41505: PPUSH
41506: CALL_OW 274
41510: PUSH
41511: LD_VAR 0 1
41515: NONEQUAL
41516: IFFALSE 41532
// ComLinkToBase ( base , i ) ;
41518: LD_VAR 0 1
41522: PPUSH
41523: LD_VAR 0 6
41527: PPUSH
41528: CALL_OW 169
41532: GO 41498
41534: POP
41535: POP
// end ; result := tmp ;
41536: LD_ADDR_VAR 0 4
41540: PUSH
41541: LD_VAR 0 5
41545: ST_TO_ADDR
// end ;
41546: LD_VAR 0 4
41550: RET
// export function ComComplete ( units , b ) ; var i ; begin
41551: LD_INT 0
41553: PPUSH
41554: PPUSH
// if not units then
41555: LD_VAR 0 1
41559: NOT
41560: IFFALSE 41564
// exit ;
41562: GO 41654
// for i in units do
41564: LD_ADDR_VAR 0 4
41568: PUSH
41569: LD_VAR 0 1
41573: PUSH
41574: FOR_IN
41575: IFFALSE 41652
// if BuildingStatus ( b ) = bs_build then
41577: LD_VAR 0 2
41581: PPUSH
41582: CALL_OW 461
41586: PUSH
41587: LD_INT 1
41589: EQUAL
41590: IFFALSE 41650
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41592: LD_VAR 0 4
41596: PPUSH
41597: LD_STRING h
41599: PUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: CALL_OW 250
41609: PUSH
41610: LD_VAR 0 2
41614: PPUSH
41615: CALL_OW 251
41619: PUSH
41620: LD_VAR 0 2
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: PPUSH
41646: CALL_OW 446
41650: GO 41574
41652: POP
41653: POP
// end ;
41654: LD_VAR 0 3
41658: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41659: LD_INT 0
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41667: LD_VAR 0 1
41671: NOT
41672: PUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: CALL_OW 263
41682: PUSH
41683: LD_INT 2
41685: NONEQUAL
41686: OR
41687: IFFALSE 41691
// exit ;
41689: GO 42007
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41691: LD_ADDR_VAR 0 6
41695: PUSH
41696: LD_INT 22
41698: PUSH
41699: LD_VAR 0 1
41703: PPUSH
41704: CALL_OW 255
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 30
41718: PUSH
41719: LD_INT 36
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 34
41728: PUSH
41729: LD_INT 31
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PPUSH
41745: CALL_OW 69
41749: ST_TO_ADDR
// if not tmp then
41750: LD_VAR 0 6
41754: NOT
41755: IFFALSE 41759
// exit ;
41757: GO 42007
// result := [ ] ;
41759: LD_ADDR_VAR 0 2
41763: PUSH
41764: EMPTY
41765: ST_TO_ADDR
// for i in tmp do
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 6
41775: PUSH
41776: FOR_IN
41777: IFFALSE 41848
// begin t := UnitsInside ( i ) ;
41779: LD_ADDR_VAR 0 4
41783: PUSH
41784: LD_VAR 0 3
41788: PPUSH
41789: CALL_OW 313
41793: ST_TO_ADDR
// if t then
41794: LD_VAR 0 4
41798: IFFALSE 41846
// for j in t do
41800: LD_ADDR_VAR 0 7
41804: PUSH
41805: LD_VAR 0 4
41809: PUSH
41810: FOR_IN
41811: IFFALSE 41844
// result := Replace ( result , result + 1 , j ) ;
41813: LD_ADDR_VAR 0 2
41817: PUSH
41818: LD_VAR 0 2
41822: PPUSH
41823: LD_VAR 0 2
41827: PUSH
41828: LD_INT 1
41830: PLUS
41831: PPUSH
41832: LD_VAR 0 7
41836: PPUSH
41837: CALL_OW 1
41841: ST_TO_ADDR
41842: GO 41810
41844: POP
41845: POP
// end ;
41846: GO 41776
41848: POP
41849: POP
// if not result then
41850: LD_VAR 0 2
41854: NOT
41855: IFFALSE 41859
// exit ;
41857: GO 42007
// mech := result [ 1 ] ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_VAR 0 2
41868: PUSH
41869: LD_INT 1
41871: ARRAY
41872: ST_TO_ADDR
// if result > 1 then
41873: LD_VAR 0 2
41877: PUSH
41878: LD_INT 1
41880: GREATER
41881: IFFALSE 41993
// begin for i = 2 to result do
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: DOUBLE
41889: LD_INT 2
41891: DEC
41892: ST_TO_ADDR
41893: LD_VAR 0 2
41897: PUSH
41898: FOR_TO
41899: IFFALSE 41991
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: LD_VAR 0 2
41910: PUSH
41911: LD_VAR 0 3
41915: ARRAY
41916: PPUSH
41917: LD_INT 3
41919: PPUSH
41920: CALL_OW 259
41924: PUSH
41925: LD_VAR 0 2
41929: PUSH
41930: LD_VAR 0 3
41934: ARRAY
41935: PPUSH
41936: CALL_OW 432
41940: MINUS
41941: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41942: LD_VAR 0 4
41946: PUSH
41947: LD_VAR 0 5
41951: PPUSH
41952: LD_INT 3
41954: PPUSH
41955: CALL_OW 259
41959: PUSH
41960: LD_VAR 0 5
41964: PPUSH
41965: CALL_OW 432
41969: MINUS
41970: GREATEREQUAL
41971: IFFALSE 41989
// mech := result [ i ] ;
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_VAR 0 2
41982: PUSH
41983: LD_VAR 0 3
41987: ARRAY
41988: ST_TO_ADDR
// end ;
41989: GO 41898
41991: POP
41992: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41993: LD_VAR 0 1
41997: PPUSH
41998: LD_VAR 0 5
42002: PPUSH
42003: CALL_OW 135
// end ;
42007: LD_VAR 0 2
42011: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
// result := [ ] ;
42027: LD_ADDR_VAR 0 7
42031: PUSH
42032: EMPTY
42033: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42034: LD_VAR 0 1
42038: PPUSH
42039: CALL_OW 266
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: IN
42054: NOT
42055: IFFALSE 42059
// exit ;
42057: GO 43693
// if name then
42059: LD_VAR 0 3
42063: IFFALSE 42079
// SetBName ( base_dep , name ) ;
42065: LD_VAR 0 1
42069: PPUSH
42070: LD_VAR 0 3
42074: PPUSH
42075: CALL_OW 500
// base := GetBase ( base_dep ) ;
42079: LD_ADDR_VAR 0 15
42083: PUSH
42084: LD_VAR 0 1
42088: PPUSH
42089: CALL_OW 274
42093: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42094: LD_ADDR_VAR 0 16
42098: PUSH
42099: LD_VAR 0 1
42103: PPUSH
42104: CALL_OW 255
42108: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42109: LD_ADDR_VAR 0 17
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 248
42123: ST_TO_ADDR
// if sources then
42124: LD_VAR 0 5
42128: IFFALSE 42175
// for i = 1 to 3 do
42130: LD_ADDR_VAR 0 8
42134: PUSH
42135: DOUBLE
42136: LD_INT 1
42138: DEC
42139: ST_TO_ADDR
42140: LD_INT 3
42142: PUSH
42143: FOR_TO
42144: IFFALSE 42173
// AddResourceType ( base , i , sources [ i ] ) ;
42146: LD_VAR 0 15
42150: PPUSH
42151: LD_VAR 0 8
42155: PPUSH
42156: LD_VAR 0 5
42160: PUSH
42161: LD_VAR 0 8
42165: ARRAY
42166: PPUSH
42167: CALL_OW 276
42171: GO 42143
42173: POP
42174: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42175: LD_ADDR_VAR 0 18
42179: PUSH
42180: LD_VAR 0 15
42184: PPUSH
42185: LD_VAR 0 2
42189: PPUSH
42190: LD_INT 1
42192: PPUSH
42193: CALL 41436 0 3
42197: ST_TO_ADDR
// InitHc ;
42198: CALL_OW 19
// InitUc ;
42202: CALL_OW 18
// uc_side := side ;
42206: LD_ADDR_OWVAR 20
42210: PUSH
42211: LD_VAR 0 16
42215: ST_TO_ADDR
// uc_nation := nation ;
42216: LD_ADDR_OWVAR 21
42220: PUSH
42221: LD_VAR 0 17
42225: ST_TO_ADDR
// if buildings then
42226: LD_VAR 0 18
42230: IFFALSE 43552
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42232: LD_ADDR_VAR 0 19
42236: PUSH
42237: LD_VAR 0 18
42241: PPUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 30
42247: PUSH
42248: LD_INT 29
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 30
42257: PUSH
42258: LD_INT 30
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: PPUSH
42270: CALL_OW 72
42274: ST_TO_ADDR
// if tmp then
42275: LD_VAR 0 19
42279: IFFALSE 42327
// for i in tmp do
42281: LD_ADDR_VAR 0 8
42285: PUSH
42286: LD_VAR 0 19
42290: PUSH
42291: FOR_IN
42292: IFFALSE 42325
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42294: LD_VAR 0 8
42298: PPUSH
42299: CALL_OW 250
42303: PPUSH
42304: LD_VAR 0 8
42308: PPUSH
42309: CALL_OW 251
42313: PPUSH
42314: LD_VAR 0 16
42318: PPUSH
42319: CALL_OW 441
42323: GO 42291
42325: POP
42326: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42327: LD_VAR 0 18
42331: PPUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 30
42337: PUSH
42338: LD_INT 32
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 30
42347: PUSH
42348: LD_INT 33
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: PPUSH
42360: CALL_OW 72
42364: IFFALSE 42452
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42366: LD_ADDR_VAR 0 8
42370: PUSH
42371: LD_VAR 0 18
42375: PPUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 30
42381: PUSH
42382: LD_INT 32
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 30
42391: PUSH
42392: LD_INT 33
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: PPUSH
42404: CALL_OW 72
42408: PUSH
42409: FOR_IN
42410: IFFALSE 42450
// begin if not GetBWeapon ( i ) then
42412: LD_VAR 0 8
42416: PPUSH
42417: CALL_OW 269
42421: NOT
42422: IFFALSE 42448
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42424: LD_VAR 0 8
42428: PPUSH
42429: LD_VAR 0 8
42433: PPUSH
42434: LD_VAR 0 2
42438: PPUSH
42439: CALL 43698 0 2
42443: PPUSH
42444: CALL_OW 431
// end ;
42448: GO 42409
42450: POP
42451: POP
// end ; for i = 1 to personel do
42452: LD_ADDR_VAR 0 8
42456: PUSH
42457: DOUBLE
42458: LD_INT 1
42460: DEC
42461: ST_TO_ADDR
42462: LD_VAR 0 6
42466: PUSH
42467: FOR_TO
42468: IFFALSE 43532
// begin if i > 4 then
42470: LD_VAR 0 8
42474: PUSH
42475: LD_INT 4
42477: GREATER
42478: IFFALSE 42482
// break ;
42480: GO 43532
// case i of 1 :
42482: LD_VAR 0 8
42486: PUSH
42487: LD_INT 1
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42575
42495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42496: LD_ADDR_VAR 0 12
42500: PUSH
42501: LD_VAR 0 18
42505: PPUSH
42506: LD_INT 22
42508: PUSH
42509: LD_VAR 0 16
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 58
42520: PUSH
42521: EMPTY
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 30
42529: PUSH
42530: LD_INT 32
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 30
42539: PUSH
42540: LD_INT 4
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 30
42549: PUSH
42550: LD_INT 5
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 72
42572: ST_TO_ADDR
42573: GO 42797
42575: LD_INT 2
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42583
42581: GO 42645
42583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42584: LD_ADDR_VAR 0 12
42588: PUSH
42589: LD_VAR 0 18
42593: PPUSH
42594: LD_INT 22
42596: PUSH
42597: LD_VAR 0 16
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 30
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 30
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PPUSH
42638: CALL_OW 72
42642: ST_TO_ADDR
42643: GO 42797
42645: LD_INT 3
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42653
42651: GO 42715
42653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42654: LD_ADDR_VAR 0 12
42658: PUSH
42659: LD_VAR 0 18
42663: PPUSH
42664: LD_INT 22
42666: PUSH
42667: LD_VAR 0 16
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 30
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 30
42691: PUSH
42692: LD_INT 3
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PPUSH
42708: CALL_OW 72
42712: ST_TO_ADDR
42713: GO 42797
42715: LD_INT 4
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 42796
42723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42724: LD_ADDR_VAR 0 12
42728: PUSH
42729: LD_VAR 0 18
42733: PPUSH
42734: LD_INT 22
42736: PUSH
42737: LD_VAR 0 16
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 30
42751: PUSH
42752: LD_INT 6
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: LD_INT 7
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 30
42771: PUSH
42772: LD_INT 8
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PPUSH
42789: CALL_OW 72
42793: ST_TO_ADDR
42794: GO 42797
42796: POP
// if i = 1 then
42797: LD_VAR 0 8
42801: PUSH
42802: LD_INT 1
42804: EQUAL
42805: IFFALSE 42916
// begin tmp := [ ] ;
42807: LD_ADDR_VAR 0 19
42811: PUSH
42812: EMPTY
42813: ST_TO_ADDR
// for j in f do
42814: LD_ADDR_VAR 0 9
42818: PUSH
42819: LD_VAR 0 12
42823: PUSH
42824: FOR_IN
42825: IFFALSE 42898
// if GetBType ( j ) = b_bunker then
42827: LD_VAR 0 9
42831: PPUSH
42832: CALL_OW 266
42836: PUSH
42837: LD_INT 32
42839: EQUAL
42840: IFFALSE 42867
// tmp := Insert ( tmp , 1 , j ) else
42842: LD_ADDR_VAR 0 19
42846: PUSH
42847: LD_VAR 0 19
42851: PPUSH
42852: LD_INT 1
42854: PPUSH
42855: LD_VAR 0 9
42859: PPUSH
42860: CALL_OW 2
42864: ST_TO_ADDR
42865: GO 42896
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42867: LD_ADDR_VAR 0 19
42871: PUSH
42872: LD_VAR 0 19
42876: PPUSH
42877: LD_VAR 0 19
42881: PUSH
42882: LD_INT 1
42884: PLUS
42885: PPUSH
42886: LD_VAR 0 9
42890: PPUSH
42891: CALL_OW 2
42895: ST_TO_ADDR
42896: GO 42824
42898: POP
42899: POP
// if tmp then
42900: LD_VAR 0 19
42904: IFFALSE 42916
// f := tmp ;
42906: LD_ADDR_VAR 0 12
42910: PUSH
42911: LD_VAR 0 19
42915: ST_TO_ADDR
// end ; x := personel [ i ] ;
42916: LD_ADDR_VAR 0 13
42920: PUSH
42921: LD_VAR 0 6
42925: PUSH
42926: LD_VAR 0 8
42930: ARRAY
42931: ST_TO_ADDR
// if x = - 1 then
42932: LD_VAR 0 13
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: EQUAL
42941: IFFALSE 43150
// begin for j in f do
42943: LD_ADDR_VAR 0 9
42947: PUSH
42948: LD_VAR 0 12
42952: PUSH
42953: FOR_IN
42954: IFFALSE 43146
// repeat InitHc ;
42956: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42960: LD_VAR 0 9
42964: PPUSH
42965: CALL_OW 266
42969: PUSH
42970: LD_INT 5
42972: EQUAL
42973: IFFALSE 43043
// begin if UnitsInside ( j ) < 3 then
42975: LD_VAR 0 9
42979: PPUSH
42980: CALL_OW 313
42984: PUSH
42985: LD_INT 3
42987: LESS
42988: IFFALSE 43024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42990: LD_INT 0
42992: PPUSH
42993: LD_INT 5
42995: PUSH
42996: LD_INT 8
42998: PUSH
42999: LD_INT 9
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: PUSH
43007: LD_VAR 0 17
43011: ARRAY
43012: PPUSH
43013: LD_VAR 0 4
43017: PPUSH
43018: CALL_OW 380
43022: GO 43041
// PrepareHuman ( false , i , skill ) ;
43024: LD_INT 0
43026: PPUSH
43027: LD_VAR 0 8
43031: PPUSH
43032: LD_VAR 0 4
43036: PPUSH
43037: CALL_OW 380
// end else
43041: GO 43060
// PrepareHuman ( false , i , skill ) ;
43043: LD_INT 0
43045: PPUSH
43046: LD_VAR 0 8
43050: PPUSH
43051: LD_VAR 0 4
43055: PPUSH
43056: CALL_OW 380
// un := CreateHuman ;
43060: LD_ADDR_VAR 0 14
43064: PUSH
43065: CALL_OW 44
43069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43070: LD_ADDR_VAR 0 7
43074: PUSH
43075: LD_VAR 0 7
43079: PPUSH
43080: LD_INT 1
43082: PPUSH
43083: LD_VAR 0 14
43087: PPUSH
43088: CALL_OW 2
43092: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43093: LD_VAR 0 14
43097: PPUSH
43098: LD_VAR 0 9
43102: PPUSH
43103: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43107: LD_VAR 0 9
43111: PPUSH
43112: CALL_OW 313
43116: PUSH
43117: LD_INT 6
43119: EQUAL
43120: PUSH
43121: LD_VAR 0 9
43125: PPUSH
43126: CALL_OW 266
43130: PUSH
43131: LD_INT 32
43133: PUSH
43134: LD_INT 31
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: IN
43141: OR
43142: IFFALSE 42956
43144: GO 42953
43146: POP
43147: POP
// end else
43148: GO 43530
// for j = 1 to x do
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: DOUBLE
43156: LD_INT 1
43158: DEC
43159: ST_TO_ADDR
43160: LD_VAR 0 13
43164: PUSH
43165: FOR_TO
43166: IFFALSE 43528
// begin InitHc ;
43168: CALL_OW 19
// if not f then
43172: LD_VAR 0 12
43176: NOT
43177: IFFALSE 43266
// begin PrepareHuman ( false , i , skill ) ;
43179: LD_INT 0
43181: PPUSH
43182: LD_VAR 0 8
43186: PPUSH
43187: LD_VAR 0 4
43191: PPUSH
43192: CALL_OW 380
// un := CreateHuman ;
43196: LD_ADDR_VAR 0 14
43200: PUSH
43201: CALL_OW 44
43205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43206: LD_ADDR_VAR 0 7
43210: PUSH
43211: LD_VAR 0 7
43215: PPUSH
43216: LD_INT 1
43218: PPUSH
43219: LD_VAR 0 14
43223: PPUSH
43224: CALL_OW 2
43228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43229: LD_VAR 0 14
43233: PPUSH
43234: LD_VAR 0 1
43238: PPUSH
43239: CALL_OW 250
43243: PPUSH
43244: LD_VAR 0 1
43248: PPUSH
43249: CALL_OW 251
43253: PPUSH
43254: LD_INT 10
43256: PPUSH
43257: LD_INT 0
43259: PPUSH
43260: CALL_OW 50
// continue ;
43264: GO 43165
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43266: LD_VAR 0 12
43270: PUSH
43271: LD_INT 1
43273: ARRAY
43274: PPUSH
43275: CALL_OW 313
43279: PUSH
43280: LD_VAR 0 12
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PPUSH
43289: CALL_OW 266
43293: PUSH
43294: LD_INT 32
43296: PUSH
43297: LD_INT 31
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: IN
43304: AND
43305: PUSH
43306: LD_VAR 0 12
43310: PUSH
43311: LD_INT 1
43313: ARRAY
43314: PPUSH
43315: CALL_OW 313
43319: PUSH
43320: LD_INT 6
43322: EQUAL
43323: OR
43324: IFFALSE 43344
// f := Delete ( f , 1 ) ;
43326: LD_ADDR_VAR 0 12
43330: PUSH
43331: LD_VAR 0 12
43335: PPUSH
43336: LD_INT 1
43338: PPUSH
43339: CALL_OW 3
43343: ST_TO_ADDR
// if not f then
43344: LD_VAR 0 12
43348: NOT
43349: IFFALSE 43367
// begin x := x + 2 ;
43351: LD_ADDR_VAR 0 13
43355: PUSH
43356: LD_VAR 0 13
43360: PUSH
43361: LD_INT 2
43363: PLUS
43364: ST_TO_ADDR
// continue ;
43365: GO 43165
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43367: LD_VAR 0 12
43371: PUSH
43372: LD_INT 1
43374: ARRAY
43375: PPUSH
43376: CALL_OW 266
43380: PUSH
43381: LD_INT 5
43383: EQUAL
43384: IFFALSE 43458
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43386: LD_VAR 0 12
43390: PUSH
43391: LD_INT 1
43393: ARRAY
43394: PPUSH
43395: CALL_OW 313
43399: PUSH
43400: LD_INT 3
43402: LESS
43403: IFFALSE 43439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43405: LD_INT 0
43407: PPUSH
43408: LD_INT 5
43410: PUSH
43411: LD_INT 8
43413: PUSH
43414: LD_INT 9
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: PUSH
43422: LD_VAR 0 17
43426: ARRAY
43427: PPUSH
43428: LD_VAR 0 4
43432: PPUSH
43433: CALL_OW 380
43437: GO 43456
// PrepareHuman ( false , i , skill ) ;
43439: LD_INT 0
43441: PPUSH
43442: LD_VAR 0 8
43446: PPUSH
43447: LD_VAR 0 4
43451: PPUSH
43452: CALL_OW 380
// end else
43456: GO 43475
// PrepareHuman ( false , i , skill ) ;
43458: LD_INT 0
43460: PPUSH
43461: LD_VAR 0 8
43465: PPUSH
43466: LD_VAR 0 4
43470: PPUSH
43471: CALL_OW 380
// un := CreateHuman ;
43475: LD_ADDR_VAR 0 14
43479: PUSH
43480: CALL_OW 44
43484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43485: LD_ADDR_VAR 0 7
43489: PUSH
43490: LD_VAR 0 7
43494: PPUSH
43495: LD_INT 1
43497: PPUSH
43498: LD_VAR 0 14
43502: PPUSH
43503: CALL_OW 2
43507: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43508: LD_VAR 0 14
43512: PPUSH
43513: LD_VAR 0 12
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: PPUSH
43522: CALL_OW 52
// end ;
43526: GO 43165
43528: POP
43529: POP
// end ;
43530: GO 42467
43532: POP
43533: POP
// result := result ^ buildings ;
43534: LD_ADDR_VAR 0 7
43538: PUSH
43539: LD_VAR 0 7
43543: PUSH
43544: LD_VAR 0 18
43548: ADD
43549: ST_TO_ADDR
// end else
43550: GO 43693
// begin for i = 1 to personel do
43552: LD_ADDR_VAR 0 8
43556: PUSH
43557: DOUBLE
43558: LD_INT 1
43560: DEC
43561: ST_TO_ADDR
43562: LD_VAR 0 6
43566: PUSH
43567: FOR_TO
43568: IFFALSE 43691
// begin if i > 4 then
43570: LD_VAR 0 8
43574: PUSH
43575: LD_INT 4
43577: GREATER
43578: IFFALSE 43582
// break ;
43580: GO 43691
// x := personel [ i ] ;
43582: LD_ADDR_VAR 0 13
43586: PUSH
43587: LD_VAR 0 6
43591: PUSH
43592: LD_VAR 0 8
43596: ARRAY
43597: ST_TO_ADDR
// if x = - 1 then
43598: LD_VAR 0 13
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: EQUAL
43607: IFFALSE 43611
// continue ;
43609: GO 43567
// PrepareHuman ( false , i , skill ) ;
43611: LD_INT 0
43613: PPUSH
43614: LD_VAR 0 8
43618: PPUSH
43619: LD_VAR 0 4
43623: PPUSH
43624: CALL_OW 380
// un := CreateHuman ;
43628: LD_ADDR_VAR 0 14
43632: PUSH
43633: CALL_OW 44
43637: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43638: LD_VAR 0 14
43642: PPUSH
43643: LD_VAR 0 1
43647: PPUSH
43648: CALL_OW 250
43652: PPUSH
43653: LD_VAR 0 1
43657: PPUSH
43658: CALL_OW 251
43662: PPUSH
43663: LD_INT 10
43665: PPUSH
43666: LD_INT 0
43668: PPUSH
43669: CALL_OW 50
// result := result ^ un ;
43673: LD_ADDR_VAR 0 7
43677: PUSH
43678: LD_VAR 0 7
43682: PUSH
43683: LD_VAR 0 14
43687: ADD
43688: ST_TO_ADDR
// end ;
43689: GO 43567
43691: POP
43692: POP
// end ; end ;
43693: LD_VAR 0 7
43697: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
// result := false ;
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_INT 0
43723: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43724: LD_VAR 0 1
43728: NOT
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: CALL_OW 266
43739: PUSH
43740: LD_INT 32
43742: PUSH
43743: LD_INT 33
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: IN
43750: NOT
43751: OR
43752: IFFALSE 43756
// exit ;
43754: GO 44865
// nat := GetNation ( tower ) ;
43756: LD_ADDR_VAR 0 12
43760: PUSH
43761: LD_VAR 0 1
43765: PPUSH
43766: CALL_OW 248
43770: ST_TO_ADDR
// side := GetSide ( tower ) ;
43771: LD_ADDR_VAR 0 16
43775: PUSH
43776: LD_VAR 0 1
43780: PPUSH
43781: CALL_OW 255
43785: ST_TO_ADDR
// x := GetX ( tower ) ;
43786: LD_ADDR_VAR 0 10
43790: PUSH
43791: LD_VAR 0 1
43795: PPUSH
43796: CALL_OW 250
43800: ST_TO_ADDR
// y := GetY ( tower ) ;
43801: LD_ADDR_VAR 0 11
43805: PUSH
43806: LD_VAR 0 1
43810: PPUSH
43811: CALL_OW 251
43815: ST_TO_ADDR
// if not x or not y then
43816: LD_VAR 0 10
43820: NOT
43821: PUSH
43822: LD_VAR 0 11
43826: NOT
43827: OR
43828: IFFALSE 43832
// exit ;
43830: GO 44865
// weapon := 0 ;
43832: LD_ADDR_VAR 0 18
43836: PUSH
43837: LD_INT 0
43839: ST_TO_ADDR
// fac_list := [ ] ;
43840: LD_ADDR_VAR 0 17
43844: PUSH
43845: EMPTY
43846: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43847: LD_ADDR_VAR 0 6
43851: PUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 274
43861: PPUSH
43862: LD_VAR 0 2
43866: PPUSH
43867: LD_INT 0
43869: PPUSH
43870: CALL 41436 0 3
43874: PPUSH
43875: LD_INT 30
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PPUSH
43885: CALL_OW 72
43889: ST_TO_ADDR
// if not factories then
43890: LD_VAR 0 6
43894: NOT
43895: IFFALSE 43899
// exit ;
43897: GO 44865
// for i in factories do
43899: LD_ADDR_VAR 0 8
43903: PUSH
43904: LD_VAR 0 6
43908: PUSH
43909: FOR_IN
43910: IFFALSE 43935
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43912: LD_ADDR_VAR 0 17
43916: PUSH
43917: LD_VAR 0 17
43921: PUSH
43922: LD_VAR 0 8
43926: PPUSH
43927: CALL_OW 478
43931: UNION
43932: ST_TO_ADDR
43933: GO 43909
43935: POP
43936: POP
// if not fac_list then
43937: LD_VAR 0 17
43941: NOT
43942: IFFALSE 43946
// exit ;
43944: GO 44865
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43946: LD_ADDR_VAR 0 5
43950: PUSH
43951: LD_INT 4
43953: PUSH
43954: LD_INT 5
43956: PUSH
43957: LD_INT 9
43959: PUSH
43960: LD_INT 10
43962: PUSH
43963: LD_INT 6
43965: PUSH
43966: LD_INT 7
43968: PUSH
43969: LD_INT 11
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 27
43983: PUSH
43984: LD_INT 28
43986: PUSH
43987: LD_INT 26
43989: PUSH
43990: LD_INT 30
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 43
44001: PUSH
44002: LD_INT 44
44004: PUSH
44005: LD_INT 46
44007: PUSH
44008: LD_INT 45
44010: PUSH
44011: LD_INT 47
44013: PUSH
44014: LD_INT 49
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: PUSH
44030: LD_VAR 0 12
44034: ARRAY
44035: ST_TO_ADDR
// list := list isect fac_list ;
44036: LD_ADDR_VAR 0 5
44040: PUSH
44041: LD_VAR 0 5
44045: PUSH
44046: LD_VAR 0 17
44050: ISECT
44051: ST_TO_ADDR
// if not list then
44052: LD_VAR 0 5
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44865
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44061: LD_VAR 0 12
44065: PUSH
44066: LD_INT 3
44068: EQUAL
44069: PUSH
44070: LD_INT 49
44072: PUSH
44073: LD_VAR 0 5
44077: IN
44078: AND
44079: PUSH
44080: LD_INT 31
44082: PPUSH
44083: LD_VAR 0 16
44087: PPUSH
44088: CALL_OW 321
44092: PUSH
44093: LD_INT 2
44095: EQUAL
44096: AND
44097: IFFALSE 44157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44099: LD_INT 22
44101: PUSH
44102: LD_VAR 0 16
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 35
44113: PUSH
44114: LD_INT 49
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 91
44123: PUSH
44124: LD_VAR 0 1
44128: PUSH
44129: LD_INT 10
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: PPUSH
44142: CALL_OW 69
44146: NOT
44147: IFFALSE 44157
// weapon := ru_time_lapser ;
44149: LD_ADDR_VAR 0 18
44153: PUSH
44154: LD_INT 49
44156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44157: LD_VAR 0 12
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: IN
44172: PUSH
44173: LD_INT 11
44175: PUSH
44176: LD_VAR 0 5
44180: IN
44181: PUSH
44182: LD_INT 30
44184: PUSH
44185: LD_VAR 0 5
44189: IN
44190: OR
44191: AND
44192: PUSH
44193: LD_INT 6
44195: PPUSH
44196: LD_VAR 0 16
44200: PPUSH
44201: CALL_OW 321
44205: PUSH
44206: LD_INT 2
44208: EQUAL
44209: AND
44210: IFFALSE 44375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44212: LD_INT 22
44214: PUSH
44215: LD_VAR 0 16
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 35
44229: PUSH
44230: LD_INT 11
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 35
44239: PUSH
44240: LD_INT 30
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 91
44254: PUSH
44255: LD_VAR 0 1
44259: PUSH
44260: LD_INT 18
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: PPUSH
44273: CALL_OW 69
44277: NOT
44278: PUSH
44279: LD_INT 22
44281: PUSH
44282: LD_VAR 0 16
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 30
44296: PUSH
44297: LD_INT 32
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 30
44306: PUSH
44307: LD_INT 33
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 91
44321: PUSH
44322: LD_VAR 0 1
44326: PUSH
44327: LD_INT 12
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: PPUSH
44343: CALL_OW 69
44347: PUSH
44348: LD_INT 2
44350: GREATER
44351: AND
44352: IFFALSE 44375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44354: LD_ADDR_VAR 0 18
44358: PUSH
44359: LD_INT 11
44361: PUSH
44362: LD_INT 30
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_VAR 0 12
44373: ARRAY
44374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44375: LD_VAR 0 18
44379: NOT
44380: PUSH
44381: LD_INT 40
44383: PPUSH
44384: LD_VAR 0 16
44388: PPUSH
44389: CALL_OW 321
44393: PUSH
44394: LD_INT 2
44396: EQUAL
44397: AND
44398: PUSH
44399: LD_INT 7
44401: PUSH
44402: LD_VAR 0 5
44406: IN
44407: PUSH
44408: LD_INT 28
44410: PUSH
44411: LD_VAR 0 5
44415: IN
44416: OR
44417: PUSH
44418: LD_INT 45
44420: PUSH
44421: LD_VAR 0 5
44425: IN
44426: OR
44427: AND
44428: IFFALSE 44682
// begin hex := GetHexInfo ( x , y ) ;
44430: LD_ADDR_VAR 0 4
44434: PUSH
44435: LD_VAR 0 10
44439: PPUSH
44440: LD_VAR 0 11
44444: PPUSH
44445: CALL_OW 546
44449: ST_TO_ADDR
// if hex [ 1 ] then
44450: LD_VAR 0 4
44454: PUSH
44455: LD_INT 1
44457: ARRAY
44458: IFFALSE 44462
// exit ;
44460: GO 44865
// height := hex [ 2 ] ;
44462: LD_ADDR_VAR 0 15
44466: PUSH
44467: LD_VAR 0 4
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44476: LD_ADDR_VAR 0 14
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// for i in tmp do
44499: LD_ADDR_VAR 0 8
44503: PUSH
44504: LD_VAR 0 14
44508: PUSH
44509: FOR_IN
44510: IFFALSE 44680
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44512: LD_ADDR_VAR 0 9
44516: PUSH
44517: LD_VAR 0 10
44521: PPUSH
44522: LD_VAR 0 8
44526: PPUSH
44527: LD_INT 5
44529: PPUSH
44530: CALL_OW 272
44534: PUSH
44535: LD_VAR 0 11
44539: PPUSH
44540: LD_VAR 0 8
44544: PPUSH
44545: LD_INT 5
44547: PPUSH
44548: CALL_OW 273
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44557: LD_VAR 0 9
44561: PUSH
44562: LD_INT 1
44564: ARRAY
44565: PPUSH
44566: LD_VAR 0 9
44570: PUSH
44571: LD_INT 2
44573: ARRAY
44574: PPUSH
44575: CALL_OW 488
44579: IFFALSE 44678
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44581: LD_ADDR_VAR 0 4
44585: PUSH
44586: LD_VAR 0 9
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: PPUSH
44595: LD_VAR 0 9
44599: PUSH
44600: LD_INT 2
44602: ARRAY
44603: PPUSH
44604: CALL_OW 546
44608: ST_TO_ADDR
// if hex [ 1 ] then
44609: LD_VAR 0 4
44613: PUSH
44614: LD_INT 1
44616: ARRAY
44617: IFFALSE 44621
// continue ;
44619: GO 44509
// h := hex [ 2 ] ;
44621: LD_ADDR_VAR 0 13
44625: PUSH
44626: LD_VAR 0 4
44630: PUSH
44631: LD_INT 2
44633: ARRAY
44634: ST_TO_ADDR
// if h + 7 < height then
44635: LD_VAR 0 13
44639: PUSH
44640: LD_INT 7
44642: PLUS
44643: PUSH
44644: LD_VAR 0 15
44648: LESS
44649: IFFALSE 44678
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44651: LD_ADDR_VAR 0 18
44655: PUSH
44656: LD_INT 7
44658: PUSH
44659: LD_INT 28
44661: PUSH
44662: LD_INT 45
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: PUSH
44670: LD_VAR 0 12
44674: ARRAY
44675: ST_TO_ADDR
// break ;
44676: GO 44680
// end ; end ; end ;
44678: GO 44509
44680: POP
44681: POP
// end ; if not weapon then
44682: LD_VAR 0 18
44686: NOT
44687: IFFALSE 44747
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44689: LD_ADDR_VAR 0 5
44693: PUSH
44694: LD_VAR 0 5
44698: PUSH
44699: LD_INT 11
44701: PUSH
44702: LD_INT 30
44704: PUSH
44705: LD_INT 49
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: DIFF
44713: ST_TO_ADDR
// if not list then
44714: LD_VAR 0 5
44718: NOT
44719: IFFALSE 44723
// exit ;
44721: GO 44865
// weapon := list [ rand ( 1 , list ) ] ;
44723: LD_ADDR_VAR 0 18
44727: PUSH
44728: LD_VAR 0 5
44732: PUSH
44733: LD_INT 1
44735: PPUSH
44736: LD_VAR 0 5
44740: PPUSH
44741: CALL_OW 12
44745: ARRAY
44746: ST_TO_ADDR
// end ; if weapon then
44747: LD_VAR 0 18
44751: IFFALSE 44865
// begin tmp := CostOfWeapon ( weapon ) ;
44753: LD_ADDR_VAR 0 14
44757: PUSH
44758: LD_VAR 0 18
44762: PPUSH
44763: CALL_OW 451
44767: ST_TO_ADDR
// j := GetBase ( tower ) ;
44768: LD_ADDR_VAR 0 9
44772: PUSH
44773: LD_VAR 0 1
44777: PPUSH
44778: CALL_OW 274
44782: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44783: LD_VAR 0 9
44787: PPUSH
44788: LD_INT 1
44790: PPUSH
44791: CALL_OW 275
44795: PUSH
44796: LD_VAR 0 14
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: GREATEREQUAL
44805: PUSH
44806: LD_VAR 0 9
44810: PPUSH
44811: LD_INT 2
44813: PPUSH
44814: CALL_OW 275
44818: PUSH
44819: LD_VAR 0 14
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: GREATEREQUAL
44828: AND
44829: PUSH
44830: LD_VAR 0 9
44834: PPUSH
44835: LD_INT 3
44837: PPUSH
44838: CALL_OW 275
44842: PUSH
44843: LD_VAR 0 14
44847: PUSH
44848: LD_INT 3
44850: ARRAY
44851: GREATEREQUAL
44852: AND
44853: IFFALSE 44865
// result := weapon ;
44855: LD_ADDR_VAR 0 3
44859: PUSH
44860: LD_VAR 0 18
44864: ST_TO_ADDR
// end ; end ;
44865: LD_VAR 0 3
44869: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44870: LD_INT 0
44872: PPUSH
44873: PPUSH
// result := true ;
44874: LD_ADDR_VAR 0 3
44878: PUSH
44879: LD_INT 1
44881: ST_TO_ADDR
// if array1 = array2 then
44882: LD_VAR 0 1
44886: PUSH
44887: LD_VAR 0 2
44891: EQUAL
44892: IFFALSE 44952
// begin for i = 1 to array1 do
44894: LD_ADDR_VAR 0 4
44898: PUSH
44899: DOUBLE
44900: LD_INT 1
44902: DEC
44903: ST_TO_ADDR
44904: LD_VAR 0 1
44908: PUSH
44909: FOR_TO
44910: IFFALSE 44948
// if array1 [ i ] <> array2 [ i ] then
44912: LD_VAR 0 1
44916: PUSH
44917: LD_VAR 0 4
44921: ARRAY
44922: PUSH
44923: LD_VAR 0 2
44927: PUSH
44928: LD_VAR 0 4
44932: ARRAY
44933: NONEQUAL
44934: IFFALSE 44946
// begin result := false ;
44936: LD_ADDR_VAR 0 3
44940: PUSH
44941: LD_INT 0
44943: ST_TO_ADDR
// break ;
44944: GO 44948
// end ;
44946: GO 44909
44948: POP
44949: POP
// end else
44950: GO 44960
// result := false ;
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// end ;
44960: LD_VAR 0 3
44964: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44965: LD_INT 0
44967: PPUSH
44968: PPUSH
// if not array1 or not array2 then
44969: LD_VAR 0 1
44973: NOT
44974: PUSH
44975: LD_VAR 0 2
44979: NOT
44980: OR
44981: IFFALSE 44985
// exit ;
44983: GO 45049
// result := true ;
44985: LD_ADDR_VAR 0 3
44989: PUSH
44990: LD_INT 1
44992: ST_TO_ADDR
// for i = 1 to array1 do
44993: LD_ADDR_VAR 0 4
44997: PUSH
44998: DOUBLE
44999: LD_INT 1
45001: DEC
45002: ST_TO_ADDR
45003: LD_VAR 0 1
45007: PUSH
45008: FOR_TO
45009: IFFALSE 45047
// if array1 [ i ] <> array2 [ i ] then
45011: LD_VAR 0 1
45015: PUSH
45016: LD_VAR 0 4
45020: ARRAY
45021: PUSH
45022: LD_VAR 0 2
45026: PUSH
45027: LD_VAR 0 4
45031: ARRAY
45032: NONEQUAL
45033: IFFALSE 45045
// begin result := false ;
45035: LD_ADDR_VAR 0 3
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// break ;
45043: GO 45047
// end ;
45045: GO 45008
45047: POP
45048: POP
// end ;
45049: LD_VAR 0 3
45053: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45054: LD_INT 0
45056: PPUSH
45057: PPUSH
45058: PPUSH
// pom := GetBase ( fac ) ;
45059: LD_ADDR_VAR 0 5
45063: PUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 274
45073: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45074: LD_ADDR_VAR 0 4
45078: PUSH
45079: LD_VAR 0 2
45083: PUSH
45084: LD_INT 1
45086: ARRAY
45087: PPUSH
45088: LD_VAR 0 2
45092: PUSH
45093: LD_INT 2
45095: ARRAY
45096: PPUSH
45097: LD_VAR 0 2
45101: PUSH
45102: LD_INT 3
45104: ARRAY
45105: PPUSH
45106: LD_VAR 0 2
45110: PUSH
45111: LD_INT 4
45113: ARRAY
45114: PPUSH
45115: CALL_OW 449
45119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45120: LD_ADDR_VAR 0 3
45124: PUSH
45125: LD_VAR 0 5
45129: PPUSH
45130: LD_INT 1
45132: PPUSH
45133: CALL_OW 275
45137: PUSH
45138: LD_VAR 0 4
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: GREATEREQUAL
45147: PUSH
45148: LD_VAR 0 5
45152: PPUSH
45153: LD_INT 2
45155: PPUSH
45156: CALL_OW 275
45160: PUSH
45161: LD_VAR 0 4
45165: PUSH
45166: LD_INT 2
45168: ARRAY
45169: GREATEREQUAL
45170: AND
45171: PUSH
45172: LD_VAR 0 5
45176: PPUSH
45177: LD_INT 3
45179: PPUSH
45180: CALL_OW 275
45184: PUSH
45185: LD_VAR 0 4
45189: PUSH
45190: LD_INT 3
45192: ARRAY
45193: GREATEREQUAL
45194: AND
45195: ST_TO_ADDR
// end ;
45196: LD_VAR 0 3
45200: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45201: LD_INT 0
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
// pom := GetBase ( building ) ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 1
45216: PPUSH
45217: CALL_OW 274
45221: ST_TO_ADDR
// if not pom then
45222: LD_VAR 0 3
45226: NOT
45227: IFFALSE 45231
// exit ;
45229: GO 45401
// btype := GetBType ( building ) ;
45231: LD_ADDR_VAR 0 5
45235: PUSH
45236: LD_VAR 0 1
45240: PPUSH
45241: CALL_OW 266
45245: ST_TO_ADDR
// if btype = b_armoury then
45246: LD_VAR 0 5
45250: PUSH
45251: LD_INT 4
45253: EQUAL
45254: IFFALSE 45264
// btype := b_barracks ;
45256: LD_ADDR_VAR 0 5
45260: PUSH
45261: LD_INT 5
45263: ST_TO_ADDR
// if btype = b_depot then
45264: LD_VAR 0 5
45268: PUSH
45269: LD_INT 0
45271: EQUAL
45272: IFFALSE 45282
// btype := b_warehouse ;
45274: LD_ADDR_VAR 0 5
45278: PUSH
45279: LD_INT 1
45281: ST_TO_ADDR
// if btype = b_workshop then
45282: LD_VAR 0 5
45286: PUSH
45287: LD_INT 2
45289: EQUAL
45290: IFFALSE 45300
// btype := b_factory ;
45292: LD_ADDR_VAR 0 5
45296: PUSH
45297: LD_INT 3
45299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45300: LD_ADDR_VAR 0 4
45304: PUSH
45305: LD_VAR 0 5
45309: PPUSH
45310: LD_VAR 0 1
45314: PPUSH
45315: CALL_OW 248
45319: PPUSH
45320: CALL_OW 450
45324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45325: LD_ADDR_VAR 0 2
45329: PUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: LD_INT 1
45337: PPUSH
45338: CALL_OW 275
45342: PUSH
45343: LD_VAR 0 4
45347: PUSH
45348: LD_INT 1
45350: ARRAY
45351: GREATEREQUAL
45352: PUSH
45353: LD_VAR 0 3
45357: PPUSH
45358: LD_INT 2
45360: PPUSH
45361: CALL_OW 275
45365: PUSH
45366: LD_VAR 0 4
45370: PUSH
45371: LD_INT 2
45373: ARRAY
45374: GREATEREQUAL
45375: AND
45376: PUSH
45377: LD_VAR 0 3
45381: PPUSH
45382: LD_INT 3
45384: PPUSH
45385: CALL_OW 275
45389: PUSH
45390: LD_VAR 0 4
45394: PUSH
45395: LD_INT 3
45397: ARRAY
45398: GREATEREQUAL
45399: AND
45400: ST_TO_ADDR
// end ;
45401: LD_VAR 0 2
45405: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45406: LD_INT 0
45408: PPUSH
45409: PPUSH
45410: PPUSH
// pom := GetBase ( building ) ;
45411: LD_ADDR_VAR 0 4
45415: PUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 274
45425: ST_TO_ADDR
// if not pom then
45426: LD_VAR 0 4
45430: NOT
45431: IFFALSE 45435
// exit ;
45433: GO 45536
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45435: LD_ADDR_VAR 0 5
45439: PUSH
45440: LD_VAR 0 2
45444: PPUSH
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 248
45454: PPUSH
45455: CALL_OW 450
45459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45460: LD_ADDR_VAR 0 3
45464: PUSH
45465: LD_VAR 0 4
45469: PPUSH
45470: LD_INT 1
45472: PPUSH
45473: CALL_OW 275
45477: PUSH
45478: LD_VAR 0 5
45482: PUSH
45483: LD_INT 1
45485: ARRAY
45486: GREATEREQUAL
45487: PUSH
45488: LD_VAR 0 4
45492: PPUSH
45493: LD_INT 2
45495: PPUSH
45496: CALL_OW 275
45500: PUSH
45501: LD_VAR 0 5
45505: PUSH
45506: LD_INT 2
45508: ARRAY
45509: GREATEREQUAL
45510: AND
45511: PUSH
45512: LD_VAR 0 4
45516: PPUSH
45517: LD_INT 3
45519: PPUSH
45520: CALL_OW 275
45524: PUSH
45525: LD_VAR 0 5
45529: PUSH
45530: LD_INT 3
45532: ARRAY
45533: GREATEREQUAL
45534: AND
45535: ST_TO_ADDR
// end ;
45536: LD_VAR 0 3
45540: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45541: LD_INT 0
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
// result := false ;
45554: LD_ADDR_VAR 0 8
45558: PUSH
45559: LD_INT 0
45561: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45562: LD_VAR 0 5
45566: NOT
45567: PUSH
45568: LD_VAR 0 1
45572: NOT
45573: OR
45574: PUSH
45575: LD_VAR 0 2
45579: NOT
45580: OR
45581: PUSH
45582: LD_VAR 0 3
45586: NOT
45587: OR
45588: IFFALSE 45592
// exit ;
45590: GO 46406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45592: LD_ADDR_VAR 0 14
45596: PUSH
45597: LD_VAR 0 1
45601: PPUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_VAR 0 3
45611: PPUSH
45612: LD_VAR 0 4
45616: PPUSH
45617: LD_VAR 0 5
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: PPUSH
45626: CALL_OW 248
45630: PPUSH
45631: LD_INT 0
45633: PPUSH
45634: CALL 47659 0 6
45638: ST_TO_ADDR
// if not hexes then
45639: LD_VAR 0 14
45643: NOT
45644: IFFALSE 45648
// exit ;
45646: GO 46406
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45648: LD_ADDR_VAR 0 17
45652: PUSH
45653: LD_VAR 0 5
45657: PPUSH
45658: LD_INT 22
45660: PUSH
45661: LD_VAR 0 13
45665: PPUSH
45666: CALL_OW 255
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 30
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PPUSH
45707: CALL_OW 72
45711: ST_TO_ADDR
// for i = 1 to hexes do
45712: LD_ADDR_VAR 0 9
45716: PUSH
45717: DOUBLE
45718: LD_INT 1
45720: DEC
45721: ST_TO_ADDR
45722: LD_VAR 0 14
45726: PUSH
45727: FOR_TO
45728: IFFALSE 46404
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45730: LD_ADDR_VAR 0 13
45734: PUSH
45735: LD_VAR 0 14
45739: PUSH
45740: LD_VAR 0 9
45744: ARRAY
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: PPUSH
45750: LD_VAR 0 14
45754: PUSH
45755: LD_VAR 0 9
45759: ARRAY
45760: PUSH
45761: LD_INT 2
45763: ARRAY
45764: PPUSH
45765: CALL_OW 428
45769: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45770: LD_VAR 0 14
45774: PUSH
45775: LD_VAR 0 9
45779: ARRAY
45780: PUSH
45781: LD_INT 1
45783: ARRAY
45784: PPUSH
45785: LD_VAR 0 14
45789: PUSH
45790: LD_VAR 0 9
45794: ARRAY
45795: PUSH
45796: LD_INT 2
45798: ARRAY
45799: PPUSH
45800: CALL_OW 351
45804: PUSH
45805: LD_VAR 0 14
45809: PUSH
45810: LD_VAR 0 9
45814: ARRAY
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: PPUSH
45820: LD_VAR 0 14
45824: PUSH
45825: LD_VAR 0 9
45829: ARRAY
45830: PUSH
45831: LD_INT 2
45833: ARRAY
45834: PPUSH
45835: CALL_OW 488
45839: NOT
45840: OR
45841: PUSH
45842: LD_VAR 0 13
45846: PPUSH
45847: CALL_OW 247
45851: PUSH
45852: LD_INT 3
45854: EQUAL
45855: OR
45856: IFFALSE 45862
// exit ;
45858: POP
45859: POP
45860: GO 46406
// if not tmp then
45862: LD_VAR 0 13
45866: NOT
45867: IFFALSE 45871
// continue ;
45869: GO 45727
// result := true ;
45871: LD_ADDR_VAR 0 8
45875: PUSH
45876: LD_INT 1
45878: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45879: LD_VAR 0 6
45883: PUSH
45884: LD_VAR 0 13
45888: PPUSH
45889: CALL_OW 247
45893: PUSH
45894: LD_INT 2
45896: EQUAL
45897: AND
45898: PUSH
45899: LD_VAR 0 13
45903: PPUSH
45904: CALL_OW 263
45908: PUSH
45909: LD_INT 1
45911: EQUAL
45912: AND
45913: IFFALSE 46077
// begin if IsDrivenBy ( tmp ) then
45915: LD_VAR 0 13
45919: PPUSH
45920: CALL_OW 311
45924: IFFALSE 45928
// continue ;
45926: GO 45727
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45928: LD_VAR 0 6
45932: PPUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 60
45938: PUSH
45939: EMPTY
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: LD_INT 55
45951: PUSH
45952: EMPTY
45953: LIST
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PPUSH
45963: CALL_OW 72
45967: IFFALSE 46075
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45969: LD_ADDR_VAR 0 18
45973: PUSH
45974: LD_VAR 0 6
45978: PPUSH
45979: LD_INT 3
45981: PUSH
45982: LD_INT 60
45984: PUSH
45985: EMPTY
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 55
45997: PUSH
45998: EMPTY
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PPUSH
46009: CALL_OW 72
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: ST_TO_ADDR
// if IsInUnit ( driver ) then
46018: LD_VAR 0 18
46022: PPUSH
46023: CALL_OW 310
46027: IFFALSE 46038
// ComExit ( driver ) ;
46029: LD_VAR 0 18
46033: PPUSH
46034: CALL 71451 0 1
// AddComEnterUnit ( driver , tmp ) ;
46038: LD_VAR 0 18
46042: PPUSH
46043: LD_VAR 0 13
46047: PPUSH
46048: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46052: LD_VAR 0 18
46056: PPUSH
46057: LD_VAR 0 7
46061: PPUSH
46062: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46066: LD_VAR 0 18
46070: PPUSH
46071: CALL_OW 181
// end ; continue ;
46075: GO 45727
// end ; if not cleaners or not tmp in cleaners then
46077: LD_VAR 0 6
46081: NOT
46082: PUSH
46083: LD_VAR 0 13
46087: PUSH
46088: LD_VAR 0 6
46092: IN
46093: NOT
46094: OR
46095: IFFALSE 46402
// begin if dep then
46097: LD_VAR 0 17
46101: IFFALSE 46237
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46103: LD_ADDR_VAR 0 16
46107: PUSH
46108: LD_VAR 0 17
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: CALL_OW 250
46121: PPUSH
46122: LD_VAR 0 17
46126: PUSH
46127: LD_INT 1
46129: ARRAY
46130: PPUSH
46131: CALL_OW 254
46135: PPUSH
46136: LD_INT 5
46138: PPUSH
46139: CALL_OW 272
46143: PUSH
46144: LD_VAR 0 17
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PPUSH
46153: CALL_OW 251
46157: PPUSH
46158: LD_VAR 0 17
46162: PUSH
46163: LD_INT 1
46165: ARRAY
46166: PPUSH
46167: CALL_OW 254
46171: PPUSH
46172: LD_INT 5
46174: PPUSH
46175: CALL_OW 273
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46184: LD_VAR 0 16
46188: PUSH
46189: LD_INT 1
46191: ARRAY
46192: PPUSH
46193: LD_VAR 0 16
46197: PUSH
46198: LD_INT 2
46200: ARRAY
46201: PPUSH
46202: CALL_OW 488
46206: IFFALSE 46237
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46208: LD_VAR 0 13
46212: PPUSH
46213: LD_VAR 0 16
46217: PUSH
46218: LD_INT 1
46220: ARRAY
46221: PPUSH
46222: LD_VAR 0 16
46226: PUSH
46227: LD_INT 2
46229: ARRAY
46230: PPUSH
46231: CALL_OW 111
// continue ;
46235: GO 45727
// end ; end ; r := GetDir ( tmp ) ;
46237: LD_ADDR_VAR 0 15
46241: PUSH
46242: LD_VAR 0 13
46246: PPUSH
46247: CALL_OW 254
46251: ST_TO_ADDR
// if r = 5 then
46252: LD_VAR 0 15
46256: PUSH
46257: LD_INT 5
46259: EQUAL
46260: IFFALSE 46270
// r := 0 ;
46262: LD_ADDR_VAR 0 15
46266: PUSH
46267: LD_INT 0
46269: ST_TO_ADDR
// for j = r to 5 do
46270: LD_ADDR_VAR 0 10
46274: PUSH
46275: DOUBLE
46276: LD_VAR 0 15
46280: DEC
46281: ST_TO_ADDR
46282: LD_INT 5
46284: PUSH
46285: FOR_TO
46286: IFFALSE 46400
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46288: LD_ADDR_VAR 0 11
46292: PUSH
46293: LD_VAR 0 13
46297: PPUSH
46298: CALL_OW 250
46302: PPUSH
46303: LD_VAR 0 10
46307: PPUSH
46308: LD_INT 2
46310: PPUSH
46311: CALL_OW 272
46315: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46316: LD_ADDR_VAR 0 12
46320: PUSH
46321: LD_VAR 0 13
46325: PPUSH
46326: CALL_OW 251
46330: PPUSH
46331: LD_VAR 0 10
46335: PPUSH
46336: LD_INT 2
46338: PPUSH
46339: CALL_OW 273
46343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46344: LD_VAR 0 11
46348: PPUSH
46349: LD_VAR 0 12
46353: PPUSH
46354: CALL_OW 488
46358: PUSH
46359: LD_VAR 0 11
46363: PPUSH
46364: LD_VAR 0 12
46368: PPUSH
46369: CALL_OW 428
46373: NOT
46374: AND
46375: IFFALSE 46398
// begin ComMoveXY ( tmp , _x , _y ) ;
46377: LD_VAR 0 13
46381: PPUSH
46382: LD_VAR 0 11
46386: PPUSH
46387: LD_VAR 0 12
46391: PPUSH
46392: CALL_OW 111
// break ;
46396: GO 46400
// end ; end ;
46398: GO 46285
46400: POP
46401: POP
// end ; end ;
46402: GO 45727
46404: POP
46405: POP
// end ;
46406: LD_VAR 0 8
46410: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46411: LD_INT 0
46413: PPUSH
// result := true ;
46414: LD_ADDR_VAR 0 3
46418: PUSH
46419: LD_INT 1
46421: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46422: LD_VAR 0 2
46426: PUSH
46427: LD_INT 24
46429: DOUBLE
46430: EQUAL
46431: IFTRUE 46441
46433: LD_INT 33
46435: DOUBLE
46436: EQUAL
46437: IFTRUE 46441
46439: GO 46466
46441: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46442: LD_ADDR_VAR 0 3
46446: PUSH
46447: LD_INT 32
46449: PPUSH
46450: LD_VAR 0 1
46454: PPUSH
46455: CALL_OW 321
46459: PUSH
46460: LD_INT 2
46462: EQUAL
46463: ST_TO_ADDR
46464: GO 46782
46466: LD_INT 20
46468: DOUBLE
46469: EQUAL
46470: IFTRUE 46474
46472: GO 46499
46474: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46475: LD_ADDR_VAR 0 3
46479: PUSH
46480: LD_INT 6
46482: PPUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 321
46492: PUSH
46493: LD_INT 2
46495: EQUAL
46496: ST_TO_ADDR
46497: GO 46782
46499: LD_INT 22
46501: DOUBLE
46502: EQUAL
46503: IFTRUE 46513
46505: LD_INT 36
46507: DOUBLE
46508: EQUAL
46509: IFTRUE 46513
46511: GO 46538
46513: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46514: LD_ADDR_VAR 0 3
46518: PUSH
46519: LD_INT 15
46521: PPUSH
46522: LD_VAR 0 1
46526: PPUSH
46527: CALL_OW 321
46531: PUSH
46532: LD_INT 2
46534: EQUAL
46535: ST_TO_ADDR
46536: GO 46782
46538: LD_INT 30
46540: DOUBLE
46541: EQUAL
46542: IFTRUE 46546
46544: GO 46571
46546: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46547: LD_ADDR_VAR 0 3
46551: PUSH
46552: LD_INT 20
46554: PPUSH
46555: LD_VAR 0 1
46559: PPUSH
46560: CALL_OW 321
46564: PUSH
46565: LD_INT 2
46567: EQUAL
46568: ST_TO_ADDR
46569: GO 46782
46571: LD_INT 28
46573: DOUBLE
46574: EQUAL
46575: IFTRUE 46585
46577: LD_INT 21
46579: DOUBLE
46580: EQUAL
46581: IFTRUE 46585
46583: GO 46610
46585: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46586: LD_ADDR_VAR 0 3
46590: PUSH
46591: LD_INT 21
46593: PPUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 321
46603: PUSH
46604: LD_INT 2
46606: EQUAL
46607: ST_TO_ADDR
46608: GO 46782
46610: LD_INT 16
46612: DOUBLE
46613: EQUAL
46614: IFTRUE 46618
46616: GO 46643
46618: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46619: LD_ADDR_VAR 0 3
46623: PUSH
46624: LD_INT 84
46626: PPUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: CALL_OW 321
46636: PUSH
46637: LD_INT 2
46639: EQUAL
46640: ST_TO_ADDR
46641: GO 46782
46643: LD_INT 19
46645: DOUBLE
46646: EQUAL
46647: IFTRUE 46657
46649: LD_INT 23
46651: DOUBLE
46652: EQUAL
46653: IFTRUE 46657
46655: GO 46682
46657: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46658: LD_ADDR_VAR 0 3
46662: PUSH
46663: LD_INT 83
46665: PPUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 321
46675: PUSH
46676: LD_INT 2
46678: EQUAL
46679: ST_TO_ADDR
46680: GO 46782
46682: LD_INT 17
46684: DOUBLE
46685: EQUAL
46686: IFTRUE 46690
46688: GO 46715
46690: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46691: LD_ADDR_VAR 0 3
46695: PUSH
46696: LD_INT 39
46698: PPUSH
46699: LD_VAR 0 1
46703: PPUSH
46704: CALL_OW 321
46708: PUSH
46709: LD_INT 2
46711: EQUAL
46712: ST_TO_ADDR
46713: GO 46782
46715: LD_INT 18
46717: DOUBLE
46718: EQUAL
46719: IFTRUE 46723
46721: GO 46748
46723: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46724: LD_ADDR_VAR 0 3
46728: PUSH
46729: LD_INT 40
46731: PPUSH
46732: LD_VAR 0 1
46736: PPUSH
46737: CALL_OW 321
46741: PUSH
46742: LD_INT 2
46744: EQUAL
46745: ST_TO_ADDR
46746: GO 46782
46748: LD_INT 27
46750: DOUBLE
46751: EQUAL
46752: IFTRUE 46756
46754: GO 46781
46756: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46757: LD_ADDR_VAR 0 3
46761: PUSH
46762: LD_INT 35
46764: PPUSH
46765: LD_VAR 0 1
46769: PPUSH
46770: CALL_OW 321
46774: PUSH
46775: LD_INT 2
46777: EQUAL
46778: ST_TO_ADDR
46779: GO 46782
46781: POP
// end ;
46782: LD_VAR 0 3
46786: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46787: LD_INT 0
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
// result := false ;
46800: LD_ADDR_VAR 0 6
46804: PUSH
46805: LD_INT 0
46807: ST_TO_ADDR
// if btype = b_depot then
46808: LD_VAR 0 2
46812: PUSH
46813: LD_INT 0
46815: EQUAL
46816: IFFALSE 46828
// begin result := true ;
46818: LD_ADDR_VAR 0 6
46822: PUSH
46823: LD_INT 1
46825: ST_TO_ADDR
// exit ;
46826: GO 47654
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46828: LD_VAR 0 1
46832: NOT
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 266
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: IN
46854: NOT
46855: OR
46856: PUSH
46857: LD_VAR 0 2
46861: NOT
46862: OR
46863: PUSH
46864: LD_VAR 0 5
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 4
46883: PUSH
46884: LD_INT 5
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: IN
46895: NOT
46896: OR
46897: PUSH
46898: LD_VAR 0 3
46902: PPUSH
46903: LD_VAR 0 4
46907: PPUSH
46908: CALL_OW 488
46912: NOT
46913: OR
46914: IFFALSE 46918
// exit ;
46916: GO 47654
// side := GetSide ( depot ) ;
46918: LD_ADDR_VAR 0 9
46922: PUSH
46923: LD_VAR 0 1
46927: PPUSH
46928: CALL_OW 255
46932: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46933: LD_VAR 0 9
46937: PPUSH
46938: LD_VAR 0 2
46942: PPUSH
46943: CALL 46411 0 2
46947: NOT
46948: IFFALSE 46952
// exit ;
46950: GO 47654
// pom := GetBase ( depot ) ;
46952: LD_ADDR_VAR 0 10
46956: PUSH
46957: LD_VAR 0 1
46961: PPUSH
46962: CALL_OW 274
46966: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46967: LD_ADDR_VAR 0 11
46971: PUSH
46972: LD_VAR 0 2
46976: PPUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 248
46986: PPUSH
46987: CALL_OW 450
46991: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46992: LD_VAR 0 10
46996: PPUSH
46997: LD_INT 1
46999: PPUSH
47000: CALL_OW 275
47004: PUSH
47005: LD_VAR 0 11
47009: PUSH
47010: LD_INT 1
47012: ARRAY
47013: GREATEREQUAL
47014: PUSH
47015: LD_VAR 0 10
47019: PPUSH
47020: LD_INT 2
47022: PPUSH
47023: CALL_OW 275
47027: PUSH
47028: LD_VAR 0 11
47032: PUSH
47033: LD_INT 2
47035: ARRAY
47036: GREATEREQUAL
47037: AND
47038: PUSH
47039: LD_VAR 0 10
47043: PPUSH
47044: LD_INT 3
47046: PPUSH
47047: CALL_OW 275
47051: PUSH
47052: LD_VAR 0 11
47056: PUSH
47057: LD_INT 3
47059: ARRAY
47060: GREATEREQUAL
47061: AND
47062: NOT
47063: IFFALSE 47067
// exit ;
47065: GO 47654
// if GetBType ( depot ) = b_depot then
47067: LD_VAR 0 1
47071: PPUSH
47072: CALL_OW 266
47076: PUSH
47077: LD_INT 0
47079: EQUAL
47080: IFFALSE 47092
// dist := 28 else
47082: LD_ADDR_VAR 0 14
47086: PUSH
47087: LD_INT 28
47089: ST_TO_ADDR
47090: GO 47100
// dist := 36 ;
47092: LD_ADDR_VAR 0 14
47096: PUSH
47097: LD_INT 36
47099: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47100: LD_VAR 0 1
47104: PPUSH
47105: LD_VAR 0 3
47109: PPUSH
47110: LD_VAR 0 4
47114: PPUSH
47115: CALL_OW 297
47119: PUSH
47120: LD_VAR 0 14
47124: GREATER
47125: IFFALSE 47129
// exit ;
47127: GO 47654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47129: LD_ADDR_VAR 0 12
47133: PUSH
47134: LD_VAR 0 2
47138: PPUSH
47139: LD_VAR 0 3
47143: PPUSH
47144: LD_VAR 0 4
47148: PPUSH
47149: LD_VAR 0 5
47153: PPUSH
47154: LD_VAR 0 1
47158: PPUSH
47159: CALL_OW 248
47163: PPUSH
47164: LD_INT 0
47166: PPUSH
47167: CALL 47659 0 6
47171: ST_TO_ADDR
// if not hexes then
47172: LD_VAR 0 12
47176: NOT
47177: IFFALSE 47181
// exit ;
47179: GO 47654
// hex := GetHexInfo ( x , y ) ;
47181: LD_ADDR_VAR 0 15
47185: PUSH
47186: LD_VAR 0 3
47190: PPUSH
47191: LD_VAR 0 4
47195: PPUSH
47196: CALL_OW 546
47200: ST_TO_ADDR
// if hex [ 1 ] then
47201: LD_VAR 0 15
47205: PUSH
47206: LD_INT 1
47208: ARRAY
47209: IFFALSE 47213
// exit ;
47211: GO 47654
// height := hex [ 2 ] ;
47213: LD_ADDR_VAR 0 13
47217: PUSH
47218: LD_VAR 0 15
47222: PUSH
47223: LD_INT 2
47225: ARRAY
47226: ST_TO_ADDR
// for i = 1 to hexes do
47227: LD_ADDR_VAR 0 7
47231: PUSH
47232: DOUBLE
47233: LD_INT 1
47235: DEC
47236: ST_TO_ADDR
47237: LD_VAR 0 12
47241: PUSH
47242: FOR_TO
47243: IFFALSE 47573
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47245: LD_VAR 0 12
47249: PUSH
47250: LD_VAR 0 7
47254: ARRAY
47255: PUSH
47256: LD_INT 1
47258: ARRAY
47259: PPUSH
47260: LD_VAR 0 12
47264: PUSH
47265: LD_VAR 0 7
47269: ARRAY
47270: PUSH
47271: LD_INT 2
47273: ARRAY
47274: PPUSH
47275: CALL_OW 488
47279: NOT
47280: PUSH
47281: LD_VAR 0 12
47285: PUSH
47286: LD_VAR 0 7
47290: ARRAY
47291: PUSH
47292: LD_INT 1
47294: ARRAY
47295: PPUSH
47296: LD_VAR 0 12
47300: PUSH
47301: LD_VAR 0 7
47305: ARRAY
47306: PUSH
47307: LD_INT 2
47309: ARRAY
47310: PPUSH
47311: CALL_OW 428
47315: PUSH
47316: LD_INT 0
47318: GREATER
47319: OR
47320: PUSH
47321: LD_VAR 0 12
47325: PUSH
47326: LD_VAR 0 7
47330: ARRAY
47331: PUSH
47332: LD_INT 1
47334: ARRAY
47335: PPUSH
47336: LD_VAR 0 12
47340: PUSH
47341: LD_VAR 0 7
47345: ARRAY
47346: PUSH
47347: LD_INT 2
47349: ARRAY
47350: PPUSH
47351: CALL_OW 351
47355: OR
47356: IFFALSE 47362
// exit ;
47358: POP
47359: POP
47360: GO 47654
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47362: LD_ADDR_VAR 0 8
47366: PUSH
47367: LD_VAR 0 12
47371: PUSH
47372: LD_VAR 0 7
47376: ARRAY
47377: PUSH
47378: LD_INT 1
47380: ARRAY
47381: PPUSH
47382: LD_VAR 0 12
47386: PUSH
47387: LD_VAR 0 7
47391: ARRAY
47392: PUSH
47393: LD_INT 2
47395: ARRAY
47396: PPUSH
47397: CALL_OW 546
47401: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47402: LD_VAR 0 8
47406: PUSH
47407: LD_INT 1
47409: ARRAY
47410: PUSH
47411: LD_VAR 0 8
47415: PUSH
47416: LD_INT 2
47418: ARRAY
47419: PUSH
47420: LD_VAR 0 13
47424: PUSH
47425: LD_INT 2
47427: PLUS
47428: GREATER
47429: OR
47430: PUSH
47431: LD_VAR 0 8
47435: PUSH
47436: LD_INT 2
47438: ARRAY
47439: PUSH
47440: LD_VAR 0 13
47444: PUSH
47445: LD_INT 2
47447: MINUS
47448: LESS
47449: OR
47450: PUSH
47451: LD_VAR 0 8
47455: PUSH
47456: LD_INT 3
47458: ARRAY
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 8
47465: PUSH
47466: LD_INT 9
47468: PUSH
47469: LD_INT 10
47471: PUSH
47472: LD_INT 11
47474: PUSH
47475: LD_INT 12
47477: PUSH
47478: LD_INT 13
47480: PUSH
47481: LD_INT 16
47483: PUSH
47484: LD_INT 17
47486: PUSH
47487: LD_INT 18
47489: PUSH
47490: LD_INT 19
47492: PUSH
47493: LD_INT 20
47495: PUSH
47496: LD_INT 21
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: IN
47514: NOT
47515: OR
47516: PUSH
47517: LD_VAR 0 8
47521: PUSH
47522: LD_INT 5
47524: ARRAY
47525: NOT
47526: OR
47527: PUSH
47528: LD_VAR 0 8
47532: PUSH
47533: LD_INT 6
47535: ARRAY
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 7
47545: PUSH
47546: LD_INT 9
47548: PUSH
47549: LD_INT 10
47551: PUSH
47552: LD_INT 11
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: IN
47563: NOT
47564: OR
47565: IFFALSE 47571
// exit ;
47567: POP
47568: POP
47569: GO 47654
// end ;
47571: GO 47242
47573: POP
47574: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47575: LD_VAR 0 9
47579: PPUSH
47580: LD_VAR 0 3
47584: PPUSH
47585: LD_VAR 0 4
47589: PPUSH
47590: LD_INT 20
47592: PPUSH
47593: CALL 39577 0 4
47597: PUSH
47598: LD_INT 4
47600: ARRAY
47601: IFFALSE 47605
// exit ;
47603: GO 47654
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47605: LD_VAR 0 2
47609: PUSH
47610: LD_INT 29
47612: PUSH
47613: LD_INT 30
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: IN
47620: PUSH
47621: LD_VAR 0 3
47625: PPUSH
47626: LD_VAR 0 4
47630: PPUSH
47631: LD_VAR 0 9
47635: PPUSH
47636: CALL_OW 440
47640: NOT
47641: AND
47642: IFFALSE 47646
// exit ;
47644: GO 47654
// result := true ;
47646: LD_ADDR_VAR 0 6
47650: PUSH
47651: LD_INT 1
47653: ST_TO_ADDR
// end ;
47654: LD_VAR 0 6
47658: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47659: LD_INT 0
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
47668: PPUSH
47669: PPUSH
47670: PPUSH
47671: PPUSH
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
47717: PPUSH
47718: PPUSH
// result = [ ] ;
47719: LD_ADDR_VAR 0 7
47723: PUSH
47724: EMPTY
47725: ST_TO_ADDR
// temp_list = [ ] ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: EMPTY
47732: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47733: LD_VAR 0 4
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 4
47752: PUSH
47753: LD_INT 5
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: IN
47764: NOT
47765: PUSH
47766: LD_VAR 0 1
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: IN
47781: PUSH
47782: LD_VAR 0 5
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: IN
47801: NOT
47802: AND
47803: OR
47804: IFFALSE 47808
// exit ;
47806: GO 66199
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47808: LD_VAR 0 1
47812: PUSH
47813: LD_INT 6
47815: PUSH
47816: LD_INT 7
47818: PUSH
47819: LD_INT 8
47821: PUSH
47822: LD_INT 13
47824: PUSH
47825: LD_INT 12
47827: PUSH
47828: LD_INT 15
47830: PUSH
47831: LD_INT 11
47833: PUSH
47834: LD_INT 14
47836: PUSH
47837: LD_INT 10
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: IN
47851: IFFALSE 47861
// btype = b_lab ;
47853: LD_ADDR_VAR 0 1
47857: PUSH
47858: LD_INT 6
47860: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47861: LD_VAR 0 6
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: IN
47880: NOT
47881: PUSH
47882: LD_VAR 0 1
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 6
47901: PUSH
47902: LD_INT 36
47904: PUSH
47905: LD_INT 4
47907: PUSH
47908: LD_INT 5
47910: PUSH
47911: LD_INT 31
47913: PUSH
47914: LD_INT 32
47916: PUSH
47917: LD_INT 33
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: IN
47933: NOT
47934: PUSH
47935: LD_VAR 0 6
47939: PUSH
47940: LD_INT 1
47942: EQUAL
47943: AND
47944: OR
47945: PUSH
47946: LD_VAR 0 1
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: IN
47961: NOT
47962: PUSH
47963: LD_VAR 0 6
47967: PUSH
47968: LD_INT 2
47970: EQUAL
47971: AND
47972: OR
47973: IFFALSE 47983
// mode = 0 ;
47975: LD_ADDR_VAR 0 6
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// case mode of 0 :
47983: LD_VAR 0 6
47987: PUSH
47988: LD_INT 0
47990: DOUBLE
47991: EQUAL
47992: IFTRUE 47996
47994: GO 59449
47996: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47997: LD_ADDR_VAR 0 11
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48190: LD_ADDR_VAR 0 12
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48386: LD_ADDR_VAR 0 13
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: LD_INT 3
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48585: LD_ADDR_VAR 0 14
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 3
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48781: LD_ADDR_VAR 0 15
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48974: LD_ADDR_VAR 0 16
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: LD_INT 3
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49167: LD_ADDR_VAR 0 17
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49397: LD_ADDR_VAR 0 18
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49627: LD_ADDR_VAR 0 19
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49857: LD_ADDR_VAR 0 20
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50087: LD_ADDR_VAR 0 21
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50317: LD_ADDR_VAR 0 22
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50547: LD_ADDR_VAR 0 23
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50827: LD_ADDR_VAR 0 24
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51103: LD_ADDR_VAR 0 25
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51377: LD_ADDR_VAR 0 26
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51653: LD_ADDR_VAR 0 27
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51933: LD_ADDR_VAR 0 28
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52215: LD_ADDR_VAR 0 29
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52494: LD_ADDR_VAR 0 30
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: LD_INT 2
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52772: LD_ADDR_VAR 0 31
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: LD_INT 3
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53050: LD_ADDR_VAR 0 32
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 3
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53328: LD_ADDR_VAR 0 33
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 3
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53607: LD_ADDR_VAR 0 34
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53887: LD_ADDR_VAR 0 35
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53999: LD_ADDR_VAR 0 36
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54111: LD_ADDR_VAR 0 37
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54223: LD_ADDR_VAR 0 38
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54335: LD_ADDR_VAR 0 39
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54447: LD_ADDR_VAR 0 40
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54559: LD_ADDR_VAR 0 41
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 3
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54909: LD_ADDR_VAR 0 42
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55259: LD_ADDR_VAR 0 43
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55607: LD_ADDR_VAR 0 44
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55957: LD_ADDR_VAR 0 45
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 3
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56307: LD_ADDR_VAR 0 46
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 3
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56655: LD_ADDR_VAR 0 47
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56806: LD_ADDR_VAR 0 48
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56953: LD_ADDR_VAR 0 49
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57097: LD_ADDR_VAR 0 50
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57241: LD_ADDR_VAR 0 51
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57388: LD_ADDR_VAR 0 52
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57539: LD_ADDR_VAR 0 53
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57769: LD_ADDR_VAR 0 54
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57999: LD_ADDR_VAR 0 55
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58229: LD_ADDR_VAR 0 56
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58459: LD_ADDR_VAR 0 57
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58689: LD_ADDR_VAR 0 58
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58919: LD_ADDR_VAR 0 59
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59007: LD_ADDR_VAR 0 60
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59095: LD_ADDR_VAR 0 61
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59183: LD_ADDR_VAR 0 62
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59271: LD_ADDR_VAR 0 63
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59359: LD_ADDR_VAR 0 64
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// end ; 1 :
59447: GO 65344
59449: LD_INT 1
59451: DOUBLE
59452: EQUAL
59453: IFTRUE 59457
59455: GO 62080
59457: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59458: LD_ADDR_VAR 0 11
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59502: LD_ADDR_VAR 0 12
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59543: LD_ADDR_VAR 0 13
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: LD_INT 3
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59583: LD_ADDR_VAR 0 14
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59624: LD_ADDR_VAR 0 15
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 3
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59668: LD_ADDR_VAR 0 16
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 3
59699: NEG
59700: PUSH
59701: LD_INT 3
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59714: LD_ADDR_VAR 0 17
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 3
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59758: LD_ADDR_VAR 0 18
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59799: LD_ADDR_VAR 0 19
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59839: LD_ADDR_VAR 0 20
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 3
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59880: LD_ADDR_VAR 0 21
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: NEG
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59924: LD_ADDR_VAR 0 22
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59970: LD_ADDR_VAR 0 23
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 4
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60014: LD_ADDR_VAR 0 24
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 4
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60055: LD_ADDR_VAR 0 25
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60095: LD_ADDR_VAR 0 26
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60136: LD_ADDR_VAR 0 27
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60180: LD_ADDR_VAR 0 28
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60226: LD_ADDR_VAR 0 29
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 3
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 5
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 4
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 6
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 6
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 5
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60381: LD_ADDR_VAR 0 30
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 3
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 4
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 5
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 6
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 6
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60524: LD_ADDR_VAR 0 31
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 4
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 5
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 5
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 6
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 6
60631: PUSH
60632: LD_INT 6
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 5
60641: PUSH
60642: LD_INT 6
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60663: LD_ADDR_VAR 0 32
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 5
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 5
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 6
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 6
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 5
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60806: LD_ADDR_VAR 0 33
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 5
60892: NEG
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 5
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 6
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 6
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60961: LD_ADDR_VAR 0 34
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 4
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 4
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: LD_INT 5
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: LD_INT 4
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 5
61064: NEG
61065: PUSH
61066: LD_INT 5
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 5
61076: NEG
61077: PUSH
61078: LD_INT 6
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 6
61088: NEG
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 6
61100: NEG
61101: PUSH
61102: LD_INT 6
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61124: LD_ADDR_VAR 0 41
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 3
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61168: LD_ADDR_VAR 0 42
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61209: LD_ADDR_VAR 0 43
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61249: LD_ADDR_VAR 0 44
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61290: LD_ADDR_VAR 0 45
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 1
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61334: LD_ADDR_VAR 0 46
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: NEG
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61380: LD_ADDR_VAR 0 47
61384: PUSH
61385: LD_INT 2
61387: NEG
61388: PUSH
61389: LD_INT 3
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61413: LD_ADDR_VAR 0 48
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61444: LD_ADDR_VAR 0 49
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: LD_INT 2
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61473: LD_ADDR_VAR 0 50
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61502: LD_ADDR_VAR 0 51
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61533: LD_ADDR_VAR 0 52
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 3
61552: NEG
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61566: LD_ADDR_VAR 0 53
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 3
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61610: LD_ADDR_VAR 0 54
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61651: LD_ADDR_VAR 0 55
61655: PUSH
61656: LD_INT 3
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 3
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61691: LD_ADDR_VAR 0 56
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 2
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61732: LD_ADDR_VAR 0 57
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61776: LD_ADDR_VAR 0 58
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: LD_INT 3
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61822: LD_ADDR_VAR 0 59
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: LIST
61865: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61866: LD_ADDR_VAR 0 60
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61907: LD_ADDR_VAR 0 61
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61947: LD_ADDR_VAR 0 62
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61988: LD_ADDR_VAR 0 63
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62032: LD_ADDR_VAR 0 64
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// end ; 2 :
62078: GO 65344
62080: LD_INT 2
62082: DOUBLE
62083: EQUAL
62084: IFTRUE 62088
62086: GO 65343
62088: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62089: LD_ADDR_VAR 0 29
62093: PUSH
62094: LD_INT 4
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 4
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 5
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 5
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 3
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 4
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 4
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: LD_INT 4
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 4
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 4
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 3
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: LD_INT 4
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 5
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 5
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 4
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 5
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: NEG
62362: PUSH
62363: LD_INT 3
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: LD_INT 1
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: NEG
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 4
62439: NEG
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 4
62451: NEG
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 4
62486: NEG
62487: PUSH
62488: LD_INT 5
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 4
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 4
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 5
62534: NEG
62535: PUSH
62536: LD_INT 4
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 5
62546: NEG
62547: PUSH
62548: LD_INT 5
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: LD_INT 5
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 5
62570: NEG
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62627: LD_ADDR_VAR 0 30
62631: PUSH
62632: LD_INT 4
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 4
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 5
62654: PUSH
62655: LD_INT 4
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 5
62664: PUSH
62665: LD_INT 5
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 4
62674: PUSH
62675: LD_INT 5
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: LD_INT 4
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: LD_INT 3
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 5
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 5
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 4
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 4
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 1
62785: NEG
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 4
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: NEG
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 4
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 4
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 5
62873: NEG
62874: PUSH
62875: LD_INT 0
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 5
62896: NEG
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 3
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 4
62991: NEG
62992: PUSH
62993: LD_INT 4
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 4
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 4
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 5
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 4
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 3
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 4
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 5
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: LD_INT 3
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 5
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63174: LD_ADDR_VAR 0 31
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 4
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 4
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 5
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 5
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 4
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 5
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 3
63274: NEG
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: NEG
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: NEG
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 4
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: NEG
63377: PUSH
63378: LD_INT 4
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 4
63388: NEG
63389: PUSH
63390: LD_INT 5
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 4
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 5
63436: NEG
63437: PUSH
63438: LD_INT 4
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 5
63448: NEG
63449: PUSH
63450: LD_INT 5
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: LD_INT 5
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 5
63472: NEG
63473: PUSH
63474: LD_INT 3
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 4
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 3
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: LD_INT 4
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 4
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 4
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 4
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 5
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 5
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 3
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: LD_INT 2
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63724: LD_ADDR_VAR 0 32
63728: PUSH
63729: LD_INT 4
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 4
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 3
63754: NEG
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: NEG
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 5
63787: NEG
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 5
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 5
63810: NEG
63811: PUSH
63812: LD_INT 2
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 3
63881: NEG
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 4
63893: NEG
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 4
63905: NEG
63906: PUSH
63907: LD_INT 4
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: LD_INT 4
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 4
63929: NEG
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 5
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 3
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 4
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 5
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: LD_INT 5
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 4
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 4
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 4
64136: PUSH
64137: LD_INT 4
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 4
64146: PUSH
64147: LD_INT 3
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 5
64156: PUSH
64157: LD_INT 4
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 5
64166: PUSH
64167: LD_INT 5
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 4
64176: PUSH
64177: LD_INT 5
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: LD_INT 4
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: LD_INT 3
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 5
64206: PUSH
64207: LD_INT 3
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: LD_INT 5
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64271: LD_ADDR_VAR 0 33
64275: PUSH
64276: LD_INT 4
64278: NEG
64279: PUSH
64280: LD_INT 4
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 4
64290: NEG
64291: PUSH
64292: LD_INT 5
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: LD_INT 4
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: NEG
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: NEG
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 5
64338: NEG
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 5
64350: NEG
64351: PUSH
64352: LD_INT 5
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: NEG
64363: PUSH
64364: LD_INT 5
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 5
64374: NEG
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 4
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 3
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 4
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: LD_INT 4
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 4
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 4
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 5
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 4
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 5
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 4
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 4
64611: PUSH
64612: LD_INT 4
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: PUSH
64622: LD_INT 4
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 3
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 4
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: LD_INT 4
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 4
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: LD_INT 3
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 4
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 5
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 5
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: LD_INT 4
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 3
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 5
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: LD_INT 3
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64809: LD_ADDR_VAR 0 34
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 4
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 5
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: LD_INT 3
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 4
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 5
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 5
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 3
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 4
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 4
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 4
65011: PUSH
65012: LD_INT 4
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 5
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 5
65041: PUSH
65042: LD_INT 5
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: LD_INT 5
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 5
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 5
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 4
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 4
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 4
65194: NEG
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 4
65239: NEG
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 5
65250: NEG
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 5
65273: NEG
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// end ; end ;
65341: GO 65344
65343: POP
// case btype of b_depot , b_warehouse :
65344: LD_VAR 0 1
65348: PUSH
65349: LD_INT 0
65351: DOUBLE
65352: EQUAL
65353: IFTRUE 65363
65355: LD_INT 1
65357: DOUBLE
65358: EQUAL
65359: IFTRUE 65363
65361: GO 65564
65363: POP
// case nation of nation_american :
65364: LD_VAR 0 5
65368: PUSH
65369: LD_INT 1
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65377
65375: GO 65433
65377: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65378: LD_ADDR_VAR 0 9
65382: PUSH
65383: LD_VAR 0 11
65387: PUSH
65388: LD_VAR 0 12
65392: PUSH
65393: LD_VAR 0 13
65397: PUSH
65398: LD_VAR 0 14
65402: PUSH
65403: LD_VAR 0 15
65407: PUSH
65408: LD_VAR 0 16
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 4
65425: PUSH
65426: LD_INT 1
65428: PLUS
65429: ARRAY
65430: ST_TO_ADDR
65431: GO 65562
65433: LD_INT 2
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65441
65439: GO 65497
65441: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65442: LD_ADDR_VAR 0 9
65446: PUSH
65447: LD_VAR 0 17
65451: PUSH
65452: LD_VAR 0 18
65456: PUSH
65457: LD_VAR 0 19
65461: PUSH
65462: LD_VAR 0 20
65466: PUSH
65467: LD_VAR 0 21
65471: PUSH
65472: LD_VAR 0 22
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: PUSH
65485: LD_VAR 0 4
65489: PUSH
65490: LD_INT 1
65492: PLUS
65493: ARRAY
65494: ST_TO_ADDR
65495: GO 65562
65497: LD_INT 3
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65505
65503: GO 65561
65505: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65506: LD_ADDR_VAR 0 9
65510: PUSH
65511: LD_VAR 0 23
65515: PUSH
65516: LD_VAR 0 24
65520: PUSH
65521: LD_VAR 0 25
65525: PUSH
65526: LD_VAR 0 26
65530: PUSH
65531: LD_VAR 0 27
65535: PUSH
65536: LD_VAR 0 28
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: LD_VAR 0 4
65553: PUSH
65554: LD_INT 1
65556: PLUS
65557: ARRAY
65558: ST_TO_ADDR
65559: GO 65562
65561: POP
65562: GO 66117
65564: LD_INT 2
65566: DOUBLE
65567: EQUAL
65568: IFTRUE 65578
65570: LD_INT 3
65572: DOUBLE
65573: EQUAL
65574: IFTRUE 65578
65576: GO 65634
65578: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65579: LD_ADDR_VAR 0 9
65583: PUSH
65584: LD_VAR 0 29
65588: PUSH
65589: LD_VAR 0 30
65593: PUSH
65594: LD_VAR 0 31
65598: PUSH
65599: LD_VAR 0 32
65603: PUSH
65604: LD_VAR 0 33
65608: PUSH
65609: LD_VAR 0 34
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: PUSH
65622: LD_VAR 0 4
65626: PUSH
65627: LD_INT 1
65629: PLUS
65630: ARRAY
65631: ST_TO_ADDR
65632: GO 66117
65634: LD_INT 16
65636: DOUBLE
65637: EQUAL
65638: IFTRUE 65696
65640: LD_INT 17
65642: DOUBLE
65643: EQUAL
65644: IFTRUE 65696
65646: LD_INT 18
65648: DOUBLE
65649: EQUAL
65650: IFTRUE 65696
65652: LD_INT 19
65654: DOUBLE
65655: EQUAL
65656: IFTRUE 65696
65658: LD_INT 22
65660: DOUBLE
65661: EQUAL
65662: IFTRUE 65696
65664: LD_INT 20
65666: DOUBLE
65667: EQUAL
65668: IFTRUE 65696
65670: LD_INT 21
65672: DOUBLE
65673: EQUAL
65674: IFTRUE 65696
65676: LD_INT 23
65678: DOUBLE
65679: EQUAL
65680: IFTRUE 65696
65682: LD_INT 24
65684: DOUBLE
65685: EQUAL
65686: IFTRUE 65696
65688: LD_INT 25
65690: DOUBLE
65691: EQUAL
65692: IFTRUE 65696
65694: GO 65752
65696: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65697: LD_ADDR_VAR 0 9
65701: PUSH
65702: LD_VAR 0 35
65706: PUSH
65707: LD_VAR 0 36
65711: PUSH
65712: LD_VAR 0 37
65716: PUSH
65717: LD_VAR 0 38
65721: PUSH
65722: LD_VAR 0 39
65726: PUSH
65727: LD_VAR 0 40
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: PUSH
65740: LD_VAR 0 4
65744: PUSH
65745: LD_INT 1
65747: PLUS
65748: ARRAY
65749: ST_TO_ADDR
65750: GO 66117
65752: LD_INT 6
65754: DOUBLE
65755: EQUAL
65756: IFTRUE 65808
65758: LD_INT 7
65760: DOUBLE
65761: EQUAL
65762: IFTRUE 65808
65764: LD_INT 8
65766: DOUBLE
65767: EQUAL
65768: IFTRUE 65808
65770: LD_INT 13
65772: DOUBLE
65773: EQUAL
65774: IFTRUE 65808
65776: LD_INT 12
65778: DOUBLE
65779: EQUAL
65780: IFTRUE 65808
65782: LD_INT 15
65784: DOUBLE
65785: EQUAL
65786: IFTRUE 65808
65788: LD_INT 11
65790: DOUBLE
65791: EQUAL
65792: IFTRUE 65808
65794: LD_INT 14
65796: DOUBLE
65797: EQUAL
65798: IFTRUE 65808
65800: LD_INT 10
65802: DOUBLE
65803: EQUAL
65804: IFTRUE 65808
65806: GO 65864
65808: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65809: LD_ADDR_VAR 0 9
65813: PUSH
65814: LD_VAR 0 41
65818: PUSH
65819: LD_VAR 0 42
65823: PUSH
65824: LD_VAR 0 43
65828: PUSH
65829: LD_VAR 0 44
65833: PUSH
65834: LD_VAR 0 45
65838: PUSH
65839: LD_VAR 0 46
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: PUSH
65852: LD_VAR 0 4
65856: PUSH
65857: LD_INT 1
65859: PLUS
65860: ARRAY
65861: ST_TO_ADDR
65862: GO 66117
65864: LD_INT 36
65866: DOUBLE
65867: EQUAL
65868: IFTRUE 65872
65870: GO 65928
65872: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65873: LD_ADDR_VAR 0 9
65877: PUSH
65878: LD_VAR 0 47
65882: PUSH
65883: LD_VAR 0 48
65887: PUSH
65888: LD_VAR 0 49
65892: PUSH
65893: LD_VAR 0 50
65897: PUSH
65898: LD_VAR 0 51
65902: PUSH
65903: LD_VAR 0 52
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: LD_VAR 0 4
65920: PUSH
65921: LD_INT 1
65923: PLUS
65924: ARRAY
65925: ST_TO_ADDR
65926: GO 66117
65928: LD_INT 4
65930: DOUBLE
65931: EQUAL
65932: IFTRUE 65954
65934: LD_INT 5
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65954
65940: LD_INT 34
65942: DOUBLE
65943: EQUAL
65944: IFTRUE 65954
65946: LD_INT 37
65948: DOUBLE
65949: EQUAL
65950: IFTRUE 65954
65952: GO 66010
65954: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65955: LD_ADDR_VAR 0 9
65959: PUSH
65960: LD_VAR 0 53
65964: PUSH
65965: LD_VAR 0 54
65969: PUSH
65970: LD_VAR 0 55
65974: PUSH
65975: LD_VAR 0 56
65979: PUSH
65980: LD_VAR 0 57
65984: PUSH
65985: LD_VAR 0 58
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_VAR 0 4
66002: PUSH
66003: LD_INT 1
66005: PLUS
66006: ARRAY
66007: ST_TO_ADDR
66008: GO 66117
66010: LD_INT 31
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66060
66016: LD_INT 32
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66060
66022: LD_INT 33
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66060
66028: LD_INT 27
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66060
66034: LD_INT 26
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66060
66040: LD_INT 28
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66060
66046: LD_INT 29
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66060
66052: LD_INT 30
66054: DOUBLE
66055: EQUAL
66056: IFTRUE 66060
66058: GO 66116
66060: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66061: LD_ADDR_VAR 0 9
66065: PUSH
66066: LD_VAR 0 59
66070: PUSH
66071: LD_VAR 0 60
66075: PUSH
66076: LD_VAR 0 61
66080: PUSH
66081: LD_VAR 0 62
66085: PUSH
66086: LD_VAR 0 63
66090: PUSH
66091: LD_VAR 0 64
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: PUSH
66104: LD_VAR 0 4
66108: PUSH
66109: LD_INT 1
66111: PLUS
66112: ARRAY
66113: ST_TO_ADDR
66114: GO 66117
66116: POP
// temp_list2 = [ ] ;
66117: LD_ADDR_VAR 0 10
66121: PUSH
66122: EMPTY
66123: ST_TO_ADDR
// for i in temp_list do
66124: LD_ADDR_VAR 0 8
66128: PUSH
66129: LD_VAR 0 9
66133: PUSH
66134: FOR_IN
66135: IFFALSE 66187
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66137: LD_ADDR_VAR 0 10
66141: PUSH
66142: LD_VAR 0 10
66146: PUSH
66147: LD_VAR 0 8
66151: PUSH
66152: LD_INT 1
66154: ARRAY
66155: PUSH
66156: LD_VAR 0 2
66160: PLUS
66161: PUSH
66162: LD_VAR 0 8
66166: PUSH
66167: LD_INT 2
66169: ARRAY
66170: PUSH
66171: LD_VAR 0 3
66175: PLUS
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: ADD
66184: ST_TO_ADDR
66185: GO 66134
66187: POP
66188: POP
// result = temp_list2 ;
66189: LD_ADDR_VAR 0 7
66193: PUSH
66194: LD_VAR 0 10
66198: ST_TO_ADDR
// end ;
66199: LD_VAR 0 7
66203: RET
// export function EnemyInRange ( unit , dist ) ; begin
66204: LD_INT 0
66206: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66207: LD_ADDR_VAR 0 3
66211: PUSH
66212: LD_VAR 0 1
66216: PPUSH
66217: CALL_OW 255
66221: PPUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 250
66231: PPUSH
66232: LD_VAR 0 1
66236: PPUSH
66237: CALL_OW 251
66241: PPUSH
66242: LD_VAR 0 2
66246: PPUSH
66247: CALL 39577 0 4
66251: PUSH
66252: LD_INT 4
66254: ARRAY
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 3
66260: RET
// export function PlayerSeeMe ( unit ) ; begin
66261: LD_INT 0
66263: PPUSH
// result := See ( your_side , unit ) ;
66264: LD_ADDR_VAR 0 2
66268: PUSH
66269: LD_OWVAR 2
66273: PPUSH
66274: LD_VAR 0 1
66278: PPUSH
66279: CALL_OW 292
66283: ST_TO_ADDR
// end ;
66284: LD_VAR 0 2
66288: RET
// export function ReverseDir ( unit ) ; begin
66289: LD_INT 0
66291: PPUSH
// if not unit then
66292: LD_VAR 0 1
66296: NOT
66297: IFFALSE 66301
// exit ;
66299: GO 66324
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66301: LD_ADDR_VAR 0 2
66305: PUSH
66306: LD_VAR 0 1
66310: PPUSH
66311: CALL_OW 254
66315: PUSH
66316: LD_INT 3
66318: PLUS
66319: PUSH
66320: LD_INT 6
66322: MOD
66323: ST_TO_ADDR
// end ;
66324: LD_VAR 0 2
66328: RET
// export function ReverseArray ( array ) ; var i ; begin
66329: LD_INT 0
66331: PPUSH
66332: PPUSH
// if not array then
66333: LD_VAR 0 1
66337: NOT
66338: IFFALSE 66342
// exit ;
66340: GO 66397
// result := [ ] ;
66342: LD_ADDR_VAR 0 2
66346: PUSH
66347: EMPTY
66348: ST_TO_ADDR
// for i := array downto 1 do
66349: LD_ADDR_VAR 0 3
66353: PUSH
66354: DOUBLE
66355: LD_VAR 0 1
66359: INC
66360: ST_TO_ADDR
66361: LD_INT 1
66363: PUSH
66364: FOR_DOWNTO
66365: IFFALSE 66395
// result := Join ( result , array [ i ] ) ;
66367: LD_ADDR_VAR 0 2
66371: PUSH
66372: LD_VAR 0 2
66376: PPUSH
66377: LD_VAR 0 1
66381: PUSH
66382: LD_VAR 0 3
66386: ARRAY
66387: PPUSH
66388: CALL 71053 0 2
66392: ST_TO_ADDR
66393: GO 66364
66395: POP
66396: POP
// end ;
66397: LD_VAR 0 2
66401: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66402: LD_INT 0
66404: PPUSH
66405: PPUSH
66406: PPUSH
66407: PPUSH
66408: PPUSH
66409: PPUSH
// if not unit or not hexes then
66410: LD_VAR 0 1
66414: NOT
66415: PUSH
66416: LD_VAR 0 2
66420: NOT
66421: OR
66422: IFFALSE 66426
// exit ;
66424: GO 66549
// dist := 9999 ;
66426: LD_ADDR_VAR 0 5
66430: PUSH
66431: LD_INT 9999
66433: ST_TO_ADDR
// for i = 1 to hexes do
66434: LD_ADDR_VAR 0 4
66438: PUSH
66439: DOUBLE
66440: LD_INT 1
66442: DEC
66443: ST_TO_ADDR
66444: LD_VAR 0 2
66448: PUSH
66449: FOR_TO
66450: IFFALSE 66537
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66452: LD_ADDR_VAR 0 6
66456: PUSH
66457: LD_VAR 0 1
66461: PPUSH
66462: LD_VAR 0 2
66466: PUSH
66467: LD_VAR 0 4
66471: ARRAY
66472: PUSH
66473: LD_INT 1
66475: ARRAY
66476: PPUSH
66477: LD_VAR 0 2
66481: PUSH
66482: LD_VAR 0 4
66486: ARRAY
66487: PUSH
66488: LD_INT 2
66490: ARRAY
66491: PPUSH
66492: CALL_OW 297
66496: ST_TO_ADDR
// if tdist < dist then
66497: LD_VAR 0 6
66501: PUSH
66502: LD_VAR 0 5
66506: LESS
66507: IFFALSE 66535
// begin hex := hexes [ i ] ;
66509: LD_ADDR_VAR 0 8
66513: PUSH
66514: LD_VAR 0 2
66518: PUSH
66519: LD_VAR 0 4
66523: ARRAY
66524: ST_TO_ADDR
// dist := tdist ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 6
66534: ST_TO_ADDR
// end ; end ;
66535: GO 66449
66537: POP
66538: POP
// result := hex ;
66539: LD_ADDR_VAR 0 3
66543: PUSH
66544: LD_VAR 0 8
66548: ST_TO_ADDR
// end ;
66549: LD_VAR 0 3
66553: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66554: LD_INT 0
66556: PPUSH
66557: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66558: LD_VAR 0 1
66562: NOT
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 21
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 23
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PPUSH
66593: CALL_OW 69
66597: IN
66598: NOT
66599: OR
66600: IFFALSE 66604
// exit ;
66602: GO 66651
// for i = 1 to 3 do
66604: LD_ADDR_VAR 0 3
66608: PUSH
66609: DOUBLE
66610: LD_INT 1
66612: DEC
66613: ST_TO_ADDR
66614: LD_INT 3
66616: PUSH
66617: FOR_TO
66618: IFFALSE 66649
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66620: LD_VAR 0 1
66624: PPUSH
66625: CALL_OW 250
66629: PPUSH
66630: LD_VAR 0 1
66634: PPUSH
66635: CALL_OW 251
66639: PPUSH
66640: LD_INT 1
66642: PPUSH
66643: CALL_OW 453
66647: GO 66617
66649: POP
66650: POP
// end ;
66651: LD_VAR 0 2
66655: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66656: LD_INT 0
66658: PPUSH
66659: PPUSH
66660: PPUSH
66661: PPUSH
66662: PPUSH
66663: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66664: LD_VAR 0 1
66668: NOT
66669: PUSH
66670: LD_VAR 0 2
66674: NOT
66675: OR
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: CALL_OW 314
66686: OR
66687: IFFALSE 66691
// exit ;
66689: GO 67158
// if GetLives ( i ) < 250 then
66691: LD_VAR 0 4
66695: PPUSH
66696: CALL_OW 256
66700: PUSH
66701: LD_INT 250
66703: LESS
66704: IFFALSE 66717
// begin ComAutodestruct ( i ) ;
66706: LD_VAR 0 4
66710: PPUSH
66711: CALL 66554 0 1
// exit ;
66715: GO 67158
// end ; x := GetX ( enemy_unit ) ;
66717: LD_ADDR_VAR 0 7
66721: PUSH
66722: LD_VAR 0 2
66726: PPUSH
66727: CALL_OW 250
66731: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66732: LD_ADDR_VAR 0 8
66736: PUSH
66737: LD_VAR 0 2
66741: PPUSH
66742: CALL_OW 251
66746: ST_TO_ADDR
// if not x or not y then
66747: LD_VAR 0 7
66751: NOT
66752: PUSH
66753: LD_VAR 0 8
66757: NOT
66758: OR
66759: IFFALSE 66763
// exit ;
66761: GO 67158
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66763: LD_ADDR_VAR 0 6
66767: PUSH
66768: LD_VAR 0 7
66772: PPUSH
66773: LD_INT 0
66775: PPUSH
66776: LD_INT 4
66778: PPUSH
66779: CALL_OW 272
66783: PUSH
66784: LD_VAR 0 8
66788: PPUSH
66789: LD_INT 0
66791: PPUSH
66792: LD_INT 4
66794: PPUSH
66795: CALL_OW 273
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_VAR 0 7
66808: PPUSH
66809: LD_INT 1
66811: PPUSH
66812: LD_INT 4
66814: PPUSH
66815: CALL_OW 272
66819: PUSH
66820: LD_VAR 0 8
66824: PPUSH
66825: LD_INT 1
66827: PPUSH
66828: LD_INT 4
66830: PPUSH
66831: CALL_OW 273
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_VAR 0 7
66844: PPUSH
66845: LD_INT 2
66847: PPUSH
66848: LD_INT 4
66850: PPUSH
66851: CALL_OW 272
66855: PUSH
66856: LD_VAR 0 8
66860: PPUSH
66861: LD_INT 2
66863: PPUSH
66864: LD_INT 4
66866: PPUSH
66867: CALL_OW 273
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_VAR 0 7
66880: PPUSH
66881: LD_INT 3
66883: PPUSH
66884: LD_INT 4
66886: PPUSH
66887: CALL_OW 272
66891: PUSH
66892: LD_VAR 0 8
66896: PPUSH
66897: LD_INT 3
66899: PPUSH
66900: LD_INT 4
66902: PPUSH
66903: CALL_OW 273
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_VAR 0 7
66916: PPUSH
66917: LD_INT 4
66919: PPUSH
66920: LD_INT 4
66922: PPUSH
66923: CALL_OW 272
66927: PUSH
66928: LD_VAR 0 8
66932: PPUSH
66933: LD_INT 4
66935: PPUSH
66936: LD_INT 4
66938: PPUSH
66939: CALL_OW 273
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_VAR 0 7
66952: PPUSH
66953: LD_INT 5
66955: PPUSH
66956: LD_INT 4
66958: PPUSH
66959: CALL_OW 272
66963: PUSH
66964: LD_VAR 0 8
66968: PPUSH
66969: LD_INT 5
66971: PPUSH
66972: LD_INT 4
66974: PPUSH
66975: CALL_OW 273
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: ST_TO_ADDR
// for i = tmp downto 1 do
66992: LD_ADDR_VAR 0 4
66996: PUSH
66997: DOUBLE
66998: LD_VAR 0 6
67002: INC
67003: ST_TO_ADDR
67004: LD_INT 1
67006: PUSH
67007: FOR_DOWNTO
67008: IFFALSE 67109
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67010: LD_VAR 0 6
67014: PUSH
67015: LD_VAR 0 4
67019: ARRAY
67020: PUSH
67021: LD_INT 1
67023: ARRAY
67024: PPUSH
67025: LD_VAR 0 6
67029: PUSH
67030: LD_VAR 0 4
67034: ARRAY
67035: PUSH
67036: LD_INT 2
67038: ARRAY
67039: PPUSH
67040: CALL_OW 488
67044: NOT
67045: PUSH
67046: LD_VAR 0 6
67050: PUSH
67051: LD_VAR 0 4
67055: ARRAY
67056: PUSH
67057: LD_INT 1
67059: ARRAY
67060: PPUSH
67061: LD_VAR 0 6
67065: PUSH
67066: LD_VAR 0 4
67070: ARRAY
67071: PUSH
67072: LD_INT 2
67074: ARRAY
67075: PPUSH
67076: CALL_OW 428
67080: PUSH
67081: LD_INT 0
67083: NONEQUAL
67084: OR
67085: IFFALSE 67107
// tmp := Delete ( tmp , i ) ;
67087: LD_ADDR_VAR 0 6
67091: PUSH
67092: LD_VAR 0 6
67096: PPUSH
67097: LD_VAR 0 4
67101: PPUSH
67102: CALL_OW 3
67106: ST_TO_ADDR
67107: GO 67007
67109: POP
67110: POP
// j := GetClosestHex ( unit , tmp ) ;
67111: LD_ADDR_VAR 0 5
67115: PUSH
67116: LD_VAR 0 1
67120: PPUSH
67121: LD_VAR 0 6
67125: PPUSH
67126: CALL 66402 0 2
67130: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67131: LD_VAR 0 1
67135: PPUSH
67136: LD_VAR 0 5
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PPUSH
67145: LD_VAR 0 5
67149: PUSH
67150: LD_INT 2
67152: ARRAY
67153: PPUSH
67154: CALL_OW 111
// end ;
67158: LD_VAR 0 3
67162: RET
// export function PrepareApemanSoldier ( ) ; begin
67163: LD_INT 0
67165: PPUSH
// uc_nation := 0 ;
67166: LD_ADDR_OWVAR 21
67170: PUSH
67171: LD_INT 0
67173: ST_TO_ADDR
// hc_sex := sex_male ;
67174: LD_ADDR_OWVAR 27
67178: PUSH
67179: LD_INT 1
67181: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67182: LD_ADDR_OWVAR 28
67186: PUSH
67187: LD_INT 15
67189: ST_TO_ADDR
// hc_gallery :=  ;
67190: LD_ADDR_OWVAR 33
67194: PUSH
67195: LD_STRING 
67197: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67198: LD_ADDR_OWVAR 31
67202: PUSH
67203: LD_INT 0
67205: PPUSH
67206: LD_INT 3
67208: PPUSH
67209: CALL_OW 12
67213: PUSH
67214: LD_INT 0
67216: PPUSH
67217: LD_INT 3
67219: PPUSH
67220: CALL_OW 12
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// end ;
67237: LD_VAR 0 1
67241: RET
// export function PrepareApemanEngineer ( ) ; begin
67242: LD_INT 0
67244: PPUSH
// uc_nation := 0 ;
67245: LD_ADDR_OWVAR 21
67249: PUSH
67250: LD_INT 0
67252: ST_TO_ADDR
// hc_sex := sex_male ;
67253: LD_ADDR_OWVAR 27
67257: PUSH
67258: LD_INT 1
67260: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67261: LD_ADDR_OWVAR 28
67265: PUSH
67266: LD_INT 16
67268: ST_TO_ADDR
// hc_gallery :=  ;
67269: LD_ADDR_OWVAR 33
67273: PUSH
67274: LD_STRING 
67276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67277: LD_ADDR_OWVAR 31
67281: PUSH
67282: LD_INT 0
67284: PPUSH
67285: LD_INT 3
67287: PPUSH
67288: CALL_OW 12
67292: PUSH
67293: LD_INT 0
67295: PPUSH
67296: LD_INT 3
67298: PPUSH
67299: CALL_OW 12
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// end ;
67316: LD_VAR 0 1
67320: RET
// export function PrepareApeman ( agressivity ) ; begin
67321: LD_INT 0
67323: PPUSH
// uc_side := 0 ;
67324: LD_ADDR_OWVAR 20
67328: PUSH
67329: LD_INT 0
67331: ST_TO_ADDR
// uc_nation := 0 ;
67332: LD_ADDR_OWVAR 21
67336: PUSH
67337: LD_INT 0
67339: ST_TO_ADDR
// hc_sex := sex_male ;
67340: LD_ADDR_OWVAR 27
67344: PUSH
67345: LD_INT 1
67347: ST_TO_ADDR
// hc_class := class_apeman ;
67348: LD_ADDR_OWVAR 28
67352: PUSH
67353: LD_INT 12
67355: ST_TO_ADDR
// hc_gallery :=  ;
67356: LD_ADDR_OWVAR 33
67360: PUSH
67361: LD_STRING 
67363: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67364: LD_ADDR_OWVAR 35
67368: PUSH
67369: LD_VAR 0 1
67373: NEG
67374: PPUSH
67375: LD_VAR 0 1
67379: PPUSH
67380: CALL_OW 12
67384: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67385: LD_ADDR_OWVAR 31
67389: PUSH
67390: LD_INT 0
67392: PPUSH
67393: LD_INT 3
67395: PPUSH
67396: CALL_OW 12
67400: PUSH
67401: LD_INT 0
67403: PPUSH
67404: LD_INT 3
67406: PPUSH
67407: CALL_OW 12
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: ST_TO_ADDR
// end ;
67424: LD_VAR 0 2
67428: RET
// export function PrepareTiger ( agressivity ) ; begin
67429: LD_INT 0
67431: PPUSH
// uc_side := 0 ;
67432: LD_ADDR_OWVAR 20
67436: PUSH
67437: LD_INT 0
67439: ST_TO_ADDR
// uc_nation := 0 ;
67440: LD_ADDR_OWVAR 21
67444: PUSH
67445: LD_INT 0
67447: ST_TO_ADDR
// hc_class := class_tiger ;
67448: LD_ADDR_OWVAR 28
67452: PUSH
67453: LD_INT 14
67455: ST_TO_ADDR
// hc_gallery :=  ;
67456: LD_ADDR_OWVAR 33
67460: PUSH
67461: LD_STRING 
67463: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67464: LD_ADDR_OWVAR 35
67468: PUSH
67469: LD_VAR 0 1
67473: NEG
67474: PPUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: CALL_OW 12
67484: ST_TO_ADDR
// end ;
67485: LD_VAR 0 2
67489: RET
// export function PrepareEnchidna ( ) ; begin
67490: LD_INT 0
67492: PPUSH
// uc_side := 0 ;
67493: LD_ADDR_OWVAR 20
67497: PUSH
67498: LD_INT 0
67500: ST_TO_ADDR
// uc_nation := 0 ;
67501: LD_ADDR_OWVAR 21
67505: PUSH
67506: LD_INT 0
67508: ST_TO_ADDR
// hc_class := class_baggie ;
67509: LD_ADDR_OWVAR 28
67513: PUSH
67514: LD_INT 13
67516: ST_TO_ADDR
// hc_gallery :=  ;
67517: LD_ADDR_OWVAR 33
67521: PUSH
67522: LD_STRING 
67524: ST_TO_ADDR
// end ;
67525: LD_VAR 0 1
67529: RET
// export function PrepareFrog ( ) ; begin
67530: LD_INT 0
67532: PPUSH
// uc_side := 0 ;
67533: LD_ADDR_OWVAR 20
67537: PUSH
67538: LD_INT 0
67540: ST_TO_ADDR
// uc_nation := 0 ;
67541: LD_ADDR_OWVAR 21
67545: PUSH
67546: LD_INT 0
67548: ST_TO_ADDR
// hc_class := class_frog ;
67549: LD_ADDR_OWVAR 28
67553: PUSH
67554: LD_INT 19
67556: ST_TO_ADDR
// hc_gallery :=  ;
67557: LD_ADDR_OWVAR 33
67561: PUSH
67562: LD_STRING 
67564: ST_TO_ADDR
// end ;
67565: LD_VAR 0 1
67569: RET
// export function PrepareFish ( ) ; begin
67570: LD_INT 0
67572: PPUSH
// uc_side := 0 ;
67573: LD_ADDR_OWVAR 20
67577: PUSH
67578: LD_INT 0
67580: ST_TO_ADDR
// uc_nation := 0 ;
67581: LD_ADDR_OWVAR 21
67585: PUSH
67586: LD_INT 0
67588: ST_TO_ADDR
// hc_class := class_fish ;
67589: LD_ADDR_OWVAR 28
67593: PUSH
67594: LD_INT 20
67596: ST_TO_ADDR
// hc_gallery :=  ;
67597: LD_ADDR_OWVAR 33
67601: PUSH
67602: LD_STRING 
67604: ST_TO_ADDR
// end ;
67605: LD_VAR 0 1
67609: RET
// export function PrepareBird ( ) ; begin
67610: LD_INT 0
67612: PPUSH
// uc_side := 0 ;
67613: LD_ADDR_OWVAR 20
67617: PUSH
67618: LD_INT 0
67620: ST_TO_ADDR
// uc_nation := 0 ;
67621: LD_ADDR_OWVAR 21
67625: PUSH
67626: LD_INT 0
67628: ST_TO_ADDR
// hc_class := class_phororhacos ;
67629: LD_ADDR_OWVAR 28
67633: PUSH
67634: LD_INT 18
67636: ST_TO_ADDR
// hc_gallery :=  ;
67637: LD_ADDR_OWVAR 33
67641: PUSH
67642: LD_STRING 
67644: ST_TO_ADDR
// end ;
67645: LD_VAR 0 1
67649: RET
// export function PrepareHorse ( ) ; begin
67650: LD_INT 0
67652: PPUSH
// uc_side := 0 ;
67653: LD_ADDR_OWVAR 20
67657: PUSH
67658: LD_INT 0
67660: ST_TO_ADDR
// uc_nation := 0 ;
67661: LD_ADDR_OWVAR 21
67665: PUSH
67666: LD_INT 0
67668: ST_TO_ADDR
// hc_class := class_horse ;
67669: LD_ADDR_OWVAR 28
67673: PUSH
67674: LD_INT 21
67676: ST_TO_ADDR
// hc_gallery :=  ;
67677: LD_ADDR_OWVAR 33
67681: PUSH
67682: LD_STRING 
67684: ST_TO_ADDR
// end ;
67685: LD_VAR 0 1
67689: RET
// export function PrepareMastodont ( ) ; begin
67690: LD_INT 0
67692: PPUSH
// uc_side := 0 ;
67693: LD_ADDR_OWVAR 20
67697: PUSH
67698: LD_INT 0
67700: ST_TO_ADDR
// uc_nation := 0 ;
67701: LD_ADDR_OWVAR 21
67705: PUSH
67706: LD_INT 0
67708: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67709: LD_ADDR_OWVAR 37
67713: PUSH
67714: LD_INT 31
67716: ST_TO_ADDR
// vc_control := control_rider ;
67717: LD_ADDR_OWVAR 38
67721: PUSH
67722: LD_INT 4
67724: ST_TO_ADDR
// end ;
67725: LD_VAR 0 1
67729: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67730: LD_INT 0
67732: PPUSH
67733: PPUSH
67734: PPUSH
// uc_side = 0 ;
67735: LD_ADDR_OWVAR 20
67739: PUSH
67740: LD_INT 0
67742: ST_TO_ADDR
// uc_nation = 0 ;
67743: LD_ADDR_OWVAR 21
67747: PUSH
67748: LD_INT 0
67750: ST_TO_ADDR
// InitHc_All ( ) ;
67751: CALL_OW 584
// InitVc ;
67755: CALL_OW 20
// if mastodonts then
67759: LD_VAR 0 6
67763: IFFALSE 67830
// for i = 1 to mastodonts do
67765: LD_ADDR_VAR 0 11
67769: PUSH
67770: DOUBLE
67771: LD_INT 1
67773: DEC
67774: ST_TO_ADDR
67775: LD_VAR 0 6
67779: PUSH
67780: FOR_TO
67781: IFFALSE 67828
// begin vc_chassis := 31 ;
67783: LD_ADDR_OWVAR 37
67787: PUSH
67788: LD_INT 31
67790: ST_TO_ADDR
// vc_control := control_rider ;
67791: LD_ADDR_OWVAR 38
67795: PUSH
67796: LD_INT 4
67798: ST_TO_ADDR
// animal := CreateVehicle ;
67799: LD_ADDR_VAR 0 12
67803: PUSH
67804: CALL_OW 45
67808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67809: LD_VAR 0 12
67813: PPUSH
67814: LD_VAR 0 8
67818: PPUSH
67819: LD_INT 0
67821: PPUSH
67822: CALL 69958 0 3
// end ;
67826: GO 67780
67828: POP
67829: POP
// if horses then
67830: LD_VAR 0 5
67834: IFFALSE 67901
// for i = 1 to horses do
67836: LD_ADDR_VAR 0 11
67840: PUSH
67841: DOUBLE
67842: LD_INT 1
67844: DEC
67845: ST_TO_ADDR
67846: LD_VAR 0 5
67850: PUSH
67851: FOR_TO
67852: IFFALSE 67899
// begin hc_class := 21 ;
67854: LD_ADDR_OWVAR 28
67858: PUSH
67859: LD_INT 21
67861: ST_TO_ADDR
// hc_gallery :=  ;
67862: LD_ADDR_OWVAR 33
67866: PUSH
67867: LD_STRING 
67869: ST_TO_ADDR
// animal := CreateHuman ;
67870: LD_ADDR_VAR 0 12
67874: PUSH
67875: CALL_OW 44
67879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67880: LD_VAR 0 12
67884: PPUSH
67885: LD_VAR 0 8
67889: PPUSH
67890: LD_INT 0
67892: PPUSH
67893: CALL 69958 0 3
// end ;
67897: GO 67851
67899: POP
67900: POP
// if birds then
67901: LD_VAR 0 1
67905: IFFALSE 67972
// for i = 1 to birds do
67907: LD_ADDR_VAR 0 11
67911: PUSH
67912: DOUBLE
67913: LD_INT 1
67915: DEC
67916: ST_TO_ADDR
67917: LD_VAR 0 1
67921: PUSH
67922: FOR_TO
67923: IFFALSE 67970
// begin hc_class := 18 ;
67925: LD_ADDR_OWVAR 28
67929: PUSH
67930: LD_INT 18
67932: ST_TO_ADDR
// hc_gallery =  ;
67933: LD_ADDR_OWVAR 33
67937: PUSH
67938: LD_STRING 
67940: ST_TO_ADDR
// animal := CreateHuman ;
67941: LD_ADDR_VAR 0 12
67945: PUSH
67946: CALL_OW 44
67950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67951: LD_VAR 0 12
67955: PPUSH
67956: LD_VAR 0 8
67960: PPUSH
67961: LD_INT 0
67963: PPUSH
67964: CALL 69958 0 3
// end ;
67968: GO 67922
67970: POP
67971: POP
// if tigers then
67972: LD_VAR 0 2
67976: IFFALSE 68060
// for i = 1 to tigers do
67978: LD_ADDR_VAR 0 11
67982: PUSH
67983: DOUBLE
67984: LD_INT 1
67986: DEC
67987: ST_TO_ADDR
67988: LD_VAR 0 2
67992: PUSH
67993: FOR_TO
67994: IFFALSE 68058
// begin hc_class = class_tiger ;
67996: LD_ADDR_OWVAR 28
68000: PUSH
68001: LD_INT 14
68003: ST_TO_ADDR
// hc_gallery =  ;
68004: LD_ADDR_OWVAR 33
68008: PUSH
68009: LD_STRING 
68011: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68012: LD_ADDR_OWVAR 35
68016: PUSH
68017: LD_INT 7
68019: NEG
68020: PPUSH
68021: LD_INT 7
68023: PPUSH
68024: CALL_OW 12
68028: ST_TO_ADDR
// animal := CreateHuman ;
68029: LD_ADDR_VAR 0 12
68033: PUSH
68034: CALL_OW 44
68038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68039: LD_VAR 0 12
68043: PPUSH
68044: LD_VAR 0 8
68048: PPUSH
68049: LD_INT 0
68051: PPUSH
68052: CALL 69958 0 3
// end ;
68056: GO 67993
68058: POP
68059: POP
// if apemans then
68060: LD_VAR 0 3
68064: IFFALSE 68187
// for i = 1 to apemans do
68066: LD_ADDR_VAR 0 11
68070: PUSH
68071: DOUBLE
68072: LD_INT 1
68074: DEC
68075: ST_TO_ADDR
68076: LD_VAR 0 3
68080: PUSH
68081: FOR_TO
68082: IFFALSE 68185
// begin hc_class = class_apeman ;
68084: LD_ADDR_OWVAR 28
68088: PUSH
68089: LD_INT 12
68091: ST_TO_ADDR
// hc_gallery =  ;
68092: LD_ADDR_OWVAR 33
68096: PUSH
68097: LD_STRING 
68099: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68100: LD_ADDR_OWVAR 35
68104: PUSH
68105: LD_INT 2
68107: NEG
68108: PPUSH
68109: LD_INT 2
68111: PPUSH
68112: CALL_OW 12
68116: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68117: LD_ADDR_OWVAR 31
68121: PUSH
68122: LD_INT 1
68124: PPUSH
68125: LD_INT 3
68127: PPUSH
68128: CALL_OW 12
68132: PUSH
68133: LD_INT 1
68135: PPUSH
68136: LD_INT 3
68138: PPUSH
68139: CALL_OW 12
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: ST_TO_ADDR
// animal := CreateHuman ;
68156: LD_ADDR_VAR 0 12
68160: PUSH
68161: CALL_OW 44
68165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68166: LD_VAR 0 12
68170: PPUSH
68171: LD_VAR 0 8
68175: PPUSH
68176: LD_INT 0
68178: PPUSH
68179: CALL 69958 0 3
// end ;
68183: GO 68081
68185: POP
68186: POP
// if enchidnas then
68187: LD_VAR 0 4
68191: IFFALSE 68258
// for i = 1 to enchidnas do
68193: LD_ADDR_VAR 0 11
68197: PUSH
68198: DOUBLE
68199: LD_INT 1
68201: DEC
68202: ST_TO_ADDR
68203: LD_VAR 0 4
68207: PUSH
68208: FOR_TO
68209: IFFALSE 68256
// begin hc_class = 13 ;
68211: LD_ADDR_OWVAR 28
68215: PUSH
68216: LD_INT 13
68218: ST_TO_ADDR
// hc_gallery =  ;
68219: LD_ADDR_OWVAR 33
68223: PUSH
68224: LD_STRING 
68226: ST_TO_ADDR
// animal := CreateHuman ;
68227: LD_ADDR_VAR 0 12
68231: PUSH
68232: CALL_OW 44
68236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68237: LD_VAR 0 12
68241: PPUSH
68242: LD_VAR 0 8
68246: PPUSH
68247: LD_INT 0
68249: PPUSH
68250: CALL 69958 0 3
// end ;
68254: GO 68208
68256: POP
68257: POP
// if fishes then
68258: LD_VAR 0 7
68262: IFFALSE 68329
// for i = 1 to fishes do
68264: LD_ADDR_VAR 0 11
68268: PUSH
68269: DOUBLE
68270: LD_INT 1
68272: DEC
68273: ST_TO_ADDR
68274: LD_VAR 0 7
68278: PUSH
68279: FOR_TO
68280: IFFALSE 68327
// begin hc_class = 20 ;
68282: LD_ADDR_OWVAR 28
68286: PUSH
68287: LD_INT 20
68289: ST_TO_ADDR
// hc_gallery =  ;
68290: LD_ADDR_OWVAR 33
68294: PUSH
68295: LD_STRING 
68297: ST_TO_ADDR
// animal := CreateHuman ;
68298: LD_ADDR_VAR 0 12
68302: PUSH
68303: CALL_OW 44
68307: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68308: LD_VAR 0 12
68312: PPUSH
68313: LD_VAR 0 9
68317: PPUSH
68318: LD_INT 0
68320: PPUSH
68321: CALL 69958 0 3
// end ;
68325: GO 68279
68327: POP
68328: POP
// end ;
68329: LD_VAR 0 10
68333: RET
// export function WantHeal ( sci , unit ) ; begin
68334: LD_INT 0
68336: PPUSH
// if GetTaskList ( sci ) > 0 then
68337: LD_VAR 0 1
68341: PPUSH
68342: CALL_OW 437
68346: PUSH
68347: LD_INT 0
68349: GREATER
68350: IFFALSE 68420
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68352: LD_VAR 0 1
68356: PPUSH
68357: CALL_OW 437
68361: PUSH
68362: LD_INT 1
68364: ARRAY
68365: PUSH
68366: LD_INT 1
68368: ARRAY
68369: PUSH
68370: LD_STRING l
68372: EQUAL
68373: PUSH
68374: LD_VAR 0 1
68378: PPUSH
68379: CALL_OW 437
68383: PUSH
68384: LD_INT 1
68386: ARRAY
68387: PUSH
68388: LD_INT 4
68390: ARRAY
68391: PUSH
68392: LD_VAR 0 2
68396: EQUAL
68397: AND
68398: IFFALSE 68410
// result := true else
68400: LD_ADDR_VAR 0 3
68404: PUSH
68405: LD_INT 1
68407: ST_TO_ADDR
68408: GO 68418
// result := false ;
68410: LD_ADDR_VAR 0 3
68414: PUSH
68415: LD_INT 0
68417: ST_TO_ADDR
// end else
68418: GO 68428
// result := false ;
68420: LD_ADDR_VAR 0 3
68424: PUSH
68425: LD_INT 0
68427: ST_TO_ADDR
// end ;
68428: LD_VAR 0 3
68432: RET
// export function HealTarget ( sci ) ; begin
68433: LD_INT 0
68435: PPUSH
// if not sci then
68436: LD_VAR 0 1
68440: NOT
68441: IFFALSE 68445
// exit ;
68443: GO 68510
// result := 0 ;
68445: LD_ADDR_VAR 0 2
68449: PUSH
68450: LD_INT 0
68452: ST_TO_ADDR
// if GetTaskList ( sci ) then
68453: LD_VAR 0 1
68457: PPUSH
68458: CALL_OW 437
68462: IFFALSE 68510
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 437
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: PUSH
68482: LD_STRING l
68484: EQUAL
68485: IFFALSE 68510
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_VAR 0 1
68496: PPUSH
68497: CALL_OW 437
68501: PUSH
68502: LD_INT 1
68504: ARRAY
68505: PUSH
68506: LD_INT 4
68508: ARRAY
68509: ST_TO_ADDR
// end ;
68510: LD_VAR 0 2
68514: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68515: LD_INT 0
68517: PPUSH
68518: PPUSH
68519: PPUSH
68520: PPUSH
// if not base_units then
68521: LD_VAR 0 1
68525: NOT
68526: IFFALSE 68530
// exit ;
68528: GO 68617
// result := false ;
68530: LD_ADDR_VAR 0 2
68534: PUSH
68535: LD_INT 0
68537: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68538: LD_ADDR_VAR 0 5
68542: PUSH
68543: LD_VAR 0 1
68547: PPUSH
68548: LD_INT 21
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PPUSH
68558: CALL_OW 72
68562: ST_TO_ADDR
// if not tmp then
68563: LD_VAR 0 5
68567: NOT
68568: IFFALSE 68572
// exit ;
68570: GO 68617
// for i in tmp do
68572: LD_ADDR_VAR 0 3
68576: PUSH
68577: LD_VAR 0 5
68581: PUSH
68582: FOR_IN
68583: IFFALSE 68615
// begin result := EnemyInRange ( i , 22 ) ;
68585: LD_ADDR_VAR 0 2
68589: PUSH
68590: LD_VAR 0 3
68594: PPUSH
68595: LD_INT 22
68597: PPUSH
68598: CALL 66204 0 2
68602: ST_TO_ADDR
// if result then
68603: LD_VAR 0 2
68607: IFFALSE 68613
// exit ;
68609: POP
68610: POP
68611: GO 68617
// end ;
68613: GO 68582
68615: POP
68616: POP
// end ;
68617: LD_VAR 0 2
68621: RET
// export function FilterByTag ( units , tag ) ; begin
68622: LD_INT 0
68624: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68625: LD_ADDR_VAR 0 3
68629: PUSH
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_INT 120
68637: PUSH
68638: LD_VAR 0 2
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PPUSH
68647: CALL_OW 72
68651: ST_TO_ADDR
// end ;
68652: LD_VAR 0 3
68656: RET
// export function IsDriver ( un ) ; begin
68657: LD_INT 0
68659: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68660: LD_ADDR_VAR 0 2
68664: PUSH
68665: LD_VAR 0 1
68669: PUSH
68670: LD_INT 55
68672: PUSH
68673: EMPTY
68674: LIST
68675: PPUSH
68676: CALL_OW 69
68680: IN
68681: ST_TO_ADDR
// end ;
68682: LD_VAR 0 2
68686: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68687: LD_INT 0
68689: PPUSH
68690: PPUSH
// list := [ ] ;
68691: LD_ADDR_VAR 0 5
68695: PUSH
68696: EMPTY
68697: ST_TO_ADDR
// case d of 0 :
68698: LD_VAR 0 3
68702: PUSH
68703: LD_INT 0
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68711
68709: GO 68844
68711: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68712: LD_ADDR_VAR 0 5
68716: PUSH
68717: LD_VAR 0 1
68721: PUSH
68722: LD_INT 4
68724: MINUS
68725: PUSH
68726: LD_VAR 0 2
68730: PUSH
68731: LD_INT 4
68733: MINUS
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: PUSH
68743: LD_VAR 0 1
68747: PUSH
68748: LD_INT 3
68750: MINUS
68751: PUSH
68752: LD_VAR 0 2
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_INT 4
68772: PLUS
68773: PUSH
68774: LD_VAR 0 2
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: PUSH
68787: LD_VAR 0 1
68791: PUSH
68792: LD_INT 3
68794: PLUS
68795: PUSH
68796: LD_VAR 0 2
68800: PUSH
68801: LD_INT 3
68803: PLUS
68804: PUSH
68805: LD_INT 5
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: LIST
68812: PUSH
68813: LD_VAR 0 1
68817: PUSH
68818: LD_VAR 0 2
68822: PUSH
68823: LD_INT 4
68825: PLUS
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// end ; 1 :
68842: GO 69542
68844: LD_INT 1
68846: DOUBLE
68847: EQUAL
68848: IFTRUE 68852
68850: GO 68985
68852: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68853: LD_ADDR_VAR 0 5
68857: PUSH
68858: LD_VAR 0 1
68862: PUSH
68863: LD_VAR 0 2
68867: PUSH
68868: LD_INT 4
68870: MINUS
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: PUSH
68880: LD_VAR 0 1
68884: PUSH
68885: LD_INT 3
68887: MINUS
68888: PUSH
68889: LD_VAR 0 2
68893: PUSH
68894: LD_INT 3
68896: MINUS
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: PUSH
68906: LD_VAR 0 1
68910: PUSH
68911: LD_INT 4
68913: MINUS
68914: PUSH
68915: LD_VAR 0 2
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: LIST
68927: PUSH
68928: LD_VAR 0 1
68932: PUSH
68933: LD_VAR 0 2
68937: PUSH
68938: LD_INT 3
68940: PLUS
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: LD_VAR 0 1
68954: PUSH
68955: LD_INT 4
68957: PLUS
68958: PUSH
68959: LD_VAR 0 2
68963: PUSH
68964: LD_INT 4
68966: PLUS
68967: PUSH
68968: LD_INT 5
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: ST_TO_ADDR
// end ; 2 :
68983: GO 69542
68985: LD_INT 2
68987: DOUBLE
68988: EQUAL
68989: IFTRUE 68993
68991: GO 69122
68993: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68994: LD_ADDR_VAR 0 5
68998: PUSH
68999: LD_VAR 0 1
69003: PUSH
69004: LD_VAR 0 2
69008: PUSH
69009: LD_INT 3
69011: MINUS
69012: PUSH
69013: LD_INT 3
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: LIST
69020: PUSH
69021: LD_VAR 0 1
69025: PUSH
69026: LD_INT 4
69028: PLUS
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_INT 4
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: LD_VAR 0 1
69047: PUSH
69048: LD_VAR 0 2
69052: PUSH
69053: LD_INT 4
69055: PLUS
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: PUSH
69065: LD_VAR 0 1
69069: PUSH
69070: LD_INT 3
69072: MINUS
69073: PUSH
69074: LD_VAR 0 2
69078: PUSH
69079: LD_INT 1
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: LIST
69086: PUSH
69087: LD_VAR 0 1
69091: PUSH
69092: LD_INT 4
69094: MINUS
69095: PUSH
69096: LD_VAR 0 2
69100: PUSH
69101: LD_INT 4
69103: MINUS
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: ST_TO_ADDR
// end ; 3 :
69120: GO 69542
69122: LD_INT 3
69124: DOUBLE
69125: EQUAL
69126: IFTRUE 69130
69128: GO 69263
69130: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69131: LD_ADDR_VAR 0 5
69135: PUSH
69136: LD_VAR 0 1
69140: PUSH
69141: LD_INT 3
69143: PLUS
69144: PUSH
69145: LD_VAR 0 2
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: LIST
69157: PUSH
69158: LD_VAR 0 1
69162: PUSH
69163: LD_INT 4
69165: PLUS
69166: PUSH
69167: LD_VAR 0 2
69171: PUSH
69172: LD_INT 4
69174: PLUS
69175: PUSH
69176: LD_INT 5
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: PUSH
69184: LD_VAR 0 1
69188: PUSH
69189: LD_INT 4
69191: MINUS
69192: PUSH
69193: LD_VAR 0 2
69197: PUSH
69198: LD_INT 1
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: LIST
69205: PUSH
69206: LD_VAR 0 1
69210: PUSH
69211: LD_VAR 0 2
69215: PUSH
69216: LD_INT 4
69218: MINUS
69219: PUSH
69220: LD_INT 3
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: PUSH
69228: LD_VAR 0 1
69232: PUSH
69233: LD_INT 3
69235: MINUS
69236: PUSH
69237: LD_VAR 0 2
69241: PUSH
69242: LD_INT 3
69244: MINUS
69245: PUSH
69246: LD_INT 2
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: LIST
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: ST_TO_ADDR
// end ; 4 :
69261: GO 69542
69263: LD_INT 4
69265: DOUBLE
69266: EQUAL
69267: IFTRUE 69271
69269: GO 69404
69271: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69272: LD_ADDR_VAR 0 5
69276: PUSH
69277: LD_VAR 0 1
69281: PUSH
69282: LD_VAR 0 2
69286: PUSH
69287: LD_INT 4
69289: PLUS
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: PUSH
69299: LD_VAR 0 1
69303: PUSH
69304: LD_INT 3
69306: PLUS
69307: PUSH
69308: LD_VAR 0 2
69312: PUSH
69313: LD_INT 3
69315: PLUS
69316: PUSH
69317: LD_INT 5
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: LIST
69324: PUSH
69325: LD_VAR 0 1
69329: PUSH
69330: LD_INT 4
69332: PLUS
69333: PUSH
69334: LD_VAR 0 2
69338: PUSH
69339: LD_INT 4
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: PUSH
69347: LD_VAR 0 1
69351: PUSH
69352: LD_VAR 0 2
69356: PUSH
69357: LD_INT 3
69359: MINUS
69360: PUSH
69361: LD_INT 3
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: PUSH
69369: LD_VAR 0 1
69373: PUSH
69374: LD_INT 4
69376: MINUS
69377: PUSH
69378: LD_VAR 0 2
69382: PUSH
69383: LD_INT 4
69385: MINUS
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: LIST
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: ST_TO_ADDR
// end ; 5 :
69402: GO 69542
69404: LD_INT 5
69406: DOUBLE
69407: EQUAL
69408: IFTRUE 69412
69410: GO 69541
69412: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69413: LD_ADDR_VAR 0 5
69417: PUSH
69418: LD_VAR 0 1
69422: PUSH
69423: LD_INT 4
69425: MINUS
69426: PUSH
69427: LD_VAR 0 2
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: PUSH
69440: LD_VAR 0 1
69444: PUSH
69445: LD_VAR 0 2
69449: PUSH
69450: LD_INT 4
69452: MINUS
69453: PUSH
69454: LD_INT 3
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: LIST
69461: PUSH
69462: LD_VAR 0 1
69466: PUSH
69467: LD_INT 4
69469: PLUS
69470: PUSH
69471: LD_VAR 0 2
69475: PUSH
69476: LD_INT 4
69478: PLUS
69479: PUSH
69480: LD_INT 5
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: LIST
69487: PUSH
69488: LD_VAR 0 1
69492: PUSH
69493: LD_INT 3
69495: PLUS
69496: PUSH
69497: LD_VAR 0 2
69501: PUSH
69502: LD_INT 4
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: PUSH
69510: LD_VAR 0 1
69514: PUSH
69515: LD_VAR 0 2
69519: PUSH
69520: LD_INT 3
69522: PLUS
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: ST_TO_ADDR
// end ; end ;
69539: GO 69542
69541: POP
// result := list ;
69542: LD_ADDR_VAR 0 4
69546: PUSH
69547: LD_VAR 0 5
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 4
69556: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69562: LD_VAR 0 1
69566: NOT
69567: PUSH
69568: LD_VAR 0 2
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: LD_INT 4
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: IN
69591: NOT
69592: OR
69593: IFFALSE 69597
// exit ;
69595: GO 69680
// tmp := [ ] ;
69597: LD_ADDR_VAR 0 5
69601: PUSH
69602: EMPTY
69603: ST_TO_ADDR
// for i in units do
69604: LD_ADDR_VAR 0 4
69608: PUSH
69609: LD_VAR 0 1
69613: PUSH
69614: FOR_IN
69615: IFFALSE 69649
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69617: LD_ADDR_VAR 0 5
69621: PUSH
69622: LD_VAR 0 5
69626: PPUSH
69627: LD_VAR 0 4
69631: PPUSH
69632: LD_VAR 0 2
69636: PPUSH
69637: CALL_OW 259
69641: PPUSH
69642: CALL 71053 0 2
69646: ST_TO_ADDR
69647: GO 69614
69649: POP
69650: POP
// if not tmp then
69651: LD_VAR 0 5
69655: NOT
69656: IFFALSE 69660
// exit ;
69658: GO 69680
// result := SortListByListDesc ( units , tmp ) ;
69660: LD_ADDR_VAR 0 3
69664: PUSH
69665: LD_VAR 0 1
69669: PPUSH
69670: LD_VAR 0 5
69674: PPUSH
69675: CALL_OW 77
69679: ST_TO_ADDR
// end ;
69680: LD_VAR 0 3
69684: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69685: LD_INT 0
69687: PPUSH
69688: PPUSH
69689: PPUSH
// result := false ;
69690: LD_ADDR_VAR 0 3
69694: PUSH
69695: LD_INT 0
69697: ST_TO_ADDR
// if not building then
69698: LD_VAR 0 2
69702: NOT
69703: IFFALSE 69707
// exit ;
69705: GO 69845
// x := GetX ( building ) ;
69707: LD_ADDR_VAR 0 4
69711: PUSH
69712: LD_VAR 0 2
69716: PPUSH
69717: CALL_OW 250
69721: ST_TO_ADDR
// y := GetY ( building ) ;
69722: LD_ADDR_VAR 0 5
69726: PUSH
69727: LD_VAR 0 2
69731: PPUSH
69732: CALL_OW 251
69736: ST_TO_ADDR
// if not x or not y then
69737: LD_VAR 0 4
69741: NOT
69742: PUSH
69743: LD_VAR 0 5
69747: NOT
69748: OR
69749: IFFALSE 69753
// exit ;
69751: GO 69845
// if GetTaskList ( unit ) then
69753: LD_VAR 0 1
69757: PPUSH
69758: CALL_OW 437
69762: IFFALSE 69845
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69764: LD_STRING e
69766: PUSH
69767: LD_VAR 0 1
69771: PPUSH
69772: CALL_OW 437
69776: PUSH
69777: LD_INT 1
69779: ARRAY
69780: PUSH
69781: LD_INT 1
69783: ARRAY
69784: EQUAL
69785: PUSH
69786: LD_VAR 0 4
69790: PUSH
69791: LD_VAR 0 1
69795: PPUSH
69796: CALL_OW 437
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PUSH
69805: LD_INT 2
69807: ARRAY
69808: EQUAL
69809: AND
69810: PUSH
69811: LD_VAR 0 5
69815: PUSH
69816: LD_VAR 0 1
69820: PPUSH
69821: CALL_OW 437
69825: PUSH
69826: LD_INT 1
69828: ARRAY
69829: PUSH
69830: LD_INT 3
69832: ARRAY
69833: EQUAL
69834: AND
69835: IFFALSE 69845
// result := true end ;
69837: LD_ADDR_VAR 0 3
69841: PUSH
69842: LD_INT 1
69844: ST_TO_ADDR
// end ;
69845: LD_VAR 0 3
69849: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69850: LD_INT 0
69852: PPUSH
// result := false ;
69853: LD_ADDR_VAR 0 4
69857: PUSH
69858: LD_INT 0
69860: ST_TO_ADDR
// if GetTaskList ( unit ) then
69861: LD_VAR 0 1
69865: PPUSH
69866: CALL_OW 437
69870: IFFALSE 69953
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69872: LD_STRING M
69874: PUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 437
69884: PUSH
69885: LD_INT 1
69887: ARRAY
69888: PUSH
69889: LD_INT 1
69891: ARRAY
69892: EQUAL
69893: PUSH
69894: LD_VAR 0 2
69898: PUSH
69899: LD_VAR 0 1
69903: PPUSH
69904: CALL_OW 437
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: LD_INT 2
69915: ARRAY
69916: EQUAL
69917: AND
69918: PUSH
69919: LD_VAR 0 3
69923: PUSH
69924: LD_VAR 0 1
69928: PPUSH
69929: CALL_OW 437
69933: PUSH
69934: LD_INT 1
69936: ARRAY
69937: PUSH
69938: LD_INT 3
69940: ARRAY
69941: EQUAL
69942: AND
69943: IFFALSE 69953
// result := true ;
69945: LD_ADDR_VAR 0 4
69949: PUSH
69950: LD_INT 1
69952: ST_TO_ADDR
// end ; end ;
69953: LD_VAR 0 4
69957: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69958: LD_INT 0
69960: PPUSH
69961: PPUSH
69962: PPUSH
69963: PPUSH
// if not unit or not area then
69964: LD_VAR 0 1
69968: NOT
69969: PUSH
69970: LD_VAR 0 2
69974: NOT
69975: OR
69976: IFFALSE 69980
// exit ;
69978: GO 70156
// tmp := AreaToList ( area , i ) ;
69980: LD_ADDR_VAR 0 6
69984: PUSH
69985: LD_VAR 0 2
69989: PPUSH
69990: LD_VAR 0 5
69994: PPUSH
69995: CALL_OW 517
69999: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70000: LD_ADDR_VAR 0 5
70004: PUSH
70005: DOUBLE
70006: LD_INT 1
70008: DEC
70009: ST_TO_ADDR
70010: LD_VAR 0 6
70014: PUSH
70015: LD_INT 1
70017: ARRAY
70018: PUSH
70019: FOR_TO
70020: IFFALSE 70154
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70022: LD_ADDR_VAR 0 7
70026: PUSH
70027: LD_VAR 0 6
70031: PUSH
70032: LD_INT 1
70034: ARRAY
70035: PUSH
70036: LD_VAR 0 5
70040: ARRAY
70041: PUSH
70042: LD_VAR 0 6
70046: PUSH
70047: LD_INT 2
70049: ARRAY
70050: PUSH
70051: LD_VAR 0 5
70055: ARRAY
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70061: LD_INT 92
70063: PUSH
70064: LD_VAR 0 7
70068: PUSH
70069: LD_INT 1
70071: ARRAY
70072: PUSH
70073: LD_VAR 0 7
70077: PUSH
70078: LD_INT 2
70080: ARRAY
70081: PUSH
70082: LD_INT 2
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: PPUSH
70091: CALL_OW 69
70095: PUSH
70096: LD_INT 0
70098: EQUAL
70099: IFFALSE 70152
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70101: LD_VAR 0 1
70105: PPUSH
70106: LD_VAR 0 7
70110: PUSH
70111: LD_INT 1
70113: ARRAY
70114: PPUSH
70115: LD_VAR 0 7
70119: PUSH
70120: LD_INT 2
70122: ARRAY
70123: PPUSH
70124: LD_VAR 0 3
70128: PPUSH
70129: CALL_OW 48
// result := IsPlaced ( unit ) ;
70133: LD_ADDR_VAR 0 4
70137: PUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: CALL_OW 305
70147: ST_TO_ADDR
// exit ;
70148: POP
70149: POP
70150: GO 70156
// end ; end ;
70152: GO 70019
70154: POP
70155: POP
// end ;
70156: LD_VAR 0 4
70160: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
70165: PPUSH
// if not side or side > 8 then
70166: LD_VAR 0 1
70170: NOT
70171: PUSH
70172: LD_VAR 0 1
70176: PUSH
70177: LD_INT 8
70179: GREATER
70180: OR
70181: IFFALSE 70185
// exit ;
70183: GO 70372
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70185: LD_ADDR_VAR 0 4
70189: PUSH
70190: LD_INT 22
70192: PUSH
70193: LD_VAR 0 1
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 21
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PPUSH
70216: CALL_OW 69
70220: ST_TO_ADDR
// if not tmp then
70221: LD_VAR 0 4
70225: NOT
70226: IFFALSE 70230
// exit ;
70228: GO 70372
// enable_addtolog := true ;
70230: LD_ADDR_OWVAR 81
70234: PUSH
70235: LD_INT 1
70237: ST_TO_ADDR
// AddToLog ( [ ) ;
70238: LD_STRING [
70240: PPUSH
70241: CALL_OW 561
// for i in tmp do
70245: LD_ADDR_VAR 0 3
70249: PUSH
70250: LD_VAR 0 4
70254: PUSH
70255: FOR_IN
70256: IFFALSE 70363
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70258: LD_STRING [
70260: PUSH
70261: LD_VAR 0 3
70265: PPUSH
70266: CALL_OW 266
70270: STR
70271: PUSH
70272: LD_STRING , 
70274: STR
70275: PUSH
70276: LD_VAR 0 3
70280: PPUSH
70281: CALL_OW 250
70285: STR
70286: PUSH
70287: LD_STRING , 
70289: STR
70290: PUSH
70291: LD_VAR 0 3
70295: PPUSH
70296: CALL_OW 251
70300: STR
70301: PUSH
70302: LD_STRING , 
70304: STR
70305: PUSH
70306: LD_VAR 0 3
70310: PPUSH
70311: CALL_OW 254
70315: STR
70316: PUSH
70317: LD_STRING , 
70319: STR
70320: PUSH
70321: LD_VAR 0 3
70325: PPUSH
70326: LD_INT 1
70328: PPUSH
70329: CALL_OW 268
70333: STR
70334: PUSH
70335: LD_STRING , 
70337: STR
70338: PUSH
70339: LD_VAR 0 3
70343: PPUSH
70344: LD_INT 2
70346: PPUSH
70347: CALL_OW 268
70351: STR
70352: PUSH
70353: LD_STRING ],
70355: STR
70356: PPUSH
70357: CALL_OW 561
// end ;
70361: GO 70255
70363: POP
70364: POP
// AddToLog ( ]; ) ;
70365: LD_STRING ];
70367: PPUSH
70368: CALL_OW 561
// end ;
70372: LD_VAR 0 2
70376: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70377: LD_INT 0
70379: PPUSH
70380: PPUSH
70381: PPUSH
70382: PPUSH
70383: PPUSH
// if not area or not rate or not max then
70384: LD_VAR 0 1
70388: NOT
70389: PUSH
70390: LD_VAR 0 2
70394: NOT
70395: OR
70396: PUSH
70397: LD_VAR 0 4
70401: NOT
70402: OR
70403: IFFALSE 70407
// exit ;
70405: GO 70596
// while 1 do
70407: LD_INT 1
70409: IFFALSE 70596
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70411: LD_ADDR_VAR 0 9
70415: PUSH
70416: LD_VAR 0 1
70420: PPUSH
70421: LD_INT 1
70423: PPUSH
70424: CALL_OW 287
70428: PUSH
70429: LD_INT 10
70431: MUL
70432: ST_TO_ADDR
// r := rate / 10 ;
70433: LD_ADDR_VAR 0 7
70437: PUSH
70438: LD_VAR 0 2
70442: PUSH
70443: LD_INT 10
70445: DIVREAL
70446: ST_TO_ADDR
// time := 1 1$00 ;
70447: LD_ADDR_VAR 0 8
70451: PUSH
70452: LD_INT 2100
70454: ST_TO_ADDR
// if amount < min then
70455: LD_VAR 0 9
70459: PUSH
70460: LD_VAR 0 3
70464: LESS
70465: IFFALSE 70483
// r := r * 2 else
70467: LD_ADDR_VAR 0 7
70471: PUSH
70472: LD_VAR 0 7
70476: PUSH
70477: LD_INT 2
70479: MUL
70480: ST_TO_ADDR
70481: GO 70509
// if amount > max then
70483: LD_VAR 0 9
70487: PUSH
70488: LD_VAR 0 4
70492: GREATER
70493: IFFALSE 70509
// r := r / 2 ;
70495: LD_ADDR_VAR 0 7
70499: PUSH
70500: LD_VAR 0 7
70504: PUSH
70505: LD_INT 2
70507: DIVREAL
70508: ST_TO_ADDR
// time := time / r ;
70509: LD_ADDR_VAR 0 8
70513: PUSH
70514: LD_VAR 0 8
70518: PUSH
70519: LD_VAR 0 7
70523: DIVREAL
70524: ST_TO_ADDR
// if time < 0 then
70525: LD_VAR 0 8
70529: PUSH
70530: LD_INT 0
70532: LESS
70533: IFFALSE 70550
// time := time * - 1 ;
70535: LD_ADDR_VAR 0 8
70539: PUSH
70540: LD_VAR 0 8
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: MUL
70549: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70550: LD_VAR 0 8
70554: PUSH
70555: LD_INT 35
70557: PPUSH
70558: LD_INT 875
70560: PPUSH
70561: CALL_OW 12
70565: PLUS
70566: PPUSH
70567: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70571: LD_INT 1
70573: PPUSH
70574: LD_INT 5
70576: PPUSH
70577: CALL_OW 12
70581: PPUSH
70582: LD_VAR 0 1
70586: PPUSH
70587: LD_INT 1
70589: PPUSH
70590: CALL_OW 55
// end ;
70594: GO 70407
// end ;
70596: LD_VAR 0 5
70600: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70601: LD_INT 0
70603: PPUSH
70604: PPUSH
70605: PPUSH
70606: PPUSH
70607: PPUSH
70608: PPUSH
70609: PPUSH
70610: PPUSH
// if not turrets or not factories then
70611: LD_VAR 0 1
70615: NOT
70616: PUSH
70617: LD_VAR 0 2
70621: NOT
70622: OR
70623: IFFALSE 70627
// exit ;
70625: GO 70934
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70627: LD_ADDR_VAR 0 10
70631: PUSH
70632: LD_INT 5
70634: PUSH
70635: LD_INT 6
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 2
70644: PUSH
70645: LD_INT 4
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 3
70654: PUSH
70655: LD_INT 5
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 24
70669: PUSH
70670: LD_INT 25
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 23
70679: PUSH
70680: LD_INT 27
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 42
70693: PUSH
70694: LD_INT 43
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 44
70703: PUSH
70704: LD_INT 46
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 45
70713: PUSH
70714: LD_INT 47
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: ST_TO_ADDR
// result := [ ] ;
70731: LD_ADDR_VAR 0 3
70735: PUSH
70736: EMPTY
70737: ST_TO_ADDR
// for i in turrets do
70738: LD_ADDR_VAR 0 4
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: FOR_IN
70749: IFFALSE 70932
// begin nat := GetNation ( i ) ;
70751: LD_ADDR_VAR 0 7
70755: PUSH
70756: LD_VAR 0 4
70760: PPUSH
70761: CALL_OW 248
70765: ST_TO_ADDR
// weapon := 0 ;
70766: LD_ADDR_VAR 0 8
70770: PUSH
70771: LD_INT 0
70773: ST_TO_ADDR
// if not nat then
70774: LD_VAR 0 7
70778: NOT
70779: IFFALSE 70783
// continue ;
70781: GO 70748
// for j in list [ nat ] do
70783: LD_ADDR_VAR 0 5
70787: PUSH
70788: LD_VAR 0 10
70792: PUSH
70793: LD_VAR 0 7
70797: ARRAY
70798: PUSH
70799: FOR_IN
70800: IFFALSE 70841
// if GetBWeapon ( i ) = j [ 1 ] then
70802: LD_VAR 0 4
70806: PPUSH
70807: CALL_OW 269
70811: PUSH
70812: LD_VAR 0 5
70816: PUSH
70817: LD_INT 1
70819: ARRAY
70820: EQUAL
70821: IFFALSE 70839
// begin weapon := j [ 2 ] ;
70823: LD_ADDR_VAR 0 8
70827: PUSH
70828: LD_VAR 0 5
70832: PUSH
70833: LD_INT 2
70835: ARRAY
70836: ST_TO_ADDR
// break ;
70837: GO 70841
// end ;
70839: GO 70799
70841: POP
70842: POP
// if not weapon then
70843: LD_VAR 0 8
70847: NOT
70848: IFFALSE 70852
// continue ;
70850: GO 70748
// for k in factories do
70852: LD_ADDR_VAR 0 6
70856: PUSH
70857: LD_VAR 0 2
70861: PUSH
70862: FOR_IN
70863: IFFALSE 70928
// begin weapons := AvailableWeaponList ( k ) ;
70865: LD_ADDR_VAR 0 9
70869: PUSH
70870: LD_VAR 0 6
70874: PPUSH
70875: CALL_OW 478
70879: ST_TO_ADDR
// if not weapons then
70880: LD_VAR 0 9
70884: NOT
70885: IFFALSE 70889
// continue ;
70887: GO 70862
// if weapon in weapons then
70889: LD_VAR 0 8
70893: PUSH
70894: LD_VAR 0 9
70898: IN
70899: IFFALSE 70926
// begin result := [ i , weapon ] ;
70901: LD_ADDR_VAR 0 3
70905: PUSH
70906: LD_VAR 0 4
70910: PUSH
70911: LD_VAR 0 8
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: ST_TO_ADDR
// exit ;
70920: POP
70921: POP
70922: POP
70923: POP
70924: GO 70934
// end ; end ;
70926: GO 70862
70928: POP
70929: POP
// end ;
70930: GO 70748
70932: POP
70933: POP
// end ;
70934: LD_VAR 0 3
70938: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70939: LD_INT 0
70941: PPUSH
// if not side or side > 8 then
70942: LD_VAR 0 3
70946: NOT
70947: PUSH
70948: LD_VAR 0 3
70952: PUSH
70953: LD_INT 8
70955: GREATER
70956: OR
70957: IFFALSE 70961
// exit ;
70959: GO 71020
// if not range then
70961: LD_VAR 0 4
70965: NOT
70966: IFFALSE 70977
// range := - 12 ;
70968: LD_ADDR_VAR 0 4
70972: PUSH
70973: LD_INT 12
70975: NEG
70976: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70977: LD_VAR 0 1
70981: PPUSH
70982: LD_VAR 0 2
70986: PPUSH
70987: LD_VAR 0 3
70991: PPUSH
70992: LD_VAR 0 4
70996: PPUSH
70997: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_VAR 0 2
71010: PPUSH
71011: LD_VAR 0 3
71015: PPUSH
71016: CALL_OW 331
// end ;
71020: LD_VAR 0 5
71024: RET
// export function Video ( mode ) ; begin
71025: LD_INT 0
71027: PPUSH
// ingame_video = mode ;
71028: LD_ADDR_OWVAR 52
71032: PUSH
71033: LD_VAR 0 1
71037: ST_TO_ADDR
// interface_hidden = mode ;
71038: LD_ADDR_OWVAR 54
71042: PUSH
71043: LD_VAR 0 1
71047: ST_TO_ADDR
// end ;
71048: LD_VAR 0 2
71052: RET
// export function Join ( array , element ) ; begin
71053: LD_INT 0
71055: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71056: LD_ADDR_VAR 0 3
71060: PUSH
71061: LD_VAR 0 1
71065: PPUSH
71066: LD_VAR 0 1
71070: PUSH
71071: LD_INT 1
71073: PLUS
71074: PPUSH
71075: LD_VAR 0 2
71079: PPUSH
71080: CALL_OW 1
71084: ST_TO_ADDR
// end ;
71085: LD_VAR 0 3
71089: RET
// export function JoinUnion ( array , element ) ; begin
71090: LD_INT 0
71092: PPUSH
// result := array union element ;
71093: LD_ADDR_VAR 0 3
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_VAR 0 2
71107: UNION
71108: ST_TO_ADDR
// end ;
71109: LD_VAR 0 3
71113: RET
// export function GetBehemoths ( side ) ; begin
71114: LD_INT 0
71116: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71117: LD_ADDR_VAR 0 2
71121: PUSH
71122: LD_INT 22
71124: PUSH
71125: LD_VAR 0 1
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 31
71136: PUSH
71137: LD_INT 25
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PPUSH
71148: CALL_OW 69
71152: ST_TO_ADDR
// end ;
71153: LD_VAR 0 2
71157: RET
// export function Shuffle ( array ) ; var i , index ; begin
71158: LD_INT 0
71160: PPUSH
71161: PPUSH
71162: PPUSH
// result := [ ] ;
71163: LD_ADDR_VAR 0 2
71167: PUSH
71168: EMPTY
71169: ST_TO_ADDR
// if not array then
71170: LD_VAR 0 1
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71278
// Randomize ;
71179: CALL_OW 10
// for i = array downto 1 do
71183: LD_ADDR_VAR 0 3
71187: PUSH
71188: DOUBLE
71189: LD_VAR 0 1
71193: INC
71194: ST_TO_ADDR
71195: LD_INT 1
71197: PUSH
71198: FOR_DOWNTO
71199: IFFALSE 71276
// begin index := rand ( 1 , array ) ;
71201: LD_ADDR_VAR 0 4
71205: PUSH
71206: LD_INT 1
71208: PPUSH
71209: LD_VAR 0 1
71213: PPUSH
71214: CALL_OW 12
71218: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71219: LD_ADDR_VAR 0 2
71223: PUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_VAR 0 2
71233: PUSH
71234: LD_INT 1
71236: PLUS
71237: PPUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_VAR 0 4
71247: ARRAY
71248: PPUSH
71249: CALL_OW 2
71253: ST_TO_ADDR
// array := Delete ( array , index ) ;
71254: LD_ADDR_VAR 0 1
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: LD_VAR 0 4
71268: PPUSH
71269: CALL_OW 3
71273: ST_TO_ADDR
// end ;
71274: GO 71198
71276: POP
71277: POP
// end ;
71278: LD_VAR 0 2
71282: RET
// export function GetBaseMaterials ( base ) ; begin
71283: LD_INT 0
71285: PPUSH
// result := [ 0 , 0 , 0 ] ;
71286: LD_ADDR_VAR 0 2
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: ST_TO_ADDR
// if not base then
71305: LD_VAR 0 1
71309: NOT
71310: IFFALSE 71314
// exit ;
71312: GO 71363
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71314: LD_ADDR_VAR 0 2
71318: PUSH
71319: LD_VAR 0 1
71323: PPUSH
71324: LD_INT 1
71326: PPUSH
71327: CALL_OW 275
71331: PUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: LD_INT 2
71339: PPUSH
71340: CALL_OW 275
71344: PUSH
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_INT 3
71352: PPUSH
71353: CALL_OW 275
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: ST_TO_ADDR
// end ;
71363: LD_VAR 0 2
71367: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71368: LD_INT 0
71370: PPUSH
71371: PPUSH
// result := array ;
71372: LD_ADDR_VAR 0 3
71376: PUSH
71377: LD_VAR 0 1
71381: ST_TO_ADDR
// if size >= result then
71382: LD_VAR 0 2
71386: PUSH
71387: LD_VAR 0 3
71391: GREATEREQUAL
71392: IFFALSE 71396
// exit ;
71394: GO 71446
// if size then
71396: LD_VAR 0 2
71400: IFFALSE 71446
// for i := array downto size do
71402: LD_ADDR_VAR 0 4
71406: PUSH
71407: DOUBLE
71408: LD_VAR 0 1
71412: INC
71413: ST_TO_ADDR
71414: LD_VAR 0 2
71418: PUSH
71419: FOR_DOWNTO
71420: IFFALSE 71444
// result := Delete ( result , result ) ;
71422: LD_ADDR_VAR 0 3
71426: PUSH
71427: LD_VAR 0 3
71431: PPUSH
71432: LD_VAR 0 3
71436: PPUSH
71437: CALL_OW 3
71441: ST_TO_ADDR
71442: GO 71419
71444: POP
71445: POP
// end ;
71446: LD_VAR 0 3
71450: RET
// export function ComExit ( unit ) ; var tmp ; begin
71451: LD_INT 0
71453: PPUSH
71454: PPUSH
// if not IsInUnit ( unit ) then
71455: LD_VAR 0 1
71459: PPUSH
71460: CALL_OW 310
71464: NOT
71465: IFFALSE 71469
// exit ;
71467: GO 71529
// tmp := IsInUnit ( unit ) ;
71469: LD_ADDR_VAR 0 3
71473: PUSH
71474: LD_VAR 0 1
71478: PPUSH
71479: CALL_OW 310
71483: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71484: LD_VAR 0 3
71488: PPUSH
71489: CALL_OW 247
71493: PUSH
71494: LD_INT 2
71496: EQUAL
71497: IFFALSE 71510
// ComExitVehicle ( unit ) else
71499: LD_VAR 0 1
71503: PPUSH
71504: CALL_OW 121
71508: GO 71519
// ComExitBuilding ( unit ) ;
71510: LD_VAR 0 1
71514: PPUSH
71515: CALL_OW 122
// result := tmp ;
71519: LD_ADDR_VAR 0 2
71523: PUSH
71524: LD_VAR 0 3
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 2
71533: RET
// export function ComExitAll ( units ) ; var i ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
// if not units then
71538: LD_VAR 0 1
71542: NOT
71543: IFFALSE 71547
// exit ;
71545: GO 71573
// for i in units do
71547: LD_ADDR_VAR 0 3
71551: PUSH
71552: LD_VAR 0 1
71556: PUSH
71557: FOR_IN
71558: IFFALSE 71571
// ComExit ( i ) ;
71560: LD_VAR 0 3
71564: PPUSH
71565: CALL 71451 0 1
71569: GO 71557
71571: POP
71572: POP
// end ;
71573: LD_VAR 0 2
71577: RET
// export function ResetHc ; begin
71578: LD_INT 0
71580: PPUSH
// InitHc ;
71581: CALL_OW 19
// hc_importance := 0 ;
71585: LD_ADDR_OWVAR 32
71589: PUSH
71590: LD_INT 0
71592: ST_TO_ADDR
// end ;
71593: LD_VAR 0 1
71597: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
71602: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71603: LD_ADDR_VAR 0 6
71607: PUSH
71608: LD_VAR 0 1
71612: PUSH
71613: LD_VAR 0 3
71617: PLUS
71618: PUSH
71619: LD_INT 2
71621: DIV
71622: ST_TO_ADDR
// if _x < 0 then
71623: LD_VAR 0 6
71627: PUSH
71628: LD_INT 0
71630: LESS
71631: IFFALSE 71648
// _x := _x * - 1 ;
71633: LD_ADDR_VAR 0 6
71637: PUSH
71638: LD_VAR 0 6
71642: PUSH
71643: LD_INT 1
71645: NEG
71646: MUL
71647: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71648: LD_ADDR_VAR 0 7
71652: PUSH
71653: LD_VAR 0 2
71657: PUSH
71658: LD_VAR 0 4
71662: PLUS
71663: PUSH
71664: LD_INT 2
71666: DIV
71667: ST_TO_ADDR
// if _y < 0 then
71668: LD_VAR 0 7
71672: PUSH
71673: LD_INT 0
71675: LESS
71676: IFFALSE 71693
// _y := _y * - 1 ;
71678: LD_ADDR_VAR 0 7
71682: PUSH
71683: LD_VAR 0 7
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: MUL
71692: ST_TO_ADDR
// result := [ _x , _y ] ;
71693: LD_ADDR_VAR 0 5
71697: PUSH
71698: LD_VAR 0 6
71702: PUSH
71703: LD_VAR 0 7
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: ST_TO_ADDR
// end ;
71712: LD_VAR 0 5
71716: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71717: LD_INT 0
71719: PPUSH
71720: PPUSH
71721: PPUSH
71722: PPUSH
// task := GetTaskList ( unit ) ;
71723: LD_ADDR_VAR 0 7
71727: PUSH
71728: LD_VAR 0 1
71732: PPUSH
71733: CALL_OW 437
71737: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71738: LD_VAR 0 7
71742: NOT
71743: PUSH
71744: LD_VAR 0 1
71748: PPUSH
71749: LD_VAR 0 2
71753: PPUSH
71754: CALL_OW 308
71758: NOT
71759: AND
71760: IFFALSE 71764
// exit ;
71762: GO 71882
// if IsInArea ( unit , area ) then
71764: LD_VAR 0 1
71768: PPUSH
71769: LD_VAR 0 2
71773: PPUSH
71774: CALL_OW 308
71778: IFFALSE 71796
// begin ComMoveToArea ( unit , goAway ) ;
71780: LD_VAR 0 1
71784: PPUSH
71785: LD_VAR 0 3
71789: PPUSH
71790: CALL_OW 113
// exit ;
71794: GO 71882
// end ; if task [ 1 ] [ 1 ] <> M then
71796: LD_VAR 0 7
71800: PUSH
71801: LD_INT 1
71803: ARRAY
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: PUSH
71809: LD_STRING M
71811: NONEQUAL
71812: IFFALSE 71816
// exit ;
71814: GO 71882
// x := task [ 1 ] [ 2 ] ;
71816: LD_ADDR_VAR 0 5
71820: PUSH
71821: LD_VAR 0 7
71825: PUSH
71826: LD_INT 1
71828: ARRAY
71829: PUSH
71830: LD_INT 2
71832: ARRAY
71833: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71834: LD_ADDR_VAR 0 6
71838: PUSH
71839: LD_VAR 0 7
71843: PUSH
71844: LD_INT 1
71846: ARRAY
71847: PUSH
71848: LD_INT 3
71850: ARRAY
71851: ST_TO_ADDR
// if InArea ( x , y , area ) then
71852: LD_VAR 0 5
71856: PPUSH
71857: LD_VAR 0 6
71861: PPUSH
71862: LD_VAR 0 2
71866: PPUSH
71867: CALL_OW 309
71871: IFFALSE 71882
// ComStop ( unit ) ;
71873: LD_VAR 0 1
71877: PPUSH
71878: CALL_OW 141
// end ;
71882: LD_VAR 0 4
71886: RET
// export function Abs ( value ) ; begin
71887: LD_INT 0
71889: PPUSH
// result := value ;
71890: LD_ADDR_VAR 0 2
71894: PUSH
71895: LD_VAR 0 1
71899: ST_TO_ADDR
// if value < 0 then
71900: LD_VAR 0 1
71904: PUSH
71905: LD_INT 0
71907: LESS
71908: IFFALSE 71925
// result := value * - 1 ;
71910: LD_ADDR_VAR 0 2
71914: PUSH
71915: LD_VAR 0 1
71919: PUSH
71920: LD_INT 1
71922: NEG
71923: MUL
71924: ST_TO_ADDR
// end ;
71925: LD_VAR 0 2
71929: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71930: LD_INT 0
71932: PPUSH
71933: PPUSH
71934: PPUSH
71935: PPUSH
71936: PPUSH
71937: PPUSH
71938: PPUSH
71939: PPUSH
// if not unit or not building then
71940: LD_VAR 0 1
71944: NOT
71945: PUSH
71946: LD_VAR 0 2
71950: NOT
71951: OR
71952: IFFALSE 71956
// exit ;
71954: GO 72182
// x := GetX ( building ) ;
71956: LD_ADDR_VAR 0 4
71960: PUSH
71961: LD_VAR 0 2
71965: PPUSH
71966: CALL_OW 250
71970: ST_TO_ADDR
// y := GetY ( building ) ;
71971: LD_ADDR_VAR 0 6
71975: PUSH
71976: LD_VAR 0 2
71980: PPUSH
71981: CALL_OW 251
71985: ST_TO_ADDR
// d := GetDir ( building ) ;
71986: LD_ADDR_VAR 0 8
71990: PUSH
71991: LD_VAR 0 2
71995: PPUSH
71996: CALL_OW 254
72000: ST_TO_ADDR
// r := 4 ;
72001: LD_ADDR_VAR 0 9
72005: PUSH
72006: LD_INT 4
72008: ST_TO_ADDR
// for i := 1 to 5 do
72009: LD_ADDR_VAR 0 10
72013: PUSH
72014: DOUBLE
72015: LD_INT 1
72017: DEC
72018: ST_TO_ADDR
72019: LD_INT 5
72021: PUSH
72022: FOR_TO
72023: IFFALSE 72180
// begin _x := ShiftX ( x , d , r + i ) ;
72025: LD_ADDR_VAR 0 5
72029: PUSH
72030: LD_VAR 0 4
72034: PPUSH
72035: LD_VAR 0 8
72039: PPUSH
72040: LD_VAR 0 9
72044: PUSH
72045: LD_VAR 0 10
72049: PLUS
72050: PPUSH
72051: CALL_OW 272
72055: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72056: LD_ADDR_VAR 0 7
72060: PUSH
72061: LD_VAR 0 6
72065: PPUSH
72066: LD_VAR 0 8
72070: PPUSH
72071: LD_VAR 0 9
72075: PUSH
72076: LD_VAR 0 10
72080: PLUS
72081: PPUSH
72082: CALL_OW 273
72086: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72087: LD_VAR 0 5
72091: PPUSH
72092: LD_VAR 0 7
72096: PPUSH
72097: CALL_OW 488
72101: PUSH
72102: LD_VAR 0 5
72106: PPUSH
72107: LD_VAR 0 7
72111: PPUSH
72112: CALL_OW 428
72116: PPUSH
72117: CALL_OW 247
72121: PUSH
72122: LD_INT 3
72124: PUSH
72125: LD_INT 2
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: IN
72132: NOT
72133: AND
72134: IFFALSE 72178
// begin ComMoveXY ( unit , _x , _y ) ;
72136: LD_VAR 0 1
72140: PPUSH
72141: LD_VAR 0 5
72145: PPUSH
72146: LD_VAR 0 7
72150: PPUSH
72151: CALL_OW 111
// result := [ _x , _y ] ;
72155: LD_ADDR_VAR 0 3
72159: PUSH
72160: LD_VAR 0 5
72164: PUSH
72165: LD_VAR 0 7
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: ST_TO_ADDR
// exit ;
72174: POP
72175: POP
72176: GO 72182
// end ; end ;
72178: GO 72022
72180: POP
72181: POP
// end ;
72182: LD_VAR 0 3
72186: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72187: LD_INT 0
72189: PPUSH
72190: PPUSH
72191: PPUSH
// result := 0 ;
72192: LD_ADDR_VAR 0 3
72196: PUSH
72197: LD_INT 0
72199: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72200: LD_VAR 0 1
72204: PUSH
72205: LD_INT 0
72207: LESS
72208: PUSH
72209: LD_VAR 0 1
72213: PUSH
72214: LD_INT 8
72216: GREATER
72217: OR
72218: PUSH
72219: LD_VAR 0 2
72223: PUSH
72224: LD_INT 0
72226: LESS
72227: OR
72228: PUSH
72229: LD_VAR 0 2
72233: PUSH
72234: LD_INT 8
72236: GREATER
72237: OR
72238: IFFALSE 72242
// exit ;
72240: GO 72317
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72242: LD_ADDR_VAR 0 4
72246: PUSH
72247: LD_INT 22
72249: PUSH
72250: LD_VAR 0 2
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PPUSH
72259: CALL_OW 69
72263: PUSH
72264: FOR_IN
72265: IFFALSE 72315
// begin un := UnitShoot ( i ) ;
72267: LD_ADDR_VAR 0 5
72271: PUSH
72272: LD_VAR 0 4
72276: PPUSH
72277: CALL_OW 504
72281: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72282: LD_VAR 0 5
72286: PPUSH
72287: CALL_OW 255
72291: PUSH
72292: LD_VAR 0 1
72296: EQUAL
72297: IFFALSE 72313
// begin result := un ;
72299: LD_ADDR_VAR 0 3
72303: PUSH
72304: LD_VAR 0 5
72308: ST_TO_ADDR
// exit ;
72309: POP
72310: POP
72311: GO 72317
// end ; end ;
72313: GO 72264
72315: POP
72316: POP
// end ;
72317: LD_VAR 0 3
72321: RET
// export function GetCargoBay ( units ) ; begin
72322: LD_INT 0
72324: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72325: LD_ADDR_VAR 0 2
72329: PUSH
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 34
72340: PUSH
72341: LD_INT 12
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 34
72350: PUSH
72351: LD_INT 51
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 34
72360: PUSH
72361: LD_INT 32
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 34
72370: PUSH
72371: LD_INT 89
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: PPUSH
72385: CALL_OW 72
72389: ST_TO_ADDR
// end ;
72390: LD_VAR 0 2
72394: RET
// export function Negate ( value ) ; begin
72395: LD_INT 0
72397: PPUSH
// result := not value ;
72398: LD_ADDR_VAR 0 2
72402: PUSH
72403: LD_VAR 0 1
72407: NOT
72408: ST_TO_ADDR
// end ;
72409: LD_VAR 0 2
72413: RET
// export function Inc ( value ) ; begin
72414: LD_INT 0
72416: PPUSH
// result := value + 1 ;
72417: LD_ADDR_VAR 0 2
72421: PUSH
72422: LD_VAR 0 1
72426: PUSH
72427: LD_INT 1
72429: PLUS
72430: ST_TO_ADDR
// end ;
72431: LD_VAR 0 2
72435: RET
// export function Dec ( value ) ; begin
72436: LD_INT 0
72438: PPUSH
// result := value - 1 ;
72439: LD_ADDR_VAR 0 2
72443: PUSH
72444: LD_VAR 0 1
72448: PUSH
72449: LD_INT 1
72451: MINUS
72452: ST_TO_ADDR
// end ;
72453: LD_VAR 0 2
72457: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72458: LD_INT 0
72460: PPUSH
72461: PPUSH
72462: PPUSH
72463: PPUSH
72464: PPUSH
72465: PPUSH
72466: PPUSH
72467: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72468: LD_VAR 0 1
72472: PPUSH
72473: LD_VAR 0 2
72477: PPUSH
72478: CALL_OW 488
72482: NOT
72483: PUSH
72484: LD_VAR 0 3
72488: PPUSH
72489: LD_VAR 0 4
72493: PPUSH
72494: CALL_OW 488
72498: NOT
72499: OR
72500: IFFALSE 72513
// begin result := - 1 ;
72502: LD_ADDR_VAR 0 5
72506: PUSH
72507: LD_INT 1
72509: NEG
72510: ST_TO_ADDR
// exit ;
72511: GO 72748
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72513: LD_ADDR_VAR 0 12
72517: PUSH
72518: LD_VAR 0 1
72522: PPUSH
72523: LD_VAR 0 2
72527: PPUSH
72528: LD_VAR 0 3
72532: PPUSH
72533: LD_VAR 0 4
72537: PPUSH
72538: CALL 71598 0 4
72542: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72543: LD_ADDR_VAR 0 11
72547: PUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_VAR 0 2
72557: PPUSH
72558: LD_VAR 0 12
72562: PUSH
72563: LD_INT 1
72565: ARRAY
72566: PPUSH
72567: LD_VAR 0 12
72571: PUSH
72572: LD_INT 2
72574: ARRAY
72575: PPUSH
72576: CALL_OW 298
72580: ST_TO_ADDR
// distance := 9999 ;
72581: LD_ADDR_VAR 0 10
72585: PUSH
72586: LD_INT 9999
72588: ST_TO_ADDR
// for i := 0 to 5 do
72589: LD_ADDR_VAR 0 6
72593: PUSH
72594: DOUBLE
72595: LD_INT 0
72597: DEC
72598: ST_TO_ADDR
72599: LD_INT 5
72601: PUSH
72602: FOR_TO
72603: IFFALSE 72746
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72605: LD_ADDR_VAR 0 7
72609: PUSH
72610: LD_VAR 0 1
72614: PPUSH
72615: LD_VAR 0 6
72619: PPUSH
72620: LD_VAR 0 11
72624: PPUSH
72625: CALL_OW 272
72629: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72630: LD_ADDR_VAR 0 8
72634: PUSH
72635: LD_VAR 0 2
72639: PPUSH
72640: LD_VAR 0 6
72644: PPUSH
72645: LD_VAR 0 11
72649: PPUSH
72650: CALL_OW 273
72654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72655: LD_VAR 0 7
72659: PPUSH
72660: LD_VAR 0 8
72664: PPUSH
72665: CALL_OW 488
72669: NOT
72670: IFFALSE 72674
// continue ;
72672: GO 72602
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72674: LD_ADDR_VAR 0 9
72678: PUSH
72679: LD_VAR 0 12
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PPUSH
72688: LD_VAR 0 12
72692: PUSH
72693: LD_INT 2
72695: ARRAY
72696: PPUSH
72697: LD_VAR 0 7
72701: PPUSH
72702: LD_VAR 0 8
72706: PPUSH
72707: CALL_OW 298
72711: ST_TO_ADDR
// if tmp < distance then
72712: LD_VAR 0 9
72716: PUSH
72717: LD_VAR 0 10
72721: LESS
72722: IFFALSE 72744
// begin result := i ;
72724: LD_ADDR_VAR 0 5
72728: PUSH
72729: LD_VAR 0 6
72733: ST_TO_ADDR
// distance := tmp ;
72734: LD_ADDR_VAR 0 10
72738: PUSH
72739: LD_VAR 0 9
72743: ST_TO_ADDR
// end ; end ;
72744: GO 72602
72746: POP
72747: POP
// end ;
72748: LD_VAR 0 5
72752: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72753: LD_INT 0
72755: PPUSH
72756: PPUSH
// if not driver or not IsInUnit ( driver ) then
72757: LD_VAR 0 1
72761: NOT
72762: PUSH
72763: LD_VAR 0 1
72767: PPUSH
72768: CALL_OW 310
72772: NOT
72773: OR
72774: IFFALSE 72778
// exit ;
72776: GO 72868
// vehicle := IsInUnit ( driver ) ;
72778: LD_ADDR_VAR 0 3
72782: PUSH
72783: LD_VAR 0 1
72787: PPUSH
72788: CALL_OW 310
72792: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72793: LD_VAR 0 1
72797: PPUSH
72798: LD_STRING \
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: LD_INT 0
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: LD_INT 0
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: PUSH
72828: LD_STRING E
72830: PUSH
72831: LD_INT 0
72833: PUSH
72834: LD_INT 0
72836: PUSH
72837: LD_VAR 0 3
72841: PUSH
72842: LD_INT 0
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: LD_INT 0
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PPUSH
72864: CALL_OW 446
// end ;
72868: LD_VAR 0 2
72872: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72873: LD_INT 0
72875: PPUSH
72876: PPUSH
// if not driver or not IsInUnit ( driver ) then
72877: LD_VAR 0 1
72881: NOT
72882: PUSH
72883: LD_VAR 0 1
72887: PPUSH
72888: CALL_OW 310
72892: NOT
72893: OR
72894: IFFALSE 72898
// exit ;
72896: GO 72988
// vehicle := IsInUnit ( driver ) ;
72898: LD_ADDR_VAR 0 3
72902: PUSH
72903: LD_VAR 0 1
72907: PPUSH
72908: CALL_OW 310
72912: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72913: LD_VAR 0 1
72917: PPUSH
72918: LD_STRING \
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: LD_INT 0
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: LD_INT 0
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: PUSH
72948: LD_STRING E
72950: PUSH
72951: LD_INT 0
72953: PUSH
72954: LD_INT 0
72956: PUSH
72957: LD_VAR 0 3
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: LD_INT 0
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PPUSH
72984: CALL_OW 447
// end ;
72988: LD_VAR 0 2
72992: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72993: LD_INT 0
72995: PPUSH
72996: PPUSH
72997: PPUSH
// tmp := [ ] ;
72998: LD_ADDR_VAR 0 5
73002: PUSH
73003: EMPTY
73004: ST_TO_ADDR
// for i in units do
73005: LD_ADDR_VAR 0 4
73009: PUSH
73010: LD_VAR 0 1
73014: PUSH
73015: FOR_IN
73016: IFFALSE 73054
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73018: LD_ADDR_VAR 0 5
73022: PUSH
73023: LD_VAR 0 5
73027: PPUSH
73028: LD_VAR 0 5
73032: PUSH
73033: LD_INT 1
73035: PLUS
73036: PPUSH
73037: LD_VAR 0 4
73041: PPUSH
73042: CALL_OW 256
73046: PPUSH
73047: CALL_OW 2
73051: ST_TO_ADDR
73052: GO 73015
73054: POP
73055: POP
// if not tmp then
73056: LD_VAR 0 5
73060: NOT
73061: IFFALSE 73065
// exit ;
73063: GO 73113
// if asc then
73065: LD_VAR 0 2
73069: IFFALSE 73093
// result := SortListByListAsc ( units , tmp ) else
73071: LD_ADDR_VAR 0 3
73075: PUSH
73076: LD_VAR 0 1
73080: PPUSH
73081: LD_VAR 0 5
73085: PPUSH
73086: CALL_OW 76
73090: ST_TO_ADDR
73091: GO 73113
// result := SortListByListDesc ( units , tmp ) ;
73093: LD_ADDR_VAR 0 3
73097: PUSH
73098: LD_VAR 0 1
73102: PPUSH
73103: LD_VAR 0 5
73107: PPUSH
73108: CALL_OW 77
73112: ST_TO_ADDR
// end ;
73113: LD_VAR 0 3
73117: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73118: LD_INT 0
73120: PPUSH
73121: PPUSH
// task := GetTaskList ( mech ) ;
73122: LD_ADDR_VAR 0 4
73126: PUSH
73127: LD_VAR 0 1
73131: PPUSH
73132: CALL_OW 437
73136: ST_TO_ADDR
// if not task then
73137: LD_VAR 0 4
73141: NOT
73142: IFFALSE 73146
// exit ;
73144: GO 73188
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73146: LD_ADDR_VAR 0 3
73150: PUSH
73151: LD_VAR 0 4
73155: PUSH
73156: LD_INT 1
73158: ARRAY
73159: PUSH
73160: LD_INT 1
73162: ARRAY
73163: PUSH
73164: LD_STRING r
73166: EQUAL
73167: PUSH
73168: LD_VAR 0 4
73172: PUSH
73173: LD_INT 1
73175: ARRAY
73176: PUSH
73177: LD_INT 4
73179: ARRAY
73180: PUSH
73181: LD_VAR 0 2
73185: EQUAL
73186: AND
73187: ST_TO_ADDR
// end ;
73188: LD_VAR 0 3
73192: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73193: LD_INT 0
73195: PPUSH
// SetDir ( unit , d ) ;
73196: LD_VAR 0 1
73200: PPUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73210: LD_VAR 0 1
73214: PPUSH
73215: LD_VAR 0 2
73219: PPUSH
73220: LD_VAR 0 3
73224: PPUSH
73225: LD_VAR 0 5
73229: PPUSH
73230: CALL_OW 48
// end ;
73234: LD_VAR 0 6
73238: RET
// export function ToNaturalNumber ( number ) ; begin
73239: LD_INT 0
73241: PPUSH
// result := number div 1 ;
73242: LD_ADDR_VAR 0 2
73246: PUSH
73247: LD_VAR 0 1
73251: PUSH
73252: LD_INT 1
73254: DIV
73255: ST_TO_ADDR
// if number < 0 then
73256: LD_VAR 0 1
73260: PUSH
73261: LD_INT 0
73263: LESS
73264: IFFALSE 73274
// result := 0 ;
73266: LD_ADDR_VAR 0 2
73270: PUSH
73271: LD_INT 0
73273: ST_TO_ADDR
// end ;
73274: LD_VAR 0 2
73278: RET
// export function SortByClass ( units , class ) ; var un ; begin
73279: LD_INT 0
73281: PPUSH
73282: PPUSH
// if not units or not class then
73283: LD_VAR 0 1
73287: NOT
73288: PUSH
73289: LD_VAR 0 2
73293: NOT
73294: OR
73295: IFFALSE 73299
// exit ;
73297: GO 73394
// result := [ ] ;
73299: LD_ADDR_VAR 0 3
73303: PUSH
73304: EMPTY
73305: ST_TO_ADDR
// for un in units do
73306: LD_ADDR_VAR 0 4
73310: PUSH
73311: LD_VAR 0 1
73315: PUSH
73316: FOR_IN
73317: IFFALSE 73392
// if GetClass ( un ) = class then
73319: LD_VAR 0 4
73323: PPUSH
73324: CALL_OW 257
73328: PUSH
73329: LD_VAR 0 2
73333: EQUAL
73334: IFFALSE 73361
// result := Insert ( result , 1 , un ) else
73336: LD_ADDR_VAR 0 3
73340: PUSH
73341: LD_VAR 0 3
73345: PPUSH
73346: LD_INT 1
73348: PPUSH
73349: LD_VAR 0 4
73353: PPUSH
73354: CALL_OW 2
73358: ST_TO_ADDR
73359: GO 73390
// result := Replace ( result , result + 1 , un ) ;
73361: LD_ADDR_VAR 0 3
73365: PUSH
73366: LD_VAR 0 3
73370: PPUSH
73371: LD_VAR 0 3
73375: PUSH
73376: LD_INT 1
73378: PLUS
73379: PPUSH
73380: LD_VAR 0 4
73384: PPUSH
73385: CALL_OW 1
73389: ST_TO_ADDR
73390: GO 73316
73392: POP
73393: POP
// end ;
73394: LD_VAR 0 3
73398: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73399: LD_INT 0
73401: PPUSH
73402: PPUSH
73403: PPUSH
73404: PPUSH
73405: PPUSH
73406: PPUSH
73407: PPUSH
// result := [ ] ;
73408: LD_ADDR_VAR 0 4
73412: PUSH
73413: EMPTY
73414: ST_TO_ADDR
// if x - r < 0 then
73415: LD_VAR 0 1
73419: PUSH
73420: LD_VAR 0 3
73424: MINUS
73425: PUSH
73426: LD_INT 0
73428: LESS
73429: IFFALSE 73441
// min_x := 0 else
73431: LD_ADDR_VAR 0 8
73435: PUSH
73436: LD_INT 0
73438: ST_TO_ADDR
73439: GO 73457
// min_x := x - r ;
73441: LD_ADDR_VAR 0 8
73445: PUSH
73446: LD_VAR 0 1
73450: PUSH
73451: LD_VAR 0 3
73455: MINUS
73456: ST_TO_ADDR
// if y - r < 0 then
73457: LD_VAR 0 2
73461: PUSH
73462: LD_VAR 0 3
73466: MINUS
73467: PUSH
73468: LD_INT 0
73470: LESS
73471: IFFALSE 73483
// min_y := 0 else
73473: LD_ADDR_VAR 0 7
73477: PUSH
73478: LD_INT 0
73480: ST_TO_ADDR
73481: GO 73499
// min_y := y - r ;
73483: LD_ADDR_VAR 0 7
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: LD_VAR 0 3
73497: MINUS
73498: ST_TO_ADDR
// max_x := x + r ;
73499: LD_ADDR_VAR 0 9
73503: PUSH
73504: LD_VAR 0 1
73508: PUSH
73509: LD_VAR 0 3
73513: PLUS
73514: ST_TO_ADDR
// max_y := y + r ;
73515: LD_ADDR_VAR 0 10
73519: PUSH
73520: LD_VAR 0 2
73524: PUSH
73525: LD_VAR 0 3
73529: PLUS
73530: ST_TO_ADDR
// for _x = min_x to max_x do
73531: LD_ADDR_VAR 0 5
73535: PUSH
73536: DOUBLE
73537: LD_VAR 0 8
73541: DEC
73542: ST_TO_ADDR
73543: LD_VAR 0 9
73547: PUSH
73548: FOR_TO
73549: IFFALSE 73650
// for _y = min_y to max_y do
73551: LD_ADDR_VAR 0 6
73555: PUSH
73556: DOUBLE
73557: LD_VAR 0 7
73561: DEC
73562: ST_TO_ADDR
73563: LD_VAR 0 10
73567: PUSH
73568: FOR_TO
73569: IFFALSE 73646
// begin if not ValidHex ( _x , _y ) then
73571: LD_VAR 0 5
73575: PPUSH
73576: LD_VAR 0 6
73580: PPUSH
73581: CALL_OW 488
73585: NOT
73586: IFFALSE 73590
// continue ;
73588: GO 73568
// if GetResourceTypeXY ( _x , _y ) then
73590: LD_VAR 0 5
73594: PPUSH
73595: LD_VAR 0 6
73599: PPUSH
73600: CALL_OW 283
73604: IFFALSE 73644
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73606: LD_ADDR_VAR 0 4
73610: PUSH
73611: LD_VAR 0 4
73615: PPUSH
73616: LD_VAR 0 4
73620: PUSH
73621: LD_INT 1
73623: PLUS
73624: PPUSH
73625: LD_VAR 0 5
73629: PUSH
73630: LD_VAR 0 6
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PPUSH
73639: CALL_OW 1
73643: ST_TO_ADDR
// end ;
73644: GO 73568
73646: POP
73647: POP
73648: GO 73548
73650: POP
73651: POP
// end ;
73652: LD_VAR 0 4
73656: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73657: LD_INT 0
73659: PPUSH
73660: PPUSH
73661: PPUSH
73662: PPUSH
73663: PPUSH
73664: PPUSH
73665: PPUSH
73666: PPUSH
// if not units then
73667: LD_VAR 0 1
73671: NOT
73672: IFFALSE 73676
// exit ;
73674: GO 74200
// result := UnitFilter ( units , [ f_ok ] ) ;
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: LD_VAR 0 1
73685: PPUSH
73686: LD_INT 50
73688: PUSH
73689: EMPTY
73690: LIST
73691: PPUSH
73692: CALL_OW 72
73696: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73697: LD_ADDR_VAR 0 8
73701: PUSH
73702: LD_VAR 0 1
73706: PUSH
73707: LD_INT 1
73709: ARRAY
73710: PPUSH
73711: CALL_OW 255
73715: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73716: LD_ADDR_VAR 0 10
73720: PUSH
73721: LD_INT 29
73723: PUSH
73724: LD_INT 91
73726: PUSH
73727: LD_INT 49
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: ST_TO_ADDR
// if not result then
73735: LD_VAR 0 3
73739: NOT
73740: IFFALSE 73744
// exit ;
73742: GO 74200
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73744: LD_ADDR_VAR 0 5
73748: PUSH
73749: LD_INT 81
73751: PUSH
73752: LD_VAR 0 8
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PPUSH
73761: CALL_OW 69
73765: ST_TO_ADDR
// for i in result do
73766: LD_ADDR_VAR 0 4
73770: PUSH
73771: LD_VAR 0 3
73775: PUSH
73776: FOR_IN
73777: IFFALSE 74198
// begin tag := GetTag ( i ) + 1 ;
73779: LD_ADDR_VAR 0 9
73783: PUSH
73784: LD_VAR 0 4
73788: PPUSH
73789: CALL_OW 110
73793: PUSH
73794: LD_INT 1
73796: PLUS
73797: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73798: LD_ADDR_VAR 0 7
73802: PUSH
73803: LD_VAR 0 4
73807: PPUSH
73808: CALL_OW 250
73812: PPUSH
73813: LD_VAR 0 4
73817: PPUSH
73818: CALL_OW 251
73822: PPUSH
73823: LD_INT 6
73825: PPUSH
73826: CALL 73399 0 3
73830: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73831: LD_VAR 0 4
73835: PPUSH
73836: CALL_OW 247
73840: PUSH
73841: LD_INT 2
73843: EQUAL
73844: PUSH
73845: LD_VAR 0 7
73849: AND
73850: PUSH
73851: LD_VAR 0 4
73855: PPUSH
73856: CALL_OW 264
73860: PUSH
73861: LD_VAR 0 10
73865: IN
73866: NOT
73867: AND
73868: IFFALSE 73907
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73870: LD_VAR 0 4
73874: PPUSH
73875: LD_VAR 0 7
73879: PUSH
73880: LD_INT 1
73882: ARRAY
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: PPUSH
73888: LD_VAR 0 7
73892: PUSH
73893: LD_INT 1
73895: ARRAY
73896: PUSH
73897: LD_INT 2
73899: ARRAY
73900: PPUSH
73901: CALL_OW 116
73905: GO 74196
// if path > tag then
73907: LD_VAR 0 2
73911: PUSH
73912: LD_VAR 0 9
73916: GREATER
73917: IFFALSE 74125
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73919: LD_ADDR_VAR 0 6
73923: PUSH
73924: LD_VAR 0 5
73928: PPUSH
73929: LD_INT 91
73931: PUSH
73932: LD_VAR 0 4
73936: PUSH
73937: LD_INT 8
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: LIST
73944: PPUSH
73945: CALL_OW 72
73949: ST_TO_ADDR
// if nearEnemy then
73950: LD_VAR 0 6
73954: IFFALSE 74023
// begin if GetWeapon ( i ) = ru_time_lapser then
73956: LD_VAR 0 4
73960: PPUSH
73961: CALL_OW 264
73965: PUSH
73966: LD_INT 49
73968: EQUAL
73969: IFFALSE 73997
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73971: LD_VAR 0 4
73975: PPUSH
73976: LD_VAR 0 6
73980: PPUSH
73981: LD_VAR 0 4
73985: PPUSH
73986: CALL_OW 74
73990: PPUSH
73991: CALL_OW 112
73995: GO 74021
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73997: LD_VAR 0 4
74001: PPUSH
74002: LD_VAR 0 6
74006: PPUSH
74007: LD_VAR 0 4
74011: PPUSH
74012: CALL_OW 74
74016: PPUSH
74017: CALL 75125 0 2
// end else
74021: GO 74123
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74023: LD_VAR 0 4
74027: PPUSH
74028: LD_VAR 0 2
74032: PUSH
74033: LD_VAR 0 9
74037: ARRAY
74038: PUSH
74039: LD_INT 1
74041: ARRAY
74042: PPUSH
74043: LD_VAR 0 2
74047: PUSH
74048: LD_VAR 0 9
74052: ARRAY
74053: PUSH
74054: LD_INT 2
74056: ARRAY
74057: PPUSH
74058: CALL_OW 297
74062: PUSH
74063: LD_INT 6
74065: GREATER
74066: IFFALSE 74109
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74068: LD_VAR 0 4
74072: PPUSH
74073: LD_VAR 0 2
74077: PUSH
74078: LD_VAR 0 9
74082: ARRAY
74083: PUSH
74084: LD_INT 1
74086: ARRAY
74087: PPUSH
74088: LD_VAR 0 2
74092: PUSH
74093: LD_VAR 0 9
74097: ARRAY
74098: PUSH
74099: LD_INT 2
74101: ARRAY
74102: PPUSH
74103: CALL_OW 114
74107: GO 74123
// SetTag ( i , tag ) ;
74109: LD_VAR 0 4
74113: PPUSH
74114: LD_VAR 0 9
74118: PPUSH
74119: CALL_OW 109
// end else
74123: GO 74196
// if enemy then
74125: LD_VAR 0 5
74129: IFFALSE 74196
// begin if GetWeapon ( i ) = ru_time_lapser then
74131: LD_VAR 0 4
74135: PPUSH
74136: CALL_OW 264
74140: PUSH
74141: LD_INT 49
74143: EQUAL
74144: IFFALSE 74172
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74146: LD_VAR 0 4
74150: PPUSH
74151: LD_VAR 0 5
74155: PPUSH
74156: LD_VAR 0 4
74160: PPUSH
74161: CALL_OW 74
74165: PPUSH
74166: CALL_OW 112
74170: GO 74196
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74172: LD_VAR 0 4
74176: PPUSH
74177: LD_VAR 0 5
74181: PPUSH
74182: LD_VAR 0 4
74186: PPUSH
74187: CALL_OW 74
74191: PPUSH
74192: CALL 75125 0 2
// end ; end ;
74196: GO 73776
74198: POP
74199: POP
// end ;
74200: LD_VAR 0 3
74204: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74205: LD_INT 0
74207: PPUSH
74208: PPUSH
74209: PPUSH
// if not unit or IsInUnit ( unit ) then
74210: LD_VAR 0 1
74214: NOT
74215: PUSH
74216: LD_VAR 0 1
74220: PPUSH
74221: CALL_OW 310
74225: OR
74226: IFFALSE 74230
// exit ;
74228: GO 74321
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74230: LD_ADDR_VAR 0 4
74234: PUSH
74235: LD_VAR 0 1
74239: PPUSH
74240: CALL_OW 250
74244: PPUSH
74245: LD_VAR 0 2
74249: PPUSH
74250: LD_INT 1
74252: PPUSH
74253: CALL_OW 272
74257: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74258: LD_ADDR_VAR 0 5
74262: PUSH
74263: LD_VAR 0 1
74267: PPUSH
74268: CALL_OW 251
74272: PPUSH
74273: LD_VAR 0 2
74277: PPUSH
74278: LD_INT 1
74280: PPUSH
74281: CALL_OW 273
74285: ST_TO_ADDR
// if ValidHex ( x , y ) then
74286: LD_VAR 0 4
74290: PPUSH
74291: LD_VAR 0 5
74295: PPUSH
74296: CALL_OW 488
74300: IFFALSE 74321
// ComTurnXY ( unit , x , y ) ;
74302: LD_VAR 0 1
74306: PPUSH
74307: LD_VAR 0 4
74311: PPUSH
74312: LD_VAR 0 5
74316: PPUSH
74317: CALL_OW 118
// end ;
74321: LD_VAR 0 3
74325: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74326: LD_INT 0
74328: PPUSH
74329: PPUSH
// result := false ;
74330: LD_ADDR_VAR 0 3
74334: PUSH
74335: LD_INT 0
74337: ST_TO_ADDR
// if not units then
74338: LD_VAR 0 2
74342: NOT
74343: IFFALSE 74347
// exit ;
74345: GO 74392
// for i in units do
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: LD_VAR 0 2
74356: PUSH
74357: FOR_IN
74358: IFFALSE 74390
// if See ( side , i ) then
74360: LD_VAR 0 1
74364: PPUSH
74365: LD_VAR 0 4
74369: PPUSH
74370: CALL_OW 292
74374: IFFALSE 74388
// begin result := true ;
74376: LD_ADDR_VAR 0 3
74380: PUSH
74381: LD_INT 1
74383: ST_TO_ADDR
// exit ;
74384: POP
74385: POP
74386: GO 74392
// end ;
74388: GO 74357
74390: POP
74391: POP
// end ;
74392: LD_VAR 0 3
74396: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74397: LD_INT 0
74399: PPUSH
74400: PPUSH
74401: PPUSH
74402: PPUSH
// if not unit or not points then
74403: LD_VAR 0 1
74407: NOT
74408: PUSH
74409: LD_VAR 0 2
74413: NOT
74414: OR
74415: IFFALSE 74419
// exit ;
74417: GO 74509
// dist := 99999 ;
74419: LD_ADDR_VAR 0 5
74423: PUSH
74424: LD_INT 99999
74426: ST_TO_ADDR
// for i in points do
74427: LD_ADDR_VAR 0 4
74431: PUSH
74432: LD_VAR 0 2
74436: PUSH
74437: FOR_IN
74438: IFFALSE 74507
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74440: LD_ADDR_VAR 0 6
74444: PUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: LD_VAR 0 4
74454: PUSH
74455: LD_INT 1
74457: ARRAY
74458: PPUSH
74459: LD_VAR 0 4
74463: PUSH
74464: LD_INT 2
74466: ARRAY
74467: PPUSH
74468: CALL_OW 297
74472: ST_TO_ADDR
// if tmpDist < dist then
74473: LD_VAR 0 6
74477: PUSH
74478: LD_VAR 0 5
74482: LESS
74483: IFFALSE 74505
// begin result := i ;
74485: LD_ADDR_VAR 0 3
74489: PUSH
74490: LD_VAR 0 4
74494: ST_TO_ADDR
// dist := tmpDist ;
74495: LD_ADDR_VAR 0 5
74499: PUSH
74500: LD_VAR 0 6
74504: ST_TO_ADDR
// end ; end ;
74505: GO 74437
74507: POP
74508: POP
// end ;
74509: LD_VAR 0 3
74513: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74514: LD_INT 0
74516: PPUSH
// uc_side := side ;
74517: LD_ADDR_OWVAR 20
74521: PUSH
74522: LD_VAR 0 1
74526: ST_TO_ADDR
// uc_nation := 3 ;
74527: LD_ADDR_OWVAR 21
74531: PUSH
74532: LD_INT 3
74534: ST_TO_ADDR
// vc_chassis := 25 ;
74535: LD_ADDR_OWVAR 37
74539: PUSH
74540: LD_INT 25
74542: ST_TO_ADDR
// vc_engine := engine_siberite ;
74543: LD_ADDR_OWVAR 39
74547: PUSH
74548: LD_INT 3
74550: ST_TO_ADDR
// vc_control := control_computer ;
74551: LD_ADDR_OWVAR 38
74555: PUSH
74556: LD_INT 3
74558: ST_TO_ADDR
// vc_weapon := 59 ;
74559: LD_ADDR_OWVAR 40
74563: PUSH
74564: LD_INT 59
74566: ST_TO_ADDR
// result := CreateVehicle ;
74567: LD_ADDR_VAR 0 5
74571: PUSH
74572: CALL_OW 45
74576: ST_TO_ADDR
// SetDir ( result , d ) ;
74577: LD_VAR 0 5
74581: PPUSH
74582: LD_VAR 0 4
74586: PPUSH
74587: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74591: LD_VAR 0 5
74595: PPUSH
74596: LD_VAR 0 2
74600: PPUSH
74601: LD_VAR 0 3
74605: PPUSH
74606: LD_INT 0
74608: PPUSH
74609: CALL_OW 48
// end ;
74613: LD_VAR 0 5
74617: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74618: LD_INT 0
74620: PPUSH
74621: PPUSH
74622: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74623: LD_ADDR_VAR 0 2
74627: PUSH
74628: LD_INT 0
74630: PUSH
74631: LD_INT 0
74633: PUSH
74634: LD_INT 0
74636: PUSH
74637: LD_INT 0
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74646: LD_VAR 0 1
74650: NOT
74651: PUSH
74652: LD_VAR 0 1
74656: PPUSH
74657: CALL_OW 264
74661: PUSH
74662: LD_INT 12
74664: PUSH
74665: LD_INT 51
74667: PUSH
74668: LD_INT 32
74670: PUSH
74671: LD_INT 89
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: IN
74680: NOT
74681: OR
74682: IFFALSE 74686
// exit ;
74684: GO 74784
// for i := 1 to 3 do
74686: LD_ADDR_VAR 0 3
74690: PUSH
74691: DOUBLE
74692: LD_INT 1
74694: DEC
74695: ST_TO_ADDR
74696: LD_INT 3
74698: PUSH
74699: FOR_TO
74700: IFFALSE 74782
// begin tmp := GetCargo ( cargo , i ) ;
74702: LD_ADDR_VAR 0 4
74706: PUSH
74707: LD_VAR 0 1
74711: PPUSH
74712: LD_VAR 0 3
74716: PPUSH
74717: CALL_OW 289
74721: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74722: LD_ADDR_VAR 0 2
74726: PUSH
74727: LD_VAR 0 2
74731: PPUSH
74732: LD_VAR 0 3
74736: PPUSH
74737: LD_VAR 0 4
74741: PPUSH
74742: CALL_OW 1
74746: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74747: LD_ADDR_VAR 0 2
74751: PUSH
74752: LD_VAR 0 2
74756: PPUSH
74757: LD_INT 4
74759: PPUSH
74760: LD_VAR 0 2
74764: PUSH
74765: LD_INT 4
74767: ARRAY
74768: PUSH
74769: LD_VAR 0 4
74773: PLUS
74774: PPUSH
74775: CALL_OW 1
74779: ST_TO_ADDR
// end ;
74780: GO 74699
74782: POP
74783: POP
// end ;
74784: LD_VAR 0 2
74788: RET
// export function Length ( array ) ; begin
74789: LD_INT 0
74791: PPUSH
// result := array + 0 ;
74792: LD_ADDR_VAR 0 2
74796: PUSH
74797: LD_VAR 0 1
74801: PUSH
74802: LD_INT 0
74804: PLUS
74805: ST_TO_ADDR
// end ;
74806: LD_VAR 0 2
74810: RET
// export function PrepareArray ( array ) ; begin
74811: LD_INT 0
74813: PPUSH
// result := array diff 0 ;
74814: LD_ADDR_VAR 0 2
74818: PUSH
74819: LD_VAR 0 1
74823: PUSH
74824: LD_INT 0
74826: DIFF
74827: ST_TO_ADDR
// if not result [ 1 ] then
74828: LD_VAR 0 2
74832: PUSH
74833: LD_INT 1
74835: ARRAY
74836: NOT
74837: IFFALSE 74857
// result := Delete ( result , 1 ) ;
74839: LD_ADDR_VAR 0 2
74843: PUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: LD_INT 1
74851: PPUSH
74852: CALL_OW 3
74856: ST_TO_ADDR
// end ;
74857: LD_VAR 0 2
74861: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74862: LD_INT 0
74864: PPUSH
74865: PPUSH
74866: PPUSH
74867: PPUSH
// sibRocketRange := 25 ;
74868: LD_ADDR_VAR 0 6
74872: PUSH
74873: LD_INT 25
74875: ST_TO_ADDR
// result := false ;
74876: LD_ADDR_VAR 0 4
74880: PUSH
74881: LD_INT 0
74883: ST_TO_ADDR
// for i := 0 to 5 do
74884: LD_ADDR_VAR 0 5
74888: PUSH
74889: DOUBLE
74890: LD_INT 0
74892: DEC
74893: ST_TO_ADDR
74894: LD_INT 5
74896: PUSH
74897: FOR_TO
74898: IFFALSE 74965
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74900: LD_VAR 0 1
74904: PPUSH
74905: LD_VAR 0 5
74909: PPUSH
74910: LD_VAR 0 6
74914: PPUSH
74915: CALL_OW 272
74919: PPUSH
74920: LD_VAR 0 2
74924: PPUSH
74925: LD_VAR 0 5
74929: PPUSH
74930: LD_VAR 0 6
74934: PPUSH
74935: CALL_OW 273
74939: PPUSH
74940: LD_VAR 0 3
74944: PPUSH
74945: CALL_OW 309
74949: IFFALSE 74963
// begin result := true ;
74951: LD_ADDR_VAR 0 4
74955: PUSH
74956: LD_INT 1
74958: ST_TO_ADDR
// exit ;
74959: POP
74960: POP
74961: GO 74967
// end ;
74963: GO 74897
74965: POP
74966: POP
// end ;
74967: LD_VAR 0 4
74971: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74972: LD_INT 0
74974: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74975: LD_VAR 0 1
74979: PPUSH
74980: LD_VAR 0 2
74984: PPUSH
74985: LD_INT 0
74987: PPUSH
74988: LD_INT 0
74990: PPUSH
74991: LD_INT 1
74993: PPUSH
74994: LD_INT 0
74996: PPUSH
74997: CALL_OW 587
// end ;
75001: LD_VAR 0 3
75005: RET
// export function CenterOnNow ( unit ) ; begin
75006: LD_INT 0
75008: PPUSH
// result := IsInUnit ( unit ) ;
75009: LD_ADDR_VAR 0 2
75013: PUSH
75014: LD_VAR 0 1
75018: PPUSH
75019: CALL_OW 310
75023: ST_TO_ADDR
// if not result then
75024: LD_VAR 0 2
75028: NOT
75029: IFFALSE 75041
// result := unit ;
75031: LD_ADDR_VAR 0 2
75035: PUSH
75036: LD_VAR 0 1
75040: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 87
// end ;
75050: LD_VAR 0 2
75054: RET
// export function ComMoveHex ( unit , hex ) ; begin
75055: LD_INT 0
75057: PPUSH
// if not hex then
75058: LD_VAR 0 2
75062: NOT
75063: IFFALSE 75067
// exit ;
75065: GO 75120
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75067: LD_VAR 0 2
75071: PUSH
75072: LD_INT 1
75074: ARRAY
75075: PPUSH
75076: LD_VAR 0 2
75080: PUSH
75081: LD_INT 2
75083: ARRAY
75084: PPUSH
75085: CALL_OW 428
75089: IFFALSE 75093
// exit ;
75091: GO 75120
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75093: LD_VAR 0 1
75097: PPUSH
75098: LD_VAR 0 2
75102: PUSH
75103: LD_INT 1
75105: ARRAY
75106: PPUSH
75107: LD_VAR 0 2
75111: PUSH
75112: LD_INT 2
75114: ARRAY
75115: PPUSH
75116: CALL_OW 111
// end ;
75120: LD_VAR 0 3
75124: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75125: LD_INT 0
75127: PPUSH
75128: PPUSH
75129: PPUSH
// if not unit or not enemy then
75130: LD_VAR 0 1
75134: NOT
75135: PUSH
75136: LD_VAR 0 2
75140: NOT
75141: OR
75142: IFFALSE 75146
// exit ;
75144: GO 75270
// x := GetX ( enemy ) ;
75146: LD_ADDR_VAR 0 4
75150: PUSH
75151: LD_VAR 0 2
75155: PPUSH
75156: CALL_OW 250
75160: ST_TO_ADDR
// y := GetY ( enemy ) ;
75161: LD_ADDR_VAR 0 5
75165: PUSH
75166: LD_VAR 0 2
75170: PPUSH
75171: CALL_OW 251
75175: ST_TO_ADDR
// if ValidHex ( x , y ) then
75176: LD_VAR 0 4
75180: PPUSH
75181: LD_VAR 0 5
75185: PPUSH
75186: CALL_OW 488
75190: IFFALSE 75270
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
75192: LD_VAR 0 2
75196: PPUSH
75197: CALL_OW 247
75201: PUSH
75202: LD_INT 3
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: IN
75212: PUSH
75213: LD_VAR 0 1
75217: PPUSH
75218: CALL_OW 255
75222: PPUSH
75223: LD_VAR 0 2
75227: PPUSH
75228: CALL_OW 292
75232: AND
75233: IFFALSE 75251
// ComAttackUnit ( unit , enemy ) else
75235: LD_VAR 0 1
75239: PPUSH
75240: LD_VAR 0 2
75244: PPUSH
75245: CALL_OW 115
75249: GO 75270
// ComAgressiveMove ( unit , x , y ) ;
75251: LD_VAR 0 1
75255: PPUSH
75256: LD_VAR 0 4
75260: PPUSH
75261: LD_VAR 0 5
75265: PPUSH
75266: CALL_OW 114
// end ; end_of_file
75270: LD_VAR 0 3
75274: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75275: LD_VAR 0 1
75279: PUSH
75280: LD_INT 200
75282: DOUBLE
75283: GREATEREQUAL
75284: IFFALSE 75292
75286: LD_INT 299
75288: DOUBLE
75289: LESSEQUAL
75290: IFTRUE 75294
75292: GO 75326
75294: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75295: LD_VAR 0 1
75299: PPUSH
75300: LD_VAR 0 2
75304: PPUSH
75305: LD_VAR 0 3
75309: PPUSH
75310: LD_VAR 0 4
75314: PPUSH
75315: LD_VAR 0 5
75319: PPUSH
75320: CALL 28999 0 5
75324: GO 75403
75326: LD_INT 300
75328: DOUBLE
75329: GREATEREQUAL
75330: IFFALSE 75338
75332: LD_INT 399
75334: DOUBLE
75335: LESSEQUAL
75336: IFTRUE 75340
75338: GO 75402
75340: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75341: LD_VAR 0 1
75345: PPUSH
75346: LD_VAR 0 2
75350: PPUSH
75351: LD_VAR 0 3
75355: PPUSH
75356: LD_VAR 0 4
75360: PPUSH
75361: LD_VAR 0 5
75365: PPUSH
75366: LD_VAR 0 6
75370: PPUSH
75371: LD_VAR 0 7
75375: PPUSH
75376: LD_VAR 0 8
75380: PPUSH
75381: LD_VAR 0 9
75385: PPUSH
75386: LD_VAR 0 10
75390: PPUSH
75391: LD_VAR 0 11
75395: PPUSH
75396: CALL 25324 0 11
75400: GO 75403
75402: POP
// end ;
75403: PPOPN 11
75405: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_VAR 0 2
75415: PPUSH
75416: LD_VAR 0 3
75420: PPUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: LD_VAR 0 5
75430: PPUSH
75431: CALL 28735 0 5
// end ; end_of_file
75435: PPOPN 5
75437: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75438: LD_VAR 0 1
75442: PPUSH
75443: LD_VAR 0 2
75447: PPUSH
75448: LD_VAR 0 3
75452: PPUSH
75453: LD_VAR 0 4
75457: PPUSH
75458: LD_VAR 0 5
75462: PPUSH
75463: LD_VAR 0 6
75467: PPUSH
75468: CALL 12976 0 6
// end ;
75472: PPOPN 6
75474: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75475: LD_INT 0
75477: PPUSH
// begin if not units then
75478: LD_VAR 0 1
75482: NOT
75483: IFFALSE 75487
// exit ;
75485: GO 75487
// end ;
75487: PPOPN 7
75489: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75490: CALL 12880 0 0
// end ;
75494: PPOPN 1
75496: END
