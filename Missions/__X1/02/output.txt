// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// PrepareNature ;
  19: CALL 580 0 0
// PrepareAmericans ;
  23: CALL 877 0 0
// PrepareArabian ;
  27: CALL 10721 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 198 0 0
// Action ;
  41: CALL 4656 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 6
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 8
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 7
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 12
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 10
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 14
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 11
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 13
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// prefix := 01_ ;
 169: LD_ADDR_EXP 2
 173: PUSH
 174: LD_STRING 01_
 176: ST_TO_ADDR
// trap := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// lostCounter := false ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// end ;
 193: LD_VAR 0 1
 197: RET
// function DebugMode ; begin
 198: LD_INT 0
 200: PPUSH
// FogOff ( 1 ) ;
 201: LD_INT 1
 203: PPUSH
 204: CALL_OW 344
// Difficulty := 2 ;
 208: LD_ADDR_OWVAR 67
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
// if exist_mode then
 225: LD_VAR 0 2
 229: IFFALSE 254
// unit := CreateCharacter ( prefix & ident ) else
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_VAR 0 1
 245: STR
 246: PPUSH
 247: CALL_OW 34
 251: ST_TO_ADDR
 252: GO 269
// unit := NewCharacter ( ident ) ;
 254: LD_ADDR_VAR 0 5
 258: PUSH
 259: LD_VAR 0 1
 263: PPUSH
 264: CALL_OW 25
 268: ST_TO_ADDR
// result := unit ;
 269: LD_ADDR_VAR 0 4
 273: PUSH
 274: LD_VAR 0 5
 278: ST_TO_ADDR
// end ;
 279: LD_VAR 0 4
 283: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 284: LD_INT 0
 286: PPUSH
// uc_side := side ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_VAR 0 1
 296: ST_TO_ADDR
// uc_nation := nation ;
 297: LD_ADDR_OWVAR 21
 301: PUSH
 302: LD_VAR 0 2
 306: ST_TO_ADDR
// vc_chassis := chassis ;
 307: LD_ADDR_OWVAR 37
 311: PUSH
 312: LD_VAR 0 3
 316: ST_TO_ADDR
// vc_engine := engine ;
 317: LD_ADDR_OWVAR 39
 321: PUSH
 322: LD_VAR 0 4
 326: ST_TO_ADDR
// vc_control := control ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_VAR 0 5
 336: ST_TO_ADDR
// vc_weapon := weapon ;
 337: LD_ADDR_OWVAR 40
 341: PUSH
 342: LD_VAR 0 6
 346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 347: LD_ADDR_OWVAR 41
 351: PUSH
 352: LD_VAR 0 7
 356: ST_TO_ADDR
// result := CreateVehicle ;
 357: LD_ADDR_VAR 0 8
 361: PUSH
 362: CALL_OW 45
 366: ST_TO_ADDR
// end ;
 367: LD_VAR 0 8
 371: RET
// export function SayX ( units , ident ) ; var i ; begin
 372: LD_INT 0
 374: PPUSH
 375: PPUSH
// result := false ;
 376: LD_ADDR_VAR 0 3
 380: PUSH
 381: LD_INT 0
 383: ST_TO_ADDR
// if not units then
 384: LD_VAR 0 1
 388: NOT
 389: IFFALSE 393
// exit ;
 391: GO 447
// for i in units do
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_VAR 0 1
 402: PUSH
 403: FOR_IN
 404: IFFALSE 445
// if IsOk ( i ) then
 406: LD_VAR 0 4
 410: PPUSH
 411: CALL_OW 302
 415: IFFALSE 443
// begin Say ( i , ident ) ;
 417: LD_VAR 0 4
 421: PPUSH
 422: LD_VAR 0 2
 426: PPUSH
 427: CALL_OW 88
// result := i ;
 431: LD_ADDR_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ST_TO_ADDR
// break ;
 441: GO 445
// end ;
 443: GO 403
 445: POP
 446: POP
// end ;
 447: LD_VAR 0 3
 451: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// InitUc ;
 456: CALL_OW 18
// InitHc ;
 460: CALL_OW 19
// uc_side := 0 ;
 464: LD_ADDR_OWVAR 20
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// uc_nation := 0 ;
 472: LD_ADDR_OWVAR 21
 476: PUSH
 477: LD_INT 0
 479: ST_TO_ADDR
// for i = 1 to amount do
 480: LD_ADDR_VAR 0 4
 484: PUSH
 485: DOUBLE
 486: LD_INT 1
 488: DEC
 489: ST_TO_ADDR
 490: LD_VAR 0 2
 494: PUSH
 495: FOR_TO
 496: IFFALSE 569
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 498: LD_ADDR_OWVAR 29
 502: PUSH
 503: LD_INT 9
 505: PPUSH
 506: LD_INT 12
 508: PPUSH
 509: CALL_OW 12
 513: PUSH
 514: LD_INT 9
 516: PPUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 12
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: ST_TO_ADDR
// hc_agressivity := 0 ;
 529: LD_ADDR_OWVAR 35
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 537: LD_INT 0
 539: PPUSH
 540: LD_INT 12
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 550: CALL_OW 44
 554: PPUSH
 555: LD_VAR 0 1
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 49
// end ;
 567: GO 495
 569: POP
 570: POP
// InitHc ;
 571: CALL_OW 19
// end ;
 575: LD_VAR 0 3
 579: RET
// export function PrepareNature ; var i ; begin
 580: LD_INT 0
 582: PPUSH
 583: PPUSH
// SpawnApeman ( forest , 9 ) ;
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 9
 589: PPUSH
 590: CALL 452 0 2
// for i := 1 to 4 do
 594: LD_ADDR_VAR 0 2
 598: PUSH
 599: DOUBLE
 600: LD_INT 1
 602: DEC
 603: ST_TO_ADDR
 604: LD_INT 4
 606: PUSH
 607: FOR_TO
 608: IFFALSE 643
// begin hc_class := 21 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 21
 617: ST_TO_ADDR
// hc_gallery :=  ;
 618: LD_ADDR_OWVAR 33
 622: PUSH
 623: LD_STRING 
 625: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 626: CALL_OW 44
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 49
// end ;
 641: GO 607
 643: POP
 644: POP
// for i := 1 to 2 do
 645: LD_ADDR_VAR 0 2
 649: PUSH
 650: DOUBLE
 651: LD_INT 1
 653: DEC
 654: ST_TO_ADDR
 655: LD_INT 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 694
// begin hc_class := 18 ;
 661: LD_ADDR_OWVAR 28
 665: PUSH
 666: LD_INT 18
 668: ST_TO_ADDR
// hc_gallery :=  ;
 669: LD_ADDR_OWVAR 33
 673: PUSH
 674: LD_STRING 
 676: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 677: CALL_OW 44
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 49
// end ;
 692: GO 658
 694: POP
 695: POP
// for i := 1 to 3 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 3
 708: PUSH
 709: FOR_TO
 710: IFFALSE 745
// begin hc_class := 13 ;
 712: LD_ADDR_OWVAR 28
 716: PUSH
 717: LD_INT 13
 719: ST_TO_ADDR
// hc_gallery :=  ;
 720: LD_ADDR_OWVAR 33
 724: PUSH
 725: LD_STRING 
 727: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ;
 743: GO 709
 745: POP
 746: POP
// for i := 1 to 4 do
 747: LD_ADDR_VAR 0 2
 751: PUSH
 752: DOUBLE
 753: LD_INT 1
 755: DEC
 756: ST_TO_ADDR
 757: LD_INT 4
 759: PUSH
 760: FOR_TO
 761: IFFALSE 796
// begin hc_class := class_frog ;
 763: LD_ADDR_OWVAR 28
 767: PUSH
 768: LD_INT 19
 770: ST_TO_ADDR
// hc_gallery :=  ;
 771: LD_ADDR_OWVAR 33
 775: PUSH
 776: LD_STRING 
 778: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_INT 8
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 49
// end ;
 794: GO 760
 796: POP
 797: POP
// end ;
 798: LD_VAR 0 1
 802: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 803: LD_INT 0
 805: PPUSH
 806: PPUSH
 807: PPUSH
// if not observer or not unit then
 808: LD_VAR 0 1
 812: NOT
 813: PUSH
 814: LD_VAR 0 2
 818: NOT
 819: OR
 820: IFFALSE 824
// exit ;
 822: GO 872
// if not See ( GetSide ( observer ) , unit ) then
 824: LD_VAR 0 1
 828: PPUSH
 829: CALL_OW 255
 833: PPUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: CALL_OW 292
 843: NOT
 844: IFFALSE 848
// exit ;
 846: GO 872
// result := GetDistUnits ( observer , unit ) < 12 ;
 848: LD_ADDR_VAR 0 3
 852: PUSH
 853: LD_VAR 0 1
 857: PPUSH
 858: LD_VAR 0 2
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 12
 870: LESS
 871: ST_TO_ADDR
// end ; end_of_file
 872: LD_VAR 0 3
 876: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 877: LD_INT 0
 879: PPUSH
 880: PPUSH
 881: PPUSH
 882: PPUSH
 883: PPUSH
 884: PPUSH
// usForces := [ ] ;
 885: LD_ADDR_EXP 19
 889: PUSH
 890: EMPTY
 891: ST_TO_ADDR
// usSci := [ ] ;
 892: LD_ADDR_EXP 20
 896: PUSH
 897: EMPTY
 898: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 899: LD_INT 1
 901: PPUSH
 902: LD_STRING Delta
 904: PPUSH
 905: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 909: LD_INT 1
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 1
 919: PPUSH
 920: LD_INT 400
 922: PPUSH
 923: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 927: LD_INT 1
 929: PPUSH
 930: CALL_OW 274
 934: PPUSH
 935: LD_INT 2
 937: PPUSH
 938: LD_INT 80
 940: PPUSH
 941: CALL_OW 277
// uc_side := 1 ;
 945: LD_ADDR_OWVAR 20
 949: PUSH
 950: LD_INT 1
 952: ST_TO_ADDR
// uc_nation := 1 ;
 953: LD_ADDR_OWVAR 21
 957: PUSH
 958: LD_INT 1
 960: ST_TO_ADDR
// InitHc ;
 961: CALL_OW 19
// hc_importance := 0 ;
 965: LD_ADDR_OWVAR 32
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 973: LD_ADDR_EXP 18
 977: PUSH
 978: LD_STRING Lynch
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: LD_STRING 
 986: PPUSH
 987: CALL 221 0 3
 991: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 992: LD_ADDR_EXP 17
 996: PUSH
 997: LD_STRING Gladstone
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_STRING 
1005: PPUSH
1006: CALL 221 0 3
1010: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
1011: LD_EXP 18
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1023: LD_EXP 17
1027: PPUSH
1028: LD_INT 3
1030: PPUSH
1031: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: DOUBLE
1041: LD_INT 1
1043: DEC
1044: ST_TO_ADDR
1045: LD_INT 1
1047: PUSH
1048: LD_INT 2
1050: PUSH
1051: LD_INT 2
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_OWVAR 67
1063: ARRAY
1064: PUSH
1065: FOR_TO
1066: IFFALSE 1112
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1068: LD_INT 0
1070: PPUSH
1071: LD_INT 2
1073: PPUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: LD_INT 2
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1098: CALL_OW 44
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: CALL_OW 52
// end ;
1110: GO 1065
1112: POP
1113: POP
// for i := 1 to 2 + Difficulty do
1114: LD_ADDR_VAR 0 2
1118: PUSH
1119: DOUBLE
1120: LD_INT 1
1122: DEC
1123: ST_TO_ADDR
1124: LD_INT 2
1126: PUSH
1127: LD_OWVAR 67
1131: PLUS
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1219
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1136: LD_INT 0
1138: PPUSH
1139: LD_INT 4
1141: PPUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 2
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_OWVAR 67
1160: ARRAY
1161: PPUSH
1162: CALL_OW 380
// un := CreateHuman ;
1166: LD_ADDR_VAR 0 3
1170: PUSH
1171: CALL_OW 44
1175: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1176: LD_VAR 0 3
1180: PPUSH
1181: LD_INT 3
1183: PPUSH
1184: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1188: LD_ADDR_EXP 20
1192: PUSH
1193: LD_EXP 20
1197: PPUSH
1198: LD_EXP 20
1202: PUSH
1203: LD_INT 1
1205: PLUS
1206: PPUSH
1207: LD_VAR 0 3
1211: PPUSH
1212: CALL_OW 1
1216: ST_TO_ADDR
// end ;
1217: GO 1133
1219: POP
1220: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1221: LD_ADDR_VAR 0 6
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 4
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: ST_TO_ADDR
// for i := 1 to 3 + Difficulty do
1255: LD_ADDR_VAR 0 2
1259: PUSH
1260: DOUBLE
1261: LD_INT 1
1263: DEC
1264: ST_TO_ADDR
1265: LD_INT 3
1267: PUSH
1268: LD_OWVAR 67
1272: PLUS
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1353
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1277: LD_INT 0
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_INT 1
1285: PUSH
1286: LD_INT 2
1288: PUSH
1289: LD_INT 3
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_OWVAR 67
1301: ARRAY
1302: PPUSH
1303: CALL_OW 380
// un := CreateHuman ;
1307: LD_ADDR_VAR 0 3
1311: PUSH
1312: CALL_OW 44
1316: ST_TO_ADDR
// usForces := usForces ^ un ;
1317: LD_ADDR_EXP 19
1321: PUSH
1322: LD_EXP 19
1326: PUSH
1327: LD_VAR 0 3
1331: ADD
1332: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1333: LD_VAR 0 3
1337: PPUSH
1338: LD_VAR 0 6
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// end ;
1351: GO 1274
1353: POP
1354: POP
// PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 2
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: LD_INT 2
1372: PPUSH
1373: LD_INT 100
1375: PPUSH
1376: CALL 284 0 7
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 2
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 43
1409: PPUSH
1410: LD_INT 24
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL_OW 48
// end ;
1420: LD_VAR 0 1
1424: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1425: LD_INT 0
1427: PPUSH
1428: PPUSH
1429: PPUSH
1430: PPUSH
1431: PPUSH
1432: PPUSH
// if not usSci then
1433: LD_EXP 20
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1616
// xy := AreaToList ( tameArea , 0 ) ;
1442: LD_ADDR_VAR 0 6
1446: PUSH
1447: LD_INT 5
1449: PPUSH
1450: LD_INT 0
1452: PPUSH
1453: CALL_OW 517
1457: ST_TO_ADDR
// for i in usSci do
1458: LD_ADDR_VAR 0 2
1462: PUSH
1463: LD_EXP 20
1467: PUSH
1468: FOR_IN
1469: IFFALSE 1614
// begin k := rand ( 1 , xy [ 1 ] ) ;
1471: LD_ADDR_VAR 0 4
1475: PUSH
1476: LD_INT 1
1478: PPUSH
1479: LD_VAR 0 6
1483: PUSH
1484: LD_INT 1
1486: ARRAY
1487: PPUSH
1488: CALL_OW 12
1492: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1493: LD_VAR 0 2
1497: PPUSH
1498: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1502: LD_VAR 0 2
1506: PPUSH
1507: LD_VAR 0 6
1511: PUSH
1512: LD_INT 1
1514: ARRAY
1515: PUSH
1516: LD_VAR 0 4
1520: ARRAY
1521: PPUSH
1522: LD_VAR 0 6
1526: PUSH
1527: LD_INT 2
1529: ARRAY
1530: PUSH
1531: LD_VAR 0 4
1535: ARRAY
1536: PPUSH
1537: CALL_OW 171
// for j := 1 to 2 do
1541: LD_ADDR_VAR 0 3
1545: PUSH
1546: DOUBLE
1547: LD_INT 1
1549: DEC
1550: ST_TO_ADDR
1551: LD_INT 2
1553: PUSH
1554: FOR_TO
1555: IFFALSE 1610
// begin tmp := Delete ( xy [ j ] , k ) ;
1557: LD_ADDR_VAR 0 5
1561: PUSH
1562: LD_VAR 0 6
1566: PUSH
1567: LD_VAR 0 3
1571: ARRAY
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL_OW 3
1582: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1583: LD_ADDR_VAR 0 6
1587: PUSH
1588: LD_VAR 0 6
1592: PPUSH
1593: LD_VAR 0 3
1597: PPUSH
1598: LD_VAR 0 5
1602: PPUSH
1603: CALL_OW 1
1607: ST_TO_ADDR
// end ;
1608: GO 1554
1610: POP
1611: POP
// end ;
1612: GO 1468
1614: POP
1615: POP
// end ;
1616: LD_VAR 0 1
1620: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1621: LD_EXP 4
1625: PUSH
1626: LD_EXP 20
1630: AND
1631: PUSH
1632: LD_EXP 9
1636: NOT
1637: AND
1638: PUSH
1639: LD_INT 22
1641: PUSH
1642: LD_INT 0
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 25
1651: PUSH
1652: LD_INT 12
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PPUSH
1663: CALL_OW 69
1667: AND
1668: IFFALSE 2160
1670: GO 1672
1672: DISABLE
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
// begin enable ;
1680: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1681: LD_EXP 20
1685: PPUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 60
1691: PUSH
1692: EMPTY
1693: LIST
1694: PUSH
1695: LD_INT 54
1697: PUSH
1698: EMPTY
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PPUSH
1706: CALL_OW 72
1710: IFFALSE 1714
// exit ;
1712: GO 2160
// for i in usSci do
1714: LD_ADDR_VAR 0 1
1718: PUSH
1719: LD_EXP 20
1723: PUSH
1724: FOR_IN
1725: IFFALSE 2158
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1727: LD_VAR 0 1
1731: PPUSH
1732: CALL_OW 314
1736: NOT
1737: PUSH
1738: LD_VAR 0 1
1742: PPUSH
1743: CALL_OW 256
1747: PUSH
1748: LD_INT 1000
1750: EQUAL
1751: AND
1752: IFFALSE 1959
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1754: LD_ADDR_VAR 0 5
1758: PUSH
1759: LD_INT 22
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 25
1771: PUSH
1772: LD_INT 12
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: PPUSH
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 74
1797: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1798: LD_VAR 0 1
1802: PPUSH
1803: LD_VAR 0 5
1807: PPUSH
1808: CALL_OW 296
1812: PUSH
1813: LD_INT 10
1815: LESS
1816: IFFALSE 1849
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1818: LD_VAR 0 1
1822: PPUSH
1823: LD_VAR 0 5
1827: PPUSH
1828: CALL_OW 250
1832: PPUSH
1833: LD_VAR 0 5
1837: PPUSH
1838: CALL_OW 251
1842: PPUSH
1843: CALL_OW 131
1847: GO 1959
// begin d := rand ( 0 , 5 ) ;
1849: LD_ADDR_VAR 0 4
1853: PUSH
1854: LD_INT 0
1856: PPUSH
1857: LD_INT 5
1859: PPUSH
1860: CALL_OW 12
1864: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1865: LD_ADDR_VAR 0 2
1869: PUSH
1870: LD_VAR 0 1
1874: PPUSH
1875: CALL_OW 250
1879: PPUSH
1880: LD_VAR 0 4
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 272
1892: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1893: LD_ADDR_VAR 0 3
1897: PUSH
1898: LD_VAR 0 1
1902: PPUSH
1903: CALL_OW 251
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: CALL_OW 273
1920: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1921: LD_VAR 0 2
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 488
1935: NOT
1936: IFFALSE 1940
// continue ;
1938: GO 1724
// ComMoveXY ( i , x , y ) ;
1940: LD_VAR 0 1
1944: PPUSH
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_VAR 0 3
1954: PPUSH
1955: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
1959: LD_VAR 0 1
1963: PPUSH
1964: CALL_OW 256
1968: PUSH
1969: LD_INT 900
1971: LESS
1972: PUSH
1973: LD_VAR 0 1
1977: PPUSH
1978: LD_INT 37
1980: PPUSH
1981: LD_INT 23
1983: PPUSH
1984: CALL_OW 297
1988: PUSH
1989: LD_INT 10
1991: GREATER
1992: AND
1993: IFFALSE 2069
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
1995: LD_EXP 17
1999: PPUSH
2000: CALL_OW 302
2004: PUSH
2005: LD_EXP 17
2009: PPUSH
2010: CALL_OW 310
2014: AND
2015: IFFALSE 2026
// ComExitBuilding ( Gladstone ) ;
2017: LD_EXP 17
2021: PPUSH
2022: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2026: LD_EXP 17
2030: PPUSH
2031: LD_VAR 0 1
2035: PPUSH
2036: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2040: LD_EXP 17
2044: PPUSH
2045: LD_INT 3
2047: PPUSH
2048: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2052: LD_VAR 0 1
2056: PPUSH
2057: LD_INT 37
2059: PPUSH
2060: LD_INT 23
2062: PPUSH
2063: CALL_OW 111
// end else
2067: GO 2156
// if GetLives ( i ) = 1000 then
2069: LD_VAR 0 1
2073: PPUSH
2074: CALL_OW 256
2078: PUSH
2079: LD_INT 1000
2081: EQUAL
2082: IFFALSE 2156
// begin if SideShoot ( i ) = 2 then
2084: LD_VAR 0 1
2088: PPUSH
2089: CALL_OW 503
2093: PUSH
2094: LD_INT 2
2096: EQUAL
2097: IFFALSE 2144
// begin if not usAlert then
2099: LD_EXP 9
2103: NOT
2104: IFFALSE 2114
// usAlert := true ;
2106: LD_ADDR_EXP 9
2110: PUSH
2111: LD_INT 1
2113: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2114: LD_VAR 0 1
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: CALL_OW 180
// usSci := usSci diff i ;
2126: LD_ADDR_EXP 20
2130: PUSH
2131: LD_EXP 20
2135: PUSH
2136: LD_VAR 0 1
2140: DIFF
2141: ST_TO_ADDR
// end else
2142: GO 2156
// ComMoveToArea ( i , tameArea ) ;
2144: LD_VAR 0 1
2148: PPUSH
2149: LD_INT 5
2151: PPUSH
2152: CALL_OW 113
// end ; end ;
2156: GO 1724
2158: POP
2159: POP
// end ;
2160: PPOPN 5
2162: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2163: LD_EXP 9
2167: NOT
2168: PUSH
2169: LD_INT 22
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 57
2194: PUSH
2195: EMPTY
2196: LIST
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 24
2207: PUSH
2208: LD_INT 999
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PUSH
2230: LD_INT 7
2232: PPUSH
2233: LD_INT 22
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PPUSH
2243: CALL_OW 70
2247: OR
2248: AND
2249: IFFALSE 2262
2251: GO 2253
2253: DISABLE
// usAlert := true ;
2254: LD_ADDR_EXP 9
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
2262: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2263: LD_EXP 9
2267: IFFALSE 2614
2269: GO 2271
2271: DISABLE
2272: LD_INT 0
2274: PPUSH
2275: PPUSH
2276: PPUSH
// begin usActiveDefend := true ;
2277: LD_ADDR_EXP 10
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// if not usForces then
2285: LD_EXP 19
2289: NOT
2290: IFFALSE 2294
// exit ;
2292: GO 2614
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2294: LD_ADDR_VAR 0 3
2298: PUSH
2299: LD_INT 22
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 30
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 30
2345: PUSH
2346: LD_INT 31
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PPUSH
2357: CALL_OW 69
2361: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2362: LD_EXP 18
2366: PPUSH
2367: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2371: LD_EXP 18
2375: PPUSH
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 180
// if IsOk ( Gladstone ) then
2389: LD_EXP 17
2393: PPUSH
2394: CALL_OW 302
2398: IFFALSE 2439
// begin ComExitBuilding ( Gladstone ) ;
2400: LD_EXP 17
2404: PPUSH
2405: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_VAR 0 3
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2427: LD_EXP 17
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2439: LD_EXP 19
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PPUSH
2448: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2452: LD_EXP 19
2456: PUSH
2457: LD_INT 1
2459: ARRAY
2460: PPUSH
2461: LD_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ARRAY
2469: PPUSH
2470: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2474: LD_EXP 19
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2487: LD_EXP 19
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_INT 22
2498: PUSH
2499: LD_INT 1
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 30
2508: PUSH
2509: LD_INT 32
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PPUSH
2520: CALL_OW 69
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: CALL_OW 180
// if b > 1 and usForces > 2 then
2533: LD_VAR 0 2
2537: PUSH
2538: LD_INT 1
2540: GREATER
2541: PUSH
2542: LD_EXP 19
2546: PUSH
2547: LD_INT 2
2549: GREATER
2550: AND
2551: IFFALSE 2614
// begin repeat wait ( 0 0$1 ) ;
2553: LD_INT 35
2555: PPUSH
2556: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 2
2567: ARRAY
2568: PPUSH
2569: CALL_OW 461
2573: PUSH
2574: LD_INT 1
2576: NONEQUAL
2577: IFFALSE 2553
// ComExitBuilding ( usForces [ 3 ] ) ;
2579: LD_EXP 19
2583: PUSH
2584: LD_INT 3
2586: ARRAY
2587: PPUSH
2588: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2592: LD_EXP 19
2596: PUSH
2597: LD_INT 3
2599: ARRAY
2600: PPUSH
2601: LD_VAR 0 2
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 180
// end ; end ;
2614: PPOPN 3
2616: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2617: LD_INT 3
2619: PPUSH
2620: CALL_OW 256
2624: PUSH
2625: LD_INT 999
2627: LESS
2628: PUSH
2629: LD_EXP 9
2633: AND
2634: PUSH
2635: LD_EXP 19
2639: AND
2640: IFFALSE 2811
2642: GO 2644
2644: DISABLE
2645: LD_INT 0
2647: PPUSH
// begin for i in usForces do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: LD_EXP 19
2657: PUSH
2658: FOR_IN
2659: IFFALSE 2698
// begin if IsInUnit ( i ) then
2661: LD_VAR 0 1
2665: PPUSH
2666: CALL_OW 310
2670: IFFALSE 2681
// ComExitBuilding ( i ) ;
2672: LD_VAR 0 1
2676: PPUSH
2677: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2681: LD_VAR 0 1
2685: PPUSH
2686: LD_INT 31
2688: PPUSH
2689: LD_INT 8
2691: PPUSH
2692: CALL_OW 174
// end ;
2696: GO 2658
2698: POP
2699: POP
// wait ( 0 0$8 ) ;
2700: LD_INT 280
2702: PPUSH
2703: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2707: LD_INT 22
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 91
2719: PUSH
2720: LD_INT 3
2722: PUSH
2723: LD_INT 14
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PPUSH
2735: CALL_OW 69
2739: IFFALSE 2789
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2741: LD_EXP 19
2745: PPUSH
2746: LD_INT 22
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 91
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 14
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PPUSH
2774: CALL_OW 69
2778: PUSH
2779: LD_INT 1
2781: ARRAY
2782: PPUSH
2783: CALL_OW 115
2787: GO 2811
// begin wait ( 0 0$20 ) ;
2789: LD_INT 700
2791: PPUSH
2792: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2796: LD_EXP 19
2800: PPUSH
2801: LD_INT 39
2803: PPUSH
2804: LD_INT 19
2806: PPUSH
2807: CALL_OW 171
// end ; end ;
2811: PPOPN 1
2813: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2814: LD_EXP 21
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 296
2826: PUSH
2827: LD_INT 10
2829: LESS
2830: PUSH
2831: LD_INT 3
2833: PPUSH
2834: CALL_OW 256
2838: PUSH
2839: LD_INT 999
2841: LESS
2842: OR
2843: PUSH
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 2
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 69
2872: AND
2873: IFFALSE 3057
2875: GO 2877
2877: DISABLE
2878: LD_INT 0
2880: PPUSH
2881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2882: LD_ADDR_VAR 0 1
2886: PUSH
2887: LD_INT 22
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 25
2899: PUSH
2900: LD_INT 2
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PPUSH
2911: CALL_OW 69
2915: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2916: LD_ADDR_VAR 0 2
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: LD_INT 1
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 21
2933: PUSH
2934: LD_INT 2
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 58
2943: PUSH
2944: EMPTY
2945: LIST
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 69
2956: ST_TO_ADDR
// if not tmp then
2957: LD_VAR 0 1
2961: NOT
2962: IFFALSE 2966
// exit ;
2964: GO 3057
// ComExitBuilding ( tmp ) ;
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL_OW 227
// if veh and IsOk ( Gladstone ) then
2987: LD_VAR 0 2
2991: PUSH
2992: LD_EXP 17
2996: PPUSH
2997: CALL_OW 302
3001: AND
3002: IFFALSE 3057
// begin if IsInUnit ( Gladstone ) then
3004: LD_EXP 17
3008: PPUSH
3009: CALL_OW 310
3013: IFFALSE 3024
// ComExitBuilding ( Gladstone ) ;
3015: LD_EXP 17
3019: PPUSH
3020: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
3024: LD_EXP 17
3028: PPUSH
3029: LD_VAR 0 2
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: PPUSH
3038: CALL_OW 180
// AddComAgressiveMove ( Gladstone , 39 , 14 ) ;
3042: LD_EXP 17
3046: PPUSH
3047: LD_INT 39
3049: PPUSH
3050: LD_INT 14
3052: PPUSH
3053: CALL_OW 174
// end ; end ;
3057: PPOPN 2
3059: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3060: LD_EXP 9
3064: PUSH
3065: LD_INT 7
3067: PPUSH
3068: LD_INT 22
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 21
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 3
3090: PUSH
3091: LD_INT 24
3093: PUSH
3094: LD_INT 600
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL_OW 70
3114: AND
3115: IFFALSE 3243
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
// begin enable ;
3124: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3125: LD_ADDR_VAR 0 2
3129: PUSH
3130: LD_INT 7
3132: PPUSH
3133: LD_INT 22
3135: PUSH
3136: LD_INT 1
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 21
3145: PUSH
3146: LD_INT 1
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: LD_INT 24
3158: PUSH
3159: LD_INT 600
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: PPUSH
3175: CALL_OW 70
3179: ST_TO_ADDR
// if not tmp then
3180: LD_VAR 0 2
3184: NOT
3185: IFFALSE 3189
// exit ;
3187: GO 3243
// for i in tmp do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: LD_VAR 0 2
3198: PUSH
3199: FOR_IN
3200: IFFALSE 3241
// if IsInUnit ( i ) then
3202: LD_VAR 0 1
3206: PPUSH
3207: CALL_OW 310
3211: IFFALSE 3224
// ComExitBuilding ( i ) else
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 122
3222: GO 3239
// ComMoveXY ( i , 48 , 74 ) ;
3224: LD_VAR 0 1
3228: PPUSH
3229: LD_INT 48
3231: PPUSH
3232: LD_INT 74
3234: PPUSH
3235: CALL_OW 111
3239: GO 3199
3241: POP
3242: POP
// end ;
3243: PPOPN 2
3245: END
// every 5 5$00 do var i , un , tmp ;
3246: GO 3248
3248: DISABLE
3249: LD_INT 0
3251: PPUSH
3252: PPUSH
3253: PPUSH
// begin tmp := [ ] ;
3254: LD_ADDR_VAR 0 3
3258: PUSH
3259: EMPTY
3260: ST_TO_ADDR
// uc_side := 1 ;
3261: LD_ADDR_OWVAR 20
3265: PUSH
3266: LD_INT 1
3268: ST_TO_ADDR
// uc_nation := 1 ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 1
3276: ST_TO_ADDR
// case Difficulty of 1 :
3277: LD_OWVAR 67
3281: PUSH
3282: LD_INT 1
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3393
3290: POP
// begin wait ( 1 1$00 ) ;
3291: LD_INT 2100
3293: PPUSH
3294: CALL_OW 67
// for i := 1 to 2 do
3298: LD_ADDR_VAR 0 1
3302: PUSH
3303: DOUBLE
3304: LD_INT 1
3306: DEC
3307: ST_TO_ADDR
3308: LD_INT 2
3310: PUSH
3311: FOR_TO
3312: IFFALSE 3389
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3314: LD_INT 0
3316: PPUSH
3317: LD_INT 1
3319: PUSH
3320: LD_INT 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_VAR 0 1
3331: PUSH
3332: LD_INT 2
3334: MOD
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: ARRAY
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 380
// un := CreateHuman ;
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: CALL_OW 44
3357: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 3
3372: PUSH
3373: LD_INT 1
3375: PLUS
3376: PPUSH
3377: LD_VAR 0 2
3381: PPUSH
3382: CALL_OW 1
3386: ST_TO_ADDR
// end ;
3387: GO 3311
3389: POP
3390: POP
// end ; 2 :
3391: GO 3787
3393: LD_INT 2
3395: DOUBLE
3396: EQUAL
3397: IFTRUE 3401
3399: GO 3535
3401: POP
// begin wait ( 0 0$30 ) ;
3402: LD_INT 1050
3404: PPUSH
3405: CALL_OW 67
// for i := 1 to 2 do
3409: LD_ADDR_VAR 0 1
3413: PUSH
3414: DOUBLE
3415: LD_INT 1
3417: DEC
3418: ST_TO_ADDR
3419: LD_INT 2
3421: PUSH
3422: FOR_TO
3423: IFFALSE 3479
// begin PrepareHuman ( false , 1 , 2 ) ;
3425: LD_INT 0
3427: PPUSH
3428: LD_INT 1
3430: PPUSH
3431: LD_INT 2
3433: PPUSH
3434: CALL_OW 380
// un := CreateHuman ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: LD_VAR 0 3
3462: PUSH
3463: LD_INT 1
3465: PLUS
3466: PPUSH
3467: LD_VAR 0 2
3471: PPUSH
3472: CALL_OW 1
3476: ST_TO_ADDR
// end ;
3477: GO 3422
3479: POP
3480: POP
// PrepareHuman ( false , 4 , 2 ) ;
3481: LD_INT 0
3483: PPUSH
3484: LD_INT 4
3486: PPUSH
3487: LD_INT 2
3489: PPUSH
3490: CALL_OW 380
// un := CreateHuman ;
3494: LD_ADDR_VAR 0 2
3498: PUSH
3499: CALL_OW 44
3503: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3504: LD_ADDR_VAR 0 3
3508: PUSH
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_VAR 0 3
3518: PUSH
3519: LD_INT 1
3521: PLUS
3522: PPUSH
3523: LD_VAR 0 2
3527: PPUSH
3528: CALL_OW 1
3532: ST_TO_ADDR
// end ; 3 :
3533: GO 3787
3535: LD_INT 3
3537: DOUBLE
3538: EQUAL
3539: IFTRUE 3543
3541: GO 3786
3543: POP
// begin for i := 1 to 2 do
3544: LD_ADDR_VAR 0 1
3548: PUSH
3549: DOUBLE
3550: LD_INT 1
3552: DEC
3553: ST_TO_ADDR
3554: LD_INT 2
3556: PUSH
3557: FOR_TO
3558: IFFALSE 3614
// begin PrepareHuman ( false , 1 , 2 ) ;
3560: LD_INT 0
3562: PPUSH
3563: LD_INT 1
3565: PPUSH
3566: LD_INT 2
3568: PPUSH
3569: CALL_OW 380
// un := CreateHuman ;
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: CALL_OW 44
3582: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3583: LD_ADDR_VAR 0 3
3587: PUSH
3588: LD_VAR 0 3
3592: PPUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 1
3600: PLUS
3601: PPUSH
3602: LD_VAR 0 2
3606: PPUSH
3607: CALL_OW 1
3611: ST_TO_ADDR
// end ;
3612: GO 3557
3614: POP
3615: POP
// PrepareHuman ( false , 4 , 2 ) ;
3616: LD_INT 0
3618: PPUSH
3619: LD_INT 4
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: CALL_OW 380
// un := CreateHuman ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: CALL_OW 44
3638: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_INT 1
3656: PLUS
3657: PPUSH
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 1
3667: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3668: LD_INT 1
3670: PPUSH
3671: LD_INT 1
3673: PPUSH
3674: LD_INT 2
3676: PPUSH
3677: LD_INT 2
3679: PPUSH
3680: LD_INT 1
3682: PPUSH
3683: LD_INT 2
3685: PPUSH
3686: LD_INT 90
3688: PPUSH
3689: CALL 284 0 7
// un := CreateVehicle ;
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: CALL_OW 45
3702: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3703: LD_ADDR_VAR 0 3
3707: PUSH
3708: LD_VAR 0 3
3712: PPUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_INT 1
3720: PLUS
3721: PPUSH
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 1
3731: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3732: LD_INT 0
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 380
// un := CreateHuman ;
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: CALL_OW 44
3754: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: LD_VAR 0 3
3764: PPUSH
3765: LD_VAR 0 3
3769: PUSH
3770: LD_INT 1
3772: PLUS
3773: PPUSH
3774: LD_VAR 0 2
3778: PPUSH
3779: CALL_OW 1
3783: ST_TO_ADDR
// end ; end ;
3784: GO 3787
3786: POP
// for i := 1 to tmp do
3787: LD_ADDR_VAR 0 1
3791: PUSH
3792: DOUBLE
3793: LD_INT 1
3795: DEC
3796: ST_TO_ADDR
3797: LD_VAR 0 3
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3968
// begin SetDir ( tmp [ i ] , 1 ) ;
3805: LD_VAR 0 3
3809: PUSH
3810: LD_VAR 0 1
3814: ARRAY
3815: PPUSH
3816: LD_INT 1
3818: PPUSH
3819: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3823: LD_VAR 0 3
3827: PUSH
3828: LD_VAR 0 1
3832: ARRAY
3833: PPUSH
3834: CALL_OW 247
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3870
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3844: LD_VAR 0 3
3848: PUSH
3849: LD_VAR 0 1
3853: ARRAY
3854: PPUSH
3855: LD_INT 28
3857: PPUSH
3858: LD_INT 52
3860: PPUSH
3861: LD_INT 0
3863: PPUSH
3864: CALL_OW 48
3868: GO 3938
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3870: LD_VAR 0 3
3874: PUSH
3875: LD_VAR 0 1
3879: ARRAY
3880: PPUSH
3881: LD_INT 28
3883: PPUSH
3884: LD_INT 52
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL_OW 48
// i := i + 1 ;
3894: LD_ADDR_VAR 0 1
3898: PUSH
3899: LD_VAR 0 1
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3908: LD_VAR 0 3
3912: PUSH
3913: LD_VAR 0 1
3917: ARRAY
3918: PPUSH
3919: LD_VAR 0 3
3923: PUSH
3924: LD_VAR 0 1
3928: PUSH
3929: LD_INT 1
3931: MINUS
3932: ARRAY
3933: PPUSH
3934: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3938: LD_VAR 0 3
3942: PUSH
3943: LD_VAR 0 1
3947: ARRAY
3948: PPUSH
3949: LD_INT 43
3951: PPUSH
3952: LD_INT 56
3954: PPUSH
3955: CALL_OW 111
// wait ( 0 0$2 ) ;
3959: LD_INT 70
3961: PPUSH
3962: CALL_OW 67
// end ;
3966: GO 3802
3968: POP
3969: POP
// wait ( 0 0$2 ) ;
3970: LD_INT 70
3972: PPUSH
3973: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3977: LD_INT 7
3979: PPUSH
3980: LD_INT 22
3982: PUSH
3983: LD_INT 2
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 70
3994: NOT
3995: IFFALSE 4193
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3997: LD_VAR 0 3
4001: PPUSH
4002: LD_INT 35
4004: PPUSH
4005: LD_INT 24
4007: PPUSH
4008: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4012: LD_ADDR_EXP 19
4016: PUSH
4017: LD_EXP 19
4021: PUSH
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 25
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 72
4041: UNION
4042: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4043: LD_INT 22
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 4
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: PUSH
4072: LD_INT 1
4074: ARRAY
4075: PPUSH
4076: CALL_OW 313
4080: PUSH
4081: LD_INT 6
4083: LESS
4084: IFFALSE 4143
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_INT 25
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 72
4105: PPUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 30
4118: PUSH
4119: LD_INT 4
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 69
4134: PUSH
4135: LD_INT 1
4137: ARRAY
4138: PPUSH
4139: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 25
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PPUSH
4158: CALL_OW 72
4162: IFFALSE 4191
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4164: LD_VAR 0 3
4168: PPUSH
4169: LD_INT 25
4171: PUSH
4172: LD_INT 4
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 72
4183: PPUSH
4184: LD_INT 3
4186: PPUSH
4187: CALL_OW 180
// end else
4191: GO 4468
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4193: LD_ADDR_VAR 0 3
4197: PUSH
4198: LD_VAR 0 3
4202: PUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 1
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 70
4220: UNION
4221: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 45
4229: PPUSH
4230: LD_INT 54
4232: PPUSH
4233: CALL_OW 111
// wait ( 0 0$3 ) ;
4237: LD_INT 105
4239: PPUSH
4240: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4244: LD_VAR 0 3
4248: PUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_INT 25
4256: PUSH
4257: LD_INT 4
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PPUSH
4264: CALL_OW 72
4268: DIFF
4269: PPUSH
4270: LD_INT 35
4272: PPUSH
4273: LD_INT 24
4275: PPUSH
4276: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4280: LD_VAR 0 3
4284: PPUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 4
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 72
4299: PPUSH
4300: LD_INT 42
4302: PPUSH
4303: LD_INT 49
4305: PPUSH
4306: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4310: LD_INT 35
4312: PPUSH
4313: CALL_OW 67
// for i in tmp do
4317: LD_ADDR_VAR 0 1
4321: PUSH
4322: LD_VAR 0 3
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4459
// if IsDead ( i ) then
4330: LD_VAR 0 1
4334: PPUSH
4335: CALL_OW 301
4339: IFFALSE 4359
// tmp := tmp diff i else
4341: LD_ADDR_VAR 0 3
4345: PUSH
4346: LD_VAR 0 3
4350: PUSH
4351: LD_VAR 0 1
4355: DIFF
4356: ST_TO_ADDR
4357: GO 4457
// if GetClass ( i ) = 1 then
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 257
4368: PUSH
4369: LD_INT 1
4371: EQUAL
4372: IFFALSE 4457
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4374: LD_VAR 0 1
4378: PPUSH
4379: CALL_OW 256
4383: PUSH
4384: LD_INT 600
4386: LESS
4387: PUSH
4388: LD_VAR 0 1
4392: PPUSH
4393: LD_INT 42
4395: PPUSH
4396: LD_INT 49
4398: PPUSH
4399: CALL_OW 297
4403: PUSH
4404: LD_INT 6
4406: GREATER
4407: AND
4408: IFFALSE 4427
// ComMoveXY ( i , 42 , 49 ) else
4410: LD_VAR 0 1
4414: PPUSH
4415: LD_INT 42
4417: PPUSH
4418: LD_INT 49
4420: PPUSH
4421: CALL_OW 111
4425: GO 4457
// if GetLives ( i ) = 1000 then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 256
4436: PUSH
4437: LD_INT 1000
4439: EQUAL
4440: IFFALSE 4457
// ComAgressiveMove ( i , 36 , 25 ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_INT 36
4449: PPUSH
4450: LD_INT 25
4452: PPUSH
4453: CALL_OW 114
// end ;
4457: GO 4327
4459: POP
4460: POP
// until not tmp ;
4461: LD_VAR 0 3
4465: NOT
4466: IFFALSE 4310
// end ; end ;
4468: PPOPN 3
4470: END
// every 0 0$1 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4471: LD_INT 7
4473: PPUSH
4474: LD_INT 22
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PPUSH
4484: CALL_OW 70
4488: PUSH
4489: LD_EXP 12
4493: NOT
4494: AND
4495: IFFALSE 4653
4497: GO 4499
4499: DISABLE
4500: LD_INT 0
4502: PPUSH
4503: PPUSH
4504: PPUSH
// begin for i := 1 to 2 do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_INT 2
4517: PUSH
4518: FOR_TO
4519: IFFALSE 4651
// begin wait ( 0 0$3 ) ;
4521: LD_INT 105
4523: PPUSH
4524: CALL_OW 67
// uc_side := 1 ;
4528: LD_ADDR_OWVAR 20
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// uc_nation := 1 ;
4536: LD_ADDR_OWVAR 21
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4544: LD_INT 1
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 2
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 4
4561: PPUSH
4562: LD_INT 90
4564: PPUSH
4565: CALL 284 0 7
// veh := CreateVehicle ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: CALL_OW 45
4578: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4579: LD_VAR 0 3
4583: PPUSH
4584: LD_INT 29
4586: PPUSH
4587: LD_INT 52
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4597: LD_INT 0
4599: PPUSH
4600: LD_INT 3
4602: PPUSH
4603: LD_INT 3
4605: PPUSH
4606: CALL_OW 380
// un := CreateHuman ;
4610: LD_ADDR_VAR 0 2
4614: PUSH
4615: CALL_OW 44
4619: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4634: LD_VAR 0 3
4638: PPUSH
4639: LD_INT 36
4641: PPUSH
4642: LD_INT 25
4644: PPUSH
4645: CALL_OW 114
// end ;
4649: GO 4518
4651: POP
4652: POP
// end ; end_of_file
4653: PPOPN 3
4655: END
// export function Action ; var i , tmp ; begin
4656: LD_INT 0
4658: PPUSH
4659: PPUSH
4660: PPUSH
// InGameOn ;
4661: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4665: LD_INT 2
4667: PPUSH
4668: LD_INT 3
4670: PPUSH
4671: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4675: LD_EXP 21
4679: PPUSH
4680: LD_INT 78
4682: PPUSH
4683: LD_INT 61
4685: PPUSH
4686: CALL_OW 111
// if Mike then
4690: LD_EXP 23
4694: IFFALSE 4711
// ComMoveXY ( Mike , 80 , 66 ) ;
4696: LD_EXP 23
4700: PPUSH
4701: LD_INT 80
4703: PPUSH
4704: LD_INT 66
4706: PPUSH
4707: CALL_OW 111
// if Givi then
4711: LD_EXP 22
4715: IFFALSE 4732
// ComMoveXY ( Givi , 82 , 66 ) ;
4717: LD_EXP 22
4721: PPUSH
4722: LD_INT 82
4724: PPUSH
4725: LD_INT 66
4727: PPUSH
4728: CALL_OW 111
// if Kamil then
4732: LD_EXP 24
4736: IFFALSE 4753
// ComMoveXY ( Kamil , 82 , 67 ) ;
4738: LD_EXP 24
4742: PPUSH
4743: LD_INT 82
4745: PPUSH
4746: LD_INT 67
4748: PPUSH
4749: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4753: LD_EXP 21
4757: PPUSH
4758: CALL_OW 87
// wait ( 0 0$2 ) ;
4762: LD_INT 70
4764: PPUSH
4765: CALL_OW 67
// if Givi and Mike then
4769: LD_EXP 22
4773: PUSH
4774: LD_EXP 23
4778: AND
4779: IFFALSE 5225
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4781: LD_EXP 22
4785: PUSH
4786: LD_EXP 23
4790: PUSH
4791: LD_EXP 24
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: PPUSH
4801: LD_EXP 21
4805: PPUSH
4806: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4810: LD_EXP 21
4814: PPUSH
4815: LD_EXP 22
4819: PPUSH
4820: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4824: LD_EXP 22
4828: PPUSH
4829: LD_STRING DG-1-start
4831: PPUSH
4832: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4836: LD_EXP 21
4840: PPUSH
4841: LD_STRING DH-1-start
4843: PPUSH
4844: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4848: LD_EXP 23
4852: PPUSH
4853: LD_EXP 21
4857: PPUSH
4858: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4862: LD_EXP 21
4866: PPUSH
4867: LD_EXP 23
4871: PPUSH
4872: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4876: LD_EXP 23
4880: PPUSH
4881: LD_STRING DM-1-start
4883: PPUSH
4884: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4888: LD_EXP 21
4892: PPUSH
4893: LD_STRING DH-2-start
4895: PPUSH
4896: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4900: LD_EXP 23
4904: PPUSH
4905: LD_STRING DM-2-start
4907: PPUSH
4908: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4912: LD_EXP 22
4916: PPUSH
4917: LD_STRING DG-2-start
4919: PPUSH
4920: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4924: LD_EXP 23
4928: PPUSH
4929: LD_EXP 22
4933: PPUSH
4934: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4938: LD_EXP 21
4942: PPUSH
4943: LD_EXP 23
4947: PPUSH
4948: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4952: LD_EXP 23
4956: PPUSH
4957: LD_STRING DM-3-start
4959: PPUSH
4960: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4964: LD_EXP 21
4968: PPUSH
4969: LD_STRING DH-3-start
4971: PPUSH
4972: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4976: LD_EXP 21
4980: PUSH
4981: LD_EXP 23
4985: PUSH
4986: LD_EXP 22
4990: PUSH
4991: LD_EXP 24
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: PPUSH
5002: LD_INT 84
5004: PPUSH
5005: LD_INT 51
5007: PPUSH
5008: CALL_OW 111
// wait ( 0 0$2 ) ;
5012: LD_INT 70
5014: PPUSH
5015: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5019: LD_EXP 22
5023: PPUSH
5024: LD_STRING DG-3-start
5026: PPUSH
5027: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5031: LD_EXP 21
5035: PUSH
5036: LD_EXP 23
5040: PUSH
5041: LD_EXP 22
5045: PUSH
5046: LD_EXP 24
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5061: LD_EXP 21
5065: PPUSH
5066: LD_EXP 22
5070: PPUSH
5071: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5075: LD_EXP 22
5079: PUSH
5080: LD_EXP 23
5084: PUSH
5085: LD_EXP 24
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: PPUSH
5095: LD_EXP 21
5099: PPUSH
5100: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5104: LD_EXP 21
5108: PPUSH
5109: LD_STRING DH-4-start
5111: PPUSH
5112: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5116: LD_EXP 22
5120: PPUSH
5121: LD_STRING DG-4-start
5123: PPUSH
5124: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5128: LD_EXP 21
5132: PPUSH
5133: LD_STRING DH-5-start
5135: PPUSH
5136: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5140: LD_EXP 22
5144: PPUSH
5145: LD_STRING DG-5-start
5147: PPUSH
5148: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5152: LD_EXP 21
5156: PPUSH
5157: LD_STRING DH-6-start
5159: PPUSH
5160: CALL_OW 88
// Say ( Mike , DM-6-start ) ;
5164: LD_EXP 23
5168: PPUSH
5169: LD_STRING DM-6-start
5171: PPUSH
5172: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5176: LD_EXP 21
5180: PUSH
5181: LD_EXP 22
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_EXP 23
5194: PPUSH
5195: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5199: LD_EXP 22
5203: PPUSH
5204: LD_STRING DG-6-start
5206: PPUSH
5207: CALL_OW 88
// Say ( Heike , DH-7-start ) ;
5211: LD_EXP 21
5215: PPUSH
5216: LD_STRING DH-7-start
5218: PPUSH
5219: CALL_OW 88
// end else
5223: GO 5947
// if not Mike and Givi then
5225: LD_EXP 23
5229: NOT
5230: PUSH
5231: LD_EXP 22
5235: AND
5236: IFFALSE 5581
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5238: LD_EXP 22
5242: PUSH
5243: LD_EXP 24
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: LD_EXP 21
5256: PPUSH
5257: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5261: LD_EXP 21
5265: PPUSH
5266: LD_EXP 22
5270: PPUSH
5271: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5275: LD_EXP 22
5279: PPUSH
5280: LD_STRING DG-1-start-c
5282: PPUSH
5283: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5287: LD_EXP 21
5291: PPUSH
5292: LD_STRING DH-1-start-c
5294: PPUSH
5295: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5299: LD_EXP 22
5303: PPUSH
5304: LD_STRING DG-2-start-c
5306: PPUSH
5307: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5311: LD_EXP 21
5315: PPUSH
5316: LD_STRING DH-2-start-c
5318: PPUSH
5319: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5323: LD_EXP 22
5327: PPUSH
5328: LD_STRING DG-3-start-c
5330: PPUSH
5331: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5335: LD_EXP 21
5339: PPUSH
5340: LD_INT 83
5342: PPUSH
5343: LD_INT 56
5345: PPUSH
5346: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5350: LD_EXP 22
5354: PPUSH
5355: LD_INT 83
5357: PPUSH
5358: LD_INT 59
5360: PPUSH
5361: CALL_OW 111
// if Kamil then
5365: LD_EXP 24
5369: IFFALSE 5386
// ComMoveXY ( Kamil , 80 , 58 ) ;
5371: LD_EXP 24
5375: PPUSH
5376: LD_INT 80
5378: PPUSH
5379: LD_INT 58
5381: PPUSH
5382: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5386: LD_EXP 21
5390: PPUSH
5391: LD_EXP 22
5395: PPUSH
5396: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5400: LD_EXP 22
5404: PUSH
5405: LD_EXP 24
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PPUSH
5414: LD_EXP 21
5418: PPUSH
5419: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5423: LD_EXP 21
5427: PPUSH
5428: LD_STRING DH-3-start-c
5430: PPUSH
5431: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5435: LD_EXP 22
5439: PPUSH
5440: LD_STRING DG-4-start-c
5442: PPUSH
5443: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5447: LD_EXP 21
5451: PPUSH
5452: LD_STRING DH-5-start-c
5454: PPUSH
5455: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5459: LD_EXP 22
5463: PPUSH
5464: LD_STRING DG-5-start-c
5466: PPUSH
5467: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5471: LD_EXP 21
5475: PPUSH
5476: LD_STRING DH-6-start-c
5478: PPUSH
5479: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5483: LD_EXP 22
5487: PPUSH
5488: LD_STRING DG-6-start-c
5490: PPUSH
5491: CALL_OW 88
// if Kamil then
5495: LD_EXP 24
5499: IFFALSE 5555
// begin ComTurnUnit ( Kamil , Heike ) ;
5501: LD_EXP 24
5505: PPUSH
5506: LD_EXP 21
5510: PPUSH
5511: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5515: LD_EXP 24
5519: PPUSH
5520: LD_STRING DKam-1-start-c
5522: PPUSH
5523: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5527: LD_EXP 22
5531: PPUSH
5532: LD_EXP 24
5536: PPUSH
5537: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5541: LD_EXP 22
5545: PPUSH
5546: LD_STRING DG-7-start-c
5548: PPUSH
5549: CALL_OW 88
// end else
5553: GO 5579
// begin Say ( Givi , DG-8-start-c ) ;
5555: LD_EXP 22
5559: PPUSH
5560: LD_STRING DG-8-start-c
5562: PPUSH
5563: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5567: LD_EXP 21
5571: PPUSH
5572: LD_STRING DH-7-start-c
5574: PPUSH
5575: CALL_OW 88
// end ; end else
5579: GO 5947
// if not Givi and Mike then
5581: LD_EXP 22
5585: NOT
5586: PUSH
5587: LD_EXP 23
5591: AND
5592: IFFALSE 5851
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5594: LD_EXP 23
5598: PUSH
5599: LD_EXP 24
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PPUSH
5608: LD_EXP 21
5612: PPUSH
5613: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5617: LD_EXP 21
5621: PPUSH
5622: LD_EXP 23
5626: PPUSH
5627: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5631: LD_EXP 23
5635: PPUSH
5636: LD_STRING DM-1-start-b
5638: PPUSH
5639: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5643: LD_EXP 21
5647: PPUSH
5648: LD_STRING DH-1-start-b
5650: PPUSH
5651: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5655: LD_EXP 23
5659: PPUSH
5660: LD_STRING DM-2-start-b
5662: PPUSH
5663: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5667: LD_EXP 21
5671: PPUSH
5672: LD_STRING DH-2-start-b
5674: PPUSH
5675: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5679: LD_EXP 23
5683: PPUSH
5684: LD_STRING DM-3-start-b
5686: PPUSH
5687: CALL_OW 88
// if Kamil then
5691: LD_EXP 24
5695: IFFALSE 5712
// ComMoveXY ( Kamil , 80 , 58 ) ;
5697: LD_EXP 24
5701: PPUSH
5702: LD_INT 80
5704: PPUSH
5705: LD_INT 58
5707: PPUSH
5708: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5712: LD_EXP 21
5716: PPUSH
5717: LD_INT 83
5719: PPUSH
5720: LD_INT 56
5722: PPUSH
5723: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5727: LD_EXP 23
5731: PPUSH
5732: LD_INT 83
5734: PPUSH
5735: LD_INT 59
5737: PPUSH
5738: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5742: LD_EXP 21
5746: PPUSH
5747: LD_EXP 23
5751: PPUSH
5752: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5756: LD_EXP 24
5760: PUSH
5761: LD_EXP 23
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: LD_EXP 21
5774: PPUSH
5775: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5779: LD_EXP 21
5783: PPUSH
5784: LD_STRING DH-3-start-b
5786: PPUSH
5787: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5791: LD_EXP 23
5795: PPUSH
5796: LD_STRING DM-4-start-b
5798: PPUSH
5799: CALL_OW 88
// if Kamil then
5803: LD_EXP 24
5807: IFFALSE 5837
// begin ComTurnUnit ( Kamil , Heike ) ;
5809: LD_EXP 24
5813: PPUSH
5814: LD_EXP 21
5818: PPUSH
5819: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5823: LD_EXP 24
5827: PPUSH
5828: LD_STRING DKam-1-start-c
5830: PPUSH
5831: CALL_OW 88
// end else
5835: GO 5849
// begin Say ( Mike , DM-5-start-b ) ;
5837: LD_EXP 23
5841: PPUSH
5842: LD_STRING DM-5-start-b
5844: PPUSH
5845: CALL_OW 88
// end ; end else
5849: GO 5947
// if Kamil then
5851: LD_EXP 24
5855: IFFALSE 5935
// begin AddComTurnUnit ( Heike , Kamil ) ;
5857: LD_EXP 21
5861: PPUSH
5862: LD_EXP 24
5866: PPUSH
5867: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5871: LD_EXP 24
5875: PPUSH
5876: LD_EXP 21
5880: PPUSH
5881: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5885: LD_EXP 21
5889: PPUSH
5890: LD_STRING DH-1-start-f
5892: PPUSH
5893: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5897: LD_EXP 24
5901: PPUSH
5902: LD_STRING DKam-1-start-f
5904: PPUSH
5905: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5909: LD_EXP 21
5913: PPUSH
5914: LD_STRING DH-2-start-f
5916: PPUSH
5917: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
5921: LD_EXP 24
5925: PPUSH
5926: LD_STRING DKam-2-start-f
5928: PPUSH
5929: CALL_OW 88
// end else
5933: GO 5947
// begin Say ( Heike , DH-1-start-d ) ;
5935: LD_EXP 21
5939: PPUSH
5940: LD_STRING DH-1-start-d
5942: PPUSH
5943: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
5947: LD_EXP 21
5951: PUSH
5952: LD_EXP 22
5956: PUSH
5957: LD_EXP 23
5961: PUSH
5962: LD_EXP 24
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 139
// InGameOff ;
5977: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
5981: LD_STRING OEast
5983: PPUSH
5984: CALL_OW 337
// SaveForQuickRestart ;
5988: CALL_OW 22
// wait ( 0 0$20 ) ;
5992: LD_INT 700
5994: PPUSH
5995: CALL_OW 67
// SendSciToForest ;
5999: CALL 1425 0 0
// if Difficulty = 1 then
6003: LD_OWVAR 67
6007: PUSH
6008: LD_INT 1
6010: EQUAL
6011: IFFALSE 6015
// exit ;
6013: GO 6132
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6015: LD_INT 10500
6017: PUSH
6018: LD_INT 5250
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: LD_OWVAR 67
6029: PUSH
6030: LD_INT 1
6032: MINUS
6033: ARRAY
6034: PPUSH
6035: CALL_OW 67
// if usAlert then
6039: LD_EXP 9
6043: IFFALSE 6047
// exit ;
6045: GO 6132
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_INT 22
6054: PUSH
6055: LD_INT 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 69
6080: ST_TO_ADDR
// if not tmp then
6081: LD_VAR 0 3
6085: NOT
6086: IFFALSE 6090
// exit ;
6088: GO 6132
// ComExitBuilding ( tmp ) ;
6090: LD_VAR 0 3
6094: PPUSH
6095: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: LD_INT 31
6106: PPUSH
6107: LD_INT 40
6109: PPUSH
6110: LD_INT 13
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6120: LD_VAR 0 3
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 180
// end ;
6132: LD_VAR 0 1
6136: RET
// every 3 3$00 do
6137: GO 6139
6139: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6140: LD_INT 1
6142: PPUSH
6143: LD_INT 570
6145: PPUSH
6146: LD_INT 350
6148: PPUSH
6149: CALL_OW 550
// wait ( 2 2$40 ) ;
6153: LD_INT 5600
6155: PPUSH
6156: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6160: LD_INT 0
6162: PPUSH
6163: LD_INT 570
6165: PPUSH
6166: LD_INT 350
6168: PPUSH
6169: CALL_OW 550
// end ;
6173: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6174: LD_EXP 4
6178: NOT
6179: PUSH
6180: LD_INT 2
6182: PPUSH
6183: LD_EXP 25
6187: PPUSH
6188: CALL_OW 292
6192: AND
6193: IFFALSE 7128
6195: GO 6197
6197: DISABLE
6198: LD_INT 0
6200: PPUSH
6201: PPUSH
// begin aviradzeSpotted := true ;
6202: LD_ADDR_EXP 4
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6210: LD_ADDR_VAR 0 2
6214: PUSH
6215: LD_INT 22
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 69
6243: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6244: LD_EXP 21
6248: PPUSH
6249: LD_EXP 25
6253: PPUSH
6254: CALL_OW 250
6258: PPUSH
6259: LD_EXP 25
6263: PPUSH
6264: CALL_OW 251
6268: PPUSH
6269: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6273: LD_INT 35
6275: PPUSH
6276: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6280: LD_EXP 21
6284: PPUSH
6285: LD_EXP 25
6289: PPUSH
6290: CALL_OW 296
6294: PUSH
6295: LD_INT 16
6297: LESS
6298: IFFALSE 6273
// InGameOn ;
6300: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6304: LD_INT 5
6306: PPUSH
6307: LD_INT 2
6309: PPUSH
6310: CALL_OW 343
// if pepAmount > 2 then
6314: LD_VAR 0 2
6318: PUSH
6319: LD_INT 2
6321: GREATER
6322: IFFALSE 6338
// Say ( Heike , DH-1-spot ) else
6324: LD_EXP 21
6328: PPUSH
6329: LD_STRING DH-1-spot
6331: PPUSH
6332: CALL_OW 88
6336: GO 6350
// Say ( Heike , DH-1-spot-d ) ;
6338: LD_EXP 21
6342: PPUSH
6343: LD_STRING DH-1-spot-d
6345: PPUSH
6346: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6350: LD_EXP 21
6354: PPUSH
6355: LD_EXP 25
6359: PPUSH
6360: CALL_OW 250
6364: PPUSH
6365: LD_EXP 25
6369: PPUSH
6370: CALL_OW 251
6374: PPUSH
6375: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_EXP 24
6388: PUSH
6389: LD_EXP 23
6393: PUSH
6394: LD_EXP 22
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: FOR_IN
6405: IFFALSE 6444
// if GetDistUnits ( i , Aviradze ) > 7 then
6407: LD_VAR 0 1
6411: PPUSH
6412: LD_EXP 25
6416: PPUSH
6417: CALL_OW 296
6421: PUSH
6422: LD_INT 7
6424: GREATER
6425: IFFALSE 6442
// ComMoveXY ( i , 102 , 40 ) ;
6427: LD_VAR 0 1
6431: PPUSH
6432: LD_INT 102
6434: PPUSH
6435: LD_INT 40
6437: PPUSH
6438: CALL_OW 111
6442: GO 6404
6444: POP
6445: POP
// repeat wait ( 0 0$1 ) ;
6446: LD_INT 35
6448: PPUSH
6449: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6453: LD_EXP 21
6457: PPUSH
6458: LD_EXP 25
6462: PPUSH
6463: CALL_OW 296
6467: PUSH
6468: LD_INT 6
6470: LESS
6471: IFFALSE 6446
// ComTurnUnit ( Heike , Aviradze ) ;
6473: LD_EXP 21
6477: PPUSH
6478: LD_EXP 25
6482: PPUSH
6483: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6487: LD_EXP 25
6491: PUSH
6492: LD_EXP 27
6496: PUSH
6497: LD_EXP 26
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: PPUSH
6507: LD_EXP 21
6511: PPUSH
6512: CALL_OW 119
// if pepAmount > 1 then
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 1
6523: GREATER
6524: IFFALSE 6576
// begin wait ( 0 0$2 ) ;
6526: LD_INT 70
6528: PPUSH
6529: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6533: LD_EXP 24
6537: PUSH
6538: LD_EXP 23
6542: PUSH
6543: LD_EXP 22
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_EXP 25
6557: PPUSH
6558: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6562: LD_EXP 21
6566: PPUSH
6567: LD_STRING DH-2-spot
6569: PPUSH
6570: CALL_OW 88
// end else
6574: GO 6588
// Say ( Heike , DH-2-spot-d ) ;
6576: LD_EXP 21
6580: PPUSH
6581: LD_STRING DH-2-spot-d
6583: PPUSH
6584: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6588: LD_EXP 25
6592: PPUSH
6593: LD_STRING DA-2-spot
6595: PPUSH
6596: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6600: LD_EXP 21
6604: PPUSH
6605: LD_STRING DH-3-spot
6607: PPUSH
6608: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6612: LD_EXP 26
6616: PPUSH
6617: LD_EXP 21
6621: PPUSH
6622: CALL_OW 112
// ComTurnUNit ( Heike , Kaia ) ;
6626: LD_EXP 21
6630: PPUSH
6631: LD_EXP 26
6635: PPUSH
6636: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6640: LD_INT 10
6642: PPUSH
6643: CALL_OW 67
// async ;
6647: ASYNC
// Say ( Kaia , DK-3-spot ) ;
6648: LD_EXP 26
6652: PPUSH
6653: LD_STRING DK-3-spot
6655: PPUSH
6656: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
6660: LD_INT 35
6662: PPUSH
6663: CALL_OW 67
// until GetDistUnits ( Heike , Kaia ) < 4 ;
6667: LD_EXP 21
6671: PPUSH
6672: LD_EXP 26
6676: PPUSH
6677: CALL_OW 296
6681: PUSH
6682: LD_INT 4
6684: LESS
6685: IFFALSE 6660
// ComTurnUnit ( Kaia , Heike ) ;
6687: LD_EXP 26
6691: PPUSH
6692: LD_EXP 21
6696: PPUSH
6697: CALL_OW 119
// sync ;
6701: SYNC
// Say ( Heike , DH-4-spot ) ;
6702: LD_EXP 21
6706: PPUSH
6707: LD_STRING DH-4-spot
6709: PPUSH
6710: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6714: LD_INT 10
6716: PPUSH
6717: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6721: LD_EXP 21
6725: PPUSH
6726: LD_EXP 25
6730: PPUSH
6731: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6735: LD_EXP 25
6739: PPUSH
6740: LD_STRING DA-4-spot
6742: PPUSH
6743: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6747: LD_EXP 26
6751: PPUSH
6752: LD_EXP 25
6756: PPUSH
6757: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6761: LD_EXP 26
6765: PPUSH
6766: LD_STRING DK-4-spot
6768: PPUSH
6769: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6773: LD_EXP 25
6777: PPUSH
6778: LD_EXP 26
6782: PPUSH
6783: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6787: LD_EXP 25
6791: PPUSH
6792: LD_STRING DA-5-spot
6794: PPUSH
6795: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6799: LD_EXP 26
6803: PPUSH
6804: LD_STRING DK-5-spot
6806: PPUSH
6807: CALL_OW 88
// if pepAmount = 1 then
6811: LD_VAR 0 2
6815: PUSH
6816: LD_INT 1
6818: EQUAL
6819: IFFALSE 6833
// Say ( Heike , DH-5-spot-f ) ;
6821: LD_EXP 21
6825: PPUSH
6826: LD_STRING DH-5-spot-f
6828: PPUSH
6829: CALL_OW 88
// if pepAmount < 3 then
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 3
6840: LESS
6841: IFFALSE 6857
// Say ( Aviradze , DA-6-spot-f ) else
6843: LD_EXP 25
6847: PPUSH
6848: LD_STRING DA-6-spot-f
6850: PPUSH
6851: CALL_OW 88
6855: GO 6893
// if pepAmount < 4 then
6857: LD_VAR 0 2
6861: PUSH
6862: LD_INT 4
6864: LESS
6865: IFFALSE 6881
// Say ( Aviradze , DA-6-spot-c ) else
6867: LD_EXP 25
6871: PPUSH
6872: LD_STRING DA-6-spot-c
6874: PPUSH
6875: CALL_OW 88
6879: GO 6893
// Say ( Aviradze , DA-6-spot ) ;
6881: LD_EXP 25
6885: PPUSH
6886: LD_STRING DA-6-spot
6888: PPUSH
6889: CALL_OW 88
// if Kamil then
6893: LD_EXP 24
6897: IFFALSE 6911
// Say ( Kamil , DKam-6-spot ) ;
6899: LD_EXP 24
6903: PPUSH
6904: LD_STRING DKam-6-spot
6906: PPUSH
6907: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6911: LD_EXP 26
6915: PPUSH
6916: LD_STRING DK-6-spot
6918: PPUSH
6919: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6923: LD_EXP 25
6927: PPUSH
6928: LD_EXP 21
6932: PPUSH
6933: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6937: LD_EXP 25
6941: PPUSH
6942: LD_STRING DA-7-spot
6944: PPUSH
6945: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
6949: LD_EXP 21
6953: PPUSH
6954: LD_STRING DH-7-spot
6956: PPUSH
6957: CALL_OW 88
// if sciCounterKill >= 3 then
6961: LD_EXP 8
6965: PUSH
6966: LD_INT 3
6968: GREATEREQUAL
6969: IFFALSE 6995
// begin Say ( Heike , DH-7-spot-a ) ;
6971: LD_EXP 21
6975: PPUSH
6976: LD_STRING DH-7-spot-a
6978: PPUSH
6979: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
6983: LD_EXP 25
6987: PPUSH
6988: LD_STRING DA-8-spot-a
6990: PPUSH
6991: CALL_OW 88
// end ; InGameOff ;
6995: CALL_OW 9
// if sciCounterKill < 3 then
6999: LD_EXP 8
7003: PUSH
7004: LD_INT 3
7006: LESS
7007: IFFALSE 7066
// begin SetSide ( Kaia , 2 ) ;
7009: LD_EXP 26
7013: PPUSH
7014: LD_INT 2
7016: PPUSH
7017: CALL_OW 235
// ComFree ( Kaia ) ;
7021: LD_EXP 26
7025: PPUSH
7026: CALL_OW 139
// if Kamil then
7030: LD_EXP 24
7034: IFFALSE 7057
// begin ComHold ( Kamil ) ;
7036: LD_EXP 24
7040: PPUSH
7041: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7045: LD_EXP 24
7049: PPUSH
7050: LD_INT 5
7052: PPUSH
7053: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7057: LD_STRING OSci
7059: PPUSH
7060: CALL_OW 337
// end else
7064: GO 7128
// begin aviradzeQuestDone := true ;
7066: LD_ADDR_EXP 7
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// attackDeltaAllowed := true ;
7074: LD_ADDR_EXP 12
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7082: LD_STRING ODelta2
7084: PPUSH
7085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_INT 22
7096: PUSH
7097: LD_INT 5
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: FOR_IN
7110: IFFALSE 7126
// SetSide ( i , 2 ) ;
7112: LD_VAR 0 1
7116: PPUSH
7117: LD_INT 2
7119: PPUSH
7120: CALL_OW 235
7124: GO 7109
7126: POP
7127: POP
// end ; end ;
7128: PPOPN 2
7130: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7131: LD_EXP 6
7135: NOT
7136: PUSH
7137: LD_EXP 20
7141: PPUSH
7142: LD_EXP 21
7146: PPUSH
7147: CALL_OW 74
7151: PPUSH
7152: LD_EXP 21
7156: PPUSH
7157: CALL_OW 296
7161: PUSH
7162: LD_INT 8
7164: LESS
7165: AND
7166: PUSH
7167: LD_INT 2
7169: PPUSH
7170: LD_EXP 20
7174: PPUSH
7175: LD_EXP 21
7179: PPUSH
7180: CALL_OW 74
7184: PPUSH
7185: CALL_OW 292
7189: AND
7190: PUSH
7191: LD_INT 22
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: PUSH
7220: LD_INT 1
7222: GREATER
7223: AND
7224: PUSH
7225: LD_EXP 4
7229: NOT
7230: AND
7231: IFFALSE 7275
7233: GO 7235
7235: DISABLE
// begin sciSpotted := true ;
7236: LD_ADDR_EXP 6
7240: PUSH
7241: LD_INT 1
7243: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7244: LD_EXP 20
7248: PPUSH
7249: LD_EXP 21
7253: PPUSH
7254: CALL_OW 74
7258: PPUSH
7259: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7263: LD_EXP 21
7267: PPUSH
7268: LD_STRING DH-1-sci
7270: PPUSH
7271: CALL_OW 88
// end ;
7275: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7276: LD_EXP 4
7280: PUSH
7281: LD_EXP 6
7285: NOT
7286: AND
7287: PUSH
7288: LD_INT 2
7290: PPUSH
7291: LD_EXP 20
7295: PPUSH
7296: LD_EXP 21
7300: PPUSH
7301: CALL_OW 74
7305: PPUSH
7306: CALL_OW 292
7310: AND
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_INT 2
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 1
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PPUSH
7336: CALL_OW 69
7340: PUSH
7341: LD_INT 1
7343: GREATER
7344: AND
7345: PUSH
7346: LD_EXP 4
7350: AND
7351: PUSH
7352: LD_EXP 7
7356: NOT
7357: AND
7358: IFFALSE 7499
7360: GO 7362
7362: DISABLE
7363: LD_INT 0
7365: PPUSH
// begin sciSpotted := true ;
7366: LD_ADDR_EXP 6
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7374: LD_ADDR_VAR 0 1
7378: PUSH
7379: LD_EXP 20
7383: PPUSH
7384: LD_EXP 21
7388: PPUSH
7389: CALL_OW 74
7393: ST_TO_ADDR
// DialogueOn ;
7394: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7398: LD_VAR 0 1
7402: PPUSH
7403: CALL_OW 250
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 251
7417: PPUSH
7418: LD_INT 2
7420: PPUSH
7421: LD_INT 3
7423: NEG
7424: PPUSH
7425: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7429: LD_VAR 0 1
7433: PPUSH
7434: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7438: LD_EXP 21
7442: PPUSH
7443: LD_STRING DH-1-sci-a
7445: PPUSH
7446: CALL_OW 88
// if Mike then
7450: LD_EXP 23
7454: IFFALSE 7468
// Say ( Mike , DM-1-sci-a ) ;
7456: LD_EXP 23
7460: PPUSH
7461: LD_STRING DM-1-sci-a
7463: PPUSH
7464: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 250
7477: PPUSH
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 251
7487: PPUSH
7488: LD_INT 2
7490: PPUSH
7491: CALL_OW 331
// DialogueOff ;
7495: CALL_OW 7
// end ;
7499: PPOPN 1
7501: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7502: LD_EXP 4
7506: PUSH
7507: LD_EXP 8
7511: PUSH
7512: LD_INT 3
7514: GREATEREQUAL
7515: PUSH
7516: LD_EXP 20
7520: NOT
7521: OR
7522: AND
7523: PUSH
7524: LD_EXP 7
7528: NOT
7529: AND
7530: IFFALSE 7573
7532: GO 7534
7534: DISABLE
// begin aviradzeQuestDone := true ;
7535: LD_ADDR_EXP 7
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7543: LD_EXP 21
7547: PPUSH
7548: LD_STRING DH-1-quest-done
7550: PPUSH
7551: CALL_OW 88
// if Givi then
7555: LD_EXP 22
7559: IFFALSE 7573
// Say ( Givi , DG-1-quest-done ) ;
7561: LD_EXP 22
7565: PPUSH
7566: LD_STRING DG-1-quest-done
7568: PPUSH
7569: CALL_OW 88
// end ;
7573: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7574: LD_INT 5
7576: PPUSH
7577: LD_EXP 21
7581: PPUSH
7582: CALL_OW 292
7586: PUSH
7587: LD_EXP 21
7591: PPUSH
7592: LD_EXP 25
7596: PPUSH
7597: CALL_OW 296
7601: PUSH
7602: LD_INT 6
7604: LESS
7605: AND
7606: PUSH
7607: LD_EXP 7
7611: AND
7612: PUSH
7613: LD_EXP 12
7617: NOT
7618: AND
7619: IFFALSE 7757
7621: GO 7623
7623: DISABLE
7624: LD_INT 0
7626: PPUSH
// begin attackDeltaAllowed := true ;
7627: LD_ADDR_EXP 12
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// InGameOn ;
7635: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7639: LD_EXP 21
7643: PPUSH
7644: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7648: LD_INT 10
7650: PPUSH
7651: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
7655: LD_EXP 25
7659: PPUSH
7660: LD_EXP 21
7664: PPUSH
7665: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
7669: LD_EXP 21
7673: PPUSH
7674: LD_EXP 25
7678: PPUSH
7679: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
7683: LD_EXP 21
7687: PPUSH
7688: LD_STRING DH-1-return
7690: PPUSH
7691: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
7695: LD_EXP 25
7699: PPUSH
7700: LD_STRING DA-1-return
7702: PPUSH
7703: CALL_OW 88
// InGameOff ;
7707: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
7711: LD_STRING ODelta
7713: PPUSH
7714: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7718: LD_ADDR_VAR 0 1
7722: PUSH
7723: LD_INT 22
7725: PUSH
7726: LD_INT 5
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 69
7737: PUSH
7738: FOR_IN
7739: IFFALSE 7755
// SetSide ( i , 2 ) ;
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 2
7748: PPUSH
7749: CALL_OW 235
7753: GO 7738
7755: POP
7756: POP
// end ;
7757: PPOPN 1
7759: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
7760: LD_EXP 12
7764: PUSH
7765: LD_EXP 28
7769: PPUSH
7770: CALL_OW 302
7774: AND
7775: PUSH
7776: LD_INT 1
7778: PPUSH
7779: CALL_OW 255
7783: PUSH
7784: LD_INT 1
7786: EQUAL
7787: AND
7788: PUSH
7789: LD_EXP 18
7793: PPUSH
7794: CALL_OW 302
7798: AND
7799: PUSH
7800: LD_EXP 9
7804: NOT
7805: AND
7806: IFFALSE 9022
7808: GO 7810
7810: DISABLE
7811: LD_INT 0
7813: PPUSH
7814: PPUSH
7815: PPUSH
// begin trap := 0 ;
7816: LD_ADDR_EXP 15
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// wait ( 0 0$15 ) ;
7824: LD_INT 525
7826: PPUSH
7827: CALL_OW 67
// DialogueOn ;
7831: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
7835: LD_EXP 28
7839: PPUSH
7840: LD_STRING DMar-1-radio
7842: PPUSH
7843: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
7847: LD_EXP 21
7851: PPUSH
7852: LD_STRING DH-1-radio
7854: PPUSH
7855: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
7859: LD_EXP 28
7863: PPUSH
7864: LD_STRING DMar-2-radio
7866: PPUSH
7867: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
7871: LD_EXP 21
7875: PPUSH
7876: LD_STRING DH-2-radio
7878: PPUSH
7879: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
7883: LD_EXP 24
7887: PPUSH
7888: CALL_OW 302
7892: PUSH
7893: LD_EXP 27
7897: PPUSH
7898: CALL_OW 302
7902: OR
7903: IFFALSE 9022
// begin case Query ( Q1Trap ) of 1 :
7905: LD_STRING Q1Trap
7907: PPUSH
7908: CALL_OW 97
7912: PUSH
7913: LD_INT 1
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 8115
7921: POP
// begin if IsOk ( Kamil ) then
7922: LD_EXP 24
7926: PPUSH
7927: CALL_OW 302
7931: IFFALSE 8010
// begin Say ( Kamil , DKam-2-radio ) ;
7933: LD_EXP 24
7937: PPUSH
7938: LD_STRING DKam-2-radio
7940: PPUSH
7941: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
7945: LD_EXP 24
7949: PPUSH
7950: LD_STRING DKam-3-radio
7952: PPUSH
7953: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
7957: LD_EXP 18
7961: PPUSH
7962: LD_STRING DDelta-3-radio
7964: PPUSH
7965: CALL_OW 94
// dwait ( 0 0$01 ) ;
7969: LD_INT 35
7971: PPUSH
7972: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
7976: LD_EXP 21
7980: PPUSH
7981: LD_STRING DH-3-radio
7983: PPUSH
7984: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
7988: LD_EXP 24
7992: PPUSH
7993: LD_STRING DKam-4-radio
7995: PPUSH
7996: CALL_OW 88
// trap := 1 ;
8000: LD_ADDR_EXP 15
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// end else
8008: GO 8109
// begin Say ( Sophia , DS-1-radio ) ;
8010: LD_EXP 27
8014: PPUSH
8015: LD_STRING DS-1-radio
8017: PPUSH
8018: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8022: LD_EXP 27
8026: PPUSH
8027: LD_STRING DS-2-radio
8029: PPUSH
8030: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8034: LD_EXP 18
8038: PPUSH
8039: LD_STRING DDelta-2-radio-s
8041: PPUSH
8042: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8046: LD_EXP 27
8050: PPUSH
8051: LD_STRING DS-3-radio
8053: PPUSH
8054: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8058: LD_EXP 18
8062: PPUSH
8063: LD_STRING DDelta-3-radio-s
8065: PPUSH
8066: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8070: LD_EXP 27
8074: PPUSH
8075: LD_STRING DS-4-radio-s
8077: PPUSH
8078: CALL_OW 88
// dwait ( 0 0$01 ) ;
8082: LD_INT 35
8084: PPUSH
8085: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8089: LD_EXP 21
8093: PPUSH
8094: LD_STRING DH-1-trap
8096: PPUSH
8097: CALL_OW 88
// trap := 0 ;
8101: LD_ADDR_EXP 15
8105: PUSH
8106: LD_INT 0
8108: ST_TO_ADDR
// end ; DialogueOff ;
8109: CALL_OW 7
// end ; 2 :
8113: GO 8133
8115: LD_INT 2
8117: DOUBLE
8118: EQUAL
8119: IFTRUE 8123
8121: GO 8132
8123: POP
// begin DialogueOff ;
8124: CALL_OW 7
// exit ;
8128: GO 9022
// end ; end ;
8130: GO 8133
8132: POP
// if trap = 1 then
8133: LD_EXP 15
8137: PUSH
8138: LD_INT 1
8140: EQUAL
8141: IFFALSE 8593
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8143: LD_INT 64
8145: PPUSH
8146: LD_INT 32
8148: PPUSH
8149: LD_INT 2
8151: PPUSH
8152: LD_INT 8
8154: PPUSH
8155: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8159: LD_INT 64
8161: PPUSH
8162: LD_INT 32
8164: PPUSH
8165: CALL_OW 84
// tmp := [ ] ;
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: EMPTY
8175: ST_TO_ADDR
// k := 3 ;
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: LD_INT 3
8183: ST_TO_ADDR
// if usForces < 3 then
8184: LD_EXP 19
8188: PUSH
8189: LD_INT 3
8191: LESS
8192: IFFALSE 8204
// k := usForces ;
8194: LD_ADDR_VAR 0 2
8198: PUSH
8199: LD_EXP 19
8203: ST_TO_ADDR
// for i := 1 to k do
8204: LD_ADDR_VAR 0 1
8208: PUSH
8209: DOUBLE
8210: LD_INT 1
8212: DEC
8213: ST_TO_ADDR
8214: LD_VAR 0 2
8218: PUSH
8219: FOR_TO
8220: IFFALSE 8275
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: LD_VAR 0 3
8231: PPUSH
8232: LD_VAR 0 3
8236: PUSH
8237: LD_INT 1
8239: PLUS
8240: PPUSH
8241: LD_EXP 19
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 1
8254: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8255: LD_ADDR_EXP 19
8259: PUSH
8260: LD_EXP 19
8264: PPUSH
8265: LD_INT 1
8267: PPUSH
8268: CALL_OW 3
8272: ST_TO_ADDR
// end ;
8273: GO 8219
8275: POP
8276: POP
// usPatrol := tmp ;
8277: LD_ADDR_EXP 14
8281: PUSH
8282: LD_VAR 0 3
8286: ST_TO_ADDR
// for i in tmp do
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_VAR 0 3
8296: PUSH
8297: FOR_IN
8298: IFFALSE 8428
// begin if IsInUnit ( i ) then
8300: LD_VAR 0 1
8304: PPUSH
8305: CALL_OW 310
8309: IFFALSE 8320
// ComExitBuilding ( i ) ;
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8320: LD_VAR 0 1
8324: PPUSH
8325: LD_INT 63
8327: PPUSH
8328: LD_INT 31
8330: PPUSH
8331: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8335: LD_VAR 0 1
8339: PPUSH
8340: LD_INT 70
8342: PPUSH
8343: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 103
8354: PPUSH
8355: LD_INT 43
8357: PPUSH
8358: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8362: LD_VAR 0 1
8366: PPUSH
8367: LD_INT 105
8369: PPUSH
8370: CALL_OW 202
// if Difficulty > 1 then
8374: LD_OWVAR 67
8378: PUSH
8379: LD_INT 1
8381: GREATER
8382: IFFALSE 8399
// AddComAgressiveMove ( i , 114 , 69 ) ;
8384: LD_VAR 0 1
8388: PPUSH
8389: LD_INT 114
8391: PPUSH
8392: LD_INT 69
8394: PPUSH
8395: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8399: LD_VAR 0 1
8403: PPUSH
8404: LD_INT 105
8406: PPUSH
8407: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_INT 42
8418: PPUSH
8419: LD_INT 20
8421: PPUSH
8422: CALL_OW 174
// end ;
8426: GO 8297
8428: POP
8429: POP
// wait ( 0 0$5 ) ;
8430: LD_INT 175
8432: PPUSH
8433: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8437: LD_INT 64
8439: PPUSH
8440: LD_INT 32
8442: PPUSH
8443: LD_INT 2
8445: PPUSH
8446: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8450: LD_INT 35
8452: PPUSH
8453: CALL_OW 67
// for i in tmp do
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: LD_VAR 0 3
8466: PUSH
8467: FOR_IN
8468: IFFALSE 8499
// if IsDead ( i ) then
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 301
8479: IFFALSE 8497
// tmp := tmp diff i ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_VAR 0 3
8490: PUSH
8491: LD_VAR 0 1
8495: DIFF
8496: ST_TO_ADDR
8497: GO 8467
8499: POP
8500: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8501: LD_VAR 0 3
8505: NOT
8506: PUSH
8507: LD_VAR 0 3
8511: PPUSH
8512: LD_INT 95
8514: PUSH
8515: LD_INT 7
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 3
8524: PUSH
8525: LD_INT 60
8527: PUSH
8528: EMPTY
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 72
8543: PUSH
8544: LD_VAR 0 3
8548: EQUAL
8549: OR
8550: IFFALSE 8450
// if tmp then
8552: LD_VAR 0 3
8556: IFFALSE 8583
// begin usPatrol := [ ] ;
8558: LD_ADDR_EXP 14
8562: PUSH
8563: EMPTY
8564: ST_TO_ADDR
// usForces := usForces union tmp ;
8565: LD_ADDR_EXP 19
8569: PUSH
8570: LD_EXP 19
8574: PUSH
8575: LD_VAR 0 3
8579: UNION
8580: ST_TO_ADDR
// end else
8581: GO 8591
// trickyMove := true ;
8583: LD_ADDR_EXP 13
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// end else
8591: GO 9022
// begin tmp := [ ] ;
8593: LD_ADDR_VAR 0 3
8597: PUSH
8598: EMPTY
8599: ST_TO_ADDR
// k := 4 ;
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: LD_INT 4
8607: ST_TO_ADDR
// if usForces < 4 then
8608: LD_EXP 19
8612: PUSH
8613: LD_INT 4
8615: LESS
8616: IFFALSE 8628
// k := usForces ;
8618: LD_ADDR_VAR 0 2
8622: PUSH
8623: LD_EXP 19
8627: ST_TO_ADDR
// for i := 1 to k do
8628: LD_ADDR_VAR 0 1
8632: PUSH
8633: DOUBLE
8634: LD_INT 1
8636: DEC
8637: ST_TO_ADDR
8638: LD_VAR 0 2
8642: PUSH
8643: FOR_TO
8644: IFFALSE 8699
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 3
8655: PPUSH
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 1
8663: PLUS
8664: PPUSH
8665: LD_EXP 19
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PPUSH
8674: CALL_OW 1
8678: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8679: LD_ADDR_EXP 19
8683: PUSH
8684: LD_EXP 19
8688: PPUSH
8689: LD_INT 1
8691: PPUSH
8692: CALL_OW 3
8696: ST_TO_ADDR
// end ;
8697: GO 8643
8699: POP
8700: POP
// if Lynch then
8701: LD_EXP 18
8705: IFFALSE 8723
// tmp := tmp ^ Lynch ;
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: LD_VAR 0 3
8716: PUSH
8717: LD_EXP 18
8721: ADD
8722: ST_TO_ADDR
// usPatrol := tmp ;
8723: LD_ADDR_EXP 14
8727: PUSH
8728: LD_VAR 0 3
8732: ST_TO_ADDR
// for i in tmp do
8733: LD_ADDR_VAR 0 1
8737: PUSH
8738: LD_VAR 0 3
8742: PUSH
8743: FOR_IN
8744: IFFALSE 8837
// begin if IsInUnit ( i ) then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 310
8755: IFFALSE 8766
// ComExitBuilding ( i ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
8766: LD_VAR 0 1
8770: PPUSH
8771: LD_INT 69
8773: PPUSH
8774: LD_INT 15
8776: PPUSH
8777: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8781: LD_VAR 0 1
8785: PPUSH
8786: LD_INT 700
8788: PPUSH
8789: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_INT 55
8800: PPUSH
8801: LD_INT 43
8803: PPUSH
8804: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
8808: LD_VAR 0 1
8812: PPUSH
8813: LD_INT 700
8815: PPUSH
8816: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_INT 42
8827: PPUSH
8828: LD_INT 20
8830: PPUSH
8831: CALL_OW 174
// end ;
8835: GO 8743
8837: POP
8838: POP
// repeat wait ( 0 0$1 ) ;
8839: LD_INT 35
8841: PPUSH
8842: CALL_OW 67
// for i in tmp do
8846: LD_ADDR_VAR 0 1
8850: PUSH
8851: LD_VAR 0 3
8855: PUSH
8856: FOR_IN
8857: IFFALSE 8888
// if IsDead ( i ) then
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 301
8868: IFFALSE 8886
// tmp := tmp diff i ;
8870: LD_ADDR_VAR 0 3
8874: PUSH
8875: LD_VAR 0 3
8879: PUSH
8880: LD_VAR 0 1
8884: DIFF
8885: ST_TO_ADDR
8886: GO 8856
8888: POP
8889: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8890: LD_VAR 0 3
8894: NOT
8895: PUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: LD_INT 95
8903: PUSH
8904: LD_INT 7
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: LD_INT 60
8916: PUSH
8917: EMPTY
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PPUSH
8928: CALL_OW 72
8932: PUSH
8933: LD_VAR 0 3
8937: EQUAL
8938: OR
8939: IFFALSE 8839
// if not tmp then
8941: LD_VAR 0 3
8945: NOT
8946: IFFALSE 8958
// trickyMove := true else
8948: LD_ADDR_EXP 13
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
8956: GO 8965
// usPatrol := [ ] ;
8958: LD_ADDR_EXP 14
8962: PUSH
8963: EMPTY
8964: ST_TO_ADDR
// if tmp diff Lynch then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_EXP 18
8974: DIFF
8975: IFFALSE 8999
// usForces := usForces union ( tmp diff Lynch ) ;
8977: LD_ADDR_EXP 19
8981: PUSH
8982: LD_EXP 19
8986: PUSH
8987: LD_VAR 0 3
8991: PUSH
8992: LD_EXP 18
8996: DIFF
8997: UNION
8998: ST_TO_ADDR
// if IsOk ( Lynch ) then
8999: LD_EXP 18
9003: PPUSH
9004: CALL_OW 302
9008: IFFALSE 9022
// ComEnterUnit ( Lynch , Delta ) ;
9010: LD_EXP 18
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: CALL_OW 120
// end ; end ; end ;
9022: PPOPN 3
9024: END
// every 0 0$1 trigger trickyMove do
9025: LD_EXP 13
9029: IFFALSE 9041
9031: GO 9033
9033: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9034: LD_STRING ACH_TRAP
9036: PPUSH
9037: CALL_OW 543
9041: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9042: LD_INT 22
9044: PUSH
9045: LD_INT 2
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 23
9054: PUSH
9055: LD_INT 1
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: LD_INT 21
9064: PUSH
9065: LD_INT 2
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: IFFALSE 9093
9083: GO 9085
9085: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9086: LD_STRING ACH_SCRAP
9088: PPUSH
9089: CALL_OW 543
9093: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) do
9094: LD_EXP 14
9098: PPUSH
9099: LD_INT 101
9101: PUSH
9102: LD_INT 2
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PPUSH
9109: CALL_OW 72
9113: IFFALSE 9246
9115: GO 9117
9117: DISABLE
// begin if not trap then
9118: LD_EXP 15
9122: NOT
9123: IFFALSE 9151
// begin Say ( Heike , DH-2-trap ) ;
9125: LD_EXP 21
9129: PPUSH
9130: LD_STRING DH-2-trap
9132: PPUSH
9133: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9137: LD_EXP 23
9141: PPUSH
9142: LD_STRING DM-2-trap
9144: PPUSH
9145: CALL_OW 88
// end else
9149: GO 9163
// begin Say ( Heike , DH-1-trap-a ) ;
9151: LD_EXP 21
9155: PPUSH
9156: LD_STRING DH-1-trap-a
9158: PPUSH
9159: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9163: LD_INT 35
9165: PPUSH
9166: CALL_OW 67
// until trickyMove ;
9170: LD_EXP 13
9174: IFFALSE 9163
// Say ( Heike , DH-3-trap ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-3-trap
9183: PPUSH
9184: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9188: LD_EXP 22
9192: PPUSH
9193: CALL_OW 302
9197: PUSH
9198: LD_EXP 26
9202: PPUSH
9203: CALL_OW 302
9207: AND
9208: IFFALSE 9246
// begin Say ( Givi , DG-3-trap ) ;
9210: LD_EXP 22
9214: PPUSH
9215: LD_STRING DG-3-trap
9217: PPUSH
9218: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9222: LD_EXP 26
9226: PPUSH
9227: LD_STRING DK-3-trap
9229: PPUSH
9230: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9234: LD_EXP 22
9238: PPUSH
9239: LD_STRING DG-4-trap
9241: PPUSH
9242: CALL_OW 88
// end ; end ;
9246: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 255
9254: PUSH
9255: LD_INT 2
9257: EQUAL
9258: PUSH
9259: LD_EXP 12
9263: AND
9264: IFFALSE 9423
9266: GO 9268
9268: DISABLE
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
// begin if not IsOk ( Kaia ) then
9273: LD_EXP 26
9277: PPUSH
9278: CALL_OW 302
9282: NOT
9283: IFFALSE 9287
// exit ;
9285: GO 9423
// if tick < 5 5$00 then
9287: LD_OWVAR 1
9291: PUSH
9292: LD_INT 10500
9294: LESS
9295: IFFALSE 9304
// SetAchievement ( ACH_DELTA ) ;
9297: LD_STRING ACH_DELTA
9299: PPUSH
9300: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9304: LD_EXP 26
9308: PPUSH
9309: LD_STRING DK-1-capture
9311: PPUSH
9312: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9316: LD_EXP 21
9320: PPUSH
9321: LD_STRING DH-1-capture
9323: PPUSH
9324: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9328: LD_ADDR_VAR 0 2
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 25
9345: PUSH
9346: LD_INT 1
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: ST_TO_ADDR
// if not tmp then
9362: LD_VAR 0 2
9366: NOT
9367: IFFALSE 9371
// exit ;
9369: GO 9423
// for i in tmp do
9371: LD_ADDR_VAR 0 1
9375: PUSH
9376: LD_VAR 0 2
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9421
// begin if IsInUnit ( i ) then
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 310
9393: IFFALSE 9404
// ComExitBuilding ( i ) ;
9395: LD_VAR 0 1
9399: PPUSH
9400: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9404: LD_VAR 0 1
9408: PPUSH
9409: LD_INT 38
9411: PPUSH
9412: LD_INT 23
9414: PPUSH
9415: CALL_OW 174
// end ;
9419: GO 9381
9421: POP
9422: POP
// end ;
9423: PPOPN 2
9425: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9426: LD_INT 3
9428: PPUSH
9429: CALL_OW 255
9433: PUSH
9434: LD_INT 2
9436: EQUAL
9437: PUSH
9438: LD_EXP 12
9442: AND
9443: IFFALSE 9475
9445: GO 9447
9447: DISABLE
// begin DialogueOn ;
9448: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9452: LD_EXP 25
9456: PPUSH
9457: LD_STRING DA-1-capture
9459: PPUSH
9460: CALL_OW 88
// DialogueOff ;
9464: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9468: LD_STRING OTame
9470: PPUSH
9471: CALL_OW 337
// end ;
9475: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9476: LD_INT 1
9478: PPUSH
9479: LD_INT 2
9481: PPUSH
9482: CALL_OW 321
9486: PUSH
9487: LD_INT 2
9489: EQUAL
9490: PUSH
9491: LD_EXP 12
9495: AND
9496: IFFALSE 9643
9498: GO 9500
9500: DISABLE
// begin DialogueOn ;
9501: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9505: LD_EXP 25
9509: PPUSH
9510: LD_STRING DA-1-ape
9512: PPUSH
9513: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9517: LD_EXP 21
9521: PPUSH
9522: LD_STRING DH-1-ape
9524: PPUSH
9525: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9529: LD_EXP 25
9533: PPUSH
9534: LD_STRING DA-2-ape
9536: PPUSH
9537: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9541: LD_EXP 25
9545: PPUSH
9546: LD_STRING DA-3-ape
9548: PPUSH
9549: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9553: LD_EXP 21
9557: PPUSH
9558: LD_STRING DH-3-ape
9560: PPUSH
9561: CALL_OW 88
// DialogueOff ;
9565: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) then
9569: LD_INT 22
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: LD_INT 12
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: IFFALSE 9609
// SpawnApeman ( forest , 2 ) ;
9599: LD_INT 1
9601: PPUSH
9602: LD_INT 2
9604: PPUSH
9605: CALL 452 0 2
// repeat wait ( 0 0$1 ) ;
9609: LD_INT 35
9611: PPUSH
9612: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
9616: LD_INT 25
9618: PUSH
9619: LD_INT 12
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PPUSH
9626: CALL_OW 69
9630: PUSH
9631: LD_INT 0
9633: EQUAL
9634: IFFALSE 9609
// YouLost ( Ape ) ;
9636: LD_STRING Ape
9638: PPUSH
9639: CALL_OW 104
// end ;
9643: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
9644: LD_EXP 16
9648: PUSH
9649: LD_INT 3
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: LD_INT 2
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: LD_OWVAR 67
9667: ARRAY
9668: GREATEREQUAL
9669: IFFALSE 9713
9671: GO 9673
9673: DISABLE
// begin DialogueOn ;
9674: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
9678: LD_EXP 25
9682: PPUSH
9683: LD_STRING DA-1-failure
9685: PPUSH
9686: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
9690: LD_EXP 25
9694: PPUSH
9695: LD_STRING DA-2-failure
9697: PPUSH
9698: CALL_OW 88
// YouLost ( Failure ) ;
9702: LD_STRING Failure
9704: PPUSH
9705: CALL_OW 104
// DialogueOff ;
9709: CALL_OW 7
// end ;
9713: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
9714: LD_EXP 26
9718: PPUSH
9719: CALL_OW 256
9723: PUSH
9724: LD_INT 3
9726: LESS
9727: IFFALSE 9860
9729: GO 9731
9731: DISABLE
// begin DialogueOn ;
9732: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9736: LD_EXP 26
9740: PPUSH
9741: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
9745: LD_EXP 26
9749: PPUSH
9750: LD_STRING DK-Kaiaout-1
9752: PPUSH
9753: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
9757: LD_EXP 21
9761: PPUSH
9762: LD_STRING DH-Kaiaout-2
9764: PPUSH
9765: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
9769: LD_EXP 22
9773: PPUSH
9774: LD_STRING DG-Kaiaout-3
9776: PPUSH
9777: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
9781: LD_EXP 21
9785: PPUSH
9786: LD_STRING DH-Kaiaout-4
9788: PPUSH
9789: CALL_OW 88
// if Givi then
9793: LD_EXP 22
9797: IFFALSE 9847
// begin Say ( Givi , DG-Kaiaout-5 ) ;
9799: LD_EXP 22
9803: PPUSH
9804: LD_STRING DG-Kaiaout-5
9806: PPUSH
9807: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
9811: LD_EXP 21
9815: PPUSH
9816: LD_STRING DH-Kaiaout-6
9818: PPUSH
9819: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
9823: LD_EXP 22
9827: PPUSH
9828: LD_STRING DG-Kaiaout-7
9830: PPUSH
9831: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
9835: LD_EXP 21
9839: PPUSH
9840: LD_STRING DH-Kaiaout-8
9842: PPUSH
9843: CALL_OW 88
// end ; DialogueOff ;
9847: CALL_OW 7
// KillUnit ( Kaia ) ;
9851: LD_EXP 26
9855: PPUSH
9856: CALL_OW 66
// end ;
9860: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
9861: LD_INT 22
9863: PUSH
9864: LD_INT 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 23
9873: PUSH
9874: LD_INT 0
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: PUSH
9890: LD_EXP 25
9894: PPUSH
9895: CALL_OW 302
9899: AND
9900: PUSH
9901: LD_EXP 25
9905: PPUSH
9906: CALL_OW 255
9910: PUSH
9911: LD_INT 2
9913: EQUAL
9914: AND
9915: IFFALSE 10661
9917: GO 9919
9919: DISABLE
9920: LD_INT 0
9922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9923: LD_ADDR_VAR 0 1
9927: PUSH
9928: LD_INT 22
9930: PUSH
9931: LD_INT 2
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 23
9940: PUSH
9941: LD_INT 0
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: ST_TO_ADDR
// InGameOn ;
9957: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
9970: LD_VAR 0 1
9974: PPUSH
9975: LD_EXP 25
9979: PPUSH
9980: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
9984: LD_EXP 25
9988: PPUSH
9989: LD_VAR 0 1
9993: PPUSH
9994: CALL_OW 119
// wait ( 0 0$1 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10005: LD_EXP 25
10009: PPUSH
10010: LD_STRING DA-1-tame-a
10012: PPUSH
10013: CALL_OW 88
// if IsOk ( Mike ) then
10017: LD_EXP 23
10021: PPUSH
10022: CALL_OW 302
10026: IFFALSE 10064
// begin Say ( Mike , DM-1-tame-a ) ;
10028: LD_EXP 23
10032: PPUSH
10033: LD_STRING DM-1-tame-a
10035: PPUSH
10036: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10040: LD_EXP 27
10044: PPUSH
10045: LD_STRING DS-1-tame-a
10047: PPUSH
10048: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10052: LD_EXP 23
10056: PPUSH
10057: LD_STRING DM-2-tame-a
10059: PPUSH
10060: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10064: LD_INT 105
10066: PPUSH
10067: CALL_OW 67
// PrepareFarmer ;
10071: CALL 11336 0 0
// CenterOnUnits ( Farmer ) ;
10075: LD_EXP 29
10079: PPUSH
10080: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10084: LD_EXP 29
10088: PPUSH
10089: LD_INT 105
10091: PPUSH
10092: LD_INT 59
10094: PPUSH
10095: CALL_OW 111
// AddComHold ( Farmer ) ;
10099: LD_EXP 29
10103: PPUSH
10104: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10108: LD_EXP 29
10112: PPUSH
10113: LD_STRING DF-1-end
10115: PPUSH
10116: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10120: LD_EXP 25
10124: PPUSH
10125: LD_STRING DA-1-end
10127: PPUSH
10128: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10132: LD_EXP 29
10136: PPUSH
10137: LD_STRING DF-2-end
10139: PPUSH
10140: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10144: LD_EXP 25
10148: PPUSH
10149: LD_STRING DA-2-end
10151: PPUSH
10152: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10156: LD_EXP 29
10160: PPUSH
10161: LD_STRING DF-3-end
10163: PPUSH
10164: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10168: LD_EXP 21
10172: PPUSH
10173: LD_STRING DH-3-end
10175: PPUSH
10176: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10180: LD_EXP 29
10184: PPUSH
10185: LD_STRING DF-4-end
10187: PPUSH
10188: CALL_OW 94
// if tick <= [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
10192: LD_OWVAR 1
10196: PUSH
10197: LD_INT 52500
10199: PUSH
10200: LD_INT 48300
10202: PUSH
10203: LD_INT 44100
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: LD_OWVAR 67
10215: ARRAY
10216: LESSEQUAL
10217: IFFALSE 10231
// AddMedal ( med1 , 1 ) else
10219: LD_STRING med1
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 101
10229: GO 10242
// AddMedal ( med1 , - 1 ) ;
10231: LD_STRING med1
10233: PPUSH
10234: LD_INT 1
10236: NEG
10237: PPUSH
10238: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 then
10242: LD_INT 22
10244: PUSH
10245: LD_INT 1
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 25
10254: PUSH
10255: LD_INT 4
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: PUSH
10271: LD_INT 0
10273: EQUAL
10274: IFFALSE 10288
// AddMedal ( med2 , 1 ) else
10276: LD_STRING med2
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 101
10286: GO 10299
// AddMedal ( med2 , - 1 ) ;
10288: LD_STRING med2
10290: PPUSH
10291: LD_INT 1
10293: NEG
10294: PPUSH
10295: CALL_OW 101
// if trickyMove then
10299: LD_EXP 13
10303: IFFALSE 10317
// AddMedal ( med3 , 1 ) else
10305: LD_STRING med3
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: CALL_OW 101
10315: GO 10328
// AddMedal ( med3 , - 1 ) ;
10317: LD_STRING med3
10319: PPUSH
10320: LD_INT 1
10322: NEG
10323: PPUSH
10324: CALL_OW 101
// GiveMedals ( MAIN ) ;
10328: LD_STRING MAIN
10330: PPUSH
10331: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_STRING 02_ape
10342: PPUSH
10343: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10347: LD_ADDR_VAR 0 1
10351: PUSH
10352: LD_INT 22
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 23
10364: PUSH
10365: LD_INT 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 21
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10401: LD_EXP 21
10405: PPUSH
10406: LD_STRING 02_Heike
10408: PPUSH
10409: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING 02_Aviradze
10420: PPUSH
10421: CALL_OW 38
// if Givi then
10425: LD_EXP 22
10429: IFFALSE 10443
// SaveCharacters ( Givi , 02_Givi ) ;
10431: LD_EXP 22
10435: PPUSH
10436: LD_STRING 02_Givi
10438: PPUSH
10439: CALL_OW 38
// if Mike then
10443: LD_EXP 23
10447: IFFALSE 10461
// SaveCharacters ( Mike , 02_Mike ) ;
10449: LD_EXP 23
10453: PPUSH
10454: LD_STRING 02_Mike
10456: PPUSH
10457: CALL_OW 38
// if Kamil then
10461: LD_EXP 24
10465: IFFALSE 10479
// SaveCharacters ( Kamil , 02_Kamil ) ;
10467: LD_EXP 24
10471: PPUSH
10472: LD_STRING 02_Kamil
10474: PPUSH
10475: CALL_OW 38
// if Kaia then
10479: LD_EXP 26
10483: IFFALSE 10497
// SaveCharacters ( Kaia , 02_Kaia ) ;
10485: LD_EXP 26
10489: PPUSH
10490: LD_STRING 02_Kaia
10492: PPUSH
10493: CALL_OW 38
// if Sophia then
10497: LD_EXP 27
10501: IFFALSE 10515
// SaveCharacters ( Sophia , 02_Sophia ) ;
10503: LD_EXP 27
10507: PPUSH
10508: LD_STRING 02_Sophia
10510: PPUSH
10511: CALL_OW 38
// if Markov then
10515: LD_EXP 28
10519: IFFALSE 10533
// SaveCharacters ( Markov , 02_Markov ) ;
10521: LD_EXP 28
10525: PPUSH
10526: LD_STRING 02_Markov
10528: PPUSH
10529: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10533: LD_VAR 0 1
10537: PUSH
10538: LD_EXP 21
10542: PUSH
10543: LD_EXP 25
10547: PUSH
10548: LD_EXP 22
10552: PUSH
10553: LD_EXP 23
10557: PUSH
10558: LD_EXP 24
10562: PUSH
10563: LD_EXP 27
10567: PUSH
10568: LD_EXP 26
10572: PUSH
10573: LD_EXP 28
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: DIFF
10588: IFFALSE 10653
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
10590: LD_VAR 0 1
10594: PUSH
10595: LD_EXP 21
10599: PUSH
10600: LD_EXP 25
10604: PUSH
10605: LD_EXP 22
10609: PUSH
10610: LD_EXP 23
10614: PUSH
10615: LD_EXP 24
10619: PUSH
10620: LD_EXP 27
10624: PUSH
10625: LD_EXP 26
10629: PUSH
10630: LD_EXP 28
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: DIFF
10645: PPUSH
10646: LD_STRING 02_others
10648: PPUSH
10649: CALL_OW 38
// YouWin ;
10653: CALL_OW 103
// InGameOff ;
10657: CALL_OW 9
// end ;
10661: PPOPN 1
10663: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
10664: LD_OWVAR 1
10668: PUSH
10669: LD_EXP 11
10673: GREATER
10674: PUSH
10675: LD_EXP 4
10679: AND
10680: IFFALSE 10720
10682: GO 10684
10684: DISABLE
// begin InGameOn ;
10685: CALL_OW 8
// PrepareFarmer ;
10689: CALL 11336 0 0
// CenterNowOnUnits ( Farmer ) ;
10693: LD_EXP 29
10697: PPUSH
10698: CALL_OW 87
// wait ( 0 0$2 ) ;
10702: LD_INT 70
10704: PPUSH
10705: CALL_OW 67
// YouLost ( Farmer ) ;
10709: LD_STRING Farmer
10711: PPUSH
10712: CALL_OW 104
// InGameOff ;
10716: CALL_OW 9
// end ; end_of_file
10720: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
10721: LD_INT 0
10723: PPUSH
10724: PPUSH
10725: PPUSH
// uc_side := 2 ;
10726: LD_ADDR_OWVAR 20
10730: PUSH
10731: LD_INT 2
10733: ST_TO_ADDR
// uc_nation := 2 ;
10734: LD_ADDR_OWVAR 21
10738: PUSH
10739: LD_INT 2
10741: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
10742: LD_ADDR_EXP 21
10746: PUSH
10747: LD_STRING Heike
10749: PPUSH
10750: LD_EXP 1
10754: NOT
10755: PPUSH
10756: LD_EXP 2
10760: PPUSH
10761: CALL 221 0 3
10765: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
10766: LD_EXP 21
10770: PPUSH
10771: LD_INT 83
10773: PPUSH
10774: LD_INT 72
10776: PPUSH
10777: LD_INT 0
10779: PPUSH
10780: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
10784: LD_ADDR_EXP 22
10788: PUSH
10789: LD_STRING Givi
10791: PPUSH
10792: LD_EXP 1
10796: NOT
10797: PPUSH
10798: LD_EXP 2
10802: PPUSH
10803: CALL 221 0 3
10807: ST_TO_ADDR
// if Givi then
10808: LD_EXP 22
10812: IFFALSE 10832
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
10814: LD_EXP 22
10818: PPUSH
10819: LD_INT 87
10821: PPUSH
10822: LD_INT 76
10824: PPUSH
10825: LD_INT 0
10827: PPUSH
10828: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
10832: LD_ADDR_EXP 23
10836: PUSH
10837: LD_STRING Mike
10839: PPUSH
10840: LD_EXP 1
10844: NOT
10845: PPUSH
10846: LD_EXP 2
10850: PPUSH
10851: CALL 221 0 3
10855: ST_TO_ADDR
// if Mike then
10856: LD_EXP 23
10860: IFFALSE 10880
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
10862: LD_EXP 23
10866: PPUSH
10867: LD_INT 84
10869: PPUSH
10870: LD_INT 76
10872: PPUSH
10873: LD_INT 0
10875: PPUSH
10876: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
10880: LD_ADDR_EXP 24
10884: PUSH
10885: LD_STRING Kamil
10887: PPUSH
10888: LD_EXP 1
10892: NOT
10893: PPUSH
10894: LD_EXP 2
10898: PPUSH
10899: CALL 221 0 3
10903: ST_TO_ADDR
// if Kamil then
10904: LD_EXP 24
10908: IFFALSE 10928
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
10910: LD_EXP 24
10914: PPUSH
10915: LD_INT 85
10917: PPUSH
10918: LD_INT 78
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 48
// uc_side := 5 ;
10928: LD_ADDR_OWVAR 20
10932: PUSH
10933: LD_INT 5
10935: ST_TO_ADDR
// uc_nation := 2 ;
10936: LD_ADDR_OWVAR 21
10940: PUSH
10941: LD_INT 2
10943: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
10944: LD_ADDR_EXP 25
10948: PUSH
10949: LD_STRING Aviradze
10951: PPUSH
10952: LD_INT 0
10954: PPUSH
10955: LD_STRING 
10957: PPUSH
10958: CALL 221 0 3
10962: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
10963: LD_EXP 25
10967: PPUSH
10968: LD_INT 106
10970: PPUSH
10971: LD_INT 38
10973: PPUSH
10974: LD_INT 0
10976: PPUSH
10977: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
10981: LD_EXP 25
10985: PPUSH
10986: LD_INT 103
10988: PPUSH
10989: LD_INT 38
10991: PPUSH
10992: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
10996: LD_ADDR_EXP 26
11000: PUSH
11001: LD_STRING Kaia
11003: PPUSH
11004: LD_INT 0
11006: PPUSH
11007: LD_STRING 
11009: PPUSH
11010: CALL 221 0 3
11014: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11015: LD_EXP 26
11019: PPUSH
11020: LD_INT 100
11022: PPUSH
11023: LD_INT 34
11025: PPUSH
11026: LD_INT 0
11028: PPUSH
11029: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11033: LD_EXP 26
11037: PPUSH
11038: LD_INT 100
11040: PPUSH
11041: LD_INT 39
11043: PPUSH
11044: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11048: LD_ADDR_EXP 27
11052: PUSH
11053: LD_STRING Sophia
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: LD_STRING 
11061: PPUSH
11062: CALL 221 0 3
11066: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11067: LD_EXP 27
11071: PPUSH
11072: LD_INT 109
11074: PPUSH
11075: LD_INT 50
11077: PPUSH
11078: LD_INT 0
11080: PPUSH
11081: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11085: LD_EXP 27
11089: PPUSH
11090: LD_INT 100
11092: PPUSH
11093: LD_INT 39
11095: PPUSH
11096: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11100: LD_ADDR_EXP 28
11104: PUSH
11105: LD_STRING Markov
11107: PPUSH
11108: LD_INT 0
11110: PPUSH
11111: LD_STRING 
11113: PPUSH
11114: CALL 221 0 3
11118: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11119: LD_INT 5
11121: PPUSH
11122: LD_INT 3
11124: PPUSH
11125: LD_INT 21
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_INT 42
11136: PPUSH
11137: LD_INT 90
11139: PUSH
11140: LD_INT 70
11142: PUSH
11143: LD_INT 60
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_OWVAR 67
11155: ARRAY
11156: PPUSH
11157: CALL 284 0 7
// veh := CreateVehicle ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: CALL_OW 45
11170: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 4
11178: PPUSH
11179: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 109
11190: PPUSH
11191: LD_INT 38
11193: PPUSH
11194: LD_INT 0
11196: PPUSH
11197: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11201: LD_EXP 28
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11215: LD_EXP 26
11219: PPUSH
11220: LD_EXP 25
11224: PPUSH
11225: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11229: LD_EXP 25
11233: PPUSH
11234: LD_EXP 26
11238: PPUSH
11239: CALL_OW 119
// if not Givi or not Mike then
11243: LD_EXP 22
11247: NOT
11248: PUSH
11249: LD_EXP 23
11253: NOT
11254: OR
11255: IFFALSE 11331
// begin uc_nation := 2 ;
11257: LD_ADDR_OWVAR 21
11261: PUSH
11262: LD_INT 2
11264: ST_TO_ADDR
// uc_side := 5 ;
11265: LD_ADDR_OWVAR 20
11269: PUSH
11270: LD_INT 5
11272: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11273: LD_INT 1
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 380
// un := CreateHuman ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: CALL_OW 44
11295: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11296: LD_VAR 0 2
11300: PPUSH
11301: LD_INT 112
11303: PPUSH
11304: LD_INT 40
11306: PPUSH
11307: LD_INT 3
11309: PPUSH
11310: LD_INT 0
11312: PPUSH
11313: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11317: LD_VAR 0 2
11321: PPUSH
11322: LD_EXP 25
11326: PPUSH
11327: CALL_OW 119
// end ; end ;
11331: LD_VAR 0 1
11335: RET
// export function PrepareFarmer ; var i ; begin
11336: LD_INT 0
11338: PPUSH
11339: PPUSH
// uc_side := 5 ;
11340: LD_ADDR_OWVAR 20
11344: PUSH
11345: LD_INT 5
11347: ST_TO_ADDR
// uc_nation := 2 ;
11348: LD_ADDR_OWVAR 21
11352: PUSH
11353: LD_INT 2
11355: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11356: LD_ADDR_EXP 29
11360: PUSH
11361: LD_STRING Farmer
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: LD_STRING 
11369: PPUSH
11370: CALL 221 0 3
11374: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11375: LD_EXP 29
11379: PPUSH
11380: LD_INT 106
11382: PPUSH
11383: LD_INT 62
11385: PPUSH
11386: LD_INT 0
11388: PPUSH
11389: CALL_OW 48
// for i := 1 to 5 do
11393: LD_ADDR_VAR 0 2
11397: PUSH
11398: DOUBLE
11399: LD_INT 1
11401: DEC
11402: ST_TO_ADDR
11403: LD_INT 5
11405: PUSH
11406: FOR_TO
11407: IFFALSE 11445
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11422: CALL_OW 44
11426: PPUSH
11427: LD_INT 105
11429: PPUSH
11430: LD_INT 64
11432: PPUSH
11433: LD_INT 3
11435: PPUSH
11436: LD_INT 0
11438: PPUSH
11439: CALL_OW 50
// end ;
11443: GO 11406
11445: POP
11446: POP
// end ; end_of_file
11447: LD_VAR 0 1
11451: RET
// every 2 2$20 + 0 0$10 do
11452: GO 11454
11454: DISABLE
// begin enable ;
11455: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11456: LD_INT 1
11458: PPUSH
11459: LD_INT 5
11461: PPUSH
11462: CALL_OW 12
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 55
// if tick > 6 6$00 then
11477: LD_OWVAR 1
11481: PUSH
11482: LD_INT 12600
11484: GREATER
11485: IFFALSE 11488
// disable ;
11487: DISABLE
// end ; end_of_file
11488: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11489: LD_VAR 0 1
11493: PUSH
11494: LD_EXP 21
11498: EQUAL
11499: IFFALSE 11508
// YouLost ( Heike ) ;
11501: LD_STRING Heike
11503: PPUSH
11504: CALL_OW 104
// if un = Aviradze then
11508: LD_VAR 0 1
11512: PUSH
11513: LD_EXP 25
11517: EQUAL
11518: IFFALSE 11527
// YouLost ( Aviradze ) ;
11520: LD_STRING Aviradze
11522: PPUSH
11523: CALL_OW 104
// if un = usLab then
11527: LD_VAR 0 1
11531: PUSH
11532: LD_INT 3
11534: EQUAL
11535: IFFALSE 11544
// YouLost ( Lab ) ;
11537: LD_STRING Lab
11539: PPUSH
11540: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] and aviradzeSpotted then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 23
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: PUSH
11589: LD_EXP 21
11593: PUSH
11594: LD_EXP 25
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: DIFF
11603: IN
11604: PUSH
11605: LD_EXP 4
11609: AND
11610: IFFALSE 11626
// lostCounter := lostCounter + 1 ;
11612: LD_ADDR_EXP 16
11616: PUSH
11617: LD_EXP 16
11621: PUSH
11622: LD_INT 1
11624: PLUS
11625: ST_TO_ADDR
// end ;
11626: PPOPN 1
11628: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
11629: LD_VAR 0 1
11633: PUSH
11634: LD_EXP 20
11638: IN
11639: PUSH
11640: LD_VAR 0 2
11644: PUSH
11645: LD_INT 2
11647: EQUAL
11648: AND
11649: IFFALSE 11681
// begin usSci := usSci diff un ;
11651: LD_ADDR_EXP 20
11655: PUSH
11656: LD_EXP 20
11660: PUSH
11661: LD_VAR 0 1
11665: DIFF
11666: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
11667: LD_ADDR_EXP 8
11671: PUSH
11672: LD_EXP 8
11676: PUSH
11677: LD_INT 1
11679: PLUS
11680: ST_TO_ADDR
// end ; end ;
11681: PPOPN 3
11683: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
11684: LD_VAR 0 1
11688: PUSH
11689: LD_INT 2
11691: EQUAL
11692: PUSH
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 5
11700: EQUAL
11701: AND
11702: IFFALSE 11711
// YouLost ( FriendlyFire ) ;
11704: LD_STRING FriendlyFire
11706: PPUSH
11707: CALL_OW 104
// end ; end_of_file
11711: PPOPN 2
11713: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
11714: GO 11716
11716: DISABLE
// begin ru_radar := 98 ;
11717: LD_ADDR_EXP 30
11721: PUSH
11722: LD_INT 98
11724: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11725: LD_ADDR_EXP 31
11729: PUSH
11730: LD_INT 89
11732: ST_TO_ADDR
// us_hack := 99 ;
11733: LD_ADDR_EXP 32
11737: PUSH
11738: LD_INT 99
11740: ST_TO_ADDR
// us_artillery := 97 ;
11741: LD_ADDR_EXP 33
11745: PUSH
11746: LD_INT 97
11748: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11749: LD_ADDR_EXP 34
11753: PUSH
11754: LD_INT 91
11756: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11757: LD_ADDR_EXP 35
11761: PUSH
11762: LD_INT 92
11764: ST_TO_ADDR
// tech_Artillery := 80 ;
11765: LD_ADDR_EXP 36
11769: PUSH
11770: LD_INT 80
11772: ST_TO_ADDR
// tech_RadMat := 81 ;
11773: LD_ADDR_EXP 37
11777: PUSH
11778: LD_INT 81
11780: ST_TO_ADDR
// tech_BasicTools := 82 ;
11781: LD_ADDR_EXP 38
11785: PUSH
11786: LD_INT 82
11788: ST_TO_ADDR
// tech_Cargo := 83 ;
11789: LD_ADDR_EXP 39
11793: PUSH
11794: LD_INT 83
11796: ST_TO_ADDR
// tech_Track := 84 ;
11797: LD_ADDR_EXP 40
11801: PUSH
11802: LD_INT 84
11804: ST_TO_ADDR
// tech_Crane := 85 ;
11805: LD_ADDR_EXP 41
11809: PUSH
11810: LD_INT 85
11812: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11813: LD_ADDR_EXP 42
11817: PUSH
11818: LD_INT 86
11820: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11821: LD_ADDR_EXP 43
11825: PUSH
11826: LD_INT 87
11828: ST_TO_ADDR
// end ; end_of_file end_of_file
11829: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11830: GO 11832
11832: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11833: LD_STRING initStreamRollete();
11835: PPUSH
11836: CALL_OW 559
// InitStreamMode ;
11840: CALL 11849 0 0
// DefineStreamItems ( ) ;
11844: CALL 12289 0 0
// end ;
11848: END
// function InitStreamMode ; begin
11849: LD_INT 0
11851: PPUSH
// streamModeActive := false ;
11852: LD_ADDR_EXP 44
11856: PUSH
11857: LD_INT 0
11859: ST_TO_ADDR
// normalCounter := 36 ;
11860: LD_ADDR_EXP 45
11864: PUSH
11865: LD_INT 36
11867: ST_TO_ADDR
// hardcoreCounter := 16 ;
11868: LD_ADDR_EXP 46
11872: PUSH
11873: LD_INT 16
11875: ST_TO_ADDR
// sRocket := false ;
11876: LD_ADDR_EXP 49
11880: PUSH
11881: LD_INT 0
11883: ST_TO_ADDR
// sSpeed := false ;
11884: LD_ADDR_EXP 48
11888: PUSH
11889: LD_INT 0
11891: ST_TO_ADDR
// sEngine := false ;
11892: LD_ADDR_EXP 50
11896: PUSH
11897: LD_INT 0
11899: ST_TO_ADDR
// sSpec := false ;
11900: LD_ADDR_EXP 47
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// sLevel := false ;
11908: LD_ADDR_EXP 51
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// sArmoury := false ;
11916: LD_ADDR_EXP 52
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// sRadar := false ;
11924: LD_ADDR_EXP 53
11928: PUSH
11929: LD_INT 0
11931: ST_TO_ADDR
// sBunker := false ;
11932: LD_ADDR_EXP 54
11936: PUSH
11937: LD_INT 0
11939: ST_TO_ADDR
// sHack := false ;
11940: LD_ADDR_EXP 55
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// sFire := false ;
11948: LD_ADDR_EXP 56
11952: PUSH
11953: LD_INT 0
11955: ST_TO_ADDR
// sRefresh := false ;
11956: LD_ADDR_EXP 57
11960: PUSH
11961: LD_INT 0
11963: ST_TO_ADDR
// sExp := false ;
11964: LD_ADDR_EXP 58
11968: PUSH
11969: LD_INT 0
11971: ST_TO_ADDR
// sDepot := false ;
11972: LD_ADDR_EXP 59
11976: PUSH
11977: LD_INT 0
11979: ST_TO_ADDR
// sFlag := false ;
11980: LD_ADDR_EXP 60
11984: PUSH
11985: LD_INT 0
11987: ST_TO_ADDR
// sKamikadze := false ;
11988: LD_ADDR_EXP 68
11992: PUSH
11993: LD_INT 0
11995: ST_TO_ADDR
// sTroll := false ;
11996: LD_ADDR_EXP 69
12000: PUSH
12001: LD_INT 0
12003: ST_TO_ADDR
// sSlow := false ;
12004: LD_ADDR_EXP 70
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// sLack := false ;
12012: LD_ADDR_EXP 71
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// sTank := false ;
12020: LD_ADDR_EXP 73
12024: PUSH
12025: LD_INT 0
12027: ST_TO_ADDR
// sRemote := false ;
12028: LD_ADDR_EXP 74
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// sPowell := false ;
12036: LD_ADDR_EXP 75
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// sTeleport := false ;
12044: LD_ADDR_EXP 78
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// sOilTower := false ;
12052: LD_ADDR_EXP 80
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// sShovel := false ;
12060: LD_ADDR_EXP 81
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// sSheik := false ;
12068: LD_ADDR_EXP 82
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// sEarthquake := false ;
12076: LD_ADDR_EXP 84
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// sAI := false ;
12084: LD_ADDR_EXP 85
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// sCargo := false ;
12092: LD_ADDR_EXP 88
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// sDLaser := false ;
12100: LD_ADDR_EXP 89
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// sExchange := false ;
12108: LD_ADDR_EXP 90
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// sFac := false ;
12116: LD_ADDR_EXP 91
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sPower := false ;
12124: LD_ADDR_EXP 92
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sRandom := false ;
12132: LD_ADDR_EXP 93
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sShield := false ;
12140: LD_ADDR_EXP 94
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sTime := false ;
12148: LD_ADDR_EXP 95
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sTools := false ;
12156: LD_ADDR_EXP 96
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sSold := false ;
12164: LD_ADDR_EXP 61
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sDiff := false ;
12172: LD_ADDR_EXP 62
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sFog := false ;
12180: LD_ADDR_EXP 65
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sReset := false ;
12188: LD_ADDR_EXP 66
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sSun := false ;
12196: LD_ADDR_EXP 67
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sTiger := false ;
12204: LD_ADDR_EXP 63
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sBomb := false ;
12212: LD_ADDR_EXP 64
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sWound := false ;
12220: LD_ADDR_EXP 72
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sBetray := false ;
12228: LD_ADDR_EXP 76
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sContamin := false ;
12236: LD_ADDR_EXP 77
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sOil := false ;
12244: LD_ADDR_EXP 79
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sStu := false ;
12252: LD_ADDR_EXP 83
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sBazooka := false ;
12260: LD_ADDR_EXP 86
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sMortar := false ;
12268: LD_ADDR_EXP 87
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sRanger := false ;
12276: LD_ADDR_EXP 97
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// end ;
12284: LD_VAR 0 1
12288: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
12293: PPUSH
12294: PPUSH
12295: PPUSH
// result := [ ] ;
12296: LD_ADDR_VAR 0 1
12300: PUSH
12301: EMPTY
12302: ST_TO_ADDR
// if campaign_id = 1 then
12303: LD_OWVAR 69
12307: PUSH
12308: LD_INT 1
12310: EQUAL
12311: IFFALSE 15249
// begin case mission_number of 1 :
12313: LD_OWVAR 70
12317: PUSH
12318: LD_INT 1
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12390
12326: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: LD_INT 4
12337: PUSH
12338: LD_INT 11
12340: PUSH
12341: LD_INT 12
12343: PUSH
12344: LD_INT 15
12346: PUSH
12347: LD_INT 16
12349: PUSH
12350: LD_INT 22
12352: PUSH
12353: LD_INT 23
12355: PUSH
12356: LD_INT 26
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 101
12372: PUSH
12373: LD_INT 102
12375: PUSH
12376: LD_INT 106
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: ST_TO_ADDR
12388: GO 15247
12390: LD_INT 2
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12470
12398: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: LD_INT 4
12409: PUSH
12410: LD_INT 11
12412: PUSH
12413: LD_INT 12
12415: PUSH
12416: LD_INT 15
12418: PUSH
12419: LD_INT 16
12421: PUSH
12422: LD_INT 22
12424: PUSH
12425: LD_INT 23
12427: PUSH
12428: LD_INT 26
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 101
12444: PUSH
12445: LD_INT 102
12447: PUSH
12448: LD_INT 105
12450: PUSH
12451: LD_INT 106
12453: PUSH
12454: LD_INT 108
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: ST_TO_ADDR
12468: GO 15247
12470: LD_INT 3
12472: DOUBLE
12473: EQUAL
12474: IFTRUE 12478
12476: GO 12554
12478: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12479: LD_ADDR_VAR 0 1
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: LD_INT 4
12489: PUSH
12490: LD_INT 5
12492: PUSH
12493: LD_INT 11
12495: PUSH
12496: LD_INT 12
12498: PUSH
12499: LD_INT 15
12501: PUSH
12502: LD_INT 16
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_INT 26
12510: PUSH
12511: LD_INT 36
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 101
12528: PUSH
12529: LD_INT 102
12531: PUSH
12532: LD_INT 105
12534: PUSH
12535: LD_INT 106
12537: PUSH
12538: LD_INT 108
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: ST_TO_ADDR
12552: GO 15247
12554: LD_INT 4
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12646
12562: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12563: LD_ADDR_VAR 0 1
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 8
12579: PUSH
12580: LD_INT 11
12582: PUSH
12583: LD_INT 12
12585: PUSH
12586: LD_INT 15
12588: PUSH
12589: LD_INT 16
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 26
12600: PUSH
12601: LD_INT 36
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 101
12620: PUSH
12621: LD_INT 102
12623: PUSH
12624: LD_INT 105
12626: PUSH
12627: LD_INT 106
12629: PUSH
12630: LD_INT 108
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: ST_TO_ADDR
12644: GO 15247
12646: LD_INT 5
12648: DOUBLE
12649: EQUAL
12650: IFTRUE 12654
12652: GO 12754
12654: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12655: LD_ADDR_VAR 0 1
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: LD_INT 4
12665: PUSH
12666: LD_INT 5
12668: PUSH
12669: LD_INT 6
12671: PUSH
12672: LD_INT 8
12674: PUSH
12675: LD_INT 11
12677: PUSH
12678: LD_INT 12
12680: PUSH
12681: LD_INT 15
12683: PUSH
12684: LD_INT 16
12686: PUSH
12687: LD_INT 22
12689: PUSH
12690: LD_INT 23
12692: PUSH
12693: LD_INT 25
12695: PUSH
12696: LD_INT 26
12698: PUSH
12699: LD_INT 36
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 105
12726: PUSH
12727: LD_INT 106
12729: PUSH
12730: LD_INT 108
12732: PUSH
12733: LD_INT 109
12735: PUSH
12736: LD_INT 112
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: ST_TO_ADDR
12752: GO 15247
12754: LD_INT 6
12756: DOUBLE
12757: EQUAL
12758: IFTRUE 12762
12760: GO 12882
12762: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12763: LD_ADDR_VAR 0 1
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: LD_INT 4
12773: PUSH
12774: LD_INT 5
12776: PUSH
12777: LD_INT 6
12779: PUSH
12780: LD_INT 8
12782: PUSH
12783: LD_INT 11
12785: PUSH
12786: LD_INT 12
12788: PUSH
12789: LD_INT 15
12791: PUSH
12792: LD_INT 16
12794: PUSH
12795: LD_INT 20
12797: PUSH
12798: LD_INT 21
12800: PUSH
12801: LD_INT 22
12803: PUSH
12804: LD_INT 23
12806: PUSH
12807: LD_INT 25
12809: PUSH
12810: LD_INT 26
12812: PUSH
12813: LD_INT 30
12815: PUSH
12816: LD_INT 31
12818: PUSH
12819: LD_INT 32
12821: PUSH
12822: LD_INT 36
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 101
12848: PUSH
12849: LD_INT 102
12851: PUSH
12852: LD_INT 105
12854: PUSH
12855: LD_INT 106
12857: PUSH
12858: LD_INT 108
12860: PUSH
12861: LD_INT 109
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: ST_TO_ADDR
12880: GO 15247
12882: LD_INT 7
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12990
12890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 2
12898: PUSH
12899: LD_INT 4
12901: PUSH
12902: LD_INT 5
12904: PUSH
12905: LD_INT 7
12907: PUSH
12908: LD_INT 11
12910: PUSH
12911: LD_INT 12
12913: PUSH
12914: LD_INT 15
12916: PUSH
12917: LD_INT 16
12919: PUSH
12920: LD_INT 20
12922: PUSH
12923: LD_INT 21
12925: PUSH
12926: LD_INT 22
12928: PUSH
12929: LD_INT 23
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 26
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 101
12956: PUSH
12957: LD_INT 102
12959: PUSH
12960: LD_INT 103
12962: PUSH
12963: LD_INT 105
12965: PUSH
12966: LD_INT 106
12968: PUSH
12969: LD_INT 108
12971: PUSH
12972: LD_INT 112
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: ST_TO_ADDR
12988: GO 15247
12990: LD_INT 8
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13126
12998: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12999: LD_ADDR_VAR 0 1
13003: PUSH
13004: LD_INT 2
13006: PUSH
13007: LD_INT 4
13009: PUSH
13010: LD_INT 5
13012: PUSH
13013: LD_INT 6
13015: PUSH
13016: LD_INT 7
13018: PUSH
13019: LD_INT 8
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 12
13027: PUSH
13028: LD_INT 15
13030: PUSH
13031: LD_INT 16
13033: PUSH
13034: LD_INT 20
13036: PUSH
13037: LD_INT 21
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 23
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: LD_INT 30
13054: PUSH
13055: LD_INT 31
13057: PUSH
13058: LD_INT 32
13060: PUSH
13061: LD_INT 36
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 101
13088: PUSH
13089: LD_INT 102
13091: PUSH
13092: LD_INT 103
13094: PUSH
13095: LD_INT 105
13097: PUSH
13098: LD_INT 106
13100: PUSH
13101: LD_INT 108
13103: PUSH
13104: LD_INT 109
13106: PUSH
13107: LD_INT 112
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: ST_TO_ADDR
13124: GO 15247
13126: LD_INT 9
13128: DOUBLE
13129: EQUAL
13130: IFTRUE 13134
13132: GO 13270
13134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 4
13145: PUSH
13146: LD_INT 5
13148: PUSH
13149: LD_INT 6
13151: PUSH
13152: LD_INT 7
13154: PUSH
13155: LD_INT 8
13157: PUSH
13158: LD_INT 11
13160: PUSH
13161: LD_INT 12
13163: PUSH
13164: LD_INT 15
13166: PUSH
13167: LD_INT 16
13169: PUSH
13170: LD_INT 20
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_INT 23
13181: PUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 28
13190: PUSH
13191: LD_INT 30
13193: PUSH
13194: LD_INT 31
13196: PUSH
13197: LD_INT 32
13199: PUSH
13200: LD_INT 36
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 101
13228: PUSH
13229: LD_INT 102
13231: PUSH
13232: LD_INT 103
13234: PUSH
13235: LD_INT 105
13237: PUSH
13238: LD_INT 106
13240: PUSH
13241: LD_INT 108
13243: PUSH
13244: LD_INT 109
13246: PUSH
13247: LD_INT 112
13249: PUSH
13250: LD_INT 114
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: ST_TO_ADDR
13268: GO 15247
13270: LD_INT 10
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13462
13278: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13279: LD_ADDR_VAR 0 1
13283: PUSH
13284: LD_INT 2
13286: PUSH
13287: LD_INT 4
13289: PUSH
13290: LD_INT 5
13292: PUSH
13293: LD_INT 6
13295: PUSH
13296: LD_INT 7
13298: PUSH
13299: LD_INT 8
13301: PUSH
13302: LD_INT 9
13304: PUSH
13305: LD_INT 10
13307: PUSH
13308: LD_INT 11
13310: PUSH
13311: LD_INT 12
13313: PUSH
13314: LD_INT 13
13316: PUSH
13317: LD_INT 14
13319: PUSH
13320: LD_INT 15
13322: PUSH
13323: LD_INT 16
13325: PUSH
13326: LD_INT 17
13328: PUSH
13329: LD_INT 18
13331: PUSH
13332: LD_INT 19
13334: PUSH
13335: LD_INT 20
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 22
13343: PUSH
13344: LD_INT 23
13346: PUSH
13347: LD_INT 24
13349: PUSH
13350: LD_INT 25
13352: PUSH
13353: LD_INT 26
13355: PUSH
13356: LD_INT 28
13358: PUSH
13359: LD_INT 30
13361: PUSH
13362: LD_INT 31
13364: PUSH
13365: LD_INT 32
13367: PUSH
13368: LD_INT 36
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 101
13404: PUSH
13405: LD_INT 102
13407: PUSH
13408: LD_INT 103
13410: PUSH
13411: LD_INT 104
13413: PUSH
13414: LD_INT 105
13416: PUSH
13417: LD_INT 106
13419: PUSH
13420: LD_INT 107
13422: PUSH
13423: LD_INT 108
13425: PUSH
13426: LD_INT 109
13428: PUSH
13429: LD_INT 110
13431: PUSH
13432: LD_INT 111
13434: PUSH
13435: LD_INT 112
13437: PUSH
13438: LD_INT 114
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
13460: GO 15247
13462: LD_INT 11
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13662
13470: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_INT 2
13478: PUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 4
13484: PUSH
13485: LD_INT 5
13487: PUSH
13488: LD_INT 6
13490: PUSH
13491: LD_INT 7
13493: PUSH
13494: LD_INT 8
13496: PUSH
13497: LD_INT 9
13499: PUSH
13500: LD_INT 10
13502: PUSH
13503: LD_INT 11
13505: PUSH
13506: LD_INT 12
13508: PUSH
13509: LD_INT 13
13511: PUSH
13512: LD_INT 14
13514: PUSH
13515: LD_INT 15
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 17
13523: PUSH
13524: LD_INT 18
13526: PUSH
13527: LD_INT 19
13529: PUSH
13530: LD_INT 20
13532: PUSH
13533: LD_INT 21
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 23
13541: PUSH
13542: LD_INT 24
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 26
13550: PUSH
13551: LD_INT 28
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 31
13559: PUSH
13560: LD_INT 32
13562: PUSH
13563: LD_INT 34
13565: PUSH
13566: LD_INT 36
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 101
13604: PUSH
13605: LD_INT 102
13607: PUSH
13608: LD_INT 103
13610: PUSH
13611: LD_INT 104
13613: PUSH
13614: LD_INT 105
13616: PUSH
13617: LD_INT 106
13619: PUSH
13620: LD_INT 107
13622: PUSH
13623: LD_INT 108
13625: PUSH
13626: LD_INT 109
13628: PUSH
13629: LD_INT 110
13631: PUSH
13632: LD_INT 111
13634: PUSH
13635: LD_INT 112
13637: PUSH
13638: LD_INT 114
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: ST_TO_ADDR
13660: GO 15247
13662: LD_INT 12
13664: DOUBLE
13665: EQUAL
13666: IFTRUE 13670
13668: GO 13878
13670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: LD_INT 3
13684: PUSH
13685: LD_INT 4
13687: PUSH
13688: LD_INT 5
13690: PUSH
13691: LD_INT 6
13693: PUSH
13694: LD_INT 7
13696: PUSH
13697: LD_INT 8
13699: PUSH
13700: LD_INT 9
13702: PUSH
13703: LD_INT 10
13705: PUSH
13706: LD_INT 11
13708: PUSH
13709: LD_INT 12
13711: PUSH
13712: LD_INT 13
13714: PUSH
13715: LD_INT 14
13717: PUSH
13718: LD_INT 15
13720: PUSH
13721: LD_INT 16
13723: PUSH
13724: LD_INT 17
13726: PUSH
13727: LD_INT 18
13729: PUSH
13730: LD_INT 19
13732: PUSH
13733: LD_INT 20
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 24
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: LD_INT 27
13756: PUSH
13757: LD_INT 28
13759: PUSH
13760: LD_INT 30
13762: PUSH
13763: LD_INT 31
13765: PUSH
13766: LD_INT 32
13768: PUSH
13769: LD_INT 33
13771: PUSH
13772: LD_INT 34
13774: PUSH
13775: LD_INT 36
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 101
13816: PUSH
13817: LD_INT 102
13819: PUSH
13820: LD_INT 103
13822: PUSH
13823: LD_INT 104
13825: PUSH
13826: LD_INT 105
13828: PUSH
13829: LD_INT 106
13831: PUSH
13832: LD_INT 107
13834: PUSH
13835: LD_INT 108
13837: PUSH
13838: LD_INT 109
13840: PUSH
13841: LD_INT 110
13843: PUSH
13844: LD_INT 111
13846: PUSH
13847: LD_INT 112
13849: PUSH
13850: LD_INT 113
13852: PUSH
13853: LD_INT 114
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: ST_TO_ADDR
13876: GO 15247
13878: LD_INT 13
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 14082
13886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_INT 1
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 4
13903: PUSH
13904: LD_INT 5
13906: PUSH
13907: LD_INT 8
13909: PUSH
13910: LD_INT 9
13912: PUSH
13913: LD_INT 10
13915: PUSH
13916: LD_INT 11
13918: PUSH
13919: LD_INT 12
13921: PUSH
13922: LD_INT 14
13924: PUSH
13925: LD_INT 15
13927: PUSH
13928: LD_INT 16
13930: PUSH
13931: LD_INT 17
13933: PUSH
13934: LD_INT 18
13936: PUSH
13937: LD_INT 19
13939: PUSH
13940: LD_INT 20
13942: PUSH
13943: LD_INT 21
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_INT 23
13951: PUSH
13952: LD_INT 24
13954: PUSH
13955: LD_INT 25
13957: PUSH
13958: LD_INT 26
13960: PUSH
13961: LD_INT 27
13963: PUSH
13964: LD_INT 28
13966: PUSH
13967: LD_INT 30
13969: PUSH
13970: LD_INT 31
13972: PUSH
13973: LD_INT 32
13975: PUSH
13976: LD_INT 33
13978: PUSH
13979: LD_INT 34
13981: PUSH
13982: LD_INT 36
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 101
14020: PUSH
14021: LD_INT 102
14023: PUSH
14024: LD_INT 103
14026: PUSH
14027: LD_INT 104
14029: PUSH
14030: LD_INT 105
14032: PUSH
14033: LD_INT 106
14035: PUSH
14036: LD_INT 107
14038: PUSH
14039: LD_INT 108
14041: PUSH
14042: LD_INT 109
14044: PUSH
14045: LD_INT 110
14047: PUSH
14048: LD_INT 111
14050: PUSH
14051: LD_INT 112
14053: PUSH
14054: LD_INT 113
14056: PUSH
14057: LD_INT 114
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 15247
14082: LD_INT 14
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14302
14090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14091: LD_ADDR_VAR 0 1
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 4
14107: PUSH
14108: LD_INT 5
14110: PUSH
14111: LD_INT 6
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 8
14119: PUSH
14120: LD_INT 9
14122: PUSH
14123: LD_INT 10
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 13
14134: PUSH
14135: LD_INT 14
14137: PUSH
14138: LD_INT 15
14140: PUSH
14141: LD_INT 16
14143: PUSH
14144: LD_INT 17
14146: PUSH
14147: LD_INT 18
14149: PUSH
14150: LD_INT 19
14152: PUSH
14153: LD_INT 20
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 22
14161: PUSH
14162: LD_INT 23
14164: PUSH
14165: LD_INT 24
14167: PUSH
14168: LD_INT 25
14170: PUSH
14171: LD_INT 26
14173: PUSH
14174: LD_INT 27
14176: PUSH
14177: LD_INT 28
14179: PUSH
14180: LD_INT 29
14182: PUSH
14183: LD_INT 30
14185: PUSH
14186: LD_INT 31
14188: PUSH
14189: LD_INT 32
14191: PUSH
14192: LD_INT 33
14194: PUSH
14195: LD_INT 34
14197: PUSH
14198: LD_INT 36
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 101
14240: PUSH
14241: LD_INT 102
14243: PUSH
14244: LD_INT 103
14246: PUSH
14247: LD_INT 104
14249: PUSH
14250: LD_INT 105
14252: PUSH
14253: LD_INT 106
14255: PUSH
14256: LD_INT 107
14258: PUSH
14259: LD_INT 108
14261: PUSH
14262: LD_INT 109
14264: PUSH
14265: LD_INT 110
14267: PUSH
14268: LD_INT 111
14270: PUSH
14271: LD_INT 112
14273: PUSH
14274: LD_INT 113
14276: PUSH
14277: LD_INT 114
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: ST_TO_ADDR
14300: GO 15247
14302: LD_INT 15
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14522
14310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_INT 1
14318: PUSH
14319: LD_INT 2
14321: PUSH
14322: LD_INT 3
14324: PUSH
14325: LD_INT 4
14327: PUSH
14328: LD_INT 5
14330: PUSH
14331: LD_INT 6
14333: PUSH
14334: LD_INT 7
14336: PUSH
14337: LD_INT 8
14339: PUSH
14340: LD_INT 9
14342: PUSH
14343: LD_INT 10
14345: PUSH
14346: LD_INT 11
14348: PUSH
14349: LD_INT 12
14351: PUSH
14352: LD_INT 13
14354: PUSH
14355: LD_INT 14
14357: PUSH
14358: LD_INT 15
14360: PUSH
14361: LD_INT 16
14363: PUSH
14364: LD_INT 17
14366: PUSH
14367: LD_INT 18
14369: PUSH
14370: LD_INT 19
14372: PUSH
14373: LD_INT 20
14375: PUSH
14376: LD_INT 21
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_INT 23
14384: PUSH
14385: LD_INT 24
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 26
14393: PUSH
14394: LD_INT 27
14396: PUSH
14397: LD_INT 28
14399: PUSH
14400: LD_INT 29
14402: PUSH
14403: LD_INT 30
14405: PUSH
14406: LD_INT 31
14408: PUSH
14409: LD_INT 32
14411: PUSH
14412: LD_INT 33
14414: PUSH
14415: LD_INT 34
14417: PUSH
14418: LD_INT 36
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 103
14466: PUSH
14467: LD_INT 104
14469: PUSH
14470: LD_INT 105
14472: PUSH
14473: LD_INT 106
14475: PUSH
14476: LD_INT 107
14478: PUSH
14479: LD_INT 108
14481: PUSH
14482: LD_INT 109
14484: PUSH
14485: LD_INT 110
14487: PUSH
14488: LD_INT 111
14490: PUSH
14491: LD_INT 112
14493: PUSH
14494: LD_INT 113
14496: PUSH
14497: LD_INT 114
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: ST_TO_ADDR
14520: GO 15247
14522: LD_INT 16
14524: DOUBLE
14525: EQUAL
14526: IFTRUE 14530
14528: GO 14654
14530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14531: LD_ADDR_VAR 0 1
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 4
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: LD_INT 7
14547: PUSH
14548: LD_INT 11
14550: PUSH
14551: LD_INT 12
14553: PUSH
14554: LD_INT 15
14556: PUSH
14557: LD_INT 16
14559: PUSH
14560: LD_INT 20
14562: PUSH
14563: LD_INT 21
14565: PUSH
14566: LD_INT 22
14568: PUSH
14569: LD_INT 23
14571: PUSH
14572: LD_INT 25
14574: PUSH
14575: LD_INT 26
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: LD_INT 31
14583: PUSH
14584: LD_INT 32
14586: PUSH
14587: LD_INT 33
14589: PUSH
14590: LD_INT 34
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 101
14616: PUSH
14617: LD_INT 102
14619: PUSH
14620: LD_INT 103
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 108
14628: PUSH
14629: LD_INT 112
14631: PUSH
14632: LD_INT 113
14634: PUSH
14635: LD_INT 114
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: ST_TO_ADDR
14652: GO 15247
14654: LD_INT 17
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14874
14662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14663: LD_ADDR_VAR 0 1
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: LD_INT 3
14676: PUSH
14677: LD_INT 4
14679: PUSH
14680: LD_INT 5
14682: PUSH
14683: LD_INT 6
14685: PUSH
14686: LD_INT 7
14688: PUSH
14689: LD_INT 8
14691: PUSH
14692: LD_INT 9
14694: PUSH
14695: LD_INT 10
14697: PUSH
14698: LD_INT 11
14700: PUSH
14701: LD_INT 12
14703: PUSH
14704: LD_INT 13
14706: PUSH
14707: LD_INT 14
14709: PUSH
14710: LD_INT 15
14712: PUSH
14713: LD_INT 16
14715: PUSH
14716: LD_INT 17
14718: PUSH
14719: LD_INT 18
14721: PUSH
14722: LD_INT 19
14724: PUSH
14725: LD_INT 20
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 22
14733: PUSH
14734: LD_INT 23
14736: PUSH
14737: LD_INT 24
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 26
14745: PUSH
14746: LD_INT 27
14748: PUSH
14749: LD_INT 28
14751: PUSH
14752: LD_INT 29
14754: PUSH
14755: LD_INT 30
14757: PUSH
14758: LD_INT 31
14760: PUSH
14761: LD_INT 32
14763: PUSH
14764: LD_INT 33
14766: PUSH
14767: LD_INT 34
14769: PUSH
14770: LD_INT 36
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 101
14812: PUSH
14813: LD_INT 102
14815: PUSH
14816: LD_INT 103
14818: PUSH
14819: LD_INT 104
14821: PUSH
14822: LD_INT 105
14824: PUSH
14825: LD_INT 106
14827: PUSH
14828: LD_INT 107
14830: PUSH
14831: LD_INT 108
14833: PUSH
14834: LD_INT 109
14836: PUSH
14837: LD_INT 110
14839: PUSH
14840: LD_INT 111
14842: PUSH
14843: LD_INT 112
14845: PUSH
14846: LD_INT 113
14848: PUSH
14849: LD_INT 114
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: ST_TO_ADDR
14872: GO 15247
14874: LD_INT 18
14876: DOUBLE
14877: EQUAL
14878: IFTRUE 14882
14880: GO 15018
14882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 4
14893: PUSH
14894: LD_INT 5
14896: PUSH
14897: LD_INT 7
14899: PUSH
14900: LD_INT 11
14902: PUSH
14903: LD_INT 12
14905: PUSH
14906: LD_INT 15
14908: PUSH
14909: LD_INT 16
14911: PUSH
14912: LD_INT 20
14914: PUSH
14915: LD_INT 21
14917: PUSH
14918: LD_INT 22
14920: PUSH
14921: LD_INT 23
14923: PUSH
14924: LD_INT 25
14926: PUSH
14927: LD_INT 26
14929: PUSH
14930: LD_INT 30
14932: PUSH
14933: LD_INT 31
14935: PUSH
14936: LD_INT 32
14938: PUSH
14939: LD_INT 33
14941: PUSH
14942: LD_INT 34
14944: PUSH
14945: LD_INT 35
14947: PUSH
14948: LD_INT 36
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 106
14985: PUSH
14986: LD_INT 108
14988: PUSH
14989: LD_INT 112
14991: PUSH
14992: LD_INT 113
14994: PUSH
14995: LD_INT 114
14997: PUSH
14998: LD_INT 115
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15247
15018: LD_INT 19
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15246
15026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_INT 1
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: LD_INT 4
15043: PUSH
15044: LD_INT 5
15046: PUSH
15047: LD_INT 6
15049: PUSH
15050: LD_INT 7
15052: PUSH
15053: LD_INT 8
15055: PUSH
15056: LD_INT 9
15058: PUSH
15059: LD_INT 10
15061: PUSH
15062: LD_INT 11
15064: PUSH
15065: LD_INT 12
15067: PUSH
15068: LD_INT 13
15070: PUSH
15071: LD_INT 14
15073: PUSH
15074: LD_INT 15
15076: PUSH
15077: LD_INT 16
15079: PUSH
15080: LD_INT 17
15082: PUSH
15083: LD_INT 18
15085: PUSH
15086: LD_INT 19
15088: PUSH
15089: LD_INT 20
15091: PUSH
15092: LD_INT 21
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 23
15100: PUSH
15101: LD_INT 24
15103: PUSH
15104: LD_INT 25
15106: PUSH
15107: LD_INT 26
15109: PUSH
15110: LD_INT 27
15112: PUSH
15113: LD_INT 28
15115: PUSH
15116: LD_INT 29
15118: PUSH
15119: LD_INT 30
15121: PUSH
15122: LD_INT 31
15124: PUSH
15125: LD_INT 32
15127: PUSH
15128: LD_INT 33
15130: PUSH
15131: LD_INT 34
15133: PUSH
15134: LD_INT 35
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 101
15180: PUSH
15181: LD_INT 102
15183: PUSH
15184: LD_INT 103
15186: PUSH
15187: LD_INT 104
15189: PUSH
15190: LD_INT 105
15192: PUSH
15193: LD_INT 106
15195: PUSH
15196: LD_INT 107
15198: PUSH
15199: LD_INT 108
15201: PUSH
15202: LD_INT 109
15204: PUSH
15205: LD_INT 110
15207: PUSH
15208: LD_INT 111
15210: PUSH
15211: LD_INT 112
15213: PUSH
15214: LD_INT 113
15216: PUSH
15217: LD_INT 114
15219: PUSH
15220: LD_INT 115
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: ST_TO_ADDR
15244: GO 15247
15246: POP
// end else
15247: GO 15466
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15249: LD_ADDR_VAR 0 1
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: LD_INT 6
15271: PUSH
15272: LD_INT 7
15274: PUSH
15275: LD_INT 8
15277: PUSH
15278: LD_INT 9
15280: PUSH
15281: LD_INT 10
15283: PUSH
15284: LD_INT 11
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: LD_INT 13
15292: PUSH
15293: LD_INT 14
15295: PUSH
15296: LD_INT 15
15298: PUSH
15299: LD_INT 16
15301: PUSH
15302: LD_INT 17
15304: PUSH
15305: LD_INT 18
15307: PUSH
15308: LD_INT 19
15310: PUSH
15311: LD_INT 20
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 23
15322: PUSH
15323: LD_INT 24
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 26
15331: PUSH
15332: LD_INT 27
15334: PUSH
15335: LD_INT 28
15337: PUSH
15338: LD_INT 29
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: LD_INT 31
15346: PUSH
15347: LD_INT 32
15349: PUSH
15350: LD_INT 33
15352: PUSH
15353: LD_INT 34
15355: PUSH
15356: LD_INT 35
15358: PUSH
15359: LD_INT 36
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 101
15402: PUSH
15403: LD_INT 102
15405: PUSH
15406: LD_INT 103
15408: PUSH
15409: LD_INT 104
15411: PUSH
15412: LD_INT 105
15414: PUSH
15415: LD_INT 106
15417: PUSH
15418: LD_INT 107
15420: PUSH
15421: LD_INT 108
15423: PUSH
15424: LD_INT 109
15426: PUSH
15427: LD_INT 110
15429: PUSH
15430: LD_INT 111
15432: PUSH
15433: LD_INT 112
15435: PUSH
15436: LD_INT 113
15438: PUSH
15439: LD_INT 114
15441: PUSH
15442: LD_INT 115
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: ST_TO_ADDR
// if result then
15466: LD_VAR 0 1
15470: IFFALSE 15759
// begin normal :=  ;
15472: LD_ADDR_VAR 0 3
15476: PUSH
15477: LD_STRING 
15479: ST_TO_ADDR
// hardcore :=  ;
15480: LD_ADDR_VAR 0 4
15484: PUSH
15485: LD_STRING 
15487: ST_TO_ADDR
// for i = 1 to normalCounter do
15488: LD_ADDR_VAR 0 5
15492: PUSH
15493: DOUBLE
15494: LD_INT 1
15496: DEC
15497: ST_TO_ADDR
15498: LD_EXP 45
15502: PUSH
15503: FOR_TO
15504: IFFALSE 15605
// begin tmp := 0 ;
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_STRING 0
15513: ST_TO_ADDR
// if result [ 1 ] then
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 1
15521: ARRAY
15522: IFFALSE 15587
// if result [ 1 ] [ 1 ] = i then
15524: LD_VAR 0 1
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PUSH
15537: LD_VAR 0 5
15541: EQUAL
15542: IFFALSE 15587
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_VAR 0 1
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: LD_VAR 0 1
15561: PUSH
15562: LD_INT 1
15564: ARRAY
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 3
15573: PPUSH
15574: CALL_OW 1
15578: ST_TO_ADDR
// tmp := 1 ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_STRING 1
15586: ST_TO_ADDR
// end ; normal := normal & tmp ;
15587: LD_ADDR_VAR 0 3
15591: PUSH
15592: LD_VAR 0 3
15596: PUSH
15597: LD_VAR 0 2
15601: STR
15602: ST_TO_ADDR
// end ;
15603: GO 15503
15605: POP
15606: POP
// for i = 1 to hardcoreCounter do
15607: LD_ADDR_VAR 0 5
15611: PUSH
15612: DOUBLE
15613: LD_INT 1
15615: DEC
15616: ST_TO_ADDR
15617: LD_EXP 46
15621: PUSH
15622: FOR_TO
15623: IFFALSE 15728
// begin tmp := 0 ;
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: LD_STRING 0
15632: ST_TO_ADDR
// if result [ 2 ] then
15633: LD_VAR 0 1
15637: PUSH
15638: LD_INT 2
15640: ARRAY
15641: IFFALSE 15710
// if result [ 2 ] [ 1 ] = 100 + i then
15643: LD_VAR 0 1
15647: PUSH
15648: LD_INT 2
15650: ARRAY
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PUSH
15656: LD_INT 100
15658: PUSH
15659: LD_VAR 0 5
15663: PLUS
15664: EQUAL
15665: IFFALSE 15710
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15667: LD_ADDR_VAR 0 1
15671: PUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: LD_INT 2
15679: PPUSH
15680: LD_VAR 0 1
15684: PUSH
15685: LD_INT 2
15687: ARRAY
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 3
15696: PPUSH
15697: CALL_OW 1
15701: ST_TO_ADDR
// tmp := 1 ;
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_STRING 1
15709: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15710: LD_ADDR_VAR 0 4
15714: PUSH
15715: LD_VAR 0 4
15719: PUSH
15720: LD_VAR 0 2
15724: STR
15725: ST_TO_ADDR
// end ;
15726: GO 15622
15728: POP
15729: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15730: LD_STRING getStreamItemsFromMission("
15732: PUSH
15733: LD_VAR 0 3
15737: STR
15738: PUSH
15739: LD_STRING ","
15741: STR
15742: PUSH
15743: LD_VAR 0 4
15747: STR
15748: PUSH
15749: LD_STRING ")
15751: STR
15752: PPUSH
15753: CALL_OW 559
// end else
15757: GO 15766
// ToLua ( getStreamItemsFromMission("","") ) ;
15759: LD_STRING getStreamItemsFromMission("","")
15761: PPUSH
15762: CALL_OW 559
// end ;
15766: LD_VAR 0 1
15770: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15771: LD_VAR 0 2
15775: PUSH
15776: LD_INT 100
15778: EQUAL
15779: IFFALSE 16728
// begin if not StreamModeActive then
15781: LD_EXP 44
15785: NOT
15786: IFFALSE 15796
// StreamModeActive := true ;
15788: LD_ADDR_EXP 44
15792: PUSH
15793: LD_INT 1
15795: ST_TO_ADDR
// if p3 = 0 then
15796: LD_VAR 0 3
15800: PUSH
15801: LD_INT 0
15803: EQUAL
15804: IFFALSE 15810
// InitStreamMode ;
15806: CALL 11849 0 0
// if p3 = 1 then
15810: LD_VAR 0 3
15814: PUSH
15815: LD_INT 1
15817: EQUAL
15818: IFFALSE 15828
// sRocket := true ;
15820: LD_ADDR_EXP 49
15824: PUSH
15825: LD_INT 1
15827: ST_TO_ADDR
// if p3 = 2 then
15828: LD_VAR 0 3
15832: PUSH
15833: LD_INT 2
15835: EQUAL
15836: IFFALSE 15846
// sSpeed := true ;
15838: LD_ADDR_EXP 48
15842: PUSH
15843: LD_INT 1
15845: ST_TO_ADDR
// if p3 = 3 then
15846: LD_VAR 0 3
15850: PUSH
15851: LD_INT 3
15853: EQUAL
15854: IFFALSE 15864
// sEngine := true ;
15856: LD_ADDR_EXP 50
15860: PUSH
15861: LD_INT 1
15863: ST_TO_ADDR
// if p3 = 4 then
15864: LD_VAR 0 3
15868: PUSH
15869: LD_INT 4
15871: EQUAL
15872: IFFALSE 15882
// sSpec := true ;
15874: LD_ADDR_EXP 47
15878: PUSH
15879: LD_INT 1
15881: ST_TO_ADDR
// if p3 = 5 then
15882: LD_VAR 0 3
15886: PUSH
15887: LD_INT 5
15889: EQUAL
15890: IFFALSE 15900
// sLevel := true ;
15892: LD_ADDR_EXP 51
15896: PUSH
15897: LD_INT 1
15899: ST_TO_ADDR
// if p3 = 6 then
15900: LD_VAR 0 3
15904: PUSH
15905: LD_INT 6
15907: EQUAL
15908: IFFALSE 15918
// sArmoury := true ;
15910: LD_ADDR_EXP 52
15914: PUSH
15915: LD_INT 1
15917: ST_TO_ADDR
// if p3 = 7 then
15918: LD_VAR 0 3
15922: PUSH
15923: LD_INT 7
15925: EQUAL
15926: IFFALSE 15936
// sRadar := true ;
15928: LD_ADDR_EXP 53
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// if p3 = 8 then
15936: LD_VAR 0 3
15940: PUSH
15941: LD_INT 8
15943: EQUAL
15944: IFFALSE 15954
// sBunker := true ;
15946: LD_ADDR_EXP 54
15950: PUSH
15951: LD_INT 1
15953: ST_TO_ADDR
// if p3 = 9 then
15954: LD_VAR 0 3
15958: PUSH
15959: LD_INT 9
15961: EQUAL
15962: IFFALSE 15972
// sHack := true ;
15964: LD_ADDR_EXP 55
15968: PUSH
15969: LD_INT 1
15971: ST_TO_ADDR
// if p3 = 10 then
15972: LD_VAR 0 3
15976: PUSH
15977: LD_INT 10
15979: EQUAL
15980: IFFALSE 15990
// sFire := true ;
15982: LD_ADDR_EXP 56
15986: PUSH
15987: LD_INT 1
15989: ST_TO_ADDR
// if p3 = 11 then
15990: LD_VAR 0 3
15994: PUSH
15995: LD_INT 11
15997: EQUAL
15998: IFFALSE 16008
// sRefresh := true ;
16000: LD_ADDR_EXP 57
16004: PUSH
16005: LD_INT 1
16007: ST_TO_ADDR
// if p3 = 12 then
16008: LD_VAR 0 3
16012: PUSH
16013: LD_INT 12
16015: EQUAL
16016: IFFALSE 16026
// sExp := true ;
16018: LD_ADDR_EXP 58
16022: PUSH
16023: LD_INT 1
16025: ST_TO_ADDR
// if p3 = 13 then
16026: LD_VAR 0 3
16030: PUSH
16031: LD_INT 13
16033: EQUAL
16034: IFFALSE 16044
// sDepot := true ;
16036: LD_ADDR_EXP 59
16040: PUSH
16041: LD_INT 1
16043: ST_TO_ADDR
// if p3 = 14 then
16044: LD_VAR 0 3
16048: PUSH
16049: LD_INT 14
16051: EQUAL
16052: IFFALSE 16062
// sFlag := true ;
16054: LD_ADDR_EXP 60
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// if p3 = 15 then
16062: LD_VAR 0 3
16066: PUSH
16067: LD_INT 15
16069: EQUAL
16070: IFFALSE 16080
// sKamikadze := true ;
16072: LD_ADDR_EXP 68
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// if p3 = 16 then
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 16
16087: EQUAL
16088: IFFALSE 16098
// sTroll := true ;
16090: LD_ADDR_EXP 69
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// if p3 = 17 then
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 17
16105: EQUAL
16106: IFFALSE 16116
// sSlow := true ;
16108: LD_ADDR_EXP 70
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// if p3 = 18 then
16116: LD_VAR 0 3
16120: PUSH
16121: LD_INT 18
16123: EQUAL
16124: IFFALSE 16134
// sLack := true ;
16126: LD_ADDR_EXP 71
16130: PUSH
16131: LD_INT 1
16133: ST_TO_ADDR
// if p3 = 19 then
16134: LD_VAR 0 3
16138: PUSH
16139: LD_INT 19
16141: EQUAL
16142: IFFALSE 16152
// sTank := true ;
16144: LD_ADDR_EXP 73
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// if p3 = 20 then
16152: LD_VAR 0 3
16156: PUSH
16157: LD_INT 20
16159: EQUAL
16160: IFFALSE 16170
// sRemote := true ;
16162: LD_ADDR_EXP 74
16166: PUSH
16167: LD_INT 1
16169: ST_TO_ADDR
// if p3 = 21 then
16170: LD_VAR 0 3
16174: PUSH
16175: LD_INT 21
16177: EQUAL
16178: IFFALSE 16188
// sPowell := true ;
16180: LD_ADDR_EXP 75
16184: PUSH
16185: LD_INT 1
16187: ST_TO_ADDR
// if p3 = 22 then
16188: LD_VAR 0 3
16192: PUSH
16193: LD_INT 22
16195: EQUAL
16196: IFFALSE 16206
// sTeleport := true ;
16198: LD_ADDR_EXP 78
16202: PUSH
16203: LD_INT 1
16205: ST_TO_ADDR
// if p3 = 23 then
16206: LD_VAR 0 3
16210: PUSH
16211: LD_INT 23
16213: EQUAL
16214: IFFALSE 16224
// sOilTower := true ;
16216: LD_ADDR_EXP 80
16220: PUSH
16221: LD_INT 1
16223: ST_TO_ADDR
// if p3 = 24 then
16224: LD_VAR 0 3
16228: PUSH
16229: LD_INT 24
16231: EQUAL
16232: IFFALSE 16242
// sShovel := true ;
16234: LD_ADDR_EXP 81
16238: PUSH
16239: LD_INT 1
16241: ST_TO_ADDR
// if p3 = 25 then
16242: LD_VAR 0 3
16246: PUSH
16247: LD_INT 25
16249: EQUAL
16250: IFFALSE 16260
// sSheik := true ;
16252: LD_ADDR_EXP 82
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// if p3 = 26 then
16260: LD_VAR 0 3
16264: PUSH
16265: LD_INT 26
16267: EQUAL
16268: IFFALSE 16278
// sEarthquake := true ;
16270: LD_ADDR_EXP 84
16274: PUSH
16275: LD_INT 1
16277: ST_TO_ADDR
// if p3 = 27 then
16278: LD_VAR 0 3
16282: PUSH
16283: LD_INT 27
16285: EQUAL
16286: IFFALSE 16296
// sAI := true ;
16288: LD_ADDR_EXP 85
16292: PUSH
16293: LD_INT 1
16295: ST_TO_ADDR
// if p3 = 28 then
16296: LD_VAR 0 3
16300: PUSH
16301: LD_INT 28
16303: EQUAL
16304: IFFALSE 16314
// sCargo := true ;
16306: LD_ADDR_EXP 88
16310: PUSH
16311: LD_INT 1
16313: ST_TO_ADDR
// if p3 = 29 then
16314: LD_VAR 0 3
16318: PUSH
16319: LD_INT 29
16321: EQUAL
16322: IFFALSE 16332
// sDLaser := true ;
16324: LD_ADDR_EXP 89
16328: PUSH
16329: LD_INT 1
16331: ST_TO_ADDR
// if p3 = 30 then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 30
16339: EQUAL
16340: IFFALSE 16350
// sExchange := true ;
16342: LD_ADDR_EXP 90
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// if p3 = 31 then
16350: LD_VAR 0 3
16354: PUSH
16355: LD_INT 31
16357: EQUAL
16358: IFFALSE 16368
// sFac := true ;
16360: LD_ADDR_EXP 91
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// if p3 = 32 then
16368: LD_VAR 0 3
16372: PUSH
16373: LD_INT 32
16375: EQUAL
16376: IFFALSE 16386
// sPower := true ;
16378: LD_ADDR_EXP 92
16382: PUSH
16383: LD_INT 1
16385: ST_TO_ADDR
// if p3 = 33 then
16386: LD_VAR 0 3
16390: PUSH
16391: LD_INT 33
16393: EQUAL
16394: IFFALSE 16404
// sRandom := true ;
16396: LD_ADDR_EXP 93
16400: PUSH
16401: LD_INT 1
16403: ST_TO_ADDR
// if p3 = 34 then
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 34
16411: EQUAL
16412: IFFALSE 16422
// sShield := true ;
16414: LD_ADDR_EXP 94
16418: PUSH
16419: LD_INT 1
16421: ST_TO_ADDR
// if p3 = 35 then
16422: LD_VAR 0 3
16426: PUSH
16427: LD_INT 35
16429: EQUAL
16430: IFFALSE 16440
// sTime := true ;
16432: LD_ADDR_EXP 95
16436: PUSH
16437: LD_INT 1
16439: ST_TO_ADDR
// if p3 = 36 then
16440: LD_VAR 0 3
16444: PUSH
16445: LD_INT 36
16447: EQUAL
16448: IFFALSE 16458
// sTools := true ;
16450: LD_ADDR_EXP 96
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
// if p3 = 101 then
16458: LD_VAR 0 3
16462: PUSH
16463: LD_INT 101
16465: EQUAL
16466: IFFALSE 16476
// sSold := true ;
16468: LD_ADDR_EXP 61
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// if p3 = 102 then
16476: LD_VAR 0 3
16480: PUSH
16481: LD_INT 102
16483: EQUAL
16484: IFFALSE 16494
// sDiff := true ;
16486: LD_ADDR_EXP 62
16490: PUSH
16491: LD_INT 1
16493: ST_TO_ADDR
// if p3 = 103 then
16494: LD_VAR 0 3
16498: PUSH
16499: LD_INT 103
16501: EQUAL
16502: IFFALSE 16512
// sFog := true ;
16504: LD_ADDR_EXP 65
16508: PUSH
16509: LD_INT 1
16511: ST_TO_ADDR
// if p3 = 104 then
16512: LD_VAR 0 3
16516: PUSH
16517: LD_INT 104
16519: EQUAL
16520: IFFALSE 16530
// sReset := true ;
16522: LD_ADDR_EXP 66
16526: PUSH
16527: LD_INT 1
16529: ST_TO_ADDR
// if p3 = 105 then
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 105
16537: EQUAL
16538: IFFALSE 16548
// sSun := true ;
16540: LD_ADDR_EXP 67
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// if p3 = 106 then
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 106
16555: EQUAL
16556: IFFALSE 16566
// sTiger := true ;
16558: LD_ADDR_EXP 63
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
// if p3 = 107 then
16566: LD_VAR 0 3
16570: PUSH
16571: LD_INT 107
16573: EQUAL
16574: IFFALSE 16584
// sBomb := true ;
16576: LD_ADDR_EXP 64
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// if p3 = 108 then
16584: LD_VAR 0 3
16588: PUSH
16589: LD_INT 108
16591: EQUAL
16592: IFFALSE 16602
// sWound := true ;
16594: LD_ADDR_EXP 72
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// if p3 = 109 then
16602: LD_VAR 0 3
16606: PUSH
16607: LD_INT 109
16609: EQUAL
16610: IFFALSE 16620
// sBetray := true ;
16612: LD_ADDR_EXP 76
16616: PUSH
16617: LD_INT 1
16619: ST_TO_ADDR
// if p3 = 110 then
16620: LD_VAR 0 3
16624: PUSH
16625: LD_INT 110
16627: EQUAL
16628: IFFALSE 16638
// sContamin := true ;
16630: LD_ADDR_EXP 77
16634: PUSH
16635: LD_INT 1
16637: ST_TO_ADDR
// if p3 = 111 then
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 111
16645: EQUAL
16646: IFFALSE 16656
// sOil := true ;
16648: LD_ADDR_EXP 79
16652: PUSH
16653: LD_INT 1
16655: ST_TO_ADDR
// if p3 = 112 then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_INT 112
16663: EQUAL
16664: IFFALSE 16674
// sStu := true ;
16666: LD_ADDR_EXP 83
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// if p3 = 113 then
16674: LD_VAR 0 3
16678: PUSH
16679: LD_INT 113
16681: EQUAL
16682: IFFALSE 16692
// sBazooka := true ;
16684: LD_ADDR_EXP 86
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// if p3 = 114 then
16692: LD_VAR 0 3
16696: PUSH
16697: LD_INT 114
16699: EQUAL
16700: IFFALSE 16710
// sMortar := true ;
16702: LD_ADDR_EXP 87
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// if p3 = 115 then
16710: LD_VAR 0 3
16714: PUSH
16715: LD_INT 115
16717: EQUAL
16718: IFFALSE 16728
// sRanger := true ;
16720: LD_ADDR_EXP 97
16724: PUSH
16725: LD_INT 1
16727: ST_TO_ADDR
// end ; end ;
16728: PPOPN 6
16730: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16731: LD_EXP 44
16735: PUSH
16736: LD_EXP 49
16740: AND
16741: IFFALSE 16865
16743: GO 16745
16745: DISABLE
16746: LD_INT 0
16748: PPUSH
16749: PPUSH
// begin enable ;
16750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: LD_INT 22
16758: PUSH
16759: LD_OWVAR 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 34
16773: PUSH
16774: LD_INT 7
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 34
16783: PUSH
16784: LD_INT 45
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 34
16793: PUSH
16794: LD_INT 28
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 34
16803: PUSH
16804: LD_INT 47
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PPUSH
16822: CALL_OW 69
16826: ST_TO_ADDR
// if not tmp then
16827: LD_VAR 0 2
16831: NOT
16832: IFFALSE 16836
// exit ;
16834: GO 16865
// for i in tmp do
16836: LD_ADDR_VAR 0 1
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: FOR_IN
16847: IFFALSE 16863
// begin SetLives ( i , 0 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 234
// end ;
16861: GO 16846
16863: POP
16864: POP
// end ;
16865: PPOPN 2
16867: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16868: LD_EXP 44
16872: PUSH
16873: LD_EXP 50
16877: AND
16878: IFFALSE 16962
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
16886: PPUSH
// begin enable ;
16887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16888: LD_ADDR_VAR 0 2
16892: PUSH
16893: LD_INT 22
16895: PUSH
16896: LD_OWVAR 2
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 32
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PPUSH
16919: CALL_OW 69
16923: ST_TO_ADDR
// if not tmp then
16924: LD_VAR 0 2
16928: NOT
16929: IFFALSE 16933
// exit ;
16931: GO 16962
// for i in tmp do
16933: LD_ADDR_VAR 0 1
16937: PUSH
16938: LD_VAR 0 2
16942: PUSH
16943: FOR_IN
16944: IFFALSE 16960
// begin SetLives ( i , 0 ) ;
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 0
16953: PPUSH
16954: CALL_OW 234
// end ;
16958: GO 16943
16960: POP
16961: POP
// end ;
16962: PPOPN 2
16964: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16965: LD_EXP 44
16969: PUSH
16970: LD_EXP 47
16974: AND
16975: IFFALSE 17068
16977: GO 16979
16979: DISABLE
16980: LD_INT 0
16982: PPUSH
// begin enable ;
16983: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16984: LD_ADDR_VAR 0 1
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_OWVAR 2
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 5
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 25
17016: PUSH
17017: LD_INT 9
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 25
17026: PUSH
17027: LD_INT 8
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PUSH
17049: FOR_IN
17050: IFFALSE 17066
// begin SetClass ( i , 1 ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: CALL_OW 336
// end ;
17064: GO 17049
17066: POP
17067: POP
// end ;
17068: PPOPN 1
17070: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17071: LD_EXP 44
17075: PUSH
17076: LD_EXP 48
17080: AND
17081: PUSH
17082: LD_OWVAR 65
17086: PUSH
17087: LD_INT 7
17089: LESS
17090: AND
17091: IFFALSE 17105
17093: GO 17095
17095: DISABLE
// begin enable ;
17096: ENABLE
// game_speed := 7 ;
17097: LD_ADDR_OWVAR 65
17101: PUSH
17102: LD_INT 7
17104: ST_TO_ADDR
// end ;
17105: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17106: LD_EXP 44
17110: PUSH
17111: LD_EXP 51
17115: AND
17116: IFFALSE 17318
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
17125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17126: LD_ADDR_VAR 0 3
17130: PUSH
17131: LD_INT 81
17133: PUSH
17134: LD_OWVAR 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 21
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: ST_TO_ADDR
// if not tmp then
17162: LD_VAR 0 3
17166: NOT
17167: IFFALSE 17171
// exit ;
17169: GO 17318
// if tmp > 5 then
17171: LD_VAR 0 3
17175: PUSH
17176: LD_INT 5
17178: GREATER
17179: IFFALSE 17191
// k := 5 else
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_INT 5
17188: ST_TO_ADDR
17189: GO 17201
// k := tmp ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_VAR 0 3
17200: ST_TO_ADDR
// for i := 1 to k do
17201: LD_ADDR_VAR 0 1
17205: PUSH
17206: DOUBLE
17207: LD_INT 1
17209: DEC
17210: ST_TO_ADDR
17211: LD_VAR 0 2
17215: PUSH
17216: FOR_TO
17217: IFFALSE 17316
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17219: LD_VAR 0 3
17223: PUSH
17224: LD_VAR 0 1
17228: ARRAY
17229: PPUSH
17230: LD_VAR 0 1
17234: PUSH
17235: LD_INT 4
17237: MOD
17238: PUSH
17239: LD_INT 1
17241: PLUS
17242: PPUSH
17243: CALL_OW 259
17247: PUSH
17248: LD_INT 10
17250: LESS
17251: IFFALSE 17314
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17253: LD_VAR 0 3
17257: PUSH
17258: LD_VAR 0 1
17262: ARRAY
17263: PPUSH
17264: LD_VAR 0 1
17268: PUSH
17269: LD_INT 4
17271: MOD
17272: PUSH
17273: LD_INT 1
17275: PLUS
17276: PPUSH
17277: LD_VAR 0 3
17281: PUSH
17282: LD_VAR 0 1
17286: ARRAY
17287: PPUSH
17288: LD_VAR 0 1
17292: PUSH
17293: LD_INT 4
17295: MOD
17296: PUSH
17297: LD_INT 1
17299: PLUS
17300: PPUSH
17301: CALL_OW 259
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: PPUSH
17310: CALL_OW 237
17314: GO 17216
17316: POP
17317: POP
// end ;
17318: PPOPN 3
17320: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17321: LD_EXP 44
17325: PUSH
17326: LD_EXP 52
17330: AND
17331: IFFALSE 17351
17333: GO 17335
17335: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17336: LD_INT 4
17338: PPUSH
17339: LD_OWVAR 2
17343: PPUSH
17344: LD_INT 0
17346: PPUSH
17347: CALL_OW 324
17351: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17352: LD_EXP 44
17356: PUSH
17357: LD_EXP 81
17361: AND
17362: IFFALSE 17382
17364: GO 17366
17366: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17367: LD_INT 19
17369: PPUSH
17370: LD_OWVAR 2
17374: PPUSH
17375: LD_INT 0
17377: PPUSH
17378: CALL_OW 324
17382: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17383: LD_EXP 44
17387: PUSH
17388: LD_EXP 53
17392: AND
17393: IFFALSE 17495
17395: GO 17397
17397: DISABLE
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
// begin enable ;
17402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17403: LD_ADDR_VAR 0 2
17407: PUSH
17408: LD_INT 22
17410: PUSH
17411: LD_OWVAR 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 2
17422: PUSH
17423: LD_INT 34
17425: PUSH
17426: LD_INT 11
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 34
17435: PUSH
17436: LD_INT 30
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PPUSH
17452: CALL_OW 69
17456: ST_TO_ADDR
// if not tmp then
17457: LD_VAR 0 2
17461: NOT
17462: IFFALSE 17466
// exit ;
17464: GO 17495
// for i in tmp do
17466: LD_ADDR_VAR 0 1
17470: PUSH
17471: LD_VAR 0 2
17475: PUSH
17476: FOR_IN
17477: IFFALSE 17493
// begin SetLives ( i , 0 ) ;
17479: LD_VAR 0 1
17483: PPUSH
17484: LD_INT 0
17486: PPUSH
17487: CALL_OW 234
// end ;
17491: GO 17476
17493: POP
17494: POP
// end ;
17495: PPOPN 2
17497: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17498: LD_EXP 44
17502: PUSH
17503: LD_EXP 54
17507: AND
17508: IFFALSE 17528
17510: GO 17512
17512: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17513: LD_INT 32
17515: PPUSH
17516: LD_OWVAR 2
17520: PPUSH
17521: LD_INT 0
17523: PPUSH
17524: CALL_OW 324
17528: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17529: LD_EXP 44
17533: PUSH
17534: LD_EXP 55
17538: AND
17539: IFFALSE 17720
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
17548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 33
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PPUSH
17580: CALL_OW 69
17584: ST_TO_ADDR
// if not tmp then
17585: LD_VAR 0 2
17589: NOT
17590: IFFALSE 17594
// exit ;
17592: GO 17720
// side := 0 ;
17594: LD_ADDR_VAR 0 3
17598: PUSH
17599: LD_INT 0
17601: ST_TO_ADDR
// for i := 1 to 8 do
17602: LD_ADDR_VAR 0 1
17606: PUSH
17607: DOUBLE
17608: LD_INT 1
17610: DEC
17611: ST_TO_ADDR
17612: LD_INT 8
17614: PUSH
17615: FOR_TO
17616: IFFALSE 17664
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17618: LD_OWVAR 2
17622: PUSH
17623: LD_VAR 0 1
17627: NONEQUAL
17628: PUSH
17629: LD_OWVAR 2
17633: PPUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 81
17643: PUSH
17644: LD_INT 2
17646: EQUAL
17647: AND
17648: IFFALSE 17662
// begin side := i ;
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_VAR 0 1
17659: ST_TO_ADDR
// break ;
17660: GO 17664
// end ;
17662: GO 17615
17664: POP
17665: POP
// if not side then
17666: LD_VAR 0 3
17670: NOT
17671: IFFALSE 17675
// exit ;
17673: GO 17720
// for i := 1 to tmp do
17675: LD_ADDR_VAR 0 1
17679: PUSH
17680: DOUBLE
17681: LD_INT 1
17683: DEC
17684: ST_TO_ADDR
17685: LD_VAR 0 2
17689: PUSH
17690: FOR_TO
17691: IFFALSE 17718
// if Prob ( 60 ) then
17693: LD_INT 60
17695: PPUSH
17696: CALL_OW 13
17700: IFFALSE 17716
// SetSide ( i , side ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_VAR 0 3
17711: PPUSH
17712: CALL_OW 235
17716: GO 17690
17718: POP
17719: POP
// end ;
17720: PPOPN 3
17722: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17723: LD_EXP 44
17727: PUSH
17728: LD_EXP 57
17732: AND
17733: IFFALSE 17852
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17741: LD_ADDR_VAR 0 1
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 21
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: LD_INT 23
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17850
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 257
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 3
17816: PUSH
17817: LD_INT 4
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: IN
17826: IFFALSE 17848
// SetClass ( un , rand ( 1 , 4 ) ) ;
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: LD_INT 4
17838: PPUSH
17839: CALL_OW 12
17843: PPUSH
17844: CALL_OW 336
17848: GO 17795
17850: POP
17851: POP
// end ;
17852: PPOPN 1
17854: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17855: LD_EXP 44
17859: PUSH
17860: LD_EXP 56
17864: AND
17865: IFFALSE 17944
17867: GO 17869
17869: DISABLE
17870: LD_INT 0
17872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17873: LD_ADDR_VAR 0 1
17877: PUSH
17878: LD_INT 22
17880: PUSH
17881: LD_OWVAR 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 69
17908: ST_TO_ADDR
// if not tmp then
17909: LD_VAR 0 1
17913: NOT
17914: IFFALSE 17918
// exit ;
17916: GO 17944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17918: LD_VAR 0 1
17922: PUSH
17923: LD_INT 1
17925: PPUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 12
17935: ARRAY
17936: PPUSH
17937: LD_INT 100
17939: PPUSH
17940: CALL_OW 234
// end ;
17944: PPOPN 1
17946: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17947: LD_EXP 44
17951: PUSH
17952: LD_EXP 58
17956: AND
17957: IFFALSE 18055
17959: GO 17961
17961: DISABLE
17962: LD_INT 0
17964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17965: LD_ADDR_VAR 0 1
17969: PUSH
17970: LD_INT 22
17972: PUSH
17973: LD_OWVAR 2
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 21
17984: PUSH
17985: LD_INT 1
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: ST_TO_ADDR
// if not tmp then
18001: LD_VAR 0 1
18005: NOT
18006: IFFALSE 18010
// exit ;
18008: GO 18055
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18010: LD_VAR 0 1
18014: PUSH
18015: LD_INT 1
18017: PPUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL_OW 12
18027: ARRAY
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: LD_INT 4
18034: PPUSH
18035: CALL_OW 12
18039: PPUSH
18040: LD_INT 3000
18042: PPUSH
18043: LD_INT 9000
18045: PPUSH
18046: CALL_OW 12
18050: PPUSH
18051: CALL_OW 492
// end ;
18055: PPOPN 1
18057: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18058: LD_EXP 44
18062: PUSH
18063: LD_EXP 59
18067: AND
18068: IFFALSE 18088
18070: GO 18072
18072: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18073: LD_INT 1
18075: PPUSH
18076: LD_OWVAR 2
18080: PPUSH
18081: LD_INT 0
18083: PPUSH
18084: CALL_OW 324
18088: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18089: LD_EXP 44
18093: PUSH
18094: LD_EXP 60
18098: AND
18099: IFFALSE 18182
18101: GO 18103
18103: DISABLE
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_OWVAR 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 21
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// if not tmp then
18144: LD_VAR 0 2
18148: NOT
18149: IFFALSE 18153
// exit ;
18151: GO 18182
// for i in tmp do
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_VAR 0 2
18162: PUSH
18163: FOR_IN
18164: IFFALSE 18180
// SetBLevel ( i , 10 ) ;
18166: LD_VAR 0 1
18170: PPUSH
18171: LD_INT 10
18173: PPUSH
18174: CALL_OW 241
18178: GO 18163
18180: POP
18181: POP
// end ;
18182: PPOPN 2
18184: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18185: LD_EXP 44
18189: PUSH
18190: LD_EXP 61
18194: AND
18195: IFFALSE 18306
18197: GO 18199
18199: DISABLE
18200: LD_INT 0
18202: PPUSH
18203: PPUSH
18204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 22
18212: PUSH
18213: LD_OWVAR 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 25
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: ST_TO_ADDR
// if not tmp then
18241: LD_VAR 0 3
18245: NOT
18246: IFFALSE 18250
// exit ;
18248: GO 18306
// un := tmp [ rand ( 1 , tmp ) ] ;
18250: LD_ADDR_VAR 0 2
18254: PUSH
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 1
18262: PPUSH
18263: LD_VAR 0 3
18267: PPUSH
18268: CALL_OW 12
18272: ARRAY
18273: ST_TO_ADDR
// if Crawls ( un ) then
18274: LD_VAR 0 2
18278: PPUSH
18279: CALL_OW 318
18283: IFFALSE 18294
// ComWalk ( un ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18294: LD_VAR 0 2
18298: PPUSH
18299: LD_INT 5
18301: PPUSH
18302: CALL_OW 336
// end ;
18306: PPOPN 3
18308: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18309: LD_EXP 44
18313: PUSH
18314: LD_EXP 62
18318: AND
18319: PUSH
18320: LD_OWVAR 67
18324: PUSH
18325: LD_INT 3
18327: LESS
18328: AND
18329: IFFALSE 18348
18331: GO 18333
18333: DISABLE
// Difficulty := Difficulty + 1 ;
18334: LD_ADDR_OWVAR 67
18338: PUSH
18339: LD_OWVAR 67
18343: PUSH
18344: LD_INT 1
18346: PLUS
18347: ST_TO_ADDR
18348: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18349: LD_EXP 44
18353: PUSH
18354: LD_EXP 63
18358: AND
18359: IFFALSE 18462
18361: GO 18363
18363: DISABLE
18364: LD_INT 0
18366: PPUSH
// begin for i := 1 to 5 do
18367: LD_ADDR_VAR 0 1
18371: PUSH
18372: DOUBLE
18373: LD_INT 1
18375: DEC
18376: ST_TO_ADDR
18377: LD_INT 5
18379: PUSH
18380: FOR_TO
18381: IFFALSE 18460
// begin uc_nation := nation_nature ;
18383: LD_ADDR_OWVAR 21
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// uc_side := 0 ;
18391: LD_ADDR_OWVAR 20
18395: PUSH
18396: LD_INT 0
18398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18399: LD_ADDR_OWVAR 29
18403: PUSH
18404: LD_INT 12
18406: PUSH
18407: LD_INT 12
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: ST_TO_ADDR
// hc_agressivity := 20 ;
18414: LD_ADDR_OWVAR 35
18418: PUSH
18419: LD_INT 20
18421: ST_TO_ADDR
// hc_class := class_tiger ;
18422: LD_ADDR_OWVAR 28
18426: PUSH
18427: LD_INT 14
18429: ST_TO_ADDR
// hc_gallery :=  ;
18430: LD_ADDR_OWVAR 33
18434: PUSH
18435: LD_STRING 
18437: ST_TO_ADDR
// hc_name :=  ;
18438: LD_ADDR_OWVAR 26
18442: PUSH
18443: LD_STRING 
18445: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18446: CALL_OW 44
18450: PPUSH
18451: LD_INT 0
18453: PPUSH
18454: CALL_OW 51
// end ;
18458: GO 18380
18460: POP
18461: POP
// end ;
18462: PPOPN 1
18464: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18465: LD_EXP 44
18469: PUSH
18470: LD_EXP 64
18474: AND
18475: IFFALSE 18484
18477: GO 18479
18479: DISABLE
// StreamSibBomb ;
18480: CALL 18485 0 0
18484: END
// export function StreamSibBomb ; var i , x , y ; begin
18485: LD_INT 0
18487: PPUSH
18488: PPUSH
18489: PPUSH
18490: PPUSH
// result := false ;
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 0
18498: ST_TO_ADDR
// for i := 1 to 16 do
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: DOUBLE
18505: LD_INT 1
18507: DEC
18508: ST_TO_ADDR
18509: LD_INT 16
18511: PUSH
18512: FOR_TO
18513: IFFALSE 18712
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: LD_INT 10
18522: PUSH
18523: LD_INT 20
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 40
18531: PUSH
18532: LD_INT 50
18534: PUSH
18535: LD_INT 60
18537: PUSH
18538: LD_INT 70
18540: PUSH
18541: LD_INT 80
18543: PUSH
18544: LD_INT 90
18546: PUSH
18547: LD_INT 100
18549: PUSH
18550: LD_INT 110
18552: PUSH
18553: LD_INT 120
18555: PUSH
18556: LD_INT 130
18558: PUSH
18559: LD_INT 140
18561: PUSH
18562: LD_INT 150
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 1
18584: PPUSH
18585: LD_INT 15
18587: PPUSH
18588: CALL_OW 12
18592: ARRAY
18593: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18594: LD_ADDR_VAR 0 4
18598: PUSH
18599: LD_INT 10
18601: PUSH
18602: LD_INT 20
18604: PUSH
18605: LD_INT 30
18607: PUSH
18608: LD_INT 40
18610: PUSH
18611: LD_INT 50
18613: PUSH
18614: LD_INT 60
18616: PUSH
18617: LD_INT 70
18619: PUSH
18620: LD_INT 80
18622: PUSH
18623: LD_INT 90
18625: PUSH
18626: LD_INT 100
18628: PUSH
18629: LD_INT 110
18631: PUSH
18632: LD_INT 120
18634: PUSH
18635: LD_INT 130
18637: PUSH
18638: LD_INT 140
18640: PUSH
18641: LD_INT 150
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PPUSH
18664: LD_INT 15
18666: PPUSH
18667: CALL_OW 12
18671: ARRAY
18672: ST_TO_ADDR
// if ValidHex ( x , y ) then
18673: LD_VAR 0 3
18677: PPUSH
18678: LD_VAR 0 4
18682: PPUSH
18683: CALL_OW 488
18687: IFFALSE 18710
// begin result := [ x , y ] ;
18689: LD_ADDR_VAR 0 1
18693: PUSH
18694: LD_VAR 0 3
18698: PUSH
18699: LD_VAR 0 4
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: ST_TO_ADDR
// break ;
18708: GO 18712
// end ; end ;
18710: GO 18512
18712: POP
18713: POP
// if result then
18714: LD_VAR 0 1
18718: IFFALSE 18778
// begin ToLua ( playSibBomb() ) ;
18720: LD_STRING playSibBomb()
18722: PPUSH
18723: CALL_OW 559
// wait ( 0 0$14 ) ;
18727: LD_INT 490
18729: PPUSH
18730: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18734: LD_VAR 0 1
18738: PUSH
18739: LD_INT 1
18741: ARRAY
18742: PPUSH
18743: LD_VAR 0 1
18747: PUSH
18748: LD_INT 2
18750: ARRAY
18751: PPUSH
18752: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 1
18763: ARRAY
18764: PPUSH
18765: LD_VAR 0 1
18769: PUSH
18770: LD_INT 2
18772: ARRAY
18773: PPUSH
18774: CALL_OW 429
// end ; end ;
18778: LD_VAR 0 1
18782: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18783: LD_EXP 44
18787: PUSH
18788: LD_EXP 66
18792: AND
18793: IFFALSE 18805
18795: GO 18797
18797: DISABLE
// YouLost (  ) ;
18798: LD_STRING 
18800: PPUSH
18801: CALL_OW 104
18805: END
// every 0 0$1 trigger StreamModeActive and sFog do
18806: LD_EXP 44
18810: PUSH
18811: LD_EXP 65
18815: AND
18816: IFFALSE 18830
18818: GO 18820
18820: DISABLE
// FogOff ( your_side ) ;
18821: LD_OWVAR 2
18825: PPUSH
18826: CALL_OW 344
18830: END
// every 0 0$1 trigger StreamModeActive and sSun do
18831: LD_EXP 44
18835: PUSH
18836: LD_EXP 67
18840: AND
18841: IFFALSE 18869
18843: GO 18845
18845: DISABLE
// begin solar_recharge_percent := 0 ;
18846: LD_ADDR_OWVAR 79
18850: PUSH
18851: LD_INT 0
18853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18854: LD_INT 10500
18856: PPUSH
18857: CALL_OW 67
// solar_recharge_percent := 100 ;
18861: LD_ADDR_OWVAR 79
18865: PUSH
18866: LD_INT 100
18868: ST_TO_ADDR
// end ;
18869: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18870: LD_EXP 44
18874: PUSH
18875: LD_EXP 68
18879: AND
18880: IFFALSE 19119
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
18888: PPUSH
18889: PPUSH
// begin tmp := [ ] ;
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: EMPTY
18896: ST_TO_ADDR
// for i := 1 to 6 do
18897: LD_ADDR_VAR 0 1
18901: PUSH
18902: DOUBLE
18903: LD_INT 1
18905: DEC
18906: ST_TO_ADDR
18907: LD_INT 6
18909: PUSH
18910: FOR_TO
18911: IFFALSE 19016
// begin uc_nation := nation_nature ;
18913: LD_ADDR_OWVAR 21
18917: PUSH
18918: LD_INT 0
18920: ST_TO_ADDR
// uc_side := 0 ;
18921: LD_ADDR_OWVAR 20
18925: PUSH
18926: LD_INT 0
18928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18929: LD_ADDR_OWVAR 29
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: LD_INT 12
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: ST_TO_ADDR
// hc_agressivity := 20 ;
18944: LD_ADDR_OWVAR 35
18948: PUSH
18949: LD_INT 20
18951: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18952: LD_ADDR_OWVAR 28
18956: PUSH
18957: LD_INT 17
18959: ST_TO_ADDR
// hc_gallery :=  ;
18960: LD_ADDR_OWVAR 33
18964: PUSH
18965: LD_STRING 
18967: ST_TO_ADDR
// hc_name :=  ;
18968: LD_ADDR_OWVAR 26
18972: PUSH
18973: LD_STRING 
18975: ST_TO_ADDR
// un := CreateHuman ;
18976: LD_ADDR_VAR 0 2
18980: PUSH
18981: CALL_OW 44
18985: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_INT 1
18993: PPUSH
18994: CALL_OW 51
// tmp := tmp ^ un ;
18998: LD_ADDR_VAR 0 3
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_VAR 0 2
19012: ADD
19013: ST_TO_ADDR
// end ;
19014: GO 18910
19016: POP
19017: POP
// repeat wait ( 0 0$1 ) ;
19018: LD_INT 35
19020: PPUSH
19021: CALL_OW 67
// for un in tmp do
19025: LD_ADDR_VAR 0 2
19029: PUSH
19030: LD_VAR 0 3
19034: PUSH
19035: FOR_IN
19036: IFFALSE 19110
// begin if IsDead ( un ) then
19038: LD_VAR 0 2
19042: PPUSH
19043: CALL_OW 301
19047: IFFALSE 19067
// begin tmp := tmp diff un ;
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: LD_VAR 0 2
19063: DIFF
19064: ST_TO_ADDR
// continue ;
19065: GO 19035
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19067: LD_VAR 0 2
19071: PPUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: PPUSH
19094: LD_VAR 0 2
19098: PPUSH
19099: CALL_OW 74
19103: PPUSH
19104: CALL_OW 115
// end ;
19108: GO 19035
19110: POP
19111: POP
// until not tmp ;
19112: LD_VAR 0 3
19116: NOT
19117: IFFALSE 19018
// end ;
19119: PPOPN 3
19121: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19122: LD_EXP 44
19126: PUSH
19127: LD_EXP 69
19131: AND
19132: IFFALSE 19186
19134: GO 19136
19136: DISABLE
// begin ToLua ( displayTroll(); ) ;
19137: LD_STRING displayTroll();
19139: PPUSH
19140: CALL_OW 559
// wait ( 3 3$00 ) ;
19144: LD_INT 6300
19146: PPUSH
19147: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19151: LD_STRING hideTroll();
19153: PPUSH
19154: CALL_OW 559
// wait ( 1 1$00 ) ;
19158: LD_INT 2100
19160: PPUSH
19161: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19165: LD_STRING displayTroll();
19167: PPUSH
19168: CALL_OW 559
// wait ( 1 1$00 ) ;
19172: LD_INT 2100
19174: PPUSH
19175: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19179: LD_STRING hideTroll();
19181: PPUSH
19182: CALL_OW 559
// end ;
19186: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19187: LD_EXP 44
19191: PUSH
19192: LD_EXP 70
19196: AND
19197: IFFALSE 19260
19199: GO 19201
19201: DISABLE
19202: LD_INT 0
19204: PPUSH
// begin p := 0 ;
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_INT 0
19212: ST_TO_ADDR
// repeat game_speed := 1 ;
19213: LD_ADDR_OWVAR 65
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19221: LD_INT 35
19223: PPUSH
19224: CALL_OW 67
// p := p + 1 ;
19228: LD_ADDR_VAR 0 1
19232: PUSH
19233: LD_VAR 0 1
19237: PUSH
19238: LD_INT 1
19240: PLUS
19241: ST_TO_ADDR
// until p >= 60 ;
19242: LD_VAR 0 1
19246: PUSH
19247: LD_INT 60
19249: GREATEREQUAL
19250: IFFALSE 19213
// game_speed := 4 ;
19252: LD_ADDR_OWVAR 65
19256: PUSH
19257: LD_INT 4
19259: ST_TO_ADDR
// end ;
19260: PPOPN 1
19262: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19263: LD_EXP 44
19267: PUSH
19268: LD_EXP 71
19272: AND
19273: IFFALSE 19419
19275: GO 19277
19277: DISABLE
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19282: LD_ADDR_VAR 0 1
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: LD_INT 30
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 30
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PPUSH
19331: CALL_OW 69
19335: ST_TO_ADDR
// if not depot then
19336: LD_VAR 0 1
19340: NOT
19341: IFFALSE 19345
// exit ;
19343: GO 19419
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19345: LD_ADDR_VAR 0 2
19349: PUSH
19350: LD_VAR 0 1
19354: PUSH
19355: LD_INT 1
19357: PPUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 12
19367: ARRAY
19368: PPUSH
19369: CALL_OW 274
19373: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19374: LD_VAR 0 2
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: LD_INT 0
19384: PPUSH
19385: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19389: LD_VAR 0 2
19393: PPUSH
19394: LD_INT 2
19396: PPUSH
19397: LD_INT 0
19399: PPUSH
19400: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19404: LD_VAR 0 2
19408: PPUSH
19409: LD_INT 3
19411: PPUSH
19412: LD_INT 0
19414: PPUSH
19415: CALL_OW 277
// end ;
19419: PPOPN 2
19421: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19422: LD_EXP 44
19426: PUSH
19427: LD_EXP 72
19431: AND
19432: IFFALSE 19529
19434: GO 19436
19436: DISABLE
19437: LD_INT 0
19439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19440: LD_ADDR_VAR 0 1
19444: PUSH
19445: LD_INT 22
19447: PUSH
19448: LD_OWVAR 2
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 21
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: LD_INT 23
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PPUSH
19489: CALL_OW 69
19493: ST_TO_ADDR
// if not tmp then
19494: LD_VAR 0 1
19498: NOT
19499: IFFALSE 19503
// exit ;
19501: GO 19529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19503: LD_VAR 0 1
19507: PUSH
19508: LD_INT 1
19510: PPUSH
19511: LD_VAR 0 1
19515: PPUSH
19516: CALL_OW 12
19520: ARRAY
19521: PPUSH
19522: LD_INT 200
19524: PPUSH
19525: CALL_OW 234
// end ;
19529: PPOPN 1
19531: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19532: LD_EXP 44
19536: PUSH
19537: LD_EXP 73
19541: AND
19542: IFFALSE 19621
19544: GO 19546
19546: DISABLE
19547: LD_INT 0
19549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19550: LD_ADDR_VAR 0 1
19554: PUSH
19555: LD_INT 22
19557: PUSH
19558: LD_OWVAR 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: ST_TO_ADDR
// if not tmp then
19586: LD_VAR 0 1
19590: NOT
19591: IFFALSE 19595
// exit ;
19593: GO 19621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 1
19602: PPUSH
19603: LD_VAR 0 1
19607: PPUSH
19608: CALL_OW 12
19612: ARRAY
19613: PPUSH
19614: LD_INT 60
19616: PPUSH
19617: CALL_OW 234
// end ;
19621: PPOPN 1
19623: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19624: LD_EXP 44
19628: PUSH
19629: LD_EXP 74
19633: AND
19634: IFFALSE 19733
19636: GO 19638
19638: DISABLE
19639: LD_INT 0
19641: PPUSH
19642: PPUSH
// begin enable ;
19643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19644: LD_ADDR_VAR 0 1
19648: PUSH
19649: LD_INT 22
19651: PUSH
19652: LD_OWVAR 2
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 61
19663: PUSH
19664: EMPTY
19665: LIST
19666: PUSH
19667: LD_INT 33
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PPUSH
19682: CALL_OW 69
19686: ST_TO_ADDR
// if not tmp then
19687: LD_VAR 0 1
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19733
// for i in tmp do
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: LD_VAR 0 1
19705: PUSH
19706: FOR_IN
19707: IFFALSE 19731
// if IsControledBy ( i ) then
19709: LD_VAR 0 2
19713: PPUSH
19714: CALL_OW 312
19718: IFFALSE 19729
// ComUnlink ( i ) ;
19720: LD_VAR 0 2
19724: PPUSH
19725: CALL_OW 136
19729: GO 19706
19731: POP
19732: POP
// end ;
19733: PPOPN 2
19735: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19736: LD_EXP 44
19740: PUSH
19741: LD_EXP 75
19745: AND
19746: IFFALSE 19886
19748: GO 19750
19750: DISABLE
19751: LD_INT 0
19753: PPUSH
19754: PPUSH
// begin ToLua ( displayPowell(); ) ;
19755: LD_STRING displayPowell();
19757: PPUSH
19758: CALL_OW 559
// uc_side := 0 ;
19762: LD_ADDR_OWVAR 20
19766: PUSH
19767: LD_INT 0
19769: ST_TO_ADDR
// uc_nation := 2 ;
19770: LD_ADDR_OWVAR 21
19774: PUSH
19775: LD_INT 2
19777: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19778: LD_ADDR_OWVAR 37
19782: PUSH
19783: LD_INT 14
19785: ST_TO_ADDR
// vc_engine := engine_siberite ;
19786: LD_ADDR_OWVAR 39
19790: PUSH
19791: LD_INT 3
19793: ST_TO_ADDR
// vc_control := control_apeman ;
19794: LD_ADDR_OWVAR 38
19798: PUSH
19799: LD_INT 5
19801: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19802: LD_ADDR_OWVAR 40
19806: PUSH
19807: LD_INT 29
19809: ST_TO_ADDR
// un := CreateVehicle ;
19810: LD_ADDR_VAR 0 2
19814: PUSH
19815: CALL_OW 45
19819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19820: LD_VAR 0 2
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19832: LD_INT 35
19834: PPUSH
19835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_INT 22
19846: PUSH
19847: LD_OWVAR 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 69
19860: PPUSH
19861: LD_VAR 0 2
19865: PPUSH
19866: CALL_OW 74
19870: PPUSH
19871: CALL_OW 115
// until IsDead ( un ) ;
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 301
19884: IFFALSE 19832
// end ;
19886: PPOPN 2
19888: END
// every 0 0$1 trigger StreamModeActive and sStu do
19889: LD_EXP 44
19893: PUSH
19894: LD_EXP 83
19898: AND
19899: IFFALSE 19915
19901: GO 19903
19903: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19904: LD_STRING displayStucuk();
19906: PPUSH
19907: CALL_OW 559
// ResetFog ;
19911: CALL_OW 335
// end ;
19915: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19916: LD_EXP 44
19920: PUSH
19921: LD_EXP 76
19925: AND
19926: IFFALSE 20067
19928: GO 19930
19930: DISABLE
19931: LD_INT 0
19933: PPUSH
19934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19935: LD_ADDR_VAR 0 2
19939: PUSH
19940: LD_INT 22
19942: PUSH
19943: LD_OWVAR 2
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 21
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PPUSH
19966: CALL_OW 69
19970: ST_TO_ADDR
// if not tmp then
19971: LD_VAR 0 2
19975: NOT
19976: IFFALSE 19980
// exit ;
19978: GO 20067
// un := tmp [ rand ( 1 , tmp ) ] ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: LD_VAR 0 2
19989: PUSH
19990: LD_INT 1
19992: PPUSH
19993: LD_VAR 0 2
19997: PPUSH
19998: CALL_OW 12
20002: ARRAY
20003: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20004: LD_VAR 0 1
20008: PPUSH
20009: LD_INT 0
20011: PPUSH
20012: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: LD_OWVAR 3
20025: PUSH
20026: LD_VAR 0 1
20030: DIFF
20031: PPUSH
20032: LD_VAR 0 1
20036: PPUSH
20037: CALL_OW 74
20041: PPUSH
20042: CALL_OW 115
// wait ( 0 0$20 ) ;
20046: LD_INT 700
20048: PPUSH
20049: CALL_OW 67
// SetSide ( un , your_side ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: LD_OWVAR 2
20062: PPUSH
20063: CALL_OW 235
// end ;
20067: PPOPN 2
20069: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20070: LD_EXP 44
20074: PUSH
20075: LD_EXP 77
20079: AND
20080: IFFALSE 20186
20082: GO 20084
20084: DISABLE
20085: LD_INT 0
20087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20088: LD_ADDR_VAR 0 1
20092: PUSH
20093: LD_INT 22
20095: PUSH
20096: LD_OWVAR 2
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: LD_INT 30
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 30
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PPUSH
20137: CALL_OW 69
20141: ST_TO_ADDR
// if not depot then
20142: LD_VAR 0 1
20146: NOT
20147: IFFALSE 20151
// exit ;
20149: GO 20186
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20151: LD_VAR 0 1
20155: PUSH
20156: LD_INT 1
20158: ARRAY
20159: PPUSH
20160: CALL_OW 250
20164: PPUSH
20165: LD_VAR 0 1
20169: PUSH
20170: LD_INT 1
20172: ARRAY
20173: PPUSH
20174: CALL_OW 251
20178: PPUSH
20179: LD_INT 70
20181: PPUSH
20182: CALL_OW 495
// end ;
20186: PPOPN 1
20188: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20189: LD_EXP 44
20193: PUSH
20194: LD_EXP 78
20198: AND
20199: IFFALSE 20410
20201: GO 20203
20203: DISABLE
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20211: LD_ADDR_VAR 0 5
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_OWVAR 2
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 21
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 69
20246: ST_TO_ADDR
// if not tmp then
20247: LD_VAR 0 5
20251: NOT
20252: IFFALSE 20256
// exit ;
20254: GO 20410
// for i in tmp do
20256: LD_ADDR_VAR 0 1
20260: PUSH
20261: LD_VAR 0 5
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20408
// begin d := rand ( 0 , 5 ) ;
20269: LD_ADDR_VAR 0 4
20273: PUSH
20274: LD_INT 0
20276: PPUSH
20277: LD_INT 5
20279: PPUSH
20280: CALL_OW 12
20284: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 250
20299: PPUSH
20300: LD_VAR 0 4
20304: PPUSH
20305: LD_INT 3
20307: PPUSH
20308: LD_INT 12
20310: PPUSH
20311: CALL_OW 12
20315: PPUSH
20316: CALL_OW 272
20320: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20321: LD_ADDR_VAR 0 3
20325: PUSH
20326: LD_VAR 0 1
20330: PPUSH
20331: CALL_OW 251
20335: PPUSH
20336: LD_VAR 0 4
20340: PPUSH
20341: LD_INT 3
20343: PPUSH
20344: LD_INT 12
20346: PPUSH
20347: CALL_OW 12
20351: PPUSH
20352: CALL_OW 273
20356: ST_TO_ADDR
// if ValidHex ( x , y ) then
20357: LD_VAR 0 2
20361: PPUSH
20362: LD_VAR 0 3
20366: PPUSH
20367: CALL_OW 488
20371: IFFALSE 20406
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_VAR 0 2
20382: PPUSH
20383: LD_VAR 0 3
20387: PPUSH
20388: LD_INT 3
20390: PPUSH
20391: LD_INT 6
20393: PPUSH
20394: CALL_OW 12
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 483
// end ;
20406: GO 20266
20408: POP
20409: POP
// end ;
20410: PPOPN 5
20412: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20413: LD_EXP 44
20417: PUSH
20418: LD_EXP 79
20422: AND
20423: IFFALSE 20517
20425: GO 20427
20427: DISABLE
20428: LD_INT 0
20430: PPUSH
20431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: LD_OWVAR 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 32
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 21
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: PPUSH
20474: CALL_OW 69
20478: ST_TO_ADDR
// if not tmp then
20479: LD_VAR 0 2
20483: NOT
20484: IFFALSE 20488
// exit ;
20486: GO 20517
// for i in tmp do
20488: LD_ADDR_VAR 0 1
20492: PUSH
20493: LD_VAR 0 2
20497: PUSH
20498: FOR_IN
20499: IFFALSE 20515
// SetFuel ( i , 0 ) ;
20501: LD_VAR 0 1
20505: PPUSH
20506: LD_INT 0
20508: PPUSH
20509: CALL_OW 240
20513: GO 20498
20515: POP
20516: POP
// end ;
20517: PPOPN 2
20519: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20520: LD_EXP 44
20524: PUSH
20525: LD_EXP 80
20529: AND
20530: IFFALSE 20596
20532: GO 20534
20534: DISABLE
20535: LD_INT 0
20537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20538: LD_ADDR_VAR 0 1
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_OWVAR 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 30
20557: PUSH
20558: LD_INT 29
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 69
20573: ST_TO_ADDR
// if not tmp then
20574: LD_VAR 0 1
20578: NOT
20579: IFFALSE 20583
// exit ;
20581: GO 20596
// DestroyUnit ( tmp [ 1 ] ) ;
20583: LD_VAR 0 1
20587: PUSH
20588: LD_INT 1
20590: ARRAY
20591: PPUSH
20592: CALL_OW 65
// end ;
20596: PPOPN 1
20598: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20599: LD_EXP 44
20603: PUSH
20604: LD_EXP 82
20608: AND
20609: IFFALSE 20738
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
// begin uc_side := 0 ;
20617: LD_ADDR_OWVAR 20
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// uc_nation := nation_arabian ;
20625: LD_ADDR_OWVAR 21
20629: PUSH
20630: LD_INT 2
20632: ST_TO_ADDR
// hc_gallery :=  ;
20633: LD_ADDR_OWVAR 33
20637: PUSH
20638: LD_STRING 
20640: ST_TO_ADDR
// hc_name :=  ;
20641: LD_ADDR_OWVAR 26
20645: PUSH
20646: LD_STRING 
20648: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20649: LD_INT 1
20651: PPUSH
20652: LD_INT 11
20654: PPUSH
20655: LD_INT 10
20657: PPUSH
20658: CALL_OW 380
// un := CreateHuman ;
20662: LD_ADDR_VAR 0 1
20666: PUSH
20667: CALL_OW 44
20671: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20672: LD_VAR 0 1
20676: PPUSH
20677: LD_INT 1
20679: PPUSH
20680: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20684: LD_INT 35
20686: PPUSH
20687: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20691: LD_VAR 0 1
20695: PPUSH
20696: LD_INT 22
20698: PUSH
20699: LD_OWVAR 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PPUSH
20708: CALL_OW 69
20712: PPUSH
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 74
20722: PPUSH
20723: CALL_OW 115
// until IsDead ( un ) ;
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 301
20736: IFFALSE 20684
// end ;
20738: PPOPN 1
20740: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20741: LD_EXP 44
20745: PUSH
20746: LD_EXP 84
20750: AND
20751: IFFALSE 20763
20753: GO 20755
20755: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20756: LD_STRING earthquake(getX(game), 0, 32)
20758: PPUSH
20759: CALL_OW 559
20763: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20764: LD_EXP 44
20768: PUSH
20769: LD_EXP 85
20773: AND
20774: IFFALSE 20865
20776: GO 20778
20778: DISABLE
20779: LD_INT 0
20781: PPUSH
// begin enable ;
20782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 33
20812: PUSH
20813: LD_INT 3
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: ST_TO_ADDR
// if not tmp then
20830: LD_VAR 0 1
20834: NOT
20835: IFFALSE 20839
// exit ;
20837: GO 20865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20839: LD_VAR 0 1
20843: PUSH
20844: LD_INT 1
20846: PPUSH
20847: LD_VAR 0 1
20851: PPUSH
20852: CALL_OW 12
20856: ARRAY
20857: PPUSH
20858: LD_INT 1
20860: PPUSH
20861: CALL_OW 234
// end ;
20865: PPOPN 1
20867: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20868: LD_EXP 44
20872: PUSH
20873: LD_EXP 86
20877: AND
20878: IFFALSE 21019
20880: GO 20882
20882: DISABLE
20883: LD_INT 0
20885: PPUSH
20886: PPUSH
20887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_INT 22
20895: PUSH
20896: LD_OWVAR 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 25
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: ST_TO_ADDR
// if not tmp then
20924: LD_VAR 0 3
20928: NOT
20929: IFFALSE 20933
// exit ;
20931: GO 21019
// un := tmp [ rand ( 1 , tmp ) ] ;
20933: LD_ADDR_VAR 0 2
20937: PUSH
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_VAR 0 3
20950: PPUSH
20951: CALL_OW 12
20955: ARRAY
20956: ST_TO_ADDR
// if Crawls ( un ) then
20957: LD_VAR 0 2
20961: PPUSH
20962: CALL_OW 318
20966: IFFALSE 20977
// ComWalk ( un ) ;
20968: LD_VAR 0 2
20972: PPUSH
20973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20977: LD_VAR 0 2
20981: PPUSH
20982: LD_INT 9
20984: PPUSH
20985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20989: LD_INT 28
20991: PPUSH
20992: LD_OWVAR 2
20996: PPUSH
20997: LD_INT 2
20999: PPUSH
21000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21004: LD_INT 29
21006: PPUSH
21007: LD_OWVAR 2
21011: PPUSH
21012: LD_INT 2
21014: PPUSH
21015: CALL_OW 322
// end ;
21019: PPOPN 3
21021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21022: LD_EXP 44
21026: PUSH
21027: LD_EXP 87
21031: AND
21032: IFFALSE 21143
21034: GO 21036
21036: DISABLE
21037: LD_INT 0
21039: PPUSH
21040: PPUSH
21041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21042: LD_ADDR_VAR 0 3
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_OWVAR 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 25
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 3
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21143
// un := tmp [ rand ( 1 , tmp ) ] ;
21087: LD_ADDR_VAR 0 2
21091: PUSH
21092: LD_VAR 0 3
21096: PUSH
21097: LD_INT 1
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: CALL_OW 12
21109: ARRAY
21110: ST_TO_ADDR
// if Crawls ( un ) then
21111: LD_VAR 0 2
21115: PPUSH
21116: CALL_OW 318
21120: IFFALSE 21131
// ComWalk ( un ) ;
21122: LD_VAR 0 2
21126: PPUSH
21127: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_INT 8
21138: PPUSH
21139: CALL_OW 336
// end ;
21143: PPOPN 3
21145: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21146: LD_EXP 44
21150: PUSH
21151: LD_EXP 88
21155: AND
21156: IFFALSE 21300
21158: GO 21160
21160: DISABLE
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21165: LD_ADDR_VAR 0 2
21169: PUSH
21170: LD_INT 22
21172: PUSH
21173: LD_OWVAR 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 21
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 34
21197: PUSH
21198: LD_INT 12
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 34
21207: PUSH
21208: LD_INT 51
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 34
21217: PUSH
21218: LD_INT 32
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: PPUSH
21236: CALL_OW 69
21240: ST_TO_ADDR
// if not tmp then
21241: LD_VAR 0 2
21245: NOT
21246: IFFALSE 21250
// exit ;
21248: GO 21300
// for i in tmp do
21250: LD_ADDR_VAR 0 1
21254: PUSH
21255: LD_VAR 0 2
21259: PUSH
21260: FOR_IN
21261: IFFALSE 21298
// if GetCargo ( i , mat_artifact ) = 0 then
21263: LD_VAR 0 1
21267: PPUSH
21268: LD_INT 4
21270: PPUSH
21271: CALL_OW 289
21275: PUSH
21276: LD_INT 0
21278: EQUAL
21279: IFFALSE 21296
// SetCargo ( i , mat_siberit , 100 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: LD_INT 3
21288: PPUSH
21289: LD_INT 100
21291: PPUSH
21292: CALL_OW 290
21296: GO 21260
21298: POP
21299: POP
// end ;
21300: PPOPN 2
21302: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21303: LD_EXP 44
21307: PUSH
21308: LD_EXP 89
21312: AND
21313: IFFALSE 21496
21315: GO 21317
21317: DISABLE
21318: LD_INT 0
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21322: LD_ADDR_VAR 0 2
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 69
21343: ST_TO_ADDR
// if not tmp then
21344: LD_VAR 0 2
21348: NOT
21349: IFFALSE 21353
// exit ;
21351: GO 21496
// for i := 1 to 2 do
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: DOUBLE
21359: LD_INT 1
21361: DEC
21362: ST_TO_ADDR
21363: LD_INT 2
21365: PUSH
21366: FOR_TO
21367: IFFALSE 21494
// begin uc_side := your_side ;
21369: LD_ADDR_OWVAR 20
21373: PUSH
21374: LD_OWVAR 2
21378: ST_TO_ADDR
// uc_nation := nation_american ;
21379: LD_ADDR_OWVAR 21
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// vc_chassis := us_morphling ;
21387: LD_ADDR_OWVAR 37
21391: PUSH
21392: LD_INT 5
21394: ST_TO_ADDR
// vc_engine := engine_siberite ;
21395: LD_ADDR_OWVAR 39
21399: PUSH
21400: LD_INT 3
21402: ST_TO_ADDR
// vc_control := control_computer ;
21403: LD_ADDR_OWVAR 38
21407: PUSH
21408: LD_INT 3
21410: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21411: LD_ADDR_OWVAR 40
21415: PUSH
21416: LD_INT 10
21418: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21419: LD_VAR 0 2
21423: PUSH
21424: LD_INT 1
21426: ARRAY
21427: PPUSH
21428: CALL_OW 310
21432: NOT
21433: IFFALSE 21480
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21435: CALL_OW 45
21439: PPUSH
21440: LD_VAR 0 2
21444: PUSH
21445: LD_INT 1
21447: ARRAY
21448: PPUSH
21449: CALL_OW 250
21453: PPUSH
21454: LD_VAR 0 2
21458: PUSH
21459: LD_INT 1
21461: ARRAY
21462: PPUSH
21463: CALL_OW 251
21467: PPUSH
21468: LD_INT 12
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 50
21478: GO 21492
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21480: CALL_OW 45
21484: PPUSH
21485: LD_INT 1
21487: PPUSH
21488: CALL_OW 51
// end ;
21492: GO 21366
21494: POP
21495: POP
// end ;
21496: PPOPN 2
21498: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21499: LD_EXP 44
21503: PUSH
21504: LD_EXP 90
21508: AND
21509: IFFALSE 21731
21511: GO 21513
21513: DISABLE
21514: LD_INT 0
21516: PPUSH
21517: PPUSH
21518: PPUSH
21519: PPUSH
21520: PPUSH
21521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21522: LD_ADDR_VAR 0 6
21526: PUSH
21527: LD_INT 22
21529: PUSH
21530: LD_OWVAR 2
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 21
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 3
21551: PUSH
21552: LD_INT 23
21554: PUSH
21555: LD_INT 0
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 69
21575: ST_TO_ADDR
// if not tmp then
21576: LD_VAR 0 6
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 21731
// s1 := rand ( 1 , 4 ) ;
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_INT 4
21595: PPUSH
21596: CALL_OW 12
21600: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21601: LD_ADDR_VAR 0 4
21605: PUSH
21606: LD_VAR 0 6
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: PPUSH
21615: LD_VAR 0 2
21619: PPUSH
21620: CALL_OW 259
21624: ST_TO_ADDR
// if s1 = 1 then
21625: LD_VAR 0 2
21629: PUSH
21630: LD_INT 1
21632: EQUAL
21633: IFFALSE 21653
// s2 := rand ( 2 , 4 ) else
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_INT 2
21642: PPUSH
21643: LD_INT 4
21645: PPUSH
21646: CALL_OW 12
21650: ST_TO_ADDR
21651: GO 21661
// s2 := 1 ;
21653: LD_ADDR_VAR 0 3
21657: PUSH
21658: LD_INT 1
21660: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21661: LD_ADDR_VAR 0 5
21665: PUSH
21666: LD_VAR 0 6
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: CALL_OW 259
21684: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21685: LD_VAR 0 6
21689: PUSH
21690: LD_INT 1
21692: ARRAY
21693: PPUSH
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 5
21703: PPUSH
21704: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21708: LD_VAR 0 6
21712: PUSH
21713: LD_INT 1
21715: ARRAY
21716: PPUSH
21717: LD_VAR 0 3
21721: PPUSH
21722: LD_VAR 0 4
21726: PPUSH
21727: CALL_OW 237
// end ;
21731: PPOPN 6
21733: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21734: LD_EXP 44
21738: PUSH
21739: LD_EXP 91
21743: AND
21744: IFFALSE 21823
21746: GO 21748
21748: DISABLE
21749: LD_INT 0
21751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21752: LD_ADDR_VAR 0 1
21756: PUSH
21757: LD_INT 22
21759: PUSH
21760: LD_OWVAR 2
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 30
21771: PUSH
21772: LD_INT 3
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: CALL_OW 69
21787: ST_TO_ADDR
// if not tmp then
21788: LD_VAR 0 1
21792: NOT
21793: IFFALSE 21797
// exit ;
21795: GO 21823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21797: LD_VAR 0 1
21801: PUSH
21802: LD_INT 1
21804: PPUSH
21805: LD_VAR 0 1
21809: PPUSH
21810: CALL_OW 12
21814: ARRAY
21815: PPUSH
21816: LD_INT 1
21818: PPUSH
21819: CALL_OW 234
// end ;
21823: PPOPN 1
21825: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21826: LD_EXP 44
21830: PUSH
21831: LD_EXP 92
21835: AND
21836: IFFALSE 21948
21838: GO 21840
21840: DISABLE
21841: LD_INT 0
21843: PPUSH
21844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_OWVAR 2
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: PUSH
21865: LD_INT 30
21867: PUSH
21868: LD_INT 27
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 26
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 30
21887: PUSH
21888: LD_INT 28
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: ST_TO_ADDR
// if not tmp then
21910: LD_VAR 0 2
21914: NOT
21915: IFFALSE 21919
// exit ;
21917: GO 21948
// for i in tmp do
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: LD_VAR 0 2
21928: PUSH
21929: FOR_IN
21930: IFFALSE 21946
// SetLives ( i , 1 ) ;
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL_OW 234
21944: GO 21929
21946: POP
21947: POP
// end ;
21948: PPOPN 2
21950: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21951: LD_EXP 44
21955: PUSH
21956: LD_EXP 93
21960: AND
21961: IFFALSE 22235
21963: GO 21965
21965: DISABLE
21966: LD_INT 0
21968: PPUSH
21969: PPUSH
21970: PPUSH
// begin i := rand ( 1 , 7 ) ;
21971: LD_ADDR_VAR 0 1
21975: PUSH
21976: LD_INT 1
21978: PPUSH
21979: LD_INT 7
21981: PPUSH
21982: CALL_OW 12
21986: ST_TO_ADDR
// case i of 1 :
21987: LD_VAR 0 1
21991: PUSH
21992: LD_INT 1
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22010
22000: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22001: LD_STRING earthquake(getX(game), 0, 32)
22003: PPUSH
22004: CALL_OW 559
22008: GO 22235
22010: LD_INT 2
22012: DOUBLE
22013: EQUAL
22014: IFTRUE 22018
22016: GO 22032
22018: POP
// begin ToLua ( displayStucuk(); ) ;
22019: LD_STRING displayStucuk();
22021: PPUSH
22022: CALL_OW 559
// ResetFog ;
22026: CALL_OW 335
// end ; 3 :
22030: GO 22235
22032: LD_INT 3
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22144
22040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22041: LD_ADDR_VAR 0 2
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_OWVAR 2
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 25
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PPUSH
22072: CALL_OW 69
22076: ST_TO_ADDR
// if not tmp then
22077: LD_VAR 0 2
22081: NOT
22082: IFFALSE 22086
// exit ;
22084: GO 22235
// un := tmp [ rand ( 1 , tmp ) ] ;
22086: LD_ADDR_VAR 0 3
22090: PUSH
22091: LD_VAR 0 2
22095: PUSH
22096: LD_INT 1
22098: PPUSH
22099: LD_VAR 0 2
22103: PPUSH
22104: CALL_OW 12
22108: ARRAY
22109: ST_TO_ADDR
// if Crawls ( un ) then
22110: LD_VAR 0 3
22114: PPUSH
22115: CALL_OW 318
22119: IFFALSE 22130
// ComWalk ( un ) ;
22121: LD_VAR 0 3
22125: PPUSH
22126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22130: LD_VAR 0 3
22134: PPUSH
22135: LD_INT 8
22137: PPUSH
22138: CALL_OW 336
// end ; 4 :
22142: GO 22235
22144: LD_INT 4
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22213
22152: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22153: LD_ADDR_VAR 0 2
22157: PUSH
22158: LD_INT 22
22160: PUSH
22161: LD_OWVAR 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 30
22172: PUSH
22173: LD_INT 29
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 69
22188: ST_TO_ADDR
// if not tmp then
22189: LD_VAR 0 2
22193: NOT
22194: IFFALSE 22198
// exit ;
22196: GO 22235
// DestroyUnit ( tmp [ 1 ] ) ;
22198: LD_VAR 0 2
22202: PUSH
22203: LD_INT 1
22205: ARRAY
22206: PPUSH
22207: CALL_OW 65
// end ; 5 .. 7 :
22211: GO 22235
22213: LD_INT 5
22215: DOUBLE
22216: GREATEREQUAL
22217: IFFALSE 22225
22219: LD_INT 7
22221: DOUBLE
22222: LESSEQUAL
22223: IFTRUE 22227
22225: GO 22234
22227: POP
// StreamSibBomb ; end ;
22228: CALL 18485 0 0
22232: GO 22235
22234: POP
// end ;
22235: PPOPN 3
22237: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22238: LD_EXP 44
22242: PUSH
22243: LD_EXP 94
22247: AND
22248: IFFALSE 22404
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 81
22265: PUSH
22266: LD_OWVAR 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 21
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 21
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 2
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22404
// p := 0 ;
22321: LD_ADDR_VAR 0 3
22325: PUSH
22326: LD_INT 0
22328: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22329: LD_INT 35
22331: PPUSH
22332: CALL_OW 67
// p := p + 1 ;
22336: LD_ADDR_VAR 0 3
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: LD_INT 1
22348: PLUS
22349: ST_TO_ADDR
// for i in tmp do
22350: LD_ADDR_VAR 0 1
22354: PUSH
22355: LD_VAR 0 2
22359: PUSH
22360: FOR_IN
22361: IFFALSE 22392
// if GetLives ( i ) < 1000 then
22363: LD_VAR 0 1
22367: PPUSH
22368: CALL_OW 256
22372: PUSH
22373: LD_INT 1000
22375: LESS
22376: IFFALSE 22390
// SetLives ( i , 1000 ) ;
22378: LD_VAR 0 1
22382: PPUSH
22383: LD_INT 1000
22385: PPUSH
22386: CALL_OW 234
22390: GO 22360
22392: POP
22393: POP
// until p > 20 ;
22394: LD_VAR 0 3
22398: PUSH
22399: LD_INT 20
22401: GREATER
22402: IFFALSE 22329
// end ;
22404: PPOPN 3
22406: END
// every 0 0$1 trigger StreamModeActive and sTime do
22407: LD_EXP 44
22411: PUSH
22412: LD_EXP 95
22416: AND
22417: IFFALSE 22452
22419: GO 22421
22421: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22422: LD_INT 28
22424: PPUSH
22425: LD_OWVAR 2
22429: PPUSH
22430: LD_INT 2
22432: PPUSH
22433: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22437: LD_INT 30
22439: PPUSH
22440: LD_OWVAR 2
22444: PPUSH
22445: LD_INT 2
22447: PPUSH
22448: CALL_OW 322
// end ;
22452: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22453: LD_EXP 44
22457: PUSH
22458: LD_EXP 96
22462: AND
22463: IFFALSE 22584
22465: GO 22467
22467: DISABLE
22468: LD_INT 0
22470: PPUSH
22471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22472: LD_ADDR_VAR 0 2
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_OWVAR 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 21
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 3
22501: PUSH
22502: LD_INT 23
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: PPUSH
22521: CALL_OW 69
22525: ST_TO_ADDR
// if not tmp then
22526: LD_VAR 0 2
22530: NOT
22531: IFFALSE 22535
// exit ;
22533: GO 22584
// for i in tmp do
22535: LD_ADDR_VAR 0 1
22539: PUSH
22540: LD_VAR 0 2
22544: PUSH
22545: FOR_IN
22546: IFFALSE 22582
// begin if Crawls ( i ) then
22548: LD_VAR 0 1
22552: PPUSH
22553: CALL_OW 318
22557: IFFALSE 22568
// ComWalk ( i ) ;
22559: LD_VAR 0 1
22563: PPUSH
22564: CALL_OW 138
// SetClass ( i , 2 ) ;
22568: LD_VAR 0 1
22572: PPUSH
22573: LD_INT 2
22575: PPUSH
22576: CALL_OW 336
// end ;
22580: GO 22545
22582: POP
22583: POP
// end ;
22584: PPOPN 2
22586: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22587: LD_EXP 44
22591: PUSH
22592: LD_EXP 97
22596: AND
22597: IFFALSE 22878
22599: GO 22601
22601: DISABLE
22602: LD_INT 0
22604: PPUSH
22605: PPUSH
22606: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22607: LD_OWVAR 2
22611: PPUSH
22612: LD_INT 9
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22625: LD_INT 9
22627: PPUSH
22628: LD_OWVAR 2
22632: PPUSH
22633: CALL_OW 343
// uc_side := 9 ;
22637: LD_ADDR_OWVAR 20
22641: PUSH
22642: LD_INT 9
22644: ST_TO_ADDR
// uc_nation := 2 ;
22645: LD_ADDR_OWVAR 21
22649: PUSH
22650: LD_INT 2
22652: ST_TO_ADDR
// hc_name := Dark Warrior ;
22653: LD_ADDR_OWVAR 26
22657: PUSH
22658: LD_STRING Dark Warrior
22660: ST_TO_ADDR
// hc_gallery :=  ;
22661: LD_ADDR_OWVAR 33
22665: PUSH
22666: LD_STRING 
22668: ST_TO_ADDR
// hc_noskilllimit := true ;
22669: LD_ADDR_OWVAR 76
22673: PUSH
22674: LD_INT 1
22676: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22677: LD_ADDR_OWVAR 31
22681: PUSH
22682: LD_INT 30
22684: PUSH
22685: LD_INT 30
22687: PUSH
22688: LD_INT 30
22690: PUSH
22691: LD_INT 30
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: ST_TO_ADDR
// un := CreateHuman ;
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: CALL_OW 44
22709: ST_TO_ADDR
// hc_noskilllimit := false ;
22710: LD_ADDR_OWVAR 76
22714: PUSH
22715: LD_INT 0
22717: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: CALL_OW 51
// p := 0 ;
22730: LD_ADDR_VAR 0 2
22734: PUSH
22735: LD_INT 0
22737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22738: LD_INT 35
22740: PPUSH
22741: CALL_OW 67
// p := p + 1 ;
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_VAR 0 2
22754: PUSH
22755: LD_INT 1
22757: PLUS
22758: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22759: LD_VAR 0 3
22763: PPUSH
22764: CALL_OW 256
22768: PUSH
22769: LD_INT 1000
22771: LESS
22772: IFFALSE 22786
// SetLives ( un , 1000 ) ;
22774: LD_VAR 0 3
22778: PPUSH
22779: LD_INT 1000
22781: PPUSH
22782: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22786: LD_VAR 0 3
22790: PPUSH
22791: LD_INT 81
22793: PUSH
22794: LD_OWVAR 2
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 91
22805: PUSH
22806: LD_VAR 0 3
22810: PUSH
22811: LD_INT 30
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PPUSH
22823: CALL_OW 69
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: CALL_OW 74
22837: PPUSH
22838: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 60
22849: GREATER
22850: PUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 301
22860: OR
22861: IFFALSE 22738
// if un then
22863: LD_VAR 0 3
22867: IFFALSE 22878
// RemoveUnit ( un ) ;
22869: LD_VAR 0 3
22873: PPUSH
22874: CALL_OW 64
// end ; end_of_file
22878: PPOPN 3
22880: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22881: LD_INT 0
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 264
22896: PUSH
22897: LD_EXP 34
22901: EQUAL
22902: IFFALSE 22974
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22904: LD_INT 68
22906: PPUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 255
22916: PPUSH
22917: CALL_OW 321
22921: PUSH
22922: LD_INT 2
22924: EQUAL
22925: IFFALSE 22937
// eff := 70 else
22927: LD_ADDR_VAR 0 4
22931: PUSH
22932: LD_INT 70
22934: ST_TO_ADDR
22935: GO 22945
// eff := 30 ;
22937: LD_ADDR_VAR 0 4
22941: PUSH
22942: LD_INT 30
22944: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 250
22954: PPUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL_OW 251
22964: PPUSH
22965: LD_VAR 0 4
22969: PPUSH
22970: CALL_OW 495
// end ; end ;
22974: LD_VAR 0 2
22978: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22979: LD_INT 0
22981: PPUSH
// end ;
22982: LD_VAR 0 4
22986: RET
// export function SOS_Command ( cmd ) ; begin
22987: LD_INT 0
22989: PPUSH
// end ;
22990: LD_VAR 0 2
22994: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22995: LD_VAR 0 1
22999: PUSH
23000: LD_INT 255
23002: EQUAL
23003: PUSH
23004: LD_VAR 0 2
23008: PPUSH
23009: CALL_OW 264
23013: PUSH
23014: LD_INT 14
23016: PUSH
23017: LD_INT 53
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: IN
23024: AND
23025: PUSH
23026: LD_VAR 0 4
23030: PPUSH
23031: LD_VAR 0 5
23035: PPUSH
23036: CALL_OW 488
23040: AND
23041: IFFALSE 23065
// CutTreeXYR ( unit , x , y , 12 ) ;
23043: LD_VAR 0 2
23047: PPUSH
23048: LD_VAR 0 4
23052: PPUSH
23053: LD_VAR 0 5
23057: PPUSH
23058: LD_INT 12
23060: PPUSH
23061: CALL 23068 0 4
// end ;
23065: PPOPN 5
23067: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23068: LD_INT 0
23070: PPUSH
23071: PPUSH
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
23076: PPUSH
23077: PPUSH
23078: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23079: LD_VAR 0 1
23083: NOT
23084: PUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: CALL_OW 488
23099: NOT
23100: OR
23101: PUSH
23102: LD_VAR 0 4
23106: NOT
23107: OR
23108: IFFALSE 23112
// exit ;
23110: GO 23452
// list := [ ] ;
23112: LD_ADDR_VAR 0 13
23116: PUSH
23117: EMPTY
23118: ST_TO_ADDR
// if x - r < 0 then
23119: LD_VAR 0 2
23123: PUSH
23124: LD_VAR 0 4
23128: MINUS
23129: PUSH
23130: LD_INT 0
23132: LESS
23133: IFFALSE 23145
// min_x := 0 else
23135: LD_ADDR_VAR 0 7
23139: PUSH
23140: LD_INT 0
23142: ST_TO_ADDR
23143: GO 23161
// min_x := x - r ;
23145: LD_ADDR_VAR 0 7
23149: PUSH
23150: LD_VAR 0 2
23154: PUSH
23155: LD_VAR 0 4
23159: MINUS
23160: ST_TO_ADDR
// if y - r < 0 then
23161: LD_VAR 0 3
23165: PUSH
23166: LD_VAR 0 4
23170: MINUS
23171: PUSH
23172: LD_INT 0
23174: LESS
23175: IFFALSE 23187
// min_y := 0 else
23177: LD_ADDR_VAR 0 8
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
23185: GO 23203
// min_y := y - r ;
23187: LD_ADDR_VAR 0 8
23191: PUSH
23192: LD_VAR 0 3
23196: PUSH
23197: LD_VAR 0 4
23201: MINUS
23202: ST_TO_ADDR
// max_x := x + r ;
23203: LD_ADDR_VAR 0 9
23207: PUSH
23208: LD_VAR 0 2
23212: PUSH
23213: LD_VAR 0 4
23217: PLUS
23218: ST_TO_ADDR
// max_y := y + r ;
23219: LD_ADDR_VAR 0 10
23223: PUSH
23224: LD_VAR 0 3
23228: PUSH
23229: LD_VAR 0 4
23233: PLUS
23234: ST_TO_ADDR
// for _x = min_x to max_x do
23235: LD_ADDR_VAR 0 11
23239: PUSH
23240: DOUBLE
23241: LD_VAR 0 7
23245: DEC
23246: ST_TO_ADDR
23247: LD_VAR 0 9
23251: PUSH
23252: FOR_TO
23253: IFFALSE 23370
// for _y = min_y to max_y do
23255: LD_ADDR_VAR 0 12
23259: PUSH
23260: DOUBLE
23261: LD_VAR 0 8
23265: DEC
23266: ST_TO_ADDR
23267: LD_VAR 0 10
23271: PUSH
23272: FOR_TO
23273: IFFALSE 23366
// begin if not ValidHex ( _x , _y ) then
23275: LD_VAR 0 11
23279: PPUSH
23280: LD_VAR 0 12
23284: PPUSH
23285: CALL_OW 488
23289: NOT
23290: IFFALSE 23294
// continue ;
23292: GO 23272
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23294: LD_VAR 0 11
23298: PPUSH
23299: LD_VAR 0 12
23303: PPUSH
23304: CALL_OW 351
23308: PUSH
23309: LD_VAR 0 11
23313: PPUSH
23314: LD_VAR 0 12
23318: PPUSH
23319: CALL_OW 554
23323: AND
23324: IFFALSE 23364
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23326: LD_ADDR_VAR 0 13
23330: PUSH
23331: LD_VAR 0 13
23335: PPUSH
23336: LD_VAR 0 13
23340: PUSH
23341: LD_INT 1
23343: PLUS
23344: PPUSH
23345: LD_VAR 0 11
23349: PUSH
23350: LD_VAR 0 12
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 2
23363: ST_TO_ADDR
// end ;
23364: GO 23272
23366: POP
23367: POP
23368: GO 23252
23370: POP
23371: POP
// if not list then
23372: LD_VAR 0 13
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 23452
// for i in list do
23381: LD_ADDR_VAR 0 6
23385: PUSH
23386: LD_VAR 0 13
23390: PUSH
23391: FOR_IN
23392: IFFALSE 23450
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23394: LD_VAR 0 1
23398: PPUSH
23399: LD_STRING M
23401: PUSH
23402: LD_VAR 0 6
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PUSH
23411: LD_VAR 0 6
23415: PUSH
23416: LD_INT 2
23418: ARRAY
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: PPUSH
23444: CALL_OW 447
23448: GO 23391
23450: POP
23451: POP
// end ;
23452: LD_VAR 0 5
23456: RET
