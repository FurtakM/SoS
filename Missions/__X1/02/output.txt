// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11619 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 30653 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 30653 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7246
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7184
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// end else
7182: GO 7246
// begin aviradzeQuestDone := true ;
7184: LD_ADDR_EXP 8
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// attackDeltaAllowed := true ;
7192: LD_ADDR_EXP 14
7196: PUSH
7197: LD_INT 1
7199: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7200: LD_STRING ODelta2
7202: PPUSH
7203: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 5
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: PUSH
7227: FOR_IN
7228: IFFALSE 7244
// SetSide ( i , 2 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: CALL_OW 235
7242: GO 7227
7244: POP
7245: POP
// end ; end ;
7246: PPOPN 2
7248: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7249: LD_EXP 10
7253: PUSH
7254: LD_EXP 8
7258: NOT
7259: AND
7260: IFFALSE 7277
7262: GO 7264
7264: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7265: LD_EXP 20
7269: PPUSH
7270: LD_STRING DDelta-Alarm-1
7272: PPUSH
7273: CALL_OW 94
7277: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7278: LD_EXP 7
7282: NOT
7283: PUSH
7284: LD_EXP 22
7288: PPUSH
7289: LD_EXP 23
7293: PPUSH
7294: CALL_OW 74
7298: PPUSH
7299: LD_EXP 23
7303: PPUSH
7304: CALL_OW 296
7308: PUSH
7309: LD_INT 8
7311: LESS
7312: AND
7313: PUSH
7314: LD_INT 2
7316: PPUSH
7317: LD_EXP 22
7321: PPUSH
7322: LD_EXP 23
7326: PPUSH
7327: CALL_OW 74
7331: PPUSH
7332: CALL_OW 292
7336: AND
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 21
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: PUSH
7367: LD_INT 1
7369: GREATER
7370: AND
7371: PUSH
7372: LD_EXP 4
7376: NOT
7377: AND
7378: IFFALSE 7422
7380: GO 7382
7382: DISABLE
// begin sciSpotted := true ;
7383: LD_ADDR_EXP 7
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7391: LD_EXP 22
7395: PPUSH
7396: LD_EXP 23
7400: PPUSH
7401: CALL_OW 74
7405: PPUSH
7406: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7410: LD_EXP 23
7414: PPUSH
7415: LD_STRING DH-1-sci
7417: PPUSH
7418: CALL_OW 88
// end ;
7422: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7423: LD_EXP 4
7427: PUSH
7428: LD_EXP 7
7432: NOT
7433: AND
7434: PUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_EXP 22
7442: PPUSH
7443: LD_EXP 23
7447: PPUSH
7448: CALL_OW 74
7452: PPUSH
7453: CALL_OW 292
7457: AND
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 21
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: PUSH
7488: LD_INT 1
7490: GREATER
7491: AND
7492: PUSH
7493: LD_EXP 4
7497: AND
7498: PUSH
7499: LD_EXP 8
7503: NOT
7504: AND
7505: IFFALSE 7646
7507: GO 7509
7509: DISABLE
7510: LD_INT 0
7512: PPUSH
// begin sciSpotted := true ;
7513: LD_ADDR_EXP 7
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_EXP 22
7530: PPUSH
7531: LD_EXP 23
7535: PPUSH
7536: CALL_OW 74
7540: ST_TO_ADDR
// DialogueOn ;
7541: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 250
7554: PPUSH
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 251
7564: PPUSH
7565: LD_INT 2
7567: PPUSH
7568: LD_INT 3
7570: NEG
7571: PPUSH
7572: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7585: LD_EXP 23
7589: PPUSH
7590: LD_STRING DH-1-sci-a
7592: PPUSH
7593: CALL_OW 88
// if Mike then
7597: LD_EXP 25
7601: IFFALSE 7615
// Say ( Mike , DM-1-sci-a ) ;
7603: LD_EXP 25
7607: PPUSH
7608: LD_STRING DM-1-sci-a
7610: PPUSH
7611: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 250
7624: PPUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 251
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 331
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7649: LD_EXP 10
7653: PUSH
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 256
7663: PUSH
7664: LD_INT 1000
7666: LESS
7667: PUSH
7668: LD_INT 3
7670: PPUSH
7671: CALL_OW 256
7675: PUSH
7676: LD_INT 999
7678: LESS
7679: OR
7680: AND
7681: IFFALSE 7937
7683: GO 7685
7685: DISABLE
7686: LD_INT 0
7688: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7689: LD_ADDR_VAR 0 1
7693: PUSH
7694: LD_INT 22
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 58
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7730: LD_VAR 0 1
7734: PUSH
7735: LD_EXP 19
7739: PPUSH
7740: CALL_OW 302
7744: AND
7745: IFFALSE 7787
// begin if IsInUnit ( Gladstone ) then
7747: LD_EXP 19
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7767
// ComExitBuilding ( Gladstone ) ;
7758: LD_EXP 19
7762: PPUSH
7763: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7767: LD_EXP 19
7771: PPUSH
7772: LD_VAR 0 1
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: CALL_OW 180
// end else
7785: GO 7807
// if IsInUnit ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 310
7796: IFFALSE 7807
// ComExitBuilding ( Gladstone ) ;
7798: LD_EXP 19
7802: PPUSH
7803: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7807: LD_EXP 19
7811: PPUSH
7812: LD_INT 27
7814: PPUSH
7815: LD_INT 51
7817: PPUSH
7818: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7822: LD_EXP 19
7826: PPUSH
7827: LD_STRING D8-Glad-2
7829: PPUSH
7830: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_INT 27
7848: PPUSH
7849: LD_INT 51
7851: PPUSH
7852: CALL_OW 307
7856: PUSH
7857: LD_EXP 19
7861: PPUSH
7862: CALL_OW 310
7866: PPUSH
7867: LD_INT 27
7869: PPUSH
7870: LD_INT 51
7872: PPUSH
7873: CALL_OW 307
7877: OR
7878: PUSH
7879: LD_EXP 19
7883: PPUSH
7884: CALL_OW 301
7888: OR
7889: IFFALSE 7834
// if IsDead ( Gladstone ) then
7891: LD_EXP 19
7895: PPUSH
7896: CALL_OW 301
7900: IFFALSE 7904
// exit ;
7902: GO 7937
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7904: LD_INT 27
7906: PPUSH
7907: LD_INT 51
7909: PPUSH
7910: CALL_OW 428
7914: PPUSH
7915: CALL_OW 64
// gladstoneEscaped := true ;
7919: LD_ADDR_EXP 12
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7927: LD_INT 1
7929: PPUSH
7930: LD_STRING 02_GladstoneEscaped
7932: PPUSH
7933: CALL_OW 39
// end ;
7937: PPOPN 1
7939: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7940: LD_EXP 4
7944: PUSH
7945: LD_EXP 9
7949: PUSH
7950: LD_INT 3
7952: GREATEREQUAL
7953: PUSH
7954: LD_EXP 22
7958: NOT
7959: OR
7960: AND
7961: PUSH
7962: LD_EXP 8
7966: NOT
7967: AND
7968: IFFALSE 8011
7970: GO 7972
7972: DISABLE
// begin aviradzeQuestDone := true ;
7973: LD_ADDR_EXP 8
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7981: LD_EXP 23
7985: PPUSH
7986: LD_STRING DH-1-quest-done
7988: PPUSH
7989: CALL_OW 88
// if Givi then
7993: LD_EXP 24
7997: IFFALSE 8011
// Say ( Givi , DG-1-quest-done ) ;
7999: LD_EXP 24
8003: PPUSH
8004: LD_STRING DG-1-quest-done
8006: PPUSH
8007: CALL_OW 88
// end ;
8011: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8012: LD_INT 11
8014: PPUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 70
8029: PUSH
8030: LD_INT 1
8032: GREATER
8033: PUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 255
8041: PUSH
8042: LD_INT 2
8044: EQUAL
8045: AND
8046: PUSH
8047: LD_EXP 25
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: PUSH
8058: LD_EXP 23
8062: PPUSH
8063: CALL_OW 302
8067: AND
8068: IFFALSE 8213
8070: GO 8072
8072: DISABLE
// begin DialogueOn ;
8073: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8077: LD_INT 47
8079: PPUSH
8080: LD_INT 19
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: LD_INT 6
8088: NEG
8089: PPUSH
8090: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8094: LD_INT 47
8096: PPUSH
8097: LD_INT 19
8099: PPUSH
8100: LD_INT 2
8102: PPUSH
8103: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8107: LD_INT 34
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 6
8118: NEG
8119: PPUSH
8120: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8124: LD_INT 34
8126: PPUSH
8127: LD_INT 32
8129: PPUSH
8130: LD_INT 2
8132: PPUSH
8133: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8137: LD_EXP 25
8141: PPUSH
8142: LD_STRING DM-Prem-1
8144: PPUSH
8145: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8149: LD_EXP 23
8153: PPUSH
8154: LD_STRING DH-Prem-2
8156: PPUSH
8157: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8161: LD_EXP 23
8165: PPUSH
8166: LD_STRING DH-Prem-3
8168: PPUSH
8169: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8173: LD_EXP 25
8177: PPUSH
8178: LD_STRING DM-Prem-4
8180: PPUSH
8181: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8185: LD_EXP 25
8189: PPUSH
8190: LD_STRING DM-Prem-5
8192: PPUSH
8193: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8197: LD_EXP 24
8201: PPUSH
8202: LD_STRING DG-Prem-6
8204: PPUSH
8205: CALL_OW 88
// DialogueOff ;
8209: CALL_OW 7
// end ;
8213: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8214: LD_INT 5
8216: PPUSH
8217: LD_EXP 23
8221: PPUSH
8222: CALL_OW 292
8226: PUSH
8227: LD_EXP 23
8231: PPUSH
8232: LD_EXP 27
8236: PPUSH
8237: CALL_OW 296
8241: PUSH
8242: LD_INT 6
8244: LESS
8245: AND
8246: PUSH
8247: LD_EXP 8
8251: AND
8252: PUSH
8253: LD_EXP 14
8257: NOT
8258: AND
8259: IFFALSE 8397
8261: GO 8263
8263: DISABLE
8264: LD_INT 0
8266: PPUSH
// begin attackDeltaAllowed := true ;
8267: LD_ADDR_EXP 14
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// InGameOn ;
8275: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8279: LD_EXP 23
8283: PPUSH
8284: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8288: LD_INT 10
8290: PPUSH
8291: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8295: LD_EXP 27
8299: PPUSH
8300: LD_EXP 23
8304: PPUSH
8305: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8309: LD_EXP 23
8313: PPUSH
8314: LD_EXP 27
8318: PPUSH
8319: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8323: LD_EXP 23
8327: PPUSH
8328: LD_STRING DH-1-return
8330: PPUSH
8331: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8335: LD_EXP 27
8339: PPUSH
8340: LD_STRING DA-1-return
8342: PPUSH
8343: CALL_OW 88
// InGameOff ;
8347: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8351: LD_STRING ODelta
8353: PPUSH
8354: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8358: LD_ADDR_VAR 0 1
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 5
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8395
// SetSide ( i , 2 ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 235
8393: GO 8378
8395: POP
8396: POP
// end ;
8397: PPOPN 1
8399: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8400: LD_EXP 10
8404: PUSH
8405: LD_EXP 14
8409: NOT
8410: AND
8411: IFFALSE 8424
8413: GO 8415
8415: DISABLE
// spottedBeforeRadio := true ;
8416: LD_ADDR_EXP 6
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
8424: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8425: LD_EXP 14
8429: PUSH
8430: LD_EXP 30
8434: PPUSH
8435: CALL_OW 302
8439: AND
8440: PUSH
8441: LD_INT 1
8443: PPUSH
8444: CALL_OW 255
8448: PUSH
8449: LD_INT 1
8451: EQUAL
8452: AND
8453: PUSH
8454: LD_EXP 20
8458: PPUSH
8459: CALL_OW 302
8463: AND
8464: PUSH
8465: LD_EXP 10
8469: NOT
8470: AND
8471: IFFALSE 9699
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
8480: PPUSH
// begin trap := 0 ;
8481: LD_ADDR_EXP 17
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8489: LD_INT 420
8491: PPUSH
8492: CALL_OW 67
// DialogueOn ;
8496: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8500: LD_EXP 30
8504: PPUSH
8505: LD_STRING DMar-1-radio
8507: PPUSH
8508: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8512: LD_EXP 23
8516: PPUSH
8517: LD_STRING DH-1-radio
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8524: LD_EXP 30
8528: PPUSH
8529: LD_STRING DMar-2-radio
8531: PPUSH
8532: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8536: LD_EXP 23
8540: PPUSH
8541: LD_STRING DH-2-radio
8543: PPUSH
8544: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8548: LD_EXP 26
8552: PPUSH
8553: CALL_OW 302
8557: PUSH
8558: LD_EXP 29
8562: PPUSH
8563: CALL_OW 302
8567: OR
8568: IFFALSE 9699
// begin case Query ( Q1Trap ) of 1 :
8570: LD_STRING Q1Trap
8572: PPUSH
8573: CALL_OW 97
8577: PUSH
8578: LD_INT 1
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8792
8586: POP
// begin if IsOk ( Kamil ) then
8587: LD_EXP 26
8591: PPUSH
8592: CALL_OW 302
8596: IFFALSE 8675
// begin Say ( Kamil , DKam-2-radio ) ;
8598: LD_EXP 26
8602: PPUSH
8603: LD_STRING DKam-2-radio
8605: PPUSH
8606: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8610: LD_EXP 26
8614: PPUSH
8615: LD_STRING DKam-3-radio
8617: PPUSH
8618: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8622: LD_EXP 20
8626: PPUSH
8627: LD_STRING DDelta-3-radio
8629: PPUSH
8630: CALL_OW 94
// dwait ( 0 0$01 ) ;
8634: LD_INT 35
8636: PPUSH
8637: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8641: LD_EXP 23
8645: PPUSH
8646: LD_STRING DH-3-radio
8648: PPUSH
8649: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8653: LD_EXP 26
8657: PPUSH
8658: LD_STRING DKam-4-radio
8660: PPUSH
8661: CALL_OW 88
// trap := 1 ;
8665: LD_ADDR_EXP 17
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// end else
8673: GO 8786
// begin Say ( Sophia , DS-1-radio ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_STRING DS-1-radio
8682: PPUSH
8683: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8687: LD_EXP 29
8691: PPUSH
8692: LD_STRING DS-2-radio
8694: PPUSH
8695: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8699: LD_EXP 20
8703: PPUSH
8704: LD_STRING DDelta-2-radio-s
8706: PPUSH
8707: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8711: LD_EXP 29
8715: PPUSH
8716: LD_STRING DS-3-radio
8718: PPUSH
8719: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8723: LD_EXP 20
8727: PPUSH
8728: LD_STRING DDelta-3-radio-s
8730: PPUSH
8731: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8735: LD_EXP 29
8739: PPUSH
8740: LD_STRING DS-4-radio-s
8742: PPUSH
8743: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8747: LD_EXP 20
8751: PPUSH
8752: LD_STRING DDelta-4-radio-s
8754: PPUSH
8755: CALL_OW 94
// dwait ( 0 0$01 ) ;
8759: LD_INT 35
8761: PPUSH
8762: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8766: LD_EXP 23
8770: PPUSH
8771: LD_STRING DH-1-trap
8773: PPUSH
8774: CALL_OW 88
// trap := 0 ;
8778: LD_ADDR_EXP 17
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ; DialogueOff ;
8786: CALL_OW 7
// end ; 2 :
8790: GO 8810
8792: LD_INT 2
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8809
8800: POP
// begin DialogueOff ;
8801: CALL_OW 7
// exit ;
8805: GO 9699
// end ; end ;
8807: GO 8810
8809: POP
// if trap = 1 then
8810: LD_EXP 17
8814: PUSH
8815: LD_INT 1
8817: EQUAL
8818: IFFALSE 9270
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8820: LD_INT 64
8822: PPUSH
8823: LD_INT 32
8825: PPUSH
8826: LD_INT 2
8828: PPUSH
8829: LD_INT 8
8831: PPUSH
8832: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8836: LD_INT 64
8838: PPUSH
8839: LD_INT 32
8841: PPUSH
8842: CALL_OW 84
// tmp := [ ] ;
8846: LD_ADDR_VAR 0 3
8850: PUSH
8851: EMPTY
8852: ST_TO_ADDR
// k := 3 ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 3
8860: ST_TO_ADDR
// if usForces < 3 then
8861: LD_EXP 21
8865: PUSH
8866: LD_INT 3
8868: LESS
8869: IFFALSE 8881
// k := usForces ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_EXP 21
8880: ST_TO_ADDR
// for i := 1 to k do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_VAR 0 2
8895: PUSH
8896: FOR_TO
8897: IFFALSE 8952
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_VAR 0 3
8908: PPUSH
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 1
8916: PLUS
8917: PPUSH
8918: LD_EXP 21
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8932: LD_ADDR_EXP 21
8936: PUSH
8937: LD_EXP 21
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 3
8949: ST_TO_ADDR
// end ;
8950: GO 8896
8952: POP
8953: POP
// usPatrol := tmp ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: LD_VAR 0 3
8963: ST_TO_ADDR
// for i in tmp do
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_VAR 0 3
8973: PUSH
8974: FOR_IN
8975: IFFALSE 9105
// begin if IsInUnit ( i ) then
8977: LD_VAR 0 1
8981: PPUSH
8982: CALL_OW 310
8986: IFFALSE 8997
// ComExitBuilding ( i ) ;
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_INT 63
9004: PPUSH
9005: LD_INT 31
9007: PPUSH
9008: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_INT 70
9019: PPUSH
9020: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 103
9031: PPUSH
9032: LD_INT 43
9034: PPUSH
9035: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9039: LD_VAR 0 1
9043: PPUSH
9044: LD_INT 105
9046: PPUSH
9047: CALL_OW 202
// if Difficulty > 1 then
9051: LD_OWVAR 67
9055: PUSH
9056: LD_INT 1
9058: GREATER
9059: IFFALSE 9076
// AddComAgressiveMove ( i , 114 , 69 ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_INT 114
9068: PPUSH
9069: LD_INT 69
9071: PPUSH
9072: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 105
9083: PPUSH
9084: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 20
9098: PPUSH
9099: CALL_OW 174
// end ;
9103: GO 8974
9105: POP
9106: POP
// wait ( 0 0$8 ) ;
9107: LD_INT 280
9109: PPUSH
9110: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9114: LD_INT 64
9116: PPUSH
9117: LD_INT 32
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9127: LD_INT 35
9129: PPUSH
9130: CALL_OW 67
// for i in tmp do
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9176
// if IsDead ( i ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 301
9156: IFFALSE 9174
// tmp := tmp diff i ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 3
9167: PUSH
9168: LD_VAR 0 1
9172: DIFF
9173: ST_TO_ADDR
9174: GO 9144
9176: POP
9177: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9178: LD_VAR 0 3
9182: NOT
9183: PUSH
9184: LD_VAR 0 3
9188: PPUSH
9189: LD_INT 95
9191: PUSH
9192: LD_INT 7
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 3
9201: PUSH
9202: LD_INT 60
9204: PUSH
9205: EMPTY
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 72
9220: PUSH
9221: LD_VAR 0 3
9225: EQUAL
9226: OR
9227: IFFALSE 9127
// if tmp then
9229: LD_VAR 0 3
9233: IFFALSE 9260
// begin usPatrol := [ ] ;
9235: LD_ADDR_EXP 16
9239: PUSH
9240: EMPTY
9241: ST_TO_ADDR
// usForces := usForces union tmp ;
9242: LD_ADDR_EXP 21
9246: PUSH
9247: LD_EXP 21
9251: PUSH
9252: LD_VAR 0 3
9256: UNION
9257: ST_TO_ADDR
// end else
9258: GO 9268
// trickyMove := true ;
9260: LD_ADDR_EXP 15
9264: PUSH
9265: LD_INT 1
9267: ST_TO_ADDR
// end else
9268: GO 9699
// begin tmp := [ ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// k := 4 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 4
9284: ST_TO_ADDR
// if usForces < 4 then
9285: LD_EXP 21
9289: PUSH
9290: LD_INT 4
9292: LESS
9293: IFFALSE 9305
// k := usForces ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_EXP 21
9304: ST_TO_ADDR
// for i := 1 to k do
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9376
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_VAR 0 3
9337: PUSH
9338: LD_INT 1
9340: PLUS
9341: PPUSH
9342: LD_EXP 21
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: CALL_OW 1
9355: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9356: LD_ADDR_EXP 21
9360: PUSH
9361: LD_EXP 21
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 3
9373: ST_TO_ADDR
// end ;
9374: GO 9320
9376: POP
9377: POP
// if Lynch then
9378: LD_EXP 20
9382: IFFALSE 9400
// tmp := tmp ^ Lynch ;
9384: LD_ADDR_VAR 0 3
9388: PUSH
9389: LD_VAR 0 3
9393: PUSH
9394: LD_EXP 20
9398: ADD
9399: ST_TO_ADDR
// usPatrol := tmp ;
9400: LD_ADDR_EXP 16
9404: PUSH
9405: LD_VAR 0 3
9409: ST_TO_ADDR
// for i in tmp do
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_VAR 0 3
9419: PUSH
9420: FOR_IN
9421: IFFALSE 9514
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9443
// ComExitBuilding ( i ) ;
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9443: LD_VAR 0 1
9447: PPUSH
9448: LD_INT 69
9450: PPUSH
9451: LD_INT 15
9453: PPUSH
9454: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_INT 700
9465: PPUSH
9466: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9470: LD_VAR 0 1
9474: PPUSH
9475: LD_INT 55
9477: PPUSH
9478: LD_INT 43
9480: PPUSH
9481: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 700
9492: PPUSH
9493: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 42
9504: PPUSH
9505: LD_INT 20
9507: PPUSH
9508: CALL_OW 174
// end ;
9512: GO 9420
9514: POP
9515: POP
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// for i in tmp do
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 3
9532: PUSH
9533: FOR_IN
9534: IFFALSE 9565
// if IsDead ( i ) then
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL_OW 301
9545: IFFALSE 9563
// tmp := tmp diff i ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_VAR 0 3
9556: PUSH
9557: LD_VAR 0 1
9561: DIFF
9562: ST_TO_ADDR
9563: GO 9533
9565: POP
9566: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9567: LD_VAR 0 3
9571: NOT
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 95
9580: PUSH
9581: LD_INT 7
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 60
9593: PUSH
9594: EMPTY
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PUSH
9610: LD_VAR 0 3
9614: EQUAL
9615: OR
9616: IFFALSE 9516
// if not tmp then
9618: LD_VAR 0 3
9622: NOT
9623: IFFALSE 9635
// trickyMove := true else
9625: LD_ADDR_EXP 15
9629: PUSH
9630: LD_INT 1
9632: ST_TO_ADDR
9633: GO 9642
// usPatrol := [ ] ;
9635: LD_ADDR_EXP 16
9639: PUSH
9640: EMPTY
9641: ST_TO_ADDR
// if tmp diff Lynch then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_EXP 20
9651: DIFF
9652: IFFALSE 9676
// usForces := usForces union ( tmp diff Lynch ) ;
9654: LD_ADDR_EXP 21
9658: PUSH
9659: LD_EXP 21
9663: PUSH
9664: LD_VAR 0 3
9668: PUSH
9669: LD_EXP 20
9673: DIFF
9674: UNION
9675: ST_TO_ADDR
// if IsOk ( Lynch ) then
9676: LD_EXP 20
9680: PPUSH
9681: CALL_OW 302
9685: IFFALSE 9699
// ComEnterUnit ( Lynch , Delta ) ;
9687: LD_EXP 20
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 120
// end ; end ; end ;
9699: PPOPN 3
9701: END
// every 0 0$1 trigger trickyMove do
9702: LD_EXP 15
9706: IFFALSE 9718
9708: GO 9710
9710: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9711: LD_STRING ACH_TRAP
9713: PPUSH
9714: CALL_OW 543
9718: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9719: LD_INT 22
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: IFFALSE 9770
9760: GO 9762
9762: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9763: LD_STRING ACH_SCRAP
9765: PPUSH
9766: CALL_OW 543
9770: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9771: LD_EXP 16
9775: PPUSH
9776: LD_INT 101
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: PUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_EXP 23
9798: PPUSH
9799: CALL_OW 292
9803: AND
9804: IFFALSE 9937
9806: GO 9808
9808: DISABLE
// begin if not trap then
9809: LD_EXP 17
9813: NOT
9814: IFFALSE 9842
// begin Say ( Heike , DH-2-trap ) ;
9816: LD_EXP 23
9820: PPUSH
9821: LD_STRING DH-2-trap
9823: PPUSH
9824: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DM-2-trap
9835: PPUSH
9836: CALL_OW 88
// end else
9840: GO 9854
// begin Say ( Heike , DH-1-trap-a ) ;
9842: LD_EXP 23
9846: PPUSH
9847: LD_STRING DH-1-trap-a
9849: PPUSH
9850: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// until trickyMove ;
9861: LD_EXP 15
9865: IFFALSE 9854
// Say ( Heike , DH-3-trap ) ;
9867: LD_EXP 23
9871: PPUSH
9872: LD_STRING DH-3-trap
9874: PPUSH
9875: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9879: LD_EXP 24
9883: PPUSH
9884: CALL_OW 302
9888: PUSH
9889: LD_EXP 28
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 9937
// begin Say ( Givi , DG-3-trap ) ;
9901: LD_EXP 24
9905: PPUSH
9906: LD_STRING DG-3-trap
9908: PPUSH
9909: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9913: LD_EXP 28
9917: PPUSH
9918: LD_STRING DK-3-trap
9920: PPUSH
9921: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9925: LD_EXP 24
9929: PPUSH
9930: LD_STRING DG-4-trap
9932: PPUSH
9933: CALL_OW 88
// end ; end ;
9937: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 255
9945: PUSH
9946: LD_INT 2
9948: EQUAL
9949: PUSH
9950: LD_EXP 14
9954: AND
9955: IFFALSE 10114
9957: GO 9959
9959: DISABLE
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
// begin if not IsOk ( Kaia ) then
9964: LD_EXP 28
9968: PPUSH
9969: CALL_OW 302
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10114
// if tick < 5 5$00 then
9978: LD_OWVAR 1
9982: PUSH
9983: LD_INT 10500
9985: LESS
9986: IFFALSE 9995
// SetAchievement ( ACH_DELTA ) ;
9988: LD_STRING ACH_DELTA
9990: PPUSH
9991: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9995: LD_EXP 28
9999: PPUSH
10000: LD_STRING DK-1-capture
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10007: LD_EXP 23
10011: PPUSH
10012: LD_STRING DH-1-capture
10014: PPUSH
10015: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 25
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10114
// for i in tmp do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10112
// begin if IsInUnit ( i ) then
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL_OW 310
10084: IFFALSE 10095
// ComExitBuilding ( i ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 38
10102: PPUSH
10103: LD_INT 23
10105: PPUSH
10106: CALL_OW 174
// end ;
10110: GO 10072
10112: POP
10113: POP
// end ;
10114: PPOPN 2
10116: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10117: LD_INT 3
10119: PPUSH
10120: CALL_OW 255
10124: PUSH
10125: LD_INT 2
10127: EQUAL
10128: PUSH
10129: LD_EXP 14
10133: AND
10134: IFFALSE 10166
10136: GO 10138
10138: DISABLE
// begin DialogueOn ;
10139: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10143: LD_EXP 27
10147: PPUSH
10148: LD_STRING DA-1-capture
10150: PPUSH
10151: CALL_OW 88
// DialogueOff ;
10155: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10159: LD_STRING OTame
10161: PPUSH
10162: CALL_OW 337
// end ;
10166: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 321
10177: PUSH
10178: LD_INT 2
10180: EQUAL
10181: PUSH
10182: LD_EXP 14
10186: AND
10187: IFFALSE 10338
10189: GO 10191
10191: DISABLE
// begin DialogueOn ;
10192: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10196: LD_EXP 27
10200: PPUSH
10201: LD_STRING DA-1-ape
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10208: LD_EXP 23
10212: PPUSH
10213: LD_STRING DH-1-ape
10215: PPUSH
10216: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10220: LD_EXP 27
10224: PPUSH
10225: LD_STRING DA-2-ape
10227: PPUSH
10228: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_STRING DA-3-ape
10239: PPUSH
10240: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10244: LD_EXP 23
10248: PPUSH
10249: LD_STRING DH-3-ape
10251: PPUSH
10252: CALL_OW 88
// DialogueOff ;
10256: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10260: LD_INT 22
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 12
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: LD_INT 0
10291: EQUAL
10292: IFFALSE 10304
// SpawnApeman ( forest , 2 ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10304: LD_INT 35
10306: PPUSH
10307: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10311: LD_INT 25
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: IFFALSE 10304
// YouLost ( Ape ) ;
10331: LD_STRING Ape
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10339: LD_EXP 18
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_OWVAR 67
10366: ARRAY
10367: GREATEREQUAL
10368: IFFALSE 10412
10370: GO 10372
10372: DISABLE
// begin DialogueOn ;
10373: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10377: LD_EXP 27
10381: PPUSH
10382: LD_STRING DA-1-failure
10384: PPUSH
10385: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10389: LD_EXP 27
10393: PPUSH
10394: LD_STRING DA-2-failure
10396: PPUSH
10397: CALL_OW 88
// YouLost ( Failure ) ;
10401: LD_STRING Failure
10403: PPUSH
10404: CALL_OW 104
// DialogueOff ;
10408: CALL_OW 7
// end ;
10412: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10413: LD_EXP 28
10417: PPUSH
10418: CALL_OW 256
10422: PUSH
10423: LD_INT 3
10425: LESS
10426: IFFALSE 10559
10428: GO 10430
10430: DISABLE
// begin DialogueOn ;
10431: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10435: LD_EXP 28
10439: PPUSH
10440: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10444: LD_EXP 28
10448: PPUSH
10449: LD_STRING DK-Kaiaout-1
10451: PPUSH
10452: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10456: LD_EXP 23
10460: PPUSH
10461: LD_STRING DH-Kaiaout-2
10463: PPUSH
10464: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10468: LD_EXP 24
10472: PPUSH
10473: LD_STRING DG-Kaiaout-3
10475: PPUSH
10476: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10480: LD_EXP 23
10484: PPUSH
10485: LD_STRING DH-Kaiaout-4
10487: PPUSH
10488: CALL_OW 88
// if Givi then
10492: LD_EXP 24
10496: IFFALSE 10546
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10498: LD_EXP 24
10502: PPUSH
10503: LD_STRING DG-Kaiaout-5
10505: PPUSH
10506: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10510: LD_EXP 23
10514: PPUSH
10515: LD_STRING DH-Kaiaout-6
10517: PPUSH
10518: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10522: LD_EXP 24
10526: PPUSH
10527: LD_STRING DG-Kaiaout-7
10529: PPUSH
10530: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10534: LD_EXP 23
10538: PPUSH
10539: LD_STRING DH-Kaiaout-8
10541: PPUSH
10542: CALL_OW 88
// end ; DialogueOff ;
10546: CALL_OW 7
// KillUnit ( Kaia ) ;
10550: LD_EXP 28
10554: PPUSH
10555: CALL_OW 66
// end ;
10559: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10560: LD_INT 22
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 23
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: PUSH
10589: LD_EXP 27
10593: PPUSH
10594: CALL_OW 302
10598: AND
10599: PUSH
10600: LD_EXP 27
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: IFFALSE 11559
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10622: LD_INT 22
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 34
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: IFFALSE 10763
// begin Query ( QEnemyInSight ) ;
10670: LD_STRING QEnemyInSight
10672: PPUSH
10673: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10677: LD_INT 35
10679: PPUSH
10680: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10684: LD_INT 22
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: NOT
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: AND
10761: IFFALSE 10677
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 69
10796: ST_TO_ADDR
// InGameOn ;
10797: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_EXP 27
10819: PPUSH
10820: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10824: LD_EXP 27
10828: PPUSH
10829: LD_VAR 0 1
10833: PPUSH
10834: CALL_OW 119
// wait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10845: LD_EXP 27
10849: PPUSH
10850: LD_STRING DA-1-tame-a
10852: PPUSH
10853: CALL_OW 88
// if IsOk ( Mike ) then
10857: LD_EXP 25
10861: PPUSH
10862: CALL_OW 302
10866: IFFALSE 10904
// begin Say ( Mike , DM-1-tame-a ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DM-1-tame-a
10875: PPUSH
10876: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10880: LD_EXP 29
10884: PPUSH
10885: LD_STRING DS-1-tame-a
10887: PPUSH
10888: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10892: LD_EXP 25
10896: PPUSH
10897: LD_STRING DM-2-tame-a
10899: PPUSH
10900: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10904: LD_INT 105
10906: PPUSH
10907: CALL_OW 67
// PrepareFarmer ;
10911: CALL 12238 0 0
// CenterOnUnits ( Farmer ) ;
10915: LD_EXP 31
10919: PPUSH
10920: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10924: LD_EXP 31
10928: PPUSH
10929: LD_INT 105
10931: PPUSH
10932: LD_INT 59
10934: PPUSH
10935: CALL_OW 111
// AddComHold ( Farmer ) ;
10939: LD_EXP 31
10943: PPUSH
10944: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10948: LD_EXP 31
10952: PPUSH
10953: LD_STRING DF-1-end
10955: PPUSH
10956: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10960: LD_EXP 27
10964: PPUSH
10965: LD_STRING DA-1-end
10967: PPUSH
10968: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10972: LD_EXP 31
10976: PPUSH
10977: LD_STRING DF-2-end
10979: PPUSH
10980: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10984: LD_EXP 27
10988: PPUSH
10989: LD_STRING DA-2-end
10991: PPUSH
10992: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10996: LD_EXP 31
11000: PPUSH
11001: LD_STRING DF-3-end
11003: PPUSH
11004: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11008: LD_EXP 23
11012: PPUSH
11013: LD_STRING DH-3-end
11015: PPUSH
11016: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11020: LD_EXP 31
11024: PPUSH
11025: LD_STRING DF-4-end
11027: PPUSH
11028: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11032: LD_OWVAR 1
11036: PUSH
11037: LD_INT 52500
11039: PUSH
11040: LD_INT 47250
11042: PUSH
11043: LD_INT 42000
11045: PUSH
11046: LD_INT 31500
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: ARRAY
11060: LESSEQUAL
11061: IFFALSE 11075
// AddMedal ( med1 , 1 ) else
11063: LD_STRING med1
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 101
11073: GO 11086
// AddMedal ( med1 , - 1 ) ;
11075: LD_STRING med1
11077: PPUSH
11078: LD_INT 1
11080: NEG
11081: PPUSH
11082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11086: LD_INT 22
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: LD_INT 0
11117: EQUAL
11118: PUSH
11119: LD_EXP 12
11123: NOT
11124: AND
11125: IFFALSE 11139
// AddMedal ( med2 , 1 ) else
11127: LD_STRING med2
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 101
11137: GO 11150
// AddMedal ( med2 , - 1 ) ;
11139: LD_STRING med2
11141: PPUSH
11142: LD_INT 1
11144: NEG
11145: PPUSH
11146: CALL_OW 101
// if trickyMove then
11150: LD_EXP 15
11154: IFFALSE 11168
// AddMedal ( med3 , 1 ) else
11156: LD_STRING med3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 101
11166: GO 11198
// if spottedBeforeRadio then
11168: LD_EXP 6
11172: IFFALSE 11187
// AddMedal ( med3 , - 2 ) else
11174: LD_STRING med3
11176: PPUSH
11177: LD_INT 2
11179: NEG
11180: PPUSH
11181: CALL_OW 101
11185: GO 11198
// AddMedal ( med3 , - 1 ) ;
11187: LD_STRING med3
11189: PPUSH
11190: LD_INT 1
11192: NEG
11193: PPUSH
11194: CALL_OW 101
// GiveMedals ( MAIN ) ;
11198: LD_STRING MAIN
11200: PPUSH
11201: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_STRING 02_ape
11212: PPUSH
11213: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11271: LD_EXP 23
11275: PPUSH
11276: LD_STRING 02_Heike
11278: PPUSH
11279: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11283: LD_EXP 27
11287: PPUSH
11288: LD_STRING 02_Aviradze
11290: PPUSH
11291: CALL_OW 38
// if Givi then
11295: LD_EXP 24
11299: IFFALSE 11313
// SaveCharacters ( Givi , 02_Givi ) ;
11301: LD_EXP 24
11305: PPUSH
11306: LD_STRING 02_Givi
11308: PPUSH
11309: CALL_OW 38
// if Mike then
11313: LD_EXP 25
11317: IFFALSE 11331
// SaveCharacters ( Mike , 02_Mike ) ;
11319: LD_EXP 25
11323: PPUSH
11324: LD_STRING 02_Mike
11326: PPUSH
11327: CALL_OW 38
// if Kamil then
11331: LD_EXP 26
11335: IFFALSE 11349
// SaveCharacters ( Kamil , 02_Kamil ) ;
11337: LD_EXP 26
11341: PPUSH
11342: LD_STRING 02_Kamil
11344: PPUSH
11345: CALL_OW 38
// if Kaia then
11349: LD_EXP 28
11353: IFFALSE 11367
// SaveCharacters ( Kaia , 02_Kaia ) ;
11355: LD_EXP 28
11359: PPUSH
11360: LD_STRING 02_Kaia
11362: PPUSH
11363: CALL_OW 38
// if Sophia then
11367: LD_EXP 29
11371: IFFALSE 11385
// SaveCharacters ( Sophia , 02_Sophia ) ;
11373: LD_EXP 29
11377: PPUSH
11378: LD_STRING 02_Sophia
11380: PPUSH
11381: CALL_OW 38
// if Markov then
11385: LD_EXP 30
11389: IFFALSE 11403
// SaveCharacters ( Markov , 02_Markov ) ;
11391: LD_EXP 30
11395: PPUSH
11396: LD_STRING 02_Markov
11398: PPUSH
11399: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11403: LD_VAR 0 1
11407: PUSH
11408: LD_EXP 23
11412: PUSH
11413: LD_EXP 27
11417: PUSH
11418: LD_EXP 24
11422: PUSH
11423: LD_EXP 25
11427: PUSH
11428: LD_EXP 26
11432: PUSH
11433: LD_EXP 29
11437: PUSH
11438: LD_EXP 28
11442: PUSH
11443: LD_EXP 30
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: DIFF
11458: IFFALSE 11523
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 27
11474: PUSH
11475: LD_EXP 24
11479: PUSH
11480: LD_EXP 25
11484: PUSH
11485: LD_EXP 26
11489: PUSH
11490: LD_EXP 29
11494: PUSH
11495: LD_EXP 28
11499: PUSH
11500: LD_EXP 30
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: DIFF
11515: PPUSH
11516: LD_STRING 02_others
11518: PPUSH
11519: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11523: LD_STRING enableBioCharacter(BIO_KRAY)
11525: PPUSH
11526: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11530: LD_STRING enableBioCharacter(BIO_AVIR)
11532: PPUSH
11533: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11537: LD_STRING enableBioCharacter(BIO_SOPH)
11539: PPUSH
11540: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11544: LD_STRING enableBioCharacter(BIO_KAMI)
11546: PPUSH
11547: CALL_OW 559
// YouWin ;
11551: CALL_OW 103
// InGameOff ;
11555: CALL_OW 9
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11562: LD_OWVAR 1
11566: PUSH
11567: LD_EXP 13
11571: GREATER
11572: PUSH
11573: LD_EXP 4
11577: AND
11578: IFFALSE 11618
11580: GO 11582
11582: DISABLE
// begin InGameOn ;
11583: CALL_OW 8
// PrepareFarmer ;
11587: CALL 12238 0 0
// CenterNowOnUnits ( Farmer ) ;
11591: LD_EXP 31
11595: PPUSH
11596: CALL_OW 87
// wait ( 0 0$2 ) ;
11600: LD_INT 70
11602: PPUSH
11603: CALL_OW 67
// YouLost ( Farmer ) ;
11607: LD_STRING Farmer
11609: PPUSH
11610: CALL_OW 104
// InGameOff ;
11614: CALL_OW 9
// end ; end_of_file
11618: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
11623: PPUSH
// uc_side := 2 ;
11624: LD_ADDR_OWVAR 20
11628: PUSH
11629: LD_INT 2
11631: ST_TO_ADDR
// uc_nation := 2 ;
11632: LD_ADDR_OWVAR 21
11636: PUSH
11637: LD_INT 2
11639: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11640: LD_ADDR_EXP 23
11644: PUSH
11645: LD_STRING Heike
11647: PPUSH
11648: LD_EXP 1
11652: NOT
11653: PPUSH
11654: LD_EXP 2
11658: PPUSH
11659: CALL 30653 0 3
11663: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11664: LD_EXP 23
11668: PPUSH
11669: LD_INT 83
11671: PPUSH
11672: LD_INT 72
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11682: LD_ADDR_EXP 24
11686: PUSH
11687: LD_STRING Givi
11689: PPUSH
11690: LD_EXP 1
11694: NOT
11695: PPUSH
11696: LD_EXP 2
11700: PPUSH
11701: CALL 30653 0 3
11705: ST_TO_ADDR
// if Givi then
11706: LD_EXP 24
11710: IFFALSE 11730
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11712: LD_EXP 24
11716: PPUSH
11717: LD_INT 87
11719: PPUSH
11720: LD_INT 76
11722: PPUSH
11723: LD_INT 0
11725: PPUSH
11726: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11730: LD_ADDR_EXP 25
11734: PUSH
11735: LD_STRING Mike
11737: PPUSH
11738: LD_EXP 1
11742: NOT
11743: PPUSH
11744: LD_EXP 2
11748: PPUSH
11749: CALL 30653 0 3
11753: ST_TO_ADDR
// if Mike then
11754: LD_EXP 25
11758: IFFALSE 11778
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11760: LD_EXP 25
11764: PPUSH
11765: LD_INT 84
11767: PPUSH
11768: LD_INT 76
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11778: LD_ADDR_EXP 26
11782: PUSH
11783: LD_STRING Kamil
11785: PPUSH
11786: LD_EXP 1
11790: NOT
11791: PPUSH
11792: LD_EXP 2
11796: PPUSH
11797: CALL 30653 0 3
11801: ST_TO_ADDR
// if Kamil then
11802: LD_EXP 26
11806: IFFALSE 11826
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11808: LD_EXP 26
11812: PPUSH
11813: LD_INT 85
11815: PPUSH
11816: LD_INT 78
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 48
// uc_side := 5 ;
11826: LD_ADDR_OWVAR 20
11830: PUSH
11831: LD_INT 5
11833: ST_TO_ADDR
// uc_nation := 2 ;
11834: LD_ADDR_OWVAR 21
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11842: LD_ADDR_EXP 27
11846: PUSH
11847: LD_STRING Aviradze
11849: PPUSH
11850: LD_INT 0
11852: PPUSH
11853: LD_STRING 
11855: PPUSH
11856: CALL 30653 0 3
11860: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11861: LD_EXP 27
11865: PPUSH
11866: LD_INT 106
11868: PPUSH
11869: LD_INT 38
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11879: LD_EXP 27
11883: PPUSH
11884: LD_INT 103
11886: PPUSH
11887: LD_INT 38
11889: PPUSH
11890: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11894: LD_ADDR_EXP 28
11898: PUSH
11899: LD_STRING Kaia
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: LD_STRING 
11907: PPUSH
11908: CALL 30653 0 3
11912: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11913: LD_EXP 28
11917: PPUSH
11918: LD_INT 100
11920: PPUSH
11921: LD_INT 34
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_INT 100
11938: PPUSH
11939: LD_INT 39
11941: PPUSH
11942: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11946: LD_ADDR_EXP 29
11950: PUSH
11951: LD_STRING Sophia
11953: PPUSH
11954: LD_INT 0
11956: PPUSH
11957: LD_STRING 
11959: PPUSH
11960: CALL 30653 0 3
11964: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11965: LD_EXP 29
11969: PPUSH
11970: LD_INT 109
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11983: LD_EXP 29
11987: PPUSH
11988: LD_INT 100
11990: PPUSH
11991: LD_INT 39
11993: PPUSH
11994: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11998: LD_ADDR_EXP 30
12002: PUSH
12003: LD_STRING Markov
12005: PPUSH
12006: LD_INT 0
12008: PPUSH
12009: LD_STRING 
12011: PPUSH
12012: CALL 30653 0 3
12016: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12017: LD_INT 5
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 21
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 42
12034: PPUSH
12035: LD_INT 90
12037: PUSH
12038: LD_INT 70
12040: PUSH
12041: LD_INT 60
12043: PUSH
12044: LD_INT 50
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_OWVAR 67
12057: ARRAY
12058: PPUSH
12059: CALL 241 0 7
// veh := CreateVehicle ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 4
12080: PPUSH
12081: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 109
12092: PPUSH
12093: LD_INT 38
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12103: LD_EXP 30
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12117: LD_EXP 28
12121: PPUSH
12122: LD_EXP 27
12126: PPUSH
12127: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12131: LD_EXP 27
12135: PPUSH
12136: LD_EXP 28
12140: PPUSH
12141: CALL_OW 119
// if not Givi or not Mike then
12145: LD_EXP 24
12149: NOT
12150: PUSH
12151: LD_EXP 25
12155: NOT
12156: OR
12157: IFFALSE 12233
// begin uc_nation := 2 ;
12159: LD_ADDR_OWVAR 21
12163: PUSH
12164: LD_INT 2
12166: ST_TO_ADDR
// uc_side := 5 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 5
12174: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12175: LD_INT 1
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 380
// un := CreateHuman ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: CALL_OW 44
12197: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 112
12205: PPUSH
12206: LD_INT 40
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12219: LD_VAR 0 2
12223: PPUSH
12224: LD_EXP 27
12228: PPUSH
12229: CALL_OW 119
// end ; end ;
12233: LD_VAR 0 1
12237: RET
// export function PrepareFarmer ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// uc_side := 5 ;
12242: LD_ADDR_OWVAR 20
12246: PUSH
12247: LD_INT 5
12249: ST_TO_ADDR
// uc_nation := 2 ;
12250: LD_ADDR_OWVAR 21
12254: PUSH
12255: LD_INT 2
12257: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12258: LD_ADDR_EXP 31
12262: PUSH
12263: LD_STRING Farmer
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: LD_STRING 
12271: PPUSH
12272: CALL 30653 0 3
12276: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12277: LD_EXP 31
12281: PPUSH
12282: LD_INT 106
12284: PPUSH
12285: LD_INT 62
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 48
// for i := 1 to 5 do
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_INT 5
12307: PUSH
12308: FOR_TO
12309: IFFALSE 12347
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12324: CALL_OW 44
12328: PPUSH
12329: LD_INT 105
12331: PPUSH
12332: LD_INT 64
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// end ;
12345: GO 12308
12347: POP
12348: POP
// end ; end_of_file
12349: LD_VAR 0 1
12353: RET
// every 2 2$20 + 0 0$10 do
12354: GO 12356
12356: DISABLE
// begin enable ;
12357: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12358: LD_INT 1
12360: PPUSH
12361: LD_INT 5
12363: PPUSH
12364: CALL_OW 12
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 55
// if tick > 6 6$00 then
12379: LD_OWVAR 1
12383: PUSH
12384: LD_INT 12600
12386: GREATER
12387: IFFALSE 12390
// disable ;
12389: DISABLE
// end ; end_of_file
12390: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12391: LD_VAR 0 1
12395: PUSH
12396: LD_EXP 23
12400: EQUAL
12401: IFFALSE 12410
// YouLost ( Heike ) ;
12403: LD_STRING Heike
12405: PPUSH
12406: CALL_OW 104
// if un = Aviradze then
12410: LD_VAR 0 1
12414: PUSH
12415: LD_EXP 27
12419: EQUAL
12420: IFFALSE 12429
// YouLost ( Aviradze ) ;
12422: LD_STRING Aviradze
12424: PPUSH
12425: CALL_OW 104
// if un = usLab then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 3
12436: EQUAL
12437: IFFALSE 12446
// YouLost ( Lab ) ;
12439: LD_STRING Lab
12441: PPUSH
12442: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 21
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: PUSH
12491: LD_EXP 23
12495: PUSH
12496: LD_EXP 27
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: DIFF
12505: IN
12506: PUSH
12507: LD_EXP 4
12511: AND
12512: IFFALSE 12528
// lostCounter := lostCounter + 1 ;
12514: LD_ADDR_EXP 18
12518: PUSH
12519: LD_EXP 18
12523: PUSH
12524: LD_INT 1
12526: PLUS
12527: ST_TO_ADDR
// end ;
12528: PPOPN 1
12530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12531: LD_INT 23
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: LD_INT 0
12562: EQUAL
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PUSH
12593: LD_INT 0
12595: EQUAL
12596: AND
12597: IFFALSE 12609
12599: GO 12601
12601: DISABLE
// YouLost ( Eng ) ;
12602: LD_STRING Eng
12604: PPUSH
12605: CALL_OW 104
12609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12610: LD_VAR 0 1
12614: PUSH
12615: LD_EXP 22
12619: IN
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_INT 2
12628: EQUAL
12629: AND
12630: IFFALSE 12662
// begin usSci := usSci diff un ;
12632: LD_ADDR_EXP 22
12636: PUSH
12637: LD_EXP 22
12641: PUSH
12642: LD_VAR 0 1
12646: DIFF
12647: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12648: LD_ADDR_EXP 9
12652: PUSH
12653: LD_EXP 9
12657: PUSH
12658: LD_INT 1
12660: PLUS
12661: ST_TO_ADDR
// end ; end ;
12662: PPOPN 3
12664: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: EQUAL
12673: PUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 5
12681: EQUAL
12682: AND
12683: IFFALSE 12692
// YouLost ( FriendlyFire ) ;
12685: LD_STRING FriendlyFire
12687: PPUSH
12688: CALL_OW 104
// end ; end_of_file
12692: PPOPN 2
12694: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12695: LD_INT 0
12697: PPUSH
// ar_miner := 81 ;
12698: LD_ADDR_EXP 39
12702: PUSH
12703: LD_INT 81
12705: ST_TO_ADDR
// ar_crane := 88 ;
12706: LD_ADDR_EXP 38
12710: PUSH
12711: LD_INT 88
12713: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12714: LD_ADDR_EXP 33
12718: PUSH
12719: LD_INT 89
12721: ST_TO_ADDR
// us_hack := 99 ;
12722: LD_ADDR_EXP 34
12726: PUSH
12727: LD_INT 99
12729: ST_TO_ADDR
// us_artillery := 97 ;
12730: LD_ADDR_EXP 35
12734: PUSH
12735: LD_INT 97
12737: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12738: LD_ADDR_EXP 36
12742: PUSH
12743: LD_INT 91
12745: ST_TO_ADDR
// ar_mortar := 92 ;
12746: LD_ADDR_EXP 37
12750: PUSH
12751: LD_INT 92
12753: ST_TO_ADDR
// ru_radar := 98 ;
12754: LD_ADDR_EXP 32
12758: PUSH
12759: LD_INT 98
12761: ST_TO_ADDR
// tech_Artillery := 80 ;
12762: LD_ADDR_EXP 40
12766: PUSH
12767: LD_INT 80
12769: ST_TO_ADDR
// tech_RadMat := 81 ;
12770: LD_ADDR_EXP 41
12774: PUSH
12775: LD_INT 81
12777: ST_TO_ADDR
// tech_BasicTools := 82 ;
12778: LD_ADDR_EXP 42
12782: PUSH
12783: LD_INT 82
12785: ST_TO_ADDR
// tech_Cargo := 83 ;
12786: LD_ADDR_EXP 43
12790: PUSH
12791: LD_INT 83
12793: ST_TO_ADDR
// tech_Track := 84 ;
12794: LD_ADDR_EXP 44
12798: PUSH
12799: LD_INT 84
12801: ST_TO_ADDR
// tech_Crane := 85 ;
12802: LD_ADDR_EXP 45
12806: PUSH
12807: LD_INT 85
12809: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12810: LD_ADDR_EXP 46
12814: PUSH
12815: LD_INT 86
12817: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12818: LD_ADDR_EXP 47
12822: PUSH
12823: LD_INT 87
12825: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12826: LD_ADDR_EXP 48
12830: PUSH
12831: LD_INT 88
12833: ST_TO_ADDR
// class_mastodont := 31 ;
12834: LD_ADDR_EXP 49
12838: PUSH
12839: LD_INT 31
12841: ST_TO_ADDR
// class_horse := 21 ;
12842: LD_ADDR_EXP 50
12846: PUSH
12847: LD_INT 21
12849: ST_TO_ADDR
// end ;
12850: LD_VAR 0 1
12854: RET
// every 1 do
12855: GO 12857
12857: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12858: CALL 12695 0 0
12862: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12863: LD_INT 0
12865: PPUSH
// if p2 = 100 then
12866: LD_VAR 0 2
12870: PUSH
12871: LD_INT 100
12873: EQUAL
12874: IFFALSE 13877
// begin if not StreamModeActive then
12876: LD_EXP 51
12880: NOT
12881: IFFALSE 12891
// StreamModeActive := true ;
12883: LD_ADDR_EXP 51
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 0 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: IFFALSE 12905
// InitStreamMode ;
12901: CALL 14037 0 0
// if p3 = 1 then
12905: LD_VAR 0 3
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 12923
// sRocket := true ;
12915: LD_ADDR_EXP 56
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// if p3 = 2 then
12923: LD_VAR 0 3
12927: PUSH
12928: LD_INT 2
12930: EQUAL
12931: IFFALSE 12941
// sSpeed := true ;
12933: LD_ADDR_EXP 55
12937: PUSH
12938: LD_INT 1
12940: ST_TO_ADDR
// if p3 = 3 then
12941: LD_VAR 0 3
12945: PUSH
12946: LD_INT 3
12948: EQUAL
12949: IFFALSE 12959
// sEngine := true ;
12951: LD_ADDR_EXP 57
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
// if p3 = 4 then
12959: LD_VAR 0 3
12963: PUSH
12964: LD_INT 4
12966: EQUAL
12967: IFFALSE 12977
// sSpec := true ;
12969: LD_ADDR_EXP 54
12973: PUSH
12974: LD_INT 1
12976: ST_TO_ADDR
// if p3 = 5 then
12977: LD_VAR 0 3
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: IFFALSE 12995
// sLevel := true ;
12987: LD_ADDR_EXP 58
12991: PUSH
12992: LD_INT 1
12994: ST_TO_ADDR
// if p3 = 6 then
12995: LD_VAR 0 3
12999: PUSH
13000: LD_INT 6
13002: EQUAL
13003: IFFALSE 13013
// sArmoury := true ;
13005: LD_ADDR_EXP 59
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// if p3 = 7 then
13013: LD_VAR 0 3
13017: PUSH
13018: LD_INT 7
13020: EQUAL
13021: IFFALSE 13031
// sRadar := true ;
13023: LD_ADDR_EXP 60
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// if p3 = 8 then
13031: LD_VAR 0 3
13035: PUSH
13036: LD_INT 8
13038: EQUAL
13039: IFFALSE 13049
// sBunker := true ;
13041: LD_ADDR_EXP 61
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// if p3 = 9 then
13049: LD_VAR 0 3
13053: PUSH
13054: LD_INT 9
13056: EQUAL
13057: IFFALSE 13067
// sHack := true ;
13059: LD_ADDR_EXP 62
13063: PUSH
13064: LD_INT 1
13066: ST_TO_ADDR
// if p3 = 10 then
13067: LD_VAR 0 3
13071: PUSH
13072: LD_INT 10
13074: EQUAL
13075: IFFALSE 13085
// sFire := true ;
13077: LD_ADDR_EXP 63
13081: PUSH
13082: LD_INT 1
13084: ST_TO_ADDR
// if p3 = 11 then
13085: LD_VAR 0 3
13089: PUSH
13090: LD_INT 11
13092: EQUAL
13093: IFFALSE 13103
// sRefresh := true ;
13095: LD_ADDR_EXP 64
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// if p3 = 12 then
13103: LD_VAR 0 3
13107: PUSH
13108: LD_INT 12
13110: EQUAL
13111: IFFALSE 13121
// sExp := true ;
13113: LD_ADDR_EXP 65
13117: PUSH
13118: LD_INT 1
13120: ST_TO_ADDR
// if p3 = 13 then
13121: LD_VAR 0 3
13125: PUSH
13126: LD_INT 13
13128: EQUAL
13129: IFFALSE 13139
// sDepot := true ;
13131: LD_ADDR_EXP 66
13135: PUSH
13136: LD_INT 1
13138: ST_TO_ADDR
// if p3 = 14 then
13139: LD_VAR 0 3
13143: PUSH
13144: LD_INT 14
13146: EQUAL
13147: IFFALSE 13157
// sFlag := true ;
13149: LD_ADDR_EXP 67
13153: PUSH
13154: LD_INT 1
13156: ST_TO_ADDR
// if p3 = 15 then
13157: LD_VAR 0 3
13161: PUSH
13162: LD_INT 15
13164: EQUAL
13165: IFFALSE 13175
// sKamikadze := true ;
13167: LD_ADDR_EXP 75
13171: PUSH
13172: LD_INT 1
13174: ST_TO_ADDR
// if p3 = 16 then
13175: LD_VAR 0 3
13179: PUSH
13180: LD_INT 16
13182: EQUAL
13183: IFFALSE 13193
// sTroll := true ;
13185: LD_ADDR_EXP 76
13189: PUSH
13190: LD_INT 1
13192: ST_TO_ADDR
// if p3 = 17 then
13193: LD_VAR 0 3
13197: PUSH
13198: LD_INT 17
13200: EQUAL
13201: IFFALSE 13211
// sSlow := true ;
13203: LD_ADDR_EXP 77
13207: PUSH
13208: LD_INT 1
13210: ST_TO_ADDR
// if p3 = 18 then
13211: LD_VAR 0 3
13215: PUSH
13216: LD_INT 18
13218: EQUAL
13219: IFFALSE 13229
// sLack := true ;
13221: LD_ADDR_EXP 78
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// if p3 = 19 then
13229: LD_VAR 0 3
13233: PUSH
13234: LD_INT 19
13236: EQUAL
13237: IFFALSE 13247
// sTank := true ;
13239: LD_ADDR_EXP 80
13243: PUSH
13244: LD_INT 1
13246: ST_TO_ADDR
// if p3 = 20 then
13247: LD_VAR 0 3
13251: PUSH
13252: LD_INT 20
13254: EQUAL
13255: IFFALSE 13265
// sRemote := true ;
13257: LD_ADDR_EXP 81
13261: PUSH
13262: LD_INT 1
13264: ST_TO_ADDR
// if p3 = 21 then
13265: LD_VAR 0 3
13269: PUSH
13270: LD_INT 21
13272: EQUAL
13273: IFFALSE 13283
// sPowell := true ;
13275: LD_ADDR_EXP 82
13279: PUSH
13280: LD_INT 1
13282: ST_TO_ADDR
// if p3 = 22 then
13283: LD_VAR 0 3
13287: PUSH
13288: LD_INT 22
13290: EQUAL
13291: IFFALSE 13301
// sTeleport := true ;
13293: LD_ADDR_EXP 85
13297: PUSH
13298: LD_INT 1
13300: ST_TO_ADDR
// if p3 = 23 then
13301: LD_VAR 0 3
13305: PUSH
13306: LD_INT 23
13308: EQUAL
13309: IFFALSE 13319
// sOilTower := true ;
13311: LD_ADDR_EXP 87
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// if p3 = 24 then
13319: LD_VAR 0 3
13323: PUSH
13324: LD_INT 24
13326: EQUAL
13327: IFFALSE 13337
// sShovel := true ;
13329: LD_ADDR_EXP 88
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// if p3 = 25 then
13337: LD_VAR 0 3
13341: PUSH
13342: LD_INT 25
13344: EQUAL
13345: IFFALSE 13355
// sSheik := true ;
13347: LD_ADDR_EXP 89
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// if p3 = 26 then
13355: LD_VAR 0 3
13359: PUSH
13360: LD_INT 26
13362: EQUAL
13363: IFFALSE 13373
// sEarthquake := true ;
13365: LD_ADDR_EXP 91
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// if p3 = 27 then
13373: LD_VAR 0 3
13377: PUSH
13378: LD_INT 27
13380: EQUAL
13381: IFFALSE 13391
// sAI := true ;
13383: LD_ADDR_EXP 92
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// if p3 = 28 then
13391: LD_VAR 0 3
13395: PUSH
13396: LD_INT 28
13398: EQUAL
13399: IFFALSE 13409
// sCargo := true ;
13401: LD_ADDR_EXP 95
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// if p3 = 29 then
13409: LD_VAR 0 3
13413: PUSH
13414: LD_INT 29
13416: EQUAL
13417: IFFALSE 13427
// sDLaser := true ;
13419: LD_ADDR_EXP 96
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// if p3 = 30 then
13427: LD_VAR 0 3
13431: PUSH
13432: LD_INT 30
13434: EQUAL
13435: IFFALSE 13445
// sExchange := true ;
13437: LD_ADDR_EXP 97
13441: PUSH
13442: LD_INT 1
13444: ST_TO_ADDR
// if p3 = 31 then
13445: LD_VAR 0 3
13449: PUSH
13450: LD_INT 31
13452: EQUAL
13453: IFFALSE 13463
// sFac := true ;
13455: LD_ADDR_EXP 98
13459: PUSH
13460: LD_INT 1
13462: ST_TO_ADDR
// if p3 = 32 then
13463: LD_VAR 0 3
13467: PUSH
13468: LD_INT 32
13470: EQUAL
13471: IFFALSE 13481
// sPower := true ;
13473: LD_ADDR_EXP 99
13477: PUSH
13478: LD_INT 1
13480: ST_TO_ADDR
// if p3 = 33 then
13481: LD_VAR 0 3
13485: PUSH
13486: LD_INT 33
13488: EQUAL
13489: IFFALSE 13499
// sRandom := true ;
13491: LD_ADDR_EXP 100
13495: PUSH
13496: LD_INT 1
13498: ST_TO_ADDR
// if p3 = 34 then
13499: LD_VAR 0 3
13503: PUSH
13504: LD_INT 34
13506: EQUAL
13507: IFFALSE 13517
// sShield := true ;
13509: LD_ADDR_EXP 101
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// if p3 = 35 then
13517: LD_VAR 0 3
13521: PUSH
13522: LD_INT 35
13524: EQUAL
13525: IFFALSE 13535
// sTime := true ;
13527: LD_ADDR_EXP 102
13531: PUSH
13532: LD_INT 1
13534: ST_TO_ADDR
// if p3 = 36 then
13535: LD_VAR 0 3
13539: PUSH
13540: LD_INT 36
13542: EQUAL
13543: IFFALSE 13553
// sTools := true ;
13545: LD_ADDR_EXP 103
13549: PUSH
13550: LD_INT 1
13552: ST_TO_ADDR
// if p3 = 101 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 101
13560: EQUAL
13561: IFFALSE 13571
// sSold := true ;
13563: LD_ADDR_EXP 68
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// if p3 = 102 then
13571: LD_VAR 0 3
13575: PUSH
13576: LD_INT 102
13578: EQUAL
13579: IFFALSE 13589
// sDiff := true ;
13581: LD_ADDR_EXP 69
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// if p3 = 103 then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 103
13596: EQUAL
13597: IFFALSE 13607
// sFog := true ;
13599: LD_ADDR_EXP 72
13603: PUSH
13604: LD_INT 1
13606: ST_TO_ADDR
// if p3 = 104 then
13607: LD_VAR 0 3
13611: PUSH
13612: LD_INT 104
13614: EQUAL
13615: IFFALSE 13625
// sReset := true ;
13617: LD_ADDR_EXP 73
13621: PUSH
13622: LD_INT 1
13624: ST_TO_ADDR
// if p3 = 105 then
13625: LD_VAR 0 3
13629: PUSH
13630: LD_INT 105
13632: EQUAL
13633: IFFALSE 13643
// sSun := true ;
13635: LD_ADDR_EXP 74
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// if p3 = 106 then
13643: LD_VAR 0 3
13647: PUSH
13648: LD_INT 106
13650: EQUAL
13651: IFFALSE 13661
// sTiger := true ;
13653: LD_ADDR_EXP 70
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// if p3 = 107 then
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 107
13668: EQUAL
13669: IFFALSE 13679
// sBomb := true ;
13671: LD_ADDR_EXP 71
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// if p3 = 108 then
13679: LD_VAR 0 3
13683: PUSH
13684: LD_INT 108
13686: EQUAL
13687: IFFALSE 13697
// sWound := true ;
13689: LD_ADDR_EXP 79
13693: PUSH
13694: LD_INT 1
13696: ST_TO_ADDR
// if p3 = 109 then
13697: LD_VAR 0 3
13701: PUSH
13702: LD_INT 109
13704: EQUAL
13705: IFFALSE 13715
// sBetray := true ;
13707: LD_ADDR_EXP 83
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// if p3 = 110 then
13715: LD_VAR 0 3
13719: PUSH
13720: LD_INT 110
13722: EQUAL
13723: IFFALSE 13733
// sContamin := true ;
13725: LD_ADDR_EXP 84
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// if p3 = 111 then
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 111
13740: EQUAL
13741: IFFALSE 13751
// sOil := true ;
13743: LD_ADDR_EXP 86
13747: PUSH
13748: LD_INT 1
13750: ST_TO_ADDR
// if p3 = 112 then
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 112
13758: EQUAL
13759: IFFALSE 13769
// sStu := true ;
13761: LD_ADDR_EXP 90
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// if p3 = 113 then
13769: LD_VAR 0 3
13773: PUSH
13774: LD_INT 113
13776: EQUAL
13777: IFFALSE 13787
// sBazooka := true ;
13779: LD_ADDR_EXP 93
13783: PUSH
13784: LD_INT 1
13786: ST_TO_ADDR
// if p3 = 114 then
13787: LD_VAR 0 3
13791: PUSH
13792: LD_INT 114
13794: EQUAL
13795: IFFALSE 13805
// sMortar := true ;
13797: LD_ADDR_EXP 94
13801: PUSH
13802: LD_INT 1
13804: ST_TO_ADDR
// if p3 = 115 then
13805: LD_VAR 0 3
13809: PUSH
13810: LD_INT 115
13812: EQUAL
13813: IFFALSE 13823
// sRanger := true ;
13815: LD_ADDR_EXP 104
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// if p3 = 116 then
13823: LD_VAR 0 3
13827: PUSH
13828: LD_INT 116
13830: EQUAL
13831: IFFALSE 13841
// sComputer := true ;
13833: LD_ADDR_EXP 105
13837: PUSH
13838: LD_INT 1
13840: ST_TO_ADDR
// if p3 = 117 then
13841: LD_VAR 0 3
13845: PUSH
13846: LD_INT 117
13848: EQUAL
13849: IFFALSE 13859
// s30 := true ;
13851: LD_ADDR_EXP 106
13855: PUSH
13856: LD_INT 1
13858: ST_TO_ADDR
// if p3 = 118 then
13859: LD_VAR 0 3
13863: PUSH
13864: LD_INT 118
13866: EQUAL
13867: IFFALSE 13877
// s60 := true ;
13869: LD_ADDR_EXP 107
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// end ; if p2 = 101 then
13877: LD_VAR 0 2
13881: PUSH
13882: LD_INT 101
13884: EQUAL
13885: IFFALSE 14013
// begin case p3 of 1 :
13887: LD_VAR 0 3
13891: PUSH
13892: LD_INT 1
13894: DOUBLE
13895: EQUAL
13896: IFTRUE 13900
13898: GO 13907
13900: POP
// hHackUnlimitedResources ; 2 :
13901: CALL 25609 0 0
13905: GO 14013
13907: LD_INT 2
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 13922
13915: POP
// hHackSetLevel10 ; 3 :
13916: CALL 25742 0 0
13920: GO 14013
13922: LD_INT 3
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13937
13930: POP
// hHackSetLevel10YourUnits ; 4 :
13931: CALL 25827 0 0
13935: GO 14013
13937: LD_INT 4
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 13952
13945: POP
// hHackInvincible ; 5 :
13946: CALL 26275 0 0
13950: GO 14013
13952: LD_INT 5
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13967
13960: POP
// hHackInvisible ; 6 :
13961: CALL 26386 0 0
13965: GO 14013
13967: LD_INT 6
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 13982
13975: POP
// hHackChangeYourSide ; 7 :
13976: CALL 26443 0 0
13980: GO 14013
13982: LD_INT 7
13984: DOUBLE
13985: EQUAL
13986: IFTRUE 13990
13988: GO 13997
13990: POP
// hHackChangeUnitSide ; 8 :
13991: CALL 26485 0 0
13995: GO 14013
13997: LD_INT 8
13999: DOUBLE
14000: EQUAL
14001: IFTRUE 14005
14003: GO 14012
14005: POP
// hHackFog ; end ;
14006: CALL 26586 0 0
14010: GO 14013
14012: POP
// end ; end ;
14013: LD_VAR 0 7
14017: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14018: GO 14020
14020: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14021: LD_STRING initStreamRollete();
14023: PPUSH
14024: CALL_OW 559
// InitStreamMode ;
14028: CALL 14037 0 0
// DefineStreamItems ( ) ;
14032: CALL 14501 0 0
// end ;
14036: END
// function InitStreamMode ; begin
14037: LD_INT 0
14039: PPUSH
// streamModeActive := false ;
14040: LD_ADDR_EXP 51
14044: PUSH
14045: LD_INT 0
14047: ST_TO_ADDR
// normalCounter := 36 ;
14048: LD_ADDR_EXP 52
14052: PUSH
14053: LD_INT 36
14055: ST_TO_ADDR
// hardcoreCounter := 16 ;
14056: LD_ADDR_EXP 53
14060: PUSH
14061: LD_INT 16
14063: ST_TO_ADDR
// sRocket := false ;
14064: LD_ADDR_EXP 56
14068: PUSH
14069: LD_INT 0
14071: ST_TO_ADDR
// sSpeed := false ;
14072: LD_ADDR_EXP 55
14076: PUSH
14077: LD_INT 0
14079: ST_TO_ADDR
// sEngine := false ;
14080: LD_ADDR_EXP 57
14084: PUSH
14085: LD_INT 0
14087: ST_TO_ADDR
// sSpec := false ;
14088: LD_ADDR_EXP 54
14092: PUSH
14093: LD_INT 0
14095: ST_TO_ADDR
// sLevel := false ;
14096: LD_ADDR_EXP 58
14100: PUSH
14101: LD_INT 0
14103: ST_TO_ADDR
// sArmoury := false ;
14104: LD_ADDR_EXP 59
14108: PUSH
14109: LD_INT 0
14111: ST_TO_ADDR
// sRadar := false ;
14112: LD_ADDR_EXP 60
14116: PUSH
14117: LD_INT 0
14119: ST_TO_ADDR
// sBunker := false ;
14120: LD_ADDR_EXP 61
14124: PUSH
14125: LD_INT 0
14127: ST_TO_ADDR
// sHack := false ;
14128: LD_ADDR_EXP 62
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// sFire := false ;
14136: LD_ADDR_EXP 63
14140: PUSH
14141: LD_INT 0
14143: ST_TO_ADDR
// sRefresh := false ;
14144: LD_ADDR_EXP 64
14148: PUSH
14149: LD_INT 0
14151: ST_TO_ADDR
// sExp := false ;
14152: LD_ADDR_EXP 65
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// sDepot := false ;
14160: LD_ADDR_EXP 66
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// sFlag := false ;
14168: LD_ADDR_EXP 67
14172: PUSH
14173: LD_INT 0
14175: ST_TO_ADDR
// sKamikadze := false ;
14176: LD_ADDR_EXP 75
14180: PUSH
14181: LD_INT 0
14183: ST_TO_ADDR
// sTroll := false ;
14184: LD_ADDR_EXP 76
14188: PUSH
14189: LD_INT 0
14191: ST_TO_ADDR
// sSlow := false ;
14192: LD_ADDR_EXP 77
14196: PUSH
14197: LD_INT 0
14199: ST_TO_ADDR
// sLack := false ;
14200: LD_ADDR_EXP 78
14204: PUSH
14205: LD_INT 0
14207: ST_TO_ADDR
// sTank := false ;
14208: LD_ADDR_EXP 80
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// sRemote := false ;
14216: LD_ADDR_EXP 81
14220: PUSH
14221: LD_INT 0
14223: ST_TO_ADDR
// sPowell := false ;
14224: LD_ADDR_EXP 82
14228: PUSH
14229: LD_INT 0
14231: ST_TO_ADDR
// sTeleport := false ;
14232: LD_ADDR_EXP 85
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// sOilTower := false ;
14240: LD_ADDR_EXP 87
14244: PUSH
14245: LD_INT 0
14247: ST_TO_ADDR
// sShovel := false ;
14248: LD_ADDR_EXP 88
14252: PUSH
14253: LD_INT 0
14255: ST_TO_ADDR
// sSheik := false ;
14256: LD_ADDR_EXP 89
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// sEarthquake := false ;
14264: LD_ADDR_EXP 91
14268: PUSH
14269: LD_INT 0
14271: ST_TO_ADDR
// sAI := false ;
14272: LD_ADDR_EXP 92
14276: PUSH
14277: LD_INT 0
14279: ST_TO_ADDR
// sCargo := false ;
14280: LD_ADDR_EXP 95
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// sDLaser := false ;
14288: LD_ADDR_EXP 96
14292: PUSH
14293: LD_INT 0
14295: ST_TO_ADDR
// sExchange := false ;
14296: LD_ADDR_EXP 97
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// sFac := false ;
14304: LD_ADDR_EXP 98
14308: PUSH
14309: LD_INT 0
14311: ST_TO_ADDR
// sPower := false ;
14312: LD_ADDR_EXP 99
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// sRandom := false ;
14320: LD_ADDR_EXP 100
14324: PUSH
14325: LD_INT 0
14327: ST_TO_ADDR
// sShield := false ;
14328: LD_ADDR_EXP 101
14332: PUSH
14333: LD_INT 0
14335: ST_TO_ADDR
// sTime := false ;
14336: LD_ADDR_EXP 102
14340: PUSH
14341: LD_INT 0
14343: ST_TO_ADDR
// sTools := false ;
14344: LD_ADDR_EXP 103
14348: PUSH
14349: LD_INT 0
14351: ST_TO_ADDR
// sSold := false ;
14352: LD_ADDR_EXP 68
14356: PUSH
14357: LD_INT 0
14359: ST_TO_ADDR
// sDiff := false ;
14360: LD_ADDR_EXP 69
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// sFog := false ;
14368: LD_ADDR_EXP 72
14372: PUSH
14373: LD_INT 0
14375: ST_TO_ADDR
// sReset := false ;
14376: LD_ADDR_EXP 73
14380: PUSH
14381: LD_INT 0
14383: ST_TO_ADDR
// sSun := false ;
14384: LD_ADDR_EXP 74
14388: PUSH
14389: LD_INT 0
14391: ST_TO_ADDR
// sTiger := false ;
14392: LD_ADDR_EXP 70
14396: PUSH
14397: LD_INT 0
14399: ST_TO_ADDR
// sBomb := false ;
14400: LD_ADDR_EXP 71
14404: PUSH
14405: LD_INT 0
14407: ST_TO_ADDR
// sWound := false ;
14408: LD_ADDR_EXP 79
14412: PUSH
14413: LD_INT 0
14415: ST_TO_ADDR
// sBetray := false ;
14416: LD_ADDR_EXP 83
14420: PUSH
14421: LD_INT 0
14423: ST_TO_ADDR
// sContamin := false ;
14424: LD_ADDR_EXP 84
14428: PUSH
14429: LD_INT 0
14431: ST_TO_ADDR
// sOil := false ;
14432: LD_ADDR_EXP 86
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// sStu := false ;
14440: LD_ADDR_EXP 90
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// sBazooka := false ;
14448: LD_ADDR_EXP 93
14452: PUSH
14453: LD_INT 0
14455: ST_TO_ADDR
// sMortar := false ;
14456: LD_ADDR_EXP 94
14460: PUSH
14461: LD_INT 0
14463: ST_TO_ADDR
// sRanger := false ;
14464: LD_ADDR_EXP 104
14468: PUSH
14469: LD_INT 0
14471: ST_TO_ADDR
// sComputer := false ;
14472: LD_ADDR_EXP 105
14476: PUSH
14477: LD_INT 0
14479: ST_TO_ADDR
// s30 := false ;
14480: LD_ADDR_EXP 106
14484: PUSH
14485: LD_INT 0
14487: ST_TO_ADDR
// s60 := false ;
14488: LD_ADDR_EXP 107
14492: PUSH
14493: LD_INT 0
14495: ST_TO_ADDR
// end ;
14496: LD_VAR 0 1
14500: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
14507: PPUSH
// result := [ ] ;
14508: LD_ADDR_VAR 0 1
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// if campaign_id = 1 then
14515: LD_OWVAR 69
14519: PUSH
14520: LD_INT 1
14522: EQUAL
14523: IFFALSE 17689
// begin case mission_number of 1 :
14525: LD_OWVAR 70
14529: PUSH
14530: LD_INT 1
14532: DOUBLE
14533: EQUAL
14534: IFTRUE 14538
14536: GO 14614
14538: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14539: LD_ADDR_VAR 0 1
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: LD_INT 4
14549: PUSH
14550: LD_INT 11
14552: PUSH
14553: LD_INT 12
14555: PUSH
14556: LD_INT 15
14558: PUSH
14559: LD_INT 16
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: LD_INT 23
14567: PUSH
14568: LD_INT 26
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 101
14584: PUSH
14585: LD_INT 102
14587: PUSH
14588: LD_INT 106
14590: PUSH
14591: LD_INT 116
14593: PUSH
14594: LD_INT 117
14596: PUSH
14597: LD_INT 118
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: ST_TO_ADDR
14612: GO 17687
14614: LD_INT 2
14616: DOUBLE
14617: EQUAL
14618: IFTRUE 14622
14620: GO 14706
14622: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14623: LD_ADDR_VAR 0 1
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 4
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: LD_INT 15
14642: PUSH
14643: LD_INT 16
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_INT 23
14651: PUSH
14652: LD_INT 26
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 101
14668: PUSH
14669: LD_INT 102
14671: PUSH
14672: LD_INT 105
14674: PUSH
14675: LD_INT 106
14677: PUSH
14678: LD_INT 108
14680: PUSH
14681: LD_INT 116
14683: PUSH
14684: LD_INT 117
14686: PUSH
14687: LD_INT 118
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: ST_TO_ADDR
14704: GO 17687
14706: LD_INT 3
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14802
14714: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 4
14725: PUSH
14726: LD_INT 5
14728: PUSH
14729: LD_INT 11
14731: PUSH
14732: LD_INT 12
14734: PUSH
14735: LD_INT 15
14737: PUSH
14738: LD_INT 16
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_INT 26
14746: PUSH
14747: LD_INT 36
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 101
14764: PUSH
14765: LD_INT 102
14767: PUSH
14768: LD_INT 105
14770: PUSH
14771: LD_INT 106
14773: PUSH
14774: LD_INT 108
14776: PUSH
14777: LD_INT 116
14779: PUSH
14780: LD_INT 117
14782: PUSH
14783: LD_INT 118
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: ST_TO_ADDR
14800: GO 17687
14802: LD_INT 4
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14906
14810: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14811: LD_ADDR_VAR 0 1
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 4
14821: PUSH
14822: LD_INT 5
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: LD_INT 11
14830: PUSH
14831: LD_INT 12
14833: PUSH
14834: LD_INT 15
14836: PUSH
14837: LD_INT 16
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 26
14848: PUSH
14849: LD_INT 36
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 101
14868: PUSH
14869: LD_INT 102
14871: PUSH
14872: LD_INT 105
14874: PUSH
14875: LD_INT 106
14877: PUSH
14878: LD_INT 108
14880: PUSH
14881: LD_INT 116
14883: PUSH
14884: LD_INT 117
14886: PUSH
14887: LD_INT 118
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: ST_TO_ADDR
14904: GO 17687
14906: LD_INT 5
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 15026
14914: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14915: LD_ADDR_VAR 0 1
14919: PUSH
14920: LD_INT 2
14922: PUSH
14923: LD_INT 4
14925: PUSH
14926: LD_INT 5
14928: PUSH
14929: LD_INT 6
14931: PUSH
14932: LD_INT 8
14934: PUSH
14935: LD_INT 11
14937: PUSH
14938: LD_INT 12
14940: PUSH
14941: LD_INT 15
14943: PUSH
14944: LD_INT 16
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 23
14952: PUSH
14953: LD_INT 25
14955: PUSH
14956: LD_INT 26
14958: PUSH
14959: LD_INT 36
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 101
14980: PUSH
14981: LD_INT 102
14983: PUSH
14984: LD_INT 105
14986: PUSH
14987: LD_INT 106
14989: PUSH
14990: LD_INT 108
14992: PUSH
14993: LD_INT 109
14995: PUSH
14996: LD_INT 112
14998: PUSH
14999: LD_INT 116
15001: PUSH
15002: LD_INT 117
15004: PUSH
15005: LD_INT 118
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 17687
15026: LD_INT 6
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15166
15034: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15035: LD_ADDR_VAR 0 1
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 4
15045: PUSH
15046: LD_INT 5
15048: PUSH
15049: LD_INT 6
15051: PUSH
15052: LD_INT 8
15054: PUSH
15055: LD_INT 11
15057: PUSH
15058: LD_INT 12
15060: PUSH
15061: LD_INT 15
15063: PUSH
15064: LD_INT 16
15066: PUSH
15067: LD_INT 20
15069: PUSH
15070: LD_INT 21
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 23
15078: PUSH
15079: LD_INT 25
15081: PUSH
15082: LD_INT 26
15084: PUSH
15085: LD_INT 30
15087: PUSH
15088: LD_INT 31
15090: PUSH
15091: LD_INT 32
15093: PUSH
15094: LD_INT 36
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 101
15120: PUSH
15121: LD_INT 102
15123: PUSH
15124: LD_INT 105
15126: PUSH
15127: LD_INT 106
15129: PUSH
15130: LD_INT 108
15132: PUSH
15133: LD_INT 109
15135: PUSH
15136: LD_INT 112
15138: PUSH
15139: LD_INT 116
15141: PUSH
15142: LD_INT 117
15144: PUSH
15145: LD_INT 118
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ST_TO_ADDR
15164: GO 17687
15166: LD_INT 7
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15286
15174: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15175: LD_ADDR_VAR 0 1
15179: PUSH
15180: LD_INT 2
15182: PUSH
15183: LD_INT 4
15185: PUSH
15186: LD_INT 5
15188: PUSH
15189: LD_INT 7
15191: PUSH
15192: LD_INT 11
15194: PUSH
15195: LD_INT 12
15197: PUSH
15198: LD_INT 15
15200: PUSH
15201: LD_INT 16
15203: PUSH
15204: LD_INT 20
15206: PUSH
15207: LD_INT 21
15209: PUSH
15210: LD_INT 22
15212: PUSH
15213: LD_INT 23
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 26
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 101
15240: PUSH
15241: LD_INT 102
15243: PUSH
15244: LD_INT 103
15246: PUSH
15247: LD_INT 105
15249: PUSH
15250: LD_INT 106
15252: PUSH
15253: LD_INT 108
15255: PUSH
15256: LD_INT 112
15258: PUSH
15259: LD_INT 116
15261: PUSH
15262: LD_INT 117
15264: PUSH
15265: LD_INT 118
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 17687
15286: LD_INT 8
15288: DOUBLE
15289: EQUAL
15290: IFTRUE 15294
15292: GO 15434
15294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15295: LD_ADDR_VAR 0 1
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 7
15314: PUSH
15315: LD_INT 8
15317: PUSH
15318: LD_INT 11
15320: PUSH
15321: LD_INT 12
15323: PUSH
15324: LD_INT 15
15326: PUSH
15327: LD_INT 16
15329: PUSH
15330: LD_INT 20
15332: PUSH
15333: LD_INT 21
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_INT 23
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 26
15347: PUSH
15348: LD_INT 30
15350: PUSH
15351: LD_INT 31
15353: PUSH
15354: LD_INT 32
15356: PUSH
15357: LD_INT 36
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 101
15384: PUSH
15385: LD_INT 102
15387: PUSH
15388: LD_INT 103
15390: PUSH
15391: LD_INT 105
15393: PUSH
15394: LD_INT 106
15396: PUSH
15397: LD_INT 108
15399: PUSH
15400: LD_INT 109
15402: PUSH
15403: LD_INT 112
15405: PUSH
15406: LD_INT 116
15408: PUSH
15409: LD_INT 117
15411: PUSH
15412: LD_INT 118
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: ST_TO_ADDR
15432: GO 17687
15434: LD_INT 9
15436: DOUBLE
15437: EQUAL
15438: IFTRUE 15442
15440: GO 15590
15442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15443: LD_ADDR_VAR 0 1
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: LD_INT 4
15453: PUSH
15454: LD_INT 5
15456: PUSH
15457: LD_INT 6
15459: PUSH
15460: LD_INT 7
15462: PUSH
15463: LD_INT 8
15465: PUSH
15466: LD_INT 11
15468: PUSH
15469: LD_INT 12
15471: PUSH
15472: LD_INT 15
15474: PUSH
15475: LD_INT 16
15477: PUSH
15478: LD_INT 20
15480: PUSH
15481: LD_INT 21
15483: PUSH
15484: LD_INT 22
15486: PUSH
15487: LD_INT 23
15489: PUSH
15490: LD_INT 25
15492: PUSH
15493: LD_INT 26
15495: PUSH
15496: LD_INT 28
15498: PUSH
15499: LD_INT 30
15501: PUSH
15502: LD_INT 31
15504: PUSH
15505: LD_INT 32
15507: PUSH
15508: LD_INT 36
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 101
15536: PUSH
15537: LD_INT 102
15539: PUSH
15540: LD_INT 103
15542: PUSH
15543: LD_INT 105
15545: PUSH
15546: LD_INT 106
15548: PUSH
15549: LD_INT 108
15551: PUSH
15552: LD_INT 109
15554: PUSH
15555: LD_INT 112
15557: PUSH
15558: LD_INT 114
15560: PUSH
15561: LD_INT 116
15563: PUSH
15564: LD_INT 117
15566: PUSH
15567: LD_INT 118
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: ST_TO_ADDR
15588: GO 17687
15590: LD_INT 10
15592: DOUBLE
15593: EQUAL
15594: IFTRUE 15598
15596: GO 15794
15598: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15599: LD_ADDR_VAR 0 1
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: LD_INT 4
15609: PUSH
15610: LD_INT 5
15612: PUSH
15613: LD_INT 6
15615: PUSH
15616: LD_INT 7
15618: PUSH
15619: LD_INT 8
15621: PUSH
15622: LD_INT 9
15624: PUSH
15625: LD_INT 10
15627: PUSH
15628: LD_INT 11
15630: PUSH
15631: LD_INT 12
15633: PUSH
15634: LD_INT 13
15636: PUSH
15637: LD_INT 14
15639: PUSH
15640: LD_INT 15
15642: PUSH
15643: LD_INT 16
15645: PUSH
15646: LD_INT 17
15648: PUSH
15649: LD_INT 18
15651: PUSH
15652: LD_INT 19
15654: PUSH
15655: LD_INT 20
15657: PUSH
15658: LD_INT 21
15660: PUSH
15661: LD_INT 22
15663: PUSH
15664: LD_INT 23
15666: PUSH
15667: LD_INT 24
15669: PUSH
15670: LD_INT 25
15672: PUSH
15673: LD_INT 26
15675: PUSH
15676: LD_INT 28
15678: PUSH
15679: LD_INT 30
15681: PUSH
15682: LD_INT 31
15684: PUSH
15685: LD_INT 32
15687: PUSH
15688: LD_INT 36
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 101
15724: PUSH
15725: LD_INT 102
15727: PUSH
15728: LD_INT 103
15730: PUSH
15731: LD_INT 104
15733: PUSH
15734: LD_INT 105
15736: PUSH
15737: LD_INT 106
15739: PUSH
15740: LD_INT 107
15742: PUSH
15743: LD_INT 108
15745: PUSH
15746: LD_INT 109
15748: PUSH
15749: LD_INT 110
15751: PUSH
15752: LD_INT 111
15754: PUSH
15755: LD_INT 112
15757: PUSH
15758: LD_INT 114
15760: PUSH
15761: LD_INT 116
15763: PUSH
15764: LD_INT 117
15766: PUSH
15767: LD_INT 118
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: ST_TO_ADDR
15792: GO 17687
15794: LD_INT 11
15796: DOUBLE
15797: EQUAL
15798: IFTRUE 15802
15800: GO 16006
15802: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15803: LD_ADDR_VAR 0 1
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: LD_INT 4
15816: PUSH
15817: LD_INT 5
15819: PUSH
15820: LD_INT 6
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: LD_INT 8
15828: PUSH
15829: LD_INT 9
15831: PUSH
15832: LD_INT 10
15834: PUSH
15835: LD_INT 11
15837: PUSH
15838: LD_INT 12
15840: PUSH
15841: LD_INT 13
15843: PUSH
15844: LD_INT 14
15846: PUSH
15847: LD_INT 15
15849: PUSH
15850: LD_INT 16
15852: PUSH
15853: LD_INT 17
15855: PUSH
15856: LD_INT 18
15858: PUSH
15859: LD_INT 19
15861: PUSH
15862: LD_INT 20
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 22
15870: PUSH
15871: LD_INT 23
15873: PUSH
15874: LD_INT 24
15876: PUSH
15877: LD_INT 25
15879: PUSH
15880: LD_INT 26
15882: PUSH
15883: LD_INT 28
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 31
15891: PUSH
15892: LD_INT 32
15894: PUSH
15895: LD_INT 34
15897: PUSH
15898: LD_INT 36
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 101
15936: PUSH
15937: LD_INT 102
15939: PUSH
15940: LD_INT 103
15942: PUSH
15943: LD_INT 104
15945: PUSH
15946: LD_INT 105
15948: PUSH
15949: LD_INT 106
15951: PUSH
15952: LD_INT 107
15954: PUSH
15955: LD_INT 108
15957: PUSH
15958: LD_INT 109
15960: PUSH
15961: LD_INT 110
15963: PUSH
15964: LD_INT 111
15966: PUSH
15967: LD_INT 112
15969: PUSH
15970: LD_INT 114
15972: PUSH
15973: LD_INT 116
15975: PUSH
15976: LD_INT 117
15978: PUSH
15979: LD_INT 118
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: ST_TO_ADDR
16004: GO 17687
16006: LD_INT 12
16008: DOUBLE
16009: EQUAL
16010: IFTRUE 16014
16012: GO 16234
16014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16015: LD_ADDR_VAR 0 1
16019: PUSH
16020: LD_INT 1
16022: PUSH
16023: LD_INT 2
16025: PUSH
16026: LD_INT 3
16028: PUSH
16029: LD_INT 4
16031: PUSH
16032: LD_INT 5
16034: PUSH
16035: LD_INT 6
16037: PUSH
16038: LD_INT 7
16040: PUSH
16041: LD_INT 8
16043: PUSH
16044: LD_INT 9
16046: PUSH
16047: LD_INT 10
16049: PUSH
16050: LD_INT 11
16052: PUSH
16053: LD_INT 12
16055: PUSH
16056: LD_INT 13
16058: PUSH
16059: LD_INT 14
16061: PUSH
16062: LD_INT 15
16064: PUSH
16065: LD_INT 16
16067: PUSH
16068: LD_INT 17
16070: PUSH
16071: LD_INT 18
16073: PUSH
16074: LD_INT 19
16076: PUSH
16077: LD_INT 20
16079: PUSH
16080: LD_INT 21
16082: PUSH
16083: LD_INT 22
16085: PUSH
16086: LD_INT 23
16088: PUSH
16089: LD_INT 24
16091: PUSH
16092: LD_INT 25
16094: PUSH
16095: LD_INT 26
16097: PUSH
16098: LD_INT 27
16100: PUSH
16101: LD_INT 28
16103: PUSH
16104: LD_INT 30
16106: PUSH
16107: LD_INT 31
16109: PUSH
16110: LD_INT 32
16112: PUSH
16113: LD_INT 33
16115: PUSH
16116: LD_INT 34
16118: PUSH
16119: LD_INT 36
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 101
16160: PUSH
16161: LD_INT 102
16163: PUSH
16164: LD_INT 103
16166: PUSH
16167: LD_INT 104
16169: PUSH
16170: LD_INT 105
16172: PUSH
16173: LD_INT 106
16175: PUSH
16176: LD_INT 107
16178: PUSH
16179: LD_INT 108
16181: PUSH
16182: LD_INT 109
16184: PUSH
16185: LD_INT 110
16187: PUSH
16188: LD_INT 111
16190: PUSH
16191: LD_INT 112
16193: PUSH
16194: LD_INT 113
16196: PUSH
16197: LD_INT 114
16199: PUSH
16200: LD_INT 116
16202: PUSH
16203: LD_INT 117
16205: PUSH
16206: LD_INT 118
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: ST_TO_ADDR
16232: GO 17687
16234: LD_INT 13
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16450
16242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16243: LD_ADDR_VAR 0 1
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 3
16256: PUSH
16257: LD_INT 4
16259: PUSH
16260: LD_INT 5
16262: PUSH
16263: LD_INT 8
16265: PUSH
16266: LD_INT 9
16268: PUSH
16269: LD_INT 10
16271: PUSH
16272: LD_INT 11
16274: PUSH
16275: LD_INT 12
16277: PUSH
16278: LD_INT 14
16280: PUSH
16281: LD_INT 15
16283: PUSH
16284: LD_INT 16
16286: PUSH
16287: LD_INT 17
16289: PUSH
16290: LD_INT 18
16292: PUSH
16293: LD_INT 19
16295: PUSH
16296: LD_INT 20
16298: PUSH
16299: LD_INT 21
16301: PUSH
16302: LD_INT 22
16304: PUSH
16305: LD_INT 23
16307: PUSH
16308: LD_INT 24
16310: PUSH
16311: LD_INT 25
16313: PUSH
16314: LD_INT 26
16316: PUSH
16317: LD_INT 27
16319: PUSH
16320: LD_INT 28
16322: PUSH
16323: LD_INT 30
16325: PUSH
16326: LD_INT 31
16328: PUSH
16329: LD_INT 32
16331: PUSH
16332: LD_INT 33
16334: PUSH
16335: LD_INT 34
16337: PUSH
16338: LD_INT 36
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 101
16376: PUSH
16377: LD_INT 102
16379: PUSH
16380: LD_INT 103
16382: PUSH
16383: LD_INT 104
16385: PUSH
16386: LD_INT 105
16388: PUSH
16389: LD_INT 106
16391: PUSH
16392: LD_INT 107
16394: PUSH
16395: LD_INT 108
16397: PUSH
16398: LD_INT 109
16400: PUSH
16401: LD_INT 110
16403: PUSH
16404: LD_INT 111
16406: PUSH
16407: LD_INT 112
16409: PUSH
16410: LD_INT 113
16412: PUSH
16413: LD_INT 114
16415: PUSH
16416: LD_INT 116
16418: PUSH
16419: LD_INT 117
16421: PUSH
16422: LD_INT 118
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: ST_TO_ADDR
16448: GO 17687
16450: LD_INT 14
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16682
16458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16459: LD_ADDR_VAR 0 1
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 3
16472: PUSH
16473: LD_INT 4
16475: PUSH
16476: LD_INT 5
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: LD_INT 7
16484: PUSH
16485: LD_INT 8
16487: PUSH
16488: LD_INT 9
16490: PUSH
16491: LD_INT 10
16493: PUSH
16494: LD_INT 11
16496: PUSH
16497: LD_INT 12
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 14
16505: PUSH
16506: LD_INT 15
16508: PUSH
16509: LD_INT 16
16511: PUSH
16512: LD_INT 17
16514: PUSH
16515: LD_INT 18
16517: PUSH
16518: LD_INT 19
16520: PUSH
16521: LD_INT 20
16523: PUSH
16524: LD_INT 21
16526: PUSH
16527: LD_INT 22
16529: PUSH
16530: LD_INT 23
16532: PUSH
16533: LD_INT 24
16535: PUSH
16536: LD_INT 25
16538: PUSH
16539: LD_INT 26
16541: PUSH
16542: LD_INT 27
16544: PUSH
16545: LD_INT 28
16547: PUSH
16548: LD_INT 29
16550: PUSH
16551: LD_INT 30
16553: PUSH
16554: LD_INT 31
16556: PUSH
16557: LD_INT 32
16559: PUSH
16560: LD_INT 33
16562: PUSH
16563: LD_INT 34
16565: PUSH
16566: LD_INT 36
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 101
16608: PUSH
16609: LD_INT 102
16611: PUSH
16612: LD_INT 103
16614: PUSH
16615: LD_INT 104
16617: PUSH
16618: LD_INT 105
16620: PUSH
16621: LD_INT 106
16623: PUSH
16624: LD_INT 107
16626: PUSH
16627: LD_INT 108
16629: PUSH
16630: LD_INT 109
16632: PUSH
16633: LD_INT 110
16635: PUSH
16636: LD_INT 111
16638: PUSH
16639: LD_INT 112
16641: PUSH
16642: LD_INT 113
16644: PUSH
16645: LD_INT 114
16647: PUSH
16648: LD_INT 116
16650: PUSH
16651: LD_INT 117
16653: PUSH
16654: LD_INT 118
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: ST_TO_ADDR
16680: GO 17687
16682: LD_INT 15
16684: DOUBLE
16685: EQUAL
16686: IFTRUE 16690
16688: GO 16914
16690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16691: LD_ADDR_VAR 0 1
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 3
16704: PUSH
16705: LD_INT 4
16707: PUSH
16708: LD_INT 5
16710: PUSH
16711: LD_INT 6
16713: PUSH
16714: LD_INT 7
16716: PUSH
16717: LD_INT 8
16719: PUSH
16720: LD_INT 9
16722: PUSH
16723: LD_INT 10
16725: PUSH
16726: LD_INT 11
16728: PUSH
16729: LD_INT 12
16731: PUSH
16732: LD_INT 13
16734: PUSH
16735: LD_INT 14
16737: PUSH
16738: LD_INT 15
16740: PUSH
16741: LD_INT 16
16743: PUSH
16744: LD_INT 17
16746: PUSH
16747: LD_INT 18
16749: PUSH
16750: LD_INT 19
16752: PUSH
16753: LD_INT 20
16755: PUSH
16756: LD_INT 21
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_INT 23
16764: PUSH
16765: LD_INT 24
16767: PUSH
16768: LD_INT 25
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: LD_INT 27
16776: PUSH
16777: LD_INT 28
16779: PUSH
16780: LD_INT 29
16782: PUSH
16783: LD_INT 30
16785: PUSH
16786: LD_INT 31
16788: PUSH
16789: LD_INT 32
16791: PUSH
16792: LD_INT 33
16794: PUSH
16795: LD_INT 34
16797: PUSH
16798: LD_INT 36
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 101
16840: PUSH
16841: LD_INT 102
16843: PUSH
16844: LD_INT 103
16846: PUSH
16847: LD_INT 104
16849: PUSH
16850: LD_INT 105
16852: PUSH
16853: LD_INT 106
16855: PUSH
16856: LD_INT 107
16858: PUSH
16859: LD_INT 108
16861: PUSH
16862: LD_INT 109
16864: PUSH
16865: LD_INT 110
16867: PUSH
16868: LD_INT 111
16870: PUSH
16871: LD_INT 112
16873: PUSH
16874: LD_INT 113
16876: PUSH
16877: LD_INT 114
16879: PUSH
16880: LD_INT 116
16882: PUSH
16883: LD_INT 117
16885: PUSH
16886: LD_INT 118
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: ST_TO_ADDR
16912: GO 17687
16914: LD_INT 16
16916: DOUBLE
16917: EQUAL
16918: IFTRUE 16922
16920: GO 17058
16922: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16923: LD_ADDR_VAR 0 1
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 4
16933: PUSH
16934: LD_INT 5
16936: PUSH
16937: LD_INT 7
16939: PUSH
16940: LD_INT 11
16942: PUSH
16943: LD_INT 12
16945: PUSH
16946: LD_INT 15
16948: PUSH
16949: LD_INT 16
16951: PUSH
16952: LD_INT 20
16954: PUSH
16955: LD_INT 21
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_INT 23
16963: PUSH
16964: LD_INT 25
16966: PUSH
16967: LD_INT 26
16969: PUSH
16970: LD_INT 30
16972: PUSH
16973: LD_INT 31
16975: PUSH
16976: LD_INT 32
16978: PUSH
16979: LD_INT 33
16981: PUSH
16982: LD_INT 34
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 101
17008: PUSH
17009: LD_INT 102
17011: PUSH
17012: LD_INT 103
17014: PUSH
17015: LD_INT 106
17017: PUSH
17018: LD_INT 108
17020: PUSH
17021: LD_INT 112
17023: PUSH
17024: LD_INT 113
17026: PUSH
17027: LD_INT 114
17029: PUSH
17030: LD_INT 116
17032: PUSH
17033: LD_INT 117
17035: PUSH
17036: LD_INT 118
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: ST_TO_ADDR
17056: GO 17687
17058: LD_INT 17
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17290
17066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17067: LD_ADDR_VAR 0 1
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: LD_INT 6
17089: PUSH
17090: LD_INT 7
17092: PUSH
17093: LD_INT 8
17095: PUSH
17096: LD_INT 9
17098: PUSH
17099: LD_INT 10
17101: PUSH
17102: LD_INT 11
17104: PUSH
17105: LD_INT 12
17107: PUSH
17108: LD_INT 13
17110: PUSH
17111: LD_INT 14
17113: PUSH
17114: LD_INT 15
17116: PUSH
17117: LD_INT 16
17119: PUSH
17120: LD_INT 17
17122: PUSH
17123: LD_INT 18
17125: PUSH
17126: LD_INT 19
17128: PUSH
17129: LD_INT 20
17131: PUSH
17132: LD_INT 21
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_INT 23
17140: PUSH
17141: LD_INT 24
17143: PUSH
17144: LD_INT 25
17146: PUSH
17147: LD_INT 26
17149: PUSH
17150: LD_INT 27
17152: PUSH
17153: LD_INT 28
17155: PUSH
17156: LD_INT 29
17158: PUSH
17159: LD_INT 30
17161: PUSH
17162: LD_INT 31
17164: PUSH
17165: LD_INT 32
17167: PUSH
17168: LD_INT 33
17170: PUSH
17171: LD_INT 34
17173: PUSH
17174: LD_INT 36
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 101
17216: PUSH
17217: LD_INT 102
17219: PUSH
17220: LD_INT 103
17222: PUSH
17223: LD_INT 104
17225: PUSH
17226: LD_INT 105
17228: PUSH
17229: LD_INT 106
17231: PUSH
17232: LD_INT 107
17234: PUSH
17235: LD_INT 108
17237: PUSH
17238: LD_INT 109
17240: PUSH
17241: LD_INT 110
17243: PUSH
17244: LD_INT 111
17246: PUSH
17247: LD_INT 112
17249: PUSH
17250: LD_INT 113
17252: PUSH
17253: LD_INT 114
17255: PUSH
17256: LD_INT 116
17258: PUSH
17259: LD_INT 117
17261: PUSH
17262: LD_INT 118
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: ST_TO_ADDR
17288: GO 17687
17290: LD_INT 18
17292: DOUBLE
17293: EQUAL
17294: IFTRUE 17298
17296: GO 17446
17298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: LD_INT 4
17309: PUSH
17310: LD_INT 5
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 15
17324: PUSH
17325: LD_INT 16
17327: PUSH
17328: LD_INT 20
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 22
17336: PUSH
17337: LD_INT 23
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 26
17345: PUSH
17346: LD_INT 30
17348: PUSH
17349: LD_INT 31
17351: PUSH
17352: LD_INT 32
17354: PUSH
17355: LD_INT 33
17357: PUSH
17358: LD_INT 34
17360: PUSH
17361: LD_INT 35
17363: PUSH
17364: LD_INT 36
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 101
17392: PUSH
17393: LD_INT 102
17395: PUSH
17396: LD_INT 103
17398: PUSH
17399: LD_INT 106
17401: PUSH
17402: LD_INT 108
17404: PUSH
17405: LD_INT 112
17407: PUSH
17408: LD_INT 113
17410: PUSH
17411: LD_INT 114
17413: PUSH
17414: LD_INT 115
17416: PUSH
17417: LD_INT 116
17419: PUSH
17420: LD_INT 117
17422: PUSH
17423: LD_INT 118
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: ST_TO_ADDR
17444: GO 17687
17446: LD_INT 19
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17686
17454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17455: LD_ADDR_VAR 0 1
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 3
17468: PUSH
17469: LD_INT 4
17471: PUSH
17472: LD_INT 5
17474: PUSH
17475: LD_INT 6
17477: PUSH
17478: LD_INT 7
17480: PUSH
17481: LD_INT 8
17483: PUSH
17484: LD_INT 9
17486: PUSH
17487: LD_INT 10
17489: PUSH
17490: LD_INT 11
17492: PUSH
17493: LD_INT 12
17495: PUSH
17496: LD_INT 13
17498: PUSH
17499: LD_INT 14
17501: PUSH
17502: LD_INT 15
17504: PUSH
17505: LD_INT 16
17507: PUSH
17508: LD_INT 17
17510: PUSH
17511: LD_INT 18
17513: PUSH
17514: LD_INT 19
17516: PUSH
17517: LD_INT 20
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 22
17525: PUSH
17526: LD_INT 23
17528: PUSH
17529: LD_INT 24
17531: PUSH
17532: LD_INT 25
17534: PUSH
17535: LD_INT 26
17537: PUSH
17538: LD_INT 27
17540: PUSH
17541: LD_INT 28
17543: PUSH
17544: LD_INT 29
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 31
17552: PUSH
17553: LD_INT 32
17555: PUSH
17556: LD_INT 33
17558: PUSH
17559: LD_INT 34
17561: PUSH
17562: LD_INT 35
17564: PUSH
17565: LD_INT 36
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 101
17608: PUSH
17609: LD_INT 102
17611: PUSH
17612: LD_INT 103
17614: PUSH
17615: LD_INT 104
17617: PUSH
17618: LD_INT 105
17620: PUSH
17621: LD_INT 106
17623: PUSH
17624: LD_INT 107
17626: PUSH
17627: LD_INT 108
17629: PUSH
17630: LD_INT 109
17632: PUSH
17633: LD_INT 110
17635: PUSH
17636: LD_INT 111
17638: PUSH
17639: LD_INT 112
17641: PUSH
17642: LD_INT 113
17644: PUSH
17645: LD_INT 114
17647: PUSH
17648: LD_INT 115
17650: PUSH
17651: LD_INT 116
17653: PUSH
17654: LD_INT 117
17656: PUSH
17657: LD_INT 118
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: ST_TO_ADDR
17684: GO 17687
17686: POP
// end else
17687: GO 17918
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: LD_INT 4
17705: PUSH
17706: LD_INT 5
17708: PUSH
17709: LD_INT 6
17711: PUSH
17712: LD_INT 7
17714: PUSH
17715: LD_INT 8
17717: PUSH
17718: LD_INT 9
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: LD_INT 11
17726: PUSH
17727: LD_INT 12
17729: PUSH
17730: LD_INT 13
17732: PUSH
17733: LD_INT 14
17735: PUSH
17736: LD_INT 15
17738: PUSH
17739: LD_INT 16
17741: PUSH
17742: LD_INT 17
17744: PUSH
17745: LD_INT 18
17747: PUSH
17748: LD_INT 19
17750: PUSH
17751: LD_INT 20
17753: PUSH
17754: LD_INT 21
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 23
17762: PUSH
17763: LD_INT 24
17765: PUSH
17766: LD_INT 25
17768: PUSH
17769: LD_INT 26
17771: PUSH
17772: LD_INT 27
17774: PUSH
17775: LD_INT 28
17777: PUSH
17778: LD_INT 29
17780: PUSH
17781: LD_INT 30
17783: PUSH
17784: LD_INT 31
17786: PUSH
17787: LD_INT 32
17789: PUSH
17790: LD_INT 33
17792: PUSH
17793: LD_INT 34
17795: PUSH
17796: LD_INT 35
17798: PUSH
17799: LD_INT 36
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 101
17842: PUSH
17843: LD_INT 102
17845: PUSH
17846: LD_INT 103
17848: PUSH
17849: LD_INT 104
17851: PUSH
17852: LD_INT 105
17854: PUSH
17855: LD_INT 106
17857: PUSH
17858: LD_INT 107
17860: PUSH
17861: LD_INT 108
17863: PUSH
17864: LD_INT 109
17866: PUSH
17867: LD_INT 110
17869: PUSH
17870: LD_INT 111
17872: PUSH
17873: LD_INT 112
17875: PUSH
17876: LD_INT 113
17878: PUSH
17879: LD_INT 114
17881: PUSH
17882: LD_INT 115
17884: PUSH
17885: LD_INT 116
17887: PUSH
17888: LD_INT 117
17890: PUSH
17891: LD_INT 118
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// if result then
17918: LD_VAR 0 1
17922: IFFALSE 18211
// begin normal :=  ;
17924: LD_ADDR_VAR 0 3
17928: PUSH
17929: LD_STRING 
17931: ST_TO_ADDR
// hardcore :=  ;
17932: LD_ADDR_VAR 0 4
17936: PUSH
17937: LD_STRING 
17939: ST_TO_ADDR
// for i = 1 to normalCounter do
17940: LD_ADDR_VAR 0 5
17944: PUSH
17945: DOUBLE
17946: LD_INT 1
17948: DEC
17949: ST_TO_ADDR
17950: LD_EXP 52
17954: PUSH
17955: FOR_TO
17956: IFFALSE 18057
// begin tmp := 0 ;
17958: LD_ADDR_VAR 0 2
17962: PUSH
17963: LD_STRING 0
17965: ST_TO_ADDR
// if result [ 1 ] then
17966: LD_VAR 0 1
17970: PUSH
17971: LD_INT 1
17973: ARRAY
17974: IFFALSE 18039
// if result [ 1 ] [ 1 ] = i then
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PUSH
17985: LD_INT 1
17987: ARRAY
17988: PUSH
17989: LD_VAR 0 5
17993: EQUAL
17994: IFFALSE 18039
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17996: LD_ADDR_VAR 0 1
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_VAR 0 1
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: LD_INT 1
18020: PPUSH
18021: CALL_OW 3
18025: PPUSH
18026: CALL_OW 1
18030: ST_TO_ADDR
// tmp := 1 ;
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_STRING 1
18038: ST_TO_ADDR
// end ; normal := normal & tmp ;
18039: LD_ADDR_VAR 0 3
18043: PUSH
18044: LD_VAR 0 3
18048: PUSH
18049: LD_VAR 0 2
18053: STR
18054: ST_TO_ADDR
// end ;
18055: GO 17955
18057: POP
18058: POP
// for i = 1 to hardcoreCounter do
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 53
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18180
// begin tmp := 0 ;
18077: LD_ADDR_VAR 0 2
18081: PUSH
18082: LD_STRING 0
18084: ST_TO_ADDR
// if result [ 2 ] then
18085: LD_VAR 0 1
18089: PUSH
18090: LD_INT 2
18092: ARRAY
18093: IFFALSE 18162
// if result [ 2 ] [ 1 ] = 100 + i then
18095: LD_VAR 0 1
18099: PUSH
18100: LD_INT 2
18102: ARRAY
18103: PUSH
18104: LD_INT 1
18106: ARRAY
18107: PUSH
18108: LD_INT 100
18110: PUSH
18111: LD_VAR 0 5
18115: PLUS
18116: EQUAL
18117: IFFALSE 18162
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: LD_INT 2
18131: PPUSH
18132: LD_VAR 0 1
18136: PUSH
18137: LD_INT 2
18139: ARRAY
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 3
18148: PPUSH
18149: CALL_OW 1
18153: ST_TO_ADDR
// tmp := 1 ;
18154: LD_ADDR_VAR 0 2
18158: PUSH
18159: LD_STRING 1
18161: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18162: LD_ADDR_VAR 0 4
18166: PUSH
18167: LD_VAR 0 4
18171: PUSH
18172: LD_VAR 0 2
18176: STR
18177: ST_TO_ADDR
// end ;
18178: GO 18074
18180: POP
18181: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
18182: LD_STRING getStreamItemsFromMission("
18184: PUSH
18185: LD_VAR 0 3
18189: STR
18190: PUSH
18191: LD_STRING ","
18193: STR
18194: PUSH
18195: LD_VAR 0 4
18199: STR
18200: PUSH
18201: LD_STRING ")
18203: STR
18204: PPUSH
18205: CALL_OW 559
// end else
18209: GO 18218
// ToLua ( getStreamItemsFromMission("","") ) ;
18211: LD_STRING getStreamItemsFromMission("","")
18213: PPUSH
18214: CALL_OW 559
// end ;
18218: LD_VAR 0 1
18222: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18223: LD_EXP 51
18227: PUSH
18228: LD_EXP 56
18232: AND
18233: IFFALSE 18357
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
18241: PPUSH
// begin enable ;
18242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18243: LD_ADDR_VAR 0 2
18247: PUSH
18248: LD_INT 22
18250: PUSH
18251: LD_OWVAR 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 34
18265: PUSH
18266: LD_INT 7
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 34
18275: PUSH
18276: LD_INT 45
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 34
18285: PUSH
18286: LD_INT 28
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 34
18295: PUSH
18296: LD_INT 47
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 69
18318: ST_TO_ADDR
// if not tmp then
18319: LD_VAR 0 2
18323: NOT
18324: IFFALSE 18328
// exit ;
18326: GO 18357
// for i in tmp do
18328: LD_ADDR_VAR 0 1
18332: PUSH
18333: LD_VAR 0 2
18337: PUSH
18338: FOR_IN
18339: IFFALSE 18355
// begin SetLives ( i , 0 ) ;
18341: LD_VAR 0 1
18345: PPUSH
18346: LD_INT 0
18348: PPUSH
18349: CALL_OW 234
// end ;
18353: GO 18338
18355: POP
18356: POP
// end ;
18357: PPOPN 2
18359: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18360: LD_EXP 51
18364: PUSH
18365: LD_EXP 57
18369: AND
18370: IFFALSE 18454
18372: GO 18374
18374: DISABLE
18375: LD_INT 0
18377: PPUSH
18378: PPUSH
// begin enable ;
18379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_INT 22
18387: PUSH
18388: LD_OWVAR 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 32
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: ST_TO_ADDR
// if not tmp then
18416: LD_VAR 0 2
18420: NOT
18421: IFFALSE 18425
// exit ;
18423: GO 18454
// for i in tmp do
18425: LD_ADDR_VAR 0 1
18429: PUSH
18430: LD_VAR 0 2
18434: PUSH
18435: FOR_IN
18436: IFFALSE 18452
// begin SetLives ( i , 0 ) ;
18438: LD_VAR 0 1
18442: PPUSH
18443: LD_INT 0
18445: PPUSH
18446: CALL_OW 234
// end ;
18450: GO 18435
18452: POP
18453: POP
// end ;
18454: PPOPN 2
18456: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18457: LD_EXP 51
18461: PUSH
18462: LD_EXP 54
18466: AND
18467: IFFALSE 18560
18469: GO 18471
18471: DISABLE
18472: LD_INT 0
18474: PPUSH
// begin enable ;
18475: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18476: LD_ADDR_VAR 0 1
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_OWVAR 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 25
18498: PUSH
18499: LD_INT 5
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 25
18508: PUSH
18509: LD_INT 9
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 25
18518: PUSH
18519: LD_INT 8
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18558
// begin SetClass ( i , 1 ) ;
18544: LD_VAR 0 1
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 336
// end ;
18556: GO 18541
18558: POP
18559: POP
// end ;
18560: PPOPN 1
18562: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18563: LD_EXP 51
18567: PUSH
18568: LD_EXP 55
18572: AND
18573: PUSH
18574: LD_OWVAR 65
18578: PUSH
18579: LD_INT 7
18581: LESS
18582: AND
18583: IFFALSE 18597
18585: GO 18587
18587: DISABLE
// begin enable ;
18588: ENABLE
// game_speed := 7 ;
18589: LD_ADDR_OWVAR 65
18593: PUSH
18594: LD_INT 7
18596: ST_TO_ADDR
// end ;
18597: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18598: LD_EXP 51
18602: PUSH
18603: LD_EXP 58
18607: AND
18608: IFFALSE 18810
18610: GO 18612
18612: DISABLE
18613: LD_INT 0
18615: PPUSH
18616: PPUSH
18617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18618: LD_ADDR_VAR 0 3
18622: PUSH
18623: LD_INT 81
18625: PUSH
18626: LD_OWVAR 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 21
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: ST_TO_ADDR
// if not tmp then
18654: LD_VAR 0 3
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18810
// if tmp > 5 then
18663: LD_VAR 0 3
18667: PUSH
18668: LD_INT 5
18670: GREATER
18671: IFFALSE 18683
// k := 5 else
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_INT 5
18680: ST_TO_ADDR
18681: GO 18693
// k := tmp ;
18683: LD_ADDR_VAR 0 2
18687: PUSH
18688: LD_VAR 0 3
18692: ST_TO_ADDR
// for i := 1 to k do
18693: LD_ADDR_VAR 0 1
18697: PUSH
18698: DOUBLE
18699: LD_INT 1
18701: DEC
18702: ST_TO_ADDR
18703: LD_VAR 0 2
18707: PUSH
18708: FOR_TO
18709: IFFALSE 18808
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_VAR 0 1
18720: ARRAY
18721: PPUSH
18722: LD_VAR 0 1
18726: PUSH
18727: LD_INT 4
18729: MOD
18730: PUSH
18731: LD_INT 1
18733: PLUS
18734: PPUSH
18735: CALL_OW 259
18739: PUSH
18740: LD_INT 10
18742: LESS
18743: IFFALSE 18806
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18745: LD_VAR 0 3
18749: PUSH
18750: LD_VAR 0 1
18754: ARRAY
18755: PPUSH
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 4
18763: MOD
18764: PUSH
18765: LD_INT 1
18767: PLUS
18768: PPUSH
18769: LD_VAR 0 3
18773: PUSH
18774: LD_VAR 0 1
18778: ARRAY
18779: PPUSH
18780: LD_VAR 0 1
18784: PUSH
18785: LD_INT 4
18787: MOD
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: PPUSH
18793: CALL_OW 259
18797: PUSH
18798: LD_INT 1
18800: PLUS
18801: PPUSH
18802: CALL_OW 237
18806: GO 18708
18808: POP
18809: POP
// end ;
18810: PPOPN 3
18812: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18813: LD_EXP 51
18817: PUSH
18818: LD_EXP 59
18822: AND
18823: IFFALSE 18843
18825: GO 18827
18827: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18828: LD_INT 4
18830: PPUSH
18831: LD_OWVAR 2
18835: PPUSH
18836: LD_INT 0
18838: PPUSH
18839: CALL_OW 324
18843: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18844: LD_EXP 51
18848: PUSH
18849: LD_EXP 88
18853: AND
18854: IFFALSE 18874
18856: GO 18858
18858: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18859: LD_INT 19
18861: PPUSH
18862: LD_OWVAR 2
18866: PPUSH
18867: LD_INT 0
18869: PPUSH
18870: CALL_OW 324
18874: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18875: LD_EXP 51
18879: PUSH
18880: LD_EXP 60
18884: AND
18885: IFFALSE 18987
18887: GO 18889
18889: DISABLE
18890: LD_INT 0
18892: PPUSH
18893: PPUSH
// begin enable ;
18894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18895: LD_ADDR_VAR 0 2
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 2
18914: PUSH
18915: LD_INT 34
18917: PUSH
18918: LD_INT 11
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 34
18927: PUSH
18928: LD_INT 30
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PPUSH
18944: CALL_OW 69
18948: ST_TO_ADDR
// if not tmp then
18949: LD_VAR 0 2
18953: NOT
18954: IFFALSE 18958
// exit ;
18956: GO 18987
// for i in tmp do
18958: LD_ADDR_VAR 0 1
18962: PUSH
18963: LD_VAR 0 2
18967: PUSH
18968: FOR_IN
18969: IFFALSE 18985
// begin SetLives ( i , 0 ) ;
18971: LD_VAR 0 1
18975: PPUSH
18976: LD_INT 0
18978: PPUSH
18979: CALL_OW 234
// end ;
18983: GO 18968
18985: POP
18986: POP
// end ;
18987: PPOPN 2
18989: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18990: LD_EXP 51
18994: PUSH
18995: LD_EXP 61
18999: AND
19000: IFFALSE 19020
19002: GO 19004
19004: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19005: LD_INT 32
19007: PPUSH
19008: LD_OWVAR 2
19012: PPUSH
19013: LD_INT 0
19015: PPUSH
19016: CALL_OW 324
19020: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19021: LD_EXP 51
19025: PUSH
19026: LD_EXP 62
19030: AND
19031: IFFALSE 19212
19033: GO 19035
19035: DISABLE
19036: LD_INT 0
19038: PPUSH
19039: PPUSH
19040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19041: LD_ADDR_VAR 0 2
19045: PUSH
19046: LD_INT 22
19048: PUSH
19049: LD_OWVAR 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 33
19060: PUSH
19061: LD_INT 3
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: ST_TO_ADDR
// if not tmp then
19077: LD_VAR 0 2
19081: NOT
19082: IFFALSE 19086
// exit ;
19084: GO 19212
// side := 0 ;
19086: LD_ADDR_VAR 0 3
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// for i := 1 to 8 do
19094: LD_ADDR_VAR 0 1
19098: PUSH
19099: DOUBLE
19100: LD_INT 1
19102: DEC
19103: ST_TO_ADDR
19104: LD_INT 8
19106: PUSH
19107: FOR_TO
19108: IFFALSE 19156
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19110: LD_OWVAR 2
19114: PUSH
19115: LD_VAR 0 1
19119: NONEQUAL
19120: PUSH
19121: LD_OWVAR 2
19125: PPUSH
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 81
19135: PUSH
19136: LD_INT 2
19138: EQUAL
19139: AND
19140: IFFALSE 19154
// begin side := i ;
19142: LD_ADDR_VAR 0 3
19146: PUSH
19147: LD_VAR 0 1
19151: ST_TO_ADDR
// break ;
19152: GO 19156
// end ;
19154: GO 19107
19156: POP
19157: POP
// if not side then
19158: LD_VAR 0 3
19162: NOT
19163: IFFALSE 19167
// exit ;
19165: GO 19212
// for i := 1 to tmp do
19167: LD_ADDR_VAR 0 1
19171: PUSH
19172: DOUBLE
19173: LD_INT 1
19175: DEC
19176: ST_TO_ADDR
19177: LD_VAR 0 2
19181: PUSH
19182: FOR_TO
19183: IFFALSE 19210
// if Prob ( 60 ) then
19185: LD_INT 60
19187: PPUSH
19188: CALL_OW 13
19192: IFFALSE 19208
// SetSide ( i , side ) ;
19194: LD_VAR 0 1
19198: PPUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: CALL_OW 235
19208: GO 19182
19210: POP
19211: POP
// end ;
19212: PPOPN 3
19214: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19215: LD_EXP 51
19219: PUSH
19220: LD_EXP 64
19224: AND
19225: IFFALSE 19344
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 21
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: LD_INT 23
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: PPUSH
19282: CALL_OW 69
19286: PUSH
19287: FOR_IN
19288: IFFALSE 19342
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19290: LD_VAR 0 1
19294: PPUSH
19295: CALL_OW 257
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 3
19308: PUSH
19309: LD_INT 4
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: IN
19318: IFFALSE 19340
// SetClass ( un , rand ( 1 , 4 ) ) ;
19320: LD_VAR 0 1
19324: PPUSH
19325: LD_INT 1
19327: PPUSH
19328: LD_INT 4
19330: PPUSH
19331: CALL_OW 12
19335: PPUSH
19336: CALL_OW 336
19340: GO 19287
19342: POP
19343: POP
// end ;
19344: PPOPN 1
19346: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19347: LD_EXP 51
19351: PUSH
19352: LD_EXP 63
19356: AND
19357: IFFALSE 19436
19359: GO 19361
19361: DISABLE
19362: LD_INT 0
19364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: LD_INT 22
19372: PUSH
19373: LD_OWVAR 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 21
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PPUSH
19396: CALL_OW 69
19400: ST_TO_ADDR
// if not tmp then
19401: LD_VAR 0 1
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 19436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19410: LD_VAR 0 1
19414: PUSH
19415: LD_INT 1
19417: PPUSH
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 12
19427: ARRAY
19428: PPUSH
19429: LD_INT 100
19431: PPUSH
19432: CALL_OW 234
// end ;
19436: PPOPN 1
19438: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19439: LD_EXP 51
19443: PUSH
19444: LD_EXP 65
19448: AND
19449: IFFALSE 19547
19451: GO 19453
19453: DISABLE
19454: LD_INT 0
19456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19457: LD_ADDR_VAR 0 1
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_OWVAR 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 21
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PPUSH
19488: CALL_OW 69
19492: ST_TO_ADDR
// if not tmp then
19493: LD_VAR 0 1
19497: NOT
19498: IFFALSE 19502
// exit ;
19500: GO 19547
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 1
19509: PPUSH
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 12
19519: ARRAY
19520: PPUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_INT 4
19526: PPUSH
19527: CALL_OW 12
19531: PPUSH
19532: LD_INT 3000
19534: PPUSH
19535: LD_INT 9000
19537: PPUSH
19538: CALL_OW 12
19542: PPUSH
19543: CALL_OW 492
// end ;
19547: PPOPN 1
19549: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19550: LD_EXP 51
19554: PUSH
19555: LD_EXP 66
19559: AND
19560: IFFALSE 19580
19562: GO 19564
19564: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19565: LD_INT 1
19567: PPUSH
19568: LD_OWVAR 2
19572: PPUSH
19573: LD_INT 0
19575: PPUSH
19576: CALL_OW 324
19580: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19581: LD_EXP 51
19585: PUSH
19586: LD_EXP 67
19590: AND
19591: IFFALSE 19674
19593: GO 19595
19595: DISABLE
19596: LD_INT 0
19598: PPUSH
19599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19600: LD_ADDR_VAR 0 2
19604: PUSH
19605: LD_INT 22
19607: PUSH
19608: LD_OWVAR 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 21
19619: PUSH
19620: LD_INT 3
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PPUSH
19631: CALL_OW 69
19635: ST_TO_ADDR
// if not tmp then
19636: LD_VAR 0 2
19640: NOT
19641: IFFALSE 19645
// exit ;
19643: GO 19674
// for i in tmp do
19645: LD_ADDR_VAR 0 1
19649: PUSH
19650: LD_VAR 0 2
19654: PUSH
19655: FOR_IN
19656: IFFALSE 19672
// SetBLevel ( i , 10 ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: LD_INT 10
19665: PPUSH
19666: CALL_OW 241
19670: GO 19655
19672: POP
19673: POP
// end ;
19674: PPOPN 2
19676: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19677: LD_EXP 51
19681: PUSH
19682: LD_EXP 68
19686: AND
19687: IFFALSE 19798
19689: GO 19691
19691: DISABLE
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
19696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19697: LD_ADDR_VAR 0 3
19701: PUSH
19702: LD_INT 22
19704: PUSH
19705: LD_OWVAR 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: ST_TO_ADDR
// if not tmp then
19733: LD_VAR 0 3
19737: NOT
19738: IFFALSE 19742
// exit ;
19740: GO 19798
// un := tmp [ rand ( 1 , tmp ) ] ;
19742: LD_ADDR_VAR 0 2
19746: PUSH
19747: LD_VAR 0 3
19751: PUSH
19752: LD_INT 1
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: CALL_OW 12
19764: ARRAY
19765: ST_TO_ADDR
// if Crawls ( un ) then
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 318
19775: IFFALSE 19786
// ComWalk ( un ) ;
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19786: LD_VAR 0 2
19790: PPUSH
19791: LD_INT 5
19793: PPUSH
19794: CALL_OW 336
// end ;
19798: PPOPN 3
19800: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19801: LD_EXP 51
19805: PUSH
19806: LD_EXP 69
19810: AND
19811: PUSH
19812: LD_OWVAR 67
19816: PUSH
19817: LD_INT 4
19819: LESS
19820: AND
19821: IFFALSE 19840
19823: GO 19825
19825: DISABLE
// begin Difficulty := Difficulty + 1 ;
19826: LD_ADDR_OWVAR 67
19830: PUSH
19831: LD_OWVAR 67
19835: PUSH
19836: LD_INT 1
19838: PLUS
19839: ST_TO_ADDR
// end ;
19840: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19841: LD_EXP 51
19845: PUSH
19846: LD_EXP 70
19850: AND
19851: IFFALSE 19954
19853: GO 19855
19855: DISABLE
19856: LD_INT 0
19858: PPUSH
// begin for i := 1 to 5 do
19859: LD_ADDR_VAR 0 1
19863: PUSH
19864: DOUBLE
19865: LD_INT 1
19867: DEC
19868: ST_TO_ADDR
19869: LD_INT 5
19871: PUSH
19872: FOR_TO
19873: IFFALSE 19952
// begin uc_nation := nation_nature ;
19875: LD_ADDR_OWVAR 21
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// uc_side := 0 ;
19883: LD_ADDR_OWVAR 20
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19891: LD_ADDR_OWVAR 29
19895: PUSH
19896: LD_INT 12
19898: PUSH
19899: LD_INT 12
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: ST_TO_ADDR
// hc_agressivity := 20 ;
19906: LD_ADDR_OWVAR 35
19910: PUSH
19911: LD_INT 20
19913: ST_TO_ADDR
// hc_class := class_tiger ;
19914: LD_ADDR_OWVAR 28
19918: PUSH
19919: LD_INT 14
19921: ST_TO_ADDR
// hc_gallery :=  ;
19922: LD_ADDR_OWVAR 33
19926: PUSH
19927: LD_STRING 
19929: ST_TO_ADDR
// hc_name :=  ;
19930: LD_ADDR_OWVAR 26
19934: PUSH
19935: LD_STRING 
19937: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19938: CALL_OW 44
19942: PPUSH
19943: LD_INT 0
19945: PPUSH
19946: CALL_OW 51
// end ;
19950: GO 19872
19952: POP
19953: POP
// end ;
19954: PPOPN 1
19956: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19957: LD_EXP 51
19961: PUSH
19962: LD_EXP 71
19966: AND
19967: IFFALSE 19976
19969: GO 19971
19971: DISABLE
// StreamSibBomb ;
19972: CALL 19977 0 0
19976: END
// export function StreamSibBomb ; var i , x , y ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
19981: PPUSH
19982: PPUSH
// result := false ;
19983: LD_ADDR_VAR 0 1
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// for i := 1 to 16 do
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_INT 16
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20204
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20007: LD_ADDR_VAR 0 3
20011: PUSH
20012: LD_INT 10
20014: PUSH
20015: LD_INT 20
20017: PUSH
20018: LD_INT 30
20020: PUSH
20021: LD_INT 40
20023: PUSH
20024: LD_INT 50
20026: PUSH
20027: LD_INT 60
20029: PUSH
20030: LD_INT 70
20032: PUSH
20033: LD_INT 80
20035: PUSH
20036: LD_INT 90
20038: PUSH
20039: LD_INT 100
20041: PUSH
20042: LD_INT 110
20044: PUSH
20045: LD_INT 120
20047: PUSH
20048: LD_INT 130
20050: PUSH
20051: LD_INT 140
20053: PUSH
20054: LD_INT 150
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: PPUSH
20077: LD_INT 15
20079: PPUSH
20080: CALL_OW 12
20084: ARRAY
20085: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20086: LD_ADDR_VAR 0 4
20090: PUSH
20091: LD_INT 10
20093: PUSH
20094: LD_INT 20
20096: PUSH
20097: LD_INT 30
20099: PUSH
20100: LD_INT 40
20102: PUSH
20103: LD_INT 50
20105: PUSH
20106: LD_INT 60
20108: PUSH
20109: LD_INT 70
20111: PUSH
20112: LD_INT 80
20114: PUSH
20115: LD_INT 90
20117: PUSH
20118: LD_INT 100
20120: PUSH
20121: LD_INT 110
20123: PUSH
20124: LD_INT 120
20126: PUSH
20127: LD_INT 130
20129: PUSH
20130: LD_INT 140
20132: PUSH
20133: LD_INT 150
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PPUSH
20156: LD_INT 15
20158: PPUSH
20159: CALL_OW 12
20163: ARRAY
20164: ST_TO_ADDR
// if ValidHex ( x , y ) then
20165: LD_VAR 0 3
20169: PPUSH
20170: LD_VAR 0 4
20174: PPUSH
20175: CALL_OW 488
20179: IFFALSE 20202
// begin result := [ x , y ] ;
20181: LD_ADDR_VAR 0 1
20185: PUSH
20186: LD_VAR 0 3
20190: PUSH
20191: LD_VAR 0 4
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: ST_TO_ADDR
// break ;
20200: GO 20204
// end ; end ;
20202: GO 20004
20204: POP
20205: POP
// if result then
20206: LD_VAR 0 1
20210: IFFALSE 20270
// begin ToLua ( playSibBomb() ) ;
20212: LD_STRING playSibBomb()
20214: PPUSH
20215: CALL_OW 559
// wait ( 0 0$14 ) ;
20219: LD_INT 490
20221: PPUSH
20222: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20226: LD_VAR 0 1
20230: PUSH
20231: LD_INT 1
20233: ARRAY
20234: PPUSH
20235: LD_VAR 0 1
20239: PUSH
20240: LD_INT 2
20242: ARRAY
20243: PPUSH
20244: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20248: LD_VAR 0 1
20252: PUSH
20253: LD_INT 1
20255: ARRAY
20256: PPUSH
20257: LD_VAR 0 1
20261: PUSH
20262: LD_INT 2
20264: ARRAY
20265: PPUSH
20266: CALL_OW 429
// end ; end ;
20270: LD_VAR 0 1
20274: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20275: LD_EXP 51
20279: PUSH
20280: LD_EXP 73
20284: AND
20285: IFFALSE 20297
20287: GO 20289
20289: DISABLE
// YouLost (  ) ;
20290: LD_STRING 
20292: PPUSH
20293: CALL_OW 104
20297: END
// every 0 0$1 trigger StreamModeActive and sFog do
20298: LD_EXP 51
20302: PUSH
20303: LD_EXP 72
20307: AND
20308: IFFALSE 20322
20310: GO 20312
20312: DISABLE
// FogOff ( your_side ) ;
20313: LD_OWVAR 2
20317: PPUSH
20318: CALL_OW 344
20322: END
// every 0 0$1 trigger StreamModeActive and sSun do
20323: LD_EXP 51
20327: PUSH
20328: LD_EXP 74
20332: AND
20333: IFFALSE 20361
20335: GO 20337
20337: DISABLE
// begin solar_recharge_percent := 0 ;
20338: LD_ADDR_OWVAR 79
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20346: LD_INT 10500
20348: PPUSH
20349: CALL_OW 67
// solar_recharge_percent := 100 ;
20353: LD_ADDR_OWVAR 79
20357: PUSH
20358: LD_INT 100
20360: ST_TO_ADDR
// end ;
20361: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20362: LD_EXP 51
20366: PUSH
20367: LD_EXP 75
20371: AND
20372: IFFALSE 20611
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
20380: PPUSH
20381: PPUSH
// begin tmp := [ ] ;
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: EMPTY
20388: ST_TO_ADDR
// for i := 1 to 6 do
20389: LD_ADDR_VAR 0 1
20393: PUSH
20394: DOUBLE
20395: LD_INT 1
20397: DEC
20398: ST_TO_ADDR
20399: LD_INT 6
20401: PUSH
20402: FOR_TO
20403: IFFALSE 20508
// begin uc_nation := nation_nature ;
20405: LD_ADDR_OWVAR 21
20409: PUSH
20410: LD_INT 0
20412: ST_TO_ADDR
// uc_side := 0 ;
20413: LD_ADDR_OWVAR 20
20417: PUSH
20418: LD_INT 0
20420: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20421: LD_ADDR_OWVAR 29
20425: PUSH
20426: LD_INT 12
20428: PUSH
20429: LD_INT 12
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: ST_TO_ADDR
// hc_agressivity := 20 ;
20436: LD_ADDR_OWVAR 35
20440: PUSH
20441: LD_INT 20
20443: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20444: LD_ADDR_OWVAR 28
20448: PUSH
20449: LD_INT 17
20451: ST_TO_ADDR
// hc_gallery :=  ;
20452: LD_ADDR_OWVAR 33
20456: PUSH
20457: LD_STRING 
20459: ST_TO_ADDR
// hc_name :=  ;
20460: LD_ADDR_OWVAR 26
20464: PUSH
20465: LD_STRING 
20467: ST_TO_ADDR
// un := CreateHuman ;
20468: LD_ADDR_VAR 0 2
20472: PUSH
20473: CALL_OW 44
20477: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20478: LD_VAR 0 2
20482: PPUSH
20483: LD_INT 1
20485: PPUSH
20486: CALL_OW 51
// tmp := tmp ^ un ;
20490: LD_ADDR_VAR 0 3
20494: PUSH
20495: LD_VAR 0 3
20499: PUSH
20500: LD_VAR 0 2
20504: ADD
20505: ST_TO_ADDR
// end ;
20506: GO 20402
20508: POP
20509: POP
// repeat wait ( 0 0$1 ) ;
20510: LD_INT 35
20512: PPUSH
20513: CALL_OW 67
// for un in tmp do
20517: LD_ADDR_VAR 0 2
20521: PUSH
20522: LD_VAR 0 3
20526: PUSH
20527: FOR_IN
20528: IFFALSE 20602
// begin if IsDead ( un ) then
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 301
20539: IFFALSE 20559
// begin tmp := tmp diff un ;
20541: LD_ADDR_VAR 0 3
20545: PUSH
20546: LD_VAR 0 3
20550: PUSH
20551: LD_VAR 0 2
20555: DIFF
20556: ST_TO_ADDR
// continue ;
20557: GO 20527
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20559: LD_VAR 0 2
20563: PPUSH
20564: LD_INT 3
20566: PUSH
20567: LD_INT 22
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PPUSH
20581: CALL_OW 69
20585: PPUSH
20586: LD_VAR 0 2
20590: PPUSH
20591: CALL_OW 74
20595: PPUSH
20596: CALL_OW 115
// end ;
20600: GO 20527
20602: POP
20603: POP
// until not tmp ;
20604: LD_VAR 0 3
20608: NOT
20609: IFFALSE 20510
// end ;
20611: PPOPN 3
20613: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20614: LD_EXP 51
20618: PUSH
20619: LD_EXP 76
20623: AND
20624: IFFALSE 20678
20626: GO 20628
20628: DISABLE
// begin ToLua ( displayTroll(); ) ;
20629: LD_STRING displayTroll();
20631: PPUSH
20632: CALL_OW 559
// wait ( 3 3$00 ) ;
20636: LD_INT 6300
20638: PPUSH
20639: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20643: LD_STRING hideTroll();
20645: PPUSH
20646: CALL_OW 559
// wait ( 1 1$00 ) ;
20650: LD_INT 2100
20652: PPUSH
20653: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20657: LD_STRING displayTroll();
20659: PPUSH
20660: CALL_OW 559
// wait ( 1 1$00 ) ;
20664: LD_INT 2100
20666: PPUSH
20667: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20671: LD_STRING hideTroll();
20673: PPUSH
20674: CALL_OW 559
// end ;
20678: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20679: LD_EXP 51
20683: PUSH
20684: LD_EXP 77
20688: AND
20689: IFFALSE 20752
20691: GO 20693
20693: DISABLE
20694: LD_INT 0
20696: PPUSH
// begin p := 0 ;
20697: LD_ADDR_VAR 0 1
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// repeat game_speed := 1 ;
20705: LD_ADDR_OWVAR 65
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20713: LD_INT 35
20715: PPUSH
20716: CALL_OW 67
// p := p + 1 ;
20720: LD_ADDR_VAR 0 1
20724: PUSH
20725: LD_VAR 0 1
20729: PUSH
20730: LD_INT 1
20732: PLUS
20733: ST_TO_ADDR
// until p >= 60 ;
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 60
20741: GREATEREQUAL
20742: IFFALSE 20705
// game_speed := 4 ;
20744: LD_ADDR_OWVAR 65
20748: PUSH
20749: LD_INT 4
20751: ST_TO_ADDR
// end ;
20752: PPOPN 1
20754: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20755: LD_EXP 51
20759: PUSH
20760: LD_EXP 78
20764: AND
20765: IFFALSE 20911
20767: GO 20769
20769: DISABLE
20770: LD_INT 0
20772: PPUSH
20773: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20774: LD_ADDR_VAR 0 1
20778: PUSH
20779: LD_INT 22
20781: PUSH
20782: LD_OWVAR 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 30
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 30
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PPUSH
20823: CALL_OW 69
20827: ST_TO_ADDR
// if not depot then
20828: LD_VAR 0 1
20832: NOT
20833: IFFALSE 20837
// exit ;
20835: GO 20911
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: LD_VAR 0 1
20846: PUSH
20847: LD_INT 1
20849: PPUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 12
20859: ARRAY
20860: PPUSH
20861: CALL_OW 274
20865: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20866: LD_VAR 0 2
20870: PPUSH
20871: LD_INT 1
20873: PPUSH
20874: LD_INT 0
20876: PPUSH
20877: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20881: LD_VAR 0 2
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20896: LD_VAR 0 2
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: LD_INT 0
20906: PPUSH
20907: CALL_OW 277
// end ;
20911: PPOPN 2
20913: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20914: LD_EXP 51
20918: PUSH
20919: LD_EXP 79
20923: AND
20924: IFFALSE 21021
20926: GO 20928
20928: DISABLE
20929: LD_INT 0
20931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20932: LD_ADDR_VAR 0 1
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_OWVAR 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 21
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 3
20961: PUSH
20962: LD_INT 23
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: ST_TO_ADDR
// if not tmp then
20986: LD_VAR 0 1
20990: NOT
20991: IFFALSE 20995
// exit ;
20993: GO 21021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20995: LD_VAR 0 1
20999: PUSH
21000: LD_INT 1
21002: PPUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 12
21012: ARRAY
21013: PPUSH
21014: LD_INT 200
21016: PPUSH
21017: CALL_OW 234
// end ;
21021: PPOPN 1
21023: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21024: LD_EXP 51
21028: PUSH
21029: LD_EXP 80
21033: AND
21034: IFFALSE 21113
21036: GO 21038
21038: DISABLE
21039: LD_INT 0
21041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_OWVAR 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 21
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PPUSH
21073: CALL_OW 69
21077: ST_TO_ADDR
// if not tmp then
21078: LD_VAR 0 1
21082: NOT
21083: IFFALSE 21087
// exit ;
21085: GO 21113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21087: LD_VAR 0 1
21091: PUSH
21092: LD_INT 1
21094: PPUSH
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 12
21104: ARRAY
21105: PPUSH
21106: LD_INT 60
21108: PPUSH
21109: CALL_OW 234
// end ;
21113: PPOPN 1
21115: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21116: LD_EXP 51
21120: PUSH
21121: LD_EXP 81
21125: AND
21126: IFFALSE 21225
21128: GO 21130
21130: DISABLE
21131: LD_INT 0
21133: PPUSH
21134: PPUSH
// begin enable ;
21135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_INT 22
21143: PUSH
21144: LD_OWVAR 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 61
21155: PUSH
21156: EMPTY
21157: LIST
21158: PUSH
21159: LD_INT 33
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 69
21178: ST_TO_ADDR
// if not tmp then
21179: LD_VAR 0 1
21183: NOT
21184: IFFALSE 21188
// exit ;
21186: GO 21225
// for i in tmp do
21188: LD_ADDR_VAR 0 2
21192: PUSH
21193: LD_VAR 0 1
21197: PUSH
21198: FOR_IN
21199: IFFALSE 21223
// if IsControledBy ( i ) then
21201: LD_VAR 0 2
21205: PPUSH
21206: CALL_OW 312
21210: IFFALSE 21221
// ComUnlink ( i ) ;
21212: LD_VAR 0 2
21216: PPUSH
21217: CALL_OW 136
21221: GO 21198
21223: POP
21224: POP
// end ;
21225: PPOPN 2
21227: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21228: LD_EXP 51
21232: PUSH
21233: LD_EXP 82
21237: AND
21238: IFFALSE 21378
21240: GO 21242
21242: DISABLE
21243: LD_INT 0
21245: PPUSH
21246: PPUSH
// begin ToLua ( displayPowell(); ) ;
21247: LD_STRING displayPowell();
21249: PPUSH
21250: CALL_OW 559
// uc_side := 0 ;
21254: LD_ADDR_OWVAR 20
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// uc_nation := 2 ;
21262: LD_ADDR_OWVAR 21
21266: PUSH
21267: LD_INT 2
21269: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21270: LD_ADDR_OWVAR 37
21274: PUSH
21275: LD_INT 14
21277: ST_TO_ADDR
// vc_engine := engine_siberite ;
21278: LD_ADDR_OWVAR 39
21282: PUSH
21283: LD_INT 3
21285: ST_TO_ADDR
// vc_control := control_apeman ;
21286: LD_ADDR_OWVAR 38
21290: PUSH
21291: LD_INT 5
21293: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21294: LD_ADDR_OWVAR 40
21298: PUSH
21299: LD_INT 29
21301: ST_TO_ADDR
// un := CreateVehicle ;
21302: LD_ADDR_VAR 0 2
21306: PUSH
21307: CALL_OW 45
21311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21312: LD_VAR 0 2
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21324: LD_INT 35
21326: PPUSH
21327: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_INT 22
21338: PUSH
21339: LD_OWVAR 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PPUSH
21353: LD_VAR 0 2
21357: PPUSH
21358: CALL_OW 74
21362: PPUSH
21363: CALL_OW 115
// until IsDead ( un ) ;
21367: LD_VAR 0 2
21371: PPUSH
21372: CALL_OW 301
21376: IFFALSE 21324
// end ;
21378: PPOPN 2
21380: END
// every 0 0$1 trigger StreamModeActive and sStu do
21381: LD_EXP 51
21385: PUSH
21386: LD_EXP 90
21390: AND
21391: IFFALSE 21407
21393: GO 21395
21395: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21396: LD_STRING displayStucuk();
21398: PPUSH
21399: CALL_OW 559
// ResetFog ;
21403: CALL_OW 335
// end ;
21407: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21408: LD_EXP 51
21412: PUSH
21413: LD_EXP 83
21417: AND
21418: IFFALSE 21559
21420: GO 21422
21422: DISABLE
21423: LD_INT 0
21425: PPUSH
21426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21427: LD_ADDR_VAR 0 2
21431: PUSH
21432: LD_INT 22
21434: PUSH
21435: LD_OWVAR 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: ST_TO_ADDR
// if not tmp then
21463: LD_VAR 0 2
21467: NOT
21468: IFFALSE 21472
// exit ;
21470: GO 21559
// un := tmp [ rand ( 1 , tmp ) ] ;
21472: LD_ADDR_VAR 0 1
21476: PUSH
21477: LD_VAR 0 2
21481: PUSH
21482: LD_INT 1
21484: PPUSH
21485: LD_VAR 0 2
21489: PPUSH
21490: CALL_OW 12
21494: ARRAY
21495: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21496: LD_VAR 0 1
21500: PPUSH
21501: LD_INT 0
21503: PPUSH
21504: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21508: LD_VAR 0 1
21512: PPUSH
21513: LD_OWVAR 3
21517: PUSH
21518: LD_VAR 0 1
21522: DIFF
21523: PPUSH
21524: LD_VAR 0 1
21528: PPUSH
21529: CALL_OW 74
21533: PPUSH
21534: CALL_OW 115
// wait ( 0 0$20 ) ;
21538: LD_INT 700
21540: PPUSH
21541: CALL_OW 67
// SetSide ( un , your_side ) ;
21545: LD_VAR 0 1
21549: PPUSH
21550: LD_OWVAR 2
21554: PPUSH
21555: CALL_OW 235
// end ;
21559: PPOPN 2
21561: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21562: LD_EXP 51
21566: PUSH
21567: LD_EXP 84
21571: AND
21572: IFFALSE 21678
21574: GO 21576
21576: DISABLE
21577: LD_INT 0
21579: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21580: LD_ADDR_VAR 0 1
21584: PUSH
21585: LD_INT 22
21587: PUSH
21588: LD_OWVAR 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 30
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 30
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PPUSH
21629: CALL_OW 69
21633: ST_TO_ADDR
// if not depot then
21634: LD_VAR 0 1
21638: NOT
21639: IFFALSE 21643
// exit ;
21641: GO 21678
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21643: LD_VAR 0 1
21647: PUSH
21648: LD_INT 1
21650: ARRAY
21651: PPUSH
21652: CALL_OW 250
21656: PPUSH
21657: LD_VAR 0 1
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PPUSH
21666: CALL_OW 251
21670: PPUSH
21671: LD_INT 70
21673: PPUSH
21674: CALL_OW 495
// end ;
21678: PPOPN 1
21680: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21681: LD_EXP 51
21685: PUSH
21686: LD_EXP 85
21690: AND
21691: IFFALSE 21902
21693: GO 21695
21695: DISABLE
21696: LD_INT 0
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21703: LD_ADDR_VAR 0 5
21707: PUSH
21708: LD_INT 22
21710: PUSH
21711: LD_OWVAR 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 21
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 69
21738: ST_TO_ADDR
// if not tmp then
21739: LD_VAR 0 5
21743: NOT
21744: IFFALSE 21748
// exit ;
21746: GO 21902
// for i in tmp do
21748: LD_ADDR_VAR 0 1
21752: PUSH
21753: LD_VAR 0 5
21757: PUSH
21758: FOR_IN
21759: IFFALSE 21900
// begin d := rand ( 0 , 5 ) ;
21761: LD_ADDR_VAR 0 4
21765: PUSH
21766: LD_INT 0
21768: PPUSH
21769: LD_INT 5
21771: PPUSH
21772: CALL_OW 12
21776: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21777: LD_ADDR_VAR 0 2
21781: PUSH
21782: LD_VAR 0 1
21786: PPUSH
21787: CALL_OW 250
21791: PPUSH
21792: LD_VAR 0 4
21796: PPUSH
21797: LD_INT 3
21799: PPUSH
21800: LD_INT 12
21802: PPUSH
21803: CALL_OW 12
21807: PPUSH
21808: CALL_OW 272
21812: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21813: LD_ADDR_VAR 0 3
21817: PUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 251
21827: PPUSH
21828: LD_VAR 0 4
21832: PPUSH
21833: LD_INT 3
21835: PPUSH
21836: LD_INT 12
21838: PPUSH
21839: CALL_OW 12
21843: PPUSH
21844: CALL_OW 273
21848: ST_TO_ADDR
// if ValidHex ( x , y ) then
21849: LD_VAR 0 2
21853: PPUSH
21854: LD_VAR 0 3
21858: PPUSH
21859: CALL_OW 488
21863: IFFALSE 21898
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21865: LD_VAR 0 1
21869: PPUSH
21870: LD_VAR 0 2
21874: PPUSH
21875: LD_VAR 0 3
21879: PPUSH
21880: LD_INT 3
21882: PPUSH
21883: LD_INT 6
21885: PPUSH
21886: CALL_OW 12
21890: PPUSH
21891: LD_INT 1
21893: PPUSH
21894: CALL_OW 483
// end ;
21898: GO 21758
21900: POP
21901: POP
// end ;
21902: PPOPN 5
21904: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21905: LD_EXP 51
21909: PUSH
21910: LD_EXP 86
21914: AND
21915: IFFALSE 22009
21917: GO 21919
21919: DISABLE
21920: LD_INT 0
21922: PPUSH
21923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21924: LD_ADDR_VAR 0 2
21928: PUSH
21929: LD_INT 22
21931: PUSH
21932: LD_OWVAR 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 32
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 21
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: PPUSH
21966: CALL_OW 69
21970: ST_TO_ADDR
// if not tmp then
21971: LD_VAR 0 2
21975: NOT
21976: IFFALSE 21980
// exit ;
21978: GO 22009
// for i in tmp do
21980: LD_ADDR_VAR 0 1
21984: PUSH
21985: LD_VAR 0 2
21989: PUSH
21990: FOR_IN
21991: IFFALSE 22007
// SetFuel ( i , 0 ) ;
21993: LD_VAR 0 1
21997: PPUSH
21998: LD_INT 0
22000: PPUSH
22001: CALL_OW 240
22005: GO 21990
22007: POP
22008: POP
// end ;
22009: PPOPN 2
22011: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22012: LD_EXP 51
22016: PUSH
22017: LD_EXP 87
22021: AND
22022: IFFALSE 22088
22024: GO 22026
22026: DISABLE
22027: LD_INT 0
22029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22030: LD_ADDR_VAR 0 1
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_OWVAR 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 30
22049: PUSH
22050: LD_INT 29
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: CALL_OW 69
22065: ST_TO_ADDR
// if not tmp then
22066: LD_VAR 0 1
22070: NOT
22071: IFFALSE 22075
// exit ;
22073: GO 22088
// DestroyUnit ( tmp [ 1 ] ) ;
22075: LD_VAR 0 1
22079: PUSH
22080: LD_INT 1
22082: ARRAY
22083: PPUSH
22084: CALL_OW 65
// end ;
22088: PPOPN 1
22090: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22091: LD_EXP 51
22095: PUSH
22096: LD_EXP 89
22100: AND
22101: IFFALSE 22230
22103: GO 22105
22105: DISABLE
22106: LD_INT 0
22108: PPUSH
// begin uc_side := 0 ;
22109: LD_ADDR_OWVAR 20
22113: PUSH
22114: LD_INT 0
22116: ST_TO_ADDR
// uc_nation := nation_arabian ;
22117: LD_ADDR_OWVAR 21
22121: PUSH
22122: LD_INT 2
22124: ST_TO_ADDR
// hc_gallery :=  ;
22125: LD_ADDR_OWVAR 33
22129: PUSH
22130: LD_STRING 
22132: ST_TO_ADDR
// hc_name :=  ;
22133: LD_ADDR_OWVAR 26
22137: PUSH
22138: LD_STRING 
22140: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22141: LD_INT 1
22143: PPUSH
22144: LD_INT 11
22146: PPUSH
22147: LD_INT 10
22149: PPUSH
22150: CALL_OW 380
// un := CreateHuman ;
22154: LD_ADDR_VAR 0 1
22158: PUSH
22159: CALL_OW 44
22163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22164: LD_VAR 0 1
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22176: LD_INT 35
22178: PPUSH
22179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22183: LD_VAR 0 1
22187: PPUSH
22188: LD_INT 22
22190: PUSH
22191: LD_OWVAR 2
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 69
22204: PPUSH
22205: LD_VAR 0 1
22209: PPUSH
22210: CALL_OW 74
22214: PPUSH
22215: CALL_OW 115
// until IsDead ( un ) ;
22219: LD_VAR 0 1
22223: PPUSH
22224: CALL_OW 301
22228: IFFALSE 22176
// end ;
22230: PPOPN 1
22232: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22233: LD_EXP 51
22237: PUSH
22238: LD_EXP 91
22242: AND
22243: IFFALSE 22255
22245: GO 22247
22247: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22248: LD_STRING earthquake(getX(game), 0, 32)
22250: PPUSH
22251: CALL_OW 559
22255: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22256: LD_EXP 51
22260: PUSH
22261: LD_EXP 92
22265: AND
22266: IFFALSE 22357
22268: GO 22270
22270: DISABLE
22271: LD_INT 0
22273: PPUSH
// begin enable ;
22274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22275: LD_ADDR_VAR 0 1
22279: PUSH
22280: LD_INT 22
22282: PUSH
22283: LD_OWVAR 2
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 21
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 33
22304: PUSH
22305: LD_INT 3
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 1
22326: NOT
22327: IFFALSE 22331
// exit ;
22329: GO 22357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22331: LD_VAR 0 1
22335: PUSH
22336: LD_INT 1
22338: PPUSH
22339: LD_VAR 0 1
22343: PPUSH
22344: CALL_OW 12
22348: ARRAY
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL_OW 234
// end ;
22357: PPOPN 1
22359: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22360: LD_EXP 51
22364: PUSH
22365: LD_EXP 93
22369: AND
22370: IFFALSE 22511
22372: GO 22374
22374: DISABLE
22375: LD_INT 0
22377: PPUSH
22378: PPUSH
22379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22380: LD_ADDR_VAR 0 3
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_OWVAR 2
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 25
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PPUSH
22411: CALL_OW 69
22415: ST_TO_ADDR
// if not tmp then
22416: LD_VAR 0 3
22420: NOT
22421: IFFALSE 22425
// exit ;
22423: GO 22511
// un := tmp [ rand ( 1 , tmp ) ] ;
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: LD_VAR 0 3
22434: PUSH
22435: LD_INT 1
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: CALL_OW 12
22447: ARRAY
22448: ST_TO_ADDR
// if Crawls ( un ) then
22449: LD_VAR 0 2
22453: PPUSH
22454: CALL_OW 318
22458: IFFALSE 22469
// ComWalk ( un ) ;
22460: LD_VAR 0 2
22464: PPUSH
22465: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22469: LD_VAR 0 2
22473: PPUSH
22474: LD_INT 9
22476: PPUSH
22477: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22481: LD_INT 28
22483: PPUSH
22484: LD_OWVAR 2
22488: PPUSH
22489: LD_INT 2
22491: PPUSH
22492: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22496: LD_INT 29
22498: PPUSH
22499: LD_OWVAR 2
22503: PPUSH
22504: LD_INT 2
22506: PPUSH
22507: CALL_OW 322
// end ;
22511: PPOPN 3
22513: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22514: LD_EXP 51
22518: PUSH
22519: LD_EXP 94
22523: AND
22524: IFFALSE 22635
22526: GO 22528
22528: DISABLE
22529: LD_INT 0
22531: PPUSH
22532: PPUSH
22533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22534: LD_ADDR_VAR 0 3
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_OWVAR 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PPUSH
22565: CALL_OW 69
22569: ST_TO_ADDR
// if not tmp then
22570: LD_VAR 0 3
22574: NOT
22575: IFFALSE 22579
// exit ;
22577: GO 22635
// un := tmp [ rand ( 1 , tmp ) ] ;
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_VAR 0 3
22588: PUSH
22589: LD_INT 1
22591: PPUSH
22592: LD_VAR 0 3
22596: PPUSH
22597: CALL_OW 12
22601: ARRAY
22602: ST_TO_ADDR
// if Crawls ( un ) then
22603: LD_VAR 0 2
22607: PPUSH
22608: CALL_OW 318
22612: IFFALSE 22623
// ComWalk ( un ) ;
22614: LD_VAR 0 2
22618: PPUSH
22619: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22623: LD_VAR 0 2
22627: PPUSH
22628: LD_INT 8
22630: PPUSH
22631: CALL_OW 336
// end ;
22635: PPOPN 3
22637: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22638: LD_EXP 51
22642: PUSH
22643: LD_EXP 95
22647: AND
22648: IFFALSE 22792
22650: GO 22652
22652: DISABLE
22653: LD_INT 0
22655: PPUSH
22656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22657: LD_ADDR_VAR 0 2
22661: PUSH
22662: LD_INT 22
22664: PUSH
22665: LD_OWVAR 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 21
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 34
22689: PUSH
22690: LD_INT 12
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 34
22699: PUSH
22700: LD_INT 51
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 34
22709: PUSH
22710: LD_INT 32
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 69
22732: ST_TO_ADDR
// if not tmp then
22733: LD_VAR 0 2
22737: NOT
22738: IFFALSE 22742
// exit ;
22740: GO 22792
// for i in tmp do
22742: LD_ADDR_VAR 0 1
22746: PUSH
22747: LD_VAR 0 2
22751: PUSH
22752: FOR_IN
22753: IFFALSE 22790
// if GetCargo ( i , mat_artifact ) = 0 then
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_INT 4
22762: PPUSH
22763: CALL_OW 289
22767: PUSH
22768: LD_INT 0
22770: EQUAL
22771: IFFALSE 22788
// SetCargo ( i , mat_siberit , 100 ) ;
22773: LD_VAR 0 1
22777: PPUSH
22778: LD_INT 3
22780: PPUSH
22781: LD_INT 100
22783: PPUSH
22784: CALL_OW 290
22788: GO 22752
22790: POP
22791: POP
// end ;
22792: PPOPN 2
22794: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22795: LD_EXP 51
22799: PUSH
22800: LD_EXP 96
22804: AND
22805: IFFALSE 22988
22807: GO 22809
22809: DISABLE
22810: LD_INT 0
22812: PPUSH
22813: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: LD_OWVAR 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PPUSH
22831: CALL_OW 69
22835: ST_TO_ADDR
// if not tmp then
22836: LD_VAR 0 2
22840: NOT
22841: IFFALSE 22845
// exit ;
22843: GO 22988
// for i := 1 to 2 do
22845: LD_ADDR_VAR 0 1
22849: PUSH
22850: DOUBLE
22851: LD_INT 1
22853: DEC
22854: ST_TO_ADDR
22855: LD_INT 2
22857: PUSH
22858: FOR_TO
22859: IFFALSE 22986
// begin uc_side := your_side ;
22861: LD_ADDR_OWVAR 20
22865: PUSH
22866: LD_OWVAR 2
22870: ST_TO_ADDR
// uc_nation := nation_american ;
22871: LD_ADDR_OWVAR 21
22875: PUSH
22876: LD_INT 1
22878: ST_TO_ADDR
// vc_chassis := us_morphling ;
22879: LD_ADDR_OWVAR 37
22883: PUSH
22884: LD_INT 5
22886: ST_TO_ADDR
// vc_engine := engine_siberite ;
22887: LD_ADDR_OWVAR 39
22891: PUSH
22892: LD_INT 3
22894: ST_TO_ADDR
// vc_control := control_computer ;
22895: LD_ADDR_OWVAR 38
22899: PUSH
22900: LD_INT 3
22902: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22903: LD_ADDR_OWVAR 40
22907: PUSH
22908: LD_INT 10
22910: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22911: LD_VAR 0 2
22915: PUSH
22916: LD_INT 1
22918: ARRAY
22919: PPUSH
22920: CALL_OW 310
22924: NOT
22925: IFFALSE 22972
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22927: CALL_OW 45
22931: PPUSH
22932: LD_VAR 0 2
22936: PUSH
22937: LD_INT 1
22939: ARRAY
22940: PPUSH
22941: CALL_OW 250
22945: PPUSH
22946: LD_VAR 0 2
22950: PUSH
22951: LD_INT 1
22953: ARRAY
22954: PPUSH
22955: CALL_OW 251
22959: PPUSH
22960: LD_INT 12
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: CALL_OW 50
22970: GO 22984
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22972: CALL_OW 45
22976: PPUSH
22977: LD_INT 1
22979: PPUSH
22980: CALL_OW 51
// end ;
22984: GO 22858
22986: POP
22987: POP
// end ;
22988: PPOPN 2
22990: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22991: LD_EXP 51
22995: PUSH
22996: LD_EXP 97
23000: AND
23001: IFFALSE 23223
23003: GO 23005
23005: DISABLE
23006: LD_INT 0
23008: PPUSH
23009: PPUSH
23010: PPUSH
23011: PPUSH
23012: PPUSH
23013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23014: LD_ADDR_VAR 0 6
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_OWVAR 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: PPUSH
23063: CALL_OW 69
23067: ST_TO_ADDR
// if not tmp then
23068: LD_VAR 0 6
23072: NOT
23073: IFFALSE 23077
// exit ;
23075: GO 23223
// s1 := rand ( 1 , 4 ) ;
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 1
23084: PPUSH
23085: LD_INT 4
23087: PPUSH
23088: CALL_OW 12
23092: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23093: LD_ADDR_VAR 0 4
23097: PUSH
23098: LD_VAR 0 6
23102: PUSH
23103: LD_INT 1
23105: ARRAY
23106: PPUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: CALL_OW 259
23116: ST_TO_ADDR
// if s1 = 1 then
23117: LD_VAR 0 2
23121: PUSH
23122: LD_INT 1
23124: EQUAL
23125: IFFALSE 23145
// s2 := rand ( 2 , 4 ) else
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_INT 2
23134: PPUSH
23135: LD_INT 4
23137: PPUSH
23138: CALL_OW 12
23142: ST_TO_ADDR
23143: GO 23153
// s2 := 1 ;
23145: LD_ADDR_VAR 0 3
23149: PUSH
23150: LD_INT 1
23152: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23153: LD_ADDR_VAR 0 5
23157: PUSH
23158: LD_VAR 0 6
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: PPUSH
23167: LD_VAR 0 3
23171: PPUSH
23172: CALL_OW 259
23176: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23177: LD_VAR 0 6
23181: PUSH
23182: LD_INT 1
23184: ARRAY
23185: PPUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: LD_VAR 0 5
23195: PPUSH
23196: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23200: LD_VAR 0 6
23204: PUSH
23205: LD_INT 1
23207: ARRAY
23208: PPUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: LD_VAR 0 4
23218: PPUSH
23219: CALL_OW 237
// end ;
23223: PPOPN 6
23225: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23226: LD_EXP 51
23230: PUSH
23231: LD_EXP 98
23235: AND
23236: IFFALSE 23315
23238: GO 23240
23240: DISABLE
23241: LD_INT 0
23243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23244: LD_ADDR_VAR 0 1
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_OWVAR 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 3
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 69
23279: ST_TO_ADDR
// if not tmp then
23280: LD_VAR 0 1
23284: NOT
23285: IFFALSE 23289
// exit ;
23287: GO 23315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23289: LD_VAR 0 1
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 12
23306: ARRAY
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 234
// end ;
23315: PPOPN 1
23317: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23318: LD_EXP 51
23322: PUSH
23323: LD_EXP 99
23327: AND
23328: IFFALSE 23440
23330: GO 23332
23332: DISABLE
23333: LD_INT 0
23335: PPUSH
23336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23337: LD_ADDR_VAR 0 2
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_OWVAR 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 30
23359: PUSH
23360: LD_INT 27
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 30
23369: PUSH
23370: LD_INT 26
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 30
23379: PUSH
23380: LD_INT 28
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PPUSH
23397: CALL_OW 69
23401: ST_TO_ADDR
// if not tmp then
23402: LD_VAR 0 2
23406: NOT
23407: IFFALSE 23411
// exit ;
23409: GO 23440
// for i in tmp do
23411: LD_ADDR_VAR 0 1
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: FOR_IN
23422: IFFALSE 23438
// SetLives ( i , 1 ) ;
23424: LD_VAR 0 1
23428: PPUSH
23429: LD_INT 1
23431: PPUSH
23432: CALL_OW 234
23436: GO 23421
23438: POP
23439: POP
// end ;
23440: PPOPN 2
23442: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23443: LD_EXP 51
23447: PUSH
23448: LD_EXP 100
23452: AND
23453: IFFALSE 23740
23455: GO 23457
23457: DISABLE
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
23462: PPUSH
// begin i := rand ( 1 , 7 ) ;
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: LD_INT 1
23470: PPUSH
23471: LD_INT 7
23473: PPUSH
23474: CALL_OW 12
23478: ST_TO_ADDR
// case i of 1 :
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 1
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23502
23492: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23493: LD_STRING earthquake(getX(game), 0, 32)
23495: PPUSH
23496: CALL_OW 559
23500: GO 23740
23502: LD_INT 2
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23524
23510: POP
// begin ToLua ( displayStucuk(); ) ;
23511: LD_STRING displayStucuk();
23513: PPUSH
23514: CALL_OW 559
// ResetFog ;
23518: CALL_OW 335
// end ; 3 :
23522: GO 23740
23524: LD_INT 3
23526: DOUBLE
23527: EQUAL
23528: IFTRUE 23532
23530: GO 23636
23532: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23533: LD_ADDR_VAR 0 2
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_OWVAR 2
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 25
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PPUSH
23564: CALL_OW 69
23568: ST_TO_ADDR
// if not tmp then
23569: LD_VAR 0 2
23573: NOT
23574: IFFALSE 23578
// exit ;
23576: GO 23740
// un := tmp [ rand ( 1 , tmp ) ] ;
23578: LD_ADDR_VAR 0 3
23582: PUSH
23583: LD_VAR 0 2
23587: PUSH
23588: LD_INT 1
23590: PPUSH
23591: LD_VAR 0 2
23595: PPUSH
23596: CALL_OW 12
23600: ARRAY
23601: ST_TO_ADDR
// if Crawls ( un ) then
23602: LD_VAR 0 3
23606: PPUSH
23607: CALL_OW 318
23611: IFFALSE 23622
// ComWalk ( un ) ;
23613: LD_VAR 0 3
23617: PPUSH
23618: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23622: LD_VAR 0 3
23626: PPUSH
23627: LD_INT 8
23629: PPUSH
23630: CALL_OW 336
// end ; 4 :
23634: GO 23740
23636: LD_INT 4
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23718
23644: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_OWVAR 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 30
23664: PUSH
23665: LD_INT 29
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 69
23680: ST_TO_ADDR
// if not tmp then
23681: LD_VAR 0 2
23685: NOT
23686: IFFALSE 23690
// exit ;
23688: GO 23740
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23690: LD_VAR 0 2
23694: PUSH
23695: LD_INT 1
23697: ARRAY
23698: PPUSH
23699: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23703: LD_VAR 0 2
23707: PUSH
23708: LD_INT 1
23710: ARRAY
23711: PPUSH
23712: CALL_OW 65
// end ; 5 .. 7 :
23716: GO 23740
23718: LD_INT 5
23720: DOUBLE
23721: GREATEREQUAL
23722: IFFALSE 23730
23724: LD_INT 7
23726: DOUBLE
23727: LESSEQUAL
23728: IFTRUE 23732
23730: GO 23739
23732: POP
// StreamSibBomb ; end ;
23733: CALL 19977 0 0
23737: GO 23740
23739: POP
// end ;
23740: PPOPN 3
23742: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23743: LD_EXP 51
23747: PUSH
23748: LD_EXP 101
23752: AND
23753: IFFALSE 23909
23755: GO 23757
23757: DISABLE
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23763: LD_ADDR_VAR 0 2
23767: PUSH
23768: LD_INT 81
23770: PUSH
23771: LD_OWVAR 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 21
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 21
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PPUSH
23812: CALL_OW 69
23816: ST_TO_ADDR
// if not tmp then
23817: LD_VAR 0 2
23821: NOT
23822: IFFALSE 23826
// exit ;
23824: GO 23909
// p := 0 ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: LD_INT 0
23833: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23834: LD_INT 35
23836: PPUSH
23837: CALL_OW 67
// p := p + 1 ;
23841: LD_ADDR_VAR 0 3
23845: PUSH
23846: LD_VAR 0 3
23850: PUSH
23851: LD_INT 1
23853: PLUS
23854: ST_TO_ADDR
// for i in tmp do
23855: LD_ADDR_VAR 0 1
23859: PUSH
23860: LD_VAR 0 2
23864: PUSH
23865: FOR_IN
23866: IFFALSE 23897
// if GetLives ( i ) < 1000 then
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 256
23877: PUSH
23878: LD_INT 1000
23880: LESS
23881: IFFALSE 23895
// SetLives ( i , 1000 ) ;
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_INT 1000
23890: PPUSH
23891: CALL_OW 234
23895: GO 23865
23897: POP
23898: POP
// until p > 20 ;
23899: LD_VAR 0 3
23903: PUSH
23904: LD_INT 20
23906: GREATER
23907: IFFALSE 23834
// end ;
23909: PPOPN 3
23911: END
// every 0 0$1 trigger StreamModeActive and sTime do
23912: LD_EXP 51
23916: PUSH
23917: LD_EXP 102
23921: AND
23922: IFFALSE 23957
23924: GO 23926
23926: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23927: LD_INT 28
23929: PPUSH
23930: LD_OWVAR 2
23934: PPUSH
23935: LD_INT 2
23937: PPUSH
23938: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23942: LD_INT 30
23944: PPUSH
23945: LD_OWVAR 2
23949: PPUSH
23950: LD_INT 2
23952: PPUSH
23953: CALL_OW 322
// end ;
23957: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23958: LD_EXP 51
23962: PUSH
23963: LD_EXP 103
23967: AND
23968: IFFALSE 24089
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23977: LD_ADDR_VAR 0 2
23981: PUSH
23982: LD_INT 22
23984: PUSH
23985: LD_OWVAR 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 21
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: LD_INT 23
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: PPUSH
24026: CALL_OW 69
24030: ST_TO_ADDR
// if not tmp then
24031: LD_VAR 0 2
24035: NOT
24036: IFFALSE 24040
// exit ;
24038: GO 24089
// for i in tmp do
24040: LD_ADDR_VAR 0 1
24044: PUSH
24045: LD_VAR 0 2
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24087
// begin if Crawls ( i ) then
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL_OW 318
24062: IFFALSE 24073
// ComWalk ( i ) ;
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 138
// SetClass ( i , 2 ) ;
24073: LD_VAR 0 1
24077: PPUSH
24078: LD_INT 2
24080: PPUSH
24081: CALL_OW 336
// end ;
24085: GO 24050
24087: POP
24088: POP
// end ;
24089: PPOPN 2
24091: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24092: LD_EXP 51
24096: PUSH
24097: LD_EXP 104
24101: AND
24102: IFFALSE 24390
24104: GO 24106
24106: DISABLE
24107: LD_INT 0
24109: PPUSH
24110: PPUSH
24111: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24112: LD_OWVAR 2
24116: PPUSH
24117: LD_INT 9
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24130: LD_INT 9
24132: PPUSH
24133: LD_OWVAR 2
24137: PPUSH
24138: CALL_OW 343
// uc_side := 9 ;
24142: LD_ADDR_OWVAR 20
24146: PUSH
24147: LD_INT 9
24149: ST_TO_ADDR
// uc_nation := 2 ;
24150: LD_ADDR_OWVAR 21
24154: PUSH
24155: LD_INT 2
24157: ST_TO_ADDR
// hc_name := Dark Warrior ;
24158: LD_ADDR_OWVAR 26
24162: PUSH
24163: LD_STRING Dark Warrior
24165: ST_TO_ADDR
// hc_gallery :=  ;
24166: LD_ADDR_OWVAR 33
24170: PUSH
24171: LD_STRING 
24173: ST_TO_ADDR
// hc_noskilllimit := true ;
24174: LD_ADDR_OWVAR 76
24178: PUSH
24179: LD_INT 1
24181: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24182: LD_ADDR_OWVAR 31
24186: PUSH
24187: LD_INT 30
24189: PUSH
24190: LD_INT 30
24192: PUSH
24193: LD_INT 30
24195: PUSH
24196: LD_INT 30
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// un := CreateHuman ;
24205: LD_ADDR_VAR 0 3
24209: PUSH
24210: CALL_OW 44
24214: ST_TO_ADDR
// hc_noskilllimit := false ;
24215: LD_ADDR_OWVAR 76
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24223: LD_VAR 0 3
24227: PPUSH
24228: LD_INT 1
24230: PPUSH
24231: CALL_OW 51
// ToLua ( playRanger() ) ;
24235: LD_STRING playRanger()
24237: PPUSH
24238: CALL_OW 559
// p := 0 ;
24242: LD_ADDR_VAR 0 2
24246: PUSH
24247: LD_INT 0
24249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24250: LD_INT 35
24252: PPUSH
24253: CALL_OW 67
// p := p + 1 ;
24257: LD_ADDR_VAR 0 2
24261: PUSH
24262: LD_VAR 0 2
24266: PUSH
24267: LD_INT 1
24269: PLUS
24270: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24271: LD_VAR 0 3
24275: PPUSH
24276: CALL_OW 256
24280: PUSH
24281: LD_INT 1000
24283: LESS
24284: IFFALSE 24298
// SetLives ( un , 1000 ) ;
24286: LD_VAR 0 3
24290: PPUSH
24291: LD_INT 1000
24293: PPUSH
24294: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24298: LD_VAR 0 3
24302: PPUSH
24303: LD_INT 81
24305: PUSH
24306: LD_OWVAR 2
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 91
24317: PUSH
24318: LD_VAR 0 3
24322: PUSH
24323: LD_INT 30
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: PPUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: CALL_OW 74
24349: PPUSH
24350: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24354: LD_VAR 0 2
24358: PUSH
24359: LD_INT 80
24361: GREATER
24362: PUSH
24363: LD_VAR 0 3
24367: PPUSH
24368: CALL_OW 301
24372: OR
24373: IFFALSE 24250
// if un then
24375: LD_VAR 0 3
24379: IFFALSE 24390
// RemoveUnit ( un ) ;
24381: LD_VAR 0 3
24385: PPUSH
24386: CALL_OW 64
// end ;
24390: PPOPN 3
24392: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24393: LD_EXP 105
24397: IFFALSE 24513
24399: GO 24401
24401: DISABLE
24402: LD_INT 0
24404: PPUSH
24405: PPUSH
24406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24407: LD_ADDR_VAR 0 2
24411: PUSH
24412: LD_INT 81
24414: PUSH
24415: LD_OWVAR 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 21
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ST_TO_ADDR
// if not tmp then
24443: LD_VAR 0 2
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24513
// ToLua ( playComputer() ) ;
24452: LD_STRING playComputer()
24454: PPUSH
24455: CALL_OW 559
// for i in tmp do
24459: LD_ADDR_VAR 0 1
24463: PUSH
24464: LD_VAR 0 2
24468: PUSH
24469: FOR_IN
24470: IFFALSE 24511
// for j := 1 to 4 do
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: DOUBLE
24478: LD_INT 1
24480: DEC
24481: ST_TO_ADDR
24482: LD_INT 4
24484: PUSH
24485: FOR_TO
24486: IFFALSE 24507
// SetSkill ( i , j , 10 ) ;
24488: LD_VAR 0 1
24492: PPUSH
24493: LD_VAR 0 3
24497: PPUSH
24498: LD_INT 10
24500: PPUSH
24501: CALL_OW 237
24505: GO 24485
24507: POP
24508: POP
24509: GO 24469
24511: POP
24512: POP
// end ;
24513: PPOPN 3
24515: END
// every 0 0$1 trigger s30 do var i , tmp ;
24516: LD_EXP 106
24520: IFFALSE 24589
24522: GO 24524
24524: DISABLE
24525: LD_INT 0
24527: PPUSH
24528: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_INT 22
24536: PUSH
24537: LD_OWVAR 2
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PPUSH
24546: CALL_OW 69
24550: ST_TO_ADDR
// if not tmp then
24551: LD_VAR 0 2
24555: NOT
24556: IFFALSE 24560
// exit ;
24558: GO 24589
// for i in tmp do
24560: LD_ADDR_VAR 0 1
24564: PUSH
24565: LD_VAR 0 2
24569: PUSH
24570: FOR_IN
24571: IFFALSE 24587
// SetLives ( i , 300 ) ;
24573: LD_VAR 0 1
24577: PPUSH
24578: LD_INT 300
24580: PPUSH
24581: CALL_OW 234
24585: GO 24570
24587: POP
24588: POP
// end ;
24589: PPOPN 2
24591: END
// every 0 0$1 trigger s60 do var i , tmp ;
24592: LD_EXP 107
24596: IFFALSE 24665
24598: GO 24600
24600: DISABLE
24601: LD_INT 0
24603: PPUSH
24604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24605: LD_ADDR_VAR 0 2
24609: PUSH
24610: LD_INT 22
24612: PUSH
24613: LD_OWVAR 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PPUSH
24622: CALL_OW 69
24626: ST_TO_ADDR
// if not tmp then
24627: LD_VAR 0 2
24631: NOT
24632: IFFALSE 24636
// exit ;
24634: GO 24665
// for i in tmp do
24636: LD_ADDR_VAR 0 1
24640: PUSH
24641: LD_VAR 0 2
24645: PUSH
24646: FOR_IN
24647: IFFALSE 24663
// SetLives ( i , 600 ) ;
24649: LD_VAR 0 1
24653: PPUSH
24654: LD_INT 600
24656: PPUSH
24657: CALL_OW 234
24661: GO 24646
24663: POP
24664: POP
// end ;
24665: PPOPN 2
24667: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24668: LD_INT 0
24670: PPUSH
// case cmd of 301 :
24671: LD_VAR 0 1
24675: PUSH
24676: LD_INT 301
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24716
24684: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24685: LD_VAR 0 6
24689: PPUSH
24690: LD_VAR 0 7
24694: PPUSH
24695: LD_VAR 0 8
24699: PPUSH
24700: LD_VAR 0 4
24704: PPUSH
24705: LD_VAR 0 5
24709: PPUSH
24710: CALL 25917 0 5
24714: GO 24837
24716: LD_INT 302
24718: DOUBLE
24719: EQUAL
24720: IFTRUE 24724
24722: GO 24761
24724: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24725: LD_VAR 0 6
24729: PPUSH
24730: LD_VAR 0 7
24734: PPUSH
24735: LD_VAR 0 8
24739: PPUSH
24740: LD_VAR 0 9
24744: PPUSH
24745: LD_VAR 0 4
24749: PPUSH
24750: LD_VAR 0 5
24754: PPUSH
24755: CALL 26008 0 6
24759: GO 24837
24761: LD_INT 303
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24806
24769: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24770: LD_VAR 0 6
24774: PPUSH
24775: LD_VAR 0 7
24779: PPUSH
24780: LD_VAR 0 8
24784: PPUSH
24785: LD_VAR 0 9
24789: PPUSH
24790: LD_VAR 0 4
24794: PPUSH
24795: LD_VAR 0 5
24799: PPUSH
24800: CALL 24842 0 6
24804: GO 24837
24806: LD_INT 304
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24836
24814: POP
// hHackTeleport ( unit , x , y ) ; end ;
24815: LD_VAR 0 2
24819: PPUSH
24820: LD_VAR 0 4
24824: PPUSH
24825: LD_VAR 0 5
24829: PPUSH
24830: CALL 26601 0 3
24834: GO 24837
24836: POP
// end ;
24837: LD_VAR 0 12
24841: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24842: LD_INT 0
24844: PPUSH
24845: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24846: LD_VAR 0 1
24850: PUSH
24851: LD_INT 1
24853: LESS
24854: PUSH
24855: LD_VAR 0 1
24859: PUSH
24860: LD_INT 3
24862: GREATER
24863: OR
24864: PUSH
24865: LD_VAR 0 5
24869: PPUSH
24870: LD_VAR 0 6
24874: PPUSH
24875: CALL_OW 428
24879: OR
24880: IFFALSE 24884
// exit ;
24882: GO 25604
// uc_side := your_side ;
24884: LD_ADDR_OWVAR 20
24888: PUSH
24889: LD_OWVAR 2
24893: ST_TO_ADDR
// uc_nation := nation ;
24894: LD_ADDR_OWVAR 21
24898: PUSH
24899: LD_VAR 0 1
24903: ST_TO_ADDR
// bc_level = 1 ;
24904: LD_ADDR_OWVAR 43
24908: PUSH
24909: LD_INT 1
24911: ST_TO_ADDR
// case btype of 1 :
24912: LD_VAR 0 2
24916: PUSH
24917: LD_INT 1
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 24936
24925: POP
// bc_type := b_depot ; 2 :
24926: LD_ADDR_OWVAR 42
24930: PUSH
24931: LD_INT 0
24933: ST_TO_ADDR
24934: GO 25548
24936: LD_INT 2
24938: DOUBLE
24939: EQUAL
24940: IFTRUE 24944
24942: GO 24955
24944: POP
// bc_type := b_warehouse ; 3 :
24945: LD_ADDR_OWVAR 42
24949: PUSH
24950: LD_INT 1
24952: ST_TO_ADDR
24953: GO 25548
24955: LD_INT 3
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24974
24963: POP
// bc_type := b_lab ; 4 .. 9 :
24964: LD_ADDR_OWVAR 42
24968: PUSH
24969: LD_INT 6
24971: ST_TO_ADDR
24972: GO 25548
24974: LD_INT 4
24976: DOUBLE
24977: GREATEREQUAL
24978: IFFALSE 24986
24980: LD_INT 9
24982: DOUBLE
24983: LESSEQUAL
24984: IFTRUE 24988
24986: GO 25040
24988: POP
// begin bc_type := b_lab_half ;
24989: LD_ADDR_OWVAR 42
24993: PUSH
24994: LD_INT 7
24996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24997: LD_ADDR_OWVAR 44
25001: PUSH
25002: LD_INT 10
25004: PUSH
25005: LD_INT 11
25007: PUSH
25008: LD_INT 12
25010: PUSH
25011: LD_INT 15
25013: PUSH
25014: LD_INT 14
25016: PUSH
25017: LD_INT 13
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: PUSH
25028: LD_VAR 0 2
25032: PUSH
25033: LD_INT 3
25035: MINUS
25036: ARRAY
25037: ST_TO_ADDR
// end ; 10 .. 13 :
25038: GO 25548
25040: LD_INT 10
25042: DOUBLE
25043: GREATEREQUAL
25044: IFFALSE 25052
25046: LD_INT 13
25048: DOUBLE
25049: LESSEQUAL
25050: IFTRUE 25054
25052: GO 25131
25054: POP
// begin bc_type := b_lab_full ;
25055: LD_ADDR_OWVAR 42
25059: PUSH
25060: LD_INT 8
25062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25063: LD_ADDR_OWVAR 44
25067: PUSH
25068: LD_INT 10
25070: PUSH
25071: LD_INT 12
25073: PUSH
25074: LD_INT 14
25076: PUSH
25077: LD_INT 13
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: PUSH
25086: LD_VAR 0 2
25090: PUSH
25091: LD_INT 9
25093: MINUS
25094: ARRAY
25095: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25096: LD_ADDR_OWVAR 45
25100: PUSH
25101: LD_INT 11
25103: PUSH
25104: LD_INT 15
25106: PUSH
25107: LD_INT 12
25109: PUSH
25110: LD_INT 15
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: LD_VAR 0 2
25123: PUSH
25124: LD_INT 9
25126: MINUS
25127: ARRAY
25128: ST_TO_ADDR
// end ; 14 :
25129: GO 25548
25131: LD_INT 14
25133: DOUBLE
25134: EQUAL
25135: IFTRUE 25139
25137: GO 25150
25139: POP
// bc_type := b_workshop ; 15 :
25140: LD_ADDR_OWVAR 42
25144: PUSH
25145: LD_INT 2
25147: ST_TO_ADDR
25148: GO 25548
25150: LD_INT 15
25152: DOUBLE
25153: EQUAL
25154: IFTRUE 25158
25156: GO 25169
25158: POP
// bc_type := b_factory ; 16 :
25159: LD_ADDR_OWVAR 42
25163: PUSH
25164: LD_INT 3
25166: ST_TO_ADDR
25167: GO 25548
25169: LD_INT 16
25171: DOUBLE
25172: EQUAL
25173: IFTRUE 25177
25175: GO 25188
25177: POP
// bc_type := b_ext_gun ; 17 :
25178: LD_ADDR_OWVAR 42
25182: PUSH
25183: LD_INT 17
25185: ST_TO_ADDR
25186: GO 25548
25188: LD_INT 17
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25224
25196: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25197: LD_ADDR_OWVAR 42
25201: PUSH
25202: LD_INT 19
25204: PUSH
25205: LD_INT 23
25207: PUSH
25208: LD_INT 19
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_VAR 0 1
25220: ARRAY
25221: ST_TO_ADDR
25222: GO 25548
25224: LD_INT 18
25226: DOUBLE
25227: EQUAL
25228: IFTRUE 25232
25230: GO 25243
25232: POP
// bc_type := b_ext_radar ; 19 :
25233: LD_ADDR_OWVAR 42
25237: PUSH
25238: LD_INT 20
25240: ST_TO_ADDR
25241: GO 25548
25243: LD_INT 19
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 25262
25251: POP
// bc_type := b_ext_radio ; 20 :
25252: LD_ADDR_OWVAR 42
25256: PUSH
25257: LD_INT 22
25259: ST_TO_ADDR
25260: GO 25548
25262: LD_INT 20
25264: DOUBLE
25265: EQUAL
25266: IFTRUE 25270
25268: GO 25281
25270: POP
// bc_type := b_ext_siberium ; 21 :
25271: LD_ADDR_OWVAR 42
25275: PUSH
25276: LD_INT 21
25278: ST_TO_ADDR
25279: GO 25548
25281: LD_INT 21
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25300
25289: POP
// bc_type := b_ext_computer ; 22 :
25290: LD_ADDR_OWVAR 42
25294: PUSH
25295: LD_INT 24
25297: ST_TO_ADDR
25298: GO 25548
25300: LD_INT 22
25302: DOUBLE
25303: EQUAL
25304: IFTRUE 25308
25306: GO 25319
25308: POP
// bc_type := b_ext_track ; 23 :
25309: LD_ADDR_OWVAR 42
25313: PUSH
25314: LD_INT 16
25316: ST_TO_ADDR
25317: GO 25548
25319: LD_INT 23
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25338
25327: POP
// bc_type := b_ext_laser ; 24 :
25328: LD_ADDR_OWVAR 42
25332: PUSH
25333: LD_INT 25
25335: ST_TO_ADDR
25336: GO 25548
25338: LD_INT 24
25340: DOUBLE
25341: EQUAL
25342: IFTRUE 25346
25344: GO 25357
25346: POP
// bc_type := b_control_tower ; 25 :
25347: LD_ADDR_OWVAR 42
25351: PUSH
25352: LD_INT 36
25354: ST_TO_ADDR
25355: GO 25548
25357: LD_INT 25
25359: DOUBLE
25360: EQUAL
25361: IFTRUE 25365
25363: GO 25376
25365: POP
// bc_type := b_breastwork ; 26 :
25366: LD_ADDR_OWVAR 42
25370: PUSH
25371: LD_INT 31
25373: ST_TO_ADDR
25374: GO 25548
25376: LD_INT 26
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25395
25384: POP
// bc_type := b_bunker ; 27 :
25385: LD_ADDR_OWVAR 42
25389: PUSH
25390: LD_INT 32
25392: ST_TO_ADDR
25393: GO 25548
25395: LD_INT 27
25397: DOUBLE
25398: EQUAL
25399: IFTRUE 25403
25401: GO 25414
25403: POP
// bc_type := b_turret ; 28 :
25404: LD_ADDR_OWVAR 42
25408: PUSH
25409: LD_INT 33
25411: ST_TO_ADDR
25412: GO 25548
25414: LD_INT 28
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25433
25422: POP
// bc_type := b_armoury ; 29 :
25423: LD_ADDR_OWVAR 42
25427: PUSH
25428: LD_INT 4
25430: ST_TO_ADDR
25431: GO 25548
25433: LD_INT 29
25435: DOUBLE
25436: EQUAL
25437: IFTRUE 25441
25439: GO 25452
25441: POP
// bc_type := b_barracks ; 30 :
25442: LD_ADDR_OWVAR 42
25446: PUSH
25447: LD_INT 5
25449: ST_TO_ADDR
25450: GO 25548
25452: LD_INT 30
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25471
25460: POP
// bc_type := b_solar_power ; 31 :
25461: LD_ADDR_OWVAR 42
25465: PUSH
25466: LD_INT 27
25468: ST_TO_ADDR
25469: GO 25548
25471: LD_INT 31
25473: DOUBLE
25474: EQUAL
25475: IFTRUE 25479
25477: GO 25490
25479: POP
// bc_type := b_oil_power ; 32 :
25480: LD_ADDR_OWVAR 42
25484: PUSH
25485: LD_INT 26
25487: ST_TO_ADDR
25488: GO 25548
25490: LD_INT 32
25492: DOUBLE
25493: EQUAL
25494: IFTRUE 25498
25496: GO 25509
25498: POP
// bc_type := b_siberite_power ; 33 :
25499: LD_ADDR_OWVAR 42
25503: PUSH
25504: LD_INT 28
25506: ST_TO_ADDR
25507: GO 25548
25509: LD_INT 33
25511: DOUBLE
25512: EQUAL
25513: IFTRUE 25517
25515: GO 25528
25517: POP
// bc_type := b_oil_mine ; 34 :
25518: LD_ADDR_OWVAR 42
25522: PUSH
25523: LD_INT 29
25525: ST_TO_ADDR
25526: GO 25548
25528: LD_INT 34
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25547
25536: POP
// bc_type := b_siberite_mine ; end ;
25537: LD_ADDR_OWVAR 42
25541: PUSH
25542: LD_INT 30
25544: ST_TO_ADDR
25545: GO 25548
25547: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25548: LD_ADDR_VAR 0 8
25552: PUSH
25553: LD_VAR 0 5
25557: PPUSH
25558: LD_VAR 0 6
25562: PPUSH
25563: LD_VAR 0 3
25567: PPUSH
25568: CALL_OW 47
25572: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25573: LD_OWVAR 42
25577: PUSH
25578: LD_INT 32
25580: PUSH
25581: LD_INT 33
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: IN
25588: IFFALSE 25604
// PlaceWeaponTurret ( b , weapon ) ;
25590: LD_VAR 0 8
25594: PPUSH
25595: LD_VAR 0 4
25599: PPUSH
25600: CALL_OW 431
// end ;
25604: LD_VAR 0 7
25608: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25609: LD_INT 0
25611: PPUSH
25612: PPUSH
25613: PPUSH
25614: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25615: LD_ADDR_VAR 0 4
25619: PUSH
25620: LD_INT 22
25622: PUSH
25623: LD_OWVAR 2
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: PUSH
25635: LD_INT 30
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PPUSH
25664: CALL_OW 69
25668: ST_TO_ADDR
// if not tmp then
25669: LD_VAR 0 4
25673: NOT
25674: IFFALSE 25678
// exit ;
25676: GO 25737
// for i in tmp do
25678: LD_ADDR_VAR 0 2
25682: PUSH
25683: LD_VAR 0 4
25687: PUSH
25688: FOR_IN
25689: IFFALSE 25735
// for j = 1 to 3 do
25691: LD_ADDR_VAR 0 3
25695: PUSH
25696: DOUBLE
25697: LD_INT 1
25699: DEC
25700: ST_TO_ADDR
25701: LD_INT 3
25703: PUSH
25704: FOR_TO
25705: IFFALSE 25731
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25707: LD_VAR 0 2
25711: PPUSH
25712: CALL_OW 274
25716: PPUSH
25717: LD_VAR 0 3
25721: PPUSH
25722: LD_INT 99999
25724: PPUSH
25725: CALL_OW 277
25729: GO 25704
25731: POP
25732: POP
25733: GO 25688
25735: POP
25736: POP
// end ;
25737: LD_VAR 0 1
25741: RET
// export function hHackSetLevel10 ; var i , j ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25747: LD_ADDR_VAR 0 2
25751: PUSH
25752: LD_INT 21
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 69
25766: PUSH
25767: FOR_IN
25768: IFFALSE 25820
// if IsSelected ( i ) then
25770: LD_VAR 0 2
25774: PPUSH
25775: CALL_OW 306
25779: IFFALSE 25818
// begin for j := 1 to 4 do
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: DOUBLE
25787: LD_INT 1
25789: DEC
25790: ST_TO_ADDR
25791: LD_INT 4
25793: PUSH
25794: FOR_TO
25795: IFFALSE 25816
// SetSkill ( i , j , 10 ) ;
25797: LD_VAR 0 2
25801: PPUSH
25802: LD_VAR 0 3
25806: PPUSH
25807: LD_INT 10
25809: PPUSH
25810: CALL_OW 237
25814: GO 25794
25816: POP
25817: POP
// end ;
25818: GO 25767
25820: POP
25821: POP
// end ;
25822: LD_VAR 0 1
25826: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25832: LD_ADDR_VAR 0 2
25836: PUSH
25837: LD_INT 22
25839: PUSH
25840: LD_OWVAR 2
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 21
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 69
25867: PUSH
25868: FOR_IN
25869: IFFALSE 25910
// begin for j := 1 to 4 do
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: DOUBLE
25877: LD_INT 1
25879: DEC
25880: ST_TO_ADDR
25881: LD_INT 4
25883: PUSH
25884: FOR_TO
25885: IFFALSE 25906
// SetSkill ( i , j , 10 ) ;
25887: LD_VAR 0 2
25891: PPUSH
25892: LD_VAR 0 3
25896: PPUSH
25897: LD_INT 10
25899: PPUSH
25900: CALL_OW 237
25904: GO 25884
25906: POP
25907: POP
// end ;
25908: GO 25868
25910: POP
25911: POP
// end ;
25912: LD_VAR 0 1
25916: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25917: LD_INT 0
25919: PPUSH
// uc_side := your_side ;
25920: LD_ADDR_OWVAR 20
25924: PUSH
25925: LD_OWVAR 2
25929: ST_TO_ADDR
// uc_nation := nation ;
25930: LD_ADDR_OWVAR 21
25934: PUSH
25935: LD_VAR 0 1
25939: ST_TO_ADDR
// InitHc ;
25940: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25944: LD_INT 0
25946: PPUSH
25947: LD_VAR 0 2
25951: PPUSH
25952: LD_VAR 0 3
25956: PPUSH
25957: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25961: LD_VAR 0 4
25965: PPUSH
25966: LD_VAR 0 5
25970: PPUSH
25971: CALL_OW 428
25975: PUSH
25976: LD_INT 0
25978: EQUAL
25979: IFFALSE 26003
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25981: CALL_OW 44
25985: PPUSH
25986: LD_VAR 0 4
25990: PPUSH
25991: LD_VAR 0 5
25995: PPUSH
25996: LD_INT 1
25998: PPUSH
25999: CALL_OW 48
// end ;
26003: LD_VAR 0 6
26007: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26008: LD_INT 0
26010: PPUSH
26011: PPUSH
// uc_side := your_side ;
26012: LD_ADDR_OWVAR 20
26016: PUSH
26017: LD_OWVAR 2
26021: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26022: LD_VAR 0 1
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: LD_INT 5
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: IN
26049: IFFALSE 26061
// uc_nation := nation_american else
26051: LD_ADDR_OWVAR 21
26055: PUSH
26056: LD_INT 1
26058: ST_TO_ADDR
26059: GO 26104
// if chassis in [ 11 , 12 , 13 , 14 ] then
26061: LD_VAR 0 1
26065: PUSH
26066: LD_INT 11
26068: PUSH
26069: LD_INT 12
26071: PUSH
26072: LD_INT 13
26074: PUSH
26075: LD_INT 14
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: IN
26084: IFFALSE 26096
// uc_nation := nation_arabian else
26086: LD_ADDR_OWVAR 21
26090: PUSH
26091: LD_INT 2
26093: ST_TO_ADDR
26094: GO 26104
// uc_nation := nation_russian ;
26096: LD_ADDR_OWVAR 21
26100: PUSH
26101: LD_INT 3
26103: ST_TO_ADDR
// vc_chassis := chassis ;
26104: LD_ADDR_OWVAR 37
26108: PUSH
26109: LD_VAR 0 1
26113: ST_TO_ADDR
// vc_engine := engine ;
26114: LD_ADDR_OWVAR 39
26118: PUSH
26119: LD_VAR 0 2
26123: ST_TO_ADDR
// vc_control := control ;
26124: LD_ADDR_OWVAR 38
26128: PUSH
26129: LD_VAR 0 3
26133: ST_TO_ADDR
// vc_weapon := weapon ;
26134: LD_ADDR_OWVAR 40
26138: PUSH
26139: LD_VAR 0 4
26143: ST_TO_ADDR
// un := CreateVehicle ;
26144: LD_ADDR_VAR 0 8
26148: PUSH
26149: CALL_OW 45
26153: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26154: LD_VAR 0 8
26158: PPUSH
26159: LD_INT 0
26161: PPUSH
26162: LD_INT 5
26164: PPUSH
26165: CALL_OW 12
26169: PPUSH
26170: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26174: LD_VAR 0 8
26178: PPUSH
26179: LD_VAR 0 5
26183: PPUSH
26184: LD_VAR 0 6
26188: PPUSH
26189: LD_INT 1
26191: PPUSH
26192: CALL_OW 48
// end ;
26196: LD_VAR 0 7
26200: RET
// export hInvincible ; every 1 do
26201: GO 26203
26203: DISABLE
// hInvincible := [ ] ;
26204: LD_ADDR_EXP 108
26208: PUSH
26209: EMPTY
26210: ST_TO_ADDR
26211: END
// every 10 do var i ;
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
// begin enable ;
26218: ENABLE
// if not hInvincible then
26219: LD_EXP 108
26223: NOT
26224: IFFALSE 26228
// exit ;
26226: GO 26272
// for i in hInvincible do
26228: LD_ADDR_VAR 0 1
26232: PUSH
26233: LD_EXP 108
26237: PUSH
26238: FOR_IN
26239: IFFALSE 26270
// if GetLives ( i ) < 1000 then
26241: LD_VAR 0 1
26245: PPUSH
26246: CALL_OW 256
26250: PUSH
26251: LD_INT 1000
26253: LESS
26254: IFFALSE 26268
// SetLives ( i , 1000 ) ;
26256: LD_VAR 0 1
26260: PPUSH
26261: LD_INT 1000
26263: PPUSH
26264: CALL_OW 234
26268: GO 26238
26270: POP
26271: POP
// end ;
26272: PPOPN 1
26274: END
// export function hHackInvincible ; var i ; begin
26275: LD_INT 0
26277: PPUSH
26278: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: LD_INT 21
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 21
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 69
26316: PUSH
26317: FOR_IN
26318: IFFALSE 26379
// if IsSelected ( i ) then
26320: LD_VAR 0 2
26324: PPUSH
26325: CALL_OW 306
26329: IFFALSE 26377
// begin if i in hInvincible then
26331: LD_VAR 0 2
26335: PUSH
26336: LD_EXP 108
26340: IN
26341: IFFALSE 26361
// hInvincible := hInvincible diff i else
26343: LD_ADDR_EXP 108
26347: PUSH
26348: LD_EXP 108
26352: PUSH
26353: LD_VAR 0 2
26357: DIFF
26358: ST_TO_ADDR
26359: GO 26377
// hInvincible := hInvincible union i ;
26361: LD_ADDR_EXP 108
26365: PUSH
26366: LD_EXP 108
26370: PUSH
26371: LD_VAR 0 2
26375: UNION
26376: ST_TO_ADDR
// end ;
26377: GO 26317
26379: POP
26380: POP
// end ;
26381: LD_VAR 0 1
26385: RET
// export function hHackInvisible ; var i , j ; begin
26386: LD_INT 0
26388: PPUSH
26389: PPUSH
26390: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26391: LD_ADDR_VAR 0 2
26395: PUSH
26396: LD_INT 21
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PPUSH
26406: CALL_OW 69
26410: PUSH
26411: FOR_IN
26412: IFFALSE 26436
// if IsSelected ( i ) then
26414: LD_VAR 0 2
26418: PPUSH
26419: CALL_OW 306
26423: IFFALSE 26434
// ComForceInvisible ( i ) ;
26425: LD_VAR 0 2
26429: PPUSH
26430: CALL_OW 496
26434: GO 26411
26436: POP
26437: POP
// end ;
26438: LD_VAR 0 1
26442: RET
// export function hHackChangeYourSide ; begin
26443: LD_INT 0
26445: PPUSH
// if your_side = 8 then
26446: LD_OWVAR 2
26450: PUSH
26451: LD_INT 8
26453: EQUAL
26454: IFFALSE 26466
// your_side := 0 else
26456: LD_ADDR_OWVAR 2
26460: PUSH
26461: LD_INT 0
26463: ST_TO_ADDR
26464: GO 26480
// your_side := your_side + 1 ;
26466: LD_ADDR_OWVAR 2
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: LD_INT 1
26478: PLUS
26479: ST_TO_ADDR
// end ;
26480: LD_VAR 0 1
26484: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26485: LD_INT 0
26487: PPUSH
26488: PPUSH
26489: PPUSH
// for i in all_units do
26490: LD_ADDR_VAR 0 2
26494: PUSH
26495: LD_OWVAR 3
26499: PUSH
26500: FOR_IN
26501: IFFALSE 26579
// if IsSelected ( i ) then
26503: LD_VAR 0 2
26507: PPUSH
26508: CALL_OW 306
26512: IFFALSE 26577
// begin j := GetSide ( i ) ;
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_VAR 0 2
26523: PPUSH
26524: CALL_OW 255
26528: ST_TO_ADDR
// if j = 8 then
26529: LD_VAR 0 3
26533: PUSH
26534: LD_INT 8
26536: EQUAL
26537: IFFALSE 26549
// j := 0 else
26539: LD_ADDR_VAR 0 3
26543: PUSH
26544: LD_INT 0
26546: ST_TO_ADDR
26547: GO 26563
// j := j + 1 ;
26549: LD_ADDR_VAR 0 3
26553: PUSH
26554: LD_VAR 0 3
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: ST_TO_ADDR
// SetSide ( i , j ) ;
26563: LD_VAR 0 2
26567: PPUSH
26568: LD_VAR 0 3
26572: PPUSH
26573: CALL_OW 235
// end ;
26577: GO 26500
26579: POP
26580: POP
// end ;
26581: LD_VAR 0 1
26585: RET
// export function hHackFog ; begin
26586: LD_INT 0
26588: PPUSH
// FogOff ( true ) ;
26589: LD_INT 1
26591: PPUSH
26592: CALL_OW 344
// end ;
26596: LD_VAR 0 1
26600: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26601: LD_INT 0
26603: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26604: LD_VAR 0 1
26608: PPUSH
26609: LD_VAR 0 2
26613: PPUSH
26614: LD_VAR 0 3
26618: PPUSH
26619: LD_INT 1
26621: PPUSH
26622: LD_INT 1
26624: PPUSH
26625: CALL_OW 483
// CenterOnXY ( x , y ) ;
26629: LD_VAR 0 2
26633: PPUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: CALL_OW 84
// end ; end_of_file
26643: LD_VAR 0 4
26647: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26648: LD_INT 0
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 264
26663: PUSH
26664: LD_EXP 36
26668: EQUAL
26669: IFFALSE 26741
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26671: LD_INT 68
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 255
26683: PPUSH
26684: CALL_OW 321
26688: PUSH
26689: LD_INT 2
26691: EQUAL
26692: IFFALSE 26704
// eff := 70 else
26694: LD_ADDR_VAR 0 4
26698: PUSH
26699: LD_INT 70
26701: ST_TO_ADDR
26702: GO 26712
// eff := 30 ;
26704: LD_ADDR_VAR 0 4
26708: PUSH
26709: LD_INT 30
26711: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 250
26721: PPUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 251
26731: PPUSH
26732: LD_VAR 0 4
26736: PPUSH
26737: CALL_OW 495
// end ; end ;
26741: LD_VAR 0 2
26745: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26746: LD_INT 0
26748: PPUSH
// end ;
26749: LD_VAR 0 4
26753: RET
// export function SOS_Command ( cmd ) ; begin
26754: LD_INT 0
26756: PPUSH
// end ;
26757: LD_VAR 0 2
26761: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26762: LD_INT 0
26764: PPUSH
// end ;
26765: LD_VAR 0 6
26769: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26770: LD_INT 0
26772: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 250
26780: EQUAL
26781: PUSH
26782: LD_VAR 0 2
26786: PPUSH
26787: CALL_OW 264
26791: PUSH
26792: LD_EXP 39
26796: EQUAL
26797: AND
26798: IFFALSE 26819
// MinerPlaceMine ( unit , x , y ) ;
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 4
26809: PPUSH
26810: LD_VAR 0 5
26814: PPUSH
26815: CALL 29168 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26819: LD_VAR 0 1
26823: PUSH
26824: LD_INT 251
26826: EQUAL
26827: PUSH
26828: LD_VAR 0 2
26832: PPUSH
26833: CALL_OW 264
26837: PUSH
26838: LD_EXP 39
26842: EQUAL
26843: AND
26844: IFFALSE 26865
// MinerDetonateMine ( unit , x , y ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 4
26855: PPUSH
26856: LD_VAR 0 5
26860: PPUSH
26861: CALL 29445 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26865: LD_VAR 0 1
26869: PUSH
26870: LD_INT 252
26872: EQUAL
26873: PUSH
26874: LD_VAR 0 2
26878: PPUSH
26879: CALL_OW 264
26883: PUSH
26884: LD_EXP 39
26888: EQUAL
26889: AND
26890: IFFALSE 26911
// MinerCreateMinefield ( unit , x , y ) ;
26892: LD_VAR 0 2
26896: PPUSH
26897: LD_VAR 0 4
26901: PPUSH
26902: LD_VAR 0 5
26906: PPUSH
26907: CALL 29862 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26911: LD_VAR 0 1
26915: PUSH
26916: LD_INT 253
26918: EQUAL
26919: PUSH
26920: LD_VAR 0 2
26924: PPUSH
26925: CALL_OW 257
26929: PUSH
26930: LD_INT 5
26932: EQUAL
26933: AND
26934: IFFALSE 26955
// ComBinocular ( unit , x , y ) ;
26936: LD_VAR 0 2
26940: PPUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: LD_VAR 0 5
26950: PPUSH
26951: CALL 30233 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26955: LD_VAR 0 1
26959: PUSH
26960: LD_INT 254
26962: EQUAL
26963: PUSH
26964: LD_VAR 0 2
26968: PPUSH
26969: CALL_OW 264
26973: PUSH
26974: LD_EXP 34
26978: EQUAL
26979: AND
26980: PUSH
26981: LD_VAR 0 3
26985: PPUSH
26986: CALL_OW 263
26990: PUSH
26991: LD_INT 3
26993: EQUAL
26994: AND
26995: IFFALSE 27011
// HackDestroyVehicle ( unit , selectedUnit ) ;
26997: LD_VAR 0 2
27001: PPUSH
27002: LD_VAR 0 3
27006: PPUSH
27007: CALL 28528 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27011: LD_VAR 0 1
27015: PUSH
27016: LD_INT 255
27018: EQUAL
27019: PUSH
27020: LD_VAR 0 2
27024: PPUSH
27025: CALL_OW 264
27029: PUSH
27030: LD_INT 14
27032: PUSH
27033: LD_INT 53
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: IN
27040: AND
27041: PUSH
27042: LD_VAR 0 4
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: CALL_OW 488
27056: AND
27057: IFFALSE 27081
// CutTreeXYR ( unit , x , y , 12 ) ;
27059: LD_VAR 0 2
27063: PPUSH
27064: LD_VAR 0 4
27068: PPUSH
27069: LD_VAR 0 5
27073: PPUSH
27074: LD_INT 12
27076: PPUSH
27077: CALL 27094 0 4
// end ;
27081: LD_VAR 0 6
27085: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
27086: LD_INT 0
27088: PPUSH
// end ;
27089: LD_VAR 0 4
27093: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27094: LD_INT 0
27096: PPUSH
27097: PPUSH
27098: PPUSH
27099: PPUSH
27100: PPUSH
27101: PPUSH
27102: PPUSH
27103: PPUSH
27104: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27105: LD_VAR 0 1
27109: NOT
27110: PUSH
27111: LD_VAR 0 2
27115: PPUSH
27116: LD_VAR 0 3
27120: PPUSH
27121: CALL_OW 488
27125: NOT
27126: OR
27127: PUSH
27128: LD_VAR 0 4
27132: NOT
27133: OR
27134: IFFALSE 27138
// exit ;
27136: GO 27478
// list := [ ] ;
27138: LD_ADDR_VAR 0 13
27142: PUSH
27143: EMPTY
27144: ST_TO_ADDR
// if x - r < 0 then
27145: LD_VAR 0 2
27149: PUSH
27150: LD_VAR 0 4
27154: MINUS
27155: PUSH
27156: LD_INT 0
27158: LESS
27159: IFFALSE 27171
// min_x := 0 else
27161: LD_ADDR_VAR 0 7
27165: PUSH
27166: LD_INT 0
27168: ST_TO_ADDR
27169: GO 27187
// min_x := x - r ;
27171: LD_ADDR_VAR 0 7
27175: PUSH
27176: LD_VAR 0 2
27180: PUSH
27181: LD_VAR 0 4
27185: MINUS
27186: ST_TO_ADDR
// if y - r < 0 then
27187: LD_VAR 0 3
27191: PUSH
27192: LD_VAR 0 4
27196: MINUS
27197: PUSH
27198: LD_INT 0
27200: LESS
27201: IFFALSE 27213
// min_y := 0 else
27203: LD_ADDR_VAR 0 8
27207: PUSH
27208: LD_INT 0
27210: ST_TO_ADDR
27211: GO 27229
// min_y := y - r ;
27213: LD_ADDR_VAR 0 8
27217: PUSH
27218: LD_VAR 0 3
27222: PUSH
27223: LD_VAR 0 4
27227: MINUS
27228: ST_TO_ADDR
// max_x := x + r ;
27229: LD_ADDR_VAR 0 9
27233: PUSH
27234: LD_VAR 0 2
27238: PUSH
27239: LD_VAR 0 4
27243: PLUS
27244: ST_TO_ADDR
// max_y := y + r ;
27245: LD_ADDR_VAR 0 10
27249: PUSH
27250: LD_VAR 0 3
27254: PUSH
27255: LD_VAR 0 4
27259: PLUS
27260: ST_TO_ADDR
// for _x = min_x to max_x do
27261: LD_ADDR_VAR 0 11
27265: PUSH
27266: DOUBLE
27267: LD_VAR 0 7
27271: DEC
27272: ST_TO_ADDR
27273: LD_VAR 0 9
27277: PUSH
27278: FOR_TO
27279: IFFALSE 27396
// for _y = min_y to max_y do
27281: LD_ADDR_VAR 0 12
27285: PUSH
27286: DOUBLE
27287: LD_VAR 0 8
27291: DEC
27292: ST_TO_ADDR
27293: LD_VAR 0 10
27297: PUSH
27298: FOR_TO
27299: IFFALSE 27392
// begin if not ValidHex ( _x , _y ) then
27301: LD_VAR 0 11
27305: PPUSH
27306: LD_VAR 0 12
27310: PPUSH
27311: CALL_OW 488
27315: NOT
27316: IFFALSE 27320
// continue ;
27318: GO 27298
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27320: LD_VAR 0 11
27324: PPUSH
27325: LD_VAR 0 12
27329: PPUSH
27330: CALL_OW 351
27334: PUSH
27335: LD_VAR 0 11
27339: PPUSH
27340: LD_VAR 0 12
27344: PPUSH
27345: CALL_OW 554
27349: AND
27350: IFFALSE 27390
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27352: LD_ADDR_VAR 0 13
27356: PUSH
27357: LD_VAR 0 13
27361: PPUSH
27362: LD_VAR 0 13
27366: PUSH
27367: LD_INT 1
27369: PLUS
27370: PPUSH
27371: LD_VAR 0 11
27375: PUSH
27376: LD_VAR 0 12
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PPUSH
27385: CALL_OW 2
27389: ST_TO_ADDR
// end ;
27390: GO 27298
27392: POP
27393: POP
27394: GO 27278
27396: POP
27397: POP
// if not list then
27398: LD_VAR 0 13
27402: NOT
27403: IFFALSE 27407
// exit ;
27405: GO 27478
// for i in list do
27407: LD_ADDR_VAR 0 6
27411: PUSH
27412: LD_VAR 0 13
27416: PUSH
27417: FOR_IN
27418: IFFALSE 27476
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27420: LD_VAR 0 1
27424: PPUSH
27425: LD_STRING M
27427: PUSH
27428: LD_VAR 0 6
27432: PUSH
27433: LD_INT 1
27435: ARRAY
27436: PUSH
27437: LD_VAR 0 6
27441: PUSH
27442: LD_INT 2
27444: ARRAY
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: PPUSH
27470: CALL_OW 447
27474: GO 27417
27476: POP
27477: POP
// end ;
27478: LD_VAR 0 5
27482: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27483: LD_EXP 111
27487: NOT
27488: IFFALSE 27538
27490: GO 27492
27492: DISABLE
// begin initHack := true ;
27493: LD_ADDR_EXP 111
27497: PUSH
27498: LD_INT 1
27500: ST_TO_ADDR
// hackTanks := [ ] ;
27501: LD_ADDR_EXP 112
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27508: LD_ADDR_EXP 113
27512: PUSH
27513: EMPTY
27514: ST_TO_ADDR
// hackLimit := 3 ;
27515: LD_ADDR_EXP 114
27519: PUSH
27520: LD_INT 3
27522: ST_TO_ADDR
// hackDist := 12 ;
27523: LD_ADDR_EXP 115
27527: PUSH
27528: LD_INT 12
27530: ST_TO_ADDR
// hackCounter := [ ] ;
27531: LD_ADDR_EXP 116
27535: PUSH
27536: EMPTY
27537: ST_TO_ADDR
// end ;
27538: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27539: LD_EXP 111
27543: PUSH
27544: LD_INT 34
27546: PUSH
27547: LD_EXP 34
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: AND
27561: IFFALSE 27816
27563: GO 27565
27565: DISABLE
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
// begin enable ;
27570: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_INT 34
27578: PUSH
27579: LD_EXP 34
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 69
27592: PUSH
27593: FOR_IN
27594: IFFALSE 27814
// begin if not i in hackTanks then
27596: LD_VAR 0 1
27600: PUSH
27601: LD_EXP 112
27605: IN
27606: NOT
27607: IFFALSE 27690
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27609: LD_ADDR_EXP 112
27613: PUSH
27614: LD_EXP 112
27618: PPUSH
27619: LD_EXP 112
27623: PUSH
27624: LD_INT 1
27626: PLUS
27627: PPUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27638: LD_ADDR_EXP 113
27642: PUSH
27643: LD_EXP 113
27647: PPUSH
27648: LD_EXP 113
27652: PUSH
27653: LD_INT 1
27655: PLUS
27656: PPUSH
27657: EMPTY
27658: PPUSH
27659: CALL_OW 1
27663: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27664: LD_ADDR_EXP 116
27668: PUSH
27669: LD_EXP 116
27673: PPUSH
27674: LD_EXP 116
27678: PUSH
27679: LD_INT 1
27681: PLUS
27682: PPUSH
27683: EMPTY
27684: PPUSH
27685: CALL_OW 1
27689: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 302
27699: NOT
27700: IFFALSE 27713
// begin HackUnlinkAll ( i ) ;
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL 27819 0 1
// continue ;
27711: GO 27593
// end ; HackCheckCapturedStatus ( i ) ;
27713: LD_VAR 0 1
27717: PPUSH
27718: CALL 28262 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27722: LD_ADDR_VAR 0 2
27726: PUSH
27727: LD_INT 81
27729: PUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL_OW 255
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 33
27746: PUSH
27747: LD_INT 3
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 91
27756: PUSH
27757: LD_VAR 0 1
27761: PUSH
27762: LD_EXP 115
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 50
27774: PUSH
27775: EMPTY
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: PPUSH
27784: CALL_OW 69
27788: ST_TO_ADDR
// if not tmp then
27789: LD_VAR 0 2
27793: NOT
27794: IFFALSE 27798
// continue ;
27796: GO 27593
// HackLink ( i , tmp ) ;
27798: LD_VAR 0 1
27802: PPUSH
27803: LD_VAR 0 2
27807: PPUSH
27808: CALL 27955 0 2
// end ;
27812: GO 27593
27814: POP
27815: POP
// end ;
27816: PPOPN 2
27818: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27819: LD_INT 0
27821: PPUSH
27822: PPUSH
27823: PPUSH
// if not hack in hackTanks then
27824: LD_VAR 0 1
27828: PUSH
27829: LD_EXP 112
27833: IN
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27950
// index := GetElementIndex ( hackTanks , hack ) ;
27839: LD_ADDR_VAR 0 4
27843: PUSH
27844: LD_EXP 112
27848: PPUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL 35424 0 2
27858: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27859: LD_EXP 113
27863: PUSH
27864: LD_VAR 0 4
27868: ARRAY
27869: IFFALSE 27950
// begin for i in hackTanksCaptured [ index ] do
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_EXP 113
27880: PUSH
27881: LD_VAR 0 4
27885: ARRAY
27886: PUSH
27887: FOR_IN
27888: IFFALSE 27914
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27890: LD_VAR 0 3
27894: PUSH
27895: LD_INT 1
27897: ARRAY
27898: PPUSH
27899: LD_VAR 0 3
27903: PUSH
27904: LD_INT 2
27906: ARRAY
27907: PPUSH
27908: CALL_OW 235
27912: GO 27887
27914: POP
27915: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27916: LD_ADDR_EXP 113
27920: PUSH
27921: LD_EXP 113
27925: PPUSH
27926: LD_VAR 0 4
27930: PPUSH
27931: EMPTY
27932: PPUSH
27933: CALL_OW 1
27937: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27938: LD_VAR 0 1
27942: PPUSH
27943: LD_INT 0
27945: PPUSH
27946: CALL_OW 505
// end ; end ;
27950: LD_VAR 0 2
27954: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27955: LD_INT 0
27957: PPUSH
27958: PPUSH
27959: PPUSH
// if not hack in hackTanks or not vehicles then
27960: LD_VAR 0 1
27964: PUSH
27965: LD_EXP 112
27969: IN
27970: NOT
27971: PUSH
27972: LD_VAR 0 2
27976: NOT
27977: OR
27978: IFFALSE 27982
// exit ;
27980: GO 28257
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27982: LD_ADDR_VAR 0 2
27986: PUSH
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_INT 1
27999: PPUSH
28000: LD_INT 1
28002: PPUSH
28003: CALL 36074 0 4
28007: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28008: LD_ADDR_VAR 0 5
28012: PUSH
28013: LD_EXP 112
28017: PPUSH
28018: LD_VAR 0 1
28022: PPUSH
28023: CALL 35424 0 2
28027: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28028: LD_EXP 113
28032: PUSH
28033: LD_VAR 0 5
28037: ARRAY
28038: PUSH
28039: LD_EXP 114
28043: LESS
28044: IFFALSE 28233
// begin for i := 1 to vehicles do
28046: LD_ADDR_VAR 0 4
28050: PUSH
28051: DOUBLE
28052: LD_INT 1
28054: DEC
28055: ST_TO_ADDR
28056: LD_VAR 0 2
28060: PUSH
28061: FOR_TO
28062: IFFALSE 28231
// begin if hackTanksCaptured [ index ] = hackLimit then
28064: LD_EXP 113
28068: PUSH
28069: LD_VAR 0 5
28073: ARRAY
28074: PUSH
28075: LD_EXP 114
28079: EQUAL
28080: IFFALSE 28084
// break ;
28082: GO 28231
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28084: LD_ADDR_EXP 116
28088: PUSH
28089: LD_EXP 116
28093: PPUSH
28094: LD_VAR 0 5
28098: PPUSH
28099: LD_EXP 116
28103: PUSH
28104: LD_VAR 0 5
28108: ARRAY
28109: PUSH
28110: LD_INT 1
28112: PLUS
28113: PPUSH
28114: CALL_OW 1
28118: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28119: LD_ADDR_EXP 113
28123: PUSH
28124: LD_EXP 113
28128: PPUSH
28129: LD_VAR 0 5
28133: PUSH
28134: LD_EXP 113
28138: PUSH
28139: LD_VAR 0 5
28143: ARRAY
28144: PUSH
28145: LD_INT 1
28147: PLUS
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PPUSH
28153: LD_VAR 0 2
28157: PUSH
28158: LD_VAR 0 4
28162: ARRAY
28163: PUSH
28164: LD_VAR 0 2
28168: PUSH
28169: LD_VAR 0 4
28173: ARRAY
28174: PPUSH
28175: CALL_OW 255
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL 35639 0 3
28188: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28189: LD_VAR 0 2
28193: PUSH
28194: LD_VAR 0 4
28198: ARRAY
28199: PPUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 255
28209: PPUSH
28210: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28214: LD_VAR 0 2
28218: PUSH
28219: LD_VAR 0 4
28223: ARRAY
28224: PPUSH
28225: CALL_OW 141
// end ;
28229: GO 28061
28231: POP
28232: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28233: LD_VAR 0 1
28237: PPUSH
28238: LD_EXP 113
28242: PUSH
28243: LD_VAR 0 5
28247: ARRAY
28248: PUSH
28249: LD_INT 0
28251: PLUS
28252: PPUSH
28253: CALL_OW 505
// end ;
28257: LD_VAR 0 3
28261: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
28266: PPUSH
28267: PPUSH
// if not hack in hackTanks then
28268: LD_VAR 0 1
28272: PUSH
28273: LD_EXP 112
28277: IN
28278: NOT
28279: IFFALSE 28283
// exit ;
28281: GO 28523
// index := GetElementIndex ( hackTanks , hack ) ;
28283: LD_ADDR_VAR 0 4
28287: PUSH
28288: LD_EXP 112
28292: PPUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL 35424 0 2
28302: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28303: LD_ADDR_VAR 0 3
28307: PUSH
28308: DOUBLE
28309: LD_EXP 113
28313: PUSH
28314: LD_VAR 0 4
28318: ARRAY
28319: INC
28320: ST_TO_ADDR
28321: LD_INT 1
28323: PUSH
28324: FOR_DOWNTO
28325: IFFALSE 28497
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_EXP 113
28336: PUSH
28337: LD_VAR 0 4
28341: ARRAY
28342: PUSH
28343: LD_VAR 0 3
28347: ARRAY
28348: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28349: LD_VAR 0 5
28353: PUSH
28354: LD_INT 1
28356: ARRAY
28357: PPUSH
28358: CALL_OW 302
28362: NOT
28363: PUSH
28364: LD_VAR 0 5
28368: PUSH
28369: LD_INT 1
28371: ARRAY
28372: PPUSH
28373: CALL_OW 255
28377: PUSH
28378: LD_VAR 0 1
28382: PPUSH
28383: CALL_OW 255
28387: NONEQUAL
28388: OR
28389: IFFALSE 28495
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28391: LD_VAR 0 5
28395: PUSH
28396: LD_INT 1
28398: ARRAY
28399: PPUSH
28400: CALL_OW 305
28404: PUSH
28405: LD_VAR 0 5
28409: PUSH
28410: LD_INT 1
28412: ARRAY
28413: PPUSH
28414: CALL_OW 255
28418: PUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL_OW 255
28428: EQUAL
28429: AND
28430: IFFALSE 28454
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28432: LD_VAR 0 5
28436: PUSH
28437: LD_INT 1
28439: ARRAY
28440: PPUSH
28441: LD_VAR 0 5
28445: PUSH
28446: LD_INT 2
28448: ARRAY
28449: PPUSH
28450: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28454: LD_ADDR_EXP 113
28458: PUSH
28459: LD_EXP 113
28463: PPUSH
28464: LD_VAR 0 4
28468: PPUSH
28469: LD_EXP 113
28473: PUSH
28474: LD_VAR 0 4
28478: ARRAY
28479: PPUSH
28480: LD_VAR 0 3
28484: PPUSH
28485: CALL_OW 3
28489: PPUSH
28490: CALL_OW 1
28494: ST_TO_ADDR
// end ; end ;
28495: GO 28324
28497: POP
28498: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_EXP 113
28508: PUSH
28509: LD_VAR 0 4
28513: ARRAY
28514: PUSH
28515: LD_INT 0
28517: PLUS
28518: PPUSH
28519: CALL_OW 505
// end ;
28523: LD_VAR 0 2
28527: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
// if not hack in hackTanks then
28534: LD_VAR 0 1
28538: PUSH
28539: LD_EXP 112
28543: IN
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28634
// index := GetElementIndex ( hackTanks , hack ) ;
28549: LD_ADDR_VAR 0 5
28553: PUSH
28554: LD_EXP 112
28558: PPUSH
28559: LD_VAR 0 1
28563: PPUSH
28564: CALL 35424 0 2
28568: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28569: LD_ADDR_VAR 0 4
28573: PUSH
28574: DOUBLE
28575: LD_INT 1
28577: DEC
28578: ST_TO_ADDR
28579: LD_EXP 113
28583: PUSH
28584: LD_VAR 0 5
28588: ARRAY
28589: PUSH
28590: FOR_TO
28591: IFFALSE 28632
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28593: LD_EXP 113
28597: PUSH
28598: LD_VAR 0 5
28602: ARRAY
28603: PUSH
28604: LD_VAR 0 4
28608: ARRAY
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PUSH
28614: LD_VAR 0 2
28618: EQUAL
28619: IFFALSE 28630
// KillUnit ( vehicle ) ;
28621: LD_VAR 0 2
28625: PPUSH
28626: CALL_OW 66
28630: GO 28590
28632: POP
28633: POP
// end ;
28634: LD_VAR 0 3
28638: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28639: LD_EXP 117
28643: NOT
28644: IFFALSE 28679
28646: GO 28648
28648: DISABLE
// begin initMiner := true ;
28649: LD_ADDR_EXP 117
28653: PUSH
28654: LD_INT 1
28656: ST_TO_ADDR
// minersList := [ ] ;
28657: LD_ADDR_EXP 118
28661: PUSH
28662: EMPTY
28663: ST_TO_ADDR
// minerMinesList := [ ] ;
28664: LD_ADDR_EXP 119
28668: PUSH
28669: EMPTY
28670: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28671: LD_ADDR_EXP 120
28675: PUSH
28676: LD_INT 5
28678: ST_TO_ADDR
// end ;
28679: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28680: LD_EXP 117
28684: PUSH
28685: LD_INT 34
28687: PUSH
28688: LD_EXP 39
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PPUSH
28697: CALL_OW 69
28701: AND
28702: IFFALSE 29165
28704: GO 28706
28706: DISABLE
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
28711: PPUSH
28712: PPUSH
// begin enable ;
28713: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28714: LD_ADDR_VAR 0 1
28718: PUSH
28719: LD_INT 34
28721: PUSH
28722: LD_EXP 39
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28809
// begin if not i in minersList then
28739: LD_VAR 0 1
28743: PUSH
28744: LD_EXP 118
28748: IN
28749: NOT
28750: IFFALSE 28807
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28752: LD_ADDR_EXP 118
28756: PUSH
28757: LD_EXP 118
28761: PPUSH
28762: LD_EXP 118
28766: PUSH
28767: LD_INT 1
28769: PLUS
28770: PPUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL_OW 1
28780: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28781: LD_ADDR_EXP 119
28785: PUSH
28786: LD_EXP 119
28790: PPUSH
28791: LD_EXP 119
28795: PUSH
28796: LD_INT 1
28798: PLUS
28799: PPUSH
28800: EMPTY
28801: PPUSH
28802: CALL_OW 1
28806: ST_TO_ADDR
// end end ;
28807: GO 28736
28809: POP
28810: POP
// for i := minerMinesList downto 1 do
28811: LD_ADDR_VAR 0 1
28815: PUSH
28816: DOUBLE
28817: LD_EXP 119
28821: INC
28822: ST_TO_ADDR
28823: LD_INT 1
28825: PUSH
28826: FOR_DOWNTO
28827: IFFALSE 29163
// begin if IsLive ( minersList [ i ] ) then
28829: LD_EXP 118
28833: PUSH
28834: LD_VAR 0 1
28838: ARRAY
28839: PPUSH
28840: CALL_OW 300
28844: IFFALSE 28872
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28846: LD_EXP 118
28850: PUSH
28851: LD_VAR 0 1
28855: ARRAY
28856: PPUSH
28857: LD_EXP 119
28861: PUSH
28862: LD_VAR 0 1
28866: ARRAY
28867: PPUSH
28868: CALL_OW 505
// if not minerMinesList [ i ] then
28872: LD_EXP 119
28876: PUSH
28877: LD_VAR 0 1
28881: ARRAY
28882: NOT
28883: IFFALSE 28887
// continue ;
28885: GO 28826
// for j := minerMinesList [ i ] downto 1 do
28887: LD_ADDR_VAR 0 2
28891: PUSH
28892: DOUBLE
28893: LD_EXP 119
28897: PUSH
28898: LD_VAR 0 1
28902: ARRAY
28903: INC
28904: ST_TO_ADDR
28905: LD_INT 1
28907: PUSH
28908: FOR_DOWNTO
28909: IFFALSE 29159
// begin side := GetSide ( minersList [ i ] ) ;
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_EXP 118
28920: PUSH
28921: LD_VAR 0 1
28925: ARRAY
28926: PPUSH
28927: CALL_OW 255
28931: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28932: LD_ADDR_VAR 0 4
28936: PUSH
28937: LD_EXP 119
28941: PUSH
28942: LD_VAR 0 1
28946: ARRAY
28947: PUSH
28948: LD_VAR 0 2
28952: ARRAY
28953: PUSH
28954: LD_INT 1
28956: ARRAY
28957: PPUSH
28958: LD_EXP 119
28962: PUSH
28963: LD_VAR 0 1
28967: ARRAY
28968: PUSH
28969: LD_VAR 0 2
28973: ARRAY
28974: PUSH
28975: LD_INT 2
28977: ARRAY
28978: PPUSH
28979: CALL_OW 428
28983: ST_TO_ADDR
// if not tmp then
28984: LD_VAR 0 4
28988: NOT
28989: IFFALSE 28993
// continue ;
28991: GO 28908
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28993: LD_VAR 0 4
28997: PUSH
28998: LD_INT 81
29000: PUSH
29001: LD_VAR 0 3
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PPUSH
29010: CALL_OW 69
29014: IN
29015: PUSH
29016: LD_EXP 119
29020: PUSH
29021: LD_VAR 0 1
29025: ARRAY
29026: PUSH
29027: LD_VAR 0 2
29031: ARRAY
29032: PUSH
29033: LD_INT 1
29035: ARRAY
29036: PPUSH
29037: LD_EXP 119
29041: PUSH
29042: LD_VAR 0 1
29046: ARRAY
29047: PUSH
29048: LD_VAR 0 2
29052: ARRAY
29053: PUSH
29054: LD_INT 2
29056: ARRAY
29057: PPUSH
29058: CALL_OW 458
29062: AND
29063: IFFALSE 29157
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29065: LD_EXP 119
29069: PUSH
29070: LD_VAR 0 1
29074: ARRAY
29075: PUSH
29076: LD_VAR 0 2
29080: ARRAY
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: LD_EXP 119
29090: PUSH
29091: LD_VAR 0 1
29095: ARRAY
29096: PUSH
29097: LD_VAR 0 2
29101: ARRAY
29102: PUSH
29103: LD_INT 2
29105: ARRAY
29106: PPUSH
29107: LD_VAR 0 3
29111: PPUSH
29112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29116: LD_ADDR_EXP 119
29120: PUSH
29121: LD_EXP 119
29125: PPUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: LD_EXP 119
29135: PUSH
29136: LD_VAR 0 1
29140: ARRAY
29141: PPUSH
29142: LD_VAR 0 2
29146: PPUSH
29147: CALL_OW 3
29151: PPUSH
29152: CALL_OW 1
29156: ST_TO_ADDR
// end ; end ;
29157: GO 28908
29159: POP
29160: POP
// end ;
29161: GO 28826
29163: POP
29164: POP
// end ;
29165: PPOPN 4
29167: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
// result := false ;
29172: LD_ADDR_VAR 0 4
29176: PUSH
29177: LD_INT 0
29179: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 264
29189: PUSH
29190: LD_EXP 39
29194: EQUAL
29195: NOT
29196: IFFALSE 29200
// exit ;
29198: GO 29440
// index := GetElementIndex ( minersList , unit ) ;
29200: LD_ADDR_VAR 0 5
29204: PUSH
29205: LD_EXP 118
29209: PPUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: CALL 35424 0 2
29219: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29220: LD_EXP 119
29224: PUSH
29225: LD_VAR 0 5
29229: ARRAY
29230: PUSH
29231: LD_EXP 120
29235: GREATEREQUAL
29236: IFFALSE 29240
// exit ;
29238: GO 29440
// ComMoveXY ( unit , x , y ) ;
29240: LD_VAR 0 1
29244: PPUSH
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_VAR 0 3
29254: PPUSH
29255: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29259: LD_INT 35
29261: PPUSH
29262: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: CALL 66196 0 3
29285: NOT
29286: PUSH
29287: LD_VAR 0 1
29291: PPUSH
29292: CALL_OW 314
29296: AND
29297: IFFALSE 29301
// exit ;
29299: GO 29440
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29301: LD_VAR 0 2
29305: PPUSH
29306: LD_VAR 0 3
29310: PPUSH
29311: CALL_OW 428
29315: PUSH
29316: LD_VAR 0 1
29320: EQUAL
29321: PUSH
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL_OW 314
29331: NOT
29332: AND
29333: IFFALSE 29259
// PlaySoundXY ( x , y , PlantMine ) ;
29335: LD_VAR 0 2
29339: PPUSH
29340: LD_VAR 0 3
29344: PPUSH
29345: LD_STRING PlantMine
29347: PPUSH
29348: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29352: LD_VAR 0 2
29356: PPUSH
29357: LD_VAR 0 3
29361: PPUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: CALL_OW 255
29371: PPUSH
29372: LD_INT 0
29374: PPUSH
29375: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29379: LD_ADDR_EXP 119
29383: PUSH
29384: LD_EXP 119
29388: PPUSH
29389: LD_VAR 0 5
29393: PUSH
29394: LD_EXP 119
29398: PUSH
29399: LD_VAR 0 5
29403: ARRAY
29404: PUSH
29405: LD_INT 1
29407: PLUS
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PPUSH
29413: LD_VAR 0 2
29417: PUSH
29418: LD_VAR 0 3
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PPUSH
29427: CALL 35639 0 3
29431: ST_TO_ADDR
// result := true ;
29432: LD_ADDR_VAR 0 4
29436: PUSH
29437: LD_INT 1
29439: ST_TO_ADDR
// end ;
29440: LD_VAR 0 4
29444: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29445: LD_INT 0
29447: PPUSH
29448: PPUSH
29449: PPUSH
// if not unit in minersList then
29450: LD_VAR 0 1
29454: PUSH
29455: LD_EXP 118
29459: IN
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 29857
// index := GetElementIndex ( minersList , unit ) ;
29465: LD_ADDR_VAR 0 6
29469: PUSH
29470: LD_EXP 118
29474: PPUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL 35424 0 2
29484: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29485: LD_ADDR_VAR 0 5
29489: PUSH
29490: DOUBLE
29491: LD_EXP 119
29495: PUSH
29496: LD_VAR 0 6
29500: ARRAY
29501: INC
29502: ST_TO_ADDR
29503: LD_INT 1
29505: PUSH
29506: FOR_DOWNTO
29507: IFFALSE 29668
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29509: LD_EXP 119
29513: PUSH
29514: LD_VAR 0 6
29518: ARRAY
29519: PUSH
29520: LD_VAR 0 5
29524: ARRAY
29525: PUSH
29526: LD_INT 1
29528: ARRAY
29529: PUSH
29530: LD_VAR 0 2
29534: EQUAL
29535: PUSH
29536: LD_EXP 119
29540: PUSH
29541: LD_VAR 0 6
29545: ARRAY
29546: PUSH
29547: LD_VAR 0 5
29551: ARRAY
29552: PUSH
29553: LD_INT 2
29555: ARRAY
29556: PUSH
29557: LD_VAR 0 3
29561: EQUAL
29562: AND
29563: IFFALSE 29666
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29565: LD_EXP 119
29569: PUSH
29570: LD_VAR 0 6
29574: ARRAY
29575: PUSH
29576: LD_VAR 0 5
29580: ARRAY
29581: PUSH
29582: LD_INT 1
29584: ARRAY
29585: PPUSH
29586: LD_EXP 119
29590: PUSH
29591: LD_VAR 0 6
29595: ARRAY
29596: PUSH
29597: LD_VAR 0 5
29601: ARRAY
29602: PUSH
29603: LD_INT 2
29605: ARRAY
29606: PPUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: CALL_OW 255
29616: PPUSH
29617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29621: LD_ADDR_EXP 119
29625: PUSH
29626: LD_EXP 119
29630: PPUSH
29631: LD_VAR 0 6
29635: PPUSH
29636: LD_EXP 119
29640: PUSH
29641: LD_VAR 0 6
29645: ARRAY
29646: PPUSH
29647: LD_VAR 0 5
29651: PPUSH
29652: CALL_OW 3
29656: PPUSH
29657: CALL_OW 1
29661: ST_TO_ADDR
// exit ;
29662: POP
29663: POP
29664: GO 29857
// end ; end ;
29666: GO 29506
29668: POP
29669: POP
// for i := minerMinesList [ index ] downto 1 do
29670: LD_ADDR_VAR 0 5
29674: PUSH
29675: DOUBLE
29676: LD_EXP 119
29680: PUSH
29681: LD_VAR 0 6
29685: ARRAY
29686: INC
29687: ST_TO_ADDR
29688: LD_INT 1
29690: PUSH
29691: FOR_DOWNTO
29692: IFFALSE 29855
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29694: LD_EXP 119
29698: PUSH
29699: LD_VAR 0 6
29703: ARRAY
29704: PUSH
29705: LD_VAR 0 5
29709: ARRAY
29710: PUSH
29711: LD_INT 1
29713: ARRAY
29714: PPUSH
29715: LD_EXP 119
29719: PUSH
29720: LD_VAR 0 6
29724: ARRAY
29725: PUSH
29726: LD_VAR 0 5
29730: ARRAY
29731: PUSH
29732: LD_INT 2
29734: ARRAY
29735: PPUSH
29736: LD_VAR 0 2
29740: PPUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 298
29750: PUSH
29751: LD_INT 6
29753: LESS
29754: IFFALSE 29853
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29756: LD_EXP 119
29760: PUSH
29761: LD_VAR 0 6
29765: ARRAY
29766: PUSH
29767: LD_VAR 0 5
29771: ARRAY
29772: PUSH
29773: LD_INT 1
29775: ARRAY
29776: PPUSH
29777: LD_EXP 119
29781: PUSH
29782: LD_VAR 0 6
29786: ARRAY
29787: PUSH
29788: LD_VAR 0 5
29792: ARRAY
29793: PUSH
29794: LD_INT 2
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 255
29807: PPUSH
29808: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29812: LD_ADDR_EXP 119
29816: PUSH
29817: LD_EXP 119
29821: PPUSH
29822: LD_VAR 0 6
29826: PPUSH
29827: LD_EXP 119
29831: PUSH
29832: LD_VAR 0 6
29836: ARRAY
29837: PPUSH
29838: LD_VAR 0 5
29842: PPUSH
29843: CALL_OW 3
29847: PPUSH
29848: CALL_OW 1
29852: ST_TO_ADDR
// end ; end ;
29853: GO 29691
29855: POP
29856: POP
// end ;
29857: LD_VAR 0 4
29861: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29862: LD_INT 0
29864: PPUSH
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL_OW 264
29882: PUSH
29883: LD_EXP 39
29887: EQUAL
29888: NOT
29889: PUSH
29890: LD_VAR 0 1
29894: PUSH
29895: LD_EXP 118
29899: IN
29900: NOT
29901: OR
29902: IFFALSE 29906
// exit ;
29904: GO 30228
// index := GetElementIndex ( minersList , unit ) ;
29906: LD_ADDR_VAR 0 6
29910: PUSH
29911: LD_EXP 118
29915: PPUSH
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL 35424 0 2
29925: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29926: LD_ADDR_VAR 0 8
29930: PUSH
29931: LD_EXP 120
29935: PUSH
29936: LD_EXP 119
29940: PUSH
29941: LD_VAR 0 6
29945: ARRAY
29946: MINUS
29947: ST_TO_ADDR
// if not minesFreeAmount then
29948: LD_VAR 0 8
29952: NOT
29953: IFFALSE 29957
// exit ;
29955: GO 30228
// tmp := [ ] ;
29957: LD_ADDR_VAR 0 7
29961: PUSH
29962: EMPTY
29963: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29964: LD_ADDR_VAR 0 5
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_VAR 0 8
29978: PUSH
29979: FOR_TO
29980: IFFALSE 30175
// begin _d := rand ( 0 , 5 ) ;
29982: LD_ADDR_VAR 0 11
29986: PUSH
29987: LD_INT 0
29989: PPUSH
29990: LD_INT 5
29992: PPUSH
29993: CALL_OW 12
29997: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29998: LD_ADDR_VAR 0 12
30002: PUSH
30003: LD_INT 2
30005: PPUSH
30006: LD_INT 6
30008: PPUSH
30009: CALL_OW 12
30013: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30014: LD_ADDR_VAR 0 9
30018: PUSH
30019: LD_VAR 0 2
30023: PPUSH
30024: LD_VAR 0 11
30028: PPUSH
30029: LD_VAR 0 12
30033: PPUSH
30034: CALL_OW 272
30038: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30039: LD_ADDR_VAR 0 10
30043: PUSH
30044: LD_VAR 0 3
30048: PPUSH
30049: LD_VAR 0 11
30053: PPUSH
30054: LD_VAR 0 12
30058: PPUSH
30059: CALL_OW 273
30063: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30064: LD_VAR 0 9
30068: PPUSH
30069: LD_VAR 0 10
30073: PPUSH
30074: CALL_OW 488
30078: PUSH
30079: LD_VAR 0 9
30083: PUSH
30084: LD_VAR 0 10
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_VAR 0 7
30097: IN
30098: NOT
30099: AND
30100: PUSH
30101: LD_VAR 0 9
30105: PPUSH
30106: LD_VAR 0 10
30110: PPUSH
30111: CALL_OW 458
30115: NOT
30116: AND
30117: IFFALSE 30159
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30119: LD_ADDR_VAR 0 7
30123: PUSH
30124: LD_VAR 0 7
30128: PPUSH
30129: LD_VAR 0 7
30133: PUSH
30134: LD_INT 1
30136: PLUS
30137: PPUSH
30138: LD_VAR 0 9
30142: PUSH
30143: LD_VAR 0 10
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PPUSH
30152: CALL_OW 1
30156: ST_TO_ADDR
30157: GO 30173
// i := i - 1 ;
30159: LD_ADDR_VAR 0 5
30163: PUSH
30164: LD_VAR 0 5
30168: PUSH
30169: LD_INT 1
30171: MINUS
30172: ST_TO_ADDR
// end ;
30173: GO 29979
30175: POP
30176: POP
// for i in tmp do
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_VAR 0 7
30186: PUSH
30187: FOR_IN
30188: IFFALSE 30226
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30190: LD_VAR 0 1
30194: PPUSH
30195: LD_VAR 0 5
30199: PUSH
30200: LD_INT 1
30202: ARRAY
30203: PPUSH
30204: LD_VAR 0 5
30208: PUSH
30209: LD_INT 2
30211: ARRAY
30212: PPUSH
30213: CALL 29168 0 3
30217: NOT
30218: IFFALSE 30224
// exit ;
30220: POP
30221: POP
30222: GO 30228
30224: GO 30187
30226: POP
30227: POP
// end ;
30228: LD_VAR 0 4
30232: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
// if not GetClass ( unit ) = class_sniper then
30242: LD_VAR 0 1
30246: PPUSH
30247: CALL_OW 257
30251: PUSH
30252: LD_INT 5
30254: EQUAL
30255: NOT
30256: IFFALSE 30260
// exit ;
30258: GO 30648
// dist := 8 ;
30260: LD_ADDR_VAR 0 5
30264: PUSH
30265: LD_INT 8
30267: ST_TO_ADDR
// viewRange := 12 ;
30268: LD_ADDR_VAR 0 7
30272: PUSH
30273: LD_INT 12
30275: ST_TO_ADDR
// side := GetSide ( unit ) ;
30276: LD_ADDR_VAR 0 6
30280: PUSH
30281: LD_VAR 0 1
30285: PPUSH
30286: CALL_OW 255
30290: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30291: LD_INT 61
30293: PPUSH
30294: LD_VAR 0 6
30298: PPUSH
30299: CALL_OW 321
30303: PUSH
30304: LD_INT 2
30306: EQUAL
30307: IFFALSE 30317
// viewRange := 16 ;
30309: LD_ADDR_VAR 0 7
30313: PUSH
30314: LD_INT 16
30316: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30317: LD_VAR 0 1
30321: PPUSH
30322: LD_VAR 0 2
30326: PPUSH
30327: LD_VAR 0 3
30331: PPUSH
30332: CALL_OW 297
30336: PUSH
30337: LD_VAR 0 5
30341: GREATER
30342: IFFALSE 30421
// begin ComMoveXY ( unit , x , y ) ;
30344: LD_VAR 0 1
30348: PPUSH
30349: LD_VAR 0 2
30353: PPUSH
30354: LD_VAR 0 3
30358: PPUSH
30359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30363: LD_INT 35
30365: PPUSH
30366: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30370: LD_VAR 0 1
30374: PPUSH
30375: LD_VAR 0 2
30379: PPUSH
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL 66196 0 3
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30648
// until GetDistUnitXY ( unit , x , y ) < dist ;
30394: LD_VAR 0 1
30398: PPUSH
30399: LD_VAR 0 2
30403: PPUSH
30404: LD_VAR 0 3
30408: PPUSH
30409: CALL_OW 297
30413: PUSH
30414: LD_VAR 0 5
30418: LESS
30419: IFFALSE 30363
// end ; ComTurnXY ( unit , x , y ) ;
30421: LD_VAR 0 1
30425: PPUSH
30426: LD_VAR 0 2
30430: PPUSH
30431: LD_VAR 0 3
30435: PPUSH
30436: CALL_OW 118
// wait ( 5 ) ;
30440: LD_INT 5
30442: PPUSH
30443: CALL_OW 67
// _d := GetDir ( unit ) ;
30447: LD_ADDR_VAR 0 10
30451: PUSH
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL_OW 254
30461: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30462: LD_ADDR_VAR 0 8
30466: PUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 250
30476: PPUSH
30477: LD_VAR 0 10
30481: PPUSH
30482: LD_VAR 0 5
30486: PPUSH
30487: CALL_OW 272
30491: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30492: LD_ADDR_VAR 0 9
30496: PUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 251
30506: PPUSH
30507: LD_VAR 0 10
30511: PPUSH
30512: LD_VAR 0 5
30516: PPUSH
30517: CALL_OW 273
30521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30522: LD_VAR 0 8
30526: PPUSH
30527: LD_VAR 0 9
30531: PPUSH
30532: CALL_OW 488
30536: NOT
30537: IFFALSE 30541
// exit ;
30539: GO 30648
// ComAnimCustom ( unit , 1 ) ;
30541: LD_VAR 0 1
30545: PPUSH
30546: LD_INT 1
30548: PPUSH
30549: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30553: LD_VAR 0 8
30557: PPUSH
30558: LD_VAR 0 9
30562: PPUSH
30563: LD_VAR 0 6
30567: PPUSH
30568: LD_VAR 0 7
30572: PPUSH
30573: CALL_OW 330
// repeat wait ( 1 ) ;
30577: LD_INT 1
30579: PPUSH
30580: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 316
30593: PUSH
30594: LD_VAR 0 1
30598: PPUSH
30599: CALL_OW 314
30603: OR
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 302
30614: NOT
30615: OR
30616: PUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 301
30626: OR
30627: IFFALSE 30577
// RemoveSeeing ( _x , _y , side ) ;
30629: LD_VAR 0 8
30633: PPUSH
30634: LD_VAR 0 9
30638: PPUSH
30639: LD_VAR 0 6
30643: PPUSH
30644: CALL_OW 331
// end ; end_of_file
30648: LD_VAR 0 4
30652: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30653: LD_INT 0
30655: PPUSH
30656: PPUSH
// if exist_mode then
30657: LD_VAR 0 2
30661: IFFALSE 30686
// unit := CreateCharacter ( prefix & ident ) else
30663: LD_ADDR_VAR 0 5
30667: PUSH
30668: LD_VAR 0 3
30672: PUSH
30673: LD_VAR 0 1
30677: STR
30678: PPUSH
30679: CALL_OW 34
30683: ST_TO_ADDR
30684: GO 30701
// unit := NewCharacter ( ident ) ;
30686: LD_ADDR_VAR 0 5
30690: PUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 25
30700: ST_TO_ADDR
// result := unit ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 5
30710: ST_TO_ADDR
// end ;
30711: LD_VAR 0 4
30715: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30716: LD_INT 0
30718: PPUSH
30719: PPUSH
// if not side or not nation then
30720: LD_VAR 0 1
30724: NOT
30725: PUSH
30726: LD_VAR 0 2
30730: NOT
30731: OR
30732: IFFALSE 30736
// exit ;
30734: GO 31504
// case nation of nation_american :
30736: LD_VAR 0 2
30740: PUSH
30741: LD_INT 1
30743: DOUBLE
30744: EQUAL
30745: IFTRUE 30749
30747: GO 30963
30749: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30750: LD_ADDR_VAR 0 4
30754: PUSH
30755: LD_INT 35
30757: PUSH
30758: LD_INT 45
30760: PUSH
30761: LD_INT 46
30763: PUSH
30764: LD_INT 47
30766: PUSH
30767: LD_INT 82
30769: PUSH
30770: LD_INT 83
30772: PUSH
30773: LD_INT 84
30775: PUSH
30776: LD_INT 85
30778: PUSH
30779: LD_INT 86
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: LD_INT 6
30790: PUSH
30791: LD_INT 15
30793: PUSH
30794: LD_INT 16
30796: PUSH
30797: LD_INT 7
30799: PUSH
30800: LD_INT 12
30802: PUSH
30803: LD_INT 13
30805: PUSH
30806: LD_INT 10
30808: PUSH
30809: LD_INT 14
30811: PUSH
30812: LD_INT 20
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 22
30820: PUSH
30821: LD_INT 25
30823: PUSH
30824: LD_INT 32
30826: PUSH
30827: LD_INT 27
30829: PUSH
30830: LD_INT 36
30832: PUSH
30833: LD_INT 69
30835: PUSH
30836: LD_INT 39
30838: PUSH
30839: LD_INT 34
30841: PUSH
30842: LD_INT 40
30844: PUSH
30845: LD_INT 48
30847: PUSH
30848: LD_INT 49
30850: PUSH
30851: LD_INT 50
30853: PUSH
30854: LD_INT 51
30856: PUSH
30857: LD_INT 52
30859: PUSH
30860: LD_INT 53
30862: PUSH
30863: LD_INT 54
30865: PUSH
30866: LD_INT 55
30868: PUSH
30869: LD_INT 56
30871: PUSH
30872: LD_INT 57
30874: PUSH
30875: LD_INT 58
30877: PUSH
30878: LD_INT 59
30880: PUSH
30881: LD_INT 60
30883: PUSH
30884: LD_INT 61
30886: PUSH
30887: LD_INT 62
30889: PUSH
30890: LD_INT 80
30892: PUSH
30893: LD_INT 82
30895: PUSH
30896: LD_INT 83
30898: PUSH
30899: LD_INT 84
30901: PUSH
30902: LD_INT 85
30904: PUSH
30905: LD_INT 86
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
30961: GO 31428
30963: LD_INT 2
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 31197
30971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30972: LD_ADDR_VAR 0 4
30976: PUSH
30977: LD_INT 35
30979: PUSH
30980: LD_INT 45
30982: PUSH
30983: LD_INT 46
30985: PUSH
30986: LD_INT 47
30988: PUSH
30989: LD_INT 82
30991: PUSH
30992: LD_INT 83
30994: PUSH
30995: LD_INT 84
30997: PUSH
30998: LD_INT 85
31000: PUSH
31001: LD_INT 87
31003: PUSH
31004: LD_INT 70
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 11
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 4
31018: PUSH
31019: LD_INT 5
31021: PUSH
31022: LD_INT 6
31024: PUSH
31025: LD_INT 15
31027: PUSH
31028: LD_INT 18
31030: PUSH
31031: LD_INT 7
31033: PUSH
31034: LD_INT 17
31036: PUSH
31037: LD_INT 8
31039: PUSH
31040: LD_INT 20
31042: PUSH
31043: LD_INT 21
31045: PUSH
31046: LD_INT 22
31048: PUSH
31049: LD_INT 72
31051: PUSH
31052: LD_INT 26
31054: PUSH
31055: LD_INT 69
31057: PUSH
31058: LD_INT 39
31060: PUSH
31061: LD_INT 40
31063: PUSH
31064: LD_INT 41
31066: PUSH
31067: LD_INT 42
31069: PUSH
31070: LD_INT 43
31072: PUSH
31073: LD_INT 48
31075: PUSH
31076: LD_INT 49
31078: PUSH
31079: LD_INT 50
31081: PUSH
31082: LD_INT 51
31084: PUSH
31085: LD_INT 52
31087: PUSH
31088: LD_INT 53
31090: PUSH
31091: LD_INT 54
31093: PUSH
31094: LD_INT 55
31096: PUSH
31097: LD_INT 56
31099: PUSH
31100: LD_INT 60
31102: PUSH
31103: LD_INT 61
31105: PUSH
31106: LD_INT 62
31108: PUSH
31109: LD_INT 66
31111: PUSH
31112: LD_INT 67
31114: PUSH
31115: LD_INT 68
31117: PUSH
31118: LD_INT 81
31120: PUSH
31121: LD_INT 82
31123: PUSH
31124: LD_INT 83
31126: PUSH
31127: LD_INT 84
31129: PUSH
31130: LD_INT 85
31132: PUSH
31133: LD_INT 87
31135: PUSH
31136: LD_INT 88
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
31195: GO 31428
31197: LD_INT 3
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31205
31203: GO 31427
31205: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31206: LD_ADDR_VAR 0 4
31210: PUSH
31211: LD_INT 46
31213: PUSH
31214: LD_INT 47
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: LD_INT 2
31222: PUSH
31223: LD_INT 82
31225: PUSH
31226: LD_INT 83
31228: PUSH
31229: LD_INT 84
31231: PUSH
31232: LD_INT 85
31234: PUSH
31235: LD_INT 86
31237: PUSH
31238: LD_INT 11
31240: PUSH
31241: LD_INT 9
31243: PUSH
31244: LD_INT 20
31246: PUSH
31247: LD_INT 19
31249: PUSH
31250: LD_INT 21
31252: PUSH
31253: LD_INT 24
31255: PUSH
31256: LD_INT 22
31258: PUSH
31259: LD_INT 25
31261: PUSH
31262: LD_INT 28
31264: PUSH
31265: LD_INT 29
31267: PUSH
31268: LD_INT 30
31270: PUSH
31271: LD_INT 31
31273: PUSH
31274: LD_INT 37
31276: PUSH
31277: LD_INT 38
31279: PUSH
31280: LD_INT 32
31282: PUSH
31283: LD_INT 27
31285: PUSH
31286: LD_INT 33
31288: PUSH
31289: LD_INT 69
31291: PUSH
31292: LD_INT 39
31294: PUSH
31295: LD_INT 34
31297: PUSH
31298: LD_INT 40
31300: PUSH
31301: LD_INT 71
31303: PUSH
31304: LD_INT 23
31306: PUSH
31307: LD_INT 44
31309: PUSH
31310: LD_INT 48
31312: PUSH
31313: LD_INT 49
31315: PUSH
31316: LD_INT 50
31318: PUSH
31319: LD_INT 51
31321: PUSH
31322: LD_INT 52
31324: PUSH
31325: LD_INT 53
31327: PUSH
31328: LD_INT 54
31330: PUSH
31331: LD_INT 55
31333: PUSH
31334: LD_INT 56
31336: PUSH
31337: LD_INT 57
31339: PUSH
31340: LD_INT 58
31342: PUSH
31343: LD_INT 59
31345: PUSH
31346: LD_INT 63
31348: PUSH
31349: LD_INT 64
31351: PUSH
31352: LD_INT 65
31354: PUSH
31355: LD_INT 82
31357: PUSH
31358: LD_INT 83
31360: PUSH
31361: LD_INT 84
31363: PUSH
31364: LD_INT 85
31366: PUSH
31367: LD_INT 86
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
31425: GO 31428
31427: POP
// if state > - 1 and state < 3 then
31428: LD_VAR 0 3
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: GREATER
31437: PUSH
31438: LD_VAR 0 3
31442: PUSH
31443: LD_INT 3
31445: LESS
31446: AND
31447: IFFALSE 31504
// for i in result do
31449: LD_ADDR_VAR 0 5
31453: PUSH
31454: LD_VAR 0 4
31458: PUSH
31459: FOR_IN
31460: IFFALSE 31502
// if GetTech ( i , side ) <> state then
31462: LD_VAR 0 5
31466: PPUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 321
31476: PUSH
31477: LD_VAR 0 3
31481: NONEQUAL
31482: IFFALSE 31500
// result := result diff i ;
31484: LD_ADDR_VAR 0 4
31488: PUSH
31489: LD_VAR 0 4
31493: PUSH
31494: LD_VAR 0 5
31498: DIFF
31499: ST_TO_ADDR
31500: GO 31459
31502: POP
31503: POP
// end ;
31504: LD_VAR 0 4
31508: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31509: LD_INT 0
31511: PPUSH
31512: PPUSH
31513: PPUSH
// result := true ;
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: LD_INT 1
31521: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31522: LD_ADDR_VAR 0 5
31526: PUSH
31527: LD_VAR 0 2
31531: PPUSH
31532: CALL_OW 480
31536: ST_TO_ADDR
// if not tmp then
31537: LD_VAR 0 5
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31595
// for i in tmp do
31546: LD_ADDR_VAR 0 4
31550: PUSH
31551: LD_VAR 0 5
31555: PUSH
31556: FOR_IN
31557: IFFALSE 31593
// if GetTech ( i , side ) <> state_researched then
31559: LD_VAR 0 4
31563: PPUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 321
31573: PUSH
31574: LD_INT 2
31576: NONEQUAL
31577: IFFALSE 31591
// begin result := false ;
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_INT 0
31586: ST_TO_ADDR
// exit ;
31587: POP
31588: POP
31589: GO 31595
// end ;
31591: GO 31556
31593: POP
31594: POP
// end ;
31595: LD_VAR 0 3
31599: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31600: LD_INT 0
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31615: LD_VAR 0 1
31619: NOT
31620: PUSH
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 257
31630: PUSH
31631: LD_INT 9
31633: NONEQUAL
31634: OR
31635: IFFALSE 31639
// exit ;
31637: GO 32212
// side := GetSide ( unit ) ;
31639: LD_ADDR_VAR 0 9
31643: PUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 255
31653: ST_TO_ADDR
// tech_space := tech_spacanom ;
31654: LD_ADDR_VAR 0 12
31658: PUSH
31659: LD_INT 29
31661: ST_TO_ADDR
// tech_time := tech_taurad ;
31662: LD_ADDR_VAR 0 13
31666: PUSH
31667: LD_INT 28
31669: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31670: LD_ADDR_VAR 0 11
31674: PUSH
31675: LD_VAR 0 1
31679: PPUSH
31680: CALL_OW 310
31684: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31685: LD_VAR 0 11
31689: PPUSH
31690: CALL_OW 247
31694: PUSH
31695: LD_INT 2
31697: EQUAL
31698: IFFALSE 31702
// exit ;
31700: GO 32212
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31702: LD_ADDR_VAR 0 8
31706: PUSH
31707: LD_INT 81
31709: PUSH
31710: LD_VAR 0 9
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: LD_INT 21
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 69
31744: ST_TO_ADDR
// if not tmp then
31745: LD_VAR 0 8
31749: NOT
31750: IFFALSE 31754
// exit ;
31752: GO 32212
// if in_unit then
31754: LD_VAR 0 11
31758: IFFALSE 31782
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31760: LD_ADDR_VAR 0 10
31764: PUSH
31765: LD_VAR 0 8
31769: PPUSH
31770: LD_VAR 0 11
31774: PPUSH
31775: CALL_OW 74
31779: ST_TO_ADDR
31780: GO 31802
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31782: LD_ADDR_VAR 0 10
31786: PUSH
31787: LD_VAR 0 8
31791: PPUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 74
31801: ST_TO_ADDR
// if not enemy then
31802: LD_VAR 0 10
31806: NOT
31807: IFFALSE 31811
// exit ;
31809: GO 32212
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31811: LD_VAR 0 11
31815: PUSH
31816: LD_VAR 0 11
31820: PPUSH
31821: LD_VAR 0 10
31825: PPUSH
31826: CALL_OW 296
31830: PUSH
31831: LD_INT 13
31833: GREATER
31834: AND
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: LD_VAR 0 10
31845: PPUSH
31846: CALL_OW 296
31850: PUSH
31851: LD_INT 12
31853: GREATER
31854: OR
31855: IFFALSE 31859
// exit ;
31857: GO 32212
// missile := [ 1 ] ;
31859: LD_ADDR_VAR 0 14
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31870: LD_VAR 0 9
31874: PPUSH
31875: LD_VAR 0 12
31879: PPUSH
31880: CALL_OW 325
31884: IFFALSE 31913
// missile := Insert ( missile , missile + 1 , 2 ) ;
31886: LD_ADDR_VAR 0 14
31890: PUSH
31891: LD_VAR 0 14
31895: PPUSH
31896: LD_VAR 0 14
31900: PUSH
31901: LD_INT 1
31903: PLUS
31904: PPUSH
31905: LD_INT 2
31907: PPUSH
31908: CALL_OW 2
31912: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31913: LD_VAR 0 9
31917: PPUSH
31918: LD_VAR 0 13
31922: PPUSH
31923: CALL_OW 325
31927: PUSH
31928: LD_VAR 0 10
31932: PPUSH
31933: CALL_OW 255
31937: PPUSH
31938: LD_VAR 0 13
31942: PPUSH
31943: CALL_OW 325
31947: NOT
31948: AND
31949: IFFALSE 31978
// missile := Insert ( missile , missile + 1 , 3 ) ;
31951: LD_ADDR_VAR 0 14
31955: PUSH
31956: LD_VAR 0 14
31960: PPUSH
31961: LD_VAR 0 14
31965: PUSH
31966: LD_INT 1
31968: PLUS
31969: PPUSH
31970: LD_INT 3
31972: PPUSH
31973: CALL_OW 2
31977: ST_TO_ADDR
// if missile < 2 then
31978: LD_VAR 0 14
31982: PUSH
31983: LD_INT 2
31985: LESS
31986: IFFALSE 31990
// exit ;
31988: GO 32212
// x := GetX ( enemy ) ;
31990: LD_ADDR_VAR 0 4
31994: PUSH
31995: LD_VAR 0 10
31999: PPUSH
32000: CALL_OW 250
32004: ST_TO_ADDR
// y := GetY ( enemy ) ;
32005: LD_ADDR_VAR 0 5
32009: PUSH
32010: LD_VAR 0 10
32014: PPUSH
32015: CALL_OW 251
32019: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32020: LD_ADDR_VAR 0 6
32024: PUSH
32025: LD_VAR 0 4
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PPUSH
32034: LD_INT 1
32036: PPUSH
32037: CALL_OW 12
32041: PLUS
32042: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32043: LD_ADDR_VAR 0 7
32047: PUSH
32048: LD_VAR 0 5
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PPUSH
32057: LD_INT 1
32059: PPUSH
32060: CALL_OW 12
32064: PLUS
32065: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32066: LD_VAR 0 6
32070: PPUSH
32071: LD_VAR 0 7
32075: PPUSH
32076: CALL_OW 488
32080: NOT
32081: IFFALSE 32103
// begin _x := x ;
32083: LD_ADDR_VAR 0 6
32087: PUSH
32088: LD_VAR 0 4
32092: ST_TO_ADDR
// _y := y ;
32093: LD_ADDR_VAR 0 7
32097: PUSH
32098: LD_VAR 0 5
32102: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_INT 1
32110: PPUSH
32111: LD_VAR 0 14
32115: PPUSH
32116: CALL_OW 12
32120: ST_TO_ADDR
// case i of 1 :
32121: LD_VAR 0 3
32125: PUSH
32126: LD_INT 1
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32151
32134: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32135: LD_VAR 0 1
32139: PPUSH
32140: LD_VAR 0 10
32144: PPUSH
32145: CALL_OW 115
32149: GO 32212
32151: LD_INT 2
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32159
32157: GO 32181
32159: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32160: LD_VAR 0 1
32164: PPUSH
32165: LD_VAR 0 6
32169: PPUSH
32170: LD_VAR 0 7
32174: PPUSH
32175: CALL_OW 153
32179: GO 32212
32181: LD_INT 3
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32211
32189: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32190: LD_VAR 0 1
32194: PPUSH
32195: LD_VAR 0 6
32199: PPUSH
32200: LD_VAR 0 7
32204: PPUSH
32205: CALL_OW 154
32209: GO 32212
32211: POP
// end ;
32212: LD_VAR 0 2
32216: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32217: LD_INT 0
32219: PPUSH
32220: PPUSH
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
// if not unit or not building then
32225: LD_VAR 0 1
32229: NOT
32230: PUSH
32231: LD_VAR 0 2
32235: NOT
32236: OR
32237: IFFALSE 32241
// exit ;
32239: GO 32399
// x := GetX ( building ) ;
32241: LD_ADDR_VAR 0 5
32245: PUSH
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 250
32255: ST_TO_ADDR
// y := GetY ( building ) ;
32256: LD_ADDR_VAR 0 6
32260: PUSH
32261: LD_VAR 0 2
32265: PPUSH
32266: CALL_OW 251
32270: ST_TO_ADDR
// for i = 0 to 5 do
32271: LD_ADDR_VAR 0 4
32275: PUSH
32276: DOUBLE
32277: LD_INT 0
32279: DEC
32280: ST_TO_ADDR
32281: LD_INT 5
32283: PUSH
32284: FOR_TO
32285: IFFALSE 32397
// begin _x := ShiftX ( x , i , 3 ) ;
32287: LD_ADDR_VAR 0 7
32291: PUSH
32292: LD_VAR 0 5
32296: PPUSH
32297: LD_VAR 0 4
32301: PPUSH
32302: LD_INT 3
32304: PPUSH
32305: CALL_OW 272
32309: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32310: LD_ADDR_VAR 0 8
32314: PUSH
32315: LD_VAR 0 6
32319: PPUSH
32320: LD_VAR 0 4
32324: PPUSH
32325: LD_INT 3
32327: PPUSH
32328: CALL_OW 273
32332: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32333: LD_VAR 0 7
32337: PPUSH
32338: LD_VAR 0 8
32342: PPUSH
32343: CALL_OW 488
32347: NOT
32348: IFFALSE 32352
// continue ;
32350: GO 32284
// if HexInfo ( _x , _y ) = 0 then
32352: LD_VAR 0 7
32356: PPUSH
32357: LD_VAR 0 8
32361: PPUSH
32362: CALL_OW 428
32366: PUSH
32367: LD_INT 0
32369: EQUAL
32370: IFFALSE 32395
// begin ComMoveXY ( unit , _x , _y ) ;
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_VAR 0 7
32381: PPUSH
32382: LD_VAR 0 8
32386: PPUSH
32387: CALL_OW 111
// exit ;
32391: POP
32392: POP
32393: GO 32399
// end ; end ;
32395: GO 32284
32397: POP
32398: POP
// end ;
32399: LD_VAR 0 3
32403: RET
// export function ScanBase ( side , base_area ) ; begin
32404: LD_INT 0
32406: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_VAR 0 2
32416: PPUSH
32417: LD_INT 81
32419: PUSH
32420: LD_VAR 0 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PPUSH
32429: CALL_OW 70
32433: ST_TO_ADDR
// end ;
32434: LD_VAR 0 3
32438: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32439: LD_INT 0
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
// result := false ;
32445: LD_ADDR_VAR 0 2
32449: PUSH
32450: LD_INT 0
32452: ST_TO_ADDR
// side := GetSide ( unit ) ;
32453: LD_ADDR_VAR 0 3
32457: PUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: CALL_OW 255
32467: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32468: LD_ADDR_VAR 0 4
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 248
32482: ST_TO_ADDR
// case nat of 1 :
32483: LD_VAR 0 4
32487: PUSH
32488: LD_INT 1
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32496
32494: GO 32507
32496: POP
// tech := tech_lassight ; 2 :
32497: LD_ADDR_VAR 0 5
32501: PUSH
32502: LD_INT 12
32504: ST_TO_ADDR
32505: GO 32546
32507: LD_INT 2
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32526
32515: POP
// tech := tech_mortar ; 3 :
32516: LD_ADDR_VAR 0 5
32520: PUSH
32521: LD_INT 41
32523: ST_TO_ADDR
32524: GO 32546
32526: LD_INT 3
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32545
32534: POP
// tech := tech_bazooka ; end ;
32535: LD_ADDR_VAR 0 5
32539: PUSH
32540: LD_INT 44
32542: ST_TO_ADDR
32543: GO 32546
32545: POP
// if Researched ( side , tech ) then
32546: LD_VAR 0 3
32550: PPUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: CALL_OW 325
32560: IFFALSE 32587
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32562: LD_ADDR_VAR 0 2
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: LD_INT 8
32572: PUSH
32573: LD_INT 9
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: PUSH
32581: LD_VAR 0 4
32585: ARRAY
32586: ST_TO_ADDR
// end ;
32587: LD_VAR 0 2
32591: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32592: LD_INT 0
32594: PPUSH
32595: PPUSH
32596: PPUSH
// if not mines then
32597: LD_VAR 0 2
32601: NOT
32602: IFFALSE 32606
// exit ;
32604: GO 32750
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32606: LD_ADDR_VAR 0 5
32610: PUSH
32611: LD_INT 81
32613: PUSH
32614: LD_VAR 0 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 21
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PPUSH
32644: CALL_OW 69
32648: ST_TO_ADDR
// for i in mines do
32649: LD_ADDR_VAR 0 4
32653: PUSH
32654: LD_VAR 0 2
32658: PUSH
32659: FOR_IN
32660: IFFALSE 32748
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32662: LD_VAR 0 4
32666: PUSH
32667: LD_INT 1
32669: ARRAY
32670: PPUSH
32671: LD_VAR 0 4
32675: PUSH
32676: LD_INT 2
32678: ARRAY
32679: PPUSH
32680: CALL_OW 458
32684: NOT
32685: IFFALSE 32689
// continue ;
32687: GO 32659
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32689: LD_VAR 0 4
32693: PUSH
32694: LD_INT 1
32696: ARRAY
32697: PPUSH
32698: LD_VAR 0 4
32702: PUSH
32703: LD_INT 2
32705: ARRAY
32706: PPUSH
32707: CALL_OW 428
32711: PUSH
32712: LD_VAR 0 5
32716: IN
32717: IFFALSE 32746
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32719: LD_VAR 0 4
32723: PUSH
32724: LD_INT 1
32726: ARRAY
32727: PPUSH
32728: LD_VAR 0 4
32732: PUSH
32733: LD_INT 2
32735: ARRAY
32736: PPUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 456
// end ;
32746: GO 32659
32748: POP
32749: POP
// end ;
32750: LD_VAR 0 3
32754: RET
// export function Count ( array ) ; var i ; begin
32755: LD_INT 0
32757: PPUSH
32758: PPUSH
// result := 0 ;
32759: LD_ADDR_VAR 0 2
32763: PUSH
32764: LD_INT 0
32766: ST_TO_ADDR
// for i in array do
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: LD_VAR 0 1
32776: PUSH
32777: FOR_IN
32778: IFFALSE 32802
// if i then
32780: LD_VAR 0 3
32784: IFFALSE 32800
// result := result + 1 ;
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_VAR 0 2
32795: PUSH
32796: LD_INT 1
32798: PLUS
32799: ST_TO_ADDR
32800: GO 32777
32802: POP
32803: POP
// end ;
32804: LD_VAR 0 2
32808: RET
// export function IsEmpty ( building ) ; begin
32809: LD_INT 0
32811: PPUSH
// if not building then
32812: LD_VAR 0 1
32816: NOT
32817: IFFALSE 32821
// exit ;
32819: GO 32864
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32821: LD_ADDR_VAR 0 2
32825: PUSH
32826: LD_VAR 0 1
32830: PUSH
32831: LD_INT 22
32833: PUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: CALL_OW 255
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 58
32850: PUSH
32851: EMPTY
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PPUSH
32858: CALL_OW 69
32862: IN
32863: ST_TO_ADDR
// end ;
32864: LD_VAR 0 2
32868: RET
// export function IsNotFull ( building ) ; begin
32869: LD_INT 0
32871: PPUSH
// if not building then
32872: LD_VAR 0 1
32876: NOT
32877: IFFALSE 32881
// exit ;
32879: GO 32900
// result := UnitsInside ( building ) < 6 ;
32881: LD_ADDR_VAR 0 2
32885: PUSH
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 313
32895: PUSH
32896: LD_INT 6
32898: LESS
32899: ST_TO_ADDR
// end ;
32900: LD_VAR 0 2
32904: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32905: LD_INT 0
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
// tmp := [ ] ;
32911: LD_ADDR_VAR 0 3
32915: PUSH
32916: EMPTY
32917: ST_TO_ADDR
// list := [ ] ;
32918: LD_ADDR_VAR 0 5
32922: PUSH
32923: EMPTY
32924: ST_TO_ADDR
// for i = 16 to 25 do
32925: LD_ADDR_VAR 0 4
32929: PUSH
32930: DOUBLE
32931: LD_INT 16
32933: DEC
32934: ST_TO_ADDR
32935: LD_INT 25
32937: PUSH
32938: FOR_TO
32939: IFFALSE 33012
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_VAR 0 3
32950: PUSH
32951: LD_INT 22
32953: PUSH
32954: LD_VAR 0 1
32958: PPUSH
32959: CALL_OW 255
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 91
32970: PUSH
32971: LD_VAR 0 1
32975: PUSH
32976: LD_INT 6
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 30
32986: PUSH
32987: LD_VAR 0 4
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: PPUSH
33004: CALL_OW 69
33008: ADD
33009: ST_TO_ADDR
33010: GO 32938
33012: POP
33013: POP
// for i = 1 to tmp do
33014: LD_ADDR_VAR 0 4
33018: PUSH
33019: DOUBLE
33020: LD_INT 1
33022: DEC
33023: ST_TO_ADDR
33024: LD_VAR 0 3
33028: PUSH
33029: FOR_TO
33030: IFFALSE 33118
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33032: LD_ADDR_VAR 0 5
33036: PUSH
33037: LD_VAR 0 5
33041: PUSH
33042: LD_VAR 0 3
33046: PUSH
33047: LD_VAR 0 4
33051: ARRAY
33052: PPUSH
33053: CALL_OW 266
33057: PUSH
33058: LD_VAR 0 3
33062: PUSH
33063: LD_VAR 0 4
33067: ARRAY
33068: PPUSH
33069: CALL_OW 250
33073: PUSH
33074: LD_VAR 0 3
33078: PUSH
33079: LD_VAR 0 4
33083: ARRAY
33084: PPUSH
33085: CALL_OW 251
33089: PUSH
33090: LD_VAR 0 3
33094: PUSH
33095: LD_VAR 0 4
33099: ARRAY
33100: PPUSH
33101: CALL_OW 254
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: PUSH
33112: EMPTY
33113: LIST
33114: ADD
33115: ST_TO_ADDR
33116: GO 33029
33118: POP
33119: POP
// result := list ;
33120: LD_ADDR_VAR 0 2
33124: PUSH
33125: LD_VAR 0 5
33129: ST_TO_ADDR
// end ;
33130: LD_VAR 0 2
33134: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
33143: PPUSH
// if not factory then
33144: LD_VAR 0 1
33148: NOT
33149: IFFALSE 33153
// exit ;
33151: GO 33746
// if control = control_apeman then
33153: LD_VAR 0 4
33157: PUSH
33158: LD_INT 5
33160: EQUAL
33161: IFFALSE 33270
// begin tmp := UnitsInside ( factory ) ;
33163: LD_ADDR_VAR 0 8
33167: PUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: CALL_OW 313
33177: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33178: LD_VAR 0 8
33182: PPUSH
33183: LD_INT 25
33185: PUSH
33186: LD_INT 12
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PPUSH
33193: CALL_OW 72
33197: NOT
33198: IFFALSE 33208
// control := control_manual ;
33200: LD_ADDR_VAR 0 4
33204: PUSH
33205: LD_INT 1
33207: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33208: LD_ADDR_VAR 0 8
33212: PUSH
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL 32905 0 1
33222: ST_TO_ADDR
// if tmp then
33223: LD_VAR 0 8
33227: IFFALSE 33270
// begin for i in tmp do
33229: LD_ADDR_VAR 0 7
33233: PUSH
33234: LD_VAR 0 8
33238: PUSH
33239: FOR_IN
33240: IFFALSE 33268
// if i [ 1 ] = b_ext_radio then
33242: LD_VAR 0 7
33246: PUSH
33247: LD_INT 1
33249: ARRAY
33250: PUSH
33251: LD_INT 22
33253: EQUAL
33254: IFFALSE 33266
// begin control := control_remote ;
33256: LD_ADDR_VAR 0 4
33260: PUSH
33261: LD_INT 2
33263: ST_TO_ADDR
// break ;
33264: GO 33268
// end ;
33266: GO 33239
33268: POP
33269: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33270: LD_VAR 0 1
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: LD_VAR 0 4
33289: PPUSH
33290: LD_VAR 0 5
33294: PPUSH
33295: CALL_OW 448
33299: IFFALSE 33334
// begin result := [ chassis , engine , control , weapon ] ;
33301: LD_ADDR_VAR 0 6
33305: PUSH
33306: LD_VAR 0 2
33310: PUSH
33311: LD_VAR 0 3
33315: PUSH
33316: LD_VAR 0 4
33320: PUSH
33321: LD_VAR 0 5
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
// exit ;
33332: GO 33746
// end ; _chassis := AvailableChassisList ( factory ) ;
33334: LD_ADDR_VAR 0 9
33338: PUSH
33339: LD_VAR 0 1
33343: PPUSH
33344: CALL_OW 475
33348: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33349: LD_ADDR_VAR 0 11
33353: PUSH
33354: LD_VAR 0 1
33358: PPUSH
33359: CALL_OW 476
33363: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33364: LD_ADDR_VAR 0 12
33368: PUSH
33369: LD_VAR 0 1
33373: PPUSH
33374: CALL_OW 477
33378: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33379: LD_ADDR_VAR 0 10
33383: PUSH
33384: LD_VAR 0 1
33388: PPUSH
33389: CALL_OW 478
33393: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33394: LD_VAR 0 9
33398: NOT
33399: PUSH
33400: LD_VAR 0 11
33404: NOT
33405: OR
33406: PUSH
33407: LD_VAR 0 12
33411: NOT
33412: OR
33413: PUSH
33414: LD_VAR 0 10
33418: NOT
33419: OR
33420: IFFALSE 33455
// begin result := [ chassis , engine , control , weapon ] ;
33422: LD_ADDR_VAR 0 6
33426: PUSH
33427: LD_VAR 0 2
33431: PUSH
33432: LD_VAR 0 3
33436: PUSH
33437: LD_VAR 0 4
33441: PUSH
33442: LD_VAR 0 5
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// exit ;
33453: GO 33746
// end ; if not chassis in _chassis then
33455: LD_VAR 0 2
33459: PUSH
33460: LD_VAR 0 9
33464: IN
33465: NOT
33466: IFFALSE 33492
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 9
33477: PUSH
33478: LD_INT 1
33480: PPUSH
33481: LD_VAR 0 9
33485: PPUSH
33486: CALL_OW 12
33490: ARRAY
33491: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33492: LD_VAR 0 2
33496: PPUSH
33497: LD_VAR 0 3
33501: PPUSH
33502: CALL 33751 0 2
33506: NOT
33507: IFFALSE 33566
// repeat engine := _engine [ 1 ] ;
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_VAR 0 11
33518: PUSH
33519: LD_INT 1
33521: ARRAY
33522: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33523: LD_ADDR_VAR 0 11
33527: PUSH
33528: LD_VAR 0 11
33532: PPUSH
33533: LD_INT 1
33535: PPUSH
33536: CALL_OW 3
33540: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_VAR 0 3
33550: PPUSH
33551: CALL 33751 0 2
33555: PUSH
33556: LD_VAR 0 11
33560: PUSH
33561: EMPTY
33562: EQUAL
33563: OR
33564: IFFALSE 33509
// if not control in _control then
33566: LD_VAR 0 4
33570: PUSH
33571: LD_VAR 0 12
33575: IN
33576: NOT
33577: IFFALSE 33603
// control := _control [ rand ( 1 , _control ) ] ;
33579: LD_ADDR_VAR 0 4
33583: PUSH
33584: LD_VAR 0 12
33588: PUSH
33589: LD_INT 1
33591: PPUSH
33592: LD_VAR 0 12
33596: PPUSH
33597: CALL_OW 12
33601: ARRAY
33602: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33603: LD_VAR 0 2
33607: PPUSH
33608: LD_VAR 0 5
33612: PPUSH
33613: CALL 33971 0 2
33617: NOT
33618: IFFALSE 33677
// repeat weapon := _weapon [ 1 ] ;
33620: LD_ADDR_VAR 0 5
33624: PUSH
33625: LD_VAR 0 10
33629: PUSH
33630: LD_INT 1
33632: ARRAY
33633: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33634: LD_ADDR_VAR 0 10
33638: PUSH
33639: LD_VAR 0 10
33643: PPUSH
33644: LD_INT 1
33646: PPUSH
33647: CALL_OW 3
33651: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33652: LD_VAR 0 2
33656: PPUSH
33657: LD_VAR 0 5
33661: PPUSH
33662: CALL 33971 0 2
33666: PUSH
33667: LD_VAR 0 10
33671: PUSH
33672: EMPTY
33673: EQUAL
33674: OR
33675: IFFALSE 33620
// result := [ ] ;
33677: LD_ADDR_VAR 0 6
33681: PUSH
33682: EMPTY
33683: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33684: LD_VAR 0 1
33688: PPUSH
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_VAR 0 4
33703: PPUSH
33704: LD_VAR 0 5
33708: PPUSH
33709: CALL_OW 448
33713: IFFALSE 33746
// result := [ chassis , engine , control , weapon ] ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: LD_VAR 0 2
33724: PUSH
33725: LD_VAR 0 3
33729: PUSH
33730: LD_VAR 0 4
33734: PUSH
33735: LD_VAR 0 5
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
// end ;
33746: LD_VAR 0 6
33750: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33751: LD_INT 0
33753: PPUSH
// if not chassis or not engine then
33754: LD_VAR 0 1
33758: NOT
33759: PUSH
33760: LD_VAR 0 2
33764: NOT
33765: OR
33766: IFFALSE 33770
// exit ;
33768: GO 33966
// case engine of engine_solar :
33770: LD_VAR 0 2
33774: PUSH
33775: LD_INT 2
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33821
33783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_INT 11
33791: PUSH
33792: LD_INT 12
33794: PUSH
33795: LD_INT 13
33797: PUSH
33798: LD_INT 14
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
33819: GO 33950
33821: LD_INT 1
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33891
33829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 11
33837: PUSH
33838: LD_INT 12
33840: PUSH
33841: LD_INT 13
33843: PUSH
33844: LD_INT 14
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: LD_INT 4
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 21
33864: PUSH
33865: LD_INT 23
33867: PUSH
33868: LD_INT 22
33870: PUSH
33871: LD_INT 24
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
33889: GO 33950
33891: LD_INT 3
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33949
33899: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_INT 13
33907: PUSH
33908: LD_INT 14
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: LD_INT 21
33925: PUSH
33926: LD_INT 22
33928: PUSH
33929: LD_INT 23
33931: PUSH
33932: LD_INT 24
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
33947: GO 33950
33949: POP
// result := ( chassis in result ) ;
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: LD_VAR 0 1
33959: PUSH
33960: LD_VAR 0 3
33964: IN
33965: ST_TO_ADDR
// end ;
33966: LD_VAR 0 3
33970: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33971: LD_INT 0
33973: PPUSH
// if not chassis or not weapon then
33974: LD_VAR 0 1
33978: NOT
33979: PUSH
33980: LD_VAR 0 2
33984: NOT
33985: OR
33986: IFFALSE 33990
// exit ;
33988: GO 35052
// case weapon of us_machine_gun :
33990: LD_VAR 0 2
33994: PUSH
33995: LD_INT 2
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34003
34001: GO 34033
34003: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34004: LD_ADDR_VAR 0 3
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
34031: GO 35036
34033: LD_INT 3
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34071
34041: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 5
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: ST_TO_ADDR
34069: GO 35036
34071: LD_INT 11
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34109
34079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 5
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
34107: GO 35036
34109: LD_INT 4
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34143
34117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34118: LD_ADDR_VAR 0 3
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: LD_INT 4
34131: PUSH
34132: LD_INT 5
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 35036
34143: LD_INT 5
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34177
34151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: LD_INT 4
34165: PUSH
34166: LD_INT 5
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: ST_TO_ADDR
34175: GO 35036
34177: LD_INT 9
34179: DOUBLE
34180: EQUAL
34181: IFTRUE 34185
34183: GO 34211
34185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34186: LD_ADDR_VAR 0 3
34190: PUSH
34191: LD_INT 2
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
34209: GO 35036
34211: LD_INT 7
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34245
34219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: LD_INT 4
34233: PUSH
34234: LD_INT 5
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
34243: GO 35036
34245: LD_INT 12
34247: DOUBLE
34248: EQUAL
34249: IFTRUE 34253
34251: GO 34279
34253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 35036
34279: LD_INT 13
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34313
34287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34288: LD_ADDR_VAR 0 3
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 3
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: LD_INT 5
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 35036
34313: LD_INT 14
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34339
34321: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 4
34329: PUSH
34330: LD_INT 5
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: ST_TO_ADDR
34337: GO 35036
34339: LD_INT 6
34341: DOUBLE
34342: EQUAL
34343: IFTRUE 34347
34345: GO 34365
34347: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34348: LD_ADDR_VAR 0 3
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 5
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: ST_TO_ADDR
34363: GO 35036
34365: LD_INT 10
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34391
34373: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_INT 4
34381: PUSH
34382: LD_INT 5
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: ST_TO_ADDR
34389: GO 35036
34391: LD_INT 22
34393: DOUBLE
34394: EQUAL
34395: IFTRUE 34399
34397: GO 34425
34399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 11
34407: PUSH
34408: LD_INT 12
34410: PUSH
34411: LD_INT 13
34413: PUSH
34414: LD_INT 14
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
34423: GO 35036
34425: LD_INT 23
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34433
34431: GO 34459
34433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34434: LD_ADDR_VAR 0 3
34438: PUSH
34439: LD_INT 11
34441: PUSH
34442: LD_INT 12
34444: PUSH
34445: LD_INT 13
34447: PUSH
34448: LD_INT 14
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: ST_TO_ADDR
34457: GO 35036
34459: LD_INT 24
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34467
34465: GO 34493
34467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34468: LD_ADDR_VAR 0 3
34472: PUSH
34473: LD_INT 11
34475: PUSH
34476: LD_INT 12
34478: PUSH
34479: LD_INT 13
34481: PUSH
34482: LD_INT 14
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
34491: GO 35036
34493: LD_INT 30
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34501
34499: GO 34527
34501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: LD_INT 11
34509: PUSH
34510: LD_INT 12
34512: PUSH
34513: LD_INT 13
34515: PUSH
34516: LD_INT 14
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
34525: GO 35036
34527: LD_INT 25
34529: DOUBLE
34530: EQUAL
34531: IFTRUE 34535
34533: GO 34553
34535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34536: LD_ADDR_VAR 0 3
34540: PUSH
34541: LD_INT 13
34543: PUSH
34544: LD_INT 14
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: ST_TO_ADDR
34551: GO 35036
34553: LD_INT 27
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34561
34559: GO 34579
34561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_INT 13
34569: PUSH
34570: LD_INT 14
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: ST_TO_ADDR
34577: GO 35036
34579: LD_EXP 37
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34589
34587: GO 34615
34589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: LD_INT 11
34597: PUSH
34598: LD_INT 12
34600: PUSH
34601: LD_INT 13
34603: PUSH
34604: LD_INT 14
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: ST_TO_ADDR
34613: GO 35036
34615: LD_INT 28
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34641
34623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_INT 13
34631: PUSH
34632: LD_INT 14
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: ST_TO_ADDR
34639: GO 35036
34641: LD_INT 29
34643: DOUBLE
34644: EQUAL
34645: IFTRUE 34649
34647: GO 34667
34649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34650: LD_ADDR_VAR 0 3
34654: PUSH
34655: LD_INT 13
34657: PUSH
34658: LD_INT 14
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: ST_TO_ADDR
34665: GO 35036
34667: LD_INT 31
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34693
34675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34676: LD_ADDR_VAR 0 3
34680: PUSH
34681: LD_INT 13
34683: PUSH
34684: LD_INT 14
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: ST_TO_ADDR
34691: GO 35036
34693: LD_INT 26
34695: DOUBLE
34696: EQUAL
34697: IFTRUE 34701
34699: GO 34719
34701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_INT 13
34709: PUSH
34710: LD_INT 14
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: ST_TO_ADDR
34717: GO 35036
34719: LD_INT 42
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34727
34725: GO 34753
34727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_INT 21
34735: PUSH
34736: LD_INT 22
34738: PUSH
34739: LD_INT 23
34741: PUSH
34742: LD_INT 24
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
34751: GO 35036
34753: LD_INT 43
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34787
34761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 21
34769: PUSH
34770: LD_INT 22
34772: PUSH
34773: LD_INT 23
34775: PUSH
34776: LD_INT 24
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
34785: GO 35036
34787: LD_INT 44
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34821
34795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 21
34803: PUSH
34804: LD_INT 22
34806: PUSH
34807: LD_INT 23
34809: PUSH
34810: LD_INT 24
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35036
34821: LD_INT 45
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34855
34829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 21
34837: PUSH
34838: LD_INT 22
34840: PUSH
34841: LD_INT 23
34843: PUSH
34844: LD_INT 24
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
34853: GO 35036
34855: LD_INT 49
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 34889
34863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34864: LD_ADDR_VAR 0 3
34868: PUSH
34869: LD_INT 21
34871: PUSH
34872: LD_INT 22
34874: PUSH
34875: LD_INT 23
34877: PUSH
34878: LD_INT 24
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
34887: GO 35036
34889: LD_INT 51
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34923
34897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_INT 21
34905: PUSH
34906: LD_INT 22
34908: PUSH
34909: LD_INT 23
34911: PUSH
34912: LD_INT 24
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: ST_TO_ADDR
34921: GO 35036
34923: LD_INT 52
34925: DOUBLE
34926: EQUAL
34927: IFTRUE 34931
34929: GO 34957
34931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34932: LD_ADDR_VAR 0 3
34936: PUSH
34937: LD_INT 21
34939: PUSH
34940: LD_INT 22
34942: PUSH
34943: LD_INT 23
34945: PUSH
34946: LD_INT 24
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: ST_TO_ADDR
34955: GO 35036
34957: LD_INT 53
34959: DOUBLE
34960: EQUAL
34961: IFTRUE 34965
34963: GO 34983
34965: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_INT 23
34973: PUSH
34974: LD_INT 24
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: ST_TO_ADDR
34981: GO 35036
34983: LD_INT 46
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34991
34989: GO 35009
34991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34992: LD_ADDR_VAR 0 3
34996: PUSH
34997: LD_INT 23
34999: PUSH
35000: LD_INT 24
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: ST_TO_ADDR
35007: GO 35036
35009: LD_INT 47
35011: DOUBLE
35012: EQUAL
35013: IFTRUE 35017
35015: GO 35035
35017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35018: LD_ADDR_VAR 0 3
35022: PUSH
35023: LD_INT 23
35025: PUSH
35026: LD_INT 24
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: ST_TO_ADDR
35033: GO 35036
35035: POP
// result := ( chassis in result ) ;
35036: LD_ADDR_VAR 0 3
35040: PUSH
35041: LD_VAR 0 1
35045: PUSH
35046: LD_VAR 0 3
35050: IN
35051: ST_TO_ADDR
// end ;
35052: LD_VAR 0 3
35056: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35057: LD_INT 0
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
// result := array ;
35066: LD_ADDR_VAR 0 5
35070: PUSH
35071: LD_VAR 0 1
35075: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35076: LD_VAR 0 1
35080: NOT
35081: PUSH
35082: LD_VAR 0 2
35086: NOT
35087: OR
35088: PUSH
35089: LD_VAR 0 3
35093: NOT
35094: OR
35095: PUSH
35096: LD_VAR 0 2
35100: PUSH
35101: LD_VAR 0 1
35105: GREATER
35106: OR
35107: PUSH
35108: LD_VAR 0 3
35112: PUSH
35113: LD_VAR 0 1
35117: GREATER
35118: OR
35119: IFFALSE 35123
// exit ;
35121: GO 35419
// if direction then
35123: LD_VAR 0 4
35127: IFFALSE 35191
// begin d := 1 ;
35129: LD_ADDR_VAR 0 9
35133: PUSH
35134: LD_INT 1
35136: ST_TO_ADDR
// if i_from > i_to then
35137: LD_VAR 0 2
35141: PUSH
35142: LD_VAR 0 3
35146: GREATER
35147: IFFALSE 35173
// length := ( array - i_from ) + i_to else
35149: LD_ADDR_VAR 0 11
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: LD_VAR 0 2
35163: MINUS
35164: PUSH
35165: LD_VAR 0 3
35169: PLUS
35170: ST_TO_ADDR
35171: GO 35189
// length := i_to - i_from ;
35173: LD_ADDR_VAR 0 11
35177: PUSH
35178: LD_VAR 0 3
35182: PUSH
35183: LD_VAR 0 2
35187: MINUS
35188: ST_TO_ADDR
// end else
35189: GO 35252
// begin d := - 1 ;
35191: LD_ADDR_VAR 0 9
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: ST_TO_ADDR
// if i_from > i_to then
35200: LD_VAR 0 2
35204: PUSH
35205: LD_VAR 0 3
35209: GREATER
35210: IFFALSE 35230
// length := i_from - i_to else
35212: LD_ADDR_VAR 0 11
35216: PUSH
35217: LD_VAR 0 2
35221: PUSH
35222: LD_VAR 0 3
35226: MINUS
35227: ST_TO_ADDR
35228: GO 35252
// length := ( array - i_to ) + i_from ;
35230: LD_ADDR_VAR 0 11
35234: PUSH
35235: LD_VAR 0 1
35239: PUSH
35240: LD_VAR 0 3
35244: MINUS
35245: PUSH
35246: LD_VAR 0 2
35250: PLUS
35251: ST_TO_ADDR
// end ; if not length then
35252: LD_VAR 0 11
35256: NOT
35257: IFFALSE 35261
// exit ;
35259: GO 35419
// tmp := array ;
35261: LD_ADDR_VAR 0 10
35265: PUSH
35266: LD_VAR 0 1
35270: ST_TO_ADDR
// for i = 1 to length do
35271: LD_ADDR_VAR 0 6
35275: PUSH
35276: DOUBLE
35277: LD_INT 1
35279: DEC
35280: ST_TO_ADDR
35281: LD_VAR 0 11
35285: PUSH
35286: FOR_TO
35287: IFFALSE 35407
// begin for j = 1 to array do
35289: LD_ADDR_VAR 0 7
35293: PUSH
35294: DOUBLE
35295: LD_INT 1
35297: DEC
35298: ST_TO_ADDR
35299: LD_VAR 0 1
35303: PUSH
35304: FOR_TO
35305: IFFALSE 35393
// begin k := j + d ;
35307: LD_ADDR_VAR 0 8
35311: PUSH
35312: LD_VAR 0 7
35316: PUSH
35317: LD_VAR 0 9
35321: PLUS
35322: ST_TO_ADDR
// if k > array then
35323: LD_VAR 0 8
35327: PUSH
35328: LD_VAR 0 1
35332: GREATER
35333: IFFALSE 35343
// k := 1 ;
35335: LD_ADDR_VAR 0 8
35339: PUSH
35340: LD_INT 1
35342: ST_TO_ADDR
// if not k then
35343: LD_VAR 0 8
35347: NOT
35348: IFFALSE 35360
// k := array ;
35350: LD_ADDR_VAR 0 8
35354: PUSH
35355: LD_VAR 0 1
35359: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35360: LD_ADDR_VAR 0 10
35364: PUSH
35365: LD_VAR 0 10
35369: PPUSH
35370: LD_VAR 0 8
35374: PPUSH
35375: LD_VAR 0 1
35379: PUSH
35380: LD_VAR 0 7
35384: ARRAY
35385: PPUSH
35386: CALL_OW 1
35390: ST_TO_ADDR
// end ;
35391: GO 35304
35393: POP
35394: POP
// array := tmp ;
35395: LD_ADDR_VAR 0 1
35399: PUSH
35400: LD_VAR 0 10
35404: ST_TO_ADDR
// end ;
35405: GO 35286
35407: POP
35408: POP
// result := array ;
35409: LD_ADDR_VAR 0 5
35413: PUSH
35414: LD_VAR 0 1
35418: ST_TO_ADDR
// end ;
35419: LD_VAR 0 5
35423: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35424: LD_INT 0
35426: PPUSH
35427: PPUSH
// result := 0 ;
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_INT 0
35435: ST_TO_ADDR
// if not array or not value in array then
35436: LD_VAR 0 1
35440: NOT
35441: PUSH
35442: LD_VAR 0 2
35446: PUSH
35447: LD_VAR 0 1
35451: IN
35452: NOT
35453: OR
35454: IFFALSE 35458
// exit ;
35456: GO 35512
// for i = 1 to array do
35458: LD_ADDR_VAR 0 4
35462: PUSH
35463: DOUBLE
35464: LD_INT 1
35466: DEC
35467: ST_TO_ADDR
35468: LD_VAR 0 1
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35510
// if value = array [ i ] then
35476: LD_VAR 0 2
35480: PUSH
35481: LD_VAR 0 1
35485: PUSH
35486: LD_VAR 0 4
35490: ARRAY
35491: EQUAL
35492: IFFALSE 35508
// begin result := i ;
35494: LD_ADDR_VAR 0 3
35498: PUSH
35499: LD_VAR 0 4
35503: ST_TO_ADDR
// exit ;
35504: POP
35505: POP
35506: GO 35512
// end ;
35508: GO 35473
35510: POP
35511: POP
// end ;
35512: LD_VAR 0 3
35516: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35517: LD_INT 0
35519: PPUSH
// vc_chassis := chassis ;
35520: LD_ADDR_OWVAR 37
35524: PUSH
35525: LD_VAR 0 1
35529: ST_TO_ADDR
// vc_engine := engine ;
35530: LD_ADDR_OWVAR 39
35534: PUSH
35535: LD_VAR 0 2
35539: ST_TO_ADDR
// vc_control := control ;
35540: LD_ADDR_OWVAR 38
35544: PUSH
35545: LD_VAR 0 3
35549: ST_TO_ADDR
// vc_weapon := weapon ;
35550: LD_ADDR_OWVAR 40
35554: PUSH
35555: LD_VAR 0 4
35559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35560: LD_ADDR_OWVAR 41
35564: PUSH
35565: LD_VAR 0 5
35569: ST_TO_ADDR
// end ;
35570: LD_VAR 0 6
35574: RET
// export function WantPlant ( unit ) ; var task ; begin
35575: LD_INT 0
35577: PPUSH
35578: PPUSH
// result := false ;
35579: LD_ADDR_VAR 0 2
35583: PUSH
35584: LD_INT 0
35586: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_VAR 0 1
35596: PPUSH
35597: CALL_OW 437
35601: ST_TO_ADDR
// if task then
35602: LD_VAR 0 3
35606: IFFALSE 35634
// if task [ 1 ] [ 1 ] = p then
35608: LD_VAR 0 3
35612: PUSH
35613: LD_INT 1
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PUSH
35621: LD_STRING p
35623: EQUAL
35624: IFFALSE 35634
// result := true ;
35626: LD_ADDR_VAR 0 2
35630: PUSH
35631: LD_INT 1
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 2
35638: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
// if pos < 1 then
35645: LD_VAR 0 2
35649: PUSH
35650: LD_INT 1
35652: LESS
35653: IFFALSE 35657
// exit ;
35655: GO 35960
// if pos = 1 then
35657: LD_VAR 0 2
35661: PUSH
35662: LD_INT 1
35664: EQUAL
35665: IFFALSE 35698
// result := Replace ( arr , pos [ 1 ] , value ) else
35667: LD_ADDR_VAR 0 4
35671: PUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: LD_VAR 0 2
35681: PUSH
35682: LD_INT 1
35684: ARRAY
35685: PPUSH
35686: LD_VAR 0 3
35690: PPUSH
35691: CALL_OW 1
35695: ST_TO_ADDR
35696: GO 35960
// begin tmp := arr ;
35698: LD_ADDR_VAR 0 6
35702: PUSH
35703: LD_VAR 0 1
35707: ST_TO_ADDR
// s_arr := [ tmp ] ;
35708: LD_ADDR_VAR 0 7
35712: PUSH
35713: LD_VAR 0 6
35717: PUSH
35718: EMPTY
35719: LIST
35720: ST_TO_ADDR
// for i = 1 to pos - 1 do
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: DOUBLE
35727: LD_INT 1
35729: DEC
35730: ST_TO_ADDR
35731: LD_VAR 0 2
35735: PUSH
35736: LD_INT 1
35738: MINUS
35739: PUSH
35740: FOR_TO
35741: IFFALSE 35786
// begin tmp := tmp [ pos [ i ] ] ;
35743: LD_ADDR_VAR 0 6
35747: PUSH
35748: LD_VAR 0 6
35752: PUSH
35753: LD_VAR 0 2
35757: PUSH
35758: LD_VAR 0 5
35762: ARRAY
35763: ARRAY
35764: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35765: LD_ADDR_VAR 0 7
35769: PUSH
35770: LD_VAR 0 7
35774: PUSH
35775: LD_VAR 0 6
35779: PUSH
35780: EMPTY
35781: LIST
35782: ADD
35783: ST_TO_ADDR
// end ;
35784: GO 35740
35786: POP
35787: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35788: LD_ADDR_VAR 0 6
35792: PUSH
35793: LD_VAR 0 6
35797: PPUSH
35798: LD_VAR 0 2
35802: PUSH
35803: LD_VAR 0 2
35807: ARRAY
35808: PPUSH
35809: LD_VAR 0 3
35813: PPUSH
35814: CALL_OW 1
35818: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35819: LD_ADDR_VAR 0 7
35823: PUSH
35824: LD_VAR 0 7
35828: PPUSH
35829: LD_VAR 0 7
35833: PPUSH
35834: LD_VAR 0 6
35838: PPUSH
35839: CALL_OW 1
35843: ST_TO_ADDR
// for i = s_arr downto 2 do
35844: LD_ADDR_VAR 0 5
35848: PUSH
35849: DOUBLE
35850: LD_VAR 0 7
35854: INC
35855: ST_TO_ADDR
35856: LD_INT 2
35858: PUSH
35859: FOR_DOWNTO
35860: IFFALSE 35944
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35862: LD_ADDR_VAR 0 6
35866: PUSH
35867: LD_VAR 0 7
35871: PUSH
35872: LD_VAR 0 5
35876: PUSH
35877: LD_INT 1
35879: MINUS
35880: ARRAY
35881: PPUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_VAR 0 5
35891: PUSH
35892: LD_INT 1
35894: MINUS
35895: ARRAY
35896: PPUSH
35897: LD_VAR 0 7
35901: PUSH
35902: LD_VAR 0 5
35906: ARRAY
35907: PPUSH
35908: CALL_OW 1
35912: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35913: LD_ADDR_VAR 0 7
35917: PUSH
35918: LD_VAR 0 7
35922: PPUSH
35923: LD_VAR 0 5
35927: PUSH
35928: LD_INT 1
35930: MINUS
35931: PPUSH
35932: LD_VAR 0 6
35936: PPUSH
35937: CALL_OW 1
35941: ST_TO_ADDR
// end ;
35942: GO 35859
35944: POP
35945: POP
// result := s_arr [ 1 ] ;
35946: LD_ADDR_VAR 0 4
35950: PUSH
35951: LD_VAR 0 7
35955: PUSH
35956: LD_INT 1
35958: ARRAY
35959: ST_TO_ADDR
// end ; end ;
35960: LD_VAR 0 4
35964: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35965: LD_INT 0
35967: PPUSH
35968: PPUSH
// if not list then
35969: LD_VAR 0 1
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36069
// i := list [ pos1 ] ;
35978: LD_ADDR_VAR 0 5
35982: PUSH
35983: LD_VAR 0 1
35987: PUSH
35988: LD_VAR 0 2
35992: ARRAY
35993: ST_TO_ADDR
// if not i then
35994: LD_VAR 0 5
35998: NOT
35999: IFFALSE 36003
// exit ;
36001: GO 36069
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36003: LD_ADDR_VAR 0 1
36007: PUSH
36008: LD_VAR 0 1
36012: PPUSH
36013: LD_VAR 0 2
36017: PPUSH
36018: LD_VAR 0 1
36022: PUSH
36023: LD_VAR 0 3
36027: ARRAY
36028: PPUSH
36029: CALL_OW 1
36033: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36034: LD_ADDR_VAR 0 1
36038: PUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: LD_VAR 0 3
36048: PPUSH
36049: LD_VAR 0 5
36053: PPUSH
36054: CALL_OW 1
36058: ST_TO_ADDR
// result := list ;
36059: LD_ADDR_VAR 0 4
36063: PUSH
36064: LD_VAR 0 1
36068: ST_TO_ADDR
// end ;
36069: LD_VAR 0 4
36073: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36074: LD_INT 0
36076: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36077: LD_ADDR_VAR 0 5
36081: PUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 250
36091: PPUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 251
36101: PPUSH
36102: LD_VAR 0 2
36106: PPUSH
36107: LD_VAR 0 3
36111: PPUSH
36112: LD_VAR 0 4
36116: PPUSH
36117: CALL 36127 0 5
36121: ST_TO_ADDR
// end ;
36122: LD_VAR 0 5
36126: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36127: LD_INT 0
36129: PPUSH
36130: PPUSH
36131: PPUSH
36132: PPUSH
// if not list then
36133: LD_VAR 0 3
36137: NOT
36138: IFFALSE 36142
// exit ;
36140: GO 36530
// result := [ ] ;
36142: LD_ADDR_VAR 0 6
36146: PUSH
36147: EMPTY
36148: ST_TO_ADDR
// for i in list do
36149: LD_ADDR_VAR 0 7
36153: PUSH
36154: LD_VAR 0 3
36158: PUSH
36159: FOR_IN
36160: IFFALSE 36362
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36162: LD_ADDR_VAR 0 9
36166: PUSH
36167: LD_VAR 0 7
36171: PPUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_VAR 0 2
36181: PPUSH
36182: CALL_OW 297
36186: ST_TO_ADDR
// if not result then
36187: LD_VAR 0 6
36191: NOT
36192: IFFALSE 36218
// result := [ [ i , tmp ] ] else
36194: LD_ADDR_VAR 0 6
36198: PUSH
36199: LD_VAR 0 7
36203: PUSH
36204: LD_VAR 0 9
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: ST_TO_ADDR
36216: GO 36360
// begin if result [ result ] [ 2 ] < tmp then
36218: LD_VAR 0 6
36222: PUSH
36223: LD_VAR 0 6
36227: ARRAY
36228: PUSH
36229: LD_INT 2
36231: ARRAY
36232: PUSH
36233: LD_VAR 0 9
36237: LESS
36238: IFFALSE 36280
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36240: LD_ADDR_VAR 0 6
36244: PUSH
36245: LD_VAR 0 6
36249: PPUSH
36250: LD_VAR 0 6
36254: PUSH
36255: LD_INT 1
36257: PLUS
36258: PPUSH
36259: LD_VAR 0 7
36263: PUSH
36264: LD_VAR 0 9
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PPUSH
36273: CALL_OW 2
36277: ST_TO_ADDR
36278: GO 36360
// for j = 1 to result do
36280: LD_ADDR_VAR 0 8
36284: PUSH
36285: DOUBLE
36286: LD_INT 1
36288: DEC
36289: ST_TO_ADDR
36290: LD_VAR 0 6
36294: PUSH
36295: FOR_TO
36296: IFFALSE 36358
// begin if tmp < result [ j ] [ 2 ] then
36298: LD_VAR 0 9
36302: PUSH
36303: LD_VAR 0 6
36307: PUSH
36308: LD_VAR 0 8
36312: ARRAY
36313: PUSH
36314: LD_INT 2
36316: ARRAY
36317: LESS
36318: IFFALSE 36356
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36320: LD_ADDR_VAR 0 6
36324: PUSH
36325: LD_VAR 0 6
36329: PPUSH
36330: LD_VAR 0 8
36334: PPUSH
36335: LD_VAR 0 7
36339: PUSH
36340: LD_VAR 0 9
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: CALL_OW 2
36353: ST_TO_ADDR
// break ;
36354: GO 36358
// end ; end ;
36356: GO 36295
36358: POP
36359: POP
// end ; end ;
36360: GO 36159
36362: POP
36363: POP
// if result and not asc then
36364: LD_VAR 0 6
36368: PUSH
36369: LD_VAR 0 4
36373: NOT
36374: AND
36375: IFFALSE 36450
// begin tmp := result ;
36377: LD_ADDR_VAR 0 9
36381: PUSH
36382: LD_VAR 0 6
36386: ST_TO_ADDR
// for i = tmp downto 1 do
36387: LD_ADDR_VAR 0 7
36391: PUSH
36392: DOUBLE
36393: LD_VAR 0 9
36397: INC
36398: ST_TO_ADDR
36399: LD_INT 1
36401: PUSH
36402: FOR_DOWNTO
36403: IFFALSE 36448
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36405: LD_ADDR_VAR 0 6
36409: PUSH
36410: LD_VAR 0 6
36414: PPUSH
36415: LD_VAR 0 9
36419: PUSH
36420: LD_VAR 0 7
36424: MINUS
36425: PUSH
36426: LD_INT 1
36428: PLUS
36429: PPUSH
36430: LD_VAR 0 9
36434: PUSH
36435: LD_VAR 0 7
36439: ARRAY
36440: PPUSH
36441: CALL_OW 1
36445: ST_TO_ADDR
36446: GO 36402
36448: POP
36449: POP
// end ; tmp := [ ] ;
36450: LD_ADDR_VAR 0 9
36454: PUSH
36455: EMPTY
36456: ST_TO_ADDR
// if mode then
36457: LD_VAR 0 5
36461: IFFALSE 36530
// begin for i = 1 to result do
36463: LD_ADDR_VAR 0 7
36467: PUSH
36468: DOUBLE
36469: LD_INT 1
36471: DEC
36472: ST_TO_ADDR
36473: LD_VAR 0 6
36477: PUSH
36478: FOR_TO
36479: IFFALSE 36518
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36481: LD_ADDR_VAR 0 9
36485: PUSH
36486: LD_VAR 0 9
36490: PPUSH
36491: LD_VAR 0 7
36495: PPUSH
36496: LD_VAR 0 6
36500: PUSH
36501: LD_VAR 0 7
36505: ARRAY
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: CALL_OW 1
36515: ST_TO_ADDR
36516: GO 36478
36518: POP
36519: POP
// result := tmp ;
36520: LD_ADDR_VAR 0 6
36524: PUSH
36525: LD_VAR 0 9
36529: ST_TO_ADDR
// end ; end ;
36530: LD_VAR 0 6
36534: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36535: LD_INT 0
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36543: LD_ADDR_VAR 0 5
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// if not x or not y then
36565: LD_VAR 0 2
36569: NOT
36570: PUSH
36571: LD_VAR 0 3
36575: NOT
36576: OR
36577: IFFALSE 36581
// exit ;
36579: GO 38233
// if not range then
36581: LD_VAR 0 4
36585: NOT
36586: IFFALSE 36596
// range := 10 ;
36588: LD_ADDR_VAR 0 4
36592: PUSH
36593: LD_INT 10
36595: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36596: LD_ADDR_VAR 0 8
36600: PUSH
36601: LD_INT 81
36603: PUSH
36604: LD_VAR 0 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 92
36615: PUSH
36616: LD_VAR 0 2
36620: PUSH
36621: LD_VAR 0 3
36625: PUSH
36626: LD_VAR 0 4
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: LD_INT 21
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: PPUSH
36659: CALL_OW 69
36663: ST_TO_ADDR
// if not tmp then
36664: LD_VAR 0 8
36668: NOT
36669: IFFALSE 36673
// exit ;
36671: GO 38233
// for i in tmp do
36673: LD_ADDR_VAR 0 6
36677: PUSH
36678: LD_VAR 0 8
36682: PUSH
36683: FOR_IN
36684: IFFALSE 38208
// begin points := [ 0 , 0 , 0 ] ;
36686: LD_ADDR_VAR 0 9
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
// bpoints := 1 ;
36705: LD_ADDR_VAR 0 10
36709: PUSH
36710: LD_INT 1
36712: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 247
36722: PUSH
36723: LD_INT 1
36725: DOUBLE
36726: EQUAL
36727: IFTRUE 36731
36729: GO 37309
36731: POP
// begin if GetClass ( i ) = 1 then
36732: LD_VAR 0 6
36736: PPUSH
36737: CALL_OW 257
36741: PUSH
36742: LD_INT 1
36744: EQUAL
36745: IFFALSE 36766
// points := [ 10 , 5 , 3 ] ;
36747: LD_ADDR_VAR 0 9
36751: PUSH
36752: LD_INT 10
36754: PUSH
36755: LD_INT 5
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36766: LD_VAR 0 6
36770: PPUSH
36771: CALL_OW 257
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: LD_INT 4
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: IN
36790: IFFALSE 36811
// points := [ 3 , 2 , 1 ] ;
36792: LD_ADDR_VAR 0 9
36796: PUSH
36797: LD_INT 3
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL_OW 257
36820: PUSH
36821: LD_INT 5
36823: EQUAL
36824: IFFALSE 36845
// points := [ 130 , 5 , 2 ] ;
36826: LD_ADDR_VAR 0 9
36830: PUSH
36831: LD_INT 130
36833: PUSH
36834: LD_INT 5
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36845: LD_VAR 0 6
36849: PPUSH
36850: CALL_OW 257
36854: PUSH
36855: LD_INT 8
36857: EQUAL
36858: IFFALSE 36879
// points := [ 35 , 35 , 30 ] ;
36860: LD_ADDR_VAR 0 9
36864: PUSH
36865: LD_INT 35
36867: PUSH
36868: LD_INT 35
36870: PUSH
36871: LD_INT 30
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36879: LD_VAR 0 6
36883: PPUSH
36884: CALL_OW 257
36888: PUSH
36889: LD_INT 9
36891: EQUAL
36892: IFFALSE 36913
// points := [ 20 , 55 , 40 ] ;
36894: LD_ADDR_VAR 0 9
36898: PUSH
36899: LD_INT 20
36901: PUSH
36902: LD_INT 55
36904: PUSH
36905: LD_INT 40
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36913: LD_VAR 0 6
36917: PPUSH
36918: CALL_OW 257
36922: PUSH
36923: LD_INT 12
36925: PUSH
36926: LD_INT 16
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: IN
36933: IFFALSE 36954
// points := [ 5 , 3 , 2 ] ;
36935: LD_ADDR_VAR 0 9
36939: PUSH
36940: LD_INT 5
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36954: LD_VAR 0 6
36958: PPUSH
36959: CALL_OW 257
36963: PUSH
36964: LD_INT 17
36966: EQUAL
36967: IFFALSE 36988
// points := [ 100 , 50 , 75 ] ;
36969: LD_ADDR_VAR 0 9
36973: PUSH
36974: LD_INT 100
36976: PUSH
36977: LD_INT 50
36979: PUSH
36980: LD_INT 75
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36988: LD_VAR 0 6
36992: PPUSH
36993: CALL_OW 257
36997: PUSH
36998: LD_INT 15
37000: EQUAL
37001: IFFALSE 37022
// points := [ 10 , 5 , 3 ] ;
37003: LD_ADDR_VAR 0 9
37007: PUSH
37008: LD_INT 10
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37022: LD_VAR 0 6
37026: PPUSH
37027: CALL_OW 257
37031: PUSH
37032: LD_INT 14
37034: EQUAL
37035: IFFALSE 37056
// points := [ 10 , 0 , 0 ] ;
37037: LD_ADDR_VAR 0 9
37041: PUSH
37042: LD_INT 10
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37056: LD_VAR 0 6
37060: PPUSH
37061: CALL_OW 257
37065: PUSH
37066: LD_INT 11
37068: EQUAL
37069: IFFALSE 37090
// points := [ 30 , 10 , 5 ] ;
37071: LD_ADDR_VAR 0 9
37075: PUSH
37076: LD_INT 30
37078: PUSH
37079: LD_INT 10
37081: PUSH
37082: LD_INT 5
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_INT 5
37097: PPUSH
37098: CALL_OW 321
37102: PUSH
37103: LD_INT 2
37105: EQUAL
37106: IFFALSE 37123
// bpoints := bpoints * 1.8 ;
37108: LD_ADDR_VAR 0 10
37112: PUSH
37113: LD_VAR 0 10
37117: PUSH
37118: LD_REAL  1.80000000000000E+0000
37121: MUL
37122: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37123: LD_VAR 0 6
37127: PPUSH
37128: CALL_OW 257
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 4
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: IN
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: LD_INT 51
37159: PPUSH
37160: CALL_OW 321
37164: PUSH
37165: LD_INT 2
37167: EQUAL
37168: AND
37169: IFFALSE 37186
// bpoints := bpoints * 1.2 ;
37171: LD_ADDR_VAR 0 10
37175: PUSH
37176: LD_VAR 0 10
37180: PUSH
37181: LD_REAL  1.20000000000000E+0000
37184: MUL
37185: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37186: LD_VAR 0 6
37190: PPUSH
37191: CALL_OW 257
37195: PUSH
37196: LD_INT 5
37198: PUSH
37199: LD_INT 7
37201: PUSH
37202: LD_INT 9
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: IN
37210: PUSH
37211: LD_VAR 0 1
37215: PPUSH
37216: LD_INT 52
37218: PPUSH
37219: CALL_OW 321
37223: PUSH
37224: LD_INT 2
37226: EQUAL
37227: AND
37228: IFFALSE 37245
// bpoints := bpoints * 1.5 ;
37230: LD_ADDR_VAR 0 10
37234: PUSH
37235: LD_VAR 0 10
37239: PUSH
37240: LD_REAL  1.50000000000000E+0000
37243: MUL
37244: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37245: LD_VAR 0 1
37249: PPUSH
37250: LD_INT 66
37252: PPUSH
37253: CALL_OW 321
37257: PUSH
37258: LD_INT 2
37260: EQUAL
37261: IFFALSE 37278
// bpoints := bpoints * 1.1 ;
37263: LD_ADDR_VAR 0 10
37267: PUSH
37268: LD_VAR 0 10
37272: PUSH
37273: LD_REAL  1.10000000000000E+0000
37276: MUL
37277: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37278: LD_ADDR_VAR 0 10
37282: PUSH
37283: LD_VAR 0 10
37287: PUSH
37288: LD_VAR 0 6
37292: PPUSH
37293: LD_INT 1
37295: PPUSH
37296: CALL_OW 259
37300: PUSH
37301: LD_REAL  1.15000000000000E+0000
37304: MUL
37305: MUL
37306: ST_TO_ADDR
// end ; unit_vehicle :
37307: GO 38137
37309: LD_INT 2
37311: DOUBLE
37312: EQUAL
37313: IFTRUE 37317
37315: GO 38125
37317: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 264
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 42
37333: PUSH
37334: LD_INT 24
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: IN
37342: IFFALSE 37363
// points := [ 25 , 5 , 3 ] ;
37344: LD_ADDR_VAR 0 9
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 5
37354: PUSH
37355: LD_INT 3
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37363: LD_VAR 0 6
37367: PPUSH
37368: CALL_OW 264
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: LD_INT 43
37378: PUSH
37379: LD_INT 25
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: IN
37387: IFFALSE 37408
// points := [ 40 , 15 , 5 ] ;
37389: LD_ADDR_VAR 0 9
37393: PUSH
37394: LD_INT 40
37396: PUSH
37397: LD_INT 15
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37408: LD_VAR 0 6
37412: PPUSH
37413: CALL_OW 264
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 23
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: IN
37428: IFFALSE 37449
// points := [ 7 , 25 , 8 ] ;
37430: LD_ADDR_VAR 0 9
37434: PUSH
37435: LD_INT 7
37437: PUSH
37438: LD_INT 25
37440: PUSH
37441: LD_INT 8
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 264
37458: PUSH
37459: LD_INT 5
37461: PUSH
37462: LD_INT 27
37464: PUSH
37465: LD_INT 44
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: IN
37473: IFFALSE 37494
// points := [ 14 , 50 , 16 ] ;
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_INT 14
37482: PUSH
37483: LD_INT 50
37485: PUSH
37486: LD_INT 16
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37494: LD_VAR 0 6
37498: PPUSH
37499: CALL_OW 264
37503: PUSH
37504: LD_INT 6
37506: PUSH
37507: LD_INT 46
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: IN
37514: IFFALSE 37535
// points := [ 32 , 120 , 70 ] ;
37516: LD_ADDR_VAR 0 9
37520: PUSH
37521: LD_INT 32
37523: PUSH
37524: LD_INT 120
37526: PUSH
37527: LD_INT 70
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37535: LD_VAR 0 6
37539: PPUSH
37540: CALL_OW 264
37544: PUSH
37545: LD_INT 7
37547: PUSH
37548: LD_INT 28
37550: PUSH
37551: LD_INT 45
37553: PUSH
37554: LD_EXP 37
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: IN
37565: IFFALSE 37586
// points := [ 35 , 20 , 45 ] ;
37567: LD_ADDR_VAR 0 9
37571: PUSH
37572: LD_INT 35
37574: PUSH
37575: LD_INT 20
37577: PUSH
37578: LD_INT 45
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37586: LD_VAR 0 6
37590: PPUSH
37591: CALL_OW 264
37595: PUSH
37596: LD_INT 47
37598: PUSH
37599: EMPTY
37600: LIST
37601: IN
37602: IFFALSE 37623
// points := [ 67 , 45 , 75 ] ;
37604: LD_ADDR_VAR 0 9
37608: PUSH
37609: LD_INT 67
37611: PUSH
37612: LD_INT 45
37614: PUSH
37615: LD_INT 75
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37623: LD_VAR 0 6
37627: PPUSH
37628: CALL_OW 264
37632: PUSH
37633: LD_INT 26
37635: PUSH
37636: EMPTY
37637: LIST
37638: IN
37639: IFFALSE 37660
// points := [ 120 , 30 , 80 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 120
37648: PUSH
37649: LD_INT 30
37651: PUSH
37652: LD_INT 80
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 264
37669: PUSH
37670: LD_INT 22
37672: PUSH
37673: EMPTY
37674: LIST
37675: IN
37676: IFFALSE 37697
// points := [ 40 , 1 , 1 ] ;
37678: LD_ADDR_VAR 0 9
37682: PUSH
37683: LD_INT 40
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37697: LD_VAR 0 6
37701: PPUSH
37702: CALL_OW 264
37706: PUSH
37707: LD_INT 29
37709: PUSH
37710: EMPTY
37711: LIST
37712: IN
37713: IFFALSE 37734
// points := [ 70 , 200 , 400 ] ;
37715: LD_ADDR_VAR 0 9
37719: PUSH
37720: LD_INT 70
37722: PUSH
37723: LD_INT 200
37725: PUSH
37726: LD_INT 400
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37734: LD_VAR 0 6
37738: PPUSH
37739: CALL_OW 264
37743: PUSH
37744: LD_INT 14
37746: PUSH
37747: LD_INT 53
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: IN
37754: IFFALSE 37775
// points := [ 40 , 10 , 20 ] ;
37756: LD_ADDR_VAR 0 9
37760: PUSH
37761: LD_INT 40
37763: PUSH
37764: LD_INT 10
37766: PUSH
37767: LD_INT 20
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37775: LD_VAR 0 6
37779: PPUSH
37780: CALL_OW 264
37784: PUSH
37785: LD_INT 9
37787: PUSH
37788: EMPTY
37789: LIST
37790: IN
37791: IFFALSE 37812
// points := [ 5 , 70 , 20 ] ;
37793: LD_ADDR_VAR 0 9
37797: PUSH
37798: LD_INT 5
37800: PUSH
37801: LD_INT 70
37803: PUSH
37804: LD_INT 20
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37812: LD_VAR 0 6
37816: PPUSH
37817: CALL_OW 264
37821: PUSH
37822: LD_INT 10
37824: PUSH
37825: EMPTY
37826: LIST
37827: IN
37828: IFFALSE 37849
// points := [ 35 , 110 , 70 ] ;
37830: LD_ADDR_VAR 0 9
37834: PUSH
37835: LD_INT 35
37837: PUSH
37838: LD_INT 110
37840: PUSH
37841: LD_INT 70
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37849: LD_VAR 0 6
37853: PPUSH
37854: CALL_OW 265
37858: PUSH
37859: LD_INT 25
37861: EQUAL
37862: IFFALSE 37883
// points := [ 80 , 65 , 100 ] ;
37864: LD_ADDR_VAR 0 9
37868: PUSH
37869: LD_INT 80
37871: PUSH
37872: LD_INT 65
37874: PUSH
37875: LD_INT 100
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37883: LD_VAR 0 6
37887: PPUSH
37888: CALL_OW 263
37892: PUSH
37893: LD_INT 1
37895: EQUAL
37896: IFFALSE 37931
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37898: LD_ADDR_VAR 0 10
37902: PUSH
37903: LD_VAR 0 10
37907: PUSH
37908: LD_VAR 0 6
37912: PPUSH
37913: CALL_OW 311
37917: PPUSH
37918: LD_INT 3
37920: PPUSH
37921: CALL_OW 259
37925: PUSH
37926: LD_INT 4
37928: MUL
37929: MUL
37930: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 263
37940: PUSH
37941: LD_INT 2
37943: EQUAL
37944: IFFALSE 37995
// begin j := IsControledBy ( i ) ;
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: LD_VAR 0 6
37955: PPUSH
37956: CALL_OW 312
37960: ST_TO_ADDR
// if j then
37961: LD_VAR 0 7
37965: IFFALSE 37995
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37967: LD_ADDR_VAR 0 10
37971: PUSH
37972: LD_VAR 0 10
37976: PUSH
37977: LD_VAR 0 7
37981: PPUSH
37982: LD_INT 3
37984: PPUSH
37985: CALL_OW 259
37989: PUSH
37990: LD_INT 3
37992: MUL
37993: MUL
37994: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37995: LD_VAR 0 6
37999: PPUSH
38000: CALL_OW 264
38004: PUSH
38005: LD_INT 5
38007: PUSH
38008: LD_INT 6
38010: PUSH
38011: LD_INT 46
38013: PUSH
38014: LD_INT 44
38016: PUSH
38017: LD_INT 47
38019: PUSH
38020: LD_INT 45
38022: PUSH
38023: LD_INT 28
38025: PUSH
38026: LD_INT 7
38028: PUSH
38029: LD_INT 27
38031: PUSH
38032: LD_INT 29
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: IN
38047: PUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: LD_INT 52
38055: PPUSH
38056: CALL_OW 321
38060: PUSH
38061: LD_INT 2
38063: EQUAL
38064: AND
38065: IFFALSE 38082
// bpoints := bpoints * 1.2 ;
38067: LD_ADDR_VAR 0 10
38071: PUSH
38072: LD_VAR 0 10
38076: PUSH
38077: LD_REAL  1.20000000000000E+0000
38080: MUL
38081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38082: LD_VAR 0 6
38086: PPUSH
38087: CALL_OW 264
38091: PUSH
38092: LD_INT 6
38094: PUSH
38095: LD_INT 46
38097: PUSH
38098: LD_INT 47
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: IN
38106: IFFALSE 38123
// bpoints := bpoints * 1.2 ;
38108: LD_ADDR_VAR 0 10
38112: PUSH
38113: LD_VAR 0 10
38117: PUSH
38118: LD_REAL  1.20000000000000E+0000
38121: MUL
38122: ST_TO_ADDR
// end ; unit_building :
38123: GO 38137
38125: LD_INT 3
38127: DOUBLE
38128: EQUAL
38129: IFTRUE 38133
38131: GO 38136
38133: POP
// ; end ;
38134: GO 38137
38136: POP
// for j = 1 to 3 do
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: DOUBLE
38143: LD_INT 1
38145: DEC
38146: ST_TO_ADDR
38147: LD_INT 3
38149: PUSH
38150: FOR_TO
38151: IFFALSE 38204
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38153: LD_ADDR_VAR 0 5
38157: PUSH
38158: LD_VAR 0 5
38162: PPUSH
38163: LD_VAR 0 7
38167: PPUSH
38168: LD_VAR 0 5
38172: PUSH
38173: LD_VAR 0 7
38177: ARRAY
38178: PUSH
38179: LD_VAR 0 9
38183: PUSH
38184: LD_VAR 0 7
38188: ARRAY
38189: PUSH
38190: LD_VAR 0 10
38194: MUL
38195: PLUS
38196: PPUSH
38197: CALL_OW 1
38201: ST_TO_ADDR
38202: GO 38150
38204: POP
38205: POP
// end ;
38206: GO 36683
38208: POP
38209: POP
// result := Replace ( result , 4 , tmp ) ;
38210: LD_ADDR_VAR 0 5
38214: PUSH
38215: LD_VAR 0 5
38219: PPUSH
38220: LD_INT 4
38222: PPUSH
38223: LD_VAR 0 8
38227: PPUSH
38228: CALL_OW 1
38232: ST_TO_ADDR
// end ;
38233: LD_VAR 0 5
38237: RET
// export function DangerAtRange ( unit , range ) ; begin
38238: LD_INT 0
38240: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38241: LD_ADDR_VAR 0 3
38245: PUSH
38246: LD_VAR 0 1
38250: PPUSH
38251: CALL_OW 255
38255: PPUSH
38256: LD_VAR 0 1
38260: PPUSH
38261: CALL_OW 250
38265: PPUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 251
38275: PPUSH
38276: LD_VAR 0 2
38280: PPUSH
38281: CALL 36535 0 4
38285: ST_TO_ADDR
// end ;
38286: LD_VAR 0 3
38290: RET
// export function DangerInArea ( side , area ) ; begin
38291: LD_INT 0
38293: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38294: LD_ADDR_VAR 0 3
38298: PUSH
38299: LD_VAR 0 2
38303: PPUSH
38304: LD_INT 81
38306: PUSH
38307: LD_VAR 0 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PPUSH
38316: CALL_OW 70
38320: ST_TO_ADDR
// end ;
38321: LD_VAR 0 3
38325: RET
// export function IsExtension ( b ) ; begin
38326: LD_INT 0
38328: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38329: LD_ADDR_VAR 0 2
38333: PUSH
38334: LD_VAR 0 1
38338: PUSH
38339: LD_INT 23
38341: PUSH
38342: LD_INT 20
38344: PUSH
38345: LD_INT 22
38347: PUSH
38348: LD_INT 17
38350: PUSH
38351: LD_INT 24
38353: PUSH
38354: LD_INT 21
38356: PUSH
38357: LD_INT 19
38359: PUSH
38360: LD_INT 16
38362: PUSH
38363: LD_INT 25
38365: PUSH
38366: LD_INT 18
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: IN
38381: ST_TO_ADDR
// end ;
38382: LD_VAR 0 2
38386: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38387: LD_INT 0
38389: PPUSH
38390: PPUSH
38391: PPUSH
// result := [ ] ;
38392: LD_ADDR_VAR 0 4
38396: PUSH
38397: EMPTY
38398: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38399: LD_ADDR_VAR 0 5
38403: PUSH
38404: LD_VAR 0 2
38408: PPUSH
38409: LD_INT 21
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PPUSH
38419: CALL_OW 70
38423: ST_TO_ADDR
// if not tmp then
38424: LD_VAR 0 5
38428: NOT
38429: IFFALSE 38433
// exit ;
38431: GO 38497
// if checkLink then
38433: LD_VAR 0 3
38437: IFFALSE 38487
// begin for i in tmp do
38439: LD_ADDR_VAR 0 6
38443: PUSH
38444: LD_VAR 0 5
38448: PUSH
38449: FOR_IN
38450: IFFALSE 38485
// if GetBase ( i ) <> base then
38452: LD_VAR 0 6
38456: PPUSH
38457: CALL_OW 274
38461: PUSH
38462: LD_VAR 0 1
38466: NONEQUAL
38467: IFFALSE 38483
// ComLinkToBase ( base , i ) ;
38469: LD_VAR 0 1
38473: PPUSH
38474: LD_VAR 0 6
38478: PPUSH
38479: CALL_OW 169
38483: GO 38449
38485: POP
38486: POP
// end ; result := tmp ;
38487: LD_ADDR_VAR 0 4
38491: PUSH
38492: LD_VAR 0 5
38496: ST_TO_ADDR
// end ;
38497: LD_VAR 0 4
38501: RET
// export function ComComplete ( units , b ) ; var i ; begin
38502: LD_INT 0
38504: PPUSH
38505: PPUSH
// if not units then
38506: LD_VAR 0 1
38510: NOT
38511: IFFALSE 38515
// exit ;
38513: GO 38605
// for i in units do
38515: LD_ADDR_VAR 0 4
38519: PUSH
38520: LD_VAR 0 1
38524: PUSH
38525: FOR_IN
38526: IFFALSE 38603
// if BuildingStatus ( b ) = bs_build then
38528: LD_VAR 0 2
38532: PPUSH
38533: CALL_OW 461
38537: PUSH
38538: LD_INT 1
38540: EQUAL
38541: IFFALSE 38601
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38543: LD_VAR 0 4
38547: PPUSH
38548: LD_STRING h
38550: PUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: CALL_OW 250
38560: PUSH
38561: LD_VAR 0 2
38565: PPUSH
38566: CALL_OW 251
38570: PUSH
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: PPUSH
38597: CALL_OW 446
38601: GO 38525
38603: POP
38604: POP
// end ;
38605: LD_VAR 0 3
38609: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38610: LD_INT 0
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38618: LD_VAR 0 1
38622: NOT
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 263
38633: PUSH
38634: LD_INT 2
38636: NONEQUAL
38637: OR
38638: IFFALSE 38642
// exit ;
38640: GO 38958
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38642: LD_ADDR_VAR 0 6
38646: PUSH
38647: LD_INT 22
38649: PUSH
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL_OW 255
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 30
38669: PUSH
38670: LD_INT 36
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 34
38679: PUSH
38680: LD_INT 31
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PPUSH
38696: CALL_OW 69
38700: ST_TO_ADDR
// if not tmp then
38701: LD_VAR 0 6
38705: NOT
38706: IFFALSE 38710
// exit ;
38708: GO 38958
// result := [ ] ;
38710: LD_ADDR_VAR 0 2
38714: PUSH
38715: EMPTY
38716: ST_TO_ADDR
// for i in tmp do
38717: LD_ADDR_VAR 0 3
38721: PUSH
38722: LD_VAR 0 6
38726: PUSH
38727: FOR_IN
38728: IFFALSE 38799
// begin t := UnitsInside ( i ) ;
38730: LD_ADDR_VAR 0 4
38734: PUSH
38735: LD_VAR 0 3
38739: PPUSH
38740: CALL_OW 313
38744: ST_TO_ADDR
// if t then
38745: LD_VAR 0 4
38749: IFFALSE 38797
// for j in t do
38751: LD_ADDR_VAR 0 7
38755: PUSH
38756: LD_VAR 0 4
38760: PUSH
38761: FOR_IN
38762: IFFALSE 38795
// result := Replace ( result , result + 1 , j ) ;
38764: LD_ADDR_VAR 0 2
38768: PUSH
38769: LD_VAR 0 2
38773: PPUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 1
38781: PLUS
38782: PPUSH
38783: LD_VAR 0 7
38787: PPUSH
38788: CALL_OW 1
38792: ST_TO_ADDR
38793: GO 38761
38795: POP
38796: POP
// end ;
38797: GO 38727
38799: POP
38800: POP
// if not result then
38801: LD_VAR 0 2
38805: NOT
38806: IFFALSE 38810
// exit ;
38808: GO 38958
// mech := result [ 1 ] ;
38810: LD_ADDR_VAR 0 5
38814: PUSH
38815: LD_VAR 0 2
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: ST_TO_ADDR
// if result > 1 then
38824: LD_VAR 0 2
38828: PUSH
38829: LD_INT 1
38831: GREATER
38832: IFFALSE 38944
// begin for i = 2 to result do
38834: LD_ADDR_VAR 0 3
38838: PUSH
38839: DOUBLE
38840: LD_INT 2
38842: DEC
38843: ST_TO_ADDR
38844: LD_VAR 0 2
38848: PUSH
38849: FOR_TO
38850: IFFALSE 38942
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38852: LD_ADDR_VAR 0 4
38856: PUSH
38857: LD_VAR 0 2
38861: PUSH
38862: LD_VAR 0 3
38866: ARRAY
38867: PPUSH
38868: LD_INT 3
38870: PPUSH
38871: CALL_OW 259
38875: PUSH
38876: LD_VAR 0 2
38880: PUSH
38881: LD_VAR 0 3
38885: ARRAY
38886: PPUSH
38887: CALL_OW 432
38891: MINUS
38892: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38893: LD_VAR 0 4
38897: PUSH
38898: LD_VAR 0 5
38902: PPUSH
38903: LD_INT 3
38905: PPUSH
38906: CALL_OW 259
38910: PUSH
38911: LD_VAR 0 5
38915: PPUSH
38916: CALL_OW 432
38920: MINUS
38921: GREATEREQUAL
38922: IFFALSE 38940
// mech := result [ i ] ;
38924: LD_ADDR_VAR 0 5
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: LD_VAR 0 3
38938: ARRAY
38939: ST_TO_ADDR
// end ;
38940: GO 38849
38942: POP
38943: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38944: LD_VAR 0 1
38948: PPUSH
38949: LD_VAR 0 5
38953: PPUSH
38954: CALL_OW 135
// end ;
38958: LD_VAR 0 2
38962: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
// result := [ ] ;
38978: LD_ADDR_VAR 0 7
38982: PUSH
38983: EMPTY
38984: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 266
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: IN
39005: NOT
39006: IFFALSE 39010
// exit ;
39008: GO 40644
// if name then
39010: LD_VAR 0 3
39014: IFFALSE 39030
// SetBName ( base_dep , name ) ;
39016: LD_VAR 0 1
39020: PPUSH
39021: LD_VAR 0 3
39025: PPUSH
39026: CALL_OW 500
// base := GetBase ( base_dep ) ;
39030: LD_ADDR_VAR 0 15
39034: PUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 274
39044: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39045: LD_ADDR_VAR 0 16
39049: PUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 255
39059: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39060: LD_ADDR_VAR 0 17
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: CALL_OW 248
39074: ST_TO_ADDR
// if sources then
39075: LD_VAR 0 5
39079: IFFALSE 39126
// for i = 1 to 3 do
39081: LD_ADDR_VAR 0 8
39085: PUSH
39086: DOUBLE
39087: LD_INT 1
39089: DEC
39090: ST_TO_ADDR
39091: LD_INT 3
39093: PUSH
39094: FOR_TO
39095: IFFALSE 39124
// AddResourceType ( base , i , sources [ i ] ) ;
39097: LD_VAR 0 15
39101: PPUSH
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_VAR 0 8
39116: ARRAY
39117: PPUSH
39118: CALL_OW 276
39122: GO 39094
39124: POP
39125: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39126: LD_ADDR_VAR 0 18
39130: PUSH
39131: LD_VAR 0 15
39135: PPUSH
39136: LD_VAR 0 2
39140: PPUSH
39141: LD_INT 1
39143: PPUSH
39144: CALL 38387 0 3
39148: ST_TO_ADDR
// InitHc ;
39149: CALL_OW 19
// InitUc ;
39153: CALL_OW 18
// uc_side := side ;
39157: LD_ADDR_OWVAR 20
39161: PUSH
39162: LD_VAR 0 16
39166: ST_TO_ADDR
// uc_nation := nation ;
39167: LD_ADDR_OWVAR 21
39171: PUSH
39172: LD_VAR 0 17
39176: ST_TO_ADDR
// if buildings then
39177: LD_VAR 0 18
39181: IFFALSE 40503
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39183: LD_ADDR_VAR 0 19
39187: PUSH
39188: LD_VAR 0 18
39192: PPUSH
39193: LD_INT 2
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: LD_INT 29
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 30
39208: PUSH
39209: LD_INT 30
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: PPUSH
39221: CALL_OW 72
39225: ST_TO_ADDR
// if tmp then
39226: LD_VAR 0 19
39230: IFFALSE 39278
// for i in tmp do
39232: LD_ADDR_VAR 0 8
39236: PUSH
39237: LD_VAR 0 19
39241: PUSH
39242: FOR_IN
39243: IFFALSE 39276
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39245: LD_VAR 0 8
39249: PPUSH
39250: CALL_OW 250
39254: PPUSH
39255: LD_VAR 0 8
39259: PPUSH
39260: CALL_OW 251
39264: PPUSH
39265: LD_VAR 0 16
39269: PPUSH
39270: CALL_OW 441
39274: GO 39242
39276: POP
39277: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39278: LD_VAR 0 18
39282: PPUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 30
39288: PUSH
39289: LD_INT 32
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: LD_INT 33
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: PPUSH
39311: CALL_OW 72
39315: IFFALSE 39403
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39317: LD_ADDR_VAR 0 8
39321: PUSH
39322: LD_VAR 0 18
39326: PPUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 30
39332: PUSH
39333: LD_INT 32
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 30
39342: PUSH
39343: LD_INT 33
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PPUSH
39355: CALL_OW 72
39359: PUSH
39360: FOR_IN
39361: IFFALSE 39401
// begin if not GetBWeapon ( i ) then
39363: LD_VAR 0 8
39367: PPUSH
39368: CALL_OW 269
39372: NOT
39373: IFFALSE 39399
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39375: LD_VAR 0 8
39379: PPUSH
39380: LD_VAR 0 8
39384: PPUSH
39385: LD_VAR 0 2
39389: PPUSH
39390: CALL 40649 0 2
39394: PPUSH
39395: CALL_OW 431
// end ;
39399: GO 39360
39401: POP
39402: POP
// end ; for i = 1 to personel do
39403: LD_ADDR_VAR 0 8
39407: PUSH
39408: DOUBLE
39409: LD_INT 1
39411: DEC
39412: ST_TO_ADDR
39413: LD_VAR 0 6
39417: PUSH
39418: FOR_TO
39419: IFFALSE 40483
// begin if i > 4 then
39421: LD_VAR 0 8
39425: PUSH
39426: LD_INT 4
39428: GREATER
39429: IFFALSE 39433
// break ;
39431: GO 40483
// case i of 1 :
39433: LD_VAR 0 8
39437: PUSH
39438: LD_INT 1
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39526
39446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39447: LD_ADDR_VAR 0 12
39451: PUSH
39452: LD_VAR 0 18
39456: PPUSH
39457: LD_INT 22
39459: PUSH
39460: LD_VAR 0 16
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 58
39471: PUSH
39472: EMPTY
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: LD_INT 30
39480: PUSH
39481: LD_INT 32
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 30
39490: PUSH
39491: LD_INT 4
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 30
39500: PUSH
39501: LD_INT 5
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: PPUSH
39519: CALL_OW 72
39523: ST_TO_ADDR
39524: GO 39748
39526: LD_INT 2
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39534
39532: GO 39596
39534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39535: LD_ADDR_VAR 0 12
39539: PUSH
39540: LD_VAR 0 18
39544: PPUSH
39545: LD_INT 22
39547: PUSH
39548: LD_VAR 0 16
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 30
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 30
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PPUSH
39589: CALL_OW 72
39593: ST_TO_ADDR
39594: GO 39748
39596: LD_INT 3
39598: DOUBLE
39599: EQUAL
39600: IFTRUE 39604
39602: GO 39666
39604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39605: LD_ADDR_VAR 0 12
39609: PUSH
39610: LD_VAR 0 18
39614: PPUSH
39615: LD_INT 22
39617: PUSH
39618: LD_VAR 0 16
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 30
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 30
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PPUSH
39659: CALL_OW 72
39663: ST_TO_ADDR
39664: GO 39748
39666: LD_INT 4
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39747
39674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39675: LD_ADDR_VAR 0 12
39679: PUSH
39680: LD_VAR 0 18
39684: PPUSH
39685: LD_INT 22
39687: PUSH
39688: LD_VAR 0 16
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 30
39702: PUSH
39703: LD_INT 6
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 30
39712: PUSH
39713: LD_INT 7
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 30
39722: PUSH
39723: LD_INT 8
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PPUSH
39740: CALL_OW 72
39744: ST_TO_ADDR
39745: GO 39748
39747: POP
// if i = 1 then
39748: LD_VAR 0 8
39752: PUSH
39753: LD_INT 1
39755: EQUAL
39756: IFFALSE 39867
// begin tmp := [ ] ;
39758: LD_ADDR_VAR 0 19
39762: PUSH
39763: EMPTY
39764: ST_TO_ADDR
// for j in f do
39765: LD_ADDR_VAR 0 9
39769: PUSH
39770: LD_VAR 0 12
39774: PUSH
39775: FOR_IN
39776: IFFALSE 39849
// if GetBType ( j ) = b_bunker then
39778: LD_VAR 0 9
39782: PPUSH
39783: CALL_OW 266
39787: PUSH
39788: LD_INT 32
39790: EQUAL
39791: IFFALSE 39818
// tmp := Insert ( tmp , 1 , j ) else
39793: LD_ADDR_VAR 0 19
39797: PUSH
39798: LD_VAR 0 19
39802: PPUSH
39803: LD_INT 1
39805: PPUSH
39806: LD_VAR 0 9
39810: PPUSH
39811: CALL_OW 2
39815: ST_TO_ADDR
39816: GO 39847
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39818: LD_ADDR_VAR 0 19
39822: PUSH
39823: LD_VAR 0 19
39827: PPUSH
39828: LD_VAR 0 19
39832: PUSH
39833: LD_INT 1
39835: PLUS
39836: PPUSH
39837: LD_VAR 0 9
39841: PPUSH
39842: CALL_OW 2
39846: ST_TO_ADDR
39847: GO 39775
39849: POP
39850: POP
// if tmp then
39851: LD_VAR 0 19
39855: IFFALSE 39867
// f := tmp ;
39857: LD_ADDR_VAR 0 12
39861: PUSH
39862: LD_VAR 0 19
39866: ST_TO_ADDR
// end ; x := personel [ i ] ;
39867: LD_ADDR_VAR 0 13
39871: PUSH
39872: LD_VAR 0 6
39876: PUSH
39877: LD_VAR 0 8
39881: ARRAY
39882: ST_TO_ADDR
// if x = - 1 then
39883: LD_VAR 0 13
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: EQUAL
39892: IFFALSE 40101
// begin for j in f do
39894: LD_ADDR_VAR 0 9
39898: PUSH
39899: LD_VAR 0 12
39903: PUSH
39904: FOR_IN
39905: IFFALSE 40097
// repeat InitHc ;
39907: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39911: LD_VAR 0 9
39915: PPUSH
39916: CALL_OW 266
39920: PUSH
39921: LD_INT 5
39923: EQUAL
39924: IFFALSE 39994
// begin if UnitsInside ( j ) < 3 then
39926: LD_VAR 0 9
39930: PPUSH
39931: CALL_OW 313
39935: PUSH
39936: LD_INT 3
39938: LESS
39939: IFFALSE 39975
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39941: LD_INT 0
39943: PPUSH
39944: LD_INT 5
39946: PUSH
39947: LD_INT 8
39949: PUSH
39950: LD_INT 9
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: LD_VAR 0 17
39962: ARRAY
39963: PPUSH
39964: LD_VAR 0 4
39968: PPUSH
39969: CALL_OW 380
39973: GO 39992
// PrepareHuman ( false , i , skill ) ;
39975: LD_INT 0
39977: PPUSH
39978: LD_VAR 0 8
39982: PPUSH
39983: LD_VAR 0 4
39987: PPUSH
39988: CALL_OW 380
// end else
39992: GO 40011
// PrepareHuman ( false , i , skill ) ;
39994: LD_INT 0
39996: PPUSH
39997: LD_VAR 0 8
40001: PPUSH
40002: LD_VAR 0 4
40006: PPUSH
40007: CALL_OW 380
// un := CreateHuman ;
40011: LD_ADDR_VAR 0 14
40015: PUSH
40016: CALL_OW 44
40020: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40021: LD_ADDR_VAR 0 7
40025: PUSH
40026: LD_VAR 0 7
40030: PPUSH
40031: LD_INT 1
40033: PPUSH
40034: LD_VAR 0 14
40038: PPUSH
40039: CALL_OW 2
40043: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40044: LD_VAR 0 14
40048: PPUSH
40049: LD_VAR 0 9
40053: PPUSH
40054: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40058: LD_VAR 0 9
40062: PPUSH
40063: CALL_OW 313
40067: PUSH
40068: LD_INT 6
40070: EQUAL
40071: PUSH
40072: LD_VAR 0 9
40076: PPUSH
40077: CALL_OW 266
40081: PUSH
40082: LD_INT 32
40084: PUSH
40085: LD_INT 31
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: OR
40093: IFFALSE 39907
40095: GO 39904
40097: POP
40098: POP
// end else
40099: GO 40481
// for j = 1 to x do
40101: LD_ADDR_VAR 0 9
40105: PUSH
40106: DOUBLE
40107: LD_INT 1
40109: DEC
40110: ST_TO_ADDR
40111: LD_VAR 0 13
40115: PUSH
40116: FOR_TO
40117: IFFALSE 40479
// begin InitHc ;
40119: CALL_OW 19
// if not f then
40123: LD_VAR 0 12
40127: NOT
40128: IFFALSE 40217
// begin PrepareHuman ( false , i , skill ) ;
40130: LD_INT 0
40132: PPUSH
40133: LD_VAR 0 8
40137: PPUSH
40138: LD_VAR 0 4
40142: PPUSH
40143: CALL_OW 380
// un := CreateHuman ;
40147: LD_ADDR_VAR 0 14
40151: PUSH
40152: CALL_OW 44
40156: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40157: LD_ADDR_VAR 0 7
40161: PUSH
40162: LD_VAR 0 7
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: LD_VAR 0 14
40174: PPUSH
40175: CALL_OW 2
40179: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40180: LD_VAR 0 14
40184: PPUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 250
40194: PPUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 251
40204: PPUSH
40205: LD_INT 10
40207: PPUSH
40208: LD_INT 0
40210: PPUSH
40211: CALL_OW 50
// continue ;
40215: GO 40116
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40217: LD_VAR 0 12
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: CALL_OW 313
40230: PUSH
40231: LD_VAR 0 12
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: PPUSH
40240: CALL_OW 266
40244: PUSH
40245: LD_INT 32
40247: PUSH
40248: LD_INT 31
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: IN
40255: AND
40256: PUSH
40257: LD_VAR 0 12
40261: PUSH
40262: LD_INT 1
40264: ARRAY
40265: PPUSH
40266: CALL_OW 313
40270: PUSH
40271: LD_INT 6
40273: EQUAL
40274: OR
40275: IFFALSE 40295
// f := Delete ( f , 1 ) ;
40277: LD_ADDR_VAR 0 12
40281: PUSH
40282: LD_VAR 0 12
40286: PPUSH
40287: LD_INT 1
40289: PPUSH
40290: CALL_OW 3
40294: ST_TO_ADDR
// if not f then
40295: LD_VAR 0 12
40299: NOT
40300: IFFALSE 40318
// begin x := x + 2 ;
40302: LD_ADDR_VAR 0 13
40306: PUSH
40307: LD_VAR 0 13
40311: PUSH
40312: LD_INT 2
40314: PLUS
40315: ST_TO_ADDR
// continue ;
40316: GO 40116
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40318: LD_VAR 0 12
40322: PUSH
40323: LD_INT 1
40325: ARRAY
40326: PPUSH
40327: CALL_OW 266
40331: PUSH
40332: LD_INT 5
40334: EQUAL
40335: IFFALSE 40409
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40337: LD_VAR 0 12
40341: PUSH
40342: LD_INT 1
40344: ARRAY
40345: PPUSH
40346: CALL_OW 313
40350: PUSH
40351: LD_INT 3
40353: LESS
40354: IFFALSE 40390
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40356: LD_INT 0
40358: PPUSH
40359: LD_INT 5
40361: PUSH
40362: LD_INT 8
40364: PUSH
40365: LD_INT 9
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: PUSH
40373: LD_VAR 0 17
40377: ARRAY
40378: PPUSH
40379: LD_VAR 0 4
40383: PPUSH
40384: CALL_OW 380
40388: GO 40407
// PrepareHuman ( false , i , skill ) ;
40390: LD_INT 0
40392: PPUSH
40393: LD_VAR 0 8
40397: PPUSH
40398: LD_VAR 0 4
40402: PPUSH
40403: CALL_OW 380
// end else
40407: GO 40426
// PrepareHuman ( false , i , skill ) ;
40409: LD_INT 0
40411: PPUSH
40412: LD_VAR 0 8
40416: PPUSH
40417: LD_VAR 0 4
40421: PPUSH
40422: CALL_OW 380
// un := CreateHuman ;
40426: LD_ADDR_VAR 0 14
40430: PUSH
40431: CALL_OW 44
40435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40436: LD_ADDR_VAR 0 7
40440: PUSH
40441: LD_VAR 0 7
40445: PPUSH
40446: LD_INT 1
40448: PPUSH
40449: LD_VAR 0 14
40453: PPUSH
40454: CALL_OW 2
40458: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40459: LD_VAR 0 14
40463: PPUSH
40464: LD_VAR 0 12
40468: PUSH
40469: LD_INT 1
40471: ARRAY
40472: PPUSH
40473: CALL_OW 52
// end ;
40477: GO 40116
40479: POP
40480: POP
// end ;
40481: GO 39418
40483: POP
40484: POP
// result := result ^ buildings ;
40485: LD_ADDR_VAR 0 7
40489: PUSH
40490: LD_VAR 0 7
40494: PUSH
40495: LD_VAR 0 18
40499: ADD
40500: ST_TO_ADDR
// end else
40501: GO 40644
// begin for i = 1 to personel do
40503: LD_ADDR_VAR 0 8
40507: PUSH
40508: DOUBLE
40509: LD_INT 1
40511: DEC
40512: ST_TO_ADDR
40513: LD_VAR 0 6
40517: PUSH
40518: FOR_TO
40519: IFFALSE 40642
// begin if i > 4 then
40521: LD_VAR 0 8
40525: PUSH
40526: LD_INT 4
40528: GREATER
40529: IFFALSE 40533
// break ;
40531: GO 40642
// x := personel [ i ] ;
40533: LD_ADDR_VAR 0 13
40537: PUSH
40538: LD_VAR 0 6
40542: PUSH
40543: LD_VAR 0 8
40547: ARRAY
40548: ST_TO_ADDR
// if x = - 1 then
40549: LD_VAR 0 13
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: EQUAL
40558: IFFALSE 40562
// continue ;
40560: GO 40518
// PrepareHuman ( false , i , skill ) ;
40562: LD_INT 0
40564: PPUSH
40565: LD_VAR 0 8
40569: PPUSH
40570: LD_VAR 0 4
40574: PPUSH
40575: CALL_OW 380
// un := CreateHuman ;
40579: LD_ADDR_VAR 0 14
40583: PUSH
40584: CALL_OW 44
40588: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40589: LD_VAR 0 14
40593: PPUSH
40594: LD_VAR 0 1
40598: PPUSH
40599: CALL_OW 250
40603: PPUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 251
40613: PPUSH
40614: LD_INT 10
40616: PPUSH
40617: LD_INT 0
40619: PPUSH
40620: CALL_OW 50
// result := result ^ un ;
40624: LD_ADDR_VAR 0 7
40628: PUSH
40629: LD_VAR 0 7
40633: PUSH
40634: LD_VAR 0 14
40638: ADD
40639: ST_TO_ADDR
// end ;
40640: GO 40518
40642: POP
40643: POP
// end ; end ;
40644: LD_VAR 0 7
40648: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40649: LD_INT 0
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
// result := false ;
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_INT 0
40674: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40675: LD_VAR 0 1
40679: NOT
40680: PUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 266
40690: PUSH
40691: LD_INT 32
40693: PUSH
40694: LD_INT 33
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: IN
40701: NOT
40702: OR
40703: IFFALSE 40707
// exit ;
40705: GO 41816
// nat := GetNation ( tower ) ;
40707: LD_ADDR_VAR 0 12
40711: PUSH
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 248
40721: ST_TO_ADDR
// side := GetSide ( tower ) ;
40722: LD_ADDR_VAR 0 16
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 255
40736: ST_TO_ADDR
// x := GetX ( tower ) ;
40737: LD_ADDR_VAR 0 10
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 250
40751: ST_TO_ADDR
// y := GetY ( tower ) ;
40752: LD_ADDR_VAR 0 11
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 251
40766: ST_TO_ADDR
// if not x or not y then
40767: LD_VAR 0 10
40771: NOT
40772: PUSH
40773: LD_VAR 0 11
40777: NOT
40778: OR
40779: IFFALSE 40783
// exit ;
40781: GO 41816
// weapon := 0 ;
40783: LD_ADDR_VAR 0 18
40787: PUSH
40788: LD_INT 0
40790: ST_TO_ADDR
// fac_list := [ ] ;
40791: LD_ADDR_VAR 0 17
40795: PUSH
40796: EMPTY
40797: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40798: LD_ADDR_VAR 0 6
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: CALL_OW 274
40812: PPUSH
40813: LD_VAR 0 2
40817: PPUSH
40818: LD_INT 0
40820: PPUSH
40821: CALL 38387 0 3
40825: PPUSH
40826: LD_INT 30
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PPUSH
40836: CALL_OW 72
40840: ST_TO_ADDR
// if not factories then
40841: LD_VAR 0 6
40845: NOT
40846: IFFALSE 40850
// exit ;
40848: GO 41816
// for i in factories do
40850: LD_ADDR_VAR 0 8
40854: PUSH
40855: LD_VAR 0 6
40859: PUSH
40860: FOR_IN
40861: IFFALSE 40886
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40863: LD_ADDR_VAR 0 17
40867: PUSH
40868: LD_VAR 0 17
40872: PUSH
40873: LD_VAR 0 8
40877: PPUSH
40878: CALL_OW 478
40882: UNION
40883: ST_TO_ADDR
40884: GO 40860
40886: POP
40887: POP
// if not fac_list then
40888: LD_VAR 0 17
40892: NOT
40893: IFFALSE 40897
// exit ;
40895: GO 41816
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40897: LD_ADDR_VAR 0 5
40901: PUSH
40902: LD_INT 4
40904: PUSH
40905: LD_INT 5
40907: PUSH
40908: LD_INT 9
40910: PUSH
40911: LD_INT 10
40913: PUSH
40914: LD_INT 6
40916: PUSH
40917: LD_INT 7
40919: PUSH
40920: LD_INT 11
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 27
40934: PUSH
40935: LD_INT 28
40937: PUSH
40938: LD_INT 26
40940: PUSH
40941: LD_INT 30
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 43
40952: PUSH
40953: LD_INT 44
40955: PUSH
40956: LD_INT 46
40958: PUSH
40959: LD_INT 45
40961: PUSH
40962: LD_INT 47
40964: PUSH
40965: LD_INT 49
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: PUSH
40981: LD_VAR 0 12
40985: ARRAY
40986: ST_TO_ADDR
// list := list isect fac_list ;
40987: LD_ADDR_VAR 0 5
40991: PUSH
40992: LD_VAR 0 5
40996: PUSH
40997: LD_VAR 0 17
41001: ISECT
41002: ST_TO_ADDR
// if not list then
41003: LD_VAR 0 5
41007: NOT
41008: IFFALSE 41012
// exit ;
41010: GO 41816
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41012: LD_VAR 0 12
41016: PUSH
41017: LD_INT 3
41019: EQUAL
41020: PUSH
41021: LD_INT 49
41023: PUSH
41024: LD_VAR 0 5
41028: IN
41029: AND
41030: PUSH
41031: LD_INT 31
41033: PPUSH
41034: LD_VAR 0 16
41038: PPUSH
41039: CALL_OW 321
41043: PUSH
41044: LD_INT 2
41046: EQUAL
41047: AND
41048: IFFALSE 41108
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41050: LD_INT 22
41052: PUSH
41053: LD_VAR 0 16
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 35
41064: PUSH
41065: LD_INT 49
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 91
41074: PUSH
41075: LD_VAR 0 1
41079: PUSH
41080: LD_INT 10
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: LIST
41092: PPUSH
41093: CALL_OW 69
41097: NOT
41098: IFFALSE 41108
// weapon := ru_time_lapser ;
41100: LD_ADDR_VAR 0 18
41104: PUSH
41105: LD_INT 49
41107: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41108: LD_VAR 0 12
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: IN
41123: PUSH
41124: LD_INT 11
41126: PUSH
41127: LD_VAR 0 5
41131: IN
41132: PUSH
41133: LD_INT 30
41135: PUSH
41136: LD_VAR 0 5
41140: IN
41141: OR
41142: AND
41143: PUSH
41144: LD_INT 6
41146: PPUSH
41147: LD_VAR 0 16
41151: PPUSH
41152: CALL_OW 321
41156: PUSH
41157: LD_INT 2
41159: EQUAL
41160: AND
41161: IFFALSE 41326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41163: LD_INT 22
41165: PUSH
41166: LD_VAR 0 16
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 35
41180: PUSH
41181: LD_INT 11
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 35
41190: PUSH
41191: LD_INT 30
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 91
41205: PUSH
41206: LD_VAR 0 1
41210: PUSH
41211: LD_INT 18
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: PPUSH
41224: CALL_OW 69
41228: NOT
41229: PUSH
41230: LD_INT 22
41232: PUSH
41233: LD_VAR 0 16
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 30
41247: PUSH
41248: LD_INT 32
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 30
41257: PUSH
41258: LD_INT 33
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 91
41272: PUSH
41273: LD_VAR 0 1
41277: PUSH
41278: LD_INT 12
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: PPUSH
41294: CALL_OW 69
41298: PUSH
41299: LD_INT 2
41301: GREATER
41302: AND
41303: IFFALSE 41326
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41305: LD_ADDR_VAR 0 18
41309: PUSH
41310: LD_INT 11
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_VAR 0 12
41324: ARRAY
41325: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41326: LD_VAR 0 18
41330: NOT
41331: PUSH
41332: LD_INT 40
41334: PPUSH
41335: LD_VAR 0 16
41339: PPUSH
41340: CALL_OW 321
41344: PUSH
41345: LD_INT 2
41347: EQUAL
41348: AND
41349: PUSH
41350: LD_INT 7
41352: PUSH
41353: LD_VAR 0 5
41357: IN
41358: PUSH
41359: LD_INT 28
41361: PUSH
41362: LD_VAR 0 5
41366: IN
41367: OR
41368: PUSH
41369: LD_INT 45
41371: PUSH
41372: LD_VAR 0 5
41376: IN
41377: OR
41378: AND
41379: IFFALSE 41633
// begin hex := GetHexInfo ( x , y ) ;
41381: LD_ADDR_VAR 0 4
41385: PUSH
41386: LD_VAR 0 10
41390: PPUSH
41391: LD_VAR 0 11
41395: PPUSH
41396: CALL_OW 546
41400: ST_TO_ADDR
// if hex [ 1 ] then
41401: LD_VAR 0 4
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: IFFALSE 41413
// exit ;
41411: GO 41816
// height := hex [ 2 ] ;
41413: LD_ADDR_VAR 0 15
41417: PUSH
41418: LD_VAR 0 4
41422: PUSH
41423: LD_INT 2
41425: ARRAY
41426: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41427: LD_ADDR_VAR 0 14
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 5
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: ST_TO_ADDR
// for i in tmp do
41450: LD_ADDR_VAR 0 8
41454: PUSH
41455: LD_VAR 0 14
41459: PUSH
41460: FOR_IN
41461: IFFALSE 41631
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41463: LD_ADDR_VAR 0 9
41467: PUSH
41468: LD_VAR 0 10
41472: PPUSH
41473: LD_VAR 0 8
41477: PPUSH
41478: LD_INT 5
41480: PPUSH
41481: CALL_OW 272
41485: PUSH
41486: LD_VAR 0 11
41490: PPUSH
41491: LD_VAR 0 8
41495: PPUSH
41496: LD_INT 5
41498: PPUSH
41499: CALL_OW 273
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41508: LD_VAR 0 9
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 9
41521: PUSH
41522: LD_INT 2
41524: ARRAY
41525: PPUSH
41526: CALL_OW 488
41530: IFFALSE 41629
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41532: LD_ADDR_VAR 0 4
41536: PUSH
41537: LD_VAR 0 9
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: LD_VAR 0 9
41550: PUSH
41551: LD_INT 2
41553: ARRAY
41554: PPUSH
41555: CALL_OW 546
41559: ST_TO_ADDR
// if hex [ 1 ] then
41560: LD_VAR 0 4
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: IFFALSE 41572
// continue ;
41570: GO 41460
// h := hex [ 2 ] ;
41572: LD_ADDR_VAR 0 13
41576: PUSH
41577: LD_VAR 0 4
41581: PUSH
41582: LD_INT 2
41584: ARRAY
41585: ST_TO_ADDR
// if h + 7 < height then
41586: LD_VAR 0 13
41590: PUSH
41591: LD_INT 7
41593: PLUS
41594: PUSH
41595: LD_VAR 0 15
41599: LESS
41600: IFFALSE 41629
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41602: LD_ADDR_VAR 0 18
41606: PUSH
41607: LD_INT 7
41609: PUSH
41610: LD_INT 28
41612: PUSH
41613: LD_INT 45
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: PUSH
41621: LD_VAR 0 12
41625: ARRAY
41626: ST_TO_ADDR
// break ;
41627: GO 41631
// end ; end ; end ;
41629: GO 41460
41631: POP
41632: POP
// end ; if not weapon then
41633: LD_VAR 0 18
41637: NOT
41638: IFFALSE 41698
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_VAR 0 5
41649: PUSH
41650: LD_INT 11
41652: PUSH
41653: LD_INT 30
41655: PUSH
41656: LD_INT 49
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: DIFF
41664: ST_TO_ADDR
// if not list then
41665: LD_VAR 0 5
41669: NOT
41670: IFFALSE 41674
// exit ;
41672: GO 41816
// weapon := list [ rand ( 1 , list ) ] ;
41674: LD_ADDR_VAR 0 18
41678: PUSH
41679: LD_VAR 0 5
41683: PUSH
41684: LD_INT 1
41686: PPUSH
41687: LD_VAR 0 5
41691: PPUSH
41692: CALL_OW 12
41696: ARRAY
41697: ST_TO_ADDR
// end ; if weapon then
41698: LD_VAR 0 18
41702: IFFALSE 41816
// begin tmp := CostOfWeapon ( weapon ) ;
41704: LD_ADDR_VAR 0 14
41708: PUSH
41709: LD_VAR 0 18
41713: PPUSH
41714: CALL_OW 451
41718: ST_TO_ADDR
// j := GetBase ( tower ) ;
41719: LD_ADDR_VAR 0 9
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 274
41733: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41734: LD_VAR 0 9
41738: PPUSH
41739: LD_INT 1
41741: PPUSH
41742: CALL_OW 275
41746: PUSH
41747: LD_VAR 0 14
41751: PUSH
41752: LD_INT 1
41754: ARRAY
41755: GREATEREQUAL
41756: PUSH
41757: LD_VAR 0 9
41761: PPUSH
41762: LD_INT 2
41764: PPUSH
41765: CALL_OW 275
41769: PUSH
41770: LD_VAR 0 14
41774: PUSH
41775: LD_INT 2
41777: ARRAY
41778: GREATEREQUAL
41779: AND
41780: PUSH
41781: LD_VAR 0 9
41785: PPUSH
41786: LD_INT 3
41788: PPUSH
41789: CALL_OW 275
41793: PUSH
41794: LD_VAR 0 14
41798: PUSH
41799: LD_INT 3
41801: ARRAY
41802: GREATEREQUAL
41803: AND
41804: IFFALSE 41816
// result := weapon ;
41806: LD_ADDR_VAR 0 3
41810: PUSH
41811: LD_VAR 0 18
41815: ST_TO_ADDR
// end ; end ;
41816: LD_VAR 0 3
41820: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41821: LD_INT 0
41823: PPUSH
41824: PPUSH
// result := true ;
41825: LD_ADDR_VAR 0 3
41829: PUSH
41830: LD_INT 1
41832: ST_TO_ADDR
// if array1 = array2 then
41833: LD_VAR 0 1
41837: PUSH
41838: LD_VAR 0 2
41842: EQUAL
41843: IFFALSE 41903
// begin for i = 1 to array1 do
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_VAR 0 1
41859: PUSH
41860: FOR_TO
41861: IFFALSE 41899
// if array1 [ i ] <> array2 [ i ] then
41863: LD_VAR 0 1
41867: PUSH
41868: LD_VAR 0 4
41872: ARRAY
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_VAR 0 4
41883: ARRAY
41884: NONEQUAL
41885: IFFALSE 41897
// begin result := false ;
41887: LD_ADDR_VAR 0 3
41891: PUSH
41892: LD_INT 0
41894: ST_TO_ADDR
// break ;
41895: GO 41899
// end ;
41897: GO 41860
41899: POP
41900: POP
// end else
41901: GO 41911
// result := false ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 0
41910: ST_TO_ADDR
// end ;
41911: LD_VAR 0 3
41915: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41916: LD_INT 0
41918: PPUSH
41919: PPUSH
// if not array1 or not array2 then
41920: LD_VAR 0 1
41924: NOT
41925: PUSH
41926: LD_VAR 0 2
41930: NOT
41931: OR
41932: IFFALSE 41936
// exit ;
41934: GO 42000
// result := true ;
41936: LD_ADDR_VAR 0 3
41940: PUSH
41941: LD_INT 1
41943: ST_TO_ADDR
// for i = 1 to array1 do
41944: LD_ADDR_VAR 0 4
41948: PUSH
41949: DOUBLE
41950: LD_INT 1
41952: DEC
41953: ST_TO_ADDR
41954: LD_VAR 0 1
41958: PUSH
41959: FOR_TO
41960: IFFALSE 41998
// if array1 [ i ] <> array2 [ i ] then
41962: LD_VAR 0 1
41966: PUSH
41967: LD_VAR 0 4
41971: ARRAY
41972: PUSH
41973: LD_VAR 0 2
41977: PUSH
41978: LD_VAR 0 4
41982: ARRAY
41983: NONEQUAL
41984: IFFALSE 41996
// begin result := false ;
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 0
41993: ST_TO_ADDR
// break ;
41994: GO 41998
// end ;
41996: GO 41959
41998: POP
41999: POP
// end ;
42000: LD_VAR 0 3
42004: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42005: LD_INT 0
42007: PPUSH
42008: PPUSH
42009: PPUSH
// pom := GetBase ( fac ) ;
42010: LD_ADDR_VAR 0 5
42014: PUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 274
42024: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42025: LD_ADDR_VAR 0 4
42029: PUSH
42030: LD_VAR 0 2
42034: PUSH
42035: LD_INT 1
42037: ARRAY
42038: PPUSH
42039: LD_VAR 0 2
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: PPUSH
42048: LD_VAR 0 2
42052: PUSH
42053: LD_INT 3
42055: ARRAY
42056: PPUSH
42057: LD_VAR 0 2
42061: PUSH
42062: LD_INT 4
42064: ARRAY
42065: PPUSH
42066: CALL_OW 449
42070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_VAR 0 5
42080: PPUSH
42081: LD_INT 1
42083: PPUSH
42084: CALL_OW 275
42088: PUSH
42089: LD_VAR 0 4
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: GREATEREQUAL
42098: PUSH
42099: LD_VAR 0 5
42103: PPUSH
42104: LD_INT 2
42106: PPUSH
42107: CALL_OW 275
42111: PUSH
42112: LD_VAR 0 4
42116: PUSH
42117: LD_INT 2
42119: ARRAY
42120: GREATEREQUAL
42121: AND
42122: PUSH
42123: LD_VAR 0 5
42127: PPUSH
42128: LD_INT 3
42130: PPUSH
42131: CALL_OW 275
42135: PUSH
42136: LD_VAR 0 4
42140: PUSH
42141: LD_INT 3
42143: ARRAY
42144: GREATEREQUAL
42145: AND
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 3
42151: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
// pom := GetBase ( building ) ;
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 274
42172: ST_TO_ADDR
// if not pom then
42173: LD_VAR 0 3
42177: NOT
42178: IFFALSE 42182
// exit ;
42180: GO 42352
// btype := GetBType ( building ) ;
42182: LD_ADDR_VAR 0 5
42186: PUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: CALL_OW 266
42196: ST_TO_ADDR
// if btype = b_armoury then
42197: LD_VAR 0 5
42201: PUSH
42202: LD_INT 4
42204: EQUAL
42205: IFFALSE 42215
// btype := b_barracks ;
42207: LD_ADDR_VAR 0 5
42211: PUSH
42212: LD_INT 5
42214: ST_TO_ADDR
// if btype = b_depot then
42215: LD_VAR 0 5
42219: PUSH
42220: LD_INT 0
42222: EQUAL
42223: IFFALSE 42233
// btype := b_warehouse ;
42225: LD_ADDR_VAR 0 5
42229: PUSH
42230: LD_INT 1
42232: ST_TO_ADDR
// if btype = b_workshop then
42233: LD_VAR 0 5
42237: PUSH
42238: LD_INT 2
42240: EQUAL
42241: IFFALSE 42251
// btype := b_factory ;
42243: LD_ADDR_VAR 0 5
42247: PUSH
42248: LD_INT 3
42250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42251: LD_ADDR_VAR 0 4
42255: PUSH
42256: LD_VAR 0 5
42260: PPUSH
42261: LD_VAR 0 1
42265: PPUSH
42266: CALL_OW 248
42270: PPUSH
42271: CALL_OW 450
42275: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42276: LD_ADDR_VAR 0 2
42280: PUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: LD_INT 1
42288: PPUSH
42289: CALL_OW 275
42293: PUSH
42294: LD_VAR 0 4
42298: PUSH
42299: LD_INT 1
42301: ARRAY
42302: GREATEREQUAL
42303: PUSH
42304: LD_VAR 0 3
42308: PPUSH
42309: LD_INT 2
42311: PPUSH
42312: CALL_OW 275
42316: PUSH
42317: LD_VAR 0 4
42321: PUSH
42322: LD_INT 2
42324: ARRAY
42325: GREATEREQUAL
42326: AND
42327: PUSH
42328: LD_VAR 0 3
42332: PPUSH
42333: LD_INT 3
42335: PPUSH
42336: CALL_OW 275
42340: PUSH
42341: LD_VAR 0 4
42345: PUSH
42346: LD_INT 3
42348: ARRAY
42349: GREATEREQUAL
42350: AND
42351: ST_TO_ADDR
// end ;
42352: LD_VAR 0 2
42356: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42357: LD_INT 0
42359: PPUSH
42360: PPUSH
42361: PPUSH
// pom := GetBase ( building ) ;
42362: LD_ADDR_VAR 0 4
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 274
42376: ST_TO_ADDR
// if not pom then
42377: LD_VAR 0 4
42381: NOT
42382: IFFALSE 42386
// exit ;
42384: GO 42487
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42386: LD_ADDR_VAR 0 5
42390: PUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: CALL_OW 248
42405: PPUSH
42406: CALL_OW 450
42410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42411: LD_ADDR_VAR 0 3
42415: PUSH
42416: LD_VAR 0 4
42420: PPUSH
42421: LD_INT 1
42423: PPUSH
42424: CALL_OW 275
42428: PUSH
42429: LD_VAR 0 5
42433: PUSH
42434: LD_INT 1
42436: ARRAY
42437: GREATEREQUAL
42438: PUSH
42439: LD_VAR 0 4
42443: PPUSH
42444: LD_INT 2
42446: PPUSH
42447: CALL_OW 275
42451: PUSH
42452: LD_VAR 0 5
42456: PUSH
42457: LD_INT 2
42459: ARRAY
42460: GREATEREQUAL
42461: AND
42462: PUSH
42463: LD_VAR 0 4
42467: PPUSH
42468: LD_INT 3
42470: PPUSH
42471: CALL_OW 275
42475: PUSH
42476: LD_VAR 0 5
42480: PUSH
42481: LD_INT 3
42483: ARRAY
42484: GREATEREQUAL
42485: AND
42486: ST_TO_ADDR
// end ;
42487: LD_VAR 0 3
42491: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42492: LD_INT 0
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
// result := false ;
42505: LD_ADDR_VAR 0 8
42509: PUSH
42510: LD_INT 0
42512: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42513: LD_VAR 0 5
42517: NOT
42518: PUSH
42519: LD_VAR 0 1
42523: NOT
42524: OR
42525: PUSH
42526: LD_VAR 0 2
42530: NOT
42531: OR
42532: PUSH
42533: LD_VAR 0 3
42537: NOT
42538: OR
42539: IFFALSE 42543
// exit ;
42541: GO 43357
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42543: LD_ADDR_VAR 0 14
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: LD_VAR 0 2
42557: PPUSH
42558: LD_VAR 0 3
42562: PPUSH
42563: LD_VAR 0 4
42567: PPUSH
42568: LD_VAR 0 5
42572: PUSH
42573: LD_INT 1
42575: ARRAY
42576: PPUSH
42577: CALL_OW 248
42581: PPUSH
42582: LD_INT 0
42584: PPUSH
42585: CALL 44594 0 6
42589: ST_TO_ADDR
// if not hexes then
42590: LD_VAR 0 14
42594: NOT
42595: IFFALSE 42599
// exit ;
42597: GO 43357
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42599: LD_ADDR_VAR 0 17
42603: PUSH
42604: LD_VAR 0 5
42608: PPUSH
42609: LD_INT 22
42611: PUSH
42612: LD_VAR 0 13
42616: PPUSH
42617: CALL_OW 255
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 30
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 30
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PPUSH
42658: CALL_OW 72
42662: ST_TO_ADDR
// for i = 1 to hexes do
42663: LD_ADDR_VAR 0 9
42667: PUSH
42668: DOUBLE
42669: LD_INT 1
42671: DEC
42672: ST_TO_ADDR
42673: LD_VAR 0 14
42677: PUSH
42678: FOR_TO
42679: IFFALSE 43355
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42681: LD_ADDR_VAR 0 13
42685: PUSH
42686: LD_VAR 0 14
42690: PUSH
42691: LD_VAR 0 9
42695: ARRAY
42696: PUSH
42697: LD_INT 1
42699: ARRAY
42700: PPUSH
42701: LD_VAR 0 14
42705: PUSH
42706: LD_VAR 0 9
42710: ARRAY
42711: PUSH
42712: LD_INT 2
42714: ARRAY
42715: PPUSH
42716: CALL_OW 428
42720: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42721: LD_VAR 0 14
42725: PUSH
42726: LD_VAR 0 9
42730: ARRAY
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PPUSH
42736: LD_VAR 0 14
42740: PUSH
42741: LD_VAR 0 9
42745: ARRAY
42746: PUSH
42747: LD_INT 2
42749: ARRAY
42750: PPUSH
42751: CALL_OW 351
42755: PUSH
42756: LD_VAR 0 14
42760: PUSH
42761: LD_VAR 0 9
42765: ARRAY
42766: PUSH
42767: LD_INT 1
42769: ARRAY
42770: PPUSH
42771: LD_VAR 0 14
42775: PUSH
42776: LD_VAR 0 9
42780: ARRAY
42781: PUSH
42782: LD_INT 2
42784: ARRAY
42785: PPUSH
42786: CALL_OW 488
42790: NOT
42791: OR
42792: PUSH
42793: LD_VAR 0 13
42797: PPUSH
42798: CALL_OW 247
42802: PUSH
42803: LD_INT 3
42805: EQUAL
42806: OR
42807: IFFALSE 42813
// exit ;
42809: POP
42810: POP
42811: GO 43357
// if not tmp then
42813: LD_VAR 0 13
42817: NOT
42818: IFFALSE 42822
// continue ;
42820: GO 42678
// result := true ;
42822: LD_ADDR_VAR 0 8
42826: PUSH
42827: LD_INT 1
42829: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42830: LD_VAR 0 6
42834: PUSH
42835: LD_VAR 0 13
42839: PPUSH
42840: CALL_OW 247
42844: PUSH
42845: LD_INT 2
42847: EQUAL
42848: AND
42849: PUSH
42850: LD_VAR 0 13
42854: PPUSH
42855: CALL_OW 263
42859: PUSH
42860: LD_INT 1
42862: EQUAL
42863: AND
42864: IFFALSE 43028
// begin if IsDrivenBy ( tmp ) then
42866: LD_VAR 0 13
42870: PPUSH
42871: CALL_OW 311
42875: IFFALSE 42879
// continue ;
42877: GO 42678
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42879: LD_VAR 0 6
42883: PPUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 60
42889: PUSH
42890: EMPTY
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 55
42902: PUSH
42903: EMPTY
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PPUSH
42914: CALL_OW 72
42918: IFFALSE 43026
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42920: LD_ADDR_VAR 0 18
42924: PUSH
42925: LD_VAR 0 6
42929: PPUSH
42930: LD_INT 3
42932: PUSH
42933: LD_INT 60
42935: PUSH
42936: EMPTY
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 55
42948: PUSH
42949: EMPTY
42950: LIST
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PPUSH
42960: CALL_OW 72
42964: PUSH
42965: LD_INT 1
42967: ARRAY
42968: ST_TO_ADDR
// if IsInUnit ( driver ) then
42969: LD_VAR 0 18
42973: PPUSH
42974: CALL_OW 310
42978: IFFALSE 42989
// ComExit ( driver ) ;
42980: LD_VAR 0 18
42984: PPUSH
42985: CALL 67778 0 1
// AddComEnterUnit ( driver , tmp ) ;
42989: LD_VAR 0 18
42993: PPUSH
42994: LD_VAR 0 13
42998: PPUSH
42999: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43003: LD_VAR 0 18
43007: PPUSH
43008: LD_VAR 0 7
43012: PPUSH
43013: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43017: LD_VAR 0 18
43021: PPUSH
43022: CALL_OW 181
// end ; continue ;
43026: GO 42678
// end ; if not cleaners or not tmp in cleaners then
43028: LD_VAR 0 6
43032: NOT
43033: PUSH
43034: LD_VAR 0 13
43038: PUSH
43039: LD_VAR 0 6
43043: IN
43044: NOT
43045: OR
43046: IFFALSE 43353
// begin if dep then
43048: LD_VAR 0 17
43052: IFFALSE 43188
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43054: LD_ADDR_VAR 0 16
43058: PUSH
43059: LD_VAR 0 17
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: PPUSH
43068: CALL_OW 250
43072: PPUSH
43073: LD_VAR 0 17
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PPUSH
43082: CALL_OW 254
43086: PPUSH
43087: LD_INT 5
43089: PPUSH
43090: CALL_OW 272
43094: PUSH
43095: LD_VAR 0 17
43099: PUSH
43100: LD_INT 1
43102: ARRAY
43103: PPUSH
43104: CALL_OW 251
43108: PPUSH
43109: LD_VAR 0 17
43113: PUSH
43114: LD_INT 1
43116: ARRAY
43117: PPUSH
43118: CALL_OW 254
43122: PPUSH
43123: LD_INT 5
43125: PPUSH
43126: CALL_OW 273
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43135: LD_VAR 0 16
43139: PUSH
43140: LD_INT 1
43142: ARRAY
43143: PPUSH
43144: LD_VAR 0 16
43148: PUSH
43149: LD_INT 2
43151: ARRAY
43152: PPUSH
43153: CALL_OW 488
43157: IFFALSE 43188
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43159: LD_VAR 0 13
43163: PPUSH
43164: LD_VAR 0 16
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: PPUSH
43173: LD_VAR 0 16
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: PPUSH
43182: CALL_OW 111
// continue ;
43186: GO 42678
// end ; end ; r := GetDir ( tmp ) ;
43188: LD_ADDR_VAR 0 15
43192: PUSH
43193: LD_VAR 0 13
43197: PPUSH
43198: CALL_OW 254
43202: ST_TO_ADDR
// if r = 5 then
43203: LD_VAR 0 15
43207: PUSH
43208: LD_INT 5
43210: EQUAL
43211: IFFALSE 43221
// r := 0 ;
43213: LD_ADDR_VAR 0 15
43217: PUSH
43218: LD_INT 0
43220: ST_TO_ADDR
// for j = r to 5 do
43221: LD_ADDR_VAR 0 10
43225: PUSH
43226: DOUBLE
43227: LD_VAR 0 15
43231: DEC
43232: ST_TO_ADDR
43233: LD_INT 5
43235: PUSH
43236: FOR_TO
43237: IFFALSE 43351
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43239: LD_ADDR_VAR 0 11
43243: PUSH
43244: LD_VAR 0 13
43248: PPUSH
43249: CALL_OW 250
43253: PPUSH
43254: LD_VAR 0 10
43258: PPUSH
43259: LD_INT 2
43261: PPUSH
43262: CALL_OW 272
43266: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43267: LD_ADDR_VAR 0 12
43271: PUSH
43272: LD_VAR 0 13
43276: PPUSH
43277: CALL_OW 251
43281: PPUSH
43282: LD_VAR 0 10
43286: PPUSH
43287: LD_INT 2
43289: PPUSH
43290: CALL_OW 273
43294: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43295: LD_VAR 0 11
43299: PPUSH
43300: LD_VAR 0 12
43304: PPUSH
43305: CALL_OW 488
43309: PUSH
43310: LD_VAR 0 11
43314: PPUSH
43315: LD_VAR 0 12
43319: PPUSH
43320: CALL_OW 428
43324: NOT
43325: AND
43326: IFFALSE 43349
// begin ComMoveXY ( tmp , _x , _y ) ;
43328: LD_VAR 0 13
43332: PPUSH
43333: LD_VAR 0 11
43337: PPUSH
43338: LD_VAR 0 12
43342: PPUSH
43343: CALL_OW 111
// break ;
43347: GO 43351
// end ; end ;
43349: GO 43236
43351: POP
43352: POP
// end ; end ;
43353: GO 42678
43355: POP
43356: POP
// end ;
43357: LD_VAR 0 8
43361: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43362: LD_INT 0
43364: PPUSH
// result := true ;
43365: LD_ADDR_VAR 0 3
43369: PUSH
43370: LD_INT 1
43372: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43373: LD_VAR 0 2
43377: PUSH
43378: LD_INT 24
43380: DOUBLE
43381: EQUAL
43382: IFTRUE 43392
43384: LD_INT 33
43386: DOUBLE
43387: EQUAL
43388: IFTRUE 43392
43390: GO 43417
43392: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43393: LD_ADDR_VAR 0 3
43397: PUSH
43398: LD_INT 32
43400: PPUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 321
43410: PUSH
43411: LD_INT 2
43413: EQUAL
43414: ST_TO_ADDR
43415: GO 43737
43417: LD_INT 20
43419: DOUBLE
43420: EQUAL
43421: IFTRUE 43425
43423: GO 43450
43425: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43426: LD_ADDR_VAR 0 3
43430: PUSH
43431: LD_INT 6
43433: PPUSH
43434: LD_VAR 0 1
43438: PPUSH
43439: CALL_OW 321
43443: PUSH
43444: LD_INT 2
43446: EQUAL
43447: ST_TO_ADDR
43448: GO 43737
43450: LD_INT 22
43452: DOUBLE
43453: EQUAL
43454: IFTRUE 43464
43456: LD_INT 36
43458: DOUBLE
43459: EQUAL
43460: IFTRUE 43464
43462: GO 43489
43464: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_INT 15
43472: PPUSH
43473: LD_VAR 0 1
43477: PPUSH
43478: CALL_OW 321
43482: PUSH
43483: LD_INT 2
43485: EQUAL
43486: ST_TO_ADDR
43487: GO 43737
43489: LD_INT 30
43491: DOUBLE
43492: EQUAL
43493: IFTRUE 43497
43495: GO 43522
43497: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43498: LD_ADDR_VAR 0 3
43502: PUSH
43503: LD_INT 20
43505: PPUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: CALL_OW 321
43515: PUSH
43516: LD_INT 2
43518: EQUAL
43519: ST_TO_ADDR
43520: GO 43737
43522: LD_INT 28
43524: DOUBLE
43525: EQUAL
43526: IFTRUE 43536
43528: LD_INT 21
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43561
43536: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43537: LD_ADDR_VAR 0 3
43541: PUSH
43542: LD_INT 21
43544: PPUSH
43545: LD_VAR 0 1
43549: PPUSH
43550: CALL_OW 321
43554: PUSH
43555: LD_INT 2
43557: EQUAL
43558: ST_TO_ADDR
43559: GO 43737
43561: LD_INT 16
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43569
43567: GO 43596
43569: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_EXP 44
43579: PPUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: CALL_OW 321
43589: PUSH
43590: LD_INT 2
43592: EQUAL
43593: ST_TO_ADDR
43594: GO 43737
43596: LD_INT 19
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43610
43602: LD_INT 23
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43637
43610: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_EXP 43
43620: PPUSH
43621: LD_VAR 0 1
43625: PPUSH
43626: CALL_OW 321
43630: PUSH
43631: LD_INT 2
43633: EQUAL
43634: ST_TO_ADDR
43635: GO 43737
43637: LD_INT 17
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43645
43643: GO 43670
43645: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43646: LD_ADDR_VAR 0 3
43650: PUSH
43651: LD_INT 39
43653: PPUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 321
43663: PUSH
43664: LD_INT 2
43666: EQUAL
43667: ST_TO_ADDR
43668: GO 43737
43670: LD_INT 18
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43703
43678: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 40
43686: PPUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL_OW 321
43696: PUSH
43697: LD_INT 2
43699: EQUAL
43700: ST_TO_ADDR
43701: GO 43737
43703: LD_INT 27
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43736
43711: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43712: LD_ADDR_VAR 0 3
43716: PUSH
43717: LD_INT 35
43719: PPUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 321
43729: PUSH
43730: LD_INT 2
43732: EQUAL
43733: ST_TO_ADDR
43734: GO 43737
43736: POP
// end ;
43737: LD_VAR 0 3
43741: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43742: LD_INT 0
43744: PPUSH
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
43749: PPUSH
43750: PPUSH
43751: PPUSH
43752: PPUSH
43753: PPUSH
43754: PPUSH
// result := false ;
43755: LD_ADDR_VAR 0 6
43759: PUSH
43760: LD_INT 0
43762: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43763: LD_VAR 0 1
43767: NOT
43768: PUSH
43769: LD_VAR 0 1
43773: PPUSH
43774: CALL_OW 266
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: IN
43789: NOT
43790: OR
43791: PUSH
43792: LD_VAR 0 2
43796: NOT
43797: OR
43798: PUSH
43799: LD_VAR 0 5
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 3
43815: PUSH
43816: LD_INT 4
43818: PUSH
43819: LD_INT 5
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: IN
43830: NOT
43831: OR
43832: PUSH
43833: LD_VAR 0 3
43837: PPUSH
43838: LD_VAR 0 4
43842: PPUSH
43843: CALL_OW 488
43847: NOT
43848: OR
43849: IFFALSE 43853
// exit ;
43851: GO 44589
// side := GetSide ( depot ) ;
43853: LD_ADDR_VAR 0 9
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: CALL_OW 255
43867: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43868: LD_VAR 0 9
43872: PPUSH
43873: LD_VAR 0 2
43877: PPUSH
43878: CALL 43362 0 2
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 44589
// pom := GetBase ( depot ) ;
43887: LD_ADDR_VAR 0 10
43891: PUSH
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 274
43901: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43902: LD_ADDR_VAR 0 11
43906: PUSH
43907: LD_VAR 0 2
43911: PPUSH
43912: LD_VAR 0 1
43916: PPUSH
43917: CALL_OW 248
43921: PPUSH
43922: CALL_OW 450
43926: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43927: LD_VAR 0 10
43931: PPUSH
43932: LD_INT 1
43934: PPUSH
43935: CALL_OW 275
43939: PUSH
43940: LD_VAR 0 11
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: GREATEREQUAL
43949: PUSH
43950: LD_VAR 0 10
43954: PPUSH
43955: LD_INT 2
43957: PPUSH
43958: CALL_OW 275
43962: PUSH
43963: LD_VAR 0 11
43967: PUSH
43968: LD_INT 2
43970: ARRAY
43971: GREATEREQUAL
43972: AND
43973: PUSH
43974: LD_VAR 0 10
43978: PPUSH
43979: LD_INT 3
43981: PPUSH
43982: CALL_OW 275
43986: PUSH
43987: LD_VAR 0 11
43991: PUSH
43992: LD_INT 3
43994: ARRAY
43995: GREATEREQUAL
43996: AND
43997: NOT
43998: IFFALSE 44002
// exit ;
44000: GO 44589
// if GetBType ( depot ) = b_depot then
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 266
44011: PUSH
44012: LD_INT 0
44014: EQUAL
44015: IFFALSE 44027
// dist := 28 else
44017: LD_ADDR_VAR 0 14
44021: PUSH
44022: LD_INT 28
44024: ST_TO_ADDR
44025: GO 44035
// dist := 36 ;
44027: LD_ADDR_VAR 0 14
44031: PUSH
44032: LD_INT 36
44034: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44035: LD_VAR 0 1
44039: PPUSH
44040: LD_VAR 0 3
44044: PPUSH
44045: LD_VAR 0 4
44049: PPUSH
44050: CALL_OW 297
44054: PUSH
44055: LD_VAR 0 14
44059: GREATER
44060: IFFALSE 44064
// exit ;
44062: GO 44589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44064: LD_ADDR_VAR 0 12
44068: PUSH
44069: LD_VAR 0 2
44073: PPUSH
44074: LD_VAR 0 3
44078: PPUSH
44079: LD_VAR 0 4
44083: PPUSH
44084: LD_VAR 0 5
44088: PPUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 248
44098: PPUSH
44099: LD_INT 0
44101: PPUSH
44102: CALL 44594 0 6
44106: ST_TO_ADDR
// if not hexes then
44107: LD_VAR 0 12
44111: NOT
44112: IFFALSE 44116
// exit ;
44114: GO 44589
// hex := GetHexInfo ( x , y ) ;
44116: LD_ADDR_VAR 0 15
44120: PUSH
44121: LD_VAR 0 3
44125: PPUSH
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 546
44135: ST_TO_ADDR
// if hex [ 1 ] then
44136: LD_VAR 0 15
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: IFFALSE 44148
// exit ;
44146: GO 44589
// height := hex [ 2 ] ;
44148: LD_ADDR_VAR 0 13
44152: PUSH
44153: LD_VAR 0 15
44157: PUSH
44158: LD_INT 2
44160: ARRAY
44161: ST_TO_ADDR
// for i = 1 to hexes do
44162: LD_ADDR_VAR 0 7
44166: PUSH
44167: DOUBLE
44168: LD_INT 1
44170: DEC
44171: ST_TO_ADDR
44172: LD_VAR 0 12
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44508
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44180: LD_VAR 0 12
44184: PUSH
44185: LD_VAR 0 7
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PPUSH
44195: LD_VAR 0 12
44199: PUSH
44200: LD_VAR 0 7
44204: ARRAY
44205: PUSH
44206: LD_INT 2
44208: ARRAY
44209: PPUSH
44210: CALL_OW 488
44214: NOT
44215: PUSH
44216: LD_VAR 0 12
44220: PUSH
44221: LD_VAR 0 7
44225: ARRAY
44226: PUSH
44227: LD_INT 1
44229: ARRAY
44230: PPUSH
44231: LD_VAR 0 12
44235: PUSH
44236: LD_VAR 0 7
44240: ARRAY
44241: PUSH
44242: LD_INT 2
44244: ARRAY
44245: PPUSH
44246: CALL_OW 428
44250: PUSH
44251: LD_INT 0
44253: GREATER
44254: OR
44255: PUSH
44256: LD_VAR 0 12
44260: PUSH
44261: LD_VAR 0 7
44265: ARRAY
44266: PUSH
44267: LD_INT 1
44269: ARRAY
44270: PPUSH
44271: LD_VAR 0 12
44275: PUSH
44276: LD_VAR 0 7
44280: ARRAY
44281: PUSH
44282: LD_INT 2
44284: ARRAY
44285: PPUSH
44286: CALL_OW 351
44290: OR
44291: IFFALSE 44297
// exit ;
44293: POP
44294: POP
44295: GO 44589
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 12
44306: PUSH
44307: LD_VAR 0 7
44311: ARRAY
44312: PUSH
44313: LD_INT 1
44315: ARRAY
44316: PPUSH
44317: LD_VAR 0 12
44321: PUSH
44322: LD_VAR 0 7
44326: ARRAY
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: PPUSH
44332: CALL_OW 546
44336: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44337: LD_VAR 0 8
44341: PUSH
44342: LD_INT 1
44344: ARRAY
44345: PUSH
44346: LD_VAR 0 8
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: PUSH
44355: LD_VAR 0 13
44359: PUSH
44360: LD_INT 2
44362: PLUS
44363: GREATER
44364: OR
44365: PUSH
44366: LD_VAR 0 8
44370: PUSH
44371: LD_INT 2
44373: ARRAY
44374: PUSH
44375: LD_VAR 0 13
44379: PUSH
44380: LD_INT 2
44382: MINUS
44383: LESS
44384: OR
44385: PUSH
44386: LD_VAR 0 8
44390: PUSH
44391: LD_INT 3
44393: ARRAY
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 8
44400: PUSH
44401: LD_INT 9
44403: PUSH
44404: LD_INT 10
44406: PUSH
44407: LD_INT 11
44409: PUSH
44410: LD_INT 12
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 16
44418: PUSH
44419: LD_INT 17
44421: PUSH
44422: LD_INT 18
44424: PUSH
44425: LD_INT 19
44427: PUSH
44428: LD_INT 20
44430: PUSH
44431: LD_INT 21
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: IN
44449: NOT
44450: OR
44451: PUSH
44452: LD_VAR 0 8
44456: PUSH
44457: LD_INT 5
44459: ARRAY
44460: NOT
44461: OR
44462: PUSH
44463: LD_VAR 0 8
44467: PUSH
44468: LD_INT 6
44470: ARRAY
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 7
44480: PUSH
44481: LD_INT 9
44483: PUSH
44484: LD_INT 10
44486: PUSH
44487: LD_INT 11
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: IN
44498: NOT
44499: OR
44500: IFFALSE 44506
// exit ;
44502: POP
44503: POP
44504: GO 44589
// end ;
44506: GO 44177
44508: POP
44509: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44510: LD_VAR 0 9
44514: PPUSH
44515: LD_VAR 0 3
44519: PPUSH
44520: LD_VAR 0 4
44524: PPUSH
44525: LD_INT 20
44527: PPUSH
44528: CALL 36535 0 4
44532: PUSH
44533: LD_INT 4
44535: ARRAY
44536: IFFALSE 44540
// exit ;
44538: GO 44589
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44540: LD_VAR 0 2
44544: PUSH
44545: LD_INT 29
44547: PUSH
44548: LD_INT 30
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: IN
44555: PUSH
44556: LD_VAR 0 3
44560: PPUSH
44561: LD_VAR 0 4
44565: PPUSH
44566: LD_VAR 0 9
44570: PPUSH
44571: CALL_OW 440
44575: NOT
44576: AND
44577: IFFALSE 44581
// exit ;
44579: GO 44589
// result := true ;
44581: LD_ADDR_VAR 0 6
44585: PUSH
44586: LD_INT 1
44588: ST_TO_ADDR
// end ;
44589: LD_VAR 0 6
44593: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44594: LD_INT 0
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
// result = [ ] ;
44654: LD_ADDR_VAR 0 7
44658: PUSH
44659: EMPTY
44660: ST_TO_ADDR
// temp_list = [ ] ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: EMPTY
44667: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44668: LD_VAR 0 4
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 3
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: LD_INT 5
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: IN
44699: NOT
44700: PUSH
44701: LD_VAR 0 1
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: IN
44716: PUSH
44717: LD_VAR 0 5
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: IN
44736: NOT
44737: AND
44738: OR
44739: IFFALSE 44743
// exit ;
44741: GO 63134
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44743: LD_VAR 0 1
44747: PUSH
44748: LD_INT 6
44750: PUSH
44751: LD_INT 7
44753: PUSH
44754: LD_INT 8
44756: PUSH
44757: LD_INT 13
44759: PUSH
44760: LD_INT 12
44762: PUSH
44763: LD_INT 15
44765: PUSH
44766: LD_INT 11
44768: PUSH
44769: LD_INT 14
44771: PUSH
44772: LD_INT 10
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: IN
44786: IFFALSE 44796
// btype = b_lab ;
44788: LD_ADDR_VAR 0 1
44792: PUSH
44793: LD_INT 6
44795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44796: LD_VAR 0 6
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: IN
44815: NOT
44816: PUSH
44817: LD_VAR 0 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 6
44836: PUSH
44837: LD_INT 36
44839: PUSH
44840: LD_INT 4
44842: PUSH
44843: LD_INT 5
44845: PUSH
44846: LD_INT 31
44848: PUSH
44849: LD_INT 32
44851: PUSH
44852: LD_INT 33
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: IN
44868: NOT
44869: PUSH
44870: LD_VAR 0 6
44874: PUSH
44875: LD_INT 1
44877: EQUAL
44878: AND
44879: OR
44880: PUSH
44881: LD_VAR 0 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: IN
44896: NOT
44897: PUSH
44898: LD_VAR 0 6
44902: PUSH
44903: LD_INT 2
44905: EQUAL
44906: AND
44907: OR
44908: IFFALSE 44918
// mode = 0 ;
44910: LD_ADDR_VAR 0 6
44914: PUSH
44915: LD_INT 0
44917: ST_TO_ADDR
// case mode of 0 :
44918: LD_VAR 0 6
44922: PUSH
44923: LD_INT 0
44925: DOUBLE
44926: EQUAL
44927: IFTRUE 44931
44929: GO 56384
44931: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44932: LD_ADDR_VAR 0 11
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45125: LD_ADDR_VAR 0 12
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45321: LD_ADDR_VAR 0 13
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 3
45492: NEG
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45520: LD_ADDR_VAR 0 14
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45716: LD_ADDR_VAR 0 15
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45909: LD_ADDR_VAR 0 16
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46102: LD_ADDR_VAR 0 17
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 2
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46332: LD_ADDR_VAR 0 18
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46562: LD_ADDR_VAR 0 19
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46792: LD_ADDR_VAR 0 20
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47022: LD_ADDR_VAR 0 21
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47252: LD_ADDR_VAR 0 22
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47482: LD_ADDR_VAR 0 23
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47762: LD_ADDR_VAR 0 24
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48038: LD_ADDR_VAR 0 25
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48312: LD_ADDR_VAR 0 26
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48588: LD_ADDR_VAR 0 27
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48868: LD_ADDR_VAR 0 28
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49150: LD_ADDR_VAR 0 29
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49429: LD_ADDR_VAR 0 30
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49707: LD_ADDR_VAR 0 31
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49985: LD_ADDR_VAR 0 32
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50263: LD_ADDR_VAR 0 33
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50542: LD_ADDR_VAR 0 34
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50822: LD_ADDR_VAR 0 35
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50934: LD_ADDR_VAR 0 36
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51046: LD_ADDR_VAR 0 37
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51158: LD_ADDR_VAR 0 38
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51270: LD_ADDR_VAR 0 39
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51382: LD_ADDR_VAR 0 40
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51494: LD_ADDR_VAR 0 41
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 3
51803: NEG
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51844: LD_ADDR_VAR 0 42
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52194: LD_ADDR_VAR 0 43
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52542: LD_ADDR_VAR 0 44
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 3
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52892: LD_ADDR_VAR 0 45
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 2
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53242: LD_ADDR_VAR 0 46
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53590: LD_ADDR_VAR 0 47
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53741: LD_ADDR_VAR 0 48
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53888: LD_ADDR_VAR 0 49
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54032: LD_ADDR_VAR 0 50
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54176: LD_ADDR_VAR 0 51
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54323: LD_ADDR_VAR 0 52
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54474: LD_ADDR_VAR 0 53
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54704: LD_ADDR_VAR 0 54
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54934: LD_ADDR_VAR 0 55
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55164: LD_ADDR_VAR 0 56
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55394: LD_ADDR_VAR 0 57
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55624: LD_ADDR_VAR 0 58
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55854: LD_ADDR_VAR 0 59
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55942: LD_ADDR_VAR 0 60
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56030: LD_ADDR_VAR 0 61
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56118: LD_ADDR_VAR 0 62
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56206: LD_ADDR_VAR 0 63
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56294: LD_ADDR_VAR 0 64
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// end ; 1 :
56382: GO 62279
56384: LD_INT 1
56386: DOUBLE
56387: EQUAL
56388: IFTRUE 56392
56390: GO 59015
56392: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56393: LD_ADDR_VAR 0 11
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56437: LD_ADDR_VAR 0 12
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56478: LD_ADDR_VAR 0 13
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56518: LD_ADDR_VAR 0 14
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56559: LD_ADDR_VAR 0 15
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56603: LD_ADDR_VAR 0 16
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56649: LD_ADDR_VAR 0 17
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56693: LD_ADDR_VAR 0 18
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56734: LD_ADDR_VAR 0 19
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56774: LD_ADDR_VAR 0 20
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56815: LD_ADDR_VAR 0 21
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56859: LD_ADDR_VAR 0 22
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56905: LD_ADDR_VAR 0 23
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56949: LD_ADDR_VAR 0 24
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56990: LD_ADDR_VAR 0 25
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57030: LD_ADDR_VAR 0 26
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57071: LD_ADDR_VAR 0 27
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 4
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57115: LD_ADDR_VAR 0 28
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: LD_INT 4
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 4
57146: NEG
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57161: LD_ADDR_VAR 0 29
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 3
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 4
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 5
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 5
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 6
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 6
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57316: LD_ADDR_VAR 0 30
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 3
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 5
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 5
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 6
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 6
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57459: LD_ADDR_VAR 0 31
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 3
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 5
57526: PUSH
57527: LD_INT 4
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 5
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 4
57546: PUSH
57547: LD_INT 5
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 6
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 6
57566: PUSH
57567: LD_INT 6
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 5
57576: PUSH
57577: LD_INT 6
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57598: LD_ADDR_VAR 0 32
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 5
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 5
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 6
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 6
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: LD_INT 5
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57741: LD_ADDR_VAR 0 33
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 4
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 4
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 5
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 5
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 6
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 6
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57896: LD_ADDR_VAR 0 34
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: LD_INT 4
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 4
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: NEG
57976: PUSH
57977: LD_INT 5
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 5
57987: NEG
57988: PUSH
57989: LD_INT 4
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 5
57999: NEG
58000: PUSH
58001: LD_INT 5
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 5
58011: NEG
58012: PUSH
58013: LD_INT 6
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 6
58023: NEG
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 6
58035: NEG
58036: PUSH
58037: LD_INT 6
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58059: LD_ADDR_VAR 0 41
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58103: LD_ADDR_VAR 0 42
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58144: LD_ADDR_VAR 0 43
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58184: LD_ADDR_VAR 0 44
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58225: LD_ADDR_VAR 0 45
58229: PUSH
58230: LD_INT 2
58232: NEG
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58269: LD_ADDR_VAR 0 46
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 3
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58315: LD_ADDR_VAR 0 47
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58348: LD_ADDR_VAR 0 48
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58379: LD_ADDR_VAR 0 49
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58408: LD_ADDR_VAR 0 50
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58437: LD_ADDR_VAR 0 51
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58468: LD_ADDR_VAR 0 52
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: LD_INT 2
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58501: LD_ADDR_VAR 0 53
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58545: LD_ADDR_VAR 0 54
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58586: LD_ADDR_VAR 0 55
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58626: LD_ADDR_VAR 0 56
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 3
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58667: LD_ADDR_VAR 0 57
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58711: LD_ADDR_VAR 0 58
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58757: LD_ADDR_VAR 0 59
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58801: LD_ADDR_VAR 0 60
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58842: LD_ADDR_VAR 0 61
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58882: LD_ADDR_VAR 0 62
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58923: LD_ADDR_VAR 0 63
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58967: LD_ADDR_VAR 0 64
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// end ; 2 :
59013: GO 62279
59015: LD_INT 2
59017: DOUBLE
59018: EQUAL
59019: IFTRUE 59023
59021: GO 62278
59023: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59024: LD_ADDR_VAR 0 29
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 4
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 4
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: LD_INT 4
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 4
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 5
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 2
59296: NEG
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 4
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 4
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 4
59421: NEG
59422: PUSH
59423: LD_INT 5
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 4
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 5
59469: NEG
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PUSH
59483: LD_INT 5
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 5
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59562: LD_ADDR_VAR 0 30
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 4
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 5
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 4
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 5
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 5
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 4
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 4
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: NEG
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 5
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 5
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 5
59831: NEG
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 4
59926: NEG
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 4
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 5
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: LD_INT 4
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: LD_INT 5
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 3
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 5
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60109: LD_ADDR_VAR 0 31
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 4
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 4
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 5
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 5
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 4
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 5
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 4
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 4
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 4
60311: NEG
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 4
60323: NEG
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: LD_INT 4
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 5
60371: NEG
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: NEG
60384: PUSH
60385: LD_INT 5
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 5
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 5
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 4
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 3
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 4
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 5
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 4
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60659: LD_ADDR_VAR 0 32
60663: PUSH
60664: LD_INT 4
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 4
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: NEG
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 3
60700: NEG
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 4
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 5
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 5
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 5
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 4
60840: NEG
60841: PUSH
60842: LD_INT 4
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 4
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 5
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 3
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 4
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 5
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 4
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 4
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 4
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 5
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: PUSH
61112: LD_INT 5
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 5
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: LD_INT 5
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61206: LD_ADDR_VAR 0 33
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 4
61225: NEG
61226: PUSH
61227: LD_INT 5
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 4
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 4
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 5
61285: NEG
61286: PUSH
61287: LD_INT 5
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 5
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 4
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 4
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 5
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 5
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 4
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 4
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 4
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 5
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 5
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 4
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61744: LD_ADDR_VAR 0 34
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 4
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 5
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 3
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: LD_INT 4
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 4
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 4
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 5
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 5
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: LD_INT 5
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: LD_INT 3
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 5
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: LD_INT 4
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 4
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 5
62185: NEG
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 5
62196: NEG
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 5
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 3
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: ST_TO_ADDR
// end ; end ;
62276: GO 62279
62278: POP
// case btype of b_depot , b_warehouse :
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 0
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62298
62290: LD_INT 1
62292: DOUBLE
62293: EQUAL
62294: IFTRUE 62298
62296: GO 62499
62298: POP
// case nation of nation_american :
62299: LD_VAR 0 5
62303: PUSH
62304: LD_INT 1
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62312
62310: GO 62368
62312: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62313: LD_ADDR_VAR 0 9
62317: PUSH
62318: LD_VAR 0 11
62322: PUSH
62323: LD_VAR 0 12
62327: PUSH
62328: LD_VAR 0 13
62332: PUSH
62333: LD_VAR 0 14
62337: PUSH
62338: LD_VAR 0 15
62342: PUSH
62343: LD_VAR 0 16
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: PUSH
62356: LD_VAR 0 4
62360: PUSH
62361: LD_INT 1
62363: PLUS
62364: ARRAY
62365: ST_TO_ADDR
62366: GO 62497
62368: LD_INT 2
62370: DOUBLE
62371: EQUAL
62372: IFTRUE 62376
62374: GO 62432
62376: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62377: LD_ADDR_VAR 0 9
62381: PUSH
62382: LD_VAR 0 17
62386: PUSH
62387: LD_VAR 0 18
62391: PUSH
62392: LD_VAR 0 19
62396: PUSH
62397: LD_VAR 0 20
62401: PUSH
62402: LD_VAR 0 21
62406: PUSH
62407: LD_VAR 0 22
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: PUSH
62420: LD_VAR 0 4
62424: PUSH
62425: LD_INT 1
62427: PLUS
62428: ARRAY
62429: ST_TO_ADDR
62430: GO 62497
62432: LD_INT 3
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 62496
62440: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62441: LD_ADDR_VAR 0 9
62445: PUSH
62446: LD_VAR 0 23
62450: PUSH
62451: LD_VAR 0 24
62455: PUSH
62456: LD_VAR 0 25
62460: PUSH
62461: LD_VAR 0 26
62465: PUSH
62466: LD_VAR 0 27
62470: PUSH
62471: LD_VAR 0 28
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: PUSH
62484: LD_VAR 0 4
62488: PUSH
62489: LD_INT 1
62491: PLUS
62492: ARRAY
62493: ST_TO_ADDR
62494: GO 62497
62496: POP
62497: GO 63052
62499: LD_INT 2
62501: DOUBLE
62502: EQUAL
62503: IFTRUE 62513
62505: LD_INT 3
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62513
62511: GO 62569
62513: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62514: LD_ADDR_VAR 0 9
62518: PUSH
62519: LD_VAR 0 29
62523: PUSH
62524: LD_VAR 0 30
62528: PUSH
62529: LD_VAR 0 31
62533: PUSH
62534: LD_VAR 0 32
62538: PUSH
62539: LD_VAR 0 33
62543: PUSH
62544: LD_VAR 0 34
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 4
62561: PUSH
62562: LD_INT 1
62564: PLUS
62565: ARRAY
62566: ST_TO_ADDR
62567: GO 63052
62569: LD_INT 16
62571: DOUBLE
62572: EQUAL
62573: IFTRUE 62631
62575: LD_INT 17
62577: DOUBLE
62578: EQUAL
62579: IFTRUE 62631
62581: LD_INT 18
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62631
62587: LD_INT 19
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62631
62593: LD_INT 22
62595: DOUBLE
62596: EQUAL
62597: IFTRUE 62631
62599: LD_INT 20
62601: DOUBLE
62602: EQUAL
62603: IFTRUE 62631
62605: LD_INT 21
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62631
62611: LD_INT 23
62613: DOUBLE
62614: EQUAL
62615: IFTRUE 62631
62617: LD_INT 24
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62631
62623: LD_INT 25
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62631
62629: GO 62687
62631: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62632: LD_ADDR_VAR 0 9
62636: PUSH
62637: LD_VAR 0 35
62641: PUSH
62642: LD_VAR 0 36
62646: PUSH
62647: LD_VAR 0 37
62651: PUSH
62652: LD_VAR 0 38
62656: PUSH
62657: LD_VAR 0 39
62661: PUSH
62662: LD_VAR 0 40
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 4
62679: PUSH
62680: LD_INT 1
62682: PLUS
62683: ARRAY
62684: ST_TO_ADDR
62685: GO 63052
62687: LD_INT 6
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62743
62693: LD_INT 7
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62743
62699: LD_INT 8
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62743
62705: LD_INT 13
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62743
62711: LD_INT 12
62713: DOUBLE
62714: EQUAL
62715: IFTRUE 62743
62717: LD_INT 15
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62743
62723: LD_INT 11
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62743
62729: LD_INT 14
62731: DOUBLE
62732: EQUAL
62733: IFTRUE 62743
62735: LD_INT 10
62737: DOUBLE
62738: EQUAL
62739: IFTRUE 62743
62741: GO 62799
62743: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62744: LD_ADDR_VAR 0 9
62748: PUSH
62749: LD_VAR 0 41
62753: PUSH
62754: LD_VAR 0 42
62758: PUSH
62759: LD_VAR 0 43
62763: PUSH
62764: LD_VAR 0 44
62768: PUSH
62769: LD_VAR 0 45
62773: PUSH
62774: LD_VAR 0 46
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: PUSH
62787: LD_VAR 0 4
62791: PUSH
62792: LD_INT 1
62794: PLUS
62795: ARRAY
62796: ST_TO_ADDR
62797: GO 63052
62799: LD_INT 36
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62807
62805: GO 62863
62807: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62808: LD_ADDR_VAR 0 9
62812: PUSH
62813: LD_VAR 0 47
62817: PUSH
62818: LD_VAR 0 48
62822: PUSH
62823: LD_VAR 0 49
62827: PUSH
62828: LD_VAR 0 50
62832: PUSH
62833: LD_VAR 0 51
62837: PUSH
62838: LD_VAR 0 52
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: LD_VAR 0 4
62855: PUSH
62856: LD_INT 1
62858: PLUS
62859: ARRAY
62860: ST_TO_ADDR
62861: GO 63052
62863: LD_INT 4
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62889
62869: LD_INT 5
62871: DOUBLE
62872: EQUAL
62873: IFTRUE 62889
62875: LD_INT 34
62877: DOUBLE
62878: EQUAL
62879: IFTRUE 62889
62881: LD_INT 37
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62889
62887: GO 62945
62889: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62890: LD_ADDR_VAR 0 9
62894: PUSH
62895: LD_VAR 0 53
62899: PUSH
62900: LD_VAR 0 54
62904: PUSH
62905: LD_VAR 0 55
62909: PUSH
62910: LD_VAR 0 56
62914: PUSH
62915: LD_VAR 0 57
62919: PUSH
62920: LD_VAR 0 58
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: PUSH
62933: LD_VAR 0 4
62937: PUSH
62938: LD_INT 1
62940: PLUS
62941: ARRAY
62942: ST_TO_ADDR
62943: GO 63052
62945: LD_INT 31
62947: DOUBLE
62948: EQUAL
62949: IFTRUE 62995
62951: LD_INT 32
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62995
62957: LD_INT 33
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62995
62963: LD_INT 27
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62995
62969: LD_INT 26
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62995
62975: LD_INT 28
62977: DOUBLE
62978: EQUAL
62979: IFTRUE 62995
62981: LD_INT 29
62983: DOUBLE
62984: EQUAL
62985: IFTRUE 62995
62987: LD_INT 30
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 62995
62993: GO 63051
62995: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62996: LD_ADDR_VAR 0 9
63000: PUSH
63001: LD_VAR 0 59
63005: PUSH
63006: LD_VAR 0 60
63010: PUSH
63011: LD_VAR 0 61
63015: PUSH
63016: LD_VAR 0 62
63020: PUSH
63021: LD_VAR 0 63
63025: PUSH
63026: LD_VAR 0 64
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_VAR 0 4
63043: PUSH
63044: LD_INT 1
63046: PLUS
63047: ARRAY
63048: ST_TO_ADDR
63049: GO 63052
63051: POP
// temp_list2 = [ ] ;
63052: LD_ADDR_VAR 0 10
63056: PUSH
63057: EMPTY
63058: ST_TO_ADDR
// for i in temp_list do
63059: LD_ADDR_VAR 0 8
63063: PUSH
63064: LD_VAR 0 9
63068: PUSH
63069: FOR_IN
63070: IFFALSE 63122
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63072: LD_ADDR_VAR 0 10
63076: PUSH
63077: LD_VAR 0 10
63081: PUSH
63082: LD_VAR 0 8
63086: PUSH
63087: LD_INT 1
63089: ARRAY
63090: PUSH
63091: LD_VAR 0 2
63095: PLUS
63096: PUSH
63097: LD_VAR 0 8
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: PUSH
63106: LD_VAR 0 3
63110: PLUS
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: EMPTY
63117: LIST
63118: ADD
63119: ST_TO_ADDR
63120: GO 63069
63122: POP
63123: POP
// result = temp_list2 ;
63124: LD_ADDR_VAR 0 7
63128: PUSH
63129: LD_VAR 0 10
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 7
63138: RET
// export function EnemyInRange ( unit , dist ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63142: LD_ADDR_VAR 0 3
63146: PUSH
63147: LD_VAR 0 1
63151: PPUSH
63152: CALL_OW 255
63156: PPUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 250
63166: PPUSH
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL_OW 251
63176: PPUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: CALL 36535 0 4
63186: PUSH
63187: LD_INT 4
63189: ARRAY
63190: ST_TO_ADDR
// end ;
63191: LD_VAR 0 3
63195: RET
// export function PlayerSeeMe ( unit ) ; begin
63196: LD_INT 0
63198: PPUSH
// result := See ( your_side , unit ) ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_OWVAR 2
63208: PPUSH
63209: LD_VAR 0 1
63213: PPUSH
63214: CALL_OW 292
63218: ST_TO_ADDR
// end ;
63219: LD_VAR 0 2
63223: RET
// export function ReverseDir ( unit ) ; begin
63224: LD_INT 0
63226: PPUSH
// if not unit then
63227: LD_VAR 0 1
63231: NOT
63232: IFFALSE 63236
// exit ;
63234: GO 63259
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63236: LD_ADDR_VAR 0 2
63240: PUSH
63241: LD_VAR 0 1
63245: PPUSH
63246: CALL_OW 254
63250: PUSH
63251: LD_INT 3
63253: PLUS
63254: PUSH
63255: LD_INT 6
63257: MOD
63258: ST_TO_ADDR
// end ;
63259: LD_VAR 0 2
63263: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63264: LD_INT 0
63266: PPUSH
63267: PPUSH
63268: PPUSH
63269: PPUSH
63270: PPUSH
// if not hexes then
63271: LD_VAR 0 2
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63428
// dist := 9999 ;
63280: LD_ADDR_VAR 0 5
63284: PUSH
63285: LD_INT 9999
63287: ST_TO_ADDR
// for i = 1 to hexes do
63288: LD_ADDR_VAR 0 4
63292: PUSH
63293: DOUBLE
63294: LD_INT 1
63296: DEC
63297: ST_TO_ADDR
63298: LD_VAR 0 2
63302: PUSH
63303: FOR_TO
63304: IFFALSE 63416
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63306: LD_VAR 0 1
63310: PPUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_VAR 0 4
63320: ARRAY
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: PPUSH
63326: LD_VAR 0 2
63330: PUSH
63331: LD_VAR 0 4
63335: ARRAY
63336: PUSH
63337: LD_INT 2
63339: ARRAY
63340: PPUSH
63341: CALL_OW 297
63345: PUSH
63346: LD_VAR 0 5
63350: LESS
63351: IFFALSE 63414
// begin hex := hexes [ i ] ;
63353: LD_ADDR_VAR 0 7
63357: PUSH
63358: LD_VAR 0 2
63362: PUSH
63363: LD_VAR 0 4
63367: ARRAY
63368: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63369: LD_ADDR_VAR 0 5
63373: PUSH
63374: LD_VAR 0 1
63378: PPUSH
63379: LD_VAR 0 2
63383: PUSH
63384: LD_VAR 0 4
63388: ARRAY
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: PPUSH
63394: LD_VAR 0 2
63398: PUSH
63399: LD_VAR 0 4
63403: ARRAY
63404: PUSH
63405: LD_INT 2
63407: ARRAY
63408: PPUSH
63409: CALL_OW 297
63413: ST_TO_ADDR
// end ; end ;
63414: GO 63303
63416: POP
63417: POP
// result := hex ;
63418: LD_ADDR_VAR 0 3
63422: PUSH
63423: LD_VAR 0 7
63427: ST_TO_ADDR
// end ;
63428: LD_VAR 0 3
63432: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63433: LD_INT 0
63435: PPUSH
63436: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63437: LD_VAR 0 1
63441: NOT
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: LD_INT 21
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 23
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PPUSH
63472: CALL_OW 69
63476: IN
63477: NOT
63478: OR
63479: IFFALSE 63483
// exit ;
63481: GO 63530
// for i = 1 to 3 do
63483: LD_ADDR_VAR 0 3
63487: PUSH
63488: DOUBLE
63489: LD_INT 1
63491: DEC
63492: ST_TO_ADDR
63493: LD_INT 3
63495: PUSH
63496: FOR_TO
63497: IFFALSE 63528
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 250
63508: PPUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: CALL_OW 251
63518: PPUSH
63519: LD_INT 1
63521: PPUSH
63522: CALL_OW 453
63526: GO 63496
63528: POP
63529: POP
// end ;
63530: LD_VAR 0 2
63534: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63535: LD_INT 0
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63543: LD_VAR 0 1
63547: NOT
63548: PUSH
63549: LD_VAR 0 2
63553: NOT
63554: OR
63555: PUSH
63556: LD_VAR 0 1
63560: PPUSH
63561: CALL_OW 314
63565: OR
63566: IFFALSE 63570
// exit ;
63568: GO 64011
// x := GetX ( enemy_unit ) ;
63570: LD_ADDR_VAR 0 7
63574: PUSH
63575: LD_VAR 0 2
63579: PPUSH
63580: CALL_OW 250
63584: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63585: LD_ADDR_VAR 0 8
63589: PUSH
63590: LD_VAR 0 2
63594: PPUSH
63595: CALL_OW 251
63599: ST_TO_ADDR
// if not x or not y then
63600: LD_VAR 0 7
63604: NOT
63605: PUSH
63606: LD_VAR 0 8
63610: NOT
63611: OR
63612: IFFALSE 63616
// exit ;
63614: GO 64011
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63616: LD_ADDR_VAR 0 6
63620: PUSH
63621: LD_VAR 0 7
63625: PPUSH
63626: LD_INT 0
63628: PPUSH
63629: LD_INT 4
63631: PPUSH
63632: CALL_OW 272
63636: PUSH
63637: LD_VAR 0 8
63641: PPUSH
63642: LD_INT 0
63644: PPUSH
63645: LD_INT 4
63647: PPUSH
63648: CALL_OW 273
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 7
63661: PPUSH
63662: LD_INT 1
63664: PPUSH
63665: LD_INT 4
63667: PPUSH
63668: CALL_OW 272
63672: PUSH
63673: LD_VAR 0 8
63677: PPUSH
63678: LD_INT 1
63680: PPUSH
63681: LD_INT 4
63683: PPUSH
63684: CALL_OW 273
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_VAR 0 7
63697: PPUSH
63698: LD_INT 2
63700: PPUSH
63701: LD_INT 4
63703: PPUSH
63704: CALL_OW 272
63708: PUSH
63709: LD_VAR 0 8
63713: PPUSH
63714: LD_INT 2
63716: PPUSH
63717: LD_INT 4
63719: PPUSH
63720: CALL_OW 273
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_VAR 0 7
63733: PPUSH
63734: LD_INT 3
63736: PPUSH
63737: LD_INT 4
63739: PPUSH
63740: CALL_OW 272
63744: PUSH
63745: LD_VAR 0 8
63749: PPUSH
63750: LD_INT 3
63752: PPUSH
63753: LD_INT 4
63755: PPUSH
63756: CALL_OW 273
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_VAR 0 7
63769: PPUSH
63770: LD_INT 4
63772: PPUSH
63773: LD_INT 4
63775: PPUSH
63776: CALL_OW 272
63780: PUSH
63781: LD_VAR 0 8
63785: PPUSH
63786: LD_INT 4
63788: PPUSH
63789: LD_INT 4
63791: PPUSH
63792: CALL_OW 273
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_VAR 0 7
63805: PPUSH
63806: LD_INT 5
63808: PPUSH
63809: LD_INT 4
63811: PPUSH
63812: CALL_OW 272
63816: PUSH
63817: LD_VAR 0 8
63821: PPUSH
63822: LD_INT 5
63824: PPUSH
63825: LD_INT 4
63827: PPUSH
63828: CALL_OW 273
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// for i = tmp downto 1 do
63845: LD_ADDR_VAR 0 4
63849: PUSH
63850: DOUBLE
63851: LD_VAR 0 6
63855: INC
63856: ST_TO_ADDR
63857: LD_INT 1
63859: PUSH
63860: FOR_DOWNTO
63861: IFFALSE 63962
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63863: LD_VAR 0 6
63867: PUSH
63868: LD_VAR 0 4
63872: ARRAY
63873: PUSH
63874: LD_INT 1
63876: ARRAY
63877: PPUSH
63878: LD_VAR 0 6
63882: PUSH
63883: LD_VAR 0 4
63887: ARRAY
63888: PUSH
63889: LD_INT 2
63891: ARRAY
63892: PPUSH
63893: CALL_OW 488
63897: NOT
63898: PUSH
63899: LD_VAR 0 6
63903: PUSH
63904: LD_VAR 0 4
63908: ARRAY
63909: PUSH
63910: LD_INT 1
63912: ARRAY
63913: PPUSH
63914: LD_VAR 0 6
63918: PUSH
63919: LD_VAR 0 4
63923: ARRAY
63924: PUSH
63925: LD_INT 2
63927: ARRAY
63928: PPUSH
63929: CALL_OW 428
63933: PUSH
63934: LD_INT 0
63936: NONEQUAL
63937: OR
63938: IFFALSE 63960
// tmp := Delete ( tmp , i ) ;
63940: LD_ADDR_VAR 0 6
63944: PUSH
63945: LD_VAR 0 6
63949: PPUSH
63950: LD_VAR 0 4
63954: PPUSH
63955: CALL_OW 3
63959: ST_TO_ADDR
63960: GO 63860
63962: POP
63963: POP
// j := GetClosestHex ( unit , tmp ) ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: LD_VAR 0 6
63978: PPUSH
63979: CALL 63264 0 2
63983: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63984: LD_VAR 0 1
63988: PPUSH
63989: LD_VAR 0 5
63993: PUSH
63994: LD_INT 1
63996: ARRAY
63997: PPUSH
63998: LD_VAR 0 5
64002: PUSH
64003: LD_INT 2
64005: ARRAY
64006: PPUSH
64007: CALL_OW 111
// end ;
64011: LD_VAR 0 3
64015: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64016: LD_INT 0
64018: PPUSH
64019: PPUSH
64020: PPUSH
// uc_side = 0 ;
64021: LD_ADDR_OWVAR 20
64025: PUSH
64026: LD_INT 0
64028: ST_TO_ADDR
// uc_nation = 0 ;
64029: LD_ADDR_OWVAR 21
64033: PUSH
64034: LD_INT 0
64036: ST_TO_ADDR
// InitHc_All ( ) ;
64037: CALL_OW 584
// InitVc ;
64041: CALL_OW 20
// if mastodonts then
64045: LD_VAR 0 6
64049: IFFALSE 64116
// for i = 1 to mastodonts do
64051: LD_ADDR_VAR 0 11
64055: PUSH
64056: DOUBLE
64057: LD_INT 1
64059: DEC
64060: ST_TO_ADDR
64061: LD_VAR 0 6
64065: PUSH
64066: FOR_TO
64067: IFFALSE 64114
// begin vc_chassis := 31 ;
64069: LD_ADDR_OWVAR 37
64073: PUSH
64074: LD_INT 31
64076: ST_TO_ADDR
// vc_control := control_rider ;
64077: LD_ADDR_OWVAR 38
64081: PUSH
64082: LD_INT 4
64084: ST_TO_ADDR
// animal := CreateVehicle ;
64085: LD_ADDR_VAR 0 12
64089: PUSH
64090: CALL_OW 45
64094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64095: LD_VAR 0 12
64099: PPUSH
64100: LD_VAR 0 8
64104: PPUSH
64105: LD_INT 0
64107: PPUSH
64108: CALL 66304 0 3
// end ;
64112: GO 64066
64114: POP
64115: POP
// if horses then
64116: LD_VAR 0 5
64120: IFFALSE 64187
// for i = 1 to horses do
64122: LD_ADDR_VAR 0 11
64126: PUSH
64127: DOUBLE
64128: LD_INT 1
64130: DEC
64131: ST_TO_ADDR
64132: LD_VAR 0 5
64136: PUSH
64137: FOR_TO
64138: IFFALSE 64185
// begin hc_class := 21 ;
64140: LD_ADDR_OWVAR 28
64144: PUSH
64145: LD_INT 21
64147: ST_TO_ADDR
// hc_gallery :=  ;
64148: LD_ADDR_OWVAR 33
64152: PUSH
64153: LD_STRING 
64155: ST_TO_ADDR
// animal := CreateHuman ;
64156: LD_ADDR_VAR 0 12
64160: PUSH
64161: CALL_OW 44
64165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64166: LD_VAR 0 12
64170: PPUSH
64171: LD_VAR 0 8
64175: PPUSH
64176: LD_INT 0
64178: PPUSH
64179: CALL 66304 0 3
// end ;
64183: GO 64137
64185: POP
64186: POP
// if birds then
64187: LD_VAR 0 1
64191: IFFALSE 64258
// for i = 1 to birds do
64193: LD_ADDR_VAR 0 11
64197: PUSH
64198: DOUBLE
64199: LD_INT 1
64201: DEC
64202: ST_TO_ADDR
64203: LD_VAR 0 1
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64256
// begin hc_class = 18 ;
64211: LD_ADDR_OWVAR 28
64215: PUSH
64216: LD_INT 18
64218: ST_TO_ADDR
// hc_gallery =  ;
64219: LD_ADDR_OWVAR 33
64223: PUSH
64224: LD_STRING 
64226: ST_TO_ADDR
// animal := CreateHuman ;
64227: LD_ADDR_VAR 0 12
64231: PUSH
64232: CALL_OW 44
64236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64237: LD_VAR 0 12
64241: PPUSH
64242: LD_VAR 0 8
64246: PPUSH
64247: LD_INT 0
64249: PPUSH
64250: CALL 66304 0 3
// end ;
64254: GO 64208
64256: POP
64257: POP
// if tigers then
64258: LD_VAR 0 2
64262: IFFALSE 64346
// for i = 1 to tigers do
64264: LD_ADDR_VAR 0 11
64268: PUSH
64269: DOUBLE
64270: LD_INT 1
64272: DEC
64273: ST_TO_ADDR
64274: LD_VAR 0 2
64278: PUSH
64279: FOR_TO
64280: IFFALSE 64344
// begin hc_class = class_tiger ;
64282: LD_ADDR_OWVAR 28
64286: PUSH
64287: LD_INT 14
64289: ST_TO_ADDR
// hc_gallery =  ;
64290: LD_ADDR_OWVAR 33
64294: PUSH
64295: LD_STRING 
64297: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64298: LD_ADDR_OWVAR 35
64302: PUSH
64303: LD_INT 7
64305: NEG
64306: PPUSH
64307: LD_INT 7
64309: PPUSH
64310: CALL_OW 12
64314: ST_TO_ADDR
// animal := CreateHuman ;
64315: LD_ADDR_VAR 0 12
64319: PUSH
64320: CALL_OW 44
64324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64325: LD_VAR 0 12
64329: PPUSH
64330: LD_VAR 0 8
64334: PPUSH
64335: LD_INT 0
64337: PPUSH
64338: CALL 66304 0 3
// end ;
64342: GO 64279
64344: POP
64345: POP
// if apemans then
64346: LD_VAR 0 3
64350: IFFALSE 64473
// for i = 1 to apemans do
64352: LD_ADDR_VAR 0 11
64356: PUSH
64357: DOUBLE
64358: LD_INT 1
64360: DEC
64361: ST_TO_ADDR
64362: LD_VAR 0 3
64366: PUSH
64367: FOR_TO
64368: IFFALSE 64471
// begin hc_class = class_apeman ;
64370: LD_ADDR_OWVAR 28
64374: PUSH
64375: LD_INT 12
64377: ST_TO_ADDR
// hc_gallery =  ;
64378: LD_ADDR_OWVAR 33
64382: PUSH
64383: LD_STRING 
64385: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64386: LD_ADDR_OWVAR 35
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PPUSH
64395: LD_INT 2
64397: PPUSH
64398: CALL_OW 12
64402: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64403: LD_ADDR_OWVAR 31
64407: PUSH
64408: LD_INT 1
64410: PPUSH
64411: LD_INT 3
64413: PPUSH
64414: CALL_OW 12
64418: PUSH
64419: LD_INT 1
64421: PPUSH
64422: LD_INT 3
64424: PPUSH
64425: CALL_OW 12
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// animal := CreateHuman ;
64442: LD_ADDR_VAR 0 12
64446: PUSH
64447: CALL_OW 44
64451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64452: LD_VAR 0 12
64456: PPUSH
64457: LD_VAR 0 8
64461: PPUSH
64462: LD_INT 0
64464: PPUSH
64465: CALL 66304 0 3
// end ;
64469: GO 64367
64471: POP
64472: POP
// if enchidnas then
64473: LD_VAR 0 4
64477: IFFALSE 64544
// for i = 1 to enchidnas do
64479: LD_ADDR_VAR 0 11
64483: PUSH
64484: DOUBLE
64485: LD_INT 1
64487: DEC
64488: ST_TO_ADDR
64489: LD_VAR 0 4
64493: PUSH
64494: FOR_TO
64495: IFFALSE 64542
// begin hc_class = 13 ;
64497: LD_ADDR_OWVAR 28
64501: PUSH
64502: LD_INT 13
64504: ST_TO_ADDR
// hc_gallery =  ;
64505: LD_ADDR_OWVAR 33
64509: PUSH
64510: LD_STRING 
64512: ST_TO_ADDR
// animal := CreateHuman ;
64513: LD_ADDR_VAR 0 12
64517: PUSH
64518: CALL_OW 44
64522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64523: LD_VAR 0 12
64527: PPUSH
64528: LD_VAR 0 8
64532: PPUSH
64533: LD_INT 0
64535: PPUSH
64536: CALL 66304 0 3
// end ;
64540: GO 64494
64542: POP
64543: POP
// if fishes then
64544: LD_VAR 0 7
64548: IFFALSE 64615
// for i = 1 to fishes do
64550: LD_ADDR_VAR 0 11
64554: PUSH
64555: DOUBLE
64556: LD_INT 1
64558: DEC
64559: ST_TO_ADDR
64560: LD_VAR 0 7
64564: PUSH
64565: FOR_TO
64566: IFFALSE 64613
// begin hc_class = 20 ;
64568: LD_ADDR_OWVAR 28
64572: PUSH
64573: LD_INT 20
64575: ST_TO_ADDR
// hc_gallery =  ;
64576: LD_ADDR_OWVAR 33
64580: PUSH
64581: LD_STRING 
64583: ST_TO_ADDR
// animal := CreateHuman ;
64584: LD_ADDR_VAR 0 12
64588: PUSH
64589: CALL_OW 44
64593: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64594: LD_VAR 0 12
64598: PPUSH
64599: LD_VAR 0 9
64603: PPUSH
64604: LD_INT 0
64606: PPUSH
64607: CALL 66304 0 3
// end ;
64611: GO 64565
64613: POP
64614: POP
// end ;
64615: LD_VAR 0 10
64619: RET
// export function WantHeal ( sci , unit ) ; begin
64620: LD_INT 0
64622: PPUSH
// if GetTaskList ( sci ) > 0 then
64623: LD_VAR 0 1
64627: PPUSH
64628: CALL_OW 437
64632: PUSH
64633: LD_INT 0
64635: GREATER
64636: IFFALSE 64706
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64638: LD_VAR 0 1
64642: PPUSH
64643: CALL_OW 437
64647: PUSH
64648: LD_INT 1
64650: ARRAY
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PUSH
64656: LD_STRING l
64658: EQUAL
64659: PUSH
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 437
64669: PUSH
64670: LD_INT 1
64672: ARRAY
64673: PUSH
64674: LD_INT 4
64676: ARRAY
64677: PUSH
64678: LD_VAR 0 2
64682: EQUAL
64683: AND
64684: IFFALSE 64696
// result := true else
64686: LD_ADDR_VAR 0 3
64690: PUSH
64691: LD_INT 1
64693: ST_TO_ADDR
64694: GO 64704
// result := false ;
64696: LD_ADDR_VAR 0 3
64700: PUSH
64701: LD_INT 0
64703: ST_TO_ADDR
// end else
64704: GO 64714
// result := false ;
64706: LD_ADDR_VAR 0 3
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// end ;
64714: LD_VAR 0 3
64718: RET
// export function HealTarget ( sci ) ; begin
64719: LD_INT 0
64721: PPUSH
// if not sci then
64722: LD_VAR 0 1
64726: NOT
64727: IFFALSE 64731
// exit ;
64729: GO 64796
// result := 0 ;
64731: LD_ADDR_VAR 0 2
64735: PUSH
64736: LD_INT 0
64738: ST_TO_ADDR
// if GetTaskList ( sci ) then
64739: LD_VAR 0 1
64743: PPUSH
64744: CALL_OW 437
64748: IFFALSE 64796
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 437
64759: PUSH
64760: LD_INT 1
64762: ARRAY
64763: PUSH
64764: LD_INT 1
64766: ARRAY
64767: PUSH
64768: LD_STRING l
64770: EQUAL
64771: IFFALSE 64796
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64773: LD_ADDR_VAR 0 2
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 437
64787: PUSH
64788: LD_INT 1
64790: ARRAY
64791: PUSH
64792: LD_INT 4
64794: ARRAY
64795: ST_TO_ADDR
// end ;
64796: LD_VAR 0 2
64800: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64801: LD_INT 0
64803: PPUSH
64804: PPUSH
64805: PPUSH
64806: PPUSH
// if not base_units then
64807: LD_VAR 0 1
64811: NOT
64812: IFFALSE 64816
// exit ;
64814: GO 64903
// result := false ;
64816: LD_ADDR_VAR 0 2
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64824: LD_ADDR_VAR 0 5
64828: PUSH
64829: LD_VAR 0 1
64833: PPUSH
64834: LD_INT 21
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PPUSH
64844: CALL_OW 72
64848: ST_TO_ADDR
// if not tmp then
64849: LD_VAR 0 5
64853: NOT
64854: IFFALSE 64858
// exit ;
64856: GO 64903
// for i in tmp do
64858: LD_ADDR_VAR 0 3
64862: PUSH
64863: LD_VAR 0 5
64867: PUSH
64868: FOR_IN
64869: IFFALSE 64901
// begin result := EnemyInRange ( i , 22 ) ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_VAR 0 3
64880: PPUSH
64881: LD_INT 22
64883: PPUSH
64884: CALL 63139 0 2
64888: ST_TO_ADDR
// if result then
64889: LD_VAR 0 2
64893: IFFALSE 64899
// exit ;
64895: POP
64896: POP
64897: GO 64903
// end ;
64899: GO 64868
64901: POP
64902: POP
// end ;
64903: LD_VAR 0 2
64907: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64908: LD_INT 0
64910: PPUSH
64911: PPUSH
// if not units then
64912: LD_VAR 0 1
64916: NOT
64917: IFFALSE 64921
// exit ;
64919: GO 64991
// result := [ ] ;
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: EMPTY
64927: ST_TO_ADDR
// for i in units do
64928: LD_ADDR_VAR 0 4
64932: PUSH
64933: LD_VAR 0 1
64937: PUSH
64938: FOR_IN
64939: IFFALSE 64989
// if GetTag ( i ) = tag then
64941: LD_VAR 0 4
64945: PPUSH
64946: CALL_OW 110
64950: PUSH
64951: LD_VAR 0 2
64955: EQUAL
64956: IFFALSE 64987
// result := Replace ( result , result + 1 , i ) ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: LD_VAR 0 3
64972: PUSH
64973: LD_INT 1
64975: PLUS
64976: PPUSH
64977: LD_VAR 0 4
64981: PPUSH
64982: CALL_OW 1
64986: ST_TO_ADDR
64987: GO 64938
64989: POP
64990: POP
// end ;
64991: LD_VAR 0 3
64995: RET
// export function IsDriver ( un ) ; begin
64996: LD_INT 0
64998: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64999: LD_ADDR_VAR 0 2
65003: PUSH
65004: LD_VAR 0 1
65008: PUSH
65009: LD_INT 55
65011: PUSH
65012: EMPTY
65013: LIST
65014: PPUSH
65015: CALL_OW 69
65019: IN
65020: ST_TO_ADDR
// end ;
65021: LD_VAR 0 2
65025: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65026: LD_INT 0
65028: PPUSH
65029: PPUSH
// list := [ ] ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: EMPTY
65036: ST_TO_ADDR
// case d of 0 :
65037: LD_VAR 0 3
65041: PUSH
65042: LD_INT 0
65044: DOUBLE
65045: EQUAL
65046: IFTRUE 65050
65048: GO 65183
65050: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65051: LD_ADDR_VAR 0 5
65055: PUSH
65056: LD_VAR 0 1
65060: PUSH
65061: LD_INT 4
65063: MINUS
65064: PUSH
65065: LD_VAR 0 2
65069: PUSH
65070: LD_INT 4
65072: MINUS
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: PUSH
65082: LD_VAR 0 1
65086: PUSH
65087: LD_INT 3
65089: MINUS
65090: PUSH
65091: LD_VAR 0 2
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: PLUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 4
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_INT 3
65133: PLUS
65134: PUSH
65135: LD_VAR 0 2
65139: PUSH
65140: LD_INT 3
65142: PLUS
65143: PUSH
65144: LD_INT 5
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: PUSH
65152: LD_VAR 0 1
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: PLUS
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: ST_TO_ADDR
// end ; 1 :
65181: GO 65881
65183: LD_INT 1
65185: DOUBLE
65186: EQUAL
65187: IFTRUE 65191
65189: GO 65324
65191: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65192: LD_ADDR_VAR 0 5
65196: PUSH
65197: LD_VAR 0 1
65201: PUSH
65202: LD_VAR 0 2
65206: PUSH
65207: LD_INT 4
65209: MINUS
65210: PUSH
65211: LD_INT 3
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: LD_VAR 0 1
65223: PUSH
65224: LD_INT 3
65226: MINUS
65227: PUSH
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 3
65235: MINUS
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 4
65252: MINUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_INT 3
65279: PLUS
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 4
65296: PLUS
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 4
65305: PLUS
65306: PUSH
65307: LD_INT 5
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: ST_TO_ADDR
// end ; 2 :
65322: GO 65881
65324: LD_INT 2
65326: DOUBLE
65327: EQUAL
65328: IFTRUE 65332
65330: GO 65461
65332: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65333: LD_ADDR_VAR 0 5
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_VAR 0 2
65347: PUSH
65348: LD_INT 3
65350: MINUS
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_INT 4
65367: PLUS
65368: PUSH
65369: LD_VAR 0 2
65373: PUSH
65374: LD_INT 4
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_VAR 0 2
65391: PUSH
65392: LD_INT 4
65394: PLUS
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_INT 3
65411: MINUS
65412: PUSH
65413: LD_VAR 0 2
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: PUSH
65426: LD_VAR 0 1
65430: PUSH
65431: LD_INT 4
65433: MINUS
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 4
65442: MINUS
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// end ; 3 :
65459: GO 65881
65461: LD_INT 3
65463: DOUBLE
65464: EQUAL
65465: IFTRUE 65469
65467: GO 65602
65469: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65470: LD_ADDR_VAR 0 5
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: LD_INT 3
65482: PLUS
65483: PUSH
65484: LD_VAR 0 2
65488: PUSH
65489: LD_INT 4
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: LD_VAR 0 1
65501: PUSH
65502: LD_INT 4
65504: PLUS
65505: PUSH
65506: LD_VAR 0 2
65510: PUSH
65511: LD_INT 4
65513: PLUS
65514: PUSH
65515: LD_INT 5
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: LIST
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 4
65530: MINUS
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_VAR 0 2
65554: PUSH
65555: LD_INT 4
65557: MINUS
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_INT 3
65574: MINUS
65575: PUSH
65576: LD_VAR 0 2
65580: PUSH
65581: LD_INT 3
65583: MINUS
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: ST_TO_ADDR
// end ; 4 :
65600: GO 65881
65602: LD_INT 4
65604: DOUBLE
65605: EQUAL
65606: IFTRUE 65610
65608: GO 65743
65610: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65611: LD_ADDR_VAR 0 5
65615: PUSH
65616: LD_VAR 0 1
65620: PUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_INT 4
65628: PLUS
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: LD_INT 3
65645: PLUS
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: LD_INT 3
65654: PLUS
65655: PUSH
65656: LD_INT 5
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: PUSH
65664: LD_VAR 0 1
65668: PUSH
65669: LD_INT 4
65671: PLUS
65672: PUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_INT 4
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_VAR 0 2
65695: PUSH
65696: LD_INT 3
65698: MINUS
65699: PUSH
65700: LD_INT 3
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_INT 4
65715: MINUS
65716: PUSH
65717: LD_VAR 0 2
65721: PUSH
65722: LD_INT 4
65724: MINUS
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: ST_TO_ADDR
// end ; 5 :
65741: GO 65881
65743: LD_INT 5
65745: DOUBLE
65746: EQUAL
65747: IFTRUE 65751
65749: GO 65880
65751: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65752: LD_ADDR_VAR 0 5
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 4
65764: MINUS
65765: PUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_VAR 0 2
65788: PUSH
65789: LD_INT 4
65791: MINUS
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_INT 4
65808: PLUS
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_INT 4
65817: PLUS
65818: PUSH
65819: LD_INT 5
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: LD_VAR 0 1
65831: PUSH
65832: LD_INT 3
65834: PLUS
65835: PUSH
65836: LD_VAR 0 2
65840: PUSH
65841: LD_INT 4
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_VAR 0 2
65858: PUSH
65859: LD_INT 3
65861: PLUS
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// end ; end ;
65878: GO 65881
65880: POP
// result := list ;
65881: LD_ADDR_VAR 0 4
65885: PUSH
65886: LD_VAR 0 5
65890: ST_TO_ADDR
// end ;
65891: LD_VAR 0 4
65895: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65896: LD_INT 0
65898: PPUSH
65899: PPUSH
65900: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65901: LD_VAR 0 1
65905: NOT
65906: PUSH
65907: LD_VAR 0 2
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: LD_INT 4
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: IN
65930: NOT
65931: OR
65932: IFFALSE 65936
// exit ;
65934: GO 66028
// tmp := [ ] ;
65936: LD_ADDR_VAR 0 5
65940: PUSH
65941: EMPTY
65942: ST_TO_ADDR
// for i in units do
65943: LD_ADDR_VAR 0 4
65947: PUSH
65948: LD_VAR 0 1
65952: PUSH
65953: FOR_IN
65954: IFFALSE 65997
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65956: LD_ADDR_VAR 0 5
65960: PUSH
65961: LD_VAR 0 5
65965: PPUSH
65966: LD_VAR 0 5
65970: PUSH
65971: LD_INT 1
65973: PLUS
65974: PPUSH
65975: LD_VAR 0 4
65979: PPUSH
65980: LD_VAR 0 2
65984: PPUSH
65985: CALL_OW 259
65989: PPUSH
65990: CALL_OW 2
65994: ST_TO_ADDR
65995: GO 65953
65997: POP
65998: POP
// if not tmp then
65999: LD_VAR 0 5
66003: NOT
66004: IFFALSE 66008
// exit ;
66006: GO 66028
// result := SortListByListDesc ( units , tmp ) ;
66008: LD_ADDR_VAR 0 3
66012: PUSH
66013: LD_VAR 0 1
66017: PPUSH
66018: LD_VAR 0 5
66022: PPUSH
66023: CALL_OW 77
66027: ST_TO_ADDR
// end ;
66028: LD_VAR 0 3
66032: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66033: LD_INT 0
66035: PPUSH
66036: PPUSH
66037: PPUSH
// result := false ;
66038: LD_ADDR_VAR 0 3
66042: PUSH
66043: LD_INT 0
66045: ST_TO_ADDR
// x := GetX ( building ) ;
66046: LD_ADDR_VAR 0 4
66050: PUSH
66051: LD_VAR 0 2
66055: PPUSH
66056: CALL_OW 250
66060: ST_TO_ADDR
// y := GetY ( building ) ;
66061: LD_ADDR_VAR 0 5
66065: PUSH
66066: LD_VAR 0 2
66070: PPUSH
66071: CALL_OW 251
66075: ST_TO_ADDR
// if not building or not x or not y then
66076: LD_VAR 0 2
66080: NOT
66081: PUSH
66082: LD_VAR 0 4
66086: NOT
66087: OR
66088: PUSH
66089: LD_VAR 0 5
66093: NOT
66094: OR
66095: IFFALSE 66099
// exit ;
66097: GO 66191
// if GetTaskList ( unit ) then
66099: LD_VAR 0 1
66103: PPUSH
66104: CALL_OW 437
66108: IFFALSE 66191
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66110: LD_STRING e
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: CALL_OW 437
66122: PUSH
66123: LD_INT 1
66125: ARRAY
66126: PUSH
66127: LD_INT 1
66129: ARRAY
66130: EQUAL
66131: PUSH
66132: LD_VAR 0 4
66136: PUSH
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 437
66146: PUSH
66147: LD_INT 1
66149: ARRAY
66150: PUSH
66151: LD_INT 2
66153: ARRAY
66154: EQUAL
66155: AND
66156: PUSH
66157: LD_VAR 0 5
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: CALL_OW 437
66171: PUSH
66172: LD_INT 1
66174: ARRAY
66175: PUSH
66176: LD_INT 3
66178: ARRAY
66179: EQUAL
66180: AND
66181: IFFALSE 66191
// result := true end ;
66183: LD_ADDR_VAR 0 3
66187: PUSH
66188: LD_INT 1
66190: ST_TO_ADDR
// end ;
66191: LD_VAR 0 3
66195: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66196: LD_INT 0
66198: PPUSH
// result := false ;
66199: LD_ADDR_VAR 0 4
66203: PUSH
66204: LD_INT 0
66206: ST_TO_ADDR
// if GetTaskList ( unit ) then
66207: LD_VAR 0 1
66211: PPUSH
66212: CALL_OW 437
66216: IFFALSE 66299
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66218: LD_STRING M
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: CALL_OW 437
66230: PUSH
66231: LD_INT 1
66233: ARRAY
66234: PUSH
66235: LD_INT 1
66237: ARRAY
66238: EQUAL
66239: PUSH
66240: LD_VAR 0 2
66244: PUSH
66245: LD_VAR 0 1
66249: PPUSH
66250: CALL_OW 437
66254: PUSH
66255: LD_INT 1
66257: ARRAY
66258: PUSH
66259: LD_INT 2
66261: ARRAY
66262: EQUAL
66263: AND
66264: PUSH
66265: LD_VAR 0 3
66269: PUSH
66270: LD_VAR 0 1
66274: PPUSH
66275: CALL_OW 437
66279: PUSH
66280: LD_INT 1
66282: ARRAY
66283: PUSH
66284: LD_INT 3
66286: ARRAY
66287: EQUAL
66288: AND
66289: IFFALSE 66299
// result := true ;
66291: LD_ADDR_VAR 0 4
66295: PUSH
66296: LD_INT 1
66298: ST_TO_ADDR
// end ; end ;
66299: LD_VAR 0 4
66303: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66304: LD_INT 0
66306: PPUSH
66307: PPUSH
66308: PPUSH
66309: PPUSH
// if not unit or not area then
66310: LD_VAR 0 1
66314: NOT
66315: PUSH
66316: LD_VAR 0 2
66320: NOT
66321: OR
66322: IFFALSE 66326
// exit ;
66324: GO 66490
// tmp := AreaToList ( area , i ) ;
66326: LD_ADDR_VAR 0 6
66330: PUSH
66331: LD_VAR 0 2
66335: PPUSH
66336: LD_VAR 0 5
66340: PPUSH
66341: CALL_OW 517
66345: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66346: LD_ADDR_VAR 0 5
66350: PUSH
66351: DOUBLE
66352: LD_INT 1
66354: DEC
66355: ST_TO_ADDR
66356: LD_VAR 0 6
66360: PUSH
66361: LD_INT 1
66363: ARRAY
66364: PUSH
66365: FOR_TO
66366: IFFALSE 66488
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66368: LD_ADDR_VAR 0 7
66372: PUSH
66373: LD_VAR 0 6
66377: PUSH
66378: LD_INT 1
66380: ARRAY
66381: PUSH
66382: LD_VAR 0 5
66386: ARRAY
66387: PUSH
66388: LD_VAR 0 6
66392: PUSH
66393: LD_INT 2
66395: ARRAY
66396: PUSH
66397: LD_VAR 0 5
66401: ARRAY
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66407: LD_VAR 0 7
66411: PUSH
66412: LD_INT 1
66414: ARRAY
66415: PPUSH
66416: LD_VAR 0 7
66420: PUSH
66421: LD_INT 2
66423: ARRAY
66424: PPUSH
66425: CALL_OW 428
66429: PUSH
66430: LD_INT 0
66432: EQUAL
66433: IFFALSE 66486
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66435: LD_VAR 0 1
66439: PPUSH
66440: LD_VAR 0 7
66444: PUSH
66445: LD_INT 1
66447: ARRAY
66448: PPUSH
66449: LD_VAR 0 7
66453: PUSH
66454: LD_INT 2
66456: ARRAY
66457: PPUSH
66458: LD_VAR 0 3
66462: PPUSH
66463: CALL_OW 48
// result := IsPlaced ( unit ) ;
66467: LD_ADDR_VAR 0 4
66471: PUSH
66472: LD_VAR 0 1
66476: PPUSH
66477: CALL_OW 305
66481: ST_TO_ADDR
// exit ;
66482: POP
66483: POP
66484: GO 66490
// end ; end ;
66486: GO 66365
66488: POP
66489: POP
// end ;
66490: LD_VAR 0 4
66494: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66495: LD_INT 0
66497: PPUSH
66498: PPUSH
66499: PPUSH
// if not side or side > 8 then
66500: LD_VAR 0 1
66504: NOT
66505: PUSH
66506: LD_VAR 0 1
66510: PUSH
66511: LD_INT 8
66513: GREATER
66514: OR
66515: IFFALSE 66519
// exit ;
66517: GO 66706
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66519: LD_ADDR_VAR 0 4
66523: PUSH
66524: LD_INT 22
66526: PUSH
66527: LD_VAR 0 1
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 21
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PPUSH
66550: CALL_OW 69
66554: ST_TO_ADDR
// if not tmp then
66555: LD_VAR 0 4
66559: NOT
66560: IFFALSE 66564
// exit ;
66562: GO 66706
// enable_addtolog := true ;
66564: LD_ADDR_OWVAR 81
66568: PUSH
66569: LD_INT 1
66571: ST_TO_ADDR
// AddToLog ( [ ) ;
66572: LD_STRING [
66574: PPUSH
66575: CALL_OW 561
// for i in tmp do
66579: LD_ADDR_VAR 0 3
66583: PUSH
66584: LD_VAR 0 4
66588: PUSH
66589: FOR_IN
66590: IFFALSE 66697
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66592: LD_STRING [
66594: PUSH
66595: LD_VAR 0 3
66599: PPUSH
66600: CALL_OW 266
66604: STR
66605: PUSH
66606: LD_STRING , 
66608: STR
66609: PUSH
66610: LD_VAR 0 3
66614: PPUSH
66615: CALL_OW 250
66619: STR
66620: PUSH
66621: LD_STRING , 
66623: STR
66624: PUSH
66625: LD_VAR 0 3
66629: PPUSH
66630: CALL_OW 251
66634: STR
66635: PUSH
66636: LD_STRING , 
66638: STR
66639: PUSH
66640: LD_VAR 0 3
66644: PPUSH
66645: CALL_OW 254
66649: STR
66650: PUSH
66651: LD_STRING , 
66653: STR
66654: PUSH
66655: LD_VAR 0 3
66659: PPUSH
66660: LD_INT 1
66662: PPUSH
66663: CALL_OW 268
66667: STR
66668: PUSH
66669: LD_STRING , 
66671: STR
66672: PUSH
66673: LD_VAR 0 3
66677: PPUSH
66678: LD_INT 2
66680: PPUSH
66681: CALL_OW 268
66685: STR
66686: PUSH
66687: LD_STRING ],
66689: STR
66690: PPUSH
66691: CALL_OW 561
// end ;
66695: GO 66589
66697: POP
66698: POP
// AddToLog ( ]; ) ;
66699: LD_STRING ];
66701: PPUSH
66702: CALL_OW 561
// end ;
66706: LD_VAR 0 2
66710: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66711: LD_INT 0
66713: PPUSH
66714: PPUSH
66715: PPUSH
66716: PPUSH
66717: PPUSH
// if not area or not rate or not max then
66718: LD_VAR 0 1
66722: NOT
66723: PUSH
66724: LD_VAR 0 2
66728: NOT
66729: OR
66730: PUSH
66731: LD_VAR 0 4
66735: NOT
66736: OR
66737: IFFALSE 66741
// exit ;
66739: GO 66933
// while 1 do
66741: LD_INT 1
66743: IFFALSE 66933
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66745: LD_ADDR_VAR 0 9
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: LD_INT 1
66757: PPUSH
66758: CALL_OW 287
66762: PUSH
66763: LD_INT 10
66765: MUL
66766: ST_TO_ADDR
// r := rate / 10 ;
66767: LD_ADDR_VAR 0 7
66771: PUSH
66772: LD_VAR 0 2
66776: PUSH
66777: LD_INT 10
66779: DIVREAL
66780: ST_TO_ADDR
// time := 1 1$00 ;
66781: LD_ADDR_VAR 0 8
66785: PUSH
66786: LD_INT 2100
66788: ST_TO_ADDR
// if amount < min then
66789: LD_VAR 0 9
66793: PUSH
66794: LD_VAR 0 3
66798: LESS
66799: IFFALSE 66817
// r := r * 2 else
66801: LD_ADDR_VAR 0 7
66805: PUSH
66806: LD_VAR 0 7
66810: PUSH
66811: LD_INT 2
66813: MUL
66814: ST_TO_ADDR
66815: GO 66843
// if amount > max then
66817: LD_VAR 0 9
66821: PUSH
66822: LD_VAR 0 4
66826: GREATER
66827: IFFALSE 66843
// r := r / 2 ;
66829: LD_ADDR_VAR 0 7
66833: PUSH
66834: LD_VAR 0 7
66838: PUSH
66839: LD_INT 2
66841: DIVREAL
66842: ST_TO_ADDR
// time := time / r ;
66843: LD_ADDR_VAR 0 8
66847: PUSH
66848: LD_VAR 0 8
66852: PUSH
66853: LD_VAR 0 7
66857: DIVREAL
66858: ST_TO_ADDR
// if time < 0 then
66859: LD_VAR 0 8
66863: PUSH
66864: LD_INT 0
66866: LESS
66867: IFFALSE 66884
// time := time * - 1 ;
66869: LD_ADDR_VAR 0 8
66873: PUSH
66874: LD_VAR 0 8
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: MUL
66883: ST_TO_ADDR
// wait ( time ) ;
66884: LD_VAR 0 8
66888: PPUSH
66889: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66893: LD_INT 35
66895: PPUSH
66896: LD_INT 875
66898: PPUSH
66899: CALL_OW 12
66903: PPUSH
66904: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66908: LD_INT 1
66910: PPUSH
66911: LD_INT 5
66913: PPUSH
66914: CALL_OW 12
66918: PPUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_INT 1
66926: PPUSH
66927: CALL_OW 55
// end ;
66931: GO 66741
// end ;
66933: LD_VAR 0 5
66937: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66938: LD_INT 0
66940: PPUSH
66941: PPUSH
66942: PPUSH
66943: PPUSH
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
// if not turrets or not factories then
66948: LD_VAR 0 1
66952: NOT
66953: PUSH
66954: LD_VAR 0 2
66958: NOT
66959: OR
66960: IFFALSE 66964
// exit ;
66962: GO 67271
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66964: LD_ADDR_VAR 0 10
66968: PUSH
66969: LD_INT 5
66971: PUSH
66972: LD_INT 6
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 5
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 24
67006: PUSH
67007: LD_INT 25
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 23
67016: PUSH
67017: LD_INT 27
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 42
67030: PUSH
67031: LD_INT 43
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 44
67040: PUSH
67041: LD_INT 46
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 45
67050: PUSH
67051: LD_INT 47
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// result := [ ] ;
67068: LD_ADDR_VAR 0 3
67072: PUSH
67073: EMPTY
67074: ST_TO_ADDR
// for i in turrets do
67075: LD_ADDR_VAR 0 4
67079: PUSH
67080: LD_VAR 0 1
67084: PUSH
67085: FOR_IN
67086: IFFALSE 67269
// begin nat := GetNation ( i ) ;
67088: LD_ADDR_VAR 0 7
67092: PUSH
67093: LD_VAR 0 4
67097: PPUSH
67098: CALL_OW 248
67102: ST_TO_ADDR
// weapon := 0 ;
67103: LD_ADDR_VAR 0 8
67107: PUSH
67108: LD_INT 0
67110: ST_TO_ADDR
// if not nat then
67111: LD_VAR 0 7
67115: NOT
67116: IFFALSE 67120
// continue ;
67118: GO 67085
// for j in list [ nat ] do
67120: LD_ADDR_VAR 0 5
67124: PUSH
67125: LD_VAR 0 10
67129: PUSH
67130: LD_VAR 0 7
67134: ARRAY
67135: PUSH
67136: FOR_IN
67137: IFFALSE 67178
// if GetBWeapon ( i ) = j [ 1 ] then
67139: LD_VAR 0 4
67143: PPUSH
67144: CALL_OW 269
67148: PUSH
67149: LD_VAR 0 5
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: EQUAL
67158: IFFALSE 67176
// begin weapon := j [ 2 ] ;
67160: LD_ADDR_VAR 0 8
67164: PUSH
67165: LD_VAR 0 5
67169: PUSH
67170: LD_INT 2
67172: ARRAY
67173: ST_TO_ADDR
// break ;
67174: GO 67178
// end ;
67176: GO 67136
67178: POP
67179: POP
// if not weapon then
67180: LD_VAR 0 8
67184: NOT
67185: IFFALSE 67189
// continue ;
67187: GO 67085
// for k in factories do
67189: LD_ADDR_VAR 0 6
67193: PUSH
67194: LD_VAR 0 2
67198: PUSH
67199: FOR_IN
67200: IFFALSE 67265
// begin weapons := AvailableWeaponList ( k ) ;
67202: LD_ADDR_VAR 0 9
67206: PUSH
67207: LD_VAR 0 6
67211: PPUSH
67212: CALL_OW 478
67216: ST_TO_ADDR
// if not weapons then
67217: LD_VAR 0 9
67221: NOT
67222: IFFALSE 67226
// continue ;
67224: GO 67199
// if weapon in weapons then
67226: LD_VAR 0 8
67230: PUSH
67231: LD_VAR 0 9
67235: IN
67236: IFFALSE 67263
// begin result := [ i , weapon ] ;
67238: LD_ADDR_VAR 0 3
67242: PUSH
67243: LD_VAR 0 4
67247: PUSH
67248: LD_VAR 0 8
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// exit ;
67257: POP
67258: POP
67259: POP
67260: POP
67261: GO 67271
// end ; end ;
67263: GO 67199
67265: POP
67266: POP
// end ;
67267: GO 67085
67269: POP
67270: POP
// end ;
67271: LD_VAR 0 3
67275: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67276: LD_INT 0
67278: PPUSH
// if not side or side > 8 then
67279: LD_VAR 0 3
67283: NOT
67284: PUSH
67285: LD_VAR 0 3
67289: PUSH
67290: LD_INT 8
67292: GREATER
67293: OR
67294: IFFALSE 67298
// exit ;
67296: GO 67357
// if not range then
67298: LD_VAR 0 4
67302: NOT
67303: IFFALSE 67314
// range := - 12 ;
67305: LD_ADDR_VAR 0 4
67309: PUSH
67310: LD_INT 12
67312: NEG
67313: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67314: LD_VAR 0 1
67318: PPUSH
67319: LD_VAR 0 2
67323: PPUSH
67324: LD_VAR 0 3
67328: PPUSH
67329: LD_VAR 0 4
67333: PPUSH
67334: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67338: LD_VAR 0 1
67342: PPUSH
67343: LD_VAR 0 2
67347: PPUSH
67348: LD_VAR 0 3
67352: PPUSH
67353: CALL_OW 331
// end ;
67357: LD_VAR 0 5
67361: RET
// export function Video ( mode ) ; begin
67362: LD_INT 0
67364: PPUSH
// ingame_video = mode ;
67365: LD_ADDR_OWVAR 52
67369: PUSH
67370: LD_VAR 0 1
67374: ST_TO_ADDR
// interface_hidden = mode ;
67375: LD_ADDR_OWVAR 54
67379: PUSH
67380: LD_VAR 0 1
67384: ST_TO_ADDR
// end ;
67385: LD_VAR 0 2
67389: RET
// export function Join ( array , element ) ; begin
67390: LD_INT 0
67392: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67393: LD_ADDR_VAR 0 3
67397: PUSH
67398: LD_VAR 0 1
67402: PPUSH
67403: LD_VAR 0 1
67407: PUSH
67408: LD_INT 1
67410: PLUS
67411: PPUSH
67412: LD_VAR 0 2
67416: PPUSH
67417: CALL_OW 1
67421: ST_TO_ADDR
// end ;
67422: LD_VAR 0 3
67426: RET
// export function JoinUnion ( array , element ) ; begin
67427: LD_INT 0
67429: PPUSH
// result := array union element ;
67430: LD_ADDR_VAR 0 3
67434: PUSH
67435: LD_VAR 0 1
67439: PUSH
67440: LD_VAR 0 2
67444: UNION
67445: ST_TO_ADDR
// end ;
67446: LD_VAR 0 3
67450: RET
// export function GetBehemoths ( side ) ; begin
67451: LD_INT 0
67453: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67454: LD_ADDR_VAR 0 2
67458: PUSH
67459: LD_INT 22
67461: PUSH
67462: LD_VAR 0 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 31
67473: PUSH
67474: LD_INT 25
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PPUSH
67485: CALL_OW 69
67489: ST_TO_ADDR
// end ;
67490: LD_VAR 0 2
67494: RET
// export function Shuffle ( array ) ; var i , index ; begin
67495: LD_INT 0
67497: PPUSH
67498: PPUSH
67499: PPUSH
// result := [ ] ;
67500: LD_ADDR_VAR 0 2
67504: PUSH
67505: EMPTY
67506: ST_TO_ADDR
// if not array then
67507: LD_VAR 0 1
67511: NOT
67512: IFFALSE 67516
// exit ;
67514: GO 67615
// Randomize ;
67516: CALL_OW 10
// for i = array downto 1 do
67520: LD_ADDR_VAR 0 3
67524: PUSH
67525: DOUBLE
67526: LD_VAR 0 1
67530: INC
67531: ST_TO_ADDR
67532: LD_INT 1
67534: PUSH
67535: FOR_DOWNTO
67536: IFFALSE 67613
// begin index := rand ( 1 , array ) ;
67538: LD_ADDR_VAR 0 4
67542: PUSH
67543: LD_INT 1
67545: PPUSH
67546: LD_VAR 0 1
67550: PPUSH
67551: CALL_OW 12
67555: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67556: LD_ADDR_VAR 0 2
67560: PUSH
67561: LD_VAR 0 2
67565: PPUSH
67566: LD_VAR 0 2
67570: PUSH
67571: LD_INT 1
67573: PLUS
67574: PPUSH
67575: LD_VAR 0 1
67579: PUSH
67580: LD_VAR 0 4
67584: ARRAY
67585: PPUSH
67586: CALL_OW 2
67590: ST_TO_ADDR
// array := Delete ( array , index ) ;
67591: LD_ADDR_VAR 0 1
67595: PUSH
67596: LD_VAR 0 1
67600: PPUSH
67601: LD_VAR 0 4
67605: PPUSH
67606: CALL_OW 3
67610: ST_TO_ADDR
// end ;
67611: GO 67535
67613: POP
67614: POP
// end ;
67615: LD_VAR 0 2
67619: RET
// export function GetBaseMaterials ( base ) ; begin
67620: LD_INT 0
67622: PPUSH
// result := [ 0 , 0 , 0 ] ;
67623: LD_ADDR_VAR 0 2
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// if not base then
67642: LD_VAR 0 1
67646: NOT
67647: IFFALSE 67651
// exit ;
67649: GO 67700
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67651: LD_ADDR_VAR 0 2
67655: PUSH
67656: LD_VAR 0 1
67660: PPUSH
67661: LD_INT 1
67663: PPUSH
67664: CALL_OW 275
67668: PUSH
67669: LD_VAR 0 1
67673: PPUSH
67674: LD_INT 2
67676: PPUSH
67677: CALL_OW 275
67681: PUSH
67682: LD_VAR 0 1
67686: PPUSH
67687: LD_INT 3
67689: PPUSH
67690: CALL_OW 275
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// end ;
67700: LD_VAR 0 2
67704: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67705: LD_INT 0
67707: PPUSH
67708: PPUSH
// result := array ;
67709: LD_ADDR_VAR 0 3
67713: PUSH
67714: LD_VAR 0 1
67718: ST_TO_ADDR
// if size > 0 then
67719: LD_VAR 0 2
67723: PUSH
67724: LD_INT 0
67726: GREATER
67727: IFFALSE 67773
// for i := array downto size do
67729: LD_ADDR_VAR 0 4
67733: PUSH
67734: DOUBLE
67735: LD_VAR 0 1
67739: INC
67740: ST_TO_ADDR
67741: LD_VAR 0 2
67745: PUSH
67746: FOR_DOWNTO
67747: IFFALSE 67771
// result := Delete ( result , result ) ;
67749: LD_ADDR_VAR 0 3
67753: PUSH
67754: LD_VAR 0 3
67758: PPUSH
67759: LD_VAR 0 3
67763: PPUSH
67764: CALL_OW 3
67768: ST_TO_ADDR
67769: GO 67746
67771: POP
67772: POP
// end ;
67773: LD_VAR 0 3
67777: RET
// export function ComExit ( unit ) ; var tmp ; begin
67778: LD_INT 0
67780: PPUSH
67781: PPUSH
// if not IsInUnit ( unit ) then
67782: LD_VAR 0 1
67786: PPUSH
67787: CALL_OW 310
67791: NOT
67792: IFFALSE 67796
// exit ;
67794: GO 67856
// tmp := IsInUnit ( unit ) ;
67796: LD_ADDR_VAR 0 3
67800: PUSH
67801: LD_VAR 0 1
67805: PPUSH
67806: CALL_OW 310
67810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67811: LD_VAR 0 3
67815: PPUSH
67816: CALL_OW 247
67820: PUSH
67821: LD_INT 2
67823: EQUAL
67824: IFFALSE 67837
// ComExitVehicle ( unit ) else
67826: LD_VAR 0 1
67830: PPUSH
67831: CALL_OW 121
67835: GO 67846
// ComExitBuilding ( unit ) ;
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 122
// result := tmp ;
67846: LD_ADDR_VAR 0 2
67850: PUSH
67851: LD_VAR 0 3
67855: ST_TO_ADDR
// end ;
67856: LD_VAR 0 2
67860: RET
// export function ComExitAll ( units ) ; var i ; begin
67861: LD_INT 0
67863: PPUSH
67864: PPUSH
// if not units then
67865: LD_VAR 0 1
67869: NOT
67870: IFFALSE 67874
// exit ;
67872: GO 67900
// for i in units do
67874: LD_ADDR_VAR 0 3
67878: PUSH
67879: LD_VAR 0 1
67883: PUSH
67884: FOR_IN
67885: IFFALSE 67898
// ComExit ( i ) ;
67887: LD_VAR 0 3
67891: PPUSH
67892: CALL 67778 0 1
67896: GO 67884
67898: POP
67899: POP
// end ;
67900: LD_VAR 0 2
67904: RET
// export function ResetHc ; begin
67905: LD_INT 0
67907: PPUSH
// InitHc ;
67908: CALL_OW 19
// hc_importance := 0 ;
67912: LD_ADDR_OWVAR 32
67916: PUSH
67917: LD_INT 0
67919: ST_TO_ADDR
// end ;
67920: LD_VAR 0 1
67924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67930: LD_ADDR_VAR 0 6
67934: PUSH
67935: LD_VAR 0 1
67939: PUSH
67940: LD_VAR 0 3
67944: PLUS
67945: PUSH
67946: LD_INT 2
67948: DIV
67949: ST_TO_ADDR
// if _x < 0 then
67950: LD_VAR 0 6
67954: PUSH
67955: LD_INT 0
67957: LESS
67958: IFFALSE 67975
// _x := _x * - 1 ;
67960: LD_ADDR_VAR 0 6
67964: PUSH
67965: LD_VAR 0 6
67969: PUSH
67970: LD_INT 1
67972: NEG
67973: MUL
67974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67975: LD_ADDR_VAR 0 7
67979: PUSH
67980: LD_VAR 0 2
67984: PUSH
67985: LD_VAR 0 4
67989: PLUS
67990: PUSH
67991: LD_INT 2
67993: DIV
67994: ST_TO_ADDR
// if _y < 0 then
67995: LD_VAR 0 7
67999: PUSH
68000: LD_INT 0
68002: LESS
68003: IFFALSE 68020
// _y := _y * - 1 ;
68005: LD_ADDR_VAR 0 7
68009: PUSH
68010: LD_VAR 0 7
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: MUL
68019: ST_TO_ADDR
// result := [ _x , _y ] ;
68020: LD_ADDR_VAR 0 5
68024: PUSH
68025: LD_VAR 0 6
68029: PUSH
68030: LD_VAR 0 7
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// end ;
68039: LD_VAR 0 5
68043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68044: LD_INT 0
68046: PPUSH
68047: PPUSH
68048: PPUSH
68049: PPUSH
// task := GetTaskList ( unit ) ;
68050: LD_ADDR_VAR 0 7
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 437
68064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68065: LD_VAR 0 7
68069: NOT
68070: PUSH
68071: LD_VAR 0 1
68075: PPUSH
68076: LD_VAR 0 2
68080: PPUSH
68081: CALL_OW 308
68085: NOT
68086: AND
68087: IFFALSE 68091
// exit ;
68089: GO 68209
// if IsInArea ( unit , area ) then
68091: LD_VAR 0 1
68095: PPUSH
68096: LD_VAR 0 2
68100: PPUSH
68101: CALL_OW 308
68105: IFFALSE 68123
// begin ComMoveToArea ( unit , goAway ) ;
68107: LD_VAR 0 1
68111: PPUSH
68112: LD_VAR 0 3
68116: PPUSH
68117: CALL_OW 113
// exit ;
68121: GO 68209
// end ; if task [ 1 ] [ 1 ] <> M then
68123: LD_VAR 0 7
68127: PUSH
68128: LD_INT 1
68130: ARRAY
68131: PUSH
68132: LD_INT 1
68134: ARRAY
68135: PUSH
68136: LD_STRING M
68138: NONEQUAL
68139: IFFALSE 68143
// exit ;
68141: GO 68209
// x := task [ 1 ] [ 2 ] ;
68143: LD_ADDR_VAR 0 5
68147: PUSH
68148: LD_VAR 0 7
68152: PUSH
68153: LD_INT 1
68155: ARRAY
68156: PUSH
68157: LD_INT 2
68159: ARRAY
68160: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68161: LD_ADDR_VAR 0 6
68165: PUSH
68166: LD_VAR 0 7
68170: PUSH
68171: LD_INT 1
68173: ARRAY
68174: PUSH
68175: LD_INT 3
68177: ARRAY
68178: ST_TO_ADDR
// if InArea ( x , y , area ) then
68179: LD_VAR 0 5
68183: PPUSH
68184: LD_VAR 0 6
68188: PPUSH
68189: LD_VAR 0 2
68193: PPUSH
68194: CALL_OW 309
68198: IFFALSE 68209
// ComStop ( unit ) ;
68200: LD_VAR 0 1
68204: PPUSH
68205: CALL_OW 141
// end ;
68209: LD_VAR 0 4
68213: RET
// export function Abs ( value ) ; begin
68214: LD_INT 0
68216: PPUSH
// result := value ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_VAR 0 1
68226: ST_TO_ADDR
// if value < 0 then
68227: LD_VAR 0 1
68231: PUSH
68232: LD_INT 0
68234: LESS
68235: IFFALSE 68252
// result := value * - 1 ;
68237: LD_ADDR_VAR 0 2
68241: PUSH
68242: LD_VAR 0 1
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: MUL
68251: ST_TO_ADDR
// end ;
68252: LD_VAR 0 2
68256: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68257: LD_INT 0
68259: PPUSH
68260: PPUSH
68261: PPUSH
68262: PPUSH
68263: PPUSH
68264: PPUSH
68265: PPUSH
68266: PPUSH
// if not unit or not building then
68267: LD_VAR 0 1
68271: NOT
68272: PUSH
68273: LD_VAR 0 2
68277: NOT
68278: OR
68279: IFFALSE 68283
// exit ;
68281: GO 68509
// x := GetX ( building ) ;
68283: LD_ADDR_VAR 0 4
68287: PUSH
68288: LD_VAR 0 2
68292: PPUSH
68293: CALL_OW 250
68297: ST_TO_ADDR
// y := GetY ( building ) ;
68298: LD_ADDR_VAR 0 6
68302: PUSH
68303: LD_VAR 0 2
68307: PPUSH
68308: CALL_OW 251
68312: ST_TO_ADDR
// d := GetDir ( building ) ;
68313: LD_ADDR_VAR 0 8
68317: PUSH
68318: LD_VAR 0 2
68322: PPUSH
68323: CALL_OW 254
68327: ST_TO_ADDR
// r := 4 ;
68328: LD_ADDR_VAR 0 9
68332: PUSH
68333: LD_INT 4
68335: ST_TO_ADDR
// for i := 1 to 5 do
68336: LD_ADDR_VAR 0 10
68340: PUSH
68341: DOUBLE
68342: LD_INT 1
68344: DEC
68345: ST_TO_ADDR
68346: LD_INT 5
68348: PUSH
68349: FOR_TO
68350: IFFALSE 68507
// begin _x := ShiftX ( x , d , r + i ) ;
68352: LD_ADDR_VAR 0 5
68356: PUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: LD_VAR 0 8
68366: PPUSH
68367: LD_VAR 0 9
68371: PUSH
68372: LD_VAR 0 10
68376: PLUS
68377: PPUSH
68378: CALL_OW 272
68382: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68383: LD_ADDR_VAR 0 7
68387: PUSH
68388: LD_VAR 0 6
68392: PPUSH
68393: LD_VAR 0 8
68397: PPUSH
68398: LD_VAR 0 9
68402: PUSH
68403: LD_VAR 0 10
68407: PLUS
68408: PPUSH
68409: CALL_OW 273
68413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68414: LD_VAR 0 5
68418: PPUSH
68419: LD_VAR 0 7
68423: PPUSH
68424: CALL_OW 488
68428: PUSH
68429: LD_VAR 0 5
68433: PPUSH
68434: LD_VAR 0 7
68438: PPUSH
68439: CALL_OW 428
68443: PPUSH
68444: CALL_OW 247
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: LD_INT 2
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: IN
68459: NOT
68460: AND
68461: IFFALSE 68505
// begin ComMoveXY ( unit , _x , _y ) ;
68463: LD_VAR 0 1
68467: PPUSH
68468: LD_VAR 0 5
68472: PPUSH
68473: LD_VAR 0 7
68477: PPUSH
68478: CALL_OW 111
// result := [ _x , _y ] ;
68482: LD_ADDR_VAR 0 3
68486: PUSH
68487: LD_VAR 0 5
68491: PUSH
68492: LD_VAR 0 7
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// exit ;
68501: POP
68502: POP
68503: GO 68509
// end ; end ;
68505: GO 68349
68507: POP
68508: POP
// end ;
68509: LD_VAR 0 3
68513: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68514: LD_INT 0
68516: PPUSH
68517: PPUSH
68518: PPUSH
// result := 0 ;
68519: LD_ADDR_VAR 0 3
68523: PUSH
68524: LD_INT 0
68526: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68527: LD_VAR 0 1
68531: PUSH
68532: LD_INT 0
68534: LESS
68535: PUSH
68536: LD_VAR 0 1
68540: PUSH
68541: LD_INT 8
68543: GREATER
68544: OR
68545: PUSH
68546: LD_VAR 0 2
68550: PUSH
68551: LD_INT 0
68553: LESS
68554: OR
68555: PUSH
68556: LD_VAR 0 2
68560: PUSH
68561: LD_INT 8
68563: GREATER
68564: OR
68565: IFFALSE 68569
// exit ;
68567: GO 68644
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68569: LD_ADDR_VAR 0 4
68573: PUSH
68574: LD_INT 22
68576: PUSH
68577: LD_VAR 0 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PPUSH
68586: CALL_OW 69
68590: PUSH
68591: FOR_IN
68592: IFFALSE 68642
// begin un := UnitShoot ( i ) ;
68594: LD_ADDR_VAR 0 5
68598: PUSH
68599: LD_VAR 0 4
68603: PPUSH
68604: CALL_OW 504
68608: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68609: LD_VAR 0 5
68613: PPUSH
68614: CALL_OW 255
68618: PUSH
68619: LD_VAR 0 1
68623: EQUAL
68624: IFFALSE 68640
// begin result := un ;
68626: LD_ADDR_VAR 0 3
68630: PUSH
68631: LD_VAR 0 5
68635: ST_TO_ADDR
// exit ;
68636: POP
68637: POP
68638: GO 68644
// end ; end ;
68640: GO 68591
68642: POP
68643: POP
// end ;
68644: LD_VAR 0 3
68648: RET
// export function GetCargoBay ( units ) ; begin
68649: LD_INT 0
68651: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68652: LD_ADDR_VAR 0 2
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: LD_INT 2
68664: PUSH
68665: LD_INT 34
68667: PUSH
68668: LD_INT 12
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 34
68677: PUSH
68678: LD_INT 51
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 34
68687: PUSH
68688: LD_INT 32
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 34
68697: PUSH
68698: LD_EXP 33
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: PPUSH
68714: CALL_OW 72
68718: ST_TO_ADDR
// end ;
68719: LD_VAR 0 2
68723: RET
// export function Negate ( value ) ; begin
68724: LD_INT 0
68726: PPUSH
// result := not value ;
68727: LD_ADDR_VAR 0 2
68731: PUSH
68732: LD_VAR 0 1
68736: NOT
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68743: LD_INT 0
68745: PPUSH
// if x1 = x2 then
68746: LD_VAR 0 1
68750: PUSH
68751: LD_VAR 0 3
68755: EQUAL
68756: IFFALSE 68790
// begin if y1 > y2 then
68758: LD_VAR 0 2
68762: PUSH
68763: LD_VAR 0 4
68767: GREATER
68768: IFFALSE 68780
// result := 0 else
68770: LD_ADDR_VAR 0 5
68774: PUSH
68775: LD_INT 0
68777: ST_TO_ADDR
68778: GO 68788
// result := 3 ;
68780: LD_ADDR_VAR 0 5
68784: PUSH
68785: LD_INT 3
68787: ST_TO_ADDR
// exit ;
68788: GO 68876
// end ; if y1 = y2 then
68790: LD_VAR 0 2
68794: PUSH
68795: LD_VAR 0 4
68799: EQUAL
68800: IFFALSE 68834
// begin if x1 > x2 then
68802: LD_VAR 0 1
68806: PUSH
68807: LD_VAR 0 3
68811: GREATER
68812: IFFALSE 68824
// result := 1 else
68814: LD_ADDR_VAR 0 5
68818: PUSH
68819: LD_INT 1
68821: ST_TO_ADDR
68822: GO 68832
// result := 4 ;
68824: LD_ADDR_VAR 0 5
68828: PUSH
68829: LD_INT 4
68831: ST_TO_ADDR
// exit ;
68832: GO 68876
// end ; if x1 > x2 and y1 > y2 then
68834: LD_VAR 0 1
68838: PUSH
68839: LD_VAR 0 3
68843: GREATER
68844: PUSH
68845: LD_VAR 0 2
68849: PUSH
68850: LD_VAR 0 4
68854: GREATER
68855: AND
68856: IFFALSE 68868
// result := 2 else
68858: LD_ADDR_VAR 0 5
68862: PUSH
68863: LD_INT 2
68865: ST_TO_ADDR
68866: GO 68876
// result := 5 ;
68868: LD_ADDR_VAR 0 5
68872: PUSH
68873: LD_INT 5
68875: ST_TO_ADDR
// end ;
68876: LD_VAR 0 5
68880: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68881: LD_INT 0
68883: PPUSH
68884: PPUSH
// if not driver or not IsInUnit ( driver ) then
68885: LD_VAR 0 1
68889: NOT
68890: PUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: CALL_OW 310
68900: NOT
68901: OR
68902: IFFALSE 68906
// exit ;
68904: GO 68996
// vehicle := IsInUnit ( driver ) ;
68906: LD_ADDR_VAR 0 3
68910: PUSH
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68921: LD_VAR 0 1
68925: PPUSH
68926: LD_STRING \
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: PUSH
68956: LD_STRING E
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_VAR 0 3
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PPUSH
68992: CALL_OW 446
// end ;
68996: LD_VAR 0 2
69000: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69001: LD_INT 0
69003: PPUSH
69004: PPUSH
// if not driver or not IsInUnit ( driver ) then
69005: LD_VAR 0 1
69009: NOT
69010: PUSH
69011: LD_VAR 0 1
69015: PPUSH
69016: CALL_OW 310
69020: NOT
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69116
// vehicle := IsInUnit ( driver ) ;
69026: LD_ADDR_VAR 0 3
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: CALL_OW 310
69040: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69041: LD_VAR 0 1
69045: PPUSH
69046: LD_STRING \
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: PUSH
69076: LD_STRING E
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: LD_VAR 0 3
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: LD_INT 0
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PPUSH
69112: CALL_OW 447
// end ;
69116: LD_VAR 0 2
69120: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69121: LD_INT 0
69123: PPUSH
69124: PPUSH
69125: PPUSH
// tmp := [ ] ;
69126: LD_ADDR_VAR 0 5
69130: PUSH
69131: EMPTY
69132: ST_TO_ADDR
// for i in units do
69133: LD_ADDR_VAR 0 4
69137: PUSH
69138: LD_VAR 0 1
69142: PUSH
69143: FOR_IN
69144: IFFALSE 69182
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69146: LD_ADDR_VAR 0 5
69150: PUSH
69151: LD_VAR 0 5
69155: PPUSH
69156: LD_VAR 0 5
69160: PUSH
69161: LD_INT 1
69163: PLUS
69164: PPUSH
69165: LD_VAR 0 4
69169: PPUSH
69170: CALL_OW 256
69174: PPUSH
69175: CALL_OW 2
69179: ST_TO_ADDR
69180: GO 69143
69182: POP
69183: POP
// if not tmp then
69184: LD_VAR 0 5
69188: NOT
69189: IFFALSE 69193
// exit ;
69191: GO 69241
// if asc then
69193: LD_VAR 0 2
69197: IFFALSE 69221
// result := SortListByListAsc ( units , tmp ) else
69199: LD_ADDR_VAR 0 3
69203: PUSH
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_VAR 0 5
69213: PPUSH
69214: CALL_OW 76
69218: ST_TO_ADDR
69219: GO 69241
// result := SortListByListDesc ( units , tmp ) ;
69221: LD_ADDR_VAR 0 3
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: LD_VAR 0 5
69235: PPUSH
69236: CALL_OW 77
69240: ST_TO_ADDR
// end ;
69241: LD_VAR 0 3
69245: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69246: LD_INT 0
69248: PPUSH
69249: PPUSH
// task := GetTaskList ( mech ) ;
69250: LD_ADDR_VAR 0 4
69254: PUSH
69255: LD_VAR 0 1
69259: PPUSH
69260: CALL_OW 437
69264: ST_TO_ADDR
// if not task then
69265: LD_VAR 0 4
69269: NOT
69270: IFFALSE 69274
// exit ;
69272: GO 69316
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69274: LD_ADDR_VAR 0 3
69278: PUSH
69279: LD_VAR 0 4
69283: PUSH
69284: LD_INT 1
69286: ARRAY
69287: PUSH
69288: LD_INT 1
69290: ARRAY
69291: PUSH
69292: LD_STRING r
69294: EQUAL
69295: PUSH
69296: LD_VAR 0 4
69300: PUSH
69301: LD_INT 1
69303: ARRAY
69304: PUSH
69305: LD_INT 4
69307: ARRAY
69308: PUSH
69309: LD_VAR 0 2
69313: EQUAL
69314: AND
69315: ST_TO_ADDR
// end ;
69316: LD_VAR 0 3
69320: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69321: LD_INT 0
69323: PPUSH
// SetDir ( unit , d ) ;
69324: LD_VAR 0 1
69328: PPUSH
69329: LD_VAR 0 4
69333: PPUSH
69334: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69338: LD_VAR 0 1
69342: PPUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: LD_VAR 0 3
69352: PPUSH
69353: LD_VAR 0 5
69357: PPUSH
69358: CALL_OW 48
// end ;
69362: LD_VAR 0 6
69366: RET
// export function ToNaturalNumber ( number ) ; begin
69367: LD_INT 0
69369: PPUSH
// result := number div 1 ;
69370: LD_ADDR_VAR 0 2
69374: PUSH
69375: LD_VAR 0 1
69379: PUSH
69380: LD_INT 1
69382: DIV
69383: ST_TO_ADDR
// if number < 0 then
69384: LD_VAR 0 1
69388: PUSH
69389: LD_INT 0
69391: LESS
69392: IFFALSE 69402
// result := 0 ;
69394: LD_ADDR_VAR 0 2
69398: PUSH
69399: LD_INT 0
69401: ST_TO_ADDR
// end ;
69402: LD_VAR 0 2
69406: RET
// export function SortByClass ( units , class ) ; var un ; begin
69407: LD_INT 0
69409: PPUSH
69410: PPUSH
// if not units or not class then
69411: LD_VAR 0 1
69415: NOT
69416: PUSH
69417: LD_VAR 0 2
69421: NOT
69422: OR
69423: IFFALSE 69427
// exit ;
69425: GO 69522
// result := [ ] ;
69427: LD_ADDR_VAR 0 3
69431: PUSH
69432: EMPTY
69433: ST_TO_ADDR
// for un in units do
69434: LD_ADDR_VAR 0 4
69438: PUSH
69439: LD_VAR 0 1
69443: PUSH
69444: FOR_IN
69445: IFFALSE 69520
// if GetClass ( un ) = class then
69447: LD_VAR 0 4
69451: PPUSH
69452: CALL_OW 257
69456: PUSH
69457: LD_VAR 0 2
69461: EQUAL
69462: IFFALSE 69489
// result := Insert ( result , 1 , un ) else
69464: LD_ADDR_VAR 0 3
69468: PUSH
69469: LD_VAR 0 3
69473: PPUSH
69474: LD_INT 1
69476: PPUSH
69477: LD_VAR 0 4
69481: PPUSH
69482: CALL_OW 2
69486: ST_TO_ADDR
69487: GO 69518
// result := Replace ( result , result + 1 , un ) ;
69489: LD_ADDR_VAR 0 3
69493: PUSH
69494: LD_VAR 0 3
69498: PPUSH
69499: LD_VAR 0 3
69503: PUSH
69504: LD_INT 1
69506: PLUS
69507: PPUSH
69508: LD_VAR 0 4
69512: PPUSH
69513: CALL_OW 1
69517: ST_TO_ADDR
69518: GO 69444
69520: POP
69521: POP
// end ;
69522: LD_VAR 0 3
69526: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69527: LD_INT 0
69529: PPUSH
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
69534: PPUSH
69535: PPUSH
// result := [ ] ;
69536: LD_ADDR_VAR 0 4
69540: PUSH
69541: EMPTY
69542: ST_TO_ADDR
// if x - r < 0 then
69543: LD_VAR 0 1
69547: PUSH
69548: LD_VAR 0 3
69552: MINUS
69553: PUSH
69554: LD_INT 0
69556: LESS
69557: IFFALSE 69569
// min_x := 0 else
69559: LD_ADDR_VAR 0 8
69563: PUSH
69564: LD_INT 0
69566: ST_TO_ADDR
69567: GO 69585
// min_x := x - r ;
69569: LD_ADDR_VAR 0 8
69573: PUSH
69574: LD_VAR 0 1
69578: PUSH
69579: LD_VAR 0 3
69583: MINUS
69584: ST_TO_ADDR
// if y - r < 0 then
69585: LD_VAR 0 2
69589: PUSH
69590: LD_VAR 0 3
69594: MINUS
69595: PUSH
69596: LD_INT 0
69598: LESS
69599: IFFALSE 69611
// min_y := 0 else
69601: LD_ADDR_VAR 0 7
69605: PUSH
69606: LD_INT 0
69608: ST_TO_ADDR
69609: GO 69627
// min_y := y - r ;
69611: LD_ADDR_VAR 0 7
69615: PUSH
69616: LD_VAR 0 2
69620: PUSH
69621: LD_VAR 0 3
69625: MINUS
69626: ST_TO_ADDR
// max_x := x + r ;
69627: LD_ADDR_VAR 0 9
69631: PUSH
69632: LD_VAR 0 1
69636: PUSH
69637: LD_VAR 0 3
69641: PLUS
69642: ST_TO_ADDR
// max_y := y + r ;
69643: LD_ADDR_VAR 0 10
69647: PUSH
69648: LD_VAR 0 2
69652: PUSH
69653: LD_VAR 0 3
69657: PLUS
69658: ST_TO_ADDR
// for _x = min_x to max_x do
69659: LD_ADDR_VAR 0 5
69663: PUSH
69664: DOUBLE
69665: LD_VAR 0 8
69669: DEC
69670: ST_TO_ADDR
69671: LD_VAR 0 9
69675: PUSH
69676: FOR_TO
69677: IFFALSE 69778
// for _y = min_y to max_y do
69679: LD_ADDR_VAR 0 6
69683: PUSH
69684: DOUBLE
69685: LD_VAR 0 7
69689: DEC
69690: ST_TO_ADDR
69691: LD_VAR 0 10
69695: PUSH
69696: FOR_TO
69697: IFFALSE 69774
// begin if not ValidHex ( _x , _y ) then
69699: LD_VAR 0 5
69703: PPUSH
69704: LD_VAR 0 6
69708: PPUSH
69709: CALL_OW 488
69713: NOT
69714: IFFALSE 69718
// continue ;
69716: GO 69696
// if GetResourceTypeXY ( _x , _y ) then
69718: LD_VAR 0 5
69722: PPUSH
69723: LD_VAR 0 6
69727: PPUSH
69728: CALL_OW 283
69732: IFFALSE 69772
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69734: LD_ADDR_VAR 0 4
69738: PUSH
69739: LD_VAR 0 4
69743: PPUSH
69744: LD_VAR 0 4
69748: PUSH
69749: LD_INT 1
69751: PLUS
69752: PPUSH
69753: LD_VAR 0 5
69757: PUSH
69758: LD_VAR 0 6
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PPUSH
69767: CALL_OW 1
69771: ST_TO_ADDR
// end ;
69772: GO 69696
69774: POP
69775: POP
69776: GO 69676
69778: POP
69779: POP
// end ;
69780: LD_VAR 0 4
69784: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
69789: PPUSH
69790: PPUSH
69791: PPUSH
69792: PPUSH
// if not units then
69793: LD_VAR 0 1
69797: NOT
69798: IFFALSE 69802
// exit ;
69800: GO 70203
// result := UnitFilter ( units , [ f_ok ] ) ;
69802: LD_ADDR_VAR 0 3
69806: PUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: LD_INT 50
69814: PUSH
69815: EMPTY
69816: LIST
69817: PPUSH
69818: CALL_OW 72
69822: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69823: LD_ADDR_VAR 0 7
69827: PUSH
69828: LD_VAR 0 1
69832: PUSH
69833: LD_INT 1
69835: ARRAY
69836: PPUSH
69837: CALL_OW 255
69841: ST_TO_ADDR
// if not result then
69842: LD_VAR 0 3
69846: NOT
69847: IFFALSE 69851
// exit ;
69849: GO 70203
// for i in result do
69851: LD_ADDR_VAR 0 4
69855: PUSH
69856: LD_VAR 0 3
69860: PUSH
69861: FOR_IN
69862: IFFALSE 70201
// begin tag := GetTag ( i ) + 1 ;
69864: LD_ADDR_VAR 0 8
69868: PUSH
69869: LD_VAR 0 4
69873: PPUSH
69874: CALL_OW 110
69878: PUSH
69879: LD_INT 1
69881: PLUS
69882: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69883: LD_ADDR_VAR 0 6
69887: PUSH
69888: LD_VAR 0 4
69892: PPUSH
69893: CALL_OW 250
69897: PPUSH
69898: LD_VAR 0 4
69902: PPUSH
69903: CALL_OW 251
69907: PPUSH
69908: LD_INT 6
69910: PPUSH
69911: CALL 69527 0 3
69915: ST_TO_ADDR
// if cr then
69916: LD_VAR 0 6
69920: IFFALSE 69959
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69922: LD_VAR 0 4
69926: PPUSH
69927: LD_VAR 0 6
69931: PUSH
69932: LD_INT 1
69934: ARRAY
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PPUSH
69940: LD_VAR 0 6
69944: PUSH
69945: LD_INT 1
69947: ARRAY
69948: PUSH
69949: LD_INT 2
69951: ARRAY
69952: PPUSH
69953: CALL_OW 116
69957: GO 70199
// if path > tag then
69959: LD_VAR 0 2
69963: PUSH
69964: LD_VAR 0 8
69968: GREATER
69969: IFFALSE 70147
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
69971: LD_ADDR_VAR 0 5
69975: PUSH
69976: LD_INT 81
69978: PUSH
69979: LD_VAR 0 7
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 91
69990: PUSH
69991: LD_VAR 0 4
69995: PUSH
69996: LD_INT 12
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: LIST
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PPUSH
70008: CALL_OW 69
70012: ST_TO_ADDR
// if enemy then
70013: LD_VAR 0 5
70017: IFFALSE 70045
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70019: LD_VAR 0 4
70023: PPUSH
70024: LD_VAR 0 5
70028: PPUSH
70029: LD_VAR 0 4
70033: PPUSH
70034: CALL_OW 74
70038: PPUSH
70039: CALL_OW 115
70043: GO 70145
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70045: LD_VAR 0 4
70049: PPUSH
70050: LD_VAR 0 2
70054: PUSH
70055: LD_VAR 0 8
70059: ARRAY
70060: PUSH
70061: LD_INT 1
70063: ARRAY
70064: PPUSH
70065: LD_VAR 0 2
70069: PUSH
70070: LD_VAR 0 8
70074: ARRAY
70075: PUSH
70076: LD_INT 2
70078: ARRAY
70079: PPUSH
70080: CALL_OW 297
70084: PUSH
70085: LD_INT 6
70087: GREATER
70088: IFFALSE 70131
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70090: LD_VAR 0 4
70094: PPUSH
70095: LD_VAR 0 2
70099: PUSH
70100: LD_VAR 0 8
70104: ARRAY
70105: PUSH
70106: LD_INT 1
70108: ARRAY
70109: PPUSH
70110: LD_VAR 0 2
70114: PUSH
70115: LD_VAR 0 8
70119: ARRAY
70120: PUSH
70121: LD_INT 2
70123: ARRAY
70124: PPUSH
70125: CALL_OW 114
70129: GO 70145
// SetTag ( i , tag ) ;
70131: LD_VAR 0 4
70135: PPUSH
70136: LD_VAR 0 8
70140: PPUSH
70141: CALL_OW 109
// end else
70145: GO 70199
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70147: LD_ADDR_VAR 0 5
70151: PUSH
70152: LD_INT 81
70154: PUSH
70155: LD_VAR 0 7
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PPUSH
70164: CALL_OW 69
70168: ST_TO_ADDR
// if enemy then
70169: LD_VAR 0 5
70173: IFFALSE 70199
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70175: LD_VAR 0 4
70179: PPUSH
70180: LD_VAR 0 5
70184: PPUSH
70185: LD_VAR 0 4
70189: PPUSH
70190: CALL_OW 74
70194: PPUSH
70195: CALL_OW 115
// end ; end ;
70199: GO 69861
70201: POP
70202: POP
// end ; end_of_file
70203: LD_VAR 0 3
70207: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70208: LD_VAR 0 1
70212: PUSH
70213: LD_INT 200
70215: DOUBLE
70216: GREATEREQUAL
70217: IFFALSE 70225
70219: LD_INT 299
70221: DOUBLE
70222: LESSEQUAL
70223: IFTRUE 70227
70225: GO 70259
70227: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70228: LD_VAR 0 1
70232: PPUSH
70233: LD_VAR 0 2
70237: PPUSH
70238: LD_VAR 0 3
70242: PPUSH
70243: LD_VAR 0 4
70247: PPUSH
70248: LD_VAR 0 5
70252: PPUSH
70253: CALL 26770 0 5
70257: GO 70336
70259: LD_INT 300
70261: DOUBLE
70262: GREATEREQUAL
70263: IFFALSE 70271
70265: LD_INT 399
70267: DOUBLE
70268: LESSEQUAL
70269: IFTRUE 70273
70271: GO 70335
70273: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70274: LD_VAR 0 1
70278: PPUSH
70279: LD_VAR 0 2
70283: PPUSH
70284: LD_VAR 0 3
70288: PPUSH
70289: LD_VAR 0 4
70293: PPUSH
70294: LD_VAR 0 5
70298: PPUSH
70299: LD_VAR 0 6
70303: PPUSH
70304: LD_VAR 0 7
70308: PPUSH
70309: LD_VAR 0 8
70313: PPUSH
70314: LD_VAR 0 9
70318: PPUSH
70319: LD_VAR 0 10
70323: PPUSH
70324: LD_VAR 0 11
70328: PPUSH
70329: CALL 24668 0 11
70333: GO 70336
70335: POP
// end ;
70336: PPOPN 11
70338: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70339: LD_VAR 0 1
70343: PPUSH
70344: LD_VAR 0 2
70348: PPUSH
70349: LD_VAR 0 3
70353: PPUSH
70354: LD_VAR 0 4
70358: PPUSH
70359: LD_VAR 0 5
70363: PPUSH
70364: CALL 26762 0 5
// end ; end_of_file
70368: PPOPN 5
70370: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70371: LD_VAR 0 1
70375: PPUSH
70376: LD_VAR 0 2
70380: PPUSH
70381: LD_VAR 0 3
70385: PPUSH
70386: LD_VAR 0 4
70390: PPUSH
70391: LD_VAR 0 5
70395: PPUSH
70396: LD_VAR 0 6
70400: PPUSH
70401: CALL 12863 0 6
// end ;
70405: PPOPN 6
70407: END
